{"sha": "cd35cbcf256b26596fbad2da6c74a0f5c15591e7", "log": "Extract chronologies to constants  ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n-    \n+    private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance();\n+    private static final ISOChronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final GJChronology GJ_DEFAULT = GJChronology.getInstance();\n+    private static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance();\n+    private static final GregorianChronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    private static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance();\n+    private static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance();\n+\n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n                      365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n     //-----------------------------------------------------------------------\n     public void testGet_DateTimeField() {\n         DateMidnight test = new DateMidnight();\n-        assertEquals(1, test.get(ISOChronology.getInstance().era()));\n-        assertEquals(20, test.get(ISOChronology.getInstance().centuryOfEra()));\n-        assertEquals(2, test.get(ISOChronology.getInstance().yearOfCentury()));\n-        assertEquals(2002, test.get(ISOChronology.getInstance().yearOfEra()));\n-        assertEquals(2002, test.get(ISOChronology.getInstance().year()));\n-        assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));\n-        assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));\n-        assertEquals(2002, test.get(ISOChronology.getInstance().weekyear()));\n-        assertEquals(23, test.get(ISOChronology.getInstance().weekOfWeekyear()));\n-        assertEquals(7, test.get(ISOChronology.getInstance().dayOfWeek()));\n-        assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear()));\n-        assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay()));\n-        assertEquals(0, test.get(ISOChronology.getInstance().hourOfHalfday()));\n-        assertEquals(24, test.get(ISOChronology.getInstance().clockhourOfDay()));\n-        assertEquals(12, test.get(ISOChronology.getInstance().clockhourOfHalfday()));\n-        assertEquals(0, test.get(ISOChronology.getInstance().hourOfDay()));\n-        assertEquals(0, test.get(ISOChronology.getInstance().minuteOfHour()));\n-        assertEquals(0, test.get(ISOChronology.getInstance().minuteOfDay()));\n-        assertEquals(0, test.get(ISOChronology.getInstance().secondOfMinute()));\n-        assertEquals(0, test.get(ISOChronology.getInstance().secondOfDay()));\n-        assertEquals(0, test.get(ISOChronology.getInstance().millisOfSecond()));\n-        assertEquals(0, test.get(ISOChronology.getInstance().millisOfDay()));\n+        assertEquals(1, test.get(ISO_DEFAULT.era()));\n+        assertEquals(20, test.get(ISO_DEFAULT.centuryOfEra()));\n+        assertEquals(2, test.get(ISO_DEFAULT.yearOfCentury()));\n+        assertEquals(2002, test.get(ISO_DEFAULT.yearOfEra()));\n+        assertEquals(2002, test.get(ISO_DEFAULT.year()));\n+        assertEquals(6, test.get(ISO_DEFAULT.monthOfYear()));\n+        assertEquals(9, test.get(ISO_DEFAULT.dayOfMonth()));\n+        assertEquals(2002, test.get(ISO_DEFAULT.weekyear()));\n+        assertEquals(23, test.get(ISO_DEFAULT.weekOfWeekyear()));\n+        assertEquals(7, test.get(ISO_DEFAULT.dayOfWeek()));\n+        assertEquals(160, test.get(ISO_DEFAULT.dayOfYear()));\n+        assertEquals(0, test.get(ISO_DEFAULT.halfdayOfDay()));\n+        assertEquals(0, test.get(ISO_DEFAULT.hourOfHalfday()));\n+        assertEquals(24, test.get(ISO_DEFAULT.clockhourOfDay()));\n+        assertEquals(12, test.get(ISO_DEFAULT.clockhourOfHalfday()));\n+        assertEquals(0, test.get(ISO_DEFAULT.hourOfDay()));\n+        assertEquals(0, test.get(ISO_DEFAULT.minuteOfHour()));\n+        assertEquals(0, test.get(ISO_DEFAULT.minuteOfDay()));\n+        assertEquals(0, test.get(ISO_DEFAULT.secondOfMinute()));\n+        assertEquals(0, test.get(ISO_DEFAULT.secondOfDay()));\n+        assertEquals(0, test.get(ISO_DEFAULT.millisOfSecond()));\n+        assertEquals(0, test.get(ISO_DEFAULT.millisOfDay()));\n         try {\n             test.get((DateTimeField) null);\n             fail();\n     public void testGetters() {\n         DateMidnight test = new DateMidnight();\n         \n-        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(ISO_DEFAULT, test.getChronology());\n         assertEquals(LONDON, test.getZone());\n         assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n         \n     }\n \n     public void testWithers() {\n-        DateMidnight test = new DateMidnight(1970, 6, 9, GJChronology.getInstance());\n+        DateMidnight test = new DateMidnight(1970, 6, 9, GJ_DEFAULT);\n         check(test.withYear(2000), 2000, 6, 9);\n         check(test.withMonthOfYear(2), 1970, 2, 9);\n         check(test.withDayOfMonth(2), 1970, 6, 2);\n         \n         assertEquals(false, test1.equals(\"Hello\"));\n         assertEquals(true, test1.equals(new MockInstant()));\n-        assertEquals(false, test1.equals(new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance())));\n+        assertEquals(false, test1.equals(new DateMidnight(TEST_TIME1_UTC, GREGORIAN_DEFAULT)));\n     }\n     \n     class MockInstant extends AbstractInstant {\n             return TEST_TIME1_LONDON;\n         }\n         public Chronology getChronology() {\n-            return ISOChronology.getInstance();\n+            return ISO_DEFAULT;\n         }\n     }\n \n         assertEquals(-1, test1.compareTo(test2));\n         assertEquals(+1, test2.compareTo(test1));\n         \n-        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GregorianChronology.getInstance(PARIS));\n+        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS);\n         assertEquals(-1, test1.compareTo(test3));\n         assertEquals(+1, test3.compareTo(test1));\n         assertEquals(-1, test3.compareTo(test2));  // midnight paris before london\n         assertEquals(false, test1.isEqual(test2));\n         assertEquals(false, test2.isEqual(test1));\n         \n-        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GregorianChronology.getInstance(PARIS));\n+        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS);\n         assertEquals(false, test1.isEqual(test3));\n         assertEquals(false, test3.isEqual(test1));\n         assertEquals(false, test3.isEqual(test2));  // midnight paris before london\n         assertEquals(true, test1.isBefore(test2));\n         assertEquals(false, test2.isBefore(test1));\n         \n-        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GregorianChronology.getInstance(PARIS));\n+        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS);\n         assertEquals(true, test1.isBefore(test3));\n         assertEquals(false, test3.isBefore(test1));\n         assertEquals(true, test3.isBefore(test2));  // midnight paris before london\n         assertEquals(false, test1.isAfter(test2));\n         assertEquals(true, test2.isAfter(test1));\n         \n-        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GregorianChronology.getInstance(PARIS));\n+        DateMidnight test3 = new DateMidnight(TEST_TIME2_UTC, GREGORIAN_PARIS);\n         assertEquals(false, test1.isAfter(test3));\n         assertEquals(true, test3.isAfter(test1));\n         assertEquals(false, test3.isAfter(test2));  // midnight paris before london\n         assertSame(DateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+        assertEquals(ISO_PARIS, result.getChronology());\n     }\n \n     public void testToDateTime_DateTimeZone() {\n \n     public void testToDateTime_Chronology() {\n         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n-        DateTime result = test.toDateTime(ISOChronology.getInstance());\n+        DateTime result = test.toDateTime(ISO_DEFAULT);\n         assertEquals(test.getMillis(), result.getMillis());\n         assertEquals(TEST_TIME1_LONDON, result.getMillis());\n         assertEquals(LONDON, result.getZone());\n \n         test = new DateMidnight(TEST_TIME1_UTC);\n-        result = test.toDateTime(GregorianChronology.getInstance(PARIS));\n+        result = test.toDateTime(GREGORIAN_PARIS);\n         assertEquals(test.getMillis(), result.getMillis());\n         assertEquals(TEST_TIME1_LONDON, result.getMillis());\n-        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());\n-\n-        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));\n+        assertEquals(GREGORIAN_PARIS, result.getChronology());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);\n         result = test.toDateTime((Chronology) null);\n         assertEquals(test.getMillis(), result.getMillis());\n         assertEquals(TEST_TIME1_PARIS, result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n \n         test = new DateMidnight(TEST_TIME1_UTC);\n         result = test.toDateTime((Chronology) null);\n         assertEquals(test.getMillis(), result.getMillis());\n         assertEquals(TEST_TIME1_LONDON, result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n     }\n \n     public void testToMutableDateTime() {\n         DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n         MutableDateTime result = test.toMutableDateTime();\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+        assertEquals(ISO_PARIS, result.getChronology());\n     }\n \n     public void testToMutableDateTimeISO() {\n         assertSame(MutableDateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+        assertEquals(ISO_PARIS, result.getChronology());\n     }\n \n     public void testToMutableDateTime_DateTimeZone() {\n         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n         MutableDateTime result = test.toMutableDateTime(LONDON);\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n \n         test = new DateMidnight(TEST_TIME1_UTC);\n         result = test.toMutableDateTime(PARIS);\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+        assertEquals(ISO_PARIS, result.getChronology());\n \n         test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n         result = test.toMutableDateTime((DateTimeZone) null);\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n \n         test = new DateMidnight(TEST_TIME1_UTC);\n         result = test.toMutableDateTime((DateTimeZone) null);\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n     }\n \n     public void testToMutableDateTime_Chronology() {\n         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n-        MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance());\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n-\n-        test = new DateMidnight(TEST_TIME1_UTC);\n-        result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS));\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());\n-\n-        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));\n+        MutableDateTime result = test.toMutableDateTime(ISO_DEFAULT);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.toMutableDateTime(GREGORIAN_PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GREGORIAN_PARIS, result.getChronology());\n+\n+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);\n         result = test.toMutableDateTime((Chronology) null);\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n \n         test = new DateMidnight(TEST_TIME1_UTC);\n         result = test.toMutableDateTime((Chronology) null);\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n     }\n \n     public void testToDate() {\n \n     //-----------------------------------------------------------------------\n     public void testToYearMonthDay() {\n-        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, CopticChronology.getInstance());\n+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT);\n         YearMonthDay test = base.toYearMonthDay();\n-        assertEquals(new YearMonthDay(TEST_TIME1_UTC, CopticChronology.getInstance()), test);\n+        assertEquals(new YearMonthDay(TEST_TIME1_UTC, COPTIC_DEFAULT), test);\n     }\n \n     public void testToInterval() {\n-        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, CopticChronology.getInstance());\n+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, COPTIC_DEFAULT);\n         Interval test = base.toInterval();\n         DateMidnight end = base.plus(Period.days(1));\n         assertEquals(new Interval(base, end), test);\n         assertEquals(TEST_TIME2_LONDON, result.getMillis());\n         assertEquals(test.getChronology(), result.getChronology());\n         \n-        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));\n+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);\n         result = test.withMillis(TEST_TIME2_UTC);\n         assertEquals(TEST_TIME2_PARIS, result.getMillis());\n         assertEquals(test.getChronology(), result.getChronology());\n \n     public void testWithChronology_Chronology() {\n         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n-        DateMidnight result = test.withChronology(GregorianChronology.getInstance(PARIS));\n+        DateMidnight result = test.withChronology(GREGORIAN_PARIS);\n         assertEquals(TEST_TIME1_LONDON, test.getMillis());\n         assertEquals(TEST_TIME1_PARIS, result.getMillis());\n-        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());\n-        \n-        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));\n+        assertEquals(GREGORIAN_PARIS, result.getChronology());\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);\n         result = test.withChronology(null);\n         assertEquals(TEST_TIME1_PARIS, test.getMillis());\n         // midnight Paris is previous day in London\n         assertEquals(TEST_TIME1_LONDON - DateTimeConstants.MILLIS_PER_DAY, result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n         \n         test = new DateMidnight(TEST_TIME1_UTC);\n         result = test.withChronology(null);\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n-        \n-        test = new DateMidnight(TEST_TIME1_UTC);\n-        result = test.withChronology(ISOChronology.getInstance());\n+        assertEquals(ISO_DEFAULT, result.getChronology());\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.withChronology(ISO_DEFAULT);\n         assertSame(test, result);\n     }\n \n         DateMidnight result = test.withZoneRetainFields(PARIS);\n         assertEquals(TEST_TIME1_LONDON, test.getMillis());\n         assertEquals(TEST_TIME1_PARIS, result.getMillis());\n-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n-        \n-        test = new DateMidnight(TEST_TIME1_UTC, GregorianChronology.getInstance(PARIS));\n+        assertEquals(ISO_PARIS, result.getChronology());\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC, GREGORIAN_PARIS);\n         result = test.withZoneRetainFields(null);\n         assertEquals(TEST_TIME1_PARIS, test.getMillis());\n         assertEquals(TEST_TIME1_LONDON, result.getMillis());\n-        assertEquals(GregorianChronology.getInstance(), result.getChronology());\n+        assertEquals(GREGORIAN_DEFAULT, result.getChronology());\n         \n         test = new DateMidnight(TEST_TIME1_UTC);\n         result = test.withZoneRetainFields(LONDON);\n \n     //-----------------------------------------------------------------------\n     public void testWithDurationAdded_long_int() {\n-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);\n         DateMidnight result = test.withDurationAdded(123456789L, 1);\n-        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.withDurationAdded(123456789L, 0);\n         assertSame(test, result);\n         \n         result = test.withDurationAdded(123456789L, 2);\n-        expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BuddhistChronology.getInstance());\n+        expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.withDurationAdded(123456789L, -3);\n-        expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BuddhistChronology.getInstance());\n+        expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n     }\n     \n     //-----------------------------------------------------------------------\n     public void testWithDurationAdded_RD_int() {\n-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);\n         DateMidnight result = test.withDurationAdded(new Duration(123456789L), 1);\n-        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.withDurationAdded(null, 1);\n         assertSame(test, result);\n         \n         result = test.withDurationAdded(new Duration(123456789L), 2);\n-        expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BuddhistChronology.getInstance());\n+        expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.withDurationAdded(new Duration(123456789L), -3);\n-        expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BuddhistChronology.getInstance());\n+        expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testWithDurationAdded_RP_int() {\n-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n         DateMidnight result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 1);\n-        DateMidnight expected = new DateMidnight(2003, 7, 28, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(2003, 7, 28, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.withPeriodAdded(null, 1);\n         assertSame(test, result);\n         \n         result = test.withPeriodAdded(new Period(1, 2, 0, 4, 5, 6, 7, 8), 3);\n-        expected = new DateMidnight(2005, 11, 15, BuddhistChronology.getInstance());\n+        expected = new DateMidnight(2005, 11, 15, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.withPeriodAdded(new Period(1, 2, 0, 1, 1, 2, 3, 4), -1);\n-        expected = new DateMidnight(2001, 3, 1, BuddhistChronology.getInstance());\n+        expected = new DateMidnight(2001, 3, 1, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n     }\n \n     //-----------------------------------------------------------------------    \n     public void testPlus_long() {\n-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);\n         DateMidnight result = test.plus(123456789L);\n-        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n     }\n     \n     public void testPlus_RD() {\n-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);\n         DateMidnight result = test.plus(new Duration(123456789L));\n-        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.plus((ReadableDuration) null);\n     }\n \n     public void testPlus_RP() {\n-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n         DateMidnight result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n-        DateMidnight expected = new DateMidnight(2003, 7, 28, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(2003, 7, 28, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.plus((ReadablePeriod) null);\n     }\n \n     public void testPlusYears_int() {\n-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n         DateMidnight result = test.plusYears(1);\n-        DateMidnight expected = new DateMidnight(2003, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(2003, 5, 3, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.plusYears(0);\n     }\n \n     public void testPlusMonths_int() {\n-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n         DateMidnight result = test.plusMonths(1);\n-        DateMidnight expected = new DateMidnight(2002, 6, 3, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(2002, 6, 3, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.plusMonths(0);\n     }\n \n     public void testPlusWeeks_int() {\n-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n         DateMidnight result = test.plusWeeks(1);\n-        DateMidnight expected = new DateMidnight(2002, 5, 10, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(2002, 5, 10, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.plusWeeks(0);\n     }\n \n     public void testPlusDays_int() {\n-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n         DateMidnight result = test.plusDays(1);\n-        DateMidnight expected = new DateMidnight(2002, 5, 4, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(2002, 5, 4, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.plusDays(0);\n \n     //-----------------------------------------------------------------------    \n     public void testMinus_long() {\n-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);\n         DateMidnight result = test.minus(123456789L);\n-        DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n     }\n \n     public void testMinus_RD() {\n-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BUDDHIST_DEFAULT);\n         DateMidnight result = test.minus(new Duration(123456789L));\n-        DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.minus((ReadableDuration) null);\n     }\n \n     public void testMinus_RP() {\n-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n         DateMidnight result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n-        DateMidnight expected = new DateMidnight(2001, 3, 25, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(2001, 3, 25, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.minus((ReadablePeriod) null);\n     }\n \n     public void testMinusYears_int() {\n-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n         DateMidnight result = test.minusYears(1);\n-        DateMidnight expected = new DateMidnight(2001, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(2001, 5, 3, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.minusYears(0);\n     }\n \n     public void testMinusMonths_int() {\n-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n         DateMidnight result = test.minusMonths(1);\n-        DateMidnight expected = new DateMidnight(2002, 4, 3, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(2002, 4, 3, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.minusMonths(0);\n     }\n \n     public void testMinusWeeks_int() {\n-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n         DateMidnight result = test.minusWeeks(1);\n-        DateMidnight expected = new DateMidnight(2002, 4, 26, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(2002, 4, 26, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.minusWeeks(0);\n     }\n \n     public void testMinusDays_int() {\n-        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BUDDHIST_DEFAULT);\n         DateMidnight result = test.minusDays(1);\n-        DateMidnight expected = new DateMidnight(2002, 5, 2, BuddhistChronology.getInstance());\n+        DateMidnight expected = new DateMidnight(2002, 5, 2, BUDDHIST_DEFAULT);\n         assertEquals(expected, result);\n         \n         result = test.minusDays(0);", "timestamp": 1144493494, "metainfo": ""}