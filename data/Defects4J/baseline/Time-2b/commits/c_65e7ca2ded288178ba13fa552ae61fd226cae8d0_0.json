{"sha": "65e7ca2ded288178ba13fa552ae61fd226cae8d0", "log": "Fix test   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n         assertEquals(false, test2.isEqual(new MockInstant()));\n         assertEquals(true, test1.isEqual(new MockInstant()));\n         \n-        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC + 1).isEqual(null));\n-        assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC).isEqual(null));\n-        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC - 1).isEqual(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC + DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isEqual(null));\n+        assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC, DateTimeZone.UTC).isEqual(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isEqual(null));\n+        \n+        assertEquals(false, new DateMidnight(2004, 6, 9).isEqual(new DateTime(2004, 6, 8, 23, 59, 59, 999)));\n+        assertEquals(true, new DateMidnight(2004, 6, 9).isEqual(new DateTime(2004, 6, 9, 0, 0, 0, 0)));\n+        assertEquals(false, new DateMidnight(2004, 6, 9).isEqual(new DateTime(2004, 6, 9, 0, 0, 0, 1)));\n     }\n     \n     public void testIsBefore() {\n         assertEquals(false, test2.isBefore(new MockInstant()));\n         assertEquals(false, test1.isBefore(new MockInstant()));\n         \n-        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC + 1).isBefore(null));\n-        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC).isBefore(null));\n-        assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC - 1).isBefore(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC + DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isBefore(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC, DateTimeZone.UTC).isBefore(null));\n+        assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isBefore(null));\n+        \n+        assertEquals(false, new DateMidnight(2004, 6, 9).isBefore(new DateTime(2004, 6, 8, 23, 59, 59, 999)));\n+        assertEquals(false, new DateMidnight(2004, 6, 9).isBefore(new DateTime(2004, 6, 9, 0, 0, 0, 0)));\n+        assertEquals(true, new DateMidnight(2004, 6, 9).isBefore(new DateTime(2004, 6, 9, 0, 0, 0, 1)));\n     }\n     \n     public void testIsAfter() {\n         assertEquals(true, test2.isAfter(new MockInstant()));\n         assertEquals(false, test1.isAfter(new MockInstant()));\n         \n-        assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC + 1).isAfter(null));\n-        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC).isAfter(null));\n-        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC - 1).isAfter(null));\n+        assertEquals(true, new DateMidnight(TEST_TIME_NOW_UTC + DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isAfter(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC, DateTimeZone.UTC).isAfter(null));\n+        assertEquals(false, new DateMidnight(TEST_TIME_NOW_UTC - DateTimeConstants.MILLIS_PER_DAY, DateTimeZone.UTC).isAfter(null));\n+        \n+        assertEquals(true, new DateMidnight(2004, 6, 9).isAfter(new DateTime(2004, 6, 8, 23, 59, 59, 999)));\n+        assertEquals(false, new DateMidnight(2004, 6, 9).isAfter(new DateTime(2004, 6, 9, 0, 0, 0, 0)));\n+        assertEquals(false, new DateMidnight(2004, 6, 9).isAfter(new DateTime(2004, 6, 9, 0, 0, 0, 1)));\n     }\n     \n     //-----------------------------------------------------------------------", "timestamp": 1093191963, "metainfo": ""}