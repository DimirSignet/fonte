{"sha": "77dde7d755f9d79c737b6d5cdf4c547664dd16be", "log": "Initial version of the ported testset.  ", "commit": "\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestAbstractPartial.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestAbstractPartial.java\n  */\n package org.joda.time;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractPartial;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.AbstractPartialFieldProperty;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestAbstractPartial extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+public class TestAbstractPartial extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n         \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestAbstractPartial.class);\n-    }\n-\n-    public TestAbstractPartial(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestAbstractPartial(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(DateTimeZone.UTC);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestBasePartial.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestBasePartial.java\n  */\n package org.joda.time;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.BasePartial;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestBasePartial extends TestCase {\n+public class TestBasePartial extends JodaGwtTestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n         \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestBasePartial.class);\n-    }\n+    } */\n \n-    public TestBasePartial(String name) {\n+    /* Removed for GWT public TestBasePartial(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(DateTimeZone.UTC);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestBaseSingleFieldPeriod.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestBaseSingleFieldPeriod.java\n  */\n package org.joda.time;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.BaseSingleFieldPeriod;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for BaseSingleFieldPeriod.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestBaseSingleFieldPeriod extends TestCase {\n+public class TestBaseSingleFieldPeriod extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-\n-    public static void main(String[] args) {\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestBaseSingleFieldPeriod.class);\n-    }\n-\n-    public TestBaseSingleFieldPeriod(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestBaseSingleFieldPeriod(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.LimitChronology;\n import org.joda.time.chrono.StrictChronology;\n import org.joda.time.chrono.ZonedChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Chronology.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestChronology extends TestCase {\n+public class TestChronology extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestChronology.class);\n-    }\n-\n-    public TestChronology(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestChronology(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateMidnight_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Calendar;\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInstant;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.field.UnsupportedDurationField;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateMidnight.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDateMidnight_Basics extends TestCase {\n+public class TestDateMidnight_Basics extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n \n     // the default time zone is set to LONDON in setUp()\n     // we have to hard code LONDON here (instead of ISOChronology.getInstance() etc.)\n     // as TestAll sets up a different time zone for better all-round testing\n-    private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance(LONDON);\n-    private static final ISOChronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final GJChronology GJ_DEFAULT = GJChronology.getInstance(LONDON);\n-    private static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance(LONDON);\n-    private static final GregorianChronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n-    private static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance(LONDON);\n-    private static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance(LONDON);\n+    // Removed for GWT private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance(LONDON);\n+    // Removed for GWT private static final ISOChronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final GJChronology GJ_DEFAULT = GJChronology.getInstance(LONDON);\n+    // Removed for GWT private static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance(LONDON);\n+    // Removed for GWT private static final GregorianChronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    // Removed for GWT private static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance(LONDON);\n+    // Removed for GWT private static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance(LONDON);\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateMidnight_Basics.class);\n-    }\n-\n-    public TestDateMidnight_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateMidnight_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n     }\n     \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         DateMidnight test = new DateMidnight(TEST_TIME_NOW_UTC);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateMidnight_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateMidnight_Constructors.java\n import java.util.Date;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.MockZeroNullIntegerConverter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateMidnight.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDateMidnight_Constructors extends TestCase {\n+public class TestDateMidnight_Constructors extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private DateTimeZone zone = null;\n     private Locale locale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateMidnight_Constructors.class);\n-    }\n-\n-    public TestDateMidnight_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateMidnight_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC);\n         zone = DateTimeZone.getDefault();\n         locale = Locale.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         Locale.setDefault(locale);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateMidnight_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateMidnight_Properties.java\n \n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.LenientChronology;\n import org.joda.time.chrono.StrictChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTime.\n  * @author Stephen Colebourne\n  * @author Mike Schrag\n  */\n-public class TestDateMidnight_Properties extends TestCase {\n+public class TestDateMidnight_Properties extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n-\n-    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+\n+    //// Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private DateTimeZone zone = null;\n     private Locale locale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateMidnight_Properties.class);\n-    }\n-\n-    public TestDateMidnight_Properties(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateMidnight_Properties(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         locale = Locale.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         Locale.setDefault(locale);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeComparator.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeComparator.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n /**\n  * This class is a Junit unit test for the\n  * org.joda.time.DateTimeComparator class.\n  *\n  * @author Guy Allard\n  */\n-public class TestDateTimeComparator extends TestCase {\n-\n-    private static final Chronology ISO = ISOChronology.getInstance();\n+public class TestDateTimeComparator extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final Chronology ISO = ISOChronology.getInstance();\n     \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateTimeComparator.class);\n-    }\n-\n-    public TestDateTimeComparator(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateTimeComparator(String name) {\n         super(name);\n-    }\n+    } */\n \n     /**\n      * A reference to a DateTime object.\n     /**\n      * Junit <code>setUp()</code> method.\n      */\n-    public void setUp() /* throws Exception */ {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         Chronology chrono = ISOChronology.getInstanceUTC();\n \n         // super.setUp();\n     /**\n      * Junit <code>tearDown()</code> method.\n      */\n-    protected void tearDown() /* throws Exception */ {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         // super.tearDown();\n         aDateTime = null;\n         bDateTime = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testClass() {\n+    /* Removed for GWT public void testClass() {\n         assertEquals(true, Modifier.isPublic(DateTimeComparator.class.getModifiers()));\n         assertEquals(false, Modifier.isFinal(DateTimeComparator.class.getModifiers()));\n         assertEquals(1, DateTimeComparator.class.getDeclaredConstructors().length);\n         assertEquals(true, Modifier.isProtected(DateTimeComparator.class.getDeclaredConstructors()[0].getModifiers()));\n-    }\n+    } */\n     \n     //-----------------------------------------------------------------------\n     public void testStaticGetInstance() {\n     }\n     \n     //-----------------------------------------------------------------------\n-    public void testSerialization1() throws Exception {\n+    /* Removed for GWT public void testSerialization1() throws Exception {\n         DateTimeField f = ISO.dayOfYear();\n         f.toString();\n         DateTimeComparator c = DateTimeComparator.getInstance(DateTimeFieldType.hourOfDay(), DateTimeFieldType.dayOfYear());\n         ois.close();\n         \n         assertEquals(c, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization2() throws Exception {\n+    /* Removed for GWT public void testSerialization2() throws Exception {\n         DateTimeComparator c = DateTimeComparator.getInstance();\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(c, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeConstants.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeConstants.java\n  */\n package org.joda.time;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * Test case.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDateTimeConstants extends TestCase {\n+public class TestDateTimeConstants extends JodaGwtTestCase {\n \n     /**\n      * The main method for this test program.\n      * @param args command line arguments.\n      */\n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n     /**\n      * TestSuite is a junit required method.\n      */\n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateTimeConstants.class);\n-    }\n+    } */\n \n     /**\n      * TestDateTimeComparator constructor.\n      * @param name\n      */\n-    public TestDateTimeConstants(String name) {\n+    /* Removed for GWT public TestDateTimeConstants(String name) {\n         super(name);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n-    public void testConstructor() {\n+    /* Removed for GWT public void testConstructor() {\n         DateTimeConstants c = new DateTimeConstants() {\n         };\n         c.toString();\n-    }\n+    } */\n \n     public void testHalfdaysOfDay() {\n         assertEquals(0, DateTimeConstants.AM);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeFieldType.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeFieldType.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n-import java.lang.reflect.Constructor;\n-\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Chronology.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDateTimeFieldType extends TestCase {\n-\n-    public static void main(String[] args) {\n+public class TestDateTimeFieldType extends JodaGwtTestCase {\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateTimeFieldType.class);\n-    }\n-\n-    public TestDateTimeFieldType(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateTimeFieldType(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(null, DateTimeFieldType.era().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.era());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.era());\n     }\n \n     public void test_centuryOfEra() throws Exception {\n         assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.centuryOfEra());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.centuryOfEra());\n     }\n \n     public void test_yearOfCentury() throws Exception {\n         assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.yearOfCentury());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.yearOfCentury());\n     }\n \n     public void test_yearOfEra() throws Exception {\n         assertEquals(DurationFieldType.eras(), DateTimeFieldType.yearOfEra().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().yearOfEra(), DateTimeFieldType.yearOfEra().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().yearOfEra().isSupported(), DateTimeFieldType.yearOfEra().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.yearOfEra());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.yearOfEra());\n     }\n \n     public void test_year() throws Exception {\n         assertEquals(null, DateTimeFieldType.year().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().year(), DateTimeFieldType.year().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().year().isSupported(), DateTimeFieldType.year().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.year());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.year());\n     }\n \n     public void test_monthOfYear() throws Exception {\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.monthOfYear().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().monthOfYear(), DateTimeFieldType.monthOfYear().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().monthOfYear().isSupported(), DateTimeFieldType.monthOfYear().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.monthOfYear());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.monthOfYear());\n     }\n \n     public void test_weekyearOfCentury() throws Exception {\n         assertEquals(DurationFieldType.centuries(), DateTimeFieldType.weekyearOfCentury().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury().isSupported(), DateTimeFieldType.weekyearOfCentury().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.weekyearOfCentury());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.weekyearOfCentury());\n     }\n \n     public void test_weekyear() throws Exception {\n         assertEquals(null, DateTimeFieldType.weekyear().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().weekyear(), DateTimeFieldType.weekyear().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().weekyear().isSupported(), DateTimeFieldType.weekyear().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.weekyear());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.weekyear());\n     }\n \n     public void test_weekOfWeekyear() throws Exception {\n         assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekOfWeekyear().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear().isSupported(), DateTimeFieldType.weekOfWeekyear().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.weekOfWeekyear());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.weekOfWeekyear());\n     }\n \n     public void test_dayOfYear() throws Exception {\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.dayOfYear().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().dayOfYear(), DateTimeFieldType.dayOfYear().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().dayOfYear().isSupported(), DateTimeFieldType.dayOfYear().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.dayOfYear());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.dayOfYear());\n     }\n \n     public void test_dayOfMonth() throws Exception {\n         assertEquals(DurationFieldType.months(), DateTimeFieldType.dayOfMonth().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.dayOfMonth());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.dayOfMonth());\n     }\n \n     public void test_dayOfWeek() throws Exception {\n         assertEquals(DurationFieldType.weeks(), DateTimeFieldType.dayOfWeek().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().dayOfWeek(), DateTimeFieldType.dayOfWeek().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().dayOfWeek().isSupported(), DateTimeFieldType.dayOfWeek().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.dayOfWeek());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.dayOfWeek());\n     }\n \n     public void test_halfdayOfDay() throws Exception {\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.halfdayOfDay().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay(), DateTimeFieldType.halfdayOfDay().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay().isSupported(), DateTimeFieldType.halfdayOfDay().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.halfdayOfDay());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.halfdayOfDay());\n     }\n \n     public void test_clockhourOfDay() throws Exception {\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.clockhourOfDay().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay(), DateTimeFieldType.clockhourOfDay().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay().isSupported(), DateTimeFieldType.clockhourOfDay().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.clockhourOfDay());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.clockhourOfDay());\n     }\n \n     public void test_clockhourOfHalfday() throws Exception {\n         assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.clockhourOfHalfday().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday().isSupported(), DateTimeFieldType.clockhourOfHalfday().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.clockhourOfHalfday());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.clockhourOfHalfday());\n     }\n \n     public void test_hourOfHalfday() throws Exception {\n         assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.hourOfHalfday().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday(), DateTimeFieldType.hourOfHalfday().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday().isSupported(), DateTimeFieldType.hourOfHalfday().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.hourOfHalfday());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.hourOfHalfday());\n     }\n \n     public void test_hourOfDay() throws Exception {\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.hourOfDay().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().hourOfDay(), DateTimeFieldType.hourOfDay().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().hourOfDay().isSupported(), DateTimeFieldType.hourOfDay().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.hourOfDay());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.hourOfDay());\n     }\n \n     public void test_minuteOfDay() throws Exception {\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.minuteOfDay().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().minuteOfDay(), DateTimeFieldType.minuteOfDay().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().minuteOfDay().isSupported(), DateTimeFieldType.minuteOfDay().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.minuteOfDay());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.minuteOfDay());\n     }\n \n     public void test_minuteOfHour() throws Exception {\n         assertEquals(DurationFieldType.hours(), DateTimeFieldType.minuteOfHour().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().minuteOfHour(), DateTimeFieldType.minuteOfHour().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().minuteOfHour().isSupported(), DateTimeFieldType.minuteOfHour().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.minuteOfHour());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.minuteOfHour());\n     }\n \n     public void test_secondOfDay() throws Exception {\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.secondOfDay().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().secondOfDay(), DateTimeFieldType.secondOfDay().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().secondOfDay().isSupported(), DateTimeFieldType.secondOfDay().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.secondOfDay());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.secondOfDay());\n     }\n \n     public void test_secondOfMinute() throws Exception {\n         assertEquals(DurationFieldType.minutes(), DateTimeFieldType.secondOfMinute().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().secondOfMinute(), DateTimeFieldType.secondOfMinute().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().secondOfMinute().isSupported(), DateTimeFieldType.secondOfMinute().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.secondOfMinute());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.secondOfMinute());\n     }\n \n     public void test_millisOfDay() throws Exception {\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.millisOfDay().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().millisOfDay(), DateTimeFieldType.millisOfDay().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().millisOfDay().isSupported(), DateTimeFieldType.millisOfDay().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.millisOfDay());\n+// Removed for GWT         assertSerialization(DateTimeFieldType.millisOfDay());\n     }\n \n     public void test_millisOfSecond() throws Exception {\n         assertEquals(DurationFieldType.seconds(), DateTimeFieldType.millisOfSecond().getRangeDurationType());\n         assertEquals(CopticChronology.getInstanceUTC().millisOfSecond(), DateTimeFieldType.millisOfSecond().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().millisOfSecond().isSupported(), DateTimeFieldType.millisOfSecond().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DateTimeFieldType.millisOfSecond());\n-    }\n-\n-    public void test_other() throws Exception {\n+// Removed for GWT         assertSerialization(DateTimeFieldType.millisOfSecond());\n+    }\n+\n+    /* Removed for GWT public void test_other() throws Exception {\n         assertEquals(1, DateTimeFieldType.class.getDeclaredClasses().length);\n         Class cls = DateTimeFieldType.class.getDeclaredClasses()[0];\n         assertEquals(1, cls.getDeclaredConstructors().length);\n         DateTimeFieldType result = doSerialization(type);\n         assertEquals(type.getName(), result.getName());\n         assertNotSame(type, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n-    private void assertSerialization(DateTimeFieldType type) throws Exception {\n+    /* Removed for GWT private void assertSerialization(DateTimeFieldType type) throws Exception {\n         DateTimeFieldType result = doSerialization(type);\n         assertSame(type, result);\n-    }\n-\n-    private DateTimeFieldType doSerialization(DateTimeFieldType type) throws Exception {\n+    } */\n+\n+    /* Removed for GWT private DateTimeFieldType doSerialization(DateTimeFieldType type) throws Exception {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(type);\n         DateTimeFieldType result = (DateTimeFieldType) ois.readObject();\n         ois.close();\n         return result;\n-    }\n+    } */\n \n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeUtils.java\n  */\n package org.joda.time;\n \n-import java.lang.reflect.Modifier;\n-import java.security.AllPermission;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n-\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+// Removed for GWT import java.lang.reflect.Modifier;\n+// Removed for GWT import java.security.AllPermission;\n+// Removed for GWT import java.security.CodeSource;\n+// Removed for GWT import java.security.Permission;\n+// Removed for GWT import java.security.PermissionCollection;\n+// Removed for GWT import java.security.Permissions;\n+// Removed for GWT import java.security.Policy;\n+// Removed for GWT import java.security.ProtectionDomain;\n+\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInstant;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Instant.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDateTimeUtils extends TestCase {\n-\n-    private static final GJChronology GJ = GJChronology.getInstance();\n-    private static final boolean OLD_JDK;\n-    static {\n-        String str = System.getProperty(\"java.version\");\n-        boolean old = true;\n-        if (str.length() > 3 &&\n-            str.charAt(0) == '1' &&\n-            str.charAt(1) == '.' &&\n-            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n-            old = false;\n-        }\n-        OLD_JDK = old;\n-    }\n+public class TestDateTimeUtils extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final GJChronology GJ = GJChronology.getInstance();\n+    // Removed for GWT private static final boolean OLD_JDK;\n+// Removed for GWT\n+//    static {\n+//        String str = System.getProperty(\"java.version\");\n+//        boolean old = true;\n+//        if (str.length() > 3 &&\n+//            str.charAt(0) == '1' &&\n+//            str.charAt(1) == '.' &&\n+//            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n+//            old = false;\n+//        }\n+//        OLD_JDK = old;\n+//    }\n \n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n             + 14L * DateTimeConstants.MILLIS_PER_HOUR\n             + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n         \n-    private static final Policy RESTRICT;\n-    private static final Policy ALLOW;\n-    static {\n-        // don't call Policy.getPolicy()\n-        RESTRICT = new Policy() {\n-            public PermissionCollection getPermissions(CodeSource codesource) {\n-                Permissions p = new Permissions();\n-                p.add(new AllPermission());  // enable everything\n-                return p;\n-            }\n-            public void refresh() {\n-            }\n-            public boolean implies(ProtectionDomain domain, Permission permission) {\n-                if (permission instanceof JodaTimePermission) {\n-                    return false;\n-                }\n-                return true;\n-//                return super.implies(domain, permission);\n-            }\n-        };\n-        ALLOW = new Policy() {\n-            public PermissionCollection getPermissions(CodeSource codesource) {\n-                Permissions p = new Permissions();\n-                p.add(new AllPermission());  // enable everything\n-                return p;\n-            }\n-            public void refresh() {\n-            }\n-        };\n-    }\n+    // Removed for GWT private static final Policy RESTRICT;\n+    // Removed for GWT private static final Policy ALLOW;\n+// Removed for GWT\n+//    static {\n+//        // don't call Policy.getPolicy()\n+//        RESTRICT = new Policy() {\n+//            public PermissionCollection getPermissions(CodeSource codesource) {\n+//                Permissions p = new Permissions();\n+//                p.add(new AllPermission());  // enable everything\n+//                return p;\n+//            }\n+//            public void refresh() {\n+//            }\n+//            public boolean implies(ProtectionDomain domain, Permission permission) {\n+//                if (permission instanceof JodaTimePermission) {\n+//                    return false;\n+//                }\n+//                return true;\n+////                return super.implies(domain, permission);\n+//            }\n+//        };\n+//        ALLOW = new Policy() {\n+//            public PermissionCollection getPermissions(CodeSource codesource) {\n+//                Permissions p = new Permissions();\n+//                p.add(new AllPermission());  // enable everything\n+//                return p;\n+//            }\n+//            public void refresh() {\n+//            }\n+//        };\n+//    }\n     \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateTimeUtils.class);\n-    }\n-\n-    public TestDateTimeUtils(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateTimeUtils(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testClass() {\n+    /* Removed for GWT public void testClass() {\n         Class cls = DateTimeUtils.class;\n         assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isFinal(cls.getModifiers()));\n         assertEquals(true, Modifier.isProtected(cls.getDeclaredConstructors()[0].getModifiers()));\n         \n         DateTimeUtils utils = new DateTimeUtils() {};\n-    }\n+    } */\n     \n     //-----------------------------------------------------------------------\n     public void testSystemMillis() {\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSystemMillisSecurity() {\n+    /* Removed for GWT public void testSystemMillisSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         } finally {\n             DateTimeUtils.setCurrentMillisSystem();\n         }\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testFixedMillis() {\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFixedMillisSecurity() {\n+    /* Removed for GWT public void testFixedMillisSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         } finally {\n             DateTimeUtils.setCurrentMillisSystem();\n         }\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testOffsetMillis() {\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testOffsetMillisSecurity() {\n+    /* Removed for GWT public void testOffsetMillisSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n         } finally {\n             DateTimeUtils.setCurrentMillisSystem();\n         }\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testGetInstantMillis_RI() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeZone.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeZone.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.PrintStream;\n-import java.lang.reflect.Modifier;\n-import java.security.AllPermission;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n+// Removed for GWT import java.lang.reflect.Modifier;\n+// Removed for GWT import java.security.AllPermission;\n+// Removed for GWT import java.security.CodeSource;\n+// Removed for GWT import java.security.Permission;\n+// Removed for GWT import java.security.PermissionCollection;\n+// Removed for GWT import java.security.Permissions;\n+// Removed for GWT import java.security.Policy;\n+// Removed for GWT import java.security.ProtectionDomain;\n import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n+\n+import org.joda.time.gwt.JodaGwtTestCase;\n import org.joda.time.tz.DefaultNameProvider;\n import org.joda.time.tz.NameProvider;\n import org.joda.time.tz.Provider;\n import org.joda.time.tz.UTCProvider;\n-import org.joda.time.tz.ZoneInfoProvider;\n+//import org.joda.time.tz.ZoneInfoProvider;\n \n /**\n  * This class is a JUnit test for DateTimeZone.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDateTimeZone extends TestCase {\n-    private static final boolean OLD_JDK;\n-    static {\n-        String str = System.getProperty(\"java.version\");\n-        boolean old = true;\n-        if (str.length() > 3 &&\n-            str.charAt(0) == '1' &&\n-            str.charAt(1) == '.' &&\n-            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n-            old = false;\n-        }\n-        OLD_JDK = old;\n-    }\n+public class TestDateTimeZone extends JodaGwtTestCase {\n+    // Removed for GWT private static final boolean OLD_JDK;\n+// Removed for GWT\n+//    static {\n+//        String str = System.getProperty(\"java.version\");\n+//        boolean old = true;\n+//        if (str.length() > 3 &&\n+//            str.charAt(0) == '1' &&\n+//            str.charAt(1) == '.' &&\n+//            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n+//            old = false;\n+//        }\n+//        OLD_JDK = old;\n+//    }\n     \n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n //            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n //            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n     \n-    private static final Policy RESTRICT;\n-    private static final Policy ALLOW;\n-    static {\n-        // don't call Policy.getPolicy()\n-        RESTRICT = new Policy() {\n-            public PermissionCollection getPermissions(CodeSource codesource) {\n-                Permissions p = new Permissions();\n-                p.add(new AllPermission());  // enable everything\n-                return p;\n-            }\n-            public void refresh() {\n-            }\n-            public boolean implies(ProtectionDomain domain, Permission permission) {\n-                if (permission instanceof JodaTimePermission) {\n-                    return false;\n-                }\n-                return true;\n-//                return super.implies(domain, permission);\n-            }\n-        };\n-        ALLOW = new Policy() {\n-            public PermissionCollection getPermissions(CodeSource codesource) {\n-                Permissions p = new Permissions();\n-                p.add(new AllPermission());  // enable everything\n-                return p;\n-            }\n-            public void refresh() {\n-            }\n-        };\n-    }\n+    // Removed for GWT private static final Policy RESTRICT;\n+    // Removed for GWT private static final Policy ALLOW;\n+// Removed for GWT\n+//    static {\n+//        // don't call Policy.getPolicy()\n+//        RESTRICT = new Policy() {\n+//            public PermissionCollection getPermissions(CodeSource codesource) {\n+//                Permissions p = new Permissions();\n+//                p.add(new AllPermission());  // enable everything\n+//                return p;\n+//            }\n+//            public void refresh() {\n+//            }\n+//            public boolean implies(ProtectionDomain domain, Permission permission) {\n+//                if (permission instanceof JodaTimePermission) {\n+//                    return false;\n+//                }\n+//                return true;\n+////                return super.implies(domain, permission);\n+//            }\n+//        };\n+//        ALLOW = new Policy() {\n+//            public PermissionCollection getPermissions(CodeSource codesource) {\n+//                Permissions p = new Permissions();\n+//                p.add(new AllPermission());  // enable everything\n+//                return p;\n+//            }\n+//            public void refresh() {\n+//            }\n+//        };\n+//    }\n     \n     private DateTimeZone zone;\n     private Locale locale;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateTimeZone.class);\n-    }\n-\n-    public TestDateTimeZone(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateTimeZone(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         locale = Locale.getDefault();\n         zone = DateTimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         Locale.setDefault(locale);\n         DateTimeZone.setDefault(zone);\n     }\n         } catch (IllegalArgumentException ex) {}\n     }\n             \n-    public void testDefaultSecurity() {\n+    /* Removed for GWT public void testDefaultSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             System.setSecurityManager(null);\n             Policy.setPolicy(ALLOW);\n         }\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testForID_String() {\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testProvider() {\n+    /* Removed for GWT public void testProvider() {\n         try {\n             assertNotNull(DateTimeZone.getProvider());\n         \n             DateTimeZone.setProvider(null);\n             assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n         }\n-    }\n-    \n-    public void testProviderSecurity() {\n+    } */\n+    \n+    /* Removed for GWT public void testProviderSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             System.setSecurityManager(null);\n             Policy.setPolicy(ALLOW);\n         }\n-    }\n+    } */\n \n     static class MockNullIDSProvider implements Provider {\n         public Set getAvailableIDs() {\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testNameProvider() {\n+    /* Removed for GWT public void testNameProvider() {\n         try {\n             assertNotNull(DateTimeZone.getNameProvider());\n         \n             DateTimeZone.setNameProvider(null);\n             assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n         }\n-    }        \n-    \n-    public void testNameProviderSecurity() {\n+    } */        \n+    \n+    /* Removed for GWT public void testNameProviderSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             System.setSecurityManager(null);\n             Policy.setPolicy(ALLOW);\n         }\n-    }\n+    } */\n \n     static class MockOKButNullNameProvider implements NameProvider {\n         public String getShortName(Locale locale, String id, String nameKey) {\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testConstructor() {\n+    /* Removed for GWT public void testConstructor() {\n         assertEquals(1, DateTimeZone.class.getDeclaredConstructors().length);\n         assertTrue(Modifier.isProtected(DateTimeZone.class.getDeclaredConstructors()[0].getModifiers()));\n         try {\n                 }\n             };\n         } catch (IllegalArgumentException ex) {}\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testGetID() {\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization1() throws Exception {\n+    /* Removed for GWT public void testSerialization1() throws Exception {\n         DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(zone, result);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testSerialization2() throws Exception {\n+    } */\n+\n+    //-----------------------------------------------------------------------\n+    /* Removed for GWT public void testSerialization2() throws Exception {\n         DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(zone, result);\n-    }\n+    } */\n \n     public void testCommentParse() throws Exception {\n         // A bug in ZoneInfoCompiler's handling of comments broke Europe/Athens\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeZoneCutover.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTimeZoneCutover.java\n  */\n package org.joda.time;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a JUnit test for DateTimeZone.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDateTimeZoneCutover extends TestCase {\n-\n-    public static void main(String[] args) {\n+public class TestDateTimeZoneCutover extends JodaGwtTestCase {\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateTimeZoneCutover.class);\n-    }\n-\n-    public TestDateTimeZoneCutover(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateTimeZoneCutover(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n     /** Mock zone simulating Asia/Gaza cutover at midnight 2007-04-01 */\n     private static long CUTOVER_GAZA = 1175378400000L;\n     private static int OFFSET_GAZA = 7200000;  // +02:00\n-    private static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA);\n+    // Removed for GWT private static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA);\n \n     //-----------------------------------------------------------------------\n     public void test_MockGazaIsCorrect() {\n     /** Mock zone simulating America/Grand_Turk cutover at midnight 2007-04-01 */\n     private static long CUTOVER_TURK = 1175403600000L;\n     private static int OFFSET_TURK = -18000000;  // -05:00\n-    private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);\n+    // Removed for GWT private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);\n \n     //-----------------------------------------------------------------------\n     public void test_MockTurkIsCorrect() {\n     //-----------------------------------------------------------------------\n     /** America/New_York cutover from 01:59 to 03:00 on 2007-03-11 */\n     private static long CUTOVER_NEW_YORK_SPRING = 1173596400000L;  // 2007-03-11T03:00:00.000-04:00\n-    private static final DateTimeZone ZONE_NEW_YORK = DateTimeZone.forID(\"America/New_York\");\n+    // Removed for GWT private static final DateTimeZone ZONE_NEW_YORK = DateTimeZone.forID(\"America/New_York\");\n //  DateTime x = new DateTime(2007, 1, 1, 0, 0, 0, 0, ZONE_NEW_YORK);\n //  System.out.println(ZONE_NEW_YORK.nextTransition(x.getMillis()));\n //  DateTime y = new DateTime(ZONE_NEW_YORK.nextTransition(x.getMillis()), ZONE_NEW_YORK);\n     //-----------------------------------------------------------------------\n     /** Europe/Moscow cutover from 01:59 to 03:00 on 2007-03-25 */\n     private static long CUTOVER_MOSCOW_SPRING = 1174777200000L;  // 2007-03-25T03:00:00.000+04:00\n-    private static final DateTimeZone ZONE_MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n+    // Removed for GWT private static final DateTimeZone ZONE_MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n \n     //-----------------------------------------------------------------------\n     public void test_MoscowIsCorrect_Spring() {\n     //-----------------------------------------------------------------------\n     /** America/Guatemala cutover from 23:59 to 23:00 on 2006-09-30 */\n     private static long CUTOVER_GUATEMALA_AUTUMN = 1159678800000L; // 2006-09-30T23:00:00.000-06:00\n-    private static final DateTimeZone ZONE_GUATEMALA = DateTimeZone.forID(\"America/Guatemala\");\n+    // Removed for GWT private static final DateTimeZone ZONE_GUATEMALA = DateTimeZone.forID(\"America/Guatemala\");\n \n     //-----------------------------------------------------------------------\n     public void test_GuatemataIsCorrect_Autumn() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTime_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Calendar;\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInstant;\n import org.joda.time.chrono.BaseChronology;\n import org.joda.time.field.UnsupportedDurationField;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTime.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDateTime_Basics extends TestCase {\n+public class TestDateTime_Basics extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n \n     // the default time zone is set to LONDON in setUp()\n     // we have to hard code LONDON here (instead of ISOChronology.getInstance() etc.)\n     // as TestAll sets up a different time zone for better all-round testing\n-    private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance(LONDON);\n-    private static final ISOChronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final GJChronology GJ_DEFAULT = GJChronology.getInstance(LONDON);\n-    private static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance(LONDON);\n-    private static final GregorianChronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n-    private static final BuddhistChronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n-    private static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance(LONDON);\n-    private static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance(LONDON);\n+    // Removed for GWT private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance(LONDON);\n+    // Removed for GWT private static final ISOChronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final GJChronology GJ_DEFAULT = GJChronology.getInstance(LONDON);\n+    // Removed for GWT private static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance(LONDON);\n+    // Removed for GWT private static final GregorianChronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    // Removed for GWT private static final BuddhistChronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    // Removed for GWT private static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance(LONDON);\n+    // Removed for GWT private static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance(LONDON);\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateTime_Basics.class);\n-    }\n-\n-    public TestDateTime_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateTime_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n     }\n     \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         DateTime test = new DateTime(TEST_TIME_NOW);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTime_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTime_Constructors.java\n import java.util.Date;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.MockZeroNullIntegerConverter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTime.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDateTime_Constructors extends TestCase {\n+public class TestDateTime_Constructors extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private DateTimeZone zone = null;\n     private Locale locale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateTime_Constructors.class);\n-    }\n-\n-    public TestDateTime_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateTime_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         locale = Locale.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTime_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDateTime_Properties.java\n \n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.LenientChronology;\n import org.joda.time.chrono.StrictChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTime.\n  * @author Stephen Colebourne\n  * @author Mike Schrag\n  */\n-public class TestDateTime_Properties extends TestCase {\n+public class TestDateTime_Properties extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n-\n-    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+\n+    //// Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private DateTimeZone zone = null;\n     private Locale locale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateTime_Properties.class);\n-    }\n-\n-    public TestDateTime_Properties(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateTime_Properties(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         locale = Locale.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         Locale.setDefault(locale);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDays.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDays.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a Junit unit test for Days.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDays extends TestCase {\n+public class TestDays extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-\n-    public static void main(String[] args) {\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDays.class);\n-    }\n-\n-    public TestDays(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDays(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         Days test = Days.SEVEN;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testToStandardWeeks() {\n+    } */\n+\n+    //-----------------------------------------------------------------------\n+    /* Removed for GWT public void testToStandardWeeks() {\n         Days test = Days.days(14);\n         Weeks expected = Weeks.weeks(2);\n         assertEquals(expected, test.toStandardWeeks());\n-    }\n-\n-    public void testToStandardHours() {\n+    } */\n+\n+    /* Removed for GWT public void testToStandardHours() {\n         Days test = Days.days(2);\n         Hours expected = Hours.hours(2 * 24);\n         assertEquals(expected, test.toStandardHours());\n         } catch (ArithmeticException ex) {\n             // expected\n         }\n-    }\n-\n-    public void testToStandardMinutes() {\n+    } */\n+\n+    /* Removed for GWT public void testToStandardMinutes() {\n         Days test = Days.days(2);\n         Minutes expected = Minutes.minutes(2 * 24 * 60);\n         assertEquals(expected, test.toStandardMinutes());\n         } catch (ArithmeticException ex) {\n             // expected\n         }\n-    }\n+    } */\n \n     public void testToStandardSeconds() {\n         Days test = Days.days(2);\n         }\n     }\n \n-    public void testToStandardDuration() {\n+    /* Removed for GWT public void testToStandardDuration() {\n         Days test = Days.days(20);\n         Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_DAY);\n         assertEquals(expected, test.toStandardDuration());\n         \n         expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_DAY);\n         assertEquals(expected, Days.MAX_VALUE.toStandardDuration());\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDurationField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDurationField.java\n package org.joda.time;\n \n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a Junit unit test for DurationField.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDurationField extends TestCase {\n+public class TestDurationField extends JodaGwtTestCase {\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n+        return new TestSuite(TestDurationField.class);\n+    } */\n+\n+    /* Removed for GWT public TestDurationField(String name) {\n+        super(name);\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n     }\n \n-    public static TestSuite suite() {\n-        return new TestSuite(TestDurationField.class);\n-    }\n-\n-    public TestDurationField(String name) {\n-        super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDurationFieldType.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDurationFieldType.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n-import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Constructor;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DurationFieldType.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDurationFieldType extends TestCase {\n+public class TestDurationFieldType extends JodaGwtTestCase {\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n+        return new TestSuite(TestDurationFieldType.class);\n+    } */\n+\n+    /* Removed for GWT public TestDurationFieldType(String name) {\n+        super(name);\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n     }\n \n-    public static TestSuite suite() {\n-        return new TestSuite(TestDurationFieldType.class);\n-    }\n-\n-    public TestDurationFieldType(String name) {\n-        super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\"eras\", DurationFieldType.eras().getName());\n         assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DurationFieldType.eras());\n+// Removed for GWT         assertSerialization(DurationFieldType.eras());\n     }\n \n     public void test_centuries() throws Exception {\n         assertEquals(\"centuries\", DurationFieldType.centuries().getName());\n         assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DurationFieldType.centuries());\n+// Removed for GWT         assertSerialization(DurationFieldType.centuries());\n     }\n \n     public void test_years() throws Exception {\n         assertEquals(\"years\", DurationFieldType.years().getName());\n         assertEquals(CopticChronology.getInstanceUTC().years(), DurationFieldType.years().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().years().isSupported(), DurationFieldType.years().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DurationFieldType.years());\n+// Removed for GWT         assertSerialization(DurationFieldType.years());\n     }\n \n     public void test_months() throws Exception {\n         assertEquals(\"months\", DurationFieldType.months().getName());\n         assertEquals(CopticChronology.getInstanceUTC().months(), DurationFieldType.months().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().months().isSupported(), DurationFieldType.months().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DurationFieldType.months());\n+// Removed for GWT         assertSerialization(DurationFieldType.months());\n     }\n \n     public void test_weekyears() throws Exception {\n         assertEquals(\"weekyears\", DurationFieldType.weekyears().getName());\n         assertEquals(CopticChronology.getInstanceUTC().weekyears(), DurationFieldType.weekyears().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().weekyears().isSupported(), DurationFieldType.weekyears().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DurationFieldType.weekyears());\n+// Removed for GWT         assertSerialization(DurationFieldType.weekyears());\n     }\n \n     public void test_weeks() throws Exception {\n         assertEquals(\"weeks\", DurationFieldType.weeks().getName());\n         assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DurationFieldType.weeks());\n+// Removed for GWT         assertSerialization(DurationFieldType.weeks());\n     }\n \n     public void test_days() throws Exception {\n         assertEquals(\"days\", DurationFieldType.days().getName());\n         assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DurationFieldType.days());\n+// Removed for GWT         assertSerialization(DurationFieldType.days());\n     }\n \n     public void test_halfdays() throws Exception {\n         assertEquals(\"halfdays\", DurationFieldType.halfdays().getName());\n         assertEquals(CopticChronology.getInstanceUTC().halfdays(), DurationFieldType.halfdays().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().halfdays().isSupported(), DurationFieldType.halfdays().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DurationFieldType.halfdays());\n+// Removed for GWT         assertSerialization(DurationFieldType.halfdays());\n     }\n \n     public void test_hours() throws Exception {\n         assertEquals(\"hours\", DurationFieldType.hours().getName());\n         assertEquals(CopticChronology.getInstanceUTC().hours(), DurationFieldType.hours().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().hours().isSupported(), DurationFieldType.hours().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DurationFieldType.hours());\n+// Removed for GWT         assertSerialization(DurationFieldType.hours());\n     }\n \n     public void test_minutes() throws Exception {\n         assertEquals(\"minutes\", DurationFieldType.minutes().getName());\n         assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DurationFieldType.minutes());\n+// Removed for GWT         assertSerialization(DurationFieldType.minutes());\n     }\n \n     public void test_seconds() throws Exception {\n         assertEquals(\"seconds\", DurationFieldType.seconds().getName());\n         assertEquals(CopticChronology.getInstanceUTC().seconds(), DurationFieldType.seconds().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().seconds().isSupported(), DurationFieldType.seconds().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DurationFieldType.seconds());\n+// Removed for GWT         assertSerialization(DurationFieldType.seconds());\n     }\n \n     public void test_millis() throws Exception {\n         assertEquals(\"millis\", DurationFieldType.millis().getName());\n         assertEquals(CopticChronology.getInstanceUTC().millis(), DurationFieldType.millis().getField(CopticChronology.getInstanceUTC()));\n         assertEquals(CopticChronology.getInstanceUTC().millis().isSupported(), DurationFieldType.millis().isSupported(CopticChronology.getInstanceUTC()));\n-        assertSerialization(DurationFieldType.millis());\n+// Removed for GWT         assertSerialization(DurationFieldType.millis());\n     }\n \n-    public void test_other() throws Exception {\n+    /* Removed for GWT public void test_other() throws Exception {\n         assertEquals(1, DurationFieldType.class.getDeclaredClasses().length);\n         Class cls = DurationFieldType.class.getDeclaredClasses()[0];\n         assertEquals(1, cls.getDeclaredConstructors().length);\n         DurationFieldType result = doSerialization(type);\n         assertEquals(type.getName(), result.getName());\n         assertNotSame(type, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n-    private void assertSerialization(DurationFieldType type) throws Exception {\n+    /* Removed for GWT private void assertSerialization(DurationFieldType type) throws Exception {\n         DurationFieldType result = doSerialization(type);\n         assertSame(type, result);\n-    }\n+    } */\n \n-    private DurationFieldType doSerialization(DurationFieldType type) throws Exception {\n+    /* Removed for GWT private DurationFieldType doSerialization(DurationFieldType type) throws Exception {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(type);\n         DurationFieldType result = (DurationFieldType) ois.readObject();\n         ois.close();\n         return result;\n-    }\n+    } */\n \n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDuration_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractDuration;\n import org.joda.time.base.BaseDuration;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Duration.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDuration_Basics extends TestCase {\n+public class TestDuration_Basics extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDuration_Basics.class);\n-    }\n-\n-    public TestDuration_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDuration_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n     }\n     \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         Duration test = new Duration(123L);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testGetStandardSeconds() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDuration_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestDuration_Constructors.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a JUnit test for Duration.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDuration_Constructors extends TestCase {\n+public class TestDuration_Constructors extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDuration_Constructors.class);\n-    }\n-\n-    public TestDuration_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDuration_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestHours.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestHours.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a Junit unit test for Hours.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestHours extends TestCase {\n+public class TestHours extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-\n-    public static void main(String[] args) {\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestHours.class);\n-    }\n-\n-    public TestHours(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestHours(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         Hours test = Hours.SEVEN;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testToStandardWeeks() {\n+    } */\n+\n+    //-----------------------------------------------------------------------\n+    /* Removed for GWT public void testToStandardWeeks() {\n         Hours test = Hours.hours(24 * 7 * 2);\n         Weeks expected = Weeks.weeks(2);\n         assertEquals(expected, test.toStandardWeeks());\n-    }\n-\n-    public void testToStandardDays() {\n+    } */\n+\n+    /* Removed for GWT public void testToStandardDays() {\n         Hours test = Hours.hours(24 * 2);\n         Days expected = Days.days(2);\n         assertEquals(expected, test.toStandardDays());\n-    }\n-\n-    public void testToStandardMinutes() {\n+    } */\n+\n+    /* Removed for GWT public void testToStandardMinutes() {\n         Hours test = Hours.hours(3);\n         Minutes expected = Minutes.minutes(3 * 60);\n         assertEquals(expected, test.toStandardMinutes());\n         } catch (ArithmeticException ex) {\n             // expected\n         }\n-    }\n+    } */\n \n     public void testToStandardSeconds() {\n         Hours test = Hours.hours(3);\n         }\n     }\n \n-    public void testToStandardDuration() {\n+    /* Removed for GWT public void testToStandardDuration() {\n         Hours test = Hours.hours(20);\n         Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_HOUR);\n         assertEquals(expected, test.toStandardDuration());\n         \n         expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_HOUR);\n         assertEquals(expected, Hours.MAX_VALUE.toStandardDuration());\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestIllegalFieldValueException.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestIllegalFieldValueException.java\n  */\n package org.joda.time;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.field.SkipDateTimeField;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * Tests IllegalFieldValueException by triggering it from other methods.\n  *\n  * @author Brian S O'Neill\n  */\n-public class TestIllegalFieldValueException extends TestCase {\n-    public static void main(String[] args) {\n+public class TestIllegalFieldValueException extends JodaGwtTestCase {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestIllegalFieldValueException.class);\n-    }\n-\n-    public TestIllegalFieldValueException(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestIllegalFieldValueException(String name) {\n         super(name);\n-    }\n+    } */\n \n     public void testVerifyValueBounds() {\n         try {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInstant_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInstant_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Date;\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInstant;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Instant.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestInstant_Basics extends TestCase {\n+public class TestInstant_Basics extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestInstant_Basics.class);\n-    }\n-\n-    public TestInstant_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestInstant_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n     }\n     \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         Instant test = new Instant(TEST_TIME_NOW);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n     }\n     \n     //-----------------------------------------------------------------------\n-    public void testImmutable() {\n+    /* Removed for GWT public void testImmutable() {\n         assertTrue(Modifier.isFinal(Instant.class.getModifiers()));\n-    }\n+    } */\n \n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInstant_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInstant_Constructors.java\n import java.util.Date;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.MockZeroNullIntegerConverter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Instant.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestInstant_Constructors extends TestCase {\n+public class TestInstant_Constructors extends JodaGwtTestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     // 1970-06-09\n     private long TEST_TIME_NOW =\n     private DateTimeZone zone = null;\n     private Locale locale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestInstant_Constructors.class);\n-    }\n+    } */\n \n-    public TestInstant_Constructors(String name) {\n+    /* Removed for GWT public TestInstant_Constructors(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         locale = Locale.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInterval_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInterval;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.LenientChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Instant.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestInterval_Basics extends TestCase {\n+public class TestInterval_Basics extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    // Removed for GWT private static final DateTimeZone MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n     private Interval interval37;\n     private Interval interval33;\n \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestInterval_Basics.class);\n-    }\n-\n-    public TestInterval_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestInterval_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         interval33 = new Interval(3, 3);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         Interval test = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestInterval_Constructors.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.IntervalConverter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for Interval.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestInterval_Constructors extends TestCase {\n+public class TestInterval_Constructors extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestInterval_Constructors.class);\n-    }\n-\n-    public TestInterval_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestInterval_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.FRANCE);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDateTime_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDateTime_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Arrays;\n import java.util.Date;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalDate.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestLocalDateTime_Basics extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+public class TestLocalDateTime_Basics extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final int OFFSET = 1;\n-    private static final GJChronology GJ_UTC = GJChronology.getInstanceUTC();\n-    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n-    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n-    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n-    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n-    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    // Removed for GWT private static final GJChronology GJ_UTC = GJChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n \n //    private long TEST_TIME1 =\n //        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestLocalDateTime_Basics.class);\n-    }\n-\n-    public TestLocalDateTime_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestLocalDateTime_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDateTime_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDateTime_Constructors.java\n import java.util.Date;\n import java.util.GregorianCalendar;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalDateTime.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestLocalDateTime_Constructors extends TestCase {\n-\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n-    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n-    private static final Chronology GREGORIAN_MOSCOW = GregorianChronology.getInstance(MOSCOW);\n-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n-    private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n-    private static final int OFFSET_MOSCOW = MOSCOW.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+public class TestLocalDateTime_Constructors extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology GREGORIAN_MOSCOW = GregorianChronology.getInstance(MOSCOW);\n+    // Removed for GWT private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    // Removed for GWT private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+    // Removed for GWT private static final int OFFSET_MOSCOW = MOSCOW.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n     \n     private long MILLIS_OF_DAY =\n         10L * DateTimeConstants.MILLIS_PER_HOUR\n \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestLocalDateTime_Constructors.class);\n-    }\n-\n-    public TestLocalDateTime_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestLocalDateTime_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(MOSCOW);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDateTime_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDateTime_Properties.java\n \n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalDateTime.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestLocalDateTime_Properties extends TestCase {\n-\n-    private static final CopticChronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+public class TestLocalDateTime_Properties extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final CopticChronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n \n     private int MILLIS_OF_DAY =\n         (int) (10L * DateTimeConstants.MILLIS_PER_HOUR\n \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestLocalDateTime_Properties.class);\n-    }\n-\n-    public TestLocalDateTime_Properties(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestLocalDateTime_Properties(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(DateTimeZone.UTC);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDate_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDate_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Arrays;\n import java.util.Date;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.StrictChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalDate.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestLocalDate_Basics extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+public class TestLocalDate_Basics extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final int OFFSET = 1;\n-    private static final GJChronology GJ_UTC = GJChronology.getInstanceUTC();\n-    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n-    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n-    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n-    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n-    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    // Removed for GWT private static final GJChronology GJ_UTC = GJChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n \n     /** Mock zone simulating Asia/Gaza cutover at midnight 2007-04-01 */\n     private static long CUTOVER_GAZA = 1175378400000L;\n     private static int OFFSET_GAZA = 7200000;  // +02:00\n-    private static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA);\n+    // Removed for GWT private static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA);\n \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n         \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestLocalDate_Basics.class);\n-    }\n-\n-    public TestLocalDate_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestLocalDate_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         LocalDate test = new LocalDate(1972, 6, 9, COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDate_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDate_Constructors.java\n import java.util.Date;\n import java.util.GregorianCalendar;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalDate.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestLocalDate_Constructors extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n-    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n-    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+public class TestLocalDate_Constructors extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n     \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestLocalDate_Constructors.class);\n-    }\n-\n-    public TestLocalDate_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestLocalDate_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDate_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalDate_Properties.java\n \n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.LenientChronology;\n import org.joda.time.chrono.StrictChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestLocalDate_Properties extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+public class TestLocalDate_Properties extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n         \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestLocalDate_Properties.class);\n-    }\n-\n-    public TestLocalDate_Properties(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestLocalDate_Properties(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(DateTimeZone.UTC);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalTime_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalTime_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Arrays;\n import java.util.Date;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalTime.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestLocalTime_Basics extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n-    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n-    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+public class TestLocalTime_Basics extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n \n     private long TEST_TIME_NOW =\n             10L * DateTimeConstants.MILLIS_PER_HOUR\n \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestLocalTime_Basics.class);\n-    }\n-\n-    public TestLocalTime_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestLocalTime_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalTime_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalTime_Constructors.java\n import java.util.Date;\n import java.util.GregorianCalendar;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LocalTime.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestLocalTime_Constructors extends TestCase {\n-\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final DateTimeZone NEW_YORK = DateTimeZone.forID(\"America/New_York\");\n-    private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final JulianChronology JULIAN_LONDON = JulianChronology.getInstance(LONDON);\n-    private static final JulianChronology JULIAN_PARIS = JulianChronology.getInstance(PARIS);\n-    private static final JulianChronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n-    private static final int OFFSET_LONDON = LONDON.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n-    private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+public class TestLocalTime_Constructors extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final DateTimeZone NEW_YORK = DateTimeZone.forID(\"America/New_York\");\n+    // Removed for GWT private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final JulianChronology JULIAN_LONDON = JulianChronology.getInstance(LONDON);\n+    // Removed for GWT private static final JulianChronology JULIAN_PARIS = JulianChronology.getInstance(PARIS);\n+    // Removed for GWT private static final JulianChronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    // Removed for GWT private static final int OFFSET_LONDON = LONDON.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+    // Removed for GWT private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n \n     private long TEST_TIME_NOW =\n             10L * DateTimeConstants.MILLIS_PER_HOUR\n \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestLocalTime_Constructors.class);\n-    }\n-\n-    public TestLocalTime_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestLocalTime_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n         java.util.TimeZone.setDefault(LONDON.toTimeZone());\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalTime_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestLocalTime_Properties.java\n \n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a Junit unit test for TimeOfDay.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestLocalTime_Properties extends TestCase {\n-\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+public class TestLocalTime_Properties extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n \n     private long TEST_TIME_NOW =\n             10L * DateTimeConstants.MILLIS_PER_HOUR\n \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestLocalTime_Properties.class);\n-    }\n-\n-    public TestLocalTime_Properties(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestLocalTime_Properties(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMinutes.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMinutes.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a Junit unit test for Minutes.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestMinutes extends TestCase {\n+public class TestMinutes extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-\n-    public static void main(String[] args) {\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMinutes.class);\n-    }\n-\n-    public TestMinutes(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMinutes(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         Minutes test = Minutes.THREE;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testToStandardWeeks() {\n+    } */\n+\n+    //-----------------------------------------------------------------------\n+    /* Removed for GWT public void testToStandardWeeks() {\n         Minutes test = Minutes.minutes(60 * 24 * 7 * 2);\n         Weeks expected = Weeks.weeks(2);\n         assertEquals(expected, test.toStandardWeeks());\n-    }\n-\n-    public void testToStandardDays() {\n+    } */\n+\n+    /* Removed for GWT public void testToStandardDays() {\n         Minutes test = Minutes.minutes(60 * 24 * 2);\n         Days expected = Days.days(2);\n         assertEquals(expected, test.toStandardDays());\n-    }\n-\n-    public void testToStandardHours() {\n+    } */\n+\n+    /* Removed for GWT public void testToStandardHours() {\n         Minutes test = Minutes.minutes(3 * 60);\n         Hours expected = Hours.hours(3);\n         assertEquals(expected, test.toStandardHours());\n-    }\n+    } */\n \n     public void testToStandardSeconds() {\n         Minutes test = Minutes.minutes(3);\n         }\n     }\n \n-    public void testToStandardDuration() {\n+    /* Removed for GWT public void testToStandardDuration() {\n         Minutes test = Minutes.minutes(20);\n         Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_MINUTE);\n         assertEquals(expected, test.toStandardDuration());\n         \n         expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_MINUTE);\n         assertEquals(expected, Minutes.MAX_VALUE.toStandardDuration());\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMonths.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMonths.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a Junit unit test for Months.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestMonths extends TestCase {\n+public class TestMonths extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-\n-    public static void main(String[] args) {\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMonths.class);\n-    }\n-\n-    public TestMonths(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMonths(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         Months test = Months.THREE;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Adds.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Adds.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for MutableDateTime.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestMutableDateTime_Adds extends TestCase {\n+public class TestMutableDateTime_Adds extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMutableDateTime_Adds.class);\n-    }\n-\n-    public TestMutableDateTime_Adds(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMutableDateTime_Adds(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Calendar;\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInstant;\n import org.joda.time.chrono.BaseChronology;\n import org.joda.time.field.UnsupportedDurationField;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for MutableDateTime.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestMutableDateTime_Basics extends TestCase {\n+public class TestMutableDateTime_Basics extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMutableDateTime_Basics.class);\n-    }\n-\n-    public TestMutableDateTime_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMutableDateTime_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n     }\n     \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Constructors.java\n import java.util.Date;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.MockZeroNullIntegerConverter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for MutableDateTime.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestMutableDateTime_Constructors extends TestCase {\n+public class TestMutableDateTime_Constructors extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private DateTimeZone zone = null;\n     private Locale locale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMutableDateTime_Constructors.class);\n-    }\n-\n-    public TestMutableDateTime_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMutableDateTime_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         locale = Locale.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Properties.java\n \n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a Junit unit test for DateTime.\n  * @author Stephen Colebourne\n  * @author Mike Schrag\n  */\n-public class TestMutableDateTime_Properties extends TestCase {\n+public class TestMutableDateTime_Properties extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    //// Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private DateTimeZone zone = null;\n     private Locale locale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMutableDateTime_Properties.class);\n-    }\n-\n-    public TestMutableDateTime_Properties(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMutableDateTime_Properties(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         locale = Locale.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         Locale.setDefault(locale);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Sets.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableDateTime_Sets.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for MutableDateTime.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestMutableDateTime_Sets extends TestCase {\n+public class TestMutableDateTime_Sets extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMutableDateTime_Sets.class);\n-    }\n-\n-    public TestMutableDateTime_Sets(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMutableDateTime_Sets(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableInterval_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableInterval_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInterval;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Instant.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestMutableInterval_Basics extends TestCase {\n+public class TestMutableInterval_Basics extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMutableInterval_Basics.class);\n-    }\n-\n-    public TestMutableInterval_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMutableInterval_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableInterval_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableInterval_Constructors.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.IntervalConverter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for Interval.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestMutableInterval_Constructors extends TestCase {\n+public class TestMutableInterval_Constructors extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMutableInterval_Constructors.class);\n-    }\n-\n-    public TestMutableInterval_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMutableInterval_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableInterval_Updates.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutableInterval_Updates.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInterval;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Instant.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestMutableInterval_Updates extends TestCase {\n+public class TestMutableInterval_Updates extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMutableInterval_Updates.class);\n-    }\n-\n-    public TestMutableInterval_Updates(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMutableInterval_Updates(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutablePeriod_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutablePeriod_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.BasePeriod;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for MutableDuration.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestMutablePeriod_Basics extends TestCase {\n+public class TestMutablePeriod_Basics extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMutablePeriod_Basics.class);\n-    }\n-\n-    public TestMutablePeriod_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMutablePeriod_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         MutablePeriod test = new MutablePeriod(123L);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    }\n+    } */\n \n //    //-----------------------------------------------------------------------\n //    public void testAddTo1() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutablePeriod_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutablePeriod_Constructors.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for MutableDuration.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestMutablePeriod_Constructors extends TestCase {\n+public class TestMutablePeriod_Constructors extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMutablePeriod_Constructors.class);\n-    }\n-\n-    public TestMutablePeriod_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMutablePeriod_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutablePeriod_Updates.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestMutablePeriod_Updates.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for MutableDuration.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestMutablePeriod_Updates extends TestCase {\n+public class TestMutablePeriod_Updates extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMutablePeriod_Updates.class);\n-    }\n-\n-    public TestMutablePeriod_Updates(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMutablePeriod_Updates(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestParseISO.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestParseISO.java\n package org.joda.time;\n \n import junit.framework.Assert;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.ISODateTimeFormat;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * Unit test the parsing of ISO format datetimes\n  * @author Guy Allard\n  * @author Stephen Colebourne\n  */\n-public class TestParseISO extends TestCase {\n+public class TestParseISO extends JodaGwtTestCase {\n     \n     private static final int DEFAULT = 99999;\n \n      * This is the main class for this test suite.\n      * @param args command line arguments.\n      */\n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n     \n     /**\n      * TestSuite suite() is a junit required method.\n      * @see org.joda.test.time.BulkTest\n      */\n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestParseISO.class);\n-    }\n+    } */\n     \n     /**\n      * Constructor.\n      * @param name\n      */\n-    public TestParseISO(String name) {\n+    /* Removed for GWT public TestParseISO(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         super.setUp();\n     }\n     \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         super.tearDown();\n     }\n     \n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Arrays;\n import java.util.Date;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Partial.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPartial_Basics extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+public class TestPartial_Basics extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final int OFFSET = 1;\n-    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n-    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n-    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n-    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n-    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n     \n     private long TEST_TIME_NOW =\n             10L * DateTimeConstants.MILLIS_PER_HOUR\n         \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPartial_Basics.class);\n-    }\n-\n-    public TestPartial_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestPartial_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         Partial test = createHourMinPartial(COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testGetFormatter1() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Constructors.java\n \n import java.util.Arrays;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Partial.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPartial_Constructors extends TestCase {\n-\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n-    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+public class TestPartial_Constructors extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n     private static final int OFFSET = 1;\n     \n     private long TEST_TIME_NOW =\n         \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPartial_Constructors.class);\n-    }\n-\n-    public TestPartial_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestPartial_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Match.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Match.java\n  */\n package org.joda.time;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Partial.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPartial_Match extends TestCase {\n+public class TestPartial_Match extends JodaGwtTestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final int OFFSET = 1;\n-    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n-    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n-    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n-    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n-    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n     \n     private long TEST_TIME_NOW =\n             10L * DateTimeConstants.MILLIS_PER_HOUR\n         \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPartial_Match.class);\n-    }\n+    } */\n \n-    public TestPartial_Match(String name) {\n+    /* Removed for GWT public TestPartial_Match(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPartial_Properties.java\n \n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a Junit unit test for Partial.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPartial_Properties extends TestCase {\n-\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+public class TestPartial_Properties extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     \n     private DateTimeZone zone = null;\n     private static final DateTimeFieldType[] TYPES = new DateTimeFieldType[] {\n         + 7L * DateTimeConstants.MILLIS_PER_SECOND\n         + 8L;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPartial_Properties.class);\n-    }\n-\n-    public TestPartial_Properties(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestPartial_Properties(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(DateTimeZone.UTC);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n     }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPeriodType.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPeriodType.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a JUnit test for PeriodType.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPeriodType extends TestCase {\n+public class TestPeriodType extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPeriodType.class);\n-    }\n-\n-    public TestPeriodType(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestPeriodType(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n     }\n \n     //-----------------------------------------------------------------------\n-    private void assertEqualsAfterSerialization(PeriodType type) throws Exception {\n+    /* Removed for GWT private void assertEqualsAfterSerialization(PeriodType type) throws Exception {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(type);\n         ois.close();\n         \n         assertEquals(type, result);\n-    }\n-\n-    private void assertSameAfterSerialization(PeriodType type) throws Exception {\n+    } */\n+\n+    /* Removed for GWT private void assertSameAfterSerialization(PeriodType type) throws Exception {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(type);\n         ois.close();\n         \n         assertEquals(type, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testStandard() throws Exception {\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.standard().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearMonthDayTime().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearMonthDay().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearWeekDayTime().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearWeekDay().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearDayTime().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearDay().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.dayTime().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.time().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.years().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.months().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.weeks().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.days().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.hours().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.minutes().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.seconds().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.standard().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.forFields(types).hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     public void testForFields3() throws Exception {\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.forFields(types).hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n-        assertSameAfterSerialization(type);\n+// Removed for GWT         assertSameAfterSerialization(type);\n     }\n \n     public void testForFields4() throws Exception {\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoYears\", type.getName());\n         assertEquals(\"PeriodType[StandardNoYears]\", type.toString());\n-        assertEqualsAfterSerialization(type);\n+// Removed for GWT         assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoMonths\", type.getName());\n         assertEquals(\"PeriodType[StandardNoMonths]\", type.toString());\n-        assertEqualsAfterSerialization(type);\n+// Removed for GWT         assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoWeeks\", type.getName());\n         assertEquals(\"PeriodType[StandardNoWeeks]\", type.toString());\n-        assertEqualsAfterSerialization(type);\n+// Removed for GWT         assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoDays\", type.getName());\n         assertEquals(\"PeriodType[StandardNoDays]\", type.toString());\n-        assertEqualsAfterSerialization(type);\n+// Removed for GWT         assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoHours\", type.getName());\n         assertEquals(\"PeriodType[StandardNoHours]\", type.toString());\n-        assertEqualsAfterSerialization(type);\n+// Removed for GWT         assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoMinutes\", type.getName());\n         assertEquals(\"PeriodType[StandardNoMinutes]\", type.toString());\n-        assertEqualsAfterSerialization(type);\n+// Removed for GWT         assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoSeconds\", type.getName());\n         assertEquals(\"PeriodType[StandardNoSeconds]\", type.toString());\n-        assertEqualsAfterSerialization(type);\n+// Removed for GWT         assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoMillis\", type.getName());\n         assertEquals(\"PeriodType[StandardNoMillis]\", type.toString());\n-        assertEqualsAfterSerialization(type);\n+// Removed for GWT         assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertEquals(\"StandardNoHoursNoMinutesNoSeconds\", type.getName());\n         assertEquals(\"PeriodType[StandardNoHoursNoMinutesNoSeconds]\", type.toString());\n-        assertEqualsAfterSerialization(type);\n+// Removed for GWT         assertEqualsAfterSerialization(type);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPeriod_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPeriod_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n-import java.math.BigInteger;\n+// Removed for GWT import java.math.BigInteger;\n import java.util.Arrays;\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.base.BasePeriod;\n import org.joda.time.format.PeriodFormat;\n import org.joda.time.format.PeriodFormatter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Duration.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPeriod_Basics extends TestCase {\n+public class TestPeriod_Basics extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    //// Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPeriod_Basics.class);\n-    }\n-\n-    public TestPeriod_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestPeriod_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         Period test = new Period(123L);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    }\n+    } */\n \n //    //-----------------------------------------------------------------------\n //    public void testAddTo1() {\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testToStandardWeeks() {\n+    /* Removed for GWT public void testToStandardWeeks() {\n         Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8);\n         assertEquals(3, test.toStandardWeeks().getWeeks());\n         \n             test.toStandardWeeks();\n             fail();\n         } catch (ArithmeticException ex) {}\n-    }\n+    } */\n \n     public void testToStandardWeeks_years() {\n         Period test = Period.years(1);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testToStandardDays() {\n+    /* Removed for GWT public void testToStandardDays() {\n         Period test = new Period(0, 0, 0, 4, 5, 6, 7, 8);\n         assertEquals(4, test.toStandardDays().getDays());\n         \n             test.toStandardDays();\n             fail();\n         } catch (ArithmeticException ex) {}\n-    }\n+    } */\n \n     public void testToStandardDays_years() {\n         Period test = Period.years(1);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testToStandardHours() {\n+    /* Removed for GWT public void testToStandardHours() {\n         Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n         assertEquals(5, test.toStandardHours().getHours());\n         \n             test.toStandardHours();\n             fail();\n         } catch (ArithmeticException ex) {}\n-    }\n+    } */\n \n     public void testToStandardHours_years() {\n         Period test = Period.years(1);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testToStandardMinutes() {\n+    /* Removed for GWT public void testToStandardMinutes() {\n         Period test = new Period(0, 0, 0, 0, 0, 6, 7, 8);\n         assertEquals(6, test.toStandardMinutes().getMinutes());\n         \n             test.toStandardMinutes();\n             fail();\n         } catch (ArithmeticException ex) {}\n-    }\n+    } */\n \n     public void testToStandardMinutes_years() {\n         Period test = Period.years(1);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testToStandardDuration() {\n+    /* Removed for GWT public void testToStandardDuration() {\n         Period test = new Period(0, 0, 0, 0, 0, 0, 0, 8);\n         assertEquals(8, test.toStandardDuration().getMillis());\n         \n //            test.toStandardDuration();\n //            fail();\n //        } catch (ArithmeticException ex) {}\n-    }\n+    } */\n \n     public void testToStandardDuration_years() {\n         Period test = Period.years(1);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestPeriod_Constructors.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for Duration.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPeriod_Constructors extends TestCase {\n+public class TestPeriod_Constructors extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPeriod_Constructors.class);\n-    }\n-\n-    public TestPeriod_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestPeriod_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestSeconds.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestSeconds.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a Junit unit test for Seconds.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestSeconds extends TestCase {\n+public class TestSeconds extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-\n-    public static void main(String[] args) {\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestSeconds.class);\n-    }\n-\n-    public TestSeconds(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestSeconds(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         Seconds test = Seconds.THREE;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testToStandardWeeks() {\n+    } */\n+\n+    //-----------------------------------------------------------------------\n+    /* Removed for GWT public void testToStandardWeeks() {\n         Seconds test = Seconds.seconds(60 * 60 * 24 * 7 * 2);\n         Weeks expected = Weeks.weeks(2);\n         assertEquals(expected, test.toStandardWeeks());\n-    }\n-\n-    public void testToStandardDays() {\n+    } */\n+\n+    /* Removed for GWT public void testToStandardDays() {\n         Seconds test = Seconds.seconds(60 * 60 * 24 * 2);\n         Days expected = Days.days(2);\n         assertEquals(expected, test.toStandardDays());\n-    }\n-\n-    public void testToStandardHours() {\n+    } */\n+\n+    /* Removed for GWT public void testToStandardHours() {\n         Seconds test = Seconds.seconds(60 * 60 * 2);\n         Hours expected = Hours.hours(2);\n         assertEquals(expected, test.toStandardHours());\n-    }\n-\n-    public void testToStandardMinutes() {\n+    } */\n+\n+    /* Removed for GWT public void testToStandardMinutes() {\n         Seconds test = Seconds.seconds(60 * 2);\n         Minutes expected = Minutes.minutes(2);\n         assertEquals(expected, test.toStandardMinutes());\n-    }\n-\n-    public void testToStandardDuration() {\n+    } */\n+\n+    /* Removed for GWT public void testToStandardDuration() {\n         Seconds test = Seconds.seconds(20);\n         Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_SECOND);\n         assertEquals(expected, test.toStandardDuration());\n         \n         expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_SECOND);\n         assertEquals(expected, Seconds.MAX_VALUE.toStandardDuration());\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestTimeOfDay_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestTimeOfDay_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Arrays;\n import java.util.Date;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for TimeOfDay.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestTimeOfDay_Basics extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+public class TestTimeOfDay_Basics extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final int OFFSET = 1;\n-    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n-    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n-    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n-    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n-    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n     \n     private long TEST_TIME_NOW =\n             10L * DateTimeConstants.MILLIS_PER_HOUR\n         \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestTimeOfDay_Basics.class);\n-    }\n-\n-    public TestTimeOfDay_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestTimeOfDay_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40, COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestTimeOfDay_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestTimeOfDay_Constructors.java\n import java.util.Date;\n import java.util.GregorianCalendar;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for TimeOfDay.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestTimeOfDay_Constructors extends TestCase {\n-\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();\n+public class TestTimeOfDay_Constructors extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();\n     private static final int OFFSET = 1;\n     \n     private long TEST_TIME_NOW =\n         \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestTimeOfDay_Constructors.class);\n-    }\n-\n-    public TestTimeOfDay_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestTimeOfDay_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n         java.util.TimeZone.setDefault(LONDON.toTimeZone());\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestTimeOfDay_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestTimeOfDay_Properties.java\n \n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a Junit unit test for TimeOfDay.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestTimeOfDay_Properties extends TestCase {\n-\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+public class TestTimeOfDay_Properties extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     \n     private long TEST_TIME_NOW =\n             10L * DateTimeConstants.MILLIS_PER_HOUR\n         \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestTimeOfDay_Properties.class);\n-    }\n-\n-    public TestTimeOfDay_Properties(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestTimeOfDay_Properties(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestWeeks.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestWeeks.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a Junit unit test for Weeks.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestWeeks extends TestCase {\n+public class TestWeeks extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-\n-    public static void main(String[] args) {\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestWeeks.class);\n-    }\n-\n-    public TestWeeks(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestWeeks(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         Weeks test = Weeks.THREE;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testToStandardDays() {\n+    } */\n+\n+    //-----------------------------------------------------------------------\n+    /* Removed for GWT public void testToStandardDays() {\n         Weeks test = Weeks.weeks(2);\n         Days expected = Days.days(14);\n         assertEquals(expected, test.toStandardDays());\n         } catch (ArithmeticException ex) {\n             // expected\n         }\n-    }\n-\n-    public void testToStandardHours() {\n+    } */\n+\n+    /* Removed for GWT public void testToStandardHours() {\n         Weeks test = Weeks.weeks(2);\n         Hours expected = Hours.hours(2 * 7 * 24);\n         assertEquals(expected, test.toStandardHours());\n         } catch (ArithmeticException ex) {\n             // expected\n         }\n-    }\n-\n-    public void testToStandardMinutes() {\n+    } */\n+\n+    /* Removed for GWT public void testToStandardMinutes() {\n         Weeks test = Weeks.weeks(2);\n         Minutes expected = Minutes.minutes(2 * 7 * 24 * 60);\n         assertEquals(expected, test.toStandardMinutes());\n         } catch (ArithmeticException ex) {\n             // expected\n         }\n-    }\n+    } */\n \n     public void testToStandardSeconds() {\n         Weeks test = Weeks.weeks(2);\n         }\n     }\n \n-    public void testToStandardDuration() {\n+    /* Removed for GWT public void testToStandardDuration() {\n         Weeks test = Weeks.weeks(20);\n         Duration expected = new Duration(20L * DateTimeConstants.MILLIS_PER_WEEK);\n         assertEquals(expected, test.toStandardDuration());\n         \n         expected = new Duration(((long) Integer.MAX_VALUE) * DateTimeConstants.MILLIS_PER_WEEK);\n         assertEquals(expected, Weeks.MAX_VALUE.toStandardDuration());\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYearMonthDay_Basics.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYearMonthDay_Basics.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.util.Arrays;\n import java.util.Date;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestYearMonthDay_Basics extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+public class TestYearMonthDay_Basics extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final int OFFSET = 1;\n-    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n-    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n-    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n-    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n-    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    // Removed for GWT private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    // Removed for GWT private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n     \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n         \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestYearMonthDay_Basics.class);\n-    }\n-\n-    public TestYearMonthDay_Basics(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestYearMonthDay_Basics(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         YearMonthDay test = new YearMonthDay(1972, 6, 9, COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n         assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n         assertEquals(test.getChronology(), result.getChronology());\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYearMonthDay_Constructors.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYearMonthDay_Constructors.java\n import java.util.Date;\n import java.util.GregorianCalendar;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestYearMonthDay_Constructors extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n-    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n-    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+public class TestYearMonthDay_Constructors extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n     \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n         \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestYearMonthDay_Constructors.class);\n-    }\n-\n-    public TestYearMonthDay_Constructors(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestYearMonthDay_Constructors(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYearMonthDay_Properties.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYearMonthDay_Properties.java\n \n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.LenientChronology;\n import org.joda.time.chrono.StrictChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestYearMonthDay_Properties extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+public class TestYearMonthDay_Properties extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n         \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestYearMonthDay_Properties.class);\n-    }\n-\n-    public TestYearMonthDay_Properties(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestYearMonthDay_Properties(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(DateTimeZone.UTC);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n         zone = null;\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYears.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/TestYears.java\n  */\n package org.joda.time;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * This class is a Junit unit test for Years.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestYears extends TestCase {\n+public class TestYears extends JodaGwtTestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-\n-    public static void main(String[] args) {\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestYears.class);\n-    }\n-\n-    public TestYears(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestYears(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         Years test = Years.THREE;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testPlus_int() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestBuddhistChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestBuddhistChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for BuddhistChronology.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestBuddhistChronology extends TestCase {\n+public class TestBuddhistChronology extends JodaGwtTestCase {\n \n     private static int SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n     \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n-    private static final Chronology GJ_UTC = GJChronology.getInstanceUTC();\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology GJ_UTC = GJChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestBuddhistChronology.class);\n-    }\n-\n-    public TestBuddhistChronology(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestBuddhistChronology(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestCopticChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestCopticChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.DateTime.Property;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for CopticChronology.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestCopticChronology extends TestCase {\n+public class TestCopticChronology extends JodaGwtTestCase {\n \n     private static final int MILLIS_PER_DAY = DateTimeConstants.MILLIS_PER_DAY;\n \n     private static long SKIP = 1 * MILLIS_PER_DAY;\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         SKIP = 1 * MILLIS_PER_DAY;\n         return new TestSuite(TestCopticChronology.class);\n-    }\n-\n-    public TestCopticChronology(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestCopticChronology(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestEthiopicChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestEthiopicChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.DateTime.Property;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for EthiopicChronology.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestEthiopicChronology extends TestCase {\n+public class TestEthiopicChronology extends JodaGwtTestCase {\n \n     private static final int MILLIS_PER_DAY = DateTimeConstants.MILLIS_PER_DAY;\n \n     private static long SKIP = 1 * MILLIS_PER_DAY;\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final Chronology ETHIOPIC_UTC = EthiopicChronology.getInstanceUTC();\n-    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final Chronology ETHIOPIC_UTC = EthiopicChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         SKIP = 1 * MILLIS_PER_DAY;\n         return new TestSuite(TestEthiopicChronology.class);\n-    }\n-\n-    public TestEthiopicChronology(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestEthiopicChronology(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestGJChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestGJChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateMidnight;\n import org.joda.time.DateTime;\n import org.joda.time.Period;\n import org.joda.time.TimeOfDay;\n import org.joda.time.YearMonthDay;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for GJChronology.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestGJChronology extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+public class TestGJChronology extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestGJChronology.class);\n-    }\n-\n-    public TestGJChronology(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestGJChronology(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestGregorianChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestGregorianChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateMidnight;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.YearMonthDay;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for GregorianChronology.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestGregorianChronology extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+public class TestGregorianChronology extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestGregorianChronology.class);\n-    }\n-\n-    public TestGregorianChronology(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestGregorianChronology(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestISOChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestISOChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateMidnight;\n import org.joda.time.DateTime;\n import org.joda.time.Partial;\n import org.joda.time.TimeOfDay;\n import org.joda.time.YearMonthDay;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ISOChronology.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestISOChronology extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+public class TestISOChronology extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestISOChronology.class);\n-    }\n-\n-    public TestISOChronology(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestISOChronology(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestIslamicChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestIslamicChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationFieldType;\n import org.joda.time.DateTime.Property;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for IslamicChronology.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestIslamicChronology extends TestCase {\n+public class TestIslamicChronology extends JodaGwtTestCase {\n \n     private static long SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final Chronology ISLAMIC_UTC = IslamicChronology.getInstanceUTC();\n-    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final Chronology ISLAMIC_UTC = IslamicChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n         return new TestSuite(TestIslamicChronology.class);\n-    }\n-\n-    public TestIslamicChronology(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestIslamicChronology(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestJulianChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestJulianChronology.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for JulianChronology.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestJulianChronology extends TestCase {\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+public class TestJulianChronology extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestJulianChronology.class);\n-    }\n-\n-    public TestJulianChronology(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestJulianChronology(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestLenientChronology.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/chrono/TestLenientChronology.java\n  */\n package org.joda.time.chrono;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.MockZone;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  *\n  * @author Brian S O'Neill\n  * @author Blair Martin\n  */\n-public class TestLenientChronology extends TestCase {\n-    public static void main(String[] args) {\n+public class TestLenientChronology extends JodaGwtTestCase {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n+        return new TestSuite(TestLenientChronology.class);\n+    } */\n+\n+    /* Removed for GWT public TestLenientChronology(String name) {\n+        super(name);\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n     }\n \n-    public static TestSuite suite() {\n-        return new TestSuite(TestLenientChronology.class);\n-    }\n-\n-    public TestLenientChronology(String name) {\n-        super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n     /** Mock zone simulating America/Grand_Turk cutover at midnight 2007-04-01 */\n     private static long CUTOVER_TURK = 1175403600000L;\n     private static int OFFSET_TURK = -18000000;  // -05:00\n-    private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);\n+    // Removed for GWT private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);\n \n     //-----------------------------------------------------------------------\n     public void test_MockTurkIsCorrect() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestCalendarConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestCalendarConverter.java\n  */\n package org.joda.time.convert;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Field;\n+// Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for CalendarConverter.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestCalendarConverter extends TestCase {\n+public class TestCalendarConverter extends JodaGwtTestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestCalendarConverter.class);\n-    }\n+    } */\n \n-    public TestCalendarConverter(String name) {\n+    /* Removed for GWT public TestCalendarConverter(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         JULIAN = JulianChronology.getInstance();\n         ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSingleton() throws Exception {\n+    /* Removed for GWT public void testSingleton() throws Exception {\n         Class cls = CalendarConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestConverterManager.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestConverterManager.java\n package org.joda.time.convert;\n \n import java.io.Serializable;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import java.security.AllPermission;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.Permissions;\n-import java.security.Policy;\n-import java.security.ProtectionDomain;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Field;\n+// Removed for GWT import java.lang.reflect.Modifier;\n+// Removed for GWT import java.security.AllPermission;\n+// Removed for GWT import java.security.CodeSource;\n+// Removed for GWT import java.security.Permission;\n+// Removed for GWT import java.security.PermissionCollection;\n+// Removed for GWT import java.security.Permissions;\n+// Removed for GWT import java.security.Policy;\n+// Removed for GWT import java.security.ProtectionDomain;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n import org.joda.time.Interval;\n-import org.joda.time.JodaTimePermission;\n+// Removed for GWT import org.joda.time.JodaTimePermission;\n import org.joda.time.ReadWritablePeriod;\n import org.joda.time.ReadWritableInterval;\n import org.joda.time.ReadableDateTime;\n import org.joda.time.ReadableInterval;\n import org.joda.time.TimeOfDay;\n import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for ConverterManager.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestConverterManager extends TestCase {\n-    private static final boolean OLD_JDK;\n-    static {\n-        String str = System.getProperty(\"java.version\");\n-        boolean old = true;\n-        if (str.length() > 3 &&\n-            str.charAt(0) == '1' &&\n-            str.charAt(1) == '.' &&\n-            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n-            old = false;\n-        }\n-        OLD_JDK = old;\n-    }\n-\n-    private static final Policy RESTRICT;\n-    private static final Policy ALLOW;\n-    static {\n-        // don't call Policy.getPolicy()\n-        RESTRICT = new Policy() {\n-            public PermissionCollection getPermissions(CodeSource codesource) {\n-                Permissions p = new Permissions();\n-                p.add(new AllPermission());  // enable everything\n-                return p;\n-            }\n-            public void refresh() {\n-            }\n-            public boolean implies(ProtectionDomain domain, Permission permission) {\n-                if (permission instanceof JodaTimePermission) {\n-                    return false;\n-                }\n-                return true;\n-//                return super.implies(domain, permission);\n-            }\n-        };\n-        ALLOW = new Policy() {\n-            public PermissionCollection getPermissions(CodeSource codesource) {\n-                Permissions p = new Permissions();\n-                p.add(new AllPermission());  // enable everything\n-                return p;\n-            }\n-            public void refresh() {\n-            }\n-        };\n-    }\n-\n-    public static void main(String[] args) {\n+public class TestConverterManager extends JodaGwtTestCase {\n+    // Removed for GWT private static final boolean OLD_JDK;\n+// Removed for GWT\n+//    static {\n+//        String str = System.getProperty(\"java.version\");\n+//        boolean old = true;\n+//        if (str.length() > 3 &&\n+//            str.charAt(0) == '1' &&\n+//            str.charAt(1) == '.' &&\n+//            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n+//            old = false;\n+//        }\n+//        OLD_JDK = old;\n+//    }\n+\n+    // Removed for GWT private static final Policy RESTRICT;\n+    // Removed for GWT private static final Policy ALLOW;\n+// Removed for GWT\n+//    static {\n+//        // don't call Policy.getPolicy()\n+//        RESTRICT = new Policy() {\n+//            public PermissionCollection getPermissions(CodeSource codesource) {\n+//                Permissions p = new Permissions();\n+//                p.add(new AllPermission());  // enable everything\n+//                return p;\n+//            }\n+//            public void refresh() {\n+//            }\n+//            public boolean implies(ProtectionDomain domain, Permission permission) {\n+//                if (permission instanceof JodaTimePermission) {\n+//                    return false;\n+//                }\n+//                return true;\n+////                return super.implies(domain, permission);\n+//            }\n+//        };\n+//        ALLOW = new Policy() {\n+//            public PermissionCollection getPermissions(CodeSource codesource) {\n+//                Permissions p = new Permissions();\n+//                p.add(new AllPermission());  // enable everything\n+//                return p;\n+//            }\n+//            public void refresh() {\n+//            }\n+//        };\n+//    }\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestConverterManager.class);\n-    }\n-\n-    public TestConverterManager(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestConverterManager(String name) {\n         super(name);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testSingleton() throws Exception {\n+    } */\n+\n+    //-----------------------------------------------------------------------\n+    /* Removed for GWT public void testSingleton() throws Exception {\n         Class cls = ConverterManager.class;\n         assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n         \n         \n         Field fld = cls.getDeclaredField(\"INSTANCE\");\n         assertEquals(true, Modifier.isPrivate(fld.getModifiers()));\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testGetInstantConverter() {\n         assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n     }\n \n-    public void testAddInstantConverterSecurity() {\n+    /* Removed for GWT public void testAddInstantConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testRemoveInstantConverter1() {\n         assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n     }\n \n-    public void testRemoveInstantConverterSecurity() {\n+    /* Removed for GWT public void testRemoveInstantConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n-    public void testAddPartialConverterSecurity() {\n+    /* Removed for GWT public void testAddPartialConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testRemovePartialConverter1() {\n         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n-    public void testRemovePartialConverterSecurity() {\n+    /* Removed for GWT public void testRemovePartialConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n     }\n \n-    public void testAddDurationConverterSecurity() {\n+    /* Removed for GWT public void testAddDurationConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testRemoveDurationConverter1() {\n         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n     }\n \n-    public void testRemoveDurationConverterSecurity() {\n+    /* Removed for GWT public void testRemoveDurationConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(DURATION_SIZE, ConverterManager.getInstance().getDurationConverters().length);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n         assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n     }\n \n-    public void testAddPeriodConverterSecurity() {\n+    /* Removed for GWT public void testAddPeriodConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testRemovePeriodConverter1() {\n         assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n     }\n \n-    public void testRemovePeriodConverterSecurity() {\n+    /* Removed for GWT public void testRemovePeriodConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(PERIOD_SIZE, ConverterManager.getInstance().getPeriodConverters().length);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n         assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n     }\n \n-    public void testAddIntervalConverterSecurity() {\n+    /* Removed for GWT public void testAddIntervalConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testRemoveIntervalConverter1() {\n         assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n     }\n \n-    public void testRemoveIntervalConverterSecurity() {\n+    /* Removed for GWT public void testRemoveIntervalConverterSecurity() {\n         if (OLD_JDK) {\n             return;\n         }\n             Policy.setPolicy(ALLOW);\n         }\n         assertEquals(INTERVAL_SIZE, ConverterManager.getInstance().getIntervalConverters().length);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestConverterSet.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestConverterSet.java\n  */\n package org.joda.time.convert;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Calendar;\n import java.util.GregorianCalendar;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateMidnight;\n import org.joda.time.DateTime;\n import org.joda.time.ReadWritableInstant;\n import org.joda.time.ReadableDateTime;\n import org.joda.time.ReadableInstant;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for ConverterSet.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestConverterSet extends TestCase {\n+public class TestConverterSet extends JodaGwtTestCase {\n \n     private static final Converter c1 = new Converter() {\n         public Class getSupportedType() {return Boolean.class;}\n         public Class getSupportedType() {return Integer.class;}\n     };\n     \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestConverterSet.class);\n-    }\n+    } */\n \n-    public TestConverterSet(String name) {\n+    /* Removed for GWT public TestConverterSet(String name) {\n         super(name);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n-    public void testClass() throws Exception {\n+    /* Removed for GWT public void testClass() throws Exception {\n         Class cls = ConverterSet.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(con.getModifiers()));\n         assertEquals(false, Modifier.isProtected(con.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(con.getModifiers()));\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testBigHashtable() {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestDateConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestDateConverter.java\n  */\n package org.joda.time.convert;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Field;\n+// Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Arrays;\n import java.util.Date;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateConverter.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDateConverter extends TestCase {\n+public class TestDateConverter extends JodaGwtTestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology ISO;\n     private static Chronology JULIAN;\n     private static Chronology COPTIC;\n     \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateConverter.class);\n-    }\n+    } */\n \n-    public TestDateConverter(String name) {\n+    /* Removed for GWT public TestDateConverter(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         JULIAN = JulianChronology.getInstance();\n         COPTIC = CopticChronology.getInstance();\n         ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSingleton() throws Exception {\n+    /* Removed for GWT public void testSingleton() throws Exception {\n         Class cls = DateConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestLongConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestLongConverter.java\n  */\n package org.joda.time.convert;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Field;\n+// Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Arrays;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for LongConverter.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestLongConverter extends TestCase {\n+public class TestLongConverter extends JodaGwtTestCase {\n \n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n     \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestLongConverter.class);\n-    }\n+    } */\n \n-    public TestLongConverter(String name) {\n+    /* Removed for GWT public TestLongConverter(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         JULIAN = JulianChronology.getInstance();\n         ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSingleton() throws Exception {\n+    /* Removed for GWT public void testSingleton() throws Exception {\n         Class cls = LongConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestNullConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestNullConverter.java\n  */\n package org.joda.time.convert;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Field;\n+// Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Arrays;\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for NullConverter.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestNullConverter extends TestCase {\n+public class TestNullConverter extends JodaGwtTestCase {\n \n     private long TEST_TIME_NOW =\n             20 * DateTimeConstants.MILLIS_PER_DAY\n             + 30L * DateTimeConstants.MILLIS_PER_SECOND\n             + 40L;\n             \n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology ISO;\n     private static Chronology JULIAN;\n     \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestNullConverter.class);\n-    }\n+    } */\n \n-    public TestNullConverter(String name) {\n+    /* Removed for GWT public TestNullConverter(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         JULIAN = JulianChronology.getInstance();\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSingleton() throws Exception {\n+    /* Removed for GWT public void testSingleton() throws Exception {\n         Class cls = NullConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadableDurationConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadableDurationConverter.java\n  */\n package org.joda.time.convert;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Field;\n+// Removed for GWT import java.lang.reflect.Modifier;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.ReadableDuration;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ReadableDurationConverter.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestReadableDurationConverter extends TestCase {\n+public class TestReadableDurationConverter extends JodaGwtTestCase {\n \n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n     \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestReadableDurationConverter.class);\n-    }\n+    } */\n \n-    public TestReadableDurationConverter(String name) {\n+    /* Removed for GWT public TestReadableDurationConverter(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         JULIAN = JulianChronology.getInstance();\n         ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSingleton() throws Exception {\n+    /* Removed for GWT public void testSingleton() throws Exception {\n         Class cls = ReadableDurationConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadableInstantConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadableInstantConverter.java\n  */\n package org.joda.time.convert;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Field;\n+// Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Arrays;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ReadableInstantConverter.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestReadableInstantConverter extends TestCase {\n+public class TestReadableInstantConverter extends JodaGwtTestCase {\n \n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n     \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestReadableInstantConverter.class);\n-    }\n+    } */\n \n-    public TestReadableInstantConverter(String name) {\n+    /* Removed for GWT public TestReadableInstantConverter(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         JULIAN = JulianChronology.getInstance();\n         ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSingleton() throws Exception {\n+    /* Removed for GWT public void testSingleton() throws Exception {\n         Class cls = ReadableInstantConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadableIntervalConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadableIntervalConverter.java\n  */\n package org.joda.time.convert;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Field;\n+// Removed for GWT import java.lang.reflect.Modifier;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for ReadableIntervalConverter.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestReadableIntervalConverter extends TestCase {\n+public class TestReadableIntervalConverter extends JodaGwtTestCase {\n \n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n     \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestReadableIntervalConverter.class);\n-    }\n+    } */\n \n-    public TestReadableIntervalConverter(String name) {\n+    /* Removed for GWT public TestReadableIntervalConverter(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         JULIAN = JulianChronology.getInstance();\n         ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSingleton() throws Exception {\n+    /* Removed for GWT public void testSingleton() throws Exception {\n         Class cls = ReadableIntervalConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadablePartialConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadablePartialConverter.java\n  */\n package org.joda.time.convert;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Field;\n+// Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Arrays;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeField;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ReadablePartialConverter.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestReadablePartialConverter extends TestCase {\n+public class TestReadablePartialConverter extends JodaGwtTestCase {\n \n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n     private static Chronology BUDDHIST;\n     \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestReadablePartialConverter.class);\n-    }\n+    } */\n \n-    public TestReadablePartialConverter(String name) {\n+    /* Removed for GWT public TestReadablePartialConverter(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         JULIAN = JulianChronology.getInstance();\n         ISO = ISOChronology.getInstance();\n         BUDDHIST = BuddhistChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSingleton() throws Exception {\n+    /* Removed for GWT public void testSingleton() throws Exception {\n         Class cls = ReadablePartialConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadablePeriodConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestReadablePeriodConverter.java\n  */\n package org.joda.time.convert;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Field;\n+// Removed for GWT import java.lang.reflect.Modifier;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ReadablePeriodConverter.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestReadablePeriodConverter extends TestCase {\n+public class TestReadablePeriodConverter extends JodaGwtTestCase {\n \n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n     \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestReadablePeriodConverter.class);\n-    }\n+    } */\n \n-    public TestReadablePeriodConverter(String name) {\n+    /* Removed for GWT public TestReadablePeriodConverter(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         JULIAN = JulianChronology.getInstance();\n         ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSingleton() throws Exception {\n+    /* Removed for GWT public void testSingleton() throws Exception {\n         Class cls = ReadablePeriodConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/convert/TestStringConverter.java\n  */\n package org.joda.time.convert;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Field;\n+// Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Arrays;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for StringConverter.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestStringConverter extends TestCase {\n-\n-    private static final DateTimeZone ONE_HOUR = DateTimeZone.forOffsetHours(1);\n-    private static final DateTimeZone SIX = DateTimeZone.forOffsetHours(6);\n-    private static final DateTimeZone SEVEN = DateTimeZone.forOffsetHours(7);\n-    private static final DateTimeZone EIGHT = DateTimeZone.forOffsetHours(8);\n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final Chronology ISO_EIGHT = ISOChronology.getInstance(EIGHT);\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+public class TestStringConverter extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone ONE_HOUR = DateTimeZone.forOffsetHours(1);\n+    // Removed for GWT private static final DateTimeZone SIX = DateTimeZone.forOffsetHours(6);\n+    // Removed for GWT private static final DateTimeZone SEVEN = DateTimeZone.forOffsetHours(7);\n+    // Removed for GWT private static final DateTimeZone EIGHT = DateTimeZone.forOffsetHours(8);\n+    // Removed for GWT private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final Chronology ISO_EIGHT = ISOChronology.getInstance(EIGHT);\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n     private static Chronology ISO;\n     private static Chronology JULIAN;\n     \n     private DateTimeZone zone = null;\n     private Locale locale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestStringConverter.class);\n-    }\n-\n-    public TestStringConverter(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestStringConverter(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         zone = DateTimeZone.getDefault();\n         locale = Locale.getDefault();\n         DateTimeZone.setDefault(LONDON);\n         ISO = ISOChronology.getInstance();\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeZone.setDefault(zone);\n         Locale.setDefault(locale);\n         zone = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSingleton() throws Exception {\n+    /* Removed for GWT public void testSingleton() throws Exception {\n         Class cls = StringConverter.class;\n         assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n         assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n         assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n         assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testSupportedType() throws Exception {\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestBaseDateTimeField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestBaseDateTimeField.java\n import java.util.Arrays;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeField;\n import org.joda.time.TimeOfDay;\n import org.joda.time.base.BasePartial;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for BaseDateTimeField.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestBaseDateTimeField extends TestCase {\n-\n-    public static void main(String[] args) {\n+public class TestBaseDateTimeField extends JodaGwtTestCase {\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestBaseDateTimeField.class);\n-    }\n-\n-    public TestBaseDateTimeField(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestBaseDateTimeField(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestFieldUtils.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestFieldUtils.java\n  */\n package org.joda.time.field;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+import org.joda.time.gwt.JodaGwtTestCase;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n \n /**\n  * \n  *\n  * @author Brian S O'Neill\n  */\n-public class TestFieldUtils extends TestCase {\n-    public static void main(String[] args) {\n+public class TestFieldUtils extends JodaGwtTestCase {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestFieldUtils.class);\n-    }\n+    } */\n \n-    public TestFieldUtils(String name) {\n+    /* Removed for GWT public TestFieldUtils(String name) {\n         super(name);\n-    }\n+    } */\n \n     public void testSafeAddInt() {\n         assertEquals(0, FieldUtils.safeAdd(0, 0));\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestMillisDurationField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestMillisDurationField.java\n  */\n package org.joda.time.field;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PeriodFormatterBuilder.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestMillisDurationField extends TestCase {\n-\n-    public static void main(String[] args) {\n+public class TestMillisDurationField extends JodaGwtTestCase {\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestMillisDurationField.class);\n-    }\n-\n-    public TestMillisDurationField(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestMillisDurationField(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         DurationField test = MillisDurationField.INSTANCE;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertSame(test, result);\n-    }\n+    } */\n \n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestOffsetDateTimeField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestOffsetDateTimeField.java\n import java.util.Arrays;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PreciseDateTimeField.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestOffsetDateTimeField extends TestCase {\n-\n-    public static void main(String[] args) {\n+public class TestOffsetDateTimeField extends JodaGwtTestCase {\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestOffsetDateTimeField.class);\n-    }\n-\n-    public TestOffsetDateTimeField(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestOffsetDateTimeField(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestPreciseDateTimeField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestPreciseDateTimeField.java\n import java.util.Arrays;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PreciseDateTimeField.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPreciseDateTimeField extends TestCase {\n-\n-    public static void main(String[] args) {\n+public class TestPreciseDateTimeField extends JodaGwtTestCase {\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPreciseDateTimeField.class);\n-    }\n-\n-    public TestPreciseDateTimeField(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestPreciseDateTimeField(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestPreciseDurationDateTimeField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestPreciseDurationDateTimeField.java\n import java.util.Arrays;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PreciseDurationDateTimeField.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPreciseDurationDateTimeField extends TestCase {\n-\n-    public static void main(String[] args) {\n+public class TestPreciseDurationDateTimeField extends JodaGwtTestCase {\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPreciseDurationDateTimeField.class);\n-    }\n-\n-    public TestPreciseDurationDateTimeField(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestPreciseDurationDateTimeField(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestPreciseDurationField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestPreciseDurationField.java\n  */\n package org.joda.time.field;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PreciseDurationField.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPreciseDurationField extends TestCase {\n+public class TestPreciseDurationField extends JodaGwtTestCase {\n     \n     private static final long LONG_INTEGER_MAX = Integer.MAX_VALUE;\n     private static final int INTEGER_MAX = Integer.MAX_VALUE;\n     \n     private PreciseDurationField iField;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPreciseDurationField.class);\n-    }\n-\n-    public TestPreciseDurationField(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestPreciseDurationField(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         iField = new PreciseDurationField(DurationFieldType.seconds(), 1000);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         iField = null;\n     }\n \n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         DurationField test = iField;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    }\n+    } */\n \n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestScaledDurationField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestScaledDurationField.java\n  */\n package org.joda.time.field;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PreciseDurationField.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestScaledDurationField extends TestCase {\n+public class TestScaledDurationField extends JodaGwtTestCase {\n     \n     private static final long LONG_INTEGER_MAX = Integer.MAX_VALUE;\n     private static final int INTEGER_MAX = Integer.MAX_VALUE;\n     \n     private ScaledDurationField iField;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestScaledDurationField.class);\n-    }\n-\n-    public TestScaledDurationField(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestScaledDurationField(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DurationField base = MillisDurationField.INSTANCE;\n         iField = new ScaledDurationField(base, DurationFieldType.minutes(), 90);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         iField = null;\n     }\n \n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSerialization() throws Exception {\n+    /* Removed for GWT public void testSerialization() throws Exception {\n         DurationField test = iField;\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ois.close();\n         \n         assertEquals(test, result);\n-    }\n+    } */\n \n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestUnsupportedDateTimeField.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/field/TestUnsupportedDateTimeField.java\n \n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationFieldType;\n import org.joda.time.LocalTime;\n import org.joda.time.ReadablePartial;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test to test only the UnsupportedDateTimeField class.\n  * \n  * @author Jeremy R. Rickard\n  */\n-public class TestUnsupportedDateTimeField extends TestCase {\n+public class TestUnsupportedDateTimeField extends JodaGwtTestCase {\n \n     private DurationFieldType weeks;\n     private DurationFieldType months;\n     private DateTimeFieldType dateTimeFieldTypeOne;\n     private ReadablePartial localTime;\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestUnsupportedDateTimeField.class);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         weeks = DurationFieldType.weeks();\n         months = DurationFieldType.months();\n         dateTimeFieldTypeOne = DateTimeFieldType.centuryOfEra();\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestDateTimeFormat.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestDateTimeFormat.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.chrono.GJChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTime Formating.\n  * @author Stephen Colebourne\n  * @author Fredrik Borgh\n  */\n-public class TestDateTimeFormat extends TestCase {\n-\n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n+public class TestDateTimeFormat extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateTimeFormat.class);\n-    }\n-\n-    public TestDateTimeFormat(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateTimeFormat(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestDateTimeFormatter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestDateTimeFormatter.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.ReadablePartial;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTime Formating.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestDateTimeFormatter extends TestCase {\n-\n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+public class TestDateTimeFormatter extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private DateTimeFormatter f = null;\n     private DateTimeFormatter g = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateTimeFormatter.class);\n-    }\n-\n-    public TestDateTimeFormatter(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateTimeFormatter(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         g = ISODateTimeFormat.dateTimeNoMillis();\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestDateTimeFormatterBuilder.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestDateTimeFormatterBuilder.java\n  */\n package org.joda.time.format;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTime;\n import org.joda.time.DateTimeFieldType;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for DateTimeFormatterBuilder.\n  * @author Stephen Colebourne\n  * @author Brian S O'Neill\n  */\n-public class TestDateTimeFormatterBuilder extends TestCase {\n-\n-    public static void main(String[] args) {\n+public class TestDateTimeFormatterBuilder extends JodaGwtTestCase {\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestDateTimeFormatterBuilder.class);\n-    }\n-\n-    public TestDateTimeFormatterBuilder(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestDateTimeFormatterBuilder(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISODateTimeFormat.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISODateTimeFormat.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTime;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Partial;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ISODateTimeFormat.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestISODateTimeFormat extends TestCase {\n-\n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+public class TestISODateTimeFormat extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestISODateTimeFormat.class);\n-    }\n-\n-    public TestISODateTimeFormat(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestISODateTimeFormat(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISODateTimeFormatParsing.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISODateTimeFormatParsing.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ISODateTimeFormat parsing.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestISODateTimeFormatParsing extends TestCase {\n+public class TestISODateTimeFormatParsing extends JodaGwtTestCase {\n \n     private DateTimeZone originalDateTimeZone = null;\n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestISODateTimeFormatParsing.class);\n-    }\n-\n-    public TestISODateTimeFormatParsing(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestISODateTimeFormatParsing(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISODateTimeFormat_Fields.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISODateTimeFormat_Fields.java\n import java.util.Collections;\n import java.util.List;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeFieldType;\n import org.joda.time.Partial;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ISODateTimeFormat.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestISODateTimeFormat_Fields extends TestCase {\n-\n-    public static void main(String[] args) {\n+public class TestISODateTimeFormat_Fields extends JodaGwtTestCase {\n+\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestISODateTimeFormat_Fields.class);\n-    }\n-\n-    public TestISODateTimeFormat_Fields(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestISODateTimeFormat_Fields(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n-    }\n-\n-    protected void tearDown() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n+    }\n+\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISOPeriodFormat.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISOPeriodFormat.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ISOPeriodFormat.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestISOPeriodFormat extends TestCase {\n+public class TestISOPeriodFormat extends JodaGwtTestCase {\n     \n     private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n     private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n     private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n     private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestISOPeriodFormat.class);\n-    }\n+    } */\n \n-    public TestISOPeriodFormat(String name) {\n+    /* Removed for GWT public TestISOPeriodFormat(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISOPeriodFormatParsing.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestISOPeriodFormatParsing.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for ISOPeriodFormat.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestISOPeriodFormatParsing extends TestCase {\n+public class TestISOPeriodFormatParsing extends JodaGwtTestCase {\n \n     private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n     private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n     private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n     private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestISOPeriodFormatParsing.class);\n-    }\n-\n-    public TestISOPeriodFormatParsing(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestISOPeriodFormatParsing(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormat.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormat.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PeriodFormat.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPeriodFormat extends TestCase {\n+public class TestPeriodFormat extends JodaGwtTestCase {\n     \n     private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n     private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n     private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n     private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPeriodFormat.class);\n-    }\n+    } */\n \n-    public TestPeriodFormat(String name) {\n+    /* Removed for GWT public TestPeriodFormat(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormatParsing.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormatParsing.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PeriodFormat.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPeriodFormatParsing extends TestCase {\n+public class TestPeriodFormatParsing extends JodaGwtTestCase {\n \n     private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n     private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n     private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n     private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n \n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private TimeZone originalTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPeriodFormatParsing.class);\n-    }\n+    } */\n \n-    public TestPeriodFormatParsing(String name) {\n+    /* Removed for GWT public TestPeriodFormatParsing(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         Locale.setDefault(Locale.UK);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormatter.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormatter.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.PeriodType;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for Period Formating.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPeriodFormatter extends TestCase {\n-\n-    private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n-    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+public class TestPeriodFormatter extends JodaGwtTestCase {\n+\n+    // Removed for GWT private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    // Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    // Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    // Removed for GWT private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n+    // Removed for GWT private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    // Removed for GWT private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    // Removed for GWT private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     private Locale originalLocale = null;\n     private PeriodFormatter f = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPeriodFormatter.class);\n-    }\n-\n-    public TestPeriodFormatter(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestPeriodFormatter(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         f = ISOPeriodFormat.standard();\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormatterBuilder.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestPeriodFormatterBuilder.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a Junit unit test for PeriodFormatterBuilder.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestPeriodFormatterBuilder extends TestCase {\n+public class TestPeriodFormatterBuilder extends JodaGwtTestCase {\n     \n     private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n     private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n     private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n     private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n \n-    //private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    //private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    //// Removed for GWT private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    // Removed for GWT private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    //// Removed for GWT private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     \n     private PeriodFormatterBuilder builder;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestPeriodFormatterBuilder.class);\n-    }\n-\n-    public TestPeriodFormatterBuilder(String name) {\n+    } */\n+\n+    /* Removed for GWT public TestPeriodFormatterBuilder(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         builder = new PeriodFormatterBuilder();\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         TimeZone.setDefault(originalTimeZone);\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestTextFields.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/format/TestTextFields.java\n \n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.MutableDateTime;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * Makes sure that text fields are correct for English.\n  *\n  * @author Brian S O'Neill\n  */\n-public class TestTextFields extends TestCase {\n+public class TestTextFields extends JodaGwtTestCase {\n \n-    private static final DateTimeZone[] ZONES = {\n+    /* Removed for GWT private static final DateTimeZone[] ZONES = {\n         DateTimeZone.UTC,\n         DateTimeZone.forID(\"Europe/Paris\"),\n         DateTimeZone.forID(\"Europe/London\"),\n         DateTimeZone.forID(\"Asia/Tokyo\"),\n         DateTimeZone.forID(\"America/Los_Angeles\"),\n-    };\n+    }; */\n \n     private static final String[] MONTHS = {\n         null,\n     private DateTimeZone originalDateTimeZone = null;\n     private Locale originalLocale = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestTextFields.class);\n-    }\n+    } */\n \n-    public TestTextFields(String name) {\n+    /* Removed for GWT public TestTextFields(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n         DateTimeZone.setDefault(ZONES[0]);\n         Locale.setDefault(Locale.ENGLISH);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeZone.setDefault(originalDateTimeZone);\n         Locale.setDefault(originalLocale);\n         originalDateTimeZone = null;\n--- /dev/null\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/gwt/JodaGwtTestCase.java\n+package org.joda.time.gwt;\n+\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.gwt.tz.GwtZoneInfoProvider;\n+import org.joda.time.tz.Provider;\n+\n+import com.google.gwt.junit.client.GWTTestCase;\n+\n+public class JodaGwtTestCase extends GWTTestCase {\n+    \n+    private static Provider originalProvider;\n+\n+    protected void gwtSetUp() throws Exception {\n+        originalProvider = DateTimeZone.getProvider();\n+        DateTimeZone.setProvider(new GwtZoneInfoProvider());\n+    }\n+    \n+    protected void gwtTearDown() throws Exception {\n+        DateTimeZone.setProvider(originalProvider);\n+    }\n+\n+    @Override\n+    public String getModuleName() {\n+        return \"org.joda.Time\";\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/gwt/TestConstants.java\n+package org.joda.time.gwt;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MockZone;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.EthiopicChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.IslamicChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+\n+public class TestConstants {\n+    \n+    public static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    public static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    public static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    public static final DateTimeZone ZONE_NEW_YORK = DateTimeZone.forID(\"America/New_York\");\n+    public static final DateTimeZone ZONE_MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n+    public static final DateTimeZone ZONE_GUATEMALA = DateTimeZone.forID(\"America/Guatemala\");\n+    private static long CUTOVER_TURK = 1175403600000L;\n+    private static int OFFSET_TURK = -18000000;  // -05:00\n+    public static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);\n+    public static final DateTimeZone MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n+    public static final DateTimeZone ONE_HOUR = DateTimeZone.forOffsetHours(1);\n+    public static final DateTimeZone SIX = DateTimeZone.forOffsetHours(6);\n+    public static final DateTimeZone SEVEN = DateTimeZone.forOffsetHours(7);\n+    public static final DateTimeZone EIGHT = DateTimeZone.forOffsetHours(8);\n+    public static final DateTimeZone UTC = DateTimeZone.UTC;\n+    public static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n+    public static final DateTimeZone NEW_YORK = DateTimeZone.forID(\"America/New_York\");\n+    private static long CUTOVER_GAZA = 1175378400000L;\n+    private static int OFFSET_GAZA = 7200000;  // +02:00\n+    public static final DateTimeZone MOCK_GAZA = new MockZone(CUTOVER_GAZA, OFFSET_GAZA);\n+\n+    public static final DateTimeZone[] ZONES = {\n+        DateTimeZone.UTC,\n+        DateTimeZone.forID(\"Europe/Paris\"),\n+        DateTimeZone.forID(\"Europe/London\"),\n+        DateTimeZone.forID(\"Asia/Tokyo\"),\n+        DateTimeZone.forID(\"America/Los_Angeles\"),\n+    };\n+    public static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+    public static final int OFFSET_MOSCOW = MOSCOW.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+    public static final int OFFSET_LONDON = LONDON.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+\n+    public static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    public static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    public static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    public static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    public static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    public static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    public static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    public static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    public static final Chronology ISO_EIGHT = ISOChronology.getInstance(EIGHT);\n+    public static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    public static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    public static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    public static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    public static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    public static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    public static final Chronology ETHIOPIC_UTC = EthiopicChronology.getInstanceUTC();\n+    public static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    public static final Chronology ISLAMIC_UTC = IslamicChronology.getInstanceUTC();\n+    public static final Chronology GJ_UTC = GJChronology.getInstanceUTC();\n+    public static final Chronology GREGORIAN_MOSCOW = GregorianChronology.getInstance(MOSCOW);\n+    public static final ISOChronology ISO_DEFAULT = ISOChronology.getInstance(LONDON);\n+    public static final GJChronology GJ_DEFAULT = GJChronology.getInstance(LONDON);\n+    public static final GregorianChronology GREGORIAN_DEFAULT = GregorianChronology.getInstance(LONDON);\n+    public static final BuddhistChronology BUDDHIST_DEFAULT = BuddhistChronology.getInstance(LONDON);\n+    public static final CopticChronology COPTIC_DEFAULT = CopticChronology.getInstance(LONDON);\n+    public static final GJChronology GJ = GJChronology.getInstance();\n+    public static final JulianChronology JULIAN_LONDON = JulianChronology.getInstance(LONDON);\n+    public static final JulianChronology JULIAN_PARIS = JulianChronology.getInstance(PARIS);\n+    \n+    public static class TestAll {\n+\n+        public static final boolean FAST = false;\n+        \n+    }\n+}\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/tz/TestBuilder.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/tz/TestBuilder.java\n  */\n package org.joda.time.tz;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n+// Removed for GWT import java.io.ByteArrayInputStream;\n+// Removed for GWT import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.DateTimeFormatterBuilder;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * Test cases for DateTimeZoneBuilder.\n  *\n  * @author Brian S O'Neill\n  */\n-public class TestBuilder extends TestCase {\n-    public static void main(String[] args) {\n+public class TestBuilder extends JodaGwtTestCase {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n-\n-    public static TestSuite suite() {\n+    } */\n+\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestBuilder.class);\n-    }\n+    } */\n \n     static final DateTimeFormatter OFFSET_FORMATTER = new DateTimeFormatterBuilder()\n         .appendTimeZoneOffset(null, true, 2, 4)\n \n     private DateTimeZone originalDateTimeZone = null;\n \n-    public TestBuilder(String name) {\n+    /* Removed for GWT public TestBuilder(String name) {\n         super(name);\n-    }\n-\n-    protected void setUp() throws Exception {\n+    } */\n+\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         originalDateTimeZone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(DateTimeZone.UTC);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeZone.setDefault(originalDateTimeZone);\n     }\n \n         }\n     }\n \n-    public void testSerialization() throws IOException {\n+    /* Removed for GWT public void testSerialization() throws IOException {\n         DateTimeZone tz = testSerialization\n             (buildAmericaLosAngelesBuilder(), \"America/Los_Angeles\");\n \n         assertEquals(false, tz.isFixed());\n         testForwardTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n         testReverseTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n-    }\n-\n-    static DateTimeZone testSerialization(DateTimeZoneBuilder builder, String id)\n+    } */\n+\n+    /* Removed for GWT static DateTimeZone testSerialization(DateTimeZoneBuilder builder, String id)\n         throws IOException\n     {\n         ByteArrayOutputStream out = new ByteArrayOutputStream();\n         DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\n         assertEquals(id, tz.getID());\n         return tz;\n-    }\n-\n-    public void testFixed() throws IOException {\n+    } */\n+\n+    /* Removed for GWT public void testFixed() throws IOException {\n         DateTimeZoneBuilder builder = new DateTimeZoneBuilder()\n             .setStandardOffset(3600000)\n             .setFixedSavings(\"LMT\", 0);\n \n             tz = testSerialization(builder, \"Test\");\n         }\n-    }\n+    } */\n }\n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/tz/TestFixedDateTimeZone.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/tz/TestFixedDateTimeZone.java\n import java.util.Date;\n import java.util.TimeZone;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeZone;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * Test cases for FixedDateTimeZone.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestFixedDateTimeZone extends TestCase {\n+public class TestFixedDateTimeZone extends JodaGwtTestCase {\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestFixedDateTimeZone.class);\n-    }\n+    } */\n \n     private DateTimeZone originalDateTimeZone = null;\n \n-    public TestFixedDateTimeZone(String name) {\n+    /* Removed for GWT public TestFixedDateTimeZone(String name) {\n         super(name);\n-    }\n+    } */\n \n-    protected void setUp() throws Exception {\n+    protected void gwtSetUp() throws Exception {\n+        super.gwtSetUp();\n         originalDateTimeZone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(DateTimeZone.UTC);\n     }\n \n-    protected void tearDown() throws Exception {\n+    protected void gwtTearDown() throws Exception {\n+        super.gwtTearDown();\n         DateTimeZone.setDefault(originalDateTimeZone);\n     }\n \n--- a/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/tz/TestUTCProvider.java\n+++ b/JodaTimeContrib/gwt/src/test/gwt/org/joda/time/tz/TestUTCProvider.java\n  */\n package org.joda.time.tz;\n \n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Modifier;\n+// Removed for GWT import java.lang.reflect.Constructor;\n+// Removed for GWT import java.lang.reflect.Modifier;\n import java.util.Set;\n \n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n+\n+import static org.joda.time.gwt.TestConstants.*;\n+//import junit.framework.TestSuite;\n \n import org.joda.time.DateTimeZone;\n+import org.joda.time.gwt.JodaGwtTestCase;\n \n /**\n  * This class is a JUnit test for UTCProvider.\n  *\n  * @author Stephen Colebourne\n  */\n-public class TestUTCProvider extends TestCase {\n+public class TestUTCProvider extends JodaGwtTestCase {\n \n     private DateTimeZone zone = null;\n \n-    public static void main(String[] args) {\n+    /* Removed for GWT public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n-    }\n+    } */\n \n-    public static TestSuite suite() {\n+    /* Removed for GWT public static TestSuite suite() {\n         return new TestSuite(TestUTCProvider.class);\n-    }\n+    } */\n \n-    public TestUTCProvider(String name) {\n+    /* Removed for GWT public TestUTCProvider(String name) {\n         super(name);\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n-    public void testClass() throws Exception {\n+    /* Removed for GWT public void testClass() throws Exception {\n         Class cls = UTCProvider.class;\n         assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n         \n         Constructor con = cls.getDeclaredConstructor((Class[]) null);\n         assertEquals(1, cls.getDeclaredConstructors().length);\n         assertEquals(true, Modifier.isPublic(con.getModifiers()));\n-    }\n+    } */\n \n     //-----------------------------------------------------------------------\n     public void testGetAvailableIDs() throws Exception {", "timestamp": 1258022183, "metainfo": ""}