{"sha": "1ec6eb269132c39f9d896ef7746da637eb906498", "log": "I18N initial checkin  ", "commit": "\n--- /dev/null\n+++ b/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritory.java\n+/*\n+ *  Copyright 2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.i18n;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.ObjectInputStream;\n+\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ * Provides time data for a specific territory, typically a country.\n+ * <p>\n+ * Many pieces of data used in dates and times varies by territory.\n+ * This class provides access to that data.\n+ */\n+public class CLDRTerritory extends Territory {\n+\n+    /** The raw CLDR data. */\n+    private static final byte[] cRawData = loadRawData();\n+\n+    /** The territory id, as per CLDR. */\n+    private String iID;\n+    /** The zones. */\n+    private DateTimeZone[] iZones;\n+    /** The first day of week. */\n+    private int iFirstDOW;\n+    /** The first day of the business week. */\n+    private int iFirstBusinessDOW;\n+    /** The last day of the business week. */\n+    private int iLastBusinessDOW;\n+    /** The first day of the weekend. */\n+    private int iFirstWeekendDOW;\n+    /** The last day of the weekend. */\n+    private int iLastWeekendDOW;\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Loads the data from file.\n+     *\n+     * @return the array of bytes\n+     */\n+    private static byte[] loadRawData() {\n+        String path = \"org/joda/time/contrib/i18n/CLDRTerritoryData.dat\";\n+        InputStream baseStream = null;\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream(1024);\n+        try {\n+            // open the file\n+            baseStream = CLDRTerritory.class.getClassLoader().getResourceAsStream(path);\n+            if (baseStream == null) {\n+                throw new IOException(\"Resource not found \" + path);\n+            }\n+            byte[] bytes = new byte[1024];\n+            int result = 0;\n+            while (result != -1) {\n+                baos.write(bytes, 0, result);\n+                result = baseStream.read(bytes, 0, 1024);\n+            }\n+            return baos.toByteArray();\n+            \n+        } catch (IOException ex) {\n+            throw new IllegalArgumentException(\"Territory data could not be loaded: \" + ex.getMessage());\n+        } finally {\n+            if (baseStream != null) {\n+                try {\n+                    baseStream.close();\n+                } catch (IOException ex) {\n+                    // ignore\n+                }\n+            }\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor.\n+     *\n+     * @param id  the territory id, not null\n+     */\n+    CLDRTerritory(String id) {\n+        super();\n+        init(id);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Initialises the data for this id.\n+     *\n+     * @param id  the territory id, not null\n+     * @throws IOException if an error occurs\n+     */\n+    private void init(String id) {\n+        try {\n+            // open the file\n+            ByteArrayInputStream bais = new ByteArrayInputStream(cRawData);\n+            ObjectInputStream in = new ObjectInputStream(new BufferedInputStream(bais));\n+            byte version = in.readByte();\n+            if (version != 1) {\n+                throw new IllegalArgumentException(\"Unknown file version: \" + version);\n+            }\n+            \n+            // loop through file to find the id\n+            String inputId = in.readUTF();\n+            while (inputId.equals(id) == false) {\n+                byte zoneCount = in.readByte();\n+                for (int i = 0; i < zoneCount; i++) {\n+                    in.readUTF();\n+                }\n+                in.skip(5);\n+                inputId = in.readUTF();\n+                if (inputId.length() == 0) {\n+                    throw new IllegalArgumentException(\"Territory \" + id + \" could not be loaded\");\n+                }\n+            }\n+            \n+            // found matching id\n+            iID = id;\n+            byte zoneCount = in.readByte();\n+            iZones = new DateTimeZone[zoneCount];\n+            for (int i = 0; i < zoneCount; i++) {\n+                String zoneID = in.readUTF();\n+                try {\n+                    iZones[i] = DateTimeZone.forID(zoneID);\n+                } catch (IllegalArgumentException ex) {\n+                    // ignore unless primary, allowing different timezone data files to work\n+                    if (i == 0) {\n+                        throw ex;\n+                    }\n+                }\n+            }\n+            iFirstDOW = in.readByte();\n+            iFirstBusinessDOW = in.readByte();\n+            iLastBusinessDOW = in.readByte();\n+            iFirstWeekendDOW = in.readByte();\n+            iLastWeekendDOW = in.readByte();\n+            \n+        } catch (IOException ex) {\n+            throw new IllegalArgumentException(\"Territory \" + id + \" could not be loaded: \" + ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public String getID() {\n+        return iID;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\tpublic DateTimeZone[] getZones() {\n+        return (DateTimeZone[]) iZones.clone();\n+    }\n+\n+    public int getFirstDayOfWeek() {\n+        return iFirstDOW;\n+    }\n+\n+    public int getBusinessWeekStart() {\n+        return iFirstBusinessDOW;\n+    }\n+\n+    public int getBusinessWeekEnd() {\n+        return iLastBusinessDOW;\n+    }\n+\n+    public int getWeekendStart() {\n+        return iFirstWeekendDOW;\n+    }\n+\n+    public int getWeekendEnd() {\n+        return iLastWeekendDOW;\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryGenerator.java\n+/*\n+ *  Copyright 2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.i18n;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringTokenizer;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NodeList;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.SAXParseException;\n+\n+/**\n+ * Generates a file that stores the territory data.\n+ */\n+public class CLDRTerritoryGenerator {\n+\n+    Map firstDOWMap = new HashMap();\n+    Map weekendStartMap = new HashMap();\n+    Map weekendEndMap = new HashMap();\n+    Map zoneMap = new HashMap();\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Output the CLDR data to a file.\n+     *\n+     * @param args\n+     */\n+    public static void main(String[] args) {\n+        try {\n+            CLDRTerritoryGenerator gen = new CLDRTerritoryGenerator();\n+            gen.readXML();\n+            gen.writeFile();\n+            \n+        } catch (RuntimeException ex) {\n+            System.err.println();\n+            ex.printStackTrace();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Writes the data to a file.\n+     */\n+    private void writeFile() {\n+        File file = new File(\"C:/joda/time-i18n/src/java/org/joda/time/contrib/i18n/CLDRTerritoryData.dat\");\n+        ObjectOutputStream oos = null;\n+        try {\n+            oos = new ObjectOutputStream(\n+                    new BufferedOutputStream(new FileOutputStream(file)));\n+            oos.writeByte(1);  // version\n+            writeData(oos);\n+            oos.writeUTF(\"\");  // end of file id\n+            oos.close();\n+            \n+        } catch (IOException ex) {\n+            ex.printStackTrace();\n+            if (oos != null) {\n+                try {\n+                    oos.close();\n+                } catch (IOException ex2) {\n+                    // ignore\n+                }\n+            }\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Writes the data to the stream.\n+     */\n+    private void writeData(ObjectOutputStream oos) throws IOException {\n+        Set territories = zoneMap.keySet();\n+        for (Iterator it = territories.iterator(); it.hasNext(); ) {\n+            String territory = (String) it.next();\n+            if (\"001\".equals(territory)) {\n+                continue;\n+            }\n+            List zones = (List) zoneMap.get(territory);\n+            if (zones.size() > 1) {\n+                pickPrimaryZone(territory, zones);\n+            }\n+            Integer firstDay = (Integer) firstDOWMap.get(territory);\n+            if (firstDay == null) {\n+                firstDay = (Integer) firstDOWMap.get(\"001\");\n+            }\n+            Integer weekendStart = (Integer) weekendStartMap.get(territory);\n+            if (weekendStart == null) {\n+                weekendStart = (Integer) weekendStartMap.get(\"001\");\n+            }\n+            Integer weekendEnd = (Integer) weekendEndMap.get(territory);\n+            if (weekendEnd == null) {\n+                weekendEnd = (Integer) weekendEndMap.get(\"001\");\n+            }\n+            \n+            int weStart = weekendStart.intValue();\n+            int weEnd = weekendEnd.intValue();\n+            int busStart = (weEnd == 7 ? 1 : weEnd + 1);\n+            int busEnd = (weStart == 1 ? 7 : weStart - 1);\n+            \n+            oos.writeUTF(territory);\n+            oos.writeByte(zones.size());\n+            for (int i = 0; i < zones.size(); i++) {\n+                oos.writeUTF((String) zones.get(i));\n+            }\n+            oos.writeByte(firstDay.intValue());\n+            oos.writeByte(busStart);\n+            oos.writeByte(busEnd);\n+            oos.writeByte(weStart);\n+            oos.writeByte(weEnd);\n+            System.out.print(territory + \" \");\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Reads the CLDR XML data.\n+     */\n+    private void readXML() {\n+        File file = new File(\"C:/joda/time-i18n/src/java/org/joda/time/contrib/i18n/supplementalData.xml\");\n+        try {\n+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+            DocumentBuilder builder = factory.newDocumentBuilder();\n+            Document document = builder.parse(file);\n+            Element rootEl = (Element) document.getElementsByTagName(\"supplementalData\").item(0);\n+            \n+            parseFirstDay(rootEl);\n+            parseWeekendStart(rootEl);\n+            parseWeekendEnd(rootEl);\n+            parseZoneFormatting(rootEl);\n+            \n+        } catch (SAXParseException ex) {\n+            ex.printStackTrace();\n+        } catch (SAXException ex) {\n+            ex.printStackTrace();\n+        } catch (IOException ex) {\n+            ex.printStackTrace();\n+        } catch (ParserConfigurationException ex) {\n+            ex.printStackTrace();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Parses the firstDay elements.\n+     *\n+     * @param rootEl  the root element\n+     */\n+    private void parseFirstDay(Element rootEl) {\n+        Element weekDataEl = (Element) rootEl.getElementsByTagName(\"weekData\").item(0);\n+        NodeList els = weekDataEl.getElementsByTagName(\"firstDay\");\n+        for (int i = 0; i < els.getLength(); i++) {\n+            Element el = (Element) els.item(i);\n+            if (\"true\".equals(el.getAttribute(\"draft\"))) {\n+                continue;\n+            }\n+            String dayStr = el.getAttribute(\"day\");\n+            Integer dow = convertDOW(dayStr);\n+            String territoriesStr = el.getAttribute(\"territories\");\n+            StringTokenizer tkn = new StringTokenizer(territoriesStr);\n+            while (tkn.hasMoreTokens()) {\n+                String territory = tkn.nextToken();\n+                firstDOWMap.put(territory, dow);\n+            }\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Parses the weekendStart elements.\n+     *\n+     * @param rootEl  the root element\n+     */\n+    private void parseWeekendStart(Element rootEl) {\n+        Element weekDataEl = (Element) rootEl.getElementsByTagName(\"weekData\").item(0);\n+        NodeList els = weekDataEl.getElementsByTagName(\"weekendStart\");\n+        for (int i = 0; i < els.getLength(); i++) {\n+            Element el = (Element) els.item(i);\n+            if (\"true\".equals(el.getAttribute(\"draft\"))) {\n+                continue;\n+            }\n+            String dayStr = el.getAttribute(\"day\");\n+            Integer dow = convertDOW(dayStr);\n+            String territoriesStr = el.getAttribute(\"territories\");\n+            StringTokenizer tkn = new StringTokenizer(territoriesStr);\n+            while (tkn.hasMoreTokens()) {\n+                String territory = tkn.nextToken();\n+                weekendStartMap.put(territory, dow);\n+            }\n+        }\n+        // fix CLDR\n+        weekendStartMap.put(\"AF\", new Integer(4));\n+        weekendStartMap.put(\"IR\", new Integer(4));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Parses the weekendEnd elements.\n+     *\n+     * @param rootEl  the root element\n+     */\n+    private void parseWeekendEnd(Element rootEl) {\n+        Element weekDataEl = (Element) rootEl.getElementsByTagName(\"weekData\").item(0);\n+        NodeList els = weekDataEl.getElementsByTagName(\"weekendEnd\");\n+        for (int i = 0; i < els.getLength(); i++) {\n+            Element el = (Element) els.item(i);\n+            if (\"true\".equals(el.getAttribute(\"draft\"))) {\n+                continue;\n+            }\n+            String dayStr = el.getAttribute(\"day\");\n+            Integer dow = convertDOW(dayStr);\n+            String territoriesStr = el.getAttribute(\"territories\");\n+            StringTokenizer tkn = new StringTokenizer(territoriesStr);\n+            while (tkn.hasMoreTokens()) {\n+                String territory = tkn.nextToken();\n+                weekendEndMap.put(territory, dow);\n+            }\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Parses the zoneFormatting element.\n+     *\n+     * @param rootEl  the root element\n+     */\n+    private void parseZoneFormatting(Element rootEl) {\n+        Element weekDataEl = (Element) rootEl.getElementsByTagName(\"zoneFormatting\").item(0);\n+        NodeList els = weekDataEl.getElementsByTagName(\"zoneItem\");\n+        for (int i = 0; i < els.getLength(); i++) {\n+            Element el = (Element) els.item(i);\n+            if (\"true\".equals(el.getAttribute(\"draft\"))) {\n+                continue;\n+            }\n+            String zoneStr = el.getAttribute(\"type\");\n+            String territory = el.getAttribute(\"territory\");\n+            List list = (List) zoneMap.get(territory);\n+            if (list == null) {\n+                list = new ArrayList();\n+                zoneMap.put(territory, list);\n+            }\n+            list.add(zoneStr);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Converts a day string to a day of week value.\n+     *\n+     * @param dayStr  the day string, such as 'sat'\n+     * @return the dow\n+     */\n+    private Integer convertDOW(String dayStr) {\n+        Integer dowValue = (Integer) CLDR_DAYS.get(dayStr);\n+        if (dowValue == null) {\n+            throw new IllegalStateException(\"Unknown day of week: \" + dayStr);\n+        }\n+        return dowValue;\n+    }\n+\n+    /** The CLDR day of week values. */\n+    private static final Map CLDR_DAYS = new HashMap();\n+    static {\n+        CLDR_DAYS.put(\"mon\", new Integer(1));\n+        CLDR_DAYS.put(\"tue\", new Integer(2));\n+        CLDR_DAYS.put(\"wed\", new Integer(3));\n+        CLDR_DAYS.put(\"thu\", new Integer(4));\n+        CLDR_DAYS.put(\"fri\", new Integer(5));\n+        CLDR_DAYS.put(\"sat\", new Integer(6));\n+        CLDR_DAYS.put(\"sun\", new Integer(7));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Picks the primary zone\n+     * @param zones  the list of zones\n+     */\n+    private void pickPrimaryZone(String territory, List zones) {\n+        String primary = (String) PRIMARY_ZONES.get(territory);\n+        if (primary == null) {\n+            throw new IllegalStateException(\"Unknown primary zone for territory: \" + territory + \": \" + zones);\n+        }\n+        if (zones.contains(primary) == false) {\n+            throw new IllegalStateException(\"Invalid primary zone for territory: \" + territory + \": \" + primary);\n+        }\n+        zones.remove(primary);\n+        zones.add(0, primary);\n+    }\n+\n+    /** The primary zone selections. */\n+    private static final Map PRIMARY_ZONES = new HashMap();\n+    static {\n+        PRIMARY_ZONES.put(\"US\", \"America/New_York\");\n+        PRIMARY_ZONES.put(\"MN\", \"Asia/Ulaanbaatar\");\n+        PRIMARY_ZONES.put(\"CD\", \"Africa/Kinshasa\");\n+        PRIMARY_ZONES.put(\"EC\", \"America/Guayaquil\");\n+        PRIMARY_ZONES.put(\"KZ\", \"Asia/Almaty\");\n+        PRIMARY_ZONES.put(\"GL\", \"America/Godthab\");\n+        PRIMARY_ZONES.put(\"CN\", \"Asia/Shanghai\");\n+        PRIMARY_ZONES.put(\"UA\", \"Europe/Kiev\");\n+        PRIMARY_ZONES.put(\"CL\", \"America/Santiago\");\n+        PRIMARY_ZONES.put(\"ID\", \"Asia/Jakarta\");\n+        PRIMARY_ZONES.put(\"PT\", \"Europe/Lisbon\");\n+        PRIMARY_ZONES.put(\"PF\", \"Pacific/Tahiti\");\n+        PRIMARY_ZONES.put(\"SJ\", \"Arctic/Longyearbyen\");\n+        PRIMARY_ZONES.put(\"KI\", \"Pacific/Tarawa\");\n+        PRIMARY_ZONES.put(\"AQ\", \"Antarctica/McMurdo\");\n+        PRIMARY_ZONES.put(\"AU\", \"Australia/Sydney\");\n+        PRIMARY_ZONES.put(\"MH\", \"Pacific/Majuro\");\n+        PRIMARY_ZONES.put(\"UZ\", \"Asia/Tashkent\");\n+        PRIMARY_ZONES.put(\"RU\", \"Europe/Moscow\");\n+        PRIMARY_ZONES.put(\"MY\", \"Asia/Kuala_Lumpur\");\n+        PRIMARY_ZONES.put(\"MX\", \"America/Mexico_City\");\n+        PRIMARY_ZONES.put(\"BR\", \"America/Sao_Paulo\");\n+        PRIMARY_ZONES.put(\"ES\", \"Europe/Madrid\");\n+        PRIMARY_ZONES.put(\"UM\", \"Pacific/Midway\");\n+        PRIMARY_ZONES.put(\"CA\", \"America/Toronto\");\n+        PRIMARY_ZONES.put(\"FM\", \"Pacific/Ponape\");\n+        PRIMARY_ZONES.put(\"AR\", \"America/Buenos_Aires\");\n+        PRIMARY_ZONES.put(\"NZ\", \"Pacific/Auckland\");\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/i18n/src/java/org/joda/time/contrib/i18n/Territory.java\n+/*\n+ *  Copyright 2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.i18n;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ * Provides time data for a specific territory, typically a country.\n+ * <p>\n+ * Many pieces of data used in dates and times varies by territory.\n+ * This class provides access to that data.\n+ */\n+public abstract class Territory {\n+\n+//    /** An empty chronology array. */\n+//    private static final Chronology[] EMPTY_CHRONOLOGY_ARRAY = new Chronology[0];\n+    /** A cache of territories. */\n+    private static final Map cTerritoryMap = Collections.synchronizedMap(new HashMap());\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets a territory instance for the specified id.\n+     * <p>\n+     * The territory id must be one of those returned by getAvailableIDs.\n+     *\n+     * @param id  the ID of the territory, not null\n+     * @return the territory object for the ID\n+     * @throws IllegalArgumentException if the ID is not recognised\n+     */\n+    public static Territory forID(String id) {\n+        if (id != null && id.length() == 2) {\n+            Territory t = (Territory) cTerritoryMap.get(id);\n+            if (t == null) {\n+                t = new CLDRTerritory(id);\n+                cTerritoryMap.put(id, t);\n+            }\n+            return t;\n+        }\n+        throw new IllegalArgumentException(\"The territory id is not recognised: \" + id);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor.\n+     *\n+     * @param id  the territory id, not null\n+     */\n+    protected Territory() {\n+        super();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the territory id.\n+     *\n+     * @return the territory id, never null\n+     */\n+    public abstract String getID();\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the time zones applicable for the territory.\n+     *\n+     * @return the array of zones, never null\n+     */\n+\tpublic abstract DateTimeZone[] getZones();\n+\n+    /**\n+     * Gets the time zone for the territory, selecting the zone of the most\n+     * important city (the capital) if there are multiple zones.\n+     *\n+     * @return the zone that best represents the territory, null if unknown\n+     */\n+    public DateTimeZone getZone() {\n+        DateTimeZone[] zones = getZones();\n+        if (zones.length == 0) {\n+            return null;\n+        }\n+        return zones[0];\n+    }\n+\n+//    //-----------------------------------------------------------------------\n+//    /**\n+//     * Gets the altenate non-ISO chronologies used in the territory.\n+//     * For example, countries in the middle east would include\n+//     * IslamicChronology in the result.\n+//     *\n+//     * @return the non-ISO chronologies, empty array if none\n+//     */\n+//    public Chronology[] getChronologies() {\n+//        return EMPTY_CHRONOLOGY_ARRAY;\n+//    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the first day of the week.\n+     * The value is expressed using ISO values (1=Mon,7=Sun).\n+     *\n+     * @return the first day of the week\n+     */\n+    public abstract int getFirstDayOfWeek();\n+\n+    /**\n+     * Gets the day of week that the business week starts.\n+     * The value is expressed using ISO values (1=Mon,7=Sun).\n+     *\n+     * @return the day of week that the business week starts\n+     */\n+    public abstract int getBusinessWeekStart();\n+\n+    /**\n+     * Gets the day of week that the business week ends.\n+     * The value is expressed using ISO values (1=Mon,7=Sun).\n+     *\n+     * @return the day of week that the business week ends\n+     */\n+    public abstract int getBusinessWeekEnd();\n+\n+    /**\n+     * Gets the day of week that the weekend starts.\n+     * The value is expressed using ISO values (1=Mon,7=Sun).\n+     *\n+     * @return the day of week that the weekend starts\n+     */\n+    public abstract int getWeekendStart();\n+\n+    /**\n+     * Gets the day of week that the weekend ends.\n+     * The value is expressed using ISO values (1=Mon,7=Sun).\n+     *\n+     * @return the day of week that the weekend ends\n+     */\n+    public abstract int getWeekendEnd();\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Is this territory equal (by id and class) to another.\n+     *\n+     * @param other  the other object to compare to\n+     * @return trur if equal\n+     */\n+    public boolean equals(Object other) {\n+        if (other == this) {\n+            return true;\n+        }\n+        if (other.getClass() != getClass()) {\n+            return false;\n+        }\n+        return ((Territory) other).getID().equals(getID());\n+    }\n+\n+    /**\n+     * Gets a suitable hashcode for this territory.\n+     *\n+     * @return a hashcode\n+     */\n+    public int hashCode() {\n+        return 19 * getClass().hashCode() + getID().hashCode();\n+    }\n+\n+    /**\n+     * Outputs a string vesion of the territory.\n+     *\n+     * @return string\n+     */\n+    public String toString() {\n+        return \"Territory[\" + getID() + \"]\";\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/i18n/src/test/org/joda/time/contrib/i18n/TestTerritory.java\n+/*\n+ *  Copyright 2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.i18n;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test Territory.\n+ */\n+public class TestTerritory extends TestCase {\n+\n+    //-----------------------------------------------------------------------\n+    public void testGB() {\n+        Territory t = Territory.forID(\"GB\");\n+        assertEquals(\"GB\", t.getID());\n+        assertEquals(1, t.getZones().length);\n+        assertEquals(\"Europe/London\", t.getZones()[0].getID());\n+        assertEquals(\"Europe/London\", t.getZone().getID());\n+        assertEquals(1, t.getFirstDayOfWeek());\n+        assertEquals(1, t.getBusinessWeekStart());\n+        assertEquals(5, t.getBusinessWeekEnd());\n+        assertEquals(6, t.getWeekendStart());\n+        assertEquals(7, t.getWeekendEnd());\n+    }\n+\n+}", "timestamp": 1156119048, "metainfo": ""}