{"sha": "20bd2451e62e79b78f41de4c5e29cfe6af11e0c0", "log": "Fix millisecond parsing, fix basic parsers too lenient  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n \n     /**\n      * Instructs the printer to emit a numeric millisOfSecond field.\n+     * <p>\n+     * This method will append a field that prints a three digit value.\n+     * During parsing the value that is parsed is assumed to be three digits.\n+     * If less than three digits are present then they will be counted as the\n+     * smallest parts of the millisecond. This is probably not what you want\n+     * if you are using the field as a fraction. Instead, a fractional\n+     * millisecond should be produced using {@link #appendFractionOfSecond}.\n      *\n      * @param minDigits minumum number of digits to print\n      * @return this DateTimeFormatterBuilder\n         }\n \n         public void printTo(StringBuffer buf, ReadablePartial partial, Locale locale) {\n-            if (partial.isSupported(iFieldType)) {\n-                long millis = partial.getChronology().set(partial, 0L);\n-                try {\n-                    printTo(buf, null, millis, partial.getChronology());\n-                } catch (IOException e) {\n-                    // Not gonna happen.\n-                }\n-            } else {\n-                buf.append('\\ufffd');\n+            // removed check whether field is supported, as input field is typically\n+            // secondOfDay which is unsupported by TimeOfDay\n+            long millis = partial.getChronology().set(partial, 0L);\n+            try {\n+                printTo(buf, null, millis, partial.getChronology());\n+            } catch (IOException e) {\n+                // Not gonna happen.\n             }\n         }\n \n         public void printTo(Writer out, ReadablePartial partial, Locale locale) throws IOException {\n-            if (partial.isSupported(iFieldType)) {\n-                long millis = partial.getChronology().set(partial, 0L);\n-                printTo(null, out, millis, partial.getChronology());\n-            } else {\n-                out.write('\\ufffd');\n-            }\n+            // removed check whether field is supported, as input field is typically\n+            // secondOfDay which is unsupported by TimeOfDay\n+            long millis = partial.getChronology().set(partial, 0L);\n+            printTo(null, out, millis, partial.getChronology());\n         }\n \n         protected void printTo(StringBuffer buf, Writer out, long instant, Chronology chrono)\n--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n         hde, // hourOfDay element (HH)\n         mhe, // minuteOfHour element (:mm)\n         sme, // secondOfMinute element (:ss)\n-        lse, // millisOfSecond element (.SSS)\n         fse, // fractionOfSecond element (.SSSSSSSSS)\n         ze,  // zone offset element\n         lte, // literal 'T' element\n     public static DateTimeFormatter time() {\n         if (t == null) {\n             t = new DateTimeFormatterBuilder()\n-                .append(hourMinuteSecondMillis())\n+                .append(hourMinuteSecondFraction())\n                 .append(offsetElement())\n                 .toFormatter();\n         }\n         if (bd == null) {\n             bd = new DateTimeFormatterBuilder()\n                 .appendYear(4, 4)\n-                .appendMonthOfYear(2)\n-                .appendDayOfMonth(2)\n+                .appendFixedDecimal(DateTimeFieldType.monthOfYear(), 2)\n+                .appendFixedDecimal(DateTimeFieldType.dayOfMonth(), 2)\n                 .toFormatter();\n         }\n         return bd;\n     public static DateTimeFormatter basicTime() {\n         if (bt == null) {\n             bt = new DateTimeFormatterBuilder()\n-                .appendHourOfDay(2)\n-                .appendMinuteOfHour(2)\n-                .appendSecondOfMinute(2)\n+                .appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2)\n+                .appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2)\n+                .appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2)\n                 .appendLiteral('.')\n-                .appendMillisOfSecond(3)\n+                .appendFractionOfSecond(3, 9)\n                 .appendTimeZoneOffset(\"Z\", false, 2, 2)\n                 .toFormatter();\n         }\n     public static DateTimeFormatter basicTimeNoMillis() {\n         if (btx == null) {\n             btx = new DateTimeFormatterBuilder()\n-                .appendHourOfDay(2)\n-                .appendMinuteOfHour(2)\n-                .appendSecondOfMinute(2)\n+                .appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2)\n+                .appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2)\n+                .appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2)\n                 .appendTimeZoneOffset(\"Z\", false, 2, 2)\n                 .toFormatter();\n         }\n         if (bod == null) {\n             bod = new DateTimeFormatterBuilder()\n                 .appendYear(4, 4)\n-                .appendDayOfYear(3)\n+                .appendFixedDecimal(DateTimeFieldType.dayOfYear(), 3)\n                 .toFormatter();\n         }\n         return bod;\n             bwd = new DateTimeFormatterBuilder()\n                 .appendWeekyear(4, 4)\n                 .appendLiteral('W')\n-                .appendWeekOfWeekyear(2)\n-                .appendDayOfWeek(1)\n+                .appendFixedDecimal(DateTimeFieldType.weekOfWeekyear(), 2)\n+                .appendFixedDecimal(DateTimeFieldType.dayOfWeek(), 1)\n                 .toFormatter();\n         }\n         return bwd;\n     /**\n      * Returns a formatter for a two digit hour of day, two digit minute of\n      * hour, two digit second of minute, and three digit fraction of\n-     * second. (HH:mm:ss.SSS)\n+     * second (HH:mm:ss.SSS). Parsing will parse up to 3 fractional second\n+     * digits.\n      * \n      * @return a formatter for HH:mm:ss.SSS\n      */\n                 .append(hourElement())\n                 .append(minuteElement())\n                 .append(secondElement())\n-                .append(millisElement())\n+                .appendLiteral('.')\n+                .appendFractionOfSecond(3, 3)\n                 .toFormatter();\n         }\n         return hmsl;\n     /**\n      * Returns a formatter for a two digit hour of day, two digit minute of\n      * hour, two digit second of minute, and three digit fraction of\n-     * second. (HH:mm:ss.SSS)\n+     * second (HH:mm:ss.SSS). Parsing will parse up to 9 fractional second\n+     * digits, throwing away all except the first three.\n      * \n      * @return a formatter for HH:mm:ss.SSS\n      */\n     /**\n      * Returns a formatter that combines a full date, two digit hour of day,\n      * two digit minute of hour, two digit second of minute, and three digit\n-     * fraction of second. (yyyy-MM-dd'T'HH:mm:ss.SSS)\n+     * fraction of second (yyyy-MM-dd'T'HH:mm:ss.SSS). Parsing will parse up\n+     * to 3 fractional second digits.\n      * \n      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS\n      */\n     /**\n      * Returns a formatter that combines a full date, two digit hour of day,\n      * two digit minute of hour, two digit second of minute, and three digit\n-     * fraction of second. (yyyy-MM-dd'T'HH:mm:ss.SSS)\n+     * fraction of second (yyyy-MM-dd'T'HH:mm:ss.SSS). Parsing will parse up\n+     * to 9 fractional second digits, throwing away all except the first three.\n      * \n      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS\n      */\n                 .toFormatter();\n         }\n         return sme;\n-    }\n-\n-    private static DateTimeFormatter millisElement() {\n-        if (lse == null) {\n-            lse = new DateTimeFormatterBuilder()\n-                .appendLiteral('.')\n-                .appendMillisOfSecond(3)\n-                .toFormatter();\n-        }\n-        return lse;\n     }\n \n     private static DateTimeFormatter fractionElement() {\n--- a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java\n \n import org.joda.time.DateTime;\n import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.Partial;\n \n /**\n  * This class is a Junit unit test for ISODateTimeFormat.\n         assertEquals(\"2004-06-09\", ISODateTimeFormat.date().print(dt));\n     }\n \n+    public void testFormat_date_partial() {\n+        Partial dt = new Partial(\n+                new DateTimeFieldType[] {DateTimeFieldType.year(), DateTimeFieldType.monthOfYear(), DateTimeFieldType.dayOfMonth()},\n+                new int[] {2004, 6, 9});\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.date().print(dt));\n+    }\n+\n     public void testFormat_time() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"10:20:30.040Z\", ISODateTimeFormat.time().print(dt));\n         assertEquals(\"12:20:30.040+02:00\", ISODateTimeFormat.time().print(dt));\n     }\n \n+    public void testFormat_time_partial() {\n+        Partial dt = new Partial(\n+                new DateTimeFieldType[] {DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(),\n+                        DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond()},\n+                new int[] {10, 20, 30, 40});\n+        assertEquals(\"10:20:30.040\", ISODateTimeFormat.time().print(dt));\n+    }\n+\n     public void testFormat_timeNoMillis() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"10:20:30Z\", ISODateTimeFormat.timeNoMillis().print(dt));\n         \n         dt = dt.withZone(PARIS);\n         assertEquals(\"12:20:30+02:00\", ISODateTimeFormat.timeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_timeNoMillis_partial() {\n+        Partial dt = new Partial(\n+                new DateTimeFieldType[] {DateTimeFieldType.hourOfDay(), DateTimeFieldType.minuteOfHour(),\n+                        DateTimeFieldType.secondOfMinute(), DateTimeFieldType.millisOfSecond()},\n+                new int[] {10, 20, 30, 40});\n+        assertEquals(\"10:20:30\", ISODateTimeFormat.timeNoMillis().print(dt));\n     }\n \n     public void testFormat_tTime() {\n--- a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n \n /**\n     //-----------------------------------------------------------------------\n     public void test_dateElementParser() {\n         DateTimeFormatter parser = ISODateTimeFormat.dateElementParser();\n-        assertParse(parser, true, \"2006-06-09\");\n+        assertParse(parser, \"2006-06-09\", new DateTime(2006, 6, 9, 0, 0, 0, 0));\n+        assertParse(parser, \"2006-06-9\", new DateTime(2006, 6, 9, 0, 0, 0, 0));\n+        assertParse(parser, \"2006-6-09\", new DateTime(2006, 6, 9, 0, 0, 0, 0));\n+        assertParse(parser, \"2006-6-9\", new DateTime(2006, 6, 9, 0, 0, 0, 0));\n         assertParse(parser, true, \"2006-W27-3\");\n         assertParse(parser, true, \"2006-123\");\n         assertParse(parser, false, \"2006-06-09T+02:00\");\n \n     //-----------------------------------------------------------------------\n     public void test_timeParser() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n         DateTimeFormatter parser = ISODateTimeFormat.timeParser();\n         assertParse(parser, false, \"2006-06-09\");\n         assertParse(parser, false, \"2006-W27-3\");\n         assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n         assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n         \n-        assertParse(parser, true, \"T10:20:30.040\");\n-        assertParse(parser, true, \"T10.5\");\n-        assertParse(parser, true, \"T10:20:30.040+02:00\");\n-        assertParse(parser, true, \"T10.5+02:00\");\n+        assertParse(parser, \"T10:20:30.040000000\", new DateTime(1970, 1, 1, 10, 20, 30, 40));\n+        assertParse(parser, \"T10:20:30.004\", new DateTime(1970, 1, 1, 10, 20, 30, 4));\n+        assertParse(parser, \"T10:20:30.040\", new DateTime(1970, 1, 1, 10, 20, 30, 40));\n+        assertParse(parser, \"T10:20:30.400\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T10.5\", new DateTime(1970, 1, 1, 10, 30, 0, 0));\n+        assertParse(parser, \"T10:20:30.040+02:00\", new DateTime(1970, 1, 1, 8, 20, 30, 40));\n+        assertParse(parser, \"T10.5+02:00\", new DateTime(1970, 1, 1, 8, 30, 0, 0));\n         \n         assertParse(parser, true, \"10:20:30.040\");\n         assertParse(parser, true, \"10.5\");\n         assertParse(parser, false, \"10.5+02:00\");\n     }\n \n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void test_date() {\n+        DateTimeFormatter parser = ISODateTimeFormat.date();\n+        assertParse(parser, \"2006-02-04\", new DateTime(2006, 2, 4, 0, 0, 0, 0));\n+        assertParse(parser, \"2006-2-04\", new DateTime(2006, 2, 4, 0, 0, 0, 0));\n+        assertParse(parser, \"2006-02-4\", new DateTime(2006, 2, 4, 0, 0, 0, 0));\n+        assertParse(parser, \"2006-2-4\", new DateTime(2006, 2, 4, 0, 0, 0, 0));\n+        assertParse(parser, false, \"2006-02-\");\n+        assertParse(parser, false, \"2006-02\");\n+        assertParse(parser, false, \"2006--4\");\n+        assertParse(parser, false, \"2006-1\");\n+        assertParse(parser, false, \"2006\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_time() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.time();\n+        assertParse(parser, \"10:20:30.400999999Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.400Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.40Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.4Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"5:6:7.8Z\", new DateTime(1970, 1, 1, 5, 6, 7, 800));\n+        assertParse(parser, false, \"10:20.400Z\");\n+        assertParse(parser, false, \"10:2.400Z\");\n+        assertParse(parser, false, \"10.400Z\");\n+        assertParse(parser, false, \"1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_timeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.timeNoMillis();\n+        assertParse(parser, \"10:20:30Z\", new DateTime(1970, 1, 1, 10, 20, 30, 0));\n+        assertParse(parser, \"5:6:7Z\", new DateTime(1970, 1, 1, 5, 6, 7, 0));\n+        assertParse(parser, false, \"10:20Z\");\n+        assertParse(parser, false, \"10:2Z\");\n+        assertParse(parser, false, \"10Z\");\n+        assertParse(parser, false, \"1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_tTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.tTime();\n+        assertParse(parser, \"T10:20:30.400999999Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T10:20:30.400Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T10:20:30.40Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T10:20:30.4Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T5:6:7.8Z\", new DateTime(1970, 1, 1, 5, 6, 7, 800));\n+        assertParse(parser, false, \"T10:20.400Z\");\n+        assertParse(parser, false, \"T102.400Z\");\n+        assertParse(parser, false, \"T10.400Z\");\n+        assertParse(parser, false, \"T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_tTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.tTimeNoMillis();\n+        assertParse(parser, \"T10:20:30Z\", new DateTime(1970, 1, 1, 10, 20, 30, 0));\n+        assertParse(parser, \"T5:6:7Z\", new DateTime(1970, 1, 1, 5, 6, 7, 0));\n+        assertParse(parser, false, \"T10:20Z\");\n+        assertParse(parser, false, \"T10:2Z\");\n+        assertParse(parser, false, \"T10Z\");\n+        assertParse(parser, false, \"T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_dateTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.dateTime();\n+        assertParse(parser, \"2006-02-04T10:20:30.400999999Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-02-04T10:20:30.400Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-02-04T10:20:30.40Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-02-04T10:20:30.4Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-02-4T10:20:30.400Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-2-04T10:20:30.400Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-2-4T10:20:30.400Z\", new DateTime(2006, 2, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"2006-02-04T5:6:7.800Z\", new DateTime(2006, 2, 4, 5, 6, 7, 800));\n+        assertParse(parser, false, \"2006-02-T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-12T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-1T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006T10:20:30.400Z\");\n+        assertParse(parser, false, \"200T10:20:30.400Z\");\n+        assertParse(parser, false, \"20T10:20:30.400Z\");\n+        assertParse(parser, false, \"2T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-02-04T10:20.400Z\");\n+        assertParse(parser, false, \"2006-02-04T10:2.400Z\");\n+        assertParse(parser, false, \"2006-02-04T10.400Z\");\n+        assertParse(parser, false, \"2006-02-04T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_dateTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.dateTimeNoMillis();\n+        assertParse(parser, \"2006-02-04T10:20:30Z\", new DateTime(2006, 2, 4, 10, 20, 30, 0));\n+        assertParse(parser, \"2006-02-4T10:20:30Z\", new DateTime(2006, 2, 4, 10, 20, 30, 0));\n+        assertParse(parser, \"2006-2-04T10:20:30Z\", new DateTime(2006, 2, 4, 10, 20, 30, 0));\n+        assertParse(parser, \"2006-2-4T10:20:30Z\", new DateTime(2006, 2, 4, 10, 20, 30, 0));\n+        assertParse(parser, \"2006-02-04T5:6:7Z\", new DateTime(2006, 2, 4, 5, 6, 7, 0));\n+        assertParse(parser, false, \"2006-02-T10:20:30Z\");\n+        assertParse(parser, false, \"2006-12T10:20:30Z\");\n+        assertParse(parser, false, \"2006-1T10:20:30Z\");\n+        assertParse(parser, false, \"2006T10:20:30Z\");\n+        assertParse(parser, false, \"200T10:20:30Z\");\n+        assertParse(parser, false, \"20T10:20:30Z\");\n+        assertParse(parser, false, \"2T10:20:30Z\");\n+        assertParse(parser, false, \"2006-02-04T10:20Z\");\n+        assertParse(parser, false, \"2006-02-04T10:2Z\");\n+        assertParse(parser, false, \"2006-02-04T10Z\");\n+        assertParse(parser, false, \"2006-02-04T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_ordinalDate() {\n+        DateTimeFormatter parser = ISODateTimeFormat.ordinalDate();\n+        assertParse(parser, \"2006-123\", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(123));\n+        assertParse(parser, \"2006-12\", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(12));\n+        assertParse(parser, \"2006-1\", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(1));\n+        assertParse(parser, false, \"2006-\");\n+        assertParse(parser, false, \"2006\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_ordinalDateTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.ordinalDateTime();\n+        assertParse(parser, \"2006-123T10:20:30.400999999Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006-123T10:20:30.400Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006-123T10:20:30.40Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006-123T10:20:30.4Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006-12T10:20:30.400Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(12));\n+        assertParse(parser, \"2006-1T10:20:30.400Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(1));\n+        assertParse(parser, \"2006-123T5:6:7.800Z\", new DateTime(2006, 1, 1, 5, 6, 7, 800).withDayOfYear(123));\n+        assertParse(parser, false, \"2006-T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-123T10:20.400Z\");\n+        assertParse(parser, false, \"2006-123T10:2.400Z\");\n+        assertParse(parser, false, \"2006-123T10.400Z\");\n+        assertParse(parser, false, \"2006-123T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_ordinalDateTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.ordinalDateTimeNoMillis();\n+        assertParse(parser, \"2006-123T10:20:30Z\", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(123));\n+        assertParse(parser, \"2006-12T10:20:30Z\", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(12));\n+        assertParse(parser, \"2006-1T10:20:30Z\", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(1));\n+        assertParse(parser, \"2006-123T5:6:7Z\", new DateTime(2006, 1, 1, 5, 6, 7, 0).withDayOfYear(123));\n+        assertParse(parser, false, \"2006-T10:20:30Z\");\n+        assertParse(parser, false, \"2006T10:20:30Z\");\n+        assertParse(parser, false, \"2006-123T10:20Z\");\n+        assertParse(parser, false, \"2006-123T10:2Z\");\n+        assertParse(parser, false, \"2006-123T10Z\");\n+        assertParse(parser, false, \"2006-123T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_weekDate() {\n+        DateTimeFormatter parser = ISODateTimeFormat.weekDate();\n+        assertParse(parser, \"2006-W27-3\", new DateTime(2006, 6, 1, 0, 0, 0, 0).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W2-3\", new DateTime(2006, 6, 1, 0, 0, 0, 0).withWeekOfWeekyear(2).withDayOfWeek(3));\n+        assertParse(parser, false, \"2006-W-3\");\n+        assertParse(parser, false, \"2006-W27-\");\n+        assertParse(parser, false, \"2006-W27\");\n+        assertParse(parser, false, \"2006-W2\");\n+        assertParse(parser, false, \"2006-W\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_weekDateTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.weekDateTime();\n+        assertParse(parser, \"2006-W27-3T10:20:30.400999999Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W27-3T10:20:30.400Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W27-3T10:20:30.40Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W27-3T10:20:30.4Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W2-3T10:20:30.400Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(2).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W27-3T5:6:7.800Z\", new DateTime(2006, 6, 1, 5, 6, 7, 800).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, false, \"2006-W27-T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-W27T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-W2T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-W-3T10:20:30.400Z\");\n+        assertParse(parser, false, \"2006-W27-3T10:20.400Z\");\n+        assertParse(parser, false, \"2006-W27-3T10:2.400Z\");\n+        assertParse(parser, false, \"2006-W27-3T10.400Z\");\n+        assertParse(parser, false, \"2006-W27-3T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_weekDateTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.weekDateTimeNoMillis();\n+        assertParse(parser, \"2006-W27-3T10:20:30Z\", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W2-3T10:20:30Z\", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(2).withDayOfWeek(3));\n+        assertParse(parser, \"2006-W27-3T5:6:7Z\", new DateTime(2006, 6, 1, 5, 6, 7, 0).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, false, \"2006-W27-T10:20:30Z\");\n+        assertParse(parser, false, \"2006-W27T10:20:30Z\");\n+        assertParse(parser, false, \"2006-W2T10:20:30Z\");\n+        assertParse(parser, false, \"2006-W-3T10:20:30Z\");\n+        assertParse(parser, false, \"2006-W27-3T10:20Z\");\n+        assertParse(parser, false, \"2006-W27-3T10:2Z\");\n+        assertParse(parser, false, \"2006-W27-3T10Z\");\n+        assertParse(parser, false, \"2006-W27-3T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void test_basicDate() {\n+        DateTimeFormatter parser = ISODateTimeFormat.basicDate();\n+        assertParse(parser, \"20060204\", new DateTime(2006, 2, 4, 0, 0, 0, 0));\n+        assertParse(parser, false, \"2006024\");\n+        assertParse(parser, false, \"200602\");\n+        assertParse(parser, false, \"20061\");\n+        assertParse(parser, false, \"2006\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicTime();\n+        assertParse(parser, \"102030.400999999Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"102030.400Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"102030.40Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"102030.4Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, false, \"10203.400Z\");\n+        assertParse(parser, false, \"1020.400Z\");\n+        assertParse(parser, false, \"102.400Z\");\n+        assertParse(parser, false, \"10.400Z\");\n+        assertParse(parser, false, \"1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicTimeNoMillis();\n+        assertParse(parser, \"102030Z\", new DateTime(1970, 1, 1, 10, 20, 30, 0));\n+        assertParse(parser, false, \"10203Z\");\n+        assertParse(parser, false, \"1020Z\");\n+        assertParse(parser, false, \"102Z\");\n+        assertParse(parser, false, \"10Z\");\n+        assertParse(parser, false, \"1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicTTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicTTime();\n+        assertParse(parser, \"T102030.400999999Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T102030.400Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T102030.40Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"T102030.4Z\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, false, \"T10203.400Z\");\n+        assertParse(parser, false, \"T1020.400Z\");\n+        assertParse(parser, false, \"T102.400Z\");\n+        assertParse(parser, false, \"T10.400Z\");\n+        assertParse(parser, false, \"T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicTTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicTTimeNoMillis();\n+        assertParse(parser, \"T102030Z\", new DateTime(1970, 1, 1, 10, 20, 30, 0));\n+        assertParse(parser, false, \"T10203Z\");\n+        assertParse(parser, false, \"T1020Z\");\n+        assertParse(parser, false, \"T102Z\");\n+        assertParse(parser, false, \"T10Z\");\n+        assertParse(parser, false, \"T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicDateTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicDateTime();\n+        assertParse(parser, \"20061204T102030.400999999Z\", new DateTime(2006, 12, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"20061204T102030.400Z\", new DateTime(2006, 12, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"20061204T102030.40Z\", new DateTime(2006, 12, 4, 10, 20, 30, 400));\n+        assertParse(parser, \"20061204T102030.4Z\", new DateTime(2006, 12, 4, 10, 20, 30, 400));\n+        assertParse(parser, false, \"2006120T102030.400Z\");\n+        assertParse(parser, false, \"200612T102030.400Z\");\n+        assertParse(parser, false, \"20061T102030.400Z\");\n+        assertParse(parser, false, \"2006T102030.400Z\");\n+        assertParse(parser, false, \"200T102030.400Z\");\n+        assertParse(parser, false, \"20T102030.400Z\");\n+        assertParse(parser, false, \"2T102030.400Z\");\n+        assertParse(parser, false, \"20061204T10203.400Z\");\n+        assertParse(parser, false, \"20061204T1020.400Z\");\n+        assertParse(parser, false, \"20061204T102.400Z\");\n+        assertParse(parser, false, \"20061204T10.400Z\");\n+        assertParse(parser, false, \"20061204T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicDateTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicDateTimeNoMillis();\n+        assertParse(parser, \"20061204T102030Z\", new DateTime(2006, 12, 4, 10, 20, 30, 0));\n+        assertParse(parser, false, \"2006120T102030Z\");\n+        assertParse(parser, false, \"200612T102030Z\");\n+        assertParse(parser, false, \"20061T102030Z\");\n+        assertParse(parser, false, \"2006T102030Z\");\n+        assertParse(parser, false, \"200T102030Z\");\n+        assertParse(parser, false, \"20T102030Z\");\n+        assertParse(parser, false, \"2T102030Z\");\n+        assertParse(parser, false, \"20061204T10203Z\");\n+        assertParse(parser, false, \"20061204T1020Z\");\n+        assertParse(parser, false, \"20061204T102Z\");\n+        assertParse(parser, false, \"20061204T10Z\");\n+        assertParse(parser, false, \"20061204T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicOrdinalDate() {\n+        DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDate();\n+        assertParse(parser, \"2006123\", new DateTime(2006, 1, 1, 0, 0, 0, 0).withDayOfYear(123));\n+        assertParse(parser, false, \"200612\");\n+        assertParse(parser, false, \"20061\");\n+        assertParse(parser, false, \"2006\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicOrdinalDateTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDateTime();\n+        assertParse(parser, \"2006123T102030.400999999Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006123T102030.400Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006123T102030.40Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, \"2006123T102030.4Z\", new DateTime(2006, 1, 1, 10, 20, 30, 400).withDayOfYear(123));\n+        assertParse(parser, false, \"200612T102030.400Z\");\n+        assertParse(parser, false, \"20061T102030.400Z\");\n+        assertParse(parser, false, \"2006T102030.400Z\");\n+        assertParse(parser, false, \"200T102030.400Z\");\n+        assertParse(parser, false, \"20T102030.400Z\");\n+        assertParse(parser, false, \"2T102030.400Z\");\n+        assertParse(parser, false, \"2006123T10203.400Z\");\n+        assertParse(parser, false, \"2006123T1020.400Z\");\n+        assertParse(parser, false, \"2006123T102.400Z\");\n+        assertParse(parser, false, \"2006123T10.400Z\");\n+        assertParse(parser, false, \"2006123T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicOrdinalDateTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicOrdinalDateTimeNoMillis();\n+        assertParse(parser, \"2006123T102030Z\", new DateTime(2006, 1, 1, 10, 20, 30, 0).withDayOfYear(123));\n+        assertParse(parser, false, \"200612T102030Z\");\n+        assertParse(parser, false, \"20061T102030Z\");\n+        assertParse(parser, false, \"2006T102030Z\");\n+        assertParse(parser, false, \"200T102030Z\");\n+        assertParse(parser, false, \"20T102030Z\");\n+        assertParse(parser, false, \"2T102030Z\");\n+        assertParse(parser, false, \"2006123T10203Z\");\n+        assertParse(parser, false, \"2006123T1020Z\");\n+        assertParse(parser, false, \"2006123T102Z\");\n+        assertParse(parser, false, \"2006123T10Z\");\n+        assertParse(parser, false, \"2006123T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicWeekDate() {\n+        DateTimeFormatter parser = ISODateTimeFormat.basicWeekDate();\n+        assertParse(parser, \"2006W273\", new DateTime(2006, 6, 1, 0, 0, 0, 0).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, false, \"2006W27\");\n+        assertParse(parser, false, \"2006W2\");\n+        assertParse(parser, false, \"2006W\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicWeekDateTime() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicWeekDateTime();\n+        assertParse(parser, \"2006W273T102030.400999999Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006W273T102030.400Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006W273T102030.40Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, \"2006W273T102030.4Z\", new DateTime(2006, 6, 1, 10, 20, 30, 400).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, false, \"2006W27T102030.400Z\");\n+        assertParse(parser, false, \"2006W2T102030.400Z\");\n+        assertParse(parser, false, \"2006W273T10203.400Z\");\n+        assertParse(parser, false, \"2006W273T1020.400Z\");\n+        assertParse(parser, false, \"2006W273T102.400Z\");\n+        assertParse(parser, false, \"2006W273T10.400Z\");\n+        assertParse(parser, false, \"2006W273T1.400Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_basicWeekDateTimeNoMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.basicWeekDateTimeNoMillis();\n+        assertParse(parser, \"2006W273T102030Z\", new DateTime(2006, 6, 1, 10, 20, 30, 0).withWeekOfWeekyear(27).withDayOfWeek(3));\n+        assertParse(parser, false, \"2006W27T102030Z\");\n+        assertParse(parser, false, \"2006W2T102030Z\");\n+        assertParse(parser, false, \"2006W273T10203Z\");\n+        assertParse(parser, false, \"2006W273T1020Z\");\n+        assertParse(parser, false, \"2006W273T102Z\");\n+        assertParse(parser, false, \"2006W273T10Z\");\n+        assertParse(parser, false, \"2006W273T1Z\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void test_hourMinute() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.hourMinute();\n+        assertParse(parser, \"10:20\", new DateTime(1970, 1, 1, 10, 20, 0, 0));\n+        assertParse(parser, \"5:6\", new DateTime(1970, 1, 1, 5, 6, 0, 0));\n+        assertParse(parser, false, \"10:20:30.400999999\");\n+        assertParse(parser, false, \"10:20:30.400\");\n+        assertParse(parser, false, \"10:20:30\");\n+        assertParse(parser, false, \"10:20.400\");\n+        assertParse(parser, false, \"10:2.400\");\n+        assertParse(parser, false, \"10.400\");\n+        assertParse(parser, false, \"1.400\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_hourMinuteSecond() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.hourMinuteSecond();\n+        assertParse(parser, \"10:20:30\", new DateTime(1970, 1, 1, 10, 20, 30, 0));\n+        assertParse(parser, \"5:6:7\", new DateTime(1970, 1, 1, 5, 6, 7, 0));\n+        assertParse(parser, false, \"10:20:30.400999999\");\n+        assertParse(parser, false, \"10:20:30.400\");\n+        assertParse(parser, false, \"10:20:30.4\");\n+        assertParse(parser, false, \"10:20.400\");\n+        assertParse(parser, false, \"10:2.400\");\n+        assertParse(parser, false, \"10.400\");\n+        assertParse(parser, false, \"1.400\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_hourMinuteSecondMillis() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.hourMinuteSecondMillis();\n+        assertParse(parser, \"10:20:30.400\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.40\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.4\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"5:6:7.8\", new DateTime(1970, 1, 1, 5, 6, 7, 800));\n+        assertParse(parser, false, \"10:20:30.400999999\");\n+        assertParse(parser, false, \"10:20.400\");\n+        assertParse(parser, false, \"10:2.400\");\n+        assertParse(parser, false, \"10.400\");\n+        assertParse(parser, false, \"1.400\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_hourMinuteSecondFraction() {\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+        DateTimeFormatter parser = ISODateTimeFormat.hourMinuteSecondFraction();\n+        assertParse(parser, \"10:20:30.400999999\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.400\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.40\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"10:20:30.4\", new DateTime(1970, 1, 1, 10, 20, 30, 400));\n+        assertParse(parser, \"5:6:7.8\", new DateTime(1970, 1, 1, 5, 6, 7, 800));\n+        assertParse(parser, false, \"10:20.400\");\n+        assertParse(parser, false, \"10:2.400\");\n+        assertParse(parser, false, \"10.400\");\n+        assertParse(parser, false, \"1.400\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     private void assertParse(DateTimeFormatter parser, boolean expected, String str) {\n         if (expected) {\n         }\n     }\n \n+    private void assertParse(DateTimeFormatter parser, String str, DateTime expected) {\n+        DateTime dt = parser.parseDateTime(str);\n+        assertEquals(expected, dt);\n+    }\n+\n }", "timestamp": 1205790980, "metainfo": ""}