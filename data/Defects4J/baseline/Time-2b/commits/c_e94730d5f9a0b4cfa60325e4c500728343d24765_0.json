{"sha": "e94730d5f9a0b4cfa60325e4c500728343d24765", "log": "Test classes for converters   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/convert/MockUnknownCalendar.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import java.util.Calendar;\n+import java.util.TimeZone;\n+\n+/**\n+ * A basic mock testing class for an unknown calendar.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class MockUnknownCalendar extends Calendar {\n+    \n+    private long millis;\n+    private TimeZone zone;\n+    \n+    MockUnknownCalendar(long millis) {\n+        this.millis = millis;\n+    }\n+    MockUnknownCalendar(TimeZone zone) {\n+        this.zone = zone;\n+    }\n+    \n+    public long getTimeInMillis() {\n+        return millis;\n+    }\n+    public TimeZone getTimeZone() {\n+        return zone;\n+    }\n+\n+    protected void computeTime() {\n+    }\n+    protected void computeFields() {\n+    }\n+    public void add(int field, int amount) {\n+    }\n+    public void roll(int field, boolean up) {\n+    }\n+    public int getMinimum(int field) {\n+        return 0;\n+    }\n+    public int getMaximum(int field) {\n+        return 0;\n+    }\n+    public int getGreatestMinimum(int field) {\n+        return 0;\n+    }\n+    public int getLeastMaximum(int field) {\n+        return 0;\n+    }\n+    \n+}\n--- a/JodaTime/src/test/org/joda/time/convert/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestAll.java\n \n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n+        suite.addTest(TestCalendarConverter.suite());\n+        suite.addTest(TestDateConverter.suite());\n         suite.addTest(TestLongConverter.suite());\n+        suite.addTest(TestNullConverter.suite());\n+        suite.addTest(TestReadableInstantConverter.suite());\n+        \n+        suite.addTest(TestReadableDurationConverter.suite());\n         return suite;\n     }\n \n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for CalendarConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestCalendarConverter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone MOSCOW = DateTimeZone.getInstance(\"Europe/Moscow\");\n+    private static final Chronology JULIAN = JulianChronology.getInstance();\n+    private static final Chronology ISO = ISOChronology.getInstance();\n+    \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestCalendarConverter.class);\n+    }\n+\n+    public TestCalendarConverter(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = CalendarConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor(null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(Calendar.class, CalendarConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantMillis_Object() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar();\n+        cal.setTime(new Date(123L));\n+        assertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal));\n+    }\n+\n+    public void testGetInstantMillis_Object_Zone() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar();\n+        cal.setTime(new Date(123L));\n+        assertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal, PARIS));\n+        assertEquals(123L, cal.getTime().getTime());\n+        assertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal, (DateTimeZone) null));\n+        assertEquals(123L, cal.getTime().getTime());\n+    }\n+\n+    public void testGetInstantMillis_Object_Chronology() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar();\n+        cal.setTime(new Date(123L));\n+        assertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal, JULIAN));\n+        assertEquals(123L, cal.getTime().getTime());\n+        assertEquals(123L, CalendarConverter.INSTANCE.getInstantMillis(cal, (Chronology) null));\n+        assertEquals(123L, cal.getTime().getTime());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Object() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Paris\"));\n+        assertEquals(GJChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        cal.setGregorianChange(new Date(0L));\n+        assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        cal.setGregorianChange(new Date(Long.MAX_VALUE));\n+        assertEquals(JulianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        cal.setGregorianChange(new Date(Long.MIN_VALUE));\n+        assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal));\n+        \n+        Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc));\n+        \n+        try {\n+            Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n+            bc.setTimeZone(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+            assertEquals(BuddhistChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(bc));\n+        } catch (ClassNotFoundException ex) {\n+            // ignore\n+        }\n+    }\n+\n+    public void testGetChronology_Object_Zone() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Paris\"));\n+        assertEquals(GJChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal, MOSCOW));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal, (DateTimeZone) null));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        cal.setGregorianChange(new Date(0L));\n+        assertEquals(GJChronology.getInstance(MOSCOW, 0L, 4), CalendarConverter.INSTANCE.getChronology(cal, MOSCOW));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        cal.setGregorianChange(new Date(Long.MAX_VALUE));\n+        assertEquals(JulianChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, PARIS));\n+        \n+        cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        cal.setGregorianChange(new Date(Long.MIN_VALUE));\n+        assertEquals(GregorianChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(cal, PARIS));\n+        \n+        Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+        assertEquals(ISOChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(uc, PARIS));\n+        \n+        try {\n+            Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n+            bc.setTimeZone(TimeZone.getTimeZone(\"Europe/Moscow\"));\n+            assertEquals(BuddhistChronology.getInstance(PARIS), CalendarConverter.INSTANCE.getChronology(bc, PARIS));\n+        } catch (ClassNotFoundException ex) {\n+            // ignore\n+        }\n+    }\n+\n+    public void testGetChronology_Object_Chronology() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"Europe/Paris\"));\n+        assertEquals(JULIAN, CalendarConverter.INSTANCE.getChronology(cal, JULIAN));\n+        assertEquals(ISO, CalendarConverter.INSTANCE.getChronology(cal, (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[java.util.Calendar]\", CalendarConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Date;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for DateConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateConverter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final Chronology ISO = ISOChronology.getInstance();\n+    private static final Chronology JULIAN = JulianChronology.getInstance();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateConverter.class);\n+    }\n+\n+    public TestDateConverter(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = DateConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor(null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(Date.class, DateConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantMillis_Object() throws Exception {\n+        assertEquals(123L, DateConverter.INSTANCE.getInstantMillis(new Date(123L)));\n+    }\n+\n+    public void testGetInstantMillis_Object_Zone() throws Exception {\n+        assertEquals(123L, DateConverter.INSTANCE.getInstantMillis(new Date(123L), PARIS));\n+        assertEquals(123L, DateConverter.INSTANCE.getInstantMillis(new Date(123L), (DateTimeZone) null));\n+    }\n+\n+    public void testGetInstantMillis_Object_Chronology() throws Exception {\n+        assertEquals(123L, DateConverter.INSTANCE.getInstantMillis(new Date(123L), JULIAN));\n+        assertEquals(123L, DateConverter.INSTANCE.getInstantMillis(new Date(123L), (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Object() throws Exception {\n+        assertEquals(ISO, DateConverter.INSTANCE.getChronology(new Date(123L)));\n+    }\n+\n+    public void testGetChronology_Object_Zone() throws Exception {\n+        assertEquals(ISO_PARIS, DateConverter.INSTANCE.getChronology(new Date(123L), PARIS));\n+        assertEquals(ISO, DateConverter.INSTANCE.getChronology(new Date(123L), (DateTimeZone) null));\n+    }\n+\n+    public void testGetChronology_Object_Chronology() throws Exception {\n+        assertEquals(JULIAN, DateConverter.INSTANCE.getChronology(new Date(123L), JULIAN));\n+        assertEquals(ISO, DateConverter.INSTANCE.getChronology(new Date(123L), (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[java.util.Date]\", DateConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- a/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationType;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n /**\n- * This class is a Junit unit test for TimeOfDay.\n+ * This class is a Junit unit test for LongConverter.\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     //-----------------------------------------------------------------------\n-    // TODO duration tests\n+    public void testGetDurationMillis_Object() throws Exception {\n+        assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n+    }\n+\n+    public void testGetDurationType_Object() throws Exception {\n+        assertEquals(DurationType.getMillisType(), LongConverter.INSTANCE.getDurationType(new Long(123L)));\n+    }\n+\n+    public void testIsPrecise_Object() throws Exception {\n+        assertEquals(true, LongConverter.INSTANCE.isPrecise(new Long(123L)));\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"Converter[java.lang.Long]\", LongConverter.INSTANCE.toString());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for NullConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestNullConverter extends TestCase {\n+\n+    private long TEST_TIME_NOW =\n+            20 * DateTimeConstants.MILLIS_PER_DAY\n+            + 10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+            \n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final Chronology ISO = ISOChronology.getInstance();\n+    private static final Chronology JULIAN = JulianChronology.getInstance();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestNullConverter.class);\n+    }\n+\n+    public TestNullConverter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = NullConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor(null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(null, NullConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantMillis_Object() throws Exception {\n+        assertEquals(TEST_TIME_NOW, NullConverter.INSTANCE.getInstantMillis(null));\n+    }\n+\n+    public void testGetInstantMillis_Object_Zone() throws Exception {\n+        assertEquals(TEST_TIME_NOW, NullConverter.INSTANCE.getInstantMillis(null, PARIS));\n+        assertEquals(TEST_TIME_NOW, NullConverter.INSTANCE.getInstantMillis(null, (DateTimeZone) null));\n+    }\n+\n+    public void testGetInstantMillis_Object_Chronology() throws Exception {\n+        assertEquals(TEST_TIME_NOW, NullConverter.INSTANCE.getInstantMillis(null, JULIAN));\n+        assertEquals(TEST_TIME_NOW, NullConverter.INSTANCE.getInstantMillis(null, (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Object() throws Exception {\n+        assertEquals(ISO, NullConverter.INSTANCE.getChronology(null));\n+    }\n+\n+    public void testGetChronology_Object_Zone() throws Exception {\n+        assertEquals(ISO_PARIS, NullConverter.INSTANCE.getChronology(null, PARIS));\n+        assertEquals(ISO, NullConverter.INSTANCE.getChronology(null, (DateTimeZone) null));\n+    }\n+\n+    public void testGetChronology_Object_Chronology() throws Exception {\n+        assertEquals(JULIAN, NullConverter.INSTANCE.getChronology(null, JULIAN));\n+        assertEquals(ISO, NullConverter.INSTANCE.getChronology(null, (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[null]\", NullConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Duration;\n+import org.joda.time.DurationType;\n+import org.joda.time.ReadableDuration;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for ReadableDurationConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestReadableDurationConverter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final Chronology ISO = ISOChronology.getInstance();\n+    private static final Chronology JULIAN = JulianChronology.getInstance();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestReadableDurationConverter.class);\n+    }\n+\n+    public TestReadableDurationConverter(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = ReadableDurationConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor(null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(ReadableDuration.class, ReadableDurationConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationMillis_Object() throws Exception {\n+        assertEquals(123L, ReadableDurationConverter.INSTANCE.getDurationMillis(new Duration(DurationType.getMillisType(), 123L)));\n+        try {\n+            ReadableDurationConverter.INSTANCE.getDurationMillis(new Duration(DurationType.getYearMonthType(), 1, 2, 0, 1, 0, 0, 0, 0));\n+            fail();\n+        } catch (Exception ex) {}\n+    }\n+\n+    public void testGetDurationType_Object() throws Exception {\n+        assertEquals(DurationType.getMillisType(), ReadableDurationConverter.INSTANCE.getDurationType(new Duration(DurationType.getMillisType(), 123L)));\n+        assertEquals(DurationType.getYearMonthType(), ReadableDurationConverter.INSTANCE.getDurationType(new Duration(DurationType.getYearMonthType(), 1, 2, 0, 1, 0, 0, 0, 0)));\n+    }\n+\n+    public void testIsPrecise_Object() throws Exception {\n+        assertEquals(true, ReadableDurationConverter.INSTANCE.isPrecise(new Duration(DurationType.getMillisType(), 123L)));\n+        assertEquals(false, ReadableDurationConverter.INSTANCE.isPrecise(new Duration(DurationType.getYearMonthType(), 1, 2, 0, 1, 0, 0, 0, 0)));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[org.joda.time.ReadableDuration]\", ReadableDurationConverter.INSTANCE.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Instant;\n+import org.joda.time.ReadableInstant;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for ReadableInstantConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestReadableInstantConverter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final Chronology ISO = ISOChronology.getInstance();\n+    private static final Chronology JULIAN = JulianChronology.getInstance();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestReadableInstantConverter.class);\n+    }\n+\n+    public TestReadableInstantConverter(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = ReadableInstantConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor(null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(ReadableInstant.class, ReadableInstantConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantMillis_Object() throws Exception {\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L)));\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L)));\n+    }\n+\n+    public void testGetInstantMillis_Object_Zone() throws Exception {\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), PARIS));\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), PARIS));\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), (DateTimeZone) null));\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), (DateTimeZone) null));\n+    }\n+\n+    public void testGetInstantMillis_Object_Chronology() throws Exception {\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), JULIAN));\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), JULIAN));\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new Instant(123L), (Chronology) null));\n+        assertEquals(123L, ReadableInstantConverter.INSTANCE.getInstantMillis(new DateTime(123L), (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Object() throws Exception {\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L)));\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L)));\n+    }\n+\n+    public void testGetChronology_Object_Zone() throws Exception {\n+        assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), PARIS));\n+        assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), PARIS));\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (DateTimeZone) null));\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (DateTimeZone) null));\n+    }\n+\n+    public void testGetChronology_Object_Chronology() throws Exception {\n+        assertEquals(JULIAN, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), JULIAN));\n+        assertEquals(JULIAN, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), JULIAN));\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (Chronology) null));\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[org.joda.time.ReadableInstant]\", ReadableInstantConverter.INSTANCE.toString());\n+    }\n+\n+}", "timestamp": 1089152862, "metainfo": ""}