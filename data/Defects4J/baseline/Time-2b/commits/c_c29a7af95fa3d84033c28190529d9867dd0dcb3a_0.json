{"sha": "c29a7af95fa3d84033c28190529d9867dd0dcb3a", "log": "Supports parsing \"CE\" and \"BCE\" as era if locale language is English.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java\n import java.text.DateFormatSymbols;\n import java.util.WeakHashMap;\n import java.util.Locale;\n+import java.util.TreeMap;\n \n import org.joda.time.DateTimeFieldType;\n import org.joda.time.IllegalFieldValueException;\n             a[i] = daysOfWeek[(i < 7) ? i + 1 : 1];\n         }\n         return a;\n+    }\n+\n+    private static void addSymbols(TreeMap map, String[] symbols, Integer[] integers) {\n+        for (int i=symbols.length; --i>=0; ) {\n+            String symbol = symbols[i];\n+            if (symbol != null) {\n+                map.put(symbol, integers[i]);\n+            }\n+        }\n+    }\n+\n+    private static void addNumerals(TreeMap map, int start, int end, Integer[] integers) {\n+        for (int i=start; i<=end; i++) {\n+            map.put(String.valueOf(i).intern(), integers[i]);\n+        }\n     }\n \n     private static int maxLength(String[] a) {\n     private final String[] iShortMonths;\n     private final String[] iHalfday;\n \n+    // These map Strings to Integers.\n+    private final TreeMap iParseEras;\n+    private final TreeMap iParseDaysOfWeek;\n+    private final TreeMap iParseMonths;\n+\n     private final int iMaxEraLength;\n     private final int iMaxDayOfWeekLength;\n     private final int iMaxShortDayOfWeekLength;\n         iShortMonths = realignMonths(dfs.getShortMonths());\n         iHalfday = dfs.getAmPmStrings();\n \n+        Integer[] integers = new Integer[13];\n+        for (int i=0; i<13; i++) {\n+            integers[i] = new Integer(i);\n+        }\n+\n+        iParseEras = new TreeMap(String.CASE_INSENSITIVE_ORDER);\n+        addSymbols(iParseEras, iEras, integers);\n+        if (\"en\".equals(locale.getLanguage())) {\n+            // Include support for parsing \"BCE\" and \"CE\" if the language is\n+            // English. At some point Joda-Time will need an independent set of\n+            // localized symbols and not depend on java.text.DateFormatSymbols.\n+            iParseEras.put(\"BCE\", integers[0]);\n+            iParseEras.put(\"CE\", integers[1]);\n+        }\n+\n+        iParseDaysOfWeek = new TreeMap(String.CASE_INSENSITIVE_ORDER);\n+        addSymbols(iParseDaysOfWeek, iDaysOfWeek, integers);\n+        addSymbols(iParseDaysOfWeek, iShortDaysOfWeek, integers);\n+        addNumerals(iParseDaysOfWeek, 1, 7, integers);\n+\n+        iParseMonths = new TreeMap(String.CASE_INSENSITIVE_ORDER);\n+        addSymbols(iParseMonths, iMonths, integers);\n+        addSymbols(iParseMonths, iShortMonths, integers);\n+        addNumerals(iParseMonths, 1, 12, integers);\n+\n         iMaxEraLength = maxLength(iEras);\n         iMaxDayOfWeekLength = maxLength(iDaysOfWeek);\n         iMaxShortDayOfWeekLength = maxLength(iShortDaysOfWeek);\n     }\n \n     public int eraTextToValue(String text) {\n-        String[] eras = iEras;\n-        for (int i=eras.length; --i>=0; ) {\n-            if (eras[i].equalsIgnoreCase(text)) {\n-                return i;\n-            }\n+        Integer era = (Integer) iParseEras.get(text);\n+        if (era != null) {\n+            return era.intValue();\n         }\n         throw new IllegalFieldValueException(DateTimeFieldType.era(), text);\n     }\n     }\n \n     public int monthOfYearTextToValue(String text) {\n-        String[] months = iMonths;\n-        for (int i=months.length; --i>=1; ) {\n-            if (months[i].equalsIgnoreCase(text)) {\n-                return i;\n-            }\n-        }\n-        months = iShortMonths;\n-        for (int i=months.length; --i>=1; ) {\n-            if (months[i].equalsIgnoreCase(text)) {\n-                return i;\n-            }\n-        }\n-        try {\n-            int month = Integer.parseInt(text);\n-            if (month >= 1 && month <= 12) {\n-                return month;\n-            }\n-        } catch (NumberFormatException ex) {\n-            // ignore\n+        Integer month = (Integer) iParseMonths.get(text);\n+        if (month != null) {\n+            return month.intValue();\n         }\n         throw new IllegalFieldValueException(DateTimeFieldType.monthOfYear(), text);\n     }\n     }\n \n     public int dayOfWeekTextToValue(String text) {\n-        String[] daysOfWeek = iDaysOfWeek;\n-        for (int i=daysOfWeek.length; --i>=1; ) {\n-            if (daysOfWeek[i].equalsIgnoreCase(text)) {\n-                return i;\n-            }\n-        }\n-        daysOfWeek = iShortDaysOfWeek;\n-        for (int i=daysOfWeek.length; --i>=1; ) {\n-            if (daysOfWeek[i].equalsIgnoreCase(text)) {\n-                return i;\n-            }\n-        }\n-        try {\n-            int day = Integer.parseInt(text);\n-            if (day >= 1 && day <= 7) {\n-                return day;\n-            }\n-        } catch (NumberFormatException ex) {\n-            // ignore\n+        Integer day = (Integer) iParseDaysOfWeek.get(text);\n+        if (day != null) {\n+            return day.intValue();\n         }\n         throw new IllegalFieldValueException(DateTimeFieldType.dayOfWeek(), text);\n     }\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n     }\n \n     public void testFormat_yearOfEraParse() {\n-        Chronology chrono = Chronology.getGJ();\n+        Chronology chrono = Chronology.getGJUTC();\n \n         DateTimeFormatter f = DateTimeFormat\n             .forPattern(\"YYYY-MM GG\")\n \n         DateTime dt = new DateTime(2005, 10, 1, 0, 0, 0, 0, chrono);\n         assertEquals(dt, f.parseDateTime(\"2005-10 AD\"));\n+        assertEquals(dt, f.parseDateTime(\"2005-10 CE\"));\n \n         dt = new DateTime(-2005, 10, 1, 0, 0, 0, 0, chrono);\n         assertEquals(dt, f.parseDateTime(\"2005-10 BC\"));\n+        assertEquals(dt, f.parseDateTime(\"2005-10 BCE\"));\n     }        \n \n     //-----------------------------------------------------------------------", "timestamp": 1117695215, "metainfo": ""}