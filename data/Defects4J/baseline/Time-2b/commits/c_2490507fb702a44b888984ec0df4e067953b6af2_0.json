{"sha": "2490507fb702a44b888984ec0df4e067953b6af2", "log": "Added stable Chronology hash code implementations [2018795]  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BasicChronology.java\n import org.joda.time.field.DividedDateTimeField;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.field.MillisDurationField;\n-import org.joda.time.field.ZeroIsMaxDateTimeField;\n import org.joda.time.field.OffsetDateTimeField;\n import org.joda.time.field.PreciseDateTimeField;\n import org.joda.time.field.PreciseDurationField;\n import org.joda.time.field.RemainderDateTimeField;\n+import org.joda.time.field.ZeroIsMaxDateTimeField;\n \n /**\n  * Abstract implementation for calendar systems that use a typical\n         return iMinDaysInFirstWeek;\n     }\n \n+    /**\n+     * Checks if this chronology instance equals another.\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     * @since 1.6\n+     */\n+    public boolean equals(Object obj) {\n+        return super.equals(obj);\n+    }\n+\n+    /**\n+     * A suitable hash code for the chronology.\n+     * \n+     * @return the hash code\n+     * @since 1.6\n+     */\n+    public int hashCode() {\n+        return getClass().getName().hashCode() * 11 + getZone().hashCode() + getMinimumDaysInFirstWeek();\n+    }\n+\n     // Output\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java\n         return getInstance(zone);\n     }\n \n+    /**\n+     * Checks if this chronology instance equals another.\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     * @since 1.6\n+     */\n+    public boolean equals(Object obj) {\n+        return super.equals(obj);\n+    }\n+\n+    /**\n+     * A suitable hash code for the chronology.\n+     * \n+     * @return the hash code\n+     * @since 1.6\n+     */\n+    public int hashCode() {\n+        return \"Buddhist\".hashCode() * 11 + getZone().hashCode();\n+    }\n+\n     // Output\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n         return iGregorianChronology.getMinimumDaysInFirstWeek();\n     }\n \n+    /**\n+     * Checks if this chronology instance equals another.\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     * @since 1.6\n+     */\n+    public boolean equals(Object obj) {\n+        return super.equals(obj);\n+    }\n+\n+    /**\n+     * A suitable hash code for the chronology.\n+     * \n+     * @return the hash code\n+     * @since 1.6\n+     */\n+    public int hashCode() {\n+        return \"GJ\".hashCode() * 11 + iJulianChronology.hashCode() +\n+            iGregorianChronology.hashCode() + iCutoverInstant.hashCode();\n+    }\n+\n     // Output\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java\n     }\n \n     /**\n+     * Checks if this chronology instance equals another.\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     * @since 1.6\n+     */\n+    public boolean equals(Object obj) {\n+        return super.equals(obj);\n+    }\n+\n+    /**\n+     * A suitable hash code for the chronology.\n+     * \n+     * @return the hash code\n+     * @since 1.6\n+     */\n+    public int hashCode() {\n+        return \"ISO\".hashCode() * 11 + getZone().hashCode();\n+    }\n+\n+    /**\n      * Serialize ISOChronology instances using a small stub. This reduces the\n      * serialized size, and deserialized instances come from the cache.\n      */\n--- a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java\n         return getInstance(zone);\n     }\n \n+    /**\n+     * A suitable hash code for the chronology.\n+     * \n+     * @return the hash code\n+     * @since 1.6\n+     */\n+    public int hashCode() {\n+        return super.hashCode() * 13 + getLeapYearPatternType().hashCode();\n+    }\n+\n     //-----------------------------------------------------------------------\n     int getYear(long instant) {\n         long millisIslamic = instant - MILLIS_YEAR_1;", "timestamp": 1218577271, "metainfo": ""}