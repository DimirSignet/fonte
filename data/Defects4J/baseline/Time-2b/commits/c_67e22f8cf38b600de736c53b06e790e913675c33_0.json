{"sha": "67e22f8cf38b600de736c53b06e790e913675c33", "log": "Suppress deprecation warnings", "commit": "\n--- a/src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java\n+++ b/src/test/java/org/joda/time/TestBaseSingleFieldPeriod.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testFactory_between_RPartial() {\n         LocalDate start = new LocalDate(2006, 6, 9);\n         LocalDate end1 = new LocalDate(2006, 6, 12);\n--- a/src/test/java/org/joda/time/TestDateTimeUtils.java\n+++ b/src/test/java/org/joda/time/TestDateTimeUtils.java\n /*\n- *  Copyright 2001-2012 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     // (before the late 90's they were all over the place)\n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n \n     //-----------------------------------------------------------------------\n     public void testClass() {\n-        Class cls = DateTimeUtils.class;\n+        Class<?> cls = DateTimeUtils.class;\n         assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n         assertEquals(false, Modifier.isFinal(cls.getModifiers()));\n         \n         assertEquals(1, cls.getDeclaredConstructors().length);\n         assertEquals(true, Modifier.isProtected(cls.getDeclaredConstructors()[0].getModifiers()));\n         \n-        DateTimeUtils utils = new DateTimeUtils() {};\n+        new DateTimeUtils() {};\n     }\n     \n     //-----------------------------------------------------------------------\n         assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null));\n         \n         MutableInterval ai = new MutableInterval() {\n+            private static final long serialVersionUID = 1L;\n+\n             public Chronology getChronology() {\n                 return null; // testing for this\n             }\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testIsContiguous_RP() {\n         YearMonthDay ymd = new YearMonthDay(2005, 6, 9);\n         assertEquals(true, DateTimeUtils.isContiguous(ymd));\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testIsContiguous_RP_GJChronology() {\n         YearMonthDay ymd = new YearMonthDay(2005, 6, 9, GJ);\n         assertEquals(true, DateTimeUtils.isContiguous(ymd));\n--- a/src/test/java/org/joda/time/TestDateTime_Basics.java\n+++ b/src/test/java/org/joda/time/TestDateTime_Basics.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     }\n \n     class MockEqualsChronology extends BaseChronology {\n+        private static final long serialVersionUID = 1L;\n         public boolean equals(Object obj) {\n             return obj instanceof MockEqualsChronology;\n         }\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testToDateMidnight() {\n         DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);\n         DateMidnight test = base.toDateMidnight();\n         assertEquals(new DateMidnight(base, COPTIC_DEFAULT), test);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testToYearMonthDay() {\n         DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);\n         YearMonthDay test = base.toYearMonthDay();\n         assertEquals(new YearMonthDay(TEST_TIME1, COPTIC_DEFAULT), test);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testToTimeOfDay() {\n         DateTime base = new DateTime(TEST_TIME1, COPTIC_DEFAULT);\n         TimeOfDay test = base.toTimeOfDay();\n         } catch (IllegalArgumentException ex) {}\n     }\n     \n+    @SuppressWarnings(\"deprecation\")\n     public void testWithFields_RPartial() {\n         DateTime test = new DateTime(2004, 5, 6, 7, 8, 9, 0);\n         DateTime result = test.withFields(new YearMonthDay(2003, 4, 5));\n         assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));\n         assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));\n         DateTimeFieldType bad = new DateTimeFieldType(\"bad\") {\n+            private static final long serialVersionUID = 1L;\n             public DurationFieldType getDurationType() {\n                 return DurationFieldType.weeks();\n             }\n--- a/src/test/java/org/joda/time/TestDateTime_Properties.java\n+++ b/src/test/java/org/joda/time/TestDateTime_Properties.java\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testPropertyCompareToYear2() {\n         DateTime test1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         YearMonthDay ymd1 = new YearMonthDay(2003, 6, 9);\n--- a/src/test/java/org/joda/time/TestDays.java\n+++ b/src/test/java/org/joda/time/TestDays.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testFactory_daysBetween_RPartial_LocalDate() {\n         LocalDate start = new LocalDate(2006, 6, 9);\n         LocalDate end1 = new LocalDate(2006, 6, 12);\n--- a/src/test/java/org/joda/time/TestHours.java\n+++ b/src/test/java/org/joda/time/TestHours.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     public void testFactory_hoursBetween_RPartial() {\n         LocalTime start = new LocalTime(12, 0);\n         LocalTime end1 = new LocalTime(15, 0);\n+        @SuppressWarnings(\"deprecation\")\n         TimeOfDay end2 = new TimeOfDay(18, 0);\n         \n         assertEquals(3, Hours.hoursBetween(start, end1).getHours());\n--- a/src/test/java/org/joda/time/TestIllegalFieldValueException.java\n+++ b/src/test/java/org/joda/time/TestIllegalFieldValueException.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testReadablePartialValidate() {\n         try {\n             new YearMonthDay(1970, -5, 1);\n--- a/src/test/java/org/joda/time/TestLocalDateTime_Basics.java\n+++ b/src/test/java/org/joda/time/TestLocalDateTime_Basics.java\n /*\n- *  Copyright 2001-2010 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final int OFFSET = 1;\n     private static final GJChronology GJ_UTC = GJChronology.getInstanceUTC();\n     private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n     private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n     private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n     private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n     private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n     private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n     private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n \n //    private long TEST_TIME1 =\n //        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n //            fail();\n //        } catch (ClassCastException ex) {}\n         try {\n-            test1.compareTo(new YearMonthDay());\n+            @SuppressWarnings(\"deprecation\")\n+            YearMonthDay ymd = new YearMonthDay();\n+            test1.compareTo(ymd);\n             fail();\n         } catch (ClassCastException ex) {}\n         try {\n-            test1.compareTo(new TimeOfDay());\n+            @SuppressWarnings(\"deprecation\")\n+            TimeOfDay tod = new TimeOfDay();\n+            test1.compareTo(tod);\n             fail();\n         } catch (ClassCastException ex) {}\n         Partial partial = new Partial()\n--- a/src/test/java/org/joda/time/TestLocalDate_Basics.java\n+++ b/src/test/java/org/joda/time/TestLocalDate_Basics.java\n /*\n- *  Copyright 2001-2010 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertEquals(false, test.isSupported((DurationFieldType) null));\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testEqualsHashCode() {\n         LocalDate test1 = new LocalDate(1970, 6, 9, COPTIC_PARIS);\n         LocalDate test2 = new LocalDate(1970, 6, 9, COPTIC_PARIS);\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testCompareTo() {\n         LocalDate test1 = new LocalDate(2005, 6, 2);\n         LocalDate test1a = new LocalDate(2005, 6, 2);\n--- a/src/test/java/org/joda/time/TestLocalTime_Basics.java\n+++ b/src/test/java/org/joda/time/TestLocalTime_Basics.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertEquals(false, test.isSupported((DateTimeFieldType) null));\n         \n         DateTimeFieldType d = new DateTimeFieldType(\"hours\") {\n+            private static final long serialVersionUID = 1L;\n             public DurationFieldType getDurationType() {\n                 return DurationFieldType.hours();\n             }\n         assertEquals(false, test.isSupported(d));\n         \n         d = new DateTimeFieldType(\"hourOfYear\") {\n+            private static final long serialVersionUID = 1L;\n             public DurationFieldType getDurationType() {\n                 return DurationFieldType.hours();\n             }\n         assertEquals(false, test.isSupported((DurationFieldType) null));\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testEqualsHashCode() {\n         LocalTime test1 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n         LocalTime test2 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testCompareTo() {\n         LocalTime test1 = new LocalTime(10, 20, 30, 40);\n         LocalTime test1a = new LocalTime(10, 20, 30, 40);\n--- a/src/test/java/org/joda/time/TestLocalTime_Constructors.java\n+++ b/src/test/java/org/joda/time/TestLocalTime_Constructors.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertEquals(40, test.getMillisOfSecond());\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_ObjectTimeOfDay() throws Throwable {\n         TimeOfDay time = new TimeOfDay(10, 20, 30, 40, BUDDHIST_UTC);\n         LocalTime test = new LocalTime(time);\n--- a/src/test/java/org/joda/time/TestMinutes.java\n+++ b/src/test/java/org/joda/time/TestMinutes.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     public void testFactory_minutesBetween_RPartial() {\n         LocalTime start = new LocalTime(12, 3);\n         LocalTime end1 = new LocalTime(12, 6);\n+        @SuppressWarnings(\"deprecation\")\n         TimeOfDay end2 = new TimeOfDay(12, 9);\n         \n         assertEquals(3, Minutes.minutesBetween(start, end1).getMinutes());\n--- a/src/test/java/org/joda/time/TestMonths.java\n+++ b/src/test/java/org/joda/time/TestMonths.java\n     }\n \n     //-------------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testFactory_monthsBetween_RPartial_LocalDate() {\n         LocalDate start = new LocalDate(2006, 6, 9);\n         LocalDate end1 = new LocalDate(2006, 9, 9);\n--- a/src/test/java/org/joda/time/TestPartial_Basics.java\n+++ b/src/test/java/org/joda/time/TestPartial_Basics.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final int OFFSET = 1;\n     private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n-    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n     private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n     private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n     private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n     private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n     private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n             + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n             + 30L * DateTimeConstants.MILLIS_PER_SECOND\n             + 40L;\n-            \n-    private long TEST_TIME1 =\n-        1L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n-        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n-        + 4L;\n-        \n     private long TEST_TIME2 =\n         1L * DateTimeConstants.MILLIS_PER_DAY\n         + 5L * DateTimeConstants.MILLIS_PER_HOUR\n         assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testEqualsHashCode() {\n         Partial test1 = createHourMinPartial(COPTIC_PARIS);\n         Partial test2 = createHourMinPartial(COPTIC_PARIS);\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testCompareTo() {\n         Partial test1 = createHourMinPartial();\n         Partial test1a = createHourMinPartial();\n--- a/src/test/java/org/joda/time/TestPartial_Constructors.java\n+++ b/src/test/java/org/joda/time/TestPartial_Constructors.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n     private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n     private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n-    private static final int OFFSET = 1;\n     \n     private long TEST_TIME_NOW =\n             10L * DateTimeConstants.MILLIS_PER_HOUR\n             + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n             + 30L * DateTimeConstants.MILLIS_PER_SECOND\n             + 40L;\n-            \n-    private long TEST_TIME1 =\n-        1L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n-        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n-        + 4L;\n-        \n-    private long TEST_TIME2 =\n-        1L * DateTimeConstants.MILLIS_PER_DAY\n-        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n-        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n-        + 8L;\n         \n     private DateTimeZone zone = null;\n \n     /**\n      * Test constructor\n      */\n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_Partial() throws Throwable {\n         YearMonthDay ymd = new YearMonthDay(2005, 6, 25, GREGORIAN_PARIS);\n         Partial test = new Partial(ymd);\n--- a/src/test/java/org/joda/time/TestPeriod_Constructors.java\n+++ b/src/test/java/org/joda/time/TestPeriod_Constructors.java\n /*\n- *  Copyright 2001-2007 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_RP_RP1() throws Throwable {\n         YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n         YearMonthDay dt2 = new YearMonthDay(2005, 7, 10);\n         assertEquals(0, test.getMillis());\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_RP_RP2() throws Throwable {\n         YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n         YearMonthDay dt2 = new YearMonthDay(2005, 5, 17);\n         assertEquals(0, test.getMillis());\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_RP_RP3() throws Throwable {\n         YearMonthDay dt1 = null;\n         YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_RP_RP4() throws Throwable {\n         YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n         YearMonthDay dt2 = null;\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_RP_RP5() throws Throwable {\n         YearMonthDay dt1 = null;\n         YearMonthDay dt2 = null;\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_RP_RP6() throws Throwable {\n         YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n         TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40);\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_RP_RP_PeriodType1() throws Throwable {\n         YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n         YearMonthDay dt2 = new YearMonthDay(2005, 7, 10);\n         assertEquals(0, test.getMillis());\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_RP_RP_PeriodType2() throws Throwable {\n         YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n         YearMonthDay dt2 = new YearMonthDay(2005, 5, 17);\n         assertEquals(0, test.getMillis());\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_RP_RP_PeriodType3() throws Throwable {\n         YearMonthDay dt1 = null;\n         YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_RP_RP_PeriodType4() throws Throwable {\n         YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n         YearMonthDay dt2 = null;\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_RP_RP_PeriodType5() throws Throwable {\n         YearMonthDay dt1 = null;\n         YearMonthDay dt2 = null;\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_RP_RP_PeriodType6() throws Throwable {\n         YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n         TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40);\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testFactoryFieldDifference1() throws Throwable {\n         YearMonthDay start = new YearMonthDay(2005, 4, 9);\n         DateTimeFieldType[] types = new DateTimeFieldType[] {\n         assertEquals(0, test.getMillis());\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testFactoryFieldDifference2() throws Throwable {\n         YearMonthDay ymd = new YearMonthDay(2005, 4, 9);\n         try {\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testFactoryFieldDifference3() throws Throwable {\n         YearMonthDay start = new YearMonthDay(2005, 4, 9);\n         TimeOfDay endTime = new TimeOfDay(12, 30, 40, 0);\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testFactoryFieldDifference4() throws Throwable {\n         DateTimeFieldType[] types = new DateTimeFieldType[] {\n             DateTimeFieldType.year(),\n--- a/src/test/java/org/joda/time/TestSeconds.java\n+++ b/src/test/java/org/joda/time/TestSeconds.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     public void testFactory_secondsBetween_RPartial() {\n         LocalTime start = new LocalTime(12, 0, 3);\n         LocalTime end1 = new LocalTime(12, 0, 6);\n+        @SuppressWarnings(\"deprecation\")\n         TimeOfDay end2 = new TimeOfDay(12, 0, 9);\n         \n         assertEquals(3, Seconds.secondsBetween(start, end1).getSeconds());\n--- a/src/test/java/org/joda/time/TestSerialization.java\n+++ b/src/test/java/org/joda/time/TestSerialization.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         inlineCompare(test, false);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testSerializedYearMonthDay() throws Exception {\n         YearMonthDay test = new YearMonthDay();\n         loadAndCompare(test, \"YearMonthDay\", false);\n         inlineCompare(test, false);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testSerializedTimeOfDay() throws Exception {\n         TimeOfDay test = new TimeOfDay();\n         loadAndCompare(test, \"TimeOfDay\", false);\n--- a/src/test/java/org/joda/time/TestTimeOfDay_Basics.java\n+++ b/src/test/java/org/joda/time/TestTimeOfDay_Basics.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *\n  * @author Stephen Colebourne\n  */\n+@SuppressWarnings(\"deprecation\")\n public class TestTimeOfDay_Basics extends TestCase {\n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n     private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n     private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n-    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n     private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n     private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n     \n             + 30L * DateTimeConstants.MILLIS_PER_SECOND\n             + 40L;\n             \n-    private long TEST_TIME1 =\n-        1L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n-        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n-        + 4L;\n-        \n     private long TEST_TIME2 =\n         1L * DateTimeConstants.MILLIS_PER_DAY\n         + 5L * DateTimeConstants.MILLIS_PER_HOUR\n--- a/src/test/java/org/joda/time/TestTimeOfDay_Constructors.java\n+++ b/src/test/java/org/joda/time/TestTimeOfDay_Constructors.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *\n  * @author Stephen Colebourne\n  */\n+@SuppressWarnings(\"deprecation\")\n public class TestTimeOfDay_Constructors extends TestCase {\n \n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n--- a/src/test/java/org/joda/time/TestTimeOfDay_Properties.java\n+++ b/src/test/java/org/joda/time/TestTimeOfDay_Properties.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *\n  * @author Stephen Colebourne\n  */\n+@SuppressWarnings(\"deprecation\")\n public class TestTimeOfDay_Properties extends TestCase {\n \n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     \n     private long TEST_TIME_NOW =\n             10L * DateTimeConstants.MILLIS_PER_HOUR\n--- a/src/test/java/org/joda/time/TestWeeks.java\n+++ b/src/test/java/org/joda/time/TestWeeks.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertEquals(6, Weeks.weeksBetween(start, end2).getWeeks());\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testFactory_weeksBetween_RPartial() {\n         LocalDate start = new LocalDate(2006, 6, 9);\n         LocalDate end1 = new LocalDate(2006, 6, 30);\n--- a/src/test/java/org/joda/time/TestYearMonthDay_Basics.java\n+++ b/src/test/java/org/joda/time/TestYearMonthDay_Basics.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *\n  * @author Stephen Colebourne\n  */\n+@SuppressWarnings(\"deprecation\")\n public class TestYearMonthDay_Basics extends TestCase {\n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final int OFFSET = 1;\n     private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n     private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n     private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n     private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n-    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n-    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n-    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n-    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n     private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n     private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n     \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n-            \n-    private long TEST_TIME1 =\n-        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n-        \n-    private long TEST_TIME2 =\n-        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n-        \n+\n     private DateTimeZone zone = null;\n \n     public static void main(String[] args) {\n--- a/src/test/java/org/joda/time/TestYearMonthDay_Constructors.java\n+++ b/src/test/java/org/joda/time/TestYearMonthDay_Constructors.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n-import org.joda.time.chrono.BuddhistChronology;\n-import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n \n  *\n  * @author Stephen Colebourne\n  */\n+@SuppressWarnings(\"deprecation\")\n public class TestYearMonthDay_Constructors extends TestCase {\n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n-    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n     private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n     private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n     \n--- a/src/test/java/org/joda/time/TestYearMonthDay_Properties.java\n+++ b/src/test/java/org/joda/time/TestYearMonthDay_Properties.java\n /*\n- *  Copyright 2001-2010 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *\n  * @author Stephen Colebourne\n  */\n+@SuppressWarnings(\"deprecation\")\n public class TestYearMonthDay_Properties extends TestCase {\n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n--- a/src/test/java/org/joda/time/TestYears.java\n+++ b/src/test/java/org/joda/time/TestYears.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertEquals(6, Years.yearsBetween(start, end2).getYears());\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testFactory_yearsBetween_RPartial() {\n         LocalDate start = new LocalDate(2006, 6, 9);\n         LocalDate end1 = new LocalDate(2009, 6, 9);", "timestamp": 1374317361, "metainfo": ""}