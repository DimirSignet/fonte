{"sha": "cf0112ca4a095ff6eb9e1c13311887191250795a", "log": "Alter behaviour so that adding to a time wraps to the next 'day'   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n     }\n \n     /**\n-     * Gets a copy of this date with the specified field set to a new value.\n+     * Gets a copy of this time with the specified field set to a new value.\n      * <p>\n      * For example, if the field type is <code>minuteOfHour</code> then the day\n      * would be changed in the returned instance.\n      * @throws IllegalArgumentException if the value is null or invalid\n      */\n     public TimeOfDay withField(DateTimeFieldType fieldType, int value) {\n-        if (value == 0) {\n+        int index = indexOfSupported(fieldType);\n+        if (value == getValue(index)) {\n             return this;\n         }\n-        int index = indexOfSupported(fieldType);\n         int[] newValues = getValues();\n         newValues = getField(index).set(this, index, newValues, value);\n         return new TimeOfDay(this, newValues);\n     }\n \n     /**\n-     * Gets a copy of this date with the value of the specified field increased.\n+     * Gets a copy of this time with the value of the specified field increased,\n+     * wrapping to what would be a new day if required.\n      * <p>\n      * If the addition is zero, then <code>this</code> is returned.\n      * <p>\n      * These three lines are equivalent:\n      * <pre>\n-     * TimeOfDay added = tod.withField(DateTimeFieldType.minuteOfHour(), 6);\n+     * TimeOfDay added = tod.withFieldAdded(DateTimeFieldType.minuteOfHour(), 6);\n      * TimeOfDay added = tod.minuteOfHour().addToCopy(6);\n      * TimeOfDay added = tod.property(DateTimeFieldType.minuteOfHour()).addToCopy(6);\n      * </pre>\n      * @throws ArithmeticException if the new datetime exceeds the capacity\n      */\n     public TimeOfDay withFieldAdded(DurationFieldType fieldType, int amount) {\n+        int index = indexOfSupported(fieldType);\n         if (amount == 0) {\n             return this;\n         }\n-        int index = indexOfSupported(fieldType);\n         int[] newValues = getValues();\n-        newValues = getField(index).add(this, index, newValues, amount);\n+        newValues = getField(index).addWrapPartial(this, index, newValues, amount);\n         return new TimeOfDay(this, newValues);\n     }\n \n     /**\n-     * Gets a copy of this date with the specified period added.\n+     * Gets a copy of this date with the specified period added,\n+     * wrapping to what would be a new day if required.\n      * <p>\n      * If the addition is zero, then <code>this</code> is returned.\n      * Fields in the period that aren't present in the partial are ignored.\n             DurationFieldType fieldType = period.getFieldType(i);\n             int index = indexOf(fieldType);\n             if (index >= 0) {\n-                newValues = getField(index).add(this, index, newValues,\n+                newValues = getField(index).addWrapPartial(this, index, newValues,\n                         FieldUtils.safeMultiplyToInt(period.getValue(i), scalar));\n             }\n         }\n     }\n \n     /**\n-     * Gets a copy of this instance with the specified period added.\n+     * Gets a copy of this instance with the specified period added,\n+     * wrapping to what would be a new day if required.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n     }\n \n     /**\n-     * Gets a copy of this instance with the specified period take away.\n+     * Gets a copy of this instance with the specified period take away,\n+     * wrapping to what would be a new day if required.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n \n         //-----------------------------------------------------------------------\n         /**\n-         * Adds to the value of this field in a copy of this TimeOfDay.\n+         * Adds to the value of this field in a copy of this TimeOfDay,\n+         * wrapping to what would be the next day if necessary.\n          * <p>\n          * The value will be added to this field. If the value is too large to be\n          * added solely to this field then it will affect larger fields.\n          * Smaller fields are unaffected.\n          * <p>\n-         * If the result would be too large, beyond 23:59:59:999, then an\n-         * IllegalArgumentException is thrown.\n+         * If the result would be too large, beyond 23:59:59:999, then the\n+         * calculation wraps to 00:00:00.000. For the alternate strict behaviour\n+         * with no wrapping see {@link #addNoWrapToCopy(int)}.\n          * <p>\n          * The TimeOfDay attached to this property is unchanged by this call.\n          * Instead, a new instance is returned.\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n         public TimeOfDay addToCopy(int valueToAdd) {\n+            int[] newValues = iTimeOfDay.getValues();\n+            newValues = getField().addWrapPartial(iTimeOfDay, iFieldIndex, newValues, valueToAdd);\n+            return new TimeOfDay(iTimeOfDay, newValues);\n+        }\n+\n+        /**\n+         * Adds to the value of this field in a copy of this TimeOfDay,\n+         * throwing an Exception if the bounds are exceeded.\n+         * <p>\n+         * The value will be added to this field. If the value is too large to be\n+         * added solely to this field then it will affect larger fields.\n+         * Smaller fields are unaffected.\n+         * <p>\n+         * If the result would be too large (beyond 23:59:59:999) or too\n+         * small (less than 00:00:00.000) then an Execption is thrown.\n+         * For the alternate behaviour which wraps to the next 'day',\n+         * see {@link #addToCopy(int)}.\n+         * <p>\n+         * The TimeOfDay attached to this property is unchanged by this call.\n+         * Instead, a new instance is returned.\n+         * \n+         * @param valueToAdd  the value to add to the field in the copy\n+         * @return a copy of the TimeOfDay with the field value changed\n+         * @throws IllegalArgumentException if the value isn't valid\n+         */\n+        public TimeOfDay addNoWrapToCopy(int valueToAdd) {\n             int[] newValues = iTimeOfDay.getValues();\n             newValues = getField().add(iTimeOfDay, iFieldIndex, newValues, valueToAdd);\n             return new TimeOfDay(iTimeOfDay, newValues);\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n         copy = test.hourOfDay().addToCopy(13);\n         check(copy, 23, 20, 30, 40);\n         \n-        try {\n-            test.hourOfDay().addToCopy(14);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n+        copy = test.hourOfDay().addToCopy(14);\n+        check(copy, 0, 20, 30, 40);\n         \n         copy = test.hourOfDay().addToCopy(-10);\n         check(copy, 0, 20, 30, 40);\n         \n-        try {\n-            test.hourOfDay().addToCopy(-11);\n+        copy = test.hourOfDay().addToCopy(-11);\n+        check(copy, 23, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddNoWrapHour() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.hourOfDay().addNoWrapToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addNoWrapToCopy(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addNoWrapToCopy(13);\n+        check(copy, 23, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().addNoWrapToCopy(14);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addNoWrapToCopy(-10);\n+        check(copy, 0, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().addNoWrapToCopy(-11);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         check(test, 10, 20, 30, 40);\n         copy = test.minuteOfHour().addToCopy(13 * 60 + 39);\n         check(copy, 23, 59, 30, 40);\n         \n-        try {\n-            test.minuteOfHour().addToCopy(13 * 60 + 40);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n+        copy = test.minuteOfHour().addToCopy(13 * 60 + 40);\n+        check(copy, 0, 0, 30, 40);\n         \n         copy = test.minuteOfHour().addToCopy(-9);\n         check(copy, 10, 11, 30, 40);\n         copy = test.minuteOfHour().addToCopy(-(10 * 60 + 20));\n         check(copy, 0, 0, 30, 40);\n         \n-        try {\n-            test.minuteOfHour().addToCopy(-(10 * 60 + 21));\n+        copy = test.minuteOfHour().addToCopy(-(10 * 60 + 21));\n+        check(copy, 23, 59, 30, 40);\n+    }\n+\n+    public void testPropertyAddNoWrapMinute() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.minuteOfHour().addNoWrapToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(39);\n+        check(copy, 10, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(40);\n+        check(copy, 11, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(1 * 60 + 45);\n+        check(copy, 12, 5, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(13 * 60 + 39);\n+        check(copy, 23, 59, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().addNoWrapToCopy(13 * 60 + 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-9);\n+        check(copy, 10, 11, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-19);\n+        check(copy, 10, 1, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-20);\n+        check(copy, 10, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-21);\n+        check(copy, 9, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 20));\n+        check(copy, 0, 0, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 21));\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         check(test, 10, 20, 30, 40);\n         copy = test.secondOfMinute().addToCopy(39 * 60 + 30);\n         check(copy, 11, 0, 0, 40);\n         \n-        try {\n-            test.secondOfMinute().addToCopy(13 * 60 * 60 + 39 * 60 + 30);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n+        copy = test.secondOfMinute().addToCopy(13 * 60 * 60 + 39 * 60 + 30);\n+        check(copy, 0, 0, 0, 40);\n         \n         copy = test.secondOfMinute().addToCopy(-9);\n         check(copy, 10, 20, 21, 40);\n         copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 30));\n         check(copy, 0, 0, 0, 40);\n         \n-        try {\n-            test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n+        copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n+        check(copy, 23, 59, 59, 40);\n+    }\n+\n+    public void testPropertyAddNoWrapSecond() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.secondOfMinute().addNoWrapToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(29);\n+        check(copy, 10, 20, 59, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(30);\n+        check(copy, 10, 21, 0, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(39 * 60 + 29);\n+        check(copy, 10, 59, 59, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(39 * 60 + 30);\n+        check(copy, 11, 0, 0, 40);\n+        \n+        try {\n+            test.secondOfMinute().addNoWrapToCopy(13 * 60 * 60 + 39 * 60 + 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(-9);\n+        check(copy, 10, 20, 21, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(-30);\n+        check(copy, 10, 20, 0, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(-31);\n+        check(copy, 10, 19, 59, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(-(10 * 60 * 60 + 20 * 60 + 30));\n+        check(copy, 0, 0, 0, 40);\n+        \n+        try {\n+            test.secondOfMinute().addNoWrapToCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         check(test, 10, 20, 30, 40);\n         copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n         check(copy, 23, 59, 59, 999);\n         \n-        try {\n-            test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n+        copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+        check(copy, 0, 0, 0, 0);\n         \n         copy = test.millisOfSecond().addToCopy(-9);\n         check(copy, 10, 20, 30, 31);\n         copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n         check(copy, 0, 0, 0, 0);\n         \n-        try {\n-            test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+        copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+        check(copy, 23, 59, 59, 999);\n+    }\n+\n+    public void testPropertyAddNoWrapMilli() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.millisOfSecond().addNoWrapToCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(959);\n+        check(copy, 10, 20, 30, 999);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(960);\n+        check(copy, 10, 20, 31, 0);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        check(copy, 23, 59, 59, 999);\n+        \n+        try {\n+            test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(-9);\n+        check(copy, 10, 20, 30, 31);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(-40);\n+        check(copy, 10, 20, 30, 0);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(-41);\n+        check(copy, 10, 20, 29, 999);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        check(copy, 0, 0, 0, 0);\n+        \n+        try {\n+            test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         check(test, 10, 20, 30, 40);", "timestamp": 1106782683, "metainfo": ""}