{"sha": "a5f58867d1786d078741f4107cac3cc33f578232", "log": "Define DateTimeFieldType to DurationFieldType link   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n     /** The cache of name to type used to ensure singletons. */\n     private static Map cCache = new HashMap();\n     /** The era field. */\n-    private static final DateTimeFieldType ERA = new DateTimeFieldType(\"era\");\n+    private static final DateTimeFieldType ERA = new DateTimeFieldType(\n+        \"era\", DurationFieldType.eras(), null);\n     /** The yearOfEra field. */\n-    private static final DateTimeFieldType YEAR_OF_ERA = new DateTimeFieldType(\"yearOfEra\");\n+    private static final DateTimeFieldType YEAR_OF_ERA = new DateTimeFieldType(\n+        \"yearOfEra\", DurationFieldType.years(), DurationFieldType.eras());\n     /** The centuryOfEra field. */\n-    private static final DateTimeFieldType CENTURY_OF_ERA = new DateTimeFieldType(\"centuryOfEra\");\n+    private static final DateTimeFieldType CENTURY_OF_ERA = new DateTimeFieldType(\n+        \"centuryOfEra\", DurationFieldType.centuries(), DurationFieldType.eras());\n     /** The yearOfCentury field. */\n-    private static final DateTimeFieldType YEAR_OF_CENTURY = new DateTimeFieldType(\"yearOfCentury\");\n+    private static final DateTimeFieldType YEAR_OF_CENTURY = new DateTimeFieldType(\n+        \"yearOfCentury\", DurationFieldType.years(), DurationFieldType.centuries());\n     /** The year field. */\n-    private static final DateTimeFieldType YEAR = new DateTimeFieldType(\"year\");\n+    private static final DateTimeFieldType YEAR = new DateTimeFieldType(\n+        \"year\", DurationFieldType.years(), null);\n     /** The dayOfYear field. */\n-    private static final DateTimeFieldType DAY_OF_YEAR = new DateTimeFieldType(\"dayOfYear\");\n+    private static final DateTimeFieldType DAY_OF_YEAR = new DateTimeFieldType(\n+        \"dayOfYear\", DurationFieldType.days(), DurationFieldType.years());\n     /** The monthOfYear field. */\n-    private static final DateTimeFieldType MONTH_OF_YEAR = new DateTimeFieldType(\"monthOfYear\");\n+    private static final DateTimeFieldType MONTH_OF_YEAR = new DateTimeFieldType(\n+        \"monthOfYear\", DurationFieldType.months(), DurationFieldType.years());\n     /** The dayOfMonth field. */\n-    private static final DateTimeFieldType DAY_OF_MONTH = new DateTimeFieldType(\"dayOfMonth\");\n+    private static final DateTimeFieldType DAY_OF_MONTH = new DateTimeFieldType(\n+        \"dayOfMonth\", DurationFieldType.days(), DurationFieldType.months());\n     /** The weekyearOfCentury field. */\n-    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY = new DateTimeFieldType(\"weekyearOfCentury\");\n+    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY = new DateTimeFieldType(\n+        \"weekyearOfCentury\", DurationFieldType.weekyears(), DurationFieldType.centuries());\n     /** The weekyear field. */\n-    private static final DateTimeFieldType WEEKYEAR = new DateTimeFieldType(\"weekyear\");\n+    private static final DateTimeFieldType WEEKYEAR = new DateTimeFieldType(\n+        \"weekyear\", DurationFieldType.weekyears(), null);\n     /** The weekOfWeekyear field. */\n-    private static final DateTimeFieldType WEEK_OF_WEEKYEAR = new DateTimeFieldType(\"weekOfWeekyear\");\n+    private static final DateTimeFieldType WEEK_OF_WEEKYEAR = new DateTimeFieldType(\n+        \"weekOfWeekyear\", DurationFieldType.weeks(), DurationFieldType.weekyears());\n     /** The dayOfWeek field. */\n-    private static final DateTimeFieldType DAY_OF_WEEK = new DateTimeFieldType(\"dayOfWeek\");\n+    private static final DateTimeFieldType DAY_OF_WEEK = new DateTimeFieldType(\n+        \"dayOfWeek\", DurationFieldType.days(), DurationFieldType.weeks());\n \n     /** The halfday field. */\n-    private static final DateTimeFieldType HALFDAY_OF_DAY = new DateTimeFieldType(\"halfdayOfDay\");\n+    private static final DateTimeFieldType HALFDAY_OF_DAY = new DateTimeFieldType(\n+        \"halfdayOfDay\", DurationFieldType.halfdays(), DurationFieldType.days());\n     /** The hourOfHalfday field. */\n-    private static final DateTimeFieldType HOUR_OF_HALFDAY = new DateTimeFieldType(\"hourOfHalfday\");\n+    private static final DateTimeFieldType HOUR_OF_HALFDAY = new DateTimeFieldType(\n+        \"hourOfHalfday\", DurationFieldType.hours(), DurationFieldType.halfdays());\n     /** The clockhourOfHalfday field. */\n-    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY = new DateTimeFieldType(\"clockhourOfHalfday\");\n+    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY = new DateTimeFieldType(\n+        \"clockhourOfHalfday\", DurationFieldType.hours(), DurationFieldType.halfdays());\n     /** The clockhourOfDay field. */\n-    private static final DateTimeFieldType CLOCKHOUR_OF_DAY = new DateTimeFieldType(\"clockhourOfDay\");\n+    private static final DateTimeFieldType CLOCKHOUR_OF_DAY = new DateTimeFieldType(\n+        \"clockhourOfDay\", DurationFieldType.hours(), DurationFieldType.days());\n     /** The hourOfDay field. */\n-    private static final DateTimeFieldType HOUR_OF_DAY = new DateTimeFieldType(\"hourOfDay\");\n+    private static final DateTimeFieldType HOUR_OF_DAY = new DateTimeFieldType(\n+        \"hourOfDay\", DurationFieldType.hours(), DurationFieldType.days());\n     /** The minuteOfDay field. */\n-    private static final DateTimeFieldType MINUTE_OF_DAY = new DateTimeFieldType(\"minuteOfDay\");\n+    private static final DateTimeFieldType MINUTE_OF_DAY = new DateTimeFieldType(\n+        \"minuteOfDay\", DurationFieldType.minutes(), DurationFieldType.days());\n     /** The minuteOfHour field. */\n-    private static final DateTimeFieldType MINUTE_OF_HOUR = new DateTimeFieldType(\"minuteOfHour\");\n+    private static final DateTimeFieldType MINUTE_OF_HOUR = new DateTimeFieldType(\n+        \"minuteOfHour\", DurationFieldType.minutes(), DurationFieldType.hours());\n     /** The secondOfDay field. */\n-    private static final DateTimeFieldType SECOND_OF_DAY = new DateTimeFieldType(\"secondOfDay\");\n+    private static final DateTimeFieldType SECOND_OF_DAY = new DateTimeFieldType(\n+        \"secondOfDay\", DurationFieldType.seconds(), DurationFieldType.days());\n     /** The secondOfMinute field. */\n-    private static final DateTimeFieldType SECOND_OF_MINUTE = new DateTimeFieldType(\"secondOfMinute\");\n+    private static final DateTimeFieldType SECOND_OF_MINUTE = new DateTimeFieldType(\n+        \"secondOfMinute\", DurationFieldType.seconds(), DurationFieldType.minutes());\n     /** The millisOfDay field. */\n-    private static final DateTimeFieldType MILLIS_OF_DAY = new DateTimeFieldType(\"millisOfDay\");\n+    private static final DateTimeFieldType MILLIS_OF_DAY = new DateTimeFieldType(\n+        \"millisOfDay\", DurationFieldType.millis(), DurationFieldType.days());\n     /** The millisOfSecond field. */\n-    private static final DateTimeFieldType MILLIS_OF_SECOND = new DateTimeFieldType(\"millisOfSecond\");\n+    private static final DateTimeFieldType MILLIS_OF_SECOND = new DateTimeFieldType(\n+        \"millisOfSecond\", DurationFieldType.millis(), DurationFieldType.seconds());\n \n     /** The name of the field. */\n     private final String iName;\n+    /** The name of the field. */\n+    private transient final DurationFieldType iUnitType;\n+    /** The name of the field. */\n+    private transient final DurationFieldType iRangeType;\n \n     //-----------------------------------------------------------------------\n     /**\n      * and then you use the <code>getInstance</code> method. This could be\n      * achieved by subclassing this class.\n      * \n-     * @param name  the name to retrieve\n+     * @param name  the name to define, such as 'hourOfMonth'\n+     * @param unitType  the unit type, such as 'hours'\n+     * @param rangeType  the range type, such as 'months'\n      * @return the singleton type\n      */\n-    public static synchronized DateTimeFieldType define(String name) {\n+    public static synchronized DateTimeFieldType define(\n+            String name, DurationFieldType unitType, DurationFieldType rangeType) {\n+        \n         DateTimeFieldType type = (DateTimeFieldType) cCache.get(name);\n         if (type == null) {\n-            return new DateTimeFieldType(name);\n+            return new DateTimeFieldType(name, unitType, rangeType);\n         }\n         return type;\n     }\n      * Constructor.\n      * \n      * @param name  the name to use\n-     */\n-    private DateTimeFieldType(String name) {\n+     * @param unitType  the unit type, such as 'hours'\n+     * @param rangeType  the range type, such as 'months'\n+     */\n+    private DateTimeFieldType(\n+                String name, DurationFieldType unitType, DurationFieldType rangeType) {\n+        \n         super();\n         iName = name;\n+        iUnitType = unitType;\n+        iRangeType = rangeType;\n         cCache.put(name, this);\n     }\n \n     /**\n      * Ensure a singleton is returned.\n+     * <p>\n+     * Note that types must be defined before deserialization.\n      * \n      * @return the singleton type\n      */\n     //-----------------------------------------------------------------------\n     /**\n      * Get the name of the field.\n+     * <p>\n      * By convention, names follow a pattern of \"dddOfRrr\", where \"ddd\" represents\n-     * the (singular) duration field name and \"Rrr\" represents the (singular)\n-     * range duration field name. If the range field is not applicable, then\n+     * the (singular) duration unit field name and \"Rrr\" represents the (singular)\n+     * duration range field name. If the range field is not applicable, then\n      * the name of the field is simply the (singular) duration field name.\n      * \n      * @return field name\n     }\n \n     /**\n+     * Get the duration unit of the field.\n+     * \n+     * @return duration unit of the field, never null\n+     */\n+    public DurationFieldType getUnitDurationType() {\n+        return iUnitType;\n+    }\n+\n+    /**\n+     * Get the duration range of the field.\n+     * \n+     * @return duration range of the field, null if unbounded\n+     */\n+    public DurationFieldType getRangeDurationType() {\n+        return iRangeType;\n+    }\n+\n+    /**\n      * Get a suitable debug string.\n      * \n      * @return debug string", "timestamp": 1094162249, "metainfo": ""}