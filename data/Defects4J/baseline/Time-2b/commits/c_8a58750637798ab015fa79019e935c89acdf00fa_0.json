{"sha": "8a58750637798ab015fa79019e935c89acdf00fa", "log": "Change DateTimeZone to use forXxx factory methods   ", "commit": "\n--- a/JodaTime/src/example/org/joda/example/time/AgeCalculator.java\n+++ b/JodaTime/src/example/org/joda/example/time/AgeCalculator.java\n         zoneSelector.addActionListener(new ActionListener() {\n             public void actionPerformed(ActionEvent e) {\n                 String id = (String)zoneSelector.getSelectedItem();\n-                iChronology = ISOChronology.getInstance(DateTimeZone.getInstance(id));\n+                iChronology = ISOChronology.getInstance(DateTimeZone.forID(id));\n                 updateResults();\n             }\n         });\n--- a/JodaTime/src/example/org/joda/example/time/TimeZoneTable.java\n+++ b/JodaTime/src/example/org/joda/example/time/TimeZoneTable.java\n             int i = 0;\n             while (it.hasNext()) {\n                 String id = (String) it.next();\n-                zones[i++] = new ZoneData(id, DateTimeZone.getInstance(id));\n+                zones[i++] = new ZoneData(id, DateTimeZone.forID(id));\n             }\n             Arrays.sort(zones);\n         }\n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n+import java.util.TimeZone;\n \n import org.joda.time.chrono.BaseChronology;\n import org.joda.time.chrono.ISOChronology;\n \n         try {\n             try {\n-                cDefault = getInstance(System.getProperty(\"user.timezone\"));\n+                cDefault = forID(System.getProperty(\"user.timezone\"));\n             } catch (RuntimeException ex) {\n                 // ignored\n             }\n             if (cDefault == null) {\n-                cDefault = getInstance(java.util.TimeZone.getDefault());\n+                cDefault = forTimeZone(TimeZone.getDefault());\n             }\n         } catch (IllegalArgumentException ex) {\n             // ignored\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Gets the default time zone.\n      * \n         cDefault = zone;\n     }\n \n-    /**\n-     * Get the time zone by id.\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets a time zone instance for the specified time zone id.\n      * <p>\n      * The time zone id may be one of those returned by getAvailableIDs.\n      * Short ids, as accepted by {@link java.util.TimeZone}, are not accepted.\n      * @return the DateTimeZone object for the ID\n      * @throws IllegalArgumentException if the ID is not recognised\n      */\n-    public static DateTimeZone getInstance(String id) throws IllegalArgumentException {\n+    public static DateTimeZone forID(String id) {\n         if (id == null) {\n             return getDefault();\n         }\n     }\n \n     /**\n-     * Get the time zone by the number of hours difference from UTC.\n+     * Gets a time zone instance for the specified offset to UTC in hours.\n      * This method assumes standard length hours.\n      * <p>\n      * This factory is a convenient way of constructing zones with a fixed offset.\n      * @return the DateTimeZone object for the offset\n      * @throws IllegalArgumentException if the offset is too large or too small\n      */\n-    public static DateTimeZone getInstance(int hoursOffset) throws IllegalArgumentException {\n-        return getInstance(hoursOffset, 0);\n-    }\n-\n-    /**\n-     * Get the time zone by the number of hours and minutes difference from UTC.\n+    public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException {\n+        return forOffsetHoursMinutes(hoursOffset, 0);\n+    }\n+\n+    /**\n+     * Gets a time zone instance for the specified offset to UTC in hours and minutes.\n      * This method assumes 60 minutes in an hour, and standard length minutes.\n      * <p>\n      * This factory is a convenient way of constructing zones with a fixed offset.\n      * @return the DateTimeZone object for the offset\n      * @throws IllegalArgumentException if the offset or minute is too large or too small\n      */\n-    public static DateTimeZone getInstance(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n+    public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException {\n         if (hoursOffset == 0 && minutesOffset == 0) {\n             return DateTimeZone.UTC;\n         }\n         } catch (ArithmeticException ex) {\n             throw new IllegalArgumentException(\"Offset is too large\");\n         }\n-        String id = printOffset(offset);\n-        return fixedOffsetZone(id, offset);\n-    }\n-\n-    /**\n-     * Get the time zone by Java TimeZone.\n+        return forOffsetMillis(offset);\n+    }\n+\n+    /**\n+     * Gets a time zone instance for the specified offset to UTC in milliseconds.\n+     *\n+     * @param millisOffset  the offset in millis from UTC\n+     * @return the DateTimeZone object for the offset\n+     */\n+    public static DateTimeZone forOffsetMillis(int millisOffset) {\n+        String id = printOffset(millisOffset);\n+        return fixedOffsetZone(id, millisOffset);\n+    }\n+\n+    /**\n+     * Gets a time zone instance for a JDK TimeZone.\n      * <p>\n      * DateTimeZone only accepts a subset of the IDs from TimeZone. The\n      * excluded IDs are the short three letter form (except UTC). This \n      * @return the DateTimeZone object for the zone\n      * @throws IllegalArgumentException if the zone is not recognised\n      */\n-    public static DateTimeZone getInstance(java.util.TimeZone zone) {\n+    public static DateTimeZone forTimeZone(TimeZone zone) {\n         if (zone == null) {\n             return getDefault();\n         }\n         throw new IllegalArgumentException(\"The datetime zone id is not recognised: \" + id);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Deprecated, use {@link #forID(String)}.\n+     * \n+     * @deprecated use forID(String)\n+     */\n+    public static DateTimeZone getInstance(String id) {\n+        return forID(id);\n+    }\n+\n+    /**\n+     * Deprecated, use {@link #forOffsetHours(int)}.\n+     * \n+     * @deprecated use forOffsetHours(int)\n+     */\n+    public static DateTimeZone getInstance(int hours) {\n+        return forOffsetHours(hours);\n+    }\n+\n+    /**\n+     * Deprecated, use {@link #forOffsetHoursMinutes(int, int)}.\n+     * \n+     * @deprecated use forOffsetHoursMinutes(int,int)\n+     */\n+    public static DateTimeZone getInstance(int hours, int mins) {\n+        return forOffsetHoursMinutes(hours, mins);\n+    }\n+\n+    /**\n+     * Deprecated, use {@link #forTimeZone(TimeZone)}.\n+     * \n+     * @deprecated use forTimeZone(TimeZone)\n+     */\n+    public static DateTimeZone getInstance(TimeZone jdkZone) {\n+        return forTimeZone(jdkZone);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets the zone using a fixed offset amount.\n      * \n      * @return the zone\n      */\n     private static synchronized DateTimeZone fixedOffsetZone(String id, int offset) {\n+        if (offset == 0) {\n+            return DateTimeZone.UTC;\n+        }\n         if (iFixedOffsetCache == null) {\n             iFixedOffsetCache = new HashMap();\n         }\n         }\n \n         private Object readResolve() throws ObjectStreamException {\n-            return getInstance(iID);\n+            return forID(iID);\n         }\n     }\n }\n--- a/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java\n         Calendar cal = (Calendar) object;\n         DateTimeZone zone = null;\n         try {\n-            zone = DateTimeZone.getInstance(cal.getTimeZone());\n+            zone = DateTimeZone.forTimeZone(cal.getTimeZone());\n             \n         } catch (IllegalArgumentException ex) {\n             zone = DateTimeZone.getDefault();\n--- a/JodaTime/src/test/org/joda/time/TestAbstractPartial.java\n+++ b/JodaTime/src/test/org/joda/time/TestAbstractPartial.java\n  */\n public class TestAbstractPartial extends TestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n--- a/JodaTime/src/test/org/joda/time/TestBasePartial.java\n+++ b/JodaTime/src/test/org/joda/time/TestBasePartial.java\n  */\n public class TestBasePartial extends TestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n--- a/JodaTime/src/test/org/joda/time/TestChronology.java\n+++ b/JodaTime/src/test/org/joda/time/TestChronology.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone NEWYORK = DateTimeZone.getInstance(\"America/New_York\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Constructors.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n     }\n \n     //-----------------------------------------------------------------------\n-    public void testGetInstance_String() {\n-        assertEquals(DateTimeZone.getDefault(), DateTimeZone.getInstance((String) null));\n-        \n-        DateTimeZone zone = DateTimeZone.getInstance(\"Europe/London\");\n+    public void testForID_String() {\n+        assertEquals(DateTimeZone.getDefault(), DateTimeZone.forID((String) null));\n+        \n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n         assertEquals(\"Europe/London\", zone.getID());\n         \n-        zone = DateTimeZone.getInstance(\"UTC\");\n+        zone = DateTimeZone.forID(\"UTC\");\n         assertSame(DateTimeZone.UTC, zone);\n         \n-        zone = DateTimeZone.getInstance(\"+00:00\");\n+        zone = DateTimeZone.forID(\"+00:00\");\n         assertSame(DateTimeZone.UTC, zone);\n         \n-        zone = DateTimeZone.getInstance(\"+00\");\n+        zone = DateTimeZone.forID(\"+00\");\n         assertSame(DateTimeZone.UTC, zone);\n         \n-        zone = DateTimeZone.getInstance(\"+01:23\");\n+        zone = DateTimeZone.forID(\"+01:23\");\n         assertEquals(\"+01:23\", zone.getID());\n         assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),\n                 zone.getOffset(TEST_TIME_SUMMER));\n         \n-        zone = DateTimeZone.getInstance(\"-02:00\");\n+        zone = DateTimeZone.forID(\"-02:00\");\n         assertEquals(\"-02:00\", zone.getID());\n         assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR),\n                 zone.getOffset(TEST_TIME_SUMMER));\n         \n         try {\n-            DateTimeZone.getInstance(\"SST\");\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            DateTimeZone.getInstance(\"Europe/UK\");\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            DateTimeZone.getInstance(\"+\");\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            DateTimeZone.getInstance(\"+0\");\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testGetInstance_int() {\n-        assertEquals(DateTimeZone.UTC, DateTimeZone.getInstance(0));\n-        assertEquals(DateTimeZone.getInstance(\"+03:00\"), DateTimeZone.getInstance(3));\n-        assertEquals(DateTimeZone.getInstance(\"-02:00\"), DateTimeZone.getInstance(-2));\n-        try {\n-            DateTimeZone.getInstance(999999);\n+            DateTimeZone.forID(\"SST\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forID(\"Europe/UK\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forID(\"+\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forID(\"+0\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForOffsetHours_int() {\n+        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHours(0));\n+        assertEquals(DateTimeZone.forID(\"+03:00\"), DateTimeZone.forOffsetHours(3));\n+        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHours(-2));\n+        try {\n+            DateTimeZone.forOffsetHours(999999);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }        \n \n     //-----------------------------------------------------------------------\n-    public void testGetInstance_int_int() {\n-        assertEquals(DateTimeZone.UTC, DateTimeZone.getInstance(0));\n-        assertEquals(DateTimeZone.getInstance(\"+03:15\"), DateTimeZone.getInstance(3, 15));\n-        assertEquals(DateTimeZone.getInstance(\"-02:00\"), DateTimeZone.getInstance(-2, 0));\n-        assertEquals(DateTimeZone.getInstance(\"-02:30\"), DateTimeZone.getInstance(-2, 30));\n-        try {\n-            DateTimeZone.getInstance(2, 60);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            DateTimeZone.getInstance(-2, 60);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            DateTimeZone.getInstance(2, -1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            DateTimeZone.getInstance(-2, -1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            DateTimeZone.getInstance(999999, 0);\n+    public void testForOffsetHoursMinutes_int_int() {\n+        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n+        assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));\n+        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n+        assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));\n+        try {\n+            DateTimeZone.forOffsetHoursMinutes(2, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forOffsetHoursMinutes(2, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forOffsetHoursMinutes(-2, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forOffsetHoursMinutes(999999, 0);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }        \n \n     //-----------------------------------------------------------------------\n-    public void testGetInstance_TimeZone() {\n-        assertEquals(DateTimeZone.getDefault(), DateTimeZone.getInstance((TimeZone) null));\n-        \n-        DateTimeZone zone = DateTimeZone.getInstance(TimeZone.getTimeZone(\"Europe/London\"));\n+    public void testForOffsetMillis_int() {\n+        assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0));\n+        assertEquals(DateTimeZone.forID(\"+03:00\"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000));\n+        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000));\n+        assertEquals(DateTimeZone.forID(\"+04:45:17.045\"),\n+                DateTimeZone.forOffsetMillis(\n+                        4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45));\n+    }        \n+\n+    //-----------------------------------------------------------------------\n+    public void testForTimeZone_TimeZone() {\n+        assertEquals(DateTimeZone.getDefault(), DateTimeZone.forTimeZone((TimeZone) null));\n+        \n+        DateTimeZone zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"Europe/London\"));\n         assertEquals(\"Europe/London\", zone.getID());\n-        assertSame(DateTimeZone.UTC, DateTimeZone.getInstance(TimeZone.getTimeZone(\"UTC\")));\n-        \n-        zone = DateTimeZone.getInstance(TimeZone.getTimeZone(\"+00:00\"));\n+        assertSame(DateTimeZone.UTC, DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"UTC\")));\n+        \n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"+00:00\"));\n         assertSame(DateTimeZone.UTC, zone);\n         \n-        zone = DateTimeZone.getInstance(TimeZone.getTimeZone(\"GMT+00:00\"));\n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+00:00\"));\n         assertSame(DateTimeZone.UTC, zone);\n         \n-        zone = DateTimeZone.getInstance(TimeZone.getTimeZone(\"GMT+00:00\"));\n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+00:00\"));\n         assertSame(DateTimeZone.UTC, zone);\n         \n-        zone = DateTimeZone.getInstance(TimeZone.getTimeZone(\"GMT+00\"));\n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+00\"));\n         assertSame(DateTimeZone.UTC, zone);\n         \n-        zone = DateTimeZone.getInstance(TimeZone.getTimeZone(\"GMT+01:23\"));\n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+01:23\"));\n         assertEquals(\"+01:23\", zone.getID());\n         assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),\n                 zone.getOffset(TEST_TIME_SUMMER));\n         \n-        zone = DateTimeZone.getInstance(TimeZone.getTimeZone(\"GMT-02:00\"));\n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT-02:00\"));\n         assertEquals(\"-02:00\", zone.getID());\n         assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER));\n         \n-        zone = DateTimeZone.getInstance(TimeZone.getTimeZone(\"EST\"));\n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"EST\"));\n         assertEquals(\"America/New_York\", zone.getID());\n     }\n \n \n     //-----------------------------------------------------------------------\n     public void testGetID() {\n-        DateTimeZone zone = DateTimeZone.getInstance(\"Europe/Paris\");\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n         assertEquals(\"Europe/Paris\", zone.getID());\n     }\n \n     public void testGetNameKey() {\n-        DateTimeZone zone = DateTimeZone.getInstance(\"Europe/London\");\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n         assertEquals(\"BST\", zone.getNameKey(TEST_TIME_SUMMER));\n         assertEquals(\"GMT\", zone.getNameKey(TEST_TIME_WINTER));\n     }\n \n     public void testGetShortName() {\n-        DateTimeZone zone = DateTimeZone.getInstance(\"Europe/London\");\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n         assertEquals(\"BST\", zone.getShortName(TEST_TIME_SUMMER));\n         assertEquals(\"GMT\", zone.getShortName(TEST_TIME_WINTER));\n         assertEquals(\"BST\", zone.getShortName(TEST_TIME_SUMMER, Locale.ENGLISH));\n     }\n     \n     public void testGetName() {\n-        DateTimeZone zone = DateTimeZone.getInstance(\"Europe/London\");\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/London\");\n         assertEquals(\"British Summer Time\", zone.getName(TEST_TIME_SUMMER));\n         assertEquals(\"Greenwich Mean Time\", zone.getName(TEST_TIME_WINTER));\n         assertEquals(\"British Summer Time\", zone.getName(TEST_TIME_SUMMER, Locale.ENGLISH));\n \n     //-----------------------------------------------------------------------\n     public void testGetOffset() {\n-        DateTimeZone zone = DateTimeZone.getInstance(\"Europe/Paris\");\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n         assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));\n         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));\n         \n     }\n \n     public void testGetOffsetFixed() {\n-        DateTimeZone zone = DateTimeZone.getInstance(\"+01:00\");\n+        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));\n         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));\n         \n \n     //-----------------------------------------------------------------------\n     public void testIsFixed() {\n-        DateTimeZone zone = DateTimeZone.getInstance(\"Europe/Paris\");\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n         assertEquals(false, zone.isFixed());\n         assertEquals(true, DateTimeZone.UTC.isFixed());\n     }\n \n     //-----------------------------------------------------------------------\n     public void testTransitionFixed() {\n-        DateTimeZone zone = DateTimeZone.getInstance(\"+01:00\");\n+        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n         assertEquals(TEST_TIME_SUMMER, zone.nextTransition(TEST_TIME_SUMMER));\n         assertEquals(TEST_TIME_WINTER, zone.nextTransition(TEST_TIME_WINTER));\n         assertEquals(TEST_TIME_SUMMER, zone.previousTransition(TEST_TIME_SUMMER));\n \n     //-----------------------------------------------------------------------\n     public void testToTimeZone() {\n-        DateTimeZone zone = DateTimeZone.getInstance(\"Europe/Paris\");\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n         TimeZone tz = zone.toTimeZone();\n         assertEquals(\"Europe/Paris\", tz.getID());\n     }\n \n     //-----------------------------------------------------------------------\n     public void testEqualsHashCode() {\n-        DateTimeZone zone1 = DateTimeZone.getInstance(\"Europe/Paris\");\n-        DateTimeZone zone2 = DateTimeZone.getInstance(\"Europe/Paris\");\n+        DateTimeZone zone1 = DateTimeZone.forID(\"Europe/Paris\");\n+        DateTimeZone zone2 = DateTimeZone.forID(\"Europe/Paris\");\n         assertEquals(true, zone1.equals(zone1));\n         assertEquals(true, zone1.equals(zone2));\n         assertEquals(true, zone2.equals(zone1));\n         assertEquals(true, zone2.equals(zone2));\n         assertEquals(true, zone1.hashCode() == zone2.hashCode());\n         \n-        DateTimeZone zone3 = DateTimeZone.getInstance(\"Europe/London\");\n+        DateTimeZone zone3 = DateTimeZone.forID(\"Europe/London\");\n         assertEquals(true, zone3.equals(zone3));\n         assertEquals(false, zone1.equals(zone3));\n         assertEquals(false, zone2.equals(zone3));\n         assertEquals(false, zone1.hashCode() == zone3.hashCode());\n         assertEquals(true, zone3.hashCode() == zone3.hashCode());\n         \n-        DateTimeZone zone4 = DateTimeZone.getInstance(\"+01:00\");\n+        DateTimeZone zone4 = DateTimeZone.forID(\"+01:00\");\n         assertEquals(true, zone4.equals(zone4));\n         assertEquals(false, zone1.equals(zone4));\n         assertEquals(false, zone2.equals(zone4));\n         assertEquals(false, zone1.hashCode() == zone4.hashCode());\n         assertEquals(true, zone4.hashCode() == zone4.hashCode());\n         \n-        DateTimeZone zone5 = DateTimeZone.getInstance(\"+02:00\");\n+        DateTimeZone zone5 = DateTimeZone.forID(\"+02:00\");\n         assertEquals(true, zone5.equals(zone5));\n         assertEquals(false, zone1.equals(zone5));\n         assertEquals(false, zone2.equals(zone5));\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n-        DateTimeZone zone = DateTimeZone.getInstance(\"Europe/Paris\");\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n         assertEquals(\"Europe/Paris\", zone.toString());\n         assertEquals(\"UTC\", DateTimeZone.UTC.toString());\n     }\n \n     //-----------------------------------------------------------------------\n     public void testSerialization1() throws Exception {\n-        DateTimeZone zone = DateTimeZone.getInstance(\"Europe/Paris\");\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n \n     //-----------------------------------------------------------------------\n     public void testSerialization2() throws Exception {\n-        DateTimeZone zone = DateTimeZone.getInstance(\"+01:00\");\n+        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java\n  */\n public class TestInstant_Constructors extends TestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     // 1970-06-09\n     private long TEST_TIME_NOW =\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestParseISO.java\n+++ b/JodaTime/src/test/org/joda/time/TestParseISO.java\n                 String str = \"0\" + Math.abs(zone) + \":00\";\n                 str = str.substring(str.length() - 4);\n                 str = (zone < 0 ? \"-\" : \"+\") + str;\n-                z = DateTimeZone.getInstance(str);\n+                z = DateTimeZone.forID(str);\n             }\n             assertEquals(msg + \"\\nZone: \", z, dt.getZone());\n         }\n--- a/JodaTime/src/test/org/joda/time/TestPeriodType.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriodType.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java\n  */\n public class TestTimeOfDay_Basics extends TestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final int OFFSET = 1;\n     private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);\n     private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n  */\n public class TestTimeOfDay_Constructors extends TestCase {\n \n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final int OFFSET = 1;\n     \n     private long TEST_TIME_NOW =\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Properties.java\n  */\n public class TestTimeOfDay_Properties extends TestCase {\n \n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     \n     private long TEST_TIME_NOW =\n             10L * DateTimeConstants.MILLIS_PER_HOUR\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n  */\n public class TestYearMonthDay_Basics extends TestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final int OFFSET = 1;\n     private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);\n     private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java\n  */\n public class TestYearMonthDay_Constructors extends TestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();\n     private static final Chronology ISO_UTC = Chronology.getISOUTC();\n     private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java\n  */\n public class TestYearMonthDay_Properties extends TestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n--- a/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java\n \n     private static int SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n     \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();\n     private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();\n     private static final Chronology JULIAN_UTC = Chronology.getJulianUTC();\n--- a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n \n     private static int SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();\n     private static final Chronology JULIAN_UTC = Chronology.getJulianUTC();\n     private static final Chronology ISO_UTC = Chronology.getISOUTC();\n--- a/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java\n  */\n public class TestGJChronology extends TestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java\n  */\n public class TestGregorianChronology extends TestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java\n  */\n public class TestISOChronology extends TestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java\n  */\n public class TestJulianChronology extends TestCase {\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java\n public class TestCalendarConverter extends TestCase {\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone MOSCOW = DateTimeZone.getInstance(\"Europe/Moscow\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone MOSCOW = DateTimeZone.forID(\"Europe/Moscow\");\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n     \n--- a/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java\n public class TestDateConverter extends TestCase {\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology ISO;\n     private static Chronology JULIAN;\n--- a/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n public class TestLongConverter extends TestCase {\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n--- a/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n             + 40L;\n             \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology ISO;\n     private static Chronology JULIAN;\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n-        DateTimeZone.setDefault(DateTimeZone.getInstance(\"Europe/London\"));\n+        DateTimeZone.setDefault(DateTimeZone.forID(\"Europe/London\"));\n         TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n         Locale.setDefault(Locale.UK);\n         \n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java\n public class TestReadableDurationConverter extends TestCase {\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n public class TestReadableInstantConverter extends TestCase {\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n public class TestReadableIntervalConverter extends TestCase {\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java\n public class TestReadablePartialConverter extends TestCase {\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java\n public class TestReadablePeriodConverter extends TestCase {\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static Chronology JULIAN;\n     private static Chronology ISO;\n--- a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n  */\n public class TestStringConverter extends TestCase {\n \n-    private static final DateTimeZone ONE_HOUR = DateTimeZone.getInstance(1);\n-    private static final DateTimeZone SIX = DateTimeZone.getInstance(6);\n-    private static final DateTimeZone SEVEN = DateTimeZone.getInstance(7);\n-    private static final DateTimeZone EIGHT = DateTimeZone.getInstance(8);\n+    private static final DateTimeZone ONE_HOUR = DateTimeZone.forOffsetHours(1);\n+    private static final DateTimeZone SIX = DateTimeZone.forOffsetHours(6);\n+    private static final DateTimeZone SEVEN = DateTimeZone.forOffsetHours(7);\n+    private static final DateTimeZone EIGHT = DateTimeZone.forOffsetHours(8);\n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final Chronology ISO_EIGHT = ISOChronology.getInstance(EIGHT);\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n public class TestDateTimeFormat extends TestCase {\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n-    private static final DateTimeZone NEWYORK = DateTimeZone.getInstance(\"America/New_York\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java\n public class TestISODateTimeFormat extends TestCase {\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java\n     private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n     private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java\n     private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n     private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java\n     private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n     private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n     private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n     private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n \n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/format/TestTextFields.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestTextFields.java\n \n     private static final DateTimeZone[] ZONES = {\n         DateTimeZone.UTC,\n-        DateTimeZone.getInstance(\"Europe/Paris\"),\n-        DateTimeZone.getInstance(\"Europe/London\"),\n-        DateTimeZone.getInstance(\"Asia/Tokyo\"),\n-        DateTimeZone.getInstance(\"America/Los_Angeles\"),\n+        DateTimeZone.forID(\"Europe/Paris\"),\n+        DateTimeZone.forID(\"Europe/London\"),\n+        DateTimeZone.forID(\"Asia/Tokyo\"),\n+        DateTimeZone.forID(\"America/Los_Angeles\"),\n     };\n \n     private static final String[] MONTHS = {", "timestamp": 1108250624, "metainfo": ""}