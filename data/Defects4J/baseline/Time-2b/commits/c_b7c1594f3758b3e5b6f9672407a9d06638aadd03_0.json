{"sha": "b7c1594f3758b3e5b6f9672407a9d06638aadd03", "log": "Two digit year parse can only be lenient if it is not followed by another numeric token   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java\n             case 'y': // year (number)\n             case 'Y': // year of era (number)\n                 if (tokenLen == 2) {\n+                    boolean lenientParse = true;\n+\n+                    // Peek ahead to next token.\n+                    if (i + 1 < length) {\n+                        indexRef[0]++;\n+                        if (isNumericToken(parseToken(pattern, indexRef))) {\n+                            // If next token is a number, cannot support\n+                            // lenient parse, because it will consume digits\n+                            // that it should not.\n+                            lenientParse = false;\n+                        }\n+                        indexRef[0]--;\n+                    }\n+\n                     // Use pivots which are compatible with SimpleDateFormat.\n                     DateTimeFieldType type;\n                     switch (c) {\n                     case 'x':\n-                        builder.appendTwoDigitWeekyear(new DateTime().getWeekyear() - 30, true);\n+                        builder.appendTwoDigitWeekyear\n+                            (new DateTime().getWeekyear() - 30, lenientParse);\n                         break;\n                     case 'y':\n                     case 'Y':\n                     default:\n-                        builder.appendTwoDigitYear(new DateTime().getYear() - 30, true);\n+                        builder.appendTwoDigitYear(new DateTime().getYear() - 30, lenientParse);\n                         break;\n                     }\n                 } else {\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n         try {\n             f.parseDateTime(\"-\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n \n         try {\n             f.parseDateTime(\"+\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n \n         // Added tests for pivot year setting\n         f = f.withPivotYear(new Integer(2050));\n         try {\n             f.parseDateTime(\"-\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n \n         try {\n             f.parseDateTime(\"+\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testFormat_year_twoDigit() {\n         try {\n             f.parseDateTime(\"-\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n \n         try {\n             f.parseDateTime(\"+\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n \n         // Added tests for pivot year setting\n         f = f.withPivotYear(new Integer(2050));\n         try {\n             f.parseDateTime(\"5\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n         try {\n             f.parseDateTime(\"005\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n         try {\n             f.parseDateTime(\"+50\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n         try {\n             f.parseDateTime(\"-50\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n \n         // Added tests to ensure two digit parsing is lenient for DateTimeFormat\n         f = DateTimeFormat.forPattern(\"yy\").withLocale(Locale.UK);\n         try {\n             f.parseDateTime(\"-\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n \n         try {\n             f.parseDateTime(\"+\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testFormat_year_long() {\n         try {\n             f.parseDateTime(\"-\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n \n         try {\n             f.parseDateTime(\"+\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n \n         // Added tests for pivot year setting\n         f = f.withPivotYear(new Integer(2050));\n         try {\n             f.parseDateTime(\"5\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n         try {\n             f.parseDateTime(\"005\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n         try {\n             f.parseDateTime(\"+50\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n         try {\n             f.parseDateTime(\"-50\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n \n         // Added tests to ensure two digit parsing is lenient for DateTimeFormat\n         f = DateTimeFormat.forPattern(\"xx\").withLocale(Locale.UK);\n         try {\n             f.parseDateTime(\"-\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n \n         try {\n             f.parseDateTime(\"+\");\n             fail();\n-        } catch (IllegalArgumentException e) { }\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\"2004-06-09 10.20.30\", f.print(dt));\n     }\n \n+    public void testFormat_shortBasicParse() {\n+        // Tests special two digit parse to make sure it properly switches\n+        // between lenient and strict parsing.\n+\n+        DateTime dt = new DateTime(2004, 3, 9, 0, 0, 0, 0);\n+\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyMMdd\");\n+        assertEquals(dt, f.parseDateTime(\"040309\"));\n+        try {\n+            assertEquals(dt, f.parseDateTime(\"20040309\"));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        f = DateTimeFormat.forPattern(\"yy/MM/dd\");\n+        assertEquals(dt, f.parseDateTime(\"04/03/09\"));\n+        assertEquals(dt, f.parseDateTime(\"2004/03/09\"));\n+    }\n+\n }", "timestamp": 1113802643, "metainfo": ""}