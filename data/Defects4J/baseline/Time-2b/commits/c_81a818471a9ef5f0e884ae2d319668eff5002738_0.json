{"sha": "81a818471a9ef5f0e884ae2d319668eff5002738", "log": "DurationField is incorrect in complex DateTimeField instances  Fixes #92", "commit": "\n--- a/src/main/java/org/joda/time/chrono/BasicChronology.java\n+++ b/src/main/java/org/joda/time/chrono/BasicChronology.java\n             fields.yearOfEra, 99);\n         fields.centuryOfEra = new DividedDateTimeField(\n             field, DateTimeFieldType.centuryOfEra(), 100);\n+        fields.centuries = fields.centuryOfEra.getDurationField();\n         \n         field = new RemainderDateTimeField(\n             (DividedDateTimeField) fields.centuryOfEra);\n         fields.weekOfWeekyear = new BasicWeekOfWeekyearDateTimeField(this, fields.weeks);\n         \n         field = new RemainderDateTimeField(\n-            fields.weekyear, DateTimeFieldType.weekyearOfCentury(), 100);\n+            fields.weekyear, fields.centuries, DateTimeFieldType.weekyearOfCentury(), 100);\n         fields.weekyearOfCentury = new OffsetDateTimeField(\n             field, DateTimeFieldType.weekyearOfCentury(), 1);\n         \n         // The remaining (imprecise) durations are available from the newly\n         // created datetime fields.\n-\n         fields.years = fields.year.getDurationField();\n-        fields.centuries = fields.centuryOfEra.getDurationField();\n         fields.months = fields.monthOfYear.getDurationField();\n         fields.weekyears = fields.weekyear.getDurationField();\n     }\n--- a/src/main/java/org/joda/time/chrono/BuddhistChronology.java\n+++ b/src/main/java/org/joda/time/chrono/BuddhistChronology.java\n import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationFieldType;\n import org.joda.time.field.DelegatedDateTimeField;\n import org.joda.time.field.DividedDateTimeField;\n import org.joda.time.field.OffsetDateTimeField;\n import org.joda.time.field.RemainderDateTimeField;\n import org.joda.time.field.SkipUndoDateTimeField;\n+import org.joda.time.field.UnsupportedDurationField;\n \n /**\n  * A chronology that matches the BuddhistCalendar class supplied by Sun.\n \n     protected void assemble(Fields fields) {\n         if (getParam() == null) {\n+            // force init as used below\n+            fields.eras = UnsupportedDurationField.getInstance(DurationFieldType.eras());\n+            \n             // julian chrono removed zero, but we need to put it back\n             DateTimeField field = fields.year;\n             fields.year = new OffsetDateTimeField(\n             // one era, so yearOfEra is the same\n             field = fields.yearOfEra;\n             fields.yearOfEra = new DelegatedDateTimeField(\n-                fields.year, DateTimeFieldType.yearOfEra());\n+                fields.year, fields.eras, DateTimeFieldType.yearOfEra());\n             \n             // julian chrono removed zero, but we need to put it back\n             field = fields.weekyear;\n             \n             field = new OffsetDateTimeField(fields.yearOfEra, 99);\n             fields.centuryOfEra = new DividedDateTimeField(\n-                field, DateTimeFieldType.centuryOfEra(), 100);\n+                field, fields.eras, DateTimeFieldType.centuryOfEra(), 100);\n+            fields.centuries = fields.centuryOfEra.getDurationField();\n             \n             field = new RemainderDateTimeField(\n                 (DividedDateTimeField) fields.centuryOfEra);\n                 field, DateTimeFieldType.yearOfCentury(), 1);\n             \n             field = new RemainderDateTimeField(\n-                fields.weekyear, DateTimeFieldType.weekyearOfCentury(), 100);\n+                fields.weekyear, fields.centuries, DateTimeFieldType.weekyearOfCentury(), 100);\n             fields.weekyearOfCentury = new OffsetDateTimeField(\n                 field, DateTimeFieldType.weekyearOfCentury(), 1);\n             \n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n             fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);\n         }\n \n-        // DayOfYear and weekOfWeekyear require special handling since cutover\n-        // year has fewer days and weeks. Extend the cutover to the start of\n-        // the next year or weekyear. This keeps the sequence unbroken during\n-        // the cutover year.\n-\n-        {\n-            long cutover = gregorian.year().roundCeiling(iCutoverMillis);\n-            fields.dayOfYear = new CutoverField(\n-                julian.dayOfYear(), fields.dayOfYear, cutover);\n-        }\n-\n-        {\n-            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);\n-            fields.weekOfWeekyear = new CutoverField(\n-                julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n-        }\n-\n         // These fields are special because they have imprecise durations. The\n         // family of addition methods need special attention. Override affected\n         // duration fields as well.\n             fields.years = fields.year.getDurationField();\n             fields.yearOfEra = new ImpreciseCutoverField(\n                 julian.yearOfEra(), fields.yearOfEra, fields.years, iCutoverMillis);\n-            fields.yearOfCentury = new ImpreciseCutoverField(\n-                julian.yearOfCentury(), fields.yearOfCentury, fields.years, iCutoverMillis);\n             \n             fields.centuryOfEra = new ImpreciseCutoverField(\n                 julian.centuryOfEra(), fields.centuryOfEra, iCutoverMillis);\n             fields.centuries = fields.centuryOfEra.getDurationField();\n             \n+            fields.yearOfCentury = new ImpreciseCutoverField(\n+                julian.yearOfCentury(), fields.yearOfCentury, fields.years, fields.centuries, iCutoverMillis);\n+            \n             fields.monthOfYear = new ImpreciseCutoverField(\n-                julian.monthOfYear(), fields.monthOfYear, iCutoverMillis);\n+                julian.monthOfYear(), fields.monthOfYear, null, fields.years, iCutoverMillis);\n             fields.months = fields.monthOfYear.getDurationField();\n             \n             fields.weekyear = new ImpreciseCutoverField(\n                 julian.weekyear(), fields.weekyear, null, iCutoverMillis, true);\n+            fields.weekyears = fields.weekyear.getDurationField();\n             fields.weekyearOfCentury = new ImpreciseCutoverField(\n-                julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis);\n-            fields.weekyears = fields.weekyear.getDurationField();\n+                julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, fields.centuries, iCutoverMillis);\n+        }\n+\n+        // DayOfYear and weekOfWeekyear require special handling since cutover\n+        // year has fewer days and weeks. Extend the cutover to the start of\n+        // the next year or weekyear. This keeps the sequence unbroken during\n+        // the cutover year.\n+\n+        {\n+            long cutover = gregorian.year().roundCeiling(iCutoverMillis);\n+            fields.dayOfYear = new CutoverField(\n+                julian.dayOfYear(), fields.dayOfYear, fields.years, cutover, false);\n+        }\n+\n+        {\n+            long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);\n+            fields.weekOfWeekyear = new CutoverField(\n+                julian.weekOfWeekyear(), fields.weekOfWeekyear, fields.weekyears, cutover, true);\n         }\n \n         // These fields require basic cutover support, except they must link to\n          */\n         CutoverField(DateTimeField julianField, DateTimeField gregorianField,\n                      long cutoverMillis, boolean convertByWeekyear) {\n+            this(julianField, gregorianField, null, cutoverMillis, convertByWeekyear);\n+        }\n+\n+        /**\n+         * @param julianField field from the chronology used before the cutover instant\n+         * @param gregorianField field from the chronology used at and after the cutover\n+         * @param rangeField  the range field\n+         * @param cutoverMillis  the millis of the cutover\n+         * @param convertByWeekyear\n+         */\n+        CutoverField(DateTimeField julianField, DateTimeField gregorianField,\n+                     DurationField rangeField, long cutoverMillis, boolean convertByWeekyear) {\n             super(gregorianField.getType());\n             iJulianField = julianField;\n             iGregorianField = gregorianField;\n             // Although average length of Julian and Gregorian years differ,\n             // use the Gregorian duration field because it is more accurate.\n             iDurationField = gregorianField.getDurationField();\n-\n-            DurationField rangeField = gregorianField.getRangeDurationField();\n             if (rangeField == null) {\n-                rangeField = julianField.getRangeDurationField();\n+                rangeField = gregorianField.getRangeDurationField();\n+                if (rangeField == null) {\n+                    rangeField = julianField.getRangeDurationField();\n+                }\n             }\n             iRangeDurationField = rangeField;\n         }\n                               DurationField durationField, long cutoverMillis)\n         {\n             this(julianField, gregorianField, durationField, cutoverMillis, false);\n+        }\n+\n+        /**\n+         * Uses shared duration fields rather than creating a new one.\n+         *\n+         * @param durationField shared duration field\n+         */\n+        ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n+                              DurationField durationField, DurationField rangeDurationField, long cutoverMillis)\n+        {\n+            this(julianField, gregorianField, durationField, cutoverMillis, false);\n+            iRangeDurationField = rangeDurationField;\n         }\n \n         /**\n--- a/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java\n \n import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n import org.joda.time.ReadablePartial;\n import org.joda.time.field.DecoratedDateTimeField;\n import org.joda.time.field.FieldUtils;\n     GJYearOfEraDateTimeField(DateTimeField yearField, BasicChronology chronology) {\n         super(yearField, DateTimeFieldType.yearOfEra());\n         iChronology = chronology;\n+    }\n+\n+    @Override\n+    public DurationField getRangeDurationField() {\n+        return iChronology.eras();\n     }\n \n     public int get(long instant) {\n--- a/src/main/java/org/joda/time/chrono/ISOChronology.java\n+++ b/src/main/java/org/joda/time/chrono/ISOChronology.java\n             // Use zero based century and year of century.\n             fields.centuryOfEra = new DividedDateTimeField(\n                 ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra(), 100);\n+            fields.centuries = fields.centuryOfEra.getDurationField();\n+            \n             fields.yearOfCentury = new RemainderDateTimeField(\n                 (DividedDateTimeField) fields.centuryOfEra, DateTimeFieldType.yearOfCentury());\n             fields.weekyearOfCentury = new RemainderDateTimeField(\n-                (DividedDateTimeField) fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury());\n-\n-            fields.centuries = fields.centuryOfEra.getDurationField();\n+                (DividedDateTimeField) fields.centuryOfEra, fields.weekyears, DateTimeFieldType.weekyearOfCentury());\n         }\n     }\n \n--- a/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java\n+++ b/src/main/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java\n \n import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DurationField;\n import org.joda.time.ReadablePartial;\n import org.joda.time.field.DecoratedDateTimeField;\n import org.joda.time.field.FieldUtils;\n      */\n     private ISOYearOfEraDateTimeField() {\n         super(GregorianChronology.getInstanceUTC().year(), DateTimeFieldType.yearOfEra());\n+    }\n+\n+    @Override\n+    public DurationField getRangeDurationField() {\n+        return GregorianChronology.getInstanceUTC().eras();\n     }\n \n     public int get(long instant) {\n--- a/src/main/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/src/main/java/org/joda/time/chrono/ZonedChronology.java\n         private long addOffset(long instant) {\n             return iZone.convertUTCToLocal(instant);\n         }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            } else if (obj instanceof ZonedDurationField) {\n+                ZonedDurationField other = (ZonedDurationField) obj;\n+                return iField.equals(other.iField) &&\n+                       iZone.equals(other.iZone);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return iField.hashCode() ^ iZone.hashCode();\n+        }\n     }\n \n     /**\n             }\n             return offset;\n         }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            } else if (obj instanceof ZonedDateTimeField) {\n+                ZonedDateTimeField other = (ZonedDateTimeField) obj;\n+                return iField.equals(other.iField) &&\n+                       iZone.equals(other.iZone) &&\n+                       iDurationField.equals(other.iDurationField) &&\n+                       iRangeDurationField.equals(other.iRangeDurationField);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return iField.hashCode() ^ iZone.hashCode();\n+        }\n     }\n \n }\n--- a/src/main/java/org/joda/time/field/DelegatedDateTimeField.java\n+++ b/src/main/java/org/joda/time/field/DelegatedDateTimeField.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     /** Serialization version */\n     private static final long serialVersionUID = -4730164440214502503L;\n \n-    /** The DateTimeField being wrapped */\n+    /** The DateTimeField being wrapped. */\n     private final DateTimeField iField;\n-    /** The override field type */\n+    /** The range duration. */\n+    private final DurationField iRangeDurationField;\n+    /** The override field type. */\n     private final DateTimeFieldType iType;\n \n     /**\n      * @param type  the field type override\n      */\n     public DelegatedDateTimeField(DateTimeField field, DateTimeFieldType type) {\n+        this(field, null, type);\n+    }\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param field  the field being decorated\n+     * @param rangeField  the range field, null to derive\n+     * @param type  the field type override\n+     */\n+    public DelegatedDateTimeField(DateTimeField field, DurationField rangeField, DateTimeFieldType type) {\n         super();\n         if (field == null) {\n             throw new IllegalArgumentException(\"The field must not be null\");\n         }\n         iField = field;\n+        iRangeDurationField = rangeField;\n         iType = (type == null ? field.getType() : type);\n     }\n \n     }\n \n     public DurationField getRangeDurationField() {\n+        if (iRangeDurationField != null) {\n+            return iRangeDurationField;\n+        }\n         return iField.getRangeDurationField();\n     }\n \n--- a/src/main/java/org/joda/time/field/DividedDateTimeField.java\n+++ b/src/main/java/org/joda/time/field/DividedDateTimeField.java\n     // Shared with RemainderDateTimeField.\n     final int iDivisor;\n     final DurationField iDurationField;\n+    final DurationField iRangeDurationField;\n \n     private final int iMin;\n     private final int iMax;\n      */\n     public DividedDateTimeField(DateTimeField field,\n                                 DateTimeFieldType type, int divisor) {\n+        this(field, field.getRangeDurationField(), type, divisor);\n+    }\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param field  the field to wrap, like \"year()\".\n+     * @param rangeField  the range field, null to derive\n+     * @param type  the field type this field will actually use\n+     * @param divisor  divisor, such as 100 years in a century\n+     * @throws IllegalArgumentException if divisor is less than two\n+     */\n+    public DividedDateTimeField(DateTimeField field, DurationField rangeField,\n+                                DateTimeFieldType type, int divisor) {\n         super(field, type);\n-                \n         if (divisor < 2) {\n             throw new IllegalArgumentException(\"The divisor must be at least 2\");\n         }\n-\n         DurationField unitField = field.getDurationField();\n         if (unitField == null) {\n             iDurationField = null;\n             iDurationField = new ScaledDurationField(\n                 unitField, type.getDurationType(), divisor);\n         }\n-\n+        iRangeDurationField = rangeField;\n         iDivisor = divisor;\n-\n         int i = field.getMinimumValue();\n         int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);\n-\n         int j = field.getMaximumValue();\n         int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);\n-\n         iMin = min;\n         iMax = max;\n     }\n      * @param type  the field type this field will actually use\n      */\n     public DividedDateTimeField(RemainderDateTimeField remainderField, DateTimeFieldType type) {\n+        this(remainderField, null, type);\n+    }\n+\n+    /**\n+     * Construct a DividedDateTimeField that compliments the given\n+     * RemainderDateTimeField.\n+     *\n+     * @param remainderField  complimentary remainder field, like \"yearOfCentury()\".\n+     * @param rangeField  the range field, null to derive\n+     * @param type  the field type this field will actually use\n+     */\n+    public DividedDateTimeField(RemainderDateTimeField remainderField, DurationField rangeField, DateTimeFieldType type) {\n         super(remainderField.getWrappedField(), type);\n         int divisor = iDivisor = remainderField.iDivisor;\n         iDurationField = remainderField.iRangeField;\n-\n+        iRangeDurationField = rangeField;\n         DateTimeField field = getWrappedField();\n         int i = field.getMinimumValue();\n         int min = (i >= 0) ? i / divisor : ((i + 1) / divisor - 1);\n-\n         int j = field.getMaximumValue();\n         int max = (j >= 0) ? j / divisor : ((j + 1) / divisor - 1);\n-\n         iMin = min;\n         iMax = max;\n+    }\n+\n+    @Override\n+    public DurationField getRangeDurationField() {\n+        if (iRangeDurationField != null) {\n+            return iRangeDurationField;\n+        }\n+        return super.getRangeDurationField();\n     }\n \n     /**\n--- a/src/main/java/org/joda/time/field/RemainderDateTimeField.java\n+++ b/src/main/java/org/joda/time/field/RemainderDateTimeField.java\n \n     // Shared with DividedDateTimeField.\n     final int iDivisor;\n+    final DurationField iDurationField;\n     final DurationField iRangeField;\n \n     /**\n             iRangeField = new ScaledDurationField(\n                 rangeField, type.getRangeDurationType(), divisor);\n         }\n-\n+        iDurationField = field.getDurationField();\n+        iDivisor = divisor;\n+    }\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param field  the field to wrap, like \"year()\".\n+     * @param rangeField  the range field\n+     * @param type  the field type this field actually uses\n+     * @param divisor  divisor, such as 100 years in a century\n+     * @throws IllegalArgumentException if divisor is less than two\n+     */\n+    public RemainderDateTimeField(DateTimeField field, DurationField rangeField,\n+                                  DateTimeFieldType type, int divisor) {\n+        super(field, type);\n+        if (divisor < 2) {\n+            throw new IllegalArgumentException(\"The divisor must be at least 2\");\n+        }\n+        iRangeField = rangeField;\n+        iDurationField = field.getDurationField();\n         iDivisor = divisor;\n     }\n \n      * @param type  the field type this field actually uses\n      */\n     public RemainderDateTimeField(DividedDateTimeField dividedField, DateTimeFieldType type) {\n+        this(dividedField, dividedField.getWrappedField().getDurationField(), type);\n+    }\n+\n+    /**\n+     * Construct a RemainderDateTimeField that compliments the given\n+     * DividedDateTimeField.\n+     * This constructor allows the duration field to be set.\n+     *\n+     * @param dividedField  complimentary divided field, like \"century()\".\n+     * @param durationField  the duration field\n+     * @param type  the field type this field actually uses\n+     */\n+    public RemainderDateTimeField(DividedDateTimeField dividedField, DurationField durationField, DateTimeFieldType type) {\n         super(dividedField.getWrappedField(), type);\n         iDivisor = dividedField.iDivisor;\n+        iDurationField = durationField;\n         iRangeField = dividedField.iDurationField;\n     }\n \n         return getWrappedField().set(instant, divided * iDivisor + value);\n     }\n \n+    @Override\n+    public DurationField getDurationField() {\n+        return iDurationField;\n+    }\n+\n     /**\n      * Returns a scaled version of the wrapped field's unit duration field.\n      */\n--- a/src/test/java/org/joda/time/TestDateMidnight_Properties.java\n+++ b/src/test/java/org/joda/time/TestDateMidnight_Properties.java\n         assertEquals(\"2004\", test.yearOfEra().getAsShortText());\n         assertEquals(\"2004\", test.yearOfEra().getAsShortText(Locale.FRENCH));\n         assertEquals(test.getChronology().years(), test.yearOfEra().getDurationField());\n-        assertEquals(null, test.yearOfEra().getRangeDurationField());\n+        assertEquals(test.getChronology().eras(), test.yearOfEra().getRangeDurationField());\n         assertEquals(9, test.yearOfEra().getMaximumTextLength(null));\n         assertEquals(9, test.yearOfEra().getMaximumShortTextLength(null));\n     }\n         assertEquals(\"20\", test.centuryOfEra().getAsShortText());\n         assertEquals(\"20\", test.centuryOfEra().getAsShortText(Locale.FRENCH));\n         assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField());\n-        assertEquals(null, test.centuryOfEra().getRangeDurationField());\n+        assertEquals(test.getChronology().eras(), test.centuryOfEra().getRangeDurationField());\n         assertEquals(7, test.centuryOfEra().getMaximumTextLength(null));\n         assertEquals(7, test.centuryOfEra().getMaximumShortTextLength(null));\n     }\n--- a/src/test/java/org/joda/time/TestDateTime_Properties.java\n+++ b/src/test/java/org/joda/time/TestDateTime_Properties.java\n         assertEquals(\"2004\", test.yearOfEra().getAsShortText());\n         assertEquals(\"2004\", test.yearOfEra().getAsShortText(Locale.FRENCH));\n         assertEquals(test.getChronology().years(), test.yearOfEra().getDurationField());\n-        assertEquals(null, test.yearOfEra().getRangeDurationField());\n+        assertEquals(test.getChronology().eras(), test.yearOfEra().getRangeDurationField());\n         assertEquals(9, test.yearOfEra().getMaximumTextLength(null));\n         assertEquals(9, test.yearOfEra().getMaximumShortTextLength(null));\n     }\n         assertEquals(\"20\", test.centuryOfEra().getAsShortText());\n         assertEquals(\"20\", test.centuryOfEra().getAsShortText(Locale.FRENCH));\n         assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField());\n-        assertEquals(null, test.centuryOfEra().getRangeDurationField());\n+        assertEquals(test.getChronology().eras(), test.centuryOfEra().getRangeDurationField());\n         assertEquals(7, test.centuryOfEra().getMaximumTextLength(null));\n         assertEquals(7, test.centuryOfEra().getMaximumShortTextLength(null));\n     }\n--- a/src/test/java/org/joda/time/TestMutableDateTime_Properties.java\n+++ b/src/test/java/org/joda/time/TestMutableDateTime_Properties.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertEquals(\"2004\", test.yearOfEra().getAsShortText());\n         assertEquals(\"2004\", test.yearOfEra().getAsShortText(Locale.FRENCH));\n         assertEquals(test.getChronology().years(), test.yearOfEra().getDurationField());\n-        assertEquals(null, test.yearOfEra().getRangeDurationField());\n+        assertEquals(test.getChronology().eras(), test.yearOfEra().getRangeDurationField());\n         assertEquals(9, test.yearOfEra().getMaximumTextLength(null));\n         assertEquals(9, test.yearOfEra().getMaximumShortTextLength(null));\n     }\n         assertEquals(\"20\", test.centuryOfEra().getAsShortText());\n         assertEquals(\"20\", test.centuryOfEra().getAsShortText(Locale.FRENCH));\n         assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField());\n-        assertEquals(null, test.centuryOfEra().getRangeDurationField());\n+        assertEquals(test.getChronology().eras(), test.centuryOfEra().getRangeDurationField());\n         assertEquals(7, test.centuryOfEra().getMaximumTextLength(null));\n         assertEquals(7, test.centuryOfEra().getMaximumShortTextLength(null));\n     }\n--- a/src/test/java/org/joda/time/chrono/TestBuddhistChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestBuddhistChronology.java\n         assertEquals(true, buddhist.dayOfYear().isSupported());\n         assertEquals(true, buddhist.dayOfMonth().isSupported());\n         assertEquals(true, buddhist.dayOfWeek().isSupported());\n+        \n+        assertEquals(buddhist.eras(), buddhist.era().getDurationField());\n+        assertEquals(buddhist.centuries(), buddhist.centuryOfEra().getDurationField());\n+        assertEquals(buddhist.years(), buddhist.yearOfCentury().getDurationField());\n+        assertEquals(buddhist.years(), buddhist.yearOfEra().getDurationField());\n+        assertEquals(buddhist.years(), buddhist.year().getDurationField());\n+        assertEquals(buddhist.months(), buddhist.monthOfYear().getDurationField());\n+        assertEquals(buddhist.weekyears(), buddhist.weekyearOfCentury().getDurationField());\n+        assertEquals(buddhist.weekyears(), buddhist.weekyear().getDurationField());\n+        assertEquals(buddhist.weeks(), buddhist.weekOfWeekyear().getDurationField());\n+        assertEquals(buddhist.days(), buddhist.dayOfYear().getDurationField());\n+        assertEquals(buddhist.days(), buddhist.dayOfMonth().getDurationField());\n+        assertEquals(buddhist.days(), buddhist.dayOfWeek().getDurationField());\n+        \n+        assertEquals(null, buddhist.era().getRangeDurationField());\n+        assertEquals(buddhist.eras(), buddhist.centuryOfEra().getRangeDurationField());\n+        assertEquals(buddhist.centuries(), buddhist.yearOfCentury().getRangeDurationField());\n+        assertEquals(buddhist.eras(), buddhist.yearOfEra().getRangeDurationField());\n+        assertEquals(null, buddhist.year().getRangeDurationField());\n+        assertEquals(buddhist.years(), buddhist.monthOfYear().getRangeDurationField());\n+        assertEquals(buddhist.centuries(), buddhist.weekyearOfCentury().getRangeDurationField());\n+        assertEquals(null, buddhist.weekyear().getRangeDurationField());\n+        assertEquals(buddhist.weekyears(), buddhist.weekOfWeekyear().getRangeDurationField());\n+        assertEquals(buddhist.years(), buddhist.dayOfYear().getRangeDurationField());\n+        assertEquals(buddhist.months(), buddhist.dayOfMonth().getRangeDurationField());\n+        assertEquals(buddhist.weeks(), buddhist.dayOfWeek().getRangeDurationField());\n     }\n \n     public void testTimeFields() {\n--- a/src/test/java/org/joda/time/chrono/TestCopticChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestCopticChronology.java\n         assertEquals(true, coptic.dayOfYear().isSupported());\n         assertEquals(true, coptic.dayOfMonth().isSupported());\n         assertEquals(true, coptic.dayOfWeek().isSupported());\n+        \n+        assertEquals(coptic.eras(), coptic.era().getDurationField());\n+        assertEquals(coptic.centuries(), coptic.centuryOfEra().getDurationField());\n+        assertEquals(coptic.years(), coptic.yearOfCentury().getDurationField());\n+        assertEquals(coptic.years(), coptic.yearOfEra().getDurationField());\n+        assertEquals(coptic.years(), coptic.year().getDurationField());\n+        assertEquals(coptic.months(), coptic.monthOfYear().getDurationField());\n+        assertEquals(coptic.weekyears(), coptic.weekyearOfCentury().getDurationField());\n+        assertEquals(coptic.weekyears(), coptic.weekyear().getDurationField());\n+        assertEquals(coptic.weeks(), coptic.weekOfWeekyear().getDurationField());\n+        assertEquals(coptic.days(), coptic.dayOfYear().getDurationField());\n+        assertEquals(coptic.days(), coptic.dayOfMonth().getDurationField());\n+        assertEquals(coptic.days(), coptic.dayOfWeek().getDurationField());\n+        \n+        assertEquals(null, coptic.era().getRangeDurationField());\n+        assertEquals(coptic.eras(), coptic.centuryOfEra().getRangeDurationField());\n+        assertEquals(coptic.centuries(), coptic.yearOfCentury().getRangeDurationField());\n+        assertEquals(coptic.eras(), coptic.yearOfEra().getRangeDurationField());\n+        assertEquals(null, coptic.year().getRangeDurationField());\n+        assertEquals(coptic.years(), coptic.monthOfYear().getRangeDurationField());\n+        assertEquals(coptic.centuries(), coptic.weekyearOfCentury().getRangeDurationField());\n+        assertEquals(null, coptic.weekyear().getRangeDurationField());\n+        assertEquals(coptic.weekyears(), coptic.weekOfWeekyear().getRangeDurationField());\n+        assertEquals(coptic.years(), coptic.dayOfYear().getRangeDurationField());\n+        assertEquals(coptic.months(), coptic.dayOfMonth().getRangeDurationField());\n+        assertEquals(coptic.weeks(), coptic.dayOfWeek().getRangeDurationField());\n     }\n \n     public void testTimeFields() {\n--- a/src/test/java/org/joda/time/chrono/TestEthiopicChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestEthiopicChronology.java\n         assertEquals(true, ethiopic.dayOfYear().isSupported());\n         assertEquals(true, ethiopic.dayOfMonth().isSupported());\n         assertEquals(true, ethiopic.dayOfWeek().isSupported());\n+        \n+        assertEquals(ethiopic.eras(), ethiopic.era().getDurationField());\n+        assertEquals(ethiopic.centuries(), ethiopic.centuryOfEra().getDurationField());\n+        assertEquals(ethiopic.years(), ethiopic.yearOfCentury().getDurationField());\n+        assertEquals(ethiopic.years(), ethiopic.yearOfEra().getDurationField());\n+        assertEquals(ethiopic.years(), ethiopic.year().getDurationField());\n+        assertEquals(ethiopic.months(), ethiopic.monthOfYear().getDurationField());\n+        assertEquals(ethiopic.weekyears(), ethiopic.weekyearOfCentury().getDurationField());\n+        assertEquals(ethiopic.weekyears(), ethiopic.weekyear().getDurationField());\n+        assertEquals(ethiopic.weeks(), ethiopic.weekOfWeekyear().getDurationField());\n+        assertEquals(ethiopic.days(), ethiopic.dayOfYear().getDurationField());\n+        assertEquals(ethiopic.days(), ethiopic.dayOfMonth().getDurationField());\n+        assertEquals(ethiopic.days(), ethiopic.dayOfWeek().getDurationField());\n+        \n+        assertEquals(null, ethiopic.era().getRangeDurationField());\n+        assertEquals(ethiopic.eras(), ethiopic.centuryOfEra().getRangeDurationField());\n+        assertEquals(ethiopic.centuries(), ethiopic.yearOfCentury().getRangeDurationField());\n+        assertEquals(ethiopic.eras(), ethiopic.yearOfEra().getRangeDurationField());\n+        assertEquals(null, ethiopic.year().getRangeDurationField());\n+        assertEquals(ethiopic.years(), ethiopic.monthOfYear().getRangeDurationField());\n+        assertEquals(ethiopic.centuries(), ethiopic.weekyearOfCentury().getRangeDurationField());\n+        assertEquals(null, ethiopic.weekyear().getRangeDurationField());\n+        assertEquals(ethiopic.weekyears(), ethiopic.weekOfWeekyear().getRangeDurationField());\n+        assertEquals(ethiopic.years(), ethiopic.dayOfYear().getRangeDurationField());\n+        assertEquals(ethiopic.months(), ethiopic.dayOfMonth().getRangeDurationField());\n+        assertEquals(ethiopic.weeks(), ethiopic.dayOfWeek().getRangeDurationField());\n     }\n \n     public void testTimeFields() {\n--- a/src/test/java/org/joda/time/chrono/TestGJChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestGJChronology.java\n         assertEquals(true, gj.dayOfYear().isSupported());\n         assertEquals(true, gj.dayOfMonth().isSupported());\n         assertEquals(true, gj.dayOfWeek().isSupported());\n+        \n+        assertEquals(gj.eras(), gj.era().getDurationField());\n+        assertEquals(gj.centuries(), gj.centuryOfEra().getDurationField());\n+        assertEquals(gj.years(), gj.yearOfCentury().getDurationField());\n+        assertEquals(gj.years(), gj.yearOfEra().getDurationField());\n+        assertEquals(gj.years(), gj.year().getDurationField());\n+        assertEquals(gj.months(), gj.monthOfYear().getDurationField());\n+        assertEquals(gj.weekyears(), gj.weekyearOfCentury().getDurationField());\n+        assertEquals(gj.weekyears(), gj.weekyear().getDurationField());\n+        assertEquals(gj.weeks(), gj.weekOfWeekyear().getDurationField());\n+        assertEquals(gj.days(), gj.dayOfYear().getDurationField());\n+        assertEquals(gj.days(), gj.dayOfMonth().getDurationField());\n+        assertEquals(gj.days(), gj.dayOfWeek().getDurationField());\n+        \n+        assertEquals(null, gj.era().getRangeDurationField());\n+        assertEquals(gj.eras(), gj.centuryOfEra().getRangeDurationField());\n+        assertEquals(gj.centuries(), gj.yearOfCentury().getRangeDurationField());\n+        assertEquals(gj.eras(), gj.yearOfEra().getRangeDurationField());\n+        assertEquals(null, gj.year().getRangeDurationField());\n+        assertEquals(gj.years(), gj.monthOfYear().getRangeDurationField());\n+        assertEquals(gj.centuries(), gj.weekyearOfCentury().getRangeDurationField());\n+        assertEquals(null, gj.weekyear().getRangeDurationField());\n+        assertEquals(gj.weekyears(), gj.weekOfWeekyear().getRangeDurationField());\n+        assertEquals(gj.years(), gj.dayOfYear().getRangeDurationField());\n+        assertEquals(gj.months(), gj.dayOfMonth().getRangeDurationField());\n+        assertEquals(gj.weeks(), gj.dayOfWeek().getRangeDurationField());\n     }\n \n     public void testTimeFields() {\n--- a/src/test/java/org/joda/time/chrono/TestGregorianChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestGregorianChronology.java\n         assertEquals(true, greg.dayOfYear().isSupported());\n         assertEquals(true, greg.dayOfMonth().isSupported());\n         assertEquals(true, greg.dayOfWeek().isSupported());\n+        \n+        assertEquals(greg.eras(), greg.era().getDurationField());\n+        assertEquals(greg.centuries(), greg.centuryOfEra().getDurationField());\n+        assertEquals(greg.years(), greg.yearOfCentury().getDurationField());\n+        assertEquals(greg.years(), greg.yearOfEra().getDurationField());\n+        assertEquals(greg.years(), greg.year().getDurationField());\n+        assertEquals(greg.months(), greg.monthOfYear().getDurationField());\n+        assertEquals(greg.weekyears(), greg.weekyearOfCentury().getDurationField());\n+        assertEquals(greg.weekyears(), greg.weekyear().getDurationField());\n+        assertEquals(greg.weeks(), greg.weekOfWeekyear().getDurationField());\n+        assertEquals(greg.days(), greg.dayOfYear().getDurationField());\n+        assertEquals(greg.days(), greg.dayOfMonth().getDurationField());\n+        assertEquals(greg.days(), greg.dayOfWeek().getDurationField());\n+        \n+        assertEquals(null, greg.era().getRangeDurationField());\n+        assertEquals(greg.eras(), greg.centuryOfEra().getRangeDurationField());\n+        assertEquals(greg.centuries(), greg.yearOfCentury().getRangeDurationField());\n+        assertEquals(greg.eras(), greg.yearOfEra().getRangeDurationField());\n+        assertEquals(null, greg.year().getRangeDurationField());\n+        assertEquals(greg.years(), greg.monthOfYear().getRangeDurationField());\n+        assertEquals(greg.centuries(), greg.weekyearOfCentury().getRangeDurationField());\n+        assertEquals(null, greg.weekyear().getRangeDurationField());\n+        assertEquals(greg.weekyears(), greg.weekOfWeekyear().getRangeDurationField());\n+        assertEquals(greg.years(), greg.dayOfYear().getRangeDurationField());\n+        assertEquals(greg.months(), greg.dayOfMonth().getRangeDurationField());\n+        assertEquals(greg.weeks(), greg.dayOfWeek().getRangeDurationField());\n     }\n \n     public void testTimeFields() {\n--- a/src/test/java/org/joda/time/chrono/TestISOChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestISOChronology.java\n         assertEquals(true, iso.dayOfYear().isSupported());\n         assertEquals(true, iso.dayOfMonth().isSupported());\n         assertEquals(true, iso.dayOfWeek().isSupported());\n+        \n+        assertEquals(iso.eras(), iso.era().getDurationField());\n+        assertEquals(iso.centuries(), iso.centuryOfEra().getDurationField());\n+        assertEquals(iso.years(), iso.yearOfCentury().getDurationField());\n+        assertEquals(iso.years(), iso.yearOfEra().getDurationField());\n+        assertEquals(iso.years(), iso.year().getDurationField());\n+        assertEquals(iso.months(), iso.monthOfYear().getDurationField());\n+        assertEquals(iso.weekyears(), iso.weekyearOfCentury().getDurationField());\n+        assertEquals(iso.weekyears(), iso.weekyear().getDurationField());\n+        assertEquals(iso.weeks(), iso.weekOfWeekyear().getDurationField());\n+        assertEquals(iso.days(), iso.dayOfYear().getDurationField());\n+        assertEquals(iso.days(), iso.dayOfMonth().getDurationField());\n+        assertEquals(iso.days(), iso.dayOfWeek().getDurationField());\n+        \n+        assertEquals(null, iso.era().getRangeDurationField());\n+        assertEquals(iso.eras(), iso.centuryOfEra().getRangeDurationField());\n+        assertEquals(iso.centuries(), iso.yearOfCentury().getRangeDurationField());\n+        assertEquals(iso.eras(), iso.yearOfEra().getRangeDurationField());\n+        assertEquals(null, iso.year().getRangeDurationField());\n+        assertEquals(iso.years(), iso.monthOfYear().getRangeDurationField());\n+        assertEquals(iso.centuries(), iso.weekyearOfCentury().getRangeDurationField());\n+        assertEquals(null, iso.weekyear().getRangeDurationField());\n+        assertEquals(iso.weekyears(), iso.weekOfWeekyear().getRangeDurationField());\n+        assertEquals(iso.years(), iso.dayOfYear().getRangeDurationField());\n+        assertEquals(iso.months(), iso.dayOfMonth().getRangeDurationField());\n+        assertEquals(iso.weeks(), iso.dayOfWeek().getRangeDurationField());\n     }\n \n     public void testTimeFields() {\n--- a/src/test/java/org/joda/time/chrono/TestIslamicChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestIslamicChronology.java\n         assertEquals(true, islamic.dayOfYear().isSupported());\n         assertEquals(true, islamic.dayOfMonth().isSupported());\n         assertEquals(true, islamic.dayOfWeek().isSupported());\n+        \n+        assertEquals(islamic.eras(), islamic.era().getDurationField());\n+        assertEquals(islamic.centuries(), islamic.centuryOfEra().getDurationField());\n+        assertEquals(islamic.years(), islamic.yearOfCentury().getDurationField());\n+        assertEquals(islamic.years(), islamic.yearOfEra().getDurationField());\n+        assertEquals(islamic.years(), islamic.year().getDurationField());\n+        assertEquals(islamic.months(), islamic.monthOfYear().getDurationField());\n+        assertEquals(islamic.weekyears(), islamic.weekyearOfCentury().getDurationField());\n+        assertEquals(islamic.weekyears(), islamic.weekyear().getDurationField());\n+        assertEquals(islamic.weeks(), islamic.weekOfWeekyear().getDurationField());\n+        assertEquals(islamic.days(), islamic.dayOfYear().getDurationField());\n+        assertEquals(islamic.days(), islamic.dayOfMonth().getDurationField());\n+        assertEquals(islamic.days(), islamic.dayOfWeek().getDurationField());\n+        \n+        assertEquals(null, islamic.era().getRangeDurationField());\n+        assertEquals(islamic.eras(), islamic.centuryOfEra().getRangeDurationField());\n+        assertEquals(islamic.centuries(), islamic.yearOfCentury().getRangeDurationField());\n+        assertEquals(islamic.eras(), islamic.yearOfEra().getRangeDurationField());\n+        assertEquals(null, islamic.year().getRangeDurationField());\n+        assertEquals(islamic.years(), islamic.monthOfYear().getRangeDurationField());\n+        assertEquals(islamic.centuries(), islamic.weekyearOfCentury().getRangeDurationField());\n+        assertEquals(null, islamic.weekyear().getRangeDurationField());\n+        assertEquals(islamic.weekyears(), islamic.weekOfWeekyear().getRangeDurationField());\n+        assertEquals(islamic.years(), islamic.dayOfYear().getRangeDurationField());\n+        assertEquals(islamic.months(), islamic.dayOfMonth().getRangeDurationField());\n+        assertEquals(islamic.weeks(), islamic.dayOfWeek().getRangeDurationField());\n     }\n \n     public void testTimeFields() {\n--- a/src/test/java/org/joda/time/chrono/TestJulianChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestJulianChronology.java\n         assertEquals(true, julian.dayOfYear().isSupported());\n         assertEquals(true, julian.dayOfMonth().isSupported());\n         assertEquals(true, julian.dayOfWeek().isSupported());\n+        \n+        assertEquals(julian.eras(), julian.era().getDurationField());\n+        assertEquals(julian.centuries(), julian.centuryOfEra().getDurationField());\n+        assertEquals(julian.years(), julian.yearOfCentury().getDurationField());\n+        assertEquals(julian.years(), julian.yearOfEra().getDurationField());\n+        assertEquals(julian.years(), julian.year().getDurationField());\n+        assertEquals(julian.months(), julian.monthOfYear().getDurationField());\n+        assertEquals(julian.weekyears(), julian.weekyearOfCentury().getDurationField());\n+        assertEquals(julian.weekyears(), julian.weekyear().getDurationField());\n+        assertEquals(julian.weeks(), julian.weekOfWeekyear().getDurationField());\n+        assertEquals(julian.days(), julian.dayOfYear().getDurationField());\n+        assertEquals(julian.days(), julian.dayOfMonth().getDurationField());\n+        assertEquals(julian.days(), julian.dayOfWeek().getDurationField());\n+        \n+        assertEquals(null, julian.era().getRangeDurationField());\n+        assertEquals(julian.eras(), julian.centuryOfEra().getRangeDurationField());\n+        assertEquals(julian.centuries(), julian.yearOfCentury().getRangeDurationField());\n+        assertEquals(julian.eras(), julian.yearOfEra().getRangeDurationField());\n+        assertEquals(null, julian.year().getRangeDurationField());\n+        assertEquals(julian.years(), julian.monthOfYear().getRangeDurationField());\n+        assertEquals(julian.centuries(), julian.weekyearOfCentury().getRangeDurationField());\n+        assertEquals(null, julian.weekyear().getRangeDurationField());\n+        assertEquals(julian.weekyears(), julian.weekOfWeekyear().getRangeDurationField());\n+        assertEquals(julian.years(), julian.dayOfYear().getRangeDurationField());\n+        assertEquals(julian.months(), julian.dayOfMonth().getRangeDurationField());\n+        assertEquals(julian.weeks(), julian.dayOfWeek().getRangeDurationField());\n     }\n \n     public void testTimeFields() {", "timestamp": 1385555765, "metainfo": ""}