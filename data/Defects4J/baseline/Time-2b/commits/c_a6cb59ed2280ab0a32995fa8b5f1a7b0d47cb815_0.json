{"sha": "a6cb59ed2280ab0a32995fa8b5f1a7b0d47cb815", "log": "Fix handling of PeriodType when either years or months missing  Fixes #79", "commit": "\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n      * @since 1.5\n      */\n     public Period normalizedStandard(PeriodType type) {\n+        type = DateTimeUtils.getPeriodType(type);\n         long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n         millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n         millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n         millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n         millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n         millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n-        Period result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());\n+        Period result = new Period(millis, type, ISOChronology.getInstanceUTC());\n         int years = getYears();\n         int months = getMonths();\n         if (years != 0 || months != 0) {\n-            years = FieldUtils.safeAdd(years, months / 12);\n-            months = months % 12;\n-            if (years != 0) {\n-                result = result.withYears(years);\n+            long totalMonths = years * 12L + months;\n+            if (type.isSupported(DurationFieldType.YEARS_TYPE)) {\n+                int normalizedYears = FieldUtils.safeToInt(totalMonths / 12);\n+                result = result.withYears(normalizedYears);\n+                totalMonths = totalMonths - (normalizedYears * 12);\n             }\n-            if (months != 0) {\n-                result = result.withMonths(months);\n+            if (type.isSupported(DurationFieldType.MONTHS_TYPE)) {\n+                int normalizedMonths = FieldUtils.safeToInt(totalMonths);\n+                result = result.withMonths(normalizedMonths);\n+                totalMonths = totalMonths - normalizedMonths;\n             }\n+            if (totalMonths != 0) {\n+                throw new UnsupportedOperationException(\"Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: \" + toString());\n+            }\n         }\n         return result;\n     }\n--- a/src/test/java/org/joda/time/TestPeriod_Basics.java\n+++ b/src/test/java/org/joda/time/TestPeriod_Basics.java\n     }\n     \n     class MockPeriod extends BasePeriod {\n+        private static final long serialVersionUID = 1L;\n         public MockPeriod(long value) {\n             super(value, null, null);\n         }\n         assertEquals(new Period(2, 3, 0, 37, 3, 0, 0, 0, PeriodType.yearMonthDayTime()), result);\n     }\n \n+    public void testNormalizedStandard_periodType_months1() {\n+        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard(PeriodType.months());\n+        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n+        assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n+    }\n+\n+    public void testNormalizedStandard_periodType_months2() {\n+        Period test = new Period(-2, 15, 0, 0, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard(PeriodType.months());\n+        assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);\n+        assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n+    }\n+\n+    public void testNormalizedStandard_periodType_months3() {\n+        Period test = new Period(0, 4, 0, 0, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard(PeriodType.months());\n+        assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0), test);\n+        assertEquals(new Period(0, 4, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);\n+    }\n+\n+    public void testNormalizedStandard_periodType_years() {\n+        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n+        try {\n+            test.normalizedStandard(PeriodType.years());\n+            fail();\n+        } catch (UnsupportedOperationException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testNormalizedStandard_periodType_monthsWeeks() {\n+        PeriodType type = PeriodType.forFields(new DurationFieldType[]{\n+                        DurationFieldType.months(),\n+                        DurationFieldType.weeks(),\n+                        DurationFieldType.days()});\n+        Period test = new Period(2, 4, 6, 0, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard(type);\n+        assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);\n+        assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);\n+    }\n+\n }", "timestamp": 1383314819, "metainfo": ""}