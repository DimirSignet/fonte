{"sha": "d87a2f92492af0b6d3d850aab9323ad9b0bfb457", "log": "Make tests more tolerant of different time zones   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestAllPackages.java\n+++ b/JodaTime/src/test/org/joda/time/TestAllPackages.java\n  */\n package org.joda.time;\n \n+import java.util.TimeZone;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n     }\n \n     public static void main(String args[]) {\n+        // setup a time zone other than one tester is in\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Asia/Seoul\"));\n+        \n+        // run tests\n         String[] testCaseName = {\n             TestAllPackages.class.getName()\n         };\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n     //-----------------------------------------------------------------------\n     public void testGetZone_Zone() {\n         assertEquals(PARIS, DateTimeUtils.getZone(PARIS));\n-        assertEquals(LONDON, DateTimeUtils.getZone(null));\n+        assertEquals(DateTimeZone.getDefault(), DateTimeUtils.getZone(null));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java\n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n     private static final DateTimeZone MOSCOW = DateTimeZone.getInstance(\"Europe/Moscow\");\n-    private static final Chronology JULIAN = JulianChronology.getInstance();\n-    private static final Chronology ISO = ISOChronology.getInstance();\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n     \n     private DateTimeZone zone = null;\n \n \n     public TestCalendarConverter(String name) {\n         super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final Chronology ISO = ISOChronology.getInstance();\n-    private static final Chronology JULIAN = JulianChronology.getInstance();\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology ISO;\n+    private static Chronology JULIAN;\n     \n     private DateTimeZone zone = null;\n \n \n     public TestDateConverter(String name) {\n         super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final Chronology ISO = ISOChronology.getInstance();\n-    private static final Chronology JULIAN = JulianChronology.getInstance();\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n     \n     private DateTimeZone zone = null;\n \n \n     public TestLongConverter(String name) {\n         super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n             \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final Chronology ISO = ISOChronology.getInstance();\n-    private static final Chronology JULIAN = JulianChronology.getInstance();\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology ISO;\n+    private static Chronology JULIAN;\n     \n     private DateTimeZone zone = null;\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n \n     public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n \n     protected void setUp() throws Exception {\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.getInstance(\"Europe/London\"));\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+        \n+        ISO = ISOChronology.getInstance();\n+        JULIAN = JulianChronology.getInstance();\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final Chronology ISO = ISOChronology.getInstance();\n-    private static final Chronology JULIAN = JulianChronology.getInstance();\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n     \n     private DateTimeZone zone = null;\n \n \n     public TestReadableDurationConverter(String name) {\n         super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final Chronology ISO = ISOChronology.getInstance();\n-    private static final Chronology JULIAN = JulianChronology.getInstance();\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n     \n     private DateTimeZone zone = null;\n \n \n     public TestReadableInstantConverter(String name) {\n         super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final Chronology ISO = ISOChronology.getInstance();\n-    private static final Chronology JULIAN = JulianChronology.getInstance();\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n     \n     private DateTimeZone zone = null;\n \n \n     public TestReadableIntervalConverter(String name) {\n         super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final Chronology ISO = ISOChronology.getInstance();\n-    private static final Chronology JULIAN = JulianChronology.getInstance();\n-    private static final Chronology BUDDHIST = BuddhistChronology.getInstance();\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n+    private static Chronology BUDDHIST;\n     \n     private DateTimeZone zone = null;\n \n \n     public TestReadablePartialConverter(String name) {\n         super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n+        BUDDHIST = BuddhistChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadablePeriodConverter.java\n \n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final Chronology ISO = ISOChronology.getInstance();\n-    private static final Chronology JULIAN = JulianChronology.getInstance();\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static Chronology JULIAN;\n+    private static Chronology ISO;\n     \n     private DateTimeZone zone = null;\n \n \n     public TestReadablePeriodConverter(String name) {\n         super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    private static final Chronology ISO = ISOChronology.getInstance();\n-    private static final Chronology JULIAN = JulianChronology.getInstance();\n     private static final Chronology ISO_EIGHT = ISOChronology.getInstance(EIGHT);\n     private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n     private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    private static Chronology ISO;\n+    private static Chronology JULIAN;\n     \n     private DateTimeZone zone = null;\n     private Locale locale = null;\n         locale = Locale.getDefault();\n         DateTimeZone.setDefault(LONDON);\n         Locale.setDefault(Locale.UK);\n+        \n+        JULIAN = JulianChronology.getInstance();\n+        ISO = ISOChronology.getInstance();\n     }\n \n     protected void tearDown() throws Exception {", "timestamp": 1098218804, "metainfo": ""}