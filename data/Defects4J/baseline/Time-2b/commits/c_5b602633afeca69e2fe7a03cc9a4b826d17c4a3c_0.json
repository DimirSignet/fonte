{"sha": "5b602633afeca69e2fe7a03cc9a4b826d17c4a3c", "log": "Initial project checkin from Al Major   ", "commit": "\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/CanadaStatutoryHolidays.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday;\n+\n+import org.joda.time.contrib.holiday.anniversary.AnnualHolidays;\n+import org.joda.time.contrib.holiday.anniversary.CanadaAnniversaries;\n+import org.joda.time.contrib.holiday.anniversary.CommonAnniversaries;\n+import org.joda.time.contrib.holiday.anniversary.NamedAnniversaryFactory;\n+\n+/**\n+ * \n+ * @author Al Major\n+ *\n+ */\n+public class CanadaStatutoryHolidays {\n+    static AnnualHolidays<NamedAnniversaryFactory.NamedAnniversary, NamedAnniversaryFactory>\n+    FEDERAL = new AnnualHolidays<NamedAnniversaryFactory.NamedAnniversary, NamedAnniversaryFactory> () {\n+        protected void buildFactories () {\n+            addFactory(new NamedAnniversaryFactory(\"New Year's Day\",\n+                    CanadaAnniversaries.NEW_YEAR_HOLIDAY));\n+            addFactory(new NamedAnniversaryFactory(\"Good Friday\",\n+                    CommonAnniversaries.GOOD_FRIDAY));\n+            addFactory(new NamedAnniversaryFactory(\"Victoria Day\",\n+                    CanadaAnniversaries.VICTORIA_DAY));\n+            addFactory(new NamedAnniversaryFactory(\"Canada Day\",\n+                    CanadaAnniversaries.CANADA_DAY_HOLIDAY));\n+            addFactory(new NamedAnniversaryFactory(\"Labour Day\",\n+                    CommonAnniversaries.LABOR_DAY));\n+            addFactory(new NamedAnniversaryFactory(\"Thanksgiving Day\",\n+                    CanadaAnniversaries.THANKSGIVING));\n+            addFactory(new NamedAnniversaryFactory(\"Remembrance Day\",\n+                    CanadaAnniversaries.REMEMBRANCE_DAY_HOLIDAY));\n+            addFactory(new NamedAnniversaryFactory(\"Christmas Day\",\n+                    CanadaAnniversaries.CHRISTMAS_HOLIDAY));\n+            addFactory(new NamedAnniversaryFactory(\"Boxing Day\",\n+                    CanadaAnniversaries.BOXING_DAY_HOLIDAY));\n+        }\n+    };\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/GBHolidays.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday;\n+\n+import org.joda.time.contrib.holiday.anniversary.AnnualHolidays;\n+import org.joda.time.contrib.holiday.anniversary.CommonAnniversaries;\n+import org.joda.time.contrib.holiday.anniversary.GBAnniversaries;\n+import org.joda.time.contrib.holiday.anniversary.NamedAnniversaryFactory;\n+/**\n+ * \n+ * @author Al Major\n+ *\n+ */\n+public class GBHolidays {\n+    static AnnualHolidays<NamedAnniversaryFactory.NamedAnniversary, NamedAnniversaryFactory>\n+        ENGLISH_BANK = new AnnualHolidays<NamedAnniversaryFactory.NamedAnniversary, NamedAnniversaryFactory> () {\n+        protected void buildFactories () {\n+            addFactory(new NamedAnniversaryFactory(\"New Year's Day\",\n+                    CommonAnniversaries.NEW_YEAR));\n+            addFactory(new NamedAnniversaryFactory(\"Good Friday\",\n+                    CommonAnniversaries.GOOD_FRIDAY));\n+            addFactory(new NamedAnniversaryFactory(\"Easter Monday\",\n+                    CommonAnniversaries.EASTER_MONDAY));\n+            addFactory(new NamedAnniversaryFactory(\"May Day Bank Holiday\",\n+                    GBAnniversaries.MAY_DAY_BANK_HOLIDAY));\n+            addFactory(new NamedAnniversaryFactory(\"Spring Bank Holiday\",\n+                    GBAnniversaries.SPRING_BANK_HOLIDAY));\n+            addFactory(new NamedAnniversaryFactory(\"Battle of the Boyne\",\n+                    GBAnniversaries.JULY_12));\n+            addFactory(new NamedAnniversaryFactory(\"Summer Bank Holiday\",\n+                    GBAnniversaries.SUMMER_BANK_HOLIDAY));\n+            addFactory(new NamedAnniversaryFactory(\"Christmas Day\",\n+                    CommonAnniversaries.CHRISTMAS));\n+            addFactory(new NamedAnniversaryFactory(\"Boxing Day\",\n+                    CommonAnniversaries.BOXING_DAY));\n+        }\n+    };\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/USGovtHolidays.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday;\n+\n+import org.joda.time.contrib.holiday.anniversary.AnnualHolidays;\n+import org.joda.time.contrib.holiday.anniversary.CommonAnniversaries;\n+import org.joda.time.contrib.holiday.anniversary.NamedAnniversaryFactory;\n+import org.joda.time.contrib.holiday.anniversary.USAnniversaries;\n+/**\n+ * \n+ * @author Al Major\n+ *\n+ */\n+public class USGovtHolidays {\n+    static AnnualHolidays<NamedAnniversaryFactory.NamedAnniversary, NamedAnniversaryFactory>\n+        FEDERAL = new AnnualHolidays<NamedAnniversaryFactory.NamedAnniversary, NamedAnniversaryFactory> () {\n+        protected void buildFactories () {\n+            addFactory(new NamedAnniversaryFactory(\"New Year's Day\",\n+                    USAnniversaries.NEW_YEAR_HOLIDAY));\n+            addFactory(new NamedAnniversaryFactory(\n+                    \"Birthday of Martin Luther King, Jr.\",\n+                    USAnniversaries.MARTIN_LUTHER_KING_DAY));\n+            addFactory(new NamedAnniversaryFactory(\"Washington's Birthday\",\n+                    USAnniversaries.WASHINGTONS_BIRTHDAY_HOLIDAY));\n+            addFactory(new NamedAnniversaryFactory(\"Memorial Day\",\n+                    USAnniversaries.MEMORIAL_DAY));\n+            addFactory(new NamedAnniversaryFactory(\"Independence Day\",\n+                    USAnniversaries.INDEPENDENCE_DAY_HOLIDAY));\n+            addFactory(new NamedAnniversaryFactory(\"Labor Day\",\n+                    CommonAnniversaries.LABOR_DAY));\n+            addFactory(new NamedAnniversaryFactory(\"Columbus Day\",\n+                    USAnniversaries.COLUMBUS_DAY));\n+            addFactory(new NamedAnniversaryFactory(\"Veterans Day\",\n+                    USAnniversaries.VETERANS_DAY_HOLIDAY));\n+            addFactory(new NamedAnniversaryFactory(\"Thanksgiving Day\",\n+                    USAnniversaries.THANKSGIVING));\n+            addFactory(new NamedAnniversaryFactory(\"Christmas Day\",\n+                    USAnniversaries.CHRISTMAS_HOLIDAY));\n+        }\n+    };\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/AnniversaryFactory.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday.anniversary;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+/**\n+ * \n+ * @author Al Major\n+ *\n+ */\n+public abstract class AnniversaryFactory implements\n+        IAnniversaryFactory<DateTime> {\n+    private final String holidayID;\n+\n+    protected AnniversaryFactory(String str, Chronology c) {\n+        if (c != Chronology.getISO()) {\n+            throw new IllegalArgumentException(\n+                    \"AnniversaryFactory(String, Chronology): requires Gregorian/UTC chronologies only\");\n+        }\n+        this.holidayID = str;\n+    }\n+\n+    protected AnniversaryFactory(String str) {\n+        this.holidayID = str;\n+    }\n+\n+    public abstract DateTime create(int iYear);\n+\n+    public String getId() {\n+        return holidayID;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/AnnualHolidays.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday.anniversary;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+/**\n+ * \n+ * @author Al Major\n+ *\n+ * @param <T>\n+ * @param <AF>\n+ */\n+public abstract class AnnualHolidays<T extends Comparable, AF extends IAnniversaryFactory<? extends T>> {\n+    protected final List<AF> fHolidayFactories = new ArrayList<AF>();\n+    \n+    public AnnualHolidays() {\n+        buildFactories();\n+    }\n+\n+    protected abstract void buildFactories ();\n+\n+    protected void addFactory(AF af) {\n+        fHolidayFactories.add(af);\n+    }\n+\n+    public List<T> getHolidaysForYear(int iYear) {\n+        List<T> result = new ArrayList<T>(fHolidayFactories.size());\n+        for (AF sdf : (List<AF>) fHolidayFactories) {\n+            result.add((T) sdf.create(iYear));\n+        }\n+        Collections.sort(result);\n+        return result;\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/CanadaAnniversaries.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday.anniversary;\n+\n+import org.joda.time.DateMidnight;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+\n+/**\n+ * Caveat: According to the description on Wikipedia, the rule states that the\n+ * holiday is moved if it would fall on _another holiday_ not just a weekend.\n+ * The only standard holidays for which this could be a problem is Boxing Day\n+ * and Jan 2, which are explicitly corrected.\n+ * \n+ * It's not clear how the rule interacts with non statutory holidays.\n+ * \n+ */\n+public class CanadaAnniversaries {\n+\n+    public static final AnniversaryFactory NEW_YEAR_HOLIDAY = new AnniversaryFactory(\n+            \"CanadaDayHoliday\") {\n+        public DateTime create(int iYear) {\n+            return TimeUtility\n+                    .AdjustCanadianHolidayForWeekend(CanadaAnniversaries.CANADA_DAY\n+                            .create(iYear));\n+        }\n+    };\n+\n+    public static final AnniversaryFactory VICTORIA_DAY = new AnniversaryFactory(\n+            \"VictoriaDay\") {\n+        public DateTime create(int iYear) {\n+            return TimeUtility.GetLastXWeekdayOfMonthBeforeYMonthday(\n+                    DateTimeConstants.MONDAY, 25, iYear, DateTimeConstants.MAY);\n+        }\n+    };\n+\n+    public static final AnniversaryFactory CANADA_DAY = new AnniversaryFactory(\n+            \"CanadaDay\") {\n+        public DateTime create(int iYear) {\n+            return new DateMidnight(iYear, DateTimeConstants.JULY, 1)\n+                    .toDateTime();\n+        }\n+    };\n+\n+    public static final AnniversaryFactory CANADA_DAY_HOLIDAY = new AnniversaryFactory(\n+            \"CanadaDayHoliday\") {\n+        public DateTime create(int iYear) {\n+            return TimeUtility\n+                    .AdjustCanadianHolidayForWeekend(CanadaAnniversaries.CANADA_DAY\n+                            .create(iYear));\n+        }\n+    };\n+\n+    public static final AnniversaryFactory THANKSGIVING = new AnniversaryFactory(\n+            \"Thanksgiving\") {\n+        public DateTime create(int iYear) {\n+            // Second Monday in October\n+            return TimeUtility.GetFirstXWeekdayOfMonth(\n+                    DateTimeConstants.MONDAY, iYear, DateTimeConstants.OCTOBER)\n+                    .plusWeeks(1);\n+        }\n+    };\n+\n+    public static final AnniversaryFactory REMEMBRANCE_DAY_HOLIDAY = new AnniversaryFactory(\n+            \"RemembranceDayHoliday\") {\n+        public DateTime create(int iYear) {\n+            return TimeUtility\n+                    .AdjustCanadianHolidayForWeekend(CommonAnniversaries.ARMISTICE_DAY\n+                            .create(iYear));\n+        }\n+    };\n+\n+    public static final AnniversaryFactory CHRISTMAS_HOLIDAY = new AnniversaryFactory(\n+            \"ChristmasHoliday\") {\n+        public DateTime create(int iYear) {\n+            return TimeUtility\n+                    .AdjustCanadianHolidayForWeekend(CommonAnniversaries.CHRISTMAS\n+                            .create(iYear));\n+        }\n+    };\n+\n+    public static final AnniversaryFactory BOXING_DAY_HOLIDAY = new AnniversaryFactory(\n+            \"BoxingDayHoliday\") {\n+        // special case. since they two dates are together and both have to be on a weekday\n+        public DateTime create(int iYear) {\n+            return TimeUtility\n+                    .AdjustCanadianHolidayForWeekend(CHRISTMAS_HOLIDAY.create(\n+                            iYear).plusDays(1));\n+        }\n+    };\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/CommonAnniversaries.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday.anniversary;\n+\n+import org.joda.time.DateMidnight;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+\n+public class CommonAnniversaries {\n+\n+    public static final AnniversaryFactory NEW_YEAR = new AnniversaryFactory(\n+            \"NewYear\") {\n+        public DateTime create(int iYear) {\n+            return new DateMidnight(iYear, DateTimeConstants.JANUARY, 1)\n+                    .toDateTime();\n+        }\n+    };\n+\n+    public static final AnniversaryFactory ST_VALENTINES_DAY = new AnniversaryFactory(\n+            \"ValentinesDay\") {\n+        public DateTime create(int iYear) {\n+            return new DateMidnight(iYear, DateTimeConstants.FEBRUARY, 14)\n+                    .toDateTime();\n+        }\n+    };\n+\n+    public static final AnniversaryFactory ST_PATRICKS_DAY = new AnniversaryFactory(\n+            \"StPatricksDay\") {\n+        public DateTime create(int iYear) {\n+            return new DateMidnight(iYear, DateTimeConstants.MARCH, 17)\n+                    .toDateTime();\n+        }\n+    };\n+\n+    public static final AnniversaryFactory GOOD_FRIDAY = new AnniversaryFactory(\n+            \"GoodFriday\") {\n+        public DateTime create(int iYear) {\n+            return EASTER_SUNDAY.create(iYear).minusDays(2);\n+        }\n+    };\n+\n+    /**\n+     * Source: http://www.tondering.dk/claus/calendar.html This is a calculation\n+     * for the <em>Gregorian</em> calendar only.\n+     */\n+    public static final AnniversaryFactory EASTER_SUNDAY = new AnniversaryFactory(\n+            \"EasterSunday\") {\n+        public DateTime create(int iYear) {\n+            int iG = iYear % 19;\n+            int iC = iYear / 100;\n+            int iH = (iC - iC / 4 - (8 * iC + 13) / 25 + 19 * iG + 15) % 30;\n+            int iI = iH - (iH / 28) * (1 - (29 / (iH + 1)) * ((21 - iG) / 11));\n+            int iJ = (iYear + iYear / 4 + iI + 2 - iC + iC / 4) % 7;\n+            int iL = iI - iJ;\n+            int iMonth = 3 + (iL + 40) / 44;\n+            int iDay = iL + 28 - 31 * (iMonth / 4);\n+            return new DateMidnight(iYear, iMonth, iDay).toDateTime();\n+        }\n+    };\n+\n+    public static final AnniversaryFactory EASTER_MONDAY = new AnniversaryFactory(\n+            \"EasterMonday\") {\n+        public DateTime create(int iYear) {\n+            return EASTER_SUNDAY.create(iYear).plusDays(1);\n+        }\n+    };\n+\n+    /**\n+     * same as Veterans Day and Remembrance Day.\n+     */\n+    public static final AnniversaryFactory ARMISTICE_DAY = new AnniversaryFactory(\n+            \"ArmisticeDay\") {\n+        public DateTime create(int iYear) {\n+            return new DateMidnight(iYear, DateTimeConstants.NOVEMBER, 11)\n+                    .toDateTime();\n+        }\n+    };\n+\n+    public static final AnniversaryFactory CHRISTMAS = new AnniversaryFactory(\n+            \"Christmas\") {\n+        public DateTime create(int iYear) {\n+            return new DateMidnight(iYear, DateTimeConstants.DECEMBER, 25)\n+                    .toDateTime();\n+        }\n+    };\n+\n+    public static final AnniversaryFactory BOXING_DAY = new AnniversaryFactory(\n+            \"BoxingDay\") {\n+        public DateTime create(int iYear) {\n+            return new DateMidnight(iYear, DateTimeConstants.DECEMBER, 26)\n+                    .toDateTime();\n+        }\n+    };\n+\n+    public static final AnniversaryFactory LABOR_DAY = new AnniversaryFactory(\n+            \"LaborDay\") {\n+        public DateTime create(int iYear) {\n+            // First Monday in September\n+            return TimeUtility.GetFirstXWeekdayOfMonth(\n+                    DateTimeConstants.MONDAY, iYear,\n+                    DateTimeConstants.SEPTEMBER);\n+        }\n+    };\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/GBAnniversaries.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday.anniversary;\n+\n+import org.joda.time.DateMidnight;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+\n+public class GBAnniversaries {\n+    /*\n+     * TODO: in 1995 this was moved to second monday in may. fix?\n+     */\n+    public static final AnniversaryFactory MAY_DAY_BANK_HOLIDAY = new AnniversaryFactory(\n+            \"MayDayBankHoliday\") {\n+        public DateTime create(int iYear) {\n+            // First Monday in May\n+            return TimeUtility.GetFirstXWeekdayOfMonth(\n+                    DateTimeConstants.MONDAY, iYear, DateTimeConstants.MAY);\n+        }\n+    };\n+\n+    public static final AnniversaryFactory SPRING_BANK_HOLIDAY = new AnniversaryFactory(\n+            \"SpringBankHoliday\") {\n+        public DateTime create(int iYear) {\n+            // Last Monday in May\n+            return TimeUtility.GetLastXWeekdayOfMonth(DateTimeConstants.MONDAY,\n+                    iYear, DateTimeConstants.MAY);\n+        }\n+    };\n+\n+    public static final AnniversaryFactory JULY_12 = new AnniversaryFactory(\n+            \"July12\") {\n+        public DateTime create(int iYear) {\n+            return new DateMidnight(iYear, DateTimeConstants.JULY, 12)\n+                    .toDateTime();\n+        }\n+    };\n+\n+    public static final AnniversaryFactory SUMMER_BANK_HOLIDAY = new AnniversaryFactory(\n+            \"SummerBankHoliday\") {\n+        public DateTime create(int iYear) {\n+            // Last Monday in August\n+            return TimeUtility.GetLastXWeekdayOfMonth(DateTimeConstants.MONDAY,\n+                    iYear, DateTimeConstants.AUGUST);\n+        }\n+    };\n+\n+    public static final AnniversaryFactory SCOTTISH_SUMMER_BANK_HOLIDAY = new AnniversaryFactory(\n+            \"MayDayBankHoliday\") {\n+        public DateTime create(int iYear) {\n+            // First Monday in August\n+            return TimeUtility.GetFirstXWeekdayOfMonth(\n+                    DateTimeConstants.MONDAY, iYear, DateTimeConstants.AUGUST);\n+        }\n+    };\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/IAnniversaryFactory.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday.anniversary;\n+/**\n+ * \n+ * @author Al Major\n+ *\n+ * @param <T>\n+ */\n+public interface IAnniversaryFactory<T> {\n+    T create(int iYear);\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/NamedAnniversaryFactory.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday.anniversary;\n+\n+import org.joda.time.DateTime;\n+/**\n+ * \n+ * @author Al Major\n+ *\n+ */\n+public class NamedAnniversaryFactory implements\n+        IAnniversaryFactory<NamedAnniversaryFactory.NamedAnniversary> {\n+    public class NamedAnniversary implements Comparable {\n+        final DateTime fAnniversary;\n+\n+        NamedAnniversary(DateTime dm) {\n+            fAnniversary = dm;\n+        }\n+\n+        public String getName() {\n+            return fAnniversaryName;\n+        }\n+\n+        public DateTime getDate() {\n+            return fAnniversary;\n+        }\n+\n+        public int compareTo(Object o) {\n+            if ( o instanceof NamedAnniversary ) {\n+                return fAnniversary.compareTo(((NamedAnniversary)o).fAnniversary);\n+            } else {\n+                assert false;\n+                return 0;\n+            }\n+        }\n+    }\n+\n+    final String fAnniversaryName;\n+\n+    final AnniversaryFactory fFactory;\n+\n+    public NamedAnniversaryFactory(String strName, AnniversaryFactory af) {\n+        fAnniversaryName = strName;\n+        fFactory = af;\n+    }\n+\n+    public NamedAnniversary create(int iYear) {\n+        return new NamedAnniversary(fFactory.create(iYear));\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/TimeUtility.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday.anniversary;\n+\n+import org.joda.time.DateMidnight;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.Period;\n+/**\n+ * \n+ * @author Al Major\n+ *\n+ */\n+public class TimeUtility {\n+    private static final long APPROX_MILLIS_PER_YEAR = 365L * 24L * 60L * 60L\n+            * 1000L;\n+\n+    private static final long APPROX_MILLIS_PER_MONTH = 31L * 24L * 60L * 60L\n+            * 1000L;\n+\n+    public static Period getApproxPeriod(long l) {\n+        long millis = l;\n+\n+        long numYears = millis / APPROX_MILLIS_PER_YEAR;\n+        Period p = Period.years((int) numYears);\n+        millis -= numYears * APPROX_MILLIS_PER_YEAR;\n+\n+        long numMonths = millis / APPROX_MILLIS_PER_MONTH;\n+        p = p.withMonths((int) numMonths);\n+        millis -= numMonths * APPROX_MILLIS_PER_MONTH;\n+\n+        long numDays = millis / DateTimeConstants.MILLIS_PER_DAY;\n+        p = p.withDays((int) numDays);\n+        millis -= numDays * DateTimeConstants.MILLIS_PER_DAY;\n+\n+        long numHours = millis / DateTimeConstants.MILLIS_PER_HOUR;\n+        p = p.withHours((int) numHours);\n+        millis -= numHours * DateTimeConstants.MILLIS_PER_HOUR;\n+\n+        long numMinutes = millis / DateTimeConstants.MILLIS_PER_MINUTE;\n+        p = p.withMinutes((int) numMinutes);\n+        millis -= numMinutes * DateTimeConstants.MILLIS_PER_MINUTE;\n+\n+        long numSeconds = millis / DateTimeConstants.MILLIS_PER_SECOND;\n+        p = p.withSeconds((int) numSeconds);\n+        millis -= numSeconds * DateTimeConstants.MILLIS_PER_SECOND;\n+\n+        p = p.withMillis((int) millis);\n+\n+        assert l == getApproxMillis(p);\n+\n+        return p;\n+    }\n+\n+    public static long getApproxMillis(Period p) {\n+        if (p.getWeeks() != 0) {\n+            return ((long) p.getWeeks()) * DateTimeConstants.MILLIS_PER_WEEK;\n+        }\n+        return ((long) p.getYears()) * APPROX_MILLIS_PER_YEAR\n+                + ((long) p.getMonths()) * APPROX_MILLIS_PER_MONTH\n+                + ((long) p.getDays()) * DateTimeConstants.MILLIS_PER_DAY\n+                + ((long) p.getHours()) * DateTimeConstants.MILLIS_PER_HOUR\n+                + ((long) p.getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE\n+                + ((long) p.getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND\n+                + ((long) p.getMillis());\n+    }\n+\n+    // iXDayOfWeek takes on values from DateTimeConstants.MONDAY through\n+    // DateTimeConstants.SUNDAY\n+    static DateTime GetFirstXWeekdayOfMonth(int iXDayOfWeek, int iYear,\n+            int iMonth) {\n+        DateTime dmFirstOfMonth = new DateMidnight(iYear, iMonth, 1)\n+                .toDateTime();\n+        int dayOfWeek = dmFirstOfMonth.getDayOfWeek();\n+        int daysToAdd = iXDayOfWeek - dayOfWeek;\n+        if (iXDayOfWeek < dayOfWeek) {\n+            daysToAdd += 7;\n+        }\n+        return dmFirstOfMonth.plusDays(daysToAdd);\n+    }\n+\n+    // iXDayOfWeek takes on values from DateTimeConstants.MONDAY through\n+    // DateTimeConstants.SUNDAY\n+    static DateTime GetLastXWeekdayOfMonth(int iXDayOfWeek, int iYear,\n+            int iMonth) {\n+        DateTime dmFirstOfMonth = new DateMidnight(iYear, iMonth, 1)\n+                .toDateTime();\n+        DateTime dmLastOfMonth = dmFirstOfMonth.plusMonths(1).minusDays(1);\n+        int dayOfWeek = dmLastOfMonth.getDayOfWeek();\n+        int daysToSubtract = dayOfWeek - iXDayOfWeek;\n+        if (dayOfWeek < iXDayOfWeek) {\n+            daysToSubtract -= 7;\n+        }\n+        return dmLastOfMonth.minusDays(daysToSubtract);\n+    }\n+\n+    // iXDayOfWeek takes on values from DateTimeConstants.MONDAY through\n+    // DateTimeConstants.SUNDAY\n+    static DateTime GetFirstXWeekdayOfMonthAfterYMonthday(int iXDayOfWeek,\n+            int iYMonthDay, int iYear, int iMonth) {\n+        assert 1 <= iYMonthDay && iYMonthDay <= 31;\n+        DateTime dmFirstXDayOfMonth = GetFirstXWeekdayOfMonth(iXDayOfWeek,\n+                iYear, iMonth);\n+        while (dmFirstXDayOfMonth.getDayOfMonth() <= iYMonthDay) {\n+            dmFirstXDayOfMonth.plusWeeks(1);\n+        }\n+        return dmFirstXDayOfMonth;\n+    }\n+\n+    // iXDayOfWeek takes on values from DateTimeConstants.MONDAY through\n+    // DateTimeConstants.SUNDAY\n+    static DateTime GetLastXWeekdayOfMonthBeforeYMonthday(int iXDayOfWeek,\n+            int iYMonthDay, int iYear, int iMonth) {\n+        assert 1 <= iYMonthDay && iYMonthDay <= 31;\n+        DateTime dmLastXDayOfMonth = GetLastXWeekdayOfMonth(iXDayOfWeek, iYear,\n+                iMonth);\n+        while (dmLastXDayOfMonth.getDayOfMonth() >= iYMonthDay) {\n+            dmLastXDayOfMonth.minusWeeks(1);\n+        }\n+        return dmLastXDayOfMonth;\n+    }\n+\n+    static DateTime AdjustAmericanHolidayForWeekend(DateTime dm) {\n+        switch (dm.getDayOfWeek()) {\n+        case DateTimeConstants.SATURDAY:\n+            return dm.minusDays(1);\n+        case DateTimeConstants.SUNDAY:\n+            return dm.plusDays(1);\n+        default:\n+            return dm;\n+        }\n+    }\n+\n+    static DateTime AdjustCanadianHolidayForWeekend(DateTime dm) {\n+        switch (dm.getDayOfWeek()) {\n+        case DateTimeConstants.SATURDAY:\n+            return dm.plusDays(2);\n+        case DateTimeConstants.SUNDAY:\n+            return dm.plusDays(1);\n+        default:\n+            return dm;\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/java/org/joda/time/contrib/holiday/anniversary/USAnniversaries.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday.anniversary;\n+\n+import org.joda.time.DateMidnight;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+\n+/**\n+ * TODO: There may be a need for localizable labels for the names of the holidays.\n+ * would have to be loaded from an appropriate properties file.\n+ * TODO: at some point it may make sense to generate either the holiday computation\n+ * code from a definition file or to run an interpreter on the file to generate\n+ * the holiday directly.\n+ */\n+/**\n+ * Except when specifically noted otherwise, dates for holidays are based on\n+ * information from Wikipedia.\n+ */\n+public class USAnniversaries {\n+\n+    public static final AnniversaryFactory NEW_YEAR_HOLIDAY = new AnniversaryFactory(\n+            \"NewYearHoliday\") {\n+        public DateTime create(int iYear) {\n+            return TimeUtility\n+                    .AdjustAmericanHolidayForWeekend(CommonAnniversaries.NEW_YEAR\n+                            .create(iYear));\n+        }\n+    };\n+\n+    public static final AnniversaryFactory MARTIN_LUTHER_KING_DAY = new AnniversaryFactory(\n+            \"MartinLutherKingDay\") {\n+        public DateTime create(int iYear) {\n+            // Third Monday in January\n+            return TimeUtility.GetFirstXWeekdayOfMonth(\n+                    DateTimeConstants.MONDAY, iYear, DateTimeConstants.JANUARY)\n+                    .plusWeeks(2);\n+        }\n+    };\n+\n+    /**\n+     * Also called \"President's Day\"\n+     */\n+    public static final AnniversaryFactory WASHINGTONS_BIRTHDAY_HOLIDAY = new AnniversaryFactory(\n+            \"WashingtonsBirthdayHoliday\") {\n+        public DateTime create(int iYear) {\n+            // Third Monday in February\n+            return TimeUtility\n+                    .GetFirstXWeekdayOfMonth(DateTimeConstants.MONDAY, iYear,\n+                            DateTimeConstants.FEBRUARY).plusWeeks(2);\n+        }\n+    };\n+\n+    public static final AnniversaryFactory MEMORIAL_DAY = new AnniversaryFactory(\n+            \"MemorialDay\") {\n+        public DateTime create(int iYear) {\n+            // Last Monday in May\n+            return TimeUtility.GetLastXWeekdayOfMonth(DateTimeConstants.MONDAY,\n+                    iYear, DateTimeConstants.MAY);\n+        }\n+    };\n+\n+    public static final AnniversaryFactory INDEPENDENCE_DAY = new AnniversaryFactory(\n+            \"IndependenceDay\") {\n+        public DateTime create(int iYear) {\n+            return new DateMidnight(iYear, DateTimeConstants.JULY, 4)\n+                    .toDateTime();\n+        }\n+    };\n+\n+    public static final AnniversaryFactory INDEPENDENCE_DAY_HOLIDAY = new AnniversaryFactory(\n+            \"IndependenceDayHoliday\") {\n+        public DateTime create(int iYear) {\n+            return TimeUtility.AdjustAmericanHolidayForWeekend(INDEPENDENCE_DAY\n+                    .create(iYear));\n+        }\n+    };\n+\n+    public static final AnniversaryFactory VETERANS_DAY_HOLIDAY = new AnniversaryFactory(\n+            \"VeteransDayHoliday\") {\n+        public DateTime create(int iYear) {\n+            return TimeUtility\n+                    .AdjustAmericanHolidayForWeekend(CommonAnniversaries.ARMISTICE_DAY\n+                            .create(iYear));\n+        }\n+    };\n+\n+    public static final AnniversaryFactory COLUMBUS_DAY = new AnniversaryFactory(\n+            \"ColumbusDay\") {\n+        public DateTime create(int iYear) {\n+            // Second Monday in October\n+            return TimeUtility.GetFirstXWeekdayOfMonth(\n+                    DateTimeConstants.MONDAY, iYear, DateTimeConstants.OCTOBER)\n+                    .plusWeeks(1);\n+        }\n+    };\n+\n+    public static final AnniversaryFactory THANKSGIVING = new AnniversaryFactory(\n+            \"ThanksGiving\") {\n+        public DateTime create(int iYear) {\n+            // 4th Thursday in November\n+            return TimeUtility.GetFirstXWeekdayOfMonth(\n+                    DateTimeConstants.THURSDAY, iYear,\n+                    DateTimeConstants.NOVEMBER).plusWeeks(3);\n+        }\n+    };\n+\n+    public static final AnniversaryFactory CHRISTMAS_HOLIDAY = new AnniversaryFactory(\n+            \"ChristmasHoliday\") {\n+        public DateTime create(int iYear) {\n+            return TimeUtility\n+                    .AdjustAmericanHolidayForWeekend(CommonAnniversaries.CHRISTMAS\n+                            .create(iYear));\n+        }\n+    };\n+\n+    /**\n+     * This was the holiday prior to 1968-1971.\n+     */\n+    public static final AnniversaryFactory WASHINGTONS_BIRTHDAY = new AnniversaryFactory(\n+            \"WashingtonsBirthday\") {\n+        public DateTime create(int iYear) {\n+            return new DateMidnight(iYear, DateTimeConstants.FEBRUARY, 22)\n+                    .toDateTime();\n+        }\n+    };\n+\n+    public static final AnniversaryFactory LINCOLNS_BIRTHDAY = new AnniversaryFactory(\n+            \"LincolnsBirthday\") {\n+        public DateTime create(int iYear) {\n+            return new DateMidnight(iYear, DateTimeConstants.FEBRUARY, 12)\n+                    .toDateTime();\n+        }\n+    };\n+\n+    public static final AnniversaryFactory CINCO_DE_MAYO = new AnniversaryFactory(\n+            \"CincoDeMayo\") {\n+        public DateTime create(int iYear) {\n+            return new DateMidnight(iYear, DateTimeConstants.MAY, 5)\n+                    .toDateTime();\n+        }\n+    };\n+\n+    public static final AnniversaryFactory HALLOWEEN = new AnniversaryFactory(\n+            \"Halloween\") {\n+        public DateTime create(int iYear) {\n+            return new DateMidnight(iYear, DateTimeConstants.OCTOBER, 31)\n+                    .toDateTime();\n+        }\n+    };\n+\n+    /**\n+     * Source: the example given in RFC 2445\n+     */\n+    public static final AnniversaryFactory ELECTION_DAY = new AnniversaryFactory(\n+            \"ElectionDay\") {\n+        public DateTime create(int iYear) {\n+            // not really an anniversary, happens once in 4 years\n+            if (iYear % 4 != 0) {\n+                return null;\n+            }\n+            // First Tuesday in November which follows a Monday in November\n+            return TimeUtility.GetFirstXWeekdayOfMonthAfterYMonthday(\n+                    DateTimeConstants.TUESDAY, 1, iYear,\n+                    DateTimeConstants.NOVEMBER);\n+        }\n+    };\n+\n+    public static final AnniversaryFactory PRE_FDR_THANKSGIVING = new AnniversaryFactory(\n+            \"PreFDRThanksGiving\") {\n+        public DateTime create(int iYear) {\n+            // Last Thursday in November\n+            return TimeUtility.GetLastXWeekdayOfMonth(\n+                    DateTimeConstants.THURSDAY, iYear,\n+                    DateTimeConstants.NOVEMBER);\n+        }\n+    };\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/TestUSHolidays.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday;\n+\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+\n+import org.joda.time.contrib.holiday.USGovtHolidays;\n+import org.joda.time.contrib.holiday.anniversary.CommonAnniversaries;\n+import org.joda.time.contrib.holiday.anniversary.USAnniversaries;\n+import org.joda.time.contrib.holiday.anniversary.NamedAnniversaryFactory.NamedAnniversary;\n+\n+/* \n+ * This is basically a test to make sure that the holiday list mechanism\n+ * works correctly. individual dates are tested in the anniversary tests.\n+ */\n+public class TestUSHolidays extends TestCase {\n+    public void testFederalHolidays() {\n+        List<NamedAnniversary> holidays = USGovtHolidays.FEDERAL.getHolidaysForYear(1995);\n+\n+        assertEquals(holidays.size(), 10);\n+        assertEquals(holidays.get(0).getDate(),\n+                USAnniversaries.NEW_YEAR_HOLIDAY.create(1995));\n+        assertEquals(holidays.get(1).getDate(),\n+                USAnniversaries.MARTIN_LUTHER_KING_DAY.create(1995));\n+        assertEquals(holidays.get(2).getDate(),\n+                USAnniversaries.WASHINGTONS_BIRTHDAY_HOLIDAY.create(1995));\n+        assertEquals(holidays.get(3).getDate(),\n+                USAnniversaries.MEMORIAL_DAY.create(1995));\n+        assertEquals(holidays.get(4).getDate(),\n+                USAnniversaries.INDEPENDENCE_DAY_HOLIDAY.create(1995));\n+        assertEquals(holidays.get(5).getDate(),\n+                CommonAnniversaries.LABOR_DAY.create(1995));\n+        assertEquals(holidays.get(6).getDate(),\n+                USAnniversaries.COLUMBUS_DAY.create(1995));\n+        assertEquals(holidays.get(7).getDate(),\n+                USAnniversaries.VETERANS_DAY_HOLIDAY.create(1995));\n+        assertEquals(holidays.get(8).getDate(),\n+                USAnniversaries.THANKSGIVING.create(1995));\n+        assertEquals(holidays.get(9).getDate(),\n+                USAnniversaries.CHRISTMAS_HOLIDAY.create(1995));\n+    }\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/anniversary/TestCommonAnniversaries.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday.anniversary;\n+\n+import junit.framework.TestCase;\n+\n+import org.joda.time.DateMidnight;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.contrib.holiday.anniversary.CommonAnniversaries;\n+\n+public class TestCommonAnniversaries extends TestCase {\n+\n+    /**\n+     * NB: tests for good friday are automatically tests for Easter and Easter\n+     * Monday.\n+     */\n+    public void testGoodFriday0() {\n+        DateTime ymd = CommonAnniversaries.GOOD_FRIDAY.create(2005);\n+        assertEquals(ymd, new DateMidnight(2005, DateTimeConstants.MARCH, 25));\n+    }\n+\n+    public void testGoodFriday1() {\n+        DateTime ymd = CommonAnniversaries.GOOD_FRIDAY.create(1993);\n+        assertEquals(ymd, new DateMidnight(1993, DateTimeConstants.APRIL, 9));\n+    }\n+\n+    public void testGoodFriday2() {\n+        DateTime ymd = CommonAnniversaries.GOOD_FRIDAY.create(1997);\n+        assertEquals(ymd, new DateMidnight(1997, DateTimeConstants.MARCH, 28));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTimeContrib/holiday/src/test/org/joda/time/contrib/holiday/anniversary/TestUSAnniversaries.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.contrib.holiday.anniversary;\n+\n+import junit.framework.TestCase;\n+\n+import org.joda.time.DateMidnight;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.contrib.holiday.anniversary.CommonAnniversaries;\n+import org.joda.time.contrib.holiday.anniversary.USAnniversaries;\n+\n+public class TestUSAnniversaries extends TestCase {\n+    public void testNewYearHoliday0() {\n+        DateTime ymd = USAnniversaries.NEW_YEAR_HOLIDAY.create(2005);\n+        assertEquals(ymd,\n+                new DateMidnight(2004, DateTimeConstants.DECEMBER, 31));\n+    }\n+\n+    public void testNewYearHoliday1() {\n+        DateTime ymd = USAnniversaries.NEW_YEAR_HOLIDAY.create(1993);\n+        assertEquals(ymd, new DateMidnight(1993, DateTimeConstants.JANUARY, 1));\n+    }\n+\n+    public void testMartinLutherKingDay() {\n+        DateTime ymd = USAnniversaries.MARTIN_LUTHER_KING_DAY.create(2005);\n+        assertEquals(ymd, new DateMidnight(2005, DateTimeConstants.JANUARY, 17));\n+    }\n+\n+    public void testWashingtonsBirthdayHoliday() {\n+        DateTime ymd = USAnniversaries.WASHINGTONS_BIRTHDAY_HOLIDAY\n+                .create(2005);\n+        assertEquals(ymd,\n+                new DateMidnight(2005, DateTimeConstants.FEBRUARY, 21));\n+    }\n+\n+    public void testMemorialDay0() {\n+        DateTime ymd = USAnniversaries.MEMORIAL_DAY.create(2005);\n+        assertEquals(ymd, new DateMidnight(2005, DateTimeConstants.MAY, 30));\n+    }\n+\n+    public void testMemorialDay1() {\n+        DateTime ymd = USAnniversaries.MEMORIAL_DAY.create(1995);\n+        assertEquals(ymd, new DateMidnight(1995, DateTimeConstants.MAY, 29));\n+    }\n+\n+    public void testMemorialDay2() {\n+        DateTime ymd = USAnniversaries.MEMORIAL_DAY.create(1997);\n+        assertEquals(ymd, new DateMidnight(1997, DateTimeConstants.MAY, 26));\n+    }\n+\n+    public void testIndependenceDayHoliday0() {\n+        DateTime ymd = USAnniversaries.INDEPENDENCE_DAY_HOLIDAY.create(2005);\n+        assertEquals(ymd, new DateMidnight(2005, DateTimeConstants.JULY, 4));\n+    }\n+\n+    public void testIndependenceDayHoliday1() {\n+        DateTime ymd = USAnniversaries.INDEPENDENCE_DAY_HOLIDAY.create(1993);\n+        assertEquals(ymd, new DateMidnight(1993, DateTimeConstants.JULY, 5));\n+    }\n+\n+    public void testLaborDay() {\n+        DateTime ymd = CommonAnniversaries.LABOR_DAY.create(2005);\n+        assertEquals(ymd,\n+                new DateMidnight(2005, DateTimeConstants.SEPTEMBER, 5));\n+    }\n+\n+    public void testThanksgiving0() {\n+        DateTime ymd = USAnniversaries.THANKSGIVING.create(2005);\n+        assertEquals(ymd,\n+                new DateMidnight(2005, DateTimeConstants.NOVEMBER, 24));\n+    }\n+\n+    public void testThanksgiving1() {\n+        DateTime ymd = USAnniversaries.THANKSGIVING.create(1995);\n+        assertEquals(ymd,\n+                new DateMidnight(1995, DateTimeConstants.NOVEMBER, 23));\n+    }\n+\n+    public void testColumbusDay0() {\n+        DateTime ymd = USAnniversaries.COLUMBUS_DAY.create(2005);\n+        assertEquals(ymd, new DateMidnight(2005, DateTimeConstants.OCTOBER, 10));\n+    }\n+\n+    public void testColumbusDay1() {\n+        DateTime ymd = USAnniversaries.COLUMBUS_DAY.create(1998);\n+        assertEquals(ymd, new DateMidnight(1998, DateTimeConstants.OCTOBER, 12));\n+    }\n+\n+    public void testChristmasHoliday0() {\n+        DateTime ymd = USAnniversaries.CHRISTMAS_HOLIDAY.create(2005);\n+        assertEquals(ymd,\n+                new DateMidnight(2005, DateTimeConstants.DECEMBER, 26));\n+    }\n+\n+    public void testChristmasHoliday1() {\n+        DateTime ymd = USAnniversaries.CHRISTMAS_HOLIDAY.create(1995);\n+        assertEquals(ymd,\n+                new DateMidnight(1995, DateTimeConstants.DECEMBER, 25));\n+    }\n+\n+    public void testElectionDay0() {\n+        DateTime ymd = USAnniversaries.ELECTION_DAY.create(1996);\n+        assertEquals(ymd, new DateMidnight(1996, DateTimeConstants.NOVEMBER, 5));\n+    }\n+\n+    public void testElectionDay1() {\n+        // no election in 1997\n+        DateTime ymd = USAnniversaries.ELECTION_DAY.create(1997);\n+        assertEquals(ymd, null);\n+    }\n+\n+    public void testElectionDay2() {\n+        DateTime ymd = USAnniversaries.ELECTION_DAY.create(2000);\n+        assertEquals(ymd, new DateMidnight(2000, DateTimeConstants.NOVEMBER, 7));\n+    }\n+\n+    public void testElectionDay3() {\n+        DateTime ymd = USAnniversaries.ELECTION_DAY.create(2004);\n+        assertEquals(ymd, new DateMidnight(2004, DateTimeConstants.NOVEMBER, 2));\n+    }\n+}", "timestamp": 1128779826, "metainfo": ""}