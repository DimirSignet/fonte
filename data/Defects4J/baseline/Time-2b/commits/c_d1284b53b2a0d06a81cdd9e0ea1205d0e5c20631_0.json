{"sha": "d1284b53b2a0d06a81cdd9e0ea1205d0e5c20631", "log": "Slight performance enhancement. No measurable difference using server VM, however.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/FormatUtils.java\n+++ b/JodaTime/src/java/org/joda/time/format/FormatUtils.java\n             for (; size > 2; size--) {\n                 buf.append('0');\n             }\n-            buf.append((char)(value / 10 + '0'));\n-            buf.append((char)(value % 10 + '0'));\n+            // Calculate value div/mod by 10 without using two expensive\n+            // division operations. (2 ^ 27) / 10 = 13421772. Add one to\n+            // value to correct rounding error.\n+            int d = ((value + 1) * 13421772) >> 27;\n+            buf.append((char) (d + '0'));\n+            // Append remainder by calculating (value - d * 10).\n+            buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n         } else {\n             int digits;\n             if (value < 1000) {\n             for (; size > 2; size--) {\n                 out.write('0');\n             }\n-            out.write(value / 10 + '0');\n-            out.write(value % 10 + '0');\n+            // Calculate value div/mod by 10 without using two expensive\n+            // division operations. (2 ^ 27) / 10 = 13421772. Add one to\n+            // value to correct rounding error.\n+            int d = ((value + 1) * 13421772) >> 27;\n+            out.write(d + '0');\n+            // Append remainder by calculating (value - d * 10).\n+            out.write(value - (d << 3) - (d << 1) + '0');\n         } else {\n             int digits;\n             if (value < 1000) {\n         if (value < 10) {\n             buf.append((char)(value + '0'));\n         } else if (value < 100) {\n-            buf.append((char)(value / 10 + '0'));\n-            buf.append((char)(value % 10 + '0'));\n+            // Calculate value div/mod by 10 without using two expensive\n+            // division operations. (2 ^ 27) / 10 = 13421772. Add one to\n+            // value to correct rounding error.\n+            int d = ((value + 1) * 13421772) >> 27;\n+            buf.append((char) (d + '0'));\n+            // Append remainder by calculating (value - d * 10).\n+            buf.append((char) (value - (d << 3) - (d << 1) + '0'));\n         } else {\n             buf.append(Integer.toString(value));\n         }\n         if (value < 10) {\n             out.write(value + '0');\n         } else if (value < 100) {\n-            out.write(value / 10 + '0');\n-            out.write(value % 10 + '0');\n+            // Calculate value div/mod by 10 without using two expensive\n+            // division operations. (2 ^ 27) / 10 = 13421772. Add one to\n+            // value to correct rounding error.\n+            int d = ((value + 1) * 13421772) >> 27;\n+            out.write(d + '0');\n+            // Append remainder by calculating (value - d * 10).\n+            out.write(value - (d << 3) - (d << 1) + '0');\n         } else {\n             out.write(Integer.toString(value));\n         }", "timestamp": 1102885187, "metainfo": ""}