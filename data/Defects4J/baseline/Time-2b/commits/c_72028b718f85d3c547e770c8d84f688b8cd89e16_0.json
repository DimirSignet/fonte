{"sha": "72028b718f85d3c547e770c8d84f688b8cd89e16", "log": "Permission checks in place.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n      * This method changes the behaviour of {@link #currentTimeMillis()}.\n      * Whenever the current time is queried, {@link System#currentTimeMillis()} is used.\n      */\n-    public static void setCurrentMillisSystem() {\n+    public static void setCurrentMillisSystem() throws SecurityException {\n+        checkPermission();\n         cMillisProvider = SYSTEM_MILLIS_PROVIDER;\n     }\n \n      * \n      * @param fixedMillis  the fixed millisecond time to use\n      */\n-    public static void setCurrentMillisFixed(long fixedMillis) {\n+    public static void setCurrentMillisFixed(long fixedMillis) throws SecurityException {\n+        checkPermission();\n         cMillisProvider = new FixedMillisProvider(fixedMillis);\n     }\n \n      * \n      * @param offsetMillis  the fixed millisecond time to use\n      */\n-    public static void setCurrentMillisOffset(long offsetMillis) {\n+    public static void setCurrentMillisOffset(long offsetMillis) throws SecurityException {\n+        checkPermission();\n         cMillisProvider = new OffsetMillisProvider(offsetMillis);\n+    }\n+\n+    private static void checkPermission() throws SecurityException {\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            sm.checkPermission(new JodaTimePermission(\"CurrentTime.setProvider\"));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/convert/ConverterManager.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ConverterManager.java\n  * information on the Joda project, please see <http://www.joda.org/>.\n  */\n package org.joda.time.convert;\n+\n+import org.joda.time.JodaTimePermission;\n \n /**\n  * ConverterManager controls the date and time converters.\n      * @param converter  the converter to add, null ignored\n      * @return replaced converter, or null\n      */\n-    public InstantConverter addInstantConverter(InstantConverter converter) {\n+    public InstantConverter addInstantConverter(InstantConverter converter)\n+        throws SecurityException\n+    {\n+        checkAlterInstantConverters();\n         if (converter == null) {\n             return null;\n         }\n      * @param converter  the converter to remove, null ignored\n      * @return replaced converter, or null\n      */\n-    public InstantConverter removeInstantConverter(InstantConverter converter) {\n+    public InstantConverter removeInstantConverter(InstantConverter converter)\n+        throws SecurityException\n+    {\n+        checkAlterInstantConverters();\n         if (converter == null) {\n             return null;\n         }\n      * @return replaced converter, or null\n      * @throws IndexOutOfBoundsException if the index is invalid\n      */\n-    public InstantConverter removeInstantConverter(int index) {\n+    public InstantConverter removeInstantConverter(int index) throws SecurityException {\n+        checkAlterInstantConverters();\n         InstantConverter[] removed = new InstantConverter[1];\n         iInstantConverters = iInstantConverters.remove(index, removed);\n         return removed[0];\n+    }\n+\n+    private void checkAlterInstantConverters() throws SecurityException {\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            sm.checkPermission(new JodaTimePermission(\"ConverterManager.alterInstantConverters\"));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n      * @param converter  the converter to add, null ignored\n      * @return replaced converter, or null\n      */\n-    public DurationConverter addDurationConverter(DurationConverter converter) {\n+    public DurationConverter addDurationConverter(DurationConverter converter)\n+        throws SecurityException\n+    {\n+        checkAlterDurationConverters();\n         if (converter == null) {\n             return null;\n         }\n      * @param converter  the converter to remove, null ignored\n      * @return replaced converter, or null\n      */\n-    public DurationConverter removeDurationConverter(DurationConverter converter) {\n+    public DurationConverter removeDurationConverter(DurationConverter converter)\n+        throws SecurityException\n+    {\n+        checkAlterDurationConverters();\n         if (converter == null) {\n             return null;\n         }\n      * @return replaced converter, or null\n      * @throws IndexOutOfBoundsException if the index is invalid\n      */\n-    public DurationConverter removeDurationConverter(int index) {\n+    public DurationConverter removeDurationConverter(int index) throws SecurityException {\n+        checkAlterDurationConverters();\n         DurationConverter[] removed = new DurationConverter[1];\n         iDurationConverters = iDurationConverters.remove(index, removed);\n         return removed[0];\n+    }\n+\n+    private void checkAlterDurationConverters() throws SecurityException {\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            sm.checkPermission(new JodaTimePermission(\"ConverterManager.alterDurationConverters\"));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n      * @param converter  the converter to add, null ignored\n      * @return replaced converter, or null\n      */\n-    public IntervalConverter addIntervalConverter(IntervalConverter converter) {\n+    public IntervalConverter addIntervalConverter(IntervalConverter converter) \n+        throws SecurityException\n+    {\n+        checkAlterIntervalConverters();\n         if (converter == null) {\n             return null;\n         }\n      * @param converter  the converter to remove, null ignored\n      * @return replaced converter, or null\n      */\n-    public IntervalConverter removeIntervalConverter(IntervalConverter converter) {\n+    public IntervalConverter removeIntervalConverter(IntervalConverter converter)\n+        throws SecurityException\n+    {\n+        checkAlterIntervalConverters();\n         if (converter == null) {\n             return null;\n         }\n      * @return replaced converter, or null\n      * @throws IndexOutOfBoundsException if the index is invalid\n      */\n-    public IntervalConverter removeIntervalConverter(int index) {\n+    public IntervalConverter removeIntervalConverter(int index) throws SecurityException {\n+        checkAlterIntervalConverters();\n         IntervalConverter[] removed = new IntervalConverter[1];\n         iIntervalConverters = iIntervalConverters.remove(index, removed);\n         return removed[0];\n+    }\n+\n+    private void checkAlterIntervalConverters() throws SecurityException {\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            sm.checkPermission(new JodaTimePermission(\"ConverterManager.alterIntervalConverters\"));\n+        }\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1082222298, "metainfo": ""}