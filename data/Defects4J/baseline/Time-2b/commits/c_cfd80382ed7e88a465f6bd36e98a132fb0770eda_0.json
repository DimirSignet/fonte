{"sha": "cfd80382ed7e88a465f6bd36e98a132fb0770eda", "log": "Use standard 1.x branch naming for property methods  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDate.java\n      * <p>\n      * These two lines are equivalent:\n      * <pre>\n+     * LocalDate updated = dt.withDayOfMonth(6);\n      * LocalDate updated = dt.withField(DateTimeFieldType.dayOfMonth(), 6);\n-     * LocalDate updated = dt.dayOfMonth().withValue(6);\n      * </pre>\n      *\n      * @param fieldType  the field type to set, not null\n      * </pre>\n      * <p>\n      * Methods are also provided that allow date modification. These return\n-     * new instances of LocalDate - they do not modify the original.\n-     * The example below yields two independent immutable date objects\n-     * 20 years apart.\n+     * new instances of LocalDate - they do not modify the original. The example\n+     * below yields two independent immutable date objects 20 years apart.\n      * <pre>\n      * LocalDate dt = new LocalDate(1972, 12, 3);\n-     * LocalDate dt1920 = dt.year().withValue(1920);\n+     * LocalDate dt1920 = dt.year().setCopy(1920);\n      * </pre>\n      * <p>\n-     * LocalDate.Propery itself is thread-safe and immutable, as well as the\n+     * LocalDate.Property itself is thread-safe and immutable, as well as the\n      * LocalDate being operated on.\n      *\n      * @author Stephen Colebourne\n          * @return a copy of the LocalDate with the field value changed\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n-        public LocalDate plus(int value) {\n+        public LocalDate addToCopy(int value) {\n             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));\n         }\n         \n         /**\n          * Adds to this field, possibly wrapped, in a copy of this LocalDate.\n          * A field wrapped operation only changes this field.\n-         * Thus 31st January plusWrapField one day goes to the 1st January.\n+         * Thus 31st January addWrapField one day goes to the 1st January.\n          * <p>\n          * The LocalDate attached to this property is unchanged by this call.\n          *\n          * @return a copy of the LocalDate with the field value changed\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n-        public LocalDate plusWrapField(int value) {\n+        public LocalDate addWrapFieldToCopy(int value) {\n             return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));\n         }\n         \n          * @return a copy of the LocalDate with the field value changed\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n-        public LocalDate withValue(int value) {\n+        public LocalDate setCopy(int value) {\n             return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));\n         }\n         \n          * @return a copy of the LocalDate with the field value changed\n          * @throws IllegalArgumentException if the text value isn't valid\n          */\n-        public LocalDate withValue(String text, Locale locale) {\n+        public LocalDate setCopy(String text, Locale locale) {\n             return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));\n         }\n         \n          * @return a copy of the LocalDate with the field value changed\n          * @throws IllegalArgumentException if the text value isn't valid\n          */\n-        public LocalDate withValue(String text) {\n-            return withValue(text, null);\n+        public LocalDate setCopy(String text) {\n+            return setCopy(text, null);\n         }\n         \n         //-----------------------------------------------------------------------\n          * @return a copy of the LocalDate with this field set to its maximum\n          */\n         public LocalDate withMaximumValue() {\n-            return withValue(getMaximumValue());\n+            return setCopy(getMaximumValue());\n         }\n         \n         /**\n          * @return a copy of the LocalDate with this field set to its minimum\n          */\n         public LocalDate withMinimumValue() {\n-            return withValue(getMinimumValue());\n+            return setCopy(getMinimumValue());\n         }\n         \n         //-----------------------------------------------------------------------\n          *\n          * @return a copy of the LocalDate with the field value changed\n          */\n-        public LocalDate roundFloor() {\n+        public LocalDate roundFloorCopy() {\n             return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDate with the field value changed\n          */\n-        public LocalDate roundCeiling() {\n+        public LocalDate roundCeilingCopy() {\n             return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDate with the field value changed\n          */\n-        public LocalDate roundHalfFloor() {\n+        public LocalDate roundHalfFloorCopy() {\n             return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDate with the field value changed\n          */\n-        public LocalDate roundHalfCeiling() {\n+        public LocalDate roundHalfCeilingCopy() {\n             return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDate with the field value changed\n          */\n-        public LocalDate roundHalfEven() {\n+        public LocalDate roundHalfEvenCopy() {\n             return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));\n         }\n     }\n--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java\n      * String monthStr = dt.month().getAsText();\n      * </pre>\n      * <p>\n-     * Methods are also provided that allow date modification. These return new instances\n-     * of DateTime - they do not modify the original. The example below yields two\n-     * independent immutable date objects 20 years apart.\n-     * <pre>\n-     * LocalDateTime dt = new LocalDateTime(1972, 12, 3, 0, 0, 0, 0);\n+     * Methods are also provided that allow date modification. These return\n+     * new instances of LocalDateTime - they do not modify the original.\n+     * The example below yields two independent immutable date objects\n+     * 20 years apart.\n+     * <pre>\n+     * LocalDateTime dt = new LocalDateTime(1972, 12, 3, 0, 0);\n      * LocalDateTime dt1920 = dt.year().setCopy(1920);\n      * </pre>\n      * <p>\n-     * LocalDateTime.Propery itself is thread-safe and immutable, as well as the\n+     * LocalDateTime.Property itself is thread-safe and immutable, as well as the\n      * LocalDateTime being operated on.\n      *\n      * @author Stephen Colebourne\n          * @return a copy of the LocalDateTime with the field value changed\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n-        public LocalDateTime plus(int value) {\n+        public LocalDateTime addToCopy(int value) {\n             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));\n         }\n         \n          * @return a copy of the LocalDateTime with the field value changed\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n-        public LocalDateTime plus(long value) {\n+        public LocalDateTime addToCopy(long value) {\n             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));\n         }\n         \n         /**\n          * Adds to this field, possibly wrapped, in a copy of this LocalDateTime.\n          * A field wrapped operation only changes this field.\n-         * Thus 31st January plusWrapField one day goes to the 1st January.\n+         * Thus 31st January addWrapField one day goes to the 1st January.\n          * <p>\n          * The LocalDateTime attached to this property is unchanged by this call.\n          *\n          * @return a copy of the LocalDateTime with the field value changed\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n-        public LocalDateTime plusWrapField(int value) {\n+        public LocalDateTime addWrapFieldToCopy(int value) {\n             return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));\n         }\n         \n          * @return a copy of the LocalDateTime with the field value changed\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n-        public LocalDateTime withValue(int value) {\n+        public LocalDateTime setCopy(int value) {\n             return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));\n         }\n         \n          * @return a copy of the LocalDateTime with the field value changed\n          * @throws IllegalArgumentException if the text value isn't valid\n          */\n-        public LocalDateTime withValue(String text, Locale locale) {\n+        public LocalDateTime setCopy(String text, Locale locale) {\n             return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));\n         }\n         \n          * @return a copy of the LocalDateTime with the field value changed\n          * @throws IllegalArgumentException if the text value isn't valid\n          */\n-        public LocalDateTime withValue(String text) {\n-            return withValue(text, null);\n+        public LocalDateTime setCopy(String text) {\n+            return setCopy(text, null);\n         }\n         \n         //-----------------------------------------------------------------------\n          * @return a copy of the LocalDateTime with this field set to its maximum\n          */\n         public LocalDateTime withMaximumValue() {\n-            return withValue(getMaximumValue());\n+            return setCopy(getMaximumValue());\n         }\n         \n         /**\n          * @return a copy of the LocalDateTime with this field set to its minimum\n          */\n         public LocalDateTime withMinimumValue() {\n-            return withValue(getMinimumValue());\n+            return setCopy(getMinimumValue());\n         }\n         \n         //-----------------------------------------------------------------------\n          *\n          * @return a copy of the LocalDateTime with the field value changed\n          */\n-        public LocalDateTime roundFloor() {\n+        public LocalDateTime roundFloorCopy() {\n             return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDateTime with the field value changed\n          */\n-        public LocalDateTime roundCeiling() {\n+        public LocalDateTime roundCeilingCopy() {\n             return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDateTime with the field value changed\n          */\n-        public LocalDateTime roundHalfFloor() {\n+        public LocalDateTime roundHalfFloorCopy() {\n             return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDateTime with the field value changed\n          */\n-        public LocalDateTime roundHalfCeiling() {\n+        public LocalDateTime roundHalfCeilingCopy() {\n             return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalDateTime with the field value changed\n          */\n-        public LocalDateTime roundHalfEven() {\n+        public LocalDateTime roundHalfEvenCopy() {\n             return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));\n         }\n     }\n--- a/JodaTime/src/java/org/joda/time/LocalTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalTime.java\n      * powerful datetime functionality to be easily accessed.\n      * <p>\n      * The simplest use of this class is as an alternative get method, here used to\n-     * get the year '1972' (as an int) and the month 'December' (as a String).\n+     * get the minute '30'.\n      * <pre>\n-     * LocalTime dt = new LocalTime(1972, 12, 3, 0, 0);\n-     * int year = dt.year().get();\n-     * String monthStr = dt.month().getAsText();\n+     * LocalTime dt = new LocalTime(12, 30);\n+     * int year = dt.minuteOfHour().get();\n      * </pre>\n      * <p>\n-     * Methods are also provided that allow date modification. These return new instances\n-     * of DateTime - they do not modify the original. The example below yields two\n-     * independent immutable date objects 20 years apart.\n+     * Methods are also provided that allow time modification. These return\n+     * new instances of LocalTime - they do not modify the original. The example\n+     * below yields two independent immutable date objects 2 hours apart.\n      * <pre>\n-     * DateTime dt = new DateTime(1972, 12, 3, 0, 0, 0, 0);\n-     * DateTime dt1920 = dt.year().setCopy(1920);\n+     * LocalTime dt1230 = new LocalTime(12, 30);\n+     * LocalTime dt1430 = dt1230.hourOfDay().setCopy(14);\n      * </pre>\n      * <p>\n-     * LocalTime.Propery itself is thread-safe and immutable, as well as the\n+     * LocalTime.Property itself is thread-safe and immutable, as well as the\n      * LocalTime being operated on.\n      *\n      * @author Stephen Colebourne\n          * @param value  the value to add to the field in the copy\n          * @return a copy of the LocalTime with the field value changed\n          */\n-        public LocalTime plus(int value) {\n+        public LocalTime addCopy(int value) {\n             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));\n         }\n         \n          * @param value  the value to add to the field in the copy\n          * @return a copy of the LocalTime with the field value changed\n          */\n-        public LocalTime plus(long value) {\n+        public LocalTime addCopy(long value) {\n             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));\n         }\n         \n          * Adds to this field in a copy of this LocalTime.\n          * If the addition exceeds the maximum value (eg. 23:59) then\n          * an exception will be thrown.\n-         * Contrast this behaviour to {@link #plus(int)}.\n+         * Contrast this behaviour to {@link #addCopy(int)}.\n          * <p>\n          * The LocalTime attached to this property is unchanged by this call.\n          *\n          * @return a copy of the LocalTime with the field value changed\n          * @throws IllegalArgumentException if the result is invalid\n          */\n-        public LocalTime plusNoWrap(int value) {\n+        public LocalTime addNoWrapToCopy(int value) {\n             long millis = iField.add(iInstant.getLocalMillis(), value);\n             long rounded = iInstant.getChronology().millisOfDay().get(millis);\n             if (rounded != millis) {\n          * @return a copy of the LocalTime with the field value changed\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n-        public LocalTime plusWrapField(int value) {\n+        public LocalTime addWrapFieldToCopy(int value) {\n             return iInstant.withLocalMillis(iField.addWrapField(iInstant.getLocalMillis(), value));\n         }\n         \n          * @return a copy of the LocalTime with the field value changed\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n-        public LocalTime withValue(int value) {\n+        public LocalTime setCopy(int value) {\n             return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), value));\n         }\n         \n          * @return a copy of the LocalTime with the field value changed\n          * @throws IllegalArgumentException if the text value isn't valid\n          */\n-        public LocalTime withValue(String text, Locale locale) {\n+        public LocalTime setCopy(String text, Locale locale) {\n             return iInstant.withLocalMillis(iField.set(iInstant.getLocalMillis(), text, locale));\n         }\n         \n          * @return a copy of the LocalTime with the field value changed\n          * @throws IllegalArgumentException if the text value isn't valid\n          */\n-        public LocalTime withValue(String text) {\n-            return withValue(text, null);\n+        public LocalTime setCopy(String text) {\n+            return setCopy(text, null);\n         }\n         \n         //-----------------------------------------------------------------------\n          * @return a copy of the LocalTime with this field set to its maximum\n          */\n         public LocalTime withMaximumValue() {\n-            return withValue(getMaximumValue());\n+            return setCopy(getMaximumValue());\n         }\n         \n         /**\n          * @return a copy of the LocalTime with this field set to its minimum\n          */\n         public LocalTime withMinimumValue() {\n-            return withValue(getMinimumValue());\n+            return setCopy(getMinimumValue());\n         }\n         \n         //-----------------------------------------------------------------------\n          *\n          * @return a copy of the LocalTime with the field value changed\n          */\n-        public LocalTime roundFloor() {\n+        public LocalTime roundFloorCopy() {\n             return iInstant.withLocalMillis(iField.roundFloor(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalTime with the field value changed\n          */\n-        public LocalTime roundCeiling() {\n+        public LocalTime roundCeilingCopy() {\n             return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalTime with the field value changed\n          */\n-        public LocalTime roundHalfFloor() {\n+        public LocalTime roundHalfFloorCopy() {\n             return iInstant.withLocalMillis(iField.roundHalfFloor(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalTime with the field value changed\n          */\n-        public LocalTime roundHalfCeiling() {\n+        public LocalTime roundHalfCeilingCopy() {\n             return iInstant.withLocalMillis(iField.roundHalfCeiling(iInstant.getLocalMillis()));\n         }\n         \n          *\n          * @return a copy of the LocalTime with the field value changed\n          */\n-        public LocalTime roundHalfEven() {\n+        public LocalTime roundHalfEvenCopy() {\n             return iInstant.withLocalMillis(iField.roundHalfEven(iInstant.getLocalMillis()));\n         }\n     }\n--- a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Properties.java\n         assertEquals(292278993, test.year().getMaximumValueOverall());\n     }\n \n-    public void testPropertyPlusYear() {\n-        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.year().plus(9);\n+    public void testPropertyAddToCopyYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.year().addToCopy(9);\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 1981, 6, 9, 10, 20, 30, 40);\n         \n-        copy = test.year().plus(0);\n+        copy = test.year().addToCopy(0);\n         check(copy, 1972, 6, 9, 10, 20, 30, 40);\n         \n-        copy = test.year().plus(292278993 - 1972);\n+        copy = test.year().addToCopy(292278993 - 1972);\n         check(copy, 292278993, 6, 9, 10, 20, 30, 40);\n         \n         try {\n-            test.year().plus(292278993 - 1972 + 1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 1972, 6, 9, 10, 20, 30, 40);\n-        \n-        copy = test.year().plus(-1972);\n+            test.year().addToCopy(292278993 - 1972 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+        \n+        copy = test.year().addToCopy(-1972);\n         check(copy, 0, 6, 9, 10, 20, 30, 40);\n         \n-        copy = test.year().plus(-1973);\n+        copy = test.year().addToCopy(-1973);\n         check(copy, -1, 6, 9, 10, 20, 30, 40);\n         \n         try {\n-            test.year().plus(-292275054 - 1972 - 1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 1972, 6, 9, 10, 20, 30, 40);\n-    }\n-\n-    public void testPropertyPlusWrapFieldYear() {\n-        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.year().plusWrapField(9);\n+            test.year().addToCopy(-292275054 - 1972 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldToCopyYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.year().addWrapFieldToCopy(9);\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 1981, 6, 9, 10, 20, 30, 40);\n         \n-        copy = test.year().plusWrapField(0);\n+        copy = test.year().addWrapFieldToCopy(0);\n         check(copy, 1972, 6, 9, 10, 20, 30, 40);\n         \n-        copy = test.year().plusWrapField(292278993 - 1972 + 1);\n+        copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1);\n         check(copy, -292275054, 6, 9, 10, 20, 30, 40);\n         \n-        copy = test.year().plusWrapField(-292275054 - 1972 - 1);\n+        copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);\n         check(copy, 292278993, 6, 9, 10, 20, 30, 40);\n     }\n \n-    public void testPropertyWithYear() {\n-        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.year().withValue(12);\n+    public void testPropertySetCopyYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.year().setCopy(12);\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 12, 6, 9, 10, 20, 30, 40);\n     }\n \n-    public void testPropertyWithTextYear() {\n-        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.year().withValue(\"12\");\n+    public void testPropertySetCopyTextYear() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.year().setCopy(\"12\");\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 12, 6, 9, 10, 20, 30, 40);\n     }\n         assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n     }\n \n-    public void testPropertyPlusMonth() {\n-        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.monthOfYear().plus(6);\n+    public void testPropertyAddToCopyMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.monthOfYear().addToCopy(6);\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 1972, 12, 9, 10, 20, 30, 40);\n         \n-        copy = test.monthOfYear().plus(7);\n+        copy = test.monthOfYear().addToCopy(7);\n         check(copy, 1973, 1, 9, 10, 20, 30, 40);\n         \n-        copy = test.monthOfYear().plus(-5);\n+        copy = test.monthOfYear().addToCopy(-5);\n         check(copy, 1972, 1, 9, 10, 20, 30, 40);\n         \n-        copy = test.monthOfYear().plus(-6);\n+        copy = test.monthOfYear().addToCopy(-6);\n         check(copy, 1971, 12, 9, 10, 20, 30, 40);\n         \n         test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);\n-        copy = test.monthOfYear().plus(1);\n+        copy = test.monthOfYear().addToCopy(1);\n         check(copy, 1972, 2, 29, 10, 20, 30, 40);\n         \n-        copy = test.monthOfYear().plus(2);\n+        copy = test.monthOfYear().addToCopy(2);\n         check(copy, 1972, 3, 31, 10, 20, 30, 40);\n         \n-        copy = test.monthOfYear().plus(3);\n+        copy = test.monthOfYear().addToCopy(3);\n         check(copy, 1972, 4, 30, 10, 20, 30, 40);\n         \n         test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40);\n-        copy = test.monthOfYear().plus(1);\n+        copy = test.monthOfYear().addToCopy(1);\n         check(copy, 1971, 2, 28, 10, 20, 30, 40);\n     }\n \n-    public void testPropertyPlusWrapFieldMonth() {\n-        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.monthOfYear().plusWrapField(4);\n+    public void testPropertyAddWrapFieldToCopyMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.monthOfYear().addWrapFieldToCopy(4);\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 1972, 10, 9, 10, 20, 30, 40);\n         \n-        copy = test.monthOfYear().plusWrapField(8);\n+        copy = test.monthOfYear().addWrapFieldToCopy(8);\n         check(copy, 1972, 2, 9, 10, 20, 30, 40);\n         \n-        copy = test.monthOfYear().plusWrapField(-8);\n+        copy = test.monthOfYear().addWrapFieldToCopy(-8);\n         check(copy, 1972, 10, 9, 10, 20, 30, 40);\n         \n         test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);\n-        copy = test.monthOfYear().plusWrapField(1);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n         check(copy, 1972, 2, 29, 10, 20, 30, 40);\n         \n-        copy = test.monthOfYear().plusWrapField(2);\n+        copy = test.monthOfYear().addWrapFieldToCopy(2);\n         check(copy, 1972, 3, 31, 10, 20, 30, 40);\n         \n-        copy = test.monthOfYear().plusWrapField(3);\n+        copy = test.monthOfYear().addWrapFieldToCopy(3);\n         check(copy, 1972, 4, 30, 10, 20, 30, 40);\n         \n         test = new LocalDateTime(1971, 1, 31, 10, 20, 30, 40);\n-        copy = test.monthOfYear().plusWrapField(1);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n         check(copy, 1971, 2, 28, 10, 20, 30, 40);\n     }\n \n-    public void testPropertyWithMonth() {\n-        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.monthOfYear().withValue(12);\n+    public void testPropertySetCopyMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.monthOfYear().setCopy(12);\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 1972, 12, 9, 10, 20, 30, 40);\n         \n         test = new LocalDateTime(1972, 1, 31, 10, 20, 30, 40);\n-        copy = test.monthOfYear().withValue(2);\n+        copy = test.monthOfYear().setCopy(2);\n         check(copy, 1972, 2, 29, 10, 20, 30, 40);\n         \n         try {\n-            test.monthOfYear().withValue(13);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            test.monthOfYear().withValue(0);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    public void testPropertyWithTextMonth() {\n-        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.monthOfYear().withValue(\"12\");\n+            test.monthOfYear().setCopy(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.monthOfYear().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetCopyTextMonth() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.monthOfYear().setCopy(\"12\");\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 1972, 12, 9, 10, 20, 30, 40);\n         \n-        copy = test.monthOfYear().withValue(\"December\");\n+        copy = test.monthOfYear().setCopy(\"December\");\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 1972, 12, 9, 10, 20, 30, 40);\n         \n-        copy = test.monthOfYear().withValue(\"Dec\");\n+        copy = test.monthOfYear().setCopy(\"Dec\");\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 1972, 12, 9, 10, 20, 30, 40);\n     }\n         assertEquals(28, test.dayOfMonth().getMaximumValue());\n     }\n \n-    public void testPropertyPlusDay() {\n-        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.dayOfMonth().plus(9);\n+    public void testPropertyAddToCopyDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().addToCopy(9);\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 1972, 6, 18, 10, 20, 30, 40);\n         \n-        copy = test.dayOfMonth().plus(21);\n+        copy = test.dayOfMonth().addToCopy(21);\n         check(copy, 1972, 6, 30, 10, 20, 30, 40);\n         \n-        copy = test.dayOfMonth().plus(22);\n+        copy = test.dayOfMonth().addToCopy(22);\n         check(copy, 1972, 7, 1, 10, 20, 30, 40);\n         \n-        copy = test.dayOfMonth().plus(22 + 30);\n+        copy = test.dayOfMonth().addToCopy(22 + 30);\n         check(copy, 1972, 7, 31, 10, 20, 30, 40);\n         \n-        copy = test.dayOfMonth().plus(22 + 31);\n+        copy = test.dayOfMonth().addToCopy(22 + 31);\n         check(copy, 1972, 8, 1, 10, 20, 30, 40);\n \n-        copy = test.dayOfMonth().plus(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n         check(copy, 1972, 12, 31, 10, 20, 30, 40);\n         \n-        copy = test.dayOfMonth().plus(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n         check(copy, 1973, 1, 1, 10, 20, 30, 40);\n         \n-        copy = test.dayOfMonth().plus(-8);\n+        copy = test.dayOfMonth().addToCopy(-8);\n         check(copy, 1972, 6, 1, 10, 20, 30, 40);\n         \n-        copy = test.dayOfMonth().plus(-9);\n+        copy = test.dayOfMonth().addToCopy(-9);\n         check(copy, 1972, 5, 31, 10, 20, 30, 40);\n         \n-        copy = test.dayOfMonth().plus(-8 - 31 - 30 - 31 - 29 - 31);\n+        copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n         check(copy, 1972, 1, 1, 10, 20, 30, 40);\n         \n-        copy = test.dayOfMonth().plus(-9 - 31 - 30 - 31 - 29 - 31);\n+        copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n         check(copy, 1971, 12, 31, 10, 20, 30, 40);\n     }\n \n-    public void testPropertyPlusWrapFieldDay() {\n-        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.dayOfMonth().plusWrapField(21);\n+    public void testPropertyAddWrapFieldToCopyDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().addWrapFieldToCopy(21);\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 1972, 6, 30, 10, 20, 30, 40);\n         \n-        copy = test.dayOfMonth().plusWrapField(22);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n         check(copy, 1972, 6, 1, 10, 20, 30, 40);\n         \n-        copy = test.dayOfMonth().plusWrapField(-12);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n         check(copy, 1972, 6, 27, 10, 20, 30, 40);\n         \n         test = new LocalDateTime(1972, 7, 9, 10, 20, 30, 40);\n-        copy = test.dayOfMonth().plusWrapField(21);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(21);\n         check(copy, 1972, 7, 30, 10, 20, 30, 40);\n     \n-        copy = test.dayOfMonth().plusWrapField(22);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n         check(copy, 1972, 7, 31, 10, 20, 30, 40);\n     \n-        copy = test.dayOfMonth().plusWrapField(23);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(23);\n         check(copy, 1972, 7, 1, 10, 20, 30, 40);\n     \n-        copy = test.dayOfMonth().plusWrapField(-12);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n         check(copy, 1972, 7, 28, 10, 20, 30, 40);\n     }\n \n-    public void testPropertyWithDay() {\n-        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.dayOfMonth().withValue(12);\n+    public void testPropertySetCopyDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().setCopy(12);\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 1972, 6, 12, 10, 20, 30, 40);\n         \n         try {\n-            test.dayOfMonth().withValue(31);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            test.dayOfMonth().withValue(0);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    public void testPropertyWithTextDay() {\n-        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.dayOfMonth().withValue(\"12\");\n+            test.dayOfMonth().setCopy(31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfMonth().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetCopyTextDay() {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.dayOfMonth().setCopy(\"12\");\n         check(test, 1972, 6, 9, 10, 20, 30, 40);\n         check(copy, 1972, 6, 12, 10, 20, 30, 40);\n     }\n \n     public void testPropertyRoundHour() {\n         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20);\n-        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 11, 0, 0, 0);\n-        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 10, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 10, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 10, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0);\n         \n         test = new LocalDateTime(2005, 6, 9, 10, 40);\n-        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 11, 0, 0, 0);\n-        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 10, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 11, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 11, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 11, 0, 0, 0);\n         \n         test = new LocalDateTime(2005, 6, 9, 10, 30);\n-        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 11, 0, 0, 0);\n-        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 10, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 11, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 10, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 10, 0, 0, 0);\n         \n         test = new LocalDateTime(2005, 6, 9, 11, 30);\n-        check(test.hourOfDay().roundCeiling(), 2005, 6, 9, 12, 0, 0, 0);\n-        check(test.hourOfDay().roundFloor(), 2005, 6, 9, 11, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfCeiling(), 2005, 6, 9, 12, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfFloor(), 2005, 6, 9, 11, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfEven(), 2005, 6, 9, 12, 0, 0, 0);\n+        check(test.hourOfDay().roundCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 2005, 6, 9, 12, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 2005, 6, 9, 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 2005, 6, 9, 12, 0, 0, 0);\n     }\n \n     public void testPropertyGetMaxMinValuesHour() {\n         check(test.hourOfDay().withMinimumValue(), 2005, 6, 9, 0, 20, 30, 40);\n     }\n \n-    public void testPropertyPlusHour() {\n-        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.hourOfDay().plus(9);\n+    public void testPropertyAddToCopyHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().addToCopy(9);\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 19, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plus(0);\n+        copy = test.hourOfDay().addToCopy(0);\n         check(copy, 2005, 6, 9, 10, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plus(13);\n+        copy = test.hourOfDay().addToCopy(13);\n         check(copy, 2005, 6, 9, 23, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plus(14);\n+        copy = test.hourOfDay().addToCopy(14);\n         check(copy, 2005, 6, 10, 0, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plus(-10);\n+        copy = test.hourOfDay().addToCopy(-10);\n         check(copy, 2005, 6, 9, 0, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plus(-11);\n+        copy = test.hourOfDay().addToCopy(-11);\n         check(copy, 2005, 6, 8, 23, 20, 30, 40);\n     }\n \n-    public void testPropertyPlusWrapFieldHour() {\n-        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.hourOfDay().plusWrapField(9);\n+    public void testPropertyAddWrapFieldToCopyHour() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.hourOfDay().addWrapFieldToCopy(9);\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 19, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plusWrapField(0);\n+        copy = test.hourOfDay().addWrapFieldToCopy(0);\n         check(copy, 2005, 6, 9, 10, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plusWrapField(18);\n+        copy = test.hourOfDay().addWrapFieldToCopy(18);\n         check(copy, 2005, 6, 9, 4, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plusWrapField(-15);\n+        copy = test.hourOfDay().addWrapFieldToCopy(-15);\n         check(copy, 2005, 6, 9, 19, 20, 30, 40);\n     }\n \n     public void testPropertySetHour() {\n         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.hourOfDay().withValue(12);\n+        LocalDateTime copy = test.hourOfDay().setCopy(12);\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 12, 20, 30, 40);\n         \n         try {\n-            test.hourOfDay().withValue(24);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            test.hourOfDay().withValue(-1);\n+            test.hourOfDay().setCopy(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.hourOfDay().setCopy(-1);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testPropertySetTextHour() {\n         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.hourOfDay().withValue(\"12\");\n+        LocalDateTime copy = test.hourOfDay().setCopy(\"12\");\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 12, 20, 30, 40);\n     }\n         check(test.minuteOfHour().withMinimumValue(), 2005, 6, 9, 10, 0, 30, 40);\n     }\n \n-    public void testPropertyPlusMinute() {\n-        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.minuteOfHour().plus(9);\n+    public void testPropertyAddToCopyMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.minuteOfHour().addToCopy(9);\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 10, 29, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(39);\n+        copy = test.minuteOfHour().addToCopy(39);\n         check(copy, 2005, 6, 9, 10, 59, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(40);\n+        copy = test.minuteOfHour().addToCopy(40);\n         check(copy, 2005, 6, 9, 11, 0, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(1 * 60 + 45);\n+        copy = test.minuteOfHour().addToCopy(1 * 60 + 45);\n         check(copy, 2005, 6, 9, 12, 5, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(13 * 60 + 39);\n+        copy = test.minuteOfHour().addToCopy(13 * 60 + 39);\n         check(copy, 2005, 6, 9, 23, 59, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(13 * 60 + 40);\n+        copy = test.minuteOfHour().addToCopy(13 * 60 + 40);\n         check(copy, 2005, 6, 10, 0, 0, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(-9);\n+        copy = test.minuteOfHour().addToCopy(-9);\n         check(copy, 2005, 6, 9, 10, 11, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(-19);\n+        copy = test.minuteOfHour().addToCopy(-19);\n         check(copy, 2005, 6, 9, 10, 1, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(-20);\n+        copy = test.minuteOfHour().addToCopy(-20);\n         check(copy, 2005, 6, 9, 10, 0, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(-21);\n+        copy = test.minuteOfHour().addToCopy(-21);\n         check(copy, 2005, 6, 9, 9, 59, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(-(10 * 60 + 20));\n+        copy = test.minuteOfHour().addToCopy(-(10 * 60 + 20));\n         check(copy, 2005, 6, 9, 0, 0, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(-(10 * 60 + 21));\n+        copy = test.minuteOfHour().addToCopy(-(10 * 60 + 21));\n         check(copy, 2005, 6, 8, 23, 59, 30, 40);\n     }\n \n-    public void testPropertyPlusWrapFieldMinute() {\n-        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.minuteOfHour().plusWrapField(9);\n+    public void testPropertyAddWrapFieldToCopyMinute() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.minuteOfHour().addWrapFieldToCopy(9);\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 10, 29, 30, 40);\n         \n-        copy = test.minuteOfHour().plusWrapField(49);\n+        copy = test.minuteOfHour().addWrapFieldToCopy(49);\n         check(copy, 2005, 6, 9, 10, 9, 30, 40);\n         \n-        copy = test.minuteOfHour().plusWrapField(-47);\n+        copy = test.minuteOfHour().addWrapFieldToCopy(-47);\n         check(copy, 2005, 6, 9, 10, 33, 30, 40);\n     }\n \n     public void testPropertySetMinute() {\n         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.minuteOfHour().withValue(12);\n+        LocalDateTime copy = test.minuteOfHour().setCopy(12);\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 10, 12, 30, 40);\n         \n         try {\n-            test.minuteOfHour().withValue(60);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            test.minuteOfHour().withValue(-1);\n+            test.minuteOfHour().setCopy(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.minuteOfHour().setCopy(-1);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testPropertySetTextMinute() {\n         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.minuteOfHour().withValue(\"12\");\n+        LocalDateTime copy = test.minuteOfHour().setCopy(\"12\");\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 10, 12, 30, 40);\n     }\n         check(test.secondOfMinute().withMinimumValue(), 2005, 6, 9, 10, 20, 0, 40);\n     }\n \n-    public void testPropertyPlusSecond() {\n-        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.secondOfMinute().plus(9);\n+    public void testPropertyAddToCopySecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.secondOfMinute().addToCopy(9);\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 10, 20, 39, 40);\n         \n-        copy = test.secondOfMinute().plus(29);\n+        copy = test.secondOfMinute().addToCopy(29);\n         check(copy, 2005, 6, 9, 10, 20, 59, 40);\n         \n-        copy = test.secondOfMinute().plus(30);\n+        copy = test.secondOfMinute().addToCopy(30);\n         check(copy, 2005, 6, 9, 10, 21, 0, 40);\n         \n-        copy = test.secondOfMinute().plus(39 * 60 + 29);\n+        copy = test.secondOfMinute().addToCopy(39 * 60 + 29);\n         check(copy, 2005, 6, 9, 10, 59, 59, 40);\n         \n-        copy = test.secondOfMinute().plus(39 * 60 + 30);\n+        copy = test.secondOfMinute().addToCopy(39 * 60 + 30);\n         check(copy, 2005, 6, 9, 11, 0, 0, 40);\n         \n-        copy = test.secondOfMinute().plus(13 * 60 * 60 + 39 * 60 + 30);\n+        copy = test.secondOfMinute().addToCopy(13 * 60 * 60 + 39 * 60 + 30);\n         check(copy, 2005, 6, 10, 0, 0, 0, 40);\n         \n-        copy = test.secondOfMinute().plus(-9);\n+        copy = test.secondOfMinute().addToCopy(-9);\n         check(copy, 2005, 6, 9, 10, 20, 21, 40);\n         \n-        copy = test.secondOfMinute().plus(-30);\n+        copy = test.secondOfMinute().addToCopy(-30);\n         check(copy, 2005, 6, 9, 10, 20, 0, 40);\n         \n-        copy = test.secondOfMinute().plus(-31);\n+        copy = test.secondOfMinute().addToCopy(-31);\n         check(copy, 2005, 6, 9, 10, 19, 59, 40);\n         \n-        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 30));\n+        copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 30));\n         check(copy, 2005, 6, 9, 0, 0, 0, 40);\n         \n-        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 31));\n+        copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n         check(copy, 2005, 6, 8, 23, 59, 59, 40);\n     }\n \n-    public void testPropertyPlusWrapFieldSecond() {\n-        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.secondOfMinute().plusWrapField(9);\n+    public void testPropertyAddWrapFieldToCopySecond() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.secondOfMinute().addWrapFieldToCopy(9);\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 10, 20, 39, 40);\n         \n-        copy = test.secondOfMinute().plusWrapField(49);\n+        copy = test.secondOfMinute().addWrapFieldToCopy(49);\n         check(copy, 2005, 6, 9, 10, 20, 19, 40);\n         \n-        copy = test.secondOfMinute().plusWrapField(-47);\n+        copy = test.secondOfMinute().addWrapFieldToCopy(-47);\n         check(copy, 2005, 6, 9, 10, 20, 43, 40);\n     }\n \n     public void testPropertySetSecond() {\n         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.secondOfMinute().withValue(12);\n+        LocalDateTime copy = test.secondOfMinute().setCopy(12);\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 10, 20, 12, 40);\n         \n         try {\n-            test.secondOfMinute().withValue(60);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            test.secondOfMinute().withValue(-1);\n+            test.secondOfMinute().setCopy(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.secondOfMinute().setCopy(-1);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testPropertySetTextSecond() {\n         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.secondOfMinute().withValue(\"12\");\n+        LocalDateTime copy = test.secondOfMinute().setCopy(\"12\");\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 10, 20, 12, 40);\n     }\n         check(test.millisOfSecond().withMinimumValue(), 2005, 6, 9, 10, 20, 30, 0);\n     }\n \n-    public void testPropertyPlusMilli() {\n-        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.millisOfSecond().plus(9);\n+    public void testPropertyAddToCopyMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.millisOfSecond().addToCopy(9);\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 10, 20, 30, 49);\n         \n-        copy = test.millisOfSecond().plus(959);\n+        copy = test.millisOfSecond().addToCopy(959);\n         check(copy, 2005, 6, 9, 10, 20, 30, 999);\n         \n-        copy = test.millisOfSecond().plus(960);\n+        copy = test.millisOfSecond().addToCopy(960);\n         check(copy, 2005, 6, 9, 10, 20, 31, 0);\n         \n-        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n         check(copy, 2005, 6, 9, 23, 59, 59, 999);\n         \n-        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+        copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n         check(copy, 2005, 6, 10, 0, 0, 0, 0);\n         \n-        copy = test.millisOfSecond().plus(-9);\n+        copy = test.millisOfSecond().addToCopy(-9);\n         check(copy, 2005, 6, 9, 10, 20, 30, 31);\n         \n-        copy = test.millisOfSecond().plus(-40);\n+        copy = test.millisOfSecond().addToCopy(-40);\n         check(copy, 2005, 6, 9, 10, 20, 30, 0);\n         \n-        copy = test.millisOfSecond().plus(-41);\n+        copy = test.millisOfSecond().addToCopy(-41);\n         check(copy, 2005, 6, 9, 10, 20, 29, 999);\n         \n-        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n         check(copy, 2005, 6, 9, 0, 0, 0, 0);\n         \n-        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+        copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n         check(copy, 2005, 6, 8, 23, 59, 59, 999);\n     }\n \n-    public void testPropertyPlusWrapFieldMilli() {\n-        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.millisOfSecond().plusWrapField(9);\n+    public void testPropertyAddWrapFieldToCopyMilli() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime copy = test.millisOfSecond().addWrapFieldToCopy(9);\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 10, 20, 30, 49);\n         \n-        copy = test.millisOfSecond().plusWrapField(995);\n+        copy = test.millisOfSecond().addWrapFieldToCopy(995);\n         check(copy, 2005, 6, 9, 10, 20, 30, 35);\n         \n-        copy = test.millisOfSecond().plusWrapField(-47);\n+        copy = test.millisOfSecond().addWrapFieldToCopy(-47);\n         check(copy, 2005, 6, 9, 10, 20, 30, 993);\n     }\n \n     public void testPropertySetMilli() {\n         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.millisOfSecond().withValue(12);\n+        LocalDateTime copy = test.millisOfSecond().setCopy(12);\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 10, 20, 30, 12);\n         \n         try {\n-            test.millisOfSecond().withValue(1000);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            test.millisOfSecond().withValue(-1);\n+            test.millisOfSecond().setCopy(1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.millisOfSecond().setCopy(-1);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testPropertySetTextMilli() {\n         LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40);\n-        LocalDateTime copy = test.millisOfSecond().withValue(\"12\");\n+        LocalDateTime copy = test.millisOfSecond().setCopy(\"12\");\n         check(test, 2005, 6, 9, 10, 20, 30, 40);\n         check(copy, 2005, 6, 9, 10, 20, 30, 12);\n     }\n--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Properties.java\n         assertEquals(292278993, test.year().getMaximumValueOverall());\n     }\n \n-    public void testPropertyPlusYear() {\n-        LocalDate test = new LocalDate(1972, 6, 9);\n-        LocalDate copy = test.year().plus(9);\n+    public void testPropertyAddToCopyYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.year().addToCopy(9);\n         check(test, 1972, 6, 9);\n         check(copy, 1981, 6, 9);\n         \n-        copy = test.year().plus(0);\n+        copy = test.year().addToCopy(0);\n         check(copy, 1972, 6, 9);\n         \n-        copy = test.year().plus(292278993 - 1972);\n+        copy = test.year().addToCopy(292278993 - 1972);\n         check(copy, 292278993, 6, 9);\n         \n         try {\n-            test.year().plus(292278993 - 1972 + 1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 1972, 6, 9);\n-        \n-        copy = test.year().plus(-1972);\n+            test.year().addToCopy(292278993 - 1972 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9);\n+        \n+        copy = test.year().addToCopy(-1972);\n         check(copy, 0, 6, 9);\n         \n-        copy = test.year().plus(-1973);\n+        copy = test.year().addToCopy(-1973);\n         check(copy, -1, 6, 9);\n         \n         try {\n-            test.year().plus(-292275054 - 1972 - 1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 1972, 6, 9);\n-    }\n-\n-    public void testPropertyPlusWrapFieldYear() {\n-        LocalDate test = new LocalDate(1972, 6, 9);\n-        LocalDate copy = test.year().plusWrapField(9);\n+            test.year().addToCopy(-292275054 - 1972 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9);\n+    }\n+\n+    public void testPropertyAddWrapFieldToCopyYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.year().addWrapFieldToCopy(9);\n         check(test, 1972, 6, 9);\n         check(copy, 1981, 6, 9);\n         \n-        copy = test.year().plusWrapField(0);\n+        copy = test.year().addWrapFieldToCopy(0);\n         check(copy, 1972, 6, 9);\n         \n-        copy = test.year().plusWrapField(292278993 - 1972 + 1);\n+        copy = test.year().addWrapFieldToCopy(292278993 - 1972 + 1);\n         check(copy, -292275054, 6, 9);\n         \n-        copy = test.year().plusWrapField(-292275054 - 1972 - 1);\n+        copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);\n         check(copy, 292278993, 6, 9);\n     }\n \n-    public void testPropertyWithYear() {\n-        LocalDate test = new LocalDate(1972, 6, 9);\n-        LocalDate copy = test.year().withValue(12);\n+    public void testPropertySetCopyYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.year().setCopy(12);\n         check(test, 1972, 6, 9);\n         check(copy, 12, 6, 9);\n     }\n \n-    public void testPropertyWithTextYear() {\n-        LocalDate test = new LocalDate(1972, 6, 9);\n-        LocalDate copy = test.year().withValue(\"12\");\n+    public void testPropertySetCopyTextYear() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.year().setCopy(\"12\");\n         check(test, 1972, 6, 9);\n         check(copy, 12, 6, 9);\n     }\n         assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n     }\n \n-    public void testPropertyPlusMonth() {\n-        LocalDate test = new LocalDate(1972, 6, 9);\n-        LocalDate copy = test.monthOfYear().plus(6);\n+    public void testPropertyAddToCopyMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.monthOfYear().addToCopy(6);\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 12, 9);\n         \n-        copy = test.monthOfYear().plus(7);\n+        copy = test.monthOfYear().addToCopy(7);\n         check(copy, 1973, 1, 9);\n         \n-        copy = test.monthOfYear().plus(-5);\n+        copy = test.monthOfYear().addToCopy(-5);\n         check(copy, 1972, 1, 9);\n         \n-        copy = test.monthOfYear().plus(-6);\n+        copy = test.monthOfYear().addToCopy(-6);\n         check(copy, 1971, 12, 9);\n         \n         test = new LocalDate(1972, 1, 31);\n-        copy = test.monthOfYear().plus(1);\n+        copy = test.monthOfYear().addToCopy(1);\n         check(copy, 1972, 2, 29);\n         \n-        copy = test.monthOfYear().plus(2);\n+        copy = test.monthOfYear().addToCopy(2);\n         check(copy, 1972, 3, 31);\n         \n-        copy = test.monthOfYear().plus(3);\n+        copy = test.monthOfYear().addToCopy(3);\n         check(copy, 1972, 4, 30);\n         \n         test = new LocalDate(1971, 1, 31);\n-        copy = test.monthOfYear().plus(1);\n+        copy = test.monthOfYear().addToCopy(1);\n         check(copy, 1971, 2, 28);\n     }\n \n-    public void testPropertyPlusWrapFieldMonth() {\n-        LocalDate test = new LocalDate(1972, 6, 9);\n-        LocalDate copy = test.monthOfYear().plusWrapField(4);\n+    public void testPropertyAddWrapFieldToCopyMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.monthOfYear().addWrapFieldToCopy(4);\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 10, 9);\n         \n-        copy = test.monthOfYear().plusWrapField(8);\n+        copy = test.monthOfYear().addWrapFieldToCopy(8);\n         check(copy, 1972, 2, 9);\n         \n-        copy = test.monthOfYear().plusWrapField(-8);\n+        copy = test.monthOfYear().addWrapFieldToCopy(-8);\n         check(copy, 1972, 10, 9);\n         \n         test = new LocalDate(1972, 1, 31);\n-        copy = test.monthOfYear().plusWrapField(1);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n         check(copy, 1972, 2, 29);\n         \n-        copy = test.monthOfYear().plusWrapField(2);\n+        copy = test.monthOfYear().addWrapFieldToCopy(2);\n         check(copy, 1972, 3, 31);\n         \n-        copy = test.monthOfYear().plusWrapField(3);\n+        copy = test.monthOfYear().addWrapFieldToCopy(3);\n         check(copy, 1972, 4, 30);\n         \n         test = new LocalDate(1971, 1, 31);\n-        copy = test.monthOfYear().plusWrapField(1);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n         check(copy, 1971, 2, 28);\n     }\n \n-    public void testPropertyWithMonth() {\n-        LocalDate test = new LocalDate(1972, 6, 9);\n-        LocalDate copy = test.monthOfYear().withValue(12);\n+    public void testPropertySetCopyMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.monthOfYear().setCopy(12);\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 12, 9);\n         \n         test = new LocalDate(1972, 1, 31);\n-        copy = test.monthOfYear().withValue(2);\n+        copy = test.monthOfYear().setCopy(2);\n         check(copy, 1972, 2, 29);\n         \n         try {\n-            test.monthOfYear().withValue(13);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            test.monthOfYear().withValue(0);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    public void testPropertyWithTextMonth() {\n-        LocalDate test = new LocalDate(1972, 6, 9);\n-        LocalDate copy = test.monthOfYear().withValue(\"12\");\n+            test.monthOfYear().setCopy(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.monthOfYear().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetCopyTextMonth() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.monthOfYear().setCopy(\"12\");\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 12, 9);\n         \n-        copy = test.monthOfYear().withValue(\"December\");\n+        copy = test.monthOfYear().setCopy(\"December\");\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 12, 9);\n         \n-        copy = test.monthOfYear().withValue(\"Dec\");\n+        copy = test.monthOfYear().setCopy(\"Dec\");\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 12, 9);\n     }\n         assertEquals(28, test.dayOfMonth().getMaximumValue());\n     }\n \n-    public void testPropertyPlusDay() {\n-        LocalDate test = new LocalDate(1972, 6, 9);\n-        LocalDate copy = test.dayOfMonth().plus(9);\n+    public void testPropertyAddToCopyDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().addToCopy(9);\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 6, 18);\n         \n-        copy = test.dayOfMonth().plus(21);\n+        copy = test.dayOfMonth().addToCopy(21);\n         check(copy, 1972, 6, 30);\n         \n-        copy = test.dayOfMonth().plus(22);\n+        copy = test.dayOfMonth().addToCopy(22);\n         check(copy, 1972, 7, 1);\n         \n-        copy = test.dayOfMonth().plus(22 + 30);\n+        copy = test.dayOfMonth().addToCopy(22 + 30);\n         check(copy, 1972, 7, 31);\n         \n-        copy = test.dayOfMonth().plus(22 + 31);\n+        copy = test.dayOfMonth().addToCopy(22 + 31);\n         check(copy, 1972, 8, 1);\n \n-        copy = test.dayOfMonth().plus(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n         check(copy, 1972, 12, 31);\n         \n-        copy = test.dayOfMonth().plus(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n         check(copy, 1973, 1, 1);\n         \n-        copy = test.dayOfMonth().plus(-8);\n+        copy = test.dayOfMonth().addToCopy(-8);\n         check(copy, 1972, 6, 1);\n         \n-        copy = test.dayOfMonth().plus(-9);\n+        copy = test.dayOfMonth().addToCopy(-9);\n         check(copy, 1972, 5, 31);\n         \n-        copy = test.dayOfMonth().plus(-8 - 31 - 30 - 31 - 29 - 31);\n+        copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n         check(copy, 1972, 1, 1);\n         \n-        copy = test.dayOfMonth().plus(-9 - 31 - 30 - 31 - 29 - 31);\n+        copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n         check(copy, 1971, 12, 31);\n     }\n \n-    public void testPropertyPlusWrapFieldDay() {\n-        LocalDate test = new LocalDate(1972, 6, 9);\n-        LocalDate copy = test.dayOfMonth().plusWrapField(21);\n+    public void testPropertyAddWrapFieldToCopyDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().addWrapFieldToCopy(21);\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 6, 30);\n         \n-        copy = test.dayOfMonth().plusWrapField(22);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n         check(copy, 1972, 6, 1);\n         \n-        copy = test.dayOfMonth().plusWrapField(-12);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n         check(copy, 1972, 6, 27);\n         \n         test = new LocalDate(1972, 7, 9);\n-        copy = test.dayOfMonth().plusWrapField(21);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(21);\n         check(copy, 1972, 7, 30);\n     \n-        copy = test.dayOfMonth().plusWrapField(22);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n         check(copy, 1972, 7, 31);\n     \n-        copy = test.dayOfMonth().plusWrapField(23);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(23);\n         check(copy, 1972, 7, 1);\n     \n-        copy = test.dayOfMonth().plusWrapField(-12);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n         check(copy, 1972, 7, 28);\n     }\n \n-    public void testPropertyWithDay() {\n-        LocalDate test = new LocalDate(1972, 6, 9);\n-        LocalDate copy = test.dayOfMonth().withValue(12);\n+    public void testPropertySetCopyDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().setCopy(12);\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 6, 12);\n         \n         try {\n-            test.dayOfMonth().withValue(31);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            test.dayOfMonth().withValue(0);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    public void testPropertyWithTextDay() {\n-        LocalDate test = new LocalDate(1972, 6, 9);\n-        LocalDate copy = test.dayOfMonth().withValue(\"12\");\n+            test.dayOfMonth().setCopy(31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfMonth().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetCopyTextDay() {\n+        LocalDate test = new LocalDate(1972, 6, 9);\n+        LocalDate copy = test.dayOfMonth().setCopy(\"12\");\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 6, 12);\n     }\n--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java\n \n     public void testPropertyRoundHour() {\n         LocalTime test = new LocalTime(10, 20);\n-        check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);\n-        check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfCeiling(), 10, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfFloor(), 10, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfEven(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0);\n         \n         test = new LocalTime(10, 40);\n-        check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);\n-        check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfCeiling(), 11, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfFloor(), 11, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfEven(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 11, 0, 0, 0);\n         \n         test = new LocalTime(10, 30);\n-        check(test.hourOfDay().roundCeiling(), 11, 0, 0, 0);\n-        check(test.hourOfDay().roundFloor(), 10, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfCeiling(), 11, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfFloor(), 10, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfEven(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundCeilingCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 10, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 10, 0, 0, 0);\n         \n         test = new LocalTime(11, 30);\n-        check(test.hourOfDay().roundCeiling(), 12, 0, 0, 0);\n-        check(test.hourOfDay().roundFloor(), 11, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfCeiling(), 12, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfFloor(), 11, 0, 0, 0);\n-        check(test.hourOfDay().roundHalfEven(), 12, 0, 0, 0);\n+        check(test.hourOfDay().roundCeilingCopy(), 12, 0, 0, 0);\n+        check(test.hourOfDay().roundFloorCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfCeilingCopy(), 12, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfFloorCopy(), 11, 0, 0, 0);\n+        check(test.hourOfDay().roundHalfEvenCopy(), 12, 0, 0, 0);\n     }\n \n     public void testPropertyGetMaxMinValuesHour() {\n \n     public void testPropertyPlusHour() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.hourOfDay().plus(9);\n+        LocalTime copy = test.hourOfDay().addCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 19, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plus(0);\n+        copy = test.hourOfDay().addCopy(0);\n         check(copy, 10, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plus(13);\n+        copy = test.hourOfDay().addCopy(13);\n         check(copy, 23, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plus(14);\n+        copy = test.hourOfDay().addCopy(14);\n         check(copy, 0, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plus(-10);\n+        copy = test.hourOfDay().addCopy(-10);\n         check(copy, 0, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plus(-11);\n+        copy = test.hourOfDay().addCopy(-11);\n         check(copy, 23, 20, 30, 40);\n     }\n \n     public void testPropertyPlusNoWrapHour() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.hourOfDay().plusNoWrap(9);\n+        LocalTime copy = test.hourOfDay().addNoWrapToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 19, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plusNoWrap(0);\n+        copy = test.hourOfDay().addNoWrapToCopy(0);\n         check(copy, 10, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plusNoWrap(13);\n+        copy = test.hourOfDay().addNoWrapToCopy(13);\n         check(copy, 23, 20, 30, 40);\n         \n         try {\n-            test.hourOfDay().plusNoWrap(14);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n-        \n-        copy = test.hourOfDay().plusNoWrap(-10);\n+            test.hourOfDay().addNoWrapToCopy(14);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addNoWrapToCopy(-10);\n         check(copy, 0, 20, 30, 40);\n         \n         try {\n-            test.hourOfDay().plusNoWrap(-11);\n+            test.hourOfDay().addNoWrapToCopy(-11);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         check(test, 10, 20, 30, 40);\n \n     public void testPropertyPlusWrapFieldHour() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.hourOfDay().plusWrapField(9);\n+        LocalTime copy = test.hourOfDay().addWrapFieldToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 19, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plusWrapField(0);\n+        copy = test.hourOfDay().addWrapFieldToCopy(0);\n         check(copy, 10, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plusWrapField(18);\n+        copy = test.hourOfDay().addWrapFieldToCopy(18);\n         check(copy, 4, 20, 30, 40);\n         \n-        copy = test.hourOfDay().plusWrapField(-15);\n+        copy = test.hourOfDay().addWrapFieldToCopy(-15);\n         check(copy, 19, 20, 30, 40);\n     }\n \n     public void testPropertySetHour() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.hourOfDay().withValue(12);\n+        LocalTime copy = test.hourOfDay().setCopy(12);\n         check(test, 10, 20, 30, 40);\n         check(copy, 12, 20, 30, 40);\n         \n         try {\n-            test.hourOfDay().withValue(24);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            test.hourOfDay().withValue(-1);\n+            test.hourOfDay().setCopy(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.hourOfDay().setCopy(-1);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testPropertySetTextHour() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.hourOfDay().withValue(\"12\");\n+        LocalTime copy = test.hourOfDay().setCopy(\"12\");\n         check(test, 10, 20, 30, 40);\n         check(copy, 12, 20, 30, 40);\n     }\n \n     public void testPropertyPlusMinute() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.minuteOfHour().plus(9);\n+        LocalTime copy = test.minuteOfHour().addCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 29, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(39);\n+        copy = test.minuteOfHour().addCopy(39);\n         check(copy, 10, 59, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(40);\n+        copy = test.minuteOfHour().addCopy(40);\n         check(copy, 11, 0, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(1 * 60 + 45);\n+        copy = test.minuteOfHour().addCopy(1 * 60 + 45);\n         check(copy, 12, 5, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(13 * 60 + 39);\n+        copy = test.minuteOfHour().addCopy(13 * 60 + 39);\n         check(copy, 23, 59, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(13 * 60 + 40);\n+        copy = test.minuteOfHour().addCopy(13 * 60 + 40);\n         check(copy, 0, 0, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(-9);\n+        copy = test.minuteOfHour().addCopy(-9);\n         check(copy, 10, 11, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(-19);\n+        copy = test.minuteOfHour().addCopy(-19);\n         check(copy, 10, 1, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(-20);\n+        copy = test.minuteOfHour().addCopy(-20);\n         check(copy, 10, 0, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(-21);\n+        copy = test.minuteOfHour().addCopy(-21);\n         check(copy, 9, 59, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(-(10 * 60 + 20));\n+        copy = test.minuteOfHour().addCopy(-(10 * 60 + 20));\n         check(copy, 0, 0, 30, 40);\n         \n-        copy = test.minuteOfHour().plus(-(10 * 60 + 21));\n+        copy = test.minuteOfHour().addCopy(-(10 * 60 + 21));\n         check(copy, 23, 59, 30, 40);\n     }\n \n     public void testPropertyPlusNoWrapMinute() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.minuteOfHour().plusNoWrap(9);\n+        LocalTime copy = test.minuteOfHour().addNoWrapToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 29, 30, 40);\n         \n-        copy = test.minuteOfHour().plusNoWrap(39);\n+        copy = test.minuteOfHour().addNoWrapToCopy(39);\n         check(copy, 10, 59, 30, 40);\n         \n-        copy = test.minuteOfHour().plusNoWrap(40);\n+        copy = test.minuteOfHour().addNoWrapToCopy(40);\n         check(copy, 11, 0, 30, 40);\n         \n-        copy = test.minuteOfHour().plusNoWrap(1 * 60 + 45);\n+        copy = test.minuteOfHour().addNoWrapToCopy(1 * 60 + 45);\n         check(copy, 12, 5, 30, 40);\n         \n-        copy = test.minuteOfHour().plusNoWrap(13 * 60 + 39);\n+        copy = test.minuteOfHour().addNoWrapToCopy(13 * 60 + 39);\n         check(copy, 23, 59, 30, 40);\n         \n         try {\n-            test.minuteOfHour().plusNoWrap(13 * 60 + 40);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n-        \n-        copy = test.minuteOfHour().plusNoWrap(-9);\n+            test.minuteOfHour().addNoWrapToCopy(13 * 60 + 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.minuteOfHour().addNoWrapToCopy(-9);\n         check(copy, 10, 11, 30, 40);\n         \n-        copy = test.minuteOfHour().plusNoWrap(-19);\n+        copy = test.minuteOfHour().addNoWrapToCopy(-19);\n         check(copy, 10, 1, 30, 40);\n         \n-        copy = test.minuteOfHour().plusNoWrap(-20);\n+        copy = test.minuteOfHour().addNoWrapToCopy(-20);\n         check(copy, 10, 0, 30, 40);\n         \n-        copy = test.minuteOfHour().plusNoWrap(-21);\n+        copy = test.minuteOfHour().addNoWrapToCopy(-21);\n         check(copy, 9, 59, 30, 40);\n         \n-        copy = test.minuteOfHour().plusNoWrap(-(10 * 60 + 20));\n+        copy = test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 20));\n         check(copy, 0, 0, 30, 40);\n         \n         try {\n-            test.minuteOfHour().plusNoWrap(-(10 * 60 + 21));\n+            test.minuteOfHour().addNoWrapToCopy(-(10 * 60 + 21));\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         check(test, 10, 20, 30, 40);\n \n     public void testPropertyPlusWrapFieldMinute() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.minuteOfHour().plusWrapField(9);\n+        LocalTime copy = test.minuteOfHour().addWrapFieldToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 29, 30, 40);\n         \n-        copy = test.minuteOfHour().plusWrapField(49);\n+        copy = test.minuteOfHour().addWrapFieldToCopy(49);\n         check(copy, 10, 9, 30, 40);\n         \n-        copy = test.minuteOfHour().plusWrapField(-47);\n+        copy = test.minuteOfHour().addWrapFieldToCopy(-47);\n         check(copy, 10, 33, 30, 40);\n     }\n \n     public void testPropertySetMinute() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.minuteOfHour().withValue(12);\n+        LocalTime copy = test.minuteOfHour().setCopy(12);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 12, 30, 40);\n         \n         try {\n-            test.minuteOfHour().withValue(60);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            test.minuteOfHour().withValue(-1);\n+            test.minuteOfHour().setCopy(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.minuteOfHour().setCopy(-1);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testPropertySetTextMinute() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.minuteOfHour().withValue(\"12\");\n+        LocalTime copy = test.minuteOfHour().setCopy(\"12\");\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 12, 30, 40);\n     }\n \n     public void testPropertyPlusSecond() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.secondOfMinute().plus(9);\n+        LocalTime copy = test.secondOfMinute().addCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 39, 40);\n         \n-        copy = test.secondOfMinute().plus(29);\n+        copy = test.secondOfMinute().addCopy(29);\n         check(copy, 10, 20, 59, 40);\n         \n-        copy = test.secondOfMinute().plus(30);\n+        copy = test.secondOfMinute().addCopy(30);\n         check(copy, 10, 21, 0, 40);\n         \n-        copy = test.secondOfMinute().plus(39 * 60 + 29);\n+        copy = test.secondOfMinute().addCopy(39 * 60 + 29);\n         check(copy, 10, 59, 59, 40);\n         \n-        copy = test.secondOfMinute().plus(39 * 60 + 30);\n+        copy = test.secondOfMinute().addCopy(39 * 60 + 30);\n         check(copy, 11, 0, 0, 40);\n         \n-        copy = test.secondOfMinute().plus(13 * 60 * 60 + 39 * 60 + 30);\n+        copy = test.secondOfMinute().addCopy(13 * 60 * 60 + 39 * 60 + 30);\n         check(copy, 0, 0, 0, 40);\n         \n-        copy = test.secondOfMinute().plus(-9);\n+        copy = test.secondOfMinute().addCopy(-9);\n         check(copy, 10, 20, 21, 40);\n         \n-        copy = test.secondOfMinute().plus(-30);\n+        copy = test.secondOfMinute().addCopy(-30);\n         check(copy, 10, 20, 0, 40);\n         \n-        copy = test.secondOfMinute().plus(-31);\n+        copy = test.secondOfMinute().addCopy(-31);\n         check(copy, 10, 19, 59, 40);\n         \n-        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 30));\n+        copy = test.secondOfMinute().addCopy(-(10 * 60 * 60 + 20 * 60 + 30));\n         check(copy, 0, 0, 0, 40);\n         \n-        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 31));\n+        copy = test.secondOfMinute().addCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n         check(copy, 23, 59, 59, 40);\n     }\n \n     public void testPropertyPlusNoWrapSecond() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.secondOfMinute().plusNoWrap(9);\n+        LocalTime copy = test.secondOfMinute().addNoWrapToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 39, 40);\n         \n-        copy = test.secondOfMinute().plusNoWrap(29);\n+        copy = test.secondOfMinute().addNoWrapToCopy(29);\n         check(copy, 10, 20, 59, 40);\n         \n-        copy = test.secondOfMinute().plusNoWrap(30);\n+        copy = test.secondOfMinute().addNoWrapToCopy(30);\n         check(copy, 10, 21, 0, 40);\n         \n-        copy = test.secondOfMinute().plusNoWrap(39 * 60 + 29);\n+        copy = test.secondOfMinute().addNoWrapToCopy(39 * 60 + 29);\n         check(copy, 10, 59, 59, 40);\n         \n-        copy = test.secondOfMinute().plusNoWrap(39 * 60 + 30);\n+        copy = test.secondOfMinute().addNoWrapToCopy(39 * 60 + 30);\n         check(copy, 11, 0, 0, 40);\n         \n         try {\n-            test.secondOfMinute().plusNoWrap(13 * 60 * 60 + 39 * 60 + 30);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n-        \n-        copy = test.secondOfMinute().plusNoWrap(-9);\n+            test.secondOfMinute().addNoWrapToCopy(13 * 60 * 60 + 39 * 60 + 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.secondOfMinute().addNoWrapToCopy(-9);\n         check(copy, 10, 20, 21, 40);\n         \n-        copy = test.secondOfMinute().plusNoWrap(-30);\n+        copy = test.secondOfMinute().addNoWrapToCopy(-30);\n         check(copy, 10, 20, 0, 40);\n         \n-        copy = test.secondOfMinute().plusNoWrap(-31);\n+        copy = test.secondOfMinute().addNoWrapToCopy(-31);\n         check(copy, 10, 19, 59, 40);\n         \n-        copy = test.secondOfMinute().plusNoWrap(-(10 * 60 * 60 + 20 * 60 + 30));\n+        copy = test.secondOfMinute().addNoWrapToCopy(-(10 * 60 * 60 + 20 * 60 + 30));\n         check(copy, 0, 0, 0, 40);\n         \n         try {\n-            test.secondOfMinute().plusNoWrap(-(10 * 60 * 60 + 20 * 60 + 31));\n+            test.secondOfMinute().addNoWrapToCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         check(test, 10, 20, 30, 40);\n \n     public void testPropertyPlusWrapFieldSecond() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.secondOfMinute().plusWrapField(9);\n+        LocalTime copy = test.secondOfMinute().addWrapFieldToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 39, 40);\n         \n-        copy = test.secondOfMinute().plusWrapField(49);\n+        copy = test.secondOfMinute().addWrapFieldToCopy(49);\n         check(copy, 10, 20, 19, 40);\n         \n-        copy = test.secondOfMinute().plusWrapField(-47);\n+        copy = test.secondOfMinute().addWrapFieldToCopy(-47);\n         check(copy, 10, 20, 43, 40);\n     }\n \n     public void testPropertySetSecond() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.secondOfMinute().withValue(12);\n+        LocalTime copy = test.secondOfMinute().setCopy(12);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 12, 40);\n         \n         try {\n-            test.secondOfMinute().withValue(60);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            test.secondOfMinute().withValue(-1);\n+            test.secondOfMinute().setCopy(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.secondOfMinute().setCopy(-1);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testPropertySetTextSecond() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.secondOfMinute().withValue(\"12\");\n+        LocalTime copy = test.secondOfMinute().setCopy(\"12\");\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 12, 40);\n     }\n \n     public void testPropertyPlusMilli() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.millisOfSecond().plus(9);\n+        LocalTime copy = test.millisOfSecond().addCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 30, 49);\n         \n-        copy = test.millisOfSecond().plus(959);\n+        copy = test.millisOfSecond().addCopy(959);\n         check(copy, 10, 20, 30, 999);\n         \n-        copy = test.millisOfSecond().plus(960);\n+        copy = test.millisOfSecond().addCopy(960);\n         check(copy, 10, 20, 31, 0);\n         \n-        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        copy = test.millisOfSecond().addCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n         check(copy, 23, 59, 59, 999);\n         \n-        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+        copy = test.millisOfSecond().addCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n         check(copy, 0, 0, 0, 0);\n         \n-        copy = test.millisOfSecond().plus(-9);\n+        copy = test.millisOfSecond().addCopy(-9);\n         check(copy, 10, 20, 30, 31);\n         \n-        copy = test.millisOfSecond().plus(-40);\n+        copy = test.millisOfSecond().addCopy(-40);\n         check(copy, 10, 20, 30, 0);\n         \n-        copy = test.millisOfSecond().plus(-41);\n+        copy = test.millisOfSecond().addCopy(-41);\n         check(copy, 10, 20, 29, 999);\n         \n-        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        copy = test.millisOfSecond().addCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n         check(copy, 0, 0, 0, 0);\n         \n-        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+        copy = test.millisOfSecond().addCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n         check(copy, 23, 59, 59, 999);\n     }\n \n     public void testPropertyPlusNoWrapMilli() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.millisOfSecond().plusNoWrap(9);\n+        LocalTime copy = test.millisOfSecond().addNoWrapToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 30, 49);\n         \n-        copy = test.millisOfSecond().plusNoWrap(959);\n+        copy = test.millisOfSecond().addNoWrapToCopy(959);\n         check(copy, 10, 20, 30, 999);\n         \n-        copy = test.millisOfSecond().plusNoWrap(960);\n+        copy = test.millisOfSecond().addNoWrapToCopy(960);\n         check(copy, 10, 20, 31, 0);\n         \n-        copy = test.millisOfSecond().plusNoWrap(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        copy = test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n         check(copy, 23, 59, 59, 999);\n         \n         try {\n-            test.millisOfSecond().plusNoWrap(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n-        \n-        copy = test.millisOfSecond().plusNoWrap(-9);\n+            test.millisOfSecond().addNoWrapToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.millisOfSecond().addNoWrapToCopy(-9);\n         check(copy, 10, 20, 30, 31);\n         \n-        copy = test.millisOfSecond().plusNoWrap(-40);\n+        copy = test.millisOfSecond().addNoWrapToCopy(-40);\n         check(copy, 10, 20, 30, 0);\n         \n-        copy = test.millisOfSecond().plusNoWrap(-41);\n+        copy = test.millisOfSecond().addNoWrapToCopy(-41);\n         check(copy, 10, 20, 29, 999);\n         \n-        copy = test.millisOfSecond().plusNoWrap(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        copy = test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n         check(copy, 0, 0, 0, 0);\n         \n         try {\n-            test.millisOfSecond().plusNoWrap(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+            test.millisOfSecond().addNoWrapToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         check(test, 10, 20, 30, 40);\n \n     public void testPropertyPlusWrapFieldMilli() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.millisOfSecond().plusWrapField(9);\n+        LocalTime copy = test.millisOfSecond().addWrapFieldToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 30, 49);\n         \n-        copy = test.millisOfSecond().plusWrapField(995);\n+        copy = test.millisOfSecond().addWrapFieldToCopy(995);\n         check(copy, 10, 20, 30, 35);\n         \n-        copy = test.millisOfSecond().plusWrapField(-47);\n+        copy = test.millisOfSecond().addWrapFieldToCopy(-47);\n         check(copy, 10, 20, 30, 993);\n     }\n \n     public void testPropertySetMilli() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.millisOfSecond().withValue(12);\n+        LocalTime copy = test.millisOfSecond().setCopy(12);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 30, 12);\n         \n         try {\n-            test.millisOfSecond().withValue(1000);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            test.millisOfSecond().withValue(-1);\n+            test.millisOfSecond().setCopy(1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.millisOfSecond().setCopy(-1);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testPropertySetTextMilli() {\n         LocalTime test = new LocalTime(10, 20, 30, 40);\n-        LocalTime copy = test.millisOfSecond().withValue(\"12\");\n+        LocalTime copy = test.millisOfSecond().setCopy(\"12\");\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 30, 12);\n     }", "timestamp": 1148844196, "metainfo": ""}