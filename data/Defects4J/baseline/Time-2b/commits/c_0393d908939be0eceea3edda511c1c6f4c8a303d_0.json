{"sha": "0393d908939be0eceea3edda511c1c6f4c8a303d", "log": "Fix interval tests to match reality   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n public class TestStringConverter extends TestCase {\n \n     private static final DateTimeZone ONE_HOUR = DateTimeZone.getInstance(1);\n+    private static final DateTimeZone SIX = DateTimeZone.getInstance(6);\n+    private static final DateTimeZone SEVEN = DateTimeZone.getInstance(7);\n     private static final DateTimeZone EIGHT = DateTimeZone.getInstance(8);\n     private static final DateTimeZone UTC = DateTimeZone.UTC;\n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n     public void testSetIntoInterval_Object_Chronology4() throws Exception {\n         MutableInterval m = new MutableInterval(-1000L, 1000L);\n         StringConverter.INSTANCE.setInto(m, \"2004-06-09T+06:00/P1Y2M\", null);\n-        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, DateTimeZone.getInstance(6)), m.getStart());\n-        assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0, DateTimeZone.getInstance(6)), m.getEnd());\n-        assertEquals(Chronology.getISO(DateTimeZone.getInstance(6)), m.getChronology());\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart());\n+        assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getEnd());\n+        assertEquals(Chronology.getISO(), m.getChronology());\n     }\n \n     public void testSetIntoInterval_Object_Chronology5() throws Exception {\n         MutableInterval m = new MutableInterval(-1000L, 1000L);\n         StringConverter.INSTANCE.setInto(m, \"P1Y2M/2004-06-09T+06:00\", null);\n-        assertEquals(new DateTime(2003, 4, 9, 0, 0, 0, 0, DateTimeZone.getInstance(6)), m.getStart());\n-        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, DateTimeZone.getInstance(6)), m.getEnd());\n-        assertEquals(Chronology.getISO(DateTimeZone.getInstance(6)), m.getChronology());\n+        assertEquals(new DateTime(2003, 4, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart());\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getEnd());\n+        assertEquals(Chronology.getISO(), m.getChronology());\n     }\n \n     public void testSetIntoInterval_Object_Chronology6() throws Exception {\n         MutableInterval m = new MutableInterval(-1000L, 1000L);\n         StringConverter.INSTANCE.setInto(m, \"2003-08-09T+06:00/2004-06-09T+07:00\", null);\n-        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, DateTimeZone.getInstance(6)), m.getStart());\n-        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, DateTimeZone.getInstance(6)), m.getEnd());\n-        assertEquals(Chronology.getISO(DateTimeZone.getInstance(6)), m.getChronology());\n+        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart());\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SEVEN).withChronology(null), m.getEnd());\n+        assertEquals(Chronology.getISO(), m.getChronology());\n+    }\n+\n+    public void testSetIntoInterval_Object_Chronology7() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        StringConverter.INSTANCE.setInto(m, \"2003-08-09/2004-06-09\", Chronology.getBuddhist());\n+        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, Chronology.getBuddhist()), m.getStart());\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getBuddhist()), m.getEnd());\n+        assertEquals(Chronology.getBuddhist(), m.getChronology());\n+    }\n+\n+    public void testSetIntoInterval_Object_Chronology8() throws Exception {\n+        MutableInterval m = new MutableInterval(-1000L, 1000L);\n+        StringConverter.INSTANCE.setInto(m, \"2003-08-09T+06:00/2004-06-09T+07:00\", Chronology.getBuddhist(EIGHT));\n+        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, Chronology.getBuddhist(SIX)).withZone(EIGHT), m.getStart());\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getBuddhist(SEVEN)).withZone(EIGHT), m.getEnd());\n+        assertEquals(Chronology.getBuddhist(EIGHT), m.getChronology());\n     }\n \n     public void testSetIntoIntervalEx_Object_Chronology1() throws Exception {", "timestamp": 1096817169, "metainfo": ""}