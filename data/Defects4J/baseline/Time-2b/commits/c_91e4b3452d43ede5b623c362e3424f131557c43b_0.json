{"sha": "91e4b3452d43ede5b623c362e3424f131557c43b", "log": "Add static parse methods to date-time classes  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/main/java/org/joda/time/DateMidnight.java\n \n import org.joda.time.base.BaseDateTime;\n import org.joda.time.field.AbstractReadableInstantFieldProperty;\n+import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.ISODateTimeFormat;\n \n /**\n     /** Serialization lock */\n     private static final long serialVersionUID = 156371964018738L;\n \n-    // Constructors\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Parses a {@code DateMidnight} from the specified string.\n+     * <p>\n+     * This uses {@link ISODateTimeFormat#dateParser()}.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static DateMidnight parse(String str) {\n+        return parse(str, ISODateTimeFormat.dateParser());\n+    }\n+\n+    /**\n+     * Parses a {@code DateMidnight} from the specified string using a formatter.\n+     * \n+     * @param str  the string to parse, not null\n+     * @param formatter  the formatter to use, not null\n+     * @since 2.0\n+     */\n+    public static DateMidnight parse(String str, DateTimeFormatter formatter) {\n+        return formatter.parseDateTime(str).toDateMidnight();\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructs an instance set to the current system millisecond time\n--- a/JodaTime/src/main/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/main/java/org/joda/time/DateTime.java\n import org.joda.time.base.BaseDateTime;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.AbstractReadableInstantFieldProperty;\n+import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.ISODateTimeFormat;\n \n /**\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Parses a {@code DateTime} from the specified string.\n+     * <p>\n+     * This uses {@link ISODateTimeFormat#dateTimeParser()}.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static DateTime parse(String str) {\n+        return parse(str, ISODateTimeFormat.dateTimeParser());\n+    }\n+\n+    /**\n+     * Parses a {@code DateTime} from the specified string using a formatter.\n+     * \n+     * @param str  the string to parse, not null\n+     * @param formatter  the formatter to use, not null\n+     * @since 2.0\n+     */\n+    public static DateTime parse(String str, DateTimeFormatter formatter) {\n+        return formatter.parseDateTime(str);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Constructs an instance set to the current system millisecond time\n      * using <code>ISOChronology</code> in the default time zone.\n      */\n--- a/JodaTime/src/main/java/org/joda/time/Instant.java\n+++ b/JodaTime/src/main/java/org/joda/time/Instant.java\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.InstantConverter;\n+import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.format.ISODateTimeFormat;\n \n /**\n  * Instant is the standard implementation of a fully immutable instant in time.\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Parses a {@code Instant} from the specified string.\n+     * <p>\n+     * This uses {@link ISODateTimeFormat#dateTimeParser()}.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static Instant parse(String str) {\n+        return parse(str, ISODateTimeFormat.dateTimeParser());\n+    }\n+\n+    /**\n+     * Parses a {@code Instant} from the specified string using a formatter.\n+     * \n+     * @param str  the string to parse, not null\n+     * @param formatter  the formatter to use, not null\n+     * @since 2.0\n+     */\n+    public static Instant parse(String str, DateTimeFormatter formatter) {\n+        return formatter.parseDateTime(str).toInstant();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Constructs an instance set to the current system millisecond time.\n      */\n     public Instant() {\n--- a/JodaTime/src/main/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/main/java/org/joda/time/LocalDate.java\n import org.joda.time.field.AbstractReadableInstantFieldProperty;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.ISODateTimeFormat;\n \n /**\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Parses a {@code LocalDate} from the specified string.\n+     * <p>\n+     * This uses {@link ISODateTimeFormat#localDateParser()}.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static LocalDate parse(String str) {\n+        return parse(str, ISODateTimeFormat.localDateParser());\n+    }\n+\n+    /**\n+     * Parses a {@code LocalDate} from the specified string using a formatter.\n+     * \n+     * @param str  the string to parse, not null\n+     * @param formatter  the formatter to use, not null\n+     * @since 2.0\n+     */\n+    public static LocalDate parse(String str, DateTimeFormatter formatter) {\n+        return formatter.parseLocalDate(str);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Constructs a LocalDate from a <code>java.util.Calendar</code>\n      * using exactly the same field values.\n      * <p>\n--- a/JodaTime/src/main/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/main/java/org/joda/time/LocalDateTime.java\n import org.joda.time.convert.PartialConverter;\n import org.joda.time.field.AbstractReadableInstantFieldProperty;\n import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.ISODateTimeFormat;\n \n /**\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Parses a {@code LocalDateTime} from the specified string.\n+     * <p>\n+     * This uses {@link ISODateTimeFormat#localDateOptionalTimeParser()}.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static LocalDateTime parse(String str) {\n+        return parse(str, ISODateTimeFormat.localDateOptionalTimeParser());\n+    }\n+\n+    /**\n+     * Parses a {@code LocalDateTime} from the specified string using a formatter.\n+     * \n+     * @param str  the string to parse, not null\n+     * @param formatter  the formatter to use, not null\n+     * @since 2.0\n+     */\n+    public static LocalDateTime parse(String str, DateTimeFormatter formatter) {\n+        return formatter.parseLocalDateTime(str);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Constructs a LocalDateTime from a <code>java.util.Calendar</code>\n      * using exactly the same field values.\n      * <p>\n--- a/JodaTime/src/main/java/org/joda/time/LocalTime.java\n+++ b/JodaTime/src/main/java/org/joda/time/LocalTime.java\n import org.joda.time.convert.PartialConverter;\n import org.joda.time.field.AbstractReadableInstantFieldProperty;\n import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.ISODateTimeFormat;\n \n /**\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Parses a {@code LocalTime} from the specified string.\n+     * <p>\n+     * This uses {@link ISODateTimeFormat#localTimeParser()}.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static LocalTime parse(String str) {\n+        return parse(str, ISODateTimeFormat.localTimeParser());\n+    }\n+\n+    /**\n+     * Parses a {@code LocalTime} from the specified string using a formatter.\n+     * \n+     * @param str  the string to parse, not null\n+     * @param formatter  the formatter to use, not null\n+     * @since 2.0\n+     */\n+    public static LocalTime parse(String str, DateTimeFormatter formatter) {\n+        return formatter.parseLocalTime(str);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Constructs a LocalTime from the specified millis of day using the\n      * ISO chronology.\n      * <p>\n--- a/JodaTime/src/main/java/org/joda/time/MonthDay.java\n+++ b/JodaTime/src/main/java/org/joda/time/MonthDay.java\n import org.joda.time.field.AbstractPartialFieldProperty;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.ISODateTimeFormat;\n \n /**\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Parses a {@code MonthDay} from the specified string.\n+     * <p>\n+     * This uses {@link ISODateTimeFormat#localDateParser()}.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static MonthDay parse(String str) {\n+        return parse(str, ISODateTimeFormat.localDateParser());\n+    }\n+\n+    /**\n+     * Parses a {@code MonthDay} from the specified string using a formatter.\n+     * \n+     * @param str  the string to parse, not null\n+     * @param formatter  the formatter to use, not null\n+     * @since 2.0\n+     */\n+    public static MonthDay parse(String str, DateTimeFormatter formatter) {\n+        LocalDate date = formatter.parseLocalDate(str);\n+        return new MonthDay(date.getMonthOfYear(), date.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Constructs a MonthDay from a <code>java.util.Calendar</code>\n      * using exactly the same field values avoiding any time zone effects.\n      * <p>\n--- a/JodaTime/src/main/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/main/java/org/joda/time/MutableDateTime.java\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.AbstractReadableInstantFieldProperty;\n import org.joda.time.field.FieldUtils;\n+import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.ISODateTimeFormat;\n \n /**\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Parses a {@code MutableDateTime} from the specified string.\n+     * <p>\n+     * This uses {@link ISODateTimeFormat#dateTimeParser()}.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static MutableDateTime parse(String str) {\n+        return parse(str, ISODateTimeFormat.dateTimeParser());\n+    }\n+\n+    /**\n+     * Parses a {@code MutableDateTime} from the specified string using a formatter.\n+     * \n+     * @param str  the string to parse, not null\n+     * @param formatter  the formatter to use, not null\n+     * @since 2.0\n+     */\n+    public static MutableDateTime parse(String str, DateTimeFormatter formatter) {\n+        return formatter.parseDateTime(str).toMutableDateTime();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Constructs an instance set to the current system millisecond time\n      * using <code>ISOChronology</code> in the default time zone.\n      */\n--- a/JodaTime/src/main/java/org/joda/time/YearMonth.java\n+++ b/JodaTime/src/main/java/org/joda/time/YearMonth.java\n import org.joda.time.field.AbstractPartialFieldProperty;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.ISODateTimeFormat;\n \n /**\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Parses a {@code YearMonth} from the specified string.\n+     * <p>\n+     * This uses {@link ISODateTimeFormat#localDateParser()}.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static YearMonth parse(String str) {\n+        return parse(str, ISODateTimeFormat.localDateParser());\n+    }\n+\n+    /**\n+     * Parses a {@code YearMonth} from the specified string using a formatter.\n+     * \n+     * @param str  the string to parse, not null\n+     * @param formatter  the formatter to use, not null\n+     * @since 2.0\n+     */\n+    public static YearMonth parse(String str, DateTimeFormatter formatter) {\n+        LocalDate date = formatter.parseLocalDate(str);\n+        return new YearMonth(date.getYear(), date.getMonthOfYear());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Constructs a YearMonth from a <code>java.util.Calendar</code>\n      * using exactly the same field values avoiding any time zone effects.\n      * <p>\n--- a/JodaTime/src/test/java/org/joda/time/TestDateMidnight_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateMidnight_Constructors.java\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.MockZeroNullIntegerConverter;\n+import org.joda.time.format.DateTimeFormat;\n \n /**\n  * This class is a Junit unit test for DateMidnight.\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        assertEquals(new DateMidnight(2010, 6, 30, ISOChronology.getInstance(LONDON)), DateMidnight.parse(\"2010-06-30\"));\n+        assertEquals(new DateMidnight(2010, 1, 2, ISOChronology.getInstance(LONDON)), DateMidnight.parse(\"2010-002\"));\n+    }\n+\n+    public void testParse_formatter() throws Throwable {\n+        assertEquals(new DateMidnight(2010, 6, 30, ISOChronology.getInstance(LONDON)), DateMidnight.parse(\"2010--30 06\", DateTimeFormat.forPattern(\"yyyy--dd MM\")));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Test constructor ()\n      */\n--- a/JodaTime/src/test/java/org/joda/time/TestDateTime_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateTime_Constructors.java\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.MockZeroNullIntegerConverter;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * This class is a Junit unit test for DateTime.\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        assertEquals(new DateTime(2010, 6, 30, 0, 20, ISOChronology.getInstance(LONDON)), DateTime.parse(\"2010-06-30T01:20+02:00\"));\n+        assertEquals(new DateTime(2010, 1, 2, 14, 50, ISOChronology.getInstance(LONDON)), DateTime.parse(\"2010-002T14:50\"));\n+    }\n+\n+    public void testParse_formatter() throws Throwable {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy--dd MM HH\").withChronology(ISOChronology.getInstance(PARIS));\n+        assertEquals(new DateTime(2010, 6, 30, 13, 0, ISOChronology.getInstance(PARIS)), DateTime.parse(\"2010--30 06 13\", f));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Test constructor ()\n      */\n--- a/JodaTime/src/test/java/org/joda/time/TestInstant_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestInstant_Constructors.java\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.MockZeroNullIntegerConverter;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * This class is a Junit unit test for Instant.\n         java.util.TimeZone.setDefault(zone.toTimeZone());\n         Locale.setDefault(locale);\n         zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        assertEquals(new DateTime(2010, 6, 30, 0, 20, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse(\"2010-06-30T01:20+02:00\"));\n+        assertEquals(new DateTime(2010, 1, 2, 14, 50, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse(\"2010-002T14:50\"));\n+    }\n+\n+    public void testParse_formatter() throws Throwable {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy--dd MM HH\").withChronology(ISOChronology.getInstance(PARIS));\n+        assertEquals(new DateTime(2010, 6, 30, 13, 0, ISOChronology.getInstance(PARIS)).toInstant(), Instant.parse(\"2010--30 06 13\", f));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * This class is a Junit unit test for LocalDateTime.\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        assertEquals(new LocalDateTime(2010, 6, 30, 1, 20), LocalDateTime.parse(\"2010-06-30T01:20\"));\n+        assertEquals(new LocalDateTime(2010, 1, 2, 14, 50, 30, 432), LocalDateTime.parse(\"2010-002T14:50:30.432\"));\n+    }\n+\n+    public void testParse_formatter() throws Throwable {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy--dd MM HH\").withChronology(ISOChronology.getInstance(PARIS));\n+        assertEquals(new LocalDateTime(2010, 6, 30, 13, 0), LocalDateTime.parse(\"2010--30 06 13\", f));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testFactory_FromCalendarFields() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n--- a/JodaTime/src/test/java/org/joda/time/TestLocalDate_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestLocalDate_Constructors.java\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * This class is a Junit unit test for LocalDate.\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse(\"2010-06-30\"));\n+        assertEquals(new LocalDate(2010, 1, 2), LocalDate.parse(\"2010-002\"));\n+    }\n+\n+    public void testParse_formatter() throws Throwable {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy--dd MM\").withChronology(ISOChronology.getInstance(PARIS));\n+        assertEquals(new LocalDate(2010, 6, 30), LocalDate.parse(\"2010--30 06\", f));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testFactory_FromCalendarFields() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n--- a/JodaTime/src/test/java/org/joda/time/TestLocalTime_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestLocalTime_Constructors.java\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * This class is a Junit unit test for LocalTime.\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        assertEquals(new LocalTime(1, 20), LocalTime.parse(\"01:20\"));\n+        assertEquals(new LocalTime(14, 50, 30, 432), LocalTime.parse(\"14:50:30.432\"));\n+    }\n+\n+    public void testParse_formatter() throws Throwable {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"HH mm\").withChronology(ISOChronology.getInstance(PARIS));\n+        assertEquals(new LocalTime(13, 30), LocalTime.parse(\"13 30\", f));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testFactory_FromCalendarFields_Calendar() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n--- a/JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java\n \n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * This class is a Junit unit test for MonthDay. Based on {@link TestYearMonth_Constuctors} \n     }\n \n     //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        assertEquals(new MonthDay(6, 30), MonthDay.parse(\"2010-06-30\"));\n+        assertEquals(new MonthDay(1, 2), MonthDay.parse(\"2010-002\"));\n+    }\n+\n+    public void testParse_formatter() throws Throwable {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy--dd MM\").withChronology(ISOChronology.getInstance(PARIS));\n+        assertEquals(new MonthDay(6, 30), MonthDay.parse(\"2010--30 06\", f));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testFactory_FromCalendarFields() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n--- a/JodaTime/src/test/java/org/joda/time/TestMutableDateTime_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutableDateTime_Constructors.java\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.MockZeroNullIntegerConverter;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * This class is a Junit unit test for MutableDateTime.\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        assertEquals(new MutableDateTime(2010, 6, 30, 0, 20, 0, 0, ISOChronology.getInstance(LONDON)), MutableDateTime.parse(\"2010-06-30T01:20+02:00\"));\n+        assertEquals(new MutableDateTime(2010, 1, 2, 14, 50, 0, 0, ISOChronology.getInstance(LONDON)), MutableDateTime.parse(\"2010-002T14:50\"));\n+    }\n+\n+    public void testParse_formatter() throws Throwable {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy--dd MM HH\").withChronology(ISOChronology.getInstance(PARIS));\n+        assertEquals(new MutableDateTime(2010, 6, 30, 13, 0, 0, 0, ISOChronology.getInstance(PARIS)), MutableDateTime.parse(\"2010--30 06 13\", f));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Test constructor ()\n      */\n--- a/JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java\n \n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * This class is a Junit unit test for YearMonth.\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        assertEquals(new YearMonth(2010, 6), YearMonth.parse(\"2010-06-30\"));\n+        assertEquals(new YearMonth(2010, 1), YearMonth.parse(\"2010-002\"));\n+    }\n+\n+    public void testParse_formatter() throws Throwable {\n+        DateTimeFormatter f = DateTimeFormat.forPattern(\"yyyy--MM\").withChronology(ISOChronology.getInstance(PARIS));\n+        assertEquals(new YearMonth(2010, 6), YearMonth.parse(\"2010--06\", f));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testFactory_FromCalendarFields() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);", "timestamp": 1289650433, "metainfo": ""}