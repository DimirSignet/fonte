{"sha": "cd24d5cb2a981ed5af3a3060399a13e010c33a6f", "log": "Fix to handle cross-time-zone issues properly rather than always using UTC  MutableDateTime.setDate(ReadableInstant)", "commit": "\n--- a/src/main/java/org/joda/time/MutableDateTime.java\n+++ b/src/main/java/org/joda/time/MutableDateTime.java\n     /**\n      * Set the date from another instant.\n      * The time part of this object will be unaffected.\n+     * <p>\n+     * If the input is a {@code ReadableDateTime} then it is converted to the\n+     * same time-zone as this object before using the instant millis.\n      *\n      * @param instant  an instant to copy the date from, time part ignored\n      * @throws IllegalArgumentException if the object is invalid\n      */\n     public void setDate(final ReadableInstant instant) {\n         long instantMillis = DateTimeUtils.getInstantMillis(instant);\n-        Chronology instantChrono = DateTimeUtils.getInstantChronology(instant);\n-        DateTimeZone zone = instantChrono.getZone();\n-        if (zone != null) {\n-            instantMillis = zone.getMillisKeepLocal(DateTimeZone.UTC, instantMillis);\n+        if (instant instanceof ReadableDateTime) {\n+            ReadableDateTime rdt = (ReadableDateTime) instant;\n+            Chronology instantChrono = DateTimeUtils.getChronology(rdt.getChronology());\n+            DateTimeZone zone = instantChrono.getZone();\n+            if (zone != null) {\n+                instantMillis = zone.getMillisKeepLocal(getZone(), instantMillis);\n+            }\n         }\n         setDate(instantMillis);\n     }\n--- a/src/test/java/org/joda/time/TestMutableDateTime_Sets.java\n+++ b/src/test/java/org/joda/time/TestMutableDateTime_Sets.java\n         assertEquals(501, test.getMillisOfSecond());\n     }\n \n+    public void testSetDate_RI_same() {\n+        MutableDateTime setter = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID(\"America/Los_Angeles\"));\n+        MutableDateTime test = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID(\"America/Los_Angeles\"));\n+        test.setDate(setter);\n+        assertEquals(2010, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+        assertEquals(2, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+    }\n+\n+    public void testSetDate_RI_different1() {\n+        MutableDateTime setter = new MutableDateTime(2010, 12, 1, 0, 0, 0, 0, DateTimeZone.forID(\"America/Los_Angeles\"));\n+        MutableDateTime test = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID(\"Europe/Moscow\"));\n+        test.setDate(setter);\n+        assertEquals(2010, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+        assertEquals(2, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+    }\n+\n+    public void testSetDate_RI_different2() {\n+        MutableDateTime setter = new MutableDateTime(2010, 12, 1, 0, 0, 0, 0, DateTimeZone.forID(\"Europe/Moscow\"));\n+        MutableDateTime test = new MutableDateTime(2010, 12, 3, 2, 24, 48, 501, DateTimeZone.forID(\"America/Los_Angeles\"));\n+        test.setDate(setter);\n+        assertEquals(2010, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+        assertEquals(2, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testSetTime_int_int_int_int1() {\n         MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);", "timestamp": 1349954548, "metainfo": ""}