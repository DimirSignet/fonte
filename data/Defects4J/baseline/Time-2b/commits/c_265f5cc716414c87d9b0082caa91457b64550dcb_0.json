{"sha": "265f5cc716414c87d9b0082caa91457b64550dcb", "log": "Renamed toCopy methods.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDuration.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDuration.java\n      * @throws ArithmeticException if the result of the calculation is too large\n      */\n     public final ReadableInstant addTo(ReadableInstant instant, int scalar) {\n-        return instant.toCopy(addTo(instant.getMillis(), scalar));\n+        return instant.withMillis(addTo(instant.getMillis(), scalar));\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/DateOnly.java\n+++ b/JodaTime/src/java/org/joda/time/DateOnly.java\n      * include ReadableInstant, String, Calendar and Date.\n      *\n      * @param instant  the datetime object, must not be null\n-     * @param chronology  the chronology, must not be null\n-     * @throws IllegalArgumentException if the date or chronology is null\n+     * @param chronology  the chronology, null means ISOChronology\n+     * @throws IllegalArgumentException if the chronology is null\n      */\n     public DateOnly(Object instant, Chronology chronology) {\n         super(instant, chronology);\n      * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n      * @return a copy of this instant with different millis\n      */\n-    public ReadableInstant toCopy(long newMillis) {\n+    public ReadableInstant withMillis(long newMillis) {\n         newMillis = resetUnsupportedFields(newMillis);\n         return newMillis == getMillis() ? this : new DateOnly(newMillis, getChronology());\n     }\n      *\n      * @param newChronology  the new chronology\n      * @return a copy of this instant with a different chronology\n-     * @throws IllegalArgumentException if the chronology is null\n-     */\n-    public ReadableInstant toCopy(Chronology newChronology) {\n-        if (newChronology == null) {\n-            throw new IllegalArgumentException(\"The Chronology must not be null\");\n-        }\n-        newChronology = newChronology.withUTC();\n+     */\n+    public ReadableInstant withChronology(Chronology newChronology) {\n+        newChronology = newChronology == null ? ISOChronology.getInstanceUTC()\n+            : newChronology.withUTC();\n         return newChronology == getChronology() ? this : new DateOnly(getMillis(), newChronology);\n     }\n \n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n      * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n      * @return a copy of this instant with different millis\n      */\n-    public ReadableInstant toCopy(long newMillis) {\n+    public ReadableInstant withMillis(long newMillis) {\n         return newMillis == getMillis() ? this : new DateTime(newMillis, getChronology());\n     }\n     \n      *\n      * @param newChronology  the new chronology\n      * @return a copy of this instant with a different chronology\n-     * @throws IllegalArgumentException if the chronology is null\n-     */\n-    public ReadableInstant toCopy(Chronology newChronology) {\n-        if (newChronology == null) {\n-            throw new IllegalArgumentException(\"The Chronology must not be null\");\n-        }\n+     */\n+    public ReadableInstant withChronology(Chronology newChronology) {\n         return newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology);\n     }\n     \n--- a/JodaTime/src/java/org/joda/time/Instant.java\n+++ b/JodaTime/src/java/org/joda/time/Instant.java\n      * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n      * @return a copy of this instant with different millis\n      */\n-    public ReadableInstant toCopy(long newMillis) {\n+    public ReadableInstant withMillis(long newMillis) {\n         return newMillis == iMillis ? this : new Instant(newMillis);\n     }\n     \n      * @param newChronology  ignored\n      * @return this\n      */\n-    public ReadableInstant toCopy(Chronology newChronology) {\n+    public ReadableInstant withChronology(Chronology newChronology) {\n         return this;\n     }\n     \n+    /**\n+     * Since Instant does not support time zones, this method always returns\n+     * <code>this</code>.\n+     *\n+     * @param newDateTimeZone  ignored\n+     * @return this\n+     */\n+    public ReadableInstant withDateTimeZone(DateTimeZone newDateTimeZone) {\n+        return this;\n+    }\n+\n     // Accessors\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/MutableDateOnly.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateOnly.java\n      * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n      * @return a copy of this instant with different millis\n      */\n-    public ReadableInstant toCopy(long newMillis) {\n+    public ReadableInstant withMillis(long newMillis) {\n         return new MutableDateOnly(newMillis, getChronology());\n     }\n     \n      *\n      * @param newChronology  the new chronology\n      * @return a copy of this instant with a different chronology\n-     * @throws IllegalArgumentException if the chronology is null\n-     */\n-    public ReadableInstant toCopy(Chronology newChronology) {\n-        if (newChronology == null) {\n-            throw new IllegalArgumentException(\"The Chronology must not be null\");\n-        }\n+     */\n+    public ReadableInstant withChronology(Chronology newChronology) {\n+        newChronology = newChronology == null ? ISOChronology.getInstanceUTC()\n+            : newChronology.withUTC();\n         return new MutableDateOnly(getMillis(), newChronology);\n     }\n \n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n      * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n      * @return a copy of this instant with different millis\n      */\n-    public ReadableInstant toCopy(long newMillis) {\n+    public ReadableInstant withMillis(long newMillis) {\n         return new MutableDateTime(newMillis, getChronology());\n     }\n     \n      *\n      * @param newChronology  the new chronology\n      * @return a copy of this instant with a different chronology\n-     * @throws IllegalArgumentException if the chronology is null\n-     */\n-    public ReadableInstant toCopy(Chronology newChronology) {\n-        if (newChronology == null) {\n-            throw new IllegalArgumentException(\"The Chronology must not be null\");\n-        }\n+     */\n+    public ReadableInstant withChronology(Chronology newChronology) {\n         return new MutableDateTime(getMillis(), newChronology);\n     }\n     \n--- a/JodaTime/src/java/org/joda/time/MutableTimeOnly.java\n+++ b/JodaTime/src/java/org/joda/time/MutableTimeOnly.java\n      * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n      * @return a copy of this instant with different millis\n      */\n-    public ReadableInstant toCopy(long newMillis) {\n+    public ReadableInstant withMillis(long newMillis) {\n         return new MutableTimeOnly(newMillis, getChronology());\n     }\n     \n      *\n      * @param newChronology  the new chronology\n      * @return a copy of this instant with a different chronology\n-     * @throws IllegalArgumentException if the chronology is null\n-     */\n-    public ReadableInstant toCopy(Chronology newChronology) {\n-        if (newChronology == null) {\n-            throw new IllegalArgumentException(\"The Chronology must not be null\");\n-        }\n+     */\n+    public ReadableInstant withChronology(Chronology newChronology) {\n+        newChronology = newChronology == null ? ISOChronology.getInstanceUTC()\n+            : newChronology.withUTC();\n         return new MutableTimeOnly(getMillis(), newChronology);\n     }\n \n--- a/JodaTime/src/java/org/joda/time/ReadableInstant.java\n+++ b/JodaTime/src/java/org/joda/time/ReadableInstant.java\n      * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n      * @return a copy of this instant with different millis\n      */\n-    ReadableInstant toCopy(long newMillis);\n+    ReadableInstant withMillis(long newMillis);\n     \n     /**\n      * Gets a copy of this instant with a different chronology.\n      *\n      * @param newChronology  the new chronology\n      * @return a copy of this instant with a different chronology\n-     * @throws IllegalArgumentException if the chronology is null\n-     */\n-    ReadableInstant toCopy(Chronology newChronology);\n-    \n+     */\n+    ReadableInstant withChronology(Chronology newChronology);\n+    \n+    /**\n+     * Gets a copy of this instant with a different time zone.\n+     * <p>\n+     * The returned object will be a new instance of the same implementation\n+     * type. Only the time zone of the chronology will change, the millis are\n+     * kept. Immutable subclasses may return <code>this</code> if appropriate.\n+     *\n+     * @param newDateTimeZone  the new time zone\n+     * @return a copy of this instant with a different time zone\n+     */\n+    ReadableInstant withDateTimeZone(DateTimeZone newDateTimeZone);\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Get the value as a simple immutable <code>Instant</code> object.\n--- a/JodaTime/src/java/org/joda/time/TimeOnly.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOnly.java\n      * include ReadableInstant, String, Calendar and Date.\n      *\n      * @param instant  the datetime object, must not be null\n-     * @param chronology  the chronology, must not be null\n-     * @throws IllegalArgumentException if the date or chronology is null\n+     * @param chronology  the chronology, null means ISOChronology\n+     * @throws IllegalArgumentException if the date is null\n      */\n     public TimeOnly(Object instant, Chronology chronology) {\n         super(instant, chronology);\n      * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n      * @return a copy of this instant with different millis\n      */\n-    public ReadableInstant toCopy(long newMillis) {\n+    public ReadableInstant withMillis(long newMillis) {\n         newMillis = resetUnsupportedFields(newMillis);\n         return newMillis == getMillis() ? this : new TimeOnly(newMillis, getChronology());\n     }\n      *\n      * @param newChronology  the new chronology\n      * @return a copy of this instant with a different chronology\n-     * @throws IllegalArgumentException if the chronology is null\n-     */\n-    public ReadableInstant toCopy(Chronology newChronology) {\n-        if (newChronology == null) {\n-            throw new IllegalArgumentException(\"The Chronology must not be null\");\n-        }\n-        newChronology = newChronology.withUTC();\n+     */\n+    public ReadableInstant withChronology(Chronology newChronology) {\n+        newChronology = newChronology == null ? ISOChronology.getInstanceUTC()\n+            : newChronology.withUTC();\n         return newChronology == getChronology() ? this : new TimeOnly(getMillis(), newChronology);\n     }\n \n--- a/JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java\n      */\n     public DateOnly addToCopy(int value) {\n         DateOnly instant = iInstant;\n-        return (DateOnly)instant.toCopy(iField.add(instant.getMillis(), value));\n+        return (DateOnly)instant.withMillis(iField.add(instant.getMillis(), value));\n     }\n \n     /**\n      */\n     public DateOnly addToCopy(long value) {\n         DateOnly instant = iInstant;\n-        return (DateOnly)instant.toCopy(iField.add(instant.getMillis(), value));\n+        return (DateOnly)instant.withMillis(iField.add(instant.getMillis(), value));\n     }\n \n     /**\n      */\n     public DateOnly addWrappedToCopy(int value) {\n         DateOnly instant = iInstant;\n-        return (DateOnly)instant.toCopy(iField.addWrapped(instant.getMillis(), value));\n+        return (DateOnly)instant.withMillis(iField.addWrapped(instant.getMillis(), value));\n     }\n \n     //-----------------------------------------------------------------------\n      */\n     public DateOnly setCopy(int value) {\n         DateOnly instant = iInstant;\n-        return (DateOnly)instant.toCopy(iField.set(instant.getMillis(), value));\n+        return (DateOnly)instant.withMillis(iField.set(instant.getMillis(), value));\n     }\n     \n     /**\n      */\n     public DateOnly setCopy(String text, Locale locale) {\n         DateOnly instant = iInstant;\n-        return (DateOnly)instant.toCopy(iField.set(instant.getMillis(), text, locale));\n+        return (DateOnly)instant.withMillis(iField.set(instant.getMillis(), text, locale));\n     }\n \n     /**\n      */\n     public DateOnly roundFloorCopy() {\n         DateOnly instant = iInstant;\n-        return (DateOnly)instant.toCopy(iField.roundFloor(instant.getMillis()));\n+        return (DateOnly)instant.withMillis(iField.roundFloor(instant.getMillis()));\n     }\n \n     /**\n      */\n     public DateOnly roundCeilingCopy() {\n         DateOnly instant = iInstant;\n-        return (DateOnly)instant.toCopy(iField.roundCeiling(instant.getMillis()));\n+        return (DateOnly)instant.withMillis(iField.roundCeiling(instant.getMillis()));\n     }\n \n     /**\n      */\n     public DateOnly roundHalfFloorCopy() {\n         DateOnly instant = iInstant;\n-        return (DateOnly)instant.toCopy(iField.roundHalfFloor(instant.getMillis()));\n+        return (DateOnly)instant.withMillis(iField.roundHalfFloor(instant.getMillis()));\n     }\n \n     /**\n      */\n     public DateOnly roundHalfCeilingCopy() {\n         DateOnly instant = iInstant;\n-        return (DateOnly)instant.toCopy(iField.roundHalfCeiling(instant.getMillis()));\n+        return (DateOnly)instant.withMillis(iField.roundHalfCeiling(instant.getMillis()));\n     }\n \n     /**\n      */\n     public DateOnly roundHalfEvenCopy() {\n         DateOnly instant = iInstant;\n-        return (DateOnly)instant.toCopy(iField.roundHalfEven(instant.getMillis()));\n+        return (DateOnly)instant.withMillis(iField.roundHalfEven(instant.getMillis()));\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java\n      */\n     public DateTime addToCopy(int value) {\n         DateTime instant = iInstant;\n-        return (DateTime)instant.toCopy(iField.add(instant.getMillis(), value));\n+        return (DateTime)instant.withMillis(iField.add(instant.getMillis(), value));\n     }\n \n     /**\n      */\n     public DateTime addToCopy(long value) {\n         DateTime instant = iInstant;\n-        return (DateTime)instant.toCopy(iField.add(instant.getMillis(), value));\n+        return (DateTime)instant.withMillis(iField.add(instant.getMillis(), value));\n     }\n \n     /**\n      */\n     public DateTime addWrappedToCopy(int value) {\n         DateTime instant = iInstant;\n-        return (DateTime)instant.toCopy(iField.addWrapped(instant.getMillis(), value));\n+        return (DateTime)instant.withMillis(iField.addWrapped(instant.getMillis(), value));\n     }\n \n     //-----------------------------------------------------------------------\n      */\n     public DateTime setCopy(int value) {\n         DateTime instant = iInstant;\n-        return (DateTime)instant.toCopy(iField.set(instant.getMillis(), value));\n+        return (DateTime)instant.withMillis(iField.set(instant.getMillis(), value));\n     }\n     \n     /**\n      */\n     public DateTime setCopy(String text, Locale locale) {\n         DateTime instant = iInstant;\n-        return (DateTime)instant.toCopy(iField.set(instant.getMillis(), text, locale));\n+        return (DateTime)instant.withMillis(iField.set(instant.getMillis(), text, locale));\n     }\n \n     /**\n      */\n     public DateTime roundFloorCopy() {\n         DateTime instant = iInstant;\n-        return (DateTime)instant.toCopy(iField.roundFloor(instant.getMillis()));\n+        return (DateTime)instant.withMillis(iField.roundFloor(instant.getMillis()));\n     }\n \n     /**\n      */\n     public DateTime roundCeilingCopy() {\n         DateTime instant = iInstant;\n-        return (DateTime)instant.toCopy(iField.roundCeiling(instant.getMillis()));\n+        return (DateTime)instant.withMillis(iField.roundCeiling(instant.getMillis()));\n     }\n \n     /**\n      */\n     public DateTime roundHalfFloorCopy() {\n         DateTime instant = iInstant;\n-        return (DateTime)instant.toCopy(iField.roundHalfFloor(instant.getMillis()));\n+        return (DateTime)instant.withMillis(iField.roundHalfFloor(instant.getMillis()));\n     }\n \n     /**\n      */\n     public DateTime roundHalfCeilingCopy() {\n         DateTime instant = iInstant;\n-        return (DateTime)instant.toCopy(iField.roundHalfCeiling(instant.getMillis()));\n+        return (DateTime)instant.withMillis(iField.roundHalfCeiling(instant.getMillis()));\n     }\n \n     /**\n      */\n     public DateTime roundHalfEvenCopy() {\n         DateTime instant = iInstant;\n-        return (DateTime)instant.toCopy(iField.roundHalfEven(instant.getMillis()));\n+        return (DateTime)instant.withMillis(iField.roundHalfEven(instant.getMillis()));\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java\n      */\n     public TimeOnly addToCopy(int value) {\n         TimeOnly instant = iInstant;\n-        return (TimeOnly)instant.toCopy(iField.add(instant.getMillis(), value));\n+        return (TimeOnly)instant.withMillis(iField.add(instant.getMillis(), value));\n     }\n \n     /**\n      */\n     public TimeOnly addToCopy(long value) {\n         TimeOnly instant = iInstant;\n-        return (TimeOnly)instant.toCopy(iField.add(instant.getMillis(), value));\n+        return (TimeOnly)instant.withMillis(iField.add(instant.getMillis(), value));\n     }\n \n     /**\n      */\n     public TimeOnly addWrappedToCopy(int value) {\n         TimeOnly instant = iInstant;\n-        return (TimeOnly)instant.toCopy(iField.addWrapped(instant.getMillis(), value));\n+        return (TimeOnly)instant.withMillis(iField.addWrapped(instant.getMillis(), value));\n     }\n \n     //-----------------------------------------------------------------------\n      */\n     public TimeOnly setCopy(int value) {\n         TimeOnly instant = iInstant;\n-        return (TimeOnly)instant.toCopy(iField.set(instant.getMillis(), value));\n+        return (TimeOnly)instant.withMillis(iField.set(instant.getMillis(), value));\n     }\n     \n     /**\n      */\n     public TimeOnly setCopy(String text, Locale locale) {\n         TimeOnly instant = iInstant;\n-        return (TimeOnly)instant.toCopy(iField.set(instant.getMillis(), text, locale));\n+        return (TimeOnly)instant.withMillis(iField.set(instant.getMillis(), text, locale));\n     }\n \n     /**\n      */\n     public TimeOnly roundFloorCopy() {\n         TimeOnly instant = iInstant;\n-        return (TimeOnly)instant.toCopy(iField.roundFloor(instant.getMillis()));\n+        return (TimeOnly)instant.withMillis(iField.roundFloor(instant.getMillis()));\n     }\n \n     /**\n      */\n     public TimeOnly roundCeilingCopy() {\n         TimeOnly instant = iInstant;\n-        return (TimeOnly)instant.toCopy(iField.roundCeiling(instant.getMillis()));\n+        return (TimeOnly)instant.withMillis(iField.roundCeiling(instant.getMillis()));\n     }\n \n     /**\n      */\n     public TimeOnly roundHalfFloorCopy() {\n         TimeOnly instant = iInstant;\n-        return (TimeOnly)instant.toCopy(iField.roundHalfFloor(instant.getMillis()));\n+        return (TimeOnly)instant.withMillis(iField.roundHalfFloor(instant.getMillis()));\n     }\n \n     /**\n      */\n     public TimeOnly roundHalfCeilingCopy() {\n         TimeOnly instant = iInstant;\n-        return (TimeOnly)instant.toCopy(iField.roundHalfCeiling(instant.getMillis()));\n+        return (TimeOnly)instant.withMillis(iField.roundHalfCeiling(instant.getMillis()));\n     }\n \n     /**\n      */\n     public TimeOnly roundHalfEvenCopy() {\n         TimeOnly instant = iInstant;\n-        return (TimeOnly)instant.toCopy(iField.roundHalfEven(instant.getMillis()));\n+        return (TimeOnly)instant.withMillis(iField.roundHalfEven(instant.getMillis()));\n     }\n \n }", "timestamp": 1073706439, "metainfo": ""}