{"sha": "bd39d516521f3346067c7e54c3ecc4809c695d2c", "log": "added tests and implementation of `Duration.negated()`", "commit": "\n--- a/src/main/java/org/joda/time/Duration.java\n+++ b/src/main/java/org/joda/time/Duration.java\n         return new Duration(FieldUtils.safeDivide(getMillis(), divisor));\n     }\n \n+    public Duration negated()\n+    {\n+        if(getMillis() == Long.MIN_VALUE)\n+            throw new ArithmeticException(\"Negation of this duration would overflow\");\n+        return new Duration(-getMillis());\n+    }\n+\n }\n--- a/src/test/java/org/joda/time/TestDuration_Basics.java\n+++ b/src/test/java/org/joda/time/TestDuration_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testNegated_long1() {\n+        Duration test = new Duration(246L);\n+        Duration result = test.negated();\n+        assertEquals(-246L, result.getMillis());\n+    }\n+\n+    public void testNegated_long2() {\n+        Duration test = new Duration(-246L);\n+        Duration result = test.negated();\n+        assertEquals(246L, result.getMillis());\n+    }\n+\n+    public void testNegated_long3() {\n+        Duration test = new Duration(Long.MIN_VALUE);\n+        try {\n+            test.negated();\n+            fail();\n+        } catch(ArithmeticException e) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testWithDurationAdded_RD_int1() {\n         Duration test = new Duration(123L);\n         Duration result = test.withDurationAdded(new Duration(8000L), 1);", "timestamp": 1380663611, "metainfo": ""}