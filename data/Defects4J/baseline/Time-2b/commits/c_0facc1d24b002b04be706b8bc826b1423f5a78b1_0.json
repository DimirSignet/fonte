{"sha": "0facc1d24b002b04be706b8bc826b1423f5a78b1", "log": "Extended time zone offset precision, ensuring that for Joda, all instants converted to strings can be parsed back into the exact same instant.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n      * std-date-element  = yyyy ['-' MM ['-' dd]]\n      * ord-date-element  = yyyy ['-' DDD]\n      * week-date-element = xxxx '-W' ww ['-' e]\n-     * offset            = 'Z' | (('+' | '-') HH ':' mm)\n+     * offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])\n      * </pre>\n      */\n     public DateTimeParser dateParser() {\n      * minute-element = ':' mm [second-element] | [fraction]\n      * second-element = ':' ss [fraction]\n      * fraction       = ('.' | ',') digit+\n-     * offset         = 'Z' | (('+' | '-') HH ':' mm)\n+     * offset         = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])\n      * </pre>\n      */\n     public DateTimeParser timeParser() {\n      * minute-element    = ':' mm [second-element] | [fraction]\n      * second-element    = ':' ss [fraction]\n      * fraction          = ('.' | ',') digit+\n-     * offset            = 'Z' | (('+' | '-') HH ':' mm)\n+     * offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])\n      * </pre>\n      */\n     public DateTimeParser dateTimeParser() {\n     private DateTimeFormatter offsetElement() {\n         if (ze == null) {\n             ze = new DateTimeFormatterBuilder(iChrono)\n-                .appendTimeZoneOffset(\"Z\", true, 2, 2)\n+                .appendTimeZoneOffset(\"Z\", true, 2, 4)\n                 .toFormatter();\n         }\n         return ze;", "timestamp": 1073543099, "metainfo": ""}