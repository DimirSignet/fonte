{"sha": "19c4b7b751c965cd3e83b1321dbdc84b18f59b01", "log": "Merge pull request #85 from haguenau/master  Spelling fixes for Duration", "commit": "\n--- a/src/main/java/org/joda/time/Duration.java\n+++ b/src/main/java/org/joda/time/Duration.java\n  * A duration is defined by a fixed number of milliseconds.\n  * There is no concept of fields, such as days or seconds, as these fields can vary in length.\n  * A duration may be converted to a {@link Period} to obtain field values.\n- * This conversion will typically cause a loss of precision however.\n+ * This conversion will typically cause a loss of precision, however.\n  * <p>\n  * Duration is thread-safe and immutable.\n  *\n      * Savings changes will not have 24 hours, so use this method with care.\n      * <p>\n      * A Duration is a representation of an amount of time. If you want to express\n-     * the concepts of 'days' you should consider using the {@link Days} class.\n+     * the concept of 'days' you should consider using the {@link Days} class.\n      *\n      * @param days  the number of standard days in this duration\n      * @return the duration, never null\n      * All currently supplied chronologies use this definition.\n      * <p>\n      * A Duration is a representation of an amount of time. If you want to express\n-     * the concepts of 'hours' you should consider using the {@link Hours} class.\n+     * the concept of 'hours' you should consider using the {@link Hours} class.\n      *\n      * @param hours  the number of standard hours in this duration\n      * @return the duration, never null\n      * All currently supplied chronologies use this definition.\n      * <p>\n      * A Duration is a representation of an amount of time. If you want to express\n-     * the concepts of 'minutes' you should consider using the {@link Minutes} class.\n+     * the concept of 'minutes' you should consider using the {@link Minutes} class.\n      *\n      * @param minutes  the number of standard minutes in this duration\n      * @return the duration, never null\n      * All currently supplied chronologies use this definition.\n      * <p>\n      * A Duration is a representation of an amount of time. If you want to express\n-     * the concepts of 'seconds' you should consider using the {@link Seconds} class.\n+     * the concept of 'seconds' you should consider using the {@link Seconds} class.\n      *\n      * @param seconds  the number of standard seconds in this duration\n      * @return the duration, never null\n      *\n      * @param startInstant  interval start, in milliseconds\n      * @param endInstant  interval end, in milliseconds\n-     * @throws ArithmeticException if the duration exceeds a 64 bit long\n+     * @throws ArithmeticException if the duration exceeds a 64-bit long\n      */\n     public Duration(long startInstant, long endInstant) {\n         super(startInstant, endInstant);\n      *\n      * @param start  interval start, null means now\n      * @param end  interval end, null means now\n-     * @throws ArithmeticException if the duration exceeds a 64 bit long\n+     * @throws ArithmeticException if the duration exceeds a 64-bit long\n      */\n     public Duration(ReadableInstant start, ReadableInstant end) {\n         super(start, end);\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Creates a new Duration instance with a different milisecond length.\n+     * Creates a new Duration instance with a different millisecond length.\n      * \n      * @param duration  the new length of the duration\n      * @return the new duration instance", "timestamp": 1385541023, "metainfo": ""}