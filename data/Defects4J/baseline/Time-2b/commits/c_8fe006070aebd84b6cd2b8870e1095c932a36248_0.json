{"sha": "8fe006070aebd84b6cd2b8870e1095c932a36248", "log": "Optimise toXxx() methods   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Get this object as a DateTime by returning <code>this</code>.\n+     * \n+     * @return <code>this</code>\n+     */\n+    public DateTime toDateTime() {\n+        return this;\n+    }\n+\n+    /**\n+     * Get this object as a DateTime, returning <code>this</code> if possible.\n+     * \n+     * @param zone time zone to apply, or default if null\n+     * @return a DateTime using the same millis\n+     */\n+    public DateTime toDateTime(DateTimeZone zone) {\n+        zone = DateTimeUtils.getZone(zone);\n+        if (getZone() == zone) {\n+            return this;\n+        }\n+        return super.toDateTime(zone);\n+    }\n+\n+    /**\n+     * Get this object as a DateTime, returning <code>this</code> if possible.\n+     * \n+     * @param chronology chronology to apply, or ISOChronology if null\n+     * @return a DateTime using the same millis\n+     */\n+    public DateTime toDateTime(Chronology chronology) {\n+        chronology = DateTimeUtils.getChronology(chronology);\n+        if (getChronology() == chronology) {\n+            return this;\n+        }\n+        return super.toDateTime(chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Gets a copy of this datetime with different millis.\n      * <p>\n      * The returned object will be a new instance of the same implementation type.\n--- a/JodaTime/src/java/org/joda/time/Duration.java\n+++ b/JodaTime/src/java/org/joda/time/Duration.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Get this duration as an immutable <code>Duration</code> object\n+     * by returning <code>this</code>.\n+     * \n+     * @return <code>this</code>\n+     */\n+    public Duration toDuration() {\n+        return this;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Creates a new Duration instance with a different milisecond length.\n      * \n      * @param duration  the new length of the duration\n--- a/JodaTime/src/java/org/joda/time/Instant.java\n+++ b/JodaTime/src/java/org/joda/time/Instant.java\n     /** The millis from 1970-01-01T00:00:00Z */\n     private final long iMillis;\n \n-    // Constructors\n     //-----------------------------------------------------------------------\n     /**\n      * Constructs an instance set to the current system millisecond time.\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Get this object as an Instant by returning <code>this</code>.\n+     * \n+     * @return <code>this</code>\n+     */\n+    public Instant toInstant() {\n+        return this;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Gets a copy of this instant with different millis.\n      * <p>\n      * The returned object will be either be a new Instant or <code>this</code>.\n         return (newMillis == iMillis ? this : new Instant(newMillis));\n     }\n \n-    // Accessors\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the milliseconds of the instant.\n         return null;\n     }\n \n-    // Output\n     //-----------------------------------------------------------------------\n     /**\n      * Output the date time in ISO8601 format using the UTC time zone.\n--- a/JodaTime/src/java/org/joda/time/Interval.java\n+++ b/JodaTime/src/java/org/joda/time/Interval.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Get this interval as an immutable <code>Interval</code> object\n+     * by returning <code>this</code>.\n+     *\n+     * @return <code>this</code>\n+     */\n+    public Interval toInterval() {\n+        return this;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Creates a new interval with the specified start millisecond instant.\n      *\n      * @param startInstant  the start instant for the new interval\n--- a/JodaTime/src/java/org/joda/time/base/AbstractDuration.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractDuration.java\n     //-----------------------------------------------------------------------\n     /**\n      * Get this duration as an immutable <code>Duration</code> object.\n-     * <p>\n-     * This will either typecast this instance, or create a new <code>Duration</code>.\n      * \n      * @return a Duration created using the millisecond duration from this instance\n      */\n     public Duration toDuration() {\n-        if (this instanceof Duration) {\n-            return (Duration) this;\n-        }\n         return new Duration(getMillis());\n     }\n \n--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n         super();\n     }\n \n-    // Accessors\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the time zone of the datetime from the chronology, or null if there\n         return field.get(getMillis());\n     }\n \n-    // Conversion\n     //-----------------------------------------------------------------------\n     /**\n      * Get this object as an Instant.\n      * @return an Instant using the same millis\n      */\n     public Instant toInstant() {\n-        if (this instanceof Instant) {\n-            return (Instant) this;\n-        }\n-        return new Instant(this);\n+        return new Instant(getMillis());\n     }\n \n     /**\n      * @return a DateTime using the same millis\n      */\n     public DateTime toDateTime() {\n-        if (this instanceof DateTime) {\n-            return (DateTime) this;\n-        }\n-        return new DateTime(this);\n+        return new DateTime(getMillis());\n     }\n \n     /**\n      * @return a DateTime using the same millis\n      */\n     public DateTime toDateTime(DateTimeZone zone) {\n-        zone = DateTimeUtils.getZone(zone);\n-        if (this instanceof DateTime && getZone() == zone) {\n-            return (DateTime) this;\n-        }\n-        return new DateTime(this, zone);\n+        Chronology chrono = DateTimeUtils.getChronology(getChronology());\n+        chrono = chrono.withZone(zone);\n+        return new DateTime(getMillis(), chrono);\n     }\n \n     /**\n      * @return a DateTime using the same millis\n      */\n     public DateTime toDateTime(Chronology chronology) {\n-        chronology = DateTimeUtils.getChronology(chronology);\n-        if (this instanceof DateTime && getChronology() == chronology) {\n-            return (DateTime) this;\n-        }\n-        return new DateTime(this, chronology);\n+        return new DateTime(getMillis(), chronology);\n     }\n \n     /**\n      * @return a MutableDateTime using the same millis\n      */\n     public MutableDateTime toMutableDateTime() {\n-        return new MutableDateTime(this);\n+        return new MutableDateTime(getMillis());\n     }\n \n     /**\n      * @return a MutableDateTime using the same millis\n      */\n     public MutableDateTime toMutableDateTime(DateTimeZone zone) {\n-        return new MutableDateTime(this, zone);\n+        Chronology chrono = DateTimeUtils.getChronology(getChronology());\n+        chrono = chrono.withZone(zone);\n+        return new MutableDateTime(getMillis(), chrono);\n     }\n \n     /**\n      * @return a MutableDateTime using the same millis\n      */\n     public MutableDateTime toMutableDateTime(Chronology chronology) {\n-        return new MutableDateTime(this, chronology);\n-    }\n-\n+        return new MutableDateTime(getMillis(), chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Get the date time as a <code>java.util.Date</code>.\n      * \n         return cal;\n     }\n \n-    // Basics\n     //-----------------------------------------------------------------------\n     /**\n      * Compares this object with the specified object for equality based\n         return isEqual(instantMillis);\n     }\n \n-    // Output    \n     //-----------------------------------------------------------------------\n     /**\n      * Output the date time in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSSZ).\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java\n     //-----------------------------------------------------------------------\n     /**\n      * Get this interval as an immutable <code>Interval</code> object.\n-     * <p>\n-     * This will either typecast this instance, or create a new <code>Interval</code>.\n      *\n      * @return the interval as an Interval object\n      */\n     public Interval toInterval() {\n-        if (this instanceof Interval) {\n-            return (Interval) this;\n-        }\n         return new Interval(getStartMillis(), getEndMillis());\n     }\n ", "timestamp": 1093125136, "metainfo": ""}