{"sha": "12883c595ea9e1e82acb2875625a51d3c9a35a0a", "log": "Deprecate Chronology factory methods   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Chronology.java\n+++ b/JodaTime/src/java/org/joda/time/Chronology.java\n  * Chronology provides access to the individual date time fields for a\n  * chronological calendar system.\n  * <p>\n- * Various chronologies are supported by subclasses including ISO and GregorianJulian.\n- * This class provides static factory methods to access these chronologies.\n+ * Various chronologies are supported by subclasses including ISO\n+ * and GregorianJulian. To construct a Chronology you should use the\n+ * factory methods on {@link ChronologyType}. If you require full\n+ * control of the factory, then you should use the method on each subclass.\n+ * <p>\n  * For example, to obtain the current time in the coptic calendar system:\n  * <pre>\n- * DateTime dt = new DateTime(Chronology.getCoptic());\n+ * DateTime dt = new DateTime(ChronologyType.coptic().getChronology());\n  * </pre>\n  * <p>\n  * The provided chronology implementations are:\n  * For example, a week could be defined as 10 days and a month as 40 days in a\n  * special WeirdChronology implementation. Clearly the GJ and ISO\n  * implementations provided use the field names as you would expect.\n- * \n+ *\n  * @see org.joda.time.chrono.ISOChronology\n  * @see org.joda.time.chrono.GJChronology\n  * @see org.joda.time.chrono.GregorianChronology\n      * as it applies the modern Gregorian calendar rules before that date.\n      *\n      * @return the ISO chronology\n+     * @deprecated Use ChronologyType.iso().getChronology()\n      */\n     public static Chronology getISO() {\n         return ISOChronology.getInstance();\n      * as it applies the modern Gregorian calendar rules before that date.\n      *\n      * @return the ISO chronology\n+     * @deprecated Use ChronologyType.iso().getChronologyUTC()\n      */\n     public static Chronology getISOUTC() {\n         return ISOChronology.getInstanceUTC();\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return the ISO chronology\n+     * @deprecated Use ChronologyType.iso().getChronology(zone)\n      */\n     public static Chronology getISO(DateTimeZone zone) {\n         return ISOChronology.getInstance(zone);\n      * we recommend using ISOChronology, which is the default.\n      *\n      * @return the GJ chronology\n+     * @deprecated Use ChronologyType.gj().getChronology()\n      */\n     public static Chronology getGJ() {\n         return GJChronology.getInstance();\n      * we recommend using ISOChronology, which is the default.\n      *\n      * @return the GJ chronology\n+     * @deprecated Use ChronologyType.gj().getChronologyUTC()\n      */\n     public static Chronology getGJUTC() {\n         return GJChronology.getInstanceUTC();\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return the GJ chronology\n+     * @deprecated Use ChronologyType.gj().getChronology(zone)\n      */\n     public static Chronology getGJ(DateTimeZone zone) {\n         return GJChronology.getInstance(zone);\n      * thus we recommend using ISOChronology instead, which is the default.\n      *\n      * @return the Gregorian chronology\n+     * @deprecated Use ChronologyType.gregorian().getChronology()\n      */\n     public static Chronology getGregorian() {\n         return GregorianChronology.getInstance();\n      * thus we recommend using ISOChronology instead, which is the default.\n      *\n      * @return the Gregorian chronology\n+     * @deprecated Use ChronologyType.gregorian().getChronologyUTC()\n      */\n     public static Chronology getGregorianUTC() {\n         return GregorianChronology.getInstanceUTC();\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return the Gregorian chronology\n+     * @deprecated Use ChronologyType.gregorian().getChronology(zone)\n      */\n     public static Chronology getGregorian(DateTimeZone zone) {\n         return GregorianChronology.getInstance(zone);\n      * The Julian calendar system defines a leap year every four years.\n      *\n      * @return the Julian chronology\n+     * @deprecated Use ChronologyType.julian().getChronology()\n      */\n     public static Chronology getJulian() {\n         return JulianChronology.getInstance();\n      * The Julian calendar system defines a leap year every four years.\n      *\n      * @return the Julian chronology\n+     * @deprecated Use ChronologyType.julian().getChronologyUTC()\n      */\n     public static Chronology getJulianUTC() {\n         return JulianChronology.getInstanceUTC();\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return the Julian chronology\n+     * @deprecated Use ChronologyType.julian().getChronology(zone)\n      */\n     public static Chronology getJulian(DateTimeZone zone) {\n         return JulianChronology.getInstance(zone);\n      * year 1 in the Buddhist calendar.\n      *\n      * @return the Buddhist chronology\n+     * @deprecated Use ChronologyType.buddhist().getChronology()\n      */\n     public static Chronology getBuddhist() {\n         return BuddhistChronology.getInstance();\n      * year 1 in the Buddhist calendar.\n      *\n      * @return the Buddhist chronology\n+     * @deprecated Use ChronologyType.buddhist().getChronologyUTC()\n      */\n     public static Chronology getBuddhistUTC() {\n         return BuddhistChronology.getInstanceUTC();\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return the Buddhist chronology\n+     * @deprecated Use ChronologyType.buddhist().getChronology(zone)\n      */\n     public static Chronology getBuddhist(DateTimeZone zone) {\n         return BuddhistChronology.getInstance(zone);\n      * The chronology cannot be used before the first Coptic year.\n      *\n      * @return the Coptic chronology\n+     * @deprecated Use ChronologyType.coptic().getChronology()\n      */\n     public static Chronology getCoptic() {\n         return CopticChronology.getInstance();\n      * The chronology cannot be used before the first Coptic year.\n      *\n      * @return the Coptic chronology\n+     * @deprecated Use ChronologyType.coptic().getChronologyUTC()\n      */\n     public static Chronology getCopticUTC() {\n         return CopticChronology.getInstanceUTC();\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return the Coptic chronology\n+     * @deprecated Use ChronologyType.coptic().getChronology(zone)\n      */\n     public static Chronology getCoptic(DateTimeZone zone) {\n         return CopticChronology.getInstance(zone);", "timestamp": 1125865268, "metainfo": ""}