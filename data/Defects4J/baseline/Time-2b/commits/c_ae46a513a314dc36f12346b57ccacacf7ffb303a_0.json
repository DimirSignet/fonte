{"sha": "ae46a513a314dc36f12346b57ccacacf7ffb303a", "log": "Fix interval to use chronology throughout   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Interval.java\n+++ b/JodaTime/src/java/org/joda/time/Interval.java\n         extends BaseInterval\n         implements ReadableInterval, Serializable {\n \n-    /** An interval over all time, as represented by milliseconds. */\n-    public static final Interval ALWAYS = new Interval(Long.MIN_VALUE, Long.MAX_VALUE);\n-\n     /** Serialization version */\n     private static final long serialVersionUID = 4922451897541386752L;\n \n         if (startInstant == getStartMillis()) {\n             return this;\n         }\n-        return new Interval(startInstant, getEndMillis());\n+        return new Interval(startInstant, getEndMillis(), getChronology());\n     }\n \n     /**\n         if (endInstant == getEndMillis()) {\n             return this;\n         }\n-        return new Interval(getStartMillis(), endInstant);\n+        return new Interval(getStartMillis(), endInstant, getChronology());\n     }\n \n     /**\n         if (durationMillis == toDurationMillis()) {\n             return this;\n         }\n+        Chronology chrono = getChronology();\n         long startMillis = getStartMillis();\n-        long endMillis = getChronology().add(startMillis, durationMillis, 1);\n-        return new Interval(startMillis, endMillis);\n+        long endMillis = chrono.add(startMillis, durationMillis, 1);\n+        return new Interval(startMillis, endMillis, chrono);\n     }\n \n     /**\n         if (durationMillis == toDurationMillis()) {\n             return this;\n         }\n+        Chronology chrono = getChronology();\n         long endMillis = getEndMillis();\n-        long startMillis = getChronology().add(endMillis, durationMillis, -1);\n-        return new Interval(startMillis, endMillis);\n+        long startMillis = chrono.add(endMillis, durationMillis, -1);\n+        return new Interval(startMillis, endMillis, chrono);\n     }\n \n     //-----------------------------------------------------------------------\n      */\n     public Interval withPeriodAfterStart(ReadablePeriod period) {\n         if (period == null) {\n-            return this;\n-        }\n+            return withDurationAfterStart(null);\n+        }\n+        Chronology chrono = getChronology();\n         long startMillis = getStartMillis();\n-        long endMillis = getChronology().add(period, startMillis, 1);\n-        return new Interval(startMillis, endMillis);\n+        long endMillis = chrono.add(period, startMillis, 1);\n+        return new Interval(startMillis, endMillis, chrono);\n     }\n \n     /**\n      */\n     public Interval withPeriodBeforeEnd(ReadablePeriod period) {\n         if (period == null) {\n-            return this;\n-        }\n+            return withDurationBeforeEnd(null);\n+        }\n+        Chronology chrono = getChronology();\n         long endMillis = getEndMillis();\n-        long startMillis = getChronology().add(period, endMillis, -1);\n-        return new Interval(startMillis, endMillis);\n+        long startMillis = chrono.add(period, endMillis, -1);\n+        return new Interval(startMillis, endMillis, chrono);\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java\n      * @return the interval as an Interval object\n      */\n     public Interval toInterval() {\n-        return new Interval(getStartMillis(), getEndMillis());\n+        return new Interval(getStartMillis(), getEndMillis(), getChronology());\n     }\n \n     /**\n      * @return the time interval as a MutableInterval object\n      */\n     public MutableInterval toMutableInterval() {\n-        return new MutableInterval(getStartMillis(), getEndMillis());\n+        return new MutableInterval(getStartMillis(), getEndMillis(), getChronology());\n     }\n \n     //-----------------------------------------------------------------------\n      * @return a time period derived from the interval\n      */\n     public Period toPeriod() {\n-        return new Period(getStartMillis(), getEndMillis());\n+        return new Period(getStartMillis(), getEndMillis(), getChronology());\n     }\n \n     /**\n      * @return a time period derived from the interval\n      */\n     public Period toPeriod(PeriodType type) {\n-        return new Period(getStartMillis(), getEndMillis(), type);\n+        return new Period(getStartMillis(), getEndMillis(), type, getChronology());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n \n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n         assertEquals(false, test1.hashCode() == test3.hashCode());\n         assertEquals(false, test2.hashCode() == test3.hashCode());\n         \n-        Interval test4 = new Interval(TEST_TIME1, TEST_TIME1, Chronology.getGJ());\n+        Interval test4 = new Interval(TEST_TIME1, TEST_TIME2, Chronology.getGJ());\n         assertEquals(true, test4.equals(test4));\n         assertEquals(false, test1.equals(test4));\n         assertEquals(false, test2.equals(test4));\n \n     //-----------------------------------------------------------------------\n     public void testToInterval1() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n         Interval result = test.toInterval();\n         assertSame(test, result);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testToMutableInterval1() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n         MutableInterval result = test.toMutableInterval();\n         assertEquals(test, result);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testToPeriod() {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n-        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n-        Interval test = new Interval(dt1, dt2);\n-        \n-        Period result = test.toPeriod();\n-        assertEquals(PeriodType.standard(), result.getPeriodType());\n-        assertEquals(1, result.getYears());\n-        assertEquals(2, result.getMonths());\n-        assertEquals(0, result.getWeeks());\n-        assertEquals(4, result.getDays());\n-        assertEquals(5, result.getHours());\n-        assertEquals(6, result.getMinutes());\n-        assertEquals(7, result.getSeconds());\n-        assertEquals(8, result.getMillis());\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        Period test = base.toPeriod();\n+        Period expected = new Period(dt1, dt2, PeriodType.standard());\n+        assertEquals(expected, test);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testToPeriod_PeriodType1() {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n-        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n-        Interval test = new Interval(dt1, dt2);\n-        \n-        Period result = test.toPeriod(null);\n-        assertEquals(PeriodType.standard(), result.getPeriodType());\n-        assertEquals(1, result.getYears());\n-        assertEquals(2, result.getMonths());\n-        assertEquals(0, result.getWeeks());\n-        assertEquals(4, result.getDays());\n-        assertEquals(5, result.getHours());\n-        assertEquals(6, result.getMinutes());\n-        assertEquals(7, result.getSeconds());\n-        assertEquals(8, result.getMillis());\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS);\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        Period test = base.toPeriod(null);\n+        Period expected = new Period(dt1, dt2, PeriodType.standard());\n+        assertEquals(expected, test);\n     }\n \n     public void testToPeriod_PeriodType2() {\n         DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n         DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n-        Interval test = new Interval(dt1, dt2);\n-        \n-        Period result = test.toPeriod(PeriodType.yearWeekDayTime());\n-        assertEquals(PeriodType.yearWeekDayTime(), result.getPeriodType());\n-        assertEquals(1, result.getYears());\n-        assertEquals(0, result.getMonths());\n-        assertEquals(9, result.getWeeks());\n-        assertEquals(2, result.getDays());\n-        assertEquals(5, result.getHours());\n-        assertEquals(6, result.getMinutes());\n-        assertEquals(7, result.getSeconds());\n-        assertEquals(8, result.getMillis());\n-    }\n-\n-    public void testToPeriod_PeriodType3() {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n-        DateTime dt2 = new DateTime(2005, 6, 9, 12, 14, 16, 18);\n-        Interval test = new Interval(dt1, dt2);\n-        \n-        Period result = test.toPeriod(PeriodType.yearWeekDayTime());\n-        assertEquals(PeriodType.yearWeekDayTime(), result.getPeriodType());\n-        assertEquals(1, result.getYears());\n-        assertEquals(0, result.getMonths());\n-        assertEquals(0, result.getWeeks());\n-        assertEquals(0, result.getDays());\n-        assertEquals(5, result.getHours());\n-        assertEquals(6, result.getMinutes());\n-        assertEquals(7, result.getSeconds());\n-        assertEquals(8, result.getMillis());\n+        Interval base = new Interval(dt1, dt2);\n+        \n+        Period test = base.toPeriod(PeriodType.yearWeekDayTime());\n+        Period expected = new Period(dt1, dt2, PeriodType.yearWeekDayTime());\n+        assertEquals(expected, test);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testSerialization() throws Exception {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testAlways() {\n-        Interval test = Interval.ALWAYS;\n-        assertEquals(Long.MIN_VALUE, test.getStartMillis());\n-        assertEquals(Long.MAX_VALUE, test.getEndMillis());\n-    }\n-\n-    //-----------------------------------------------------------------------\n     public void testWithStartMillis_long1() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        Interval result = test.withStartMillis(TEST_TIME1 - 1);\n-        assertEquals(TEST_TIME1 - 1, result.getStartMillis());\n-        assertEquals(TEST_TIME2, result.getEndMillis());\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withStartMillis(TEST_TIME1 - 1);\n+        assertEquals(new Interval(TEST_TIME1 - 1, TEST_TIME2, COPTIC_PARIS), test);\n     }\n \n     public void testWithStartMillis_long2() {\n     }\n \n     public void testWithStartMillis_long3() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        Interval result = test.withStartMillis(TEST_TIME1);\n-        assertSame(test, result);\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withStartMillis(TEST_TIME1);\n+        assertSame(base, test);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testWithStartInstant_RI1() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        Interval result = test.withStart(new Instant(TEST_TIME1 - 1));\n-        assertEquals(TEST_TIME1 - 1, result.getStartMillis());\n-        assertEquals(TEST_TIME2, result.getEndMillis());\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withStart(new Instant(TEST_TIME1 - 1));\n+        assertEquals(new Interval(TEST_TIME1 - 1, TEST_TIME2, COPTIC_PARIS), test);\n     }\n \n     public void testWithStartInstant_RI2() {\n     }\n \n     public void testWithStartInstant_RI3() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        Interval result = test.withStart(null);\n-        assertEquals(TEST_TIME_NOW, result.getStartMillis());\n-        assertEquals(TEST_TIME2, result.getEndMillis());\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withStart(null);\n+        assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS), test);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testWithEndMillis_long1() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        Interval result = test.withEndMillis(TEST_TIME2 - 1);\n-        assertEquals(TEST_TIME1, result.getStartMillis());\n-        assertEquals(TEST_TIME2 - 1, result.getEndMillis());\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withEndMillis(TEST_TIME2 - 1);\n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME2 - 1, COPTIC_PARIS), test);\n     }\n \n     public void testWithEndMillis_long2() {\n     }\n \n     public void testWithEndMillis_long3() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        Interval result = test.withEndMillis(TEST_TIME2);\n-        assertSame(test, result);\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withEndMillis(TEST_TIME2);\n+        assertSame(base, test);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testWithEndInstant_RI1() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        Interval result = test.withEnd(new Instant(TEST_TIME2 - 1));\n-        assertEquals(TEST_TIME1, result.getStartMillis());\n-        assertEquals(TEST_TIME2 - 1, result.getEndMillis());\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withEnd(new Instant(TEST_TIME2 - 1));\n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME2 - 1, COPTIC_PARIS), test);\n     }\n \n     public void testWithEndInstant_RI2() {\n     }\n \n     public void testWithEndInstant_RI3() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        Interval result = test.withEnd(null);\n-        assertEquals(TEST_TIME1, result.getStartMillis());\n-        assertEquals(TEST_TIME_NOW, result.getEndMillis());\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withEnd(null);\n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME_NOW, COPTIC_PARIS), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAfterStart1() throws Throwable {\n+        Duration dur = new Duration(TEST_TIME2 - TEST_TIME_NOW);\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS);\n+        Interval test = base.withDurationAfterStart(dur);\n+        \n+        assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithDurationAfterStart2() throws Throwable {\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withDurationAfterStart(null);\n+        \n+        assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithDurationAfterStart3() throws Throwable {\n+        Duration dur = new Duration(-1);\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW);\n+        try {\n+            base.withDurationAfterStart(dur);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationBeforeEnd1() throws Throwable {\n+        Duration dur = new Duration(TEST_TIME_NOW - TEST_TIME1);\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS);\n+        Interval test = base.withDurationBeforeEnd(dur);\n+        \n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME_NOW, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithDurationBeforeEnd2() throws Throwable {\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withDurationBeforeEnd(null);\n+        \n+        assertEquals(new Interval(TEST_TIME2, TEST_TIME2, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithDurationBeforeEnd3() throws Throwable {\n+        Duration dur = new Duration(-1);\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW);\n+        try {\n+            base.withDurationBeforeEnd(dur);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithPeriodAfterStart1() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS);\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        \n+        Interval base = new Interval(dt, dt);\n+        Interval test = base.withPeriodAfterStart(dur);\n+        assertEquals(new Interval(dt, dur), test);\n+    }\n+\n+    public void testWithPeriodAfterStart2() throws Throwable {\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withPeriodAfterStart(null);\n+        \n+        assertEquals(new Interval(TEST_TIME_NOW, TEST_TIME_NOW, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithPeriodAfterStart3() throws Throwable {\n+        Period per = new Period(0, 0, 0, 0, 0, 0, 0, -1);\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW);\n+        try {\n+            base.withPeriodAfterStart(per);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithPeriodBeforeEnd1() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS);\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        \n+        Interval base = new Interval(dt, dt);\n+        Interval test = base.withPeriodBeforeEnd(dur);\n+        assertEquals(new Interval(dur, dt), test);\n+    }\n+\n+    public void testWithPeriodBeforeEnd2() throws Throwable {\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withPeriodBeforeEnd(null);\n+        \n+        assertEquals(new Interval(TEST_TIME2, TEST_TIME2, COPTIC_PARIS), test);\n+    }\n+\n+    public void testWithPeriodBeforeEnd3() throws Throwable {\n+        Period per = new Period(0, 0, 0, 0, 0, 0, 0, -1);\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME_NOW);\n+        try {\n+            base.withPeriodBeforeEnd(per);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n }\n--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java\n \n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n         assertEquals(false, test1.hashCode() == test3.hashCode());\n         assertEquals(false, test2.hashCode() == test3.hashCode());\n         \n-        MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2);\n-        assertEquals(true, test1.equals(test4));\n-        assertEquals(true, test2.equals(test4));\n-        assertEquals(false, test3.equals(test4));\n-        assertEquals(true, test4.equals(test1));\n-        assertEquals(true, test4.equals(test2));\n-        assertEquals(false, test4.equals(test3));\n-        assertEquals(true, test1.hashCode() == test4.hashCode());\n-        assertEquals(true, test2.hashCode() == test4.hashCode());\n-        assertEquals(false, test3.hashCode() == test4.hashCode());\n+        MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, Chronology.getGJ());\n+        assertEquals(true, test4.equals(test4));\n+        assertEquals(false, test1.equals(test4));\n+        assertEquals(false, test2.equals(test4));\n+        assertEquals(false, test4.equals(test1));\n+        assertEquals(false, test4.equals(test2));\n+        assertEquals(false, test1.hashCode() == test4.hashCode());\n+        assertEquals(false, test2.hashCode() == test4.hashCode());\n+        \n+        MutableInterval test5 = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test1.equals(test5));\n+        assertEquals(true, test2.equals(test5));\n+        assertEquals(false, test3.equals(test5));\n+        assertEquals(true, test5.equals(test1));\n+        assertEquals(true, test5.equals(test2));\n+        assertEquals(false, test5.equals(test3));\n+        assertEquals(true, test1.hashCode() == test5.hashCode());\n+        assertEquals(true, test2.hashCode() == test5.hashCode());\n+        assertEquals(false, test3.hashCode() == test5.hashCode());\n         \n         assertEquals(false, test1.equals(\"Hello\"));\n         assertEquals(true, test1.equals(new MockInterval()));\n \n     //-----------------------------------------------------------------------\n     public void testToInterval1() {\n-        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n         Interval result = test.toInterval();\n         assertEquals(test, result);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testToMutableInterval1() {\n-        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n         MutableInterval result = test.toMutableInterval();\n         assertEquals(test, result);\n         assertNotSame(test, result);\n \n     //-----------------------------------------------------------------------\n     public void testToPeriod() {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n-        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n-        MutableInterval test = new MutableInterval(dt1, dt2);\n-        \n-        Period result = test.toPeriod();\n-        assertEquals(PeriodType.standard(), result.getPeriodType());\n-        assertEquals(1, result.getYears());\n-        assertEquals(2, result.getMonths());\n-        assertEquals(0, result.getWeeks());\n-        assertEquals(4, result.getDays());\n-        assertEquals(5, result.getHours());\n-        assertEquals(6, result.getMinutes());\n-        assertEquals(7, result.getSeconds());\n-        assertEquals(8, result.getMillis());\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS);\n+        MutableInterval base = new MutableInterval(dt1, dt2);\n+        \n+        Period test = base.toPeriod();\n+        Period expected = new Period(dt1, dt2, PeriodType.standard());\n+        assertEquals(expected, test);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testToPeriod_PeriodType1() {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n-        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n-        MutableInterval test = new MutableInterval(dt1, dt2);\n-        \n-        Period result = test.toPeriod(null);\n-        assertEquals(PeriodType.standard(), result.getPeriodType());\n-        assertEquals(1, result.getYears());\n-        assertEquals(2, result.getMonths());\n-        assertEquals(0, result.getWeeks());\n-        assertEquals(4, result.getDays());\n-        assertEquals(5, result.getHours());\n-        assertEquals(6, result.getMinutes());\n-        assertEquals(7, result.getSeconds());\n-        assertEquals(8, result.getMillis());\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, COPTIC_PARIS);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, COPTIC_PARIS);\n+        MutableInterval base = new MutableInterval(dt1, dt2);\n+        \n+        Period test = base.toPeriod(null);\n+        Period expected = new Period(dt1, dt2, PeriodType.standard());\n+        assertEquals(expected, test);\n     }\n \n     public void testToPeriod_PeriodType2() {\n         DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n         DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n-        MutableInterval test = new MutableInterval(dt1, dt2);\n-        \n-        Period result = test.toPeriod(PeriodType.yearWeekDayTime());\n-        assertEquals(PeriodType.yearWeekDayTime(), result.getPeriodType());\n-        assertEquals(1, result.getYears());\n-        assertEquals(0, result.getMonths());\n-        assertEquals(9, result.getWeeks());\n-        assertEquals(2, result.getDays());\n-        assertEquals(5, result.getHours());\n-        assertEquals(6, result.getMinutes());\n-        assertEquals(7, result.getSeconds());\n-        assertEquals(8, result.getMillis());\n-    }\n-\n-    public void testToPeriod_PeriodType3() {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n-        DateTime dt2 = new DateTime(2005, 6, 9, 12, 14, 16, 18);\n-        MutableInterval test = new MutableInterval(dt1, dt2);\n-        \n-        Period result = test.toPeriod(PeriodType.yearWeekDayTime());\n-        assertEquals(PeriodType.yearWeekDayTime(), result.getPeriodType());\n-        assertEquals(1, result.getYears());\n-        assertEquals(0, result.getMonths());\n-        assertEquals(0, result.getWeeks());\n-        assertEquals(0, result.getDays());\n-        assertEquals(5, result.getHours());\n-        assertEquals(6, result.getMinutes());\n-        assertEquals(7, result.getSeconds());\n-        assertEquals(8, result.getMillis());\n+        MutableInterval base = new MutableInterval(dt1, dt2);\n+        \n+        Period test = base.toPeriod(PeriodType.yearWeekDayTime());\n+        Period expected = new Period(dt1, dt2, PeriodType.yearWeekDayTime());\n+        assertEquals(expected, test);\n     }\n \n     //-----------------------------------------------------------------------\n \n     //-----------------------------------------------------------------------\n     public void testCopy() {\n-        MutableInterval test = new MutableInterval(123L, 456L);\n+        MutableInterval test = new MutableInterval(123L, 456L, COPTIC_PARIS);\n         MutableInterval cloned = test.copy();\n         assertEquals(test, cloned);\n         assertNotSame(test, cloned);\n     }\n     public void testClone() {\n-        MutableInterval test = new MutableInterval(123L, 456L);\n+        MutableInterval test = new MutableInterval(123L, 456L, COPTIC_PARIS);\n         MutableInterval cloned = (MutableInterval) test.clone();\n         assertEquals(test, cloned);\n         assertNotSame(test, cloned);", "timestamp": 1094896055, "metainfo": ""}