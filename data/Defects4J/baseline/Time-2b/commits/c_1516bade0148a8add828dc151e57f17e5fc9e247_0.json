{"sha": "1516bade0148a8add828dc151e57f17e5fc9e247", "log": "Maximum size for pattern cache  Fixes #49", "commit": "\n--- a/src/main/java/org/joda/time/format/DateTimeFormat.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormat.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     static final int TIME = 1;\n     /** Type constant for DATETIME. */\n     static final int DATETIME = 2;\n-    \n+\n+    /** Maximum size of the pattern cache. */\n     private static final int PATTERN_CACHE_SIZE = 500;\n \n-    /** Maps patterns to formatters, patterns don't vary by locale. */\n-    // Use a simple LRU Cache\n-    private static final Map<String, DateTimeFormatter> PATTERN_CACHE = new LinkedHashMap<String, DateTimeFormatter>(7){\n-        /** Introduced in 2.3 */\n-\t\tprivate static final long serialVersionUID = 23L;\n-\n-\t\t@Override\n-    \tprotected boolean removeEldestEntry(final Map.Entry<String,DateTimeFormatter> eldest) {\n-    \t\treturn size() > PATTERN_CACHE_SIZE;\n-    \t};\n+    /** Maps patterns to formatters via LRU, patterns don't vary by locale. */\n+    private static final Map<String, DateTimeFormatter> PATTERN_CACHE = new LinkedHashMap<String, DateTimeFormatter>(7) {\n+        private static final long serialVersionUID = 23L;\n+        @Override\n+        protected boolean removeEldestEntry(final Map.Entry<String, DateTimeFormatter> eldest) {\n+            return size() > PATTERN_CACHE_SIZE;\n+        };\n     };\n-    \n+\n     /** Maps patterns to formatters, patterns don't vary by locale. */\n     private static final DateTimeFormatter[] STYLE_CACHE = new DateTimeFormatter[25];\n \n      * @throws IllegalArgumentException if the pattern is invalid\n      * @see #appendPatternTo\n      */\n-    private static DateTimeFormatter createFormatterForPattern(final String pattern) {\n+    private static DateTimeFormatter createFormatterForPattern(String pattern) {\n         if (pattern == null || pattern.length() == 0) {\n             throw new IllegalArgumentException(\"Invalid pattern specification\");\n         }\n         synchronized (PATTERN_CACHE) {\n             formatter = PATTERN_CACHE.get(pattern);\n             if (formatter == null) {\n-                final DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n+                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n                 parsePatternTo(builder, pattern);\n                 formatter = builder.toFormatter();\n \n      * @param timeStyle  the time style\n      * @return the formatter\n      */\n-\tprivate static DateTimeFormatter createFormatterForStyleIndex(final int dateStyle, final int timeStyle) {\n-\t\tfinal int index = ((dateStyle << 2) + dateStyle) + timeStyle;\n-\t\t// Should never happen but do a double check...\n-\t\tif (index >= STYLE_CACHE.length) {\n-\t\t\treturn createDateTimeFormatter(dateStyle, timeStyle);\n-\t\t}\n-\t\tDateTimeFormatter f = null;\n-\t\tsynchronized (STYLE_CACHE) {\n-\t\t\tf = STYLE_CACHE[index];\n-\t\t\tif (f == null) {\n-\t\t\t\tf = createDateTimeFormatter(dateStyle, timeStyle);\n-\t\t\t\tSTYLE_CACHE[index] = f;\n-\t\t\t}\n-\t\t}\n-\t\treturn f;\n-\t}\n+    private static DateTimeFormatter createFormatterForStyleIndex(int dateStyle, int timeStyle) {\n+        int index = ((dateStyle << 2) + dateStyle) + timeStyle;\n+        // Should never happen but do a double check...\n+        if (index >= STYLE_CACHE.length) {\n+            return createDateTimeFormatter(dateStyle, timeStyle);\n+        }\n+        DateTimeFormatter f = null;\n+        synchronized (STYLE_CACHE) {\n+            f = STYLE_CACHE[index];\n+            if (f == null) {\n+                f = createDateTimeFormatter(dateStyle, timeStyle);\n+                STYLE_CACHE[index] = f;\n+            }\n+        }\n+        return f;\n+    }\n     \n     /**\n      * Creates a formatter for the specified style.\n      * @param timeStyle  the time style\n      * @return the formatter\n      */\n-    private static DateTimeFormatter createDateTimeFormatter(final int dateStyle, final int timeStyle){\n-    \tint type = DATETIME;\n+    private static DateTimeFormatter createDateTimeFormatter(int dateStyle, int timeStyle){\n+        int type = DATETIME;\n         if (dateStyle == NONE) {\n             type = TIME;\n         } else if (timeStyle == NONE) {\n             type = DATE;\n         }\n-        final StyleFormatter llf = new StyleFormatter(\n-                dateStyle, timeStyle, type);\n+        StyleFormatter llf = new StyleFormatter(dateStyle, timeStyle, type);\n         return new DateTimeFormatter(llf, llf);\n     }\n ", "timestamp": 1375897083, "metainfo": ""}