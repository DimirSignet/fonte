{"sha": "c448a40c2e2a5c992a60afd3015fe7e0d244c0fb", "log": "Updated docs.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java\n import org.joda.time.field.RemainderDateTimeField;\n \n /**\n- *\n+ * Base class for implementing chronologies based on Gregorian/Julian formulas.\n+ * Most of the utility methods required by subclasses are package-private,\n+ * reflecting the intention that they be defined in the same package.\n+ * <p>\n+ * AbstractGJChronology is thread-safe and immutable, and all subclasses must\n+ * be as well.\n  *\n  * @author Stephen Colebourne\n  * @author Brian S O'Neill\n--- a/JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java\n         setFields();\n     }\n \n+    /**\n+     * A container of fields used for assembling a chronology.\n+     */\n     public static final class Fields {\n         public DurationField millis;\n         public DurationField seconds;\n--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n import org.joda.time.field.PreciseDurationField;\n \n /**\n- * \n+ * Implements a Coptic calendar system, which defines every fourth year as\n+ * leap, much like the Julian calendar. The year is broken down into 12 months,\n+ * each 30 days in length. An extra period at the end of the year is either 5\n+ * or 6 days in length. In this implementation, it is considered a 13th month.\n+ * <p>\n+ * Year 1 in the Coptic calendar began on August 29, 284 CE (Julian), thus\n+ * Coptic years do not begin at the same time as Julian years. This chronology\n+ * is not proleptic, as it does not allow dates before the first Coptic year.\n+ * <p>\n+ * CopticChronology is thread-safe and immutable.\n+ *\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Coptic_calendar\">Wikipedia</a>\n+ * @see JulianChronology\n  *\n  * @author Brian S O'Neill\n  */\n--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n  * Gregorian calendar was first instituted, October 15, 1582.\n  * <p>\n  * Before this date, this chronology uses the proleptic Julian calendar\n- * (proleptic means extending indefinitely). The Julian calendar has leap \n- * years every four years, whereas the Gregorian has special rules for 100 \n- * and 400 years. A meaningful result will thus be obtained for all input \n- * values. However before March 1, 4 CE, Julian leap years were irregular,\n- * and before 45 BCE there was no Julian calendar.\n+ * (proleptic means extending indefinitely). The Julian calendar has leap years\n+ * every four years, whereas the Gregorian has special rules for 100 and 400\n+ * years. A meaningful result will thus be obtained for all input values.\n+ * However before 8 CE, Julian leap years were irregular, and before 45 BCE\n+ * there was no Julian calendar.\n  * <p>\n  * This chronology differs from {@link java.util.GregorianCalendar\n  * java.util.GregorianCalendar} in that years in BCE are returned\n  * The Julian calendar does not have a year zero, and so year -1 is followed by\n  * year 1. If the Gregorian cutover date is specified at or before year -1\n  * (Julian), year zero is defined. In other words, the proleptic Gregorian\n- * chronology implemented by this class has a year zero.\n+ * chronology used by this class has a year zero.\n  * <p>\n  * To create a pure proleptic Julian chronology, use {@link JulianChronology},\n  * and to create a pure proleptic Gregorian chronology, use\n--- a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java\n import org.joda.time.field.RemainderDateTimeField;\n \n /**\n+ * Implements a pure proleptic Gregorian calendar system, which defines every\n+ * fourth year as leap, unless the year is divisible by 100 and not by 400.\n+ * This improves upon the Julian calendar leap year rule.\n+ * <p>\n+ * Although the Gregorian calendar did not exist before 1582 CE, this\n+ * chronology assumes it did, thus it is proleptic. This implementation also\n+ * fixes the start of the year at January 1, and defines the year zero.\n+ * <p>\n+ * GregorianChronology is thread-safe and immutable.\n+ *\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Gregorian_calendar\">Wikipedia</a>\n+ * @see JulianChronology\n+ * @see GJChronology\n  * \n  * @author Guy Allard\n  * @author Stephen Colebourne\n--- a/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java\n  * does not define a field, but it can be determined (such as AM/PM)\n  * it is included.\n  * <p>\n+ * With the exception of century related fields, ISOChronology is exactly the\n+ * same as {@link GregorianChronology}. In this chronology, centuries and year\n+ * of century are zero based. For CE years, the century is determined by\n+ * dropping the last two digits of the year. The year of century is the value\n+ * of the last two digits.\n+ * <p>\n  * ISOChronology is thread-safe and immutable.\n  *\n  * @author Stephen Colebourne\n--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java\n import org.joda.time.field.FieldUtils;\n \n /**\n+ * Implements a pure proleptic Julian calendar system, which defines every\n+ * fourth year as leap. This implementation follows the leap year rule\n+ * strictly, even for dates before 8 CE, where leap years were actually\n+ * irregular. In the Julian calendar, year zero does not exist: 1 BCE is\n+ * followed by 1 CE.\n+ * <p>\n+ * Although the Julian calendar did not exist before 45 BCE, this chronology\n+ * assumes it did, thus it is proleptic. This implementation also fixes the\n+ * start of the year at January 1.\n+ * <p>\n+ * JulianChronology is thread-safe and immutable.\n+ *\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Julian_calendar\">Wikipedia</a>\n+ * @see GregorianChronology\n+ * @see GJChronology\n  *\n  * @author Guy Allard\n  * @author Brian S O'Neill", "timestamp": 1075569159, "metainfo": ""}