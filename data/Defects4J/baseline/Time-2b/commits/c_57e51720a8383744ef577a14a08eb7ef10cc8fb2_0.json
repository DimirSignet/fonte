{"sha": "57e51720a8383744ef577a14a08eb7ef10cc8fb2", "log": "added documentation for all newly introduced methods", "commit": "\n--- a/src/main/java/org/joda/time/Duration.java\n+++ b/src/main/java/org/joda/time/Duration.java\n         return withDurationAdded(amount.getMillis(), -1);\n     }\n \n-    public Duration multipliedBy(long multiplicant)\n+    /**\n+     * Returns a new duration with this length multiplied by the \n+     * specified multiplicand.\n+     * This instance is immutable and is not altered.\n+     * <p>\n+     * If the multiplicand is one, this instance is returned.\n+     * \n+     * @param multiplicand  the multiplicand to multiply this one by\n+     * @return the new duration instance\n+     */\n+    public Duration multipliedBy(long multiplicand)\n     {\n-        if(multiplicant == 1)\n-            return this;\n-        return new Duration(FieldUtils.safeMultiply(getMillis(), multiplicant));\n-    }\n-\n+        if(multiplicand == 1)\n+            return this;\n+        return new Duration(FieldUtils.safeMultiply(getMillis(), multiplicand));\n+    }\n+\n+    /**\n+     * Returns a new duration with this length divided by the \n+     * specified divisor.\n+     * This instance is immutable and is not altered.\n+     * <p>\n+     * If the divisor is one, this instance is returned.\n+     * \n+     * @param divisor  the divisor to divide this one by\n+     * @return the new duration instance\n+     */\n     public Duration dividedBy(long divisor)\n     {\n         if(divisor == 1)\n         return new Duration(FieldUtils.safeDivide(getMillis(), divisor));\n     }\n \n+    /**\n+     * Returns a new duration with this length negated.\n+     * This instance is immutable and is not altered.\n+     * \n+     * @return the new duration instance\n+     */\n     public Duration negated()\n     {\n         if(getMillis() == Long.MIN_VALUE)\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n     }\n     \n     /**\n+     * Divides the dividend by the divisor throwing an exception if \n+     * overflow occurs or the divisor is zero.\n+     * \n+     * @param dividend  the dividend\n+     * @param divisor  the divisor\n+     * @return the new total\n+     * @throws ArithmeticException if the operation overflows or the divisor is zero\n+     */\n+    public static long safeDivide(long dividend, long divisor)\n+    {\n+        if(dividend == Long.MIN_VALUE && divisor == -1L)\n+            throw new ArithmeticException(\"Multiplication overflows a long: \" + dividend + \" / \" + divisor);\n+        return dividend / divisor;\n+    }\n+\n+    /**\n      * Casts to an int throwing an exception if overflow occurs.\n      * \n      * @param value  the value\n         return object1.equals(object2);\n     }\n \n-    public static long safeDivide(long dividend, long divisor)\n-    {\n-        if(dividend == Long.MIN_VALUE && divisor == -1L)\n-            throw new ArithmeticException(\"Multiplication overflows a long: \" + dividend + \" / \" + divisor);\n-        return dividend / divisor;\n-    }\n-\n }", "timestamp": 1380665231, "metainfo": ""}