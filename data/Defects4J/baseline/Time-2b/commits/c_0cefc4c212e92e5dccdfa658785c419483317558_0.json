{"sha": "0cefc4c212e92e5dccdfa658785c419483317558", "log": "FieldUtils.safeMultiply(long,int) [3520651]  Fix implementation to throw exception for (Long.MIN_VALUE, -1)", "commit": "\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n     public static int safeMultiply(int val1, int val2) {\n         long total = (long) val1 * (long) val2;\n         if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {\n-            throw new ArithmeticException\n-                (\"The calculation caused an overflow: \" + val1 + \" * \" + val2);\n+          throw new ArithmeticException(\"Multiplication overflows an int: \" + val1 + \" * \" + val2);\n         }\n         return (int) total;\n     }\n      * Multiply two values throwing an exception if overflow occurs.\n      * \n      * @param val1  the first value\n-     * @param scalar  the second value\n+     * @param val2  the second value\n      * @return the new total\n      * @throws ArithmeticException if the value is too big or too small\n      * @since 1.2\n      */\n-    public static long safeMultiply(long val1, int scalar) {\n-        switch (scalar) {\n-        case -1:\n-            return -val1;\n-        case 0:\n-            return 0L;\n-        case 1:\n-            return val1;\n-        }\n-        long total = val1 * scalar;\n-        if (total / scalar != val1) {\n-            throw new ArithmeticException\n-                (\"The calculation caused an overflow: \" + val1 + \" * \" + scalar);\n+    public static long safeMultiply(long val1, int val2) {\n+        switch (val2) {\n+            case -1:\n+                if (val1 == Long.MIN_VALUE) {\n+                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n+                }\n+                return -val1;\n+            case 0:\n+                return 0L;\n+            case 1:\n+                return val1;\n+        }\n+        long total = val1 * val2;\n+        if (total / val2 != val1) {\n+          throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n         }\n         return total;\n     }\n--- a/src/test/java/org/joda/time/field/TestFieldUtils.java\n+++ b/src/test/java/org/joda/time/field/TestFieldUtils.java\n \n     //-----------------------------------------------------------------------\n     public void testSafeMultiplyLongLong() {\n-      assertEquals(0L, FieldUtils.safeMultiply(0L, 0L));\n+        assertEquals(0L, FieldUtils.safeMultiply(0L, 0L));\n+        \n+        assertEquals(1L, FieldUtils.safeMultiply(1L, 1L));\n+        assertEquals(3L, FieldUtils.safeMultiply(1L, 3L));\n+        assertEquals(3L, FieldUtils.safeMultiply(3L, 1L));\n+        \n+        assertEquals(6L, FieldUtils.safeMultiply(2L, 3L));\n+        assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L));\n+        assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L));\n+        assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L));\n+        \n+        assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L));\n+        assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L));\n+        assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L));\n+        \n+        try {\n+            FieldUtils.safeMultiply(Long.MIN_VALUE, -1L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+        \n+        try {\n+            FieldUtils.safeMultiply(-1L, Long.MIN_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n       \n-      assertEquals(1L, FieldUtils.safeMultiply(1L, 1L));\n-      assertEquals(3L, FieldUtils.safeMultiply(1L, 3L));\n-      assertEquals(3L, FieldUtils.safeMultiply(3L, 1L));\n-      \n-      assertEquals(6L, FieldUtils.safeMultiply(2L, 3L));\n-      assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L));\n-      assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L));\n-      assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L));\n-      \n-      assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L));\n-      assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L));\n-      assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L));\n-      \n-      try {\n-          FieldUtils.safeMultiply(Long.MIN_VALUE, -1L);\n-          fail();\n-      } catch (ArithmeticException e) {\n-      }\n-      \n-      try {\n-          FieldUtils.safeMultiply(-1L, Long.MIN_VALUE);\n-          fail();\n-      } catch (ArithmeticException e) {\n-      }\n-    \n-      try {\n-          FieldUtils.safeMultiply(Long.MIN_VALUE, 100L);\n-          fail();\n-      } catch (ArithmeticException e) {\n-      }\n-      \n-      try {\n-          FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE);\n-          fail();\n-      } catch (ArithmeticException e) {\n-      }\n-      \n-      try {\n-          FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE);\n-          fail();\n-      } catch (ArithmeticException e) {\n-      }\n-  }\n+        try {\n+            FieldUtils.safeMultiply(Long.MIN_VALUE, 100L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+        \n+        try {\n+            FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+        \n+        try {\n+            FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSafeMultiplyLongInt() {\n+        assertEquals(0L, FieldUtils.safeMultiply(0L, 0));\n+        \n+        assertEquals(1L, FieldUtils.safeMultiply(1L, 1));\n+        assertEquals(3L, FieldUtils.safeMultiply(1L, 3));\n+        assertEquals(3L, FieldUtils.safeMultiply(3L, 1));\n+        \n+        assertEquals(6L, FieldUtils.safeMultiply(2L, 3));\n+        assertEquals(-6L, FieldUtils.safeMultiply(2L, -3));\n+        assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3));\n+        assertEquals(6L, FieldUtils.safeMultiply(-2L, -3));\n+        \n+        assertEquals(-1L * Integer.MIN_VALUE, FieldUtils.safeMultiply(-1L, Integer.MIN_VALUE));\n+        \n+        assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1));\n+        assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1));\n+        assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1));\n+        \n+        try {\n+            FieldUtils.safeMultiply(Long.MIN_VALUE, -1);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+        \n+        try {\n+            FieldUtils.safeMultiply(Long.MIN_VALUE, 100);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+        \n+        try {\n+            FieldUtils.safeMultiply(Long.MIN_VALUE, Integer.MAX_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+        \n+        try {\n+            FieldUtils.safeMultiply(Long.MAX_VALUE, Integer.MIN_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+    }\n }\n ", "timestamp": 1335785238, "metainfo": ""}