{"sha": "d0a3f0ee57784a65b8a5ae8cdc399a5d5f4c36b8", "log": "Add isGreaterThan/isLessThan methods  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Days.java\n+++ b/JodaTime/src/java/org/joda/time/Days.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Is this days instance greater than the specified number of days.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this days instance is greater than the specified one\n+     */\n+    public boolean isGreaterThan(Days other) {\n+        if (other == null) {\n+            return getValue() > 0;\n+        }\n+        return getValue() > other.getValue();\n+    }\n+\n+    /**\n+     * Is this days instance less than the specified number of days.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this days instance is less than the specified one\n+     */\n+    public boolean isLessThan(Days other) {\n+        if (other == null) {\n+            return getValue() < 0;\n+        }\n+        return getValue() < other.getValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Gets this instance as a String in the ISO8601 duration format.\n      * <p>\n      * For example, \"P4D\" represents 4 days.\n--- a/JodaTime/src/java/org/joda/time/Hours.java\n+++ b/JodaTime/src/java/org/joda/time/Hours.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Is this hours instance greater than the specified number of hours.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this hours instance is greater than the specified one\n+     */\n+    public boolean isGreaterThan(Hours other) {\n+        if (other == null) {\n+            return getValue() > 0;\n+        }\n+        return getValue() > other.getValue();\n+    }\n+\n+    /**\n+     * Is this hours instance less than the specified number of hours.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this hours instance is less than the specified one\n+     */\n+    public boolean isLessThan(Hours other) {\n+        if (other == null) {\n+            return getValue() < 0;\n+        }\n+        return getValue() < other.getValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Gets this instance as a String in the ISO8601 duration format.\n      * <p>\n      * For example, \"PT4H\" represents 4 hours.\n--- a/JodaTime/src/java/org/joda/time/Minutes.java\n+++ b/JodaTime/src/java/org/joda/time/Minutes.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Is this minutes instance greater than the specified number of minutes.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this minutes instance is greater than the specified one\n+     */\n+    public boolean isGreaterThan(Minutes other) {\n+        if (other == null) {\n+            return getValue() > 0;\n+        }\n+        return getValue() > other.getValue();\n+    }\n+\n+    /**\n+     * Is this minutes instance less than the specified number of minutes.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this minutes instance is less than the specified one\n+     */\n+    public boolean isLessThan(Minutes other) {\n+        if (other == null) {\n+            return getValue() < 0;\n+        }\n+        return getValue() < other.getValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Gets this instance as a String in the ISO8601 duration format.\n      * <p>\n      * For example, \"PT4M\" represents 4 minutes.\n--- a/JodaTime/src/java/org/joda/time/Months.java\n+++ b/JodaTime/src/java/org/joda/time/Months.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Is this months instance greater than the specified number of months.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this months instance is greater than the specified one\n+     */\n+    public boolean isGreaterThan(Months other) {\n+        if (other == null) {\n+            return getValue() > 0;\n+        }\n+        return getValue() > other.getValue();\n+    }\n+\n+    /**\n+     * Is this months instance less than the specified number of months.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this months instance is less than the specified one\n+     */\n+    public boolean isLessThan(Months other) {\n+        if (other == null) {\n+            return getValue() < 0;\n+        }\n+        return getValue() < other.getValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Gets this instance as a String in the ISO8601 duration format.\n      * <p>\n      * For example, \"P4M\" represents 4 months.\n--- a/JodaTime/src/java/org/joda/time/Seconds.java\n+++ b/JodaTime/src/java/org/joda/time/Seconds.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Is this seconds instance greater than the specified number of seconds.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this seconds instance is greater than the specified one\n+     */\n+    public boolean isGreaterThan(Seconds other) {\n+        if (other == null) {\n+            return getValue() > 0;\n+        }\n+        return getValue() > other.getValue();\n+    }\n+\n+    /**\n+     * Is this seconds instance less than the specified number of seconds.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this seconds instance is less than the specified one\n+     */\n+    public boolean isLessThan(Seconds other) {\n+        if (other == null) {\n+            return getValue() < 0;\n+        }\n+        return getValue() < other.getValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Gets this instance as a String in the ISO8601 duration format.\n      * <p>\n      * For example, \"PT4S\" represents 4 seconds.\n--- a/JodaTime/src/java/org/joda/time/Weeks.java\n+++ b/JodaTime/src/java/org/joda/time/Weeks.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Is this weeks instance greater than the specified number of weeks.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this weeks instance is greater than the specified one\n+     */\n+    public boolean isGreaterThan(Weeks other) {\n+        if (other == null) {\n+            return getValue() > 0;\n+        }\n+        return getValue() > other.getValue();\n+    }\n+\n+    /**\n+     * Is this weeks instance less than the specified number of weeks.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this weeks instance is less than the specified one\n+     */\n+    public boolean isLessThan(Weeks other) {\n+        if (other == null) {\n+            return getValue() < 0;\n+        }\n+        return getValue() < other.getValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Gets this instance as a String in the ISO8601 duration format.\n      * <p>\n      * For example, \"P4W\" represents 4 weeks.\n--- a/JodaTime/src/java/org/joda/time/Years.java\n+++ b/JodaTime/src/java/org/joda/time/Years.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Is this years instance greater than the specified number of years.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this years instance is greater than the specified one\n+     */\n+    public boolean isGreaterThan(Years other) {\n+        if (other == null) {\n+            return getValue() > 0;\n+        }\n+        return getValue() > other.getValue();\n+    }\n+\n+    /**\n+     * Is this years instance less than the specified number of years.\n+     *\n+     * @param other  the other period, null means zero\n+     * @return true if this years instance is less than the specified one\n+     */\n+    public boolean isLessThan(Years other) {\n+        if (other == null) {\n+            return getValue() < 0;\n+        }\n+        return getValue() < other.getValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Gets this instance as a String in the ISO8601 duration format.\n      * <p>\n      * For example, \"P4Y\" represents 4 years.\n--- a/JodaTime/src/test/org/joda/time/TestDays.java\n+++ b/JodaTime/src/test/org/joda/time/TestDays.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Days.THREE.isGreaterThan(Days.TWO));\n+        assertEquals(false, Days.THREE.isGreaterThan(Days.THREE));\n+        assertEquals(false, Days.TWO.isGreaterThan(Days.THREE));\n+        assertEquals(true, Days.ONE.isGreaterThan(null));\n+        assertEquals(false, Days.days(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Days.THREE.isLessThan(Days.TWO));\n+        assertEquals(false, Days.THREE.isLessThan(Days.THREE));\n+        assertEquals(true, Days.TWO.isLessThan(Days.THREE));\n+        assertEquals(false, Days.ONE.isLessThan(null));\n+        assertEquals(true, Days.days(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToString() {\n         Days test = Days.days(20);\n         assertEquals(\"P20D\", test.toString());\n--- a/JodaTime/src/test/org/joda/time/TestHours.java\n+++ b/JodaTime/src/test/org/joda/time/TestHours.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Hours.THREE.isGreaterThan(Hours.TWO));\n+        assertEquals(false, Hours.THREE.isGreaterThan(Hours.THREE));\n+        assertEquals(false, Hours.TWO.isGreaterThan(Hours.THREE));\n+        assertEquals(true, Hours.ONE.isGreaterThan(null));\n+        assertEquals(false, Hours.hours(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Hours.THREE.isLessThan(Hours.TWO));\n+        assertEquals(false, Hours.THREE.isLessThan(Hours.THREE));\n+        assertEquals(true, Hours.TWO.isLessThan(Hours.THREE));\n+        assertEquals(false, Hours.ONE.isLessThan(null));\n+        assertEquals(true, Hours.hours(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToString() {\n         Hours test = Hours.hours(20);\n         assertEquals(\"PT20H\", test.toString());\n--- a/JodaTime/src/test/org/joda/time/TestMinutes.java\n+++ b/JodaTime/src/test/org/joda/time/TestMinutes.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Minutes.THREE.isGreaterThan(Minutes.TWO));\n+        assertEquals(false, Minutes.THREE.isGreaterThan(Minutes.THREE));\n+        assertEquals(false, Minutes.TWO.isGreaterThan(Minutes.THREE));\n+        assertEquals(true, Minutes.ONE.isGreaterThan(null));\n+        assertEquals(false, Minutes.minutes(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Minutes.THREE.isLessThan(Minutes.TWO));\n+        assertEquals(false, Minutes.THREE.isLessThan(Minutes.THREE));\n+        assertEquals(true, Minutes.TWO.isLessThan(Minutes.THREE));\n+        assertEquals(false, Minutes.ONE.isLessThan(null));\n+        assertEquals(true, Minutes.minutes(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToString() {\n         Minutes test = Minutes.minutes(20);\n         assertEquals(\"PT20M\", test.toString());\n--- a/JodaTime/src/test/org/joda/time/TestMonths.java\n+++ b/JodaTime/src/test/org/joda/time/TestMonths.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Months.THREE.isGreaterThan(Months.TWO));\n+        assertEquals(false, Months.THREE.isGreaterThan(Months.THREE));\n+        assertEquals(false, Months.TWO.isGreaterThan(Months.THREE));\n+        assertEquals(true, Months.ONE.isGreaterThan(null));\n+        assertEquals(false, Months.months(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Months.THREE.isLessThan(Months.TWO));\n+        assertEquals(false, Months.THREE.isLessThan(Months.THREE));\n+        assertEquals(true, Months.TWO.isLessThan(Months.THREE));\n+        assertEquals(false, Months.ONE.isLessThan(null));\n+        assertEquals(true, Months.months(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToString() {\n         Months test = Months.months(20);\n         assertEquals(\"P20M\", test.toString());\n--- a/JodaTime/src/test/org/joda/time/TestSeconds.java\n+++ b/JodaTime/src/test/org/joda/time/TestSeconds.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Seconds.THREE.isGreaterThan(Seconds.TWO));\n+        assertEquals(false, Seconds.THREE.isGreaterThan(Seconds.THREE));\n+        assertEquals(false, Seconds.TWO.isGreaterThan(Seconds.THREE));\n+        assertEquals(true, Seconds.ONE.isGreaterThan(null));\n+        assertEquals(false, Seconds.seconds(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Seconds.THREE.isLessThan(Seconds.TWO));\n+        assertEquals(false, Seconds.THREE.isLessThan(Seconds.THREE));\n+        assertEquals(true, Seconds.TWO.isLessThan(Seconds.THREE));\n+        assertEquals(false, Seconds.ONE.isLessThan(null));\n+        assertEquals(true, Seconds.seconds(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToString() {\n         Seconds test = Seconds.seconds(20);\n         assertEquals(\"PT20S\", test.toString());\n--- a/JodaTime/src/test/org/joda/time/TestWeeks.java\n+++ b/JodaTime/src/test/org/joda/time/TestWeeks.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Weeks.THREE.isGreaterThan(Weeks.TWO));\n+        assertEquals(false, Weeks.THREE.isGreaterThan(Weeks.THREE));\n+        assertEquals(false, Weeks.TWO.isGreaterThan(Weeks.THREE));\n+        assertEquals(true, Weeks.ONE.isGreaterThan(null));\n+        assertEquals(false, Weeks.weeks(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Weeks.THREE.isLessThan(Weeks.TWO));\n+        assertEquals(false, Weeks.THREE.isLessThan(Weeks.THREE));\n+        assertEquals(true, Weeks.TWO.isLessThan(Weeks.THREE));\n+        assertEquals(false, Weeks.ONE.isLessThan(null));\n+        assertEquals(true, Weeks.weeks(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToString() {\n         Weeks test = Weeks.weeks(20);\n         assertEquals(\"P20W\", test.toString());\n--- a/JodaTime/src/test/org/joda/time/TestYears.java\n+++ b/JodaTime/src/test/org/joda/time/TestYears.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testIsGreaterThan() {\n+        assertEquals(true, Years.THREE.isGreaterThan(Years.TWO));\n+        assertEquals(false, Years.THREE.isGreaterThan(Years.THREE));\n+        assertEquals(false, Years.TWO.isGreaterThan(Years.THREE));\n+        assertEquals(true, Years.ONE.isGreaterThan(null));\n+        assertEquals(false, Years.years(-1).isGreaterThan(null));\n+    }\n+\n+    public void testIsLessThan() {\n+        assertEquals(false, Years.THREE.isLessThan(Years.TWO));\n+        assertEquals(false, Years.THREE.isLessThan(Years.THREE));\n+        assertEquals(true, Years.TWO.isLessThan(Years.THREE));\n+        assertEquals(false, Years.ONE.isLessThan(null));\n+        assertEquals(true, Years.years(-1).isLessThan(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToString() {\n         Years test = Years.years(20);\n         assertEquals(\"P20Y\", test.toString());", "timestamp": 1161542257, "metainfo": ""}