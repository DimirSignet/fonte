{"sha": "dcaef093090adadf1bf9381b8c29148f0f479560", "log": "DateTime constructors without seconds/millis [1982629]  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n      * @param dayOfMonth  the day of the month\n      * @param hourOfDay  the hour of the day\n      * @param minuteOfHour  the minute of the hour\n+     */\n+    public DateTime(\n+            int year,\n+            int monthOfYear,\n+            int dayOfMonth,\n+            int hourOfDay,\n+            int minuteOfHour) {\n+        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, 0, 0);\n+    }\n+\n+    /**\n+     * Constructs an instance from datetime field values\n+     * using <code>ISOChronology</code> in the specified time zone.\n+     * <p>\n+     * If the specified time zone is null, the default zone is used.\n+     *\n+     * @param year  the year\n+     * @param monthOfYear  the month of the year\n+     * @param dayOfMonth  the day of the month\n+     * @param hourOfDay  the hour of the day\n+     * @param minuteOfHour  the minute of the hour\n+     * @param zone  the time zone, null means default time zone\n+     */\n+    public DateTime(\n+            int year,\n+            int monthOfYear,\n+            int dayOfMonth,\n+            int hourOfDay,\n+            int minuteOfHour,\n+            DateTimeZone zone) {\n+        super(year, monthOfYear, dayOfMonth,\n+              hourOfDay, minuteOfHour, 0, 0, zone);\n+    }\n+\n+    /**\n+     * Constructs an instance from datetime field values\n+     * using the specified chronology.\n+     * <p>\n+     * If the chronology is null, <code>ISOChronology</code>\n+     * in the default time zone is used.\n+     *\n+     * @param year  the year\n+     * @param monthOfYear  the month of the year\n+     * @param dayOfMonth  the day of the month\n+     * @param hourOfDay  the hour of the day\n+     * @param minuteOfHour  the minute of the hour\n+     * @param chronology  the chronology, null means ISOChronology in default zone\n+     */\n+    public DateTime(\n+            int year,\n+            int monthOfYear,\n+            int dayOfMonth,\n+            int hourOfDay,\n+            int minuteOfHour,\n+            Chronology chronology) {\n+        super(year, monthOfYear, dayOfMonth,\n+              hourOfDay, minuteOfHour, 0, 0, chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructs an instance from datetime field values\n+     * using <code>ISOChronology</code> in the default time zone.\n+     *\n+     * @param year  the year\n+     * @param monthOfYear  the month of the year\n+     * @param dayOfMonth  the day of the month\n+     * @param hourOfDay  the hour of the day\n+     * @param minuteOfHour  the minute of the hour\n+     * @param secondOfMinute  the second of the minute\n+     */\n+    public DateTime(\n+            int year,\n+            int monthOfYear,\n+            int dayOfMonth,\n+            int hourOfDay,\n+            int minuteOfHour,\n+            int secondOfMinute) {\n+        super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, 0);\n+    }\n+\n+    /**\n+     * Constructs an instance from datetime field values\n+     * using <code>ISOChronology</code> in the specified time zone.\n+     * <p>\n+     * If the specified time zone is null, the default zone is used.\n+     *\n+     * @param year  the year\n+     * @param monthOfYear  the month of the year\n+     * @param dayOfMonth  the day of the month\n+     * @param hourOfDay  the hour of the day\n+     * @param minuteOfHour  the minute of the hour\n+     * @param secondOfMinute  the second of the minute\n+     * @param zone  the time zone, null means default time zone\n+     */\n+    public DateTime(\n+            int year,\n+            int monthOfYear,\n+            int dayOfMonth,\n+            int hourOfDay,\n+            int minuteOfHour,\n+            int secondOfMinute,\n+            DateTimeZone zone) {\n+        super(year, monthOfYear, dayOfMonth,\n+              hourOfDay, minuteOfHour, secondOfMinute, 0, zone);\n+    }\n+\n+    /**\n+     * Constructs an instance from datetime field values\n+     * using the specified chronology.\n+     * <p>\n+     * If the chronology is null, <code>ISOChronology</code>\n+     * in the default time zone is used.\n+     *\n+     * @param year  the year\n+     * @param monthOfYear  the month of the year\n+     * @param dayOfMonth  the day of the month\n+     * @param hourOfDay  the hour of the day\n+     * @param minuteOfHour  the minute of the hour\n+     * @param secondOfMinute  the second of the minute\n+     * @param chronology  the chronology, null means ISOChronology in default zone\n+     */\n+    public DateTime(\n+            int year,\n+            int monthOfYear,\n+            int dayOfMonth,\n+            int hourOfDay,\n+            int minuteOfHour,\n+            int secondOfMinute,\n+            Chronology chronology) {\n+        super(year, monthOfYear, dayOfMonth,\n+              hourOfDay, minuteOfHour, secondOfMinute, 0, chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructs an instance from datetime field values\n+     * using <code>ISOChronology</code> in the default time zone.\n+     *\n+     * @param year  the year\n+     * @param monthOfYear  the month of the year\n+     * @param dayOfMonth  the day of the month\n+     * @param hourOfDay  the hour of the day\n+     * @param minuteOfHour  the minute of the hour\n      * @param secondOfMinute  the second of the minute\n      * @param millisOfSecond  the millisecond of the second\n      */\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Test constructor (int, int, int, int, int)\n+     */\n+    public void testConstructor_int_int_int_int_int() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(LONDON, test.getZone());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, DateTimeZone)\n+     */\n+    public void testConstructor_int_int_int_int_int_DateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 2, 0, PARIS);  // +02:00\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, DateTimeZone=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_nullDateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, (DateTimeZone) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_int_int_int_Chronology() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, GregorianChronology.getInstance());  // +01:00\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_nullChronology() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, (Chronology) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (int, int, int, int, int, int)\n+     */\n+    public void testConstructor_int_int_int_int_int_int() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(LONDON, test.getZone());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, int, DateTimeZone)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_DateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 2, 0, 0, PARIS);  // +02:00\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, int, DateTimeZone=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_nullDateTimeZone() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, (DateTimeZone) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_Chronology() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, GregorianChronology.getInstance());  // +01:00\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, int, int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_nullChronology() throws Throwable {\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, (Chronology) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Test constructor (int, int, int)\n      */\n     public void testConstructor_int_int_int_int_int_int_int() throws Throwable {", "timestamp": 1257602426, "metainfo": ""}