{"sha": "129288e632957675d95c32bbb019964ce2899529", "log": "Switch from getReadableInstant to protected getMillis in Property   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n         }\n \n         /**\n-         * Gets the instant being used.\n+         * Gets the milliseconds of the datetime that this property is linked to.\n          * \n-         * @return the instant\n-         */\n-        public ReadableInstant getReadableInstant() {\n-            return iInstant;\n+         * @return the milliseconds\n+         */\n+        protected long getMillis() {\n+            return iInstant.getMillis();\n         }\n \n         /**\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n         }\n         \n         /**\n-         * Gets the instant being used.\n+         * Gets the milliseconds of the datetime that this property is linked to.\n          * \n-         * @return the instant\n-         */\n-        public ReadableInstant getReadableInstant() {\n-            return iInstant;\n+         * @return the milliseconds\n+         */\n+        protected long getMillis() {\n+            return iInstant.getMillis();\n         }\n         \n         /**\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n         }\n         \n         /**\n-         * Gets the instant being used.\n+         * Gets the milliseconds of the datetime that this property is linked to.\n          * \n-         * @return the instant\n-         */\n-        public ReadableInstant getReadableInstant() {\n-            return iInstant;\n+         * @return the milliseconds\n+         */\n+        protected long getMillis() {\n+            return iInstant.getMillis();\n         }\n         \n         /**\n--- a/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/field/AbstractReadableInstantFieldProperty.java\n  * @since 1.0\n  */\n public abstract class AbstractReadableInstantFieldProperty implements Serializable {\n-    \n+\n     /** Serialization version. */\n     private static final long serialVersionUID = 1971226328211649661L;\n \n     }\n \n     /**\n-     * Gets the instant being used.\n-     * \n-     * @return the instant\n-     */\n-    public abstract ReadableInstant getReadableInstant();\n+     * Gets the milliseconds of the datetime that this property is linked to.\n+     * \n+     * @return the milliseconds\n+     */\n+    protected abstract long getMillis();\n \n     //-----------------------------------------------------------------------\n     /**\n      * @see DateTimeField#get\n      */\n     public int get() {\n-        return getField().get(getReadableInstant().getMillis());\n+        return getField().get(getMillis());\n     }\n \n     /**\n      * @see DateTimeField#getAsText\n      */\n     public String getAsText(Locale locale) {\n-        return getField().getAsText(getReadableInstant().getMillis(), locale);\n+        return getField().getAsText(getMillis(), locale);\n     }\n \n     /**\n      * @see DateTimeField#getAsShortText\n      */\n     public String getAsShortText(Locale locale) {\n-        return getField().getAsShortText(getReadableInstant().getMillis(), locale);\n+        return getField().getAsShortText(getMillis(), locale);\n     }\n \n     /**\n      */\n     public int getDifference(ReadableInstant instant) {\n         if (instant == null) {\n-            return getField().getDifference(getReadableInstant().getMillis(), DateTimeUtils.currentTimeMillis());\n-        }\n-        return getField().getDifference(getReadableInstant().getMillis(), instant.getMillis());\n+            return getField().getDifference(getMillis(), DateTimeUtils.currentTimeMillis());\n+        }\n+        return getField().getDifference(getMillis(), instant.getMillis());\n     }\n \n     /**\n      */\n     public long getDifferenceAsLong(ReadableInstant instant) {\n         if (instant == null) {\n-            return getField().getDifferenceAsLong(getReadableInstant().getMillis(), DateTimeUtils.currentTimeMillis());\n-        }\n-        return getField().getDifferenceAsLong(getReadableInstant().getMillis(), instant.getMillis());\n+            return getField().getDifferenceAsLong(getMillis(), DateTimeUtils.currentTimeMillis());\n+        }\n+        return getField().getDifferenceAsLong(getMillis(), instant.getMillis());\n     }\n \n     //-----------------------------------------------------------------------\n      * @see DateTimeField#isLeap\n      */\n     public boolean isLeap() {\n-        return getField().isLeap(getReadableInstant().getMillis());\n+        return getField().isLeap(getMillis());\n     }\n \n     /**\n      * @see DateTimeField#getLeapAmount\n      */\n     public int getLeapAmount() {\n-        return getField().getLeapAmount(getReadableInstant().getMillis());\n+        return getField().getLeapAmount(getMillis());\n     }\n \n     /**\n      * @see DateTimeField#getMinimumValue\n      */\n     public int getMinimumValue() {\n-        return getField().getMinimumValue(getReadableInstant().getMillis());\n+        return getField().getMinimumValue(getMillis());\n     }\n \n     /**\n      * @see DateTimeField#getMaximumValue\n      */\n     public int getMaximumValue() {\n-        return getField().getMaximumValue(getReadableInstant().getMillis());\n+        return getField().getMaximumValue(getMillis());\n     }\n \n     /**\n      * @return remainder duration, in milliseconds\n      */\n     public long remainder() {\n-        return getField().remainder(getReadableInstant().getMillis());\n+        return getField().remainder(getMillis());\n     }\n \n     //-----------------------------------------------------------------------\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Compare this field to the same field on another partial instant.\n      * <p>\n      * \n      * @param partial  the partial to compare to\n      * @return negative value if this is less, 0 if equal, or positive value if greater\n-     * @throws IllegalArgumentException if the instant is null\n-     * @throws IllegalArgumentException if the field of this property cannot be queried\n-     *  on the specified instant\n+     * @throws IllegalArgumentException if the partial is null\n+     * @throws IllegalArgumentException if the partial doesn't support this field\n      */\n     public int compareTo(ReadablePartial partial) {\n         if (partial == null) {\n-            throw new IllegalArgumentException(\"The instant must not be null\");\n+            throw new IllegalArgumentException(\"The partial must not be null\");\n         }\n         int thisValue = get();\n         int otherValue = partial.get(getFieldType());\n         if (object instanceof AbstractReadableInstantFieldProperty) {\n             AbstractReadableInstantFieldProperty other = (AbstractReadableInstantFieldProperty) object;\n             if (get() == other.get() &&\n-                getFieldType() == other.getFieldType() &&\n-                getReadableInstant().getChronology() == other.getReadableInstant().getChronology()) {\n+                getField().equals(other.getField())) {\n                 return true;\n             }\n         }\n         return false;\n     }\n \n+    /**\n+     * Returns a hashcode compatible with the equals method.\n+     * \n+     * @return the hashcode\n+     */\n+    public int hashCode() {\n+        return get() * 17 + getField().hashCode();\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Output a debugging string.", "timestamp": 1106497730, "metainfo": ""}