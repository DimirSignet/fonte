{"sha": "0109c4334e4a1abe4c6e396560b4eaafd72ecef6", "log": "Add multi-language word-based period formatting [1252708] based on idea and code from Ricardo Trindade  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/format/PeriodFormat.java\n+++ b/JodaTime/src/main/java/org/joda/time/format/PeriodFormat.java\n  *  limitations under the License.\n  */\n package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n \n /**\n  * Factory that creates instances of PeriodFormatter.\n  */\n public class PeriodFormat {\n \n-    /** An english words based formatter. */\n-    private static PeriodFormatter cEnglishWords;\n+    /**\n+     * The resource bundle name.\n+     */\n+    private static final String BUNDLE_NAME = \"org.joda.time.format.messages\";\n+    /**\n+     * The created formatters.\n+     */\n+    private static final ConcurrentMap<Locale, PeriodFormatter> FORMATTERS = new ConcurrentHashMap<Locale, PeriodFormatter>();\n \n     /**\n      * Constructor.\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the default PeriodFormatter.\n+     * Gets the default formatter that outputs words in English.\n      * <p>\n-     * This currently returns a word based formatter using English only.\n-     * Hopefully future release will support localized period formatting.\n+     * This calls {@link #wordBased(Locale)} using a locale of {@code ENGLISH}.\n      * \n-     * @return the formatter\n+     * @return the formatter, not null\n      */\n     public static PeriodFormatter getDefault() {\n-        if (cEnglishWords == null) {\n-            String[] variants = {\" \", \",\", \",and \", \", and \"};\n-            cEnglishWords = new PeriodFormatterBuilder()\n+        return wordBased(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Returns a word based formatter for the JDK default locale.\n+     * <p>\n+     * This calls {@link #wordBased(Locale)} using the {@link Locale#getDefault() default locale}.\n+     * \n+     * @return the formatter, not null\n+     * @since 2.0\n+     */\n+    public static PeriodFormatter wordBased() {\n+        return wordBased(Locale.getDefault());\n+    }\n+\n+    /**\n+     * Returns a word based formatter for the specified locale.\n+     * <p>\n+     * The words are configured in a resource bundle text file -\n+     * {@code org.joda.time.format.messages}.\n+     * This can be added to via the normal classpath resource bundle mechanisms.\n+     * <p>\n+     * Available languages are English, German, Dutch, French, Spanish and Portuguese.\n+     * \n+     * @return the formatter, not null\n+     * @since 2.0\n+     */\n+    public static PeriodFormatter wordBased(Locale locale) {\n+        PeriodFormatter pf = FORMATTERS.get(locale);\n+        if (pf == null) {\n+            ResourceBundle b = ResourceBundle.getBundle(BUNDLE_NAME, locale);\n+            String[] variants = {\n+                    b.getString(\"PeriodFormat.space\"), b.getString(\"PeriodFormat.comma\"),\n+                    b.getString(\"PeriodFormat.commandand\"), b.getString(\"PeriodFormat.commaspaceand\")};\n+            pf = new PeriodFormatterBuilder()\n                 .appendYears()\n-                .appendSuffix(\" year\", \" years\")\n-                .appendSeparator(\", \", \" and \", variants)\n+                .appendSuffix(b.getString(\"PeriodFormat.year\"), b.getString(\"PeriodFormat.years\"))\n+                .appendSeparator(b.getString(\"PeriodFormat.commaspace\"), b.getString(\"PeriodFormat.spaceandspace\"), variants)\n                 .appendMonths()\n-                .appendSuffix(\" month\", \" months\")\n-                .appendSeparator(\", \", \" and \", variants)\n+                .appendSuffix(b.getString(\"PeriodFormat.month\"), b.getString(\"PeriodFormat.months\"))\n+                .appendSeparator(b.getString(\"PeriodFormat.commaspace\"), b.getString(\"PeriodFormat.spaceandspace\"), variants)\n                 .appendWeeks()\n-                .appendSuffix(\" week\", \" weeks\")\n-                .appendSeparator(\", \", \" and \", variants)\n+                .appendSuffix(b.getString(\"PeriodFormat.week\"), b.getString(\"PeriodFormat.weeks\"))\n+                .appendSeparator(b.getString(\"PeriodFormat.commaspace\"), b.getString(\"PeriodFormat.spaceandspace\"), variants)\n                 .appendDays()\n-                .appendSuffix(\" day\", \" days\")\n-                .appendSeparator(\", \", \" and \", variants)\n+                .appendSuffix(b.getString(\"PeriodFormat.day\"), b.getString(\"PeriodFormat.days\"))\n+                .appendSeparator(b.getString(\"PeriodFormat.commaspace\"), b.getString(\"PeriodFormat.spaceandspace\"), variants)\n                 .appendHours()\n-                .appendSuffix(\" hour\", \" hours\")\n-                .appendSeparator(\", \", \" and \", variants)\n+                .appendSuffix(b.getString(\"PeriodFormat.hour\"), b.getString(\"PeriodFormat.hours\"))\n+                .appendSeparator(b.getString(\"PeriodFormat.commaspace\"), b.getString(\"PeriodFormat.spaceandspace\"), variants)\n                 .appendMinutes()\n-                .appendSuffix(\" minute\", \" minutes\")\n-                .appendSeparator(\", \", \" and \", variants)\n+                .appendSuffix(b.getString(\"PeriodFormat.minute\"), b.getString(\"PeriodFormat.minutes\"))\n+                .appendSeparator(b.getString(\"PeriodFormat.commaspace\"), b.getString(\"PeriodFormat.spaceandspace\"), variants)\n                 .appendSeconds()\n-                .appendSuffix(\" second\", \" seconds\")\n-                .appendSeparator(\", \", \" and \", variants)\n+                .appendSuffix(b.getString(\"PeriodFormat.second\"), b.getString(\"PeriodFormat.seconds\"))\n+                .appendSeparator(b.getString(\"PeriodFormat.commaspace\"), b.getString(\"PeriodFormat.spaceandspace\"), variants)\n                 .appendMillis()\n-                .appendSuffix(\" millisecond\", \" milliseconds\")\n+                .appendSuffix(b.getString(\"PeriodFormat.millisecond\"), b.getString(\"PeriodFormat.milliseconds\"))\n                 .toFormatter();\n+            FORMATTERS.putIfAbsent(locale, pf);\n         }\n-        return cEnglishWords;\n+        return pf;\n     }\n \n }\n--- a/JodaTime/src/test/java/org/joda/time/format/TestPeriodFormat.java\n+++ b/JodaTime/src/test/java/org/joda/time/format/TestPeriodFormat.java\n package org.joda.time.format;\n \n import java.util.Locale;\n-import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n-import org.joda.time.DateTimeConstants;\n-import org.joda.time.DateTimeUtils;\n-import org.joda.time.DateTimeZone;\n import org.joda.time.Period;\n-import org.joda.time.PeriodType;\n \n /**\n  * This class is a Junit unit test for PeriodFormat.\n  */\n public class TestPeriodFormat extends TestCase {\n     \n-    private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n-    private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n-    private static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n-    private static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.yearDayTime());\n-    private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n-    private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-\n-    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n-                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n-                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n-                     366 + 365;\n-    // 2002-06-09\n-    private long TEST_TIME_NOW =\n-            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n-\n-    private DateTimeZone originalDateTimeZone = null;\n-    private TimeZone originalTimeZone = null;\n+    private static final Locale FR = new Locale(\"fr\");\n+    private static final Locale PT = new Locale(\"pt\");\n+    private static final Locale ES = new Locale(\"es\");\n+    private static final Locale DE = new Locale(\"de\");\n+    private static final Locale NL = new Locale(\"nl\");\n+\n     private Locale originalLocale = null;\n \n     public static void main(String[] args) {\n     }\n \n     protected void setUp() throws Exception {\n-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n-        originalDateTimeZone = DateTimeZone.getDefault();\n-        originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n-        DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n         Locale.setDefault(Locale.UK);\n     }\n \n     protected void tearDown() throws Exception {\n-        DateTimeUtils.setCurrentMillisSystem();\n-        DateTimeZone.setDefault(originalDateTimeZone);\n-        TimeZone.setDefault(originalTimeZone);\n         Locale.setDefault(originalLocale);\n-        originalDateTimeZone = null;\n-        originalTimeZone = null;\n         originalLocale = null;\n     }\n \n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFormatStandard() {\n+    // getDefault()\n+    //-----------------------------------------------------------------------\n+    public void test_getDefault_formatStandard() {\n         Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);\n         assertEquals(\"1 day, 5 hours, 6 minutes, 7 seconds and 8 milliseconds\", PeriodFormat.getDefault().print(p));\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFormatOneField() {\n+    public void test_getDefault_FormatOneField() {\n         Period p = Period.days(2);\n         assertEquals(\"2 days\", PeriodFormat.getDefault().print(p));\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFormatTwoFields() {\n+    public void test_getDefault_formatTwoFields() {\n         Period p = Period.days(2).withHours(5);\n         assertEquals(\"2 days and 5 hours\", PeriodFormat.getDefault().print(p));\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testParseOneField() {\n+    public void test_getDefault_parseOneField() {\n         Period p = Period.days(2);\n         assertEquals(p, PeriodFormat.getDefault().parsePeriod(\"2 days\"));\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testParseTwoFields() {\n+    public void test_getDefault_parseTwoFields() {\n         Period p = Period.days(2).withHours(5);\n         assertEquals(p, PeriodFormat.getDefault().parsePeriod(\"2 days and 5 hours\"));\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void test_getDefault_cached() {\n+        assertSame(PeriodFormat.getDefault(), PeriodFormat.getDefault());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    // wordBased(Locale.FRENCH)\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_fr_formatStandard() {\n+        Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);\n+        assertEquals(\"1 jour, 5 heures, 6 minutes, 7 secondes et 8 millisecondes\", PeriodFormat.wordBased(FR).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_fr_FormatOneField() {\n+        Period p = Period.days(2);\n+        assertEquals(\"2 jours\", PeriodFormat.wordBased(FR).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_fr_formatTwoFields() {\n+        Period p = Period.days(2).withHours(5);\n+        assertEquals(\"2 jours et 5 heures\", PeriodFormat.wordBased(FR).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_fr_parseOneField() {\n+        Period p = Period.days(2);\n+        assertEquals(p, PeriodFormat.wordBased(FR).parsePeriod(\"2 jours\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_fr_parseTwoFields() {\n+        Period p = Period.days(2).withHours(5);\n+        assertEquals(p, PeriodFormat.wordBased(FR).parsePeriod(\"2 jours et 5 heures\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_fr_cached() {\n+        assertSame(PeriodFormat.wordBased(FR), PeriodFormat.wordBased(FR));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    // wordBased(Locale pt)\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_pt_formatStandard() {\n+        Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);\n+        assertEquals(\"1 dia, 5 horas, 6 minutos, 7 segundos e 8 milissegundos\", PeriodFormat.wordBased(PT).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_pt_FormatOneField() {\n+        Period p = Period.days(2);\n+        assertEquals(\"2 dias\", PeriodFormat.wordBased(PT).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_pt_formatTwoFields() {\n+        Period p = Period.days(2).withHours(5);\n+        assertEquals(\"2 dias e 5 horas\", PeriodFormat.wordBased(PT).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_pt_parseOneField() {\n+        Period p = Period.days(2);\n+        assertEquals(p, PeriodFormat.wordBased(PT).parsePeriod(\"2 dias\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_pt_parseTwoFields() {\n+        Period p = Period.days(2).withHours(5);\n+        assertEquals(p, PeriodFormat.wordBased(PT).parsePeriod(\"2 dias e 5 horas\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_pt_cached() {\n+        assertSame(PeriodFormat.wordBased(PT), PeriodFormat.wordBased(PT));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    // wordBased(Locale es)\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_es_formatStandard() {\n+        Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);\n+        assertEquals(\"1 dia, 5 horas, 6 minutos, 7 segundos y 8 milisegundos\", PeriodFormat.wordBased(ES).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_es_FormatOneField() {\n+        Period p = Period.days(2);\n+        assertEquals(\"2 dias\", PeriodFormat.wordBased(ES).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_es_formatTwoFields() {\n+        Period p = Period.days(2).withHours(5);\n+        assertEquals(\"2 dias y 5 horas\", PeriodFormat.wordBased(ES).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_es_parseOneField() {\n+        Period p = Period.days(2);\n+        assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod(\"2 dias\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_es_parseTwoFields() {\n+        Period p = Period.days(2).withHours(5);\n+        assertEquals(p, PeriodFormat.wordBased(ES).parsePeriod(\"2 dias y 5 horas\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_es_cached() {\n+        assertSame(PeriodFormat.wordBased(ES), PeriodFormat.wordBased(ES));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    // wordBased(Locale de)\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_de_formatStandard() {\n+        Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);\n+        assertEquals(\"1 Tag, 5 Stunden, 6 Minuten, 7 Sekunden und 8 Millisekunden\", PeriodFormat.wordBased(DE).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_de_FormatOneField() {\n+        Period p = Period.days(2);\n+        assertEquals(\"2 Tage\", PeriodFormat.wordBased(DE).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_de_formatTwoFields() {\n+        Period p = Period.days(2).withHours(5);\n+        assertEquals(\"2 Tage und 5 Stunden\", PeriodFormat.wordBased(DE).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_de_parseOneField() {\n+        Period p = Period.days(2);\n+        assertEquals(p, PeriodFormat.wordBased(DE).parsePeriod(\"2 Tage\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_de_parseTwoFields() {\n+        Period p = Period.days(2).withHours(5);\n+        assertEquals(p, PeriodFormat.wordBased(DE).parsePeriod(\"2 Tage und 5 Stunden\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_de_cached() {\n+        assertSame(PeriodFormat.wordBased(DE), PeriodFormat.wordBased(DE));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    // wordBased(Locale nl)\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_nl_formatStandard() {\n+        Period p = new Period(0, 0, 0, 1, 5, 6 ,7, 8);\n+        assertEquals(\"1 dag, 5 uur, 6 minuten, 7 seconden en 8 milliseconden\", PeriodFormat.wordBased(NL).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_nl_FormatOneField() {\n+        Period p = Period.days(2);\n+        assertEquals(\"2 dagen\", PeriodFormat.wordBased(NL).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_nl_formatTwoFields() {\n+        Period p = Period.days(2).withHours(5);\n+        assertEquals(\"2 dagen en 5 uur\", PeriodFormat.wordBased(NL).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_nl_parseOneField() {\n+        Period p = Period.days(2);\n+        assertEquals(p, PeriodFormat.wordBased(NL).parsePeriod(\"2 dagen\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_nl_parseTwoFields() {\n+        Period p = Period.days(2).withHours(5);\n+        assertEquals(p, PeriodFormat.wordBased(NL).parsePeriod(\"2 dagen en 5 uur\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_nl_cached() {\n+        assertSame(PeriodFormat.wordBased(NL), PeriodFormat.wordBased(NL));\n+    }\n+\n }", "timestamp": 1281891828, "metainfo": ""}