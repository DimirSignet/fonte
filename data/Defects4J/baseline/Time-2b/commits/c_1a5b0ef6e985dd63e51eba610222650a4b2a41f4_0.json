{"sha": "1a5b0ef6e985dd63e51eba610222650a4b2a41f4", "log": "Moved field selector methods to field type classes   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Chronology.java\n+++ b/JodaTime/src/java/org/joda/time/Chronology.java\n      */\n     public abstract void validate(ReadablePartial instant, int[] values);\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Get the field from the type.\n-     * <p>\n-     * This method obtains the <code>DateTimeField</code> for the <code>DateTimeFieldType</code>.\n-     * It is essentially a generic way of calling one of the field methods.\n-     *\n-     * @param type  a field type, usually obtained from DateTimeFieldType\n-     * @return the chronology field\n-     * @throws IllegalArgumentException if the field is null\n-     */\n-    public abstract DateTimeField getField(DateTimeFieldType type);\n-\n     // Millis\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/DateTimeComparator.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeComparator.java\n         Chronology rhsChrono = conv.getChronology(rhsObj);\n \n         if (iLowerLimit != null) {\n-            lhsMillis = lhsChrono.getField(iLowerLimit).roundFloor(lhsMillis);\n-            rhsMillis = rhsChrono.getField(iLowerLimit).roundFloor(rhsMillis);\n+            lhsMillis = iLowerLimit.getField(lhsChrono).roundFloor(lhsMillis);\n+            rhsMillis = iLowerLimit.getField(rhsChrono).roundFloor(rhsMillis);\n         }\n \n         if (iUpperLimit != null) {\n-            lhsMillis = lhsChrono.getField(iUpperLimit).remainder(lhsMillis);\n-            rhsMillis = rhsChrono.getField(iUpperLimit).remainder(rhsMillis);\n+            lhsMillis = iUpperLimit.getField(lhsChrono).remainder(lhsMillis);\n+            rhsMillis = iUpperLimit.getField(rhsChrono).remainder(rhsMillis);\n         }\n \n         if (lhsMillis < rhsMillis) {\n--- a/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n package org.joda.time;\n \n import java.io.Serializable;\n-import java.util.HashMap;\n-import java.util.Map;\n \n /**\n  * Identifies a field, such as year or minuteOfHour, in a chronology-neutral way.\n  *\n  * @author Stephen Colebourne\n+ * @author Brian S O'Neill\n  * @since 1.0\n  */\n-public class DateTimeFieldType implements Serializable {\n+public abstract class DateTimeFieldType implements Serializable {\n \n     /** Serialization version */\n     private static final long serialVersionUID = -42615285973990L;\n \n-    /** The cache of name to type used to ensure singletons. */\n-    private static Map cCache = new HashMap();\n-    /** The era field. */\n-    private static final DateTimeFieldType ERA = new DateTimeFieldType(\n-        \"era\", DurationFieldType.eras(), null);\n-    /** The yearOfEra field. */\n-    private static final DateTimeFieldType YEAR_OF_ERA = new DateTimeFieldType(\n-        \"yearOfEra\", DurationFieldType.years(), DurationFieldType.eras());\n-    /** The centuryOfEra field. */\n-    private static final DateTimeFieldType CENTURY_OF_ERA = new DateTimeFieldType(\n-        \"centuryOfEra\", DurationFieldType.centuries(), DurationFieldType.eras());\n-    /** The yearOfCentury field. */\n-    private static final DateTimeFieldType YEAR_OF_CENTURY = new DateTimeFieldType(\n-        \"yearOfCentury\", DurationFieldType.years(), DurationFieldType.centuries());\n-    /** The year field. */\n-    private static final DateTimeFieldType YEAR = new DateTimeFieldType(\n-        \"year\", DurationFieldType.years(), null);\n-    /** The dayOfYear field. */\n-    private static final DateTimeFieldType DAY_OF_YEAR = new DateTimeFieldType(\n-        \"dayOfYear\", DurationFieldType.days(), DurationFieldType.years());\n-    /** The monthOfYear field. */\n-    private static final DateTimeFieldType MONTH_OF_YEAR = new DateTimeFieldType(\n-        \"monthOfYear\", DurationFieldType.months(), DurationFieldType.years());\n-    /** The dayOfMonth field. */\n-    private static final DateTimeFieldType DAY_OF_MONTH = new DateTimeFieldType(\n-        \"dayOfMonth\", DurationFieldType.days(), DurationFieldType.months());\n-    /** The weekyearOfCentury field. */\n-    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY = new DateTimeFieldType(\n-        \"weekyearOfCentury\", DurationFieldType.weekyears(), DurationFieldType.centuries());\n-    /** The weekyear field. */\n-    private static final DateTimeFieldType WEEKYEAR = new DateTimeFieldType(\n-        \"weekyear\", DurationFieldType.weekyears(), null);\n-    /** The weekOfWeekyear field. */\n-    private static final DateTimeFieldType WEEK_OF_WEEKYEAR = new DateTimeFieldType(\n-        \"weekOfWeekyear\", DurationFieldType.weeks(), DurationFieldType.weekyears());\n-    /** The dayOfWeek field. */\n-    private static final DateTimeFieldType DAY_OF_WEEK = new DateTimeFieldType(\n-        \"dayOfWeek\", DurationFieldType.days(), DurationFieldType.weeks());\n-\n-    /** The halfday field. */\n-    private static final DateTimeFieldType HALFDAY_OF_DAY = new DateTimeFieldType(\n-        \"halfdayOfDay\", DurationFieldType.halfdays(), DurationFieldType.days());\n-    /** The hourOfHalfday field. */\n-    private static final DateTimeFieldType HOUR_OF_HALFDAY = new DateTimeFieldType(\n-        \"hourOfHalfday\", DurationFieldType.hours(), DurationFieldType.halfdays());\n-    /** The clockhourOfHalfday field. */\n-    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY = new DateTimeFieldType(\n-        \"clockhourOfHalfday\", DurationFieldType.hours(), DurationFieldType.halfdays());\n-    /** The clockhourOfDay field. */\n-    private static final DateTimeFieldType CLOCKHOUR_OF_DAY = new DateTimeFieldType(\n-        \"clockhourOfDay\", DurationFieldType.hours(), DurationFieldType.days());\n-    /** The hourOfDay field. */\n-    private static final DateTimeFieldType HOUR_OF_DAY = new DateTimeFieldType(\n-        \"hourOfDay\", DurationFieldType.hours(), DurationFieldType.days());\n-    /** The minuteOfDay field. */\n-    private static final DateTimeFieldType MINUTE_OF_DAY = new DateTimeFieldType(\n-        \"minuteOfDay\", DurationFieldType.minutes(), DurationFieldType.days());\n-    /** The minuteOfHour field. */\n-    private static final DateTimeFieldType MINUTE_OF_HOUR = new DateTimeFieldType(\n-        \"minuteOfHour\", DurationFieldType.minutes(), DurationFieldType.hours());\n-    /** The secondOfDay field. */\n-    private static final DateTimeFieldType SECOND_OF_DAY = new DateTimeFieldType(\n-        \"secondOfDay\", DurationFieldType.seconds(), DurationFieldType.days());\n-    /** The secondOfMinute field. */\n-    private static final DateTimeFieldType SECOND_OF_MINUTE = new DateTimeFieldType(\n-        \"secondOfMinute\", DurationFieldType.seconds(), DurationFieldType.minutes());\n-    /** The millisOfDay field. */\n-    private static final DateTimeFieldType MILLIS_OF_DAY = new DateTimeFieldType(\n-        \"millisOfDay\", DurationFieldType.millis(), DurationFieldType.days());\n-    /** The millisOfSecond field. */\n-    private static final DateTimeFieldType MILLIS_OF_SECOND = new DateTimeFieldType(\n-        \"millisOfSecond\", DurationFieldType.millis(), DurationFieldType.seconds());\n+    // Ordinals for standard field types.\n+    static final byte\n+        ERA = 1,\n+        YEAR_OF_ERA = 2,\n+        CENTURY_OF_ERA = 3,\n+        YEAR_OF_CENTURY = 4,\n+        YEAR = 5,\n+        DAY_OF_YEAR = 6,\n+        MONTH_OF_YEAR = 7,\n+        DAY_OF_MONTH = 8,\n+        WEEKYEAR_OF_CENTURY = 9,\n+        WEEKYEAR = 10,\n+        WEEK_OF_WEEKYEAR = 11,\n+        DAY_OF_WEEK = 12,\n+        HALFDAY_OF_DAY = 13,\n+        HOUR_OF_HALFDAY = 14,\n+        CLOCKHOUR_OF_HALFDAY = 15,\n+        CLOCKHOUR_OF_DAY = 16,\n+        HOUR_OF_DAY = 17,\n+        MINUTE_OF_DAY = 18,\n+        MINUTE_OF_HOUR = 19,\n+        SECOND_OF_DAY = 20,\n+        SECOND_OF_MINUTE = 21,\n+        MILLIS_OF_DAY = 22,\n+        MILLIS_OF_SECOND = 23;\n+\n+    /** The era field type. */\n+    private static final DateTimeFieldType ERA_TYPE = new StandardDateTimeFieldType(\n+        \"era\", ERA, DurationFieldType.eras(), null);\n+    /** The yearOfEra field type. */\n+    private static final DateTimeFieldType YEAR_OF_ERA_TYPE = new StandardDateTimeFieldType(\n+        \"yearOfEra\", YEAR_OF_ERA, DurationFieldType.years(), DurationFieldType.eras());\n+    /** The centuryOfEra field type. */\n+    private static final DateTimeFieldType CENTURY_OF_ERA_TYPE = new StandardDateTimeFieldType(\n+        \"centuryOfEra\", CENTURY_OF_ERA, DurationFieldType.centuries(), DurationFieldType.eras());\n+    /** The yearOfCentury field type. */\n+    private static final DateTimeFieldType YEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(\n+        \"yearOfCentury\", YEAR_OF_CENTURY, DurationFieldType.years(), DurationFieldType.centuries());\n+    /** The year field type. */\n+    private static final DateTimeFieldType YEAR_TYPE = new StandardDateTimeFieldType(\n+        \"year\", YEAR, DurationFieldType.years(), null);\n+    /** The dayOfYear field type. */\n+    private static final DateTimeFieldType DAY_OF_YEAR_TYPE = new StandardDateTimeFieldType(\n+        \"dayOfYear\", DAY_OF_YEAR, DurationFieldType.days(), DurationFieldType.years());\n+    /** The monthOfYear field type. */\n+    private static final DateTimeFieldType MONTH_OF_YEAR_TYPE = new StandardDateTimeFieldType(\n+        \"monthOfYear\", MONTH_OF_YEAR, DurationFieldType.months(), DurationFieldType.years());\n+    /** The dayOfMonth field type. */\n+    private static final DateTimeFieldType DAY_OF_MONTH_TYPE = new StandardDateTimeFieldType(\n+        \"dayOfMonth\", DAY_OF_MONTH, DurationFieldType.days(), DurationFieldType.months());\n+    /** The weekyearOfCentury field type. */\n+    private static final DateTimeFieldType WEEKYEAR_OF_CENTURY_TYPE = new StandardDateTimeFieldType(\n+        \"weekyearOfCentury\", WEEKYEAR_OF_CENTURY, DurationFieldType.weekyears(), DurationFieldType.centuries());\n+    /** The weekyear field type. */\n+    private static final DateTimeFieldType WEEKYEAR_TYPE = new StandardDateTimeFieldType(\n+        \"weekyear\", WEEKYEAR, DurationFieldType.weekyears(), null);\n+    /** The weekOfWeekyear field type. */\n+    private static final DateTimeFieldType WEEK_OF_WEEKYEAR_TYPE = new StandardDateTimeFieldType(\n+        \"weekOfWeekyear\", WEEK_OF_WEEKYEAR, DurationFieldType.weeks(), DurationFieldType.weekyears());\n+    /** The dayOfWeek field type. */\n+    private static final DateTimeFieldType DAY_OF_WEEK_TYPE = new StandardDateTimeFieldType(\n+        \"dayOfWeek\", DAY_OF_WEEK, DurationFieldType.days(), DurationFieldType.weeks());\n+\n+    /** The halfday field type. */\n+    private static final DateTimeFieldType HALFDAY_OF_DAY_TYPE = new StandardDateTimeFieldType(\n+        \"halfdayOfDay\", HALFDAY_OF_DAY, DurationFieldType.halfdays(), DurationFieldType.days());\n+    /** The hourOfHalfday field type. */\n+    private static final DateTimeFieldType HOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(\n+        \"hourOfHalfday\", HOUR_OF_HALFDAY, DurationFieldType.hours(), DurationFieldType.halfdays());\n+    /** The clockhourOfHalfday field type. */\n+    private static final DateTimeFieldType CLOCKHOUR_OF_HALFDAY_TYPE = new StandardDateTimeFieldType(\n+        \"clockhourOfHalfday\", CLOCKHOUR_OF_HALFDAY, DurationFieldType.hours(), DurationFieldType.halfdays());\n+    /** The clockhourOfDay field type. */\n+    private static final DateTimeFieldType CLOCKHOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(\n+        \"clockhourOfDay\", CLOCKHOUR_OF_DAY, DurationFieldType.hours(), DurationFieldType.days());\n+    /** The hourOfDay field type. */\n+    private static final DateTimeFieldType HOUR_OF_DAY_TYPE = new StandardDateTimeFieldType(\n+        \"hourOfDay\", HOUR_OF_DAY, DurationFieldType.hours(), DurationFieldType.days());\n+    /** The minuteOfDay field type. */\n+    private static final DateTimeFieldType MINUTE_OF_DAY_TYPE = new StandardDateTimeFieldType(\n+        \"minuteOfDay\", MINUTE_OF_DAY, DurationFieldType.minutes(), DurationFieldType.days());\n+    /** The minuteOfHour field type. */\n+    private static final DateTimeFieldType MINUTE_OF_HOUR_TYPE = new StandardDateTimeFieldType(\n+        \"minuteOfHour\", MINUTE_OF_HOUR, DurationFieldType.minutes(), DurationFieldType.hours());\n+    /** The secondOfDay field type. */\n+    private static final DateTimeFieldType SECOND_OF_DAY_TYPE = new StandardDateTimeFieldType(\n+        \"secondOfDay\", SECOND_OF_DAY, DurationFieldType.seconds(), DurationFieldType.days());\n+    /** The secondOfMinute field type. */\n+    private static final DateTimeFieldType SECOND_OF_MINUTE_TYPE = new StandardDateTimeFieldType(\n+        \"secondOfMinute\", SECOND_OF_MINUTE, DurationFieldType.seconds(), DurationFieldType.minutes());\n+    /** The millisOfDay field type. */\n+    private static final DateTimeFieldType MILLIS_OF_DAY_TYPE = new StandardDateTimeFieldType(\n+        \"millisOfDay\", MILLIS_OF_DAY, DurationFieldType.millis(), DurationFieldType.days());\n+    /** The millisOfSecond field type. */\n+    private static final DateTimeFieldType MILLIS_OF_SECOND_TYPE = new StandardDateTimeFieldType(\n+        \"millisOfSecond\", MILLIS_OF_SECOND, DurationFieldType.millis(), DurationFieldType.seconds());\n \n     /** The name of the field. */\n     private final String iName;\n-    /** The name of the field. */\n-    private transient final DurationFieldType iUnitType;\n-    /** The name of the field. */\n-    private transient final DurationFieldType iRangeType;\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Factory method to obtain a DateTimeFieldType by name ensuring each\n-     * type is a singleton.\n-     * <p>\n-     * If the name is not found, an error is thrown.\n-     * \n-     * @param name  the name to retrieve\n-     * @return the singleton type\n-     */\n-    public static synchronized DateTimeFieldType getInstance(String name) {\n-        DateTimeFieldType type = (DateTimeFieldType) cCache.get(name);\n-        if (type == null) {\n-            throw new IllegalArgumentException(\"The field '\" + name + \"' is unknown\");\n-        }\n-        return type;\n-    }\n-\n-    /**\n-     * Factory method to define a DateTimeFieldType by name ensuring each\n-     * type is a singleton.\n-     * <p>\n-     * This method checks to see if the name is previously defined, in which\n-     * case it returns the previously defined type object.\n-     * If the name is not found, a new type is created.\n-     * <p>\n-     * It is intended that this method is called once in your program startup\n-     * and then you use the <code>getInstance</code> method. This could be\n-     * achieved by subclassing this class.\n-     * \n-     * @param name  the name to define, such as 'hourOfMonth'\n-     * @param unitType  the unit type, such as 'hours'\n-     * @param rangeType  the range type, such as 'months'\n-     * @return the singleton type\n-     */\n-    public static synchronized DateTimeFieldType define(\n-            String name, DurationFieldType unitType, DurationFieldType rangeType) {\n-        \n-        DateTimeFieldType type = (DateTimeFieldType) cCache.get(name);\n-        if (type == null) {\n-            return new DateTimeFieldType(name, unitType, rangeType);\n-        }\n-        return type;\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * Constructor.\n      * \n      * @param name  the name to use\n-     * @param unitType  the unit type, such as 'hours'\n-     * @param rangeType  the range type, such as 'months'\n-     */\n-    private DateTimeFieldType(\n-                String name, DurationFieldType unitType, DurationFieldType rangeType) {\n-        \n+     */\n+    protected DateTimeFieldType(String name) {\n         super();\n         iName = name;\n-        iUnitType = unitType;\n-        iRangeType = rangeType;\n-        cCache.put(name, this);\n-    }\n-\n-    /**\n-     * Ensure a singleton is returned.\n-     * <p>\n-     * Note that types must be defined before deserialization.\n-     * \n-     * @return the singleton type\n-     */\n-    private Object readResolve() {\n-        return getInstance(iName);\n     }\n \n     //-----------------------------------------------------------------------\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType millisOfSecond() {\n-        return MILLIS_OF_SECOND;\n+        return MILLIS_OF_SECOND_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType millisOfDay() {\n-        return MILLIS_OF_DAY;\n+        return MILLIS_OF_DAY_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType secondOfMinute() {\n-        return SECOND_OF_MINUTE;\n+        return SECOND_OF_MINUTE_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType secondOfDay() {\n-        return SECOND_OF_DAY;\n+        return SECOND_OF_DAY_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType minuteOfHour() {\n-        return MINUTE_OF_HOUR;\n+        return MINUTE_OF_HOUR_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType minuteOfDay() {\n-        return MINUTE_OF_DAY;\n+        return MINUTE_OF_DAY_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType hourOfDay() {\n-        return HOUR_OF_DAY;\n+        return HOUR_OF_DAY_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType clockhourOfDay() {\n-        return CLOCKHOUR_OF_DAY;\n+        return CLOCKHOUR_OF_DAY_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType hourOfHalfday() {\n-        return HOUR_OF_HALFDAY;\n+        return HOUR_OF_HALFDAY_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType clockhourOfHalfday() {\n-        return CLOCKHOUR_OF_HALFDAY;\n+        return CLOCKHOUR_OF_HALFDAY_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType halfdayOfDay() {\n-        return HALFDAY_OF_DAY;\n+        return HALFDAY_OF_DAY_TYPE;\n     }\n \n     //-----------------------------------------------------------------------\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType dayOfWeek() {\n-        return DAY_OF_WEEK;\n+        return DAY_OF_WEEK_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType dayOfMonth() {\n-        return DAY_OF_MONTH;\n+        return DAY_OF_MONTH_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType dayOfYear() {\n-        return DAY_OF_YEAR;\n+        return DAY_OF_YEAR_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType weekOfWeekyear() {\n-        return WEEK_OF_WEEKYEAR;\n+        return WEEK_OF_WEEKYEAR_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType weekyear() {\n-        return WEEKYEAR;\n+        return WEEKYEAR_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType weekyearOfCentury() {\n-        return WEEKYEAR_OF_CENTURY;\n+        return WEEKYEAR_OF_CENTURY_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType monthOfYear() {\n-        return MONTH_OF_YEAR;\n+        return MONTH_OF_YEAR_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType year() {\n-        return YEAR;\n+        return YEAR_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType yearOfEra() {\n-        return YEAR_OF_ERA;\n+        return YEAR_OF_ERA_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType yearOfCentury() {\n-        return YEAR_OF_CENTURY;\n+        return YEAR_OF_CENTURY_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType centuryOfEra() {\n-        return CENTURY_OF_ERA;\n+        return CENTURY_OF_ERA_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DateTimeFieldType era() {\n-        return ERA;\n+        return ERA_TYPE;\n     }\n \n     //-----------------------------------------------------------------------\n      * \n      * @return duration unit of the field, never null\n      */\n-    public DurationFieldType getDurationType() {\n-        return iUnitType;\n-    }\n+    public abstract DurationFieldType getDurationType();\n \n     /**\n      * Get the duration range of the field.\n      * \n      * @return duration range of the field, null if unbounded\n      */\n-    public DurationFieldType getRangeDurationType() {\n-        return iRangeType;\n-    }\n+    public abstract DurationFieldType getRangeDurationType();\n+\n+    /**\n+     * Select a suitable field for this type from the given Chronology.\n+     *\n+     * @param chronology Chronology to select a field from, null means\n+     * ISOChronology in default zone\n+     * @return a suitable field\n+     */\n+    public abstract DateTimeField getField(Chronology chronology);\n \n     /**\n      * Get a suitable debug string.\n         return getName();\n     }\n \n+    private static class StandardDateTimeFieldType extends DateTimeFieldType {\n+        /** Serialization version */\n+        private static final long serialVersionUID = -9937958251642L;\n+\n+        /** The ordinal of the standard field type, for switch statements */\n+        private final byte iOrdinal;\n+\n+        /** The unit duration of the field. */\n+        private transient final DurationFieldType iUnitType;\n+        /** The range duration of the field. */\n+        private transient final DurationFieldType iRangeType;\n+\n+        /**\n+         * Constructor.\n+         * \n+         * @param name  the name to use\n+         */\n+        StandardDateTimeFieldType(String name, byte ordinal,\n+                                  DurationFieldType unitType, DurationFieldType rangeType) {\n+            super(name);\n+            iOrdinal = ordinal;\n+            iUnitType = unitType;\n+            iRangeType = rangeType;\n+        }\n+\n+        public DurationFieldType getDurationType() {\n+            return iUnitType;\n+        }\n+\n+        public DurationFieldType getRangeDurationType() {\n+            return iRangeType;\n+        }\n+\n+        public DateTimeField getField(Chronology chronology) {\n+            chronology = DateTimeUtils.getChronology(chronology);\n+\n+            switch (iOrdinal) {\n+            case ERA:\n+                return chronology.era();\n+            case YEAR_OF_ERA:\n+                return chronology.yearOfEra();\n+            case CENTURY_OF_ERA:\n+                return chronology.centuryOfEra();\n+            case YEAR_OF_CENTURY:\n+                return chronology.yearOfCentury();\n+            case YEAR:\n+                return chronology.year();\n+            case DAY_OF_YEAR:\n+                return chronology.dayOfYear();\n+            case MONTH_OF_YEAR:\n+                return chronology.monthOfYear();\n+            case DAY_OF_MONTH:\n+                return chronology.dayOfMonth();\n+                // TODO: Add to Chronology\n+                //case WEEKYEAR_OF_CENTURY:\n+                //return chronology.weekyearOfCentury();\n+            case WEEKYEAR:\n+                return chronology.weekyear();\n+            case WEEK_OF_WEEKYEAR:\n+                return chronology.weekOfWeekyear();\n+            case DAY_OF_WEEK:\n+                return chronology.dayOfWeek();\n+            case HALFDAY_OF_DAY:\n+                return chronology.halfdayOfDay();\n+            case HOUR_OF_HALFDAY:\n+                return chronology.hourOfHalfday();\n+            case CLOCKHOUR_OF_HALFDAY:\n+                return chronology.clockhourOfHalfday();\n+            case CLOCKHOUR_OF_DAY:\n+                return chronology.clockhourOfDay();\n+            case HOUR_OF_DAY:\n+                return chronology.hourOfDay();\n+            case MINUTE_OF_DAY:\n+                return chronology.minuteOfDay();\n+            case MINUTE_OF_HOUR:\n+                return chronology.minuteOfHour();\n+            case SECOND_OF_DAY:\n+                return chronology.secondOfDay();\n+            case SECOND_OF_MINUTE:\n+                return chronology.secondOfMinute();\n+            case MILLIS_OF_DAY:\n+                return chronology.millisOfDay();\n+            case MILLIS_OF_SECOND:\n+                return chronology.millisOfSecond();\n+            default:\n+                // Shouldn't happen.\n+                throw new IllegalStateException();\n+            }\n+        }\n+\n+        /**\n+         * Ensure a singleton is returned.\n+         * \n+         * @return the singleton type\n+         */\n+        private Object readResolve() {\n+            switch (iOrdinal) {\n+            case ERA:\n+                return ERA_TYPE;\n+            case YEAR_OF_ERA:\n+                return YEAR_OF_ERA_TYPE;\n+            case CENTURY_OF_ERA:\n+                return CENTURY_OF_ERA_TYPE;\n+            case YEAR_OF_CENTURY:\n+                return YEAR_OF_CENTURY_TYPE;\n+            case YEAR:\n+                return YEAR_TYPE;\n+            case DAY_OF_YEAR:\n+                return DAY_OF_YEAR_TYPE;\n+            case MONTH_OF_YEAR:\n+                return MONTH_OF_YEAR_TYPE;\n+            case DAY_OF_MONTH:\n+                return DAY_OF_MONTH_TYPE;\n+            case WEEKYEAR_OF_CENTURY:\n+                return WEEKYEAR_OF_CENTURY_TYPE;\n+            case WEEKYEAR:\n+                return WEEKYEAR_TYPE;\n+            case WEEK_OF_WEEKYEAR:\n+                return WEEK_OF_WEEKYEAR_TYPE;\n+            case DAY_OF_WEEK:\n+                return DAY_OF_WEEK_TYPE;\n+            case HALFDAY_OF_DAY:\n+                return HALFDAY_OF_DAY_TYPE;\n+            case HOUR_OF_HALFDAY:\n+                return HOUR_OF_HALFDAY_TYPE;\n+            case CLOCKHOUR_OF_HALFDAY:\n+                return CLOCKHOUR_OF_HALFDAY_TYPE;\n+            case CLOCKHOUR_OF_DAY:\n+                return CLOCKHOUR_OF_DAY_TYPE;\n+            case HOUR_OF_DAY:\n+                return HOUR_OF_DAY_TYPE;\n+            case MINUTE_OF_DAY:\n+                return MINUTE_OF_DAY_TYPE;\n+            case MINUTE_OF_HOUR:\n+                return MINUTE_OF_HOUR_TYPE;\n+            case SECOND_OF_DAY:\n+                return SECOND_OF_DAY_TYPE;\n+            case SECOND_OF_MINUTE:\n+                return SECOND_OF_MINUTE_TYPE;\n+            case MILLIS_OF_DAY:\n+                return MILLIS_OF_DAY_TYPE;\n+            case MILLIS_OF_SECOND:\n+                return MILLIS_OF_SECOND_TYPE;\n+            default:\n+                // Shouldn't happen.\n+                return this;\n+            }\n+        }\n+    }\n+\n }\n--- a/JodaTime/src/java/org/joda/time/DurationFieldType.java\n+++ b/JodaTime/src/java/org/joda/time/DurationFieldType.java\n package org.joda.time;\n \n import java.io.Serializable;\n-import java.util.HashMap;\n-import java.util.Map;\n \n /**\n  * Identifies a field, such as year or minutes, in a chronology-neutral way.\n  *\n  * @author Stephen Colebourne\n+ * @author Brian S O'Neill\n  * @since 1.0\n  */\n-public class DurationFieldType implements Serializable {\n+public abstract class DurationFieldType implements Serializable {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 8765135187319L;\n \n-    /** The cache of name to type used to ensure singletons. */\n-    private static Map cCache = new HashMap();\n-    /** The eras field. */\n-    private static final DurationFieldType ERAS = new DurationFieldType(\"eras\");\n-    /** The centuries field. */\n-    private static final DurationFieldType CENTURIES = new DurationFieldType(\"centuries\");\n-    /** The weekyears field. */\n-    private static final DurationFieldType WEEKYEARS = new DurationFieldType(\"weekyears\");\n-    /** The years field. */\n-    private static final DurationFieldType YEARS = new DurationFieldType(\"years\");\n-    /** The months field. */\n-    private static final DurationFieldType MONTHS = new DurationFieldType(\"months\");\n-    /** The weeks field. */\n-    private static final DurationFieldType WEEKS = new DurationFieldType(\"weeks\");\n-    /** The days field. */\n-    private static final DurationFieldType DAYS = new DurationFieldType(\"days\");\n-    /** The halfdays field. */\n-    private static final DurationFieldType HALFDAYS = new DurationFieldType(\"halfdays\");\n-    /** The hours field. */\n-    private static final DurationFieldType HOURS = new DurationFieldType(\"hours\");\n-    /** The minutes field. */\n-    private static final DurationFieldType MINUTES = new DurationFieldType(\"minutes\");\n-    /** The seconds field. */\n-    private static final DurationFieldType SECONDS = new DurationFieldType(\"seconds\");\n-    /** The millis field. */\n-    private static final DurationFieldType MILLIS = new DurationFieldType(\"millis\");\n-\n-    /** The name of the field. */\n+    // Ordinals for standard field types.\n+    static final byte\n+        ERAS = 1,\n+        CENTURIES = 2,\n+        WEEKYEARS = 3,\n+        YEARS = 4,\n+        MONTHS = 5,\n+        WEEKS = 6,\n+        DAYS = 7,\n+        HALFDAYS = 8,\n+        HOURS = 9,\n+        MINUTES = 10,\n+        SECONDS = 11,\n+        MILLIS = 12;\n+\n+    /** The eras field type. */\n+    static final DurationFieldType ERAS_TYPE = new StandardDurationFieldType(\"eras\", ERAS);\n+    /** The centuries field type. */\n+    static final DurationFieldType CENTURIES_TYPE = new StandardDurationFieldType(\"centuries\", CENTURIES);\n+    /** The weekyears field type. */\n+    static final DurationFieldType WEEKYEARS_TYPE = new StandardDurationFieldType(\"weekyears\", WEEKYEARS);\n+    /** The years field type. */\n+    static final DurationFieldType YEARS_TYPE = new StandardDurationFieldType(\"years\", YEARS);\n+    /** The months field type. */\n+    static final DurationFieldType MONTHS_TYPE = new StandardDurationFieldType(\"months\", MONTHS);\n+    /** The weeks field type. */\n+    static final DurationFieldType WEEKS_TYPE = new StandardDurationFieldType(\"weeks\", WEEKS);\n+    /** The days field type. */\n+    static final DurationFieldType DAYS_TYPE = new StandardDurationFieldType(\"days\", DAYS);\n+    /** The halfdays field type. */\n+    static final DurationFieldType HALFDAYS_TYPE = new StandardDurationFieldType(\"halfdays\", HALFDAYS);\n+    /** The hours field type. */\n+    static final DurationFieldType HOURS_TYPE = new StandardDurationFieldType(\"hours\", HOURS);\n+    /** The minutes field type. */\n+    static final DurationFieldType MINUTES_TYPE = new StandardDurationFieldType(\"minutes\", MINUTES);\n+    /** The seconds field type. */\n+    static final DurationFieldType SECONDS_TYPE = new StandardDurationFieldType(\"seconds\", SECONDS);\n+    /** The millis field type. */\n+    static final DurationFieldType MILLIS_TYPE = new StandardDurationFieldType(\"millis\", MILLIS);\n+\n+    /** The name of the field type. */\n     private final String iName;\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Factory method to obtain a DurationFieldType by name ensuring each\n-     * type is a singleton.\n-     * <p>\n-     * If the name is not found, an error is thrown.\n-     * \n-     * @param name  the name to retrieve\n-     * @return the singleton type\n-     */\n-    public static synchronized DurationFieldType getInstance(String name) {\n-        DurationFieldType type = (DurationFieldType) cCache.get(name);\n-        if (type == null) {\n-            throw new IllegalArgumentException(\"The field '\" + name + \"' is unknown\");\n-        }\n-        return type;\n-    }\n-\n-    /**\n-     * Factory method to define a DurationFieldType by name ensuring each\n-     * type is a singleton.\n-     * <p>\n-     * This method checks to see if the name is previously defined, in which\n-     * case it returns the previously defined type object.\n-     * If the name is not found, a new type is created.\n-     * <p>\n-     * It is intended that this method is called once in your program startup\n-     * and then you use the <code>getInstance</code> method. This could be\n-     * achieved by subclassing this class.\n-     * \n-     * @param name  the name to retrieve\n-     * @return the singleton type\n-     */\n-    public static synchronized DurationFieldType define(String name) {\n-        DurationFieldType type = (DurationFieldType) cCache.get(name);\n-        if (type == null) {\n-            return new DurationFieldType(name);\n-        }\n-        return type;\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * Constructor.\n      * \n-     * @param name  the name to use\n-     */\n-    private DurationFieldType(String name) {\n+     * @param name  the name to use, which by convention, are plural.\n+     */\n+    protected DurationFieldType(String name) {\n         super();\n         iName = name;\n-        cCache.put(name, this);\n-    }\n-\n-    /**\n-     * Ensure a singleton is returned.\n-     * \n-     * @return the singleton type\n-     */\n-    private Object readResolve() {\n-        return getInstance(iName);\n     }\n \n     //-----------------------------------------------------------------------\n      * @return the DateTimeFieldType constant\n      */\n     public static DurationFieldType millis() {\n-        return MILLIS;\n+        return MILLIS_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DurationFieldType seconds() {\n-        return SECONDS;\n+        return SECONDS_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DurationFieldType minutes() {\n-        return MINUTES;\n+        return MINUTES_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DurationFieldType hours() {\n-        return HOURS;\n+        return HOURS_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DurationFieldType halfdays() {\n-        return HALFDAYS;\n+        return HALFDAYS_TYPE;\n     }\n \n     //-----------------------------------------------------------------------\n      * @return the DateTimeFieldType constant\n      */\n     public static DurationFieldType days() {\n-        return DAYS;\n+        return DAYS_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DurationFieldType weeks() {\n-        return WEEKS;\n+        return WEEKS_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DurationFieldType weekyears() {\n-        return WEEKYEARS;\n+        return WEEKYEARS_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DurationFieldType months() {\n-        return MONTHS;\n+        return MONTHS_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DurationFieldType years() {\n-        return YEARS;\n+        return YEARS_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DurationFieldType centuries() {\n-        return CENTURIES;\n+        return CENTURIES_TYPE;\n     }\n \n     /**\n      * @return the DateTimeFieldType constant\n      */\n     public static DurationFieldType eras() {\n-        return ERAS;\n+        return ERAS_TYPE;\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * Get the name of the field.\n-     * By convention, names have a plural name.\n+     * By convention, names are plural.\n      * \n      * @return field name\n      */\n     }\n \n     /**\n+     * Select a suitable field for this type from the given Chronology.\n+     *\n+     * @param chronology Chronology to select a field from, null means\n+     * ISOChronology in default zone\n+     * @return a suitable field\n+     */\n+    public abstract DurationField getField(Chronology chronology);\n+\n+    /**\n      * Get a suitable debug string.\n      * \n      * @return debug string\n         return getName();\n     }\n \n+    private static class StandardDurationFieldType extends DurationFieldType {\n+        /** Serialization version */\n+        private static final long serialVersionUID = 31156755687123L;\n+\n+        /** The ordinal of the standard field type, for switch statements */\n+        private final byte iOrdinal;\n+\n+        /**\n+         * Constructor.\n+         * \n+         * @param name  the name to use\n+         */\n+        StandardDurationFieldType(String name, byte ordinal) {\n+            super(name);\n+            iOrdinal = ordinal;\n+        }\n+\n+        public DurationField getField(Chronology chronology) {\n+            chronology = DateTimeUtils.getChronology(chronology);\n+            \n+            switch (iOrdinal) {\n+            case ERAS:\n+                return chronology.eras();\n+            case CENTURIES:\n+                return chronology.centuries();\n+            case WEEKYEARS:\n+                return chronology.weekyears();\n+            case YEARS:\n+                return chronology.years();\n+            case MONTHS:\n+                return chronology.months();\n+            case WEEKS:\n+                return chronology.weeks();\n+            case DAYS:\n+                return chronology.days();\n+                // TODO: Add to Chronology\n+                //case HALFDAYS:\n+                //return chronology.halfdays();\n+            case HOURS:\n+                return chronology.hours();\n+            case MINUTES:\n+                return chronology.minutes();\n+            case SECONDS:\n+                return chronology.seconds();\n+            case MILLIS:\n+                return chronology.millis();\n+            default:\n+                // Shouldn't happen.\n+                throw new IllegalStateException();\n+            }\n+        }\n+\n+        /**\n+         * Ensure a singleton is returned.\n+         * \n+         * @return the singleton type\n+         */\n+        private Object readResolve() {\n+            switch (iOrdinal) {\n+            case ERAS:\n+                return ERAS_TYPE;\n+            case CENTURIES:\n+                return CENTURIES_TYPE;\n+            case WEEKYEARS:\n+                return WEEKYEARS_TYPE;\n+            case YEARS:\n+                return YEARS_TYPE;\n+            case MONTHS:\n+                return MONTHS_TYPE;\n+            case WEEKS:\n+                return WEEKS_TYPE;\n+            case DAYS:\n+                return DAYS_TYPE;\n+            case HALFDAYS:\n+                return HALFDAYS_TYPE;\n+            case HOURS:\n+                return HOURS_TYPE;\n+            case MINUTES:\n+                return MINUTES_TYPE;\n+            case SECONDS:\n+                return SECONDS_TYPE;\n+            case MILLIS:\n+                return MILLIS_TYPE;\n+            default:\n+                // Shouldn't happen.\n+                return this;\n+            }\n+        }\n+\n+    }\n }\n--- a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java\n      *\n      * @param type  a field type, usually obtained from DateTimeFieldType\n      * @return the value of that field\n-     * @throws IllegalArgumentException if the field is null\n+     * @throws IllegalArgumentException if the field type is null\n      */\n     public int get(DateTimeFieldType type) {\n-        return getChronology().getField(type).get(getMillis());\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"The DateTimeFieldType must not be null\");\n+        }\n+        return type.getField(getChronology()).get(getMillis());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java\n         }\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Get the field from the type.\n-     * <p>\n-     * This method obtains the <code>DateTimeField</code> for the <code>DateTimeFieldType</code>.\n-     * It is essentially a generic way of calling one of the field methods.\n-     *\n-     * @param type  a field type, usually obtained from DateTimeFieldType\n-     * @return the chronology field\n-     * @throws IllegalArgumentException if the field is null\n-     */\n-    public DateTimeField getField(DateTimeFieldType type) {\n-        if (type == DateTimeFieldType.millisOfSecond()) {\n-            return millisOfSecond();\n-        } else if (type == DateTimeFieldType.millisOfDay()) {\n-            return millisOfDay();\n-        } else if (type == DateTimeFieldType.secondOfMinute()) {\n-            return secondOfMinute();\n-        } else if (type == DateTimeFieldType.secondOfDay()) {\n-            return secondOfDay();\n-        } else if (type == DateTimeFieldType.minuteOfHour()) {\n-            return minuteOfHour();\n-        } else if (type == DateTimeFieldType.minuteOfDay()) {\n-            return minuteOfDay();\n-        } else if (type == DateTimeFieldType.hourOfDay()) {\n-            return hourOfDay();\n-        } else if (type == DateTimeFieldType.hourOfHalfday()) {\n-            return hourOfHalfday();\n-        } else if (type == DateTimeFieldType.clockhourOfDay()) {\n-            return clockhourOfDay();\n-        } else if (type == DateTimeFieldType.halfdayOfDay()) {\n-            return halfdayOfDay();\n-        } else if (type == DateTimeFieldType.clockhourOfHalfday()) {\n-            return clockhourOfHalfday();\n-        } else if (type == DateTimeFieldType.dayOfWeek()) {\n-            return dayOfWeek();\n-        } else if (type == DateTimeFieldType.dayOfMonth()) {\n-            return dayOfMonth();\n-        } else if (type == DateTimeFieldType.dayOfYear()) {\n-            return dayOfYear();\n-        } else if (type == DateTimeFieldType.weekOfWeekyear()) {\n-            return weekOfWeekyear();\n-        } else if (type == DateTimeFieldType.weekyear()) {\n-            return weekyear();\n-        } else if (type == DateTimeFieldType.monthOfYear()) {\n-            return monthOfYear();\n-        } else if (type == DateTimeFieldType.year()) {\n-            return year();\n-        } else if (type == DateTimeFieldType.yearOfEra()) {\n-            return yearOfEra();\n-        } else if (type == DateTimeFieldType.yearOfCentury()) {\n-            return yearOfCentury();\n-        } else if (type == DateTimeFieldType.centuryOfEra()) {\n-            return centuryOfEra();\n-        } else if (type == DateTimeFieldType.era()) {\n-            return era();\n-        } else {\n-            throw new IllegalArgumentException(\"Unrecognised field: \" + type);\n-        }\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Get the field from the type.\n-     * <p>\n-     * This method obtains the <code>DurationField</code> for the <code>DurationFieldType</code>.\n-     * It is essentially a generic way of calling one of the field methods.\n-     *\n-     * @param type  a field type, usually obtained from DurationFieldType\n-     * @return the chronology field\n-     * @throws IllegalArgumentException if the field is null\n-     */\n-    public DurationField getField(DurationFieldType type) {\n-        if (type == DurationFieldType.millis()) {\n-            return millis();\n-        } else if (type == DurationFieldType.seconds()) {\n-            return seconds();\n-        } else if (type == DurationFieldType.minutes()) {\n-            return minutes();\n-        } else if (type == DurationFieldType.hours()) {\n-            return hours();\n-        } else if (type == DurationFieldType.halfdays()) {\n-            return halfdays();\n-        } else if (type == DurationFieldType.days()) {\n-            return days();\n-        } else if (type == DurationFieldType.weeks()) {\n-            return weeks();\n-        } else if (type == DurationFieldType.weekyears()) {\n-            return weekyears();\n-        } else if (type == DurationFieldType.months()) {\n-            return months();\n-        } else if (type == DurationFieldType.years()) {\n-            return years();\n-        } else if (type == DurationFieldType.centuries()) {\n-            return centuries();\n-        } else if (type == DurationFieldType.eras()) {\n-            return eras();\n-        } else {\n-            throw new IllegalArgumentException(\"Unrecognised field: \" + type);\n-        }\n-    }\n-\n     // Millis\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java\n         }\n         int thisValue = get();\n         Chronology chrono = DateTimeUtils.getChronology(instant.getChronology());\n-        int otherValue = chrono.getField(getFieldType()).get(instant.getMillis());\n+        int otherValue = getFieldType().getField(chrono).get(instant.getMillis());\n         if (thisValue < otherValue) {\n             return -1;\n         } else if (thisValue > otherValue) {", "timestamp": 1094194364, "metainfo": ""}