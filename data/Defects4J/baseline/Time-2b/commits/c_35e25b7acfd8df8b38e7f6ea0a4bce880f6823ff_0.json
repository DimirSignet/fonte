{"sha": "35e25b7acfd8df8b38e7f6ea0a4bce880f6823ff", "log": "Simplify Period   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Chronology.java\n+++ b/JodaTime/src/java/org/joda/time/Chronology.java\n                            int secondOfMinute, int millisOfSecond)\n         throws IllegalArgumentException;\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Validates whether the values are valid for the fields of a partial instant.\n      *\n      */\n     public abstract void validate(ReadablePartial instant, int[] values);\n \n+    /**\n+     * Adds the period to the instant, specifying the number of times to add.\n+     *\n+     * @param instant  the instant to add to\n+     * @param period  the period to add, null means add nothing\n+     * @param scalar  the number of times to add\n+     * @return the updated instant\n+     */\n+    public abstract long add(long instant, ReadablePeriod period, int scalar);\n+\n     // Millis\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n      * DateTime added = dt.hourOfDay().addToCopy(6);\n      * </pre>\n      * \n-     * @param periodToAdd  the period to add to this one, null means zero\n+     * @param period  the period to add to this one, null means zero\n      * @param scalar  the amount of times to add, such as -1 to subtract once\n      * @return a copy of this datetime with the period added\n      * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n      */\n-    public DateTime withPeriodAdded(ReadablePeriod periodToAdd, int scalar) {\n-        if (periodToAdd == null || scalar == 0) {\n+    public DateTime withPeriodAdded(ReadablePeriod period, int scalar) {\n+        if (period == null || scalar == 0) {\n             return this;\n         }\n-        long instant = periodToAdd.addTo(getMillis(), scalar, getChronology());\n+        long instant = getChronology().add(getMillis(), period, scalar);\n         return withMillis(instant);\n     }\n \n--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the chronology from the specified instant object handling null.\n-     * <p>\n-     * If the instant object is <code>null</code>, or the instant's chronology is\n-     * <code>null</code>, <code>nullChrono</code> will be returned.\n-     * Otherwise, the chronology from the object is returned.\n-     * \n-     * @param instant  the instant to examine, null means returns use nullChrono\n-     * @param nullChrono  the chronology to use in the case of finding null\n-     * @return the chronology\n-     */\n-    public static final Chronology getInstantChronology(ReadableInstant instant, Chronology nullChrono) {\n-        if (instant == null) {\n-            return nullChrono;\n-        }\n-        Chronology chrono = instant.getChronology();\n-        if (chrono == null) {\n-            return nullChrono;\n-        }\n-        return chrono;\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * Gets the chronology handling null.\n      * <p>\n      * If the chronology is <code>null</code>, {@link ISOChronology#getInstance()}\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n      */\n     public void add(ReadablePeriod period, int scalar) {\n         if (period != null) {\n-            setMillis(period.addTo(getMillis(), scalar, getChronology()));  // set via this class not super\n+            setMillis(getChronology().add(getMillis(), period, scalar));  // set via this class not super\n         }\n     }\n \n--- a/JodaTime/src/java/org/joda/time/MutableInterval.java\n+++ b/JodaTime/src/java/org/joda/time/MutableInterval.java\n             setEndMillis(getStartMillis());\n         } else {\n             chrono = DateTimeUtils.getChronology(chrono);\n-            setEndMillis(period.addTo(getStartMillis(), 1, chrono));\n+            setEndMillis(chrono.add(getStartMillis(), period, 1));\n         }\n     }\n \n             setStartMillis(getEndMillis());\n         } else {\n             chrono = DateTimeUtils.getChronology(chrono);\n-            setStartMillis(period.addTo(getEndMillis(), -1, chrono));\n+            setStartMillis(chrono.add(getEndMillis(), period, -1));\n         }\n     }\n \n--- a/JodaTime/src/java/org/joda/time/MutablePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/MutablePeriod.java\n     }\n \n     /**\n-     * Create a period from a set of field values using the time set of fields.\n+     * Create a period from a set of field values using the standard set of fields.\n      *\n      * @param hours  amount of hours in this period\n      * @param minutes  amount of minutes in this period\n      * @param millis  amount of milliseconds in this period\n      */\n     public MutablePeriod(int hours, int minutes, int seconds, int millis) {\n-        super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.time());\n+        super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());\n     }\n \n     /**\n             setPeriod(0L);\n         } else {\n             setPeriod(interval.getStartMillis(), interval.getEndMillis(), chrono);\n+        }\n+    }\n+\n+    /**\n+     * Sets all the fields in one go from two instants using\n+     * the ISO chronology and dividing the fields using the period type.\n+     * \n+     * @param start  the start instant, null means now\n+     * @param end  the end instant, null means now\n+     */\n+    public void setPeriod(ReadableInstant start, ReadableInstant end) {\n+        setPeriod(start, end, null);\n+    }\n+\n+    /**\n+     * Sets all the fields in one go from two instants using\n+     * the specified chronology and dividing the fields using the period type.\n+     * \n+     * @param start  the start instant, null means now\n+     * @param end  the end instant, null means now\n+     * @param chrono  the chronology to use, null means ISO default\n+     */\n+    public void setPeriod(ReadableInstant start, ReadableInstant end, Chronology chrono) {\n+        if (start == end) {\n+            setPeriod(0L);\n+        } else {\n+            long startMillis = DateTimeUtils.getInstantMillis(start);\n+            long endMillis = DateTimeUtils.getInstantMillis(end);\n+            setPeriod(start, end, chrono);\n         }\n     }\n \n      * @return the number of years in the period, zero if unsupported\n      */\n     public int getYears() {\n-        return getPeriodType().getYears(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n     }\n \n     /**\n      * @return the number of months in the period, zero if unsupported\n      */\n     public int getMonths() {\n-        return getPeriodType().getMonths(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n     }\n \n     /**\n      * @return the number of weeks in the period, zero if unsupported\n      */\n     public int getWeeks() {\n-        return getPeriodType().getWeeks(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n     }\n \n     /**\n      * @return the number of days in the period, zero if unsupported\n      */\n     public int getDays() {\n-        return getPeriodType().getDays(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n     }\n \n     //-----------------------------------------------------------------------\n      * @return the number of hours in the period, zero if unsupported\n      */\n     public int getHours() {\n-        return getPeriodType().getHours(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n     }\n \n     /**\n      * @return the number of minutes in the period, zero if unsupported\n      */\n     public int getMinutes() {\n-        return getPeriodType().getMinutes(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n     }\n \n     /**\n      * @return the number of seconds in the period, zero if unsupported\n      */\n     public int getSeconds() {\n-        return getPeriodType().getSeconds(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n     }\n \n     /**\n      * @return the number of millis in the period, zero if unsupported\n      */\n     public int getMillis() {\n-        return getPeriodType().getMillis(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n     /** Serialization version */\n     private static final long serialVersionUID = 741052353876488155L;\n \n-    /**\n-     * Create a period from a set of field values using the time set of fields.\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Create a period with a specified number of years.\n+     * The standard period type is used.\n+     *\n+     * @param years  the amount of years in this period\n+     * @return the period\n+     */\n+    public static Period years(int years) {\n+        return new Period(new int[] {years}, PeriodType.standard());\n+    }\n+\n+    /**\n+     * Create a period with a specified number of months.\n+     * The standard period type is used.\n+     *\n+     * @param months  the amount of months in this period\n+     * @return the period\n+     */\n+    public static Period months(int months) {\n+        return new Period(new int[] {months}, PeriodType.standard());\n+    }\n+\n+    /**\n+     * Create a period with a specified number of weeks.\n+     * The standard period type is used.\n+     *\n+     * @param weeks  the amount of weeks in this period\n+     * @return the period\n+     */\n+    public static Period weeks(int weeks) {\n+        return new Period(new int[] {weeks}, PeriodType.standard());\n+    }\n+\n+    /**\n+     * Create a period with a specified number of days.\n+     * The standard period type is used.\n+     *\n+     * @param days  the amount of days in this period\n+     * @return the period\n+     */\n+    public static Period days(int days) {\n+        return new Period(new int[] {days}, PeriodType.standard());\n+    }\n+\n+    /**\n+     * Create a period with a specified number of hours.\n+     * The standard period type is used.\n+     *\n+     * @param hours  the amount of hours in this period\n+     * @return the period\n+     */\n+    public static Period hours(int hours) {\n+        return new Period(new int[] {hours}, PeriodType.standard());\n+    }\n+\n+    /**\n+     * Create a period with a specified number of minutes.\n+     * The standard period type is used.\n+     *\n+     * @param minutes  the amount of minutes in this period\n+     * @return the period\n+     */\n+    public static Period minutes(int minutes) {\n+        return new Period(new int[] {minutes}, PeriodType.standard());\n+    }\n+\n+    /**\n+     * Create a period with a specified number of seconds.\n+     * The standard period type is used.\n+     *\n+     * @param seconds  the amount of seconds in this period\n+     * @return the period\n+     */\n+    public static Period seconds(int seconds) {\n+        return new Period(new int[] {seconds}, PeriodType.standard());\n+    }\n+\n+    /**\n+     * Create a period with a specified number of millis.\n+     * The standard period type is used.\n+     *\n+     * @param millis  the amount of millis in this period\n+     * @return the period\n+     */\n+    public static Period millis(int millis) {\n+        return new Period(new int[] {millis}, PeriodType.standard());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Creates a new empty period with the standard set of fields.\n+     * <p>\n+     * One way to initialise a period is as follows:\n+     * <pre>\n+     * Period = new Period().withYears(6).withMonths(3).withSeconds(23);\n+     * </pre>\n+     * Bear in mind that this creates four period instances in total, three of\n+     * which are immediately discarded.\n+     * The alterative is more efficient, but less readable:\n+     * <pre>\n+     * Period = new Period(6, 3, 0, 0, 0, 0, 23, 0);\n+     * </pre>\n+     * The following is also slightly less wasteful:\n+     * <pre>\n+     * Period = Period.years(6).withMonths(3).withSeconds(23);\n+     * </pre>\n+     */\n+    public Period() {\n+        super(0L, null, null);\n+    }\n+\n+    /**\n+     * Create a period from a set of field values using the standard set of fields.\n      *\n      * @param hours  amount of hours in this period\n      * @param minutes  amount of minutes in this period\n      * @param millis  amount of milliseconds in this period\n      */\n     public Period(int hours, int minutes, int seconds, int millis) {\n-        super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.time());\n+        super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());\n     }\n \n     /**\n \n     /**\n      * Create a period from a set of field values.\n+     * <p>\n+     * There is usually little need to use this constructor.\n+     * The period type is used primarily to define how to split an interval into a period.\n+     * As this constructor already is split, the period type does no real work.\n      *\n      * @param years  amount of years in this period, which must be zero if unsupported\n      * @param months  amount of months in this period, which must be zero if unsupported\n      * <ul>\n      * <li>convert the duration to an {@link Interval}, and from there obtain the period\n      * <li>specify a period type that contains precise definitions of the day and larger\n-     * fields, such as the UTC or precise types.\n+     * fields, such as UTC\n      * </ul>\n      *\n      * @param duration  the duration, in milliseconds\n         super(period, type, chrono);\n     }\n \n+    /**\n+     * Constructor used when we trust ourselves.\n+     *\n+     * @param values  the values to use, not null, not cloned\n+     * @param type  which set of fields this period supports, not null\n+     */\n+    private Period(int[] values, PeriodType type) {\n+        super(values, type);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Get this period as an immutable <code>Period</code> object\n      * @return the number of years in the period, zero if unsupported\n      */\n     public int getYears() {\n-        return getPeriodType().getYears(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);\n     }\n \n     /**\n      * @return the number of months in the period, zero if unsupported\n      */\n     public int getMonths() {\n-        return getPeriodType().getMonths(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);\n     }\n \n     /**\n      * @return the number of weeks in the period, zero if unsupported\n      */\n     public int getWeeks() {\n-        return getPeriodType().getWeeks(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);\n     }\n \n     /**\n      * @return the number of days in the period, zero if unsupported\n      */\n     public int getDays() {\n-        return getPeriodType().getDays(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);\n     }\n \n     //-----------------------------------------------------------------------\n      * @return the number of hours in the period, zero if unsupported\n      */\n     public int getHours() {\n-        return getPeriodType().getHours(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);\n     }\n \n     /**\n      * @return the number of minutes in the period, zero if unsupported\n      */\n     public int getMinutes() {\n-        return getPeriodType().getMinutes(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);\n     }\n \n     /**\n      * @return the number of seconds in the period, zero if unsupported\n      */\n     public int getSeconds() {\n-        return getPeriodType().getSeconds(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);\n     }\n \n     /**\n      * @return the number of millis in the period, zero if unsupported\n      */\n     public int getMillis() {\n-        return getPeriodType().getMillis(this);\n+        return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);\n     }\n \n     //-----------------------------------------------------------------------\n         return new Period(this, type);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new period with the specified number of years.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param years  the amount of years to add, may be negative\n+     * @return the new period with the increased years\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withYears(int years) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of months.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param months  the amount of months to add, may be negative\n+     * @return the new period with the increased months\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withMonths(int months) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of weeks.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param weeks  the amount of weeks to add, may be negative\n+     * @return the new period with the increased weeks\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withWeeks(int weeks) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of days.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param days  the amount of days to add, may be negative\n+     * @return the new period with the increased days\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withDays(int days) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of hours.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param hours  the amount of hours to add, may be negative\n+     * @return the new period with the increased hours\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withHours(int hours) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of minutes.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param minutes  the amount of minutes to add, may be negative\n+     * @return the new period with the increased minutes\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withMinutes(int minutes) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of seconds.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param seconds  the amount of seconds to add, may be negative\n+     * @return the new period with the increased seconds\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withSeconds(int seconds) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period with the specified number of millis.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param millis  the amount of millis to add, may be negative\n+     * @return the new period with the increased millis\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period withMillis(int millis) {\n+        int[] values = getValues();  // cloned\n+        getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new period with the specified number of years added.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param years  the amount of years to add, may be negative\n+     * @return the new period with the increased years\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period plusYears(int years) {\n+        if (years == 0) {\n+            return this;\n+        }\n+        int[] values = getValues();  // cloned\n+        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, years);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period plus the specified number of months added.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param months  the amount of months to add, may be negative\n+     * @return the new period plus the increased months\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period plusMonths(int months) {\n+        if (months == 0) {\n+            return this;\n+        }\n+        int[] values = getValues();  // cloned\n+        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, months);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period plus the specified number of weeks added.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param weeks  the amount of weeks to add, may be negative\n+     * @return the new period plus the increased weeks\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period plusWeeks(int weeks) {\n+        if (weeks == 0) {\n+            return this;\n+        }\n+        int[] values = getValues();  // cloned\n+        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, weeks);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period plus the specified number of days added.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param days  the amount of days to add, may be negative\n+     * @return the new period plus the increased days\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period plusDays(int days) {\n+        if (days == 0) {\n+            return this;\n+        }\n+        int[] values = getValues();  // cloned\n+        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, days);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period plus the specified number of hours added.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param hours  the amount of hours to add, may be negative\n+     * @return the new period plus the increased hours\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period plusHours(int hours) {\n+        if (hours == 0) {\n+            return this;\n+        }\n+        int[] values = getValues();  // cloned\n+        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, hours);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period plus the specified number of minutes added.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param minutes  the amount of minutes to add, may be negative\n+     * @return the new period plus the increased minutes\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period plusMinutes(int minutes) {\n+        if (minutes == 0) {\n+            return this;\n+        }\n+        int[] values = getValues();  // cloned\n+        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period plus the specified number of seconds added.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param seconds  the amount of seconds to add, may be negative\n+     * @return the new period plus the increased seconds\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period plusSeconds(int seconds) {\n+        if (seconds == 0) {\n+            return this;\n+        }\n+        int[] values = getValues();  // cloned\n+        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, seconds);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new period plus the specified number of millis added.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param millis  the amount of millis to add, may be negative\n+     * @return the new period plus the increased millis\n+     * @throws UnsupportedOperationException if the field is not supported\n+     */\n+    public Period plusMillis(int millis) {\n+        if (millis == 0) {\n+            return this;\n+        }\n+        int[] values = getValues();  // cloned\n+        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\n+        return new Period(values, getPeriodType());\n+    }\n+\n }\n--- a/JodaTime/src/java/org/joda/time/PeriodType.java\n+++ b/JodaTime/src/java/org/joda/time/PeriodType.java\n import java.io.Serializable;\n import java.util.Arrays;\n \n+import org.joda.time.field.FieldUtils;\n+\n /**\n  * Controls a period implementation by specifying which duration fields are to be used.\n  * <p>\n     /** Serialization version */\n     private static final long serialVersionUID = 2274324892792009998L;\n \n+    static int YEAR_INDEX = 0;\n+    static int MONTH_INDEX = 1;\n+    static int WEEK_INDEX = 2;\n+    static int DAY_INDEX = 3;\n+    static int HOUR_INDEX = 4;\n+    static int MINUTE_INDEX = 5;\n+    static int SECOND_INDEX = 6;\n+    static int MILLI_INDEX = 7;\n+    \n     private static PeriodType cStandard;\n     private static PeriodType cYMDTime;\n     private static PeriodType cYWDTime;\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the years field part of the period.\n+     * Gets the indexed field part of the period.\n      * \n      * @param period  the period to query\n-     * @return the number of years in the period, zero if unsupported\n-     */\n-    public int getYears(ReadablePeriod period) {\n-        int index = iIndices[0];\n-        return (index == -1 ? 0 : period.getValue(index));\n-    }\n-\n-    /**\n-     * Gets the months field part of the period.\n+     * @param index  the index to use\n+     * @return the value of the field, zero if unsupported\n+     */\n+    int getIndexedField(ReadablePeriod period, int index) {\n+        int realIndex = iIndices[index];\n+        return (realIndex == -1 ? 0 : period.getValue(realIndex));\n+    }\n+\n+    /**\n+     * Sets the indexed field part of the period.\n      * \n      * @param period  the period to query\n-     * @return the number of months in the period, zero if unsupported\n-     */\n-    public int getMonths(ReadablePeriod period) {\n-        int index = iIndices[1];\n-        return (index == -1 ? 0 : period.getValue(index));\n-    }\n-\n-    /**\n-     * Gets the weeks field part of the period.\n+     * @param index  the index to use\n+     * @param values  the array to populate\n+     * @param newValue  the value to set\n+     * @throws UnsupportedOperationException if not supported\n+     */\n+    boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {\n+        int realIndex = iIndices[index];\n+        if (realIndex == -1) {\n+            throw new UnsupportedOperationException(\"Field is not supported\");\n+        }\n+        values[realIndex] = newValue;\n+        return true;\n+    }\n+\n+    /**\n+     * Adds to the indexed field part of the period.\n      * \n      * @param period  the period to query\n-     * @return the number of weeks in the period, zero if unsupported\n-     */\n-    public int getWeeks(ReadablePeriod period) {\n-        int index = iIndices[2];\n-        return (index == -1 ? 0 : period.getValue(index));\n-    }\n-\n-    /**\n-     * Gets the days field part of the period.\n-     * \n-     * @param period  the period to query\n-     * @return the number of days in the period, zero if unsupported\n-     */\n-    public int getDays(ReadablePeriod period) {\n-        int index = iIndices[3];\n-        return (index == -1 ? 0 : period.getValue(index));\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Gets the hours field part of the period.\n-     * \n-     * @param period  the period to query\n-     * @return the number of hours in the period, zero if unsupported\n-     */\n-    public int getHours(ReadablePeriod period) {\n-        int index = iIndices[4];\n-        return (index == -1 ? 0 : period.getValue(index));\n-    }\n-\n-    /**\n-     * Gets the minutes field part of the period.\n-     * \n-     * @param period  the period to query\n-     * @return the number of minutes in the period, zero if unsupported\n-     */\n-    public int getMinutes(ReadablePeriod period) {\n-        int index = iIndices[5];\n-        return (index == -1 ? 0 : period.getValue(index));\n-    }\n-\n-    /**\n-     * Gets the seconds field part of the period.\n-     * \n-     * @param period  the period to query\n-     * @return the number of seconds in the period, zero if unsupported\n-     */\n-    public int getSeconds(ReadablePeriod period) {\n-        int index = iIndices[6];\n-        return (index == -1 ? 0 : period.getValue(index));\n-    }\n-\n-    /**\n-     * Gets the millis field part of the period.\n-     * \n-     * @param period  the period to query\n-     * @return the number of millis in the period, zero if unsupported\n-     */\n-    public int getMillis(ReadablePeriod period) {\n-        int index = iIndices[7];\n-        return (index == -1 ? 0 : period.getValue(index));\n+     * @param index  the index to use\n+     * @param values  the array to populate\n+     * @param valueToAdd  the value to add\n+     * @throws UnsupportedOperationException if not supported\n+     */\n+    boolean addIndexedField(ReadablePeriod period, int index, int[] values, int valueToAdd) {\n+        int realIndex = iIndices[index];\n+        if (realIndex == -1) {\n+            throw new UnsupportedOperationException(\"Field is not supported\");\n+        }\n+        values[realIndex] = FieldUtils.safeAdd(values[realIndex], valueToAdd);\n+        return true;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/ReadablePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/ReadablePeriod.java\n  * Thus, the time period is always added field by field to the datetime.\n  * <p>\n  * Periods are independent of chronology, and can only be treated as durations\n- * when paired with a time.\n+ * when paired with a time via an interval.\n  *\n  * @see ReadableDuration\n  * @see ReadableInterval\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Adds this period to the given instant, returning a new value.\n-     * <p>\n-     * The addition uses the chronology specified, or ISOChronology\n-     * in the default zone if it is null.\n-     * To add just once, pass in a scalar of one. To subtract once, pass\n-     * in a scalar of minus one.\n-     *\n-     * @param instant  the millisecond instant to add the period to\n-     * @param scalar  the number of times to add the period, negative to subtract\n-     * @param chrono  the chronology to use, null means ISO in the default zone\n-     * @return milliseconds value plus this period times scalar\n-     * @throws ArithmeticException if the result of the calculation is too large\n-     */\n-    long addTo(long instant, int scalar, Chronology chrono);\n-\n-    /**\n-     * Adds this period to the given instant, returning a new DateTime.\n-     * <p>\n-     * To add just once, pass in a scalar of one. To subtract once, pass\n-     * in a scalar of minus one.\n-     *\n-     * @param instant  the instant to add the period to\n-     * @param scalar  the number of times to add the period, negative to subtract\n-     * @return datetime with the original value plus this period times scalar\n-     * @throws IllegalArgumentException if the instant is null\n-     * @throws ArithmeticException if the result of the calculation is too large\n-     */\n-    DateTime addTo(ReadableInstant instant, int scalar);\n-\n-    /**\n-     * Adds this period into the given mutable instant.\n-     * <p>\n-     * To add just once, pass in a scalar of one. To subtract once, pass\n-     * in a scalar of minus one.\n-     *\n-     * @param instant  the instant to update with the added period\n-     * @param scalar  the number of times to add the period, negative to subtract\n-     * @throws IllegalArgumentException if the instant is null\n-     * @throws ArithmeticException if the result of the calculation is too large\n-     */\n-    void addInto(ReadWritableInstant instant, int scalar);\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * Get this period as an immutable <code>Period</code> object.\n      * <p>\n      * This will either typecast this instance, or create a new <code>Period</code>.\n--- a/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java\n  */\n package org.joda.time.base;\n \n-import org.joda.time.Chronology;\n-import org.joda.time.DateTime;\n-import org.joda.time.DateTimeUtils;\n-import org.joda.time.Duration;\n import org.joda.time.DurationFieldType;\n import org.joda.time.MutablePeriod;\n import org.joda.time.Period;\n-import org.joda.time.ReadWritableInstant;\n-import org.joda.time.ReadableInstant;\n import org.joda.time.ReadablePeriod;\n-import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISOPeriodFormat;\n \n /**\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Adds this period to the given instant, returning a new value.\n-     * <p>\n-     * The addition uses ISOChronology in the default zone.\n-     * To add just once, pass in a scalar of one. To subtract once, pass\n-     * in a scalar of minus one.\n-     *\n-     * @param instant  the millisecond instant to add the period to\n-     * @param scalar  the number of times to add the period, negative to subtract\n-     * @return milliseconds value plus this period times scalar\n-     * @throws ArithmeticException if the result of the calculation is too large\n-     */\n-    public long addTo(long instant, int scalar) {\n-        return addTo(instant, scalar, null);\n-    }\n-\n-    /**\n-     * Adds this period to the given instant, returning a new value.\n-     * <p>\n-     * The addition uses the chronology specified, or ISOChronology\n-     * in the default zone if it is null.\n-     * To add just once, pass in a scalar of one. To subtract once, pass\n-     * in a scalar of minus one.\n-     *\n-     * @param instant  the millisecond instant to add the period to\n-     * @param scalar  the number of times to add the period, negative to subtract\n-     * @param chrono  the chronology to use, null means ISO in the default zone\n-     * @return milliseconds value plus this period times scalar\n-     * @throws ArithmeticException if the result of the calculation is too large\n-     */\n-    public long addTo(long instant, int scalar, Chronology chrono) {\n-        if (scalar != 0) {\n-            chrono = DateTimeUtils.getChronology(chrono);\n-            for (int i = 0, isize = size(); i < isize; i++) {\n-                long value = getValue(i); // use long to allow for multiplication (fits OK)\n-                if (value != 0) {\n-                    instant = getFieldType(i).getField(chrono).add(instant, value * scalar);\n-                }\n-            }\n-        }\n-        return instant;\n-    }\n-\n-    /**\n-     * Adds this period to the given instant using the chronology of the specified\n-     * instant (if present), returning a new DateTime.\n-     * <p>\n-     * To add just once, pass in a scalar of one. To subtract once, pass\n-     * in a scalar of minus one.\n-     *\n-     * @param instant  the instant to add the period to, null means now\n-     * @param scalar  the number of times to add the period, negative to subtract\n-     * @return datetime with the original value plus this period times scalar\n-     * @throws ArithmeticException if the result of the calculation is too large\n-     */\n-    public DateTime addTo(ReadableInstant instant, int scalar) {\n-        long instantMillis = DateTimeUtils.getInstantMillis(instant);\n-        Chronology chrono = DateTimeUtils.getInstantChronology(instant, null);\n-        return new DateTime(addTo(instantMillis, scalar, chrono), chrono);\n-    }\n-\n-    /**\n-     * Adds this period into the given mutable instant using the chronology of\n-     * the specified mutable instant (if present).\n-     * <p>\n-     * To add just once, pass in a scalar of one. To subtract once, pass\n-     * in a scalar of minus one.\n-     *\n-     * @param instant  the instant to update with the added period, must not be null\n-     * @param scalar  the number of times to add the period, negative to subtract\n-     * @throws IllegalArgumentException if the instant is null\n-     * @throws ArithmeticException if the result of the calculation is too large\n-     */\n-    public void addInto(ReadWritableInstant instant, int scalar) {\n-        if (instant == null) {\n-            throw new IllegalArgumentException(\"The instant must not be null\");\n-        }\n-        instant.setMillis(addTo(instant.getMillis(), scalar, instant.getChronology()));\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * Get this period as an immutable <code>Period</code> object.\n      * \n      * @return a Period using the same field set and values\n      */\n     public MutablePeriod toMutablePeriod() {\n         return new MutablePeriod(this);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Gets the total millisecond duration of this period relative to a start\n-     * instant and chronology.\n-     * <p>\n-     * This method adds the period to the specifed instant.\n-     * The difference between the start instant and the result of the add is the duration\n-     *\n-     * @param startInstant  the instant to add the period to, thus obtaining the duration\n-     * @param chrono  the chronology to use\n-     * @return the total length of the period in milliseconds relative to the start instant\n-     * @throws ArithmeticException if the millis exceeds the capacity of the duration\n-     */\n-    public long toDurationMillisFrom(long startInstant, Chronology chrono) {\n-        long endInstant = addTo(startInstant, 1, chrono);\n-        return FieldUtils.safeAdd(endInstant, -startInstant);\n-    }\n-\n-    /**\n-     * Gets the total millisecond duration of this period relative to a start\n-     * instant and chronology.\n-     * <p>\n-     * This method adds the period to the specifed instant.\n-     * The difference between the start instant and the result of the add is the duration\n-     *\n-     * @param startInstant  the instant to add the period to, thus obtaining the duration\n-     * @return the total length of the period in milliseconds relative to the start instant\n-     * @throws ArithmeticException if the millis exceeds the capacity of the duration\n-     */\n-    public Duration toDurationFrom(ReadableInstant startInstant) {\n-        long millis = DateTimeUtils.getInstantMillis(startInstant);\n-        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);\n-        return new Duration(toDurationMillisFrom(millis, chrono));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/base/BaseInterval.java\n+++ b/JodaTime/src/java/org/joda/time/base/BaseInterval.java\n         if (period == null) {\n             iEndMillis = iStartMillis;\n         } else {\n-            Chronology chrono = DateTimeUtils.getInstantChronology(start, null);\n-            iEndMillis = period.addTo(iStartMillis, 1, chrono);\n+            Chronology chrono = DateTimeUtils.getInstantChronology(start);\n+            iEndMillis = chrono.add(iStartMillis, period, 1);\n         }\n         checkInterval(iStartMillis, iEndMillis);\n     }\n         if (period == null) {\n             iStartMillis = iEndMillis;\n         } else {\n-            Chronology chrono = DateTimeUtils.getInstantChronology(end, null);\n-            iStartMillis = period.addTo(iEndMillis, -1, chrono);\n+            Chronology chrono = DateTimeUtils.getInstantChronology(end);\n+            iStartMillis = chrono.add(iEndMillis, period, -1);\n         }\n         checkInterval(iStartMillis, iEndMillis);\n     }\n--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeUtils;\n+import org.joda.time.Duration;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.MutablePeriod;\n     private int[] iValues;\n \n     //-----------------------------------------------------------------------\n-    /**\n-     * Creates a period from the given millisecond duration.\n-     * <p>\n-     * The millisecond duration will be split to fields using a UTC version of\n-     * the period type.\n-     *\n-     * @param duration  the duration, in milliseconds\n-     * @param type  which set of fields this period supports, null means standard\n-     * @param chrono  the chronology to use, null means ISO default\n-     * @throws IllegalArgumentException if period type is invalid\n-     */\n-    protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\n-        super();\n-        type = checkPeriodType(type);\n-        iType = type;\n-        setPeriodInternal(duration, chrono); // internal method\n-    }\n-\n     /**\n      * Creates a period from a set of field values.\n      *\n     }\n \n     /**\n+     * Creates a period from the given millisecond duration, which is only really\n+     * suitable for durations less than one day.\n+     * <p>\n+     * Only fields that are precise will be used.\n+     * Thus the largest precise field may have a large value.\n+     *\n+     * @param duration  the duration, in milliseconds\n+     * @param type  which set of fields this period supports, null means standard\n+     * @param chrono  the chronology to use, null means ISO default\n+     * @throws IllegalArgumentException if period type is invalid\n+     */\n+    protected BasePeriod(long duration, PeriodType type, Chronology chrono) {\n+        super();\n+        type = checkPeriodType(type);\n+        iType = type;\n+        setPeriodInternal(duration, chrono); // internal method\n+    }\n+\n+    /**\n      * Creates a new period based on another using the {@link ConverterManager}.\n      *\n      * @param period  the period to convert\n         }\n     }\n \n+    /**\n+     * Constructor used when we trust ourselves.\n+     * Do not expose publically.\n+     *\n+     * @param values  the values to use, not null, not cloned\n+     * @param type  which set of fields this period supports, not null\n+     */\n+    protected BasePeriod(int[] values, PeriodType type) {\n+        super();\n+        iType = type;\n+        iValues = values;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Validates a period type, converting nulls to a default value and\n      */\n     public int getValue(int index) {\n         return iValues[index];\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the total millisecond duration of this period relative to a start instant.\n+     * <p>\n+     * This method adds the period to the specifed instant.\n+     * The difference between the start instant and the result of the add is the duration\n+     *\n+     * @param startInstant  the instant to add the period to, thus obtaining the duration\n+     * @return the total length of the period as a duration relative to the start instant\n+     * @throws ArithmeticException if the millis exceeds the capacity of the duration\n+     */\n+    public Duration toDurationFrom(ReadableInstant startInstant) {\n+        long startMillis = DateTimeUtils.getInstantMillis(startInstant);\n+        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);\n+        long endMillis = chrono.add(startMillis, this, 1);\n+        return new Duration(startMillis, endMillis);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.ReadablePartial;\n+import org.joda.time.ReadablePeriod;\n import org.joda.time.field.UnsupportedDateTimeField;\n import org.joda.time.field.UnsupportedDurationField;\n \n         return millisOfSecond().set(instant, millisOfSecond);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Validates whether the fields stored in a partial instant are valid.\n      * <p>\n         }\n     }\n \n+    /**\n+     * Adds the period to the instant, specifying the number of times to add.\n+     *\n+     * @param instant  the instant to add to\n+     * @param period  the period to add, null means add nothing\n+     * @param scalar  the number of times to add\n+     * @return the updated instant\n+     */\n+    public long add(long instant, ReadablePeriod period, int scalar) {\n+        if (scalar != 0 && period != null) {\n+            for (int i = 0, isize = period.size(); i < isize; i++) {\n+                long value = period.getValue(i); // use long to allow for multiplication (fits OK)\n+                if (value != 0) {\n+                    instant = period.getFieldType(i).getField(this).add(instant, value * scalar);\n+                }\n+            }\n+        }\n+        return instant;\n+    }\n+\n     // Millis\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n                 throw new IllegalArgumentException(\"Interval composed of two durations: \" + str);\n             }\n             period = periodParser.parsePeriod(getPeriodType(rightStr), rightStr);\n-            endInstant = period.addTo(startInstant, 1);\n+            endInstant = ISOChronology.getInstance().add(startInstant, period, 1); // TODO\n         } else {\n             endInstant = dateTimeParser.parseMillis(rightStr);\n             if (period != null) {\n-                startInstant = period.addTo(endInstant, -1);\n+                startInstant = ISOChronology.getInstance().add(endInstant, period, -1); // TODO\n             }\n         }\n         \n--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n import java.security.Policy;\n import java.security.ProtectionDomain;\n \n-import org.joda.time.chrono.BuddhistChronology;\n-import org.joda.time.chrono.CopticChronology;\n-import org.joda.time.chrono.ISOChronology;\n-\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for Instant.\n         assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(null));\n     }\n \n-    public void testGetInstantChronology_RI_long() {\n-        DateTime dt = new DateTime(123L, BuddhistChronology.getInstance());\n-        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt, CopticChronology.getInstance()));\n-        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt, null));\n-        \n-        Instant i = new Instant(123L);\n-        assertEquals(CopticChronology.getInstance(), DateTimeUtils.getInstantChronology(i, CopticChronology.getInstance()));\n-        assertEquals(null, DateTimeUtils.getInstantChronology(i, null));\n-        \n-        assertEquals(CopticChronology.getInstance(), DateTimeUtils.getInstantChronology(null, CopticChronology.getInstance()));\n-        assertEquals(null, DateTimeUtils.getInstantChronology(null, null));\n-    }\n-\n     //-----------------------------------------------------------------------\n     public void testGetChronology_Chronology() {\n         assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getChronology(BuddhistChronology.getInstance()));\n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java\n import junit.framework.TestSuite;\n \n import org.joda.time.base.BasePeriod;\n-import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for MutableDuration.\n         assertEquals(test, result);\n     }\n \n-    //-----------------------------------------------------------------------\n-    public void testAddTo1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, 1);\n-        expected = ISOChronology.getInstance().months().add(expected, 2);\n-        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstance().days().add(expected, 4);\n-        expected = ISOChronology.getInstance().hours().add(expected, 5);\n-        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstance().millis().add(expected, 8);\n-        \n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, 1);\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddTo2() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, -2);\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddTo3() {\n-        long expected = TEST_TIME_NOW;\n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, 0);\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddTo4() {\n-        long expected = TEST_TIME_NOW + 100L;\n-        MutablePeriod test = new MutablePeriod(100L);\n-        long added = test.addTo(TEST_TIME_NOW, 1);\n-        assertEquals(expected, added);\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testAddToWithChronology1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, 1);\n-        expected = ISOChronology.getInstance().months().add(expected, 2);\n-        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstance().days().add(expected, 4);\n-        expected = ISOChronology.getInstance().hours().add(expected, 5);\n-        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstance().millis().add(expected, 8);\n-        \n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddToWithChronology2() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n-        \n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstanceUTC());  // chrono specified so use it\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddToWithChronology3() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono so use default\n-        assertEquals(expected, added);\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testAddToRI1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, 1);\n-        expected = ISOChronology.getInstance().months().add(expected, 2);\n-        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstance().days().add(expected, 4);\n-        expected = ISOChronology.getInstance().hours().add(expected, 5);\n-        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstance().millis().add(expected, 8);\n-        \n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, use default\n-        assertEquals(expected, added.getMillis());\n-        assertEquals(ISOChronology.getInstance(), added.getChronology());\n-    }\n-    \n-    public void testAddToRI2() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, use default\n-        assertEquals(expected, added.getMillis());\n-        assertEquals(ISOChronology.getInstance(), added.getChronology());\n-    }\n-    \n-    public void testAddToRI3() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n-        \n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        DateTime added = test.addTo(new DateTime(ISOChronology.getInstanceUTC()), -2);  // DateTime has UTC time zone\n-        assertEquals(expected, added.getMillis());\n-        assertEquals(ISOChronology.getInstanceUTC(), added.getChronology());\n-    }\n-    \n-    public void testAddToRI4() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance(PARIS).years().add(expected, -2);\n-        expected = ISOChronology.getInstance(PARIS).months().add(expected, -4);\n-        expected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance(PARIS).days().add(expected, -8);\n-        expected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);\n-        expected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);\n-        \n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        DateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone\n-        assertEquals(expected, added.getMillis());\n-        assertEquals(ISOChronology.getInstance(PARIS), added.getChronology());\n-    }\n-    \n-    public void testAddToRI5() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        DateTime added = test.addTo(null, -2);  // null has no time zone, use default\n-        assertEquals(expected, added.getMillis());\n-        assertEquals(ISOChronology.getInstance(), added.getChronology());\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testAddIntoRWI1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, 1);\n-        expected = ISOChronology.getInstance().months().add(expected, 2);\n-        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstance().days().add(expected, 4);\n-        expected = ISOChronology.getInstance().hours().add(expected, 5);\n-        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstance().millis().add(expected, 8);\n-        \n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        MutableDateTime mdt = new MutableDateTime();\n-        test.addInto(mdt, 1);\n-        assertEquals(expected, mdt.getMillis());\n-    }\n-    \n-    public void testAddIntoRWI2() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        MutableDateTime mdt = new MutableDateTime();\n-        test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it\n-        assertEquals(expected, mdt.getMillis());\n-    }\n-    \n-    public void testAddIntoRWI3() {\n-        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        try {\n-            test.addInto(null, 1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n+//    //-----------------------------------------------------------------------\n+//    public void testAddTo1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, 1);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddTo2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, -2);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddTo3() {\n+//        long expected = TEST_TIME_NOW;\n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, 0);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddTo4() {\n+//        long expected = TEST_TIME_NOW + 100L;\n+//        MutablePeriod test = new MutablePeriod(100L);\n+//        long added = test.addTo(TEST_TIME_NOW, 1);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    //-----------------------------------------------------------------------\n+//    public void testAddToWithChronology1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddToWithChronology2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+//        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+//        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+//        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstanceUTC());  // chrono specified so use it\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddToWithChronology3() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono so use default\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    //-----------------------------------------------------------------------\n+//    public void testAddToRI1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, use default\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, use default\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI3() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+//        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+//        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+//        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(new DateTime(ISOChronology.getInstanceUTC()), -2);  // DateTime has UTC time zone\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstanceUTC(), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI4() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance(PARIS).years().add(expected, -2);\n+//        expected = ISOChronology.getInstance(PARIS).months().add(expected, -4);\n+//        expected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance(PARIS).days().add(expected, -8);\n+//        expected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(PARIS), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI5() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(null, -2);  // null has no time zone, use default\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(), added.getChronology());\n+//    }\n+//    \n+//    //-----------------------------------------------------------------------\n+//    public void testAddIntoRWI1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        MutableDateTime mdt = new MutableDateTime();\n+//        test.addInto(mdt, 1);\n+//        assertEquals(expected, mdt.getMillis());\n+//    }\n+//    \n+//    public void testAddIntoRWI2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        MutableDateTime mdt = new MutableDateTime();\n+//        test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it\n+//        assertEquals(expected, mdt.getMillis());\n+//    }\n+//    \n+//    public void testAddIntoRWI3() {\n+//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+//        try {\n+//            test.addInto(null, 1);\n+//            fail();\n+//        } catch (IllegalArgumentException ex) {}\n+//    }\n     \n     //-----------------------------------------------------------------------\n     public void testToString() {\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testToDurationMillisFrom() {\n-        MutablePeriod test = new MutablePeriod(123L);\n-        assertEquals(123L, test.toDurationMillisFrom(0L, null));\n-    }\n+//    public void testToDurationMillisFrom() {\n+//        MutablePeriod test = new MutablePeriod(123L);\n+//        assertEquals(123L, test.toDurationMillisFrom(0L, null));\n+//    }\n \n     public void testToDurationFrom() {\n         MutablePeriod test = new MutablePeriod(123L);\n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java\n      */\n     public void testConstructor_4int1() throws Throwable {\n         MutablePeriod test = new MutablePeriod(5, 6, 7, 8);\n-        assertEquals(PeriodType.time(), test.getPeriodType());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n import junit.framework.TestSuite;\n \n import org.joda.time.base.BasePeriod;\n-import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for Duration.\n         assertEquals(test, result);\n     }\n \n-    //-----------------------------------------------------------------------\n-    public void testAddTo1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, 1);\n-        expected = ISOChronology.getInstance().months().add(expected, 2);\n-        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstance().days().add(expected, 4);\n-        expected = ISOChronology.getInstance().hours().add(expected, 5);\n-        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstance().millis().add(expected, 8);\n-        \n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, 1);\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddTo2() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, -2);\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddTo3() {\n-        long expected = TEST_TIME_NOW;\n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, 0);\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddTo4() {\n-        long expected = TEST_TIME_NOW + 100L;\n-        Period test = new Period(100L);\n-        long added = test.addTo(TEST_TIME_NOW, 1);\n-        assertEquals(expected, added);\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testAddToWithChronology1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, 1);\n-        expected = ISOChronology.getInstance().months().add(expected, 2);\n-        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstance().days().add(expected, 4);\n-        expected = ISOChronology.getInstance().hours().add(expected, 5);\n-        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstance().millis().add(expected, 8);\n-        \n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddToWithChronology2() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n-        \n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstanceUTC());  // local specified so use it\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddToWithChronology3() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so use default\n-        assertEquals(expected, added);\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testAddToRI1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, 1);\n-        expected = ISOChronology.getInstance().months().add(expected, 2);\n-        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstance().days().add(expected, 4);\n-        expected = ISOChronology.getInstance().hours().add(expected, 5);\n-        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstance().millis().add(expected, 8);\n-        \n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n-        DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, use default\n-        assertEquals(expected, added.getMillis());\n-        assertEquals(ISOChronology.getInstance(), added.getChronology());\n-    }\n-    \n-    public void testAddToRI2() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, use default\n-        assertEquals(expected, added.getMillis());\n-        assertEquals(ISOChronology.getInstance(), added.getChronology());\n-    }\n-    \n-    public void testAddToRI3() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n-        \n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        DateTime added = test.addTo(new DateTime(ISOChronology.getInstanceUTC()), -2);  // DateTime has UTC time zone\n-        assertEquals(expected, added.getMillis());\n-        assertEquals(ISOChronology.getInstanceUTC(), added.getChronology());\n-    }\n-    \n-    public void testAddToRI4() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance(PARIS).years().add(expected, -2);\n-        expected = ISOChronology.getInstance(PARIS).months().add(expected, -4);\n-        expected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance(PARIS).days().add(expected, -8);\n-        expected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);\n-        expected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);\n-        \n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        DateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone\n-        assertEquals(expected, added.getMillis());\n-        assertEquals(ISOChronology.getInstance(PARIS), added.getChronology());\n-    }\n-    \n-    public void testAddToRI5() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        DateTime added = test.addTo(null, -2);  // null has no time zone, use default\n-        assertEquals(expected, added.getMillis());\n-        assertEquals(ISOChronology.getInstance(), added.getChronology());\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testAddIntoRWI1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, 1);\n-        expected = ISOChronology.getInstance().months().add(expected, 2);\n-        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstance().days().add(expected, 4);\n-        expected = ISOChronology.getInstance().hours().add(expected, 5);\n-        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstance().millis().add(expected, 8);\n-        \n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n-        MutableDateTime mdt = new MutableDateTime();\n-        test.addInto(mdt, 1);\n-        assertEquals(expected, mdt.getMillis());\n-    }\n-    \n-    public void testAddIntoRWI2() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n-        MutableDateTime mdt = new MutableDateTime();\n-        test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it\n-        assertEquals(expected, mdt.getMillis());\n-    }\n-    \n-    public void testAddIntoRWI3() {\n-        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n-        try {\n-            test.addInto(null, 1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n+//    //-----------------------------------------------------------------------\n+//    public void testAddTo1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, 1);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddTo2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, -2);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddTo3() {\n+//        long expected = TEST_TIME_NOW;\n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, 0);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddTo4() {\n+//        long expected = TEST_TIME_NOW + 100L;\n+//        Period test = new Period(100L);\n+//        long added = test.addTo(TEST_TIME_NOW, 1);\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    //-----------------------------------------------------------------------\n+//    public void testAddToWithChronology1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        long added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddToWithChronology2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+//        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+//        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+//        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstanceUTC());  // local specified so use it\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    public void testAddToWithChronology3() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so use default\n+//        assertEquals(expected, added);\n+//    }\n+//    \n+//    //-----------------------------------------------------------------------\n+//    public void testAddToRI1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, use default\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, use default\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI3() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+//        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+//        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+//        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(new DateTime(ISOChronology.getInstanceUTC()), -2);  // DateTime has UTC time zone\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstanceUTC(), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI4() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance(PARIS).years().add(expected, -2);\n+//        expected = ISOChronology.getInstance(PARIS).months().add(expected, -4);\n+//        expected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance(PARIS).days().add(expected, -8);\n+//        expected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(PARIS), added.getChronology());\n+//    }\n+//    \n+//    public void testAddToRI5() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        DateTime added = test.addTo(null, -2);  // null has no time zone, use default\n+//        assertEquals(expected, added.getMillis());\n+//        assertEquals(ISOChronology.getInstance(), added.getChronology());\n+//    }\n+//    \n+//    //-----------------------------------------------------------------------\n+//    public void testAddIntoRWI1() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, 1);\n+//        expected = ISOChronology.getInstance().months().add(expected, 2);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+//        expected = ISOChronology.getInstance().days().add(expected, 4);\n+//        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+//        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        MutableDateTime mdt = new MutableDateTime();\n+//        test.addInto(mdt, 1);\n+//        assertEquals(expected, mdt.getMillis());\n+//    }\n+//    \n+//    public void testAddIntoRWI2() {\n+//        long expected = TEST_TIME_NOW;\n+//        expected = ISOChronology.getInstance().years().add(expected, -2);\n+//        expected = ISOChronology.getInstance().months().add(expected, -4);\n+//        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+//        expected = ISOChronology.getInstance().days().add(expected, -8);\n+//        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+//        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+//        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+//        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+//        \n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.standard());\n+//        MutableDateTime mdt = new MutableDateTime();\n+//        test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it\n+//        assertEquals(expected, mdt.getMillis());\n+//    }\n+//    \n+//    public void testAddIntoRWI3() {\n+//        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+//        try {\n+//            test.addInto(null, 1);\n+//            fail();\n+//        } catch (IllegalArgumentException ex) {}\n+//    }\n     \n     //-----------------------------------------------------------------------\n     public void testToString() {\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testToDurationMillisFrom() {\n-        Period test = new Period(123L);\n-        assertEquals(123L, test.toDurationMillisFrom(0L, null));\n-    }\n+//    public void testToDurationMillisFrom() {\n+//        Period test = new Period(123L);\n+//        assertEquals(123L, test.toDurationMillisFrom(0L, null));\n+//    }\n \n     public void testToDuration() {\n         Period test = new Period(123L);\n         assertEquals(8, result.getMillis());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testPeriodStatics() {\n+        Period test;\n+        test = Period.years(1);\n+        assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.months(1);\n+        assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.weeks(1);\n+        assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.days(1);\n+        assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.hours(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard()));\n+        test = Period.minutes(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard()));\n+        test = Period.seconds(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard()));\n+        test = Period.millis(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWith() {\n+        Period test;\n+        test = Period.years(5).withYears(1);\n+        assertEquals(test, new Period(1, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.months(5).withMonths(1);\n+        assertEquals(test, new Period(0, 1, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.weeks(5).withWeeks(1);\n+        assertEquals(test, new Period(0, 0, 1, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.days(5).withDays(1);\n+        assertEquals(test, new Period(0, 0, 0, 1, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.hours(5).withHours(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 1, 0, 0, 0, PeriodType.standard()));\n+        test = Period.minutes(5).withMinutes(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 1, 0, 0, PeriodType.standard()));\n+        test = Period.seconds(5).withSeconds(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 1, 0, PeriodType.standard()));\n+        test = Period.millis(5).withMillis(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.standard()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus() {\n+        Period test;\n+        test = Period.years(1).plusYears(1);\n+        assertEquals(test, new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.months(1).plusMonths(1);\n+        assertEquals(test, new Period(0, 2, 0, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.weeks(1).plusWeeks(1);\n+        assertEquals(test, new Period(0, 0, 2, 0, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.days(1).plusDays(1);\n+        assertEquals(test, new Period(0, 0, 0, 2, 0, 0, 0, 0, PeriodType.standard()));\n+        test = Period.hours(1).plusHours(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 2, 0, 0, 0, PeriodType.standard()));\n+        test = Period.minutes(1).plusMinutes(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 2, 0, 0, PeriodType.standard()));\n+        test = Period.seconds(1).plusSeconds(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 2, 0, PeriodType.standard()));\n+        test = Period.millis(1).plusMillis(1);\n+        assertEquals(test, new Period(0, 0, 0, 0, 0, 0, 0, 2, PeriodType.standard()));\n+    }\n+\n+    public void testPlusZero() {\n+        Period test, result;\n+        test = Period.years(1);\n+        result = test.plusYears(0);\n+        assertSame(test, result);\n+        test = Period.months(1);\n+        result = test.plusMonths(0);\n+        assertSame(test, result);\n+        test = Period.weeks(1);\n+        result = test.plusWeeks(0);\n+        assertSame(test, result);\n+        test = Period.days(1);\n+        result = test.plusDays(0);\n+        assertSame(test, result);\n+        test = Period.hours(1);\n+        result = test.plusHours(0);\n+        assertSame(test, result);\n+        test = Period.minutes(1);\n+        result = test.plusMinutes(0);\n+        assertSame(test, result);\n+        test = Period.seconds(1);\n+        result = test.plusSeconds(0);\n+        assertSame(test, result);\n+        test = Period.millis(1);\n+        result = test.plusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testConstructor1() throws Throwable {\n+        Period test = new Period();\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testConstructor_long1() throws Throwable {\n         long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n      */\n     public void testConstructor_4int1() throws Throwable {\n         Period test = new Period(5, 6, 7, 8);\n-        assertEquals(PeriodType.time(), test.getPeriodType());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());", "timestamp": 1094395612, "metainfo": ""}