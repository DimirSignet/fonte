{"sha": "44f74aea29b99f926ce91cbaea6b2b7124d3f0ac", "log": "Add methods to obtain values from objects handling null   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n  */\n package org.joda.time;\n \n+import org.joda.time.chrono.ISOChronology;\n+\n /**\n  * DateTimeUtils provide public utility methods for the datetime library.\n  * <p>\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets the millisecond instant from the specified instant object handling null.\n+     * <p>\n+     * If the instant object is <code>null</code>, the {@link #currentTimeMillis()}\n+     * will be returned. Otherwise, the millis from the object are returned.\n+     * \n+     * @param instant  the instant to examine, null means now\n+     * @return the time in milliseconds from 1970-01-01T00:00:00Z\n+     */\n+    public static final long getInstantMillis(ReadableInstant instant) {\n+        if (instant == null) {\n+            return DateTimeUtils.currentTimeMillis();\n+        }\n+        return instant.getMillis();\n+    }\n+\n+    /**\n+     * Gets the millisecond instant from the specified instant object handling null.\n+     * <p>\n+     * If the instant object is <code>null</code>, the <code>nullMillis</code>\n+     * will be returned. Otherwise, the millis from the object are returned.\n+     * \n+     * @param instant  the instant to examine, null means use nullMillis\n+     * @param nullMillis  the millis to return if null\n+     * @return the time in milliseconds from 1970-01-01T00:00:00Z\n+     */\n+    public static final long getInstantMillis(ReadableInstant instant, long nullMillis) {\n+        if (instant == null) {\n+            return nullMillis;\n+        }\n+        return instant.getMillis();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the chronology from the specified instant object handling null.\n+     * <p>\n+     * If the instant object is <code>null</code>, {@link ISOChronology#getInstance()}\n+     * will be returned. Otherwise, the chronology from the object is returned.\n+     * \n+     * @param instant  the instant to examine, null means ISO in the default zone\n+     * @return the chronology\n+     */\n+    public static final Chronology getInstantChronology(ReadableInstant instant) {\n+        if (instant == null) {\n+            return ISOChronology.getInstance();\n+        }\n+        return instant.getChronology();\n+    }\n+\n+    /**\n+     * Gets the chronology from the specified instant object handling null.\n+     * <p>\n+     * If the instant object is <code>null</code>, <code>nullChrono</code>\n+     * will be returned. Otherwise, the chronology from the object is returned.\n+     * \n+     * @param instant  the instant to examine, null means use <code>nullChrono</code>\n+     * @param nullChrono  the chronology to return if null\n+     * @return the chronology\n+     */\n+    public static final Chronology getInstantChronology(ReadableInstant instant, Chronology nullChrono) {\n+        if (instant == null) {\n+            return nullChrono;\n+        }\n+        return instant.getChronology();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the millisecond duration from the specified duration object handling null.\n+     * <p>\n+     * If the duration object is <code>null</code>, zero will be returned.\n+     * Otherwise, the millis from the object are returned.\n+     * \n+     * @param duration  the duration to examine, null means zero\n+     * @return the duration in milliseconds\n+     */\n+    public static final long getDurationMillis(ReadableDuration duration) {\n+        if (duration == null) {\n+            return 0L;\n+        }\n+        return duration.getMillis();\n+    }\n+\n+    /**\n+     * Gets the millisecond duration from the specified duration object handling null.\n+     * <p>\n+     * If the duration object is <code>null</code>, <code>nullDuration</code> will be returned.\n+     * Otherwise, the millis from the object are returned.\n+     * \n+     * @param duration  the duration to examine, null means use <code>nullDuration</code>\n+     * @return the duration in milliseconds\n+     */\n+    public static final long getDurationMillis(ReadableDuration duration, long nullDuration) {\n+        if (duration == null) {\n+            return nullDuration;\n+        }\n+        return duration.getMillis();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Base class defining a millisecond provider.\n      */\n     static abstract class MillisProvider {", "timestamp": 1092503541, "metainfo": ""}