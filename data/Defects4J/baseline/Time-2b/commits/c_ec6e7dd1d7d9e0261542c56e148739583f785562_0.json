{"sha": "ec6e7dd1d7d9e0261542c56e148739583f785562", "log": "Add new constructors and validate   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/partial/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/partial/TimeOfDay.java\n     }\n \n     /**\n+     * Constructs a TimeOfDay with specified hour and minute and zero seconds and milliseconds\n+     * using <code>ISOChronology</code> in the default zone.\n+     * <p>\n+     * The constructor uses the no time zone initialising the fields as provided.\n+     * Once the constructor is complete, all further calculations\n+     * are performed without reference to a timezone (by switching to UTC).\n+     *\n+     * @param hourOfDay  the hour of the day\n+     * @param minuteOfHour  the minute of the hour\n+     */\n+    public TimeOfDay(int hourOfDay, int minuteOfHour) {\n+        this(hourOfDay, minuteOfHour, 0, 0, null);\n+    }\n+\n+    /**\n+     * Constructs a TimeOfDay with specified hour and minute and zero seconds and milliseconds.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param hourOfDay  the hour of the day\n+     * @param minuteOfHour  the minute of the hour\n+     * @param chronology  the chronology, null means ISOChronology in the default zone\n+     */\n+    public TimeOfDay(int hourOfDay, int minuteOfHour, Chronology chronology) {\n+        this(hourOfDay, minuteOfHour, 0, 0, chronology);\n+    }\n+\n+    /**\n+     * Constructs a TimeOfDay with specified time field values and zero milliseconds\n+     * using <code>ISOChronology</code> in the default zone.\n+     * <p>\n+     * The constructor uses the no time zone initialising the fields as provided.\n+     * Once the constructor is complete, all further calculations\n+     * are performed without reference to a timezone (by switching to UTC).\n+     *\n+     * @param hourOfDay  the hour of the day\n+     * @param minuteOfHour  the minute of the hour\n+     * @param secondOfMinute  the second of the minute\n+     */\n+    public TimeOfDay(int hourOfDay, int minuteOfHour, int secondOfMinute) {\n+        this(hourOfDay, minuteOfHour, secondOfMinute, 0, null);\n+    }\n+\n+    /**\n+     * Constructs a TimeOfDay with specified time field values and zero milliseconds.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param hourOfDay  the hour of the day\n+     * @param minuteOfHour  the minute of the hour\n+     * @param secondOfMinute  the second of the minute\n+     * @param chronology  the chronology, null means ISOChronology in the default zone\n+     */\n+    public TimeOfDay(int hourOfDay, int minuteOfHour, int secondOfMinute, Chronology chronology) {\n+        this(hourOfDay, minuteOfHour, secondOfMinute, 0, chronology);\n+    }\n+\n+    /**\n      * Constructs a TimeOfDay with specified time field values using\n      * <code>ISOChronology</code> in the default zone.\n      * <p>\n         if (chronology == null) {\n             chronology = ISOChronology.getInstance();\n         }\n-        // TODO: Validate\n         iValues = new int[] {hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond};\n         iChronology = chronology.withUTC();\n+        chronology.validate(this);\n     }\n \n     /**\n--- a/JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java\n+++ b/JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java\n  */\n package org.joda.test.time.partial;\n \n+import java.util.Date;\n import java.util.Locale;\n \n import junit.framework.TestCase;\n      * Test constructor (Object)\n      */\n     public void testConstructor_Object() throws Throwable {\n-        // TODO\n+        Date date = new Date(TEST_TIME);\n+        TimeOfDay test = new TimeOfDay(date);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n     }\n \n     /**\n      * Test constructor (Object, Chronology)\n      */\n     public void testConstructor_ObjectChronology() throws Throwable {\n-        // TODO\n+        Date date = new Date(TEST_TIME);\n+        TimeOfDay test = new TimeOfDay(date, JulianChronology.getInstance());\n+        assertEquals(JulianChronology.getInstance(), test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test constructor (int, int)\n+     */\n+    public void testConstructor_intint() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(10, 20);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        try {\n+            new TimeOfDay(-1, 20);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(24, 20);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology)\n+     */\n+    public void testConstructor_intintChronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(10, 20, JulianChronology.getInstance());\n+        assertEquals(JulianChronology.getInstance(), test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        try {\n+            new TimeOfDay(-1, 20, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(24, 20, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, -1, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 60, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int)\n+     */\n+    public void testConstructor_intintint() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        try {\n+            new TimeOfDay(-1, 20, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(24, 20, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, -1, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 60, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology)\n+     */\n+    public void testConstructor_intintintChronology() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, JulianChronology.getInstance());\n+        assertEquals(JulianChronology.getInstance(), test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        try {\n+            new TimeOfDay(-1, 20, 30, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(24, 20, 30, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, -1, 30, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 60, 30, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, -1, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 60, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     /**\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n+        try {\n+            new TimeOfDay(-1, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(24, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, -1, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 60, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, -1, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 60, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 30, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 30, 1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     /**\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n+        try {\n+            new TimeOfDay(-1, 20, 30, 40, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(24, 20, 30, 40, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, -1, 30, 40, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 60, 30, 40, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, -1, 40, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 60, 40, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 30, -1, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new TimeOfDay(10, 20, 30, 1000, JulianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testGet() {", "timestamp": 1086001174, "metainfo": ""}