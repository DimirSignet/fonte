{"sha": "6744d06e1d8bedcd2a501f0a058bdc8d67c35371", "log": "Fix to ensure that zone is not lost on toDateTime et al   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Instant.java\n+++ b/JodaTime/src/java/org/joda/time/Instant.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         return ISOChronology.getInstanceUTC();\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get this object as a DateTime using ISOChronology in the default zone.\n+     * <p>\n+     * This method returns a DateTime object in the default zone.\n+     * This differs from the similarly named method on DateTime, DateMidnight\n+     * or MutableDateTime which retains the time zone. The difference is\n+     * because Instant really represents a time <i>without</i> a zone,\n+     * thus calling this method we really have no zone to 'retain' and\n+     * hence expect to switch to the default zone.\n+     * <p>\n+     * This method definition preserves compatability with earlier versions\n+     * of Joda-Time.\n+     *\n+     * @return a DateTime using the same millis\n+     */\n+    public DateTime toDateTime() {\n+        return new DateTime(getMillis(), ISOChronology.getInstance());\n+    }\n+\n+    /**\n+     * Get this object as a DateTime using ISOChronology in the default zone.\n+     * This method is identical to <code>toDateTime()</code>.\n+     * <p>\n+     * This method returns a DateTime object in the default zone.\n+     * This differs from the similarly named method on DateTime, DateMidnight\n+     * or MutableDateTime which retains the time zone. The difference is\n+     * because Instant really represents a time <i>without</i> a zone,\n+     * thus calling this method we really have no zone to 'retain' and\n+     * hence expect to switch to the default zone.\n+     * <p>\n+     * This method definition preserves compatability with earlier versions\n+     * of Joda-Time.\n+     *\n+     * @return a DateTime using the same millis with ISOChronology\n+     * @deprecated Use toDateTime() as it is identical\n+     */\n+    public DateTime toDateTimeISO() {\n+        return toDateTime();\n+    }\n+\n+    /**\n+     * Get this object as a MutableDateTime using ISOChronology in the default zone.\n+     * <p>\n+     * This method returns a MutableDateTime object in the default zone.\n+     * This differs from the similarly named method on DateTime, DateMidnight\n+     * or MutableDateTime which retains the time zone. The difference is\n+     * because Instant really represents a time <i>without</i> a zone,\n+     * thus calling this method we really have no zone to 'retain' and\n+     * hence expect to switch to the default zone.\n+     * <p>\n+     * This method definition preserves compatability with earlier versions\n+     * of Joda-Time.\n+     *\n+     * @return a MutableDateTime using the same millis\n+     */\n+    public MutableDateTime toMutableDateTime() {\n+        return new MutableDateTime(getMillis(), ISOChronology.getInstance());\n+    }\n+\n+    /**\n+     * Get this object as a MutableDateTime using ISOChronology in the default zone.\n+     * This method is identical to <code>toMutableDateTime()</code>.\n+     * <p>\n+     * This method returns a MutableDateTime object in the default zone.\n+     * This differs from the similarly named method on DateTime, DateMidnight\n+     * or MutableDateTime which retains the time zone. The difference is\n+     * because Instant really represents a time <i>without</i> a zone,\n+     * thus calling this method we really have no zone to 'retain' and\n+     * hence expect to switch to the default zone.\n+     * <p>\n+     * This method definition preserves compatability with earlier versions\n+     * of Joda-Time.\n+     *\n+     * @return a MutableDateTime using the same millis with ISOChronology\n+     * @deprecated Use toMutableDateTime() as it is identical\n+     */\n+    public MutableDateTime toMutableDateTimeISO() {\n+        return toMutableDateTime();\n+    }\n+\n }\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     }\n \n     /**\n-     * Get this object as a DateTime, in the same zone.\n-     * \n+     * Get this object as a DateTime in the same zone.\n+     *\n      * @return a DateTime using the same millis\n      */\n     public DateTime toDateTime() {\n     }\n \n     /**\n-     * Get this object as a DateTime using ISOChronology, in the same zone.\n-     * \n+     * Get this object as a DateTime using ISOChronology in the same zone.\n+     *\n      * @return a DateTime using the same millis with ISOChronology\n      */\n     public DateTime toDateTimeISO() {\n     // returning a copy prevents this.\n \n     /**\n-     * Get this object as a MutableDateTime, in the same zone.\n-     * \n+     * Get this object as a MutableDateTime in the same zone.\n+     *\n      * @return a MutableDateTime using the same millis\n      */\n     public MutableDateTime toMutableDateTime() {\n     }\n \n     /**\n-     * Get this object as a MutableDateTime using ISOChronology, in the same zone.\n-     * \n+     * Get this object as a MutableDateTime using ISOChronology in the same zone.\n+     *\n      * @return a MutableDateTime using the same millis with ISOChronology\n      */\n     public MutableDateTime toMutableDateTimeISO() {\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertEquals(TEST_TIME1_LONDON, result.getMillis());\n     }\n \n-    public void testToDateMidnight() {\n-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+    public void testToDateTime() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n         DateTime result = test.toDateTime();\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(TEST_TIME1_LONDON, result.getMillis());\n-        assertEquals(LONDON, result.getZone());\n+        assertEquals(TEST_TIME1_PARIS, result.getMillis());\n+        assertEquals(PARIS, result.getZone());\n     }\n \n     public void testToDateTimeISO() {\n-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n         DateTime result = test.toDateTimeISO();\n         assertSame(DateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n     }\n \n     public void testToDateTime_DateTimeZone() {\n     }\n \n     public void testToMutableDateTime() {\n-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n         MutableDateTime result = test.toMutableDateTime();\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n     }\n \n     public void testToMutableDateTimeISO() {\n-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, PARIS);\n         MutableDateTime result = test.toMutableDateTimeISO();\n         assertSame(MutableDateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n     }\n \n     public void testToMutableDateTime_DateTimeZone() {\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     }\n \n     public void testToMutableDateTime() {\n-        DateTime test = new DateTime(TEST_TIME1);\n+        DateTime test = new DateTime(TEST_TIME1, PARIS);\n         MutableDateTime result = test.toMutableDateTime();\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n     }\n \n     public void testToMutableDateTimeISO() {\n-        DateTime test = new DateTime(TEST_TIME1);\n+        DateTime test = new DateTime(TEST_TIME1, PARIS);\n         MutableDateTime result = test.toMutableDateTimeISO();\n         assertSame(MutableDateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n     }\n \n     public void testToMutableDateTime_DateTimeZone() {\n--- a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         Instant test = new Instant(TEST_TIME1);\n         DateTime result = test.toDateTime();\n         assertEquals(TEST_TIME1, result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n     }\n \n     public void testToDateTimeISO() {\n         assertSame(DateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n     }\n \n     public void testToDateTime_DateTimeZone() {\n         Instant test = new Instant(TEST_TIME1);\n         MutableDateTime result = test.toMutableDateTime();\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n     }\n \n     public void testToMutableDateTimeISO() {\n         assertSame(MutableDateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n     }\n \n     public void testToMutableDateTime_DateTimeZone() {\n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     }\n \n     public void testToDateTime() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n         DateTime result = test.toDateTime();\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(test.getChronology(), result.getChronology());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n     }\n \n     public void testToDateTimeISO() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n         DateTime result = test.toDateTimeISO();\n         assertSame(DateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n     }\n \n     public void testToDateTime_DateTimeZone() {\n     }\n \n     public void testToMutableDateTime() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n         MutableDateTime result = test.toMutableDateTime();\n         assertTrue(test != result);\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n     }\n \n     public void testToMutableDateTimeISO() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n         MutableDateTime result = test.toMutableDateTimeISO();\n         assertSame(MutableDateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n         assertNotSame(test, result);\n     }\n ", "timestamp": 1139617063, "metainfo": ""}