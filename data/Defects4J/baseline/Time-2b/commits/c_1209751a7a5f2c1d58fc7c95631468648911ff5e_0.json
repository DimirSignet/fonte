{"sha": "1209751a7a5f2c1d58fc7c95631468648911ff5e", "log": "Enable compilation on JDK 1.3  ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java\n+++ b/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java\n  *  limitations under the License.\n  */\n package org.joda.time.tz;\n+\n+import java.util.Date;\n+import java.util.TimeZone;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         java.util.TimeZone tz = zone.toTimeZone();\n         \n         assertEquals(60000, tz.getRawOffset());\n-        assertEquals(60000, tz.getOffset(1167638400000L));\n-        assertEquals(60000, tz.getOffset(1185951600000L));\n+        assertEquals(60000, getOffset(tz, 1167638400000L));\n+        assertEquals(60000, getOffset(tz, 1185951600000L));\n     }\n \n     public void testToTimeZone2() throws Exception {\n         java.util.TimeZone tz = zone.toTimeZone();\n         \n         assertEquals(1, tz.getRawOffset());\n-        assertEquals(1, tz.getOffset(1167638400000L));\n-        assertEquals(1, tz.getOffset(1185951600000L));\n+        assertEquals(1, getOffset(tz, 1167638400000L));\n+        assertEquals(1, getOffset(tz, 1185951600000L));\n+    }\n+\n+    /** Make test compile on JDK 1.3. */\n+    private int getOffset(TimeZone zone, long millis) {\n+        Date date = new Date(millis);\n+        if (zone.inDaylightTime(date)) {\n+            return zone.getRawOffset() + 3600000;\n+        }\n+        return zone.getRawOffset();\n     }\n \n }", "timestamp": 1193616021, "metainfo": ""}