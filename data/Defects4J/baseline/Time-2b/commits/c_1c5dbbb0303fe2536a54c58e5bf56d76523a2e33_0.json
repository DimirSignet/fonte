{"sha": "1c5dbbb0303fe2536a54c58e5bf56d76523a2e33", "log": "Add extra methods to API   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n     /**\n      * Creates a new Period instance with the same field values but\n      * different PeriodType.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n      * \n      * @param type  the period type to use, null means standard\n      * @return the new period instance\n \n     /**\n      * Creates a new Period instance with the fields from the specified period\n-     * set to new values.\n+     * copied on top of those from this period.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n      * \n      * @param period  the period to copy from, null ignored\n      * @return the new period instance\n     //-----------------------------------------------------------------------\n     /**\n      * Creates a new Period instance with the specified field set to a new value.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n      * \n      * @param field  the field to set, null ignored\n      * @param value  the value to set to\n \n     /**\n      * Creates a new Period instance with the valueToAdd added to the specified field.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n      * \n      * @param field  the field to set, null ignored\n      * @param value  the value to add\n--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java\n     /** The index of the millisOfSecond field in the field array */\n     public static final int MILLIS_OF_SECOND = 3;\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructs a TimeOfDay from the specified millis of day using the\n+     * ISO chronology.\n+     * <p>\n+     * The millisOfDay value may exceed the number of millis in one day,\n+     * but additional days will be ignored.\n+     * This method uses the UTC time zone internally.\n+     *\n+     * @param millisOfDay  the number of milliseconds into a day to convert\n+     */\n+    public static TimeOfDay fromMillisOfDay(long millisOfDay) {\n+        return fromMillisOfDay(millisOfDay, null);\n+    }\n+\n+    /**\n+     * Constructs a TimeOfDay from the specified millis of day using the\n+     * specified chronology.\n+     * <p>\n+     * The millisOfDay value may exceed the number of millis in one day,\n+     * but additional days will be ignored.\n+     * This method uses the UTC time zone internally.\n+     *\n+     * @param instant  the number of milliseconds into a day to convert\n+     * @param chrono  the chronology, null means ISO chronology\n+     */\n+    public static TimeOfDay fromMillisOfDay(long millisOfDay, Chronology chrono) {\n+        chrono = DateTimeUtils.getChronology(chrono);\n+        chrono = chrono.withUTC();\n+        return new TimeOfDay(millisOfDay, chrono);\n+    }\n+\n     // Constructors\n     //-----------------------------------------------------------------------\n     /**\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Creates a new TimeOfDay instance with the specified chronology.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param newChronology  the new chronology, null means ISO\n+     * @return a copy of this datetime with a different chronology\n+     */\n+    public TimeOfDay withChronology(Chronology newChronology) {\n+        newChronology = DateTimeUtils.getChronology(newChronology);\n+        newChronology = newChronology.withUTC();\n+        if (newChronology == getChronology()) {\n+            return this;\n+        } else {\n+            return new TimeOfDay(this, newChronology);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Get the hour of day (0-23) field value.\n      *\n      * @return the hour of day\n--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Creates a new YearMonthDay instance with the specified chronology.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param newChronology  the new chronology, null means ISO\n+     * @return a copy of this datetime with a different chronology\n+     */\n+    public YearMonthDay withChronology(Chronology newChronology) {\n+        newChronology = DateTimeUtils.getChronology(newChronology);\n+        newChronology = newChronology.withUTC();\n+        if (newChronology == getChronology()) {\n+            return this;\n+        } else {\n+            return new YearMonthDay(this, newChronology);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Get the year field value.\n      *\n      * @return the year\n--- a/JodaTime/src/java/org/joda/time/base/BasePartial.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePartial.java\n      * <p>\n      * Data is assigned (not cloned) to the new instance.\n      *\n-     * @param other  the other partial to use to extract the fields and chronology\n-     * @param values  the new set of values, not cloned\n-     */\n-    protected BasePartial(BasePartial other, int[] values) {\n-        super();\n-        iChronology = other.iChronology;\n+     * @param base  the base partial\n+     * @param values  the new set of values, not cloned, null means use base\n+     * @param chrono  the chronology to use, null means use base\n+     */\n+    protected BasePartial(BasePartial base, int[] values) {\n+        super();\n+        iChronology = base.iChronology;\n         iValues = values;\n+    }\n+\n+    /**\n+     * Private constructor to be used by subclasses only which performs no validation.\n+     * <p>\n+     * Data is assigned (not cloned) to the new instance.\n+     * This should not be used by mutable subclasses.\n+     *\n+     * @param base  the base partial\n+     * @param values  the new set of values, not cloned, null means use base\n+     * @param chrono  the chronology to use, null means use base\n+     */\n+    protected BasePartial(BasePartial base, Chronology chrono) {\n+        super();\n+        iChronology = chrono.withUTC();\n+        iValues = base.iValues;\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1094686305, "metainfo": ""}