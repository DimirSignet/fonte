{"sha": "c384c385083468f2fcb7bd30f56a7952e31eaf9d", "log": "Add LocalDateTime.toDate(TimeZone)  Provides an alternate way to create a java.util.Date that avoids some synchronization Fixes #48", "commit": "\n--- a/src/main/java/org/joda/time/LocalDateTime.java\n+++ b/src/main/java/org/joda/time/LocalDateTime.java\n         Date date = new Date(getYear() - 1900, getMonthOfYear() - 1, dom,\n                         getHourOfDay(), getMinuteOfHour(), getSecondOfMinute());\n         date.setTime(date.getTime() + getMillisOfSecond());\n-\n         return correctDstTransition(date, TimeZone.getDefault());\n     }\n \n      * characteristics.\n      *\n      * @return a Date initialised with this date-time, never null\n-     * @since 2.0\n+     * @since 2.3\n      */\n     public Date toDate(final TimeZone timeZone) {\n-\tfinal Calendar calendar = Calendar.getInstance(timeZone);\n-\tcalendar.clear();\n-\tcalendar.set(getYear(), getMonthOfYear() - 1, getDayOfMonth(),\n-\t\tgetHourOfDay(), getMinuteOfHour(), getSecondOfMinute());\n-\tDate date = calendar.getTime();\n-\tdate.setTime(date.getTime() + getMillisOfSecond());\n-\n-\treturn correctDstTransition(date, timeZone);\n-    }\n-\n+        final Calendar calendar = Calendar.getInstance(timeZone);\n+        calendar.clear();\n+        calendar.set(getYear(), getMonthOfYear() - 1, getDayOfMonth(),\n+                    getHourOfDay(), getMinuteOfHour(), getSecondOfMinute());\n+        Date date = calendar.getTime();\n+        date.setTime(date.getTime() + getMillisOfSecond());\n+        return correctDstTransition(date, timeZone);\n+    }\n \n     /**\n      * Correct <code>date</code> in case of DST overlap.\n      * @see #toDate()\n      */\n     private Date correctDstTransition(Date date, final TimeZone timeZone) {\n-\tCalendar calendar = Calendar.getInstance(timeZone);\n-\tcalendar.setTime(date);\n-\tLocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n-\tif (check.isBefore(this)) {\n-\t    // DST gap\n-\t    // move forward in units of one minute until equal/after\n-\t    while (check.isBefore(this)) {\n-\t\tcalendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n-\t\tcheck = LocalDateTime.fromCalendarFields(calendar);\n-\t    }\n-\t    // move back in units of one second until date wrong\n-\t    while (check.isBefore(this) == false) {\n-\t\tcalendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n-\t\tcheck = LocalDateTime.fromCalendarFields(calendar);\n-\t    }\n-\t    calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\n-\t} else if (check.equals(this)) {\n-\t    // check for DST overlap\n-\t    final Calendar earlier = Calendar.getInstance(timeZone);\n-\t    earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n-\t    check = LocalDateTime.fromCalendarFields(earlier);\n-\t    if (check.equals(this)) {\n-\t\tcalendar = earlier;\n-\t    }\n-\t}\n-\treturn calendar.getTime();\n+        Calendar calendar = Calendar.getInstance(timeZone);\n+        calendar.setTime(date);\n+        LocalDateTime check = LocalDateTime.fromCalendarFields(calendar);\n+        if (check.isBefore(this)) {\n+            // DST gap\n+            // move forward in units of one minute until equal/after\n+            while (check.isBefore(this)) {\n+                calendar.setTimeInMillis(calendar.getTimeInMillis() + 60000);\n+                check = LocalDateTime.fromCalendarFields(calendar);\n+            }\n+            // move back in units of one second until date wrong\n+            while (check.isBefore(this) == false) {\n+                calendar.setTimeInMillis(calendar.getTimeInMillis() - 1000);\n+                check = LocalDateTime.fromCalendarFields(calendar);\n+            }\n+            calendar.setTimeInMillis(calendar.getTimeInMillis() + 1000);\n+        } else if (check.equals(this)) {\n+            // check for DST overlap\n+            final Calendar earlier = Calendar.getInstance(timeZone);\n+            earlier.setTimeInMillis(calendar.getTimeInMillis() - timeZone.getDSTSavings());\n+            check = LocalDateTime.fromCalendarFields(earlier);\n+            if (check.equals(this)) {\n+                calendar = earlier;\n+            }\n+        }\n+        return calendar.getTime();\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1375898333, "metainfo": ""}