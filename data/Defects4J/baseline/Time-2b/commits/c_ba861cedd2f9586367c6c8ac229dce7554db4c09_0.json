{"sha": "ba861cedd2f9586367c6c8ac229dce7554db4c09", "log": "Fix isAfter(Interval) to correctly handle dates that abut   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java\n      * Is this time interval entirely after the specified interval.\n      * <p>\n      * Intervals are inclusive of the start instant and exclusive of the end.\n+     * Only the end time of the specified interval is used in the comparison.\n      * \n      * @param interval  the interval to compare to, null means now\n      * @return true if this time interval is after the interval specified\n      */\n     public boolean isAfter(ReadableInterval interval) {\n+        long endMillis;\n         if (interval == null) {\n-            return isAfterNow();\n-        }\n-        return isAfter(interval.getEndMillis());\n+            endMillis = DateTimeUtils.currentTimeMillis();\n+        } else {\n+            endMillis = interval.getEndMillis();\n+        }\n+        return (getStartMillis() >= endMillis);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n         Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n         \n         assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));\n-        assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1)));\n+        assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1)));\n         assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));\n         \n         assertEquals(false, test.isAfter(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));\n--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java\n         MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n         \n         assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));\n-        assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1)));\n+        assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1)));\n         assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));\n         \n         assertEquals(false, test.isAfter(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));", "timestamp": 1100431756, "metainfo": ""}