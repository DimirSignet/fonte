{"sha": "55876b98250c1afaf23be12fb5fc4bd3677abbce", "log": "Remove uncaughtException calls  Previously the code called ThreadGroup.uncaughtException() which was invalid Now it throws a RuntimeException or logs to System.err Fixes #59", "commit": "\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n         Provider provider = null;\n \n         try {\n-            String providerClass =\n-                System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n+            String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.Provider\");\n             if (providerClass != null) {\n                 try {\n                     provider = (Provider) Class.forName(providerClass).newInstance();\n                 } catch (Exception ex) {\n-                    Thread thread = Thread.currentThread();\n-                    thread.getThreadGroup().uncaughtException(thread, ex);\n+                    throw new RuntimeException(ex);\n                 }\n             }\n         } catch (SecurityException ex) {\n             try {\n                 provider = new ZoneInfoProvider(\"org/joda/time/tz/data\");\n             } catch (Exception ex) {\n-                Thread thread = Thread.currentThread();\n-                thread.getThreadGroup().uncaughtException(thread, ex);\n+                ex.printStackTrace();\n             }\n         }\n \n                 try {\n                     nameProvider = (NameProvider) Class.forName(providerClass).newInstance();\n                 } catch (Exception ex) {\n-                    Thread thread = Thread.currentThread();\n-                    thread.getThreadGroup().uncaughtException(thread, ex);\n+                    throw new RuntimeException(ex);\n                 }\n             }\n         } catch (SecurityException ex) {\n--- a/src/main/java/org/joda/time/tz/ZoneInfoProvider.java\n+++ b/src/main/java/org/joda/time/tz/ZoneInfoProvider.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * If an error is thrown while loading zone data, uncaughtException is\n-     * called to log the error and null is returned for this and all future\n-     * requests.\n+     * If an error is thrown while loading zone data, the exception is logged\n+     * to system error and null is returned for this and all future requests.\n      * \n      * @param id  the id to load\n      * @return the loaded zone\n      * @param ex  the exception\n      */\n     protected void uncaughtException(Exception ex) {\n-        Thread t = Thread.currentThread();\n-        t.getThreadGroup().uncaughtException(t, ex);\n+        ex.printStackTrace();\n     }\n \n     /**\n--- a/src/test/java/org/joda/time/TestDateTimeZone.java\n+++ b/src/test/java/org/joda/time/TestDateTimeZone.java\n             DateTimeZone.setProvider(null);\n             assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n         }\n-        \n-        PrintStream syserr = System.err;\n+    }\n+\n+    public void testProvider_badClassName() {\n         try {\n             System.setProperty(\"org.joda.time.DateTimeZone.Provider\", \"xxx\");\n-            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-            System.setErr(new PrintStream(baos));\n-            \n             DateTimeZone.setProvider(null);\n             \n+        } catch (RuntimeException ex) {\n+            // expected\n             assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n-            String str = new String(baos.toByteArray());\n-            assertTrue(str.indexOf(\"java.lang.ClassNotFoundException\") >= 0);\n         } finally {\n-            System.setErr(syserr);\n             System.getProperties().remove(\"org.joda.time.DateTimeZone.Provider\");\n             DateTimeZone.setProvider(null);\n-            assertEquals(ZoneInfoProvider.class, DateTimeZone.getProvider().getClass());\n         }\n     }\n     \n             DateTimeZone.setNameProvider(null);\n             assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n         }\n-        \n-        PrintStream syserr = System.err;\n+    }\n+\n+    public void testNameProvider_badClassName() {\n         try {\n             System.setProperty(\"org.joda.time.DateTimeZone.NameProvider\", \"xxx\");\n-            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-            System.setErr(new PrintStream(baos));\n+            DateTimeZone.setProvider(null);\n             \n-            DateTimeZone.setNameProvider(null);\n-            \n+        } catch (RuntimeException ex) {\n+            // expected\n             assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n-            String str = new String(baos.toByteArray());\n-            assertTrue(str.indexOf(\"java.lang.ClassNotFoundException\") >= 0);\n         } finally {\n-            System.setErr(syserr);\n             System.getProperties().remove(\"org.joda.time.DateTimeZone.NameProvider\");\n-            DateTimeZone.setNameProvider(null);\n-            assertEquals(DefaultNameProvider.class, DateTimeZone.getNameProvider().getClass());\n-        }\n-    }        \n-    \n+            DateTimeZone.setProvider(null);\n+        }\n+    }\n+\n     public void testNameProviderSecurity() {\n         if (OLD_JDK) {\n             return;", "timestamp": 1378997966, "metainfo": ""}