{"sha": "5d8a77e2bf78e55bbe22bcd8059091737e9e58c5", "log": "Tweaks to cached time-zone to try and avoid a NPE [3470276]", "commit": "\n--- a/src/main/java/org/joda/time/tz/CachedDateTimeZone.java\n+++ b/src/main/java/org/joda/time/tz/CachedDateTimeZone.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2012 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n     private final DateTimeZone iZone;\n \n-    private transient Info[] iInfoCache;\n+    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];\n \n     private CachedDateTimeZone(DateTimeZone zone) {\n         super(zone.getID());\n         iZone = zone;\n-        iInfoCache = new Info[cInfoCacheMask + 1];\n-    }\n-\n-    private void readObject(java.io.ObjectInputStream in)\n-        throws java.io.IOException, ClassNotFoundException\n-    {\n-        in.defaultReadObject();\n-        iInfoCache = new Info[cInfoCacheMask + 1];\n     }\n \n     /**\n--- a/src/test/java/org/joda/time/tz/TestAll.java\n+++ b/src/test/java/org/joda/time/tz/TestAll.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2012 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         suite.addTest(TestUTCProvider.suite());\n         suite.addTest(TestBuilder.suite());\n         suite.addTest(TestCompiler.suite());\n+        suite.addTest(TestCachedDateTimeZone.suite());\n         suite.addTest(TestFixedDateTimeZone.suite());\n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/java/org/joda/time/tz/TestCachedDateTimeZone.java\n+/*\n+ *  Copyright 2001-2012 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.tz;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ * Test cases for FixedDateTimeZone.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestCachedDateTimeZone extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestCachedDateTimeZone.class);\n+    }\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+\n+    public TestCachedDateTimeZone(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+    }\n+\n+    public void test_caching() throws Exception {\n+        CachedDateTimeZone zone1 = CachedDateTimeZone.forZone(DateTimeZone.forID(\"Europe/Paris\"));\n+        CachedDateTimeZone zone2 = CachedDateTimeZone.forZone(DateTimeZone.forID(\"Europe/Paris\"));\n+        assertSame(zone1, zone2);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        CachedDateTimeZone test = CachedDateTimeZone.forZone(DateTimeZone.forID(\"Europe/Paris\"));\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        CachedDateTimeZone result = (CachedDateTimeZone) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+}", "timestamp": 1328182958, "metainfo": ""}