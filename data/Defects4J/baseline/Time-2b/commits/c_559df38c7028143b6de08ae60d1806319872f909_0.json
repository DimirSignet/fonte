{"sha": "559df38c7028143b6de08ae60d1806319872f909", "log": "Begin testing LocalDateTime  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java\n  * <p>\n  * LocalDateTime implements the {@link ReadablePartial} interface.\n  * To do this, certain methods focus on key fields Year, MonthOfYear,\n- * DayOfYear, HourOfDay, MinuteOfHour, SecondOfMinute and MillisOfSecond.\n+ * DayOfYear and MillisOfDay.\n  * However, <b>all</b> fields may in fact be queried.\n  * <p>\n  * Internally, LocalDateTime holds the datetime as milliseconds\n \n     /** The index of the year field in the field array */\n     private static final int YEAR = 0;\n-    /** The index of the dayOfYear field in the field array */\n-    private static final int DAY_OF_YEAR = 1;\n+    /** The index of the monthOfYear field in the field array */\n+    private static final int MONTH_OF_YEAR = 1;\n+    /** The index of the dayOfMonth field in the field array */\n+    private static final int DAY_OF_MONTH = 2;\n     /** The index of the millis field in the field array */\n-    private static final int MILLIS_OF_DAY = 2;\n+    private static final int MILLIS_OF_DAY = 3;\n \n     /** The local millis from 1970-01-01T00:00:00 */\n     private long iLocalMillis;\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the number of fields in this partial, which is three.\n-     * The supported fields are Year, DayOfYear and MillisOfDay.\n+     * The supported fields are Year, MonthOfDay, DayOfMonth and MillisOfDay.\n      *\n      * @return the field count, three\n      */\n     public int size() {\n-        return 3;\n+        return 4;\n     }\n \n     /**\n         switch (index) {\n             case YEAR:\n                 return chrono.year();\n-            case DAY_OF_YEAR:\n-                return chrono.dayOfYear();\n+            case MONTH_OF_YEAR:\n+                return chrono.monthOfYear();\n+            case DAY_OF_MONTH:\n+                return chrono.dayOfMonth();\n             case MILLIS_OF_DAY:\n                 return chrono.millisOfDay();\n             default:\n      * Gets the value of the field at the specifed index.\n      * <p>\n      * This method is required to support the <code>ReadablePartial</code>\n-     * interface. The supported fields are Year, DayOfYear and MillisOfDay.\n+     * interface. The supported fields are Year, MonthOfDay, DayOfMonth and MillisOfDay.\n      *\n      * @param index  the index, zero to two\n      * @return the value\n         switch (index) {\n             case YEAR:\n                 return getChronology().year().get(getLocalMillis());\n-            case DAY_OF_YEAR:\n-                return getChronology().dayOfYear().get(getLocalMillis());\n+            case MONTH_OF_YEAR:\n+                return getChronology().monthOfYear().get(getLocalMillis());\n+            case DAY_OF_MONTH:\n+                return getChronology().dayOfMonth().get(getLocalMillis());\n             case MILLIS_OF_DAY:\n                 return getChronology().millisOfDay().get(getLocalMillis());\n             default:\n     public DateTime toDateTime(DateTimeZone zone) {\n         zone = DateTimeUtils.getZone(zone);\n         Chronology chrono = iChronology.withZone(zone);\n-        return new DateTime(getLocalMillis(), chrono);\n+        return new DateTime(\n+                getYear(), getMonthOfYear(), getDayOfMonth(),\n+                getHourOfDay(), getMinuteOfHour(),\n+                getSecondOfMinute(), getMillisOfSecond(), chrono);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestInterval_Constructors.suite());\n         suite.addTest(TestInterval_Basics.suite());\n         \n+        suite.addTest(TestLocalDateTime_Basics.suite());\n+        \n         suite.addTest(TestLocalDate_Constructors.suite());\n         suite.addTest(TestLocalDate_Basics.suite());\n         suite.addTest(TestLocalDate_Properties.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Basics.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a Junit unit test for LocalDate.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalDateTime_Basics extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final int OFFSET = 1;\n+    private static final GJChronology GJ_UTC = GJChronology.getInstanceUTC();\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+\n+//    private long TEST_TIME1 =\n+//        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+//        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+//        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+//\n+//    private long TEST_TIME2 =\n+//        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+//        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+//        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+\n+    private int MILLIS_OF_DAY_UTC =\n+        (int) (10L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 40L);\n+\n+    private long TEST_TIME_NOW_UTC =\n+        (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY + MILLIS_OF_DAY_UTC;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalDateTime_Basics.class);\n+    }\n+\n+    public TestLocalDateTime_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW_UTC);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet_DateTimeFieldType() {\n+        LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40);\n+        assertEquals(1970, test.get(DateTimeFieldType.year()));\n+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n+        assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(2, test.get(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));\n+        assertEquals(24, test.get(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(1970, test.get(DateTimeFieldType.weekyear()));\n+        assertEquals(10, test.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(30, test.get(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(40, test.get(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(MILLIS_OF_DAY_UTC / 60000 , test.get(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(MILLIS_OF_DAY_UTC / 1000 , test.get(DateTimeFieldType.secondOfDay()));\n+        assertEquals(MILLIS_OF_DAY_UTC , test.get(DateTimeFieldType.millisOfDay()));\n+        assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        \n+        test = new LocalDateTime(1970, 6, 9, 12, 30);\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        test = new LocalDateTime(1970, 6, 9, 14, 30);\n+        assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        test = new LocalDateTime(1970, 6, 9, 0, 30);\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        try {\n+            test.get(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSize() {\n+        LocalDateTime test = new LocalDateTime();\n+        assertEquals(4, test.size());\n+    }\n+\n+    public void testGetFieldType_int() {\n+        LocalDateTime test = new LocalDateTime(COPTIC_PARIS);\n+        assertSame(DateTimeFieldType.year(), test.getFieldType(0));\n+        assertSame(DateTimeFieldType.monthOfYear(), test.getFieldType(1));\n+        assertSame(DateTimeFieldType.dayOfMonth(), test.getFieldType(2));\n+        assertSame(DateTimeFieldType.millisOfDay(), test.getFieldType(3));\n+        try {\n+            test.getFieldType(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getFieldType(3);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFieldTypes() {\n+        LocalDateTime test = new LocalDateTime(COPTIC_PARIS);\n+        DateTimeFieldType[] fields = test.getFieldTypes();\n+        assertSame(DateTimeFieldType.year(), fields[0]);\n+        assertSame(DateTimeFieldType.monthOfYear(), fields[1]);\n+        assertSame(DateTimeFieldType.dayOfMonth(), fields[2]);\n+        assertSame(DateTimeFieldType.millisOfDay(), fields[3]);\n+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());\n+    }\n+\n+    public void testGetField_int() {\n+        LocalDateTime test = new LocalDateTime(COPTIC_PARIS);\n+        assertSame(COPTIC_UTC.year(), test.getField(0));\n+        assertSame(COPTIC_UTC.monthOfYear(), test.getField(1));\n+        assertSame(COPTIC_UTC.dayOfMonth(), test.getField(2));\n+        assertSame(COPTIC_UTC.millisOfDay(), test.getField(3));\n+        try {\n+            test.getField(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getField(3);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFields() {\n+        LocalDateTime test = new LocalDateTime(COPTIC_PARIS);\n+        DateTimeField[] fields = test.getFields();\n+        assertSame(COPTIC_UTC.year(), fields[0]);\n+        assertSame(COPTIC_UTC.monthOfYear(), fields[1]);\n+        assertSame(COPTIC_UTC.dayOfMonth(), fields[2]);\n+        assertSame(COPTIC_UTC.millisOfDay(), fields[3]);\n+        assertNotSame(test.getFields(), test.getFields());\n+    }\n+\n+    public void testGetValue_int() {\n+        LocalDateTime test = new LocalDateTime(ISO_UTC);\n+        assertEquals(1970, test.getValue(0));\n+        assertEquals(6, test.getValue(1));\n+        assertEquals(9, test.getValue(2));\n+        assertEquals(MILLIS_OF_DAY_UTC, test.getValue(3));\n+        try {\n+            test.getValue(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getValue(3);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetValues() {\n+        LocalDateTime test = new LocalDateTime(ISO_UTC);\n+        int[] values = test.getValues();\n+        assertEquals(1970, values[0]);\n+        assertEquals(6, values[1]);\n+        assertEquals(9, values[2]);\n+        assertEquals(MILLIS_OF_DAY_UTC, values[3]);\n+        assertNotSame(test.getValues(), test.getValues());\n+    }\n+\n+    public void testIsSupported_DateTimeFieldType() {\n+        LocalDateTime test = new LocalDateTime();\n+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.weekyear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.weekyearOfCentury()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.era()));\n+        \n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay()));\n+        \n+        assertEquals(false, test.isSupported((DateTimeFieldType) null));\n+    }\n+\n+    public void testIsSupported_DurationFieldType() {\n+        LocalDateTime test = new LocalDateTime();\n+        assertEquals(false, test.isSupported(DurationFieldType.eras()));\n+        assertEquals(true, test.isSupported(DurationFieldType.centuries()));\n+        assertEquals(true, test.isSupported(DurationFieldType.years()));\n+        assertEquals(true, test.isSupported(DurationFieldType.months()));\n+        assertEquals(true, test.isSupported(DurationFieldType.weekyears()));\n+        assertEquals(true, test.isSupported(DurationFieldType.weeks()));\n+        assertEquals(true, test.isSupported(DurationFieldType.days()));\n+        \n+        assertEquals(true, test.isSupported(DurationFieldType.hours()));\n+        assertEquals(true, test.isSupported(DurationFieldType.minutes()));\n+        assertEquals(true, test.isSupported(DurationFieldType.seconds()));\n+        assertEquals(true, test.isSupported(DurationFieldType.millis()));\n+        assertEquals(true, test.isSupported(DurationFieldType.halfdays()));\n+        \n+        assertEquals(false, test.isSupported((DurationFieldType) null));\n+    }\n+\n+    public void testEqualsHashCode() {\n+        LocalDateTime test1 = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        LocalDateTime test2 = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        LocalDateTime test3 = new LocalDateTime(1971, 6, 9, 10, 20, 30, 40);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInstant()));\n+        assertEquals(false, test1.equals(new YearMonthDay(1970, 6, 9, COPTIC_PARIS)));\n+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));\n+    }\n+    \n+    class MockInstant extends MockPartial {\n+        public Chronology getChronology() {\n+            return COPTIC_UTC;\n+        }\n+        public DateTimeField[] getFields() {\n+            return new DateTimeField[] {\n+                COPTIC_UTC.year(),\n+                COPTIC_UTC.monthOfYear(),\n+                COPTIC_UTC.dayOfMonth(),\n+                COPTIC_UTC.millisOfDay(),\n+            };\n+        }\n+        public int[] getValues() {\n+            return new int[] {1970, 6, 9, MILLIS_OF_DAY_UTC};\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCompareTo() {\n+        LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC);\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(),\n+            DateTimeFieldType.monthOfYear(),\n+            DateTimeFieldType.dayOfMonth(),\n+            DateTimeFieldType.millisOfDay(),\n+        };\n+        int[] values = new int[] {2005, 6, 2, MILLIS_OF_DAY_UTC};\n+        Partial p = new Partial(types, values);\n+        assertEquals(0, test1.compareTo(p));\n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            test1.compareTo(new Date());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            test1.compareTo(new YearMonthDay());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            test1.compareTo(new TimeOfDay());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        Partial partial = new Partial()\n+            .with(DateTimeFieldType.centuryOfEra(), 1)\n+            .with(DateTimeFieldType.halfdayOfDay(), 0)\n+            .with(DateTimeFieldType.dayOfMonth(), 9);\n+        try {\n+            new LocalDateTime(1970, 6, 9, 10, 20, 30, 40).compareTo(partial);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_LocalDateTime() {\n+        LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC);\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        try {\n+            new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isEqual(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_LocalDateTime() {\n+        LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC);\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        try {\n+            new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isBefore(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_LocalDateTime() {\n+        LocalDateTime test1 = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        LocalDateTime test1a = new LocalDateTime(2005, 6, 2, 10, 20, 30, 40);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        LocalDateTime test2 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        LocalDateTime test3 = new LocalDateTime(2005, 7, 2, 10, 20, 30, 40, GREGORIAN_UTC);\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        try {\n+            new LocalDateTime(2005, 7, 2, 10, 20, 30, 40).isAfter(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDate() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime result = test.withDate(2006, 2, 1);\n+        \n+        check(test, 2004, 6, 9, 10, 20, 30, 40);\n+        check(result, 2006, 2, 1, 10, 20, 30, 40);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithTime() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime result = test.withTime(9, 8, 7, 6);\n+        \n+        check(test, 2004, 6, 9, 10, 20, 30, 40);\n+        check(result, 2004, 6, 9, 9, 8, 7, 6);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField_DateTimeFieldType_int_1() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime result = test.withField(DateTimeFieldType.year(), 2006);\n+        \n+        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test);\n+        assertEquals(new LocalDateTime(2006, 6, 9, 10, 20, 30, 40), result);\n+    }\n+\n+    public void testWithField_DateTimeFieldType_int_2() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField_DateTimeFieldType_int_3() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime result = test.withField(DateTimeFieldType.year(), 2004);\n+        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded_DurationFieldType_int_1() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime result = test.withFieldAdded(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new LocalDateTime(2004, 6, 9, 10, 20, 30, 40), test);\n+        assertEquals(new LocalDateTime(2010, 6, 9, 10, 20, 30, 40), result);\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_2() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_3() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_4() {\n+        LocalDateTime test = new LocalDateTime(2004, 6, 9, 10, 20, 30, 40);\n+        LocalDateTime result = test.withFieldAdded(DurationFieldType.years(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_RP() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plus(new Period(1, 2, 3, 4, 29, 6, 7, 8));\n+        LocalDateTime expected = new LocalDateTime(2003, 7, 29, 15, 26, 37, 48, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusYears_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusYears(1);\n+        LocalDateTime expected = new LocalDateTime(2003, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMonths_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusMonths(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 6, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusWeeks_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusWeeks(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 10, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusDays_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusDays(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 4, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusHours_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusHours(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 11, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMinutes_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusMinutes(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 21, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusSeconds_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusSeconds(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 31, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMillis_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.plusMillis(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 41, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinus_RP() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        \n+        LocalDateTime expected = new LocalDateTime(2001, 3, 26, 9, 19, 29, 39, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusYears_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusYears(1);\n+        LocalDateTime expected = new LocalDateTime(2001, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusYears(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMonths_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusMonths(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 4, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMonths(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusWeeks_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusWeeks(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 4, 26, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusWeeks(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusDays_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusDays(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 2, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusDays(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusHours_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusHours(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 9, 20, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMinutes_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusMinutes(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 19, 30, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusSeconds_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusSeconds(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 29, 40, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMillis_int() {\n+        LocalDateTime test = new LocalDateTime(2002, 5, 3, 10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalDateTime result = test.minusMillis(1);\n+        LocalDateTime expected = new LocalDateTime(2002, 5, 3, 10, 20, 30, 39, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetters() {\n+        LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC);\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(160, test.getDayOfYear());\n+        assertEquals(2, test.getDayOfWeek());\n+        assertEquals(24, test.getWeekOfWeekyear());\n+        assertEquals(1970, test.getWeekyear());\n+        assertEquals(70, test.getYearOfCentury());\n+        assertEquals(20, test.getCenturyOfEra());\n+        assertEquals(1970, test.getYearOfEra());\n+        assertEquals(DateTimeConstants.AD, test.getEra());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithers() {\n+        LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40, GJ_UTC);\n+        check(test.withYear(2000), 2000, 6, 9, 10, 20, 30, 40);\n+        check(test.withMonthOfYear(2), 1970, 2, 9, 10, 20, 30, 40);\n+        check(test.withDayOfMonth(2), 1970, 6, 2, 10, 20, 30, 40);\n+        check(test.withDayOfYear(6), 1970, 1, 6, 10, 20, 30, 40);\n+        check(test.withDayOfWeek(6), 1970, 6, 13, 10, 20, 30, 40);\n+        check(test.withWeekOfWeekyear(6), 1970, 2, 3, 10, 20, 30, 40);\n+        check(test.withWeekyear(1971), 1971, 6, 15, 10, 20, 30, 40);\n+        check(test.withYearOfCentury(60), 1960, 6, 9, 10, 20, 30, 40);\n+        check(test.withCenturyOfEra(21), 2070, 6, 9, 10, 20, 30, 40);\n+        check(test.withYearOfEra(1066), 1066, 6, 9, 10, 20, 30, 40);\n+        check(test.withEra(DateTimeConstants.BC), -1970, 6, 9, 10, 20, 30, 40);\n+        check(test.withHourOfDay(6), 1970, 6, 9, 6, 20, 30, 40);\n+        check(test.withMinuteOfHour(6), 1970, 6, 9, 10, 6, 30, 40);\n+        check(test.withSecondOfMinute(6), 1970, 6, 9, 10, 20, 6, 40);\n+        check(test.withMillisOfSecond(6), 1970, 6, 9, 10, 20, 30, 6);\n+        try {\n+            test.withMonthOfYear(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant\n+        \n+        DateTime test = base.toDateTime();\n+        check(base, 2005, 6, 9, 6, 7, 8, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_LONDON);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_Zone() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant\n+        \n+        DateTime test = base.toDateTime(TOKYO);\n+        check(base, 2005, 6, 9, 6, 7, 8, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_TOKYO);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_nullZone() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant\n+        \n+        DateTime test = base.toDateTime((DateTimeZone) null);\n+        check(base, 2005, 6, 9, 6, 7, 8, 9);\n+        DateTime expected = new DateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_LONDON);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToLocalDate() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant\n+        LocalDate expected = new LocalDate(2005, 6, 9, COPTIC_LONDON);\n+        assertEquals(expected,base.toLocalDate());\n+    }\n+\n+    public void testToLocalTime() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 6, 7, 8, 9, COPTIC_PARIS); // PARIS irrelevant\n+        LocalTime expected = new LocalTime(6, 7, 8, 9, COPTIC_LONDON);\n+        assertEquals(expected,base.toLocalTime());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_RI() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        DateTime dt = new DateTime(2002, 1, 3, 4, 5, 6, 7, BUDDHIST_TOKYO);\n+        \n+        DateTime test = base.toDateTime(dt);\n+        check(base, 2005, 6, 9, 10, 20, 30, 40);\n+        DateTime expected = new DateTime(2005, 6, 9, 10, 20, 30, 40, BUDDHIST_TOKYO);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTime_nullRI() {\n+        LocalDateTime base = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTime((ReadableInstant) null);\n+        check(base, 2005, 6, 9, 10, 20, 30, 40);\n+        DateTime expected = new DateTime(2005, 6, 9, 10, 20, 30, 40, ISO_LONDON);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        LocalDateTime test = new LocalDateTime(2005, 6, 9, 10, 20, 30, 40, GJ_UTC);\n+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));\n+        assertEquals(test.monthOfYear(), test.property(DateTimeFieldType.monthOfYear()));\n+        assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(test.dayOfYear(), test.property(DateTimeFieldType.dayOfYear()));\n+        assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(test.weekyear(), test.property(DateTimeFieldType.weekyear()));\n+        assertEquals(test.yearOfCentury(), test.property(DateTimeFieldType.yearOfCentury()));\n+        assertEquals(test.yearOfEra(), test.property(DateTimeFieldType.yearOfEra()));\n+        assertEquals(test.centuryOfEra(), test.property(DateTimeFieldType.centuryOfEra()));\n+        assertEquals(test.era(), test.property(DateTimeFieldType.era()));\n+        assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay()));\n+        assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));\n+        \n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalDateTime());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        LocalDateTime test = new LocalDateTime(1972, 6, 9, 10, 20, 30, 40, COPTIC_PARIS);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        LocalDateTime result = (LocalDateTime) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n+        assertEquals(test.getChronology(), result.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40);\n+        assertEquals(\"2002-06-09T10:20:30.040\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String() {\n+        LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40);\n+        assertEquals(\"2002 10\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"2002-06-09T10:20:30.040\", test.toString((String) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String_Locale() {\n+        LocalDateTime test = new LocalDateTime(1970, 6, 9, 10, 20, 30, 40);\n+        assertEquals(\"Tue 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n+        assertEquals(\"mar. 9/6\", test.toString(\"EEE d/M\", Locale.FRENCH));\n+        assertEquals(\"1970-06-09T10:20:30.040\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"Tue 9/6\", test.toString(\"EEE d/M\", null));\n+        assertEquals(\"1970-06-09T10:20:30.040\", test.toString(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_DTFormatter() {\n+        LocalDateTime test = new LocalDateTime(2002, 6, 9, 10, 20, 30, 40);\n+        assertEquals(\"2002 10\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"2002-06-09T10:20:30.040\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(LocalDateTime test, int year, int month, int day, int hour, int min, int sec, int mil) {\n+        assertEquals(year, test.getYear());\n+        assertEquals(month, test.getMonthOfYear());\n+        assertEquals(day, test.getDayOfMonth());\n+        assertEquals(hour, test.getHourOfDay());\n+        assertEquals(min, test.getMinuteOfHour());\n+        assertEquals(sec, test.getSecondOfMinute());\n+        assertEquals(mil, test.getMillisOfSecond());\n+    }\n+}", "timestamp": 1143493428, "metainfo": ""}