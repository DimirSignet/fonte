{"sha": "31c46e10acddd02e88628b82144993b237cfab1b", "log": "Property support.   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/property/DateOnlyFieldProperty.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-04 Stephen Colebourne.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally\n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.property;\n+\n+import java.util.Locale;\n+import org.joda.time.DateOnly;\n+import org.joda.time.DateTimeField;\n+// Import for @link support\n+import org.joda.time.MutableDateOnly;\n+import org.joda.time.ReadableInstant;\n+\n+/**\n+ * DateOnlyFieldProperty binds a DateOnly to a DateTimeField allowing powerful\n+ * date functionality to be easily accessed.\n+ * <p>\n+ * The simplest use of this class is as an alternative get method, here used to\n+ * get the year '1972' (as an int) and the month 'December' (as a String).\n+ * <pre>\n+ * DateOnly date = new DateOnly(1972, 12, 3);\n+ * int year = date.year().get();\n+ * String monthStr = date.month().getAsText();\n+ * </pre>\n+ * <p>\n+ * Methods are also provided that allow date modification. These return new instances\n+ * of DateOnly - they do not modify the original. The example below yields two\n+ * independent immutable date objects 20 years apart.\n+ * <pre>\n+ * DateOnly date = new DateOnly(1972, 12, 3);\n+ * DateOnly date20 = date.year().addToCopy(20);\n+ * </pre>\n+ * Serious modification of dates (ie. more than just changing one or two fields)\n+ * should use the {@link MutableDateOnly} class.\n+ * <p>\n+ * DateOnlyFieldPropery itself is thread-safe and immutable, as well as the\n+ * DateOnly being operated on.\n+ *\n+ * @author Brian S O'Neill\n+ */\n+public class DateOnlyFieldProperty extends AbstractDateTimeFieldProperty {\n+\n+    static final long serialVersionUID = -7764886769525930067L;\n+\n+    /** The instant this property is working against */\n+    private final DateOnly iInstant;\n+    /** The field this property is working against */\n+    private final DateTimeField iField;\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param instant  the instant to set\n+     * @param field  the field to use\n+     */\n+    public DateOnlyFieldProperty(DateOnly instant, DateTimeField field) {\n+        super();\n+        iInstant = instant;\n+        iField = field;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the field being used.\n+     * \n+     * @return the field\n+     */\n+    public DateTimeField getField() {\n+        return iField;\n+    }\n+\n+    /**\n+     * Gets the instant being used.\n+     * \n+     * @return the instant\n+     */\n+    public ReadableInstant getInstant() {\n+        return iInstant;\n+    }\n+\n+    /**\n+     * Gets the instant being used.\n+     * \n+     * @return the instant\n+     */\n+    public DateOnly getDateTime() {\n+        return iInstant;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds to this field in a copy of this DateOnly.\n+     * <p>\n+     * The DateOnly attached to this property is unchanged by this call.\n+     * This operation is faster than converting a DateOnly to a MutableDateOnly\n+     * and back again when setting one field. When setting multiple fields,\n+     * it is generally quicker to make the conversion to MutableDateOnly.\n+     * \n+     * @param value  the value to add to the field in the copy\n+     * @return a copy of the DateOnly with the field value changed\n+     * @throws IllegalArgumentException if the value isn't valid\n+     */\n+    public DateOnly addToCopy(int value) {\n+        DateOnly instant = iInstant;\n+        return (DateOnly)instant.toCopy(iField.add(instant.getMillis(), value));\n+    }\n+\n+    /**\n+     * Adds to this field in a copy of this DateOnly.\n+     * <p>\n+     * The DateOnly attached to this property is unchanged by this call.\n+     * This operation is faster than converting a DateOnly to a MutableDateOnly\n+     * and back again when setting one field. When setting multiple fields,\n+     * it is generally quicker to make the conversion to MutableDateOnly.\n+     * \n+     * @param value  the value to add to the field in the copy\n+     * @return a copy of the DateOnly with the field value changed\n+     * @throws IllegalArgumentException if the value isn't valid\n+     */\n+    public DateOnly addToCopy(long value) {\n+        DateOnly instant = iInstant;\n+        return (DateOnly)instant.toCopy(iField.add(instant.getMillis(), value));\n+    }\n+\n+    /**\n+     * Adds to this field, possibly wrapped, in a copy of this DateOnly.\n+     * A wrapped operation only changes this field.\n+     * Thus 31st January addWrapped one day goes to the 1st January.\n+     * <p>\n+     * The DateOnly attached to this property is unchanged by this call.\n+     * This operation is faster than converting a DateOnly to a MutableDateOnly\n+     * and back again when setting one field. When setting multiple fields,\n+     * it is generally quicker to make the conversion to MutableDateOnly.\n+     * \n+     * @param value  the value to add to the field in the copy\n+     * @return a copy of the DateOnly with the field value changed\n+     * @throws IllegalArgumentException if the value isn't valid\n+     */\n+    public DateOnly addWrappedToCopy(int value) {\n+        DateOnly instant = iInstant;\n+        return (DateOnly)instant.toCopy(iField.addWrapped(instant.getMillis(), value));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets this field in a copy of the DateOnly.\n+     * <p>\n+     * The DateOnly attached to this property is unchanged by this call.\n+     * This operation is faster than converting a DateOnly to a MutableDateOnly\n+     * and back again when setting one field. When setting multiple fields,\n+     * it is generally quicker to make the conversion to MutableDateOnly.\n+     * \n+     * @param value  the value to set the field in the copy to\n+     * @return a copy of the DateOnly with the field value changed\n+     * @throws IllegalArgumentException if the value isn't valid\n+     */\n+    public DateOnly setCopy(int value) {\n+        DateOnly instant = iInstant;\n+        return (DateOnly)instant.toCopy(iField.set(instant.getMillis(), value));\n+    }\n+    \n+    /**\n+     * Sets this field in a copy of the DateOnly to a parsed text value.\n+     * <p>\n+     * The DateOnly attached to this property is unchanged by this call.\n+     * This operation is faster than converting a DateOnly to a MutableDateOnly\n+     * and back again when setting one field. When setting multiple fields,\n+     * it is generally quicker to make the conversion to MutableDateOnly.\n+     * \n+     * @param text  the text value to set\n+     * @param locale  optional locale to use for selecting a text symbol\n+     * @return a copy of the DateOnly with the field value changed\n+     * @throws IllegalArgumentException if the text value isn't valid\n+     */\n+    public DateOnly setCopy(String text, Locale locale) {\n+        DateOnly instant = iInstant;\n+        return (DateOnly)instant.toCopy(iField.set(instant.getMillis(), text, locale));\n+    }\n+\n+    /**\n+     * Sets this field in a copy of the DateOnly to a parsed text value.\n+     * <p>\n+     * The DateOnly attached to this property is unchanged by this call.\n+     * This operation is faster than converting a DateOnly to a MutableDateOnly\n+     * and back again when setting one field. When setting multiple fields,\n+     * it is generally quicker to make the conversion to MutableDateOnly.\n+     * \n+     * @param text  the text value to set\n+     * @return a copy of the DateOnly with the field value changed\n+     * @throws IllegalArgumentException if the text value isn't valid\n+     */\n+    public final DateOnly setCopy(String text) {\n+        return setCopy(text, null);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Rounds to the lowest whole unit of this field on a copy of this DateOnly.\n+     *\n+     * @return a copy of the DateOnly with the field value changed\n+     */\n+    public DateOnly roundFloorCopy() {\n+        DateOnly instant = iInstant;\n+        return (DateOnly)instant.toCopy(iField.roundFloor(instant.getMillis()));\n+    }\n+\n+    /**\n+     * Rounds to the highest whole unit of this field on a copy of this DateOnly.\n+     *\n+     * @return a copy of the DateOnly with the field value changed\n+     */\n+    public DateOnly roundCeilingCopy() {\n+        DateOnly instant = iInstant;\n+        return (DateOnly)instant.toCopy(iField.roundCeiling(instant.getMillis()));\n+    }\n+\n+    /**\n+     * Rounds to the nearest whole unit of this field on a copy of this DateOnly,\n+     * favoring the floor if halfway.\n+     *\n+     * @return a copy of the DateOnly with the field value changed\n+     */\n+    public DateOnly roundHalfFloorCopy() {\n+        DateOnly instant = iInstant;\n+        return (DateOnly)instant.toCopy(iField.roundHalfFloor(instant.getMillis()));\n+    }\n+\n+    /**\n+     * Rounds to the nearest whole unit of this field on a copy of this DateOnly,\n+     * favoring the ceiling if halfway.\n+     *\n+     * @return a copy of the DateOnly with the field value changed\n+     */\n+    public DateOnly roundHalfCeilingCopy() {\n+        DateOnly instant = iInstant;\n+        return (DateOnly)instant.toCopy(iField.roundHalfCeiling(instant.getMillis()));\n+    }\n+\n+    /**\n+     * Rounds to the nearest whole unit of this field on a copy of this DateOnly.\n+     * If halfway, the ceiling is favored over the floor only if it makes this field's value even.\n+     *\n+     * @return a copy of the DateOnly with the field value changed\n+     */\n+    public DateOnly roundHalfEvenCopy() {\n+        DateOnly instant = iInstant;\n+        return (DateOnly)instant.toCopy(iField.roundHalfEven(instant.getMillis()));\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/property/TimeOnlyFieldProperty.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-04 Stephen Colebourne.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally\n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.property;\n+\n+import java.util.Locale;\n+import org.joda.time.TimeOnly;\n+import org.joda.time.DateTimeField;\n+// Import for @link support\n+import org.joda.time.MutableTimeOnly;\n+import org.joda.time.ReadableInstant;\n+\n+/**\n+ * TimeOnlyFieldProperty binds a TimeOnly to a DateTimeField allowing powerful\n+ * time functionality to be easily accessed.\n+ * <p>\n+ * The simplest use of this class is as an alternative get method, here used to\n+ * get the clockhour '8' (as an int) and the AM/PM string.\n+ * <pre>\n+ * TimeOnly time = new TimeOnly(20, 30, 0);\n+ * int clockhour = time.clockhourOfHalfday().get();\n+ * String amPmStr = time.halfdayOfDay().getAsText();\n+ * </pre>\n+ * <p>\n+ * Methods are also provided that allow time modification. These return new instances\n+ * of TimeOnly - they do not modify the original. The example below yields two\n+ * independent immutable time objects 20 minutes apart.\n+ * <pre>\n+ * TimeOnly time = new TimeOnly(20, 30, 0);\n+ * TimeOnly time20 = time.minuteOfHour().addToCopy(20);\n+ * </pre>\n+ * Serious modification of times (ie. more than just changing one or two fields)\n+ * should use the {@link MutableTimeOnly} class.\n+ * <p>\n+ * TimeOnlyFieldPropery itself is thread-safe and immutable, as well as the\n+ * TimeOnly being operated on.\n+ *\n+ * @author Brian S O'Neill\n+ */\n+public class TimeOnlyFieldProperty extends AbstractDateTimeFieldProperty {\n+\n+    static final long serialVersionUID = 8826542069120527929L;\n+\n+    /** The instant this property is working against */\n+    private final TimeOnly iInstant;\n+    /** The field this property is working against */\n+    private final DateTimeField iField;\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param instant  the instant to set\n+     * @param field  the field to use\n+     */\n+    public TimeOnlyFieldProperty(TimeOnly instant, DateTimeField field) {\n+        super();\n+        iInstant = instant;\n+        iField = field;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the field being used.\n+     * \n+     * @return the field\n+     */\n+    public DateTimeField getField() {\n+        return iField;\n+    }\n+\n+    /**\n+     * Gets the instant being used.\n+     * \n+     * @return the instant\n+     */\n+    public ReadableInstant getInstant() {\n+        return iInstant;\n+    }\n+\n+    /**\n+     * Gets the instant being used.\n+     * \n+     * @return the instant\n+     */\n+    public TimeOnly getDateTime() {\n+        return iInstant;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds to this field in a copy of this TimeOnly.\n+     * <p>\n+     * The TimeOnly attached to this property is unchanged by this call.\n+     * This operation is faster than converting a TimeOnly to a MutableTimeOnly\n+     * and back again when setting one field. When setting multiple fields,\n+     * it is generally quicker to make the conversion to MutableTimeOnly.\n+     * \n+     * @param value  the value to add to the field in the copy\n+     * @return a copy of the TimeOnly with the field value changed\n+     * @throws IllegalArgumentException if the value isn't valid\n+     */\n+    public TimeOnly addToCopy(int value) {\n+        TimeOnly instant = iInstant;\n+        return (TimeOnly)instant.toCopy(iField.add(instant.getMillis(), value));\n+    }\n+\n+    /**\n+     * Adds to this field in a copy of this TimeOnly.\n+     * <p>\n+     * The TimeOnly attached to this property is unchanged by this call.\n+     * This operation is faster than converting a TimeOnly to a MutableTimeOnly\n+     * and back again when setting one field. When setting multiple fields,\n+     * it is generally quicker to make the conversion to MutableTimeOnly.\n+     * \n+     * @param value  the value to add to the field in the copy\n+     * @return a copy of the TimeOnly with the field value changed\n+     * @throws IllegalArgumentException if the value isn't valid\n+     */\n+    public TimeOnly addToCopy(long value) {\n+        TimeOnly instant = iInstant;\n+        return (TimeOnly)instant.toCopy(iField.add(instant.getMillis(), value));\n+    }\n+\n+    /**\n+     * Adds to this field, possibly wrapped, in a copy of this TimeOnly.\n+     * A wrapped operation only changes this field.\n+     * Thus 12:59:00 addWrapped one minute goes to 12:00:00.\n+     * <p>\n+     * The TimeOnly attached to this property is unchanged by this call.\n+     * This operation is faster than converting a TimeOnly to a MutableTimeOnly\n+     * and back again when setting one field. When setting multiple fields,\n+     * it is generally quicker to make the conversion to MutableTimeOnly.\n+     * \n+     * @param value  the value to add to the field in the copy\n+     * @return a copy of the TimeOnly with the field value changed\n+     * @throws IllegalArgumentException if the value isn't valid\n+     */\n+    public TimeOnly addWrappedToCopy(int value) {\n+        TimeOnly instant = iInstant;\n+        return (TimeOnly)instant.toCopy(iField.addWrapped(instant.getMillis(), value));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets this field in a copy of the TimeOnly.\n+     * <p>\n+     * The TimeOnly attached to this property is unchanged by this call.\n+     * This operation is faster than converting a TimeOnly to a MutableTimeOnly\n+     * and back again when setting one field. When setting multiple fields,\n+     * it is generally quicker to make the conversion to MutableTimeOnly.\n+     * \n+     * @param value  the value to set the field in the copy to\n+     * @return a copy of the TimeOnly with the field value changed\n+     * @throws IllegalArgumentException if the value isn't valid\n+     */\n+    public TimeOnly setCopy(int value) {\n+        TimeOnly instant = iInstant;\n+        return (TimeOnly)instant.toCopy(iField.set(instant.getMillis(), value));\n+    }\n+    \n+    /**\n+     * Sets this field in a copy of the TimeOnly to a parsed text value.\n+     * <p>\n+     * The TimeOnly attached to this property is unchanged by this call.\n+     * This operation is faster than converting a TimeOnly to a MutableTimeOnly\n+     * and back again when setting one field. When setting multiple fields,\n+     * it is generally quicker to make the conversion to MutableTimeOnly.\n+     * \n+     * @param text  the text value to set\n+     * @param locale  optional locale to use for selecting a text symbol\n+     * @return a copy of the TimeOnly with the field value changed\n+     * @throws IllegalArgumentException if the text value isn't valid\n+     */\n+    public TimeOnly setCopy(String text, Locale locale) {\n+        TimeOnly instant = iInstant;\n+        return (TimeOnly)instant.toCopy(iField.set(instant.getMillis(), text, locale));\n+    }\n+\n+    /**\n+     * Sets this field in a copy of the TimeOnly to a parsed text value.\n+     * <p>\n+     * The TimeOnly attached to this property is unchanged by this call.\n+     * This operation is faster than converting a TimeOnly to a MutableTimeOnly\n+     * and back again when setting one field. When setting multiple fields,\n+     * it is generally quicker to make the conversion to MutableTimeOnly.\n+     * \n+     * @param text  the text value to set\n+     * @return a copy of the TimeOnly with the field value changed\n+     * @throws IllegalArgumentException if the text value isn't valid\n+     */\n+    public final TimeOnly setCopy(String text) {\n+        return setCopy(text, null);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Rounds to the lowest whole unit of this field on a copy of this TimeOnly.\n+     *\n+     * @return a copy of the TimeOnly with the field value changed\n+     */\n+    public TimeOnly roundFloorCopy() {\n+        TimeOnly instant = iInstant;\n+        return (TimeOnly)instant.toCopy(iField.roundFloor(instant.getMillis()));\n+    }\n+\n+    /**\n+     * Rounds to the highest whole unit of this field on a copy of this TimeOnly.\n+     *\n+     * @return a copy of the TimeOnly with the field value changed\n+     */\n+    public TimeOnly roundCeilingCopy() {\n+        TimeOnly instant = iInstant;\n+        return (TimeOnly)instant.toCopy(iField.roundCeiling(instant.getMillis()));\n+    }\n+\n+    /**\n+     * Rounds to the nearest whole unit of this field on a copy of this TimeOnly,\n+     * favoring the floor if halfway.\n+     *\n+     * @return a copy of the TimeOnly with the field value changed\n+     */\n+    public TimeOnly roundHalfFloorCopy() {\n+        TimeOnly instant = iInstant;\n+        return (TimeOnly)instant.toCopy(iField.roundHalfFloor(instant.getMillis()));\n+    }\n+\n+    /**\n+     * Rounds to the nearest whole unit of this field on a copy of this TimeOnly,\n+     * favoring the ceiling if halfway.\n+     *\n+     * @return a copy of the TimeOnly with the field value changed\n+     */\n+    public TimeOnly roundHalfCeilingCopy() {\n+        TimeOnly instant = iInstant;\n+        return (TimeOnly)instant.toCopy(iField.roundHalfCeiling(instant.getMillis()));\n+    }\n+\n+    /**\n+     * Rounds to the nearest whole unit of this field on a copy of this TimeOnly.\n+     * If halfway, the ceiling is favored over the floor only if it makes this field's value even.\n+     *\n+     * @return a copy of the TimeOnly with the field value changed\n+     */\n+    public TimeOnly roundHalfEvenCopy() {\n+        TimeOnly instant = iInstant;\n+        return (TimeOnly)instant.toCopy(iField.roundHalfEven(instant.getMillis()));\n+    }\n+\n+}", "timestamp": 1073096744, "metainfo": ""}