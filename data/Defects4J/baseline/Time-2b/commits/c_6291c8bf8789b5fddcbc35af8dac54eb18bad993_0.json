{"sha": "6291c8bf8789b5fddcbc35af8dac54eb18bad993", "log": "Save original duration object if precise.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractInterval.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractInterval.java\n     /** The end of the period */\n     private long iEndMillis;\n \n+    /** The duration, which may be lazily set */\n+    private Duration iDuration;\n+\n     /** Cache the start instant */\n     private transient Instant iStartInstant;\n     /** Cache the end instant */\n     private transient Instant iEndInstant;\n-    /** Cache the duration */\n-    private transient Duration iDuration;\n     \n     /**\n      * Constructs a time interval as a copy of another.\n         }\n         iStartMillis = interval.getStartMillis();\n         iEndMillis = interval.getEndMillis();\n+        Duration duration = interval.getDuration();\n+        if (duration != null && duration.isPrecise()) {\n+            iDuration = duration;\n+        }\n     }\n     \n     /**\n      */\n     public AbstractInterval(Object interval) {\n         super();\n+        Duration duration;\n         if (interval instanceof ReadableInterval) {\n             ReadableInterval ri = (ReadableInterval) interval;\n             iStartMillis = ri.getStartMillis();\n             iEndMillis = ri.getEndMillis();\n+            duration = ri.getDuration();\n         } else {\n             IntervalConverter converter = ConverterManager.getInstance().getIntervalConverter(interval);\n             if (this instanceof ReadWritableInterval) {\n                 converter.setInto((ReadWritableInterval) this, interval);\n+                duration = null;\n             } else {\n                 MutableInterval mi = new MutableInterval(0, 0);\n                 converter.setInto(mi, interval);\n                 iStartMillis = mi.getStartMillis();\n                 iEndMillis = mi.getEndMillis();\n+                duration = mi.getDuration();\n             }\n+        }\n+        if (duration != null && duration.isPrecise()) {\n+            iDuration = duration;\n         }\n     }\n \n             iStartInstant = (Instant) start;\n         }\n         iEndMillis = duration.addTo((ReadableInstant) start, 1).getMillis();\n+        if (duration.isPrecise()) {\n+            iDuration = duration.toDuration();\n+        }\n     }\n     \n     /**\n             iEndInstant = (Instant) end;\n         }\n         iStartMillis = duration.addTo((ReadableInstant) end, -1).getMillis();\n+        if (duration.isPrecise()) {\n+            iDuration = duration.toDuration();\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n         iDuration = null;\n     }\n \n+    /**\n+     * Sets the duration of this time interval, preserving the start instant.\n+     * <p>\n+     * Subclasses that wish to be immutable should override this method with an\n+     * empty implementation that is protected and final. This also ensures that\n+     * all lower subclasses are also immutable.\n+     *\n+     * @param duration  new duration for interval\n+     */\n+    protected void setDurationAfterStart(ReadableDuration duration) {\n+        if (duration == null) {\n+            throw new IllegalArgumentException(\"The duration must not be null\");\n+        }\n+        setEndMillis(duration.addTo(getStartMillis(), 1));\n+        if (duration.isPrecise()) {\n+            iDuration = duration.toDuration();\n+        }\n+    }\n+\n+    /**\n+     * Sets the duration of this time interval, preserving the end instant.\n+     * <p>\n+     * Subclasses that wish to be immutable should override this method with an\n+     * empty implementation that is protected and final. This also ensures that\n+     * all lower subclasses are also immutable.\n+     *\n+     * @param duration  new duration for interval\n+     */\n+    protected void setDurationBeforeEnd(ReadableDuration duration) {\n+        if (duration == null) {\n+            throw new IllegalArgumentException(\"The duration must not be null\");\n+        }\n+        setStartMillis(duration.addTo(getEndMillis(), -1));\n+        if (duration.isPrecise()) {\n+            iDuration = duration.toDuration();\n+        }\n+    }\n+\n }\n--- a/JodaTime/src/java/org/joda/time/Interval.java\n+++ b/JodaTime/src/java/org/joda/time/Interval.java\n      * Overridden to do nothing, ensuring this class and all subclasses are\n      * immutable.\n      */\n-    protected void setStartMillis(long millisInstant) {\n+    protected final void setStartMillis(long millisInstant) {\n     }\n \n     /**\n      * Overridden to do nothing, ensuring this class and all subclasses are\n      * immutable.\n      */\n-    protected void setEndMillis(long millisInstant) {\n+    protected final void setEndMillis(long millisInstant) {\n     }\n \n+    /**\n+     * Overridden to do nothing, ensuring this class and all subclasses are\n+     * immutable.\n+     */\n+    protected final void setDurationAfterStart(ReadableDuration duration) {\n+    }\n+\n+    /**\n+     * Overridden to do nothing, ensuring this class and all subclasses are\n+     * immutable.\n+     */\n+    protected final void setDurationBeforeEnd(ReadableDuration duration) {\n+    }\n }\n--- a/JodaTime/src/java/org/joda/time/MutableInterval.java\n+++ b/JodaTime/src/java/org/joda/time/MutableInterval.java\n      * @param duration  new duration for interval\n      */\n     public void setDurationAfterStart(ReadableDuration duration) {\n-        if (duration == null) {\n-            throw new IllegalArgumentException(\"The duration must not be null\");\n-        }\n-        super.setEndMillis(duration.addTo(getStartMillis(), 1));\n+        super.setDurationAfterStart(duration);\n     }\n \n     /**\n      * @param duration  new duration for interval\n      */\n     public void setDurationBeforeEnd(ReadableDuration duration) {\n-        if (duration == null) {\n-            throw new IllegalArgumentException(\"The duration must not be null\");\n-        }\n-        super.setStartMillis(duration.addTo(getEndMillis(), -1));\n+        super.setDurationBeforeEnd(duration);\n     }\n \n }", "timestamp": 1072150533, "metainfo": ""}