{"sha": "c2c22fdf9e93a644898218f462096e2cadbb9058", "log": "Supports construction via ConverterManager.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDuration.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDuration.java\n \n import java.io.Serializable;\n \n+import org.joda.time.convert.DurationConverter;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.format.ISODurationFormat;\n+\n /**\n  * AbstractDuration provides the common behaviour for duration classes.\n  * <p>\n     }\n \n     /**\n+     * Creates a zero length duration.\n+     *\n+     * @param type determines which set of fields this duration supports\n+     */\n+    public AbstractDuration(DurationType type) {\n+        iType = type;\n+    }\n+\n+    /**\n      * Copies another duration to this one.\n      *\n      * @param type use a different DurationType\n+     * @param duration duration to copy\n      * @throws UnsupportedOperationException if an unsupported field's value is\n      * non-zero\n      */\n     public AbstractDuration(DurationType type, ReadableDuration duration) {\n         // Only call a private method\n         setDuration(iType = type, duration);\n+    }\n+\n+    /**\n+     * Copies another duration to this one.\n+     *\n+     * @param type use a different DurationType\n+     * @param duration duration to convert\n+     * @throws UnsupportedOperationException if an unsupported field's value is\n+     * non-zero\n+     */\n+    public AbstractDuration(DurationType type, Object duration) {\n+        if (duration instanceof ReadableDuration) {\n+            // Only call a private method\n+            setDuration(iType = type, (ReadableDuration) duration);\n+        } else {\n+            DurationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);\n+            if (converter.isPrecise(duration)) {\n+                // Only call a private method\n+                setTotalMillis(iType = type, converter.getDurationMillis(duration));\n+            } else {\n+                // Only call a private method\n+                setDuration(iType = type, new MutableDuration(type, duration));\n+            }\n+        }\n     }\n \n     /**\n     /**\n      * Gets the value as a String in the ISO8601 duration format.\n      * <p>\n-     * For example, \"P6H3M5S\" represents 6 hours, 3 minutes, 5 seconds.\n+     * For example, \"P6H3M7S\" represents 6 hours, 3 minutes, 7 seconds.\n      *\n      * @return the value as an ISO8601 string\n      */\n-    // TODO\n-    //public String toString();\n+    public String toString() {\n+        return ISODurationFormat.getInstance().standard().print(this);\n+    }\n \n     /**\n      * Sets all the fields in one go from another ReadableDuration.\n--- a/JodaTime/src/java/org/joda/time/Duration.java\n+++ b/JodaTime/src/java/org/joda/time/Duration.java\n     }\n \n     /**\n+     * Creates a zero length duration.\n+     *\n+     * @param type determines which set of fields this duration supports\n+     */\n+    public Duration(DurationType type) {\n+        super(type);\n+    }\n+\n+    /**\n      * Copies another duration to this one.\n      *\n      * @param type use a different DurationType\n+     * @param duration duration to copy\n      * @throws UnsupportedOperationException if an unsupported field's value is\n      * non-zero\n      */\n     public Duration(DurationType type, ReadableDuration duration) {\n+        super(type, duration);\n+    }\n+\n+    /**\n+     * Copies another duration to this one.\n+     *\n+     * @param type use a different DurationType\n+     * @param duration duration to convert\n+     * @throws UnsupportedOperationException if an unsupported field's value is\n+     * non-zero\n+     */\n+    public Duration(DurationType type, Object duration) {\n         super(type, duration);\n     }\n \n--- a/JodaTime/src/java/org/joda/time/MutableDuration.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDuration.java\n \n import java.io.Serializable;\n \n+import org.joda.time.convert.DurationConverter;\n+import org.joda.time.convert.ConverterManager;\n+\n /**\n  * Standard mutable duration implementation.\n  * <p>\n     }\n \n     /**\n+     * Creates a zero length duration.\n+     *\n+     * @param type determines which set of fields this duration supports\n+     */\n+    public MutableDuration(DurationType type) {\n+        super(type);\n+    }\n+\n+    /**\n      * Copies another duration to this one.\n      *\n      * @param type use a different DurationType\n+     * @param duration duration to copy\n      * @throws UnsupportedOperationException if an unsupported field's value is\n      * non-zero\n      */\n     public MutableDuration(DurationType type, ReadableDuration duration) {\n         super(type, duration);\n+    }\n+\n+    /**\n+     * Copies another duration to this one.\n+     *\n+     * @param type use a different DurationType\n+     * @param duration duration to convert\n+     * @throws UnsupportedOperationException if an unsupported field's value is\n+     * non-zero\n+     */\n+    public MutableDuration(DurationType type, Object duration) {\n+        super(type);\n+        DurationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);\n+        converter.setInto(this, duration);\n     }\n \n     /**", "timestamp": 1071978701, "metainfo": ""}