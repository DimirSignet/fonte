{"sha": "6d8d6e625dc76b8d2fbcc7ee8c9e15402f2c7ca7", "log": "* added tests and implementation for `Duration.dividedBy(long divisor)` * added tests and implementation for `FieldUtils.safeDivide` * renamed multiplication tests to match method name * renamed parameter name of `Duration.multipliedBy` to match Java 8 API", "commit": "\n--- a/src/main/java/org/joda/time/Duration.java\n+++ b/src/main/java/org/joda/time/Duration.java\n         return withDurationAdded(amount.getMillis(), -1);\n     }\n \n-    public Duration multipliedBy(long factor)\n+    public Duration multipliedBy(long multiplicant)\n     {\n-        if(factor == 1)\n-            return this;\n-        return new Duration(FieldUtils.safeMultiply(getMillis(), factor));\n+        if(multiplicant == 1)\n+            return this;\n+        return new Duration(FieldUtils.safeMultiply(getMillis(), multiplicant));\n+    }\n+\n+    public Duration dividedBy(long divisor)\n+    {\n+        if(divisor == 1)\n+            return this;\n+        return new Duration(FieldUtils.safeDivide(getMillis(), divisor));\n     }\n \n }\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n         return object1.equals(object2);\n     }\n \n+    public static long safeDivide(long dividend, long divisor)\n+    {\n+        if(dividend == Long.MIN_VALUE && divisor == -1L)\n+            throw new ArithmeticException(\"Multiplication overflows a long: \" + dividend + \" / \" + divisor);\n+        return dividend / divisor;\n+    }\n+\n }\n--- a/src/test/java/org/joda/time/TestDuration_Basics.java\n+++ b/src/test/java/org/joda/time/TestDuration_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testMul_long1() {\n+    public void testMultipliedBy_long1() {\n         Duration test = new Duration(123L);\n         Duration result = test.multipliedBy(2L);\n         assertEquals(246L, result.getMillis());\n     }\n \n-    public void testMul_long2() {\n+    public void testMultipliedBy_long2() {\n         Duration test = new Duration(123L);\n         Duration result = test.multipliedBy(1L);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDividedBy_long1() {\n+        Duration test = new Duration(246L);\n+        Duration result = test.dividedBy(2L);\n+        assertEquals(123L, result.getMillis());\n+    }\n+\n+    public void testDividedBy_long2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.dividedBy(1L);\n         assertSame(test, result);\n     }\n \n--- a/src/test/java/org/joda/time/field/TestFieldUtils.java\n+++ b/src/test/java/org/joda/time/field/TestFieldUtils.java\n         } catch (ArithmeticException e) {\n         }\n     }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSafeDivideLongLong() {\n+        assertEquals(1L, FieldUtils.safeDivide(1L, 1L));\n+        \n+        assertEquals(1L, FieldUtils.safeDivide(3L, 3L));\n+        assertEquals(0L, FieldUtils.safeDivide(1L, 3L));\n+        assertEquals(3L, FieldUtils.safeDivide(3L, 1L));\n+        \n+        assertEquals(2L, FieldUtils.safeDivide(6L, 3L));\n+        assertEquals(-2L, FieldUtils.safeDivide(6L, -3L));\n+        assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L));\n+        assertEquals(2L, FieldUtils.safeDivide(-6L, -3L));\n+        \n+        assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L));\n+        assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L));\n+        assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L));\n+        \n+        try {\n+            FieldUtils.safeDivide(Long.MIN_VALUE, -1L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+        \n+        try {\n+            FieldUtils.safeDivide(1L, 0L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+    }\n }\n ", "timestamp": 1380663270, "metainfo": ""}