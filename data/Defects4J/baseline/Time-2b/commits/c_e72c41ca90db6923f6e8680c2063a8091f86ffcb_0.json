{"sha": "e72c41ca90db6923f6e8680c2063a8091f86ffcb", "log": "Fixup pull request", "commit": "\n--- a/src/main/java/org/joda/time/Duration.java\n+++ b/src/main/java/org/joda/time/Duration.java\n /*\n- *  Copyright 2001-2010 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * <p>\n  * A duration is defined by a fixed number of milliseconds.\n  * There is no concept of fields, such as days or seconds, as these fields can vary in length.\n+ * <p>\n  * A duration may be converted to a {@link Period} to obtain field values.\n- * This conversion will typically cause a loss of precision, however.\n+ * This conversion will typically cause a loss of precision.\n  * <p>\n  * Duration is thread-safe and immutable.\n  *\n--- a/src/main/java/org/joda/time/base/BaseDuration.java\n+++ b/src/main/java/org/joda/time/base/BaseDuration.java\n      *\n      * @param startInstant  interval start, in milliseconds\n      * @param endInstant  interval end, in milliseconds\n-     * @throws ArithmeticException if the duration exceeds a 64 bit long\n+     * @throws ArithmeticException if the duration exceeds a 64-bit long\n      */\n     protected BaseDuration(long startInstant, long endInstant) {\n         super();\n      *\n      * @param start  interval start, null means now\n      * @param end  interval end, null means now\n-     * @throws ArithmeticException if the duration exceeds a 64 bit long\n+     * @throws ArithmeticException if the duration exceeds a 64-bit long\n      */\n     protected BaseDuration(ReadableInstant start, ReadableInstant end) {\n         super();\n--- a/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n+++ b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n         // Write milliseconds either because the additional precision is\n         // required or the minutes didn't fit in the field.\n         \n-        // Form 11 (64 bits effective precision, but write as if 70 bits)\n+        // Form 11 (64-bits effective precision, but write as if 70 bits)\n         out.writeByte(millis < 0 ? 0xff : 0xc0);\n         out.writeLong(millis);\n     }\n             return w * 1000L;\n \n         case 3:\n-            // Form 11 (64 bits effective precision)\n+            // Form 11 (64-bits effective precision)\n             return in.readLong();\n         }\n     }", "timestamp": 1385555765, "metainfo": ""}