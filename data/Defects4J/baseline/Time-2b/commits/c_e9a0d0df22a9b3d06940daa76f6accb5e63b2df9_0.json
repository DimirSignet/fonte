{"sha": "e9a0d0df22a9b3d06940daa76f6accb5e63b2df9", "log": "Added IllegalFieldValueException class.   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+/**\n+ * Exception thrown when attempting to set a field outisde its supported range.\n+ *\n+ * @author Brian S O'Neill\n+ * @since 1.1\n+ */\n+public class IllegalFieldValueException extends IllegalArgumentException {\n+    private static String createMessage(String fieldName, Number value,\n+                                        Number lowerBound, Number upperBound) {\n+        StringBuffer buf = new StringBuffer()\n+            .append(\"Value \").append(value).append(\" for \").append(fieldName).append(' ');\n+\n+        if (lowerBound == null) {\n+            if (upperBound == null) {\n+                buf.append(\"is not supported\");\n+            } else {\n+                buf.append(\"must not be larger than \").append(upperBound);\n+            }\n+        } else if (upperBound == null) {\n+            buf.append(\"must not be smaller than \").append(lowerBound);\n+        } else {\n+            buf.append(\"must be in the range [\")\n+                .append(lowerBound)\n+                .append(',')\n+                .append(upperBound)\n+                .append(']');\n+        }\n+\n+        return buf.toString();\n+    }\n+\n+    private static String createMessage(String fieldName, String value) {\n+        StringBuffer buf = new StringBuffer().append(\"Value \");\n+\n+        if (value == null) {\n+            buf.append(\"null\");\n+        } else {\n+            buf.append('\"');\n+            buf.append(value);\n+            buf.append('\"');\n+        }\n+\n+        buf.append(\" for \").append(fieldName).append(' ').append(\"is not supported\");\n+        \n+        return buf.toString();\n+    }\n+    \n+    private final DateTimeFieldType iDateTimeFieldType;\n+    private final DurationFieldType iDurationFieldType;\n+    private final String iFieldName;\n+    private final Number iNumberValue;\n+    private final String iStringValue;\n+    private final Number iLowerBound;\n+    private final Number iUpperBound;\n+\n+    /**\n+     * @param fieldType type of field being set\n+     * @param value illegal value being set\n+     * @param lowerBound lower legal field value, or null if not applicable\n+     * @param upperBound upper legal field value, or null if not applicable\n+     */\n+    public IllegalFieldValueException(DateTimeFieldType fieldType,\n+                                      Number value, Number lowerBound, Number upperBound) {\n+        super(createMessage(fieldType.getName(), value, lowerBound, upperBound));\n+        iDateTimeFieldType = fieldType;\n+        iDurationFieldType = null;\n+        iFieldName = fieldType.getName();\n+        iNumberValue = value;\n+        iStringValue = null;\n+        iLowerBound = lowerBound;\n+        iUpperBound = upperBound;\n+    }\n+\n+    /**\n+     * @param fieldType type of field being set\n+     * @param value illegal value being set\n+     * @param lowerBound lower legal field value, or null if not applicable\n+     * @param upperBound upper legal field value, or null if not applicable\n+     */\n+    public IllegalFieldValueException(DurationFieldType fieldType,\n+                                      Number value, Number lowerBound, Number upperBound) {\n+        super(createMessage(fieldType.getName(), value, lowerBound, upperBound));\n+        iDateTimeFieldType = null;\n+        iDurationFieldType = fieldType;\n+        iFieldName = fieldType.getName();\n+        iNumberValue = value;\n+        iStringValue = null;\n+        iLowerBound = lowerBound;\n+        iUpperBound = upperBound;\n+    }\n+\n+    /**\n+     * @param fieldName name of field being set\n+     * @param value illegal value being set\n+     * @param lowerBound lower legal field value, or null if not applicable\n+     * @param upperBound upper legal field value, or null if not applicable\n+     */\n+    public IllegalFieldValueException(String fieldName,\n+                                      Number value, Number lowerBound, Number upperBound) {\n+        super(createMessage(fieldName, value, lowerBound, upperBound));\n+        iDateTimeFieldType = null;\n+        iDurationFieldType = null;\n+        iFieldName = fieldName;\n+        iNumberValue = value;\n+        iStringValue = null;\n+        iLowerBound = lowerBound;\n+        iUpperBound = upperBound;\n+    }\n+\n+    /**\n+     * @param fieldType type of field being set\n+     * @param value illegal value being set\n+     */\n+    public IllegalFieldValueException(DateTimeFieldType fieldType, String value) {\n+        super(createMessage(fieldType.getName(), value));\n+        iDateTimeFieldType = fieldType;\n+        iDurationFieldType = null;\n+        iFieldName = fieldType.getName();\n+        iStringValue = value;\n+        iNumberValue = null;\n+        iLowerBound = null;\n+        iUpperBound = null;\n+    }\n+\n+    /**\n+     * @param fieldType type of field being set\n+     * @param value illegal value being set\n+     */\n+    public IllegalFieldValueException(DurationFieldType fieldType, String value) {\n+        super(createMessage(fieldType.getName(), value));\n+        iDateTimeFieldType = null;\n+        iDurationFieldType = fieldType;\n+        iFieldName = fieldType.getName();\n+        iStringValue = value;\n+        iNumberValue = null;\n+        iLowerBound = null;\n+        iUpperBound = null;\n+    }\n+\n+    /**\n+     * @param fieldName name of field being set\n+     * @param value illegal value being set\n+     */\n+    public IllegalFieldValueException(String fieldName, String value) {\n+        super(createMessage(fieldName, value));\n+        iDateTimeFieldType = null;\n+        iDurationFieldType = null;\n+        iFieldName = fieldName;\n+        iStringValue = value;\n+        iNumberValue = null;\n+        iLowerBound = null;\n+        iUpperBound = null;\n+    }\n+\n+    /**\n+     * Returns the DateTimeFieldType whose value was invalid, or null if not applicable.\n+     */\n+    public DateTimeFieldType getDateTimeFieldType() {\n+        return iDateTimeFieldType;\n+    }\n+\n+    /**\n+     * Returns the DurationFieldType whose value was invalid, or null if not applicable.\n+     */\n+    public DurationFieldType getDurationFieldType() {\n+        return iDurationFieldType;\n+    }\n+\n+    /**\n+     * Returns the name of the field whose value was invalid.\n+     */\n+    public String getFieldName() {\n+        return iFieldName;\n+    }\n+\n+    /**\n+     * Returns the illegal integer value assigned to the field, or null if not applicable.\n+     */\n+    public Number getIllegalNumberValue() {\n+        return iNumberValue;\n+    }\n+\n+    /**\n+     * Returns the illegal string value assigned to the field, or null if not applicable.\n+     */\n+    public String getIllegalStringValue() {\n+        return iStringValue;\n+    }\n+\n+    /**\n+     * Returns the illegal value assigned to the field as a non-null string.\n+     */\n+    public String getIllegalValueAsString() {\n+        String value = iStringValue;\n+        if (value == null) {\n+            value = String.valueOf(iNumberValue);\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * Returns the lower bound of the legal value range, or null if not applicable.\n+     */\n+    public Number getLowerBound() {\n+        return iLowerBound;\n+    }\n+\n+    /**\n+     * Returns the upper bound of the legal value range, or null if not applicable.\n+     */\n+    public Number getUpperBound() {\n+        return iUpperBound;\n+    }\n+}\n--- a/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n+import org.joda.time.IllegalFieldValueException;\n import org.joda.time.ReadablePartial;\n import org.joda.time.ReadablePeriod;\n import org.joda.time.field.FieldUtils;\n             int value = values[i];\n             DateTimeField field = partial.getField(i);\n             if (value < field.getMinimumValue()) {\n-                throw new IllegalArgumentException(\"Value \" + value +\n-                        \" for \" + field.getName() + \" is less than minimum\");\n+                throw new IllegalFieldValueException\n+                    (field.getType(), new Integer(value),\n+                     new Integer(field.getMinimumValue()), null);\n             }\n             if (value > field.getMaximumValue()) {\n-                throw new IllegalArgumentException(\"Value \" + value +\n-                        \" for \" + field.getName() + \" is greater than maximum\");\n+                throw new IllegalFieldValueException\n+                    (field.getType(), new Integer(value),\n+                     null, new Integer(field.getMaximumValue()));\n             }\n         }\n         // check values in specific range, catching really odd cases like 30th Feb\n             int value = values[i];\n             DateTimeField field = partial.getField(i);\n             if (value < field.getMinimumValue(partial, values)) {\n-                throw new IllegalArgumentException(\"Value \" + value +\n-                        \" for \" + field.getName() + \" is less than minimum\");\n+                throw new IllegalFieldValueException\n+                    (field.getType(), new Integer(value),\n+                     new Integer(field.getMinimumValue(partial, values)), null);\n             }\n             if (value > field.getMaximumValue(partial, values)) {\n-                throw new IllegalArgumentException(\"Value \" + value +\n-                        \" for \" + field.getName() + \" is greater than maximum\");\n+                throw new IllegalFieldValueException\n+                    (field.getType(), new Integer(value),\n+                     null, new Integer(field.getMaximumValue(partial, values)));\n             }\n         }\n     }\n--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java\n             return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);\n         }\n \n-        FieldUtils.verifyValueBounds(\"millisOfDay\", millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY);\n+        FieldUtils.verifyValueBounds\n+            (DateTimeFieldType.millisOfDay(), millisOfDay, 0, DateTimeConstants.MILLIS_PER_DAY);\n         return getDateMidnightMillis(year, monthOfYear, dayOfMonth) + millisOfDay;\n     }\n \n                                           hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n         }\n \n-        FieldUtils.verifyValueBounds(\"hourOfDay\", hourOfDay, 0, 23);\n-        FieldUtils.verifyValueBounds(\"minuteOfHour\", minuteOfHour, 0, 59);\n-        FieldUtils.verifyValueBounds(\"secondOfMinute\", secondOfMinute, 0, 59);\n-        FieldUtils.verifyValueBounds(\"millisOfSecond\", millisOfSecond, 0, 999);\n+        FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), hourOfDay, 0, 23);\n+        FieldUtils.verifyValueBounds(DateTimeFieldType.minuteOfHour(), minuteOfHour, 0, 59);\n+        FieldUtils.verifyValueBounds(DateTimeFieldType.secondOfMinute(), secondOfMinute, 0, 59);\n+        FieldUtils.verifyValueBounds(DateTimeFieldType.millisOfSecond(), millisOfSecond, 0, 999);\n \n         return getDateMidnightMillis(year, monthOfYear, dayOfMonth)\n             + hourOfDay * DateTimeConstants.MILLIS_PER_HOUR\n     long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)\n         throws IllegalArgumentException\n     {\n-        FieldUtils.verifyValueBounds(\"year\", year, getMinYear(), getMaxYear());\n-        FieldUtils.verifyValueBounds(\"monthOfYear\", monthOfYear, 1, 12);\n+        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n+        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 12);\n \n         boolean isLeap = isLeapYear(year);\n \n-        FieldUtils.verifyValueBounds(\"dayOfMonth\", dayOfMonth, 1,\n+        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1,\n                                      (isLeap ? MAX_DAYS_PER_MONTH_ARRAY : MIN_DAYS_PER_MONTH_ARRAY)\n                                      [monthOfYear - 1]);\n \n--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n     long getDateMidnightMillis(int year, int monthOfYear, int dayOfMonth)\n         throws IllegalArgumentException\n     {\n-        FieldUtils.verifyValueBounds(\"year\", year, getMinYear(), getMaxYear());\n-        FieldUtils.verifyValueBounds(\"monthOfYear\", monthOfYear, 1, 13);\n+        FieldUtils.verifyValueBounds(DateTimeFieldType.year(), year, getMinYear(), getMaxYear());\n+        FieldUtils.verifyValueBounds(DateTimeFieldType.monthOfYear(), monthOfYear, 1, 13);\n \n         int dayLimit = (monthOfYear != 13) ? 30 : (isLeapYear(year) ? 6 : 5);\n-        FieldUtils.verifyValueBounds(\"dayOfMonth\", dayOfMonth, 1, dayLimit);\n+        FieldUtils.verifyValueBounds(DateTimeFieldType.dayOfMonth(), dayOfMonth, 1, dayLimit);\n \n         long instant = getYearMillis(year);\n \n--- a/JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticEraDateTimeField.java\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n+import org.joda.time.IllegalFieldValueException;\n import org.joda.time.field.BaseDateTimeField;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.field.UnsupportedDurationField;\n      */\n     public long set(long instant, String text, Locale locale) {\n         if (\"AM\".equals(text) == false) {\n-            throw new IllegalArgumentException(\"Invalid era text: \" + text);\n+            throw new IllegalFieldValueException(DateTimeFieldType.era(), text);\n         }\n         return instant;\n     }\n--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationField;\n+import org.joda.time.IllegalFieldValueException;\n import org.joda.time.Instant;\n import org.joda.time.ReadableInstant;\n import org.joda.time.field.BaseDateTimeField;\n                     }\n                     // Verify that new value stuck.\n                     if (get(instant) != value) {\n-                        throw new IllegalArgumentException\n-                            (\"Illegal value for \" + iGregorianField.getName() + \": \" + value);\n+                        throw new IllegalFieldValueException\n+                            (iGregorianField.getType(), new Integer(value), null, null);\n                     }\n                 }\n             } else {\n                     }\n                     // Verify that new value stuck.\n                     if (get(instant) != value) {\n-                        throw new IllegalArgumentException\n-                            (\"Illegal value for \" + iJulianField.getName() + \": \" + value);\n+                       throw new IllegalFieldValueException\n+                            (iJulianField.getType(), new Integer(value), null, null);\n                     }\n                 }\n             }\n--- a/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java\n import java.text.DateFormatSymbols;\n import java.util.WeakHashMap;\n import java.util.Locale;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.IllegalFieldValueException;\n \n /**\n  * Utility class used by a few of the GJDateTimeFields.\n                 return i;\n             }\n         }\n-        throw new IllegalArgumentException(\"Illegal era text: \" + text);\n+        throw new IllegalFieldValueException(DateTimeFieldType.era(), text);\n     }\n \n     public int getEraMaxTextLength() {\n         } catch (NumberFormatException ex) {\n             // ignore\n         }\n-        throw new IllegalArgumentException(\"Illegal monthOfYear text: \" + text);\n+        throw new IllegalFieldValueException(DateTimeFieldType.monthOfYear(), text);\n     }\n \n     public int getMonthMaxTextLength() {\n         } catch (NumberFormatException ex) {\n             // ignore\n         }\n-        throw new IllegalArgumentException(\"Illegal dayOfWeek text: \" + text);\n+        throw new IllegalFieldValueException(DateTimeFieldType.dayOfWeek(), text);\n     }\n \n     public int getDayOfWeekMaxTextLength() {\n                 return i;\n             }\n         }\n-        throw new IllegalArgumentException(\"Illegal halfday text: \" + text);\n+        throw new IllegalFieldValueException(DateTimeFieldType.halfdayOfDay(), text);\n     }\n \n     public int getHalfdayMaxTextLength() {\n--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.IllegalFieldValueException;\n import org.joda.time.field.SkipDateTimeField;\n \n /**\n     static int adjustYearForSet(int year) {\n         if (year <= 0) {\n             if (year == 0) {\n-                throw new IllegalArgumentException(\"Invalid year: \" + year);\n+                throw new IllegalFieldValueException\n+                    (DateTimeFieldType.year(), new Integer(year), null, null);\n             }\n             year++;\n         }\n--- a/JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ThaiBuddhistEraDateTimeField.java\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n+import org.joda.time.IllegalFieldValueException;\n import org.joda.time.field.BaseDateTimeField;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.field.UnsupportedDurationField;\n      */\n     public long set(long instant, String text, Locale locale) {\n         if (\"BE\".equals(text) == false) {\n-            throw new IllegalArgumentException(\"Invalid era text: \" + text);\n+            throw new IllegalFieldValueException(DateTimeFieldType.era(), text);\n         }\n         return instant;\n     }\n--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationField;\n+import org.joda.time.IllegalFieldValueException;\n import org.joda.time.field.BaseDateTimeField;\n import org.joda.time.field.BaseDurationField;\n \n \n             if (offset != offsetFromLocal) {\n                 if (get(instant) != value) {\n-                    throw new IllegalArgumentException\n-                        (\"Illegal value for \" + iField.getName() + \": \" + value);\n+                    throw new IllegalFieldValueException\n+                        (iField.getType(), new Integer(value), null, null);\n                 }\n             }\n \n--- a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n+import org.joda.time.IllegalFieldValueException;\n import org.joda.time.ReadablePartial;\n \n /**\n         try {\n             return Integer.parseInt(text);\n         } catch (NumberFormatException ex) {\n-            throw new IllegalArgumentException(\"Invalid \" + getName() + \" text: \" + text);\n+            throw new IllegalFieldValueException(getType(), text);\n         }\n     }\n \n--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n package org.joda.time.field;\n \n import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.IllegalFieldValueException;\n \n /**\n  * General utilities that don't fit elsewhere.\n      * @param value  the value to check\n      * @param lowerBound  the lower bound allowed for value\n      * @param upperBound  the upper bound allowed for value\n-     * @throws IllegalArgumentException if value is not in the specified bounds\n+     * @throws IllegalFieldValueException if value is not in the specified bounds\n      */\n     public static void verifyValueBounds(DateTimeField field, \n                                          int value, int lowerBound, int upperBound) {\n         if ((value < lowerBound) || (value > upperBound)) {\n-            throw new IllegalArgumentException(\n-                \"Value \"\n-                    + value\n-                    + \" for \"\n-                    + field.getName()\n-                    + \" must be in the range [\"\n-                    + lowerBound\n-                    + ','\n-                    + upperBound\n-                    + ']');\n+            throw new IllegalFieldValueException\n+                (field.getType(), new Integer(value),\n+                 new Integer(lowerBound), new Integer(upperBound));\n         }\n     }\n \n      * @param value  the value to check\n      * @param lowerBound  the lower bound allowed for value\n      * @param upperBound  the upper bound allowed for value\n-     * @throws IllegalArgumentException if value is not in the specified bounds\n+     * @throws IllegalFieldValueException if value is not in the specified bounds\n+     */\n+    public static void verifyValueBounds(DateTimeFieldType fieldType, \n+                                         int value, int lowerBound, int upperBound) {\n+        if ((value < lowerBound) || (value > upperBound)) {\n+            throw new IllegalFieldValueException\n+                (fieldType, new Integer(value),\n+                 new Integer(lowerBound), new Integer(upperBound));\n+        }\n+    }\n+\n+    /**\n+     * Verify that input values are within specified bounds.\n+     * \n+     * @param value  the value to check\n+     * @param lowerBound  the lower bound allowed for value\n+     * @param upperBound  the upper bound allowed for value\n+     * @throws IllegalFieldValueException if value is not in the specified bounds\n      */\n     public static void verifyValueBounds(String fieldName,\n                                          int value, int lowerBound, int upperBound) {\n         if ((value < lowerBound) || (value > upperBound)) {\n-            throw new IllegalArgumentException(\n-                \"Value \"\n-                    + value\n-                    + \" for \"\n-                    + fieldName\n-                    + \" must be in the range [\"\n-                    + lowerBound\n-                    + ','\n-                    + upperBound\n-                    + ']');\n+            throw new IllegalFieldValueException\n+                (fieldName, new Integer(value),\n+                 new Integer(lowerBound), new Integer(upperBound));\n         }\n     }\n \n--- a/JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.IllegalFieldValueException;\n \n /**\n  * Wraps another field such that a certain value is skipped.\n         FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());\n         if (value <= iSkip) {\n             if (value == iSkip) {\n-                throw new IllegalArgumentException(\"Invalid year: \" + value);\n+                throw new IllegalFieldValueException\n+                    (DateTimeFieldType.year(), new Integer(value), null, null);\n             }\n             value++;\n         }\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestDateTimeZone.suite());\n         suite.addTest(TestPeriodType.suite());\n //        suite.addTest(TestParseISO.suite());\n-        \n-        suite.addTest(TestSerialization.suite());\n+\n+        suite.addTest(TestIllegalFieldValueException.suite());\n+\n         return suite;\n     }\n \n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.field.FieldUtils;\n+import org.joda.time.field.SkipDateTimeField;\n+\n+/**\n+ * Tests IllegalFieldValueException by triggering it from other methods.\n+ *\n+ * @author Brian S O'Neill\n+ */\n+public class TestIllegalFieldValueException extends TestCase {\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestIllegalFieldValueException.class);\n+    }\n+\n+    public TestIllegalFieldValueException(String name) {\n+        super(name);\n+    }\n+\n+    public void testVerifyValueBounds() {\n+        try {\n+            FieldUtils.verifyValueBounds(Chronology.getISO().monthOfYear(), -5, 1, 31);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"monthOfYear\", e.getFieldName());\n+            assertEquals(new Integer(-5), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"-5\", e.getIllegalValueAsString());\n+            assertEquals(new Integer(1), e.getLowerBound());\n+            assertEquals(new Integer(31), e.getUpperBound());\n+        }\n+\n+        try {\n+            FieldUtils.verifyValueBounds(DateTimeFieldType.hourOfDay(), 27, 0, 23);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"hourOfDay\", e.getFieldName());\n+            assertEquals(new Integer(27), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"27\", e.getIllegalValueAsString());\n+            assertEquals(new Integer(0), e.getLowerBound());\n+            assertEquals(new Integer(23), e.getUpperBound());\n+        }\n+\n+        try {\n+            FieldUtils.verifyValueBounds(\"foo\", 1, 2, 3);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(null, e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"foo\", e.getFieldName());\n+            assertEquals(new Integer(1), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"1\", e.getIllegalValueAsString());\n+            assertEquals(new Integer(2), e.getLowerBound());\n+            assertEquals(new Integer(3), e.getUpperBound());\n+        }\n+    }\n+\n+    public void testSkipDateTimeField() {\n+        DateTimeField field = new SkipDateTimeField\n+            (Chronology.getISOUTC(), Chronology.getISOUTC().year(), 1970);\n+        try {\n+            field.set(0, 1970);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"year\", e.getFieldName());\n+            assertEquals(new Integer(1970), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"1970\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+    }\n+\n+    public void testSetText() {\n+        try {\n+            Chronology.getISOUTC().year().set(0, null, java.util.Locale.US);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"year\", e.getFieldName());\n+            assertEquals(null, e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"null\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        try {\n+            Chronology.getISOUTC().year().set(0, \"nineteen seventy\", java.util.Locale.US);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"year\", e.getFieldName());\n+            assertEquals(null, e.getIllegalNumberValue());\n+            assertEquals(\"nineteen seventy\", e.getIllegalStringValue());\n+            assertEquals(\"nineteen seventy\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        try {\n+            Chronology.getISOUTC().era().set(0, \"long ago\", java.util.Locale.US);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"era\", e.getFieldName());\n+            assertEquals(null, e.getIllegalNumberValue());\n+            assertEquals(\"long ago\", e.getIllegalStringValue());\n+            assertEquals(\"long ago\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        try {\n+            Chronology.getISOUTC().monthOfYear().set(0, \"spring\", java.util.Locale.US);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"monthOfYear\", e.getFieldName());\n+            assertEquals(null, e.getIllegalNumberValue());\n+            assertEquals(\"spring\", e.getIllegalStringValue());\n+            assertEquals(\"spring\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        try {\n+            Chronology.getISOUTC().dayOfWeek().set(0, \"yesterday\", java.util.Locale.US);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"dayOfWeek\", e.getFieldName());\n+            assertEquals(null, e.getIllegalNumberValue());\n+            assertEquals(\"yesterday\", e.getIllegalStringValue());\n+            assertEquals(\"yesterday\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        try {\n+            Chronology.getISOUTC().halfdayOfDay().set(0, \"morning\", java.util.Locale.US);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"halfdayOfDay\", e.getFieldName());\n+            assertEquals(null, e.getIllegalNumberValue());\n+            assertEquals(\"morning\", e.getIllegalStringValue());\n+            assertEquals(\"morning\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+    }\n+\n+    public void testZoneTransition() {\n+        DateTime dt = new DateTime\n+            (2005, 4, 3, 1, 0, 0, 0, DateTimeZone.forID(\"America/Los_Angeles\"));\n+        try {\n+            dt.hourOfDay().setCopy(2);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.hourOfDay(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"hourOfDay\", e.getFieldName());\n+            assertEquals(new Integer(2), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"2\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+    }\n+\n+    public void testJulianYearZero() {\n+        DateTime dt = new DateTime(Chronology.getJulianUTC());\n+        try {\n+            dt.year().setCopy(0);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"year\", e.getFieldName());\n+            assertEquals(new Integer(0), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"0\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+    }\n+\n+    public void testGJCutover() {\n+        DateTime dt = new DateTime(\"1582-10-04\", Chronology.getGJUTC());\n+        try {\n+            dt.dayOfMonth().setCopy(5);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"dayOfMonth\", e.getFieldName());\n+            assertEquals(new Integer(5), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"5\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        dt = new DateTime(\"1582-10-15\", Chronology.getGJUTC());\n+        try {\n+            dt.dayOfMonth().setCopy(14);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"dayOfMonth\", e.getFieldName());\n+            assertEquals(new Integer(14), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"14\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+    }\n+\n+    public void testReadablePartialValidate() {\n+        try {\n+            new YearMonthDay(1970, -5, 1);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"monthOfYear\", e.getFieldName());\n+            assertEquals(new Integer(-5), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"-5\", e.getIllegalValueAsString());\n+            assertEquals(new Integer(1), e.getLowerBound());\n+            assertEquals(null, e.getUpperBound());\n+        }\n+\n+        try {\n+            new YearMonthDay(1970, 500, 1);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"monthOfYear\", e.getFieldName());\n+            assertEquals(new Integer(500), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"500\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(new Integer(12), e.getUpperBound());\n+        }\n+\n+        try {\n+            new YearMonthDay(1970, 2, 30);\n+            fail();\n+        } catch (IllegalFieldValueException e) {\n+            assertEquals(DateTimeFieldType.dayOfMonth(), e.getDateTimeFieldType());\n+            assertEquals(null, e.getDurationFieldType());\n+            assertEquals(\"dayOfMonth\", e.getFieldName());\n+            assertEquals(new Integer(30), e.getIllegalNumberValue());\n+            assertEquals(null, e.getIllegalStringValue());\n+            assertEquals(\"30\", e.getIllegalValueAsString());\n+            assertEquals(null, e.getLowerBound());\n+            assertEquals(new Integer(28), e.getUpperBound());\n+        }\n+    }\n+\n+    // Test extra constructors not currently called by anything\n+    public void testOtherConstructors() {\n+        IllegalFieldValueException e = new IllegalFieldValueException\n+            (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n+        assertEquals(null, e.getDateTimeFieldType());\n+        assertEquals(DurationFieldType.days(), e.getDurationFieldType());\n+        assertEquals(\"days\", e.getFieldName());\n+        assertEquals(new Integer(1), e.getIllegalNumberValue());\n+        assertEquals(null, e.getIllegalStringValue());\n+        assertEquals(\"1\", e.getIllegalValueAsString());\n+        assertEquals(new Integer(2), e.getLowerBound());\n+        assertEquals(new Integer(3), e.getUpperBound());\n+\n+        e = new IllegalFieldValueException(DurationFieldType.months(), \"five\");\n+        assertEquals(null, e.getDateTimeFieldType());\n+        assertEquals(DurationFieldType.months(), e.getDurationFieldType());\n+        assertEquals(\"months\", e.getFieldName());\n+        assertEquals(null, e.getIllegalNumberValue());\n+        assertEquals(\"five\", e.getIllegalStringValue());\n+        assertEquals(\"five\", e.getIllegalValueAsString());\n+        assertEquals(null, e.getLowerBound());\n+        assertEquals(null, e.getUpperBound());\n+\n+        e = new IllegalFieldValueException(\"months\", \"five\");\n+        assertEquals(null, e.getDateTimeFieldType());\n+        assertEquals(null, e.getDurationFieldType());\n+        assertEquals(\"months\", e.getFieldName());\n+        assertEquals(null, e.getIllegalNumberValue());\n+        assertEquals(\"five\", e.getIllegalStringValue());\n+        assertEquals(\"five\", e.getIllegalValueAsString());\n+        assertEquals(null, e.getLowerBound());\n+        assertEquals(null, e.getUpperBound());\n+    }\n+}", "timestamp": 1117477237, "metainfo": ""}