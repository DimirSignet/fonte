{"sha": "a7210d05fc3669383277fdf1305d04406bf1b9e0", "log": "Update from testing   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/convert/ConverterManager.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ConverterManager.java\n  * <li>Calendar\n  * <li>Date\n  * <li>Long (milliseconds)\n+ * <li>null (now)\n  * </ul>\n  * The default duration converters are:\n  * <ul>\n  * <li>ReadableInterval\n  * <li>String\n  * <li>Long (milliseconds)\n+ * <li>null (zero ms)\n  * </ul>\n  *\n  * The default interval converters are:\n      * @return replaced converter, or null\n      */\n     public InstantConverter addInstantConverter(InstantConverter converter)\n-        throws SecurityException\n-    {\n+            throws SecurityException {\n+        \n         checkAlterInstantConverters();\n         if (converter == null) {\n             return null;\n      * @return replaced converter, or null\n      */\n     public InstantConverter removeInstantConverter(InstantConverter converter)\n-        throws SecurityException\n-    {\n+            throws SecurityException {\n+        \n         checkAlterInstantConverters();\n         if (converter == null) {\n             return null;\n     }\n     \n     /**\n-     * Removes a converter from the set of converters, by index.\n-     * \n-     * @param index  the index to remove\n-     * @return replaced converter, or null\n-     * @throws IndexOutOfBoundsException if the index is invalid\n-     */\n-    public InstantConverter removeInstantConverter(int index) throws SecurityException {\n-        checkAlterInstantConverters();\n-        InstantConverter[] removed = new InstantConverter[1];\n-        iInstantConverters = iInstantConverters.remove(index, removed);\n-        return removed[0];\n-    }\n-\n+     * Checks whether the user has permission 'ConverterManager.alterInstantConverters'.\n+     * \n+     * @throws SecurityException if the user does not have the permission\n+     */\n     private void checkAlterInstantConverters() throws SecurityException {\n         SecurityManager sm = System.getSecurityManager();\n         if (sm != null) {\n      * @return replaced converter, or null\n      */\n     public DurationConverter addDurationConverter(DurationConverter converter)\n-        throws SecurityException\n-    {\n+            throws SecurityException {\n+        \n         checkAlterDurationConverters();\n         if (converter == null) {\n             return null;\n      * @return replaced converter, or null\n      */\n     public DurationConverter removeDurationConverter(DurationConverter converter)\n-        throws SecurityException\n-    {\n+            throws SecurityException {\n+        \n         checkAlterDurationConverters();\n         if (converter == null) {\n             return null;\n     }\n     \n     /**\n-     * Removes a converter from the set of converters, by index.\n-     * \n-     * @param index  the index to remove\n-     * @return replaced converter, or null\n-     * @throws IndexOutOfBoundsException if the index is invalid\n-     */\n-    public DurationConverter removeDurationConverter(int index) throws SecurityException {\n-        checkAlterDurationConverters();\n-        DurationConverter[] removed = new DurationConverter[1];\n-        iDurationConverters = iDurationConverters.remove(index, removed);\n-        return removed[0];\n-    }\n-\n+     * Checks whether the user has permission 'ConverterManager.alterInstantConverters'.\n+     * \n+     * @throws SecurityException if the user does not have the permission\n+     */\n     private void checkAlterDurationConverters() throws SecurityException {\n         SecurityManager sm = System.getSecurityManager();\n         if (sm != null) {\n      * @return replaced converter, or null\n      */\n     public IntervalConverter addIntervalConverter(IntervalConverter converter) \n-        throws SecurityException\n-    {\n+            throws SecurityException {\n+        \n         checkAlterIntervalConverters();\n         if (converter == null) {\n             return null;\n      * @return replaced converter, or null\n      */\n     public IntervalConverter removeIntervalConverter(IntervalConverter converter)\n-        throws SecurityException\n-    {\n+            throws SecurityException {\n+        \n         checkAlterIntervalConverters();\n         if (converter == null) {\n             return null;\n     }\n     \n     /**\n-     * Removes a converter from the set of converters, by index.\n-     * \n-     * @param index  the index to remove\n-     * @return replaced converter, or null\n-     * @throws IndexOutOfBoundsException if the index is invalid\n-     */\n-    public IntervalConverter removeIntervalConverter(int index) throws SecurityException {\n-        checkAlterIntervalConverters();\n-        IntervalConverter[] removed = new IntervalConverter[1];\n-        iIntervalConverters = iIntervalConverters.remove(index, removed);\n-        return removed[0];\n-    }\n-\n+     * Checks whether the user has permission 'ConverterManager.alterInstantConverters'.\n+     * \n+     * @throws SecurityException if the user does not have the permission\n+     */\n     private void checkAlterIntervalConverters() throws SecurityException {\n         SecurityManager sm = System.getSecurityManager();\n         if (sm != null) {\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a debug representation of the object\n+     * Gets a debug representation of the object.\n      */\n     public String toString() {\n         return \"ConverterManager[\" +\n-            iInstantConverters.size() + \" instant converters,\" +\n-            iDurationConverters.size() + \" duration converters,\" +\n-            iIntervalConverters.size() + \" interval converters]\";\n+            iInstantConverters.size() + \" instant,\" +\n+            iDurationConverters.size() + \" duration,\" +\n+            iIntervalConverters.size() + \" interval]\";\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/convert/ConverterSet.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ConverterSet.java\n      * @throws IllegalStateException if multiple converters match the type\n      * equally well\n      */\n-    public Converter select(Class type) throws IllegalStateException {\n+    Converter select(Class type) throws IllegalStateException {\n         // Check the hashtable first.\n         Entry[] entries = iSelectEntries;\n         int length = entries.length;\n     /**\n      * Returns the amount of converters in the set.\n      */\n-    public int size() {\n+    int size() {\n         return iConverters.length;\n     }\n \n     /**\n      * Copies all the converters in the set to the given array.\n      */\n-    public void copyInto(Converter[] converters) {\n+    void copyInto(Converter[] converters) {\n         System.arraycopy(iConverters, 0, converters, 0, iConverters.length);\n     }\n \n      * it. If the converter is exactly the same as one already in the set, the\n      * original set is returned.\n      *\n-     * @param converter converter to add\n-     * @param removed if not null, element 0 is set to the removed converter\n-     * @throws IllegalArgumentException if converter is null\n-     */\n-    public ConverterSet add(Converter converter, Converter[] removed) {\n-        if (converter == null) {\n-            throw new IllegalArgumentException();\n-        }\n-\n+     * @param converter  converter to add, must not be null\n+     * @param removed  if not null, element 0 is set to the removed converter\n+     * @throws NullPointerException if converter is null\n+     */\n+    ConverterSet add(Converter converter, Converter[] removed) {\n         Converter[] converters = iConverters;\n         int length = converters.length;\n \n      * Returns a copy of this set, with the given converter removed. If the\n      * converter was not in the set, the original set is returned.\n      *\n-     * @param converter converter to remove\n-     * @param removed if not null, element 0 is set to the removed converter\n+     * @param converter  converter to remove, must not be null\n+     * @param removed  if not null, element 0 is set to the removed converter\n      * @throws NullPointerException if converter is null\n      */\n-    public ConverterSet remove(Converter converter, Converter[] removed) {\n+    ConverterSet remove(Converter converter, Converter[] removed) {\n         Converter[] converters = iConverters;\n         int length = converters.length;\n \n      * @param removed if not null, element 0 is set to the removed converter\n      * @throws IndexOutOfBoundsException if the index is invalid\n      */\n-    public ConverterSet remove(final int index, Converter[] removed) {\n+    ConverterSet remove(final int index, Converter[] removed) {\n         Converter[] converters = iConverters;\n         int length = converters.length;\n         if (index >= length) {\n         throw new IllegalStateException(msg.toString());\n     }\n \n-    private static class Entry {\n-        public final Class iType;\n-        public final Converter iConverter;\n+    static class Entry {\n+        final Class iType;\n+        final Converter iConverter;\n \n         Entry(Class type, Converter converter) {\n             iType = type;\n--- a/JodaTime/src/java/org/joda/time/property/AbstractReadableInstantFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/property/AbstractReadableInstantFieldProperty.java\n import java.util.Locale;\n import java.io.Serializable;\n import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeUtils;\n import org.joda.time.DurationField;\n import org.joda.time.ReadableInstant;\n \n      * matches that of compareTo. In other words, this field property's instant\n      * is the minuend.\n      *\n-     * @param instant the subtrahend\n+     * @param instant  the subtrahend, null means now\n      * @return the difference in the units of this field\n      * @see DateTimeField#getDifference\n      */\n     public int getDifference(ReadableInstant instant) {\n         if (instant == null) {\n-            throw new IllegalArgumentException(\"The instant must not be null\");\n+            return getField().getDifference(getReadableInstant().getMillis(), DateTimeUtils.currentTimeMillis());\n         }\n         return getField().getDifference(getReadableInstant().getMillis(), instant.getMillis());\n     }\n      * matches that of compareTo. In other words, this field property's instant\n      * is the minuend.\n      *\n-     * @param instant the subtrahend\n+     * @param instant  the subtrahend, null means now\n      * @return the difference in the units of this field\n      * @see DateTimeField#getDifference\n      */\n     public long getDifferenceAsLong(ReadableInstant instant) {\n         if (instant == null) {\n-            throw new IllegalArgumentException(\"The instant must not be null\");\n+            return getField().getDifferenceAsLong(getReadableInstant().getMillis(), DateTimeUtils.currentTimeMillis());\n         }\n         return getField().getDifferenceAsLong(getReadableInstant().getMillis(), instant.getMillis());\n     }", "timestamp": 1090191027, "metainfo": ""}