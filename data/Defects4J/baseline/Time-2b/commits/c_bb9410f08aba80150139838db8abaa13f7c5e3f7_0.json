{"sha": "bb9410f08aba80150139838db8abaa13f7c5e3f7", "log": "Test LocalDate Buddhist serialisation  ", "commit": "\n--- a/JodaTime/src/test/java/org/joda/time/TestSerialization.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestSerialization.java\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n     //-----------------------------------------------------------------------\n     public void testSerializedInstant() throws Exception {\n         Instant test = new Instant();\n-        loadAndCompare(test, \"Instant.dat\", false);\n+        loadAndCompare(test, \"Instant\", false);\n         inlineCompare(test, false);\n     }\n \n     public void testSerializedDateTime() throws Exception {\n         DateTime test = new DateTime();\n-        loadAndCompare(test, \"DateTime.dat\", false);\n+        loadAndCompare(test, \"DateTime\", false);\n         inlineCompare(test, false);\n     }\n \n     public void testSerializedDateTimeProperty() throws Exception {\n         DateTime.Property test = new DateTime().hourOfDay();\n-        loadAndCompare(test, \"DateTimeProperty.dat\", false);\n+        loadAndCompare(test, \"DateTimeProperty\", false);\n         inlineCompare(test, false);\n     }\n \n     public void testSerializedMutableDateTime() throws Exception {\n         MutableDateTime test = new MutableDateTime();\n-        loadAndCompare(test, \"MutableDateTime.dat\", false);\n+        loadAndCompare(test, \"MutableDateTime\", false);\n         inlineCompare(test, false);\n     }\n \n     public void testSerializedMutableDateTimeProperty() throws Exception {\n         MutableDateTime.Property test = new MutableDateTime().hourOfDay();\n-        loadAndCompare(test, \"MutableDateTimeProperty.dat\", false);\n+        loadAndCompare(test, \"MutableDateTimeProperty\", false);\n         inlineCompare(test, false);\n     }\n \n     public void testSerializedDateMidnight() throws Exception {\n         DateMidnight test = new DateMidnight();\n-        loadAndCompare(test, \"DateMidnight.dat\", false);\n+        loadAndCompare(test, \"DateMidnight\", false);\n         inlineCompare(test, false);\n     }\n \n     public void testSerializedDateMidnightProperty() throws Exception {\n         DateMidnight.Property test = new DateMidnight().monthOfYear();\n-        loadAndCompare(test, \"DateMidnightProperty.dat\", false);\n+        loadAndCompare(test, \"DateMidnightProperty\", false);\n         inlineCompare(test, false);\n     }\n \n     public void testSerializedLocalDate() throws Exception {\n         LocalDate test = new LocalDate();\n-        loadAndCompare(test, \"LocalDate.dat\", false);\n+        loadAndCompare(test, \"LocalDate\", false);\n+        inlineCompare(test, false);\n+    }\n+\n+    public void testSerializedLocalDateBuddhist() throws Exception {\n+        LocalDate test = new LocalDate(BuddhistChronology.getInstanceUTC());\n+        loadAndCompare(test, \"LocalDateBuddhist\", false);\n         inlineCompare(test, false);\n     }\n \n     public void testSerializedLocalTime() throws Exception {\n         LocalTime test = new LocalTime();\n-        loadAndCompare(test, \"LocalTime.dat\", false);\n+        loadAndCompare(test, \"LocalTime\", false);\n         inlineCompare(test, false);\n     }\n \n     public void testSerializedLocalDateTime() throws Exception {\n         LocalDateTime test = new LocalDateTime();\n-        loadAndCompare(test, \"LocalDateTime.dat\", false);\n+        loadAndCompare(test, \"LocalDateTime\", false);\n         inlineCompare(test, false);\n     }\n \n     public void testSerializedYearMonthDay() throws Exception {\n         YearMonthDay test = new YearMonthDay();\n-        loadAndCompare(test, \"YearMonthDay.dat\", false);\n+        loadAndCompare(test, \"YearMonthDay\", false);\n         inlineCompare(test, false);\n     }\n \n     public void testSerializedTimeOfDay() throws Exception {\n         TimeOfDay test = new TimeOfDay();\n-        loadAndCompare(test, \"TimeOfDay.dat\", false);\n+        loadAndCompare(test, \"TimeOfDay\", false);\n         inlineCompare(test, false);\n     }\n \n     public void testSerializedDateTimeZoneUTC() throws Exception {\n         DateTimeZone test = DateTimeZone.UTC;\n-        loadAndCompare(test, \"DateTimeZoneUTC.dat\", true);\n+        loadAndCompare(test, \"DateTimeZoneUTC\", true);\n         inlineCompare(test, true);\n     }\n \n         // have to re-get the zone, as TestDateTimeZone may have\n         // changed the cache, or a SoftReference may have got cleared\n         DateTimeZone test = DateTimeZone.forID(\"Europe/Paris\");\n-        loadAndCompare(test, \"DateTimeZone.dat\", true);\n+        loadAndCompare(test, \"DateTimeZone\", true);\n         inlineCompare(test, true);\n     }\n \n     public void testSerializedCopticChronology() throws Exception {\n         CopticChronology test = CopticChronology.getInstance(LONDON);\n-        loadAndCompare(test, \"CopticChronology.dat\", true);\n+        loadAndCompare(test, \"CopticChronology\", true);\n         inlineCompare(test, true);\n     }\n \n     public void testSerializedISOChronology() throws Exception {\n         ISOChronology test = ISOChronology.getInstance(PARIS);\n-        loadAndCompare(test, \"ISOChronology.dat\", true);\n+        loadAndCompare(test, \"ISOChronology\", true);\n         inlineCompare(test, true);\n     }\n \n     public void testSerializedGJChronology() throws Exception {\n         GJChronology test = GJChronology.getInstance(TOKYO);\n-        loadAndCompare(test, \"GJChronology.dat\", true);\n+        loadAndCompare(test, \"GJChronology\", true);\n         inlineCompare(test, true);\n     }\n \n     public void testSerializedGJChronologyChangedInternals() throws Exception {\n         GJChronology test = GJChronology.getInstance(PARIS, 123L, 2);\n-        loadAndCompare(test, \"GJChronologyChangedInternals.dat\", true);\n+        loadAndCompare(test, \"GJChronologyChangedInternals\", true);\n         inlineCompare(test, true);\n     }\n \n     public void testSerializedGregorianChronology() throws Exception {\n         GregorianChronology test = GregorianChronology.getInstance(PARIS);\n-        loadAndCompare(test, \"GregorianChronology.dat\", true);\n+        loadAndCompare(test, \"GregorianChronology\", true);\n         inlineCompare(test, true);\n     }\n \n     public void testSerializedJulianChronology() throws Exception {\n         JulianChronology test = JulianChronology.getInstance(PARIS);\n-        loadAndCompare(test, \"JulianChronology.dat\", true);\n+        loadAndCompare(test, \"JulianChronology\", true);\n         inlineCompare(test, true);\n     }\n \n     public void testSerializedBuddhistChronology() throws Exception {\n         BuddhistChronology test = BuddhistChronology.getInstance(PARIS);\n-        loadAndCompare(test, \"BuddhistChronology.dat\", true);\n+        loadAndCompare(test, \"BuddhistChronology\", true);\n         inlineCompare(test, true);\n     }\n \n     public void testSerializedPeriodType() throws Exception {\n         PeriodType test = PeriodType.dayTime();\n-        loadAndCompare(test, \"PeriodType.dat\", false);\n+        loadAndCompare(test, \"PeriodType\", false);\n         inlineCompare(test, false);\n     }\n \n     public void testSerializedDateTimeFieldType() throws Exception {\n         DateTimeFieldType test = DateTimeFieldType.clockhourOfDay();\n-        loadAndCompare(test, \"DateTimeFieldType.dat\", true);\n+        loadAndCompare(test, \"DateTimeFieldType\", true);\n         inlineCompare(test, true);\n     }\n \n         UnsupportedDateTimeField test = UnsupportedDateTimeField.getInstance(\n                 DateTimeFieldType.year(),\n                 UnsupportedDurationField.getInstance(DurationFieldType.years()));\n-        loadAndCompare(test, \"UnsupportedDateTimeField.dat\", true);\n+        loadAndCompare(test, \"UnsupportedDateTimeField\", true);\n         inlineCompare(test, true);\n     }\n \n     private void loadAndCompare(Serializable test, String filename, boolean same) throws Exception {\n-        FileInputStream fis = new FileInputStream(\"src/test/resources/\" + filename);\n+        FileInputStream fis = new FileInputStream(\"src/test/resources/\" + filename + \".dat\");\n         ObjectInputStream ois = new ObjectInputStream(fis);\n         Object obj = ois.readObject();\n         ois.close();\n             assertSame(test, obj);\n         } else {\n             assertEquals(test, obj);\n+        }\n+        \n+        try {\n+            fis = new FileInputStream(\"src/test/resources/\" + filename + \"2.dat\");\n+            ois = new ObjectInputStream(fis);\n+            obj = ois.readObject();\n+            ois.close();\n+            if (same) {\n+                assertSame(test, obj);\n+            } else {\n+                assertEquals(test, obj);\n+            }\n+        } catch (FileNotFoundException ex) {\n+            // ignore\n         }\n     }\n \n //        store(test, \"LocalDate.dat\");\n //    }\n //\n+//    public void testStoreSerializedLocalDateBuddhist() throws Exception {\n+//        LocalDate test = new LocalDate(BuddhistChronology.getInstanceUTC());\n+//        store(test, \"LocalDateBuddhist.dat\");\n+//    }\n+//\n //    public void testStoreSerializedLocalTime() throws Exception {\n //        LocalTime test = new LocalTime();\n //        store(test, \"LocalTime.dat\");", "timestamp": 1291595652, "metainfo": ""}