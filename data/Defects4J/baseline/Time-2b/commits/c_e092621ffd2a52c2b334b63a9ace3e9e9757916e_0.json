{"sha": "e092621ffd2a52c2b334b63a9ace3e9e9757916e", "log": "Reflect changes in property package class renames.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/MutableDateOnly.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateOnly.java\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.DurationConverter;\n import org.joda.time.format.ISODateTimeFormat;\n-import org.joda.time.property.MutableDateTimeFieldProperty;\n+import org.joda.time.property.ReadWritableInstantFieldProperty;\n \n /**\n  * MutableDateOnly is the basic implementation of a modifiable date only class.\n      * \n      * @return the day of week property\n      */\n-    public final MutableDateTimeFieldProperty dayOfWeek() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().dayOfWeek());\n+    public final ReadWritableInstantFieldProperty dayOfWeek() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().dayOfWeek());\n     }\n \n     /**\n      * \n      * @return the day of month property\n      */\n-    public final MutableDateTimeFieldProperty dayOfMonth() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().dayOfMonth());\n+    public final ReadWritableInstantFieldProperty dayOfMonth() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().dayOfMonth());\n     }\n \n     /**\n      * \n      * @return the day of year property\n      */\n-    public final MutableDateTimeFieldProperty dayOfYear() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().dayOfYear());\n+    public final ReadWritableInstantFieldProperty dayOfYear() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().dayOfYear());\n     }\n \n     /**\n      * \n      * @return the week of a week based year property\n      */\n-    public final MutableDateTimeFieldProperty weekOfWeekyear() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().weekOfWeekyear());\n+    public final ReadWritableInstantFieldProperty weekOfWeekyear() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().weekOfWeekyear());\n     }\n \n     /**\n      * \n      * @return the year of a week based year property\n      */\n-    public final MutableDateTimeFieldProperty weekyear() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().weekyear());\n+    public final ReadWritableInstantFieldProperty weekyear() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().weekyear());\n     }\n \n     /**\n      * \n      * @return the month of year property\n      */\n-    public final MutableDateTimeFieldProperty monthOfYear() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().monthOfYear());\n+    public final ReadWritableInstantFieldProperty monthOfYear() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().monthOfYear());\n     }\n \n     /**\n      * \n      * @return the year property\n      */\n-    public final MutableDateTimeFieldProperty year() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().year());\n+    public final ReadWritableInstantFieldProperty year() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().year());\n     }\n \n     /**\n      * \n      * @return the year of era property\n      */\n-    public final MutableDateTimeFieldProperty yearOfEra() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().yearOfEra());\n+    public final ReadWritableInstantFieldProperty yearOfEra() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().yearOfEra());\n     }\n \n     /**\n      * \n      * @return the year of era property\n      */\n-    public final MutableDateTimeFieldProperty yearOfCentury() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().yearOfCentury());\n+    public final ReadWritableInstantFieldProperty yearOfCentury() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().yearOfCentury());\n     }\n \n     /**\n      * \n      * @return the year of era property\n      */\n-    public final MutableDateTimeFieldProperty centuryOfEra() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().centuryOfEra());\n+    public final ReadWritableInstantFieldProperty centuryOfEra() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().centuryOfEra());\n     }\n \n     /**\n      * \n      * @return the era property\n      */\n-    public final MutableDateTimeFieldProperty era() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().era());\n+    public final ReadWritableInstantFieldProperty era() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().era());\n     }\n \n     // Misc\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n import org.joda.time.convert.DurationConverter;\n import org.joda.time.convert.InstantConverter;\n import org.joda.time.format.ISODateTimeFormat;\n-import org.joda.time.property.MutableDateTimeFieldProperty;\n+import org.joda.time.property.ReadWritableInstantFieldProperty;\n \n /**\n  * MutableDateTime is the standard implementation of a modifiable datetime class.\n      * \n      * @return the era property\n      */\n-    public MutableDateTimeFieldProperty era() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().era());\n+    public ReadWritableInstantFieldProperty era() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().era());\n     }\n \n     /**\n      * \n      * @return the year of era property\n      */\n-    public MutableDateTimeFieldProperty centuryOfEra() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().centuryOfEra());\n+    public ReadWritableInstantFieldProperty centuryOfEra() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().centuryOfEra());\n     }\n \n     /**\n      * \n      * @return the year of era property\n      */\n-    public MutableDateTimeFieldProperty yearOfCentury() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().yearOfCentury());\n+    public ReadWritableInstantFieldProperty yearOfCentury() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().yearOfCentury());\n     }\n \n     /**\n      * \n      * @return the year of era property\n      */\n-    public MutableDateTimeFieldProperty yearOfEra() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().yearOfEra());\n+    public ReadWritableInstantFieldProperty yearOfEra() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().yearOfEra());\n     }\n \n     /**\n      * \n      * @return the year property\n      */\n-    public MutableDateTimeFieldProperty year() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().year());\n+    public ReadWritableInstantFieldProperty year() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().year());\n     }\n \n     /**\n      * \n      * @return the year of a week based year property\n      */\n-    public MutableDateTimeFieldProperty weekyear() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().weekyear());\n+    public ReadWritableInstantFieldProperty weekyear() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().weekyear());\n     }\n \n     /**\n      * \n      * @return the month of year property\n      */\n-    public MutableDateTimeFieldProperty monthOfYear() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().monthOfYear());\n+    public ReadWritableInstantFieldProperty monthOfYear() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().monthOfYear());\n     }\n \n     /**\n      * \n      * @return the week of a week based year property\n      */\n-    public MutableDateTimeFieldProperty weekOfWeekyear() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().weekOfWeekyear());\n+    public ReadWritableInstantFieldProperty weekOfWeekyear() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().weekOfWeekyear());\n     }\n \n     /**\n      * \n      * @return the day of year property\n      */\n-    public MutableDateTimeFieldProperty dayOfYear() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().dayOfYear());\n+    public ReadWritableInstantFieldProperty dayOfYear() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().dayOfYear());\n     }\n \n     /**\n      * \n      * @return the day of month property\n      */\n-    public MutableDateTimeFieldProperty dayOfMonth() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().dayOfMonth());\n+    public ReadWritableInstantFieldProperty dayOfMonth() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().dayOfMonth());\n     }\n \n     /**\n      * \n      * @return the day of week property\n      */\n-    public MutableDateTimeFieldProperty dayOfWeek() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().dayOfWeek());\n+    public ReadWritableInstantFieldProperty dayOfWeek() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().dayOfWeek());\n     }\n \n     // Time properties\n      * \n      * @return the hour of day property\n      */\n-    public MutableDateTimeFieldProperty hourOfDay() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().hourOfDay());\n+    public ReadWritableInstantFieldProperty hourOfDay() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().hourOfDay());\n     }\n \n     /**\n      * \n      * @return the minute of day property\n      */\n-    public MutableDateTimeFieldProperty minuteOfDay() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().minuteOfDay());\n+    public ReadWritableInstantFieldProperty minuteOfDay() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().minuteOfDay());\n     }\n \n     /**\n      * \n      * @return the minute of hour property\n      */\n-    public MutableDateTimeFieldProperty minuteOfHour() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().minuteOfHour());\n+    public ReadWritableInstantFieldProperty minuteOfHour() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().minuteOfHour());\n     }\n \n     /**\n      * \n      * @return the second of day property\n      */\n-    public MutableDateTimeFieldProperty secondOfDay() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().secondOfDay());\n+    public ReadWritableInstantFieldProperty secondOfDay() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().secondOfDay());\n     }\n \n     /**\n      * \n      * @return the second of minute property\n      */\n-    public MutableDateTimeFieldProperty secondOfMinute() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().secondOfMinute());\n+    public ReadWritableInstantFieldProperty secondOfMinute() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().secondOfMinute());\n     }\n \n     /**\n      * \n      * @return the millis of day property\n      */\n-    public MutableDateTimeFieldProperty millisOfDay() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().millisOfDay());\n+    public ReadWritableInstantFieldProperty millisOfDay() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().millisOfDay());\n     }\n \n     /**\n      * \n      * @return the millis of second property\n      */\n-    public MutableDateTimeFieldProperty millisOfSecond() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().millisOfSecond());\n+    public ReadWritableInstantFieldProperty millisOfSecond() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().millisOfSecond());\n     }\n \n     // Misc\n--- a/JodaTime/src/java/org/joda/time/MutableTimeOnly.java\n+++ b/JodaTime/src/java/org/joda/time/MutableTimeOnly.java\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.DurationConverter;\n import org.joda.time.format.ISODateTimeFormat;\n-import org.joda.time.property.MutableDateTimeFieldProperty;\n+import org.joda.time.property.ReadWritableInstantFieldProperty;\n \n /**\n  * MutableTimeOnly is the basic implementation of a modifiable time only class.\n      * \n      * @return the hour of day property\n      */\n-    public final MutableDateTimeFieldProperty hourOfDay() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().hourOfDay());\n+    public final ReadWritableInstantFieldProperty hourOfDay() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().hourOfDay());\n     }\n \n     /**\n      * \n      * @return the clockhour of day property\n      */\n-    public final MutableDateTimeFieldProperty clockhourOfDay() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().clockhourOfDay());\n+    public final ReadWritableInstantFieldProperty clockhourOfDay() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().clockhourOfDay());\n     }\n \n     /**\n      * \n      * @return the hour of halfday property\n      */\n-    public final MutableDateTimeFieldProperty hourOfHalfday() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().hourOfHalfday());\n+    public final ReadWritableInstantFieldProperty hourOfHalfday() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().hourOfHalfday());\n     }\n \n     /**\n      * \n      * @return the clockhour of halfday property\n      */\n-    public final MutableDateTimeFieldProperty clockhourOfHalfday() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().clockhourOfHalfday());\n+    public final ReadWritableInstantFieldProperty clockhourOfHalfday() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().clockhourOfHalfday());\n     }\n \n     /**\n      * \n      * @return the halfday of day property\n      */\n-    public final MutableDateTimeFieldProperty halfdayOfDay() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().halfdayOfDay());\n+    public final ReadWritableInstantFieldProperty halfdayOfDay() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().halfdayOfDay());\n     }\n \n     /**\n      * \n      * @return the minute of day property\n      */\n-    public final MutableDateTimeFieldProperty minuteOfDay() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().minuteOfDay());\n+    public final ReadWritableInstantFieldProperty minuteOfDay() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().minuteOfDay());\n     }\n \n     /**\n      * \n      * @return the minute of hour property\n      */\n-    public final MutableDateTimeFieldProperty minuteOfHour() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().minuteOfHour());\n+    public final ReadWritableInstantFieldProperty minuteOfHour() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().minuteOfHour());\n     }\n \n     /**\n      * \n      * @return the second of day property\n      */\n-    public final MutableDateTimeFieldProperty secondOfDay() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().secondOfDay());\n+    public final ReadWritableInstantFieldProperty secondOfDay() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().secondOfDay());\n     }\n \n     /**\n      * \n      * @return the second of minute property\n      */\n-    public final MutableDateTimeFieldProperty secondOfMinute() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().secondOfMinute());\n+    public final ReadWritableInstantFieldProperty secondOfMinute() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().secondOfMinute());\n     }\n \n     /**\n      * \n      * @return the millis of day property\n      */\n-    public final MutableDateTimeFieldProperty millisOfDay() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().millisOfDay());\n+    public final ReadWritableInstantFieldProperty millisOfDay() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().millisOfDay());\n     }\n \n     /**\n      * \n      * @return the millis of second property\n      */\n-    public final MutableDateTimeFieldProperty millisOfSecond() {\n-        return new MutableDateTimeFieldProperty(this, getChronology().millisOfSecond());\n+    public final ReadWritableInstantFieldProperty millisOfSecond() {\n+        return new ReadWritableInstantFieldProperty(this, getChronology().millisOfSecond());\n     }\n \n     // Misc", "timestamp": 1073201499, "metainfo": ""}