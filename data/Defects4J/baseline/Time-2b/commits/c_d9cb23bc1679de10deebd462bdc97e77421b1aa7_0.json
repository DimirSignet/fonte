{"sha": "d9cb23bc1679de10deebd462bdc97e77421b1aa7", "log": "Check for construction by UTC zone, switching tests to PARIS zone for safety  ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     private long TEST_TIME_NOW =\n             (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n             \n-    // 2002-04-05\n-    private long TEST_TIME1 =\n-            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n-            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n-        \n-    // 2003-05-06\n-    private long TEST_TIME2 =\n-            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n-            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+//    // 2002-04-05\n+//    private long TEST_TIME1 =\n+//            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+//            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+//            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+//        \n+//    // 2003-05-06\n+//    private long TEST_TIME2 =\n+//            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+//            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+//            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n     \n     private DateTimeZone originalDateTimeZone = null;\n     private TimeZone originalTimeZone = null;\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n-        DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n+        DateTimeZone.setDefault(PARIS);\n+        TimeZone.setDefault(PARIS.toTimeZone());\n+        Locale.setDefault(Locale.FRANCE);\n     }\n \n     protected void tearDown() throws Exception {\n         } catch (IllegalArgumentException ex) {}\n     }\n \n-    public void testConstructor_RI_RI8() throws Throwable {\n+    public void testConstructor_RI_RI_chronoStart() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, GJChronology.getInstance());\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n         Interval test = new Interval(dt1, dt2);\n         assertEquals(GJChronology.getInstance(), test.getChronology());\n     }\n \n-    public void testConstructor_RI_RI9() throws Throwable {\n+    public void testConstructor_RI_RI_chronoEnd() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, GJChronology.getInstance());\n         Interval test = new Interval(dt1, dt2);\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n         assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testConstructor_RI_RI_zones() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, LONDON);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, PARIS);\n+        Interval test = new Interval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(ISOChronology.getInstance(LONDON), test.getChronology());\n+    }\n+\n+    public void testConstructor_RI_RI_instant() throws Throwable {\n+        Instant dt1 = new Instant(12345678L);\n+        Instant dt2 = new Instant(22345678L);\n+        Interval test = new Interval(dt1, dt2);\n+        assertEquals(12345678L, test.getStartMillis());\n+        assertEquals(22345678L, test.getEndMillis());\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1151751648, "metainfo": ""}