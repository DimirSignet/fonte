{"sha": "7fe4b477d279001403795e09c6a1191d7304e889", "log": "Fix short time-zone name parsing to match the longest name", "commit": "\n--- a/src/main/java/org/joda/time/DateTimeUtils.java\n+++ b/src/main/java/org/joda/time/DateTimeUtils.java\n      * Gets the default map of time zone names.\n      * <p>\n      * This can be changed by {@link #setDefaultTimeZoneNames}.\n+     * <p>\n+     * The default set of short time zone names is as follows:\n+     * <ul>\n+     * <li>UT - UTC\n+     * <li>UTC - UTC\n+     * <li>GMT - UTC\n+     * <li>EST - America/New_York\n+     * <li>EDT - America/New_York\n+     * <li>CST - America/Chicago\n+     * <li>CDT - America/Chicago\n+     * <li>MST - America/Denver\n+     * <li>MDT - America/Denver\n+     * <li>PST - America/Los_Angeles\n+     * <li>PDT - America/Los_Angeles\n+     * </ul>\n      * \n      * @return the unmodifiable map of abbreviations to zones, not null\n      * @since 2.2\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n             Map<String, DateTimeZone> parseLookup = iParseLookup;\n             parseLookup = (parseLookup != null ? parseLookup : DateTimeUtils.getDefaultTimeZoneNames());\n             String str = text.substring(position);\n+            String matched = null;\n             for (String name : parseLookup.keySet()) {\n                 if (str.startsWith(name)) {\n-                    bucket.setZone(parseLookup.get(name));\n-                    return position + name.length();\n-                }\n+                    if (matched == null || name.length() > matched.length()) {\n+                        matched = name;\n+                    }\n+                }\n+            }\n+            if (matched != null) {\n+                bucket.setZone(parseLookup.get(matched));\n+                return position + matched.length();\n             }\n             return ~position;\n         }\n--- a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java\n+++ b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java\n         assertEquals(\"2011-01-04 12:30 PST\", f.print(dt3));\n         DateTime dt4 = new DateTime(2011, 7, 4, 12, 30, 0, LOS_ANGELES);\n         assertEquals(\"2011-07-04 12:30 PDT\", f.print(dt4));\n+        DateTime dt5 = new DateTime(2011, 7, 4, 12, 30, 0, DateTimeZone.UTC);\n+        assertEquals(\"2011-07-04 12:30 UTC\", f.print(dt5));\n         \n         assertEquals(dt1.getZone() + \" \" + f.parseDateTime(\"2011-01-04 12:30 EST\").getZone(), dt1, f.parseDateTime(\"2011-01-04 12:30 EST\"));\n         assertEquals(dt2, f.parseDateTime(\"2011-07-04 12:30 EDT\"));\n         assertEquals(dt3, f.parseDateTime(\"2011-01-04 12:30 PST\"));\n         assertEquals(dt4, f.parseDateTime(\"2011-07-04 12:30 PDT\"));\n+        assertEquals(dt5, f.parseDateTime(\"2011-07-04 12:30 UT\"));\n+        assertEquals(dt5, f.parseDateTime(\"2011-07-04 12:30 UTC\"));\n         try {\n             f.parseDateTime(\"2007-03-04 12:30 PPP\");\n             fail();", "timestamp": 1368047994, "metainfo": ""}