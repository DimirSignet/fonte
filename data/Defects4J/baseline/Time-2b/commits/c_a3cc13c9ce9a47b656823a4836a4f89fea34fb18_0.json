{"sha": "a3cc13c9ce9a47b656823a4836a4f89fea34fb18", "log": "Fix DST cutover issues for LocalDate.toInterval() [2487417] Raised by Luc Claes  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDate.java\n      * Converts this object to an Interval representing the whole day\n      * in the default time zone.\n      * <p>\n+     * The interval may have more or less than 24 hours if this is a daylight\n+     * savings cutover date.\n+     * <p>\n      * This instance is immutable and unaffected by this method call.\n      *\n      * @return a interval over the day\n     /**\n      * Converts this object to an Interval representing the whole day.\n      * <p>\n+     * The interval may have more or less than 24 hours if this is a daylight\n+     * savings cutover date.\n+     * <p>\n      * This instance is immutable and unaffected by this method call.\n      *\n      * @param zone  the zone to get the Interval in, null means default\n      */\n     public Interval toInterval(DateTimeZone zone) {\n         zone = DateTimeUtils.getZone(zone);\n-        return toDateMidnight(zone).toInterval();\n+        DateTime start = toDateTimeAtStartOfDay(zone);\n+        DateTime end = plusDays(1).toDateTimeAtStartOfDay(zone);\n+        return new Interval(start, end);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n         Interval test = base.toInterval();\n         check(base, 2005, 6, 9);\n-        DateTime start = base.toDateTimeAtMidnight();\n+        DateTime start = base.toDateTimeAtStartOfDay();\n         DateTime end = start.plus(Period.days(1));\n         Interval expected = new Interval(start, end);\n         assertEquals(expected, test);\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n         Interval test = base.toInterval(TOKYO);\n         check(base, 2005, 6, 9);\n-        DateTime start = base.toDateTimeAtMidnight(TOKYO);\n+        DateTime start = base.toDateTimeAtStartOfDay(TOKYO);\n         DateTime end = start.plus(Period.days(1));\n         Interval expected = new Interval(start, end);\n         assertEquals(expected, test);\n     }\n \n+    public void testToInterval_Zone_noMidnight() {\n+        LocalDate base = new LocalDate(2006, 4, 1, ISO_LONDON);  // LONDON irrelevant\n+        DateTimeZone gaza = DateTimeZone.forID(\"Asia/Gaza\");\n+        Interval test = base.toInterval(gaza);\n+        check(base, 2006, 4, 1);\n+        DateTime start = new DateTime(2006, 4, 1, 1, 0, 0, 0, gaza);\n+        DateTime end = new DateTime(2006, 4, 2, 0, 0, 0, 0, gaza);\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n     public void testToInterval_nullZone() {\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n         Interval test = base.toInterval(null);\n         check(base, 2005, 6, 9);\n-        DateTime start = base.toDateTimeAtMidnight(LONDON);\n+        DateTime start = base.toDateTimeAtStartOfDay(LONDON);\n         DateTime end = start.plus(Period.days(1));\n         Interval expected = new Interval(start, end);\n         assertEquals(expected, test);", "timestamp": 1238963155, "metainfo": ""}