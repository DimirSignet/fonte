{"sha": "ad21e73f2f9b3e4249aab38a27a19a938b7bae4c", "log": "Fix tests now that null means now in comparator   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeComparator.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeComparator.java\n      * Test comparator operation with null object(s).\n      */\n     public void testNullDT() {\n-        try\n-        {\n-            aDateTime = getADate( \"2000-01-01T00:00:00\" );\n-            assertEquals(\"NULLDT Expected Fail\", 0,     // should not matter\n-                    cYear.compare( null, aDateTime ) );\n-        }\n-        catch(IllegalArgumentException iae)\n-        {\n-            return;\n-        }\n-        fail(\"null object failed\");\n-    } // end of testNullDT\n+        // null means now\n+        aDateTime = getADate(\"2000-01-01T00:00:00\");\n+        assertTrue(cYear.compare(null, aDateTime) > 0);\n+        assertTrue(cYear.compare(aDateTime, null) < 0);\n+    }\n \n     /**\n      * Test comparator operation with an invalid object type.\n      */\n     public void testInvalidObj() {\n-        try\n-        {\n-            aDateTime = getADate( \"2000-01-01T00:00:00\" );\n-            assertEquals(\"INVLO Expected Fail\", 0,  // should not matter\n-                    cYear.compare( \"FreeBird\" , aDateTime ) );\n-        }\n-        catch(ClassCastException cce)\n-        {\n-            return;\n-        }\n-        catch(IllegalArgumentException iae)\n-        {\n-            return;\n-        }\n-        fail(\"Invalid object failed\");\n-    } // end of testInvalidObj\n-\n-\n-    /*\n-     * -----------------------------------------\n-     * private convenience methods\n-     * -----------------------------------------\n-     */\n-    /*\n-     * getADate\n+        aDateTime = getADate(\"2000-01-01T00:00:00\");\n+        try {\n+            cYear.compare(\"FreeBird\", aDateTime);\n+            fail(\"Invalid object failed\");\n+        } catch (IllegalArgumentException cce) {}\n+    }\n+\n+    // private convenience methods\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Creates a date to test with.\n      */\n     private DateTime getADate(String s) {\n         DateTime retDT = null;\n-        try\n-        {\n-            retDT = new DateTime( s, DateTimeZone.UTC );\n-        }\n-        catch(IllegalArgumentException pe)\n-        {\n+        try {\n+            retDT = new DateTime(s, DateTimeZone.UTC);\n+        } catch (IllegalArgumentException pe) {\n             pe.printStackTrace();\n         }\n         return retDT;\n-    } // end of getADate\n-    /*\n-     * loadAList\n+    }\n+\n+    /**\n+     * Load a string array.\n      */\n     private List loadAList(String[] someStrs) {\n         List newList = new ArrayList();\n-        try\n-        {\n+        try {\n             for (int i = 0; i < someStrs.length; ++i) {\n-                newList.add( new DateTime( someStrs[i], DateTimeZone.UTC ) );\n+                newList.add(new DateTime(someStrs[i], DateTimeZone.UTC));\n             } // end of the for\n-        }\n-        catch(IllegalArgumentException pe)\n-        {\n+        } catch (IllegalArgumentException pe) {\n             pe.printStackTrace();\n         }\n         return newList;\n-    } // end of loadAList\n-    /*\n-     * isListSorted\n-     */\n-    private boolean isListSorted( List tl ) {\n+    }\n+\n+    /**\n+     * Check if the list is sorted.\n+     */\n+    private boolean isListSorted(List tl) {\n         // tl must be populated with DateTime objects.\n         DateTime lhDT = (DateTime)tl.get(0);\n         DateTime rhDT = null;\n             //\n             lhVal = rhVal;  // swap for next iteration\n             lhDT = rhDT;    // swap for next iteration\n-        } // end of the for\n+        }\n         return true;\n-    } // end of isListSorted\n-\n-} // end of class TestDateTimeComparator\n+    }\n+\n+}", "timestamp": 1089412013, "metainfo": ""}