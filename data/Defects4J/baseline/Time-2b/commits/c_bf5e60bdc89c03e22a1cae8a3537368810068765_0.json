{"sha": "bf5e60bdc89c03e22a1cae8a3537368810068765", "log": "Add AbstractPartialInstant   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/partial/AbstractPartialInstant.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.partial;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.ReadWritableInstant;\n+import org.joda.time.ReadableInstant;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.InstantConverter;\n+\n+/**\n+ * AbstractPartialInstant provides a standard base implementation of most methods\n+ * in the PartialInstant interface.\n+ * <p>\n+ * Calculations on are performed using a {@link Chronology}.\n+ * This chronology is set to be in the UTC time zone for all calculations.\n+ * <p>\n+ * AbstractPartialInstant allows subclasses may be mutable and not thread-safe.\n+ *\n+ * @author Stephen Colebourne\n+ * @since 1.0\n+ */\n+public abstract class AbstractPartialInstant implements PartialInstant, Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 2353678632973660L;\n+\n+    /** The chronology in use */\n+    protected Chronology iChronology;\n+    /** The values of each field in this partial instant */\n+    protected int[] iValues;\n+    /** The values of each field in this partial instant */\n+    protected transient DateTimeField[] iFields;\n+\n+    // Constructors\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructs a AbstractPartialInstant with the current time, using ISOChronology in\n+     * the default zone to extract the fields.\n+     * <p>\n+     * The constructor uses the default time zone, resulting in the local time\n+     * being initialised. Once the constructor is complete, all further calculations\n+     * are performed without reference to a timezone (by switching to UTC).\n+     */\n+    public AbstractPartialInstant() {\n+        this(DateTimeUtils.currentTimeMillis(), null);\n+    }\n+\n+    /**\n+     * Constructs a AbstractPartialInstant with the current time, using the specified chronology\n+     * and zone to extract the fields.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param chronology  the chronology, null means ISOChronology in the default zone\n+     */\n+    public AbstractPartialInstant(Chronology chronology) {\n+        this(DateTimeUtils.currentTimeMillis(), chronology);\n+    }\n+\n+    /**\n+     * Constructs a AbstractPartialInstant extracting the partial fields from the specified\n+     * milliseconds using the ISOChronology in the default zone.\n+     * <p>\n+     * The constructor uses the default time zone, resulting in the local time\n+     * being initialised. Once the constructor is complete, all further calculations\n+     * are performed without reference to a timezone (by switching to UTC).\n+     *\n+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n+     */\n+    public AbstractPartialInstant(long instant) {\n+        this(instant, null);\n+    }\n+\n+    /**\n+     * Constructs a AbstractPartialInstant extracting the partial fields from the specified\n+     * milliseconds using the chronology provided.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n+     * @param chronology  the chronology, null means ISOChronology in the default zone\n+     */\n+    public AbstractPartialInstant(long instant, Chronology chronology) {\n+        super();\n+        if (chronology == null) {\n+            chronology = ISOChronology.getInstance();\n+        }\n+        iChronology = chronology.withUTC();\n+        iFields = initFields(iChronology);\n+        iValues = initValues(instant, chronology);\n+    }\n+\n+    /**\n+     * Constructs a AbstractPartialInstant from an Object that represents a time.\n+     * <p>\n+     * The recognised object types are defined in\n+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n+     * include ReadableInstant, String, Calendar and Date.\n+     *\n+     * @param instant  the datetime object, must not be null\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public AbstractPartialInstant(Object instant) {\n+        super();\n+        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n+        Chronology chronology = converter.getChronology(instant);\n+        if (chronology == null) {\n+            chronology = ISOChronology.getInstance();\n+        }\n+        iChronology = chronology.withUTC();\n+        iFields = initFields(iChronology);\n+        iValues = initValues(converter.getInstantMillis(instant), chronology);\n+    }\n+\n+    /**\n+     * Constructs a AbstractPartialInstant from an Object that represents a time, using the\n+     * specified chronology.\n+     * <p>\n+     * The recognised object types are defined in\n+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n+     * include ReadableInstant, String, Calendar and Date.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param instant  the datetime object, must not be null\n+     * @param chronology  the chronology, null means ISOChronology\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public AbstractPartialInstant(Object instant, Chronology chronology) {\n+        super();\n+        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n+        if (chronology == null) {\n+            chronology = ISOChronology.getInstance();\n+        }\n+        iChronology = chronology.withUTC();\n+        iFields = initFields(iChronology);\n+        iValues = initValues(converter.getInstantMillis(instant, chronology), chronology);\n+    }\n+\n+    /**\n+     * Constructs a AbstractPartialInstant with specified time field values and chronology.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param values  the new set of values\n+     * @param chronology  the chronology, null means ISOChronology in the default zone\n+     */\n+    public AbstractPartialInstant(int[] values, Chronology chronology) {\n+        super();\n+        if (chronology == null) {\n+            chronology = ISOChronology.getInstance();\n+        }\n+        iChronology = chronology.withUTC();\n+        iFields = initFields(iChronology);\n+        iValues = values;\n+        chronology.validate(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Initialize the array of fields.\n+     * The field and value arrays must match.\n+     * \n+     * @param chrono  the chronology to use\n+     */\n+    protected abstract DateTimeField[] initFields(Chronology chrono);\n+\n+    /**\n+     * Initialize the array of values.\n+     * The field and value arrays must match.\n+     * \n+     * @param instant  the instant to use\n+     * @param chrono  the chronology to use\n+     */\n+    protected abstract int[] initValues(long instant, Chronology chrono);\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the number of fields in this instant.\n+     * \n+     * @return the field count\n+     */\n+    public int getFieldSize() {\n+        return iFields.length;\n+    }\n+\n+    /**\n+     * Gets the field at the specifed index.\n+     * \n+     * @param index  the index\n+     * @return the field\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     */\n+    public DateTimeField getField(int index) {\n+        if (index < 0 || index >= iFields.length) {\n+            throw new IllegalArgumentException(Integer.toString(index));\n+        }\n+        return iFields[index];\n+    }\n+\n+    /**\n+     * Gets the value of the field at the specifed index.\n+     * \n+     * @param index  the index\n+     * @return the value\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     */\n+    public int getValue(int index) {\n+        if (index < 0 || index >= iValues.length) {\n+            throw new IllegalArgumentException(Integer.toString(index));\n+        }\n+        return iValues[index];\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets an array of the fields that this partial instant supports.\n+     * <p>\n+     * The fields are returned largest to smallest, for example Hour, Minute, Second.\n+     *\n+     * @return the fields supported (cloned), largest to smallest\n+     */\n+    public DateTimeField[] getFields() {\n+        return (DateTimeField[]) iFields.clone();\n+    }\n+\n+    /**\n+     * Gets an array of the value of each of the fields that this partial instant supports.\n+     * <p>\n+     * The fields are returned largest to smallest, for example Hour, Minute, Second.\n+     * Each value corresponds to the same array index as <code>getFields()</code>\n+     *\n+     * @return the current values of each field (cloned), largest to smallest\n+     */\n+    public int[] getValues() {\n+        return (int[]) iValues.clone();\n+    }\n+\n+    /**\n+     * Gets the chronology of the partial which is never null.\n+     * <p>\n+     * The {@link Chronology} is the calculation engine behind the partial and\n+     * provides conversion and validation of the fields in a particular calendar system.\n+     * \n+     * @return the chronology\n+     */\n+    public Chronology getChronology() {\n+        return iChronology;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get the value of one of the fields of a datetime.\n+     * <p>\n+     * The field specified must be one of those that is supported by the partial instant.\n+     *\n+     * @param field  a DateTimeField instance that is supported by this partial\n+     * @return the value of that field\n+     * @throws IllegalArgumentException if the field is null or not supported\n+     */\n+    public int get(DateTimeField field) {\n+        for (int i = 0; i < iFields.length; i++) {\n+            if (iFields[i] == field) {\n+                return iValues[i];\n+            }\n+        }\n+        throw new IllegalArgumentException(\"Field '\" + field + \"' is not supported\");\n+    }\n+\n+    /**\n+     * Checks whether the field specified is supported by this partial instant.\n+     *\n+     * @param field  the field to check, may be null which returns false\n+     * @return true if the field is supported\n+     */\n+    public boolean isSupported(DateTimeField field) {\n+        for (int i = 0; i < iFields.length; i++) {\n+            if (iFields[i] == field) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Resolves this partial against another complete instant to create a new\n+     * full instant specifying values as milliseconds since 1970-01-01T00:00:00Z.\n+     * <p>\n+     * For example, if this partial represents a time, then the result of this method\n+     * will be the date from the specified base plus the time from this instant.\n+     *\n+     * @param baseMillis  source of missing fields\n+     * @param zone  the zone to use, null means default\n+     * @return the combined instant in milliseconds\n+     */\n+    public long resolve(long baseMillis, DateTimeZone zone) {\n+        Chronology chrono = iChronology.withZone(zone);\n+        return resolve(baseMillis, chrono);\n+    }\n+\n+    /**\n+     * Resolves this partial into another complete instant setting the relevant fields\n+     * on the writable instant. The combination is performed using the chronology of the\n+     * specified instant.\n+     * <p>\n+     * For example, if this partial represents a time, then the input writable instant\n+     * will be updated with the time from this instant.\n+     *\n+     * @param base  the instant to set into, must not be null\n+     * @throws IllegalArgumentException if the base instant is null\n+     */\n+    public void resolveInto(ReadWritableInstant base) {\n+        if (base == null) {\n+            throw new IllegalArgumentException(\"The instant must not be null\");\n+        }\n+        Chronology chrono = base.getChronology();\n+        long resolved = resolve(base.getMillis(), chrono);\n+        base.setMillis(resolved);\n+    }\n+\n+    /**\n+     * Resolves this partial against another complete instant to create a new\n+     * full instant. The combination is performed using the chronology of the\n+     * specified instant.\n+     * <p>\n+     * For example, if this partial represents a time, then the result of this method\n+     * will be the date from the specified base plus the time from this instant.\n+     *\n+     * @param base  the instant that provides the missing fields, null means now\n+     * @return the combined datetime\n+     */\n+    public DateTime resolveDateTime(ReadableInstant base) {\n+        long resolved;\n+        Chronology chrono;\n+        if (base == null) {\n+            chrono = ISOChronology.getInstance();\n+            resolved = resolve(DateTimeUtils.currentTimeMillis(), chrono);\n+        } else {\n+            chrono = base.getChronology();\n+            resolved = resolve(base.getMillis(), chrono);\n+        }\n+        return new DateTime(resolved, chrono);\n+    }\n+\n+    /**\n+     * Resolve this partial instant into the base millis using the specified chronology.\n+     * \n+     * @param baseMillis  the base millis\n+     * @param chrono  the chronology\n+     * @return the new resolved millis\n+     */\n+    protected long resolve(long baseMillis, Chronology chrono) {\n+        long millis = baseMillis;\n+        for (int i = 0; i < iFields.length; i++) {\n+            millis = iFields[i].set(millis, iValues[i]);\n+        }\n+        return millis;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Compares this PartialInstant with another returning true if the chronology,\n+     * fields and values are equal.\n+     *\n+     * @param AbstractPartialInstant  an object to check against\n+     * @return true if fields and values are equal\n+     */\n+    public boolean equals(Object instant) {\n+        if (instant instanceof AbstractPartialInstant) {\n+            AbstractPartialInstant other = (AbstractPartialInstant) instant;\n+            return Arrays.equals(iValues, other.iValues) &&\n+                   Arrays.equals(iFields, other.iFields) &&\n+                   iChronology == other.iChronology;\n+        } else if (instant instanceof PartialInstant) {\n+            PartialInstant other = (PartialInstant) instant;\n+            return Arrays.equals(iValues, other.getValues()) &&\n+                   Arrays.equals(iFields, other.getFields()) &&\n+                   iChronology == other.getChronology();\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Gets a hash code for the PartialInstant that is compatible with the \n+     * equals method.\n+     *\n+     * @return a suitable hash code\n+     */\n+    public int hashCode() {\n+        int total = 157;\n+        for (int i = 0; i < iFields.length; i++) {\n+            total = 23 * total + iValues[i];\n+            total = 23 * total + iFields[i].hashCode();\n+        }\n+        total += iChronology.hashCode();\n+        return total;\n+    }\n+\n+    /**\n+     * Output the time in an ISO8601 format.\n+     * \n+     * @return ISO8601 formatted string\n+     */\n+    public String toString() {\n+        // TODO\n+        return \"\";\n+    }\n+\n+}\n--- a/JodaTime/src/java/org/joda/time/partial/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/partial/TimeOfDay.java\n package org.joda.time.partial;\n \n import java.io.Serializable;\n-import java.util.Arrays;\n import java.util.Locale;\n \n import org.joda.time.Chronology;\n-import org.joda.time.DateTime;\n import org.joda.time.DateTimeField;\n-import org.joda.time.DateTimeUtils;\n-import org.joda.time.DateTimeZone;\n-import org.joda.time.ReadableInstant;\n-import org.joda.time.chrono.ISOChronology;\n-import org.joda.time.convert.ConverterManager;\n-import org.joda.time.convert.InstantConverter;\n \n /**\n  * TimeOfDay is an immutable partial instant supporting the hour, minute, second\n  * <li>numeric value\n  * <li>text value\n  * <li>short text value\n- * <li>maximum value\n- * <li>minimum value\n+ * <li>maximum/minimum values\n+ * <li>add/subtract\n+ * <li>set\n+ * <li>rounding\n  * </ul>\n  * <p>\n  * TimeOfDay is thread-safe and immutable, provided that the Chronology is as well.\n  * @author Brian S O'Neill\n  * @since 1.0\n  */\n-public final class TimeOfDay implements PartialInstant, Serializable {\n+public final class TimeOfDay extends AbstractPartialInstant implements PartialInstant, Serializable {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 3633353405803318660L;\n     /** The index of the millisOfSecond field in the field array */\n     public static final int MILLIS_OF_SECOND = 3;\n \n-    /** The chronology in use */\n-    private final Chronology iChronology;\n-    /** The values of each field in this partial instant */\n-    private final int[] iValues;\n-\n     // Constructors\n     //-----------------------------------------------------------------------\n     /**\n      * are performed without reference to a timezone (by switching to UTC).\n      */\n     public TimeOfDay() {\n-        this(DateTimeUtils.currentTimeMillis(), null);\n+        super();\n     }\n \n     /**\n      * @param chronology  the chronology, null means ISOChronology in the default zone\n      */\n     public TimeOfDay(Chronology chronology) {\n-        this(DateTimeUtils.currentTimeMillis(), chronology);\n+        super(chronology);\n     }\n \n     /**\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n      */\n     public TimeOfDay(long instant) {\n-        this(instant, null);\n+        super(instant);\n     }\n \n     /**\n      * @param chronology  the chronology, null means ISOChronology in the default zone\n      */\n     public TimeOfDay(long instant, Chronology chronology) {\n-        super();\n-        if (chronology == null) {\n-            chronology = ISOChronology.getInstance();\n-        }\n-        iValues = initValues(instant, chronology);\n-        iChronology = chronology.withUTC();\n+        super(instant, chronology);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the date is null\n      */\n     public TimeOfDay(Object instant) {\n-        super();\n-        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        Chronology chronology = converter.getChronology(instant);\n-        if (chronology == null) {\n-            chronology = ISOChronology.getInstance();\n-        }\n-        iValues = initValues(converter.getInstantMillis(instant), chronology);\n-        iChronology = chronology.withUTC();\n+        super(instant);\n     }\n \n     /**\n      * @throws IllegalArgumentException if the date is null\n      */\n     public TimeOfDay(Object instant, Chronology chronology) {\n-        super();\n-        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        if (chronology == null) {\n-            chronology = ISOChronology.getInstance();\n-        }\n-        iValues = initValues(converter.getInstantMillis(instant, chronology), chronology);\n-        iChronology = chronology.withUTC();\n+        super(instant, chronology);\n     }\n \n     /**\n      */\n     public TimeOfDay(int hourOfDay, int minuteOfHour,\n             int secondOfMinute, int millisOfSecond, Chronology chronology) {\n-        super();\n-        if (chronology == null) {\n-            chronology = ISOChronology.getInstance();\n-        }\n-        iValues = new int[] {hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond};\n-        iChronology = chronology.withUTC();\n-        chronology.validate(this);\n+        super(new int[] {hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond}, chronology);\n     }\n \n     /**\n         iValues = values;\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Initialize the array of fields.\n+     * \n+     * @param chrono  the chronology to use\n+     */\n+    protected DateTimeField[] initFields(Chronology chrono) {\n+        return new DateTimeField[] {\n+            chrono.hourOfDay(),\n+            chrono.minuteOfHour(),\n+            chrono.secondOfMinute(),\n+            chrono.millisOfSecond(),\n+        };\n+    }\n+\n     /**\n      * Initialize the array of values.\n      * \n      * @param instant  the instant to use\n      * @param chrono  the chronology to use\n      */\n-    private int[] initValues(long instant, Chronology chrono) {\n+    protected int[] initValues(long instant, Chronology chrono) {\n         return new int[] {\n             chrono.hourOfDay().get(instant),\n             chrono.minuteOfHour().get(instant),\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the number of fields in TimeOfDay.\n-     * \n-     * @return the field count\n-     */\n-    public int getFieldSize() {\n-        return 4;\n-    }\n-\n-    /**\n-     * Gets the field at the specifed index.\n-     * \n-     * @param index  the index\n-     * @return the field\n-     * @throws IndexOutOfBoundsException if the index is invalid\n-     */\n-    public DateTimeField getField(int index) {\n-        switch (index) {\n-            case HOUR_OF_DAY:\n-                return iChronology.hourOfDay();\n-            case MINUTE_OF_HOUR:\n-                return iChronology.minuteOfHour();\n-            case SECOND_OF_MINUTE:\n-                return iChronology.secondOfMinute();\n-            case MILLIS_OF_SECOND:\n-                return iChronology.millisOfSecond();\n-            default:\n-                throw new IllegalArgumentException(Integer.toString(index));\n-        }\n-    }\n-\n-    /**\n-     * Gets the value of the field at the specifed index.\n-     * \n-     * @param index  the index\n-     * @return the value\n-     * @throws IndexOutOfBoundsException if the index is invalid\n-     */\n-    public int getValue(int index) {\n-        if (index < 0 || index > 4) {\n-            throw new IllegalArgumentException(Integer.toString(index));\n-        }\n-        return iValues[index];\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Gets an array of the fields that this partial instant supports.\n-     * <p>\n-     * The fields are returned largest to smallest, for example Hour, Minute, Second.\n-     *\n-     * @return the fields supported (cloned), largest to smallest\n-     */\n-    public DateTimeField[] getFields() {\n-        return new DateTimeField[] {\n-            iChronology.hourOfDay(),\n-            iChronology.minuteOfHour(),\n-            iChronology.secondOfMinute(),\n-            iChronology.millisOfSecond(),\n-        };\n-    }\n-\n-    /**\n-     * Gets an array of the value of each of the fields that this partial instant supports.\n-     * <p>\n-     * The fields are returned largest to smallest, for example Hour, Minute, Second.\n-     * Each value corresponds to the same array index as <code>getFields()</code>\n-     *\n-     * @return the current values of each field (cloned), largest to smallest\n-     */\n-    public int[] getValues() {\n-        return (int[]) iValues.clone();\n-    }\n-\n-    /**\n-     * Gets the chronology of the partial which is never null.\n-     * <p>\n-     * The {@link Chronology} is the calculation engine behind the partial and\n-     * provides conversion and validation of the fields in a particular calendar system.\n-     * \n-     * @return the chronology\n-     */\n-    public Chronology getChronology() {\n-        return iChronology;\n-    }\n-\n-    /**\n-     * Get the value of one of the fields of a datetime.\n-     * <p>\n-     * The field specified must be one of those that is supported by the partial instant.\n-     *\n-     * @param field  a DateTimeField instance that is supported by this partial\n-     * @return the value of that field\n-     * @throws IllegalArgumentException if the field is null or not supported\n-     */\n-    public int get(DateTimeField field) {\n-        if (iChronology.hourOfDay() == field) {\n-            return getValue(HOUR_OF_DAY);\n-        }\n-        if (iChronology.minuteOfHour() == field) {\n-            return getValue(MINUTE_OF_HOUR);\n-        }\n-        if (iChronology.secondOfMinute() == field) {\n-            return getValue(SECOND_OF_MINUTE);\n-        }\n-        if (iChronology.millisOfSecond() == field) {\n-            return getValue(MILLIS_OF_SECOND);\n-        }\n-        throw new IllegalArgumentException(\"Field '\" + field + \"' is not supported by TimeOfDay\");\n-    }\n-\n-    /**\n-     * Checks whether the field specified is supported by this partial instant.\n-     *\n-     * @param field  the field to check, may be null which returns false\n-     * @return true if the field is supported\n-     */\n-    public boolean isSupported(DateTimeField field) {\n-        return \n-            iChronology.hourOfDay() == field ||\n-            iChronology.minuteOfHour() == field ||\n-            iChronology.secondOfMinute() == field ||\n-            iChronology.millisOfSecond() == field;\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Resolves this partial against another complete instant to create a new\n-     * full instant specifying values as milliseconds since 1970-01-01T00:00:00Z.\n-     * <p>\n-     * For example, if this partial represents a time, then the result of this method\n-     * will be the date from the specified base plus the time from this instant.\n-     *\n-     * @param baseMillis  source of missing fields\n-     * @param zone  the zone to use, null means default\n-     * @return the combined instant in milliseconds\n-     */\n-    public long resolve(long baseMillis, DateTimeZone zone) {\n-        Chronology chrono = iChronology.withZone(zone);\n-        long millis = baseMillis;\n-        millis = chrono.hourOfDay().set(millis, getValue(HOUR_OF_DAY));\n-        millis = chrono.minuteOfHour().set(millis, getValue(MINUTE_OF_HOUR));\n-        millis = chrono.secondOfMinute().set(millis, getValue(SECOND_OF_MINUTE));\n-        millis = chrono.millisOfSecond().set(millis, getValue(MILLIS_OF_SECOND));\n-        return millis;\n-    }\n-\n-    /**\n-     * Resolves this partial against another complete instant to create a new\n-     * full instant. The combination is performed using the chronology of the\n-     * specified instant.\n-     * <p>\n-     * For example, if this partial represents a time, then the result of this method\n-     * will be the date from the specified base plus the time from this instant.\n-     *\n-     * @param base  the instant that provides the missing fields, null means now\n-     * @return the combined datetime\n-     */\n-    public DateTime resolveDateTime(ReadableInstant base) {\n-        if (base == null) {\n-            base = new DateTime();\n-        }\n-        Chronology chrono = base.getChronology();\n-        long millis = base.getMillis();\n-        millis = chrono.hourOfDay().set(millis, getValue(HOUR_OF_DAY));\n-        millis = chrono.minuteOfHour().set(millis, getValue(MINUTE_OF_HOUR));\n-        millis = chrono.secondOfMinute().set(millis, getValue(SECOND_OF_MINUTE));\n-        millis = chrono.millisOfSecond().set(millis, getValue(MILLIS_OF_SECOND));\n-        return new DateTime(millis, chrono);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * Get the hour of day (0-23) field value.\n      *\n      * @return the hour of day\n         return new Property(this, MILLIS_OF_SECOND);\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Compares this TimeOfDay with another returning true if the fields and\n-     * values are equal.\n-     *\n-     * @param timeOfDay  an object to check against\n-     * @return true if fields and values are equal\n-     */\n-    public boolean equals(Object timeOfDay) {\n-        if (timeOfDay instanceof TimeOfDay == false) {\n-            return false;\n-        }\n-        TimeOfDay other = (TimeOfDay) timeOfDay;\n-        return Arrays.equals(iValues, other.iValues) &&\n-               iChronology == other.iChronology;\n-    }\n-\n-    /**\n-     * Gets a hash code for the TimeOfDay that is compatible with the \n-     * equals method.\n-     *\n-     * @return a suitable hash code\n-     */\n-    public int hashCode() {\n-        int total = 157;\n-        for (int i = 0; i < iValues.length; i++) {\n-            total = 23 * total + getValue(i);\n-        }\n-        total += iChronology.hashCode();\n-        return total;\n-    }\n-\n-    /**\n-     * Output the time in ISO8601 time only format (hh:mm:ss.SSS).\n-     * \n-     * @return ISO8601 time formatted string\n-     */\n-    public String toString() {\n-        // TODO\n-        return \"\";\n-    }\n-    \n     //-----------------------------------------------------------------------\n     /**\n      * The property class for TimeOfDay.", "timestamp": 1086522298, "metainfo": ""}