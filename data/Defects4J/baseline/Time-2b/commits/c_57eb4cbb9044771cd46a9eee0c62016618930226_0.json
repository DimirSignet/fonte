{"sha": "57eb4cbb9044771cd46a9eee0c62016618930226", "log": "Fix ZoneInfoCompiler and DateTimeZoneBuilder multi-threading  Fixes #18", "commit": "\n--- a/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\n+++ b/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\n \n     static Chronology cLenientISO;\n \n-    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();\n-    static {\n-        cVerbose.set(Boolean.FALSE);\n-    }\n+    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>() {\n+        protected Boolean initialValue() {\n+            return Boolean.FALSE;\n+        }\n+    };\n \n     /**\n      * Gets a flag indicating that verbose logging is required.\n--- a/src/test/java/org/joda/time/tz/TestCompiler.java\n+++ b/src/test/java/org/joda/time/tz/TestCompiler.java\n         DateTimeZone.setDefault(originalDateTimeZone);\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testDateTimeZoneBuilder() throws Exception {\n+        // test multithreading, issue #18\n+        getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ1\", true);\n+        final DateTimeZone[] zone = new DateTimeZone[1];\n+        Thread t = new Thread(new Runnable() {\n+            public void run() {\n+                zone[0] = getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true);\n+            }\n+        });\n+        t.start();\n+        t.join();\n+        assertNotNull(zone[0]);\n+    }\n+\n+    private DateTimeZoneBuilder getTestDataTimeZoneBuilder() {\n+         return new DateTimeZoneBuilder()\n+             .addCutover(1601, 'w', 1, 1, 1, false, 7200000)\n+             .setStandardOffset(3600000)\n+             .addRecurringSavings(\"\", 3600000, 1601, Integer.MAX_VALUE, 'w', 3, -1, 1, false, 7200000)\n+             .addRecurringSavings(\"\", 0, 1601, Integer.MAX_VALUE, 'w', 10, -1, 1, false, 10800000);\n+    }    \n+\n+    //-----------------------------------------------------------------------\n     public void testCompile() throws Exception {\n         Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE);\n         DateTimeZone tz = provider.getZone(\"America/Los_Angeles\");", "timestamp": 1366382097, "metainfo": ""}