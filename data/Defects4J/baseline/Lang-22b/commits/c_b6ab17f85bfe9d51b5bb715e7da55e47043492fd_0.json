{"sha": "b6ab17f85bfe9d51b5bb715e7da55e47043492fd", "log": "Applying Robert Scholte's patch from LANG-422, adding a appendSeparator with an alternative default separator if the StrBuilder is currently empty  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n  * the interface. \n  *\n  * @author Stephen Colebourne\n+ * @author Robert Scholte\n  * @since 2.2\n  * @version $Id$\n  */\n      * @since 2.3\n      */\n     public StrBuilder appendSeparator(String separator) {\n-        if (separator != null && size() > 0) {\n-            append(separator);\n+        return appendSeparator(separator, null);\n+    }\n+\n+    /**\n+     * Appends one of both separators to the StrBuilder.\n+     * If the builder is currently empty it will append the defaultIfEmpty-separator\n+     * Otherwise it will append the standard-separator\n+     * \n+     * Appending a null separator will have no effect.\n+     * The separator is appended using {@link #append(String)}.\n+     * <p>\n+     * This method is for example useful for constructing queries\n+     * <pre>\n+     * StrBuilder whereClause = new StrBuilder();\n+     * if(searchCommand.getPriority() != null) {\n+     *  whereClause.appendSeparator(\" and\", \" where\");\n+     *  whereClause.append(\" priority = ?\")\n+     * }\n+     * if(searchCommand.getComponent() != null) {\n+     *  whereClause.appendSeparator(\" and\", \" where\");\n+     *  whereClause.append(\" component = ?\")\n+     * }\n+     * selectClause.append(whereClause)\n+     * </pre>\n+     * \n+     * @param standard the separator if builder is not empty, null means no separator\n+     * @param defaultIfEmpty the separator if builder is empty, null means no separator\n+     * @return this, to enable chaining\n+     * @since 3.0\n+     */\n+    public StrBuilder appendSeparator(String standard, String defaultIfEmpty) {\n+    \tString str = isEmpty() ? defaultIfEmpty : standard;\n+        if (str != null) {\n+            append(str);\n         }\n         return this;\n     }\n         return this;\n     }\n \n+    /**\n+     * Append one of both separators to the builder\n+     * If the builder is currently empty it will append the defaultIfEmpty-separator\n+     * Otherwise it will append the standard-separator\n+     *\n+     * The separator is appended using {@link #append(char)}.\n+     * @param standard the separator if builder is not empty\n+     * @param defaultIfEmpty the separator if builder is empty\n+     * @return this, to enable chaining\n+     * @since 3.0\n+     */\n+    public StrBuilder appendSeparator(char standard, char defaultIfEmpty) {\n+        if (size() > 0) {\n+            append(standard);\n+        }\n+        else {\n+        \tappend(defaultIfEmpty);\n+        }\n+        return this;\n+    }\n     /**\n      * Appends a separator to the builder if the loop index is greater than zero.\n      * Appending a null separator will have no effect.\n--- a/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n         sb.appendSeparator(\",\");\n         assertEquals(\"foo,\", sb.toString());\n     }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAppendSeparator_String_String() {\n+    \tStrBuilder sb = new StrBuilder();\n+    \tfinal String startSeparator = \"order by \";\n+    \tfinal String standardSeparator = \",\";\n+    \tfinal String foo = \"foo\";\n+    \tsb.appendSeparator(null, null);\n+    \tassertEquals(\"\", sb.toString());\n+    \tsb.appendSeparator(standardSeparator, null);\n+    \tassertEquals(\"\", sb.toString());\n+        sb.appendSeparator(standardSeparator, startSeparator); \n+        assertEquals(startSeparator, sb.toString());\n+        sb.appendSeparator(null, null); \n+        assertEquals(startSeparator, sb.toString());\n+        sb.appendSeparator(null, startSeparator); \n+        assertEquals(startSeparator, sb.toString());\n+        sb.append(foo);\n+        assertEquals(startSeparator + foo, sb.toString());\n+        sb.appendSeparator(standardSeparator, startSeparator);\n+        assertEquals(startSeparator + foo + standardSeparator, sb.toString());\n+    }\n \n     //-----------------------------------------------------------------------\n     public void testAppendSeparator_char() {\n         assertEquals(\"foo\", sb.toString());\n         sb.appendSeparator(',');\n         assertEquals(\"foo,\", sb.toString());\n+    }\n+    public void testAppendSeparator_char_char() {\n+    \tStrBuilder sb = new StrBuilder();\n+    \tfinal char startSeparator = ':';\n+    \tfinal char standardSeparator = ',';\n+    \tfinal String foo = \"foo\";\n+        sb.appendSeparator(standardSeparator, startSeparator);  // no effect\n+        assertEquals(String.valueOf(startSeparator), sb.toString());\n+        sb.append(foo);\n+        assertEquals(String.valueOf(startSeparator) + foo, sb.toString());\n+        sb.appendSeparator(standardSeparator, startSeparator);\n+        assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString());\n     }\n \n     //-----------------------------------------------------------------------\n         sb.insert(0, (char[]) null, 0, 0);\n         assertEquals(\"nullnullfoonullbarbaz\", sb.toString());\n     }\n-\n }", "timestamp": 1256019010, "metainfo": ""}