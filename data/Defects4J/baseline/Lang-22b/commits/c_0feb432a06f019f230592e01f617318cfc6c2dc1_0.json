{"sha": "0feb432a06f019f230592e01f617318cfc6c2dc1", "log": "Adding Builder interface, and refactoring the builder classes and BasicThreadFactory to implement this interface. Patch from Michael Wooten in LANG-601  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/builder/Builder.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.builder;\n+\n+/**\n+ * <p>\n+ * The Builder interface is designed to designate a class as a <em>builder</em> \n+ * object in the Builder design pattern. Builders are capable of creating and \n+ * configuring objects or results that normally take multiple steps to construct \n+ * or are very complex to derive. \n+ * </p>\n+ * \n+ * <p>\n+ * The builder interface defines a single method, {@link #build()}, that \n+ * classes must implement. The result of this method should be the final \n+ * configured object or result after all building operations are performed.\n+ * </p>\n+ * \n+ * <p>\n+ * It is a recommended practice that the methods supplied to configure the \n+ * object or result being built return a reference to <code>this</code> so that\n+ * method calls can be chained together.\n+ * </p>\n+ * \n+ * <p>\n+ * Example Builder:\n+ * <code><pre>\n+ * class FontBuilder implements Builder&lt;Font&gt; {\n+ *     private Font font;\n+ *     \n+ *     public FontBuilder(String fontName) {\n+ *         this.font = new Font(fontName, Font.PLAIN, 12);\n+ *     }\n+ * \n+ *     public FontBuilder bold() {\n+ *         this.font = this.font.deriveFont(Font.BOLD);\n+ *         return this; // Reference returned so calls can be chained\n+ *     }\n+ *     \n+ *     public FontBuilder size(float pointSize) {\n+ *         this.font = this.font.deriveFont(pointSize);\n+ *         return this; // Reference returned so calls can be chained\n+ *     }\n+ * \n+ *     // Other Font construction methods\n+ * \n+ *     public Font build() {\n+ *         return this.font;\n+ *     }\n+ * }\n+ * </pre></code>\n+ * \n+ * Example Builder Usage:\n+ * <code><pre>\n+ * Font bold14ptSansSerifFont = new FontBuilder(Font.SANS_SERIF).bold()\n+ *                                                              .size(14.0f)\n+ *                                                              .build();\n+ * </pre></code>\n+ * </p>\n+ * \n+ * @param <T> the type of object that the builder will construct or compute.\n+ * \n+ * @author <a href=\"mailto:mwooten.dev@gmail.com\">Michael Wooten</a>\n+ * @since 3.0\n+ */\n+public interface Builder<T> {\n+\n+    /**\n+     * Returns a reference to the object being constructed or result being \n+     * calculated by the builder.\n+     * \n+     * @return the object constructed or result calculated by the builder.\n+     */\n+    public T build();\n+}\n--- a/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java\n  * @since 1.0\n  * @version $Id$\n  */\n-public class CompareToBuilder {\n+public class CompareToBuilder implements Builder<Integer> {\n     \n     /**\n      * Current state of the comparison as appended fields are checked.\n         return comparison;\n     }\n \n+    /**\n+     * Returns a negative integer, a positive integer, or zero as\n+     * the <code>builder</code> has judged the \"left-hand\" side\n+     * as less than, greater than, or equal to the \"right-hand\"\n+     * side.\n+     * \n+     * @return final comparison result\n+     * \n+     * @since 3.0\n+     */\n+    public Integer build() {\n+        return toComparison();\n+    }\n }\n \n--- a/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java\n  * @since 1.0\n  * @version $Id$\n  */\n-public class EqualsBuilder {\n+public class EqualsBuilder implements Builder<Boolean> {\n     \n     /**\n      * <p>\n     public boolean isEquals() {\n         return this.isEquals;\n     }\n+    \n+    /**\n+     * <p>Returns <code>true</code> if the fields that have been checked\n+     * are all equal.</p>\n+     *\n+     * @return <code>true</code> if all of the fields that have been checked\n+     *         are equal, <code>false</code> otherwise.\n+     *         \n+     * @since 3.0\n+     */\n+    public Boolean build() {\n+        return isEquals();\n+    }\n \n     /**\n      * Sets the <code>isEquals</code> value.\n--- a/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java\n  * @since 1.0\n  * @version $Id$\n  */\n-public class HashCodeBuilder {\n+public class HashCodeBuilder implements Builder<Integer> {\n     /**\n      * <p>\n      * A registry of objects used by reflection methods to detect cyclical object references and avoid infinite loops.\n     public int toHashCode() {\n         return iTotal;\n     }\n+    \n+    /**\n+     * Returns the computed <code>hashCode</code>.\n+     * \n+     * @return <code>hashCode</code> based on the fields appended\n+     * \n+     * @since 3.0\n+     */\n+    public Integer build() {\n+        return toHashCode();\n+    }\n \n     /**\n      * <p>\n--- a/src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/ToStringBuilder.java\n  * @since 1.0\n  * @version $Id$\n  */\n-public class ToStringBuilder {\n+public class ToStringBuilder implements Builder<String> {\n \n     /**\n      * The default style of output to use, not null.\n         return this.getStringBuffer().toString();\n     }\n \n+    /**\n+     * Returns the String that was build as an object representation. The \n+     * default implementation utilizes the {@link #toString()} implementation.\n+     * \n+     * @return the String <code>toString</code>\n+     * \n+     * @see #toString()\n+     * \n+     * @since 3.0\n+     */\n+    public String build() {\n+        return toString();\n+    }\n }\n--- a/src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java\n+++ b/src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java\n      *\n      * @version $Id: $\n      */\n-    public static class Builder {\n+    public static class Builder \n+        implements org.apache.commons.lang3.builder.Builder<BasicThreadFactory> {\n+        \n         /** The wrapped factory. */\n         private ThreadFactory wrappedFactory;\n \n--- a/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java\n         assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0);\n         assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0);\n         assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0);\n+    }\n+    \n+    public void testObjectBuild() {\n+        TestObject o1 = new TestObject(4);\n+        TestObject o2 = new TestObject(4);\n+        assertTrue(new CompareToBuilder().append(o1, o1).build() == 0);\n+        assertTrue(new CompareToBuilder().append(o1, o2).build() == 0);\n+        o2.setA(5);\n+        assertTrue(new CompareToBuilder().append(o1, o2).build() < 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1).build() > 0);\n+        \n+        assertTrue(new CompareToBuilder().append(o1, null).build() > 0);\n+        assertTrue(new CompareToBuilder().append((Object) null, (Object) null).build() == 0);\n+        assertTrue(new CompareToBuilder().append(null, o1).build() < 0);\n     }\n \n     public void testObjectEx2() {\n--- a/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\n         assertTrue(!new EqualsBuilder().append(null, o2).isEquals());\n         assertTrue(new EqualsBuilder().append((Object) null, (Object) null).isEquals());\n     }\n+    \n+    public void testObjectBuild() {\n+        TestObject o1 = new TestObject(4);\n+        TestObject o2 = new TestObject(5);\n+        assertTrue(new EqualsBuilder().append(o1, o1).build());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).build());\n+        o2.setA(4);\n+        assertTrue(new EqualsBuilder().append(o1, o2).build());\n+\n+        assertTrue(!new EqualsBuilder().append(o1, this).build());\n+        \n+        assertTrue(!new EqualsBuilder().append(o1, null).build());\n+        assertTrue(!new EqualsBuilder().append(null, o2).build());\n+        assertTrue(new EqualsBuilder().append((Object) null, (Object) null).build());\n+    }\n \n     public void testLong() {\n         long o1 = 1L;\n--- a/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n         obj = new Object();\n         assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+    \n+    public void testObjectBuild() {\n+        Object obj = null;\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).build().intValue());\n+        obj = new Object();\n+        assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).build().intValue());\n     }\n \n     @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n--- a/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n         assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n         assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n         assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+    \n+    public void testObjectBuild() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).build());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).build());\n+        assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).build());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).build());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).build());\n+        assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).build());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).build());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).build());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).build());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).build());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).build());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).build());\n     }\n \n     public void testLong() {", "timestamp": 1269116426, "metainfo": ""}