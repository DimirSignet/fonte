{"sha": "b992390d973aa1148bfbeeec25e575b2e0b10a54", "log": "Adding @throws and test for the ClassCastException thrown by the ComparableComparator  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Range.java\n+++ b/src/java/org/apache/commons/lang/Range.java\n      *\n      * @param element  the value to use for this range, must not be <code>null</code>\n      * @throws IllegalArgumentException if the value is <code>null</code>\n-     */\n-// TODO: Ideally this would only support <T extends Comparable<? super T>>\n+     * @throws ClassCastException if the value is not Comparable\n+     */\n+    // TODO: Ideally the ClassCastException would be compile-time via generics\n     public Range(T element) {\n-        this(element, element);\n+        this( element, element);\n     }\n \n     /**\n      * @param element1  first value that defines the edge of the range, inclusive\n      * @param element2  second value that defines the edge of the range, inclusive\n      * @throws IllegalArgumentException if either value is <code>null</code>\n-     */\n-// TODO: Ideally this would only support <T extends Comparable<? super T>>\n+     * @throws ClassCastException if either value is not Comparable\n+     */\n+    // TODO: Ideally the ClassCastException would be compile-time via generics\n     public Range(T element1, T element2) {\n-        this(element1, element2, ComparableComparator.INSTANCE);\n+        this( element1, element2, ComparableComparator.INSTANCE);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/lang/RangeTest.java\n+++ b/src/test/org/apache/commons/lang/RangeTest.java\n         doubleRange = new Range<Double>((double) 10, (double) 20);\n     }\n \n+    // --------------------------------------------------------------------------\n+\n+    public void testComparableConstructors() {\n+        try {\n+            Range range = new Range(new Object());\n+            fail(\"IllegalArgumentException expected\");\n+        } catch(ClassCastException cce) {\n+            // expected\n+        }\n+\n+        try {\n+            Range range = new Range(new Object(), new Object());\n+            fail(\"ClassCastException expected\");\n+        } catch(ClassCastException cce) {\n+            // expected\n+        }\n+    }\n+\n+    // --------------------------------------------------------------------------\n+\n     public void testEqualsObject() {\n         assertEquals(byteRange, byteRange);\n         assertEquals(byteRange, byteRange2);", "timestamp": 1258099511, "metainfo": ""}