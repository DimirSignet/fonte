{"sha": "c0d11a776236558a4f73845c723952cd2c949334", "log": "Update Enum classes to support hierarchy Enum definitions   ", "commit": "\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * <em>NOTE:</em>Due to the way in which Java ClassLoaders work, comparing Enum objects\n  * should always be done using the equals() method, not ==. The equals() method will\n  * try == first so in most cases the effect is the same.\n- * <p>\n+ * \n+ * <h4>Simple Enums</h4>\n  * To use this class, it must be subclassed. For example:\n  *\n  * <pre>\n  * The <code>getEnum</code> and <code>iterator</code> methods are recommended. \n  * Unfortunately, Java restrictions require these to be coded as shown in each subclass.\n  * An alternative choice is to use the {@link EnumUtils} class.\n- * <p>\n+ * \n+ * <h4>Subclassed Enums</h4>\n+ * A hierarchy of Enum classes can be built. In this case, the superclass is \n+ * unaffected by the addition of subclasses (as per normal Java). The subclasses\n+ * may add additional Enum constants <i>of the type of the superclass</i>. The\n+ * query methods on the subclass will return all of the Enum constants from the\n+ * superclass and subclass.\n+ *\n+ * <pre>\n+ * public class ExtraColorEnum extends ColorEnum {\n+ *   // NOTE: Color enum declared above is final, change that to get this\n+ *   // example to compile.\n+ *   public static final ColorEnum YELLOW = new ExtraColorEnum(\"Yellow\");\n+ *\n+ *   private ExtraColorEnum(String color) {\n+ *     super(color);\n+ *   }\n+ * \n+ *   public static ColorEnum getEnum(String color) {\n+ *     return (ColorEnum) getEnum(ExtraColorEnum.class, color);\n+ *   }\n+ * \n+ *   public static Map getEnumMap() {\n+ *     return getEnumMap(ExtraColorEnum.class);\n+ *   }\n+ * \n+ *   public static List getEnumList() {\n+ *     return getEnumList(ExtraColorEnum.class);\n+ *   }\n+ * \n+ *   public static Iterator iterator() {\n+ *     return iterator(ExtraColorEnum.class);\n+ *   }\n+ * }\n+ * </pre>\n+ * \n+ * This example will return RED, GREEN, BLUE, YELLOW from the List and iterator \n+ * methods in that order. The RED, GREEN and BLUE instances will be the same (==) \n+ * as those from the superclass ColorEnum. Note that YELLOW is declared as a\n+ * ColorEnum and not an ExtraColorEnum.\n+ * \n+ * <h4>Functional Enums</h4>\n  * The enums can have functionality by using anonymous inner classes\n  * [Effective Java, Bloch01]:\n+ * \n  * <pre>\n  * public abstract class OperationEnum extends Enum {\n  *   public static final OperationEnum PLUS = new OperationEnum(\"Plus\") {\n  * @author Stephen Colebourne\n  * @author Chris Webb\n  * @since 1.0\n- * @version $Id: Enum.java,v 1.7 2003/02/04 16:56:08 scolebourne Exp $\n+ * @version $Id: Enum.java,v 1.8 2003/02/04 18:30:07 scolebourne Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n     /**\n             throw new IllegalArgumentException(\"The Enum name must not be empty\");\n         }\n         iName = name;\n-        String className = Enum.getEnumClassName(getClass());\n-        Entry entry = (Entry) cEnumClasses.get(className);\n+        Class enumClass = Enum.getEnumClass(getClass());\n+        Entry entry = (Entry) cEnumClasses.get(enumClass);\n         if (entry == null) {\n-            entry = new Entry();\n-            cEnumClasses.put(className, entry);\n+            entry = createEntry(getClass());\n+            cEnumClasses.put(enumClass, entry);\n         }\n         if (entry.map.containsKey(name)) {\n             throw new IllegalArgumentException(\"The Enum name must be unique, '\" + name + \"' has already been added\");\n      * @return the resolved object\n      */\n     protected Object readResolve() {\n-        Entry entry = (Entry) cEnumClasses.get(Enum.getEnumClassName(getClass()));\n+        Entry entry = (Entry) cEnumClasses.get(Enum.getEnumClass(getClass()));\n         if (entry == null) {\n             return null;\n         }\n         return Enum.getEnumList(enumClass).iterator();\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Gets an entry from the map of Enums.\n      * \n         if (Enum.class.isAssignableFrom(enumClass) == false) {\n             throw new IllegalArgumentException(\"The Class must be a subclass of Enum\");\n         }\n-        Entry entry = (Entry) cEnumClasses.get(enumClass.getName());\n+        Entry entry = (Entry) cEnumClasses.get(enumClass);\n         return entry;\n     }\n     \n     /**\n-     * Convert a class to a class name accounting for inner classes.\n+     * Creates an entry for storing the Enums.\n+     * This accounts for subclassed Enums.\n+     * \n+     * @param enumClass  the class of the Enum to get\n+     * @return the enum entry\n+     */\n+    private static Entry createEntry(Class enumClass) {\n+        Entry entry = new Entry();\n+        Class cls = enumClass.getSuperclass();\n+        while (cls != null && cls != Enum.class && cls != ValuedEnum.class) {\n+            Entry loopEntry = (Entry) cEnumClasses.get(cls);\n+            if (loopEntry != null) {\n+                entry.list.addAll(loopEntry.list);\n+                entry.map.putAll(loopEntry.map);\n+                break;  // stop here, as this will already have had superclasses added\n+            }\n+            cls = cls.getSuperclass();\n+        }\n+        return entry;\n+    }\n+    \n+    /**\n+     * Convert a class to the actual common enum class.\n+     * This accounts for anonymous inner classes.\n      * \n      * @param cls  the class to get the name for\n      * @return the class name\n      */\n-    protected static String getEnumClassName(Class cls) {\n+    protected static Class getEnumClass(Class cls) {\n         String className = cls.getName();\n         int index = className.lastIndexOf('$');\n         if (index > -1) {\n             if (inner.length() > 0 &&\n                 inner.charAt(0) >= '0' &&\n                 inner.charAt(0) < '9') {\n-                // Strip off anonymous inner class reference.\n-                className = className.substring(0, index);\n+                return cls.getSuperclass();\n             }\n         }\n-        return className;\n-    }\n-\n-    //--------------------------------------------------------------------------------\n-\n+        return cls;\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Retrieve the name of this Enum item, set in the constructor.\n      * \n         } else if (other.getClass() == this.getClass()) {\n             // shouldn't happen, but...\n             return iName.equals(((Enum) other).iName);\n-        } else if (other.getClass().getName().equals(this.getClass().getName())) {\n+        } else if (getEnumClass(other.getClass()).getName().equals(getEnumClass(this.getClass()).getName())) {\n             // different classloaders\n             try {\n                 // try to avoid reflection\n      * the type name.\n      */\n     public String toString() {\n-        String shortName = Enum.getEnumClassName(getClass());\n+        String shortName = Enum.getEnumClass(getClass()).getName();\n         int pos = shortName.lastIndexOf('.');\n         if (pos != -1) {\n             shortName = shortName.substring(pos + 1);\n--- a/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n+++ b/src/java/org/apache/commons/lang/enum/ValuedEnum.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  *\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ValuedEnum.java,v 1.4 2002/12/31 22:39:39 scolebourne Exp $\n+ * @version $Id: ValuedEnum.java,v 1.5 2003/02/04 18:30:07 scolebourne Exp $\n  */\n public abstract class ValuedEnum extends Enum {\n     /**\n      * stripped from the type name.\n      */\n     public String toString() {\n-        String shortName = Enum.getEnumClassName(getClass());\n+        String shortName = Enum.getEnumClass(getClass()).getName();\n         int pos = shortName.lastIndexOf('.');\n         if (pos != -1) {\n             shortName = shortName.substring(pos + 1);\n         }\n+        shortName = shortName.replace('$', '.');\n         return shortName + \"[\" + getName() + \"=\" + getValue() + \"]\";\n     }\n }\n--- a/src/test/org/apache/commons/lang/enum/EnumTest.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumTest.java\n  * Test cases for the {@link Enum} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: EnumTest.java,v 1.5 2002/12/31 22:39:39 scolebourne Exp $\n+ * @version $Id: EnumTest.java,v 1.6 2003/02/04 18:30:08 scolebourne Exp $\n  */\n \n public final class EnumTest extends TestCase {\n         assertEquals(3, OperationEnum.PLUS.eval(1, 2));\n         assertEquals(-1, OperationEnum.MINUS.eval(1, 2));\n     }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testExtended1Get() {\n+        assertSame(Extended1Enum.ALPHA, Extended1Enum.getEnum(\"Alpha\"));\n+        assertSame(Extended1Enum.BETA, Extended1Enum.getEnum(\"Beta\"));\n+        assertSame(null, Extended1Enum.getEnum(\"Gamma\"));\n+        assertSame(null, Extended1Enum.getEnum(\"Delta\"));\n+    }\n+            \n+    public void testExtended2Get() {\n+        assertSame(Extended1Enum.ALPHA, Extended2Enum.ALPHA);\n+        assertSame(Extended1Enum.BETA, Extended2Enum.BETA);\n+        \n+        assertSame(Extended2Enum.ALPHA, Extended2Enum.getEnum(\"Alpha\"));\n+        assertSame(Extended2Enum.BETA, Extended2Enum.getEnum(\"Beta\"));\n+        assertSame(Extended2Enum.GAMMA, Extended2Enum.getEnum(\"Gamma\"));\n+        assertSame(null, Extended2Enum.getEnum(\"Delta\"));\n+    }\n+\n+    public void testExtended3Get() {\n+        assertSame(Extended2Enum.ALPHA, Extended3Enum.ALPHA);\n+        assertSame(Extended2Enum.BETA, Extended3Enum.BETA);\n+        assertSame(Extended2Enum.GAMMA, Extended3Enum.GAMMA);\n+        \n+        assertSame(Extended3Enum.ALPHA, Extended3Enum.getEnum(\"Alpha\"));\n+        assertSame(Extended3Enum.BETA, Extended3Enum.getEnum(\"Beta\"));\n+        assertSame(Extended3Enum.GAMMA, Extended3Enum.getEnum(\"Gamma\"));\n+        assertSame(Extended3Enum.DELTA, Extended3Enum.getEnum(\"Delta\"));\n+    }\n+\n+    public void testExtendedSerialization() {\n+        assertSame(Extended1Enum.ALPHA, SerializationUtils.clone(Extended1Enum.ALPHA));\n+        assertSame(Extended1Enum.BETA, SerializationUtils.clone(Extended1Enum.BETA));\n+        assertSame(Extended2Enum.GAMMA, SerializationUtils.clone(Extended2Enum.GAMMA));\n+        assertSame(Extended3Enum.DELTA, SerializationUtils.clone(Extended3Enum.DELTA));\n+    }\n+\n+    public void testExtendedToString() {\n+        assertEquals(\"Extended1Enum[Alpha]\", Extended1Enum.ALPHA.toString());\n+        assertEquals(\"Extended1Enum[Beta]\", Extended1Enum.BETA.toString());\n+        \n+        assertEquals(\"Extended1Enum[Alpha]\", Extended2Enum.ALPHA.toString());\n+        assertEquals(\"Extended1Enum[Beta]\", Extended2Enum.BETA.toString());\n+        assertEquals(\"Extended2Enum[Gamma]\", Extended2Enum.GAMMA.toString());\n+        \n+        assertEquals(\"Extended1Enum[Alpha]\", Extended3Enum.ALPHA.toString());\n+        assertEquals(\"Extended1Enum[Beta]\", Extended3Enum.BETA.toString());\n+        assertEquals(\"Extended2Enum[Gamma]\", Extended3Enum.GAMMA.toString());\n+        assertEquals(\"Extended3Enum[Delta]\", Extended3Enum.DELTA.toString());\n+    }\n+\n+    public void testExtended1List() {\n+        List list = Extended1Enum.getEnumList();\n+        assertNotNull(list);\n+        assertEquals(2, list.size());\n+        assertEquals(list.size(), Extended1Enum.getEnumMap().keySet().size());\n+        \n+        Iterator it = list.iterator();\n+        assertSame(Extended1Enum.ALPHA, it.next());\n+        assertSame(Extended1Enum.BETA, it.next());\n+    }\n+\n+    public void testExtended2List() {\n+        List list = Extended2Enum.getEnumList();\n+        assertNotNull(list);\n+        assertEquals(3, list.size());\n+        assertEquals(list.size(), Extended2Enum.getEnumMap().keySet().size());\n+        \n+        Iterator it = list.iterator();\n+        assertSame(Extended2Enum.ALPHA, it.next());\n+        assertSame(Extended2Enum.BETA, it.next());\n+        assertSame(Extended2Enum.GAMMA, it.next());\n+    }\n+\n+    public void testExtended3List() {\n+        List list = Extended3Enum.getEnumList();\n+        assertNotNull(list);\n+        assertEquals(4, list.size());\n+        assertEquals(list.size(), Extended3Enum.getEnumMap().keySet().size());\n+        \n+        Iterator it = list.iterator();\n+        assertSame(Extended3Enum.ALPHA, it.next());\n+        assertSame(Extended3Enum.BETA, it.next());\n+        assertSame(Extended3Enum.GAMMA, it.next());\n+        assertSame(Extended3Enum.DELTA, it.next());\n+    }\n+\n+    public void testExtended1Map() {\n+        Map map = Extended1Enum.getEnumMap();\n+        assertNotNull(map);\n+        assertEquals(map.keySet().size(), Extended1Enum.getEnumList().size());\n+        \n+        assertTrue(map.containsValue(Extended1Enum.ALPHA));\n+        assertTrue(map.containsValue(Extended1Enum.BETA));\n+        assertSame(Extended1Enum.ALPHA, map.get(\"Alpha\"));\n+        assertSame(Extended1Enum.BETA, map.get(\"Beta\"));\n+    }\n+\n+    public void testExtended2Map() {\n+        Map map = Extended2Enum.getEnumMap();\n+        assertNotNull(map);\n+        assertEquals(map.keySet().size(), Extended2Enum.getEnumList().size());\n+        \n+        assertTrue(map.containsValue(Extended2Enum.ALPHA));\n+        assertTrue(map.containsValue(Extended2Enum.BETA));\n+        assertTrue(map.containsValue(Extended2Enum.GAMMA));\n+        assertSame(Extended2Enum.ALPHA, map.get(\"Alpha\"));\n+        assertSame(Extended2Enum.BETA, map.get(\"Beta\"));\n+        assertSame(Extended2Enum.GAMMA, map.get(\"Gamma\"));\n+    }\n+\n+    public void testExtended3Map() {\n+        Map map = Extended3Enum.getEnumMap();\n+        assertNotNull(map);\n+        assertEquals(map.keySet().size(), Extended3Enum.getEnumList().size());\n+        \n+        assertTrue(map.containsValue(Extended3Enum.ALPHA));\n+        assertTrue(map.containsValue(Extended3Enum.BETA));\n+        assertTrue(map.containsValue(Extended3Enum.GAMMA));\n+        assertTrue(map.containsValue(Extended3Enum.DELTA));\n+        assertSame(Extended3Enum.ALPHA, map.get(\"Alpha\"));\n+        assertSame(Extended3Enum.BETA, map.get(\"Beta\"));\n+        assertSame(Extended3Enum.GAMMA, map.get(\"Gamma\"));\n+        assertSame(Extended3Enum.DELTA, map.get(\"Delta\"));\n+    }\n \n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/Extended1Enum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+/**\n+ * Base extended enumeration.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Extended1Enum.java,v 1.1 2003/02/04 18:30:08 scolebourne Exp $\n+ */\n+public class Extended1Enum extends Enum {\n+    public static final Extended1Enum ALPHA = new Extended1Enum(\"Alpha\");\n+    public static final Extended1Enum BETA = new Extended1Enum(\"Beta\");\n+\n+    protected Extended1Enum(String name) {\n+        super(name);\n+    }\n+\n+    public static Extended1Enum getEnum(String name) {\n+        return (Extended1Enum) getEnum(Extended1Enum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Extended1Enum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Extended1Enum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Extended1Enum.class);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/Extended2Enum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+/**\n+ * Extended enumeration.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Extended2Enum.java,v 1.1 2003/02/04 18:30:08 scolebourne Exp $\n+ */\n+public class Extended2Enum extends Extended1Enum {\n+    public static final Extended1Enum GAMMA = new Extended2Enum(\"Gamma\");\n+\n+    protected Extended2Enum(String color) {\n+        super(color);\n+    }\n+\n+    public static Extended1Enum getEnum(String name) {\n+        return (Extended1Enum) getEnum(Extended2Enum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return getEnumMap(Extended2Enum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return getEnumList(Extended2Enum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return iterator(Extended2Enum.class);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/Extended3Enum.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Map;\n+import java.util.List;\n+import java.lang.String;\n+import java.util.Iterator;\n+/**\n+ * Extended enumeration.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Extended3Enum.java,v 1.1 2003/02/04 18:30:08 scolebourne Exp $\n+ */\n+public class Extended3Enum extends Extended2Enum {\n+    public static final Extended1Enum DELTA = new Extended3Enum(\"Delta\");\n+\n+    protected Extended3Enum(String name) {\n+        super(name);\n+    }\n+\n+    public static Extended1Enum getEnum(String name) {\n+        return (Extended1Enum) Enum.getEnum(Extended3Enum.class, name);\n+    }\n+\n+    public static Map getEnumMap() {\n+        return Enum.getEnumMap(Extended3Enum.class);\n+    }\n+\n+    public static List getEnumList() {\n+        return Enum.getEnumList(Extended3Enum.class);\n+    }\n+\n+    public static Iterator iterator() {\n+        return Enum.iterator(Extended3Enum.class);\n+    }\n+\n+}", "timestamp": 1044383408, "metainfo": ""}