{"sha": "34d25d74636254918e371e437d6234d5534693ae", "log": "Propagate original exception (LANG-567); update docs  ", "commit": "\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n      *      The type of the new array is the type of the first array,\n      *      unless the first array is null, in which case the type is the same as the second array.\n      * @since 2.1\n+     * @throws IllegalArgumentException if the array types are incompatible\n      */\n     public static <T> T[] addAll(T[] array1, T... array2) {\n         if (array1 == null) {\n         try {\n             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n         } catch (ArrayStoreException ase) {\n-            // Check if problem is incompatible types\n+            // Check if problem was due to incompatible types\n+            /*\n+             * We do this here, rather than before the copy because:\n+             * - it would be a wasted check most of the time\n+             * - safer, in case check turns out to be too strict\n+             */\n             final Class<?> type2 = array2.getClass().getComponentType();\n             if (!type1.isAssignableFrom(type2)){\n-                throw new IllegalArgumentException(\"Cannot store \"+type2.getName()+\" in an array of \"+type1.getName());\n+                throw new IllegalArgumentException(\"Cannot store \"+type2.getName()+\" in an array of \"+type1.getName(), ase);\n             }\n             throw ase; // No, so rethrow original\n         }", "timestamp": 1261159331, "metainfo": ""}