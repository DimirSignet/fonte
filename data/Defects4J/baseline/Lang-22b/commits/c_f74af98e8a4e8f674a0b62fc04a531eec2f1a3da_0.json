{"sha": "f74af98e8a4e8f674a0b62fc04a531eec2f1a3da", "log": "Push down WordUtils to \"text\" sub-package  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n import java.util.Iterator;\n import java.util.List;\n import java.util.Locale;\n+\n+import org.apache.commons.lang3.text.WordUtils;\n \n /**\n  * <p>Operations on {@link java.lang.String} that are\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/text/WordUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.text;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.SystemUtils;\n+\n+/**\n+ * <p>Operations on Strings that contain words.</p>\n+ * \n+ * <p>This class tries to handle <code>null</code> input gracefully.\n+ * An exception will not be thrown for a <code>null</code> input.\n+ * Each method documents its behaviour in more detail.</p>\n+ * \n+ * @author Apache Software Foundation\n+ * @author Apache Jakarta Velocity\n+ * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n+ * @author Gary Gregory\n+ * @since 2.0\n+ * @version $Id$\n+ */\n+public class WordUtils {\n+\n+    /**\n+     * <p><code>WordUtils</code> instances should NOT be constructed in\n+     * standard programming. Instead, the class should be used as\n+     * <code>WordUtils.wrap(\"foo bar\", 20);</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean\n+     * instance to operate.</p>\n+     */\n+    public WordUtils() {\n+      super();\n+    }\n+\n+    // Wrapping\n+    //--------------------------------------------------------------------------\n+    /**\n+     * <p>Wraps a single line of text, identifying words by <code>' '</code>.</p>\n+     * \n+     * <p>New lines will be separated by the system property line separator.\n+     * Very long words, such as URLs will <i>not</i> be wrapped.</p>\n+     * \n+     * <p>Leading spaces on a new line are stripped.\n+     * Trailing spaces are not stripped.</p>\n+     *\n+     * <pre>\n+     * WordUtils.wrap(null, *) = null\n+     * WordUtils.wrap(\"\", *) = \"\"\n+     * </pre>\n+     *\n+     * @param str  the String to be word wrapped, may be null\n+     * @param wrapLength  the column to wrap the words at, less than 1 is treated as 1\n+     * @return a line with newlines inserted, <code>null</code> if null input\n+     */\n+    public static String wrap(String str, int wrapLength) {\n+        return wrap(str, wrapLength, null, false);\n+    }\n+    \n+    /**\n+     * <p>Wraps a single line of text, identifying words by <code>' '</code>.</p>\n+     * \n+     * <p>Leading spaces on a new line are stripped.\n+     * Trailing spaces are not stripped.</p>\n+     * \n+     * <pre>\n+     * WordUtils.wrap(null, *, *, *) = null\n+     * WordUtils.wrap(\"\", *, *, *) = \"\"\n+     * </pre>\n+     *\n+     * @param str  the String to be word wrapped, may be null\n+     * @param wrapLength  the column to wrap the words at, less than 1 is treated as 1\n+     * @param newLineStr  the string to insert for a new line, \n+     *  <code>null</code> uses the system property line separator\n+     * @param wrapLongWords  true if long words (such as URLs) should be wrapped\n+     * @return a line with newlines inserted, <code>null</code> if null input\n+     */\n+    public static String wrap(String str, int wrapLength, String newLineStr, boolean wrapLongWords) {\n+        if (str == null) {\n+            return null;\n+        }\n+        if (newLineStr == null) {\n+            newLineStr = SystemUtils.LINE_SEPARATOR;\n+        }\n+        if (wrapLength < 1) {\n+            wrapLength = 1;\n+        }\n+        int inputLineLength = str.length();\n+        int offset = 0;\n+        StringBuilder wrappedLine = new StringBuilder(inputLineLength + 32);\n+        \n+        while ((inputLineLength - offset) > wrapLength) {\n+            if (str.charAt(offset) == ' ') {\n+                offset++;\n+                continue;\n+            }\n+            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);\n+\n+            if (spaceToWrapAt >= offset) {\n+                // normal case\n+                wrappedLine.append(str.substring(offset, spaceToWrapAt));\n+                wrappedLine.append(newLineStr);\n+                offset = spaceToWrapAt + 1;\n+                \n+            } else {\n+                // really long word or URL\n+                if (wrapLongWords) {\n+                    // wrap really long word one line at a time\n+                    wrappedLine.append(str.substring(offset, wrapLength + offset));\n+                    wrappedLine.append(newLineStr);\n+                    offset += wrapLength;\n+                } else {\n+                    // do not wrap really long word, just extend beyond limit\n+                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);\n+                    if (spaceToWrapAt >= 0) {\n+                        wrappedLine.append(str.substring(offset, spaceToWrapAt));\n+                        wrappedLine.append(newLineStr);\n+                        offset = spaceToWrapAt + 1;\n+                    } else {\n+                        wrappedLine.append(str.substring(offset));\n+                        offset = inputLineLength;\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Whatever is left in line is short enough to just pass through\n+        wrappedLine.append(str.substring(offset));\n+\n+        return wrappedLine.toString();\n+    }\n+\n+    // Capitalizing\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Capitalizes all the whitespace separated words in a String.\n+     * Only the first letter of each word is changed. To convert the \n+     * rest of each word to lowercase at the same time, \n+     * use {@link #capitalizeFully(String)}.</p>\n+     *\n+     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n+     * A <code>null</code> input String returns <code>null</code>.\n+     * Capitalization uses the unicode title case, normally equivalent to\n+     * upper case.</p>\n+     *\n+     * <pre>\n+     * WordUtils.capitalize(null)        = null\n+     * WordUtils.capitalize(\"\")          = \"\"\n+     * WordUtils.capitalize(\"i am FINE\") = \"I Am FINE\"\n+     * </pre>\n+     * \n+     * @param str  the String to capitalize, may be null\n+     * @return capitalized String, <code>null</code> if null String input\n+     * @see #uncapitalize(String)\n+     * @see #capitalizeFully(String)\n+     */\n+    public static String capitalize(String str) {\n+        return capitalize(str, null);\n+    }\n+\n+    /**\n+     * <p>Capitalizes all the delimiter separated words in a String.\n+     * Only the first letter of each word is changed. To convert the \n+     * rest of each word to lowercase at the same time, \n+     * use {@link #capitalizeFully(String, char[])}.</p>\n+     *\n+     * <p>The delimiters represent a set of characters understood to separate words.\n+     * The first string character and the first non-delimiter character after a\n+     * delimiter will be capitalized. </p>\n+     *\n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * Capitalization uses the unicode title case, normally equivalent to\n+     * upper case.</p>\n+     *\n+     * <pre>\n+     * WordUtils.capitalize(null, *)            = null\n+     * WordUtils.capitalize(\"\", *)              = \"\"\n+     * WordUtils.capitalize(*, new char[0])     = *\n+     * WordUtils.capitalize(\"i am fine\", null)  = \"I Am Fine\"\n+     * WordUtils.capitalize(\"i aM.fine\", {'.'}) = \"I aM.Fine\"\n+     * </pre>\n+     * \n+     * @param str  the String to capitalize, may be null\n+     * @param delimiters  set of characters to determine capitalization, null means whitespace\n+     * @return capitalized String, <code>null</code> if null String input\n+     * @see #uncapitalize(String)\n+     * @see #capitalizeFully(String)\n+     * @since 2.1\n+     */\n+    public static String capitalize(String str, char[] delimiters) {\n+        int delimLen = (delimiters == null ? -1 : delimiters.length);\n+        if (str == null || str.length() == 0 || delimLen == 0) {\n+            return str;\n+        }\n+        int strLen = str.length();\n+        StringBuilder buffer = new StringBuilder(strLen);\n+        boolean capitalizeNext = true;\n+        for (int i = 0; i < strLen; i++) {\n+            char ch = str.charAt(i);\n+\n+            if (isDelimiter(ch, delimiters)) {\n+                buffer.append(ch);\n+                capitalizeNext = true;\n+            } else if (capitalizeNext) {\n+                buffer.append(Character.toTitleCase(ch));\n+                capitalizeNext = false;\n+            } else {\n+                buffer.append(ch);\n+            }\n+        }\n+        return buffer.toString();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Converts all the whitespace separated words in a String into capitalized words, \n+     * that is each word is made up of a titlecase character and then a series of \n+     * lowercase characters.  </p>\n+     *\n+     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n+     * A <code>null</code> input String returns <code>null</code>.\n+     * Capitalization uses the unicode title case, normally equivalent to\n+     * upper case.</p>\n+     *\n+     * <pre>\n+     * WordUtils.capitalizeFully(null)        = null\n+     * WordUtils.capitalizeFully(\"\")          = \"\"\n+     * WordUtils.capitalizeFully(\"i am FINE\") = \"I Am Fine\"\n+     * </pre>\n+     * \n+     * @param str  the String to capitalize, may be null\n+     * @return capitalized String, <code>null</code> if null String input\n+     */\n+    public static String capitalizeFully(String str) {\n+        return capitalizeFully(str, null);\n+    }\n+\n+    /**\n+     * <p>Converts all the delimiter separated words in a String into capitalized words, \n+     * that is each word is made up of a titlecase character and then a series of \n+     * lowercase characters. </p>\n+     *\n+     * <p>The delimiters represent a set of characters understood to separate words.\n+     * The first string character and the first non-delimiter character after a\n+     * delimiter will be capitalized. </p>\n+     *\n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * Capitalization uses the unicode title case, normally equivalent to\n+     * upper case.</p>\n+     *\n+     * <pre>\n+     * WordUtils.capitalizeFully(null, *)            = null\n+     * WordUtils.capitalizeFully(\"\", *)              = \"\"\n+     * WordUtils.capitalizeFully(*, null)            = *\n+     * WordUtils.capitalizeFully(*, new char[0])     = *\n+     * WordUtils.capitalizeFully(\"i aM.fine\", {'.'}) = \"I am.Fine\"\n+     * </pre>\n+     * \n+     * @param str  the String to capitalize, may be null\n+     * @param delimiters  set of characters to determine capitalization, null means whitespace\n+     * @return capitalized String, <code>null</code> if null String input\n+     * @since 2.1\n+     */\n+    public static String capitalizeFully(String str, char[] delimiters) {\n+        int delimLen = (delimiters == null ? -1 : delimiters.length);\n+        if (str == null || str.length() == 0 || delimLen == 0) {\n+            return str;\n+        }\n+        str = str.toLowerCase();\n+        return capitalize(str, delimiters);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Uncapitalizes all the whitespace separated words in a String.\n+     * Only the first letter of each word is changed.</p>\n+     *\n+     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n+     * A <code>null</code> input String returns <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * WordUtils.uncapitalize(null)        = null\n+     * WordUtils.uncapitalize(\"\")          = \"\"\n+     * WordUtils.uncapitalize(\"I Am FINE\") = \"i am fINE\"\n+     * </pre>\n+     * \n+     * @param str  the String to uncapitalize, may be null\n+     * @return uncapitalized String, <code>null</code> if null String input\n+     * @see #capitalize(String)\n+     */\n+    public static String uncapitalize(String str) {\n+        return uncapitalize(str, null);\n+    }\n+\n+    /**\n+     * <p>Uncapitalizes all the whitespace separated words in a String.\n+     * Only the first letter of each word is changed.</p>\n+     *\n+     * <p>The delimiters represent a set of characters understood to separate words.\n+     * The first string character and the first non-delimiter character after a\n+     * delimiter will be uncapitalized. </p>\n+     *\n+     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n+     * A <code>null</code> input String returns <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * WordUtils.uncapitalize(null, *)            = null\n+     * WordUtils.uncapitalize(\"\", *)              = \"\"\n+     * WordUtils.uncapitalize(*, null)            = *\n+     * WordUtils.uncapitalize(*, new char[0])     = *\n+     * WordUtils.uncapitalize(\"I AM.FINE\", {'.'}) = \"i AM.fINE\"\n+     * </pre>\n+     * \n+     * @param str  the String to uncapitalize, may be null\n+     * @param delimiters  set of characters to determine uncapitalization, null means whitespace\n+     * @return uncapitalized String, <code>null</code> if null String input\n+     * @see #capitalize(String)\n+     * @since 2.1\n+     */\n+    public static String uncapitalize(String str, char[] delimiters) {\n+        int delimLen = (delimiters == null ? -1 : delimiters.length);\n+        if (str == null || str.length() == 0 || delimLen == 0) {\n+            return str;\n+        }\n+        int strLen = str.length();\n+        StringBuilder buffer = new StringBuilder(strLen);\n+        boolean uncapitalizeNext = true;\n+        for (int i = 0; i < strLen; i++) {\n+            char ch = str.charAt(i);\n+\n+            if (isDelimiter(ch, delimiters)) {\n+                buffer.append(ch);\n+                uncapitalizeNext = true;\n+            } else if (uncapitalizeNext) {\n+                buffer.append(Character.toLowerCase(ch));\n+                uncapitalizeNext = false;\n+            } else {\n+                buffer.append(ch);\n+            }\n+        }\n+        return buffer.toString();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Swaps the case of a String using a word based algorithm.</p>\n+     * \n+     * <ul>\n+     *  <li>Upper case character converts to Lower case</li>\n+     *  <li>Title case character converts to Lower case</li>\n+     *  <li>Lower case character after Whitespace or at start converts to Title case</li>\n+     *  <li>Other Lower case character converts to Upper case</li>\n+     * </ul>\n+     * \n+     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n+     * A <code>null</code> input String returns <code>null</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.swapCase(null)                 = null\n+     * StringUtils.swapCase(\"\")                   = \"\"\n+     * StringUtils.swapCase(\"The dog has a BONE\") = \"tHE DOG HAS A bone\"\n+     * </pre>\n+     * \n+     * @param str  the String to swap case, may be null\n+     * @return the changed String, <code>null</code> if null String input\n+     */\n+    public static String swapCase(String str) {\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return str;\n+        }\n+        StringBuilder buffer = new StringBuilder(strLen);\n+\n+        boolean whitespace = true;\n+        char ch = 0;\n+        char tmp = 0;\n+\n+        for (int i = 0; i < strLen; i++) {\n+            ch = str.charAt(i);\n+            if (Character.isUpperCase(ch)) {\n+                tmp = Character.toLowerCase(ch);\n+            } else if (Character.isTitleCase(ch)) {\n+                tmp = Character.toLowerCase(ch);\n+            } else if (Character.isLowerCase(ch)) {\n+                if (whitespace) {\n+                    tmp = Character.toTitleCase(ch);\n+                } else {\n+                    tmp = Character.toUpperCase(ch);\n+                }\n+            } else {\n+                tmp = ch;\n+            }\n+            buffer.append(tmp);\n+            whitespace = Character.isWhitespace(ch);\n+        }\n+        return buffer.toString();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Extracts the initial letters from each word in the String.</p>\n+     * \n+     * <p>The first letter of the string and all first letters after\n+     * whitespace are returned as a new string.\n+     * Their case is not changed.</p>\n+     *\n+     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n+     * A <code>null</code> input String returns <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * WordUtils.initials(null)             = null\n+     * WordUtils.initials(\"\")               = \"\"\n+     * WordUtils.initials(\"Ben John Lee\")   = \"BJL\"\n+     * WordUtils.initials(\"Ben J.Lee\")      = \"BJ\"\n+     * </pre>\n+     *\n+     * @param str  the String to get initials from, may be null\n+     * @return String of initial letters, <code>null</code> if null String input\n+     * @see #initials(String,char[])\n+     * @since 2.2\n+     */\n+    public static String initials(String str) {\n+        return initials(str, null);\n+    }\n+\n+    /**\n+     * <p>Extracts the initial letters from each word in the String.</p>\n+     * \n+     * <p>The first letter of the string and all first letters after the\n+     * defined delimiters are returned as a new string.\n+     * Their case is not changed.</p>\n+     *\n+     * <p>If the delimiters array is null, then Whitespace is used.\n+     * Whitespace is defined by {@link Character#isWhitespace(char)}.\n+     * A <code>null</code> input String returns <code>null</code>.\n+     * An empty delimiter array returns an empty String.</p>\n+     *\n+     * <pre>\n+     * WordUtils.initials(null, *)                = null\n+     * WordUtils.initials(\"\", *)                  = \"\"\n+     * WordUtils.initials(\"Ben John Lee\", null)   = \"BJL\"\n+     * WordUtils.initials(\"Ben J.Lee\", null)      = \"BJ\"\n+     * WordUtils.initials(\"Ben J.Lee\", [' ','.']) = \"BJL\"\n+     * WordUtils.initials(*, new char[0])         = \"\"\n+     * </pre>\n+     * \n+     * @param str  the String to get initials from, may be null\n+     * @param delimiters  set of characters to determine words, null means whitespace\n+     * @return String of initial letters, <code>null</code> if null String input\n+     * @see #initials(String)\n+     * @since 2.2\n+     */\n+    public static String initials(String str, char[] delimiters) {\n+        if (str == null || str.length() == 0) {\n+            return str;\n+        }\n+        if (delimiters != null && delimiters.length == 0) {\n+            return \"\";\n+        }\n+        int strLen = str.length();\n+        char[] buf = new char[strLen / 2 + 1];\n+        int count = 0;\n+        boolean lastWasGap = true;\n+        for (int i = 0; i < strLen; i++) {\n+            char ch = str.charAt(i);\n+\n+            if (isDelimiter(ch, delimiters)) {\n+                lastWasGap = true;\n+            } else if (lastWasGap) {\n+                buf[count++] = ch;\n+                lastWasGap = false;\n+            } else {\n+                // ignore ch\n+            }\n+        }\n+        return new String(buf, 0, count);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Is the character a delimiter.\n+     *\n+     * @param ch  the character to check\n+     * @param delimiters  the delimiters\n+     * @return true if it is a delimiter\n+     */\n+    private static boolean isDelimiter(char ch, char[] delimiters) {\n+        if (delimiters == null) {\n+            return Character.isWhitespace(ch);\n+        }\n+        for (int i = 0, isize = delimiters.length; i < isize; i++) {\n+            if (ch == delimiters[i]) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Abbreviates a string nicely.\n+     * \n+     * This method searches for the first space after the lower limit and abbreviates\n+     * the String there. It will also append any String passed as a parameter\n+     * to the end of the String. The upper limit can be specified to forcibly\n+     * abbreviate a String.\n+     * \n+     * @param str         the string to be abbreviated. If null is passed, null is returned.\n+     *                    If the empty String is passed, the empty string is returned.\n+     * @param lower       the lower limit.\n+     * @param upper       the upper limit; specify -1 if no limit is desired.\n+     *                    If the upper limit is lower than the lower limit, it will be\n+     *                    adjusted to be the same as the lower limit.\n+     * @param appendToEnd String to be appended to the end of the abbreviated string.\n+     *                    This is appended ONLY if the string was indeed abbreviated.\n+     *                    The append does not count towards the lower or upper limits.\n+     * @return the abbreviated String.\n+     * @since 2.4\n+     */\n+    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+        // initial parameter checks\n+        if (str == null) {\n+            return null;\n+        }\n+        if (str.length() == 0) {\n+            return StringUtils.EMPTY;\n+        }\n+\n+        // if the lower value is greater than the length of the string,\n+        // set to the length of the string\n+        if (lower > str.length()) {\n+            lower = str.length();    \n+        }\n+        // if the upper value is -1 (i.e. no limit) or is greater\n+        // than the length of the string, set to the length of the string\n+        if (upper == -1 || upper > str.length()) {\n+            upper = str.length();\n+        }\n+        // if upper is less than lower, raise it to lower\n+        if (upper < lower) {\n+            upper = lower;\n+        }\n+\n+        StringBuilder result = new StringBuilder();\n+        int index = StringUtils.indexOf(str, \" \", lower);\n+        if (index == -1) {\n+            result.append(str.substring(0, upper));\n+            // only if abbreviation has occured do we append the appendToEnd value\n+            if (upper != str.length()) {\n+                result.append(StringUtils.defaultString(appendToEnd));\n+            }\n+        } else if (index > upper) {\n+            result.append(str.substring(0, upper));\n+            result.append(StringUtils.defaultString(appendToEnd));\n+        } else {\n+            result.append(str.substring(0, index));\n+            result.append(StringUtils.defaultString(appendToEnd));\n+        }\n+        return result.toString();\n+    }\n+\n+}\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.Locale;\n+\n+import org.apache.commons.lang3.text.WordUtils;\n \n import junit.framework.TestCase;\n \n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.text;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for WordUtils class.\n+ * \n+ * @author Apache Software Foundation\n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @version $Id$\n+ */\n+public class WordUtilsTest extends TestCase {\n+\n+    public WordUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new WordUtils());\n+        Constructor<?>[] cons = WordUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(WordUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(WordUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWrap_StringInt() {\n+        assertEquals(null, WordUtils.wrap(null, 20));\n+        assertEquals(null, WordUtils.wrap(null, -1));\n+        \n+        assertEquals(\"\", WordUtils.wrap(\"\", 20));\n+        assertEquals(\"\", WordUtils.wrap(\"\", -1));\n+        \n+        // normal\n+        String systemNewLine = System.getProperty(\"line.separator\");\n+        String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n+        String expected = \"Here is one line of\" + systemNewLine + \"text that is going\" \n+            + systemNewLine + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20));\n+        \n+        // long word at end\n+        input = \"Click here to jump to the jakarta website - http://jakarta.apache.org\";\n+        expected = \"Click here to jump\" + systemNewLine + \"to the jakarta\" + systemNewLine \n+            + \"website -\" + systemNewLine + \"http://jakarta.apache.org\";\n+        assertEquals(expected, WordUtils.wrap(input, 20));\n+        \n+        // long word in middle\n+        input = \"Click here, http://jakarta.apache.org, to jump to the jakarta website\";\n+        expected = \"Click here,\" + systemNewLine + \"http://jakarta.apache.org,\" + systemNewLine \n+            + \"to jump to the\" + systemNewLine + \"jakarta website\";\n+        assertEquals(expected, WordUtils.wrap(input, 20));\n+    }\n+    \n+    public void testWrap_StringIntStringBoolean() {\n+        assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", false));\n+        assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", true));\n+        assertEquals(null, WordUtils.wrap(null, 20, null, true));\n+        assertEquals(null, WordUtils.wrap(null, 20, null, false));\n+        assertEquals(null, WordUtils.wrap(null, -1, null, true));\n+        assertEquals(null, WordUtils.wrap(null, -1, null, false));\n+        \n+        assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", false));\n+        assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", true));\n+        assertEquals(\"\", WordUtils.wrap(\"\", 20, null, false));\n+        assertEquals(\"\", WordUtils.wrap(\"\", 20, null, true));\n+        assertEquals(\"\", WordUtils.wrap(\"\", -1, null, false));\n+        assertEquals(\"\", WordUtils.wrap(\"\", -1, null, true));\n+        \n+        // normal\n+        String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n+        String expected = \"Here is one line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+\n+        // unusual newline char\n+        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n+        expected = \"Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", true));\n+\n+        // short line length\n+        input = \"Here is one line\";\n+        expected = \"Here\\nis one\\nline\";\n+        assertEquals(expected, WordUtils.wrap(input, 6, \"\\n\", false));\n+        expected = \"Here\\nis\\none\\nline\";\n+        assertEquals(expected, WordUtils.wrap(input, 2, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, -1, \"\\n\", false));\n+\n+        // system newline char\n+        String systemNewLine = System.getProperty(\"line.separator\");\n+        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n+        expected = \"Here is one line of\" + systemNewLine + \"text that is going\" + systemNewLine \n+            + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, null, false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, null, true));\n+\n+        // with extra spaces\n+        input = \" Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns.\";\n+        expected = \"Here:  is  one  line\\nof  text  that  is \\ngoing  to  be \\nwrapped  after  20 \\ncolumns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+        \n+        // with tab\n+        input = \"Here is\\tone line of text that is going to be wrapped after 20 columns.\";\n+        expected = \"Here is\\tone line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+        \n+        // with tab at wrapColumn\n+        input = \"Here is one line of\\ttext that is going to be wrapped after 20 columns.\";\n+        expected = \"Here is one line\\nof\\ttext that is\\ngoing to be wrapped\\nafter 20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+        \n+        // difference because of long word\n+        input = \"Click here to jump to the jakarta website - http://jakarta.apache.org\";\n+        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apache.org\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apach\\ne.org\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+        \n+        // difference because of long word in middle\n+        input = \"Click here, http://jakarta.apache.org, to jump to the jakarta website\";\n+        expected = \"Click here,\\nhttp://jakarta.apache.org,\\nto jump to the\\njakarta website\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        expected = \"Click here,\\nhttp://jakarta.apach\\ne.org, to jump to\\nthe jakarta website\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+//        System.err.println(expected);\n+//        System.err.println(WordUtils.wrap(input, 20, \"\\n\", false));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testCapitalize_String() {\n+        assertEquals(null, WordUtils.capitalize(null));\n+        assertEquals(\"\", WordUtils.capitalize(\"\"));\n+        assertEquals(\"  \", WordUtils.capitalize(\"  \"));\n+        \n+        assertEquals(\"I\", WordUtils.capitalize(\"I\") );\n+        assertEquals(\"I\", WordUtils.capitalize(\"i\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"i am here 123\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"I Am Here 123\") );\n+        assertEquals(\"I Am HERE 123\", WordUtils.capitalize(\"i am HERE 123\") );\n+        assertEquals(\"I AM HERE 123\", WordUtils.capitalize(\"I AM HERE 123\") );\n+    }\n+    \n+    public void testCapitalizeWithDelimiters_String() {\n+        assertEquals(null, WordUtils.capitalize(null, null));\n+        assertEquals(\"\", WordUtils.capitalize(\"\", new char[0]));\n+        assertEquals(\"  \", WordUtils.capitalize(\"  \", new char[0]));\n+        \n+        char[] chars = new char[] { '-', '+', ' ', '@' };\n+        assertEquals(\"I\", WordUtils.capitalize(\"I\", chars) );\n+        assertEquals(\"I\", WordUtils.capitalize(\"i\", chars) );\n+        assertEquals(\"I-Am Here+123\", WordUtils.capitalize(\"i-am here+123\", chars) );\n+        assertEquals(\"I Am+Here-123\", WordUtils.capitalize(\"I Am+Here-123\", chars) );\n+        assertEquals(\"I+Am-HERE 123\", WordUtils.capitalize(\"i+am-HERE 123\", chars) );\n+        assertEquals(\"I-AM HERE+123\", WordUtils.capitalize(\"I-AM HERE+123\", chars) );\n+        chars = new char[] {'.'};\n+        assertEquals(\"I aM.Fine\", WordUtils.capitalize(\"i aM.fine\", chars) );\n+        assertEquals(\"I Am.fine\", WordUtils.capitalize(\"i am.fine\", null) );\n+    }\n+\n+    public void testCapitalizeFully_String() {\n+        assertEquals(null, WordUtils.capitalizeFully(null));\n+        assertEquals(\"\", WordUtils.capitalizeFully(\"\"));\n+        assertEquals(\"  \", WordUtils.capitalizeFully(\"  \"));\n+        \n+        assertEquals(\"I\", WordUtils.capitalizeFully(\"I\") );\n+        assertEquals(\"I\", WordUtils.capitalizeFully(\"i\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am here 123\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I Am Here 123\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am HERE 123\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I AM HERE 123\") );\n+    }\n+    \n+    public void testCapitalizeFullyWithDelimiters_String() {\n+        assertEquals(null, WordUtils.capitalizeFully(null, null));\n+        assertEquals(\"\", WordUtils.capitalizeFully(\"\", new char[0]));\n+        assertEquals(\"  \", WordUtils.capitalizeFully(\"  \", new char[0]));\n+        \n+        char[] chars = new char[] { '-', '+', ' ', '@' };\n+        assertEquals(\"I\", WordUtils.capitalizeFully(\"I\", chars) );\n+        assertEquals(\"I\", WordUtils.capitalizeFully(\"i\", chars) );\n+        assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"i-am here+123\", chars) );\n+        assertEquals(\"I Am+Here-123\", WordUtils.capitalizeFully(\"I Am+Here-123\", chars) );\n+        assertEquals(\"I+Am-Here 123\", WordUtils.capitalizeFully(\"i+am-HERE 123\", chars) );\n+        assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"I-AM HERE+123\", chars) );\n+        chars = new char[] {'.'};\n+        assertEquals(\"I am.Fine\", WordUtils.capitalizeFully(\"i aM.fine\", chars) );\n+        assertEquals(\"I Am.fine\", WordUtils.capitalizeFully(\"i am.fine\", null) );\n+    }\n+\n+    public void testUncapitalize_String() {\n+        assertEquals(null, WordUtils.uncapitalize(null));\n+        assertEquals(\"\", WordUtils.uncapitalize(\"\"));\n+        assertEquals(\"  \", WordUtils.uncapitalize(\"  \"));\n+        \n+        assertEquals(\"i\", WordUtils.uncapitalize(\"I\") );\n+        assertEquals(\"i\", WordUtils.uncapitalize(\"i\") );\n+        assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"i am here 123\") );\n+        assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"I Am Here 123\") );\n+        assertEquals(\"i am hERE 123\", WordUtils.uncapitalize(\"i am HERE 123\") );\n+        assertEquals(\"i aM hERE 123\", WordUtils.uncapitalize(\"I AM HERE 123\") );\n+    }\n+    \n+    public void testUncapitalizeWithDelimiters_String() {\n+        assertEquals(null, WordUtils.uncapitalize(null, null));\n+        assertEquals(\"\", WordUtils.uncapitalize(\"\", new char[0]));\n+        assertEquals(\"  \", WordUtils.uncapitalize(\"  \", new char[0]));\n+        \n+        char[] chars = new char[] { '-', '+', ' ', '@' };\n+        assertEquals(\"i\", WordUtils.uncapitalize(\"I\", chars) );\n+        assertEquals(\"i\", WordUtils.uncapitalize(\"i\", chars) );\n+        assertEquals(\"i am-here+123\", WordUtils.uncapitalize(\"i am-here+123\", chars) );\n+        assertEquals(\"i+am here-123\", WordUtils.uncapitalize(\"I+Am Here-123\", chars) );\n+        assertEquals(\"i-am+hERE 123\", WordUtils.uncapitalize(\"i-am+HERE 123\", chars) );\n+        assertEquals(\"i aM-hERE+123\", WordUtils.uncapitalize(\"I AM-HERE+123\", chars) );\n+        chars = new char[] {'.'};\n+        assertEquals(\"i AM.fINE\", WordUtils.uncapitalize(\"I AM.FINE\", chars) );\n+        assertEquals(\"i aM.FINE\", WordUtils.uncapitalize(\"I AM.FINE\", null) );\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testInitials_String() {\n+        assertEquals(null, WordUtils.initials(null));\n+        assertEquals(\"\", WordUtils.initials(\"\"));\n+        assertEquals(\"\", WordUtils.initials(\"  \"));\n+\n+        assertEquals(\"I\", WordUtils.initials(\"I\"));\n+        assertEquals(\"i\", WordUtils.initials(\"i\"));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\"));\n+        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\"));\n+        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\"));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\"));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testInitials_String_charArray() {\n+        char[] array = null;\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = new char[0];\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = \" \".toCharArray();\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = \" .\".toCharArray();\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = \" .'\".toCharArray();\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"KOM\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = \"SIJo1\".toCharArray();\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\" \", WordUtils.initials(\"  \", array));\n+        assertEquals(\"\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"C\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"Bh\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"B.\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\" h\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"K\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"i2\", WordUtils.initials(\"i am here 123\", array));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSwapCase_String() {\n+        assertEquals(null, WordUtils.swapCase(null));\n+        assertEquals(\"\", WordUtils.swapCase(\"\"));\n+        assertEquals(\"  \", WordUtils.swapCase(\"  \"));\n+        \n+        assertEquals(\"i\", WordUtils.swapCase(\"I\") );\n+        assertEquals(\"I\", WordUtils.swapCase(\"i\") );\n+        assertEquals(\"I AM HERE 123\", WordUtils.swapCase(\"i am here 123\") );\n+        assertEquals(\"i aM hERE 123\", WordUtils.swapCase(\"I Am Here 123\") );\n+        assertEquals(\"I AM here 123\", WordUtils.swapCase(\"i am HERE 123\") );\n+        assertEquals(\"i am here 123\", WordUtils.swapCase(\"I AM HERE 123\") );\n+\n+        String test = \"This String contains a TitleCase character: \\u01C8\";\n+        String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\n+        assertEquals(expect, WordUtils.swapCase(test));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testAbbreviate() {\n+        // check null and empty are returned respectively\n+        assertNull(WordUtils.abbreviate(null, 1,-1,\"\"));\n+        assertEquals(StringUtils.EMPTY, WordUtils.abbreviate(\"\", 1,-1,\"\"));\n+\n+        // test upper limit\n+        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 0,5,\"\"));\n+        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"\"));\n+        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5,\"\"));\n+        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n+        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n+\n+        // test upper limit + append string\n+        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 0,5,\"-\"));\n+        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"-\"));\n+        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5, null));\n+        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n+        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n+\n+        // test lower value\n+        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n+        assertEquals(\"01234\", WordUtils.abbreviate(\"01234 56789\", 5, 10, null));\n+        assertEquals(\"01 23 45 67\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, null));\n+        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, null));\n+        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 15, 20, null));\n+\n+        // test lower value + append\n+        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n+        assertEquals(\"01234-\", WordUtils.abbreviate(\"01234 56789\", 5, 10, \"-\"));\n+        assertEquals(\"01 23 45 67abc\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, \"abc\"));\n+        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, \"\"));\n+\n+        // others\n+        assertEquals(\"\", WordUtils.abbreviate(\"0123456790\", 0,0,\"\"));\n+        assertEquals(\"\", WordUtils.abbreviate(\" 0123456790\", 0,-1,\"\"));\n+    }\n+\n+}", "timestamp": 1262502811, "metainfo": ""}