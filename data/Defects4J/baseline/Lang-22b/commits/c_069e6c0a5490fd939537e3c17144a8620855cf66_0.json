{"sha": "069e6c0a5490fd939537e3c17144a8620855cf66", "log": "Added the getThrowableCount(Throwable), getThrowables(Throwable), indexOfThrowable(Throwable, Class), and indexOfThrowable(Throwable, Class, int) methods factored out of NestableDelegate, as suggested by Stephen Colebourne <scolebourne@btopenworld.com>.  Added a TODO for the remaining methods he suggested moving.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.sql.SQLException;\n+import java.util.ArrayList;\n+\n+/*\n+TODO: Refactor code from NestableDelegate to ExceptionUtils.\n+\n+printStackTrace(Throwable, PrintWriter)\n+*/\n \n /**\n  * Utility routines for manipulating <code>Throwable</code> objects.\n         }\n         return null;\n     }\n+\n+    /**\n+     * Returns the number of <code>Throwable</code> objects in the\n+     * exception chain.\n+     *\n+     * @return The throwable count.\n+     */\n+    public static int getThrowableCount(Throwable t)\n+    {\n+        // Count the number of throwables\n+        int count = 1;\n+        t = ExceptionUtils.getCause(t);\n+        while (t != null)\n+        {\n+            count++;\n+            t = ExceptionUtils.getCause(t);\n+        }\n+        return count;\n+    }\n+\n+    /**\n+     * Returns the list of <code>Throwable</code> objects in the\n+     * exception chain.\n+     *\n+     * @return The list of <code>Throwable</code> objects.\n+     */\n+    public static Throwable[] getThrowables(Throwable t)\n+    {\n+        ArrayList list = new ArrayList();\n+        if (t != null)\n+        {\n+            list.add(t);\n+            t = ExceptionUtils.getCause(t);\n+            while (t != null)\n+            {\n+                list.add(t);\n+                t = ExceptionUtils.getCause(t);\n+            }\n+        }\n+        return (Throwable []) list.toArray(new Throwable[list.size()]);\n+    }\n+\n+    /**\n+     * Delegates to {@link #indexOfThrowable(Throwable, Class, int)},\n+     * starting the search at the beginning of the exception chain.\n+     *\n+     * @see #indexOfThrowable(Throwable, Class, int)\n+     */\n+    public static int indexOfThrowable(Throwable t, Class type)\n+    {\n+        return indexOfThrowable(t, type, 0);\n+    }\n+\n+    /**\n+     * Returns the (zero based) index, of the first\n+     * <code>Throwable</code> that matches the specified type in the\n+     * exception chain of <code>Throwable</code> objects with an index\n+     * greater than or equal to the specified index, or\n+     * <code>-1</code> if the type is not found.\n+     *\n+     * @param type <code>Class</code> to look for.\n+     * @param fromIndex The (zero based) index of the starting\n+     * position in the chain to be searched.\n+     * @return index The first occurrence of the type in the chain, or\n+     * <code>-1</code> if the type is not found.\n+     * @throws IndexOutOfBoundsException If the <code>fromIndex</code>\n+     * argument is negative or not less than the count of\n+     * <code>Throwable</code>s in the chain.\n+     */\n+    public static int indexOfThrowable(Throwable t, Class type, int fromIndex)\n+    {\n+        if (fromIndex < 0)\n+        {\n+            throw new IndexOutOfBoundsException\n+                (\"Throwable index out of range: \" + fromIndex);\n+        }\n+        Throwable[] throwables = ExceptionUtils.getThrowables(t);\n+        if (fromIndex >= throwables.length)\n+        {\n+            throw new IndexOutOfBoundsException\n+                (\"Throwable index out of range: \" + fromIndex);\n+        }\n+        for (int i = fromIndex; i < throwables.length; i++)\n+        {\n+            if (throwables[i].getClass().equals(type))\n+            {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n }", "timestamp": 1029973882, "metainfo": ""}