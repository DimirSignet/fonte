{"sha": "66639bb5ad34c91aee69edb3d8ca7d227b88940d", "log": "Add ArrayUtils.toArray (LANG-537).  ", "commit": "\n--- a/src/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java\n         return map;\n     }\n \n+    // Generic array\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Create a type-safe generic array.\n+     *\n+     * <p>Arrays are covariant i.e. they cannot be created from a generic type:</p>\n+     *\n+     * <pre>\n+    public static &lt;T&gt; T[] createAnArray(int size)\n+    {\n+        return T[size]; // compiler error here\n+    }\n+    public static &lt;T&gt; T[] createAnArray(int size)\n+    {\n+        return (T[])Object[size]; // ClassCastException at runtime\n+    }\n+     * </pre>\n+     *\n+     * <p>Therefore new arrays of generic types can be created with this method, e.g. an arrays\n+     * of Strings:</p>\n+     *\n+     * <pre>\n+    String[] array = ArrayUtils.toArray(\"1\", \"2\");\n+    String[] emptyArray = ArrayUtils.&lt;String&gt;toArray();\n+     * </pre>\n+     * \n+     * The method is typically used in scenarios, where the caller itself uses generic types\n+     * that have to be combined into an array.\n+     * \n+     * Note, this method makes only sense to provide arguments of the same type so that the\n+     * compiler can deduce the type of the array itself. While it is possible to select the\n+     * type explicitly like in <code>Number[] array = ArrayUtils.<Number>toArray(new\n+     * Integer(42), new Double(Math.PI))</code>, there is no real advantage to <code>new\n+     * Number[] {new Integer(42), new Double(Math.PI)}</code> anymore.\n+     *\n+     * @param  <T>   the array's element type\n+     * @param  items the items of the array\n+     * @return the array\n+     * @since  3.0\n+     */\n+    public static <T> T[] toArray(final T... items)\n+    {\n+        return items;\n+    }\n+    \n     // Clone\n     //-----------------------------------------------------------------------\n     /**\n--- a/src/test/org/apache/commons/lang3/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang3/ArrayUtilsTest.java\n \n         assertEquals(true, ArrayUtils.isEquals(null, null));\n         assertEquals(false, ArrayUtils.isEquals(null, array4));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests generic array creation with parameters of same type.\n+     */\n+    public void testArrayCreation()\n+    {\n+        final String[] array = ArrayUtils.toArray(\"foo\", \"bar\");\n+        assertEquals(2, array.length);\n+        assertEquals(\"foo\", array[0]);\n+        assertEquals(\"bar\", array[1]);\n+    }\n+\n+    /**\n+     * Tests generic array creation with general return type.\n+     */\n+    public void testArrayCreationWithGeneralReturnType()\n+    {\n+        final Object obj = ArrayUtils.toArray(\"foo\", \"bar\");\n+        assertTrue(obj instanceof String[]);\n+    }\n+\n+    /**\n+     * Tests generic array creation with parameters of common base type.\n+     */\n+    public void testArrayCreationWithDifferentTypes()\n+    {\n+        final Number[] array = ArrayUtils.<Number>toArray(Integer.valueOf(42), Double.valueOf(Math.PI));\n+        assertEquals(2, array.length);\n+        assertEquals(Integer.valueOf(42), array[0]);\n+        assertEquals(Double.valueOf(Math.PI), array[1]);\n+    }\n+\n+    /**\n+     * Tests generic array creation with generic type.\n+     */\n+    public void testIndirectArrayCreation()\n+    {\n+        final String[] array = toArrayPropagatingType(\"foo\", \"bar\");\n+        assertEquals(2, array.length);\n+        assertEquals(\"foo\", array[0]);\n+        assertEquals(\"bar\", array[1]);\n+    }\n+\n+    /**\n+     * Tests generic empty array creation with generic type.\n+     */\n+    public void testEmptyArrayCreation()\n+    {\n+        final String[] array = ArrayUtils.<String>toArray();\n+        assertEquals(0, array.length);\n+    }\n+\n+    /**\n+     * Tests indirect generic empty array creation with generic type.\n+     */\n+    public void testIndirectEmptyArrayCreation()\n+    {\n+        final String[] array = ArrayUtilsTest.<String>toArrayPropagatingType();\n+        assertEquals(0, array.length);\n+    }\n+\n+    private static <T> T[] toArrayPropagatingType(final T... items)\n+    {\n+        return ArrayUtils.toArray(items);\n     }\n     \n     //-----------------------------------------------------------------------", "timestamp": 1261582058, "metainfo": ""}