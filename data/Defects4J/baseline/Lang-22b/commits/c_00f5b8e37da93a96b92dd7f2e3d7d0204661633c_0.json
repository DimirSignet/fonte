{"sha": "00f5b8e37da93a96b92dd7f2e3d7d0204661633c", "log": "Updating to java 5 foreach - LANG-336  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n      */\n     private static final Map<Class<?>, Class<?>> wrapperPrimitiveMap = new HashMap<Class<?>, Class<?>>();\n     static {\n-        for (Iterator<Class<?>> it = primitiveWrapperMap.keySet().iterator(); it.hasNext();) {\n-            Class<?> primitiveClass = it.next();\n+        for (Class<?> primitiveClass : primitiveWrapperMap.keySet()) {\n             Class<?> wrapperClass = primitiveWrapperMap.get(primitiveClass);\n             if (!primitiveClass.equals(wrapperClass)) {\n                 wrapperPrimitiveMap.put(wrapperClass, primitiveClass);\n         List<Class<?>> list = new ArrayList<Class<?>>();\n         while (cls != null) {\n             Class<?>[] interfaces = cls.getInterfaces();\n-            for (int i = 0; i < interfaces.length; i++) {\n-                if (list.contains(interfaces[i]) == false) {\n-                    list.add(interfaces[i]);\n+            for (Class<?> intface : interfaces) {\n+                if (list.contains(intface) == false) {\n+                    list.add(intface);\n                 }\n-                List<Class<?>> superInterfaces = getAllInterfaces(interfaces[i]);\n-                for (Iterator<Class<?>> it = superInterfaces.iterator(); it.hasNext();) {\n-                    Class<?> intface = it.next();\n-                    if (list.contains(intface) == false) {\n-                        list.add(intface);\n+                List<Class<?>> superInterfaces = getAllInterfaces(intface);\n+                for (Class<?> superInterface : superInterfaces) {\n+                    if (list.contains(superInterface) == false) {\n+                        list.add(superInterface);\n                     }\n                 }\n             }\n             return null;\n         }\n         List<Class<?>> classes = new ArrayList<Class<?>>(classNames.size());\n-        for (Iterator<String> it = classNames.iterator(); it.hasNext();) {\n-            String className = it.next();\n+        for (String className : classNames) {\n             try {\n                 classes.add(Class.forName(className));\n             } catch (Exception ex) {\n             return null;\n         }\n         List<String> classNames = new ArrayList<String>(classes.size());\n-        for (Iterator<Class<?>> it = classes.iterator(); it.hasNext();) {\n-            Class<?> cls = it.next();\n+        for (Class<?> cls : classes) {\n             if (cls == null) {\n                 classNames.add(null);\n             } else {\n         candidateClasses.addAll(getAllInterfaces(cls));\n         candidateClasses.addAll(getAllSuperclasses(cls));\n \n-        for (Iterator<Class<?>> it = candidateClasses.iterator(); it.hasNext(); ) {\n-            Class<?> candidateClass = it.next();\n+        for (Class<?> candidateClass : candidateClasses) {\n             if (!Modifier.isPublic(candidateClass.getModifiers())) {\n                 continue;\n             }", "timestamp": 1241683898, "metainfo": ""}