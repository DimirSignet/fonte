{"sha": "8d263e6d70878041347b6dddf1205409b294a943", "log": "Generifying toMap() method (adding in possibility for type inference on return type).  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n  */\n package org.apache.commons.lang3;\n \n+import java.awt.Color;\n import java.lang.reflect.Array;\n import java.util.HashMap;\n import java.util.Map;\n      * @throws IllegalArgumentException  if the array contains elements other\n      *  than {@link java.util.Map.Entry} and an Array\n      */\n-    public static Map<Object, Object> toMap(Object[] array) {\n+    @SuppressWarnings(\"unchecked\")\n+    public static <K,V> Map<K, V> toMap(Object[] array) {\n         if (array == null) {\n             return null;\n         }\n-        final Map<Object, Object> map = new HashMap<Object, Object>((int) (array.length * 1.5));\n+        final Map<K, V> map = new HashMap<K, V>((int) (array.length * 1.5));\n         for (int i = 0; i < array.length; i++) {\n             Object object = array[i];\n             if (object instanceof Map.Entry<?, ?>) {\n                 Map.Entry<?,?> entry = (Map.Entry<?,?>) object;\n-                map.put(entry.getKey(), entry.getValue());\n+                map.put((K)entry.getKey(), (V)entry.getValue());\n             } else if (object instanceof Object[]) {\n                 Object[] entry = (Object[]) object;\n                 if (entry.length < 2) {\n                         + object\n                         + \"', has a length less than 2\");\n                 }\n-                map.put(entry[0], entry[1]);\n+                map.put((K)entry[0], (V)entry[1]);\n             } else {\n                 throw new IllegalArgumentException(\"Array element \" + i + \", '\"\n                         + object", "timestamp": 1281134678, "metainfo": ""}