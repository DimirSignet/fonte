{"sha": "63a4c5f02e172b87271d65c4222075d4f5eeb859", "log": "Resolved a few checkstyle issues.  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n      *  Method method = ClassUtils.getPublicMethod(set.getClass(), \"isEmpty\",  new Class[0]);\n      *  Object result = method.invoke(set, new Object[]);</pre></code>\n      * </p>\n+     *\n+     * @param cls the class to check\n+     * @param methodName the name of the method\n+     * @param parameterTypes the list of parameters\n+     * @return the method\n+     * @throws SecurityException If a a security violation occured\n+     * @throws NoSuchMethodException If the method is not found in the given class\n+     *  or if the metothod doen't conform with the requirements\n      */\n     public static Method getPublicMethod(Class cls, String methodName, Class parameterTypes[]) \n         throws SecurityException, NoSuchMethodException \n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n     /**\n      * <p>Checks if the locale specified is in the list of available locales.</p>\n      *\n+     * @param locale the Locale object to check if it is available\n      * @return true if the locale is a known locale\n      */\n     public static boolean isAvailableLocale(Locale locale) {\n--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n import java.util.Set;\n-\n import org.apache.commons.lang.ArrayUtils;\n import org.apache.commons.lang.ClassUtils;\n \n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n      * @param removeLen  the length to remove (endIndex - startIndex), must be valid\n      * @param insertStr  the string to replace with, null means delete range\n      * @param insertLen  the length of the insert string, must be valid\n-     * @param len  the length, must be valid\n      * @throws IndexOutOfBoundsException if any index is invalid\n      */\n     private void replaceImpl(int startIndex, int endIndex, int removeLen, String insertStr, int insertLen) {", "timestamp": 1146842611, "metainfo": ""}