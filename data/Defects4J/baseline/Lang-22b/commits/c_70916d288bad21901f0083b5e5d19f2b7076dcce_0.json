{"sha": "70916d288bad21901f0083b5e5d19f2b7076dcce", "log": "Fix generics  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Range.java\n+++ b/src/java/org/apache/commons/lang/Range.java\n \n     private static final long serialVersionUID = 1L;\n \n-    private final Comparator comparator;\n+    private final Comparator<T> comparator;\n     private final T minimum;\n     private final T maximum;\n \n      * @throws IllegalArgumentException if the value is <code>null</code>\n      * @throws ClassCastException if the value is not Comparable\n      */\n-    public static <T extends Comparable> Range is(T element) {\n-        return new Range(element, element, ComparableComparator.INSTANCE);\n+    public static <T extends Comparable<T>> Range<T> is(T element) {\n+        return new Range<T>(element, element, ComparableComparator.<T>getInstance());\n     }\n \n     /**\n      * @throws IllegalArgumentException if either value is <code>null</code>\n      * @throws ClassCastException if either value is not Comparable\n      */\n-    public static <T extends Comparable> Range between(T element1, T element2) {\n-        return new Range( element1, element2, ComparableComparator.INSTANCE);\n+    public static <T extends Comparable<T>> Range<T> between(T element1, T element2) {\n+        return new Range<T>( element1, element2, ComparableComparator.<T>getInstance());\n     }\n \n     /**\n      * @param c comparator to be used\n      * @throws IllegalArgumentException if the value is <code>null</code>\n      */\n-    public static <T> Range is(T element, Comparator c) {\n-        return new Range(element, element, c);\n+    public static <T> Range<T> is(T element, Comparator<T> c) {\n+        return new Range<T>(element, element, c);\n     }\n \n     /**\n      * @param c comparator to be used\n      * @throws IllegalArgumentException if either value is <code>null</code>\n      */\n-    public static <T> Range between(T element1, T element2, Comparator c) {\n-        return new Range(element1, element2, c);\n-    }\n-\n-    private Range(T element1, T element2, Comparator c) {\n+    public static <T> Range<T> between(T element1, T element2, Comparator<T> c) {\n+        return new Range<T>(element1, element2, c);\n+    }\n+\n+    private Range(T element1, T element2, Comparator<T> c) {\n         if(element1 == null || element2 == null) {\n             throw new IllegalArgumentException(\"Elements in a range must not be null: element1=\" + \n                                                element1 + \", element2=\" + element2);\n      *\n      * @return the comparator being used\n      */\n-    public Comparator getComparator() {\n+    public Comparator<T> getComparator() {\n         return this.comparator;\n     }\n \n         } else if (obj == null || obj.getClass() != getClass()) {\n             return false;\n         } else {\n-            Range range = (Range) obj;\n+            @SuppressWarnings(\"unchecked\") // OK because we checked the class above\n+            Range<T> range = (Range<T>) obj;\n             return getMinimum().equals(range.getMinimum()) &&\n                    getMaximum().equals(range.getMaximum());\n         }", "timestamp": 1258826835, "metainfo": ""}