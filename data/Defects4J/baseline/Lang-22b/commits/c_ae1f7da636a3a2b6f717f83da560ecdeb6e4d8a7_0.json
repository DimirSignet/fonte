{"sha": "ae1f7da636a3a2b6f717f83da560ecdeb6e4d8a7", "log": "Add CharUtils classes   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/CharUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+/**\n+ * <p>Operations on char primitives and Char objects.</p>\n+ *\n+ * <p>This class tries to handle <code>null</code> input gracefully.\n+ * An exception will not be thrown for a <code>null</code> input.\n+ * Each method documents its behaviour in more detail.</p>\n+ * \n+ * @author Stephen Colebourne\n+ * @since 2.1\n+ * @version $Id: CharUtils.java,v 1.1 2004/01/31 13:00:07 scolebourne Exp $\n+ */\n+public class CharUtils {\n+    \n+    private static final String CHAR_STRING = \n+        \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\" +\n+        \"\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\" +\n+        \"\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\" +\n+        \"\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f\" +\n+        \"\\u0020\\u0021\\\"\\u0023\\u0024\\u0025\\u0026\\u0027\" +\n+        \"\\u0028\\u0029\\u002a\\u002b\\u002c\\u002d\\u002e\\u002f\" +\n+        \"\\u0030\\u0031\\u0032\\u0033\\u0034\\u0035\\u0036\\u0037\" +\n+        \"\\u0038\\u0039\\u003a\\u003b\\u003c\\u003d\\u003e\\u003f\" +\n+        \"\\u0040\\u0041\\u0042\\u0043\\u0044\\u0045\\u0046\\u0047\" +\n+        \"\\u0048\\u0049\\u004a\\u004b\\u004c\\u004d\\u004e\\u004f\" +\n+        \"\\u0050\\u0051\\u0052\\u0053\\u0054\\u0055\\u0056\\u0057\" +\n+        \"\\u0058\\u0059\\u005a\\u005b\\\\\\u005d\\u005e\\u005f\" +\n+        \"\\u0060\\u0061\\u0062\\u0063\\u0064\\u0065\\u0066\\u0067\" +\n+        \"\\u0068\\u0069\\u006a\\u006b\\u006c\\u006d\\u006e\\u006f\" +\n+        \"\\u0070\\u0071\\u0072\\u0073\\u0074\\u0075\\u0076\\u0077\" +\n+        \"\\u0078\\u0079\\u007a\\u007b\\u007c\\u007d\\u007e\\u007f\";\n+    \n+    private static final String[] CHAR_STRING_ARRAY = new String[128];\n+    private static final Character[] CHAR_ARRAY = new Character[128];\n+    \n+    static {\n+        for (int i = 127; i >= 0; i--) {\n+            CHAR_STRING_ARRAY[i] = CHAR_STRING.substring(i, i + 1);\n+            CHAR_ARRAY[i] = new Character((char) i);\n+        }\n+    }\n+    \n+    /**\n+     * <p><code>CharUtils</code> instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as <code>CharUtils.toString('c');</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n+     */\n+    public CharUtils() {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Converts the character to a Character.</p>\n+     * \n+     * <p>For ASCII 7 bit characters, this uses a cache that will return the\n+     * same Character object each time.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.toCharacterObject(' ')  = ' '\n+     *   CharUtils.toCharacterObject('A')  = 'A'\n+     * </pre>\n+     *\n+     * @param ch  the character to convert\n+     * @return a Character of the specified character\n+     */\n+    public static Character toCharacterObject(char ch) {\n+        if (ch < 128) {\n+            return CHAR_ARRAY[ch];\n+        } else {\n+            return new Character(ch);\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Converts the Character to a char throwing an exception for <code>null</code>.</p>\n+     * \n+     * <pre>\n+     *   CharUtils.toCharacter(null, 'X') = IllegalArgumentException\n+     *   CharUtils.toCharacter(' ', 'X')  = ' '\n+     *   CharUtils.toCharacter('A', 'X')  = 'A'\n+     * </pre>\n+     *\n+     * @param ch  the character to convert\n+     * @return the char value of the Character or the default if null\n+     * @throws IllegalArgumentException if the Character is null\n+     */\n+    public static char toCharacter(Character ch) {\n+        if (ch == null) {\n+            throw new IllegalArgumentException(\"The Character must not be null\");\n+        }\n+        return ch.charValue();\n+    }\n+    \n+    /**\n+     * <p>Converts the Character to a char handling <code>null</code>.</p>\n+     * \n+     * <pre>\n+     *   CharUtils.toCharacter(null, 'X') = 'X'\n+     *   CharUtils.toCharacter(' ', 'X')  = ' '\n+     *   CharUtils.toCharacter('A', 'X')  = 'A'\n+     * </pre>\n+     *\n+     * @param ch  the character to convert\n+     * @param defaultValue  the value to use if the  Character is null\n+     * @return the char value of the Character or the default if null\n+     */\n+    public static char toCharacter(Character ch, char defaultValue) {\n+        if (ch == null) {\n+            return defaultValue;\n+        }\n+        return ch.charValue();\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Converts the String to a char using the first character throwing\n+     * an exception on empty Strings.</p>\n+     * \n+     * <pre>\n+     *   CharUtils.toCharacter(null, 'X') = IllegalArgumentException\n+     *   CharUtils.toCharacter(\"\", 'X')   = IllegalArgumentException\n+     *   CharUtils.toCharacter(\"A\", 'X')  = 'A'\n+     *   CharUtils.toCharacter(\"BA\", 'X') = 'B'\n+     * </pre>\n+     *\n+     * @param ch  the character to convert\n+     * @return the char value of the Character or the default if null\n+     * @throws IllegalArgumentException if the String is empty\n+     */\n+    public static char toCharacter(String str) {\n+        if (str == null || str.length() == 0) {\n+            throw new IllegalArgumentException(\"The String must not be empty\");\n+        }\n+        return str.charAt(0);\n+    }\n+    \n+    /**\n+     * <p>Converts the String to a char using the first character defaulting\n+     * the value on empty Strings.</p>\n+     * \n+     * <pre>\n+     *   CharUtils.toCharacter(null, 'X') = 'X'\n+     *   CharUtils.toCharacter(\"\", 'X')   = 'X'\n+     *   CharUtils.toCharacter(\"A\", 'X')  = 'A'\n+     *   CharUtils.toCharacter(\"BA\", 'X') = 'B'\n+     * </pre>\n+     *\n+     * @param ch  the character to convert\n+     * @param defaultValue  the value to use if the  Character is null\n+     * @return the char value of the Character or the default if null\n+     */\n+    public static char toCharacter(String str, char defaultValue) {\n+        if (str == null || str.length() == 0) {\n+            return defaultValue;\n+        }\n+        return str.charAt(0);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Converts the character to the Integer it represents, throwing an\n+     * exception if the character is not numeric.</p>\n+     * \n+     * <p>This method coverts the char '1' to the int 1 and so on.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.toInteger('3')  = 3\n+     *   CharUtils.toInteger('A')  = IllegalArgumentException\n+     * </pre>\n+     *\n+     * @param ch  the character to convert\n+     * @return the int value of the character\n+     * @throws IllegalArgumentException if the character is not ASCII numeric\n+     */\n+    public static int toInteger(char ch) {\n+        if (isASCIINumeric(ch) == false) {\n+            throw new IllegalArgumentException(\"The character \" + ch + \" is not in the range '0' - '9'\");\n+        }\n+        return (ch - 48);\n+    }\n+    \n+    /**\n+     * <p>Converts the character to the Integer it represents, throwing an\n+     * exception if the character is not numeric.</p>\n+     * \n+     * <p>This method coverts the char '1' to the int 1 and so on.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.toInteger('3', -1)  = 3\n+     *   CharUtils.toInteger('A', -1)  = -1\n+     * </pre>\n+     *\n+     * @param ch  the character to convert\n+     * @param defaultValue  the default value to use if the character is not numeric\n+     * @return the int value of the character\n+     */\n+    public static int toInteger(char ch, int defaultValue) {\n+        if (isASCIINumeric(ch) == false) {\n+            return defaultValue;\n+        }\n+        return (ch - 48);\n+    }\n+    \n+    /**\n+     * <p>Converts the character to the Integer it represents, throwing an\n+     * exception if the character is not numeric.</p>\n+     * \n+     * <p>This method coverts the char '1' to the int 1 and so on.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.toInteger(null) = IllegalArgumentException\n+     *   CharUtils.toInteger('3')  = 3\n+     *   CharUtils.toInteger('A')  = IllegalArgumentException\n+     * </pre>\n+     *\n+     * @param ch  the character to convert, not null\n+     * @return the int value of the character\n+     * @throws IllegalArgumentException if the Character is not ASCII numeric or is null\n+     */\n+    public static int toInteger(Character ch) {\n+        if (ch == null) {\n+            throw new IllegalArgumentException(\"The character must not be null\");\n+        }\n+        return toInteger(ch.charValue());\n+    }\n+    \n+    /**\n+     * <p>Converts the character to the Integer it represents, throwing an\n+     * exception if the character is not numeric.</p>\n+     * \n+     * <p>This method coverts the char '1' to the int 1 and so on.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.toInteger(null, -1) = -1\n+     *   CharUtils.toInteger('3', -1)  = 3\n+     *   CharUtils.toInteger('A', -1)  = -1\n+     * </pre>\n+     *\n+     * @param ch  the character to convert\n+     * @param defaultValue  the default value to use if the character is not numeric\n+     * @return the int value of the character\n+     */\n+    public static int toInteger(Character ch, int defaultValue) {\n+        if (ch == null) {\n+            return defaultValue;\n+        }\n+        return toInteger(ch.charValue(), defaultValue);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Converts the character to a String that contains the one character.</p>\n+     * \n+     * <p>For ASCII 7 bit characters, this uses a cache that will return the\n+     * same String object each time.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.toString(' ')  = \" \"\n+     *   CharUtils.toString('A')  = \"A\"\n+     * </pre>\n+     *\n+     * @param ch  the character to convert\n+     * @return a String containing the one specified character\n+     */\n+    public static String toString(char ch) {\n+        if (ch < 128) {\n+            return CHAR_STRING_ARRAY[ch];\n+        } else {\n+            return new String(new char[] {ch});\n+        }\n+    }\n+    \n+    /**\n+     * <p>Converts the character to a String that contains the one character.</p>\n+     * \n+     * <p>For ASCII 7 bit characters, this uses a cache that will return the\n+     * same String object each time.</p>\n+     * \n+     * <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.toString(null) = null\n+     *   CharUtils.toString(' ')  = \" \"\n+     *   CharUtils.toString('A')  = \"A\"\n+     * </pre>\n+     *\n+     * @param ch  the character to convert\n+     * @return a String containing the one specified character\n+     */\n+    public static String toString(Character ch) {\n+        if (ch == null) {\n+            return null;\n+        } else {\n+            return toString(ch.charValue());\n+        }\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+    /**\n+     * <p>Converts the string to the unicode format '\\u0020'.</p>\n+     * \n+     * <p>This format is the Java source code format.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.toUnicode(' ') = \"\\u0020\"\n+     *   CharUtils.toUnicode('A') = \"\\u0041\"\n+     * </pre>\n+     * \n+     * @param ch  the character to convert\n+     * @return the escaped unicode string\n+     */\n+    public static String unicodeEscaped(char ch) {\n+        if (ch < 0x10) {\n+            return \"\\\\u000\" + Integer.toHexString(ch);\n+        } else if (ch < 0x100) {\n+            return \"\\\\u00\" + Integer.toHexString(ch);\n+        } else if (ch < 0x1000) {\n+            return \"\\\\u0\" + Integer.toHexString(ch);\n+        }\n+        return \"\\\\u\" + Integer.toHexString(ch);\n+    }\n+    \n+    /**\n+     * <p>Converts the string to the unicode format '\\u0020'.</p>\n+     * \n+     * <p>This format is the Java source code format.</p>\n+     * \n+     * <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.toUnicode(null) = null\n+     *   CharUtils.toUnicode(' ')  = \"\\u0020\"\n+     *   CharUtils.toUnicode('A')  = \"\\u0041\"\n+     * </pre>\n+     * \n+     * @param ch  the character to convert, may be null\n+     * @return the escaped unicode string, null if null input\n+     */\n+    public static String unicodeEscaped(Character ch) {\n+        if (ch == null) {\n+            return null;\n+        }\n+        return unicodeEscaped(ch.charValue());\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+    /**\n+     * <p>Checks whether the character is ASCII 7 bit.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.isASCII('a')  = true\n+     *   CharUtils.isASCII('A')  = true\n+     *   CharUtils.isASCII('3')  = true\n+     *   CharUtils.isASCII('-')  = true\n+     *   CharUtils.isASCII('\\n') = true\n+     *   CharUtils.isASCII('&copy;') = false\n+     * </pre>\n+     * \n+     * @param ch  the character to check\n+     * @return true if less than 128\n+     */\n+    public static boolean isASCII(char ch) {\n+        return (ch < 128);\n+    }\n+    \n+    /**\n+     * <p>Checks whether the character is ASCII 7 bit printable.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.isASCIIPrintable('a')  = true\n+     *   CharUtils.isASCIIPrintable('A')  = true\n+     *   CharUtils.isASCIIPrintable('3')  = true\n+     *   CharUtils.isASCIIPrintable('-')  = true\n+     *   CharUtils.isASCIIPrintable('\\n') = false\n+     *   CharUtils.isASCIIPrintable('&copy;') = false\n+     * </pre>\n+     * \n+     * @param ch  the character to check\n+     * @return true if between 32 and 126 inclusive\n+     */\n+    public static boolean isASCIIPrintable(char ch) {\n+        return (ch >= 32 && ch < 127);\n+    }\n+    \n+    /**\n+     * <p>Checks whether the character is ASCII 7 bit control.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.isASCIIControl('a')  = false\n+     *   CharUtils.isASCIIControl('A')  = false\n+     *   CharUtils.isASCIIControl('3')  = false\n+     *   CharUtils.isASCIIControl('-')  = false\n+     *   CharUtils.isASCIIControl('\\n') = true\n+     *   CharUtils.isASCIIControl('&copy;') = false\n+     * </pre>\n+     * \n+     * @param ch  the character to check\n+     * @return true if less than 32 or equals 127\n+     */\n+    public static boolean isASCIIControl(char ch) {\n+        return (ch < 32 || ch == 127);\n+    }\n+    \n+    /**\n+     * <p>Checks whether the character is ASCII 7 bit alphabetic.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.isASCIIAlpha('a')  = true\n+     *   CharUtils.isASCIIAlpha('A')  = true\n+     *   CharUtils.isASCIIAlpha('3')  = false\n+     *   CharUtils.isASCIIAlpha('-')  = false\n+     *   CharUtils.isASCIIAlpha('\\n') = false\n+     *   CharUtils.isASCIIAlpha('&copy;') = false\n+     * </pre>\n+     * \n+     * @param ch  the character to check\n+     * @return true if between 65 and 90 or 97 and 122 inclusive\n+     */\n+    public static boolean isASCIIAlpha(char ch) {\n+        return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z');\n+    }\n+    \n+    /**\n+     * <p>Checks whether the character is ASCII 7 bit alphabetic upper case.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.isASCIIAlphaUpper('a')  = false\n+     *   CharUtils.isASCIIAlphaUpper('A')  = true\n+     *   CharUtils.isASCIIAlphaUpper('3')  = false\n+     *   CharUtils.isASCIIAlphaUpper('-')  = false\n+     *   CharUtils.isASCIIAlphaUpper('\\n') = false\n+     *   CharUtils.isASCIIAlphaUpper('&copy;') = false\n+     * </pre>\n+     * \n+     * @param ch  the character to check\n+     * @return true if between 65 and 90 inclusive\n+     */\n+    public static boolean isASCIIAlphaUpper(char ch) {\n+        return (ch >= 'A' && ch <= 'Z');\n+    }\n+    \n+    /**\n+     * <p>Checks whether the character is ASCII 7 bit alphabetic lower case.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.isASCIIAlphaLower('a')  = true\n+     *   CharUtils.isASCIIAlphaLower('A')  = false\n+     *   CharUtils.isASCIIAlphaLower('3')  = false\n+     *   CharUtils.isASCIIAlphaLower('-')  = false\n+     *   CharUtils.isASCIIAlphaLower('\\n') = false\n+     *   CharUtils.isASCIIAlphaLower('&copy;') = false\n+     * </pre>\n+     * \n+     * @param ch  the character to check\n+     * @return true if between 97 and 122 inclusive\n+     */\n+    public static boolean isASCIIAlphaLower(char ch) {\n+        return (ch >= 'a' && ch <= 'z');\n+    }\n+    \n+    /**\n+     * <p>Checks whether the character is ASCII 7 bit numeric.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.isASCIINumeric('a')  = false\n+     *   CharUtils.isASCIINumeric('A')  = false\n+     *   CharUtils.isASCIINumeric('3')  = true\n+     *   CharUtils.isASCIINumeric('-')  = false\n+     *   CharUtils.isASCIINumeric('\\n') = false\n+     *   CharUtils.isASCIINumeric('&copy;') = false\n+     * </pre>\n+     * \n+     * @param ch  the character to check\n+     * @return true if between 48 and 57 inclusive\n+     */\n+    public static boolean isASCIINumeric(char ch) {\n+        return (ch >= '0' && ch <= '9');\n+    }\n+    \n+    /**\n+     * <p>Checks whether the character is ASCII 7 bit numeric.</p>\n+     *\n+     * <pre>\n+     *   CharUtils.isASCIIAlphanumeric('a')  = true\n+     *   CharUtils.isASCIIAlphanumeric('A')  = true\n+     *   CharUtils.isASCIIAlphanumeric('3')  = true\n+     *   CharUtils.isASCIIAlphanumeric('-')  = false\n+     *   CharUtils.isASCIIAlphanumeric('\\n') = false\n+     *   CharUtils.isASCIIAlphanumeric('&copy;') = false\n+     * </pre>\n+     * \n+     * @param ch  the character to check\n+     * @return true if between 48 and 57 or 65 and 90 or 97 and 122 inclusive\n+     */\n+    public static boolean isASCIIAlphanumeric(char ch) {\n+        return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9');\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/CharUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2004 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang.CharUtils}.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: CharUtilsTest.java,v 1.1 2004/01/31 13:00:07 scolebourne Exp $\n+ */\n+public class CharUtilsTest extends TestCase {\n+\n+    private static final Character CHARACTER_A = new Character('A');\n+    private static final Character CHARACTER_B = new Character('B');\n+    private static final char CHAR_COPY = '\\u00a9';\n+    \n+    public CharUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+    \tTestSuite suite = new TestSuite(CharUtilsTest.class);\n+    \tsuite.setName(\"CharUtils Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new CharUtils());\n+        Constructor[] cons = CharUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToCharacterObject_char() {\n+        assertEquals(new Character('a'), CharUtils.toCharacterObject('a'));\n+        assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a'));\n+       \n+        for (int i = 0; i < 128; i++) {\n+            Character ch = CharUtils.toCharacterObject((char) i);\n+            Character ch2 = CharUtils.toCharacterObject((char) i);\n+            assertSame(ch, ch2);\n+            assertEquals(i, ch.charValue());\n+        }\n+        for (int i = 128; i < 196; i++) {\n+            Character ch = CharUtils.toCharacterObject((char) i);\n+            Character ch2 = CharUtils.toCharacterObject((char) i);\n+            assertEquals(ch, ch2);\n+            assertTrue(ch != ch2);\n+            assertEquals(i, ch.charValue());\n+            assertEquals(i, ch2.charValue());\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToCharacter_Character() {\n+        assertEquals('A', CharUtils.toCharacter(CHARACTER_A));\n+        assertEquals('B', CharUtils.toCharacter(CHARACTER_B));\n+        try {\n+            CharUtils.toCharacter((Character) null);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testToCharacter_Character_char() {\n+        assertEquals('A', CharUtils.toCharacter(CHARACTER_A, 'X'));\n+        assertEquals('B', CharUtils.toCharacter(CHARACTER_B, 'X'));\n+        assertEquals('X', CharUtils.toCharacter((Character) null, 'X'));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToCharacter_String() {\n+        assertEquals('A', CharUtils.toCharacter(\"A\"));\n+        assertEquals('B', CharUtils.toCharacter(\"BA\"));\n+        try {\n+            CharUtils.toCharacter((String) null);\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            CharUtils.toCharacter(\"\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testToCharacter_String_char() {\n+        assertEquals('A', CharUtils.toCharacter(\"A\", 'X'));\n+        assertEquals('B', CharUtils.toCharacter(\"BA\", 'X'));\n+        assertEquals('X', CharUtils.toCharacter(\"\", 'X'));\n+        assertEquals('X', CharUtils.toCharacter((String) null, 'X'));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToInteger_char() {\n+        assertEquals(0, CharUtils.toInteger('0'));\n+        assertEquals(1, CharUtils.toInteger('1'));\n+        assertEquals(2, CharUtils.toInteger('2'));\n+        assertEquals(3, CharUtils.toInteger('3'));\n+        assertEquals(4, CharUtils.toInteger('4'));\n+        assertEquals(5, CharUtils.toInteger('5'));\n+        assertEquals(6, CharUtils.toInteger('6'));\n+        assertEquals(7, CharUtils.toInteger('7'));\n+        assertEquals(8, CharUtils.toInteger('8'));\n+        assertEquals(9, CharUtils.toInteger('9'));\n+        try {\n+            CharUtils.toInteger('a');\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testToInteger_char_int() {\n+        assertEquals(0, CharUtils.toInteger('0', -1));\n+        assertEquals(3, CharUtils.toInteger('3', -1));\n+        assertEquals(-1, CharUtils.toInteger('a', -1));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToInteger_Character() {\n+        assertEquals(0, CharUtils.toInteger(new Character('0')));\n+        assertEquals(3, CharUtils.toInteger(new Character('3')));\n+        try {\n+            CharUtils.toInteger(null);\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            CharUtils.toInteger(CHARACTER_A);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testToInteger_Character_int() {\n+        assertEquals(0, CharUtils.toInteger(new Character('0'), -1));\n+        assertEquals(3, CharUtils.toInteger(new Character('3'), -1));\n+        assertEquals(-1, CharUtils.toInteger(new Character('A'), -1));\n+        assertEquals(-1, CharUtils.toInteger(null, -1));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToString_char() {\n+        assertEquals(\"a\", CharUtils.toString('a'));\n+        assertSame(CharUtils.toString('a'), CharUtils.toString('a'));\n+       \n+        for (int i = 0; i < 128; i++) {\n+            String str = CharUtils.toString((char) i);\n+            String str2 = CharUtils.toString((char) i);\n+            assertSame(str, str2);\n+            assertEquals(1, str.length());\n+            assertEquals(i, str.charAt(0));\n+        }\n+        for (int i = 128; i < 196; i++) {\n+            String str = CharUtils.toString((char) i);\n+            String str2 = CharUtils.toString((char) i);\n+            assertEquals(str, str2);\n+            assertTrue(str != str2);\n+            assertEquals(1, str.length());\n+            assertEquals(i, str.charAt(0));\n+            assertEquals(1, str2.length());\n+            assertEquals(i, str2.charAt(0));\n+        }\n+    }\n+    \n+    public void testToString_Character() {\n+        assertEquals(null, CharUtils.toString(null));\n+        assertEquals(\"A\", CharUtils.toString(CHARACTER_A));\n+        assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToUnicodeEscaped_char() {\n+        assertEquals(\"\\\\u0041\", CharUtils.unicodeEscaped('A'));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            String str = CharUtils.unicodeEscaped((char) i);\n+            assertEquals(6, str.length());\n+            int val = Integer.parseInt(str.substring(2), 16);\n+            assertEquals(i, val);\n+        }\n+    }\n+    \n+    public void testToUnicodeEscaped_Character() {\n+        assertEquals(null, CharUtils.unicodeEscaped(null));\n+        assertEquals(\"\\\\u0041\", CharUtils.unicodeEscaped(CHARACTER_A));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsASCII_char() {\n+        assertEquals(true, CharUtils.isASCII('a'));\n+        assertEquals(true, CharUtils.isASCII('A'));\n+        assertEquals(true, CharUtils.isASCII('3'));\n+        assertEquals(true, CharUtils.isASCII('-'));\n+        assertEquals(true, CharUtils.isASCII('\\n'));\n+        assertEquals(false, CharUtils.isASCII(CHAR_COPY));\n+       \n+        for (int i = 0; i < 128; i++) {\n+            if (i < 128) {\n+                assertEquals(true, CharUtils.isASCII((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isASCII((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsASCIIPrintable_char() {\n+        assertEquals(true, CharUtils.isASCIIPrintable('a'));\n+        assertEquals(true, CharUtils.isASCIIPrintable('A'));\n+        assertEquals(true, CharUtils.isASCIIPrintable('3'));\n+        assertEquals(true, CharUtils.isASCIIPrintable('-'));\n+        assertEquals(false, CharUtils.isASCIIPrintable('\\n'));\n+        assertEquals(false, CharUtils.isASCII(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if (i >= 32 && i <= 126) {\n+                assertEquals(true, CharUtils.isASCIIPrintable((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isASCIIPrintable((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsASCIIControl_char() {\n+        assertEquals(false, CharUtils.isASCIIControl('a'));\n+        assertEquals(false, CharUtils.isASCIIControl('A'));\n+        assertEquals(false, CharUtils.isASCIIControl('3'));\n+        assertEquals(false, CharUtils.isASCIIControl('-'));\n+        assertEquals(true, CharUtils.isASCIIControl('\\n'));\n+        assertEquals(false, CharUtils.isASCIIControl(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if (i < 32 || i == 127) {\n+                assertEquals(true, CharUtils.isASCIIControl((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isASCIIControl((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsASCIIAlpha_char() {\n+        assertEquals(true, CharUtils.isASCIIAlpha('a'));\n+        assertEquals(true, CharUtils.isASCIIAlpha('A'));\n+        assertEquals(false, CharUtils.isASCIIAlpha('3'));\n+        assertEquals(false, CharUtils.isASCIIAlpha('-'));\n+        assertEquals(false, CharUtils.isASCIIAlpha('\\n'));\n+        assertEquals(false, CharUtils.isASCIIAlpha(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z')) {\n+                assertEquals(true, CharUtils.isASCIIAlpha((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isASCIIAlpha((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsASCIIAlphaUpper_char() {\n+        assertEquals(false, CharUtils.isASCIIAlphaUpper('a'));\n+        assertEquals(true, CharUtils.isASCIIAlphaUpper('A'));\n+        assertEquals(false, CharUtils.isASCIIAlphaUpper('3'));\n+        assertEquals(false, CharUtils.isASCIIAlphaUpper('-'));\n+        assertEquals(false, CharUtils.isASCIIAlphaUpper('\\n'));\n+        assertEquals(false, CharUtils.isASCIIAlphaUpper(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if (i >= 'A' && i <= 'Z') {\n+                assertEquals(true, CharUtils.isASCIIAlphaUpper((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isASCIIAlphaUpper((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsASCIIAlphaLower_char() {\n+        assertEquals(true, CharUtils.isASCIIAlphaLower('a'));\n+        assertEquals(false, CharUtils.isASCIIAlphaLower('A'));\n+        assertEquals(false, CharUtils.isASCIIAlphaLower('3'));\n+        assertEquals(false, CharUtils.isASCIIAlphaLower('-'));\n+        assertEquals(false, CharUtils.isASCIIAlphaLower('\\n'));\n+        assertEquals(false, CharUtils.isASCIIAlphaLower(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if (i >= 'a' && i <= 'z') {\n+                assertEquals(true, CharUtils.isASCIIAlphaLower((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isASCIIAlphaLower((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsASCIINumeric_char() {\n+        assertEquals(false, CharUtils.isASCIINumeric('a'));\n+        assertEquals(false, CharUtils.isASCIINumeric('A'));\n+        assertEquals(true, CharUtils.isASCIINumeric('3'));\n+        assertEquals(false, CharUtils.isASCIINumeric('-'));\n+        assertEquals(false, CharUtils.isASCIINumeric('\\n'));\n+        assertEquals(false, CharUtils.isASCIINumeric(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if (i >= '0' && i <= '9') {\n+                assertEquals(true, CharUtils.isASCIINumeric((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isASCIINumeric((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsASCIIAlphanumeric_char() {\n+        assertEquals(true, CharUtils.isASCIIAlphanumeric('a'));\n+        assertEquals(true, CharUtils.isASCIIAlphanumeric('A'));\n+        assertEquals(true, CharUtils.isASCIIAlphanumeric('3'));\n+        assertEquals(false, CharUtils.isASCIIAlphanumeric('-'));\n+        assertEquals(false, CharUtils.isASCIIAlphanumeric('\\n'));\n+        assertEquals(false, CharUtils.isASCIIAlphanumeric(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z') || (i >= '0' && i <= '9')) {\n+                assertEquals(true, CharUtils.isASCIIAlphanumeric((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isASCIIAlphanumeric((char) i));\n+            }\n+        }\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/lang/LangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/LangTestSuite.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2004 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Matthew Hawthorne\n- * @version $Id: LangTestSuite.java,v 1.23 2003/08/19 02:32:16 bayard Exp $\n+ * @version $Id: LangTestSuite.java,v 1.24 2004/01/31 13:00:07 scolebourne Exp $\n  */\n public class LangTestSuite extends TestCase {\n     \n         suite.addTest(CharRangeTest.suite());\n         suite.addTest(CharSetTest.suite());\n         suite.addTest(CharSetUtilsTest.suite());\n+        suite.addTest(CharUtilsTest.suite());\n         suite.addTest(ClassUtilsTest.suite());\n         suite.addTest(EntitiesTest.suite());\n         suite.addTest(IllegalClassExceptionTest.suite());", "timestamp": 1075554007, "metainfo": ""}