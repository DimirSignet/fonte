{"sha": "082876d5640bdfc2a56ba209de9bf20d4f1ad9b0", "log": "Generify LocaleUtils and its Test class  ", "commit": "\n--- a/src/java/org/apache/commons/lang/LocaleUtils.java\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n public class LocaleUtils {\n \n     /** Unmodifiable list of available locales. */\n-    private static final List cAvailableLocaleList;\n+    private static final List<Locale> cAvailableLocaleList;\n     /** Unmodifiable set of available locales. */\n     //@GuardedBy(\"this\")\n-    private static Set cAvailableLocaleSet; // lazily created by availableLocaleSet()\n+    private static Set<Locale> cAvailableLocaleSet; // lazily created by availableLocaleSet()\n     /** Unmodifiable map of language locales by country. */\n-    private static final Map cLanguagesByCountry = Collections.synchronizedMap(new HashMap());\n+    private static final Map<String, List<Locale>> cLanguagesByCountry = Collections.synchronizedMap(new HashMap<String, List<Locale>>());\n     /** Unmodifiable map of country locales by language. */\n-    private static final Map cCountriesByLanguage = Collections.synchronizedMap(new HashMap());\n+    private static final Map<String, List<Locale>> cCountriesByLanguage = Collections.synchronizedMap(new HashMap<String, List<Locale>>());\n     static {\n-        List list = Arrays.asList(Locale.getAvailableLocales());\n+        List<Locale> list = Arrays.asList(Locale.getAvailableLocales());\n         cAvailableLocaleList = Collections.unmodifiableList(list);\n     }\n \n      * @param locale  the locale to start from\n      * @return the unmodifiable list of Locale objects, 0 being locale, never null\n      */\n-    public static List localeLookupList(Locale locale) {\n+    public static List<Locale> localeLookupList(Locale locale) {\n         return localeLookupList(locale, locale);\n     }\n \n      * @param defaultLocale  the default locale to use if no other is found\n      * @return the unmodifiable list of Locale objects, 0 being locale, never null\n      */\n-    public static List localeLookupList(Locale locale, Locale defaultLocale) {\n-        List list = new ArrayList(4);\n+    public static List<Locale> localeLookupList(Locale locale, Locale defaultLocale) {\n+        List<Locale> list = new ArrayList<Locale>(4);\n         if (locale != null) {\n             list.add(locale);\n             if (locale.getVariant().length() > 0) {\n      *\n      * @return the unmodifiable list of available locales\n      */\n-    public static List availableLocaleList() {\n+    public static List<Locale> availableLocaleList() {\n         return cAvailableLocaleList;\n     }\n \n      *\n      * @return the unmodifiable set of available locales\n      */\n-    public static synchronized Set availableLocaleSet() {\n-        Set set = cAvailableLocaleSet;\n+    public static synchronized Set<Locale> availableLocaleSet() {\n+        Set<Locale> set = cAvailableLocaleSet;\n         if (set == null) {\n-            set = new HashSet(availableLocaleList());\n+            set = new HashSet<Locale>(availableLocaleList());\n             set = Collections.unmodifiableSet(set);\n             cAvailableLocaleSet = set;\n         }\n      * @param countryCode  the 2 letter country code, null returns empty\n      * @return an unmodifiable List of Locale objects, never null\n      */\n-    public static List languagesByCountry(String countryCode) {\n-        List langs = (List) cLanguagesByCountry.get(countryCode);  //syncd\n+    public static List<Locale> languagesByCountry(String countryCode) {\n+        List<Locale> langs = cLanguagesByCountry.get(countryCode);  //syncd\n         if (langs == null) {\n             if (countryCode != null) {\n-                langs = new ArrayList();\n-                List locales = availableLocaleList();\n+                langs = new ArrayList<Locale>();\n+                List<Locale> locales = availableLocaleList();\n                 for (int i = 0; i < locales.size(); i++) {\n-                    Locale locale = (Locale) locales.get(i);\n+                    Locale locale = locales.get(i);\n                     if (countryCode.equals(locale.getCountry()) &&\n                             locale.getVariant().length() == 0) {\n                         langs.add(locale);\n                 }\n                 langs = Collections.unmodifiableList(langs);\n             } else {\n-                langs = Collections.EMPTY_LIST;\n+                langs = Collections.emptyList();\n             }\n             cLanguagesByCountry.put(countryCode, langs);  //syncd\n         }\n      * @param languageCode  the 2 letter language code, null returns empty\n      * @return an unmodifiable List of Locale objects, never null\n      */\n-    public static List countriesByLanguage(String languageCode) {\n-        List countries = (List) cCountriesByLanguage.get(languageCode);  //syncd\n+    public static List<Locale> countriesByLanguage(String languageCode) {\n+        List<Locale> countries = cCountriesByLanguage.get(languageCode);  //syncd\n         if (countries == null) {\n             if (languageCode != null) {\n-                countries = new ArrayList();\n-                List locales = availableLocaleList();\n+                countries = new ArrayList<Locale>();\n+                List<Locale> locales = availableLocaleList();\n                 for (int i = 0; i < locales.size(); i++) {\n-                    Locale locale = (Locale) locales.get(i);\n+                    Locale locale = locales.get(i);\n                     if (languageCode.equals(locale.getLanguage()) &&\n                             locale.getCountry().length() != 0 &&\n                             locale.getVariant().length() == 0) {\n                 }\n                 countries = Collections.unmodifiableList(countries);\n             } else {\n-                countries = Collections.EMPTY_LIST;\n+                countries = Collections.emptyList();\n             }\n             cCountriesByLanguage.put(languageCode, countries);  //syncd\n         }\n--- a/src/test/org/apache/commons/lang/LocaleUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/LocaleUtilsTest.java\n      */\n     public void testConstructor() {\n         assertNotNull(new LocaleUtils());\n-        Constructor[] cons = LocaleUtils.class.getDeclaredConstructors();\n+        Constructor<?>[] cons = LocaleUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n         assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n         assertEquals(true, Modifier.isPublic(LocaleUtils.class.getModifiers()));\n      * @param expected  expected results\n      */\n     private void assertLocaleLookupList(Locale locale, Locale defaultLocale, Locale[] expected) {\n-        List localeList = defaultLocale == null ?\n+        List<Locale> localeList = defaultLocale == null ?\n                 LocaleUtils.localeLookupList(locale) :\n                 LocaleUtils.localeLookupList(locale, defaultLocale);\n         \n      * Test availableLocaleList() method.\n      */\n     public void testAvailableLocaleList() {\n-        List list = LocaleUtils.availableLocaleList();\n-        List list2 = LocaleUtils.availableLocaleList();\n+        List<Locale> list = LocaleUtils.availableLocaleList();\n+        List<Locale> list2 = LocaleUtils.availableLocaleList();\n         assertNotNull(list);\n         assertSame(list, list2);\n         assertUnmodifiableCollection(list);\n         \n         Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n-        List jdkLocaleList = Arrays.asList(jdkLocaleArray);\n+        List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray);\n         assertEquals(jdkLocaleList, list);\n     }\n \n      * Test availableLocaleSet() method.\n      */\n     public void testAvailableLocaleSet() {\n-        Set set = LocaleUtils.availableLocaleSet();\n-        Set set2 = LocaleUtils.availableLocaleSet();\n+        Set<Locale> set = LocaleUtils.availableLocaleSet();\n+        Set<Locale> set2 = LocaleUtils.availableLocaleSet();\n         assertNotNull(set);\n         assertSame(set, set2);\n         assertUnmodifiableCollection(set);\n         \n         Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n-        List jdkLocaleList = Arrays.asList(jdkLocaleArray);\n-        Set jdkLocaleSet = new HashSet(jdkLocaleList);\n+        List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray);\n+        Set<Locale> jdkLocaleSet = new HashSet<Locale>(jdkLocaleList);\n         assertEquals(jdkLocaleSet, set);\n     }\n \n      * Test availableLocaleSet() method.\n      */\n     public void testIsAvailableLocale() {\n-        Set set = LocaleUtils.availableLocaleSet();\n+        Set<Locale> set = LocaleUtils.availableLocaleSet();\n         assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));\n         assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));\n         assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));\n      * @param languages array of languages that should be returned\n      */\n     private void assertLanguageByCountry(String country, String[] languages) {\n-        List list = LocaleUtils.languagesByCountry(country);\n-        List list2 = LocaleUtils.languagesByCountry(country);\n+        List<Locale> list = LocaleUtils.languagesByCountry(country);\n+        List<Locale> list2 = LocaleUtils.languagesByCountry(country);\n         assertNotNull(list);\n         assertSame(list, list2);\n         //search through langauges\n         for (int i = 0; i < languages.length; i++) {\n-            Iterator iterator = list.iterator();\n+            Iterator<Locale> iterator = list.iterator();\n             boolean found = false;\n             // see if it was returned by the set\n             while (iterator.hasNext()) {\n-                Locale locale = (Locale) iterator.next();\n+                Locale locale = iterator.next();\n                 // should have an en empty variant\n                 assertTrue(locale.getVariant() == null\n                         || locale.getVariant().length() == 0);\n      * @param countries array of countries that should be returned\n      */\n     private void assertCountriesByLanguage(String language, String[] countries) {\n-        List list = LocaleUtils.countriesByLanguage(language);\n-        List list2 = LocaleUtils.countriesByLanguage(language);\n+        List<Locale> list = LocaleUtils.countriesByLanguage(language);\n+        List<Locale> list2 = LocaleUtils.countriesByLanguage(language);\n         assertNotNull(list);\n         assertSame(list, list2);\n         //search through langauges\n         for (int i = 0; i < countries.length; i++) {\n-            Iterator iterator = list.iterator();\n+            Iterator<Locale> iterator = list.iterator();\n             boolean found = false;\n             // see if it was returned by the set\n             while (iterator.hasNext()) {\n-                Locale locale = (Locale) iterator.next();\n+                Locale locale = iterator.next();\n                 // should have an en empty variant\n                 assertTrue(locale.getVariant() == null\n                         || locale.getVariant().length() == 0);\n     /**\n      * @param coll  the collection to check\n      */\n-    private static void assertUnmodifiableCollection(Collection coll) {\n-        try {\n-            coll.add(\"Unmodifiable\");\n+    private static void assertUnmodifiableCollection(Collection<?> coll) {\n+        try {\n+            coll.add(null);\n             fail();\n         } catch (UnsupportedOperationException ex) {}\n     }", "timestamp": 1237085418, "metainfo": ""}