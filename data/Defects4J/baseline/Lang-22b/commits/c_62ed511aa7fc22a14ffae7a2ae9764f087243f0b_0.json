{"sha": "62ed511aa7fc22a14ffae7a2ae9764f087243f0b", "log": "Added tests to increase coverage (suggested by Clover)   ", "commit": "\n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n import java.util.Calendar;\n import java.util.Date;\n import java.util.Iterator;\n+import java.util.NoSuchElementException;\n \n import junit.framework.AssertionFailedError;\n import junit.framework.Test;\n  * Unit tests {@link org.apache.commons.lang.CalendarUtils}.\n  *\n  * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n+ * @author <a href=\"mailto:steve@mungoknotwise.com\">Steven Caswell</a>\n  */\n public class DateUtilsTest extends TestCase {\n     DateFormat dateParser = null;\n     DateFormat dateTimeParser = null;\n     Date date1 = null;\n     Date date2 = null;\n+    Calendar cal1 = null;\n+    Calendar cal2 = null;\n \n     public DateUtilsTest(String name) {\n         super(name);\n \n         date1 = dateTimeParser.parse(\"February 12, 2002 12:34:56.789\");\n         date2 = dateTimeParser.parse(\"November 18, 2001 1:23:11.321\");\n+        cal1 = Calendar.getInstance();\n+        cal1.setTime(date1);\n+        cal2 = Calendar.getInstance();\n+        cal2.setTime(date2);\n     }\n \n     protected void tearDown() throws Exception {\n      * Tests various values with the round method\n      */\n     public void testRound() throws Exception {\n+        // tests for public static Date round(Date date, int field)\n         assertEquals(\"round year-1 failed\",\n                 dateParser.parse(\"January 1, 2002\"),\n                 DateUtils.round(date1, Calendar.YEAR));\n         assertEquals(\"round second-2 failed\",\n                 dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                 DateUtils.round(date2, Calendar.SECOND));\n-                \n+\n+        // tests for public static Date round(Object date, int field)\n+        assertEquals(\"round year-1 failed\",\n+                dateParser.parse(\"January 1, 2002\"),\n+                DateUtils.round((Object) date1, Calendar.YEAR));\n+        assertEquals(\"round year-2 failed\",\n+                dateParser.parse(\"January 1, 2002\"),\n+                DateUtils.round((Object) date2, Calendar.YEAR));\n+        assertEquals(\"round month-1 failed\",\n+                dateParser.parse(\"February 1, 2002\"),\n+                DateUtils.round((Object) date1, Calendar.MONTH));\n+        assertEquals(\"round month-2 failed\",\n+                dateParser.parse(\"December 1, 2001\"),\n+                DateUtils.round((Object) date2, Calendar.MONTH));\n+        assertEquals(\"round semimonth-1 failed\",\n+                dateParser.parse(\"February 16, 2002\"),\n+                DateUtils.round((Object) date1, DateUtils.SEMI_MONTH));\n+        assertEquals(\"round semimonth-2 failed\",\n+                dateParser.parse(\"November 16, 2001\"),\n+                DateUtils.round((Object) date2, DateUtils.SEMI_MONTH));\n+        assertEquals(\"round date-1 failed\",\n+                dateParser.parse(\"February 13, 2002\"),\n+                DateUtils.round((Object) date1, Calendar.DATE));\n+        assertEquals(\"round date-2 failed\",\n+                dateParser.parse(\"November 18, 2001\"),\n+                DateUtils.round((Object) date2, Calendar.DATE));\n+        assertEquals(\"round hour-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n+                DateUtils.round((Object) date1, Calendar.HOUR));\n+        assertEquals(\"round hour-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n+                DateUtils.round((Object) date2, Calendar.HOUR));\n+        assertEquals(\"round minute-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n+                DateUtils.round((Object) date1, Calendar.MINUTE));\n+        assertEquals(\"round minute-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n+                DateUtils.round((Object) date2, Calendar.MINUTE));\n+        assertEquals(\"round second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n+                DateUtils.round((Object) date1, Calendar.SECOND));\n+        assertEquals(\"round second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n+                DateUtils.round((Object) date2, Calendar.SECOND));\n+        assertEquals(\"round calendar second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n+                DateUtils.round((Object) cal1, Calendar.SECOND));\n+        assertEquals(\"round calendar second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n+                DateUtils.round((Object) cal2, Calendar.SECOND));\n+\n         try {\n             DateUtils.round((Date) null, Calendar.SECOND);\n             fail();\n             DateUtils.round(\"\", Calendar.SECOND);\n             fail();\n         } catch (ClassCastException ex) {}\n+        try {\n+            DateUtils.round(date1, -9999);\n+            fail();\n+        } catch(IllegalArgumentException ex) {}\n     }\n \n     /**\n      * Tests various values with the trunc method\n      */\n     public void testTruncate() throws Exception {\n+        // tests public static Date truncate(Date date, int field)\n         assertEquals(\"truncate year-1 failed\",\n                 dateParser.parse(\"January 1, 2002\"),\n                 DateUtils.truncate(date1, Calendar.YEAR));\n                 dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n                 DateUtils.truncate(date2, Calendar.SECOND));\n \n+        // tests public static Date truncate(Object date, int field)\n+        assertEquals(\"truncate year-1 failed\",\n+                dateParser.parse(\"January 1, 2002\"),\n+                DateUtils.truncate((Object) date1, Calendar.YEAR));\n+        assertEquals(\"truncate year-2 failed\",\n+                dateParser.parse(\"January 1, 2001\"),\n+                DateUtils.truncate((Object) date2, Calendar.YEAR));\n+        assertEquals(\"truncate month-1 failed\",\n+                dateParser.parse(\"February 1, 2002\"),\n+                DateUtils.truncate((Object) date1, Calendar.MONTH));\n+        assertEquals(\"truncate month-2 failed\",\n+                dateParser.parse(\"November 1, 2001\"),\n+                DateUtils.truncate((Object) date2, Calendar.MONTH));\n+        assertEquals(\"truncate semimonth-1 failed\",\n+                dateParser.parse(\"February 1, 2002\"),\n+                DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH));\n+        assertEquals(\"truncate semimonth-2 failed\",\n+                dateParser.parse(\"November 16, 2001\"),\n+                DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH));\n+        assertEquals(\"truncate date-1 failed\",\n+                dateParser.parse(\"February 12, 2002\"),\n+                DateUtils.truncate((Object) date1, Calendar.DATE));\n+        assertEquals(\"truncate date-2 failed\",\n+                dateParser.parse(\"November 18, 2001\"),\n+                DateUtils.truncate((Object) date2, Calendar.DATE));\n+        assertEquals(\"truncate hour-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"),\n+                DateUtils.truncate((Object) date1, Calendar.HOUR));\n+        assertEquals(\"truncate hour-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n+                DateUtils.truncate((Object) date2, Calendar.HOUR));\n+        assertEquals(\"truncate minute-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"),\n+                DateUtils.truncate((Object) date1, Calendar.MINUTE));\n+        assertEquals(\"truncate minute-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n+                DateUtils.truncate((Object) date2, Calendar.MINUTE));\n+        assertEquals(\"truncate second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n+                DateUtils.truncate((Object) date1, Calendar.SECOND));\n+        assertEquals(\"truncate second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n+                DateUtils.truncate((Object) date2, Calendar.SECOND));\n+        \n+        assertEquals(\"truncate calendar second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n+                DateUtils.truncate((Object) cal1, Calendar.SECOND));\n+        assertEquals(\"truncate calendar second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n+                DateUtils.truncate((Object) cal2, Calendar.SECOND));\n+        \n         try {\n             DateUtils.truncate((Date) null, Calendar.SECOND);\n             fail();\n             DateUtils.parseCVS(\"gobbledegook\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n-        \n+        try {\n+            DateUtils.parseCVS(\"ago\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.parseCVS(\"1 junk ago\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.parseCVS(\"1month ago\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.parseCVS(\"last month\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+\n         //This is difficult to test since the \"now\" used in the\n         //  parse function cannot be controlled.  We could possibly control\n         //  it by trying before and after and making sure the value we expect\n \n         Calendar now = null;\n \n+        // M/dd/yy H:mm:ss z\n+        now = Calendar.getInstance();\n+        now.set(Calendar.MILLISECOND, 0);\n+        assertEquals(\"parseCVS format M/dd/yy H:mm:ss z\",\n+                  now, DateUtils.parseCVS(new SimpleDateFormat(\"M/dd/yy H:mm:ss z\").format(now.getTime())), 50);\n+        // MMM d, yyyy h:mm a\n+        now = Calendar.getInstance();\n+        now.set(Calendar.MILLISECOND, 0);\n+        now.set(Calendar.SECOND, 0);\n+        assertEquals(\"parseCVS format MMM d, yyyy h:mm a\",\n+                  now, DateUtils.parseCVS(new SimpleDateFormat(\"MMM d, yyyy h:mm a\").format(now.getTime())), 50);\n+        // h:mm z\n+        now = Calendar.getInstance();\n+        now.set(Calendar.MILLISECOND, 0);\n+        now.set(Calendar.SECOND, 0);\n+        now.set(Calendar.DAY_OF_MONTH, 1);\n+        now.set(Calendar.MONTH, Calendar.JANUARY);\n+        now.set(Calendar.YEAR, 1970);\n+        assertEquals(\"parseCVS format h:mm z\",\n+                  now, DateUtils.parseCVS(new SimpleDateFormat(\"H:mm z\").format(now.getTime())), 50);\n+        \n+        now = Calendar.getInstance();\n+        now.add(Calendar.WEEK_OF_MONTH, -1);\n+        assertEquals(\"parseCVS a week ago\",\n+                now, DateUtils.parseCVS(\"a week ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.WEEK_OF_MONTH, -1);\n+        assertEquals(\"parseCVS an week ago\",\n+                now, DateUtils.parseCVS(\"an week ago\"), 50);\n+        \n+        now = Calendar.getInstance();\n+        now.add(Calendar.DAY_OF_MONTH, -14);\n+        assertEquals(\"parseCVS 1 fortnight ago\",\n+                now, DateUtils.parseCVS(\"1 fortnight ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.DAY_OF_MONTH, -14);\n+        assertEquals(\"parseCVS 1 fortnights ago\",\n+                now, DateUtils.parseCVS(\"1 fortnights ago\"), 50);\n+        \n         now = Calendar.getInstance();\n         now.add(Calendar.MINUTE, -1);\n         assertEquals(\"parseCVS 1 minute ago\",\n         assertEquals(\"parseCVS 8 minutes ago\",\n                 now, DateUtils.parseCVS(\"8 minutes ago\"), 50);\n \n+        now = Calendar.getInstance();\n+        now.add(Calendar.MILLISECOND, -1);\n+        assertEquals(\"parseCVS 1 millisecond ago\",\n+                now, DateUtils.parseCVS(\"1 millisecond ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.MILLISECOND, -100);\n+        assertEquals(\"parseCVS 1 milliseconds ago\",\n+                now, DateUtils.parseCVS(\"100 milliseconds ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.SECOND, -30);\n+        assertEquals(\"parseCVS 30 second ago\",\n+                now, DateUtils.parseCVS(\"30 second ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.SECOND, -30);\n+        assertEquals(\"parseCVS 30 seconds ago\",\n+                now, DateUtils.parseCVS(\"30 seconds ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.HOUR, -2);\n+        assertEquals(\"parseCVS 2 hour ago\",\n+                now, DateUtils.parseCVS(\"2 hour ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.HOUR, -2);\n+        assertEquals(\"parseCVS 2 hours ago\",\n+                now, DateUtils.parseCVS(\"2 hours ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.DAY_OF_MONTH, -2);\n+        assertEquals(\"parseCVS 2 day ago\",\n+                now, DateUtils.parseCVS(\"2 day ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.DAY_OF_MONTH, -2);\n+        assertEquals(\"parseCVS 2 days ago\",\n+                now, DateUtils.parseCVS(\"2 days ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.MONTH, -2);\n+        assertEquals(\"parseCVS 2 month ago\",\n+                now, DateUtils.parseCVS(\"2 month ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.MONTH, -2);\n+        assertEquals(\"parseCVS 2 months ago\",\n+                now, DateUtils.parseCVS(\"2 months ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.YEAR, -2);\n+        assertEquals(\"parseCVS 2 year ago\",\n+                now, DateUtils.parseCVS(\"2 year ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.YEAR, -2);\n+        assertEquals(\"parseCVS 2 years ago\",\n+                now, DateUtils.parseCVS(\"2 years ago\"), 50);\n+        \n         now = Calendar.getInstance();\n         now.add(Calendar.DATE, -1);\n         assertEquals(\"parseCVS yesterday\",\n         now.add(Calendar.DATE, -7);\n         assertEquals(\"parseCVS last week\",\n                 now, DateUtils.parseCVS(\"last week\"), 50);\n-\n+        \n         now = Calendar.getInstance();\n         //January would be 0, December would be 11, so we walk back up to 11 months\n         if (now.get(Calendar.MONTH) == 0) {\n      * Tests the iterator exceptions\n      */\n     public void testIteratorEx() throws Exception {\n+        try {\n+            DateUtils.iterator(Calendar.getInstance(), -9999);\n+        } catch (IllegalArgumentException ex) {}\n         try {\n             DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER);\n             fail();\n             assertWeekIterator(it, today);\n             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);\n             assertWeekIterator(it, centered);\n+            \n+            it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER);\n+            assertWeekIterator(it, centered);\n+            it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER);\n+            assertWeekIterator(it, centered);\n+            try {\n+                it.next();\n+                fail();\n+            } catch (NoSuchElementException ex) {}\n+            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);\n+            it.next();\n+            try {\n+                it.remove();\n+            } catch( UnsupportedOperationException ex) {}\n+            \n             now.add(Calendar.DATE,1);\n         }\n     }", "timestamp": 1059956479, "metainfo": ""}