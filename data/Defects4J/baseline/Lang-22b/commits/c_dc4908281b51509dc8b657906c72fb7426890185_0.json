{"sha": "dc4908281b51509dc8b657906c72fb7426890185", "log": "Three new boundary tests for VariableFormatterTest.java.  ", "commit": "\n--- a/src/test/org/apache/commons/lang/text/VariableFormatterTest.java\n+++ b/src/test/org/apache/commons/lang/text/VariableFormatterTest.java\n  * @version $Id$\n  */\n public class VariableFormatterTest extends TestCase {\n+\n+    private static final String KEY_TARGET = \"target\";\n+    private static final String KEY_ANIMAL = \"animal\";\n     static final String REPLACE_TEMPLATE = \"The ${animal} jumps over the ${target}.\";\n+    static final String REPLACE_TEMPLATE_NO_ESCAPE = \"The {animal} jumps over the {target}.\";\n+    static final String REPLACE_TEMPLATE_NO_PREFIX = \"The $animal} jumps over the $target}.\";\n+    static final String REPLACE_TEMPLATE_NO_SUFFIX = \"The ${animal jumps over the ${target.\";\n \n     private VariableFormatter format;\n \n     protected void setUp() throws Exception {\n         super.setUp();\n         Map map = new HashMap();\n-        map.put(\"animal\", \"quick brown fox\");\n-        map.put(\"target\", \"lazy dog\");\n+        map.put(KEY_ANIMAL, \"quick brown fox\");\n+        map.put(KEY_TARGET, \"lazy dog\");\n         setValues(map);\n         setFormat(new VariableFormatter(map));\n     }\n      */\n     public void testCyclicReplacement() {\n         Map valuesMap = new HashMap();\n-        valuesMap.put(\"animal\", \"${critter}\");\n-        valuesMap.put(\"target\", \"${pet}\");\n+        valuesMap.put(KEY_ANIMAL, \"${critter}\");\n+        valuesMap.put(KEY_TARGET, \"${pet}\");\n         valuesMap.put(\"pet\", \"${petCharacteristic} dog\");\n         valuesMap.put(\"petCharacteristic\", \"lazy\");\n         valuesMap.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\n     public void testNonInstanceMethods() {\n         assertEquals(\"The quick brown fox jumps over the lazy dog.\", VariableFormatter\n                 .replace(values, REPLACE_TEMPLATE));\n-        values.put(\"animal\", \"cow\");\n-        values.put(\"target\", \"moon\");\n+        values.put(KEY_ANIMAL, \"cow\");\n+        values.put(KEY_TARGET, \"moon\");\n         assertEquals(\"The cow jumps over the moon.\", VariableFormatter.replace(values, \"&\", \";\",\n                 \"The &animal; jumps over the &target;.\"));\n     }\n      */\n     public void testRecursiveReplacement() {\n         Map valuesMap = new HashMap();\n-        valuesMap.put(\"animal\", \"${critter}\");\n-        valuesMap.put(\"target\", \"${pet}\");\n+        valuesMap.put(KEY_ANIMAL, \"${critter}\");\n+        valuesMap.put(KEY_TARGET, \"${pet}\");\n         valuesMap.put(\"pet\", \"${petCharacteristic} dog\");\n         valuesMap.put(\"petCharacteristic\", \"lazy\");\n         valuesMap.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\n     public void testReplace() {\n         assertEquals(\"The quick brown fox jumps over the lazy dog.\", this.getFormat().replaceObject(REPLACE_TEMPLATE));\n         Map map = this.getValueMap();\n-        map.put(\"animal\", \"cow\");\n-        map.put(\"target\", \"moon\");\n+        map.put(KEY_ANIMAL, \"cow\");\n+        map.put(KEY_TARGET, \"moon\");\n         assertEquals(\"The cow jumps over the moon.\", this.getFormat().replace(REPLACE_TEMPLATE));\n \n         assertEquals(\"Variable ${var} is unknown!\", this.getFormat().replace(\"Variable ${var} is unknown!\"));\n+    }\n+\n+    /**\n+     * Tests a replace template with missing escape strings.\n+     */\n+    public void testReplaceNoEscape() {\n+        testReplaceNoElement(REPLACE_TEMPLATE_NO_ESCAPE);\n+    }\n+\n+    /**\n+     * Tests a replace template with missing prefix strings.\n+     */\n+    public void testReplaceNoPrefix() {\n+        testReplaceNoElement(REPLACE_TEMPLATE_NO_PREFIX);\n+    }\n+\n+    /**\n+     * Tests a replace template with missing postfix strings.\n+     */\n+    public void testReplaceNoSuffix() {\n+        testReplaceNoElement(REPLACE_TEMPLATE_NO_SUFFIX);\n+    }\n+\n+    void testReplaceNoElement(String badReplaceTemplate) {\n+        assertEquals(badReplaceTemplate, this.getFormat().replaceObject(badReplaceTemplate));\n+        Map map = this.getValueMap();\n+        map.put(KEY_ANIMAL, \"cow\");\n+        map.put(KEY_TARGET, \"moon\");\n+        assertEquals(\"The cow jumps over the moon.\", this.getFormat().replace(REPLACE_TEMPLATE));\n+        assertEquals(badReplaceTemplate, this.getFormat().replaceObject(badReplaceTemplate));\n     }\n \n     /**", "timestamp": 1122157562, "metainfo": ""}