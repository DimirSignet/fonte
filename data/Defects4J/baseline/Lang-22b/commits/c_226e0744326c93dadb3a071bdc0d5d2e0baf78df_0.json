{"sha": "226e0744326c93dadb3a071bdc0d5d2e0baf78df", "log": "Fix some raw types  ", "commit": "\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n     //-----------------------------------------------------------------------\n     public void testConstructor() {\n         assertNotNull(new ClassUtils());\n-        Constructor[] cons = ClassUtils.class.getDeclaredConstructors();\n+        Constructor<?>[] cons = ClassUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n         assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n         assertEquals(true, Modifier.isPublic(ClassUtils.class.getModifiers()));\n     public void test_getShortClassName_Class() {\n         assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));\n         assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));\n-        assertEquals(\"\", ClassUtils.getShortClassName((Class) null));\n+        assertEquals(\"\", ClassUtils.getShortClassName((Class<?>) null));\n \n         // LANG-535\n         assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));\n     public void test_getPackageName_Class() {\n         assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));\n         assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));\n-        assertEquals(\"\", ClassUtils.getPackageName((Class)null));\n+        assertEquals(\"\", ClassUtils.getPackageName((Class<?>)null));\n \n         // LANG-535\n         assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));\n     \n     // -------------------------------------------------------------------------\n     public void test_getAllSuperclasses_Class() {\n-        List list = ClassUtils.getAllSuperclasses(CY.class);\n+        List<?> list = ClassUtils.getAllSuperclasses(CY.class);\n         assertEquals(2, list.size());\n         assertEquals(CX.class, list.get(0));\n         assertEquals(Object.class, list.get(1));\n     }\n     \n     public void test_getAllInterfaces_Class() {\n-        List list = ClassUtils.getAllInterfaces(CY.class);\n+        List<?> list = ClassUtils.getAllInterfaces(CY.class);\n         assertEquals(6, list.size());\n         assertEquals(IB.class, list.get(0));\n         assertEquals(IC.class, list.get(1));\n     \n     // -------------------------------------------------------------------------\n     public void test_isAssignable_ClassArray_ClassArray() throws Exception {\n-        Class[] array2 = new Class[] {Object.class, Object.class};\n-        Class[] array1 = new Class[] {Object.class};\n-        Class[] array1s = new Class[] {String.class};\n-        Class[] array0 = new Class[] {};\n+        Class<?>[] array2 = new Class[] {Object.class, Object.class};\n+        Class<?>[] array1 = new Class[] {Object.class};\n+        Class<?>[] array1s = new Class[] {String.class};\n+        Class<?>[] array0 = new Class[] {};\n \n         assertFalse(ClassUtils.isAssignable(array1, array2));\n         assertFalse(ClassUtils.isAssignable(null, array2));\n     }\n     \n     public void test_isAssignable() throws Exception {\n-        assertFalse(ClassUtils.isAssignable((Class) null, null));\n+        assertFalse(ClassUtils.isAssignable((Class<?>) null, null));\n         assertFalse(ClassUtils.isAssignable(String.class, null));\n         \n         assertTrue(ClassUtils.isAssignable(null, Object.class));\n     }\n     \n     public void test_isAssignable_Autoboxing() throws Exception {\n-        assertFalse(ClassUtils.isAssignable((Class) null, null, true));\n+        assertFalse(ClassUtils.isAssignable((Class<?>) null, null, true));\n         assertFalse(ClassUtils.isAssignable(String.class, null, true));\n \n         assertTrue(ClassUtils.isAssignable(null, Object.class, true));\n                 ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY));\n \n         // test an array of various classes\n-        final Class[] primitives = new Class[] {\n+        final Class<?>[] primitives = new Class[] {\n                 Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE, \n                 Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE,\n                 String.class, ClassUtils.class\n         };\n-        Class[] wrappers= ClassUtils.primitivesToWrappers(primitives);\n+        Class<?>[] wrappers= ClassUtils.primitivesToWrappers(primitives);\n         \n         for (int i=0; i < primitives.length; i++) {\n             // test each returned wrapper\n-            Class primitive = primitives[i];\n-            Class expectedWrapper = ClassUtils.primitiveToWrapper(primitive);\n+            Class<?> primitive = primitives[i];\n+            Class<?> expectedWrapper = ClassUtils.primitiveToWrapper(primitive);\n             \n             assertEquals(primitive + \" -> \" + expectedWrapper, expectedWrapper, wrappers[i]);\n         }\n \n         // test an array of no primitive classes\n-        final Class[] noPrimitives = new Class[] {\n+        final Class<?>[] noPrimitives = new Class[] {\n                 String.class, ClassUtils.class, Void.TYPE\n         };\n         // This used to return the exact same array, but no longer does.\n \n     public void testWrapperToPrimitive() {\n         // an array with classes to convert\n-        final Class[] primitives = {\n+        final Class<?>[] primitives = {\n                 Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,\n                 Integer.TYPE, Long.TYPE, Float.TYPE, Double.TYPE\n         };\n         for (int i = 0; i < primitives.length; i++) {\n-            Class wrapperCls = ClassUtils.primitiveToWrapper(primitives[i]);\n+            Class<?> wrapperCls = ClassUtils.primitiveToWrapper(primitives[i]);\n             assertFalse(\"Still primitive\", wrapperCls.isPrimitive());\n             assertEquals(wrapperCls + \" -> \" + primitives[i], primitives[i],\n                     ClassUtils.wrapperToPrimitive(wrapperCls));\n \n     public void testWrappersToPrimitives() {\n         // an array with classes to test\n-        final Class[] classes = {\n+        final Class<?>[] classes = {\n                 Boolean.class, Byte.class, Character.class, Short.class,\n                 Integer.class, Long.class, Float.class, Double.class,\n                 String.class, ClassUtils.class, null\n         };\n \n-        Class[] primitives = ClassUtils.wrappersToPrimitives(classes);\n+        Class<?>[] primitives = ClassUtils.wrappersToPrimitives(classes);\n         // now test the result\n         assertEquals(\"Wrong length of result array\", classes.length, primitives.length);\n         for (int i = 0; i < classes.length; i++) {\n-            Class expectedPrimitive = ClassUtils.wrapperToPrimitive(classes[i]);\n+            Class<?> expectedPrimitive = ClassUtils.wrapperToPrimitive(classes[i]);\n             assertEquals(classes[i] + \" -> \" + expectedPrimitive, expectedPrimitive,\n                     primitives[i]);\n         }\n     }\n \n     public void testWrappersToPrimitivesEmpty() {\n-        Class[] empty = new Class[0];\n+        Class<?>[] empty = new Class[0];\n         assertEquals(\"Wrong result for empty input\", empty, ClassUtils.wrappersToPrimitives(empty));\n     }\n \n         assertEquals( boolean.class, ClassUtils.getClass( \"boolean\" ) );\n     }\n \n-    private void assertGetClassReturnsClass( Class c ) throws Exception {\n+    private void assertGetClassReturnsClass( Class<?> c ) throws Exception {\n         assertEquals( c, ClassUtils.getClass( c.getName() ) );\n     }\n \n-    private void assertGetClassThrowsException( String className, Class exceptionType ) throws Exception {\n+    private void assertGetClassThrowsException( String className, Class<?> exceptionType ) throws Exception {\n         try {\n             ClassUtils.getClass( className );\n             fail( \"ClassUtils.getClass() should fail with an exception of type \" + exceptionType.getName() + \" when given class name \\\"\" + className + \"\\\".\" );\n     // We may have to delete this if a JDK fixes the bug.\n     public void testShowJavaBug() throws Exception {\n         // Tests with Collections$UnmodifiableSet\n-        Set set = Collections.unmodifiableSet(new HashSet());\n+        Set<?> set = Collections.unmodifiableSet(new HashSet<Object>());\n         Method isEmptyMethod = set.getClass().getMethod(\"isEmpty\",  new Class[0]);\n         try {\n             isEmptyMethod.invoke(set, new Object[0]);\n \n     public void testGetPublicMethod() throws Exception {\n         // Tests with Collections$UnmodifiableSet\n-        Set set = Collections.unmodifiableSet(new HashSet());\n+        Set<?> set = Collections.unmodifiableSet(new HashSet<Object>());\n         Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), \"isEmpty\",  new Class[0]);\n             assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers()));\n  \n         array[1] = new Integer(1);\n         array[2] = new Double(99);\n \n-        Class[] results = ClassUtils.toClass(array);\n+        Class<?>[] results = ClassUtils.toClass(array);\n         assertEquals(\"String\", ClassUtils.getShortClassName(results[0]));\n         assertEquals(\"Integer\", ClassUtils.getShortClassName(results[1]));\n         assertEquals(\"Double\", ClassUtils.getShortClassName(results[2]));\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n     //-----------------------------------------------------------------------\n     public void testConstructor() {\n         assertNotNull(new StringUtils());\n-        Constructor[] cons = StringUtils.class.getDeclaredConstructors();\n+        Constructor<?>[] cons = StringUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n         assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n         assertEquals(true, Modifier.isPublic(StringUtils.class.getModifiers()));\n     }\n     \n     public void testJoin_IteratorChar() {\n-        assertEquals(null, StringUtils.join((Iterator) null, ','));\n+        assertEquals(null, StringUtils.join((Iterator<?>) null, ','));\n         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n         assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n         assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n     }\n     \n     public void testJoin_IteratorString() {\n-        assertEquals(null, StringUtils.join((Iterator) null, null));\n+        assertEquals(null, StringUtils.join((Iterator<?>) null, null));\n         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));\n         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), \"\"));\n         assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), \"x\"));\n     }\n \n     public void testJoin_CollectionChar() {\n-        assertEquals(null, StringUtils.join((Collection) null, ','));\n+        assertEquals(null, StringUtils.join((Collection<?>) null, ','));\n         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));\n         assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));\n         assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));\n     }\n \n     public void testJoin_CollectionString() {\n-        assertEquals(null, StringUtils.join((Collection) null, null));\n+        assertEquals(null, StringUtils.join((Collection<?>) null, null));\n         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));\n         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), \"\"));\n         assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), \"x\"));", "timestamp": 1256393708, "metainfo": ""}