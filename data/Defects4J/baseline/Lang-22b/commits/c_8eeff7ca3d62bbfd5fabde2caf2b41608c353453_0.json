{"sha": "8eeff7ca3d62bbfd5fabde2caf2b41608c353453", "log": "Deprecated the 'capitalise' spelling and introduced the 'capitalize' spelling. Despite the UK [or international] English base of many of the developers on Lang, it was felt that it would be better to match Jakarta as a whole.  Also none of us cared enough to make it an issue.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  *      - removes the last part of a String\n  *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n  *      - pads a String\n- *  <li><b>UpperCase/LowerCase/SwapCase/Capitalise/Uncapitalise</b>\n+ *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n  *      - change the case of a String\n  *  <li><b>NestedString</b>\n  *      - returns a substring nested within other Strings\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.93 2003/08/13 23:30:58 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.94 2003/08/14 00:04:20 bayard Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     }\n \n     /**\n-     * <p>Capitalises a String changing the first letter to title case as\n+     * <p>Capitalizes a String changing the first letter to title case as\n      * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n      * \n      * <p>A <code>null</code> input String returns <code>null</code>.</p>\n      * \n      * <pre>\n-     * StringUtils.capitalise(null)  = null\n-     * StringUtils.capitalise(\"\")    = \"\"\n-     * StringUtils.capitalise(\"cat\") = \"Cat\"\n-     * StringUtils.capitalise(\"cAt\") = \"CAt\"\n-     * </pre>\n-     * \n-     * @param str  the String to capitalise, may be null\n-     * @return the capitalised String, <code>null</code> if null String input\n-     */\n-    public static String capitalise(String str) {\n+     * StringUtils.capitalize(null)  = null\n+     * StringUtils.capitalize(\"\")    = \"\"\n+     * StringUtils.capitalize(\"cat\") = \"Cat\"\n+     * StringUtils.capitalize(\"cAt\") = \"CAt\"\n+     * </pre>\n+     * \n+     * @param str  the String to capitalize, may be null\n+     * @return the capitalized String, <code>null</code> if null String input\n+     */\n+    public static String capitalize(String str) {\n         int strLen;\n         if (str == null || (strLen = str.length()) == 0) {\n             return str;\n     }\n \n     /**\n-     * <p>Uncapitalises a String changing the first letter to title case as\n+     * @deprecated Use the standardly named {@link #capitalize(String)}.\n+     */\n+    public static String capitalise(String str) {\n+        return capitalize(str);\n+    }\n+\n+    /**\n+     * <p>Uncapitalizes a String changing the first letter to title case as\n      * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n      * \n      * <p>A <code>null</code> input String returns <code>null</code>.</p>\n      * \n      * <pre>\n-     * StringUtils.uncapitalise(null)  = null\n-     * StringUtils.uncapitalise(\"\")    = \"\"\n-     * StringUtils.uncapitalise(\"Cat\") = \"cat\"\n-     * StringUtils.uncapitalise(\"CAT\") = \"cAT\"\n-     * </pre>\n-     * \n-     * @param str  the String to uncapitalise, may be null\n-     * @return the uncapitalised String, <code>null</code> if null String input\n-     */\n-    public static String uncapitalise(String str) {\n+     * StringUtils.uncapitalize(null)  = null\n+     * StringUtils.uncapitalize(\"\")    = \"\"\n+     * StringUtils.uncapitalize(\"Cat\") = \"cat\"\n+     * StringUtils.uncapitalize(\"CAT\") = \"cAT\"\n+     * </pre>\n+     * \n+     * @param str  the String to uncapitalize, may be null\n+     * @return the uncapitalized String, <code>null</code> if null String input\n+     */\n+    public static String uncapitalize(String str) {\n         int strLen;\n         if (str == null || (strLen = str.length()) == 0) {\n             return str;\n             .append(Character.toLowerCase(str.charAt(0)))\n             .append(str.substring(1))\n             .toString();\n+    }\n+\n+    /**\n+     * @deprecated Use the standardly named {@link #uncapitalize(String)}.\n+     */\n+    public static String uncapitalise(String str) {\n+        return uncapitalize(str);\n     }\n \n     /**\n     }\n \n     /**\n-     * <p>Capitalises all the whitespace separated words in a String.\n+     * <p>Capitalizes all the whitespace separated words in a String.\n      * Only the first letter of each word is changed.</p>\n      *\n      * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n      * A <code>null</code> input String returns <code>null</code>.</p>\n      *\n      * <pre>\n-     * StringUtils.capitaliseAllWords(null)        = null\n-     * StringUtils.capitaliseAllWords(\"\")          = \"\"\n-     * StringUtils.capitaliseAllWords(\"i am FINE\") = \"I Am FINE\"\n-     * </pre>\n-     * \n-     * @param str  the String to capitalise, may be null\n-     * @return capitalised String, <code>null</code> if null String input\n-     */\n-    public static String capitaliseAllWords(String str) {\n+     * StringUtils.capitalizeAllWords(null)        = null\n+     * StringUtils.capitalizeAllWords(\"\")          = \"\"\n+     * StringUtils.capitalizeAllWords(\"i am FINE\") = \"I Am FINE\"\n+     * </pre>\n+     * \n+     * @param str  the String to capitalize, may be null\n+     * @return capitalized String, <code>null</code> if null String input\n+     */\n+    public static String capitalizeAllWords(String str) {\n         int strLen;\n         if (str == null || (strLen = str.length()) == 0) {\n             return str;\n     }\n \n     /**\n-     * <p>Uncapitalises all the whitespace separated words in a String.\n+     * @deprecated Use the standardly named {@link #capitalize(String)}.\n+     */\n+    public static String capitaliseAllWords(String str) {\n+        return capitalizeAllWords(str);\n+    }\n+\n+    /**\n+     * <p>Uncapitalizes all the whitespace separated words in a String.\n      * Only the first letter of each word is changed.</p>\n      *\n      * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n      * A <code>null</code> input String returns <code>null</code>.</p>\n      *\n      * <pre>\n-     * StringUtils.uncapitaliseAllWords(null)        = null\n-     * StringUtils.uncapitaliseAllWords(\"\")          = \"\"\n-     * StringUtils.uncapitaliseAllWords(\"I Am FINE\") = \"i am fINE\"\n-     * </pre>\n-     * \n-     * @param str  the String to uncapitalise, may be null\n-     * @return uncapitalised String, <code>null</code> if null String input\n-     */\n-    public static String uncapitaliseAllWords(String str) {\n+     * StringUtils.uncapitalizeAllWords(null)        = null\n+     * StringUtils.uncapitalizeAllWords(\"\")          = \"\"\n+     * StringUtils.uncapitalizeAllWords(\"I Am FINE\") = \"i am fINE\"\n+     * </pre>\n+     * \n+     * @param str  the String to uncapitalize, may be null\n+     * @return uncapitalized String, <code>null</code> if null String input\n+     */\n+    public static String uncapitalizeAllWords(String str) {\n         int strLen;\n         if (str == null || (strLen = str.length()) == 0) {\n             return str;\n             }\n         }\n         return buffer.toString();\n+    }\n+\n+    /**\n+     * @deprecated Use the standardly named {@link #uncapitalize(String)}.\n+     */\n+    public static String uncapitaliseAllWords(String str) {\n+        return uncapitalizeAllWords(str);\n     }\n \n     // Count matches\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsTest.java,v 1.46 2003/08/13 23:08:06 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.47 2003/08/14 00:04:20 bayard Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         assertEquals(null, StringUtils.upperCase(null));\n         assertEquals(null, StringUtils.lowerCase(null));\n         assertEquals(null, StringUtils.swapCase(null));\n-        assertEquals(null, StringUtils.capitalise(null));\n-        assertEquals(null, StringUtils.uncapitalise(null));\n-        assertEquals(null, StringUtils.capitaliseAllWords(null));\n-        assertEquals(null, StringUtils.uncapitaliseAllWords(null));\n-\n-        assertEquals(\"capitalise(String) failed\",\n-                     CAP_FOO, StringUtils.capitalise(FOO) );\n-        assertEquals(\"capitalise(empty-string) failed\",\n-                     \"\", StringUtils.capitalise(\"\") );\n-        assertEquals(\"capitalise(single-char-string) failed\",\n-                     \"X\", StringUtils.capitalise(\"x\") );\n-        assertEquals(\"capitaliseAllWords(String) failed\",\n-                     \"Foo Bar Baz\", StringUtils.capitaliseAllWords(SENTENCE) );\n-        assertEquals(\"capitaliseAllWords(empty-string) failed\",\n-                     \"\", StringUtils.capitaliseAllWords(\"\") );\n-        assertEquals(\"uncapitalise(String) failed\",\n-                     FOO, StringUtils.uncapitalise(CAP_FOO) );\n-        assertEquals(\"uncapitalise(empty-string) failed\",\n-                     \"\", StringUtils.uncapitalise(\"\") );\n-        assertEquals(\"uncapitalise(single-char-string) failed\",\n-                     \"x\", StringUtils.uncapitalise(\"X\") );\n-        assertEquals(\"uncapitaliseAllWords(String) failed\",\n-                     SENTENCE, StringUtils.uncapitaliseAllWords(\"Foo Bar Baz\") );\n-        assertEquals(\"uncapitaliseAllWords(empty-string) failed\",\n-                     \"\", StringUtils.uncapitaliseAllWords(\"\") );\n+        assertEquals(null, StringUtils.capitalize(null));\n+        assertEquals(null, StringUtils.uncapitalize(null));\n+        assertEquals(null, StringUtils.capitalizeAllWords(null));\n+        assertEquals(null, StringUtils.uncapitalizeAllWords(null));\n+\n+        assertEquals(\"capitalize(String) failed\",\n+                     CAP_FOO, StringUtils.capitalize(FOO) );\n+        assertEquals(\"capitalize(empty-string) failed\",\n+                     \"\", StringUtils.capitalize(\"\") );\n+        assertEquals(\"capitalize(single-char-string) failed\",\n+                     \"X\", StringUtils.capitalize(\"x\") );\n+        assertEquals(\"capitalizeAllWords(String) failed\",\n+                     \"Foo Bar Baz\", StringUtils.capitalizeAllWords(SENTENCE) );\n+        assertEquals(\"capitalizeAllWords(empty-string) failed\",\n+                     \"\", StringUtils.capitalizeAllWords(\"\") );\n+        assertEquals(\"uncapitalize(String) failed\",\n+                     FOO, StringUtils.uncapitalize(CAP_FOO) );\n+        assertEquals(\"uncapitalize(empty-string) failed\",\n+                     \"\", StringUtils.uncapitalize(\"\") );\n+        assertEquals(\"uncapitalize(single-char-string) failed\",\n+                     \"x\", StringUtils.uncapitalize(\"X\") );\n+        assertEquals(\"uncapitalizeAllWords(String) failed\",\n+                     SENTENCE, StringUtils.uncapitalizeAllWords(\"Foo Bar Baz\") );\n+        assertEquals(\"uncapitalizeAllWords(empty-string) failed\",\n+                     \"\", StringUtils.uncapitalizeAllWords(\"\") );\n \n         assertEquals(\"upperCase(String) failed\",\n                      \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\") );", "timestamp": 1060819460, "metainfo": ""}