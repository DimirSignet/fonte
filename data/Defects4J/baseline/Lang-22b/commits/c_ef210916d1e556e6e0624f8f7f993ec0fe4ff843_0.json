{"sha": "ef210916d1e556e6e0624f8f7f993ec0fe4ff843", "log": "Byte.valueOf() is definitely faster than new Byte()  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n         }\n         final Byte[] result = new Byte[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            result[i] = new Byte(array[i]);\n+            result[i] = Byte.valueOf(array[i]);\n         }\n         return result;\n     }  \n      * (index < 0 || index > array.length).\n      */\n     public static byte[] add(byte[] array, int index, byte element) {\n-        return (byte[]) add(array, index, new Byte(element), Byte.TYPE);\n+        return (byte[]) add(array, index, Byte.valueOf(element), Byte.TYPE);\n     }\n     \n     /**\n--- a/src/java/org/apache/commons/lang/mutable/MutableByte.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableByte.java\n      * @return the value as a Byte\n      */\n     public Object getValue() {\n-        return new Byte(this.value);\n+        return Byte.valueOf(this.value);\n     }\n \n     /**\n      * @return a Byte instance containing the value from this mutable\n      */\n     public Byte toByte() {\n-        return new Byte(byteValue());\n+        return Byte.valueOf(byteValue());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n         \n         assertTrue(Arrays.equals(\n             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n-            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), \n-                new Byte(Byte.MAX_VALUE), new Byte((byte)9999999)}))\n+            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), \n+                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)}))\n         );\n \n         try {\n-            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), null});\n+            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null});\n             fail();\n         } catch (NullPointerException ex) {}\n     }\n         \n         assertTrue(Arrays.equals(\n             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n-            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), \n-                new Byte(Byte.MAX_VALUE), new Byte((byte)9999999)}, \n+            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), \n+                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)}, \n                 Byte.MIN_VALUE))\n         );\n         \n         assertTrue(Arrays.equals(\n             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n-            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), null, \n-                new Byte((byte)9999999)}, Byte.MAX_VALUE))\n+            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null, \n+                Byte.valueOf((byte)9999999)}, Byte.MAX_VALUE))\n         );\n     }\n \n             ArrayUtils.toObject(new byte[0]));\n         \n         assertTrue(Arrays.equals(\n-            new Byte[] {new Byte(Byte.MIN_VALUE), \n-                new Byte(Byte.MAX_VALUE), new Byte((byte)9999999)},\n+            new Byte[] {Byte.valueOf(Byte.MIN_VALUE), \n+                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)},\n                 ArrayUtils.toObject(new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, \n                 (byte)9999999}))\n         );\n--- a/src/test/org/apache/commons/lang/math/RangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/RangeTest.java\n \n         @Override\n         public Number getMaximumNumber() {\n-            return new Byte(max);\n+            return Byte.valueOf(max);\n         }\n \n         @Override\n         public Number getMinimumNumber() {\n-            return new Byte(min);\n+            return Byte.valueOf(min);\n         }\n     }\n \n--- a/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n         \n         assertEquals((byte) 1, new MutableByte((byte) 1).byteValue());\n         \n-        assertEquals((byte) 2, new MutableByte(new Byte((byte) 2)).byteValue());\n+        assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue());\n         assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue());\n         try {\n             new MutableByte(null);\n     public void testGetSet() {\n         final MutableByte mutNum = new MutableByte((byte) 0);\n         assertEquals((byte) 0, new MutableByte().byteValue());\n-        assertEquals(new Byte((byte) 0), new MutableByte().getValue());\n+        assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue());\n         \n         mutNum.setValue((byte) 1);\n         assertEquals((byte) 1, mutNum.byteValue());\n-        assertEquals(new Byte((byte) 1), mutNum.getValue());\n+        assertEquals(Byte.valueOf((byte) 1), mutNum.getValue());\n         \n-        mutNum.setValue(new Byte((byte) 2));\n+        mutNum.setValue(Byte.valueOf((byte) 2));\n         assertEquals((byte) 2, mutNum.byteValue());\n-        assertEquals(new Byte((byte) 2), mutNum.getValue());\n+        assertEquals(Byte.valueOf((byte) 2), mutNum.getValue());\n         \n         mutNum.setValue(new MutableByte((byte) 3));\n         assertEquals((byte) 3, mutNum.byteValue());\n-        assertEquals(new Byte((byte) 3), mutNum.getValue());\n+        assertEquals(Byte.valueOf((byte) 3), mutNum.getValue());\n         try {\n             mutNum.setValue(null);\n             fail();\n         assertEquals(false, mutNumB.equals(mutNumC));\n         assertEquals(true, mutNumC.equals(mutNumC));\n         assertEquals(false, mutNumA.equals(null));\n-        assertEquals(false, mutNumA.equals(new Byte((byte) 0)));\n+        assertEquals(false, mutNumA.equals(Byte.valueOf((byte) 0)));\n         assertEquals(false, mutNumA.equals(\"0\"));\n     }\n \n         assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n         assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n         assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == new Byte((byte) 0).hashCode());\n+        assertEquals(true, mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode());\n     }\n \n     public void testCompareTo() {\n             fail();\n         } catch (NullPointerException ex) {}\n         try {\n-            mutNum.compareTo(new Byte((byte) 0));\n+            mutNum.compareTo(Byte.valueOf((byte) 0));\n             fail();\n         } catch (ClassCastException ex) {}\n         try {\n     }\n \n     public void testToByte() {\n-        assertEquals(new Byte((byte) 0), new MutableByte((byte) 0).toByte());\n-        assertEquals(new Byte((byte) 123), new MutableByte((byte) 123).toByte());\n+        assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte());\n+        assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte());\n     }\n \n     public void testIncrement() {", "timestamp": 1237169178, "metainfo": ""}