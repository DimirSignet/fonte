{"sha": "3a95ec1b08b2456e369567caaa77fbebfe3c372d", "log": "LANG-640: Add normalizeSpace to StringUtils  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n import java.util.Iterator;\n import java.util.List;\n import java.util.Locale;\n+import java.util.regex.Pattern;\n \n /**\n  * <p>Operations on {@link java.lang.String} that are\n     private static final int PAD_LIMIT = 8192;\n \n     /**\n+     * A regex pattern for recognizing blocks of whitespace characters.\n+     */\n+    private static final Pattern WHITESPACE_BLOCK = Pattern.compile(\"\\\\s+\");\n+    \n+    /**\n      * <p><code>StringUtils</code> instances should NOT be constructed in\n      * standard programming. Instead, the class should be used as\n      * <code>StringUtils.trim(\" foo \");</code>.</p>\n         int strOffset = str.length() - suffix.length();\n         return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length());\n     }\n+\n+    /**\n+     * <p>\n+     * Similar to <a\n+     * href=\"http://www.w3.org/TR/xpath/#function-normalize-space\">http://www.w3.org/TR/xpath/#function-normalize\n+     * -space</a>\n+     * </p>\n+     * <p>\n+     * The function returns the argument string with whitespace normalized by using\n+     * <code>{@link #trim(String)}</code> to remove leading and trailing whitespace\n+     * and then replacing sequences of whitespace characters by a single space.\n+     * </p>\n+     * In XML Whitespace characters are the same as those allowed by the <a\n+     * href=\"http://www.w3.org/TR/REC-xml/#NT-S\">S</a> production, which is S ::= (#x20 | #x9 | #xD | #xA)+\n+     * <p>\n+     * Java's regexp pattern \\s defines whitespace as [ \\t\\n\\x0B\\f\\r]\n+     * <p>\n+     * For reference:\n+     * <ul>\n+     * <li>\\x0B = vertical tab</li>\n+     * <li>\\f = #xC = form feed</li>\n+     * <li>#x20 = space</li>\n+     * <li>#x9 = \\t</li>\n+     * <li>#xA = \\n</li>\n+     * <li>#xD = \\r</li>\n+     * </ul>\n+     * </p>\n+     * <p>\n+     * The difference is that Java's whitespace includes vertical tab and form feed, which this functional will also\n+     * normalize. Additonally <code>{@link #trim(String)}</code> removes control characters (char &lt;= 32) from both\n+     * ends of this String.\n+     * </p>\n+     * \n+     * @see Pattern\n+     * @see #trim(String)\n+     * @see <a\n+     *      href=\"http://www.w3.org/TR/xpath/#function-normalize-space\">http://www.w3.org/TR/xpath/#function-normalize-space</a>\n+     * @param str the source String to normalize whitespaces from, may be null\n+     * @return the modified string with whitespace normalized, <code>null</code> if null String input\n+     * \n+     * @since 3.0\n+     */\n+    public static String normalizeSpace(String str) {\n+        if(str == null) {\n+            return null;\n+        }\n+        return WHITESPACE_BLOCK.matcher(trim(str)).replaceAll(\" \");         \n+    }\n }\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n         assertFalse(StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abcd\"}));\n     }\n  \n+    public void testNormalizeSpace() {\n+        assertEquals(null, StringUtils.normalizeSpace(null));\n+        assertEquals(\"\", StringUtils.normalizeSpace(\"\"));\n+        assertEquals(\"\", StringUtils.normalizeSpace(\" \"));\n+        assertEquals(\"\", StringUtils.normalizeSpace(\"\\t\"));\n+        assertEquals(\"\", StringUtils.normalizeSpace(\"\\n\"));        \n+        assertEquals(\"\", StringUtils.normalizeSpace(\"\\u000B\"));\n+        assertEquals(\"\", StringUtils.normalizeSpace(\"\\f\"));\n+        assertEquals(\"\", StringUtils.normalizeSpace(\"\\r\"));\n+        assertEquals(\"a\", StringUtils.normalizeSpace(\"  a  \"));\n+        assertEquals(\"a b c\", StringUtils.normalizeSpace(\"  a  b   c  \"));\n+        assertEquals(\"a b c\", StringUtils.normalizeSpace(\"a\\t\\f\\r  b\\u000B   c\\n\"));\n+    }\n }", "timestamp": 1281056937, "metainfo": ""}