{"sha": "f23fae96dcda9e718da1f68ed33d782fd02d1905", "log": "Add and rework isEmpty, isNotEmpty, isEmptyTrimmed, isNotEmptyTrimmed Javadoc methods, adding example code   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.53 2003/07/09 23:54:16 bayard Exp $\n+ * @version $Id: StringUtils.java,v 1.54 2003/07/14 22:26:51 scolebourne Exp $\n  */\n public class StringUtils {\n \n      * </pre>\n      *\n      * @see java.lang.String#trim()\n-     * @param str the String to check\n-     * @return the trimmed text (never <code>null</code>)\n+     * @param str  the String to clean, may be null\n+     * @return the trimmed text, never <code>null</code>\n      * @deprecated Use the clearer named {@link #trimToEmpty(String)}.\n      *             Method will be removed in Commons Lang 3.0.\n      */\n      * </pre>\n      *\n      * @see java.lang.String#trim()\n-     * @param str the String to be trimmed\n-     * @return the trimmed text (or <code>null</code>)\n+     * @param str  the String to be trimmed, may be null\n+     * @return the trimmed text, \n+     *  <code>null</code> if a null string input\n      */\n     public static String trim(String str) {\n         return (str == null ? null : str.trim());\n      * </pre>\n      *  \n      * @see java.lang.String#trim()\n-     * @param str the String to be trimmed.\n-     * @return the trimmed string, or null if it's empty or null\n+     * @param str  the String to be trimmed, may be null\n+     * @return the trimmed string, \n+     *  <code>null</code> if a whitespace, empty or null string input\n      */\n     public static String trimToNull(String str) {\n         String ts = trim(str);\n \n     /** \n      * <p>Removes control characters, including whitespace, from both \n-     * ends of this string returning an empty string if the string is\n-     * empty after the trim or if it is <code>null</code>.\n+     * ends of this string returning an empty string (\"\") if the string\n+     * is empty after the trim or if it is <code>null</code>.\n      * \n      * <p>The string is trimmed using {@link String#trim()}.</p>\n      * \n      * </pre>\n      *  \n      * @see java.lang.String#trim()\n-     * @param str the String to be trimmed\n-     * @return the trimmed string, or an empty string if it's empty or null\n+     * @param str  the String to be trimmed, may be null\n+     * @return the trimmed string, or an empty string if null input\n      */\n     public static String trimToEmpty(String str) {\n         return (str == null ? \"\" : str.trim());\n      * <p>Spaces are defined as <code>{' ', '\\t', '\\r', '\\n', '\\b'}</code>\n      * in line with the deprecated {@link Character#isSpace(char)}.</p>\n      *\n-     * @param str String target to delete spaces from\n-     * @return the String without spaces\n-     * @throws NullPointerException\n+     * @param str  the String to delete spaces from, may be null\n+     * @return the String without spaces, <code>null</code> if null string input\n      */\n     public static String deleteSpaces(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n         return CharSetUtils.delete(str, \" \\t\\r\\n\\b\");\n     }\n \n      * <p>Whitespace is defined by\n      * {@link Character#isWhitespace(char)}.</p>\n      *\n-     * @param str String target to delete whitespace from\n-     * @return the String without whitespaces\n-     * @throws NullPointerException\n+     * @param str  the String to delete whitespace from, may be null\n+     * @return the String without whitespaces, <code>null</code> if null string input\n      */\n     public static String deleteWhitespace(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n         StringBuffer buffer = new StringBuffer();\n         int sz = str.length();\n-        for (int i=0; i<sz; i++) {\n-            if(!Character.isWhitespace(str.charAt(i))) {\n+        for (int i = 0; i < sz; i++) {\n+            if (!Character.isWhitespace(str.charAt(i))) {\n                 buffer.append(str.charAt(i));\n             }\n         }\n         return buffer.toString();\n     }\n \n-    /**\n-     * <p>Checks if a String is non <code>null</code> and is\n-     * not empty (<code>length > 0</code>).</p>\n-     *\n-     * @param str the String to check\n-     * @return true if the String is non-null, and not length zero\n+    // Empty checks\n+    //--------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Checks if a String is <code>null</code> or empty (\"\").</p>\n+     * \n+     * <pre>\n+     * StringUtils.isEmpty(null)      = true\n+     * StringUtils.isEmpty(\"\")        = true\n+     * StringUtils.isEmpty(\" \")       = false\n+     * StringUtils.isEmpty(\"bob\")     = false\n+     * StringUtils.isEmpty(\"  bob  \") = false\n+     * </pre>\n+     *\n+     * <p>NOTE: This method changed in version 2.0.\n+     * It no longer trims the String.\n+     * That functionality is available in isEmptyTrimmed().</p>\n+     * \n+     * @param str  the String to check, may be null\n+     * @return <code>true</code> if the String is <code>null</code> or empty\n+     */\n+    public static boolean isEmpty(String str) {\n+        return (str == null || str.length() == 0);\n+    }\n+\n+    /**\n+     * <p>Checks if a String is not <code>null</code> and not empty (\"\").</p>\n+     * \n+     * <pre>\n+     * StringUtils.isNotEmpty(null)      = false\n+     * StringUtils.isNotEmpty(\"\")        = false\n+     * StringUtils.isNotEmpty(\" \")       = true\n+     * StringUtils.isNotEmpty(\"bob\")     = true\n+     * StringUtils.isNotEmpty(\"  bob  \") = true\n+     * </pre>\n+     *\n+     * @param str  the String to check, may be null\n+     * @return <code>true</code> if the String is not <code>null</code> and not empty\n      */\n     public static boolean isNotEmpty(String str) {\n         return (str != null && str.length() > 0);\n     }\n \n     /**\n-     * <p>Checks if a (trimmed) String is <code>null</code> or empty.</p>\n-     *\n-     * @param str the String to check\n-     * @return <code>true</code> if the String is <code>null</code>, or\n-     *  length zero once trimmed\n-     */\n-    public static boolean isEmpty(String str) {\n+     * <p>Checks if a trimmed String is <code>null</code> or empty (\"\").</p>\n+     *\n+     * <pre>\n+     * StringUtils.isNotEmpty(null)      = true\n+     * StringUtils.isNotEmpty(\"\")        = true\n+     * StringUtils.isNotEmpty(\" \")       = true\n+     * StringUtils.isNotEmpty(\"bob\")     = false\n+     * StringUtils.isNotEmpty(\"  bob  \") = false\n+     * </pre>\n+     *\n+     * @see java.lang.String#trim()\n+     * @param str  the String to check, may be null\n+     * @return <code>true</code> if the String is <code>null</code>\n+     *  or empty after trim()\n+     */\n+    public static boolean isEmptyTrimmed(String str) {\n         return (str == null || str.trim().length() == 0);\n+    }\n+\n+    /**\n+     * <p>Checks if a trimmed String is not <code>null</code> and not empty (\"\").</p>\n+     *\n+     * <pre>\n+     * StringUtils.isNotEmpty(null)      = false\n+     * StringUtils.isNotEmpty(\"\")        = false\n+     * StringUtils.isNotEmpty(\" \")       = false\n+     * StringUtils.isNotEmpty(\"bob\")     = true\n+     * StringUtils.isNotEmpty(\"  bob  \") = true\n+     * </pre>\n+     *\n+     * @see java.lang.String#trim()\n+     * @param str  the String to check, may be null\n+     * @return <code>true</code> if the String is not <code>null</code>\n+     *  and not empty after trim()\n+     */\n+    public static boolean isNotEmptyTrimmed(String str) {\n+        return (str != null && str.trim().length() > 0);\n     }\n \n     // Equals and IndexOf\n      * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n      * references are considered to be equal. The comparison is case sensitive.</p>\n      *\n+     * <pre>\n+     * StringUtils.equals(null, null)   = true\n+     * StringUtils.equals(null, \"abc\")  = false\n+     * StringUtils.equals(\"abc\", null)  = false\n+     * StringUtils.equals(\"abc\", \"abc\") = true\n+     * StringUtils.equals(\"abc\", \"ABC\") = false\n+     * </pre>\n+     *  \n      * @see java.lang.String#equals(Object)\n-     * @param str1 the first string\n-     * @param str2 the second string\n+     * @param str1  the first string, may be null\n+     * @param str2  the second string, may be null\n      * @return <code>true</code> if the Strings are equal, case sensitive, or\n      *  both <code>null</code>\n      */\n      * <p><code>Nulls</code> are handled without exceptions. Two <code>null</code>\n      * references are considered equal. Comparison is case insensitive.</p>\n      *\n+     * <pre>\n+     * StringUtils.equalsIgnoreCase(null, null)   = true\n+     * StringUtils.equalsIgnoreCase(null, \"abc\")  = false\n+     * StringUtils.equalsIgnoreCase(\"abc\", null)  = false\n+     * StringUtils.equalsIgnoreCase(\"abc\", \"abc\") = true\n+     * StringUtils.equalsIgnoreCase(\"abc\", \"ABC\") = true\n+     * </pre>\n+     * \n      * @see java.lang.String#equalsIgnoreCase(String)\n-     * @param str1  the first string\n-     * @param str2  the second string\n+     * @param str1  the first string, may be null\n+     * @param str2  the second string, may be null\n      * @return <code>true</code> if the Strings are equal, case insensitive, or\n      *  both <code>null</code>\n      */\n      *\n      * <p><code>null</code> String will return <code>-1</code>.</p>\n      * \n-     * @param str the String to check\n-     * @param searchStrs the Strings to search for\n-     * @return the first index of any of the searchStrs in str\n+     * @param str  the String to check, may be null\n+     * @param searchStrs  the Strings to search for, may be null\n+     * @return the first index of any of the searchStrs in str, -1 if no match\n      * @throws NullPointerException if any of searchStrs[i] is <code>null</code>\n      */\n     public static int indexOfAny(String str, String[] searchStrs) {\n      *\n      * <p><code>null</code> string will return <code>-1</code>.</p>\n      * \n-     * @param str  the String to check\n-     * @param searchStrs  the Strings to search for\n-     * @return the last index of any of the Strings\n+     * @param str  the String to check, may be null\n+     * @param searchStrs  the Strings to search for, may be null\n+     * @return the last index of any of the Strings, -1 if no match\n      * @throws NullPointerException if any of searchStrs[i] is <code>null</code>\n      */\n     public static int lastIndexOfAny(String str, String[] searchStrs) {\n      * <p>A negative start position can be used to start <code>n</code>\n      * characters from the end of the String.</p>\n      * \n-     * @param str the String to get the substring from\n-     * @param start the position to start from, negative means\n+     * <pre>\n+     * StringUtils.substring(null, 0)   = null\n+     * StringUtils.substring(\"abc\", 0)  = \"abc\"\n+     * StringUtils.substring(\"abc\", 2)  = \"c\"\n+     * StringUtils.substring(\"abc\", 4)  = \"\"\n+     * StringUtils.substring(\"abc\", -2) = \"bc\"\n+     * StringUtils.substring(\"abc\", -4) = \"abc\"\n+     * </pre>\n+     * \n+     * @param str  the String to get the substring from, may be null\n+     * @param start  the position to start from, negative means\n      *  count back from the end of the String by this many characters\n-     * @return substring from start position\n+     * @return substring from start position, <code>null</code> if null string input\n      */\n     public static String substring(String str, int start) {\n         if (str == null) {\n      * <p>A negative start position can be used to start/end <code>n</code>\n      * characters from the end of the String.</p>\n      * \n-     * @param str the String to get the substring from\n-     * @param start the position to start from, negative means\n+     * <pre>\n+     * StringUtils.substring(null, 0, 2)    = null\n+     * StringUtils.substring(\"abc\", 0, 2)   = \"ab\"\n+     * StringUtils.substring(\"abc\", 2, 0)   = \"\"\n+     * StringUtils.substring(\"abc\", 2, 4)   = \"c\"\n+     * StringUtils.substring(\"abc\", 4, 6)   = \"\"\n+     * StringUtils.substring(\"abc\", -2, -1) = \"b\"\n+     * StringUtils.substring(\"abc\", -4, 2)  = \"ab\"\n+     * </pre>\n+     * \n+     * @param str  the String to get the substring from, may be null\n+     * @param start  the position to start from, negative means\n      *  count back from the end of the string by this many characters\n-     * @param end the position to end at (exclusive), negative means\n+     * @param end  the position to end at (exclusive), negative means\n      *  count back from the end of the String by this many characters\n-     * @return substring from start position to end positon\n+     * @return substring from start position to end positon, <code>null</code> if null string input\n      */\n     public static String substring(String str, int start, int end) {\n         if (str == null) {\n      * String is <code>null</code>, the String will be returned without\n      * an exception.</p>\n      *\n-     * @param str the String to get the leftmost characters from\n-     * @param len the length of the required String\n-     * @return the leftmost characters\n+     * <pre>\n+     * StringUtils.left(null, 0)    = null\n+     * StringUtils.left(\"abc\", 0)   = \"\"\n+     * StringUtils.left(\"abc\", 2)   = \"ab\"\n+     * StringUtils.left(\"abc\", 4)   = \"abc\"\n+     * StringUtils.left(\"abc\", -2)  = IllegalArgumentException\n+     * </pre>\n+     * \n+     * @param str  the String to get the leftmost characters from, may be null\n+     * @param len  the length of the required String, must be zero or positive\n+     * @return the leftmost characters, <code>null</code> if null string input\n      * @throws IllegalArgumentException if len is less than zero\n      */\n     public static String left(String str, int len) {\n      * is <code>null</code>, the String will be returned without an\n      * exception.</p>\n      *\n-     * @param str the String to get the rightmost characters from\n-     * @param len the length of the required String\n-     * @return the leftmost characters\n+     * <pre>\n+     * StringUtils.right(null, 0)    = null\n+     * StringUtils.right(\"abc\", 0)   = \"\"\n+     * StringUtils.right(\"abc\", 2)   = \"bc\"\n+     * StringUtils.right(\"abc\", 4)   = \"abc\"\n+     * StringUtils.right(\"abc\", -2)  = IllegalArgumentException\n+     * </pre>\n+     * \n+     * @param str  the String to get the rightmost characters from, may be null\n+     * @param len  the length of the required String, must be zero or positive\n+     * @return the rightmost characters, <code>null</code> if null string input\n      * @throws IllegalArgumentException if len is less than zero\n      */\n     public static String right(String str, int len) {\n      * of the String will be returned without an exception. If the\n      * String is <code>null</code>, <code>null</code> will be returned.</p>\n      *\n-     * @param str the String to get the characters from\n-     * @param pos the position to start from\n-     * @param len the length of the required String\n-     * @return the leftmost characters\n+     * <pre>\n+     * StringUtils.mid(null, 0, 0)    = null\n+     * StringUtils.mid(\"abc\", 0, 2)   = \"ab\"\n+     * StringUtils.mid(\"abc\", 0, 4)   = \"abc\"\n+     * StringUtils.mid(\"abc\", 2, 4)   = \"c\"\n+     * StringUtils.mid(\"abc\", 4, 2)   = StringIndexOutOfBoundsException\n+     * StringUtils.mid(\"abc\", -2, -2) = StringIndexOutOfBoundsException\n+     * StringUtils.mid(\"abc\", 0, -2)  = IllegalArgumentException\n+     * </pre>\n+     * \n+     * @param str  the String to get the characters from, may be null\n+     * @param pos  the position to start from, must be valid\n+     * @param len  the length of the required String, must be zero or positive\n+     * @return the middle characters, <code>null</code> if null string input\n      * @throws IndexOutOfBoundsException if pos is out of bounds\n      * @throws IllegalArgumentException if len is less than zero\n      */\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * <p>Splits the provided text into a array, using whitespace as the\n+     * <p>Splits the provided text into an array, using whitespace as the\n      * separator.</p>\n      *\n      * <p>The separator is not included in the returned String array.</p>\n      *\n-     * @param str the String to parse\n-     * @return an array of parsed Strings \n+     * <pre>\n+     * StringUtils.split(null)      = []\n+     * StringUtils.split(\"abc def\") = [abc, def]\n+     * </pre>\n+     * \n+     * @param str  the String to parse, may be null\n+     * @return an array of parsed Strings, empty array if null input\n      */\n     public static String[] split(String str) {\n         return split(str, null, -1);\n     }\n \n     /**\n-     * @see #split(String, String, int)\n-     */\n-    public static String[] split(String text, String separator) {\n-        return split(text, separator, -1);\n+     * <p>Splits the provided text into an array, using the specified separators.</p>\n+     *\n+     * <p>The separator is not included in the returned String array.</p>\n+     *\n+     * <pre>\n+     * StringUtils.split(null, null)      = []\n+     * StringUtils.split(\"abc def\", null) = [abc, def]\n+     * StringUtils.split(\"abc def\", \" \")  = [abc, def]\n+     * StringUtils.split(\"ab:cd:ef\", \":\") = [ab, cd, ef]\n+     * </pre>\n+     * \n+     * @param str  the String to parse, may be null\n+     * @param separators  the characters used as the delimiters,\n+     *  <code>null</code> splits on whitespace\n+     * @return an array of parsed Strings, empty array if null input\n+     */\n+    public static String[] split(String str, String separators) {\n+        return split(str, separators, -1);\n     }\n \n     /**\n      * an array of tokens, instead of an enumeration of tokens (as\n      * <code>StringTokenizer</code> does).</p>\n      *\n-     * @param str The string to parse.\n-     * @param separator Characters used as the delimiters. If\n-     *  <code>null</code>, splits on whitespace.\n-     * @param max The maximum number of elements to include in the\n-     *  array.  A zero or negative value implies no limit.\n-     * @return an array of parsed Strings \n+     * <pre>\n+     * StringUtils.split(null, null, 0)       = []\n+     * StringUtils.split(\"ab de fg\", null, 0) = [ab, cd, ef]\n+     * StringUtils.split(\"ab:cd:ef\", \":\", 0)  = [ab, cd, ef]\n+     * StringUtils.split(\"ab:cd:ef\", \":\", 2)  = [ab, cdef]\n+     * </pre>\n+     * \n+     * @param str  the string to parse, may be null\n+     * @param separators  the characters used as the delimiters,\n+     *  <code>null</code> splits on whitespace\n+     * @param max  the maximum number of elements to include in the\n+     *  array. A zero or negative value implies no limit.\n+     * @return an array of parsed Strings, empty array if null input\n      */\n     public static String[] split(String str, String separator, int max) {\n+        if (str == null) {\n+            return ArrayUtils.EMPTY_STRING_ARRAY;\n+        }\n         StringTokenizer tok = null;\n         if (separator == null) {\n             // Null separator means we're using StringTokenizer's default", "timestamp": 1058221611, "metainfo": ""}