{"sha": "f5144f0569be64a7ac0db5a59afe79d608217dcc", "log": "Sort Members (Eclipse).   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: ToStringBuilder.java,v 1.20 2003/04/18 07:01:47 ggregory Exp $\n+ * @version $Id: ToStringBuilder.java,v 1.21 2003/05/31 22:22:49 ggregory Exp $\n  */\n public class ToStringBuilder {\n+    \n+    /**\n+     * The default style of output to use\n+     */\n+    private static ToStringStyle defaultStyle = ToStringStyle.DEFAULT_STYLE;\n \n     /**\n      * A registry of objects used by <code>reflectionToString</code> methods to detect cyclical object references \n             return new HashSet();\n         }\n     };\n-    \n-    /**\n-     * The default style of output to use\n-     */\n-    private static ToStringStyle defaultStyle = ToStringStyle.DEFAULT_STYLE;\n-    \n-    /**\n-     * Current toString buffer\n-     */\n-    private final StringBuffer buffer;\n-    \n-    /**\n-     * The style of output to use\n-     */\n-    private final ToStringStyle style;\n-    \n-    /**\n-     * The object being output\n-     */\n-    private final Object object;\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the default <code>ToStringStyle</code> to use.</p>\n+     *\n+     * <p>This could allow the <code>ToStringStyle</code> to be\n+     * controlled for an entire application with one call.</p>\n+     *\n+     * <p>This might be used to have a verbose\n+     * <code>ToStringStyle</code> during development and a compact\n+     * <code>ToStringStyle</code> in production.</p>\n+     * \n+     * @return the default <code>ToStringStyle</code>\n+     */\n+    public static ToStringStyle getDefaultStyle() {\n+        return defaultStyle;\n+    }\n \n     /**\n      * Returns the registry of objects being traversed by the \n      */\n     static boolean isRegistered(Object value) {\n         return getReflectionRegistry().contains(value);\n-    }\n-\n-    /**\n-     * Registers the given object.\n-     * Used by the reflection methods to avoid infinite loops.\n-     * \n-     * @param value The object to register.\n-     */\n-    static void register(Object value) {\n-        getReflectionRegistry().add(value);\n-    }\n-\n-    /**\n-     * Unregisters the given object.\n-     * Used by the reflection methods to avoid infinite loops.\n-     * \n-     * @param value The object to unregister.\n-     */\n-    static void unregister(Object value) {\n-        getReflectionRegistry().remove(value);\n-    }\n-\n-    /**\n-     * <p>Constructor for <code>ToStringBuilder</code>.</p>\n-     *\n-     * <p>This constructor outputs using the default style set with\n-     * <code>setDefaultStyle</code>.</p>\n-     * \n-     * @param object  the Object to build a <code>toString</code> for,\n-     *  must not be <code>null</code>\n-     * @throws IllegalArgumentException  if the Object passed in is\n-     *  <code>null</code>\n-     */\n-    public ToStringBuilder(Object object) {\n-        this(object, getDefaultStyle(), null);\n-    }\n-\n-    /**\n-     * <p>Constructor for <code>ToStringBuilder</code> specifying the\n-     * output style.</p>\n-     *\n-     * <p>If the style is <code>null</code>, the default style is used.</p>\n-     * \n-     * @param object  the Object to build a <code>toString</code> for,\n-     *  must not be <code>null</code>\n-     * @param style  the style of the <code>toString</code> to create,\n-     *  may be <code>null</code>\n-     * @throws IllegalArgumentException  if the Object passed in is\n-     *  <code>null</code>\n-     */\n-    public ToStringBuilder(Object object, ToStringStyle style) {\n-        this(object, style, null);\n-    }\n-\n-    /**\n-     * <p>Constructor for <code>ToStringBuilder</code>.</p>\n-     *\n-     * <p>If the style is <code>null</code>, the default style is used.</p>\n-     *\n-     * <p>If the buffer is <code>null</code>, a new one is created.</p>\n-     * \n-     * @param object  the Object to build a <code>toString</code> for,\n-     *  must not be <code>null</code>\n-     * @param style  the style of the <code>toString</code> to create,\n-     *  may be <code>null</code>\n-     * @param buffer  the <code>StringBuffer</code> to populate, may be\n-     *  <code>null</code>\n-     * @throws IllegalArgumentException  if the Object passed in is\n-     *  <code>null</code>\n-     */\n-    public ToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer) {\n-        super();\n-        if (object == null) {\n-            throw new IllegalArgumentException(\"The object to create a toString for must not be null\");\n-        }\n-        if (style == null) {\n-            style = getDefaultStyle();\n-        }\n-        if (buffer == null) {\n-            buffer = new StringBuffer(512);\n-        }\n-        this.buffer = buffer;\n-        this.style = style;\n-        this.object = object;\n-\n-        style.appendStart(buffer, object);\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Gets the default <code>ToStringStyle</code> to use.</p>\n-     *\n-     * <p>This could allow the <code>ToStringStyle</code> to be\n-     * controlled for an entire application with one call.</p>\n-     *\n-     * <p>This might be used to have a verbose\n-     * <code>ToStringStyle</code> during development and a compact\n-     * <code>ToStringStyle</code> in production.</p>\n-     * \n-     * @return the default <code>ToStringStyle</code>\n-     */\n-    public static ToStringStyle getDefaultStyle() {\n-        return defaultStyle;\n-    }\n-\n-    /**\n-     * <p>Sets the default <code>ToStringStyle</code> to use.</p>\n-     * \n-     * @param style  the default <code>ToStringStyle</code>\n-     * @throws IllegalArgumentException if the style is <code>null</code>\n-     */\n-    public static void setDefaultStyle(ToStringStyle style) {\n-        if (style == null) {\n-            throw new IllegalArgumentException(\"The style must not be null\");\n-        }\n-        defaultStyle = style;\n-    }\n-\n-    //-------------------------------------------------------------------------\n-\n-    /**\n-     * <p>This method uses reflection to build a suitable\n-     * <code>toString</code> using the default <code>ToStringStyle</code>.\n-     *\n-     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n-     * fields. This means that it will throw a security exception if run\n-     * under a security manger, if the permissions are not set up correctly.\n-     * It is also not as efficient as testing explicitly.</p>\n-     *\n-     * <p>Transient members will be not be included, as they are likely derived.</p>\n-     *\n-     * <p>Static fields will not be included. Superclass fields will be appended.</p>\n-     *\n-     * @param object  the Object to be output\n-     * @return the String result\n-     * @throws IllegalArgumentException if the Object is <code>null</code>\n-     */\n-    public static String reflectionToString(Object object) {\n-        return reflectionToString(object, null, false, null);\n-    }\n-\n-    /**\n-     * <p>This method uses reflection to build a suitable\n-     * <code>toString</code>.</p>\n-     *\n-     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n-     * fields. This means that it will throw a security exception if run\n-     * under a security manger, if the permissions are not set up correctly.\n-     * It is also not as efficient as testing explicitly.</p>\n-     *\n-     * <p>Transient members will be not be included, as they are likely\n-     * derived.</p>\n-     *\n-     * <p>Static fields will not be included. Superclass fields will be appended.</p>\n-     *\n-     * <p>If the style is <code>null</code>, the default\n-     * <code>ToStringStyle</code> is used.</p>\n-     * \n-     * @param object  the Object to be output\n-     * @param style  the style of the <code>toString</code> to create,\n-     *  may be <code>null</code>\n-     * @return the String result\n-     * @throws IllegalArgumentException if the Object or\n-     *  <code>ToStringStyle</code> is <code>null</code>\n-     */\n-    public static String reflectionToString(Object object, ToStringStyle style) {\n-        return reflectionToString(object, style, false, null);\n-    }\n-\n-    /**\n-     * <p>This method uses reflection to build a suitable\n-     * <code>toString</code>.</p>\n-     *\n-     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n-     * fields. This means that it will throw a security exception if run\n-     * under a security manger, if the permissions are not set up correctly.\n-     * It is also not as efficient as testing explicitly. </p>\n-     *\n-     * <p>If the <code>outputTransients</code> is <code>true</code>,\n-     * transient members will be output, otherwise they are ignored,\n-     * as they are likely derived fields, and not part of the value of the\n-     * Object.</p>\n-     *\n-     * <p>Static fields will not be included. Superclass fields will be appended.</p>\n-     *\n-     * <p>\n-     * If the style is <code>null</code>, the default\n-     * <code>ToStringStyle</code> is used.</p>\n-     * \n-     * @param object  the Object to be output\n-     * @param style  the style of the <code>toString</code> to create,\n-     *  may be <code>null</code>\n-     * @param outputTransients  whether to include transient fields\n-     * @return the String result\n-     * @throws IllegalArgumentException if the Object is <code>null</code>\n-     */\n-    public static String reflectionToString(Object object, ToStringStyle style, boolean outputTransients) {\n-        return reflectionToString(object, style, outputTransients, null);\n-    }\n-\n-    /**\n-     * <p>This method uses reflection to build a suitable\n-     * <code>toString</code>.</p>\n-     *\n-     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n-     * fields. This means that it will throw a security exception if run\n-     * under a security manger, if the permissions are not set up correctly.\n-     * It is also not as efficient as testing explicitly. </p>\n-     *\n-     * <p>If the <code>outputTransients</code> is <code>true</code>,\n-     * transient members will be output, otherwise they are ignored,\n-     * as they are likely derived fields, and not part of the value of the\n-     * Object.</p>\n-     *\n-     * <p>Static fields will not be included. Superclass fields will be appended\n-     * up to and including the specified superclass. A null superclass is treated\n-     * as java.lang.Object.</p>\n-     *\n-     * <p>If the style is <code>null</code>, the default\n-     * <code>ToStringStyle</code> is used.</p>\n-     * \n-     * @param object  the Object to be output\n-     * @param style  the style of the <code>toString</code> to create,\n-     *  may be <code>null</code>\n-     * @param outputTransients  whether to include transient fields\n-     * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null\n-     * @return the String result\n-     * @throws IllegalArgumentException if the Object is <code>null</code>\n-     */\n-    public static String reflectionToString(\n-        Object object,\n-        ToStringStyle style,\n-        boolean outputTransients,\n-        Class reflectUpToClass) {\n-        if (style == null) {\n-            style = getDefaultStyle();\n-        }\n-        if (object == null) {\n-            return style.getNullText();\n-        }\n-        ToStringBuilder builder = new ToStringBuilder(object, style);\n-        Class clazz = object.getClass();\n-        reflectionAppend(object, clazz, builder, outputTransients);\n-        while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {\n-            clazz = clazz.getSuperclass();\n-            reflectionAppend(object, clazz, builder, outputTransients);\n-        }\n-        return builder.toString();\n     }\n \n     /**\n         }\n     }\n \n+    //-------------------------------------------------------------------------\n+\n+    /**\n+     * <p>This method uses reflection to build a suitable\n+     * <code>toString</code> using the default <code>ToStringStyle</code>.\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run\n+     * under a security manger, if the permissions are not set up correctly.\n+     * It is also not as efficient as testing explicitly.</p>\n+     *\n+     * <p>Transient members will be not be included, as they are likely derived.</p>\n+     *\n+     * <p>Static fields will not be included. Superclass fields will be appended.</p>\n+     *\n+     * @param object  the Object to be output\n+     * @return the String result\n+     * @throws IllegalArgumentException if the Object is <code>null</code>\n+     */\n+    public static String reflectionToString(Object object) {\n+        return reflectionToString(object, null, false, null);\n+    }\n+\n+    /**\n+     * <p>This method uses reflection to build a suitable\n+     * <code>toString</code>.</p>\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run\n+     * under a security manger, if the permissions are not set up correctly.\n+     * It is also not as efficient as testing explicitly.</p>\n+     *\n+     * <p>Transient members will be not be included, as they are likely\n+     * derived.</p>\n+     *\n+     * <p>Static fields will not be included. Superclass fields will be appended.</p>\n+     *\n+     * <p>If the style is <code>null</code>, the default\n+     * <code>ToStringStyle</code> is used.</p>\n+     * \n+     * @param object  the Object to be output\n+     * @param style  the style of the <code>toString</code> to create,\n+     *  may be <code>null</code>\n+     * @return the String result\n+     * @throws IllegalArgumentException if the Object or\n+     *  <code>ToStringStyle</code> is <code>null</code>\n+     */\n+    public static String reflectionToString(Object object, ToStringStyle style) {\n+        return reflectionToString(object, style, false, null);\n+    }\n+\n+    /**\n+     * <p>This method uses reflection to build a suitable\n+     * <code>toString</code>.</p>\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run\n+     * under a security manger, if the permissions are not set up correctly.\n+     * It is also not as efficient as testing explicitly. </p>\n+     *\n+     * <p>If the <code>outputTransients</code> is <code>true</code>,\n+     * transient members will be output, otherwise they are ignored,\n+     * as they are likely derived fields, and not part of the value of the\n+     * Object.</p>\n+     *\n+     * <p>Static fields will not be included. Superclass fields will be appended.</p>\n+     *\n+     * <p>\n+     * If the style is <code>null</code>, the default\n+     * <code>ToStringStyle</code> is used.</p>\n+     * \n+     * @param object  the Object to be output\n+     * @param style  the style of the <code>toString</code> to create,\n+     *  may be <code>null</code>\n+     * @param outputTransients  whether to include transient fields\n+     * @return the String result\n+     * @throws IllegalArgumentException if the Object is <code>null</code>\n+     */\n+    public static String reflectionToString(Object object, ToStringStyle style, boolean outputTransients) {\n+        return reflectionToString(object, style, outputTransients, null);\n+    }\n+\n+    /**\n+     * <p>This method uses reflection to build a suitable\n+     * <code>toString</code>.</p>\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run\n+     * under a security manger, if the permissions are not set up correctly.\n+     * It is also not as efficient as testing explicitly. </p>\n+     *\n+     * <p>If the <code>outputTransients</code> is <code>true</code>,\n+     * transient members will be output, otherwise they are ignored,\n+     * as they are likely derived fields, and not part of the value of the\n+     * Object.</p>\n+     *\n+     * <p>Static fields will not be included. Superclass fields will be appended\n+     * up to and including the specified superclass. A null superclass is treated\n+     * as java.lang.Object.</p>\n+     *\n+     * <p>If the style is <code>null</code>, the default\n+     * <code>ToStringStyle</code> is used.</p>\n+     * \n+     * @param object  the Object to be output\n+     * @param style  the style of the <code>toString</code> to create,\n+     *  may be <code>null</code>\n+     * @param outputTransients  whether to include transient fields\n+     * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null\n+     * @return the String result\n+     * @throws IllegalArgumentException if the Object is <code>null</code>\n+     */\n+    public static String reflectionToString(\n+        Object object,\n+        ToStringStyle style,\n+        boolean outputTransients,\n+        Class reflectUpToClass) {\n+        if (style == null) {\n+            style = getDefaultStyle();\n+        }\n+        if (object == null) {\n+            return style.getNullText();\n+        }\n+        ToStringBuilder builder = new ToStringBuilder(object, style);\n+        Class clazz = object.getClass();\n+        reflectionAppend(object, clazz, builder, outputTransients);\n+        while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {\n+            clazz = clazz.getSuperclass();\n+            reflectionAppend(object, clazz, builder, outputTransients);\n+        }\n+        return builder.toString();\n+    }\n+\n+    /**\n+     * Registers the given object.\n+     * Used by the reflection methods to avoid infinite loops.\n+     * \n+     * @param value The object to register.\n+     */\n+    static void register(Object value) {\n+        getReflectionRegistry().add(value);\n+    }\n+\n+    /**\n+     * <p>Sets the default <code>ToStringStyle</code> to use.</p>\n+     * \n+     * @param style  the default <code>ToStringStyle</code>\n+     * @throws IllegalArgumentException if the style is <code>null</code>\n+     */\n+    public static void setDefaultStyle(ToStringStyle style) {\n+        if (style == null) {\n+            throw new IllegalArgumentException(\"The style must not be null\");\n+        }\n+        defaultStyle = style;\n+    }\n+\n+    /**\n+     * Unregisters the given object.\n+     * Used by the reflection methods to avoid infinite loops.\n+     * \n+     * @param value The object to unregister.\n+     */\n+    static void unregister(Object value) {\n+        getReflectionRegistry().remove(value);\n+    }\n+    \n+    /**\n+     * Current toString buffer\n+     */\n+    private final StringBuffer buffer;\n+    \n+    /**\n+     * The object being output\n+     */\n+    private final Object object;\n+    \n+    /**\n+     * The style of output to use\n+     */\n+    private final ToStringStyle style;\n+\n+    /**\n+     * <p>Constructor for <code>ToStringBuilder</code>.</p>\n+     *\n+     * <p>This constructor outputs using the default style set with\n+     * <code>setDefaultStyle</code>.</p>\n+     * \n+     * @param object  the Object to build a <code>toString</code> for,\n+     *  must not be <code>null</code>\n+     * @throws IllegalArgumentException  if the Object passed in is\n+     *  <code>null</code>\n+     */\n+    public ToStringBuilder(Object object) {\n+        this(object, getDefaultStyle(), null);\n+    }\n+\n+    /**\n+     * <p>Constructor for <code>ToStringBuilder</code> specifying the\n+     * output style.</p>\n+     *\n+     * <p>If the style is <code>null</code>, the default style is used.</p>\n+     * \n+     * @param object  the Object to build a <code>toString</code> for,\n+     *  must not be <code>null</code>\n+     * @param style  the style of the <code>toString</code> to create,\n+     *  may be <code>null</code>\n+     * @throws IllegalArgumentException  if the Object passed in is\n+     *  <code>null</code>\n+     */\n+    public ToStringBuilder(Object object, ToStringStyle style) {\n+        this(object, style, null);\n+    }\n+\n+    /**\n+     * <p>Constructor for <code>ToStringBuilder</code>.</p>\n+     *\n+     * <p>If the style is <code>null</code>, the default style is used.</p>\n+     *\n+     * <p>If the buffer is <code>null</code>, a new one is created.</p>\n+     * \n+     * @param object  the Object to build a <code>toString</code> for,\n+     *  must not be <code>null</code>\n+     * @param style  the style of the <code>toString</code> to create,\n+     *  may be <code>null</code>\n+     * @param buffer  the <code>StringBuffer</code> to populate, may be\n+     *  <code>null</code>\n+     * @throws IllegalArgumentException  if the Object passed in is\n+     *  <code>null</code>\n+     */\n+    public ToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer) {\n+        super();\n+        if (object == null) {\n+            throw new IllegalArgumentException(\"The object to create a toString for must not be null\");\n+        }\n+        if (style == null) {\n+            style = getDefaultStyle();\n+        }\n+        if (buffer == null) {\n+            buffer = new StringBuffer(512);\n+        }\n+        this.buffer = buffer;\n+        this.style = style;\n+        this.object = object;\n+\n+        style.appendStart(buffer, object);\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>boolean</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(boolean value) {\n+        style.append(buffer, null, value);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(boolean[] array) {\n+        style.append(buffer, null, array, null);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>byte</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(byte value) {\n+        style.append(buffer, null, value);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(byte[] array) {\n+        style.append(buffer, null, array, null);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>char</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(char value) {\n+        style.append(buffer, null, value);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(char[] array) {\n+        style.append(buffer, null, array, null);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>double</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(double value) {\n+        style.append(buffer, null, value);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(double[] array) {\n+        style.append(buffer, null, array, null);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>float</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(float value) {\n+        style.append(buffer, null, value);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(float[] array) {\n+        style.append(buffer, null, array, null);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(int value) {\n+        style.append(buffer, null, value);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>int</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(int[] array) {\n+        style.append(buffer, null, array, null);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(long value) {\n+        style.append(buffer, null, value);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(long[] array) {\n+        style.append(buffer, null, array, null);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value.</p>\n+     *\n+     * @param object  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(Object object) {\n+        style.append(buffer, null, object, null);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(Object[] array) {\n+        style.append(buffer, null, array, null);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>short</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(short value) {\n+        style.append(buffer, null, value);\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(short[] array) {\n+        style.append(buffer, null, array, null);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>boolean</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, boolean value) {\n+        style.append(buffer, fieldName, value);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append a <code>hashCode</code> for a <code>boolean</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, boolean[] array) {\n+        style.append(buffer, fieldName, array, null);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, boolean[] array, boolean fullDetail) {\n+        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>byte</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, byte value) {\n+        style.append(buffer, fieldName, value);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append a <code>hashCode</code> for a <code>byte</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, byte[] array) {\n+        style.append(buffer, fieldName, array, null);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, byte[] array, boolean fullDetail) {\n+        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>char</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, char value) {\n+        style.append(buffer, fieldName, value);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append a <code>hashCode</code> for a <code>char</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, char[] array) {\n+        style.append(buffer, fieldName, array, null);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, char[] array, boolean fullDetail) {\n+        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>double</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, double value) {\n+        style.append(buffer, fieldName, value);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append a <code>hashCode</code> for a <code>double</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, double[] array) {\n+        style.append(buffer, fieldName, array, null);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, double[] array, boolean fullDetail) {\n+        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>float</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, float value) {\n+        style.append(buffer, fieldName, value);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append a <code>hashCode</code> for a <code>float</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, float[] array) {\n+        style.append(buffer, fieldName, array, null);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, float[] array, boolean fullDetail) {\n+        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, int value) {\n+        style.append(buffer, fieldName, value);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append a <code>hashCode</code> for an <code>int</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, int[] array) {\n+        style.append(buffer, fieldName, array, null);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, int[] array, boolean fullDetail) {\n+        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, long value) {\n+        style.append(buffer, fieldName, value);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append a <code>hashCode</code> for a <code>long</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, long[] array) {\n+        style.append(buffer, fieldName, array, null);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, long[] array, boolean fullDetail) {\n+        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param object  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, Object object) {\n+        style.append(buffer, fieldName, object, null);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param object  the value to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail,\n+     *  <code>false</code> for summary info\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, Object object, boolean fullDetail) {\n+        style.append(buffer, fieldName, object, new Boolean(fullDetail));\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, Object[] array) {\n+        style.append(buffer, fieldName, array, null);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, Object[] array, boolean fullDetail) {\n+        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> an <code>short</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, short value) {\n+        style.append(buffer, fieldName, value);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append a <code>hashCode</code> for a <code>short</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, short[] array) {\n+        style.append(buffer, fieldName, array, null);\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n+     * @return this\n+     */\n+    public ToStringBuilder append(String fieldName, short[] array, boolean fullDetail) {\n+        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Appends with the same format as the default <code>Object toString()\n+     * </code> method. Appends the class name followed by \n+     * {@link System#identityHashCode(java.lang.Object)}.</p>\n+     * \n+     * @param object  the <code>Object</code> whose class name and id to output\n+     */\n+    public ToStringBuilder appendAsObjectToString(Object object) {\n+        this.getStyle().appendAsObjectToString(this.getStringBuffer(), object);\n+        return this;\n+    }\n+\n     //----------------------------------------------------------------------------\n \n     /**\n     }\n \n     /**\n-     * <p>Appends with the same format as the default <code>Object toString()\n-     * </code> method. Appends the class name followed by \n-     * {@link System#identityHashCode(java.lang.Object)}.</p>\n-     * \n-     * @param object  the <code>Object</code> whose class name and id to output\n-     */\n-    public ToStringBuilder appendAsObjectToString(Object object) {\n-        this.getStyle().appendAsObjectToString(this.getStringBuffer(), object);\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\n-     * value.</p>\n-     *\n-     * @param object  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(Object object) {\n-        style.append(buffer, null, object, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\n-     * value.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param object  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, Object object) {\n-        style.append(buffer, fieldName, object, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\n-     * value.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param object  the value to add to the <code>toString</code>\n-     * @param fullDetail  <code>true</code> for detail,\n-     *  <code>false</code> for summary info\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, Object object, boolean fullDetail) {\n-        style.append(buffer, fieldName, object, new Boolean(fullDetail));\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>long</code>\n-     * value.</p>\n-     *\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(long value) {\n-        style.append(buffer, null, value);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>long</code>\n-     * value.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, long value) {\n-        style.append(buffer, fieldName, value);\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>int</code>\n-     * value.</p>\n-     *\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(int value) {\n-        style.append(buffer, null, value);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>int</code>\n-     * value.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, int value) {\n-        style.append(buffer, fieldName, value);\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>short</code>\n-     * value.</p>\n-     *\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(short value) {\n-        style.append(buffer, null, value);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>short</code>\n-     * value.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, short value) {\n-        style.append(buffer, fieldName, value);\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>char</code>\n-     * value.</p>\n-     *\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(char value) {\n-        style.append(buffer, null, value);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>char</code>\n-     * value.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, char value) {\n-        style.append(buffer, fieldName, value);\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>byte</code>\n-     * value.</p>\n-     *\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(byte value) {\n-        style.append(buffer, null, value);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>byte</code>\n-     * value.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, byte value) {\n-        style.append(buffer, fieldName, value);\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>double</code>\n-     * value.</p>\n-     *\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(double value) {\n-        style.append(buffer, null, value);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>double</code>\n-     * value.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, double value) {\n-        style.append(buffer, fieldName, value);\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>float</code>\n-     * value.</p>\n-     *\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(float value) {\n-        style.append(buffer, null, value);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>float</code>\n-     * value.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, float value) {\n-        style.append(buffer, fieldName, value);\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>boolean</code>\n-     * value.</p>\n-     *\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(boolean value) {\n-        style.append(buffer, null, value);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>boolean</code>\n-     * value.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param value  the value to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, boolean value) {\n-        style.append(buffer, fieldName, value);\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\n-     * array.</p>\n-     *\n-     * @param array  the array to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(Object[] array) {\n-        style.append(buffer, null, array, null);\n-        return this;\n+     * <p>Gets the <code>StringBuffer</code> being populated.</p>\n+     * \n+     * @return the <code>StringBuffer</code> being populated\n+     */\n+    public StringBuffer getStringBuffer() {\n+        return buffer;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the <code>ToStringStyle</code> being used.</p>\n+     * \n+     * @return the <code>ToStringStyle</code> being used\n+     */\n+    public ToStringStyle getStyle() {\n+        return style;\n     }\n \n     /**\n     public ToStringBuilder reflectionAppendArray(Object array) {\n         style.reflectionAppendArrayDetail(buffer, null, array);\n         return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, Object[] array) {\n-        style.append(buffer, fieldName, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>Object</code>\n-     * array.</p>\n-     *\n-     * <p>A boolean parameter controls the level of detail to show.\n-     * Setting <code>true</code> will output the array in full. Setting\n-     * <code>false</code> will output a summary, typically the size of\n-     * the array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>toString</code>\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n-     *  for summary info\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, Object[] array, boolean fullDetail) {\n-        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>long</code>\n-     * array.</p>\n-     *\n-     * @param array  the array to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(long[] array) {\n-        style.append(buffer, null, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append a <code>hashCode</code> for a <code>long</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, long[] array) {\n-        style.append(buffer, fieldName, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>long</code>\n-     * array.</p>\n-     *\n-     * <p>A boolean parameter controls the level of detail to show.\n-     * Setting <code>true</code> will output the array in full. Setting\n-     * <code>false</code> will output a summary, typically the size of\n-     * the array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>toString</code>\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n-     *  for summary info\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, long[] array, boolean fullDetail) {\n-        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>int</code>\n-     * array.</p>\n-     *\n-     * @param array  the array to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(int[] array) {\n-        style.append(buffer, null, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append a <code>hashCode</code> for an <code>int</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, int[] array) {\n-        style.append(buffer, fieldName, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> an <code>int</code>\n-     * array.</p>\n-     *\n-     * <p>A boolean parameter controls the level of detail to show.\n-     * Setting <code>true</code> will output the array in full. Setting\n-     * <code>false</code> will output a summary, typically the size of\n-     * the array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>toString</code>\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n-     *  for summary info\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, int[] array, boolean fullDetail) {\n-        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>short</code>\n-     * array.</p>\n-     *\n-     * @param array  the array to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(short[] array) {\n-        style.append(buffer, null, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append a <code>hashCode</code> for a <code>short</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, short[] array) {\n-        style.append(buffer, fieldName, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>short</code>\n-     * array.</p>\n-     *\n-     * <p>A boolean parameter controls the level of detail to show.\n-     * Setting <code>true</code> will output the array in full. Setting\n-     * <code>false</code> will output a summary, typically the size of\n-     * the array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>toString</code>\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n-     *  for summary info\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, short[] array, boolean fullDetail) {\n-        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>char</code>\n-     * array.</p>\n-     *\n-     * @param array  the array to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(char[] array) {\n-        style.append(buffer, null, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append a <code>hashCode</code> for a <code>char</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, char[] array) {\n-        style.append(buffer, fieldName, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>char</code>\n-     * array.</p>\n-     *\n-     * <p>A boolean parameter controls the level of detail to show.\n-     * Setting <code>true</code> will output the array in full. Setting\n-     * <code>false</code> will output a summary, typically the size of\n-     * the array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>toString</code>\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n-     *  for summary info\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, char[] array, boolean fullDetail) {\n-        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>byte</code>\n-     * array.</p>\n-     *\n-     * @param array  the array to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(byte[] array) {\n-        style.append(buffer, null, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append a <code>hashCode</code> for a <code>byte</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, byte[] array) {\n-        style.append(buffer, fieldName, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>byte</code>\n-     * array.</p>\n-     *\n-     * <p>A boolean parameter controls the level of detail to show.\n-     * Setting <code>true</code> will output the array in full. Setting\n-     * <code>false</code> will output a summary, typically the size of\n-     * the array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>toString</code>\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n-     *  for summary info\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, byte[] array, boolean fullDetail) {\n-        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>double</code>\n-     * array.</p>\n-     *\n-     * @param array  the array to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(double[] array) {\n-        style.append(buffer, null, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append a <code>hashCode</code> for a <code>double</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, double[] array) {\n-        style.append(buffer, fieldName, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>double</code>\n-     * array.</p>\n-     *\n-     * <p>A boolean parameter controls the level of detail to show.\n-     * Setting <code>true</code> will output the array in full. Setting\n-     * <code>false</code> will output a summary, typically the size of\n-     * the array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>toString</code>\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n-     *  for summary info\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, double[] array, boolean fullDetail) {\n-        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>float</code>\n-     * array.</p>\n-     *\n-     * @param array  the array to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(float[] array) {\n-        style.append(buffer, null, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append a <code>hashCode</code> for a <code>float</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, float[] array) {\n-        style.append(buffer, fieldName, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>float</code>\n-     * array.</p>\n-     *\n-     * <p>A boolean parameter controls the level of detail to show.\n-     * Setting <code>true</code> will output the array in full. Setting\n-     * <code>false</code> will output a summary, typically the size of\n-     * the array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>toString</code>\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n-     *  for summary info\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, float[] array, boolean fullDetail) {\n-        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>boolean</code>\n-     * array.</p>\n-     *\n-     * @param array  the array to add to the <code>toString</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(boolean[] array) {\n-        style.append(buffer, null, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append a <code>hashCode</code> for a <code>boolean</code>\n-     * array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>hashCode</code>\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, boolean[] array) {\n-        style.append(buffer, fieldName, array, null);\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Append to the <code>toString</code> a <code>boolean</code>\n-     * array.</p>\n-     *\n-     * <p>A boolean parameter controls the level of detail to show.\n-     * Setting <code>true</code> will output the array in full. Setting\n-     * <code>false</code> will output a summary, typically the size of\n-     * the array.</p>\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the <code>toString</code>\n-     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n-     *  for summary info\n-     * @return this\n-     */\n-    public ToStringBuilder append(String fieldName, boolean[] array, boolean fullDetail) {\n-        style.append(buffer, fieldName, array, new Boolean(fullDetail));\n-        return this;\n-    }\n-\n-    //----------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Gets the <code>ToStringStyle</code> being used.</p>\n-     * \n-     * @return the <code>ToStringStyle</code> being used\n-     */\n-    public ToStringStyle getStyle() {\n-        return style;\n-    }\n-\n-    /**\n-     * <p>Gets the <code>StringBuffer</code> being populated.</p>\n-     * \n-     * @return the <code>StringBuffer</code> being populated\n-     */\n-    public StringBuffer getStringBuffer() {\n-        return buffer;\n     }\n \n     /**", "timestamp": 1054419769, "metainfo": ""}