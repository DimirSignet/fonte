{"sha": "12fcc396a29200c7a5f7e9062368fadf85326c0a", "log": "Applying patch from LANG-461 from Vincent Ricard to add toByte and toShort methods to NumberUtils  ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n       }\n     }\n \n+     //-----------------------------------------------------------------------\n+     /**\n+     * <p>Convert a <code>String</code> to a <code>byte</code>, returning\n+     * <code>zero</code> if the conversion fails.</p>\n+     *\n+     * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>\n+     *\n+     * <pre>\n+     *   NumberUtils.toByte(null) = 0\n+     *   NumberUtils.toByte(\"\")   = 0\n+     *   NumberUtils.toByte(\"1\")  = 1\n+     * </pre>\n+     *\n+     * @param str  the string to convert, may be null\n+     * @return the byte represented by the string, or <code>zero</code> if\n+     *  conversion fails\n+     */\n+    public static byte toByte(String str) {\n+        return toByte(str, (byte) 0);\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to a <code>byte</code>, returning a\n+     * default value if the conversion fails.</p>\n+     *\n+     * <p>If the string is <code>null</code>, the default value is returned.</p>\n+     *\n+     * <pre>\n+     *   NumberUtils.toByte(null, 1) = 1\n+     *   NumberUtils.toByte(\"\", 1)   = 1\n+     *   NumberUtils.toByte(\"1\", 0)  = 1\n+     * </pre>\n+     *\n+     * @param str  the string to convert, may be null\n+     * @param defaultValue  the default value\n+     * @return the byte represented by the string, or the default if conversion fails\n+     */\n+    public static byte toByte(String str, byte defaultValue) {\n+        if(str == null) {\n+            return defaultValue;\n+        }\n+        try {\n+            return Byte.parseByte(str);\n+        } catch (NumberFormatException nfe) {\n+            return defaultValue;\n+        }\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to a <code>short</code>, returning\n+     * <code>zero</code> if the conversion fails.</p>\n+     *\n+     * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>\n+     *\n+     * <pre>\n+     *   NumberUtils.toShort(null) = 0\n+     *   NumberUtils.toShort(\"\")   = 0\n+     *   NumberUtils.toShort(\"1\")  = 1\n+     * </pre>\n+     *\n+     * @param str  the string to convert, may be null\n+     * @return the short represented by the string, or <code>zero</code> if\n+     *  conversion fails\n+     */\n+    public static short toShort(String str) {\n+        return toShort(str, (short) 0);\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to an <code>short</code>, returning a\n+     * default value if the conversion fails.</p>\n+     *\n+     * <p>If the string is <code>null</code>, the default value is returned.</p>\n+     *\n+     * <pre>\n+     *   NumberUtils.toShort(null, 1) = 1\n+     *   NumberUtils.toShort(\"\", 1)   = 1\n+     *   NumberUtils.toShort(\"1\", 0)  = 1\n+     * </pre>\n+     *\n+     * @param str  the string to convert, may be null\n+     * @param defaultValue  the default value\n+     * @return the short represented by the string, or the default if conversion fails\n+     */\n+    public static short toShort(String str, short defaultValue) {\n+        if(str == null) {\n+            return defaultValue;\n+        }\n+        try {\n+            return Short.parseShort(str);\n+        } catch (NumberFormatException nfe) {\n+            return defaultValue;\n+        }\n+    }\n+\n     //-----------------------------------------------------------------------\n     // must handle Long, Float, Integer, Float, Short,\n     //                  BigDecimal, BigInteger and Byte\n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n     public void testStringToDoubleStringD() {\n         assertTrue(\"toDouble(String,int) 1 failed\", NumberUtils.toDouble(\"1.2345\", 5.1d) == 1.2345d);\n         assertTrue(\"toDouble(String,int) 2 failed\", NumberUtils.toDouble(\"a\", 5.0d) == 5.0d);\n+    }\n+\n+     /**\n+     * Test for {@link NumberUtils#toByte(String)}.\n+     */\n+    public void testToByteString() {\n+        assertTrue(\"toByte(String) 1 failed\", NumberUtils.toByte(\"123\") == 123);\n+        assertTrue(\"toByte(String) 2 failed\", NumberUtils.toByte(\"abc\") == 0);\n+        assertTrue(\"toByte(empty) failed\", NumberUtils.toByte(\"\") == 0);\n+        assertTrue(\"toByte(null) failed\", NumberUtils.toByte(null) == 0);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toByte(String, byte)}.\n+     */\n+    public void testToByteStringI() {\n+        assertTrue(\"toByte(String,byte) 1 failed\", NumberUtils.toByte(\"123\", (byte) 5) == 123);\n+        assertTrue(\"toByte(String,byte) 2 failed\", NumberUtils.toByte(\"12.3\", (byte) 5) == 5);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toShort(String)}.\n+     */\n+    public void testToShortString() {\n+        assertTrue(\"toShort(String) 1 failed\", NumberUtils.toShort(\"12345\") == 12345);\n+        assertTrue(\"toShort(String) 2 failed\", NumberUtils.toShort(\"abc\") == 0);\n+        assertTrue(\"toShort(empty) failed\", NumberUtils.toShort(\"\") == 0);\n+        assertTrue(\"toShort(null) failed\", NumberUtils.toShort(null) == 0);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toShort(String, short)}.\n+     */\n+    public void testToShortStringI() {\n+        assertTrue(\"toShort(String,short) 1 failed\", NumberUtils.toShort(\"12345\", (short) 5) == 12345);\n+        assertTrue(\"toShort(String,short) 2 failed\", NumberUtils.toShort(\"1234.5\", (short) 5) == 5);\n     }\n \n     public void testCreateNumber() {", "timestamp": 1245913770, "metainfo": ""}