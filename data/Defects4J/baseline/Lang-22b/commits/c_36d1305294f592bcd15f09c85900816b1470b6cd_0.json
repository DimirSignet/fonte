{"sha": "36d1305294f592bcd15f09c85900816b1470b6cd", "log": "LANG-508: Allow exception message parameters as varargs, employ String#format to format exception message, full documentation update  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Validate.java\n+++ b/src/java/org/apache/commons/lang/Validate.java\n import java.util.Map;\n \n /**\n- * <p>Assists in validating arguments.</p>\n- * \n- * <p>The class is based along the lines of JUnit. If an argument value is \n- * deemed invalid, an IllegalArgumentException is thrown. For example:</p>\n+ * <p>This class assists in validating arguments. The validation methods are \n+ * based along the following principles: \n+ * <ul>\n+ *   <li>An invalid <code>null</code> argument causes a {@link NullPointerException}.</li>\n+ *   <li>A non-<code>null</code> argument causes an {@link IllegalArgumentException}.</li>\n+ *   <li>An invalid index into an array/collection/map/string causes an {@link IndexOutOfBoundsException}.</li> \n+ * </ul>\n+ *  \n+ * <p>All exceptions messages are <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax\">format strings</a>\n+ * as defined by the Java platform. For example:</p>\n  * \n  * <pre>\n- * Validate.isTrue( i > 0, \"The value must be greater than zero: \", i);\n- * Validate.notNull( surname, \"The surname must not be null\");\n+ * Validate.isTrue(i > 0, \"The value must be greater than zero: %d\", i);\n+ * Validate.notNull(surname, \"The surname must not be %s\", null);\n  * </pre>\n- *\n+ * \n  * @author Apache Software Foundation\n  * @author <a href=\"mailto:ola.berg@arkitema.se\">Ola Berg</a>\n  * @author Gary Gregory\n  * @author Norm Deane\n+ * @author Paul Benedict\n+ * @version $Id$\n+ * @see java.lang.String#format(String, Object...)\n  * @since 2.0\n- * @version $Id$\n  */\n public class Validate {\n \n+    private static final String DEFAULT_IS_NULL_EXCEPTION_MESSAGE = \"The validated object is null\";\n+    private static final String DEFAULT_IS_TRUE_EXCEPTION_MESSAGE = \"The validated expression is false\";\n+    private static final String DEFAULT_NO_NULL_ELEMENTS_ARRAY_EXCEPTION_MESSAGE = \"The validated array contains null element at index: %d\";\n+    private static final String DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EXCEPTION_MESSAGE = \"The validated collection contains null element at index: %d\";\n+    private static final String DEFAULT_NOT_BLANK_EXCEPTION_MESSAGE = \"The validated character sequence is blank\";\n+    private static final String DEFAULT_NOT_EMPTY_ARRAY_EXCEPTION_MESSAGE = \"The validated array is empty\";\n+    private static final String DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EXCEPTION_MESSAGE = \"The validated character sequence is empty\";\n+    private static final String DEFAULT_NOT_EMPTY_COLLECTION_EXCEPTION_MESSAGE = \"The validated collection is empty\";\n+    private static final String DEFAULT_NOT_EMPTY_MAP_EXCEPTION_MESSAGE = \"The validated map is empty\";\n+    private static final String DEFAULT_VALID_INDEX_ARRAY_EXCEPTION_MESSAGE = \"The validated array index is invalid: %d\";\n+    private static final String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EXCEPTION_MESSAGE = \"The validated character sequence is invalid: %d\";\n+    private static final String DEFAULT_VALID_INDEX_COLLECTION_EXCEPTION_MESSAGE = \"The validated collection index is invalid: %d\";\n+\n     /**\n      * Constructor. This class should not normally be instantiated.\n      */\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the test result is <code>false</code>.</p>\n-     * \n-     * <p>This is used when validating according to an arbitrary boolean expression,\n-     * such as validating a primitive number or using your own custom validation \n-     * expression.</p>\n-     *\n-     * <pre>\n-     * Validate.isTrue( myObject.isOk(), \"The object is not OK: \", myObject);\n-     * </pre>\n+     * <p>Validate that the argument condition is <code>true</code>; otherwise \n+     * throwing an exception with the specified message. This method is useful when\n+     * validating according to an arbitrary boolean expression, such as validating a \n+     * primitive number or using your own custom validation expression.</p>\n+     *\n+     * <pre>Validate.isTrue(myObject.isOk(), \"The object is not OK: %s\", myObject);</pre>\n      *\n      * <p>For performance reasons, the object is passed as a separate parameter and\n-     * appended to the message string only in the case of an error.</p>\n-     * \n-     * @param expression  a boolean expression\n-     * @param message  the exception message you would like to see if the\n-     *  expression is <code>false</code>\n-     * @param value  the value to append to the message in case of error\n+     * appended to the exception message only in the case of an error.</p>\n+     * \n+     * @param expression the boolean expression to check \n+     * @param message the exception message if invalid\n+     * @param value the value to append to the message when invalid\n      * @throws IllegalArgumentException if expression is <code>false</code>\n+     * @see #isTrue(boolean)\n+     * @see #isTrue(boolean, String, long)\n+     * @see #isTrue(boolean, String, double)\n+     * @see #isTrue(boolean, String, Object...)\n      */\n     public static void isTrue(boolean expression, String message, Object value) {\n         if (expression == false) {\n-            throw new IllegalArgumentException(message + value);\n-        }\n-    }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the test result is <code>false</code>.</p>\n-     * \n-     * <p>This is used when validating according to an arbitrary boolean expression,\n-     * such as validating a primitive number or using your own custom validation \n-     * expression.</p>\n-     *\n-     * <pre>\n-     * Validate.isTrue( i > 0, \"The value must be greater than zero: \", i);\n-     * </pre>\n+            throw new IllegalArgumentException(String.format(message, value));\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate that the argument condition is <code>true</code>; otherwise \n+     * throwing an exception with the specified message. This method is useful when\n+     * validating according to an arbitrary boolean expression, such as validating a \n+     * primitive number or using your own custom validation expression.</p>\n+     *\n+     * <pre>Validate.isTrue(i > 0.0, \"The value must be greater than zero: %d\", i);</pre>\n      *\n      * <p>For performance reasons, the long value is passed as a separate parameter and\n-     * appended to the message string only in the case of an error.</p>\n-     * \n-     * @param expression  a boolean expression\n-     * @param message  the exception message you would like to see if the expression is <code>false</code>\n-     * @param value  the value to append to the message in case of error\n+     * appended to the exception message only in the case of an error.</p>\n+     * \n+     * @param expression the boolean expression to check \n+     * @param message the exception message if invalid\n+     * @param value the value to append to the message when invalid\n      * @throws IllegalArgumentException if expression is <code>false</code>\n+     * @see #isTrue(boolean)\n+     * @see #isTrue(boolean, String, double)\n+     * @see #isTrue(boolean, String, Object)\n+     * @see #isTrue(boolean, String, Object...)\n      */\n     public static void isTrue(boolean expression, String message, long value) {\n         if (expression == false) {\n-            throw new IllegalArgumentException(message + value);\n-        }\n-    }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the test result is <code>false</code>.</p>\n-     * \n-     * <p>This is used when validating according to an arbitrary boolean expression,\n-     * such as validating a primitive number or using your own custom validation \n-     * expression.</p>\n-     *\n-     * <pre>\n-     * Validate.isTrue( d > 0.0, \"The value must be greater than zero: \", d);\n-     * </pre>\n+            throw new IllegalArgumentException(String.format(message, value));\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate that the argument condition is <code>true</code>; otherwise \n+     * throwing an exception with the specified message. This method is useful when\n+     * validating according to an arbitrary boolean expression, such as validating a \n+     * primitive number or using your own custom validation expression.</p>\n+     *\n+     * <pre>Validate.isTrue(d > 0.0, \"The value must be greater than zero: %s\", d);</pre>\n      *\n      * <p>For performance reasons, the double value is passed as a separate parameter and\n-     * appended to the message string only in the case of an error.</p>\n-     * \n-     * @param expression  a boolean expression\n-     * @param message  the exception message you would like to see if the expression\n-     *  is <code>false</code>\n-     * @param value  the value to append to the message in case of error\n+     * appended to the exception message only in the case of an error.</p>\n+     * \n+     * @param expression the boolean expression to check \n+     * @param message the exception message if invalid\n+     * @param value the value to append to the message when invalid\n      * @throws IllegalArgumentException if expression is <code>false</code>\n+     * @see #isTrue(boolean)\n+     * @see #isTrue(boolean, String, long)\n+     * @see #isTrue(boolean, String, Object)\n+     * @see #isTrue(boolean, String, Object...)\n      */\n     public static void isTrue(boolean expression, String message, double value) {\n         if (expression == false) {\n-            throw new IllegalArgumentException(message + value);\n-        }\n-    }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the test result is <code>false</code>.</p>\n-     * \n-     * <p>This is used when validating according to an arbitrary boolean expression,\n-     * such as validating a primitive number or using your own custom validation \n-     * expression.</p>\n+            throw new IllegalArgumentException(String.format(message, value));\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate that the argument condition is <code>true</code>; otherwise \n+     * throwing an exception with the specified message. This method is useful when\n+     * validating according to an arbitrary boolean expression, such as validating a \n+     * primitive number or using your own custom validation expression.</p>\n      *\n      * <pre>\n-     * Validate.isTrue( (i > 0), \"The value must be greater than zero\");\n-     * Validate.isTrue( myObject.isOk(), \"The object is not OK\");\n-     * </pre>\n+     * Validate.isTrue(i >= min && i <= max, \"The value must be between %d and %d\", min, max);\n+     * Validate.isTrue(myObject.isOk(), \"The object is not okay\");</pre>\n      *\n      * <p>For performance reasons, the message string should not involve a string append,\n      * instead use the {@link #isTrue(boolean, String, Object)} method.</p>\n      * \n-     * @param expression  a boolean expression\n-     * @param message  the exception message you would like to see if the expression\n-     *  is <code>false</code>\n+     * @param expression the boolean expression to check \n+     * @param message the exception message if invalid\n+     * @param values the optional values for the formatted exception message\n      * @throws IllegalArgumentException if expression is <code>false</code>\n-     */\n-    public static void isTrue(boolean expression, String message) {\n+     * @see #isTrue(boolean)\n+     * @see #isTrue(boolean, String, long)\n+     * @see #isTrue(boolean, String, double)\n+     * @see #isTrue(boolean, String, Object)\n+     */\n+    public static void isTrue(boolean expression, String message, Object... values) {\n         if (expression == false) {\n-            throw new IllegalArgumentException(message);\n-        }\n-    }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the test result is <code>false</code>.</p>\n-     * \n-     * <p>This is used when validating according to an arbitrary boolean expression,\n-     * such as validating a primitive number or using your own custom validation \n-     * expression.</p>\n+            throw new IllegalArgumentException(String.format(message, values));\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate that the argument condition is <code>true</code>; otherwise \n+     * throwing an exception. This method is useful when validating according \n+     * to an arbitrary boolean expression, such as validating a \n+     * primitive number or using your own custom validation expression.</p>\n      *\n      * <pre>\n-     * Validate.isTrue( i > 0 );\n-     * Validate.isTrue( myObject.isOk() );\n-     * </pre>\n-     *\n-     * <p>The message in the exception is 'The validated expression is false'.</p>\n-     * \n-     * @param expression  a boolean expression\n+     * Validate.isTrue(i > 0);\n+     * Validate.isTrue(myObject.isOk());</pre>\n+     *\n+     * <p>The message of the exception is &quot;The validated expression is \n+     * false&quot;.</p>\n+     * \n+     * @param expression the boolean expression to check \n      * @throws IllegalArgumentException if expression is <code>false</code>\n+     * @see #isTrue(boolean, String, long)\n+     * @see #isTrue(boolean, String, double)\n+     * @see #isTrue(boolean, String, Object)\n+     * @see #isTrue(boolean, String, Object...)\n      */\n     public static void isTrue(boolean expression) {\n         if (expression == false) {\n-            throw new IllegalArgumentException(\"The validated expression is false\");\n+            throw new IllegalArgumentException(DEFAULT_IS_TRUE_EXCEPTION_MESSAGE);\n         }\n     }\n \n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument is <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.notNull(myObject, \"The object must not be null\");\n-     * </pre>\n-     * \n-     * @param object  the object to check is not <code>null</code>\n-     * @param message  the exception message you would like to see\n-     *  if the object is <code>null</code>\n-     * @return the input object, never <code>null</code>, for chaining\n-     * @throws IllegalArgumentException if the object is <code>null</code>\n-     */\n-    public static <T> T notNull(T object, String message) {\n+     * <p>Validate that the specified argument is not <code>null</code>; \n+     * otherwise throwing an exception.\n+     *\n+     * <pre>Validate.notNull(myObject, \"The object must not be null\");</pre>\n+     *\n+     * <p>The message of the exception is &quot;The validated object is \n+     * null&quot;.</p>\n+     * \n+     * @param <T> the object type\n+     * @param object the object to check\n+     * @return the validated object (never <code>null</code> for method chaining)\n+     * @throws NullPointerException if the object is <code>null</code>\n+     * @see #notNull(Object, String, Object...)\n+     */\n+    public static <T> T notNull(T object) {\n+        return notNull(object, DEFAULT_IS_NULL_EXCEPTION_MESSAGE);\n+    }\n+\n+    /**\n+     * <p>Validate that the specified argument is not <code>null</code>; \n+     * otherwise throwing an exception with the specified message.\n+     *\n+     * <pre>Validate.notNull(myObject, \"The object must not be null\");</pre>\n+     * \n+     * @param <T> the object type\n+     * @param object the object to check\n+     * @param message the exception message if invalid\n+     * @param values the optional values for the formatted exception message\n+     * @return the validated object (never <code>null</code> for method chaining)\n+     * @throws NullPointerException if the object is <code>null</code>\n+     * @see #notNull(Object)\n+     */\n+    public static <T> T notNull(T object, String message, Object... values) {\n         if (object == null) {\n-            throw new IllegalArgumentException(message);\n+            throw new NullPointerException(String.format(message, values));\n         }\n         return object;\n     }\n \n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument is <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.notNull(myObject);\n-     * </pre>\n-     *\n-     * <p>The message in the exception is 'The validated object is null'.</p>\n-     * \n-     * @param object  the object to check is not <code>null</code>\n-     * @return the input object, never <code>null</code>, for chaining\n-     * @throws IllegalArgumentException if the object is <code>null</code>\n-     */\n-    public static <T> T notNull(T object) {\n-        return notNull(object, \"The validated object is null\");\n-    }\n-\n     // notEmpty array\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument array is empty (<code>null</code> or no elements).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myArray, \"The array must not be empty\");\n-     * </pre>\n-     * \n-     * @param array  the array to check is not empty\n-     * @param message  the exception message you would like to see if the array is empty\n-     * @return the input array, never <code>null</code> or empty, for chaining\n+     * <p>Validate that the specified argument array is neither <code>null</code> \n+     * nor a length of zero (no elements); otherwise throwing an exception \n+     * with the specified message.\n+     *\n+     * <pre>Validate.notEmpty(myArray, \"The array must not be empty\");</pre>\n+     * \n+     * @param <T> the array type\n+     * @param array the array to check\n+     * @param message the exception message if invalid\n+     * @return the validated array (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the array is <code>null</code>\n      * @throws IllegalArgumentException if the array is empty\n-     */\n-    public static <T> T[] notEmpty(T[] array, String message) {\n-        if (array == null || array.length == 0) {\n-            throw new IllegalArgumentException(message);\n+     * @see #notEmpty(Object[])\n+     */\n+    public static <T> T[] notEmpty(T[] array, String message, Object... values) {\n+        if (array == null) {\n+            throw new NullPointerException(String.format(message, values));\n+        }\n+        if (array.length == 0) {\n+            throw new IllegalArgumentException(String.format(message, values));\n         }\n         return array;\n     }\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument array is empty (<code>null</code> or no elements).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myArray);\n-     * </pre>\n-     *\n-     * <p>The message in the exception is 'The validated array is empty'.\n-     * \n-     * @param array  the array to check is not empty\n-     * @return the input array, never <code>null</code> or empty, for chaining\n+     * <p>Validate that the specified argument array is neither <code>null</code> \n+     * nor a length of zero (no elements); otherwise throwing an exception. \n+     *\n+     * <pre>Validate.notEmpty(myArray);</pre>\n+     * \n+     * <p>The message in the exception is &quot;The validated array is \n+     * empty&quot;.\n+     * \n+     * @param <T> the array type\n+     * @param array the array to check\n+     * @return the validated array (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the array is <code>null</code>\n      * @throws IllegalArgumentException if the array is empty\n+     * @see #notEmpty(Object[], String, Object...)\n      */\n     public static <T> T[] notEmpty(T[] array) {\n-        return notEmpty(array, \"The validated array is empty\");\n+        return notEmpty(array, DEFAULT_NOT_EMPTY_ARRAY_EXCEPTION_MESSAGE);\n     }\n \n     // notEmpty collection\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument Collection is empty (<code>null</code> or no elements).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myCollection, \"The collection must not be empty\");\n-     * </pre>\n-     * \n-     * @param collection  the collection to check is not empty\n-     * @param message  the exception message you would like to see if the collection is empty\n-     * @return the input collection, never <code>null</code> or empty, for chaining\n+     * <p>Validate that the specified argument collection is neither <code>null</code> \n+     * nor a size of zero (no elements); otherwise throwing an exception \n+     * with the specified message.\n+     *\n+     * <pre>Validate.notEmpty(myCollection, \"The collection must not be empty\");</pre>\n+     * \n+     * @param <T> the collection type\n+     * @param collection the collection to check\n+     * @param message the exception message if invalid\n+     * @return the validated collection (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the collection is <code>null</code>\n      * @throws IllegalArgumentException if the collection is empty\n-     */\n-    public static <T extends Collection<?>> T notEmpty(T collection, String message) {\n-        if (collection == null || collection.size() == 0) {\n-            throw new IllegalArgumentException(message);\n+     * @see #notEmpty(Object[])\n+     */\n+    public static <T extends Collection<?>> T notEmpty(T collection, String message, Object... values) {\n+        if (collection == null) {\n+            throw new NullPointerException(String.format(message, values));\n+        }\n+        if (collection.size() == 0) {\n+            throw new IllegalArgumentException(String.format(message, values));\n         }\n         return collection;\n     }\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument Collection is empty (<code>null</code> or no elements).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myCollection);\n-     * </pre>\n-     *\n-     * <p>The message in the exception is 'The validated collection is empty'.</p>\n-     * \n-     * @param collection  the collection to check is not empty\n-     * @return the input collection, never <code>null</code> or empty, for chaining\n+     * <p>Validate that the specified argument collection is neither <code>null</code> \n+     * nor a size of zero (no elements); otherwise throwing an exception. \n+     *\n+     * <pre>Validate.notEmpty(myCollection);</pre>\n+     * \n+     * <p>The message in the exception is &quot;The validated collection is \n+     * empty&quot;.</p>\n+     * \n+     * @param <T> the collection type\n+     * @param collection the collection to check\n+     * @return the validated collection (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the collection is <code>null</code>\n      * @throws IllegalArgumentException if the collection is empty\n+     * @see #notEmpty(Collection, String, Object...)\n      */\n     public static <T extends Collection<?>> T notEmpty(T collection) {\n-        return notEmpty(collection, \"The validated collection is empty\");\n+        return notEmpty(collection, DEFAULT_NOT_EMPTY_COLLECTION_EXCEPTION_MESSAGE);\n     }\n \n     // notEmpty map\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument Map is empty (<code>null</code> or no elements).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myMap, \"The map must not be empty\");\n-     * </pre>\n-     * \n-     * @param map  the map to check is not empty\n-     * @param message  the exception message you would like to see if the map is empty\n-     * @return the input map, never <code>null</code> or empty, for chaining\n+     * <p>Validate that the specified argument map is neither <code>null</code> \n+     * nor a size of zero (no elements); otherwise throwing an exception \n+     * with the specified message.\n+     *\n+     * <pre>Validate.notEmpty(myMap, \"The map must not be empty\");</pre>\n+     * \n+     * @param <T> the map type\n+     * @param map the map to check\n+     * @param message the exception message if invalid\n+     * @return the validated map (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the map is <code>null</code>\n      * @throws IllegalArgumentException if the map is empty\n-     */\n-    public static <T extends Map<?, ?>> T notEmpty(T map, String message) {\n-        if (map == null || map.size() == 0) {\n-            throw new IllegalArgumentException(message);\n+     * @see #notEmpty(Object[])\n+     */\n+    public static <T extends Map<?, ?>> T notEmpty(T map, String message, Object... values) {\n+        if (map == null) {\n+            throw new NullPointerException(String.format(message, values));\n+        }\n+        if (map.size() == 0) {\n+            throw new IllegalArgumentException(String.format(message, values));\n         }\n         return map;\n     }\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument Map is empty (<code>null</code> or no elements).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myMap);\n-     * </pre>\n-     *\n-     * <p>The message in the exception is 'The validated map is empty'.</p>\n-     * \n-     * @param map  the map to check is not empty\n-     * @return the input map, never <code>null</code> or empty, for chaining\n+     * <p>Validate that the specified argument map is neither <code>null</code> \n+     * nor a size of zero (no elements); otherwise throwing an exception. \n+     *\n+     * <pre>Validate.notEmpty(myMap);</pre>\n+     * \n+     * <p>The message in the exception is &quot;The validated map is \n+     * empty&quot;.</p>\n+     * \n+     * @param <T> the map type\n+     * @param map the map to check\n+     * @return the validated map (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the map is <code>null</code>\n      * @throws IllegalArgumentException if the map is empty\n+     * @see #notEmpty(Map, String, Object...)\n      */\n     public static <T extends Map<?, ?>> T notEmpty(T map) {\n-        return notEmpty(map, \"The validated map is empty\");\n+        return notEmpty(map, DEFAULT_NOT_EMPTY_MAP_EXCEPTION_MESSAGE);\n     }\n \n     // notEmpty string\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument String is empty (<code>null</code> or zero length).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myString, \"The string must not be empty\");\n-     * </pre>\n-     * \n-     * @param string  the string to check is not empty\n-     * @param message  the exception message you would like to see if the string is empty\n-     * @return the input string, never <code>null</code> or empty, for chaining\n-     * @throws IllegalArgumentException if the string is empty\n-     */\n-    public static <T extends CharSequence> T notEmpty(T string, String message) {\n-        if (string == null || string.length() == 0) {\n-            throw new IllegalArgumentException(message);\n-        }\n-        return string;\n-    }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument String is empty (<code>null</code> or zero length).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myString);\n-     * </pre>\n-     *\n-     * <p>The message in the exception is 'The validated string is empty'.</p>\n-     * \n-     * @param string  the string to check is not empty\n-     * @return the input string, never <code>null</code> or empty, for chaining\n-     * @throws IllegalArgumentException if the string is empty\n-     */\n-    public static <T extends CharSequence> T notEmpty(T string) {\n-        return notEmpty(string, \"The validated string is empty\");\n+     * <p>Validate that the specified argument character sequence is \n+     * neither <code>null</code> nor a length of zero (no characters); \n+     * otherwise throwing an exception with the specified message.\n+     *\n+     * <pre>Validate.notEmpty(myString, \"The string must not be empty\");</pre>\n+     * \n+     * @param <T> the character sequence type\n+     * @param chars the character sequence to check\n+     * @param message the exception message if invalid\n+     * @return the validated character sequence (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the character sequence is <code>null</code>\n+     * @throws IllegalArgumentException if the character sequence is empty\n+     * @see #notEmpty(CharSequence)\n+     */\n+    public static <T extends CharSequence> T notEmpty(T chars, String message, Object... values) {\n+        if (chars == null) {\n+            throw new NullPointerException(String.format(message, values));\n+        }\n+        if (chars.length() == 0) {\n+            throw new IllegalArgumentException(String.format(message, values));\n+        }\n+        return chars;\n+    }\n+\n+    /**\n+     * <p>Validate that the specified argument character sequence is \n+     * neither <code>null</code> nor a length of zero (no characters); \n+     * otherwise throwing an exception with the specified message.\n+     *\n+     * <pre>Validate.notEmpty(myString);</pre>\n+     * \n+     * <p>The message in the exception is &quot;The validated \n+     * character sequence is empty&quot;.</p>\n+     * \n+     * @param <T> the character sequence type\n+     * @param chars the character sequence to check\n+     * @return the validated character sequence (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the character sequence is <code>null</code>\n+     * @throws IllegalArgumentException if the character sequence is empty\n+     * @see #notEmpty(CharSequence, String, Object...)\n+     */\n+    public static <T extends CharSequence> T notEmpty(T chars) {\n+        return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EXCEPTION_MESSAGE);\n     }\n \n     // notBlank string\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument String is blank (<code>null</code>, empty or whitespace).</p>\n-     *\n-     * <pre>\n-     * Validate.notBlank(myString, \"The string must not be blank\");\n-     * </pre>\n-     *\n-     * @param string  the string to check is not blank\n-     * @param message  the exception message you would like to see if the string is blank\n-     * @return the input string, never <code>null</code> or blank, for chaining\n-     * @throws IllegalArgumentException if the string is blank\n-     * @see StringUtils#isBlank(CharSequence)\n-     */\n-    public static <T extends CharSequence> T notBlank(T string, String message) {\n-        if (StringUtils.isBlank(string)) {\n-            throw new IllegalArgumentException(message);\n-        }\n-        return string;\n-    }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument String is blank (<code>null</code>, empty or whitespace).</p>\n-     *\n-     * <pre>\n-     * Validate.notBlank(myString);\n-     * </pre>\n-     *\n-     * <p>The message in the exception is 'The validated string is blank'.</p>\n-     *\n-     * @param string  the string to check is not blank\n-     * @return the input string, never <code>null</code> or blank, for chaining\n-     * @throws IllegalArgumentException if the string is blank\n-     * @see StringUtils#isBlank(CharSequence)\n-     */\n-    public static <T extends CharSequence> T notBlank(T string) {\n-        return notBlank(string, \"The validated string is blank\");\n+     * <p>Validate that the specified argument character sequence is \n+     * neither <code>null</code>, a length of zero (no characters), empty\n+     * nor whitespace; otherwise throwing an exception with the specified \n+     * message.\n+     *\n+     * <pre>Validate.notBlank(myString, \"The string must not be blank\");</pre>\n+     * \n+     * @param <T> the character sequence type\n+     * @param chars the character sequence to check\n+     * @param message the exception message if invalid\n+     * @return the validated character sequence (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the character sequence is <code>null</code>\n+     * @throws IllegalArgumentException if the character sequence is blank\n+     * @see #notBlank(CharSequence)\n+     */\n+    public static <T extends CharSequence> T notBlank(T chars, String message, Object... values) {\n+        if (chars == null) {\n+            throw new NullPointerException(String.format(message, values));\n+        }\n+        if (StringUtils.isBlank(chars)) {\n+            throw new IllegalArgumentException(String.format(message, values));\n+        }\n+        return chars;\n+    }\n+\n+    /**\n+     * <p>Validate that the specified argument character sequence is \n+     * neither <code>null</code>, a length of zero (no characters), empty\n+     * nor whitespace; otherwise throwing an exception.\n+     *\n+     * <pre>Validate.notBlank(myString);</pre>\n+     * \n+     * <p>The message in the exception is &quot;The validated character \n+     * sequence is blank&quot;.</p>\n+     * \n+     * @param <T> the character sequence type\n+     * @param chars the character sequence to check\n+     * @return the validated character sequence (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the character sequence is <code>null</code>\n+     * @throws IllegalArgumentException if the character sequence is blank\n+     * @see #notBlank(CharSequence, String, Object...)\n+     */\n+    public static <T extends CharSequence> T notBlank(T chars) {\n+        return notBlank(chars, DEFAULT_NOT_BLANK_EXCEPTION_MESSAGE);\n     }\n \n     // notNullElements array\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument array has <code>null</code> elements or is\n-     * <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.noNullElements(myArray, \"The array must not contain null elements\");\n-     * </pre>\n-     * \n-     * <p>If the array is null then the message in the exception is 'The validated object is null'.</p>\n-     *\n-     * @param array  the array to check\n-     * @param message  the exception message if the array has\n-     *  <code>null</code> elements\n-     * @return the validated input array, never <code>null</code>, for chaining\n-     * @throws IllegalArgumentException if the array has <code>null</code>\n-     *  elements or is <code>null</code>\n-     */\n-    public static <T> T[] noNullElements(T[] array, String message) {\n+     * <p>Validate that the specified argument array is neither \n+     * <code>null</code> nor contains any elements that are <code>null</code>;\n+     * otherwise throwing an exception with the specified message.\n+     *\n+     * <pre>Validate.noNullElements(myArray, \"The array contain null at position %d\");</pre>\n+     * \n+     * <p>If the array is <code>null</code>, then the message in the exception \n+     * is &quot;The validated object is null&quot;.</p>\n+     * \n+     * <p>If the array has a <code>null</code> element, then the iteration \n+     * index of the invalid element is appended to the <code>values</code> \n+     * argument.</p>\n+     * \n+     * @param <T> the array type\n+     * @param array the array to check\n+     * @return the validated array (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the array is <code>null</code>\n+     * @throws IllegalArgumentException if an element is <code>null</code>\n+     * @see #noNullElements(Object[])\n+     */\n+    public static <T> T[] noNullElements(T[] array, String message, Object... values) {\n         Validate.notNull(array);\n         for (int i = 0; i < array.length; i++) {\n             if (array[i] == null) {\n-                throw new IllegalArgumentException(message);\n+                Object[] values2 = ArrayUtils.add(values, i);\n+                throw new IllegalArgumentException(String.format(message, values2));\n             }\n         }\n         return array;\n     }\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument array has <code>null</code> elements or is\n-     * <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.noNullElements(myArray);\n-     * </pre>\n-     *\n-     * <p>If the array has a null element the message in the exception is\n-     * 'The validated array contains null element at index: '.</p>\n-     *\n-     * <p>If the array is null then the message in the exception is 'The validated object is null'.</p>\n-     * \n-     * @param array  the array to check\n-     * @return the validated input array, never <code>null</code>, for chaining\n-     * @throws IllegalArgumentException if the array has <code>null</code>\n-     *  elements or is <code>null</code>\n+     * <p>Validate that the specified argument array is neither \n+     * <code>null</code> nor contains any elements that are <code>null</code>;\n+     * otherwise throwing an exception.\n+     *\n+     * <pre>Validate.noNullElements(myArray);</pre>\n+     * \n+     * <p>If the array is <code>null</code>, then the message in the exception \n+     * is &quot;The validated object is null&quot;.</p>\n+     * \n+     * <p>If the array has a <code>null</code> element, then the message in the\n+     * exception is &quot;The validated array contains null element at index: \n+     * &quot followed by the index.</p>\n+     *\n+     * @param <T> the array type\n+     * @param array the array to check\n+     * @return the validated array (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the array is <code>null</code>\n+     * @throws IllegalArgumentException if an element is <code>null</code>\n+     * @see #noNullElements(Object[], String, Object...)\n      */\n     public static <T> T[] noNullElements(T[] array) {\n-        Validate.notNull(array);\n-        for (int i = 0; i < array.length; i++) {\n-            if (array[i] == null) {\n-                throw new IllegalArgumentException(\"The validated array contains null element at index: \" + i);\n-            }\n-        }\n-        return array;\n+        return noNullElements(array, DEFAULT_NO_NULL_ELEMENTS_ARRAY_EXCEPTION_MESSAGE);\n     }\n \n     // notNullElements collection\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument Collection has <code>null</code> elements or is\n-     * <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.noNullElements(myCollection, \"The collection must not contain null elements\");\n-     * </pre>\n-     *\n-     * <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>\n-     * \n-     * @param collection  the collection to check\n-     * @param message  the exception message if the collection has\n-     *  <code>null</code> elements\n-     * @return the validated input collection, never <code>null</code>, for chaining\n-     * @throws IllegalArgumentException if the collection has\n-     *  <code>null</code> elements or is <code>null</code>\n-     */\n-    public static <T extends Collection<?>> T noNullElements(T collection, String message) {\n-        Validate.notNull(collection);\n-        for (Iterator<?> it = collection.iterator(); it.hasNext();) {\n-            if (it.next() == null) {\n-                throw new IllegalArgumentException(message);\n-            }\n-        }\n-        return collection;\n-    }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument Collection has <code>null</code> elements or is\n-     * <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.noNullElements(myCollection);\n-     * </pre>\n-     *\n-     * <p>The message in the exception is 'The validated collection contains null element at index: '.</p>\n-     *\n-     * <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>\n-     * \n-     * @param collection  the collection to check\n-     * @return the validated input collection, never <code>null</code>, for chaining\n-     * @throws IllegalArgumentException if the collection has\n-     *  <code>null</code> elements or is <code>null</code>\n-     */\n-    public static <T extends Collection<?>> T noNullElements(T collection) {\n+     * <p>Validate that the specified argument collection is neither \n+     * <code>null</code> nor contains any elements that are <code>null</code>;\n+     * otherwise throwing an exception with the specified message.\n+     *\n+     * <pre>Validate.noNullElements(myCollection, \"The collection contains null at position %d\");</pre>\n+     * \n+     * <p>If the collection is <code>null</code>, then the message in the exception \n+     * is &quot;The validated object is null&quot;.</p>\n+     * \n+     * <p>If the collection has a <code>null</code> element, then the iteration \n+     * index of the invalid element is appended to the <code>values</code> \n+     * argument.</p>\n+     *\n+     * @param <T> the collection type\n+     * @param collection the collection to check\n+     * @return the validated collection (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the array is <code>null</code>\n+     * @throws IllegalArgumentException if an element is <code>null</code>\n+     * @see #noNullElements(Collection, String, Object...)\n+     */\n+    public static <T extends Collection<?>> T noNullElements(T collection, String message, Object... values) {\n         Validate.notNull(collection);\n         int i = 0;\n         for (Iterator<?> it = collection.iterator(); it.hasNext(); i++) {\n             if (it.next() == null) {\n-                throw new IllegalArgumentException(\"The validated collection contains null element at index: \" + i);\n+                Object[] values2 = ArrayUtils.addAll(values, i);\n+                throw new IllegalArgumentException(String.format(message, values2));\n             }\n         }\n         return collection;\n     }\n \n+    /**\n+     * <p>Validate that the specified argument collection is neither \n+     * <code>null</code> nor contains any elements that are <code>null</code>;\n+     * otherwise throwing an exception.\n+     *\n+     * <pre>Validate.noNullElements(myCollection);</pre>\n+     * \n+     * <p>If the collection is <code>null</code>, then the message in the exception \n+     * is &quot;The validated object is null&quot;.</p>\n+     * \n+     * <p>If the array has a <code>null</code> element, then the message in the\n+     * exception is &quot;The validated collection contains null element at index: \n+     * &quot followed by the index.</p>\n+     *\n+     * @param <T> the collection type\n+     * @param collection the collection to check\n+     * @return the validated collection (never <code>null</code> method for chaining)\n+     * @throws NullPointerException if the array is <code>null</code>\n+     * @throws IllegalArgumentException if an element is <code>null</code>\n+     * @see #noNullElements(Collection, String, Object...)\n+     */\n+    public static <T extends Collection<?>> T noNullElements(T collection) {\n+        return noNullElements(collection, DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EXCEPTION_MESSAGE);\n+    }\n+\n     // validIndex array\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the\n-     * index for the argument array is invalid or if the array is <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.validIndex(myArray, 2, \"The array index is invalid: \");\n-     * </pre>\n-     * \n-     * <p>If the array is null then the message in the exception is 'The validated object is null'.</p>\n-     *\n-     * @param array  the array to check, not null\n-     * @param message  the exception message if the array index is invalid\n-     * @return the validated input array, never <code>null</code>, for chaining\n-     * @throws IllegalArgumentException if the array index is invalid or null\n-     */\n-    public static <T> T[] validIndex(T[] array, int index, String message) {\n+     * <p>Validates that the index is within the bounds of the argument \n+     * array; otherwise throwing an exception with the specified message.</p>\n+     *\n+     * <pre>Validate.validIndex(myArray, 2, \"The array index is invalid: \");</pre>\n+     * \n+     * <p>If the array is <code>null</code>, then the message of the exception \n+     * is &quot;The validated object is null&quot;.</p>\n+     * \n+     * @param <T> the array type\n+     * @param array the array to check\n+     * @param index the index\n+     * @param message the exception message if invalid\n+     * @return the validated array (never <code>null</code> for method chaining)\n+     * @throws NullPointerException if the array is <code>null</code>\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     * @see #validIndex(Object[], int)\n+     */\n+    public static <T> T[] validIndex(T[] array, int index, String message, Object... values) {\n         Validate.notNull(array);\n         if (index < 0 || index >= array.length) {\n-            throw new IllegalArgumentException(message + index);\n+            throw new IndexOutOfBoundsException(String.format(message, values));\n         }\n         return array;\n     }\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the\n-     * index for the argument array is invalid or if the array is <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.validIndex(myArray, 2);\n-     * </pre>\n-     *\n-     * <p>If the array index is invalid the message in the exception is\n-     * 'The validated array index is invalid: ' followed by the index.</p>\n-     *\n-     * <p>If the array is null then the message in the exception is 'The validated object is null'.</p>\n-     * \n-     * @param array  the array to check, not null\n-     * @return the validated input array, never <code>null</code>, for chaining\n-     * @throws IllegalArgumentException if the array index is invalid or null\n+     * <p>Validates that the index is within the bounds of the argument \n+     * array; otherwise throwing an exception.</p>\n+     *\n+     * <pre>Validate.validIndex(myArray, 2);</pre>\n+     *\n+     * <p>If the array is <code>null</code>, then the message of the exception\n+     * is &quot;The validated object is null&quot;.</p>\n+     * \n+     * <p>If the index is invalid, then the message of the exception is \n+     * &quot;The validated array index is invalid: &quot; followed by the \n+     * index.</p>\n+     * \n+     * @param <T> the array type\n+     * @param array the array to check\n+     * @param index the index\n+     * @return the validated array (never <code>null</code> for method chaining)\n+     * @throws NullPointerException if the array is <code>null</code>\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     * @see #validIndex(Object[], int, String, Object...)\n      */\n     public static <T> T[] validIndex(T[] array, int index) {\n-        return validIndex(array, index, \"The validated array index is invalid: \");\n+        return validIndex(array, index, DEFAULT_VALID_INDEX_ARRAY_EXCEPTION_MESSAGE, index);\n     }\n \n     // validIndex collection\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the\n-     * index for the argument collection is invalid or if the collection is <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.validIndex(myCollection, 2, \"The collection index is invalid: \");\n-     * </pre>\n-     * \n-     * <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>\n-     *\n-     * @param coll  the collection to check, not null\n-     * @param message  the exception message if the collection index is invalid\n-     * @return the validated input collection, never <code>null</code>, for chaining\n-     * @throws IllegalArgumentException if the collection index is invalid or null\n-     */\n-    public static <T extends Collection<?>> T validIndex(T coll, int index, String message) {\n-        Validate.notNull(coll);\n-        if (index < 0 || index >= coll.size()) {\n-            throw new IllegalArgumentException(message + index);\n-        }\n-        return coll;\n-    }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the\n-     * index for the argument collection is invalid or if the collection is <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.validIndex(myCollection, 2);\n-     * </pre>\n-     *\n-     * <p>If the collection index is invalid the message in the exception is\n-     * 'The validated collection index is invalid: ' followed by the index.</p>\n-     *\n-     * <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>\n-     * \n-     * @param coll  the collection to check, not null\n-     * @return the validated input collection, never <code>null</code>, for chaining\n-     * @throws IllegalArgumentException if the collection index is invalid or null\n-     */\n-    public static <T extends Collection<?>> T validIndex(T coll, int index) {\n-        return validIndex(coll, index, \"The validated collection index is invalid: \");\n+     * <p>Validates that the index is within the bounds of the argument \n+     * collection; otherwise throwing an exception with the specified message.</p>\n+     *\n+     * <pre>Validate.validIndex(myCollection, 2, \"The collection index is invalid: \");</pre>\n+     * \n+     * <p>If the collection is <code>null</code>, then the message of the \n+     * exception is &quot;The validated object is null&quot;.</p>\n+     *\n+     * @param <T> the collection type\n+     * @param collection the collection to check\n+     * @param index the index\n+     * @param message the exception message if invalid\n+     * @return the validated collection (never <code>null</code> for chaining)\n+     * @throws NullPointerException if the collection is <code>null</code>\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     * @see #validIndex(Collection, int)\n+     */\n+    public static <T extends Collection<?>> T validIndex(T collection, int index, String message, Object... values) {\n+        Validate.notNull(collection);\n+        if (index < 0 || index >= collection.size()) {\n+            throw new IndexOutOfBoundsException(String.format(message, values));\n+        }\n+        return collection;\n+    }\n+\n+    /**\n+     * <p>Validates that the index is within the bounds of the argument \n+     * collection; otherwise throwing an exception.</p>\n+     *\n+     * <pre>Validate.validIndex(myCollection, 2);</pre>\n+     *\n+     * <p>If the index is invalid, then the message of the exception \n+     * is &quot;The validated collection index is invalid: &quot; \n+     * followed by the index.</p>\n+     * \n+     * @param <T> the collection type\n+     * @param collection the collection to check\n+     * @param index the index\n+     * @return the validated collection (never <code>null</code> for method chaining)\n+     * @throws NullPointerException if the collection is <code>null</code>\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     * @see #validIndex(Collection, int, String, Object...)\n+     */\n+    public static <T extends Collection<?>> T validIndex(T collection, int index) {\n+        return validIndex(collection, index, DEFAULT_VALID_INDEX_COLLECTION_EXCEPTION_MESSAGE, index);\n     }\n \n     // validIndex string\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the\n-     * index for the argument character sequence (including String and StringBuffer)\n-     * is invalid or if the string is <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.validIndex(myStr, 2, \"The string index is invalid: \");\n-     * </pre>\n-     * \n-     * <p>If the string is null then the message in the exception is 'The validated object is null'.</p>\n-     *\n-     * @param str  the string to check, not null\n-     * @param message  the exception message if the string index is invalid\n-     * @return the validated input string, never <code>null</code>, for chaining\n-     * @throws IllegalArgumentException if the string index is invalid or null\n-     */\n-    public static <T extends CharSequence> T validIndex(T str, int index, String message) {\n-        Validate.notNull(str);\n-        if (index < 0 || index >= str.length()) {\n-            throw new IllegalArgumentException(message + index);\n-        }\n-        return str;\n-    }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the\n-     * index for the argument character sequence (including String and StringBuffer)\n-     * is invalid or if the string is <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.validIndex(myStr, 2);\n-     * </pre>\n-     *\n-     * <p>If the string index is invalid the message in the exception is\n-     * 'The validated string index is invalid: ' followed by the index.</p>\n-     *\n-     * <p>If the string is null then the message in the exception is 'The validated object is null'.</p>\n-     * \n-     * @param str  the string to check, not null\n-     * @return the validated input string, never <code>null</code>, for chaining\n-     * @throws IllegalArgumentException if the string index is invalid or null\n-     */\n-    public static <T extends CharSequence> T validIndex(T str, int index) {\n-        return validIndex(str, index, \"The validated string index is invalid: \");\n+     * <p>Validates that the index is within the bounds of the argument \n+     * character sequence; otherwise throwing an exception with the \n+     * specified message.</p>\n+     *\n+     * <pre>Validate.validIndex(myStr, 2, \"The string index is invalid: \");</pre>\n+     * \n+     * <p>If the character sequence is <code>null</code>, then the message \n+     * of the exception is &quot;The validated object is null&quot;.</p>\n+     *\n+     * @param <T> the character sequence type\n+     * @param chars the character sequence to check\n+     * @param index the index\n+     * @param message the exception message if invalid\n+     * @return the validated character sequence (never <code>null</code> for method chaining)\n+     * @throws NullPointerException if the character sequence is <code>null</code>\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     * @see #validIndex(CharSequence, int)\n+     */\n+    public static <T extends CharSequence> T validIndex(T chars, int index, String message, Object... values) {\n+        Validate.notNull(chars);\n+        if (index < 0 || index >= chars.length()) {\n+            throw new IndexOutOfBoundsException(String.format(message, values));\n+        }\n+        return chars;\n+    }\n+\n+    /**\n+     * <p>Validates that the index is within the bounds of the argument \n+     * character sequence; otherwise throwing an exception.</p>\n+     * \n+     * <pre>Validate.validIndex(myStr, 2);</pre>\n+     *\n+     * <p>If the character sequence is <code>null</code>, then the message \n+     * of the exception is &quot;The validated object is \n+     * null&quot;.</p>\n+     * \n+     * <p>If the index is invalid, then the message of the exception \n+     * is &quot;The validated character sequence index is invalid: &quot; \n+     * followed by the index.</p>\n+     * \n+     * @param <T> the character sequence type\n+     * @param chars the character sequence to check\n+     * @param index the index\n+     * @return the validated character sequence (never <code>null</code> for method chaining)\n+     * @throws NullPointerException if the character sequence is <code>null</code>\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     * @see #validIndex(CharSequence, int, String, Object...)\n+     */\n+    public static <T extends CharSequence> T validIndex(T chars, int index) {\n+        return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EXCEPTION_MESSAGE, index);\n     }\n \n }", "timestamp": 1259476223, "metainfo": ""}