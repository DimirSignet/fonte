{"sha": "0da950654112a5185e2601bf44be2b6ffb17c169", "log": "Fix CharSetUtils to not throw NPE all the time   ", "commit": "\n--- a/src/java/org/apache/commons/lang/CharSet.java\n+++ b/src/java/org/apache/commons/lang/CharSet.java\n import java.util.List;\n \n /**\n- * <p>A set of characters. You can iterate over the characters in the\n- * set.</p>\n+ * <p>A set of characters.</p>\n  *\n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: CharSet.java,v 1.8 2003/03/23 17:59:09 scolebourne Exp $\n+ * @version $Id: CharSet.java,v 1.9 2003/07/31 21:32:47 scolebourne Exp $\n  */\n public class CharSet {\n \n      *\n      * <p>Use the factory method\n      * {@link CharSetUtils#evaluateSet(java.lang.String[])}.</p>\n+     */\n+    protected CharSet(String set) {\n+        add(set);\n+    }\n+\n+    /**\n+     * <p>Restricted constructor.</p>\n      *\n-     * @throws NullPointerException if any of set[i] is <code>null</code>\n-     *  or if set is <code>null</code>\n+     * <p>Use the factory method\n+     * {@link CharSetUtils#evaluateSet(java.lang.String[])}.</p>\n+     *\n+     * @throws NullPointerException if set is <code>null</code>\n      */\n     protected CharSet(String[] set) {\n         int sz = set.length;\n      * <p>Add a set definition string to the <code>CharSet</code>.</p>\n      * \n      * @param str  set definition string\n-     * @throws NullPointerException if <code>str</code> is <code>null</code>\n      */\n     protected void add(String str) {\n+        if (str == null) {\n+            return;\n+        }\n         int sz = str.length();\n         CharRange range = null;\n \n-        if(\"-\".equals(str)) {\n+        if (\"-\".equals(str)) {\n             range = new CharRange('-');\n             set.add(range);\n             return;\n-        } \n+        }\n \n         boolean end = false;\n         boolean negated = false;\n-        for(int i=0; i<sz; i++) {\n+        for (int i = 0; i < sz; i++) {\n             char ch = str.charAt(i);\n-            if(ch == '-') {\n+            if (ch == '-') {\n                 end = true;\n                 continue;\n             }\n-            if(end) {\n+            if (end) {\n                 range.setEnd(ch);\n                 continue;\n             }\n-            if(ch == '^') {\n+            if (ch == '^') {\n                 negated = true;\n                 continue;\n             }\n--- a/src/java/org/apache/commons/lang/CharSetUtils.java\n+++ b/src/java/org/apache/commons/lang/CharSetUtils.java\n /**\n  * <p>Numerous routines to manipulate a <code>CharSet</code>.</p>\n  *\n- * <p>This class tries to handle <code>null</code> input gracefully.\n- * An exception will generally not be thrown for a <code>null</code> input.\n+ * <p>This class handles <code>null</code> input gracefully.\n+ * An exception will not be thrown for a <code>null</code> input.\n  * Each method documents its behaviour in more detail.</p>\n  * \n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: CharSetUtils.java,v 1.17 2003/07/31 20:38:26 scolebourne Exp $\n+ * @version $Id: CharSetUtils.java,v 1.18 2003/07/31 21:32:47 scolebourne Exp $\n  */\n public class CharSetUtils {\n \n     public CharSetUtils() {\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Creates a <code>CharSetUtils</code> object which allows a certain amount of\n      * set logic to be performed.</p>\n      *   a set in itself due to the size of that set in unicode.</li>\n      *  <li>&quot;ej-m&quot; implies e,j->m. e,j,k,l,m.</li>\n      * </ul>\n-     *\n-     * @param set  the set, must not be null\n-     * @return a CharSet instance\n-     * @throws NullPointerException if any of set[i] is null or if set is null\n+     * \n+     * <pre>\n+     * CharSetUtils.evaluateSet(null)  = null\n+     * CharSetUtils.evaluateSet(\"\")    = CharSet matching nothing\n+     * CharSetUtils.evaluateSet(\"a-e\") = CharSet matching a,b,c,d,e\n+     * </pre>\n+     *\n+     * @param set  the set, may be null\n+     * @return a CharSet instance, <code>null</code> if null input\n+     */\n+    public static CharSet evaluateSet(String set) {\n+        if (set == null) {\n+            return null;\n+        }\n+        return new CharSet(new String[] {set}); \n+    }\n+\n+    /**\n+     * <p>Creates a <code>CharSetUtils</code> object which allows a certain amount of\n+     * set logic to be performed.</p>\n+     * <p>The syntax is:</p>\n+     * <ul>\n+     *  <li>&quot;aeio&quot; which implies 'a','e',..</li>\n+     *  <li>&quot;^e&quot; implies not e. However it only negates, it's not\n+     *   a set in itself due to the size of that set in unicode.</li>\n+     *  <li>&quot;ej-m&quot; implies e,j->m. e,j,k,l,m.</li>\n+     * </ul>\n+     * \n+     * <pre>\n+     * CharSetUtils.evaluateSet(null)    = null\n+     * CharSetUtils.evaluateSet([])      = CharSet matching nothing\n+     * CharSetUtils.evaluateSet([\"a-e\"]) = CharSet matching a,b,c,d,e\n+     * </pre>\n+     *\n+     * @param set  the set, may be null\n+     * @return a CharSet instance, <code>null</code> if null input\n      */\n     public static CharSet evaluateSet(String[] set) {\n+        if (set == null) {\n+            return null;\n+        }\n         return new CharSet(set); \n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Squeezes any repititions of a character that is mentioned in the\n      * supplied set.</p>\n      *\n-     * <p>An example is:</p>\n-     * <ul>\n-     *  <li>squeeze(&quot;hello&quot;, &quot;el&quot;) => &quot;helo&quot;</li>\n-     * </ul>\n-     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n-     *\n+     * <pre>\n+     * CharSetUtils.squeeze(null, *)        = null\n+     * CharSetUtils.squeeze(\"\", *)          = \"\"\n+     * CharSetUtils.squeeze(*, null)        = *\n+     * CharSetUtils.squeeze(*, \"\")          = *\n+     * CharSetUtils.squeeze(\"hello\", \"k-p\") = \"helo\"\n+     * CharSetUtils.squeeze(\"hello\", \"a-e\") = \"hello\"\n+     * </pre>\n+     *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  the string to squeeze, may be null\n-     * @param set  the character set to use for manipulation, must not be null\n-     * @return modified String, <code>null</code> if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n+     * @param set  the character set to use for manipulation, may be null\n+     * @return modified String, <code>null</code> if null string input\n      */\n     public static String squeeze(String str, String set) {\n-        if (str == null) {\n-            return null;\n+        if (str == null || str.length() == 0 || set == null || set.length() == 0) {\n+            return str;\n         }\n         String[] strs = new String[1];\n         strs[0] = set;\n      * <ul>\n      *   <li>squeeze(&quot;hello&quot;, {&quot;el&quot;}) => &quot;helo&quot;</li>\n      * </ul>\n-     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * \n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  the string to squeeze, may be null\n-     * @param set  the character set to use for manipulation, must not be null\n-     * @return modified String, <code>null</code> if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n-     *  or any element is <code>null</code>\n+     * @param set  the character set to use for manipulation, may be null\n+     * @return modified String, <code>null</code> if null string input\n      */\n     public static String squeeze(String str, String[] set) {\n-        if (str == null) {\n-            return null;\n+        if (str == null || str.length() == 0 || set == null || set.length == 0) {\n+            return str;\n         }\n         CharSet chars = evaluateSet(set);\n         StringBuffer buffer = new StringBuffer(str.length());\n         return buffer.toString();\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Takes an argument in set-syntax, see evaluateSet,\n      * and returns the number of characters present in the specified string.</p>\n      *\n-     * <p>An example would be:</p>\n-     * <ul>\n-     *   <li>count(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns 2.</li>\n-     * </ul>\n-     *\n+     * <pre>\n+     * CharSetUtils.count(null, *)        = 0\n+     * CharSetUtils.count(\"\", *)          = 0\n+     * CharSetUtils.count(*, null)        = 0\n+     * CharSetUtils.count(*, \"\")          = 0\n+     * CharSetUtils.count(\"hello\", \"k-p\") = 3\n+     * CharSetUtils.count(\"hello\", \"a-e\") = 1\n+     * </pre>\n+     *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  String to count characters in, may be null\n-     * @param set  String set of characters to count, must not be null\n+     * @param set  String set of characters to count, may be null\n      * @return character count, zero if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n      */\n     public static int count(String str, String set) {\n-        if (str == null) {\n+        if (str == null || str.length() == 0 || set == null || set.length() == 0) {\n             return 0;\n         }\n         String[] strs = new String[1];\n      *  <li>count(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns 2.</li>\n      * </ul>\n      *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  String to count characters in, may be null\n-     * @param set  String[] set of characters to count, must not be null\n+     * @param set  String[] set of characters to count, may be null\n      * @return character count, zero if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n-     *  or any element is <code>null</code>\n      */\n     public static int count(String str, String[] set) {\n-        if (str == null) {\n+        if (str == null || str.length() == 0 || set == null || set.length == 0) {\n             return 0;\n         }\n         CharSet chars = evaluateSet(set);\n         return count;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Takes an argument in set-syntax, see evaluateSet,\n      * and keeps any of characters present in the specified string.</p>\n      *\n-     * <p>An example would be:</p>\n-     * <ul>\n-     *   <li>keep(&quot;hello&quot;, {&quot;c-fo&quot;}) returns &quot;hll&quot;</li>\n-     * </ul>\n-     *\n+     * <pre>\n+     * CharSetUtils.keep(null, *)        = null\n+     * CharSetUtils.keep(\"\", *)          = \"\"\n+     * CharSetUtils.keep(*, null)        = \"\"\n+     * CharSetUtils.keep(*, \"\")          = \"\"\n+     * CharSetUtils.keep(\"hello\", \"hl\") = \"hll\"\n+     * CharSetUtils.keep(\"hello\", \"le\") = \"ell\"\n+     * </pre>\n+     *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  String to keep characters from, may be null\n-     * @param set  String set of characters to keep, must not be null\n-     * @return modified String, <code>null</code> if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n+     * @param set  String set of characters to keep, may be null\n+     * @return modified String, <code>null</code> if null string input\n      */\n     public static String keep(String str, String set) {\n         if (str == null) {\n             return null;\n         }\n+        if (str.length() == 0 || set == null || set.length() == 0) {\n+            return \"\";\n+        }\n         String[] strs = new String[1];\n         strs[0] = set;\n         return keep(str, strs);\n      *   returns &quot;hll&quot;</li>\n      * </ul>\n      *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  String to keep characters from, may be null\n-     * @param set  String[] set of characters to keep, must not be null\n-     * @return modified String, <code>null</code> if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n-     *  or any element is <code>null</code>\n+     * @param set  String[] set of characters to keep, may be null\n+     * @return modified String, <code>null</code> if null string input\n      */\n     public static String keep(String str, String[] set) {\n         if (str == null) {\n             return null;\n         }\n+        if (str.length() == 0 || set == null || set.length == 0) {\n+            return \"\";\n+        }\n         return modify(str, set, true);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Takes an argument in set-syntax, see evaluateSet,\n      * and deletes any of characters present in the specified string.</p>\n      *\n-     * <p>An example would be:</p>\n-     * <ul>\n-     *   <li>delete(&quot;hello&quot;, {&quot;c-fo&quot;}) returns &quot;hll&quot;</li>\n-     * </ul>\n-     *\n+     * <pre>\n+     * CharSetUtils.delete(null, *)        = null\n+     * CharSetUtils.delete(\"\", *)          = \"\"\n+     * CharSetUtils.delete(*, null)        = *\n+     * CharSetUtils.delete(*, \"\")          = *\n+     * CharSetUtils.delete(\"hello\", \"hl\") = \"hll\"\n+     * CharSetUtils.delete(\"hello\", \"le\") = \"ell\"\n+     * </pre>\n+     *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  String to delete characters from, may be null\n-     * @param set  String set of characters to delete, must not be null\n-     * @return modified String, <code>null</code> if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n+     * @param set  String set of characters to delete, may be null\n+     * @return modified String, <code>null</code> if null string input\n      */\n     public static String delete(String str, String set) {\n-        if (str == null) {\n-            return null;\n+        if (str == null || str.length() == 0 || set == null || set.length() == 0) {\n+            return str;\n         }\n         String[] strs = new String[1];\n         strs[0] = set;\n      *   &quot;hll&quot;</li>\n      * </ul>\n      *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  String to delete characters from, may be null\n-     * @param set  String[] set of characters to delete, must not be null\n-     * @return modified String, <code>null</code> if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n-     *  or any element is <code>null</code>\n+     * @param set  String[] set of characters to delete, may be null\n+     * @return modified String, <code>null</code> if null string input\n      */\n     public static String delete(String str, String[] set) {\n-        if (str == null) {\n-            return null;\n+        if (str == null || str.length() == 0 || set == null || set.length == 0) {\n+            return str;\n         }\n         return modify(str, set, false);\n     }\n \n+    //-----------------------------------------------------------------------\n     // Implementation of delete and keep\n     private static String modify(String str, String[] set, boolean expect) {\n         CharSet chars = evaluateSet(set);\n         return buffer.toString();\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Translate characters in a String.\n      * This is a multi character search and replace routine.</p>\n--- a/src/test/org/apache/commons/lang/CharSetUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/CharSetUtilsTest.java\n  * @author <a href=\"mailto:bayard@generationjava.com\">Henri Yandell</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Stephen Colebourne\n- * @version $Id: CharSetUtilsTest.java,v 1.10 2003/07/30 22:21:39 scolebourne Exp $\n+ * @version $Id: CharSetUtilsTest.java,v 1.11 2003/07/31 21:32:47 scolebourne Exp $\n  */\n public class CharSetUtilsTest extends TestCase {\n     \n     }\n     \n     //-----------------------------------------------------------------------\n-    public void testSqueeze() {\n+    public void testEvaluateSet_String() {\n+        assertEquals(null, CharSetUtils.evaluateSet((String) null));\n+        assertEquals(\"[]\", CharSetUtils.evaluateSet(\"\").toString());\n+        assertEquals(\"[a-e]\", CharSetUtils.evaluateSet(\"a-e\").toString());\n+    }\n+    \n+    public void testEvaluateSet_Stringarray() {\n+        assertEquals(null, CharSetUtils.evaluateSet((String[]) null));\n+        assertEquals(\"[]\", CharSetUtils.evaluateSet(new String[0]).toString());\n+        assertEquals(\"[]\", CharSetUtils.evaluateSet(new String[] {null}).toString());\n+        assertEquals(\"[a-e]\", CharSetUtils.evaluateSet(new String[] {\"a-e\"}).toString());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSqueeze_StringString() {\n+        assertEquals(null, CharSetUtils.squeeze(null, (String) null));\n+        assertEquals(null, CharSetUtils.squeeze(null, \"\"));\n+        \n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", (String) null));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", \"\"));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", \"a-e\"));\n+        \n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", (String) null));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"\"));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"a-e\"));\n+        assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", \"l-p\"));\n+    }\n+    \n+    public void testSqueeze_StringStringarray() {\n         assertEquals(null, CharSetUtils.squeeze(null, (String[]) null));\n-        assertEquals(null, CharSetUtils.squeeze(null, (String) null));\n-        assertEquals(null, CharSetUtils.squeeze(null, new String[] { \"el\" }));\n+        assertEquals(null, CharSetUtils.squeeze(null, new String[0]));\n+        assertEquals(null, CharSetUtils.squeeze(null, new String[] {null}));\n+        assertEquals(null, CharSetUtils.squeeze(null, new String[] {\"el\"}));\n+        \n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", (String[]) null));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[0]));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[] {null}));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", (String[]) null));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[0]));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] {null}));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] {\"a-e\"}));\n+        \n         assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", new String[] { \"el\" }));\n-        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"\"));\n-        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[] { \"el\" }));\n         assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] { \"e\" }));\n         assertEquals(\"fofof\", CharSetUtils.squeeze(\"fooffooff\", new String[] { \"of\" }));\n         assertEquals(\"fof\", CharSetUtils.squeeze(\"fooooff\", new String[] { \"fo\" }));\n-        try {\n-            CharSetUtils.squeeze(\"hello\", (String[]) null);\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n-        try {\n-            CharSetUtils.squeeze(\"hello\", new String[] { \"\", null });\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n-    }\n-\n-    public void testCount() {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCount_StringString() {\n+        assertEquals(0, CharSetUtils.count(null, (String) null));\n+        assertEquals(0, CharSetUtils.count(null, \"\"));\n+        \n+        assertEquals(0, CharSetUtils.count(\"\", (String) null));\n+        assertEquals(0, CharSetUtils.count(\"\", \"\"));\n+        assertEquals(0, CharSetUtils.count(\"\", \"a-e\"));\n+        \n+        assertEquals(0, CharSetUtils.count(\"hello\", (String) null));\n+        assertEquals(0, CharSetUtils.count(\"hello\", \"\"));\n+        assertEquals(1, CharSetUtils.count(\"hello\", \"a-e\"));\n+        assertEquals(3, CharSetUtils.count(\"hello\", \"l-p\"));\n+    }\n+    \n+    public void testCount_StringStringarray() {\n         assertEquals(0, CharSetUtils.count(null, (String[]) null));\n-        assertEquals(0, CharSetUtils.count(null, (String) null));\n-        assertEquals(0, CharSetUtils.count(null, new String[] { \"el\" }));\n+        assertEquals(0, CharSetUtils.count(null, new String[0]));\n+        assertEquals(0, CharSetUtils.count(null, new String[] {null}));\n+        assertEquals(0, CharSetUtils.count(null, new String[] {\"a-e\"}));\n+        \n+        assertEquals(0, CharSetUtils.count(\"\", (String[]) null));\n+        assertEquals(0, CharSetUtils.count(\"\", new String[0]));\n+        assertEquals(0, CharSetUtils.count(\"\", new String[] {null}));\n+        assertEquals(0, CharSetUtils.count(\"\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(0, CharSetUtils.count(\"hello\", (String[]) null));\n+        assertEquals(0, CharSetUtils.count(\"hello\", new String[0]));\n+        assertEquals(0, CharSetUtils.count(\"hello\", new String[] {null}));\n+        assertEquals(1, CharSetUtils.count(\"hello\", new String[] {\"a-e\"}));\n+        \n         assertEquals(3, CharSetUtils.count(\"hello\", new String[] { \"el\" }));\n-        assertEquals(0, CharSetUtils.count(\"\", new String[] { \"el\" }));\n         assertEquals(0, CharSetUtils.count(\"hello\", new String[] { \"x\" }));\n         assertEquals(2, CharSetUtils.count(\"hello\", new String[] { \"e-i\" }));\n         assertEquals(5, CharSetUtils.count(\"hello\", new String[] { \"a-z\" }));\n         assertEquals(0, CharSetUtils.count(\"hello\", new String[] { \"\" }));\n-        assertEquals(0, CharSetUtils.count(\"hello\", \"\"));\n-        try {\n-            CharSetUtils.count(\"hello\", (String[]) null);\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n-        try {\n-            CharSetUtils.count(\"hello\", new String[] { \"\", null });\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n-    }\n-\n-    public void testKeep() {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testKeep_StringString() {\n+        assertEquals(null, CharSetUtils.keep(null, (String) null));\n+        assertEquals(null, CharSetUtils.keep(null, \"\"));\n+        \n+        assertEquals(\"\", CharSetUtils.keep(\"\", (String) null));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", \"\"));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", \"a-e\"));\n+        \n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", (String) null));\n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", \"\"));\n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", \"xyz\"));\n+        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"a-z\"));\n+        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"oleh\"));\n+        assertEquals(\"ell\", CharSetUtils.keep(\"hello\", \"el\"));\n+    }\n+    \n+    public void testKeep_StringStringarray() {\n         assertEquals(null, CharSetUtils.keep(null, (String[]) null));\n-        assertEquals(null, CharSetUtils.keep(null, (String) null));\n-        assertEquals(null, CharSetUtils.keep(null, new String[] { \"el\" }));\n+        assertEquals(null, CharSetUtils.keep(null, new String[0]));\n+        assertEquals(null, CharSetUtils.keep(null, new String[] {null}));\n+        assertEquals(null, CharSetUtils.keep(null, new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"\", CharSetUtils.keep(\"\", (String[]) null));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", new String[0]));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", new String[] {null}));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", (String[]) null));\n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", new String[0]));\n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", new String[] {null}));\n+        assertEquals(\"e\", CharSetUtils.keep(\"hello\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"e\", CharSetUtils.keep(\"hello\", new String[] { \"a-e\" }));\n         assertEquals(\"ell\", CharSetUtils.keep(\"hello\", new String[] { \"el\" }));\n         assertEquals(\"hello\", CharSetUtils.keep(\"hello\", new String[] { \"elho\" }));\n-        assertEquals(\"\", CharSetUtils.keep(\"hello\", new String[] { \"\" }));\n-        assertEquals(\"\", CharSetUtils.keep(\"hello\", \"\"));\n         assertEquals(\"hello\", CharSetUtils.keep(\"hello\", new String[] { \"a-z\" }));\n         assertEquals(\"----\", CharSetUtils.keep(\"----\", new String[] { \"-\" }));\n         assertEquals(\"ll\", CharSetUtils.keep(\"hello\", new String[] { \"l\" }));\n-        try {\n-            CharSetUtils.keep(\"hello\", (String[]) null);\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n-        try {\n-            CharSetUtils.keep(\"hello\", new String[] { \"\", null});\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n-    }\n-\n-    public void testDelete() {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDelete_StringString() {\n+        assertEquals(null, CharSetUtils.delete(null, (String) null));\n+        assertEquals(null, CharSetUtils.delete(null, \"\"));\n+        \n+        assertEquals(\"\", CharSetUtils.delete(\"\", (String) null));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", \"\"));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", \"a-e\"));\n+        \n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", (String) null));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"\"));\n+        assertEquals(\"hllo\", CharSetUtils.delete(\"hello\", \"a-e\"));\n+        assertEquals(\"he\", CharSetUtils.delete(\"hello\", \"l-p\"));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"z\"));\n+    }\n+    \n+    public void testDelete_StringStringarray() {\n         assertEquals(null, CharSetUtils.delete(null, (String[]) null));\n-        assertEquals(null, CharSetUtils.delete(null,(String) null));\n-        assertEquals(null, CharSetUtils.delete(null, new String[] { \"el\" }));\n+        assertEquals(null, CharSetUtils.delete(null, new String[0]));\n+        assertEquals(null, CharSetUtils.delete(null, new String[] {null}));\n+        assertEquals(null, CharSetUtils.delete(null, new String[] {\"el\"}));\n+        \n+        assertEquals(\"\", CharSetUtils.delete(\"\", (String[]) null));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", new String[0]));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", new String[] {null}));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", (String[]) null));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[0]));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] {null}));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] {\"xyz\"}));\n+\n         assertEquals(\"ho\", CharSetUtils.delete(\"hello\", new String[] { \"el\" }));\n         assertEquals(\"\", CharSetUtils.delete(\"hello\", new String[] { \"elho\" }));\n         assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] { \"\" }));\n         assertEquals(\"\", CharSetUtils.delete(\"hello\", new String[] { \"a-z\" }));\n         assertEquals(\"\", CharSetUtils.delete(\"----\", new String[] { \"-\" }));\n         assertEquals(\"heo\", CharSetUtils.delete(\"hello\", new String[] { \"l\" }));\n-        try {\n-            CharSetUtils.delete(\"hello\", (String[]) null);\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n-        try {\n-            CharSetUtils.delete(\"hello\",  new String[] { \"-\", null });\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n-    }\n-    \n+    }\n+    \n+    //-----------------------------------------------------------------------\n     public void testTranslate() {\n         assertEquals(null, CharSetUtils.translate(null, null, null));\n         assertEquals(\"\", CharSetUtils.translate(\"\",\"a\", \"b\"));", "timestamp": 1059687167, "metainfo": ""}