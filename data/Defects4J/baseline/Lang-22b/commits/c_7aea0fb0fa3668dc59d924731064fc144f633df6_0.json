{"sha": "7aea0fb0fa3668dc59d924731064fc144f633df6", "log": "increase StringUtils test coverage as reported by clover  ", "commit": "\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n         assertEquals(null, StringUtils.upperCase(null));\n         assertEquals(null, StringUtils.lowerCase(null));\n         assertEquals(null, StringUtils.capitalize(null));\n+        assertEquals(null, StringUtils.uncapitalise(null));\n         assertEquals(null, StringUtils.uncapitalize(null));\n \n+        assertEquals(\"capitalise(String) failed\",\n+                    FOO_CAP, StringUtils.capitalise(FOO_UNCAP) );\n+        assertEquals(\"capitalise(empty-string) failed\",\n+                    \"\", StringUtils.capitalise(\"\") );\n+        assertEquals(\"capitalise(single-char-string) failed\",\n+                    \"X\", StringUtils.capitalise(\"x\") );\n         assertEquals(\"capitalize(String) failed\",\n                      FOO_CAP, StringUtils.capitalize(FOO_UNCAP) );\n         assertEquals(\"capitalize(empty-string) failed\",\n                      \"\", StringUtils.capitalize(\"\") );\n         assertEquals(\"capitalize(single-char-string) failed\",\n                      \"X\", StringUtils.capitalize(\"x\") );\n+        assertEquals(\"uncapitalise(String) failed\",\n+                     FOO_UNCAP, StringUtils.uncapitalise(FOO_CAP) );\n+        assertEquals(\"uncapitalise(empty-string) failed\",\n+                     \"\", StringUtils.uncapitalise(\"\") );\n+        assertEquals(\"uncapitalise(single-char-string) failed\",\n+                     \"x\", StringUtils.uncapitalise(\"X\") );\n         assertEquals(\"uncapitalize(String) failed\",\n                      FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );\n         assertEquals(\"uncapitalize(empty-string) failed\",\n                      \"x\", StringUtils.uncapitalize(\"X\") );\n                      \n         // reflection type of tests: Sentences.\n+        assertEquals(\"uncapitalise(capitalise(String)) failed\",\n+                     SENTENCE_UNCAP, StringUtils.uncapitalise(StringUtils.capitalise(SENTENCE_UNCAP)) );\n+        assertEquals(\"capitalise(uncapitalise(String)) failed\",\n+                     SENTENCE_CAP, StringUtils.capitalise(StringUtils.uncapitalise(SENTENCE_CAP)) );\n         assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                      SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) );\n         assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                      SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) );\n \n         // reflection type of tests: One word.\n+        assertEquals(\"uncapitalise(capitalise(String)) failed\",\n+                     FOO_UNCAP, StringUtils.uncapitalise(StringUtils.capitalise(FOO_UNCAP)) );\n+        assertEquals(\"capitalise(uncapitalise(String)) failed\",\n+                     FOO_CAP, StringUtils.capitalise(StringUtils.uncapitalise(FOO_CAP)) );\n         assertEquals(\"uncapitalize(capitalize(String)) failed\",\n-                    FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );\n+                     FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );\n         assertEquals(\"capitalize(uncapitalize(String)) failed\",\n-                    FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) );\n+                     FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) );\n \n         assertEquals(\"upperCase(String) failed\",\n                      \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\") );\n                      \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\") );\n         assertEquals(\"lowerCase(empty-string) failed\",\n                      \"\", StringUtils.lowerCase(\"\") );\n+        \n     }\n \n     public void testSwapCase_String() {\n         assertEquals(\"i aM hERE 123\", StringUtils.swapCase(\"I Am Here 123\") );\n         assertEquals(\"I AM here 123\", StringUtils.swapCase(\"i am HERE 123\") );\n         assertEquals(\"i am here 123\", StringUtils.swapCase(\"I AM HERE 123\") );\n+        \n+        String test = \"This String contains a TitleCase character: \\u01C8\";\n+        String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\n+        assertEquals(expect, WordUtils.swapCase(test));\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n         for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i+= 1 ) {\n             assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n+        }\n+\n+        String[] splitWithMultipleSeparatorExpectedResults = {\"ab\", \"cd\", \"ef\"};\n+        String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator(\"ab:cd::ef\", \":\");\n+        assertEquals( splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length );\n+        for( int i = 0; i < splitWithMultipleSeparatorExpectedResults.length ; i++ ) {\n+            assertEquals( splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i] ) ;\n         }\n     }\n \n         assertEquals(\"chompLast(String) failed\",\n                      FOO_UNCAP, StringUtils.chompLast(FOO_UNCAP + \"\\n\") );\n \n+        assertEquals(\"chompLast(\\\"\\\") failed\",\n+            \"\", StringUtils.chompLast(\"\") );\n+        assertEquals(\"chompLast(\\\"test\\\", \\\"test\\\") failed\",\n+            \"test\", StringUtils.chompLast(\"test\", \"tst\") );\n+        \n         assertEquals(\"getChomp(String, String) failed\",\n                      \"\\n\" + FOO_UNCAP, StringUtils.getChomp(FOO_UNCAP + \"\\n\" + FOO_UNCAP, \"\\n\") );\n+        assertEquals(\"getChomp(String, String) failed\",\n+                     FOO_CAP, StringUtils.getChomp(FOO_CAP+FOO_CAP, FOO_CAP));\n+        assertEquals(\"getChomp(String, String) failed\",\n+                     \"\", StringUtils.getChomp(FOO_UNCAP, FOO_CAP));\n \n         assertEquals(\"prechomp(String, String) failed\",\n                      FOO_UNCAP, StringUtils.prechomp(FOO_UNCAP + \"\\n\" + FOO_UNCAP, \"\\n\") );\n-\n+        assertEquals(\"prechomp(String, String) failed\",\n+                     FOO_UNCAP, StringUtils.prechomp(FOO_UNCAP, FOO_CAP));\n+        \n         assertEquals(\"getPrechomp(String, String) failed\",\n                      FOO_UNCAP + \"\\n\", StringUtils.getPrechomp(FOO_UNCAP + \"\\n\" + FOO_UNCAP, \"\\n\") );\n-\n+        assertEquals(\"getPrechomp(String, String) failed\",\n+                     \"\", StringUtils.getPrechomp(FOO_CAP, FOO_UNCAP));\n+        \n         assertEquals(\"chopNewline(String, String) failed\",\n                      FOO_UNCAP, StringUtils.chopNewline(FOO_UNCAP + \"\\r\\n\") );\n     }\n         assertEquals(7, StringUtils.indexOfDifference(\"i am a machine\", \"i am a robot\"));\n         assertEquals(-1, StringUtils.indexOfDifference(\"foo\", \"foo\"));\n         assertEquals(0, StringUtils.indexOfDifference(\"i am a robot\", \"you are a robot\"));\n+        System.out.println(\"indexOfDiff: \" + StringUtils.indexOfDifference(\"i am a robot\", \"not machine\"));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1124672304, "metainfo": ""}