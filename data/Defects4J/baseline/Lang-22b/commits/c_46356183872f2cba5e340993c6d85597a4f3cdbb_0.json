{"sha": "46356183872f2cba5e340993c6d85597a4f3cdbb", "log": "LANG-636 ExtendedMessageFormat doesn't override equals(Object)  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n import java.util.Locale;\n import java.util.Map;\n \n+import org.apache.commons.lang3.ObjectUtils;\n import org.apache.commons.lang3.Validate;\n \n /**\n  */\n public class ExtendedMessageFormat extends MessageFormat {\n     private static final long serialVersionUID = -2362048321261811743L;\n+    private static final int HASH_SEED = 31;\n \n     private static final String DUMMY_PATTERN = \"\";\n     private static final String ESCAPED_QUOTE = \"''\";\n     }\n \n     /**\n+     * Check if this extended message format is equal to another object.\n+     *\n+     * @param obj the object to compare to\n+     * @return true if this object equals the other, otherwise false\n+     */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (!super.equals(obj)) {\n+            return false;\n+        }\n+        if (ObjectUtils.notEqual(getClass(), obj.getClass())) {\n+          return false;\n+        }\n+        ExtendedMessageFormat rhs = (ExtendedMessageFormat)obj;\n+        if (ObjectUtils.notEqual(toPattern, rhs.toPattern)) {\n+            return false;\n+        }\n+        if (ObjectUtils.notEqual(registry, rhs.registry)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Return the hashcode.\n+     *\n+     * @return the hashcode\n+     */\n+    @Override\n+    public int hashCode() {\n+        int result = super.hashCode();\n+        result = HASH_SEED * result + ObjectUtils.hashCode(registry);\n+        result = HASH_SEED * result + ObjectUtils.hashCode(toPattern);\n+        return result;\n+    }\n+\n+    /**\n      * Get a custom format from a format description.\n      * \n      * @param desc String\n--- a/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\n     }\n \n     /**\n+     * Test equals() and hashcode.\n+     */\n+    public void testEqualsHashcode() {\n+        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"testfmt\", new LowerCaseFormatFactory());\n+        Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap(\"testfmt\", new UpperCaseFormatFactory());\n+\n+        String pattern = \"Pattern: {0,testfmt}\";\n+        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry);\n+\n+        ExtendedMessageFormat other = null;\n+\n+        // Same object\n+        assertTrue(\"same, equals()\",   emf.equals(emf));\n+        assertTrue(\"same, hashcode()\", emf.hashCode() == emf.hashCode());\n+\n+        // Equal Object\n+        other = new ExtendedMessageFormat(pattern, Locale.US, registry);\n+        assertTrue(\"equal, equals()\",   emf.equals(other));\n+        assertTrue(\"equal, hashcode()\", emf.hashCode() == other.hashCode());\n+\n+        // Different Class\n+        other = new OtherExtendedMessageFormat(pattern, Locale.US, registry);\n+        assertFalse(\"class, equals()\",  emf.equals(other));\n+        assertTrue(\"class, hashcode()\", emf.hashCode() == other.hashCode()); // same hashcode\n+        \n+        // Different pattern\n+        other = new ExtendedMessageFormat(\"X\" + pattern, Locale.US, registry);\n+        assertFalse(\"pattern, equals()\",   emf.equals(other));\n+        assertFalse(\"pattern, hashcode()\", emf.hashCode() == other.hashCode());\n+\n+        // Different registry\n+        other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry);\n+        assertFalse(\"registry, equals()\",   emf.equals(other));\n+        assertFalse(\"registry, hashcode()\", emf.hashCode() == other.hashCode());\n+\n+        // Different Locale\n+        other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry);\n+        assertFalse(\"locale, equals()\",  emf.equals(other));\n+        assertTrue(\"locale, hashcode()\", emf.hashCode() == other.hashCode()); // same hashcode\n+    }\n+\n+    /**\n      * Test a built in format for the specified Locales, plus <code>null</code> Locale.\n      * @param pattern MessageFormat pattern\n      * @param args MessageFormat arguments\n                             .getDateInstance(DateFormat.DEFAULT, locale);\n         }\n     }\n+\n+    /**\n+     * Alternative ExtendedMessageFormat impl.\n+     */\n+    private static class OtherExtendedMessageFormat extends ExtendedMessageFormat {\n+        public OtherExtendedMessageFormat(String pattern, Locale locale,\n+                Map<String, ? extends FormatFactory> registry) {\n+            super(pattern, locale, registry);\n+        }\n+        \n+    }\n+\n }", "timestamp": 1294703820, "metainfo": ""}