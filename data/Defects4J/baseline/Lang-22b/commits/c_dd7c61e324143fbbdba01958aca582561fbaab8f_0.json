{"sha": "dd7c61e324143fbbdba01958aca582561fbaab8f", "log": "Fix some raw types and other Eclipse warnings  ", "commit": "\n--- a/src/test/org/apache/commons/lang/exception/ExceptionUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/exception/ExceptionUtilsTest.java\n     \n     public void testConstructor() {\n         assertNotNull(new ExceptionUtils());\n-        Constructor[] cons = ExceptionUtils.class.getDeclaredConstructors();\n+        Constructor<?>[] cons = ExceptionUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n         assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n         assertEquals(true, Modifier.isPublic(ExceptionUtils.class.getModifiers()));\n \n     //-----------------------------------------------------------------------\n     public void testGetThrowableList_Throwable_null() {\n-        List throwables = ExceptionUtils.getThrowableList(null);\n+        List<?> throwables = ExceptionUtils.getThrowableList(null);\n         assertEquals(0, throwables.size());\n     }\n \n     public void testGetThrowableList_Throwable_withoutCause() {\n-        List throwables = ExceptionUtils.getThrowableList(withoutCause);\n+        List<?> throwables = ExceptionUtils.getThrowableList(withoutCause);\n         assertEquals(1, throwables.size());\n         assertSame(withoutCause, throwables.get(0));\n     }\n \n     public void testGetThrowableList_Throwable_nested() {\n-        List throwables = ExceptionUtils.getThrowableList(nested);\n+        List<?> throwables = ExceptionUtils.getThrowableList(nested);\n         assertEquals(2, throwables.size());\n         assertSame(nested, throwables.get(0));\n         assertSame(withoutCause, throwables.get(1));\n     }\n \n     public void testGetThrowableList_Throwable_withCause() {\n-        List throwables = ExceptionUtils.getThrowableList(withCause);\n+        List<?> throwables = ExceptionUtils.getThrowableList(withCause);\n         assertEquals(3, throwables.size());\n         assertSame(withCause, throwables.get(0));\n         assertSame(nested, throwables.get(1));\n     }\n \n     public void testGetThrowableList_Throwable_jdkNoCause() {\n-        List throwables = ExceptionUtils.getThrowableList(jdkNoCause);\n+        List<?> throwables = ExceptionUtils.getThrowableList(jdkNoCause);\n         assertEquals(1, throwables.size());\n         assertSame(jdkNoCause, throwables.get(0));\n     }\n \n     public void testGetThrowableList_Throwable_selfCause() {\n-        List throwables = ExceptionUtils.getThrowableList(selfCause);\n+        List<?> throwables = ExceptionUtils.getThrowableList(selfCause);\n         assertEquals(1, throwables.size());\n         assertSame(selfCause, throwables.get(0));\n     }\n \n     public void testGetThrowableList_Throwable_recursiveCause() {\n-        List throwables = ExceptionUtils.getThrowableList(cyclicCause);\n+        List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause);\n         assertEquals(3, throwables.size());\n         assertSame(cyclicCause, throwables.get(0));\n         assertSame(cyclicCause.getCause(), throwables.get(1));\n      * return value of <code>Throwable</code>.\n      */\n     private static class ExceptionWithoutCause extends Exception {\n+        @SuppressWarnings(\"unused\")\n         public void getTargetException() {\n         }\n     }\n     // prior to a rewrite of this test class. \n     private static class NestableRuntimeException extends RuntimeException { \n         public NestableRuntimeException() { super(); }\n+        @SuppressWarnings(\"unused\")\n         public NestableRuntimeException(Throwable t) { super(t); }\n     }\n     private static class NestableException extends Exception { \n+        @SuppressWarnings(\"unused\")\n         public NestableException() { super(); }\n         public NestableException(Throwable t) { super(t); }\n     }", "timestamp": 1256394395, "metainfo": ""}