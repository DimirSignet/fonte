{"sha": "8b488bb8f50741c76b754991f3e9a63afdfcabee", "log": "Add ExceptionContext package (LANG-497, contributed by Derek Ashmore).  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/exception/ContextedException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.exception;\n+\n+import java.io.Serializable;\n+import java.util.Set;\n+\n+/**\n+ * Provides an easier and safer way for developers to provide context when\n+ * generating checked exceptions.  Often, additional information, besides what's\n+ * embedded in the exception cause, is needed for developers to debug and correct \n+ * a bug.  Often, this additional information can reduce the time it takes\n+ * to replicate and fix a bug.\n+ * \n+ * <p>ContextedException is easier as developers don't need to be concerned \n+ * with formatting the exception message to include additional information \n+ * with the exception.  Additional information is automatically included\n+ * in the message and printed stack trace.  This often thins out exception\n+ * handling code.</p>\n+ * \n+ * <p>ContextedException is safer as the additional code needed to embed additional\n+ * information in a normal exception tends to be tested less and is more vulnerable\n+ * to errors such as null pointer exceptions.</p>\n+ * \n+ * <p>An unchecked version of this exception is provided by ContextedRuntimeException.</p>\n+ * \n+ * <p>To use this class write code as follows:</p>\n+ *\n+ * <pre>\n+ *   try {\n+ * \n+ *   ...\n+ * \n+ *   } catch (Throwable e) {\n+ *     throw new ContextedException(\"Error posting account transaction\", e)\n+ *          .addLabeledValue(\"accountNumber\", accountNumber)\n+ *          .addLabeledValue(\"amountPosted\", amountPosted)\n+ *          .addLabeledValue(\"previousBalance\", previousBalance)\n+ *   }\n+ * }\n+ * </pre>\n+ * \n+ * <p>The output in a printStacktrace() (which often is written to a log) would look something like the following:\n+ * <pre>\n+ * org.apache.commons.lang.exception.ContextedException: java.lang.Exception: Error posting account transaction\n+ *  Exception Context:\n+ *  [accountNumber=null]\n+ *  [amountPosted=100.00]\n+ *  [previousBalance=-2.17]\n+ *\n+ *  ---------------------------------\n+ *  at org.apache.commons.lang.exception.ContextedExceptionTest.testAddLabeledValue(ContextedExceptionTest.java:88)\n+ *  ..... (rest of trace)\n+ * </pre>\n+ * \n+ * @see ContextedRuntimeException\n+ * @author D. Ashmore\n+ * @since 3.0\n+ *\n+ */\n+public class ContextedException extends Exception implements ExceptionContext {\n+\n+    private static final long serialVersionUID = 8940917952810290164L;\n+    private ExceptionContext exceptionContext = new DefaultExceptionContext();\n+\n+    /**\n+     * Instantiates ContextedException without message or cause.\n+     * <p>DefaultExceptionContext used to store and format context information.</p>\n+     */\n+    public ContextedException() {\n+    }\n+\n+    /**\n+     * Instantiates ContextedException with message, but without cause.\n+     * <p>DefaultExceptionContext used to store and format context information.</p>\n+     * @param message The exception message\n+     */\n+    public ContextedException(String message) {\n+        super(message);\n+    }\n+\n+    /**\n+     * Instantiates ContextedException with cause, but without message.\n+     * <p>DefaultExceptionContext used to store and format context information.</p>\n+     * @param cause Exception creating need for ContextedException\n+     */\n+    public ContextedException(Throwable cause) {\n+        super(cause);\n+    }\n+\n+    /**\n+     * Instantiates ContextedException with cause and message.\n+     * <p>DefaultExceptionContext used to store and format context information.</p>\n+     * @param message The exception message\n+     * @param cause Exception creating need for ContextedException\n+     */\n+    public ContextedException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+    \n+    /**\n+     * Instantiates ContextedException with cause, message, and ExceptionContext.\n+     * @param message The exception message\n+     * @param cause Exception creating need for ContextedException\n+     * @param context Context used to store additional information\n+     * @since 3.0\n+     */\n+    public ContextedException(String message, Throwable cause, ExceptionContext context) {\n+        super(message, cause);\n+        if (context != null) {\n+            this.exceptionContext = context;\n+        }\n+    }\n+    \n+    /**\n+     * Adds information helpful to a developer in diagnosing and correcting\n+     * the problem.  For the information to be meaningful, the value passed\n+     * should have a reasonable toString() implementation.\n+     * \n+     * <p>Note:  If the value provided isn't Serializable, one solution would be\n+     * to provide its toString() if it has a meaningful implementation or \n+     * individual properties of the value object instead.</p>\n+     * @param label  a textual label associated with information\n+     * @param value  information needed to understand exception.  May be <code>null</code>.\n+     * @return this\n+     * @since 3.0\n+     */\n+    public ContextedException addLabeledValue(String label, Serializable value) {        \n+        this.exceptionContext.addLabeledValue(label, value);\n+        \n+        return this;\n+    }\n+    \n+    /**\n+     * Convenience method to retrieve a value from the underlying ExceptionContext.\n+     * @param label  a textual label associated with information\n+     * @return value  information needed to understand exception.  May be <code>null</code>.\n+     * @since 3.0\n+     */\n+    public Serializable getLabeledValue(String label) {\n+        return  this.exceptionContext.getLabeledValue(label);\n+    }\n+    \n+    /**\n+     * Convenience method to retrieve currently defined labels from the underlying ExceptionContext.\n+     * @return labelSet\n+     * @since 3.0\n+     */\n+    public Set<String> getLabelSet() {\n+        return this.exceptionContext.getLabelSet();\n+    }\n+    \n+    /**\n+     * Provides message pertaining to exception.\n+     * @see java.lang.Throwable#getMessage()\n+     * @return message\n+     * @since 3.0\n+     */\n+    @Override\n+    public String getMessage(){\n+        return getFormattedExceptionMessage(super.getMessage());\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public String getFormattedExceptionMessage(String baseMessage) {\n+        return this.exceptionContext.getFormattedExceptionMessage(baseMessage);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.exception;\n+\n+import java.io.Serializable;\n+import java.util.Set;\n+\n+/**\n+ * Provides an unchecked version of ContextedException\n+ * @see ContextedException\n+ * @author D. Ashmore\n+ * @author J&ouml;rg Schaible\n+ * @since 3.0\n+ *\n+ */\n+public class ContextedRuntimeException extends RuntimeException implements ExceptionContext {\n+\n+    private static final long serialVersionUID = 1459691936045811817L;\n+    private ExceptionContext exceptionContext = new DefaultExceptionContext();\n+    \n+    /**\n+     * Instantiates ContextedRuntimeException without message or cause.\n+     * <p>DefaultExceptionContext used to store and format context information.</p>\n+     * \n+     */\n+    public ContextedRuntimeException() {\n+    }\n+\n+    /**\n+     * Instantiates ContextedRuntimeException with message, but without cause.\n+     * <p>DefaultExceptionContext used to store and format context information.</p>\n+     * @param message The exception message\n+     * @since 3.0\n+     */\n+    public ContextedRuntimeException(String message) {\n+        super(message);\n+    }\n+\n+    /**\n+     * Instantiates ContextedRuntimeException with cause, but without message.\n+     * <p>DefaultExceptionContext used to store and format context information.</p>\n+     * @param cause Exception creating need for ContextedRuntimeException\n+     * @since 3.0\n+     */\n+    public ContextedRuntimeException(Throwable cause) {\n+        super(cause);\n+    }\n+\n+    /**\n+     * Instantiates ContextedRuntimeException with cause and message.\n+     * <p>DefaultExceptionContext used to store and format context information.</p>\n+     * @param message The exception message\n+     * @param cause Exception creating need for ContextedException\n+     * @since 3.0\n+     */\n+    public ContextedRuntimeException(String message, Throwable cause) {\n+        this(message, cause, cause instanceof ExceptionContext ? (ExceptionContext)cause : null);\n+    }\n+    \n+    /**\n+     * Instantiates ContextedRuntimeException with cause, message, and ExceptionContext.\n+     * @param message The exception message\n+     * @param cause Exception creating need for ContextedRuntimeException\n+     * @param context Context used to store additional information\n+     * @since 3.0\n+     */\n+    public ContextedRuntimeException(String message, Throwable cause, ExceptionContext context) {\n+        super(message, cause);\n+        if (context != null) {\n+            this.exceptionContext = context;\n+        }\n+    }\n+    \n+    /**\n+     * Adds information helpful to a developer in diagnosing and correcting\n+     * the problem.  \n+     * @see ContextedException#addLabeledValue(String, Serializable)\n+     * @param label  a textual label associated with information\n+     * @param value  information needed to understand exception.  May be <code>null</code>.\n+     * @return this\n+     * @since 3.0\n+     */\n+    public ContextedRuntimeException addLabeledValue(String label, Serializable value) {        \n+        this.exceptionContext.addLabeledValue(label, value);\n+        return this;\n+    }\n+    \n+    /**\n+     * Convenience method to retrieve a value from the underlying ExceptionContext.\n+     * @param label  a textual label associated with information\n+     * @return value  information needed to understand exception.  May be <code>null</code>.\n+     * @since 3.0\n+     */\n+    public Serializable getLabeledValue(String label) {\n+        return  this.exceptionContext.getLabeledValue(label);\n+    }\n+    \n+    /**\n+     * Convenience method to retrieve  currently defined labels from the underlying ExceptionContext.\n+     * @return labelSet\n+     * @since 3.0\n+     */\n+    public Set<String> getLabelSet() {\n+        return this.exceptionContext.getLabelSet();\n+    }\n+    \n+    /**\n+     * Provides message pertaining to exception.\n+     * @see java.lang.Throwable#getMessage()\n+     * @return message\n+     * @since 3.0\n+     */\n+    @Override\n+    public String getMessage(){\n+        return getFormattedExceptionMessage(super.getMessage());\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public String getFormattedExceptionMessage(String baseMessage) {\n+        return this.exceptionContext.getFormattedExceptionMessage(baseMessage);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.exception;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang.SystemUtils;\n+\n+/**\n+ * Provides context feature for exceptions.  Used by both checked and unchecked version of the contexted exceptions.\n+ * @see ContextedRuntimeException\n+ * @author D. Ashmore\n+ * @since 3.0\n+ */\n+public class DefaultExceptionContext implements ExceptionContext {\n+    \n+    private static final long serialVersionUID = 293747957535772807L;\n+    \n+    /*\n+     * This value list could really be obtained from the Map, however, some\n+     * callers want to control the order of the list as it appears in the \n+     * Message.  The list allows that.  name/value pairs will appear in\n+     * the order that they're provided.   D. Ashmore\n+     */\n+    private List<String> contextKeyList = new ArrayList<String>();\n+    private Map<String, Serializable> contextValueMap = new HashMap<String, Serializable>();\n+    \n+    /**\n+     * Adds information helpful to a developer in diagnosing and correcting\n+     * the problem.  \n+     * @see ContextedException#addLabeledValue(String, Serializable)\n+     * @param label  a textual label associated with information\n+     * @param value  information needed to understand exception.  May be null.\n+     * @return this\n+     * @since 3.0\n+     */\n+    public ExceptionContext addLabeledValue(String label, Serializable value) {        \n+        this.contextKeyList.add(label);\n+        this.contextValueMap.put(label, value);\n+        \n+        return this;\n+    }\n+    \n+    /**\n+     * Retrieves the value for a given label.\n+     * @param label  a textual label associated with information\n+     * @return value  information needed to understand exception.  May be null.\n+     * @since 3.0\n+     */\n+    public Serializable getLabeledValue(String label) {\n+        return this.contextValueMap.get(label);\n+    }\n+    \n+    /**\n+     * Retrieves currently defined labels.\n+     * @return labelSet\n+     * @since 3.0\n+     */\n+    public Set<String> getLabelSet() {\n+        return this.contextValueMap.keySet();\n+    }\n+    \n+    /**\n+     * Centralized message logic for both checked and unchecked version of\n+     * context exceptions\n+     * @param baseMessage message retained by super class\n+     * @return message -- exception message\n+     * @since 3.0\n+     */\n+    public String getFormattedExceptionMessage(String baseMessage){\n+        StringBuffer buffer = new StringBuffer(256);\n+        if (baseMessage != null) {\n+            buffer.append(baseMessage);\n+        }\n+        \n+        if (contextKeyList.size() > 0) {\n+            buffer.append(SystemUtils.LINE_SEPARATOR);                 \n+            buffer.append(\"Exception Context:\");\n+            buffer.append(SystemUtils.LINE_SEPARATOR); \n+            buffer.append(\"\\t\");  \n+            \n+            Object value;\n+            String valueStr;\n+            for (String label: this.contextKeyList) {\n+                buffer.append(\"[\");\n+                buffer.append(label);\n+                buffer.append(\"=\");\n+                value = this.contextValueMap.get(label);\n+                if (value == null) {\n+                    buffer.append(\"null\");\n+                }\n+                else {\n+                    try {valueStr = value.toString();}\n+                    catch (Throwable t) {\n+                        valueStr = \"Excepted on toString(): \" + \n+                            ExceptionUtils.getStackTrace(t);\n+                    }\n+                    buffer.append(valueStr);\n+                }\n+                buffer.append(\"]\");\n+                buffer.append(SystemUtils.LINE_SEPARATOR);  \n+                buffer.append(\"\\t\");  \n+            }\n+            buffer.append(SystemUtils.LINE_SEPARATOR);\n+            buffer.append(\"\\t---------------------------------\");\n+        }\n+        return buffer.toString();\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionContext.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.exception;\n+\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+\n+/**\n+ * Provides context information for exceptions. It is available as separate interface to allow\n+ * it usage independently from the {@link ContextedException} and\n+ * {@link ContextedRuntimeException}.\n+ * \n+ * @see ContextedException\n+ * @see ContextedRuntimeException\n+ * @author D. Ashmore\n+ * @since 3.0\n+ */\n+public interface ExceptionContext extends Serializable {\n+    \n+    /**\n+     * Adds a context item along with a label.  \n+     * @param label label of item\n+     * @param value value of item\n+     * @return context itself to allow method chaining\n+     * @since 3.0\n+     */\n+    public ExceptionContext addLabeledValue(String label, Serializable value);\n+    \n+    /**\n+     * Provides context information associated with the given label.\n+     * @param label label of item\n+     * @return value value associated with label\n+     * @since 3.0\n+     */\n+    public Serializable getLabeledValue(String label);\n+    \n+    /**\n+     * Provides a set of labels that are currently in the context.\n+     * @return labelSet labels currently used by the context\n+     * @since 3.0\n+     */\n+    public Set<String> getLabelSet();\n+    \n+    /**\n+     * Implementors provide the given base message with context label/value item \n+     * information appended.\n+     * @param baseMessage exception message <b>without</b> context information appended\n+     * @return formattedMessage exception message <b>with</b> context information appended\n+     * @since 3.0\n+     */\n+    public String getFormattedExceptionMessage(String baseMessage);\n+\n+}\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n \n import java.io.PrintStream;\n import java.io.PrintWriter;\n+import java.io.Serializable;\n import java.io.StringWriter;\n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Set;\n import java.util.StringTokenizer;\n \n import net.jcip.annotations.GuardedBy;\n      */\n     private static final Method THROWABLE_INITCAUSE_METHOD;\n     \n+    /**\n+     * An empty {@link ExceptionContext}.\n+     * @since 3.0\n+     */\n+    public static final ExceptionContext EMPTY_CONTEXT = new ExceptionContext() {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        public ExceptionContext addLabeledValue(String label, Serializable value) {\n+          throw new UnsupportedOperationException();\n+        }\n+\n+        public Serializable getLabeledValue(String label) {\n+          return null;\n+        }\n+\n+        public Set<String> getLabelSet() {\n+          return Collections.<String>emptySet();\n+        }\n+\n+        public String getFormattedExceptionMessage(String baseMessage) {\n+          return baseMessage;\n+        }\n+\n+      };    \n     static {\n         Method causeMethod;\n         try {\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/exception/ContextedExceptionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.exception;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+/**\n+ * JUnit tests for ContextedException.\n+ * @author D. Ashmore\n+ *\n+ */\n+public class ContextedExceptionTest extends TestCase {\n+    \n+    private static final String TEST_MESSAGE_2 = \"This is monotonous\";\n+    private static final String TEST_MESSAGE = \"Test Message\";\n+    private ContextedException contextedException;\n+\n+    public ContextedExceptionTest(String name) {\n+        super(name);\n+    }\n+\n+    public void testContextedException() {\n+        contextedException = new ContextedException();\n+        String message = contextedException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(StringUtils.isEmpty(message));\n+    }\n+\n+    public void testContextedExceptionString() {\n+        contextedException = new ContextedException(TEST_MESSAGE);\n+        assertEquals(TEST_MESSAGE, contextedException.getMessage());\n+        \n+        String trace = ExceptionUtils.getStackTrace(contextedException);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+    }\n+\n+    public void testContextedExceptionThrowable() {\n+        contextedException = new ContextedException(new Exception(TEST_MESSAGE));\n+        String message = contextedException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n+    }\n+\n+    public void testContextedExceptionStringThrowable() {\n+        contextedException = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE));\n+        String message = contextedException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0);\n+        assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n+    }\n+    \n+    public void testContextedExceptionStringThrowableContext() {\n+        contextedException = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\n+        String message = contextedException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0);\n+        assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n+    }\n+\n+    public void testAddLabeledValue() {\n+        contextedException = new ContextedException(new Exception(TEST_MESSAGE))\n+        .addLabeledValue(\"test1\", null)\n+        .addLabeledValue(\"test2\", \"some value\")\n+        .addLabeledValue(\"test Date\", new Date())\n+        .addLabeledValue(\"test Nbr\", new Integer(5))\n+        .addLabeledValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        \n+        String message = contextedException.getMessage();\n+        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(message.indexOf(\"test1\")>=0);\n+        assertTrue(message.indexOf(\"test2\")>=0);\n+        assertTrue(message.indexOf(\"test Date\")>=0);\n+        assertTrue(message.indexOf(\"test Nbr\")>=0);\n+        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n+        assertTrue(message.indexOf(\"some value\")>=0);\n+        assertTrue(message.indexOf(\"5\")>=0);\n+        assertTrue(message.indexOf(\"Crap\")>=0);\n+        \n+        String contextMessage = contextedException.getFormattedExceptionMessage(\"\");\n+        assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n+        assertTrue(message.contains(contextMessage));\n+        \n+        assertTrue(contextedException.getLabeledValue(\"test1\") == null);\n+        assertTrue(contextedException.getLabeledValue(\"test2\").equals(\"some value\"));\n+        assertTrue(contextedException.getLabeledValue(\"crap\") == null);\n+        assertTrue(contextedException.getLabeledValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n+        \n+        assertTrue(contextedException.getLabelSet().size() == 5);\n+        assertTrue(contextedException.getLabelSet().contains(\"test1\"));\n+        assertTrue(contextedException.getLabelSet().contains(\"test2\"));\n+        assertTrue(contextedException.getLabelSet().contains(\"test Date\"));\n+        assertTrue(contextedException.getLabelSet().contains(\"test Nbr\"));\n+        assertTrue(contextedException.getLabelSet().contains(\"test Poorly written obj\"));\n+        \n+        assertTrue(!contextedException.getLabelSet().contains(\"crap\"));\n+    }\n+    \n+    public void testNullExceptionPassing() {\n+        contextedException = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null)\n+        .addLabeledValue(\"test1\", null)\n+        .addLabeledValue(\"test2\", \"some value\")\n+        .addLabeledValue(\"test Date\", new Date())\n+        .addLabeledValue(\"test Nbr\", new Integer(5))\n+        .addLabeledValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        \n+        String message = contextedException.getMessage();\n+        assertTrue(message != null);\n+    }\n+\n+    public void testGetMessage() {\n+        testAddLabeledValue();\n+    }\n+    \n+    static class ObjectWithFaultyToString implements Serializable {\n+\n+        private static final long serialVersionUID = 3495843995332310458L;\n+\n+        @Override\n+        public String toString() {\n+            throw new RuntimeException(\"Crap\");\n+        }\n+        \n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/exception/ContextedRuntimeExceptionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.exception;\n+\n+import java.util.Date;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.exception.ContextedExceptionTest.ObjectWithFaultyToString;\n+\n+/**\n+ * JUnit tests for ContextedRuntimeException.\n+ * @author D. Ashmore\n+ *\n+ */\n+public class ContextedRuntimeExceptionTest extends TestCase {\n+    \n+    private static final String TEST_MESSAGE_2 = \"This is monotonous\";\n+    private static final String TEST_MESSAGE = \"Test Message\";\n+    private ContextedRuntimeException contextedRuntimeException;\n+\n+    public ContextedRuntimeExceptionTest(String name) {\n+        super(name);\n+    }\n+\n+    public void testContextedException() {\n+        contextedRuntimeException = new ContextedRuntimeException();\n+        String message = contextedRuntimeException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(StringUtils.isEmpty(message));\n+    }\n+\n+    public void testContextedExceptionString() {\n+        contextedRuntimeException = new ContextedRuntimeException(TEST_MESSAGE);\n+        assertEquals(TEST_MESSAGE, contextedRuntimeException.getMessage());\n+        \n+        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+    }\n+\n+    public void testContextedExceptionThrowable() {\n+        contextedRuntimeException = new ContextedRuntimeException(new Exception(TEST_MESSAGE));\n+        String message = contextedRuntimeException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n+    }\n+\n+    public void testContextedExceptionStringThrowable() {\n+        contextedRuntimeException = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE));\n+        String message = contextedRuntimeException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0);\n+        assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n+    }\n+    \n+    public void testContextedExceptionStringThrowableContext() {\n+        contextedRuntimeException = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\n+        String message = contextedRuntimeException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0);\n+        assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n+    }\n+\n+    public void testAddLabeledValue() {\n+        contextedRuntimeException = new ContextedRuntimeException(new Exception(TEST_MESSAGE))\n+        .addLabeledValue(\"test1\", null)\n+        .addLabeledValue(\"test2\", \"some value\")\n+        .addLabeledValue(\"test Date\", new Date())\n+        .addLabeledValue(\"test Nbr\", new Integer(5))\n+        .addLabeledValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        \n+        String message = contextedRuntimeException.getMessage();\n+        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(message.indexOf(\"test1\")>=0);\n+        assertTrue(message.indexOf(\"test2\")>=0);\n+        assertTrue(message.indexOf(\"test Date\")>=0);\n+        assertTrue(message.indexOf(\"test Nbr\")>=0);\n+        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n+        assertTrue(message.indexOf(\"some value\")>=0);\n+        assertTrue(message.indexOf(\"5\")>=0);\n+        assertTrue(message.indexOf(\"Crap\")>=0);\n+        \n+        String contextMessage = contextedRuntimeException.getFormattedExceptionMessage(\"\");\n+        assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n+        assertTrue(message.contains(contextMessage));\n+        \n+        assertTrue(contextedRuntimeException.getLabeledValue(\"test1\") == null);\n+        assertTrue(contextedRuntimeException.getLabeledValue(\"test2\").equals(\"some value\"));\n+        assertTrue(contextedRuntimeException.getLabeledValue(\"crap\") == null);\n+        assertTrue(contextedRuntimeException.getLabeledValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n+        \n+        assertTrue(contextedRuntimeException.getLabelSet().size() == 5);\n+        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test1\"));\n+        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test2\"));\n+        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test Date\"));\n+        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test Nbr\"));\n+        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test Poorly written obj\"));\n+        \n+        assertTrue(!contextedRuntimeException.getLabelSet().contains(\"crap\"));\n+    }\n+    \n+    public void testNullExceptionPassing() {\n+        contextedRuntimeException = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null)\n+        .addLabeledValue(\"test1\", null)\n+        .addLabeledValue(\"test2\", \"some value\")\n+        .addLabeledValue(\"test Date\", new Date())\n+        .addLabeledValue(\"test Nbr\", new Integer(5))\n+        .addLabeledValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        \n+        String message = contextedRuntimeException.getMessage();\n+        assertTrue(message != null);\n+    }\n+\n+    public void testGetMessage() {\n+        testAddLabeledValue();\n+    }\n+    \n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/exception/DefaultExceptionContextTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.exception;\n+\n+import java.util.Date;\n+\n+import org.apache.commons.lang.exception.ContextedExceptionTest.ObjectWithFaultyToString;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit tests for DefaultExceptionContext\n+ * @author D. Ashmore\n+ *\n+ */\n+public class DefaultExceptionContextTest extends TestCase {\n+    \n+    private ExceptionContext defaultExceptionContext;\n+\n+    public DefaultExceptionContextTest(String name) {\n+        super(name);\n+    }\n+    \n+    public void setUp() {\n+        defaultExceptionContext = new DefaultExceptionContext()\n+        .addLabeledValue(\"test1\", null)\n+        .addLabeledValue(\"test2\", \"some value\")\n+        .addLabeledValue(\"test Date\", new Date())\n+        .addLabeledValue(\"test Nbr\", new Integer(5))\n+        .addLabeledValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+    }\n+    \n+    public void testAddLabeledValue() {\n+                \n+        String message = defaultExceptionContext.getFormattedExceptionMessage(\"This is an error\");\n+        assertTrue(message.indexOf(\"This is an error\")>=0);\n+        assertTrue(message.indexOf(\"test1\")>=0);\n+        assertTrue(message.indexOf(\"test2\")>=0);\n+        assertTrue(message.indexOf(\"test Date\")>=0);\n+        assertTrue(message.indexOf(\"test Nbr\")>=0);\n+        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n+        assertTrue(message.indexOf(\"some value\")>=0);\n+        assertTrue(message.indexOf(\"5\")>=0);\n+        assertTrue(message.indexOf(\"Crap\")>=0);\n+        \n+        //contextedException.printStackTrace();\n+    }\n+    \n+    public void testFormattedExceptionMessageNull() {\n+        defaultExceptionContext = new DefaultExceptionContext();\n+        defaultExceptionContext.getFormattedExceptionMessage(null);\n+    }\n+    \n+    public void testGetLabeledValue() {\n+        assertTrue(defaultExceptionContext.getLabeledValue(\"test1\") == null);\n+        assertTrue(defaultExceptionContext.getLabeledValue(\"test2\").equals(\"some value\"));\n+        assertTrue(defaultExceptionContext.getLabeledValue(\"crap\") == null);\n+        assertTrue(defaultExceptionContext.getLabeledValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n+    }\n+    \n+    public void testGetLabelSet() {\n+        assertTrue(defaultExceptionContext.getLabelSet().size() == 5);\n+        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test1\"));\n+        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test2\"));\n+        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test Date\"));\n+        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test Nbr\"));\n+        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test Poorly written obj\"));\n+        \n+        assertTrue(!defaultExceptionContext.getLabelSet().contains(\"crap\"));\n+    }\n+\n+}", "timestamp": 1249839973, "metainfo": ""}