{"sha": "e23282fe0108335f1704496f7d0d5a39f00470b0", "log": "Reverting accidental commit in r811944.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/Validate.java\n+++ b/src/java/org/apache/commons/lang/Validate.java\n  */\n package org.apache.commons.lang;\n \n-import java.text.MessageFormat;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Map;\n  * Validate.notNull( surname, \"The surname must not be null\");\n  * </pre>\n  *\n- * All validate functions exist in 4 variants: \n- * \n- * <p>1st function with only the validation option</p>\n- * <pre>\n- * Validate.isNotNull(surName);\n- * </pre>\n- * \n- * <p>2nd function with an additional String message parameter. This should\n- * be used only if no additional parameters have to be provided. Instead of using\n- * String operations to create the message String, the following 3rd variant \n- * should be used.</p>\n- * <pre>\n- * Validate.isNotNull(surName, \"surname must be set\");\n- * </pre>\n- * \n- * <p>Since commons-lang-3.0, for each validation function a similar 3rd validation function exists\n- * with a list of additional message parameters as Objects in ellipsis notation. \n- * This is used instead of simply passing a message String due to performance reasons!\n- * When using a message string, all parameters would have to be string concatenated\n- * before the call, even if no problem arises which would cost performance.</br>\n- * Instead of this, we will concatenate (with spaces) all given msgObjects.toString() \n- * only in case of a failed validation! If the first parameter of the msgObject is a\n- * String, it will be taken as the format string for {@code MessageFormat}.</p>\n- * \n- * <h3>Examples:</h3>\n- * <p>\n- * Simply validating an Argument without further message:\n- * <pre>\n- * public void myFn(String argString, Integer argInt) {\n- *     Validate.notNull(argString);\n- *     Validate.notNull(argInt);\n- *     Validate.isTrue(argInt.intValue > 3);\n- * }\n- * </pre>\n- * <p>\n- * \n- * <p>\n- * Validating an Argument and adding a message to the IllegalArgumentException:\n- * <pre>\n- * public void myFn(String argString, Integer argInt) {\n- *     Validate.notNull(argInt, \"Integer parameter must be set);\n- *     Validate.isTrue(argInt.intValue > 3, \"Integer parameter must be <=3!\");\n- * }\n- * </pre>\n- * <p>\n- * \n- * <p>\n- * If the first parameter of the msgObject is a String {@code MessageFormat} will be used:\n- * <pre>\n- *     Validate.isTrue(argInt1.intValue > argInt2.intValue, \"param2 actually is {1} but must larger than param1 {0} !\", argInt1, argInt2);\n- * </pre>\n- * </p>\n- * \n- * <p>The same function sometimes exists multiple times in a 4th form with a single message String parameter \n- * and an additional value parameter. This is essentially the same like the 3rd form, but with fixed\n- * object values to preserve backward compatibility with Validate 2.0!<p> \n- * <p>If the message String contains a <code>&quot;{0}&quot;</code>, it will be passed to \n- * {@code MessageFormat} with the value parameter as single Object parameter. If not, the value parameter \n- * will simply get concatenated to the message String separated with a space.\n- *  </p>\n-\n- * @see MessageFormat\n- * \n  * @author <a href=\"mailto:ola.berg@arkitema.se\">Ola Berg</a>\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @author Norm Deane\n- * @author <a href=\"mailto:struberg@yahoo.de\">Mark Struberg</a>\n  * @since 2.0\n  * @version $Id$\n  */\n      */\n     public static void isTrue(boolean expression, String message, Object value) {\n         if (expression == false) {\n-            throw new IllegalArgumentException(getMessage(message, value));\n+            throw new IllegalArgumentException(message + value);\n         }\n     }\n \n      */\n     public static void isTrue(boolean expression, String message, long value) {\n         if (expression == false) {\n-            \n-            throw new IllegalArgumentException(getMessage(message, value));\n+            throw new IllegalArgumentException(message + value);\n         }\n     }\n \n      */\n     public static void isTrue(boolean expression, String message, double value) {\n         if (expression == false) {\n-            throw new IllegalArgumentException(getMessage(message, value));\n+            throw new IllegalArgumentException(message + value);\n         }\n     }\n \n         }\n     }\n \n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the test result is <code>false</code>.</p>\n-     * \n-     * <p>This is used when validating according to an arbitrary boolean expression,\n-     * such as validating a primitive number or using your own custom validation \n-     * expression.</p>\n-     *\n-     * <pre>\n-     * Validate.isTrue(argInt1.intValue > argInt2.intValue, \n-     *                 \"param2 actually is {1} but must larger than param1 {0} !\", argInt1, argInt2);\n-     * </pre>\n-     *\n-     * <p>If the first msgObject is a String, the {@code MessageFormat} will be used to construct the message</p>\n-     * <p>Otherwise the message in the exception is 'Validation failed: ' followed by all given  \n-     * parameters delimited with spaces.</p>\n-     * \n-     * @param expression  a boolean expression\n-     * @throws IllegalArgumentException if expression is <code>false</code>\n-     */\n-    public static void isTrue(boolean expression, Object... msgObjects) {\n-        if (expression == false) {\n-            throw new IllegalArgumentException(getMessage(msgObjects));\n-        }\n-    }\n-\n     // notNull\n     //---------------------------------------------------------------------------------\n \n         notNull(object, \"The validated object is null\");\n     }\n \n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument is <code>null</code>.</p>\n-     * \n-     * <pre>\n-     * Validate.notNull(myObject, \"This happens while processing user {0}, currentUser);\n-     * </pre>\n-     * \n-     * <p>If the first msgObject is a String, the {@code MessageFormat} will be used to construct the message</p>\n-     * <p>Otherwise the message in the exception is 'Validation failed: ' followed by all given  \n-     * parameters delimited with spaces.</p>\n-     * \n-     * @param object Object to validate\n-     * @param msgObjects additional Objects added as text message to the InvalidArgumentException\n-     */\n-    public static void notNull(Object object, Object... msgObjects) {\n-        if (object == null) {\n-            throw new IllegalArgumentException(getMessage(msgObjects));\n-        }\n-    }   \n-\n     // notEmpty array\n     //---------------------------------------------------------------------------------\n \n         notEmpty(array, \"The validated array is empty\");\n     }\n \n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument array is empty (<code>null</code> or no elements).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myArray, \"This happens while processing user {0}, currentUser);\n-     * </pre>\n-     *\n-     * <p>If the first msgObject is a String, the {@code MessageFormat} will be used to construct the message</p>\n-     * <p>Otherwise the message in the exception is 'Validation failed: ' followed by all given  \n-     * parameters delimited with spaces.</p>\n-     * \n-     * @param array  the array to check is not empty\n-     * @param msgObjects additional Objects added as text message to the InvalidArgumentException\n-     * @throws IllegalArgumentException if the array is empty\n-     */\n-    public static void notEmpty(Object[] array, Object... msgObjects) {\n-        notEmpty(array, getMessage(msgObjects));\n-    }\n-\n     // notEmpty collection\n     //---------------------------------------------------------------------------------\n \n         notEmpty(collection, \"The validated collection is empty\");\n     }\n \n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument Collection is empty (<code>null</code> or no elements).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myCollection, \"This happens while processing user {0}, currentUser);\n-     * </pre>\n-     *\n-     * <p>If the first msgObject is a String, the {@code MessageFormat} will be used to construct the message</p>\n-     * <p>Otherwise the message in the exception is 'Validation failed: ' followed by all given  \n-     * parameters delimited with spaces.</p>\n-     * \n-     * @param collection  the collection to check is not empty\n-     * @param msgObjects additional Objects added as text message to the InvalidArgumentException\n-     * @throws IllegalArgumentException if the collection is empty\n-     */\n-    public static void notEmpty(Collection<?> collection, Object... msgObjects) {\n-        notEmpty(collection, getMessage(msgObjects));\n-    }\n-\n     // notEmpty map\n     //---------------------------------------------------------------------------------\n \n         notEmpty(map, \"The validated map is empty\");\n     }\n \n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument Map is empty (<code>null</code> or no elements).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myMap, \"This happens while processing user {0}, currentUser);\n-     * </pre>\n-     *\n-     * <p>If the first msgObject is a String, the {@code MessageFormat} will be used to construct the message</p>\n-     * <p>Otherwise the message in the exception is 'Validation failed: ' followed by all given  \n-     * parameters delimited with spaces.</p>\n-     * \n-     * @param map  the map to check is not empty\n-     * @param msgObjects additional Objects added as text message to the InvalidArgumentException\n-     * @throws IllegalArgumentException if the map is empty\n-     */\n-    public static void notEmpty(Map<?,?> map, Object... msgObjects) {\n-        notEmpty(map, getMessage(msgObjects));\n-    }\n-\n     // notEmpty string\n     //---------------------------------------------------------------------------------\n \n      */\n     public static void notEmpty(String string) {\n         notEmpty(string, \"The validated string is empty\");\n-    }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument String is empty (<code>null</code> or zero length).</p>\n-     *\n-     * <pre>\n-     * Validate.notEmpty(myString);\n-     * </pre>\n-     *\n-     * <p>If the first msgObject is a String, the {@code MessageFormat} will be used to construct the message</p>\n-     * <p>Otherwise the message in the exception is 'Validation failed: ' followed by all given  \n-     * parameters delimited with spaces.</p>\n-     * \n-     * @param string  the string to check is not empty\n-     * @param msgObjects additional Objects added as text message to the InvalidArgumentException\n-     * @throws IllegalArgumentException if the string is empty\n-     */\n-    public static void notEmpty(String string, Object... msgObjects) {\n-        notEmpty(string, getMessage(msgObjects));\n     }\n \n     // notNullElements array\n         for (int i = 0; i < array.length; i++) {\n             if (array[i] == null) {\n                 throw new IllegalArgumentException(\"The validated array contains null element at index: \" + i);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument array has <code>null</code> elements or is\n-     * <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.noNullElements(myArray);\n-     * </pre>\n-     *\n-     * <p>If the first msgObject is a String, the {@code MessageFormat} will be used to construct the message</p>\n-     * <p>Otherwise the message in the exception is 'Validation failed: ' followed by all given  \n-     * parameters delimited with spaces.</p>\n-     *\n-     * <p>If the array is null then the message in the exception is 'The validated object is null'.</p>\n-     * \n-     * @param array  the array to check\n-     * @param msgObjects additional Objects added as text message to the InvalidArgumentException\n-     * @throws IllegalArgumentException if the array has <code>null</code>\n-     *  elements or is <code>null</code>\n-     */\n-    public static void noNullElements(Object[] array, Object... msgObjects) {\n-        Validate.notNull(array);\n-        for (int i = 0; i < array.length; i++) {\n-            if (array[i] == null) {\n-                //X TODO maybe we can add 'i' as 0-th element? \n-                throw new IllegalArgumentException(getMessage(msgObjects));\n             }\n         }\n     }\n             }\n         }\n     }\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument Collection has <code>null</code> elements or is\n-     * <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.noNullElements(myCollection);\n-     * </pre>\n-     *\n-     * <p>If the first msgObject is a String, the {@code MessageFormat} will be used to construct the message</p>\n-     * <p>Otherwise the message in the exception is 'Validation failed: ' followed by all given  \n-     * parameters delimited with spaces.</p>\n-     *\n-     * <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>\n-     * \n-     * @param collection  the collection to check\n-     * @param msgObjects additional Objects added as text message to the InvalidArgumentException\n-     * @throws IllegalArgumentException if the collection has\n-     *  <code>null</code> elements or is <code>null</code>\n-     */\n-    public static void noNullElements(Collection collection, Object... msgObjects) {\n-        Validate.notNull(collection);\n-        int i = 0;\n-        for (Iterator it = collection.iterator(); it.hasNext(); i++) {\n-            if (it.next() == null) {\n-                //X TODO how about adding 'i' as 0-th element?\n-                throw new IllegalArgumentException(getMessage(msgObjects));\n-            }\n-        }\n-    }\n-\n-\n-    // allElementsOfType collection\n-    //---------------------------------------------------------------------------------\n \n     /**\n      * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n         }\n     }\n \n-    /**\n-     * <p>\n-     * Validate an argument, throwing <code>IllegalArgumentException</code> if the argument collection is\n-     * <code>null</code> or has elements that are not of type <code>clazz</code> or a subclass.\n-     * </p>\n-     * \n-     * <pre>\n-     * Validate.allElementsOfType(collection, String.class);\n-     * </pre>\n-     * \n-     * <p>\n-     * The message in the exception is 'The validated collection contains an element not of type clazz at index: '.\n-     * </p>\n-     * \n-     * @param collection\n-     *            the collection to check, not null\n-     * @param clazz\n-     *            the <code>Class</code> which the collection's elements are expected to be, not null\n-     * @since 2.1\n-     */\n-    public static void allElementsOfType(Collection collection, Class clazz, Object... msgObjects) {\n-        Validate.notNull(collection);\n-        Validate.notNull(clazz);\n-        int i = 0;\n-        for (Iterator it = collection.iterator(); it.hasNext(); i++) {\n-            if (clazz.isInstance(it.next()) == false) {\n-                //X TODO how to add clazz.getName() and i?\n-                throw new IllegalArgumentException(getMessage(msgObjects));\n-            }\n-        }\n-    }\n-\n-    // private helper functions\n-    //---------------------------------------------------------------------------------\n-\n-    \n-    /**\n-     * private helper function to create an error message from the given Objects\n-     * If the first object in msgObjects is of type {@code String} then \n-     * {@code MessageFormat} will be used to format the output message.\n-     * \n-     * @param msgObjects\n-     * @return concatenated String representation of all the objects\n-     */\n-    private static String getMessage(Object... msgObjects) {\n-        if (msgObjects.length > 0 && msgObjects[0] instanceof String) {\n-            String message = (String) msgObjects[0];\n-            if (msgObjects.length == 2 && !message.matches(\"[^\\\\{]*\\\\{\\\\d*\\\\}.*\")) {\n-                // if it doesn't contain {0}, {1} etc we simply use string concatenation \n-                return message + msgObjects[1]; // no space between to act like original function!\n-            }\n-            \n-            MessageFormat form = new MessageFormat((String) msgObjects[0]);\n-            Object[] params = new Object[msgObjects.length - 1];\n-            System.arraycopy(msgObjects, 1, params, 0, msgObjects.length - 1);\n-            return form.format(params);\n-        }\n-        else {\n-            StringBuffer sb = new StringBuffer(\"Validation failed: [\");\n-            for(int i = 0; i < msgObjects.length; i++) {\n-                if (i > 0) {\n-                    sb.append(' ');\n-                }\n-                sb.append(msgObjects[i]);\n-            }\n-            sb.append(']');\n-            return sb.toString();\n-        }\n-    }\n-\n }", "timestamp": 1252278028, "metainfo": ""}