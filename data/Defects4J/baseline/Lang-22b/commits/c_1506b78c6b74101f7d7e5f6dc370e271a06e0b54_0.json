{"sha": "1506b78c6b74101f7d7e5f6dc370e271a06e0b54", "log": "move/comment SuppressWarnings(unchecked)/refactor surrounding code  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n import org.apache.commons.lang3.ClassUtils;\n \n /**\n- * <p> Utility reflection methods focussed on constructors, modelled after {@link MethodUtils}. </p>\n- *\n- * <h3>Known Limitations</h3>\n- * <h4>Accessing Public Constructors In A Default Access Superclass</h4>\n- * <p>There is an issue when invoking public constructors contained in a default access superclass.\n- * Reflection locates these constructors fine and correctly assigns them as public.\n- * However, an <code>IllegalAccessException</code> is thrown if the constructors is invoked.</p>\n- *\n- * <p><code>ConstructorUtils</code> contains a workaround for this situation.\n- * It will attempt to call <code>setAccessible</code> on this constructor.\n- * If this call succeeds, then the method can be invoked as normal.\n- * This call will only succeed when the application has sufficient security privilages.\n- * If this call fails then a warning will be logged and the method may fail.</p>\n- *\n+ * <p> Utility reflection methods focussed on constructors, modelled after\n+ * {@link MethodUtils}. </p>\n+ * \n+ * <h3>Known Limitations</h3> <h4>Accessing Public Constructors In A Default\n+ * Access Superclass</h4> <p>There is an issue when invoking public constructors\n+ * contained in a default access superclass. Reflection locates these\n+ * constructors fine and correctly assigns them as public. However, an\n+ * <code>IllegalAccessException</code> is thrown if the constructors is\n+ * invoked.</p>\n+ * \n+ * <p><code>ConstructorUtils</code> contains a workaround for this situation. It\n+ * will attempt to call <code>setAccessible</code> on this constructor. If this\n+ * call succeeds, then the method can be invoked as normal. This call will only\n+ * succeed when the application has sufficient security privilages. If this call\n+ * fails then a warning will be logged and the method may fail.</p>\n+ * \n  * @author Apache Software Foundation\n  * @author Craig R. McClanahan\n  * @author Ralph Schaer\n public class ConstructorUtils {\n \n     /**\n-     * <p>ConstructorUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as\n+     * <p>ConstructorUtils instances should NOT be constructed in standard\n+     * programming. Instead, the class should be used as\n      * <code>ConstructorUtils.invokeConstructor(cls, args)</code>.</p>\n-     *\n+     * \n      * <p>This constructor is public to permit tools that require a JavaBean\n      * instance to operate.</p>\n      */\n     }\n \n     /**\n-     * <p>Returns new instance of <code>klazz</code> created using the actual arguments <code>args</code>.\n-     * The formal parameter types are inferred from the actual values of <code>args</code>.\n-     * See {@link #invokeExactConstructor(Class, Object[], Class[])} for more details.</p>\n-     *\n+     * <p>Returns new instance of <code>klazz</code> created using the actual\n+     * arguments <code>args</code>. The formal parameter types are inferred from\n+     * the actual values of <code>args</code>. See\n+     * {@link #invokeExactConstructor(Class, Object[], Class[])} for more\n+     * details.</p>\n+     * \n      * <p>The signatures should be assignment compatible.</p>\n-     *\n-     * @param cls the class to be constructed.\n-     * @param args actual argument array\n-     * @return new instance of <code>klazz</code>\n-     *\n+     * \n+     * @param cls the class to be constructed.\n+     * @param args actual argument array\n+     * @return new instance of <code>klazz</code>\n+     * \n      * @throws NoSuchMethodException If the constructor cannot be found\n-     * @throws IllegalAccessException If an error occurs accessing the constructor\n-     * @throws InvocationTargetException If an error occurs invoking the constructor\n+     * @throws IllegalAccessException If an error occurs accessing the\n+     * constructor\n+     * @throws InvocationTargetException If an error occurs invoking the\n+     * constructor\n      * @throws InstantiationException If an error occurs instantiating the class\n-     *\n-     * @see #invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])\n+     * \n+     * @see #invokeConstructor(java.lang.Class, java.lang.Object[],\n+     * java.lang.Class[])\n      */\n     public static <T> T invokeConstructor(Class<T> cls, Object... args)\n-            throws NoSuchMethodException, IllegalAccessException,\n-            InvocationTargetException, InstantiationException {\n+            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException,\n+            InstantiationException {\n         if (null == args) {\n             args = ArrayUtils.EMPTY_OBJECT_ARRAY;\n         }\n \n     /**\n      * <p>Returns new instance of <code>klazz</code> created using constructor\n-     * with signature <code>parameterTypes</code> and actual arguments <code>args</code>.</p>\n-     *\n+     * with signature <code>parameterTypes</code> and actual arguments\n+     * <code>args</code>.</p>\n+     * \n      * <p>The signatures should be assignment compatible.</p>\n-     *\n+     * \n      * @param cls the class to be constructed.\n      * @param args actual argument array\n      * @param parameterTypes parameter types array\n      * @return new instance of <code>klazz</code>\n-     *\n+     * \n      * @throws NoSuchMethodException if matching constructor cannot be found\n      * @throws IllegalAccessException thrown on the constructor's invocation\n      * @throws InvocationTargetException thrown on the constructor's invocation\n      * @throws InstantiationException thrown on the constructor's invocation\n      * @see Constructor#newInstance\n      */\n-    public static <T> T invokeConstructor(Class<T> cls, Object[] args,\n-            Class<?>[] parameterTypes) throws NoSuchMethodException,\n-            IllegalAccessException, InvocationTargetException,\n+    public static <T> T invokeConstructor(Class<T> cls, Object[] args, Class<?>[] parameterTypes)\n+            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException,\n             InstantiationException {\n         if (parameterTypes == null) {\n             parameterTypes = ArrayUtils.EMPTY_CLASS_ARRAY;\n         }\n         Constructor<T> ctor = getMatchingAccessibleConstructor(cls, parameterTypes);\n         if (null == ctor) {\n-            throw new NoSuchMethodException(\n-                    \"No such accessible constructor on object: \"\n-                            + cls.getName());\n+            throw new NoSuchMethodException(\"No such accessible constructor on object: \"\n+                    + cls.getName());\n         }\n         return ctor.newInstance(args);\n     }\n \n     /**\n-     * <p>Returns new instance of <code>klazz</code> created using the actual arguments <code>args</code>.\n-     * The formal parameter types are inferred from the actual values of <code>args</code>.\n-     * See {@link #invokeExactConstructor(Class, Object[], Class[])} for more details.</p>\n-     *\n+     * <p>Returns new instance of <code>klazz</code> created using the actual\n+     * arguments <code>args</code>. The formal parameter types are inferred from\n+     * the actual values of <code>args</code>. See\n+     * {@link #invokeExactConstructor(Class, Object[], Class[])} for more\n+     * details.</p>\n+     * \n      * <p>The signatures should match exactly.</p>\n-     *\n-     * @param cls the class to be constructed.\n-     * @param args actual argument array\n-     * @return new instance of <code>klazz</code>\n-     *\n+     * \n+     * @param cls the class to be constructed.\n+     * @param args actual argument array\n+     * @return new instance of <code>klazz</code>\n+     * \n      * @throws NoSuchMethodException If the constructor cannot be found\n-     * @throws IllegalAccessException If an error occurs accessing the constructor\n-     * @throws InvocationTargetException If an error occurs invoking the constructor\n+     * @throws IllegalAccessException If an error occurs accessing the\n+     * constructor\n+     * @throws InvocationTargetException If an error occurs invoking the\n+     * constructor\n      * @throws InstantiationException If an error occurs instantiating the class\n-     *\n-     * @see #invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])\n+     * \n+     * @see #invokeExactConstructor(java.lang.Class, java.lang.Object[],\n+     * java.lang.Class[])\n      */\n     public static <T> T invokeExactConstructor(Class<T> cls, Object... args)\n-            throws NoSuchMethodException, IllegalAccessException,\n-            InvocationTargetException, InstantiationException {\n+            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException,\n+            InstantiationException {\n         if (null == args) {\n             args = ArrayUtils.EMPTY_OBJECT_ARRAY;\n         }\n      * <p>Returns new instance of <code>klazz</code> created using constructor\n      * with signature <code>parameterTypes</code> and actual arguments\n      * <code>args</code>.</p>\n-     *\n+     * \n      * <p>The signatures should match exactly.</p>\n-     *\n+     * \n      * @param cls the class to be constructed.\n      * @param args actual argument array\n      * @param parameterTypes parameter types array\n      * @return new instance of <code>klazz</code>\n-     *\n+     * \n      * @throws NoSuchMethodException if matching constructor cannot be found\n      * @throws IllegalAccessException thrown on the constructor's invocation\n      * @throws InvocationTargetException thrown on the constructor's invocation\n      * @see Constructor#newInstance\n      */\n     public static <T> T invokeExactConstructor(Class<T> cls, Object[] args,\n-            Class<?>[] parameterTypes) throws NoSuchMethodException,\n-            IllegalAccessException, InvocationTargetException,\n-            InstantiationException {\n+            Class<?>[] parameterTypes) throws NoSuchMethodException, IllegalAccessException,\n+            InvocationTargetException, InstantiationException {\n         if (args == null) {\n             args = ArrayUtils.EMPTY_OBJECT_ARRAY;\n         }\n         }\n         Constructor<T> ctor = getAccessibleConstructor(cls, parameterTypes);\n         if (null == ctor) {\n-            throw new NoSuchMethodException(\n-                    \"No such accessible constructor on object: \"\n-                            + cls.getName());\n+            throw new NoSuchMethodException(\"No such accessible constructor on object: \"\n+                    + cls.getName());\n         }\n         return ctor.newInstance(args);\n     }\n      */\n     public static <T> Constructor<T> getAccessibleConstructor(Constructor<T> ctor) {\n         return MemberUtils.isAccessible(ctor)\n-                && Modifier.isPublic(ctor.getDeclaringClass().getModifiers()) ? ctor\n-                : null;\n-    }\n-\n-    /**\n-     * <p>Find an accessible constructor with compatible parameters.\n-     * Compatible parameters mean that every method parameter is assignable from\n-     * the given parameters. In other words, it finds constructor that will take\n-     * the parameters given.</p>\n-     *\n+                && Modifier.isPublic(ctor.getDeclaringClass().getModifiers()) ? ctor : null;\n+    }\n+\n+    /**\n+     * <p>Find an accessible constructor with compatible parameters. Compatible\n+     * parameters mean that every method parameter is assignable from the given\n+     * parameters. In other words, it finds constructor that will take the\n+     * parameters given.</p>\n+     * \n      * <p>First it checks if there is constructor matching the exact signature.\n-     * If no such, all the constructors of the class are tested if their signatures\n-     * are assignment compatible with the parameter types.\n-     * The first matching constructor is returned.</p>\n-     *\n+     * If no such, all the constructors of the class are tested if their\n+     * signatures are assignment compatible with the parameter types. The first\n+     * matching constructor is returned.</p>\n+     * \n      * @param cls find constructor for this class\n      * @param parameterTypes find method with compatible parameters\n-     * @return a valid Constructor object. If there's no matching constructor, returns <code>null</code>.\n+     * @return a valid Constructor object. If there's no matching constructor,\n+     * returns <code>null</code>.\n      */\n     public static <T> Constructor<T> getMatchingAccessibleConstructor(Class<T> cls,\n             Class<?>... parameterTypes) {\n         } catch (NoSuchMethodException e) { /* SWALLOW */\n         }\n         Constructor<T> result = null;\n-        // search through all constructors\n-        Constructor<?>[] ctors = cls.getConstructors();\n-        for (int i = 0; i < ctors.length; i++) {\n+        /*\n+         * Class.getConstructors() is documented to return Constructor<T> so as\n+         * long as the array is not subsequently modified, everything's fine:\n+         */\n+        @SuppressWarnings(\"unchecked\")\n+        Constructor<T>[] ctors = (Constructor<T>[]) cls.getConstructors();\n+\n+        // return best match:\n+        for (Constructor<T> ctor : ctors) {\n             // compare parameters\n-            if (ClassUtils.isAssignable(parameterTypes, ctors[i]\n-                    .getParameterTypes(), true)) {\n-                // get accessible version of method\n-                @SuppressWarnings(\"unchecked\") // TODO is this OK? If so, why?\n-                Constructor<T> ctor = getAccessibleConstructor((Constructor<T>) ctors[i]);\n+            if (ClassUtils.isAssignable(parameterTypes, ctor.getParameterTypes(), true)) {\n+                // get accessible version of constructor\n+                ctor = getAccessibleConstructor(ctor);\n                 if (ctor != null) {\n                     MemberUtils.setAccessibleWorkaround(ctor);\n                     if (result == null\n-                            || MemberUtils.compareParameterTypes(ctor\n-                                    .getParameterTypes(), result\n+                            || MemberUtils.compareParameterTypes(ctor.getParameterTypes(), result\n                                     .getParameterTypes(), parameterTypes) < 0) {\n                         result = ctor;\n                     }", "timestamp": 1281370854, "metainfo": ""}