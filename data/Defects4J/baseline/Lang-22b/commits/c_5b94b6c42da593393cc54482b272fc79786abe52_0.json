{"sha": "5b94b6c42da593393cc54482b272fc79786abe52", "log": "Move test source into src/test/java  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3;\n+\n+import java.util.Arrays;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests ArrayUtils add methods.\n+ *\n+ * @author Gary D. Gregory\n+ * @version $Id$\n+ */\n+public class ArrayUtilsAddTest extends TestCase {\n+\n+    public void testJira567(){\n+        Number[] n;\n+        // Valid array construction\n+        n = ArrayUtils.addAll(new Number[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});\n+        assertEquals(2,n.length);\n+        assertEquals(Number.class,n.getClass().getComponentType());\n+        try {\n+            // Invalid - can't store Long in Integer array\n+               n = ArrayUtils.addAll(new Integer[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)});\n+               fail(\"Should have generated IllegalArgumentException\");\n+        } catch (IllegalArgumentException expected) {\n+        }\n+    }\n+\n+    public void testAddObjectArrayBoolean() {\n+        boolean[] newArray;\n+        newArray = ArrayUtils.add((boolean[])null, false);\n+        assertTrue(Arrays.equals(new boolean[]{false}, newArray));\n+        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((boolean[])null, true);\n+        assertTrue(Arrays.equals(new boolean[]{true}, newArray));\n+        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n+        boolean[] array1 = new boolean[]{true, false, true};\n+        newArray = ArrayUtils.add(array1, false);\n+        assertTrue(Arrays.equals(new boolean[]{true, false, true, false}, newArray));\n+        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n+    public void testAddObjectArrayByte() {\n+        byte[] newArray;\n+        newArray = ArrayUtils.add((byte[])null, (byte)0);\n+        assertTrue(Arrays.equals(new byte[]{0}, newArray));\n+        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((byte[])null, (byte)1);\n+        assertTrue(Arrays.equals(new byte[]{1}, newArray));\n+        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n+        byte[] array1 = new byte[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, (byte)0);\n+        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, (byte)4);\n+        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n+    public void testAddObjectArrayChar() {\n+        char[] newArray;\n+        newArray = ArrayUtils.add((char[])null, (char)0);\n+        assertTrue(Arrays.equals(new char[]{0}, newArray));\n+        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((char[])null, (char)1);\n+        assertTrue(Arrays.equals(new char[]{1}, newArray));\n+        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n+        char[] array1 = new char[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, (char)0);\n+        assertTrue(Arrays.equals(new char[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, (char)4);\n+        assertTrue(Arrays.equals(new char[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n+    public void testAddObjectArrayDouble() {\n+        double[] newArray;\n+        newArray = ArrayUtils.add((double[])null, 0);\n+        assertTrue(Arrays.equals(new double[]{0}, newArray));\n+        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((double[])null, 1);\n+        assertTrue(Arrays.equals(new double[]{1}, newArray));\n+        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n+        double[] array1 = new double[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, 0);\n+        assertTrue(Arrays.equals(new double[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, 4);\n+        assertTrue(Arrays.equals(new double[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n+    public void testAddObjectArrayFloat() {\n+        float[] newArray;\n+        newArray = ArrayUtils.add((float[])null, 0);\n+        assertTrue(Arrays.equals(new float[]{0}, newArray));\n+        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((float[])null, 1);\n+        assertTrue(Arrays.equals(new float[]{1}, newArray));\n+        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n+        float[] array1 = new float[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, 0);\n+        assertTrue(Arrays.equals(new float[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, 4);\n+        assertTrue(Arrays.equals(new float[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n+    public void testAddObjectArrayInt() {\n+        int[] newArray;\n+        newArray = ArrayUtils.add((int[])null, 0);\n+        assertTrue(Arrays.equals(new int[]{0}, newArray));\n+        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((int[])null, 1);\n+        assertTrue(Arrays.equals(new int[]{1}, newArray));\n+        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n+        int[] array1 = new int[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, 0);\n+        assertTrue(Arrays.equals(new int[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, 4);\n+        assertTrue(Arrays.equals(new int[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n+    public void testAddObjectArrayLong() {\n+        long[] newArray;\n+        newArray = ArrayUtils.add((long[])null, 0);\n+        assertTrue(Arrays.equals(new long[]{0}, newArray));\n+        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((long[])null, 1);\n+        assertTrue(Arrays.equals(new long[]{1}, newArray));\n+        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n+        long[] array1 = new long[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, 0);\n+        assertTrue(Arrays.equals(new long[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, 4);\n+        assertTrue(Arrays.equals(new long[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n+    public void testAddObjectArrayShort() {\n+        short[] newArray;\n+        newArray = ArrayUtils.add((short[])null, (short)0);\n+        assertTrue(Arrays.equals(new short[]{0}, newArray));\n+        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((short[])null, (short)1);\n+        assertTrue(Arrays.equals(new short[]{1}, newArray));\n+        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n+        short[] array1 = new short[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, (short)0);\n+        assertTrue(Arrays.equals(new short[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, (short)4);\n+        assertTrue(Arrays.equals(new short[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n+    public void testAddObjectArrayObject() {\n+        Object[] newArray;\n+        newArray = ArrayUtils.add((Object[])null, null);\n+        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n+        assertEquals(Object.class, newArray.getClass().getComponentType());\n+\n+        //show that not casting is okay\n+        newArray = ArrayUtils.add(null, null);\n+        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n+        assertEquals(Object.class, newArray.getClass().getComponentType());\n+\n+        newArray = ArrayUtils.add((Object[])null, \"a\");\n+        assertTrue(Arrays.equals((new String[]{\"a\"}), newArray));\n+        assertTrue(Arrays.equals((new Object[]{\"a\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+\n+        //show that not casting to Object[] is okay and will assume String based on \"a\"\n+        String[] newStringArray = ArrayUtils.add(null, \"a\");\n+        assertTrue(Arrays.equals((new String[]{\"a\"}), newStringArray));\n+        assertTrue(Arrays.equals((new Object[]{\"a\"}), newStringArray));\n+        assertEquals(String.class, newStringArray.getClass().getComponentType());\n+\n+        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n+        newArray = ArrayUtils.add(stringArray1, null);\n+        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", null}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+\n+        newArray = ArrayUtils.add(stringArray1, \"d\");\n+        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+\n+        Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n+        newArray = ArrayUtils.add(numberArray1, new Float(3));\n+        assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n+        assertEquals(Number.class, newArray.getClass().getComponentType());\n+\n+        numberArray1 = null;\n+        newArray = ArrayUtils.add(numberArray1, new Float(3));\n+        assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n+        assertEquals(Float.class, newArray.getClass().getComponentType());\n+\n+        newArray = ArrayUtils.add(numberArray1, null);\n+        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n+        assertEquals(Object.class, newArray.getClass().getComponentType());\n+    }\n+\n+    public void testAddObjectArrayToObjectArray() {\n+        assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null));\n+        Object[] newArray;\n+        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n+        String[] stringArray2 = new String[]{\"1\", \"2\", \"3\"};\n+        newArray = ArrayUtils.addAll(stringArray1, (String[]) null);\n+        assertNotSame(stringArray1, newArray);\n+        assertTrue(Arrays.equals(stringArray1, newArray));\n+        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.addAll(null, stringArray2);\n+        assertNotSame(stringArray2, newArray);\n+        assertTrue(Arrays.equals(stringArray2, newArray));\n+        assertTrue(Arrays.equals((new String[]{\"1\", \"2\", \"3\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.addAll(stringArray1, stringArray2);\n+        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n+        assertTrue(Arrays.equals((new String[]{}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n+        assertTrue(Arrays.equals((new String[]{}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n+        assertTrue(Arrays.equals((new String[]{}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        String[] stringArrayNull = new String []{null};\n+        newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);\n+        assertTrue(Arrays.equals((new String[]{null, null}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+\n+        // boolean\n+        assertTrue( Arrays.equals( new boolean[] { true, false, false, true },\n+            ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) );\n+\n+        assertTrue( Arrays.equals( new boolean[] { false, true },\n+            ArrayUtils.addAll( null, new boolean[] { false, true } ) ) );\n+\n+        assertTrue( Arrays.equals( new boolean[] { true, false },\n+            ArrayUtils.addAll( new boolean[] { true, false }, null ) ) );\n+\n+        // char\n+        assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' },\n+            ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) );\n+\n+        assertTrue( Arrays.equals( new char[] { 'c', 'd' },\n+            ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) );\n+\n+        assertTrue( Arrays.equals( new char[] { 'a', 'b' },\n+            ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) );\n+\n+        // byte\n+        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 },\n+            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) );\n+\n+        assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 },\n+            ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) );\n+\n+        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 },\n+            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) );\n+\n+        // short\n+        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 },\n+            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) );\n+\n+        assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 },\n+            ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) );\n+\n+        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 },\n+            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) );\n+\n+        // int\n+        assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 },\n+            ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) );\n+\n+        assertTrue( Arrays.equals( new int[] { -1000, -1 },\n+            ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) );\n+\n+        assertTrue( Arrays.equals( new int[] { 1, 1000 },\n+            ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) );\n+\n+        // long\n+        assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L },\n+            ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) );\n+\n+        assertTrue( Arrays.equals( new long[] { 1000L, -1000L },\n+            ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) );\n+\n+        assertTrue( Arrays.equals( new long[] { 1L, -1L },\n+            ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) );\n+\n+        // float\n+        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f },\n+            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) );\n+\n+        assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f },\n+            ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) );\n+\n+        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f },\n+            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) );\n+\n+        // double\n+        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 },\n+            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) );\n+\n+        assertTrue( Arrays.equals( new double[] { 0, 9.99 },\n+            ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) );\n+\n+        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI },\n+            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) );\n+\n+    }\n+\n+    public void testAddObjectAtIndex() {\n+        Object[] newArray;\n+        newArray = ArrayUtils.add((Object[])null, 0, null);\n+        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n+        assertEquals(Object.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((Object[])null, 0, \"a\");\n+        assertTrue(Arrays.equals((new String[]{\"a\"}), newArray));\n+        assertTrue(Arrays.equals((new Object[]{\"a\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n+        newArray = ArrayUtils.add(stringArray1, 0, null);\n+        assertTrue(Arrays.equals((new String[]{null, \"a\", \"b\", \"c\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(stringArray1, 1, null);\n+        assertTrue(Arrays.equals((new String[]{\"a\", null, \"b\", \"c\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(stringArray1, 3, null);\n+        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", null}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(stringArray1, 3, \"d\");\n+        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+\n+        Object[] o = new Object[] {\"1\", \"2\", \"4\"};\n+        Object[] result = ArrayUtils.add(o, 2, \"3\");\n+        Object[] result2 = ArrayUtils.add(o, 3, \"5\");\n+\n+        assertNotNull(result);\n+        assertEquals(4, result.length);\n+        assertEquals(\"1\", result[0]);\n+        assertEquals(\"2\", result[1]);\n+        assertEquals(\"3\", result[2]);\n+        assertEquals(\"4\", result[3]);\n+        assertNotNull(result2);\n+        assertEquals(4, result2.length);\n+        assertEquals(\"1\", result2[0]);\n+        assertEquals(\"2\", result2[1]);\n+        assertEquals(\"4\", result2[2]);\n+        assertEquals(\"5\", result2[3]);\n+\n+        // boolean tests\n+        boolean[] booleanArray = ArrayUtils.add( null, 0, true );\n+        assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) );\n+        try {\n+            booleanArray = ArrayUtils.add( null, -1, true );\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n+        booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false);\n+        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );\n+        booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true);\n+        assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );\n+        booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true);\n+        assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) );\n+        try {\n+            booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n+\n+        // char tests\n+        char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' );\n+        assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) );\n+        try {\n+            charArray = ArrayUtils.add( (char[]) null, -1, 'a' );\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n+        charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b');\n+        assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) );\n+        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c');\n+        assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) );\n+        charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k');\n+        assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) );\n+        charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't');\n+        assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) );\n+        try {\n+            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c');\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c');\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n+\n+        // short tests\n+        short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2);\n+        assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) );\n+        try {\n+            shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n+        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10);\n+        assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) );\n+        shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4);\n+        assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) );\n+        shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1);\n+        assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) );\n+        try {\n+            shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n+\n+        // byte tests\n+        byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2);\n+        assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) );\n+        try {\n+            byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n+        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3);\n+        assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) );\n+        byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1);\n+        assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) );\n+        byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1);\n+        assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) );\n+        try {\n+            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n+\n+        // int tests\n+        int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2);\n+        assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) );\n+        try {\n+            intArray = ArrayUtils.add( (int[]) null, -1, 2);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n+        intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10);\n+        assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) );\n+        intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4);\n+        assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) );\n+        intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1);\n+        assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) );\n+        try {\n+            intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n+\n+        // long tests\n+        long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L);\n+        assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) );\n+        try {\n+            longArray = ArrayUtils.add( (long[]) null, -1, 2L);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n+        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L);\n+        assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) );\n+        longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L);\n+        assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) );\n+        longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L);\n+        assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) );\n+        try {\n+            longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n+\n+        // float tests\n+        float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f);\n+        assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) );\n+        try {\n+            floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n+        floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f);\n+        assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) );\n+        floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f);\n+        assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) );\n+        floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f);\n+        assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) );\n+        try {\n+            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n+\n+        // double tests\n+        double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2);\n+        assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) );\n+        try {\n+          doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n+        doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5);\n+        assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) );\n+        doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8);\n+        assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) );\n+        doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0);\n+        assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) );\n+        try {\n+            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsRemoveTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3;\n+\n+import java.util.Arrays;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests ArrayUtils remove and removeElement methods.\n+ * \n+ * @author Maarten Coene\n+ * @version $Id$\n+ */\n+public class ArrayUtilsRemoveTest extends TestCase {\n+\n+    public void testRemoveObjectArray() {\n+        Object[] array;\n+        array = ArrayUtils.remove(new Object[] {\"a\"}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 0);\n+        assertTrue(Arrays.equals(new Object[] {\"b\"}, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 1);\n+        assertTrue(Arrays.equals(new Object[] {\"a\"}, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new Object[] {\"a\", \"b\", \"c\"}, 1);\n+        assertTrue(Arrays.equals(new Object[] {\"a\", \"c\"}, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new Object[] {\"a\", \"b\"}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new Object[] {\"a\", \"b\"}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((Object[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+\n+    public void testRemoveNumberArray(){\n+        Number[] inarray = {Integer.valueOf(1),Long.valueOf(2),Byte.valueOf((byte) 3)};\n+        assertEquals(3, inarray.length);\n+        Number[] outarray;\n+        outarray = ArrayUtils.remove(inarray, 1);\n+        assertEquals(2, outarray.length);\n+        assertEquals(Number.class, outarray.getClass().getComponentType());\n+        outarray = ArrayUtils.remove(outarray, 1);\n+        assertEquals(1, outarray.length);\n+        assertEquals(Number.class, outarray.getClass().getComponentType());\n+        outarray = ArrayUtils.remove(outarray, 0);\n+        assertEquals(0, outarray.length);\n+        assertEquals(Number.class, outarray.getClass().getComponentType());\n+    }\n+\n+    public void testRemoveBooleanArray() {\n+        boolean[] array;\n+        array = ArrayUtils.remove(new boolean[] {true}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new boolean[] {true, false}, 0);\n+        assertTrue(Arrays.equals(new boolean[] {false}, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new boolean[] {true, false}, 1);\n+        assertTrue(Arrays.equals(new boolean[] {true}, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new boolean[] {true, false, true}, 1);\n+        assertTrue(Arrays.equals(new boolean[] {true, true}, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new boolean[] {true, false}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new boolean[] {true, false}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((boolean[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveByteArray() {\n+        byte[] array;\n+        array = ArrayUtils.remove(new byte[] {1}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new byte[] {1, 2}, 0);\n+        assertTrue(Arrays.equals(new byte[] {2}, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new byte[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new byte[] {1}, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new byte[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new byte[] {1, 1}, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new byte[] {1, 2}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new byte[] {1, 2}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((byte[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveCharArray() {\n+        char[] array;\n+        array = ArrayUtils.remove(new char[] {'a'}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new char[] {'a', 'b'}, 0);\n+        assertTrue(Arrays.equals(new char[] {'b'}, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new char[] {'a', 'b'}, 1);\n+        assertTrue(Arrays.equals(new char[] {'a'}, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new char[] {'a', 'b', 'c'}, 1);\n+        assertTrue(Arrays.equals(new char[] {'a', 'c'}, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new char[] {'a', 'b'}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new char[] {'a', 'b'}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((char[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveDoubleArray() {\n+        double[] array;\n+        array = ArrayUtils.remove(new double[] {1}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new double[] {1, 2}, 0);\n+        assertTrue(Arrays.equals(new double[] {2}, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new double[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new double[] {1}, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new double[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new double[] {1, 1}, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new double[] {1, 2}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new double[] {1, 2}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((double[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveFloatArray() {\n+        float[] array;\n+        array = ArrayUtils.remove(new float[] {1}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new float[] {1, 2}, 0);\n+        assertTrue(Arrays.equals(new float[] {2}, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new float[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new float[] {1}, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new float[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new float[] {1, 1}, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new float[] {1, 2}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new float[] {1, 2}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((float[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveIntArray() {\n+        int[] array;\n+        array = ArrayUtils.remove(new int[] {1}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new int[] {1, 2}, 0);\n+        assertTrue(Arrays.equals(new int[] {2}, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new int[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new int[] {1}, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new int[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new int[] {1, 1}, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new int[] {1, 2}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new int[] {1, 2}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((int[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveLongArray() {\n+        long[] array;\n+        array = ArrayUtils.remove(new long[] {1}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new long[] {1, 2}, 0);\n+        assertTrue(Arrays.equals(new long[] {2}, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new long[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new long[] {1}, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new long[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new long[] {1, 1}, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new long[] {1, 2}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new long[] {1, 2}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((long[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveShortArray() {\n+        short[] array;\n+        array = ArrayUtils.remove(new short[] {1}, 0);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new short[] {1, 2}, 0);\n+        assertTrue(Arrays.equals(new short[] {2}, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new short[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new short[] {1}, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.remove(new short[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new short[] {1, 1}, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        try {\n+            ArrayUtils.remove(new short[] {1, 2}, -1);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove(new short[] {1, 2}, 2);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            ArrayUtils.remove((short[]) null, 0);\n+            fail(\"IndexOutOfBoundsException expected\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testRemoveElementObjectArray() {\n+        Object[] array;\n+        array = ArrayUtils.removeElement((Object[]) null, \"a\");\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, \"a\");\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new Object[] {\"a\"}, \"a\");\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new Object[] {\"a\", \"b\"}, \"a\");\n+        assertTrue(Arrays.equals(new Object[] {\"b\"}, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new Object[] {\"a\", \"b\", \"a\"}, \"a\");\n+        assertTrue(Arrays.equals(new Object[] {\"b\", \"a\"}, array));\n+        assertEquals(Object.class, array.getClass().getComponentType());\n+    }\n+    \n+    public void testRemoveElementBooleanArray() {\n+        boolean[] array;\n+        array = ArrayUtils.removeElement((boolean[]) null, true);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new boolean[] {true}, true);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new boolean[] {true, false}, true);\n+        assertTrue(Arrays.equals(new boolean[] {false}, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new boolean[] {true, false, true}, true);\n+        assertTrue(Arrays.equals(new boolean[] {false, true}, array));\n+        assertEquals(Boolean.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    public void testRemoveElementByteArray() {\n+        byte[] array;\n+        array = ArrayUtils.removeElement((byte[]) null, (byte) 1);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new byte[] {1}, (byte) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new byte[] {1, 2}, (byte) 1);\n+        assertTrue(Arrays.equals(new byte[] {2}, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new byte[] {1, 2, 1}, (byte) 1);\n+        assertTrue(Arrays.equals(new byte[] {2, 1}, array));\n+        assertEquals(Byte.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    public void testRemoveElementCharArray() {\n+        char[] array;\n+        array = ArrayUtils.removeElement((char[]) null, 'a');\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a');\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new char[] {'a'}, 'a');\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new char[] {'a', 'b'}, 'a');\n+        assertTrue(Arrays.equals(new char[] {'b'}, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new char[] {'a', 'b', 'a'}, 'a');\n+        assertTrue(Arrays.equals(new char[] {'b', 'a'}, array));\n+        assertEquals(Character.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    @SuppressWarnings(\"cast\")\n+    public void testRemoveElementDoubleArray() {\n+        double[] array;\n+        array = ArrayUtils.removeElement((double[]) null, (double) 1);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new double[] {1}, (double) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new double[] {1, 2}, (double) 1);\n+        assertTrue(Arrays.equals(new double[] {2}, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new double[] {1, 2, 1}, (double) 1);\n+        assertTrue(Arrays.equals(new double[] {2, 1}, array));\n+        assertEquals(Double.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    @SuppressWarnings(\"cast\")\n+    public void testRemoveElementFloatArray() {\n+        float[] array;\n+        array = ArrayUtils.removeElement((float[]) null, (float) 1);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new float[] {1}, (float) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new float[] {1, 2}, (float) 1);\n+        assertTrue(Arrays.equals(new float[] {2}, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new float[] {1, 2, 1}, (float) 1);\n+        assertTrue(Arrays.equals(new float[] {2, 1}, array));\n+        assertEquals(Float.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    public void testRemoveElementIntArray() {\n+        int[] array;\n+        array = ArrayUtils.removeElement((int[]) null, 1);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new int[] {1}, 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new int[] {1, 2}, 1);\n+        assertTrue(Arrays.equals(new int[] {2}, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new int[] {1, 2, 1}, 1);\n+        assertTrue(Arrays.equals(new int[] {2, 1}, array));\n+        assertEquals(Integer.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    @SuppressWarnings(\"cast\")\n+    public void testRemoveElementLongArray() {\n+        long[] array;\n+        array = ArrayUtils.removeElement((long[]) null, (long) 1);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new long[] {1}, (long) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new long[] {1, 2}, (long) 1);\n+        assertTrue(Arrays.equals(new long[] {2}, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new long[] {1, 2, 1}, (long) 1);\n+        assertTrue(Arrays.equals(new long[] {2, 1}, array));\n+        assertEquals(Long.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+    public void testRemoveElementShortArray() {\n+        short[] array;\n+        array = ArrayUtils.removeElement((short[]) null, (short) 1);\n+        assertNull(array);\n+        array = ArrayUtils.removeElement(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new short[] {1}, (short) 1);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new short[] {1, 2}, (short) 1);\n+        assertTrue(Arrays.equals(new short[] {2}, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+        array = ArrayUtils.removeElement(new short[] {1, 2, 1}, (short) 1);\n+        assertTrue(Arrays.equals(new short[] {2, 1}, array));\n+        assertEquals(Short.TYPE, array.getClass().getComponentType());\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.ArrayUtils}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author Moritz Petersen\n+ * @author Nikolay Metchev\n+ * @author Matthew Hawthorne\n+ * @author Tim O'Brien\n+ * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n+ * @author Fredrik Westermarck\n+ * @author Gary Gregory\n+ * @author Maarten Coene\n+ * @version $Id$\n+ */\n+public class ArrayUtilsTest extends TestCase {\n+\n+    public ArrayUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new ArrayUtils());\n+        Constructor<?>[] cons = ArrayUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(ArrayUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(ArrayUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"{}\", ArrayUtils.toString(null));\n+        assertEquals(\"{}\", ArrayUtils.toString(new Object[0]));\n+        assertEquals(\"{}\", ArrayUtils.toString(new String[0]));\n+        assertEquals(\"{<null>}\", ArrayUtils.toString(new String[] {null}));\n+        assertEquals(\"{pink,blue}\", ArrayUtils.toString(new String[] {\"pink\",\"blue\"}));\n+        \n+        assertEquals(\"<empty>\", ArrayUtils.toString(null, \"<empty>\"));\n+        assertEquals(\"{}\", ArrayUtils.toString(new Object[0], \"<empty>\"));\n+        assertEquals(\"{}\", ArrayUtils.toString(new String[0], \"<empty>\"));\n+        assertEquals(\"{<null>}\", ArrayUtils.toString(new String[] {null}, \"<empty>\"));\n+        assertEquals(\"{pink,blue}\", ArrayUtils.toString(new String[] {\"pink\",\"blue\"}, \"<empty>\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void assertIsEquals(Object array1, Object array2, Object array3) {\n+        assertEquals(true, ArrayUtils.isEquals(array1, array1));\n+        assertEquals(true, ArrayUtils.isEquals(array2, array2));\n+        assertEquals(true, ArrayUtils.isEquals(array3, array3));\n+        assertEquals(false, ArrayUtils.isEquals(array1, array2));\n+        assertEquals(false, ArrayUtils.isEquals(array2, array1));\n+        assertEquals(false, ArrayUtils.isEquals(array1, array3));\n+        assertEquals(false, ArrayUtils.isEquals(array3, array1));\n+        assertEquals(false, ArrayUtils.isEquals(array1, array2));\n+        assertEquals(false, ArrayUtils.isEquals(array2, array1));\n+    }\n+\n+    public void testIsEquals() {\n+        long[][] larray1 = new long[][]{{2, 5}, {4, 5}};\n+        long[][] larray2 = new long[][]{{2, 5}, {4, 6}};\n+        long[] larray3 = new long[]{2, 5};\n+        this.assertIsEquals(larray1, larray2, larray3);\n+\n+        int[][] iarray1 = new int[][]{{2, 5}, {4, 5}};\n+        int[][] iarray2 = new int[][]{{2, 5}, {4, 6}};\n+        int[] iarray3 = new int[]{2, 5};\n+        this.assertIsEquals(iarray1, iarray2, iarray3);\n+\n+        short[][] sarray1 = new short[][]{{2, 5}, {4, 5}};\n+        short[][] sarray2 = new short[][]{{2, 5}, {4, 6}};\n+        short[] sarray3 = new short[]{2, 5};\n+        this.assertIsEquals(sarray1, sarray2, sarray3);\n+\n+        float[][] farray1 = new float[][]{{2, 5}, {4, 5}};\n+        float[][] farray2 = new float[][]{{2, 5}, {4, 6}};\n+        float[] farray3 = new float[]{2, 5};\n+        this.assertIsEquals(farray1, farray2, farray3);\n+\n+        double[][] darray1 = new double[][]{{2, 5}, {4, 5}};\n+        double[][] darray2 = new double[][]{{2, 5}, {4, 6}};\n+        double[] darray3 = new double[]{2, 5};\n+        this.assertIsEquals(darray1, darray2, darray3);\n+\n+        byte[][] byteArray1 = new byte[][]{{2, 5}, {4, 5}};\n+        byte[][] byteArray2 = new byte[][]{{2, 5}, {4, 6}};\n+        byte[] byteArray3 = new byte[]{2, 5};\n+        this.assertIsEquals(byteArray1, byteArray2, byteArray3);\n+\n+        char[][] charArray1 = new char[][]{{2, 5}, {4, 5}};\n+        char[][] charArray2 = new char[][]{{2, 5}, {4, 6}};\n+        char[] charArray3 = new char[]{2, 5};\n+        this.assertIsEquals(charArray1, charArray2, charArray3);\n+\n+        boolean[][] barray1 = new boolean[][]{{true, false}, {true, true}};\n+        boolean[][] barray2 = new boolean[][]{{true, false}, {true, false}};\n+        boolean[] barray3 = new boolean[]{false, true};\n+        this.assertIsEquals(barray1, barray2, barray3);\n+\n+        Object[] array3 = new Object[]{new String(new char[]{'A', 'B'})};\n+        Object[] array4 = new Object[]{\"AB\"};\n+        assertEquals(true, ArrayUtils.isEquals(array3, array3));\n+        assertEquals(true, ArrayUtils.isEquals(array3, array4));\n+\n+        assertEquals(true, ArrayUtils.isEquals(null, null));\n+        assertEquals(false, ArrayUtils.isEquals(null, array4));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests generic array creation with parameters of same type.\n+     */\n+    public void testArrayCreation()\n+    {\n+        final String[] array = ArrayUtils.toArray(\"foo\", \"bar\");\n+        assertEquals(2, array.length);\n+        assertEquals(\"foo\", array[0]);\n+        assertEquals(\"bar\", array[1]);\n+    }\n+\n+    /**\n+     * Tests generic array creation with general return type.\n+     */\n+    public void testArrayCreationWithGeneralReturnType()\n+    {\n+        final Object obj = ArrayUtils.toArray(\"foo\", \"bar\");\n+        assertTrue(obj instanceof String[]);\n+    }\n+\n+    /**\n+     * Tests generic array creation with parameters of common base type.\n+     */\n+    public void testArrayCreationWithDifferentTypes()\n+    {\n+        final Number[] array = ArrayUtils.<Number>toArray(Integer.valueOf(42), Double.valueOf(Math.PI));\n+        assertEquals(2, array.length);\n+        assertEquals(Integer.valueOf(42), array[0]);\n+        assertEquals(Double.valueOf(Math.PI), array[1]);\n+    }\n+\n+    /**\n+     * Tests generic array creation with generic type.\n+     */\n+    public void testIndirectArrayCreation()\n+    {\n+        final String[] array = toArrayPropagatingType(\"foo\", \"bar\");\n+        assertEquals(2, array.length);\n+        assertEquals(\"foo\", array[0]);\n+        assertEquals(\"bar\", array[1]);\n+    }\n+\n+    /**\n+     * Tests generic empty array creation with generic type.\n+     */\n+    public void testEmptyArrayCreation()\n+    {\n+        final String[] array = ArrayUtils.<String>toArray();\n+        assertEquals(0, array.length);\n+    }\n+\n+    /**\n+     * Tests indirect generic empty array creation with generic type.\n+     */\n+    public void testIndirectEmptyArrayCreation()\n+    {\n+        final String[] array = ArrayUtilsTest.<String>toArrayPropagatingType();\n+        assertEquals(0, array.length);\n+    }\n+\n+    private static <T> T[] toArrayPropagatingType(final T... items)\n+    {\n+        return ArrayUtils.toArray(items);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToMap() {\n+        Map<?, ?> map = ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"hello\", \"world\"}});\n+        \n+        assertEquals(\"bar\", map.get(\"foo\"));\n+        assertEquals(\"world\", map.get(\"hello\"));\n+        \n+        assertEquals(null, ArrayUtils.toMap(null));\n+        try {\n+            ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"short\"}});\n+            fail(\"exception expected\");\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ArrayUtils.toMap(new Object[] {new Object[] {\"foo\", \"bar\"}, \"illegal type\"});\n+            fail(\"exception expected\");\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ArrayUtils.toMap(new Object[] {new Object[] {\"foo\", \"bar\"}, null});\n+            fail(\"exception expected\");\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        map = ArrayUtils.toMap(new Object[] {new Map.Entry<Object, Object>() {\n+            public Object getKey() {\n+                return \"foo\";\n+            }\n+            public Object getValue() {\n+                return \"bar\";\n+            }\n+            public Object setValue(Object value) {\n+                throw new UnsupportedOperationException();\n+            }\n+            @Override\n+            public boolean equals(Object o) {\n+                throw new UnsupportedOperationException();\n+            }\n+            @Override\n+            public int hashCode() {\n+                throw new UnsupportedOperationException();\n+            }\n+        }});\n+        assertEquals(\"bar\", map.get(\"foo\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClone() {\n+        assertEquals(null, ArrayUtils.clone((Object[]) null));\n+        Object[] original1 = new Object[0];\n+        Object[] cloned1 = ArrayUtils.clone(original1);\n+        assertTrue(Arrays.equals(original1, cloned1));\n+        assertTrue(original1 != cloned1);\n+        \n+        StringBuffer buf = new StringBuffer(\"pick\");\n+        original1 = new Object[] {buf, \"a\", new String[] {\"stick\"}};\n+        cloned1 = ArrayUtils.clone(original1);\n+        assertTrue(Arrays.equals(original1, cloned1));\n+        assertTrue(original1 != cloned1);\n+        assertSame(original1[0], cloned1[0]);\n+        assertSame(original1[1], cloned1[1]);\n+        assertSame(original1[2], cloned1[2]);\n+    }\n+\n+    public void testCloneBoolean() {\n+        assertEquals(null, ArrayUtils.clone((boolean[]) null));\n+        boolean[] original = new boolean[] {true, false};\n+        boolean[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneLong() {\n+        assertEquals(null, ArrayUtils.clone((long[]) null));\n+        long[] original = new long[] {0L, 1L};\n+        long[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneInt() {\n+        assertEquals(null, ArrayUtils.clone((int[]) null));\n+        int[] original = new int[] {5, 8};\n+        int[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneShort() {\n+        assertEquals(null, ArrayUtils.clone((short[]) null));\n+        short[] original = new short[] {1, 4};\n+        short[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneChar() {\n+        assertEquals(null, ArrayUtils.clone((char[]) null));\n+        char[] original = new char[] {'a', '4'};\n+        char[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneByte() {\n+        assertEquals(null, ArrayUtils.clone((byte[]) null));\n+        byte[] original = new byte[] {1, 6};\n+        byte[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneDouble() {\n+        assertEquals(null, ArrayUtils.clone((double[]) null));\n+        double[] original = new double[] {2.4d, 5.7d};\n+        double[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+    \n+    public void testCloneFloat() {\n+        assertEquals(null, ArrayUtils.clone((float[]) null));\n+        float[] original = new float[] {2.6f, 6.4f};\n+        float[] cloned = ArrayUtils.clone(original);\n+        assertTrue(Arrays.equals(original, cloned));\n+        assertTrue(original != cloned);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testSubarrayObject() {\n+        Object[] nullArray = null;\n+        Object[] objectArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};\n+\n+        assertEquals(\"0 start, mid end\", \"abcd\",\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4)));\n+        assertEquals(\"0 start, length end\", \"abcdef\",\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length)));\n+        assertEquals(\"mid start, mid end\", \"bcd\",\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4)));\n+        assertEquals(\"mid start, length end\", \"bcdef\",\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length)));\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+        assertEquals(\"empty array\", \"\",\n+            StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2)));\n+        assertEquals(\"start > end\", \"\",\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2)));\n+        assertEquals(\"start == end\", \"\",\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3)));\n+        assertEquals(\"start undershoot, normal end\", \"abcd\",\n+            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4)));\n+        assertEquals(\"start overshoot, any end\", \"\",\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4)));\n+        assertEquals(\"normal start, end overshoot\", \"cdef\",\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33)));\n+        assertEquals(\"start undershoot, end overshoot\", \"abcdef\",\n+            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12)));\n+            \n+        // array type tests\n+        Date[] dateArray = { new java.sql.Date(new Date().getTime()),\n+            new Date(), new Date(), new Date(), new Date() };\n+\n+        assertSame(\"Object type\", Object.class,\n+            ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType());\n+        assertSame(\"java.util.Date type\", java.util.Date.class,\n+            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());\n+        assertNotSame(\"java.sql.Date type\", java.sql.Date.class,\n+            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());\n+        try {\n+            @SuppressWarnings(\"unused\")\n+            java.sql.Date[] dummy = (java.sql.Date[])ArrayUtils.subarray(dateArray, 1,3);\n+            fail(\"Invalid downcast\");\n+        } catch (ClassCastException e) {}\n+    }\n+\n+    public void testSubarrayLong() {\n+        long[] nullArray = null;\n+        long[] array = { 999910, 999911, 999912, 999913, 999914, 999915 };\n+        long[] leftSubarray     = { 999910, 999911, 999912, 999913 };\n+        long[] midSubarray      = { 999911, 999912, 999913, 999914 };\n+        long[] rightSubarray    = { 999912, 999913, 999914, 999915 };\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_LONG_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_LONG_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_LONG_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_LONG_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_LONG_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_LONG_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_LONG_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_LONG_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"long type\", long.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrayInt() {\n+        int[] nullArray = null;\n+        int[] array = { 10, 11, 12, 13, 14, 15 };\n+        int[] leftSubarray  = { 10, 11, 12, 13 };\n+        int[] midSubarray   = { 11, 12, 13, 14 };\n+        int[] rightSubarray = { 12, 13, 14, 15 };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_INT_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_INT_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_INT_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_INT_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_INT_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_INT_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_INT_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_INT_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"int type\", int.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrayShort() {\n+        short[] nullArray = null;\n+        short[] array = { 10, 11, 12, 13, 14, 15 };\n+        short[] leftSubarray    = { 10, 11, 12, 13 };\n+        short[] midSubarray     = { 11, 12, 13, 14 };\n+        short[] rightSubarray   = { 12, 13, 14, 15 };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_SHORT_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_SHORT_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_SHORT_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_SHORT_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_SHORT_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_SHORT_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_SHORT_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_SHORT_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"short type\", short.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrChar() {\n+        char[] nullArray = null;\n+        char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' };\n+        char[] leftSubarray     = { 'a', 'b', 'c', 'd', };\n+        char[] midSubarray      = { 'b', 'c', 'd', 'e', };\n+        char[] rightSubarray    = { 'c', 'd', 'e', 'f', };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_CHAR_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_CHAR_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_CHAR_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_CHAR_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_CHAR_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_CHAR_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_CHAR_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_CHAR_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"char type\", char.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrayByte() {\n+        byte[] nullArray = null;\n+        byte[] array = { 10, 11, 12, 13, 14, 15 };\n+        byte[] leftSubarray     = { 10, 11, 12, 13 };\n+        byte[] midSubarray      = { 11, 12, 13, 14 };\n+        byte[] rightSubarray = { 12, 13, 14, 15 };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_BYTE_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_BYTE_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_BYTE_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_BYTE_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_BYTE_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_BYTE_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_BYTE_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_BYTE_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"byte type\", byte.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrayDouble() {\n+        double[] nullArray = null;\n+        double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 };\n+        double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, };\n+        double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, };\n+        double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"double type\", double.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrayFloat() {\n+        float[] nullArray = null;\n+        float[] array = { 10, 11, 12, 13, 14, 15 };\n+        float[] leftSubarray    = { 10, 11, 12, 13 };\n+        float[] midSubarray     = { 11, 12, 13, 14 };\n+        float[] rightSubarray   = { 12, 13, 14, 15 };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_FLOAT_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_FLOAT_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_FLOAT_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_FLOAT_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_FLOAT_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_FLOAT_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_FLOAT_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_FLOAT_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"float type\", float.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrayBoolean() {\n+        boolean[] nullArray = null;\n+        boolean[] array = { true, true, false, true, false, true };\n+        boolean[] leftSubarray  = { true, true, false, true  };\n+        boolean[] midSubarray   = { true, false, true, false };\n+        boolean[] rightSubarray = { false, true, false, true };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"boolean type\", boolean.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSameLength() {\n+        Object[] nullArray = null;\n+        Object[] emptyArray = new Object[0];\n+        Object[] oneArray = new Object[] {\"pick\"};\n+        Object[] twoArray = new Object[] {\"pick\", \"stick\"};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+\n+    public void testSameLengthBoolean() {\n+        boolean[] nullArray = null;\n+        boolean[] emptyArray = new boolean[0];\n+        boolean[] oneArray = new boolean[] {true};\n+        boolean[] twoArray = new boolean[] {true, false};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthLong() {\n+        long[] nullArray = null;\n+        long[] emptyArray = new long[0];\n+        long[] oneArray = new long[] {0L};\n+        long[] twoArray = new long[] {0L, 76L};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthInt() {\n+        int[] nullArray = null;\n+        int[] emptyArray = new int[0];\n+        int[] oneArray = new int[] {4};\n+        int[] twoArray = new int[] {5, 7};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthShort() {\n+        short[] nullArray = null;\n+        short[] emptyArray = new short[0];\n+        short[] oneArray = new short[] {4};\n+        short[] twoArray = new short[] {6, 8};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthChar() {\n+        char[] nullArray = null;\n+        char[] emptyArray = new char[0];\n+        char[] oneArray = new char[] {'f'};\n+        char[] twoArray = new char[] {'d', 't'};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthByte() {\n+        byte[] nullArray = null;\n+        byte[] emptyArray = new byte[0];\n+        byte[] oneArray = new byte[] {3};\n+        byte[] twoArray = new byte[] {4, 6};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthDouble() {\n+        double[] nullArray = null;\n+        double[] emptyArray = new double[0];\n+        double[] oneArray = new double[] {1.3d};\n+        double[] twoArray = new double[] {4.5d, 6.3d};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    public void testSameLengthFloat() {\n+        float[] nullArray = null;\n+        float[] emptyArray = new float[0];\n+        float[] oneArray = new float[] {2.5f};\n+        float[] twoArray = new float[] {6.4f, 5.8f};\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSameType() {\n+        try {\n+            ArrayUtils.isSameType(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ArrayUtils.isSameType(null, new Object[0]);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ArrayUtils.isSameType(new Object[0], null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        assertEquals(true, ArrayUtils.isSameType(new Object[0], new Object[0]));\n+        assertEquals(false, ArrayUtils.isSameType(new String[0], new Object[0]));\n+        assertEquals(true, ArrayUtils.isSameType(new String[0][0], new String[0][0]));\n+        assertEquals(false, ArrayUtils.isSameType(new String[0], new String[0][0]));\n+        assertEquals(false, ArrayUtils.isSameType(new String[0][0], new String[0]));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testReverse() {\n+        StringBuffer str1 = new StringBuffer(\"pick\");\n+        String str2 = \"a\";\n+        String[] str3 = new String[] {\"stick\"};\n+        String str4 = \"up\";\n+        \n+        Object[] array = new Object[] {str1, str2, str3};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], str3);\n+        assertEquals(array[1], str2);\n+        assertEquals(array[2], str1);\n+        \n+        array = new Object[] {str1, str2, str3, str4};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], str4);\n+        assertEquals(array[1], str3);\n+        assertEquals(array[2], str2);\n+        assertEquals(array[3], str1);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+\n+    public void testReverseLong() {\n+        long[] array = new long[] {1L, 2L, 3L};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 3L);\n+        assertEquals(array[1], 2L);\n+        assertEquals(array[2], 1L);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseInt() {\n+        int[] array = new int[] {1, 2, 3};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 3);\n+        assertEquals(array[1], 2);\n+        assertEquals(array[2], 1);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseShort() {\n+        short[] array = new short[] {1, 2, 3};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 3);\n+        assertEquals(array[1], 2);\n+        assertEquals(array[2], 1);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseChar() {\n+        char[] array = new char[] {'a', 'f', 'C'};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 'C');\n+        assertEquals(array[1], 'f');\n+        assertEquals(array[2], 'a');\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseByte() {\n+        byte[] array = new byte[] {2, 3, 4};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 4);\n+        assertEquals(array[1], 3);\n+        assertEquals(array[2], 2);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseDouble() {\n+        double[] array = new double[] {0.3d, 0.4d, 0.5d};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 0.5d, 0.0d);\n+        assertEquals(array[1], 0.4d, 0.0d);\n+        assertEquals(array[2], 0.3d, 0.0d);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseFloat() {\n+        float[] array = new float[] {0.3f, 0.4f, 0.5f};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 0.5f, 0.0f);\n+        assertEquals(array[1], 0.4f, 0.0f);\n+        assertEquals(array[2], 0.3f, 0.0f);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseBoolean() {\n+        boolean[] array = new boolean[] {false, false, true};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], true);\n+        assertEquals(array[1], false);\n+        assertEquals(array[2], false);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOf() {\n+        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n+        assertEquals(-1, ArrayUtils.indexOf(null, null));\n+        assertEquals(-1, ArrayUtils.indexOf(null, \"0\"));\n+        assertEquals(-1, ArrayUtils.indexOf(new Object[0], \"0\"));\n+        assertEquals(0, ArrayUtils.indexOf(array, \"0\"));\n+        assertEquals(1, ArrayUtils.indexOf(array, \"1\"));\n+        assertEquals(2, ArrayUtils.indexOf(array, \"2\"));\n+        assertEquals(3, ArrayUtils.indexOf(array, \"3\"));\n+        assertEquals(4, ArrayUtils.indexOf(array, null));\n+        assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\"));\n+    }\n+\n+    public void testIndexOfWithStartIndex() {\n+        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n+        assertEquals(-1, ArrayUtils.indexOf(null, null, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(new Object[0], \"0\", 0));\n+        assertEquals(-1, ArrayUtils.indexOf(null, \"0\", 2));\n+        assertEquals(5, ArrayUtils.indexOf(array, \"0\", 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, \"1\", 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, \"2\", 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, \"3\", 2));\n+        assertEquals(4, ArrayUtils.indexOf(array, null, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, \"notInArray\", 2));\n+        \n+        assertEquals(4, ArrayUtils.indexOf(array, null, -1));\n+        assertEquals(-1, ArrayUtils.indexOf(array, null, 8));\n+        assertEquals(-1, ArrayUtils.indexOf(array, \"0\", 8));\n+    }\n+\n+    public void testLastIndexOf() {\n+        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n+        assertEquals(-1, ArrayUtils.lastIndexOf(null, null));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(null, \"0\"));\n+        assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\"));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, \"1\"));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, \"2\"));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, \"3\"));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, null));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\"));\n+    }\n+\n+    public void testLastIndexOfWithStartIndex() {\n+        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n+        assertEquals(-1, ArrayUtils.lastIndexOf(null, null, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(null, \"0\", 2));\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, \"0\", 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, \"1\", 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, \"2\", 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", -1));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\", 5));\n+        \n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, null, -1));\n+        assertEquals(5, ArrayUtils.lastIndexOf(array, \"0\", 88));\n+    }\n+\n+    public void testContains() {\n+        Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n+        assertEquals(false, ArrayUtils.contains(null, null));\n+        assertEquals(false, ArrayUtils.contains(null, \"1\"));\n+        assertEquals(true, ArrayUtils.contains(array, \"0\"));\n+        assertEquals(true, ArrayUtils.contains(array, \"1\"));\n+        assertEquals(true, ArrayUtils.contains(array, \"2\"));\n+        assertEquals(true, ArrayUtils.contains(array, \"3\"));\n+        assertEquals(true, ArrayUtils.contains(array, null));\n+        assertEquals(false, ArrayUtils.contains(array, \"notInArray\"));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfLong() {\n+        long[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, 0));\n+        array = new long[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, 1));\n+        assertEquals(2, ArrayUtils.indexOf(array, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 3));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 99));\n+    }\n+\n+    public void testIndexOfLongWithStartIndex() {\n+        long[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\n+        array = new long[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n+    }\n+\n+    public void testLastIndexOfLong() {\n+        long[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\n+        array = new long[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n+    }\n+\n+    public void testLastIndexOfLongWithStartIndex() {\n+        long[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\n+        array = new long[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n+    }\n+\n+    public void testContainsLong() {\n+        long[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, 1));\n+        array = new long[] { 0, 1, 2, 3, 0 };\n+        assertEquals(true, ArrayUtils.contains(array, 0));\n+        assertEquals(true, ArrayUtils.contains(array, 1));\n+        assertEquals(true, ArrayUtils.contains(array, 2));\n+        assertEquals(true, ArrayUtils.contains(array, 3));\n+        assertEquals(false, ArrayUtils.contains(array, 99));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfInt() {\n+        int[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, 0));\n+        array = new int[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, 1));\n+        assertEquals(2, ArrayUtils.indexOf(array, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 3));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 99));\n+    }\n+\n+    public void testIndexOfIntWithStartIndex() {\n+        int[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, 0, 2));\n+        array = new int[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.indexOf(array, 0, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n+    }\n+\n+    public void testLastIndexOfInt() {\n+        int[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0));\n+        array = new int[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, 0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, 1));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, 2));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, 3));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n+    }\n+\n+    public void testLastIndexOfIntWithStartIndex() {\n+        int[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2));\n+        array = new int[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n+    }\n+\n+    public void testContainsInt() {\n+        int[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, 1));\n+        array = new int[] { 0, 1, 2, 3, 0 };\n+        assertEquals(true, ArrayUtils.contains(array, 0));\n+        assertEquals(true, ArrayUtils.contains(array, 1));\n+        assertEquals(true, ArrayUtils.contains(array, 2));\n+        assertEquals(true, ArrayUtils.contains(array, 3));\n+        assertEquals(false, ArrayUtils.contains(array, 99));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfShort() {\n+        short[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0));\n+        array = new short[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, (short) 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (short) 1));\n+        assertEquals(2, ArrayUtils.indexOf(array, (short) 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (short) 3));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99));\n+    }\n+\n+    public void testIndexOfShortWithStartIndex() {\n+        short[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 2));\n+        array = new short[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.indexOf(array, (short) 0, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, -1));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6));\n+    }\n+\n+    public void testLastIndexOfShort() {\n+        short[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0));\n+        array = new short[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\n+    }\n+\n+    public void testLastIndexOfShortWithStartIndex() {\n+        short[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2));\n+        array = new short[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88));\n+    }\n+\n+    public void testContainsShort() {\n+        short[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, (short) 1));\n+        array = new short[] { 0, 1, 2, 3, 0 };\n+        assertEquals(true, ArrayUtils.contains(array, (short) 0));\n+        assertEquals(true, ArrayUtils.contains(array, (short) 1));\n+        assertEquals(true, ArrayUtils.contains(array, (short) 2));\n+        assertEquals(true, ArrayUtils.contains(array, (short) 3));\n+        assertEquals(false, ArrayUtils.contains(array, (short) 99));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfChar() {\n+        char[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, 'a'));\n+        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n+        assertEquals(0, ArrayUtils.indexOf(array, 'a'));\n+        assertEquals(1, ArrayUtils.indexOf(array, 'b'));\n+        assertEquals(2, ArrayUtils.indexOf(array, 'c'));\n+        assertEquals(3, ArrayUtils.indexOf(array, 'd'));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 'e'));\n+    }\n+\n+    public void testIndexOfCharWithStartIndex() {\n+        char[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2));\n+        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n+        assertEquals(4, ArrayUtils.indexOf(array, 'a', 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, 'c', 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 'd', 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 'd', -1));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6));\n+    }\n+\n+    public void testLastIndexOfChar() {\n+        char[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a'));\n+        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, 'a'));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, 'b'));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, 'c'));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, 'd'));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));\n+    }\n+\n+    public void testLastIndexOfCharWithStartIndex() {\n+        char[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a', 2));\n+        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, 'a', 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, 'b', 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, 'c', 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'd', -1));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e'));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, 'a', 88));\n+    }\n+\n+    public void testContainsChar() {\n+        char[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, 'b'));\n+        array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n+        assertEquals(true, ArrayUtils.contains(array, 'a'));\n+        assertEquals(true, ArrayUtils.contains(array, 'b'));\n+        assertEquals(true, ArrayUtils.contains(array, 'c'));\n+        assertEquals(true, ArrayUtils.contains(array, 'd'));\n+        assertEquals(false, ArrayUtils.contains(array, 'e'));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfByte() {\n+        byte[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0));\n+        array = new byte[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, (byte) 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (byte) 1));\n+        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99));\n+    }\n+\n+    public void testIndexOfByteWithStartIndex() {\n+        byte[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 2));\n+        array = new byte[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.indexOf(array, (byte) 0, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6));\n+    }\n+\n+    public void testLastIndexOfByte() {\n+        byte[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0));\n+        array = new byte[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\n+    }\n+\n+    public void testLastIndexOfByteWithStartIndex() {\n+        byte[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0, 2));\n+        array = new byte[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, (byte) 0, 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88));\n+    }\n+\n+    public void testContainsByte() {\n+        byte[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, (byte) 1));\n+        array = new byte[] { 0, 1, 2, 3, 0 };\n+        assertEquals(true, ArrayUtils.contains(array, (byte) 0));\n+        assertEquals(true, ArrayUtils.contains(array, (byte) 1));\n+        assertEquals(true, ArrayUtils.contains(array, (byte) 2));\n+        assertEquals(true, ArrayUtils.contains(array, (byte) 3));\n+        assertEquals(false, ArrayUtils.contains(array, (byte) 99));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"cast\")\n+    public void testIndexOfDouble() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));\n+        array = new double[0];\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, (double) 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (double) 1));\n+        assertEquals(2, ArrayUtils.indexOf(array, (double) 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 3));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, -1));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));\n+    }\n+\n+    @SuppressWarnings(\"cast\")\n+    public void testIndexOfDoubleTolerance() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\n+        array = new double[0];\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, (double) 0.3));\n+        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, (double) 0.35));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, (double) 2.0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001));\n+    }\n+\n+    @SuppressWarnings(\"cast\")\n+    public void testIndexOfDoubleWithStartIndex() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));\n+        array = new double[0];\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 1, 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, (double) 2, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 99, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6));\n+    }\n+    \n+    @SuppressWarnings(\"cast\")\n+    public void testIndexOfDoubleWithStartIndexTolerance() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));\n+        array = new double[0];\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3));\n+        assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3));\n+        assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3));\n+        assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001));\n+    }\n+\n+    @SuppressWarnings(\"cast\")\n+    public void testLastIndexOfDouble() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));\n+        array = new double[0];\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 3));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));\n+    }\n+\n+    @SuppressWarnings(\"cast\")\n+    public void testLastIndexOfDoubleTolerance() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\n+        array = new double[0];\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001));\n+    }\n+\n+    @SuppressWarnings(\"cast\")\n+    public void testLastIndexOfDoubleWithStartIndex() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n+        array = new double[0];\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88));\n+    }\n+\n+    @SuppressWarnings(\"cast\")\n+    public void testLastIndexOfDoubleWithStartIndexTolerance() {\n+        double[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n+        array = new double[0];\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n+        array = new double[] { (double) 3 };\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3));\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, 3, (double) 0.35));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, array.length, (double) 2.0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, array.length, (double) 0.0001));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0));\n+    }\n+\n+    @SuppressWarnings(\"cast\")\n+    public void testContainsDouble() {\n+        double[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, (double) 1));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(true, ArrayUtils.contains(array, (double) 0));\n+        assertEquals(true, ArrayUtils.contains(array, (double) 1));\n+        assertEquals(true, ArrayUtils.contains(array, (double) 2));\n+        assertEquals(true, ArrayUtils.contains(array, (double) 3));\n+        assertEquals(false, ArrayUtils.contains(array, (double) 99));\n+    }\n+\n+    @SuppressWarnings(\"cast\")\n+    public void testContainsDoubleTolerance() {\n+        double[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, (double) 1, (double) 0));\n+        array = new double[] { 0, 1, 2, 3, 0 };\n+        assertEquals(false, ArrayUtils.contains(array, (double) 4.0, (double) 0.33));\n+        assertEquals(false, ArrayUtils.contains(array, (double) 2.5, (double) 0.49));\n+        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.50));\n+        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.51));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"cast\")\n+    public void testIndexOfFloat() {\n+        float[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));\n+        array = new float[0];\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));\n+        array = new float[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.indexOf(array, (float) 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, (float) 1));\n+        assertEquals(2, ArrayUtils.indexOf(array, (float) 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (float) 3));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99));\n+    }\n+\n+    @SuppressWarnings(\"cast\")\n+    public void testIndexOfFloatWithStartIndex() {\n+        float[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));\n+        array = new float[0];\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));\n+        array = new float[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.indexOf(array, (float) 0, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2));\n+        assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6));\n+    }\n+\n+    @SuppressWarnings(\"cast\")\n+    public void testLastIndexOfFloat() {\n+        float[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));\n+        array = new float[0];\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));\n+        array = new float[] { 0, 1, 2, 3, 0 };\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2));\n+        assertEquals(3, ArrayUtils.lastIndexOf(array, (float) 3));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));\n+    }\n+\n+    @SuppressWarnings(\"cast\")\n+    public void testLastIndexOfFloatWithStartIndex() {\n+        float[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n+        array = new float[0];\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n+        array = new float[] { 0, 1, 2, 3, 0 };\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1, 2));\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, -1));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));\n+        assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88));\n+    }\n+\n+    @SuppressWarnings(\"cast\")\n+    public void testContainsFloat() {\n+        float[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, (float) 1));\n+        array = new float[] { 0, 1, 2, 3, 0 };\n+        assertEquals(true, ArrayUtils.contains(array, (float) 0));\n+        assertEquals(true, ArrayUtils.contains(array, (float) 1));\n+        assertEquals(true, ArrayUtils.contains(array, (float) 2));\n+        assertEquals(true, ArrayUtils.contains(array, (float) 3));\n+        assertEquals(false, ArrayUtils.contains(array, (float) 99));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfBoolean() {\n+        boolean[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, true));\n+        array = new boolean[0];\n+        assertEquals(-1, ArrayUtils.indexOf(array, true));\n+        array = new boolean[] { true, false, true };\n+        assertEquals(0, ArrayUtils.indexOf(array, true));\n+        assertEquals(1, ArrayUtils.indexOf(array, false));\n+        array = new boolean[] { true, true };\n+        assertEquals(-1, ArrayUtils.indexOf(array, false));\n+    }\n+\n+    public void testIndexOfBooleanWithStartIndex() {\n+        boolean[] array = null;\n+        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\n+        array = new boolean[0];\n+        assertEquals(-1, ArrayUtils.indexOf(array, true, 2));\n+        array = new boolean[] { true, false, true };\n+        assertEquals(2, ArrayUtils.indexOf(array, true, 1));\n+        assertEquals(-1, ArrayUtils.indexOf(array, false, 2));\n+        assertEquals(1, ArrayUtils.indexOf(array, false, 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, false, -1));\n+        array = new boolean[] { true, true };\n+        assertEquals(-1, ArrayUtils.indexOf(array, false, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, false, -1));\n+    }\n+\n+    public void testLastIndexOfBoolean() {\n+        boolean[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\n+        array = new boolean[0];\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, true));\n+        array = new boolean[] { true, false, true };\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, true));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, false));\n+        array = new boolean[] { true, true };\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, false));\n+    }\n+\n+    public void testLastIndexOfBooleanWithStartIndex() {\n+        boolean[] array = null;\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\n+        array = new boolean[0];\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, 2));\n+        array = new boolean[] { true, false, true };\n+        assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2));\n+        assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1));\n+        assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));\n+        array = new boolean[] { true, true };\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));\n+    }\n+\n+    public void testContainsBoolean() {\n+        boolean[] array = null;\n+        assertEquals(false, ArrayUtils.contains(array, true));\n+        array = new boolean[] { true, false, true };\n+        assertEquals(true, ArrayUtils.contains(array, true));\n+        assertEquals(true, ArrayUtils.contains(array, false));\n+        array = new boolean[] { true, true };\n+        assertEquals(true, ArrayUtils.contains(array, true));\n+        assertEquals(false, ArrayUtils.contains(array, false));\n+    }\n+    \n+    // testToPrimitive/Object for boolean\n+    //  -----------------------------------------------------------------------\n+    public void testToPrimitive_boolean() {\n+        final Boolean[] b = null;\n+        assertEquals(null, ArrayUtils.toPrimitive(b));\n+        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0]));\n+        assertTrue(Arrays.equals(\n+            new boolean[] {true, false, true},\n+            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}))\n+        );\n+\n+        try {\n+            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null});\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testToPrimitive_boolean_boolean() {\n+        assertEquals(null, ArrayUtils.toPrimitive(null, false));\n+        assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false));\n+        assertTrue(Arrays.equals(\n+            new boolean[] {true, false, true},\n+            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, false))\n+        );\n+        assertTrue(Arrays.equals(\n+            new boolean[] {true, false, false},\n+            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, false))\n+        );\n+        assertTrue(Arrays.equals(\n+            new boolean[] {true, true, false},\n+            ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, true))\n+        );\n+    }\n+\n+    public void testToObject_boolean() {\n+        final boolean[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+        assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0]));\n+        assertTrue(Arrays.equals(\n+            new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE},\n+            ArrayUtils.toObject(new boolean[] {true, false, true}))\n+        );\n+    }\n+\n+    // testToPrimitive/Object for byte\n+    //  -----------------------------------------------------------------------\n+    public void testToPrimitive_char() {\n+        final Character[] b = null;\n+        assertEquals(null, ArrayUtils.toPrimitive(b));\n+        \n+        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0]));\n+        \n+        assertTrue(Arrays.equals(\n+            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},\n+            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n+                new Character(Character.MAX_VALUE), new Character('0')}))\n+        );\n+\n+        try {\n+            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testToPrimitive_char_char() {\n+        final Character[] b = null;\n+        assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE));\n+        \n+        assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, \n+            ArrayUtils.toPrimitive(new Character[0], (char)0));\n+        \n+        assertTrue(Arrays.equals(\n+            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},\n+            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n+                new Character(Character.MAX_VALUE), new Character('0')}, \n+                Character.MIN_VALUE))\n+        );\n+        \n+        assertTrue(Arrays.equals(\n+            new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'},\n+            ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n+                new Character('0')}, Character.MAX_VALUE))\n+        );\n+    }\n+\n+    public void testToObject_char() {\n+        final char[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+        \n+        assertSame(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, \n+            ArrayUtils.toObject(new char[0]));\n+        \n+        assertTrue(Arrays.equals(\n+            new Character[] {new Character(Character.MIN_VALUE), \n+                new Character(Character.MAX_VALUE), new Character('0')},\n+                ArrayUtils.toObject(new char[] {Character.MIN_VALUE, Character.MAX_VALUE, \n+                '0'} ))\n+        );\n+    }\n+    \n+    // testToPrimitive/Object for byte\n+    //  -----------------------------------------------------------------------\n+    public void testToPrimitive_byte() {\n+        final Byte[] b = null;\n+        assertEquals(null, ArrayUtils.toPrimitive(b));\n+        \n+        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0]));\n+        \n+        assertTrue(Arrays.equals(\n+            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n+            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), \n+                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)}))\n+        );\n+\n+        try {\n+            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null});\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testToPrimitive_byte_byte() {\n+        final Byte[] b = null;\n+        assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE));\n+        \n+        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, \n+            ArrayUtils.toPrimitive(new Byte[0], (byte)1));\n+        \n+        assertTrue(Arrays.equals(\n+            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n+            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), \n+                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)}, \n+                Byte.MIN_VALUE))\n+        );\n+        \n+        assertTrue(Arrays.equals(\n+            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n+            ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null, \n+                Byte.valueOf((byte)9999999)}, Byte.MAX_VALUE))\n+        );\n+    }\n+\n+    public void testToObject_byte() {\n+        final byte[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+        \n+        assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, \n+            ArrayUtils.toObject(new byte[0]));\n+        \n+        assertTrue(Arrays.equals(\n+            new Byte[] {Byte.valueOf(Byte.MIN_VALUE), \n+                Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)},\n+                ArrayUtils.toObject(new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, \n+                (byte)9999999}))\n+        );\n+    }\n+\n+    // testToPrimitive/Object for short\n+    //  -----------------------------------------------------------------------\n+    public void testToPrimitive_short() {\n+        final Short[] b = null;\n+        assertEquals(null, ArrayUtils.toPrimitive(b));\n+        \n+        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0]));\n+        \n+        assertTrue(Arrays.equals(\n+            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n+            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n+                new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n+        );\n+\n+        try {\n+            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testToPrimitive_short_short() {\n+        final Short[] s = null;\n+        assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE));\n+        \n+        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0], \n+        Short.MIN_VALUE));\n+        \n+        assertTrue(Arrays.equals(\n+            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n+            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n+                new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n+        );\n+        \n+        assertTrue(Arrays.equals(\n+            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n+            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n+                new Short((short)9999999)}, Short.MAX_VALUE))\n+        );\n+    }\n+\n+    public void testToObject_short() {\n+        final short[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+        \n+        assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, \n+        ArrayUtils.toObject(new short[0]));\n+        \n+        assertTrue(Arrays.equals(\n+            new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n+                new Short((short)9999999)},\n+            ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE, \n+                (short)9999999}))\n+        );\n+    }\n+\n+    //  testToPrimitive/Object for int\n+    //  -----------------------------------------------------------------------\n+     public void testToPrimitive_int() {\n+         final Integer[] b = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(b));\n+         assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0]));\n+         assertTrue(Arrays.equals(\n+             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n+                 new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n+         );\n+\n+         try {\n+             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n+             fail();\n+         } catch (NullPointerException ex) {}\n+     }\n+\n+     public void testToPrimitive_int_int() {\n+         final Long[] l = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE));\n+         assertSame(ArrayUtils.EMPTY_INT_ARRAY, \n+         ArrayUtils.toPrimitive(new Integer[0], 1));\n+         assertTrue(Arrays.equals(\n+             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n+                 new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n+         assertTrue(Arrays.equals(\n+             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n+                 null, new Integer(9999999)}, Integer.MAX_VALUE))\n+         );\n+     }\n+     \n+    public void testToPrimitive_intNull() {\n+        Integer[] iArray = null;\n+        assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE));\n+    }\n+\n+    public void testToObject_int() {\n+        final int[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+    \n+        assertSame(\n+            ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY,\n+            ArrayUtils.toObject(new int[0]));\n+    \n+        assertTrue(\n+            Arrays.equals(\n+                new Integer[] {\n+                    new Integer(Integer.MIN_VALUE),\n+                    new Integer(Integer.MAX_VALUE),\n+                    new Integer(9999999)},\n+            ArrayUtils.toObject(\n+                new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 })));\n+    }\n+\n+    //  testToPrimitive/Object for long\n+    //  -----------------------------------------------------------------------\n+     public void testToPrimitive_long() {\n+         final Long[] b = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(b));\n+         \n+         assertSame(ArrayUtils.EMPTY_LONG_ARRAY, \n+            ArrayUtils.toPrimitive(new Long[0]));\n+         \n+         assertTrue(Arrays.equals(\n+             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n+                 new Long(Long.MAX_VALUE), new Long(9999999)}))\n+         );\n+\n+         try {\n+             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n+             fail();\n+         } catch (NullPointerException ex) {}\n+     }\n+\n+     public void testToPrimitive_long_long() {\n+         final Long[] l = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE));\n+         \n+         assertSame(ArrayUtils.EMPTY_LONG_ARRAY, \n+         ArrayUtils.toPrimitive(new Long[0], 1));\n+         \n+         assertTrue(Arrays.equals(\n+             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n+                 new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n+         \n+         assertTrue(Arrays.equals(\n+             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n+                 null, new Long(9999999)}, Long.MAX_VALUE))\n+         );\n+     }\n+     \n+    public void testToObject_long() {\n+        final long[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+    \n+        assertSame(\n+            ArrayUtils.EMPTY_LONG_OBJECT_ARRAY,\n+            ArrayUtils.toObject(new long[0]));\n+    \n+        assertTrue(\n+            Arrays.equals(\n+                new Long[] {\n+                    new Long(Long.MIN_VALUE),\n+                    new Long(Long.MAX_VALUE),\n+                    new Long(9999999)},\n+            ArrayUtils.toObject(\n+                new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 })));\n+    }\n+\n+    //  testToPrimitive/Object for float\n+    //  -----------------------------------------------------------------------\n+     public void testToPrimitive_float() {\n+         final Float[] b = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(b));\n+         \n+         assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, \n+            ArrayUtils.toPrimitive(new Float[0]));\n+         \n+         assertTrue(Arrays.equals(\n+             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n+                 new Float(Float.MAX_VALUE), new Float(9999999)}))\n+         );\n+\n+         try {\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n+             fail();\n+         } catch (NullPointerException ex) {}\n+     }\n+\n+     public void testToPrimitive_float_float() {\n+         final Float[] l = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE));\n+         \n+         assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, \n+         ArrayUtils.toPrimitive(new Float[0], 1));\n+         \n+         assertTrue(Arrays.equals(\n+             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n+                 new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n+         \n+         assertTrue(Arrays.equals(\n+             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n+                 null, new Float(9999999)}, Float.MAX_VALUE))\n+         );\n+     }\n+     \n+    public void testToObject_float() {\n+        final float[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+    \n+        assertSame(\n+            ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY,\n+            ArrayUtils.toObject(new float[0]));\n+    \n+        assertTrue(\n+            Arrays.equals(\n+                new Float[] {\n+                    new Float(Float.MIN_VALUE),\n+                    new Float(Float.MAX_VALUE),\n+                    new Float(9999999)},\n+            ArrayUtils.toObject(\n+                new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 })));\n+    }\n+\n+    //  testToPrimitive/Object for double\n+    //  -----------------------------------------------------------------------\n+     public void testToPrimitive_double() {\n+         final Double[] b = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(b));\n+         \n+         assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, \n+            ArrayUtils.toPrimitive(new Double[0]));\n+         \n+         assertTrue(Arrays.equals(\n+             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n+                 new Double(Double.MAX_VALUE), new Double(9999999)}))\n+         );\n+\n+         try {\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n+             fail();\n+         } catch (NullPointerException ex) {}\n+     }\n+\n+     public void testToPrimitive_double_double() {\n+         final Double[] l = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE));\n+         \n+         assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, \n+         ArrayUtils.toPrimitive(new Double[0], 1));\n+         \n+         assertTrue(Arrays.equals(\n+             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n+                 new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n+         \n+         assertTrue(Arrays.equals(\n+             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n+                 null, new Double(9999999)}, Double.MAX_VALUE))\n+         );\n+     }\n+     \n+    public void testToObject_double() {\n+        final double[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+    \n+        assertSame(\n+            ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY,\n+            ArrayUtils.toObject(new double[0]));\n+    \n+        assertTrue(\n+            Arrays.equals(\n+                new Double[] {\n+                    new Double(Double.MIN_VALUE),\n+                    new Double(Double.MAX_VALUE),\n+                    new Double(9999999)},\n+            ArrayUtils.toObject(\n+                new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 })));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test for {@link ArrayUtils#isEmpty(java.lang.Object[])}.\n+     */\n+    public void testIsEmptyObject() {\n+        Object[] emptyArray = new Object[] {};\n+        Object[] notEmptyArray = new Object[] { new String(\"Value\") };\n+        assertEquals(true, ArrayUtils.isEmpty((Object[])null));\n+        assertEquals(true, ArrayUtils.isEmpty(emptyArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyArray));\n+    }\n+\n+    /**\n+     * Tests for {@link ArrayUtils#isEmpty(long[])},\n+     * {@link ArrayUtils#isEmpty(int[])},\n+     * {@link ArrayUtils#isEmpty(short[])},\n+     * {@link ArrayUtils#isEmpty(char[])},\n+     * {@link ArrayUtils#isEmpty(byte[])},\n+     * {@link ArrayUtils#isEmpty(double[])},\n+     * {@link ArrayUtils#isEmpty(float[])} and\n+     * {@link ArrayUtils#isEmpty(boolean[])}.\n+     */\n+    public void testIsEmptyPrimitives() {\n+        long[] emptyLongArray = new long[] {};\n+        long[] notEmptyLongArray = new long[] { 1L };\n+        assertEquals(true, ArrayUtils.isEmpty((long[])null));\n+        assertEquals(true, ArrayUtils.isEmpty(emptyLongArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyLongArray));\n+\n+        int[] emptyIntArray = new int[] {};\n+        int[] notEmptyIntArray = new int[] { 1 };\n+        assertEquals(true, ArrayUtils.isEmpty((int[])null));\n+        assertEquals(true, ArrayUtils.isEmpty(emptyIntArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyIntArray));\n+\n+        short[] emptyShortArray = new short[] {};\n+        short[] notEmptyShortArray = new short[] { 1 };\n+        assertEquals(true, ArrayUtils.isEmpty((short[])null));\n+        assertEquals(true, ArrayUtils.isEmpty(emptyShortArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyShortArray));\n+\n+        char[] emptyCharArray = new char[] {};\n+        char[] notEmptyCharArray = new char[] { 1 };\n+        assertEquals(true, ArrayUtils.isEmpty((char[])null));\n+        assertEquals(true, ArrayUtils.isEmpty(emptyCharArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyCharArray));\n+\n+        byte[] emptyByteArray = new byte[] {};\n+        byte[] notEmptyByteArray = new byte[] { 1 };\n+        assertEquals(true, ArrayUtils.isEmpty((byte[])null));\n+        assertEquals(true, ArrayUtils.isEmpty(emptyByteArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyByteArray));\n+\n+        double[] emptyDoubleArray = new double[] {};\n+        double[] notEmptyDoubleArray = new double[] { 1.0 };\n+        assertEquals(true, ArrayUtils.isEmpty((double[])null));\n+        assertEquals(true, ArrayUtils.isEmpty(emptyDoubleArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyDoubleArray));\n+\n+        float[] emptyFloatArray = new float[] {};\n+        float[] notEmptyFloatArray = new float[] { 1.0F };\n+        assertEquals(true, ArrayUtils.isEmpty((float[])null));\n+        assertEquals(true, ArrayUtils.isEmpty(emptyFloatArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyFloatArray));\n+\n+        boolean[] emptyBooleanArray = new boolean[] {};\n+        boolean[] notEmptyBooleanArray = new boolean[] { true };\n+        assertEquals(true, ArrayUtils.isEmpty((boolean[])null));\n+        assertEquals(true, ArrayUtils.isEmpty(emptyBooleanArray));\n+        assertEquals(false, ArrayUtils.isEmpty(notEmptyBooleanArray));\n+    }\n+    \n+    // ------------------------------------------------------------------------\n+    public void testGetLength() {\n+        assertEquals(0, ArrayUtils.getLength(null));\n+        \n+        Object[] emptyObjectArray = new Object[0];\n+        Object[] notEmptyObjectArray = new Object[] {\"aValue\"};\n+        assertEquals(0, ArrayUtils.getLength((Object[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyObjectArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyObjectArray));\n+ \n+        int[] emptyIntArray = new int[] {};\n+        int[] notEmptyIntArray = new int[] { 1 };\n+        assertEquals(0, ArrayUtils.getLength((int[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyIntArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyIntArray));\n+\n+        short[] emptyShortArray = new short[] {};\n+        short[] notEmptyShortArray = new short[] { 1 };\n+        assertEquals(0, ArrayUtils.getLength((short[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyShortArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyShortArray));\n+\n+        char[] emptyCharArray = new char[] {};\n+        char[] notEmptyCharArray = new char[] { 1 };\n+        assertEquals(0, ArrayUtils.getLength((char[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyCharArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyCharArray));\n+\n+        byte[] emptyByteArray = new byte[] {};\n+        byte[] notEmptyByteArray = new byte[] { 1 };\n+        assertEquals(0, ArrayUtils.getLength((byte[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyByteArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyByteArray));\n+\n+        double[] emptyDoubleArray = new double[] {};\n+        double[] notEmptyDoubleArray = new double[] { 1.0 };\n+        assertEquals(0, ArrayUtils.getLength((double[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyDoubleArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyDoubleArray));\n+\n+        float[] emptyFloatArray = new float[] {};\n+        float[] notEmptyFloatArray = new float[] { 1.0F };\n+        assertEquals(0, ArrayUtils.getLength((float[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyFloatArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyFloatArray));\n+\n+        boolean[] emptyBooleanArray = new boolean[] {};\n+        boolean[] notEmptyBooleanArray = new boolean[] { true };\n+        assertEquals(0, ArrayUtils.getLength((boolean[]) null));\n+        assertEquals(0, ArrayUtils.getLength(emptyBooleanArray));\n+        assertEquals(1, ArrayUtils.getLength(notEmptyBooleanArray));\n+        \n+        try {\n+            ArrayUtils.getLength(\"notAnArray\");\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        } catch (IllegalArgumentException e) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/BitFieldTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Class to test BitField functionality\n+ *\n+ * @author Scott Sanders\n+ * @author Marc Johnson\n+ * @author Glen Stampoultzis\n+ * @version $Id$\n+ */\n+public class BitFieldTest extends TestCase {\n+\n+    private static final BitField bf_multi  = new BitField(0x3F80);\n+    private static final BitField bf_single = new BitField(0x4000);\n+    private static final BitField bf_zero = new BitField(0);\n+\n+    /**\n+     * Constructor BitFieldTest\n+     *\n+     * @param name\n+     */\n+    public BitFieldTest(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * test the getValue() method\n+     */\n+    public void testGetValue() {\n+        assertEquals(bf_multi.getValue(-1), 127);\n+        assertEquals(bf_multi.getValue(0), 0);\n+        assertEquals(bf_single.getValue(-1), 1);\n+        assertEquals(bf_single.getValue(0), 0);\n+        assertEquals(bf_zero.getValue(-1), 0);\n+        assertEquals(bf_zero.getValue(0), 0);\n+    }\n+\n+    /**\n+     * test the getShortValue() method\n+     */\n+    public void testGetShortValue() {\n+        assertEquals(bf_multi.getShortValue((short) - 1), (short) 127);\n+        assertEquals(bf_multi.getShortValue((short) 0), (short) 0);\n+        assertEquals(bf_single.getShortValue((short) - 1), (short) 1);\n+        assertEquals(bf_single.getShortValue((short) 0), (short) 0);\n+        assertEquals(bf_zero.getShortValue((short) -1), (short) 0);\n+        assertEquals(bf_zero.getShortValue((short) 0), (short) 0);\n+    }\n+\n+    /**\n+     * test the getRawValue() method\n+     */\n+    public void testGetRawValue() {\n+        assertEquals(bf_multi.getRawValue(-1), 0x3F80);\n+        assertEquals(bf_multi.getRawValue(0), 0);\n+        assertEquals(bf_single.getRawValue(-1), 0x4000);\n+        assertEquals(bf_single.getRawValue(0), 0);\n+        assertEquals(bf_zero.getRawValue(-1), 0);\n+        assertEquals(bf_zero.getRawValue(0), 0);\n+    }\n+\n+    /**\n+     * test the getShortRawValue() method\n+     */\n+    public void testGetShortRawValue() {\n+        assertEquals(bf_multi.getShortRawValue((short) - 1), (short) 0x3F80);\n+        assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0);\n+        assertEquals(bf_single.getShortRawValue((short) - 1), (short) 0x4000);\n+        assertEquals(bf_single.getShortRawValue((short) 0), (short) 0);\n+        assertEquals(bf_zero.getShortRawValue((short) -1), (short) 0);\n+        assertEquals(bf_zero.getShortRawValue((short) 0), (short) 0);\n+    }\n+\n+    /**\n+     * test the isSet() method\n+     */\n+    public void testIsSet() {\n+        assertTrue(!bf_multi.isSet(0));\n+        assertTrue(!bf_zero.isSet(0));\n+        for (int j = 0x80; j <= 0x3F80; j += 0x80) {\n+            assertTrue(bf_multi.isSet(j));\n+        }\n+        for (int j = 0x80; j <= 0x3F80; j += 0x80) {\n+            assertTrue(!bf_zero.isSet(j));\n+        }\n+        assertTrue(!bf_single.isSet(0));\n+        assertTrue(bf_single.isSet(0x4000));\n+    }\n+\n+    /**\n+     * test the isAllSet() method\n+     */\n+    public void testIsAllSet() {\n+        for (int j = 0; j < 0x3F80; j += 0x80) {\n+            assertTrue(!bf_multi.isAllSet(j));\n+            assertTrue(bf_zero.isAllSet(j));\n+        }\n+        assertTrue(bf_multi.isAllSet(0x3F80));\n+        assertTrue(!bf_single.isAllSet(0));\n+        assertTrue(bf_single.isAllSet(0x4000));\n+    }\n+\n+    /**\n+     * test the setValue() method\n+     */\n+    public void testSetValue() {\n+        for (int j = 0; j < 128; j++) {\n+            assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j);\n+            assertEquals(bf_multi.setValue(0, j), j << 7);\n+        }\n+        for (int j = 0; j < 128; j++) {\n+          assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0);\n+          assertEquals(bf_zero.setValue(0, j), 0);\n+      }\n+\n+        // verify that excess bits are stripped off\n+        assertEquals(bf_multi.setValue(0x3f80, 128), 0);\n+        for (int j = 0; j < 2; j++) {\n+            assertEquals(bf_single.getValue(bf_single.setValue(0, j)), j);\n+            assertEquals(bf_single.setValue(0, j), j << 14);\n+        }\n+\n+        // verify that excess bits are stripped off\n+        assertEquals(bf_single.setValue(0x4000, 2), 0);\n+    }\n+\n+    /**\n+     * test the setShortValue() method\n+     */\n+    public void testSetShortValue() {\n+        for (int j = 0; j < 128; j++) {\n+            assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j);\n+            assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7));\n+        }\n+        for (int j = 0; j < 128; j++) {\n+            assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short) 0, (short) j)), (short) 0);\n+            assertEquals(bf_zero.setShortValue((short) 0, (short) j), (short) (0));\n+        }\n+\n+        // verify that excess bits are stripped off\n+        assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0);\n+        for (int j = 0; j < 2; j++) {\n+            assertEquals(bf_single.getShortValue(bf_single.setShortValue((short) 0, (short) j)), (short) j);\n+            assertEquals(bf_single.setShortValue((short) 0, (short) j), (short) (j << 14));\n+        }\n+\n+        // verify that excess bits are stripped off\n+        assertEquals(bf_single.setShortValue((short) 0x4000, (short) 2), (short) 0);\n+    }\n+\n+    public void testByte() {\n+        assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true));\n+        assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true));\n+        assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true));\n+        assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true));\n+        assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true));\n+        assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true));\n+        assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true));\n+        assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true));\n+        assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true));\n+        assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false));\n+        assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false));\n+        assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false));\n+        assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false));\n+        assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false));\n+        assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false));\n+        assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false));\n+        assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false));\n+        assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false));\n+        assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false));\n+        byte clearedBit = new BitField(0x40).setByteBoolean((byte) - 63, false);\n+\n+        assertEquals(false, new BitField(0x40).isSet(clearedBit));\n+    }\n+\n+    /**\n+     * test the clear() method\n+     */\n+    public void testClear() {\n+        assertEquals(bf_multi.clear(-1), 0xFFFFC07F);\n+        assertEquals(bf_single.clear(-1), 0xFFFFBFFF);\n+        assertEquals(bf_zero.clear(-1), 0xFFFFFFFF);\n+    }\n+\n+    /**\n+     * test the clearShort() method\n+     */\n+    public void testClearShort() {\n+        assertEquals(bf_multi.clearShort((short) - 1), (short) 0xC07F);\n+        assertEquals(bf_single.clearShort((short) - 1), (short) 0xBFFF);\n+        assertEquals(bf_zero.clearShort((short) -1), (short) 0xFFFF);\n+    }\n+\n+    /**\n+     * test the set() method\n+     */\n+    public void testSet() {\n+        assertEquals(bf_multi.set(0), 0x3F80);\n+        assertEquals(bf_single.set(0), 0x4000);\n+        assertEquals(bf_zero.set(0), 0);\n+    }\n+\n+    /**\n+     * test the setShort() method\n+     */\n+    public void testSetShort() {\n+        assertEquals(bf_multi.setShort((short) 0), (short) 0x3F80);\n+        assertEquals(bf_single.setShort((short) 0), (short) 0x4000);\n+        assertEquals(bf_zero.setShort((short) 0), (short) 0);\n+    }\n+\n+    /**\n+     * test the setBoolean() method\n+     */\n+    public void testSetBoolean() {\n+        assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true));\n+        assertEquals(bf_single.set(0), bf_single.setBoolean(0, true));\n+        assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true));\n+        assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false));\n+        assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false));\n+        assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false));\n+    }\n+\n+    /**\n+     * test the setShortBoolean() method\n+     */\n+    public void testSetShortBoolean() {\n+        assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true));\n+        assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true));\n+        assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true));\n+        assertEquals(bf_multi.clearShort((short) - 1), bf_multi.setShortBoolean((short) - 1, false));\n+        assertEquals(bf_single.clearShort((short) - 1), bf_single.setShortBoolean((short) - 1, false));\n+        assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.BooleanUtils}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author Matthew Hawthorne\n+ * @version $Id$\n+ */\n+public class BooleanUtilsTest extends TestCase {\n+\n+    public BooleanUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new BooleanUtils());\n+        Constructor<?>[] cons = BooleanUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_negate_Boolean() {\n+        assertSame(null, BooleanUtils.negate(null));\n+        assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE));\n+        assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_isTrue_Boolean() {\n+        assertEquals(true, BooleanUtils.isTrue(Boolean.TRUE));\n+        assertEquals(false, BooleanUtils.isTrue(Boolean.FALSE));\n+        assertEquals(false, BooleanUtils.isTrue((Boolean) null));\n+    }\n+\n+    public void test_isNotTrue_Boolean() {\n+        assertEquals(false, BooleanUtils.isNotTrue(Boolean.TRUE));\n+        assertEquals(true, BooleanUtils.isNotTrue(Boolean.FALSE));\n+        assertEquals(true, BooleanUtils.isNotTrue((Boolean) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_isFalse_Boolean() {\n+        assertEquals(false, BooleanUtils.isFalse(Boolean.TRUE));\n+        assertEquals(true, BooleanUtils.isFalse(Boolean.FALSE));\n+        assertEquals(false, BooleanUtils.isFalse((Boolean) null));\n+    }\n+\n+    public void test_isNotFalse_Boolean() {\n+        assertEquals(true, BooleanUtils.isNotFalse(Boolean.TRUE));\n+        assertEquals(false, BooleanUtils.isNotFalse(Boolean.FALSE));\n+        assertEquals(true, BooleanUtils.isNotFalse((Boolean) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_toBoolean_Boolean() {\n+        assertEquals(true, BooleanUtils.toBoolean(Boolean.TRUE));\n+        assertEquals(false, BooleanUtils.toBoolean(Boolean.FALSE));\n+        assertEquals(false, BooleanUtils.toBoolean((Boolean) null));\n+    }\n+\n+    public void test_toBooleanDefaultIfNull_Boolean_boolean() {\n+        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));\n+        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));\n+        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true));\n+        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false));\n+        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true));\n+        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void test_toBoolean_int() {\n+        assertEquals(true, BooleanUtils.toBoolean(1));\n+        assertEquals(true, BooleanUtils.toBoolean(-1));\n+        assertEquals(false, BooleanUtils.toBoolean(0));\n+    }\n+    \n+    public void test_toBooleanObject_int() {\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0));\n+    }\n+    \n+    public void test_toBooleanObject_Integer() {\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n+        assertEquals(null, BooleanUtils.toBooleanObject((Integer) null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_toBoolean_int_int_int() {\n+        assertEquals(true, BooleanUtils.toBoolean(6, 6, 7));\n+        assertEquals(false, BooleanUtils.toBoolean(7, 6, 7));\n+        try {\n+            BooleanUtils.toBoolean(8, 6, 7);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void test_toBoolean_Integer_Integer_Integer() {\n+        Integer six = new Integer(6);\n+        Integer seven = new Integer(7);\n+\n+        assertEquals(true, BooleanUtils.toBoolean((Integer) null, null, seven));\n+        assertEquals(false, BooleanUtils.toBoolean((Integer) null, six, null));\n+        try {\n+            BooleanUtils.toBoolean(null, six, seven);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n+        assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n+        try {\n+            BooleanUtils.toBoolean(new Integer(8), six, seven);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_toBooleanObject_int_int_int() {\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8));\n+        assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8));\n+        try {\n+            BooleanUtils.toBooleanObject(9, 6, 7, 8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void test_toBooleanObject_Integer_Integer_Integer_Integer() {\n+        Integer six = new Integer(6);\n+        Integer seven = new Integer(7);\n+        Integer eight = new Integer(8);\n+\n+        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight));\n+        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight));\n+        assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null));\n+        try {\n+            BooleanUtils.toBooleanObject(null, six, seven, eight);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n+        assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n+        try {\n+            BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_toInteger_boolean() {\n+        assertEquals(1, BooleanUtils.toInteger(true));\n+        assertEquals(0, BooleanUtils.toInteger(false));\n+    }\n+    \n+    public void test_toIntegerObject_boolean() {\n+        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n+        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(false));\n+    }\n+    \n+    public void test_toIntegerObject_Boolean() {\n+        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(Boolean.TRUE));\n+        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(Boolean.FALSE));\n+        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_toInteger_boolean_int_int() {\n+        assertEquals(6, BooleanUtils.toInteger(true, 6, 7));\n+        assertEquals(7, BooleanUtils.toInteger(false, 6, 7));\n+    }\n+    \n+    public void test_toInteger_Boolean_int_int_int() {\n+        assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8));\n+        assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8));\n+        assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8));\n+    }\n+    \n+    public void test_toIntegerObject_boolean_Integer_Integer() {\n+        Integer six = new Integer(6);\n+        Integer seven = new Integer(7);\n+        assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven));\n+        assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven));\n+    }\n+    \n+    public void test_toIntegerObject_Boolean_Integer_Integer_Integer() {\n+        Integer six = new Integer(6);\n+        Integer seven = new Integer(7);\n+        Integer eight = new Integer(8);\n+        assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight));\n+        assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight));\n+        assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight));\n+        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void test_toBooleanObject_String() {\n+        assertEquals(null, BooleanUtils.toBooleanObject((String) null));\n+        assertEquals(null, BooleanUtils.toBooleanObject(\"\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"false\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"no\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"off\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"FALSE\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"NO\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"OFF\"));\n+        assertEquals(null, BooleanUtils.toBooleanObject(\"oof\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"true\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"yes\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"on\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TRUE\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"ON\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"YES\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TruE\"));\n+    }\n+    \n+    public void test_toBooleanObject_String_String_String_String() {\n+        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, \"N\", \"U\"));\n+        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, \"Y\", null, \"U\"));\n+        assertSame(null, BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", null));\n+        try {\n+            BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", \"U\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"Y\", \"Y\", \"N\", \"U\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"N\", \"Y\", \"N\", \"U\"));\n+        assertEquals(null, BooleanUtils.toBooleanObject(\"U\", \"Y\", \"N\", \"U\"));\n+        try {\n+            BooleanUtils.toBooleanObject(null, \"Y\", \"N\", \"U\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            BooleanUtils.toBooleanObject(\"X\", \"Y\", \"N\", \"U\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_toBoolean_String() {\n+        assertEquals(false, BooleanUtils.toBoolean((String) null));\n+        assertEquals(false, BooleanUtils.toBoolean(\"\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"off\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"oof\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"yep\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"trux\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"false\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"a\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"true\")); // interned handled differently\n+        assertEquals(true, BooleanUtils.toBoolean(new StringBuffer(\"tr\").append(\"ue\").toString()));\n+        assertEquals(true, BooleanUtils.toBoolean(\"truE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"trUe\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"trUE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"tRue\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"tRuE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"tRUe\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"tRUE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TRUE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TRUe\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TRuE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TRue\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TrUE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TrUe\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TruE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"True\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"on\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"oN\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"On\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"ON\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"yes\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"yeS\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"yEs\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"yES\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"Yes\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"YeS\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"YEs\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"YES\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"yes?\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"tru\"));\n+    }\n+\n+    public void test_toBoolean_String_String_String() {\n+        assertEquals(true, BooleanUtils.toBoolean((String) null, null, \"N\"));\n+        assertEquals(false, BooleanUtils.toBoolean((String) null, \"Y\", null));\n+        try {\n+            BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", \"U\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        assertEquals(true, BooleanUtils.toBoolean(\"Y\", \"Y\", \"N\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"N\", \"Y\", \"N\"));\n+        try {\n+            BooleanUtils.toBoolean(null, \"Y\", \"N\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            BooleanUtils.toBoolean(\"X\", \"Y\", \"N\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_toStringTrueFalse_Boolean() {\n+        assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null));\n+        assertEquals(\"true\", BooleanUtils.toStringTrueFalse(Boolean.TRUE));\n+        assertEquals(\"false\", BooleanUtils.toStringTrueFalse(Boolean.FALSE));\n+    }\n+    \n+    public void test_toStringOnOff_Boolean() {\n+        assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null));\n+        assertEquals(\"on\", BooleanUtils.toStringOnOff(Boolean.TRUE));\n+        assertEquals(\"off\", BooleanUtils.toStringOnOff(Boolean.FALSE));\n+    }\n+    \n+    public void test_toStringYesNo_Boolean() {\n+        assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null));\n+        assertEquals(\"yes\", BooleanUtils.toStringYesNo(Boolean.TRUE));\n+        assertEquals(\"no\", BooleanUtils.toStringYesNo(Boolean.FALSE));\n+    }\n+    \n+    public void test_toString_Boolean_String_String_String() {\n+        assertEquals(\"U\", BooleanUtils.toString((Boolean) null, \"Y\", \"N\", \"U\"));\n+        assertEquals(\"Y\", BooleanUtils.toString(Boolean.TRUE, \"Y\", \"N\", \"U\"));\n+        assertEquals(\"N\", BooleanUtils.toString(Boolean.FALSE, \"Y\", \"N\", \"U\"));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_toStringTrueFalse_boolean() {\n+        assertEquals(\"true\", BooleanUtils.toStringTrueFalse(true));\n+        assertEquals(\"false\", BooleanUtils.toStringTrueFalse(false));\n+    }\n+    \n+    public void test_toStringOnOff_boolean() {\n+        assertEquals(\"on\", BooleanUtils.toStringOnOff(true));\n+        assertEquals(\"off\", BooleanUtils.toStringOnOff(false));\n+    }\n+    \n+    public void test_toStringYesNo_boolean() {\n+        assertEquals(\"yes\", BooleanUtils.toStringYesNo(true));\n+        assertEquals(\"no\", BooleanUtils.toStringYesNo(false));\n+    }\n+    \n+    public void test_toString_boolean_String_String_String() {\n+        assertEquals(\"Y\", BooleanUtils.toString(true, \"Y\", \"N\"));\n+        assertEquals(\"N\", BooleanUtils.toString(false, \"Y\", \"N\"));\n+    }\n+    \n+    //  testXor\n+    //  -----------------------------------------------------------------------\n+    public void testXor_primitive_nullInput() {\n+        final boolean[] b = null;\n+        try {\n+            BooleanUtils.xor(b);\n+            fail(\"Exception was not thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testXor_primitive_emptyInput() {\n+        try {\n+            BooleanUtils.xor(new boolean[] {});\n+            fail(\"Exception was not thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testXor_primitive_validInput_2items() {\n+        assertTrue(\n+            \"True result for (true, true)\",\n+            ! BooleanUtils.xor(new boolean[] { true, true }));\n+\n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils.xor(new boolean[] { false, false }));\n+\n+        assertTrue(\n+            \"False result for (true, false)\",\n+            BooleanUtils.xor(new boolean[] { true, false }));\n+\n+        assertTrue(\n+            \"False result for (false, true)\",\n+            BooleanUtils.xor(new boolean[] { false, true }));\n+    }\n+\n+    public void testXor_primitive_validInput_3items() {\n+        assertTrue(\n+            \"False result for (false, false, true)\",\n+            BooleanUtils.xor(new boolean[] { false, false, true }));\n+\n+        assertTrue(\n+            \"False result for (false, true, false)\",\n+            BooleanUtils.xor(new boolean[] { false, true, false }));\n+\n+        assertTrue(\n+            \"False result for (true, false, false)\",\n+            BooleanUtils.xor(new boolean[] { true, false, false }));\n+\n+        assertTrue(\n+            \"True result for (true, true, true)\",\n+            ! BooleanUtils.xor(new boolean[] { true, true, true }));\n+\n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils.xor(new boolean[] { false, false, false }));\n+\n+        assertTrue(\n+            \"True result for (true, true, false)\",\n+            ! BooleanUtils.xor(new boolean[] { true, true, false }));\n+\n+        assertTrue(\n+            \"True result for (true, false, true)\",\n+            ! BooleanUtils.xor(new boolean[] { true, false, true }));\n+\n+        assertTrue(\n+            \"False result for (false, true, true)\",\n+            ! BooleanUtils.xor(new boolean[] { false, true, true }));\n+    }\n+\n+    public void testXor_object_nullInput() {\n+        final Boolean[] b = null;\n+        try {\n+            BooleanUtils.xor(b);\n+            fail(\"Exception was not thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testXor_object_emptyInput() {\n+        try {\n+            BooleanUtils.xor(new Boolean[] {});\n+            fail(\"Exception was not thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testXor_object_nullElementInput() {\n+        try {\n+            BooleanUtils.xor(new Boolean[] {null});\n+            fail(\"Exception was not thrown for null element input.\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testXor_object_validInput_2items() {\n+        assertTrue(\n+            \"True result for (true, true)\",\n+            ! BooleanUtils\n+                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils\n+                .xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"False result for (true, false)\",\n+            BooleanUtils\n+                .xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"False result for (false, true)\",\n+            BooleanUtils\n+                .xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE })\n+                .booleanValue());\n+    }\n+\n+    public void testXor_object_validInput_3items() {\n+        assertTrue(\n+            \"False result for (false, false, true)\",\n+            BooleanUtils\n+                .xor(\n+                    new Boolean[] {\n+                        Boolean.FALSE,\n+                        Boolean.FALSE,\n+                        Boolean.TRUE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"False result for (false, true, false)\",\n+            BooleanUtils\n+                .xor(\n+                    new Boolean[] {\n+                        Boolean.FALSE,\n+                        Boolean.TRUE,\n+                        Boolean.FALSE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"False result for (true, false, false)\",\n+            BooleanUtils\n+                .xor(\n+                    new Boolean[] {\n+                        Boolean.TRUE,\n+                        Boolean.FALSE,\n+                        Boolean.FALSE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"True result for (true, true, true)\",\n+            ! BooleanUtils\n+                .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils.xor(\n+                    new Boolean[] {\n+                        Boolean.FALSE,\n+                        Boolean.FALSE,\n+                        Boolean.FALSE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"True result for (true, true, false)\",\n+            ! BooleanUtils.xor(\n+                    new Boolean[] {\n+                        Boolean.TRUE,\n+                        Boolean.TRUE,\n+                        Boolean.FALSE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"True result for (true, false, true)\",\n+            ! BooleanUtils.xor(\n+                    new Boolean[] {\n+                        Boolean.TRUE,\n+                        Boolean.FALSE,\n+                        Boolean.TRUE })\n+                .booleanValue());\n+\n+        assertTrue(\n+            \"False result for (false, true, true)\",\n+            ! BooleanUtils.xor(\n+                    new Boolean[] {\n+                        Boolean.FALSE,\n+                        Boolean.TRUE,\n+                        Boolean.TRUE })\n+                .booleanValue());\n+                \n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/CharEncodingTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests CharEncoding.\n+ * \n+ * @see CharEncoding\n+ * @author Gary D. Gregory\n+ * @version $Id$\n+ */\n+public class CharEncodingTest extends TestCase {\n+\n+    private void assertSupportedEncoding(String name) {\n+        assertTrue(\"Encoding should be supported: \" + name, CharEncoding.isSupported(name));\n+    }\n+\n+    /**\n+     * The class can be instantiated.\n+     */\n+    public void testConstructor() {\n+        new CharEncoding();\n+    }\n+\n+    public void testMustBeSupportedJava1_3_1() {\n+        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n+            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);\n+            this.assertSupportedEncoding(CharEncoding.US_ASCII);\n+            this.assertSupportedEncoding(CharEncoding.UTF_16);\n+            this.assertSupportedEncoding(CharEncoding.UTF_16BE);\n+            this.assertSupportedEncoding(CharEncoding.UTF_16LE);\n+            this.assertSupportedEncoding(CharEncoding.UTF_8);\n+        } else {\n+            this.warn(\"Java 1.3 tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n+        }\n+    }\n+\n+    public void testNotSupported() {\n+        assertFalse(CharEncoding.isSupported(null));\n+        assertFalse(CharEncoding.isSupported(\"\"));\n+        assertFalse(CharEncoding.isSupported(\" \"));\n+        assertFalse(CharEncoding.isSupported(\"\\t\\r\\n\"));\n+        assertFalse(CharEncoding.isSupported(\"DOESNOTEXIST\"));\n+        assertFalse(CharEncoding.isSupported(\"this is not a valid encoding name\"));\n+    }\n+\n+    public void testWorksOnJava1_1_8() {\n+        //\n+        // In this test, I simply deleted the encodings from the 1.3.1 list.\n+        // The Javadoc do not specify which encodings are required.\n+        //\n+        if (SystemUtils.isJavaVersionAtLeast(1.1f)) {\n+            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);\n+            this.assertSupportedEncoding(CharEncoding.US_ASCII);\n+            this.assertSupportedEncoding(CharEncoding.UTF_8);\n+        } else {\n+            this.warn(\"Java 1.1 tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n+        }\n+    }\n+\n+    public void testWorksOnJava1_2_2() {\n+        //\n+        // In this test, I simply deleted the encodings from the 1.3.1 list.\n+        // The Javadoc do not specify which encodings are required.\n+        //\n+        if (SystemUtils.isJavaVersionAtLeast(1.2f)) {\n+            this.assertSupportedEncoding(CharEncoding.ISO_8859_1);\n+            this.assertSupportedEncoding(CharEncoding.US_ASCII);\n+            this.assertSupportedEncoding(CharEncoding.UTF_8);\n+        } else {\n+            this.warn(\"Java 1.2 tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n+        }\n+    }\n+\n+    void warn(String msg) {\n+        System.err.println(msg);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/CharRangeTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.CharRange}.\n+ *\n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ */\n+public class CharRangeTest extends TestCase {\n+    \n+    public CharRangeTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClass() {\n+        assertEquals(true, Modifier.isPublic(CharRange.class.getModifiers()));\n+        assertEquals(true, Modifier.isFinal(CharRange.class.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructorAccessors_is() {\n+        CharRange rangea = CharRange.is('a');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('a', rangea.getEnd());\n+        assertEquals(false, rangea.isNegated());\n+        assertEquals(\"a\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_isNot() {\n+        CharRange rangea = CharRange.isNot('a');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('a', rangea.getEnd());\n+        assertEquals(true, rangea.isNegated());\n+        assertEquals(\"^a\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_isIn_Same() {\n+        CharRange rangea = CharRange.isIn('a', 'a');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('a', rangea.getEnd());\n+        assertEquals(false, rangea.isNegated());\n+        assertEquals(\"a\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_isIn_Normal() {\n+        CharRange rangea = CharRange.isIn('a', 'e');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('e', rangea.getEnd());\n+        assertEquals(false, rangea.isNegated());\n+        assertEquals(\"a-e\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_isIn_Reversed() {\n+        CharRange rangea = CharRange.isIn('e', 'a');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('e', rangea.getEnd());\n+        assertEquals(false, rangea.isNegated());\n+        assertEquals(\"a-e\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_isNotIn_Same() {\n+        CharRange rangea = CharRange.isNotIn('a', 'a');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('a', rangea.getEnd());\n+        assertEquals(true, rangea.isNegated());\n+        assertEquals(\"^a\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_isNotIn_Normal() {\n+        CharRange rangea = CharRange.isNotIn('a', 'e');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('e', rangea.getEnd());\n+        assertEquals(true, rangea.isNegated());\n+        assertEquals(\"^a-e\", rangea.toString());\n+    }\n+    \n+    public void testConstructorAccessors_isNotIn_Reversed() {\n+        CharRange rangea = CharRange.isNotIn('e', 'a');\n+        assertEquals('a', rangea.getStart());\n+        assertEquals('e', rangea.getEnd());\n+        assertEquals(true, rangea.isNegated());\n+        assertEquals(\"^a-e\", rangea.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public void testEquals_Object() {\n+        CharRange rangea = CharRange.is('a');\n+        CharRange rangeae = CharRange.isIn('a', 'e');\n+        CharRange rangenotbf = CharRange.isIn('b', 'f');\n+        \n+        assertEquals(false, rangea.equals(null));\n+        \n+        assertEquals(true, rangea.equals(rangea));\n+        assertEquals(true, rangea.equals(CharRange.is('a')));\n+        assertEquals(true, rangeae.equals(rangeae));\n+        assertEquals(true, rangeae.equals(CharRange.isIn('a', 'e')));\n+        assertEquals(true, rangenotbf.equals(rangenotbf));\n+        assertEquals(true, rangenotbf.equals(CharRange.isIn('b', 'f')));\n+        \n+        assertEquals(false, rangea.equals(rangeae));\n+        assertEquals(false, rangea.equals(rangenotbf));\n+        assertEquals(false, rangeae.equals(rangea));\n+        assertEquals(false, rangeae.equals(rangenotbf));\n+        assertEquals(false, rangenotbf.equals(rangea));\n+        assertEquals(false, rangenotbf.equals(rangeae));\n+    }\n+            \n+    public void testHashCode() {\n+        CharRange rangea = CharRange.is('a');\n+        CharRange rangeae = CharRange.isIn('a', 'e');\n+        CharRange rangenotbf = CharRange.isIn('b', 'f');\n+        \n+        assertEquals(true, rangea.hashCode() == rangea.hashCode());\n+        assertEquals(true, rangea.hashCode() == CharRange.is('a').hashCode());\n+        assertEquals(true, rangeae.hashCode() == rangeae.hashCode());\n+        assertEquals(true, rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode());\n+        assertEquals(true, rangenotbf.hashCode() == rangenotbf.hashCode());\n+        assertEquals(true, rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode());\n+        \n+        assertEquals(false, rangea.hashCode() == rangeae.hashCode());\n+        assertEquals(false, rangea.hashCode() == rangenotbf.hashCode());\n+        assertEquals(false, rangeae.hashCode() == rangea.hashCode());\n+        assertEquals(false, rangeae.hashCode() == rangenotbf.hashCode());\n+        assertEquals(false, rangenotbf.hashCode() == rangea.hashCode());\n+        assertEquals(false, rangenotbf.hashCode() == rangeae.hashCode());\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testContains_Char() {\n+        CharRange range = CharRange.is('c');\n+        assertEquals(false, range.contains('b'));\n+        assertEquals(true, range.contains('c'));\n+        assertEquals(false, range.contains('d'));\n+        assertEquals(false, range.contains('e'));\n+        \n+        range = CharRange.isIn('c', 'd');\n+        assertEquals(false, range.contains('b'));\n+        assertEquals(true, range.contains('c'));\n+        assertEquals(true, range.contains('d'));\n+        assertEquals(false, range.contains('e'));\n+        \n+        range = CharRange.isIn('d', 'c');\n+        assertEquals(false, range.contains('b'));\n+        assertEquals(true, range.contains('c'));\n+        assertEquals(true, range.contains('d'));\n+        assertEquals(false, range.contains('e'));\n+        \n+        range = CharRange.isNotIn('c', 'd');\n+        assertEquals(true, range.contains('b'));\n+        assertEquals(false, range.contains('c'));\n+        assertEquals(false, range.contains('d'));\n+        assertEquals(true, range.contains('e'));\n+        assertEquals(true, range.contains((char) 0));\n+        assertEquals(true, range.contains(Character.MAX_VALUE));\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testContains_Charrange() {\n+        CharRange a = CharRange.is('a');\n+        CharRange b = CharRange.is('b');\n+        CharRange c = CharRange.is('c');\n+        CharRange c2 = CharRange.is('c');\n+        CharRange d = CharRange.is('d');\n+        CharRange e = CharRange.is('e');\n+        CharRange cd = CharRange.isIn('c', 'd');\n+        CharRange bd = CharRange.isIn('b', 'd');\n+        CharRange bc = CharRange.isIn('b', 'c');\n+        CharRange ab = CharRange.isIn('a', 'b');\n+        CharRange de = CharRange.isIn('d', 'e');\n+        CharRange ef = CharRange.isIn('e', 'f');\n+        CharRange ae = CharRange.isIn('a', 'e');\n+        \n+        // normal/normal\n+        assertEquals(false, c.contains(b));\n+        assertEquals(true, c.contains(c));\n+        assertEquals(true, c.contains(c2));\n+        assertEquals(false, c.contains(d));\n+        \n+        assertEquals(false, c.contains(cd));\n+        assertEquals(false, c.contains(bd));\n+        assertEquals(false, c.contains(bc));\n+        assertEquals(false, c.contains(ab));\n+        assertEquals(false, c.contains(de));\n+        \n+        assertEquals(true, cd.contains(c));\n+        assertEquals(true, bd.contains(c));\n+        assertEquals(true, bc.contains(c));\n+        assertEquals(false, ab.contains(c));\n+        assertEquals(false, de.contains(c));\n+\n+        assertEquals(true, ae.contains(b));\n+        assertEquals(true, ae.contains(ab));\n+        assertEquals(true, ae.contains(bc));\n+        assertEquals(true, ae.contains(cd));\n+        assertEquals(true, ae.contains(de));\n+        \n+        CharRange notb = CharRange.isNot('b');\n+        CharRange notc = CharRange.isNot('c');\n+        CharRange notd = CharRange.isNot('d');\n+        CharRange notab = CharRange.isNotIn('a', 'b');\n+        CharRange notbc = CharRange.isNotIn('b', 'c');\n+        CharRange notbd = CharRange.isNotIn('b', 'd');\n+        CharRange notcd = CharRange.isNotIn('c', 'd');\n+        CharRange notde = CharRange.isNotIn('d', 'e');\n+        CharRange notae = CharRange.isNotIn('a', 'e');\n+        CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE);\n+        CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE);\n+        \n+        // normal/negated\n+        assertEquals(false, c.contains(notc));\n+        assertEquals(false, c.contains(notbd));\n+        assertEquals(true, all.contains(notc));\n+        assertEquals(true, all.contains(notbd));\n+        assertEquals(false, allbutfirst.contains(notc));\n+        assertEquals(false, allbutfirst.contains(notbd));\n+        \n+        // negated/normal\n+        assertEquals(true, notc.contains(a));\n+        assertEquals(true, notc.contains(b));\n+        assertEquals(false, notc.contains(c));\n+        assertEquals(true, notc.contains(d));\n+        assertEquals(true, notc.contains(e));\n+        \n+        assertEquals(true, notc.contains(ab));\n+        assertEquals(false, notc.contains(bc));\n+        assertEquals(false, notc.contains(bd));\n+        assertEquals(false, notc.contains(cd));\n+        assertEquals(true, notc.contains(de));\n+        assertEquals(false, notc.contains(ae));\n+        assertEquals(false, notc.contains(all));\n+        assertEquals(false, notc.contains(allbutfirst));\n+        \n+        assertEquals(true, notbd.contains(a));\n+        assertEquals(false, notbd.contains(b));\n+        assertEquals(false, notbd.contains(c));\n+        assertEquals(false, notbd.contains(d));\n+        assertEquals(true, notbd.contains(e));\n+        \n+        assertEquals(true, notcd.contains(ab));\n+        assertEquals(false, notcd.contains(bc));\n+        assertEquals(false, notcd.contains(bd));\n+        assertEquals(false, notcd.contains(cd));\n+        assertEquals(false, notcd.contains(de));\n+        assertEquals(false, notcd.contains(ae));\n+        assertEquals(true, notcd.contains(ef));\n+        assertEquals(false, notcd.contains(all));\n+        assertEquals(false, notcd.contains(allbutfirst));\n+        \n+        // negated/negated\n+        assertEquals(false, notc.contains(notb));\n+        assertEquals(true, notc.contains(notc));\n+        assertEquals(false, notc.contains(notd));\n+        \n+        assertEquals(false, notc.contains(notab));\n+        assertEquals(true, notc.contains(notbc));\n+        assertEquals(true, notc.contains(notbd));\n+        assertEquals(true, notc.contains(notcd));\n+        assertEquals(false, notc.contains(notde));\n+        \n+        assertEquals(false, notbd.contains(notb));\n+        assertEquals(false, notbd.contains(notc));\n+        assertEquals(false, notbd.contains(notd));\n+        \n+        assertEquals(false, notbd.contains(notab));\n+        assertEquals(false, notbd.contains(notbc));\n+        assertEquals(true, notbd.contains(notbd));\n+        assertEquals(false, notbd.contains(notcd));\n+        assertEquals(false, notbd.contains(notde));\n+        assertEquals(true, notbd.contains(notae));\n+    }\n+    \n+    public void testContainsNullArg() {\n+        CharRange range = CharRange.is('a');\n+        try {\n+            @SuppressWarnings(\"unused\")\n+            boolean contains = range.contains(null);\n+        } catch(IllegalArgumentException e) {\n+            assertEquals(\"The Range must not be null\", e.getMessage());\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testSerialization() {\n+        CharRange range = CharRange.is('a');\n+        assertEquals(range, SerializationUtils.clone(range)); \n+        range = CharRange.isIn('a', 'e');\n+        assertEquals(range, SerializationUtils.clone(range)); \n+        range = CharRange.isNotIn('a', 'e');\n+        assertEquals(range, SerializationUtils.clone(range)); \n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/CharSetTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.CharSet}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author Phil Steitz\n+ * @version $Id$\n+ */\n+public class CharSetTest extends TestCase {\n+    \n+    public CharSetTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClass() {\n+        assertEquals(true, Modifier.isPublic(CharSet.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(CharSet.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testGetInstance() {\n+        assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null));\n+        assertSame(CharSet.EMPTY, CharSet.getInstance(\"\"));\n+        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(\"a-zA-Z\"));\n+        assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance(\"A-Za-z\"));\n+        assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance(\"a-z\"));\n+        assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance(\"A-Z\"));\n+        assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance(\"0-9\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstance_Stringarray() {\n+        assertEquals(null, CharSet.getInstance((String[]) null));\n+        assertEquals(\"[]\", CharSet.getInstance(new String[0]).toString());\n+        assertEquals(\"[]\", CharSet.getInstance(new String[] {null}).toString());\n+        assertEquals(\"[a-e]\", CharSet.getInstance(new String[] {\"a-e\"}).toString());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testConstructor_String_simple() {\n+        CharSet set;\n+        CharRange[] array;\n+        \n+        set = CharSet.getInstance((String) null);\n+        array = set.getCharRanges();\n+        assertEquals(\"[]\", set.toString());\n+        assertEquals(0, array.length);\n+        \n+        set = CharSet.getInstance(\"\");\n+        array = set.getCharRanges();\n+        assertEquals(\"[]\", set.toString());\n+        assertEquals(0, array.length);\n+        \n+        set = CharSet.getInstance(\"a\");\n+        array = set.getCharRanges();\n+        assertEquals(\"[a]\", set.toString());\n+        assertEquals(1, array.length);\n+        assertEquals(\"a\", array[0].toString());\n+        \n+        set = CharSet.getInstance(\"^a\");\n+        array = set.getCharRanges();\n+        assertEquals(\"[^a]\", set.toString());\n+        assertEquals(1, array.length);\n+        assertEquals(\"^a\", array[0].toString());\n+        \n+        set = CharSet.getInstance(\"a-e\");\n+        array = set.getCharRanges();\n+        assertEquals(\"[a-e]\", set.toString());\n+        assertEquals(1, array.length);\n+        assertEquals(\"a-e\", array[0].toString());\n+        \n+        set = CharSet.getInstance(\"^a-e\");\n+        array = set.getCharRanges();\n+        assertEquals(\"[^a-e]\", set.toString());\n+        assertEquals(1, array.length);\n+        assertEquals(\"^a-e\", array[0].toString());\n+    }\n+    \n+    public void testConstructor_String_combo() {\n+        CharSet set;\n+        CharRange[] array;\n+        \n+        set = CharSet.getInstance(\"abc\");\n+        array = set.getCharRanges();\n+        assertEquals(3, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n+        \n+        set = CharSet.getInstance(\"a-ce-f\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', 'c')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n+        \n+        set = CharSet.getInstance(\"ae-f\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n+        \n+        set = CharSet.getInstance(\"e-fa\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n+        \n+        set = CharSet.getInstance(\"ae-fm-pz\");\n+        array = set.getCharRanges();\n+        assertEquals(4, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('m', 'p')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('z')));\n+    }\n+    \n+    public void testConstructor_String_comboNegated() {\n+        CharSet set;\n+        CharRange[] array;\n+        \n+        set = CharSet.getInstance(\"^abc\");\n+        array = set.getCharRanges();\n+        assertEquals(3, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n+        \n+        set = CharSet.getInstance(\"b^ac\");\n+        array = set.getCharRanges();\n+        assertEquals(3, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n+        \n+        set = CharSet.getInstance(\"db^ac\");\n+        array = set.getCharRanges();\n+        assertEquals(4, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('d')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n+        \n+        set = CharSet.getInstance(\"^b^a\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('b')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n+        \n+        set = CharSet.getInstance(\"b^a-c^z\");\n+        array = set.getCharRanges();\n+        assertEquals(3, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('a', 'c')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('z')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n+    }\n+\n+    public void testConstructor_String_oddDash() {\n+        CharSet set;\n+        CharRange[] array;\n+        \n+        set = CharSet.getInstance(\"-\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n+        \n+        set = CharSet.getInstance(\"--\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n+        \n+        set = CharSet.getInstance(\"---\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n+        \n+        set = CharSet.getInstance(\"----\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n+        \n+        set = CharSet.getInstance(\"-a\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n+        \n+        set = CharSet.getInstance(\"a-\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n+        \n+        set = CharSet.getInstance(\"a--\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', '-')));\n+        \n+        set = CharSet.getInstance(\"--a\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('-', 'a')));\n+    }\n+    \n+    public void testConstructor_String_oddNegate() {\n+        CharSet set;\n+        CharRange[] array;\n+        set = CharSet.getInstance(\"^\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n+        \n+        set = CharSet.getInstance(\"^^\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n+        \n+        set = CharSet.getInstance(\"^^^\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n+        \n+        set = CharSet.getInstance(\"^^^^\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\" x2\n+        \n+        set = CharSet.getInstance(\"a^\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a'))); // \"a\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n+        \n+        set = CharSet.getInstance(\"^a-\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a'))); // \"^a\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-'))); // \"-\"\n+        \n+        set = CharSet.getInstance(\"^^-c\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); // \"^^-c\"\n+        \n+        set = CharSet.getInstance(\"^c-^\");\n+        array = set.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // \"^c-^\"\n+        \n+        set = CharSet.getInstance(\"^c-^d\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // \"^c-^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('d'))); // \"d\"\n+        \n+        set = CharSet.getInstance(\"^^-\");\n+        array = set.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-'))); // \"-\"\n+    }\n+    \n+    public void testConstructor_String_oddCombinations() {\n+        CharSet set;\n+        CharRange[] array = null;\n+        \n+        set = CharSet.getInstance(\"a-^c\");\n+        array = set.getCharRanges();\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', '^'))); // \"a-^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c'))); // \"c\"\n+        assertEquals(false, set.contains('b'));\n+        assertEquals(true, set.contains('^'));  \n+        assertEquals(true, set.contains('_')); // between ^ and a\n+        assertEquals(true, set.contains('c'));  \n+        \n+        set = CharSet.getInstance(\"^a-^c\");\n+        array = set.getCharRanges();\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('a', '^'))); // \"^a-^\"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c'))); // \"c\"\n+        assertEquals(true, set.contains('b'));\n+        assertEquals(false, set.contains('^'));  \n+        assertEquals(false, set.contains('_')); // between ^ and a\n+        \n+        set = CharSet.getInstance(\"a- ^-- \"); //contains everything\n+        array = set.getCharRanges();\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', ' '))); // \"a- \"\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('-', ' '))); // \"^-- \"\n+        assertEquals(true, set.contains('#'));\n+        assertEquals(true, set.contains('^'));\n+        assertEquals(true, set.contains('a'));\n+        assertEquals(true, set.contains('*'));\n+        assertEquals(true, set.contains('A'));\n+        \n+        set = CharSet.getInstance(\"^-b\");\n+        array = set.getCharRanges();\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('^','b'))); // \"^-b\"\n+        assertEquals(true, set.contains('b'));\n+        assertEquals(true, set.contains('_')); // between ^ and a\n+        assertEquals(false, set.contains('A'));\n+        assertEquals(true, set.contains('^')); \n+        \n+        set = CharSet.getInstance(\"b-^\");\n+        array = set.getCharRanges();\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('^','b'))); // \"b-^\"\n+        assertEquals(true, set.contains('b'));\n+        assertEquals(true, set.contains('^'));\n+        assertEquals(true, set.contains('a')); // between ^ and b\n+        assertEquals(false, set.contains('c')); \n+    }\n+        \n+    //-----------------------------------------------------------------------    \n+    public void testEquals_Object() {\n+        CharSet abc = CharSet.getInstance(\"abc\");\n+        CharSet abc2 = CharSet.getInstance(\"abc\");\n+        CharSet atoc = CharSet.getInstance(\"a-c\");\n+        CharSet atoc2 = CharSet.getInstance(\"a-c\");\n+        CharSet notatoc = CharSet.getInstance(\"^a-c\");\n+        CharSet notatoc2 = CharSet.getInstance(\"^a-c\");\n+        \n+        assertEquals(false, abc.equals(null));\n+        \n+        assertEquals(true, abc.equals(abc));\n+        assertEquals(true, abc.equals(abc2));\n+        assertEquals(false, abc.equals(atoc));\n+        assertEquals(false, abc.equals(notatoc));\n+        \n+        assertEquals(false, atoc.equals(abc));\n+        assertEquals(true, atoc.equals(atoc));\n+        assertEquals(true, atoc.equals(atoc2));\n+        assertEquals(false, atoc.equals(notatoc));\n+        \n+        assertEquals(false, notatoc.equals(abc));\n+        assertEquals(false, notatoc.equals(atoc));\n+        assertEquals(true, notatoc.equals(notatoc));\n+        assertEquals(true, notatoc.equals(notatoc2));\n+    }\n+            \n+    public void testHashCode() {\n+        CharSet abc = CharSet.getInstance(\"abc\");\n+        CharSet abc2 = CharSet.getInstance(\"abc\");\n+        CharSet atoc = CharSet.getInstance(\"a-c\");\n+        CharSet atoc2 = CharSet.getInstance(\"a-c\");\n+        CharSet notatoc = CharSet.getInstance(\"^a-c\");\n+        CharSet notatoc2 = CharSet.getInstance(\"^a-c\");\n+        \n+        assertEquals(abc.hashCode(), abc.hashCode());\n+        assertEquals(abc.hashCode(), abc2.hashCode());\n+        assertEquals(atoc.hashCode(), atoc.hashCode());\n+        assertEquals(atoc.hashCode(), atoc2.hashCode());\n+        assertEquals(notatoc.hashCode(), notatoc.hashCode());\n+        assertEquals(notatoc.hashCode(), notatoc2.hashCode());\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testContains_Char() {\n+        CharSet btod = CharSet.getInstance(\"b-d\");\n+        CharSet dtob = CharSet.getInstance(\"d-b\");\n+        CharSet bcd = CharSet.getInstance(\"bcd\");\n+        CharSet bd = CharSet.getInstance(\"bd\");\n+        CharSet notbtod = CharSet.getInstance(\"^b-d\");\n+        \n+        assertEquals(false, btod.contains('a'));\n+        assertEquals(true, btod.contains('b'));\n+        assertEquals(true, btod.contains('c'));\n+        assertEquals(true, btod.contains('d'));\n+        assertEquals(false, btod.contains('e'));\n+        \n+        assertEquals(false, bcd.contains('a'));\n+        assertEquals(true, bcd.contains('b'));\n+        assertEquals(true, bcd.contains('c'));\n+        assertEquals(true, bcd.contains('d'));\n+        assertEquals(false, bcd.contains('e'));\n+        \n+        assertEquals(false, bd.contains('a'));\n+        assertEquals(true, bd.contains('b'));\n+        assertEquals(false, bd.contains('c'));\n+        assertEquals(true, bd.contains('d'));\n+        assertEquals(false, bd.contains('e'));\n+        \n+        assertEquals(true, notbtod.contains('a'));\n+        assertEquals(false, notbtod.contains('b'));\n+        assertEquals(false, notbtod.contains('c'));\n+        assertEquals(false, notbtod.contains('d'));\n+        assertEquals(true, notbtod.contains('e'));\n+        \n+        assertEquals(false, dtob.contains('a'));\n+        assertEquals(true, dtob.contains('b'));\n+        assertEquals(true, dtob.contains('c'));\n+        assertEquals(true, dtob.contains('d'));\n+        assertEquals(false, dtob.contains('e'));\n+      \n+        CharRange[] array = dtob.getCharRanges();\n+        assertEquals(\"[b-d]\", dtob.toString());\n+        assertEquals(1, array.length);\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testSerialization() {\n+        CharSet set = CharSet.getInstance(\"a\");\n+        assertEquals(set, SerializationUtils.clone(set)); \n+        set = CharSet.getInstance(\"a-e\");\n+        assertEquals(set, SerializationUtils.clone(set)); \n+        set = CharSet.getInstance(\"be-f^a-z\");\n+        assertEquals(set, SerializationUtils.clone(set)); \n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testStatics() {\n+        CharRange[] array;\n+        \n+        array = CharSet.EMPTY.getCharRanges();\n+        assertEquals(0, array.length);\n+        \n+        array = CharSet.ASCII_ALPHA.getCharRanges();\n+        assertEquals(2, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', 'z')));\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));\n+        \n+        array = CharSet.ASCII_ALPHA_LOWER.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', 'z')));\n+        \n+        array = CharSet.ASCII_ALPHA_UPPER.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));\n+        \n+        array = CharSet.ASCII_NUMERIC.getCharRanges();\n+        assertEquals(1, array.length);\n+        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('0', '9')));\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.CharSetUtils}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @author Gary D. Gregory\n+ * @version $Id$\n+ */\n+public class CharSetUtilsTest extends TestCase {\n+    \n+    public CharSetUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new CharSetUtils());\n+        Constructor<?>[] cons = CharSetUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(CharSetUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(CharSetUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSqueeze_StringString() {\n+        assertEquals(null, CharSetUtils.squeeze(null, (String) null));\n+        assertEquals(null, CharSetUtils.squeeze(null, \"\"));\n+        \n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", (String) null));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", \"\"));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", \"a-e\"));\n+        \n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", (String) null));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"\"));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"a-e\"));\n+        assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", \"l-p\"));\n+        assertEquals(\"heloo\", CharSetUtils.squeeze(\"helloo\", \"l\"));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"helloo\", \"^l\"));\n+    }\n+    \n+    public void testSqueeze_StringStringarray() {\n+        assertEquals(null, CharSetUtils.squeeze(null, (String[]) null));\n+        assertEquals(null, CharSetUtils.squeeze(null, new String[0]));\n+        assertEquals(null, CharSetUtils.squeeze(null, new String[] {null}));\n+        assertEquals(null, CharSetUtils.squeeze(null, new String[] {\"el\"}));\n+        \n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", (String[]) null));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[0]));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[] {null}));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", (String[]) null));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[0]));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] {null}));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", new String[] { \"el\" }));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] { \"e\" }));\n+        assertEquals(\"fofof\", CharSetUtils.squeeze(\"fooffooff\", new String[] { \"of\" }));\n+        assertEquals(\"fof\", CharSetUtils.squeeze(\"fooooff\", new String[] { \"fo\" }));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCount_StringString() {\n+        assertEquals(0, CharSetUtils.count(null, (String) null));\n+        assertEquals(0, CharSetUtils.count(null, \"\"));\n+        \n+        assertEquals(0, CharSetUtils.count(\"\", (String) null));\n+        assertEquals(0, CharSetUtils.count(\"\", \"\"));\n+        assertEquals(0, CharSetUtils.count(\"\", \"a-e\"));\n+        \n+        assertEquals(0, CharSetUtils.count(\"hello\", (String) null));\n+        assertEquals(0, CharSetUtils.count(\"hello\", \"\"));\n+        assertEquals(1, CharSetUtils.count(\"hello\", \"a-e\"));\n+        assertEquals(3, CharSetUtils.count(\"hello\", \"l-p\"));\n+    }\n+    \n+    public void testCount_StringStringarray() {\n+        assertEquals(0, CharSetUtils.count(null, (String[]) null));\n+        assertEquals(0, CharSetUtils.count(null, new String[0]));\n+        assertEquals(0, CharSetUtils.count(null, new String[] {null}));\n+        assertEquals(0, CharSetUtils.count(null, new String[] {\"a-e\"}));\n+        \n+        assertEquals(0, CharSetUtils.count(\"\", (String[]) null));\n+        assertEquals(0, CharSetUtils.count(\"\", new String[0]));\n+        assertEquals(0, CharSetUtils.count(\"\", new String[] {null}));\n+        assertEquals(0, CharSetUtils.count(\"\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(0, CharSetUtils.count(\"hello\", (String[]) null));\n+        assertEquals(0, CharSetUtils.count(\"hello\", new String[0]));\n+        assertEquals(0, CharSetUtils.count(\"hello\", new String[] {null}));\n+        assertEquals(1, CharSetUtils.count(\"hello\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(3, CharSetUtils.count(\"hello\", new String[] { \"el\" }));\n+        assertEquals(0, CharSetUtils.count(\"hello\", new String[] { \"x\" }));\n+        assertEquals(2, CharSetUtils.count(\"hello\", new String[] { \"e-i\" }));\n+        assertEquals(5, CharSetUtils.count(\"hello\", new String[] { \"a-z\" }));\n+        assertEquals(0, CharSetUtils.count(\"hello\", new String[] { \"\" }));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testKeep_StringString() {\n+        assertEquals(null, CharSetUtils.keep(null, (String) null));\n+        assertEquals(null, CharSetUtils.keep(null, \"\"));\n+        \n+        assertEquals(\"\", CharSetUtils.keep(\"\", (String) null));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", \"\"));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", \"a-e\"));\n+        \n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", (String) null));\n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", \"\"));\n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", \"xyz\"));\n+        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"a-z\"));\n+        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"oleh\"));\n+        assertEquals(\"ell\", CharSetUtils.keep(\"hello\", \"el\"));\n+    }\n+    \n+    public void testKeep_StringStringarray() {\n+        assertEquals(null, CharSetUtils.keep(null, (String[]) null));\n+        assertEquals(null, CharSetUtils.keep(null, new String[0]));\n+        assertEquals(null, CharSetUtils.keep(null, new String[] {null}));\n+        assertEquals(null, CharSetUtils.keep(null, new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"\", CharSetUtils.keep(\"\", (String[]) null));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", new String[0]));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", new String[] {null}));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", (String[]) null));\n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", new String[0]));\n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", new String[] {null}));\n+        assertEquals(\"e\", CharSetUtils.keep(\"hello\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"e\", CharSetUtils.keep(\"hello\", new String[] { \"a-e\" }));\n+        assertEquals(\"ell\", CharSetUtils.keep(\"hello\", new String[] { \"el\" }));\n+        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", new String[] { \"elho\" }));\n+        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", new String[] { \"a-z\" }));\n+        assertEquals(\"----\", CharSetUtils.keep(\"----\", new String[] { \"-\" }));\n+        assertEquals(\"ll\", CharSetUtils.keep(\"hello\", new String[] { \"l\" }));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDelete_StringString() {\n+        assertEquals(null, CharSetUtils.delete(null, (String) null));\n+        assertEquals(null, CharSetUtils.delete(null, \"\"));\n+        \n+        assertEquals(\"\", CharSetUtils.delete(\"\", (String) null));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", \"\"));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", \"a-e\"));\n+        \n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", (String) null));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"\"));\n+        assertEquals(\"hllo\", CharSetUtils.delete(\"hello\", \"a-e\"));\n+        assertEquals(\"he\", CharSetUtils.delete(\"hello\", \"l-p\"));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"z\"));\n+    }\n+    \n+    public void testDelete_StringStringarray() {\n+        assertEquals(null, CharSetUtils.delete(null, (String[]) null));\n+        assertEquals(null, CharSetUtils.delete(null, new String[0]));\n+        assertEquals(null, CharSetUtils.delete(null, new String[] {null}));\n+        assertEquals(null, CharSetUtils.delete(null, new String[] {\"el\"}));\n+        \n+        assertEquals(\"\", CharSetUtils.delete(\"\", (String[]) null));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", new String[0]));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", new String[] {null}));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", (String[]) null));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[0]));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] {null}));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] {\"xyz\"}));\n+\n+        assertEquals(\"ho\", CharSetUtils.delete(\"hello\", new String[] { \"el\" }));\n+        assertEquals(\"\", CharSetUtils.delete(\"hello\", new String[] { \"elho\" }));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] { \"\" }));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"\"));\n+        assertEquals(\"\", CharSetUtils.delete(\"hello\", new String[] { \"a-z\" }));\n+        assertEquals(\"\", CharSetUtils.delete(\"----\", new String[] { \"-\" }));\n+        assertEquals(\"heo\", CharSetUtils.delete(\"hello\", new String[] { \"l\" }));\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/CharUtilsPerfRun.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3;\n+\n+import java.text.NumberFormat;\n+import java.util.Calendar;\n+\n+/**\n+ * Tests the difference in performance between CharUtils and CharSet.\n+ * \n+ * Sample runs:\n+\n+Now: Thu Mar 18 14:29:48 PST 2004\n+Sun Microsystems Inc. Java(TM) 2 Runtime Environment, Standard Edition 1.3.1_10-b03\n+Sun Microsystems Inc. Java HotSpot(TM) Client VM 1.3.1_10-b03\n+Windows XP 5.1 x86 pentium i486 i386\n+Do nohting: 0 milliseconds.\n+run_CharUtils_isAsciiNumeric: 4,545 milliseconds.\n+run_inlined_CharUtils_isAsciiNumeric: 3,417 milliseconds.\n+run_inlined_CharUtils_isAsciiNumeric: 85,679 milliseconds.\n+\n+\n+Now: Thu Mar 18 14:24:51 PST 2004\n+Sun Microsystems Inc. Java(TM) 2 Runtime Environment, Standard Edition 1.4.2_04-b05\n+Sun Microsystems Inc. Java HotSpot(TM) Client VM 1.4.2_04-b05\n+Windows XP 5.1 x86 pentium i486 i386\n+Do nohting: 0 milliseconds.\n+run_CharUtils_isAsciiNumeric: 2,578 milliseconds.\n+run_inlined_CharUtils_isAsciiNumeric: 2,477 milliseconds.\n+run_inlined_CharUtils_isAsciiNumeric: 114,429 milliseconds.\n+\n+Now: Thu Mar 18 14:27:55 PST 2004\n+Sun Microsystems Inc. Java(TM) 2 Runtime Environment, Standard Edition 1.4.2_04-b05\n+Sun Microsystems Inc. Java HotSpot(TM) Server VM 1.4.2_04-b05\n+Windows XP 5.1 x86 pentium i486 i386\n+Do nohting: 0 milliseconds.\n+run_CharUtils_isAsciiNumeric: 630 milliseconds.\n+run_inlined_CharUtils_isAsciiNumeric: 709 milliseconds.\n+run_inlined_CharUtils_isAsciiNumeric: 84,420 milliseconds.\n+\n+\n+ * @version $Id$\n+ */\n+public class CharUtilsPerfRun {\n+    final static String VERSION = \"$Id$\";\n+\n+    final static int WARM_UP = 100;\n+\n+    final static int COUNT = 5000;\n+\n+    final static char[] CHAR_SAMPLES;\n+    static {\n+        CHAR_SAMPLES = new char[Character.MAX_VALUE];\n+        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {\n+            CHAR_SAMPLES[i] = i;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new CharUtilsPerfRun().run();\n+    }\n+\n+    private void printSysInfo() {\n+        System.out.println(VERSION);\n+        System.out.println(\"Now: \" + Calendar.getInstance().getTime());\n+        System.out.println(System.getProperty(\"java.vendor\")\n+                + \" \"\n+                + System.getProperty(\"java.runtime.name\")\n+                + \" \"\n+                + System.getProperty(\"java.runtime.version\"));\n+        System.out.println(System.getProperty(\"java.vm.vendor\")\n+                + \" \"\n+                + System.getProperty(\"java.vm.name\")\n+                + \" \"\n+                + System.getProperty(\"java.vm.version\"));\n+        System.out.println(System.getProperty(\"os.name\")\n+            + \" \"\n+            + System.getProperty(\"os.version\")\n+            + \" \"\n+            + System.getProperty(\"os.arch\")\n+            + \" \"\n+            + System.getProperty(\"sun.cpu.isalist\"));\n+    }\n+\n+    private void run() {\n+        this.printSysInfo();\n+        long start;\n+        start = System.currentTimeMillis();\n+        this.printlnTotal(\"Do nohting\", start);\n+        //System.out.println(\"Warming up...\");\n+        run_CharUtils_isAsciiNumeric(WARM_UP);\n+        //System.out.println(\"Measuring...\");\n+        start = System.currentTimeMillis();\n+        run_CharUtils_isAsciiNumeric(COUNT);\n+        this.printlnTotal(\"run_CharUtils_isAsciiNumeric\", start);\n+        //System.out.println(\"Warming up...\");\n+        run_inlined_CharUtils_isAsciiNumeric(WARM_UP);\n+        //System.out.println(\"Measuring...\");\n+        start = System.currentTimeMillis();\n+        run_inlined_CharUtils_isAsciiNumeric(COUNT);\n+        this.printlnTotal(\"run_inlined_CharUtils_isAsciiNumeric\", start);\n+        //System.out.println(\"Warming up...\");\n+        run_CharSet(WARM_UP);\n+        //System.out.println(\"Measuring...\");\n+        start = System.currentTimeMillis();\n+        run_CharSet(COUNT);\n+        this.printlnTotal(\"run_CharSet\", start);\n+    }\n+\n+    private int run_CharSet(int loopCount) {\n+        int t = 0;\n+        for (int i = 0; i < loopCount; i++) {\n+            for (int j = 0; j < CHAR_SAMPLES.length; j++) {\n+                char ch = CHAR_SAMPLES[j];\n+                boolean b = CharSet.ASCII_NUMERIC.contains(ch);\n+                t += b ? 1 : 0;\n+            }\n+        }\n+        return t;\n+    }\n+\n+    private int run_CharUtils_isAsciiNumeric(int loopCount) {\n+        int t = 0;\n+        for (int i = 0; i < loopCount; i++) {\n+            for (int j = 0; j < CHAR_SAMPLES.length; j++) {\n+                char ch = CHAR_SAMPLES[j];\n+                boolean b = CharUtils.isAsciiNumeric(ch);\n+                t += b ? 1 : 0;\n+            }\n+        }\n+        return t;\n+    }\n+\n+    private int run_inlined_CharUtils_isAsciiNumeric(int loopCount) {\n+        int t = 0;\n+        for (int i = 0; i < loopCount; i++) {\n+            for (int j = 0; j < CHAR_SAMPLES.length; j++) {\n+                char ch = CHAR_SAMPLES[j];\n+                boolean b = (ch >= '0' && ch <= '9');\n+                t += b ? 1 : 0;\n+            }\n+        }\n+        return t;\n+    }\n+\n+    private void printlnTotal(String prefix, long start) {\n+        long total = System.currentTimeMillis() - start;\n+        System.out.println(prefix + \": \" + NumberFormat.getInstance().format(total) + \" milliseconds.\");\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/CharUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.CharUtils}.\n+ *\n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ */\n+public class CharUtilsTest extends TestCase {\n+\n+    private static final Character CHARACTER_A = new Character('A');\n+    private static final Character CHARACTER_B = new Character('B');\n+    private static final char CHAR_COPY = '\\u00a9';\n+    \n+    public CharUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new CharUtils());\n+        Constructor<?>[] cons = CharUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToCharacterObject_char() {\n+        assertEquals(new Character('a'), CharUtils.toCharacterObject('a'));\n+        assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a'));\n+       \n+        for (int i = 0; i < 128; i++) {\n+            Character ch = CharUtils.toCharacterObject((char) i);\n+            Character ch2 = CharUtils.toCharacterObject((char) i);\n+            assertSame(ch, ch2);\n+            assertEquals(i, ch.charValue());\n+        }\n+        for (int i = 128; i < 196; i++) {\n+            Character ch = CharUtils.toCharacterObject((char) i);\n+            Character ch2 = CharUtils.toCharacterObject((char) i);\n+            assertEquals(ch, ch2);\n+            assertTrue(ch != ch2);\n+            assertEquals(i, ch.charValue());\n+            assertEquals(i, ch2.charValue());\n+        }\n+    }\n+    \n+    public void testToCharacterObject_String() {\n+        assertEquals(null, CharUtils.toCharacterObject(null));\n+        assertEquals(null, CharUtils.toCharacterObject(\"\"));\n+        assertEquals(new Character('a'), CharUtils.toCharacterObject(\"a\"));\n+        assertEquals(new Character('a'), CharUtils.toCharacterObject(\"abc\"));\n+        assertSame(CharUtils.toCharacterObject(\"a\"), CharUtils.toCharacterObject(\"a\"));\n+        assertSame(CharUtils.toCharacterObject(\"a\"), CharUtils.toCharacterObject('a'));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToChar_Character() {\n+        assertEquals('A', CharUtils.toChar(CHARACTER_A));\n+        assertEquals('B', CharUtils.toChar(CHARACTER_B));\n+        try {\n+            CharUtils.toChar((Character) null);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testToChar_Character_char() {\n+        assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X'));\n+        assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X'));\n+        assertEquals('X', CharUtils.toChar((Character) null, 'X'));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToChar_String() {\n+        assertEquals('A', CharUtils.toChar(\"A\"));\n+        assertEquals('B', CharUtils.toChar(\"BA\"));\n+        try {\n+            CharUtils.toChar((String) null);\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            CharUtils.toChar(\"\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testToChar_String_char() {\n+        assertEquals('A', CharUtils.toChar(\"A\", 'X'));\n+        assertEquals('B', CharUtils.toChar(\"BA\", 'X'));\n+        assertEquals('X', CharUtils.toChar(\"\", 'X'));\n+        assertEquals('X', CharUtils.toChar((String) null, 'X'));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToIntValue_char() {\n+        assertEquals(0, CharUtils.toIntValue('0'));\n+        assertEquals(1, CharUtils.toIntValue('1'));\n+        assertEquals(2, CharUtils.toIntValue('2'));\n+        assertEquals(3, CharUtils.toIntValue('3'));\n+        assertEquals(4, CharUtils.toIntValue('4'));\n+        assertEquals(5, CharUtils.toIntValue('5'));\n+        assertEquals(6, CharUtils.toIntValue('6'));\n+        assertEquals(7, CharUtils.toIntValue('7'));\n+        assertEquals(8, CharUtils.toIntValue('8'));\n+        assertEquals(9, CharUtils.toIntValue('9'));\n+        try {\n+            CharUtils.toIntValue('a');\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testToIntValue_char_int() {\n+        assertEquals(0, CharUtils.toIntValue('0', -1));\n+        assertEquals(3, CharUtils.toIntValue('3', -1));\n+        assertEquals(-1, CharUtils.toIntValue('a', -1));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToIntValue_Character() {\n+        assertEquals(0, CharUtils.toIntValue(new Character('0')));\n+        assertEquals(3, CharUtils.toIntValue(new Character('3')));\n+        try {\n+            CharUtils.toIntValue(null);\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            CharUtils.toIntValue(CHARACTER_A);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testToIntValue_Character_int() {\n+        assertEquals(0, CharUtils.toIntValue(new Character('0'), -1));\n+        assertEquals(3, CharUtils.toIntValue(new Character('3'), -1));\n+        assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1));\n+        assertEquals(-1, CharUtils.toIntValue(null, -1));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToString_char() {\n+        assertEquals(\"a\", CharUtils.toString('a'));\n+        assertSame(CharUtils.toString('a'), CharUtils.toString('a'));\n+       \n+        for (int i = 0; i < 128; i++) {\n+            String str = CharUtils.toString((char) i);\n+            String str2 = CharUtils.toString((char) i);\n+            assertSame(str, str2);\n+            assertEquals(1, str.length());\n+            assertEquals(i, str.charAt(0));\n+        }\n+        for (int i = 128; i < 196; i++) {\n+            String str = CharUtils.toString((char) i);\n+            String str2 = CharUtils.toString((char) i);\n+            assertEquals(str, str2);\n+            assertTrue(str != str2);\n+            assertEquals(1, str.length());\n+            assertEquals(i, str.charAt(0));\n+            assertEquals(1, str2.length());\n+            assertEquals(i, str2.charAt(0));\n+        }\n+    }\n+    \n+    public void testToString_Character() {\n+        assertEquals(null, CharUtils.toString(null));\n+        assertEquals(\"A\", CharUtils.toString(CHARACTER_A));\n+        assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToUnicodeEscaped_char() {\n+        assertEquals(\"\\\\u0041\", CharUtils.unicodeEscaped('A'));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            String str = CharUtils.unicodeEscaped((char) i);\n+            assertEquals(6, str.length());\n+            int val = Integer.parseInt(str.substring(2), 16);\n+            assertEquals(i, val);\n+        }\n+        assertEquals(\"\\\\u0999\", CharUtils.unicodeEscaped((char) 0x999));\n+        assertEquals(\"\\\\u1001\", CharUtils.unicodeEscaped((char) 0x1001));\n+    }\n+    \n+    public void testToUnicodeEscaped_Character() {\n+        assertEquals(null, CharUtils.unicodeEscaped(null));\n+        assertEquals(\"\\\\u0041\", CharUtils.unicodeEscaped(CHARACTER_A));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAscii_char() {\n+        assertEquals(true, CharUtils.isAscii('a'));\n+        assertEquals(true, CharUtils.isAscii('A'));\n+        assertEquals(true, CharUtils.isAscii('3'));\n+        assertEquals(true, CharUtils.isAscii('-'));\n+        assertEquals(true, CharUtils.isAscii('\\n'));\n+        assertEquals(false, CharUtils.isAscii(CHAR_COPY));\n+       \n+        for (int i = 0; i < 128; i++) {\n+            if (i < 128) {\n+                assertEquals(true, CharUtils.isAscii((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isAscii((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAsciiPrintable_char() {\n+        assertEquals(true, CharUtils.isAsciiPrintable('a'));\n+        assertEquals(true, CharUtils.isAsciiPrintable('A'));\n+        assertEquals(true, CharUtils.isAsciiPrintable('3'));\n+        assertEquals(true, CharUtils.isAsciiPrintable('-'));\n+        assertEquals(false, CharUtils.isAsciiPrintable('\\n'));\n+        assertEquals(false, CharUtils.isAscii(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if (i >= 32 && i <= 126) {\n+                assertEquals(true, CharUtils.isAsciiPrintable((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isAsciiPrintable((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAsciiControl_char() {\n+        assertEquals(false, CharUtils.isAsciiControl('a'));\n+        assertEquals(false, CharUtils.isAsciiControl('A'));\n+        assertEquals(false, CharUtils.isAsciiControl('3'));\n+        assertEquals(false, CharUtils.isAsciiControl('-'));\n+        assertEquals(true, CharUtils.isAsciiControl('\\n'));\n+        assertEquals(false, CharUtils.isAsciiControl(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if (i < 32 || i == 127) {\n+                assertEquals(true, CharUtils.isAsciiControl((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isAsciiControl((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAsciiAlpha_char() {\n+        assertEquals(true, CharUtils.isAsciiAlpha('a'));\n+        assertEquals(true, CharUtils.isAsciiAlpha('A'));\n+        assertEquals(false, CharUtils.isAsciiAlpha('3'));\n+        assertEquals(false, CharUtils.isAsciiAlpha('-'));\n+        assertEquals(false, CharUtils.isAsciiAlpha('\\n'));\n+        assertEquals(false, CharUtils.isAsciiAlpha(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z')) {\n+                assertEquals(true, CharUtils.isAsciiAlpha((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isAsciiAlpha((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAsciiAlphaUpper_char() {\n+        assertEquals(false, CharUtils.isAsciiAlphaUpper('a'));\n+        assertEquals(true, CharUtils.isAsciiAlphaUpper('A'));\n+        assertEquals(false, CharUtils.isAsciiAlphaUpper('3'));\n+        assertEquals(false, CharUtils.isAsciiAlphaUpper('-'));\n+        assertEquals(false, CharUtils.isAsciiAlphaUpper('\\n'));\n+        assertEquals(false, CharUtils.isAsciiAlphaUpper(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if (i >= 'A' && i <= 'Z') {\n+                assertEquals(true, CharUtils.isAsciiAlphaUpper((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isAsciiAlphaUpper((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAsciiAlphaLower_char() {\n+        assertEquals(true, CharUtils.isAsciiAlphaLower('a'));\n+        assertEquals(false, CharUtils.isAsciiAlphaLower('A'));\n+        assertEquals(false, CharUtils.isAsciiAlphaLower('3'));\n+        assertEquals(false, CharUtils.isAsciiAlphaLower('-'));\n+        assertEquals(false, CharUtils.isAsciiAlphaLower('\\n'));\n+        assertEquals(false, CharUtils.isAsciiAlphaLower(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if (i >= 'a' && i <= 'z') {\n+                assertEquals(true, CharUtils.isAsciiAlphaLower((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isAsciiAlphaLower((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAsciiNumeric_char() {\n+        assertEquals(false, CharUtils.isAsciiNumeric('a'));\n+        assertEquals(false, CharUtils.isAsciiNumeric('A'));\n+        assertEquals(true, CharUtils.isAsciiNumeric('3'));\n+        assertEquals(false, CharUtils.isAsciiNumeric('-'));\n+        assertEquals(false, CharUtils.isAsciiNumeric('\\n'));\n+        assertEquals(false, CharUtils.isAsciiNumeric(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if (i >= '0' && i <= '9') {\n+                assertEquals(true, CharUtils.isAsciiNumeric((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isAsciiNumeric((char) i));\n+            }\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAsciiAlphanumeric_char() {\n+        assertEquals(true, CharUtils.isAsciiAlphanumeric('a'));\n+        assertEquals(true, CharUtils.isAsciiAlphanumeric('A'));\n+        assertEquals(true, CharUtils.isAsciiAlphanumeric('3'));\n+        assertEquals(false, CharUtils.isAsciiAlphanumeric('-'));\n+        assertEquals(false, CharUtils.isAsciiAlphanumeric('\\n'));\n+        assertEquals(false, CharUtils.isAsciiAlphanumeric(CHAR_COPY));\n+       \n+        for (int i = 0; i < 196; i++) {\n+            if ((i >= 'A' && i <= 'Z') || (i >= 'a' && i <= 'z') || (i >= '0' && i <= '9')) {\n+                assertEquals(true, CharUtils.isAsciiAlphanumeric((char) i));\n+            } else {\n+                assertEquals(false, CharUtils.isAsciiAlphanumeric((char) i));\n+            }\n+        }\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import junit.framework.TestCase;\n+\n+\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.ClassUtils}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author Gary D. Gregory\n+ * @author Tomasz Blachowicz\n+ * @version $Id$\n+ */\n+public class ClassUtilsTest extends TestCase {\n+\n+    public ClassUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    private static class Inner {\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new ClassUtils());\n+        Constructor<?>[] cons = ClassUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(ClassUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(ClassUtils.class.getModifiers()));\n+    }\n+    \n+    // -------------------------------------------------------------------------\n+    public void test_getShortClassName_Object() {\n+        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(new ClassUtils(), \"<null>\"));\n+        assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortClassName(new Inner(), \"<null>\"));\n+        assertEquals(\"String\", ClassUtils.getShortClassName(\"hello\", \"<null>\"));\n+        assertEquals(\"<null>\", ClassUtils.getShortClassName(null, \"<null>\"));\n+    }\n+    \n+    public void test_getShortClassName_Class() {\n+        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));\n+        assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));\n+        assertEquals(\"\", ClassUtils.getShortClassName((Class<?>) null));\n+\n+        // LANG-535\n+        assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));\n+        assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));\n+\n+        // Primitives\n+        assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));\n+        assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));\n+        assertEquals(\"char\", ClassUtils.getShortClassName(char.class));\n+        assertEquals(\"short\", ClassUtils.getShortClassName(short.class));\n+        assertEquals(\"int\", ClassUtils.getShortClassName(int.class));\n+        assertEquals(\"long\", ClassUtils.getShortClassName(long.class));\n+        assertEquals(\"float\", ClassUtils.getShortClassName(float.class));\n+        assertEquals(\"double\", ClassUtils.getShortClassName(double.class));\n+\n+        // Primitive Arrays\n+        assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));\n+        assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));\n+        assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));\n+        assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));\n+        assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));\n+        assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));\n+        assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));\n+        assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));\n+\n+        // Arrays of arrays of ...\n+        assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));\n+        assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));\n+        assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));\n+    }\n+    \n+    public void test_getShortClassName_String() {\n+        assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class.getName()));\n+        assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class.getName()));\n+        assertEquals(\"\", ClassUtils.getShortClassName((String) null));\n+        assertEquals(\"\", ClassUtils.getShortClassName(\"\"));\n+    }\n+\n+    // -------------------------------------------------------------------------\n+    public void test_getPackageName_Object() {\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new ClassUtils(), \"<null>\"));\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new Inner(), \"<null>\"));\n+        assertEquals(\"<null>\", ClassUtils.getPackageName(null, \"<null>\"));\n+    }\n+    \n+    public void test_getPackageName_Class() {\n+        assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));\n+        assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));\n+        assertEquals(\"\", ClassUtils.getPackageName((Class<?>)null));\n+\n+        // LANG-535\n+        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));\n+\n+        // Primitive Arrays\n+        assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(byte[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(char[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(short[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(int[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(long[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(float[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(double[].class));\n+\n+        // Arrays of arrays of ...\n+        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));\n+        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));\n+        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));\n+    }\n+    \n+    public void test_getPackageName_String() {\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(ClassUtils.class.getName()));\n+        assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class.getName()));\n+        assertEquals(\"\", ClassUtils.getPackageName((String)null));\n+        assertEquals(\"\", ClassUtils.getPackageName(\"\"));\n+    }\n+    \n+    // -------------------------------------------------------------------------\n+    public void test_getAllSuperclasses_Class() {\n+        List<?> list = ClassUtils.getAllSuperclasses(CY.class);\n+        assertEquals(2, list.size());\n+        assertEquals(CX.class, list.get(0));\n+        assertEquals(Object.class, list.get(1));\n+        \n+        assertEquals(null, ClassUtils.getAllSuperclasses(null));\n+    }\n+    \n+    public void test_getAllInterfaces_Class() {\n+        List<?> list = ClassUtils.getAllInterfaces(CY.class);\n+        assertEquals(6, list.size());\n+        assertEquals(IB.class, list.get(0));\n+        assertEquals(IC.class, list.get(1));\n+        assertEquals(ID.class, list.get(2));\n+        assertEquals(IE.class, list.get(3));\n+        assertEquals(IF.class, list.get(4));\n+        assertEquals(IA.class, list.get(5));\n+        \n+        assertEquals(null, ClassUtils.getAllInterfaces(null));\n+    }\n+    \n+    private static interface IA {\n+    }\n+    private static interface IB {\n+    }\n+    private static interface IC extends ID, IE {\n+    }\n+    private static interface ID {\n+    }\n+    private static interface IE extends IF {\n+    }\n+    private static interface IF {\n+    }\n+    private static class CX implements IB, IA, IE {\n+    }\n+    private static class CY extends CX implements IB, IC {\n+    }\n+    \n+    // -------------------------------------------------------------------------\n+    public void test_convertClassNamesToClasses_List() {\n+        List<String> list = new ArrayList<String>();\n+        List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list);\n+        assertEquals(0, result.size());\n+        \n+        list.add(\"java.lang.String\");\n+        list.add(\"java.lang.xxx\");\n+        list.add(\"java.lang.Object\");\n+        result = ClassUtils.convertClassNamesToClasses(list);\n+        assertEquals(3, result.size());\n+        assertEquals(String.class, result.get(0));\n+        assertEquals(null, result.get(1));\n+        assertEquals(Object.class, result.get(2));\n+\n+        @SuppressWarnings(\"unchecked\") // test what happens when non-gneric code adds wrong type of element\n+        List<Object> olist = (List<Object>)(List<?>)list; \n+        olist.add(new Object());\n+        try {\n+            ClassUtils.convertClassNamesToClasses(list);\n+            fail(\"Should not have been able to convert list\");\n+        } catch (ClassCastException expected) {}\n+        assertEquals(null, ClassUtils.convertClassNamesToClasses(null));\n+    }\n+    \n+    public void test_convertClassesToClassNames_List() {\n+        List<Class<?>> list = new ArrayList<Class<?>>();\n+        List<String> result = ClassUtils.convertClassesToClassNames(list);\n+        assertEquals(0, result.size());\n+        \n+        list.add(String.class);\n+        list.add(null);\n+        list.add(Object.class);\n+        result = ClassUtils.convertClassesToClassNames(list);\n+        assertEquals(3, result.size());\n+        assertEquals(\"java.lang.String\", result.get(0));\n+        assertEquals(null, result.get(1));\n+        assertEquals(\"java.lang.Object\", result.get(2));\n+\n+        @SuppressWarnings(\"unchecked\") // test what happens when non-gneric code adds wrong type of element\n+        List<Object> olist = (List<Object>)(List<?>)list; \n+        olist.add(new Object());\n+        try {\n+            ClassUtils.convertClassesToClassNames(list);\n+            fail(\"Should not have been able to convert list\");\n+        } catch (ClassCastException expected) {}\n+        assertEquals(null, ClassUtils.convertClassesToClassNames(null));\n+    }\n+    \n+    // -------------------------------------------------------------------------\n+    public void test_isInnerClass_Class() {\n+        assertEquals(true, ClassUtils.isInnerClass(Inner.class));\n+        assertEquals(true, ClassUtils.isInnerClass(Map.Entry.class));\n+        assertEquals(true, ClassUtils.isInnerClass(new Cloneable() {\n+        }.getClass()));\n+        assertEquals(false, ClassUtils.isInnerClass(this.getClass()));\n+        assertEquals(false, ClassUtils.isInnerClass(String.class));\n+        assertEquals(false, ClassUtils.isInnerClass(null));\n+    }\n+    \n+    // -------------------------------------------------------------------------\n+    public void test_isAssignable_ClassArray_ClassArray() throws Exception {\n+        Class<?>[] array2 = new Class[] {Object.class, Object.class};\n+        Class<?>[] array1 = new Class[] {Object.class};\n+        Class<?>[] array1s = new Class[] {String.class};\n+        Class<?>[] array0 = new Class[] {};\n+\n+        assertFalse(ClassUtils.isAssignable(array1, array2));\n+        assertFalse(ClassUtils.isAssignable(null, array2));\n+        assertTrue(ClassUtils.isAssignable(null, array0));\n+        assertTrue(ClassUtils.isAssignable(array0, array0));\n+        assertTrue(ClassUtils.isAssignable(array0, null));\n+        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null));\n+        \n+        assertFalse(ClassUtils.isAssignable(array1, array1s));\n+        assertTrue(ClassUtils.isAssignable(array1s, array1s));\n+        assertTrue(ClassUtils.isAssignable(array1s, array1));\n+    }\n+    \n+    public void test_isAssignable() throws Exception {\n+        assertFalse(ClassUtils.isAssignable((Class<?>) null, null));\n+        assertFalse(ClassUtils.isAssignable(String.class, null));\n+        \n+        assertTrue(ClassUtils.isAssignable(null, Object.class));\n+        assertTrue(ClassUtils.isAssignable(null, Integer.class));\n+        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE));\n+        assertTrue(ClassUtils.isAssignable(String.class, Object.class));\n+        assertTrue(ClassUtils.isAssignable(String.class, String.class));\n+        assertFalse(ClassUtils.isAssignable(Object.class, String.class));\n+        assertFalse(ClassUtils.isAssignable(Integer.TYPE, Integer.class));\n+        assertFalse(ClassUtils.isAssignable(Integer.class, Integer.TYPE));\n+        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n+        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class));\n+        assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class));\n+        assertFalse(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));\n+        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n+        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class));\n+    }\n+    \n+    public void test_isAssignable_Autoboxing() throws Exception {\n+        assertFalse(ClassUtils.isAssignable((Class<?>) null, null, true));\n+        assertFalse(ClassUtils.isAssignable(String.class, null, true));\n+\n+        assertTrue(ClassUtils.isAssignable(null, Object.class, true));\n+        assertTrue(ClassUtils.isAssignable(null, Integer.class, true));\n+        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, true));\n+        assertTrue(ClassUtils.isAssignable(String.class, Object.class, true));\n+        assertTrue(ClassUtils.isAssignable(String.class, String.class, true));\n+        assertFalse(ClassUtils.isAssignable(Object.class, String.class, true));\n+        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class, true));\n+        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));\n+        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, true));\n+        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, true));\n+        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, true));\n+        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));\n+        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, true));\n+        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, true));\n+    }\n+\n+    public void test_isAssignable_Widening() throws Exception {\n+        // test byte conversions\n+        assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.TYPE, Character.TYPE));\n+        assertTrue(\"byte -> byte\", ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE));\n+        assertTrue(\"byte -> short\", ClassUtils.isAssignable(Byte.TYPE, Short.TYPE));\n+        assertTrue(\"byte -> int\", ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE));\n+        assertTrue(\"byte -> long\", ClassUtils.isAssignable(Byte.TYPE, Long.TYPE));\n+        assertTrue(\"byte -> float\", ClassUtils.isAssignable(Byte.TYPE, Float.TYPE));\n+        assertTrue(\"byte -> double\", ClassUtils.isAssignable(Byte.TYPE, Double.TYPE));\n+        assertFalse(\"byte -> boolean\", ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE));\n+        \n+        // test short conversions\n+        assertFalse(\"short -> char\", ClassUtils.isAssignable(Short.TYPE, Character.TYPE));\n+        assertFalse(\"short -> byte\", ClassUtils.isAssignable(Short.TYPE, Byte.TYPE));\n+        assertTrue(\"short -> short\", ClassUtils.isAssignable(Short.TYPE, Short.TYPE));\n+        assertTrue(\"short -> int\", ClassUtils.isAssignable(Short.TYPE, Integer.TYPE));\n+        assertTrue(\"short -> long\", ClassUtils.isAssignable(Short.TYPE, Long.TYPE));\n+        assertTrue(\"short -> float\", ClassUtils.isAssignable(Short.TYPE, Float.TYPE));\n+        assertTrue(\"short -> double\", ClassUtils.isAssignable(Short.TYPE, Double.TYPE));\n+        assertFalse(\"short -> boolean\", ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE));\n+        \n+        // test char conversions\n+        assertTrue(\"char -> char\", ClassUtils.isAssignable(Character.TYPE, Character.TYPE));\n+        assertFalse(\"char -> byte\", ClassUtils.isAssignable(Character.TYPE, Byte.TYPE));\n+        assertFalse(\"char -> short\", ClassUtils.isAssignable(Character.TYPE, Short.TYPE));\n+        assertTrue(\"char -> int\", ClassUtils.isAssignable(Character.TYPE, Integer.TYPE));\n+        assertTrue(\"char -> long\", ClassUtils.isAssignable(Character.TYPE, Long.TYPE));\n+        assertTrue(\"char -> float\", ClassUtils.isAssignable(Character.TYPE, Float.TYPE));\n+        assertTrue(\"char -> double\", ClassUtils.isAssignable(Character.TYPE, Double.TYPE));\n+        assertFalse(\"char -> boolean\", ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE));\n+        \n+        // test int conversions\n+        assertFalse(\"int -> char\", ClassUtils.isAssignable(Integer.TYPE, Character.TYPE));\n+        assertFalse(\"int -> byte\", ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE));\n+        assertFalse(\"int -> short\", ClassUtils.isAssignable(Integer.TYPE, Short.TYPE));\n+        assertTrue(\"int -> int\", ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n+        assertTrue(\"int -> long\", ClassUtils.isAssignable(Integer.TYPE, Long.TYPE));\n+        assertTrue(\"int -> float\", ClassUtils.isAssignable(Integer.TYPE, Float.TYPE));\n+        assertTrue(\"int -> double\", ClassUtils.isAssignable(Integer.TYPE, Double.TYPE));\n+        assertFalse(\"int -> boolean\", ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE));\n+ \n+        // test long conversions\n+        assertFalse(\"long -> char\", ClassUtils.isAssignable(Long.TYPE, Character.TYPE));\n+        assertFalse(\"long -> byte\", ClassUtils.isAssignable(Long.TYPE, Byte.TYPE));\n+        assertFalse(\"long -> short\", ClassUtils.isAssignable(Long.TYPE, Short.TYPE));\n+        assertFalse(\"long -> int\", ClassUtils.isAssignable(Long.TYPE, Integer.TYPE));\n+        assertTrue(\"long -> long\", ClassUtils.isAssignable(Long.TYPE, Long.TYPE));\n+        assertTrue(\"long -> float\", ClassUtils.isAssignable(Long.TYPE, Float.TYPE));\n+        assertTrue(\"long -> double\", ClassUtils.isAssignable(Long.TYPE, Double.TYPE));\n+        assertFalse(\"long -> boolean\", ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE));\n+ \n+        // test float conversions\n+        assertFalse(\"float -> char\", ClassUtils.isAssignable(Float.TYPE, Character.TYPE));\n+        assertFalse(\"float -> byte\", ClassUtils.isAssignable(Float.TYPE, Byte.TYPE));\n+        assertFalse(\"float -> short\", ClassUtils.isAssignable(Float.TYPE, Short.TYPE));\n+        assertFalse(\"float -> int\", ClassUtils.isAssignable(Float.TYPE, Integer.TYPE));\n+        assertFalse(\"float -> long\", ClassUtils.isAssignable(Float.TYPE, Long.TYPE));\n+        assertTrue(\"float -> float\", ClassUtils.isAssignable(Float.TYPE, Float.TYPE));\n+        assertTrue(\"float -> double\", ClassUtils.isAssignable(Float.TYPE, Double.TYPE));\n+        assertFalse(\"float -> boolean\", ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE));\n+        \n+        // test double conversions\n+        assertFalse(\"double -> char\", ClassUtils.isAssignable(Double.TYPE, Character.TYPE));\n+        assertFalse(\"double -> byte\", ClassUtils.isAssignable(Double.TYPE, Byte.TYPE));\n+        assertFalse(\"double -> short\", ClassUtils.isAssignable(Double.TYPE, Short.TYPE));\n+        assertFalse(\"double -> int\", ClassUtils.isAssignable(Double.TYPE, Integer.TYPE));\n+        assertFalse(\"double -> long\", ClassUtils.isAssignable(Double.TYPE, Long.TYPE));\n+        assertFalse(\"double -> float\", ClassUtils.isAssignable(Double.TYPE, Float.TYPE));\n+        assertTrue(\"double -> double\", ClassUtils.isAssignable(Double.TYPE, Double.TYPE));\n+        assertFalse(\"double -> boolean\", ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE));\n+        \n+        // test boolean conversions\n+        assertFalse(\"boolean -> char\", ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE));\n+        assertFalse(\"boolean -> byte\", ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE));\n+        assertFalse(\"boolean -> short\", ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE));\n+        assertFalse(\"boolean -> int\", ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE));\n+        assertFalse(\"boolean -> long\", ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE));\n+        assertFalse(\"boolean -> float\", ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE));\n+        assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE));\n+        assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n+    }\n+    \n+    public void test_isAssignable_Unboxing_Widening() throws Exception {\n+        // test byte conversions\n+        assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.class, Character.TYPE, true));\n+        assertTrue(\"byte -> byte\", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true));\n+        assertTrue(\"byte -> short\", ClassUtils.isAssignable(Byte.class, Short.TYPE, true));\n+        assertTrue(\"byte -> int\", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true));\n+        assertTrue(\"byte -> long\", ClassUtils.isAssignable(Byte.class, Long.TYPE, true));\n+        assertTrue(\"byte -> float\", ClassUtils.isAssignable(Byte.class, Float.TYPE, true));\n+        assertTrue(\"byte -> double\", ClassUtils.isAssignable(Byte.class, Double.TYPE, true));\n+        assertFalse(\"byte -> boolean\", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true));\n+        \n+        // test short conversions\n+        assertFalse(\"short -> char\", ClassUtils.isAssignable(Short.class, Character.TYPE, true));\n+        assertFalse(\"short -> byte\", ClassUtils.isAssignable(Short.class, Byte.TYPE, true));\n+        assertTrue(\"short -> short\", ClassUtils.isAssignable(Short.class, Short.TYPE, true));\n+        assertTrue(\"short -> int\", ClassUtils.isAssignable(Short.class, Integer.TYPE, true));\n+        assertTrue(\"short -> long\", ClassUtils.isAssignable(Short.class, Long.TYPE, true));\n+        assertTrue(\"short -> float\", ClassUtils.isAssignable(Short.class, Float.TYPE, true));\n+        assertTrue(\"short -> double\", ClassUtils.isAssignable(Short.class, Double.TYPE, true));\n+        assertFalse(\"short -> boolean\", ClassUtils.isAssignable(Short.class, Boolean.TYPE, true));\n+        \n+        // test char conversions\n+        assertTrue(\"char -> char\", ClassUtils.isAssignable(Character.class, Character.TYPE, true));\n+        assertFalse(\"char -> byte\", ClassUtils.isAssignable(Character.class, Byte.TYPE, true));\n+        assertFalse(\"char -> short\", ClassUtils.isAssignable(Character.class, Short.TYPE, true));\n+        assertTrue(\"char -> int\", ClassUtils.isAssignable(Character.class, Integer.TYPE, true));\n+        assertTrue(\"char -> long\", ClassUtils.isAssignable(Character.class, Long.TYPE, true));\n+        assertTrue(\"char -> float\", ClassUtils.isAssignable(Character.class, Float.TYPE, true));\n+        assertTrue(\"char -> double\", ClassUtils.isAssignable(Character.class, Double.TYPE, true));\n+        assertFalse(\"char -> boolean\", ClassUtils.isAssignable(Character.class, Boolean.TYPE, true));\n+        \n+        // test int conversions\n+        assertFalse(\"int -> char\", ClassUtils.isAssignable(Integer.class, Character.TYPE, true));\n+        assertFalse(\"int -> byte\", ClassUtils.isAssignable(Integer.class, Byte.TYPE, true));\n+        assertFalse(\"int -> short\", ClassUtils.isAssignable(Integer.class, Short.TYPE, true));\n+        assertTrue(\"int -> int\", ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));\n+        assertTrue(\"int -> long\", ClassUtils.isAssignable(Integer.class, Long.TYPE, true));\n+        assertTrue(\"int -> float\", ClassUtils.isAssignable(Integer.class, Float.TYPE, true));\n+        assertTrue(\"int -> double\", ClassUtils.isAssignable(Integer.class, Double.TYPE, true));\n+        assertFalse(\"int -> boolean\", ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true));\n+        \n+        // test long conversions\n+        assertFalse(\"long -> char\", ClassUtils.isAssignable(Long.class, Character.TYPE, true));\n+        assertFalse(\"long -> byte\", ClassUtils.isAssignable(Long.class, Byte.TYPE, true));\n+        assertFalse(\"long -> short\", ClassUtils.isAssignable(Long.class, Short.TYPE, true));\n+        assertFalse(\"long -> int\", ClassUtils.isAssignable(Long.class, Integer.TYPE, true));\n+        assertTrue(\"long -> long\", ClassUtils.isAssignable(Long.class, Long.TYPE, true));\n+        assertTrue(\"long -> float\", ClassUtils.isAssignable(Long.class, Float.TYPE, true));\n+        assertTrue(\"long -> double\", ClassUtils.isAssignable(Long.class, Double.TYPE, true));\n+        assertFalse(\"long -> boolean\", ClassUtils.isAssignable(Long.class, Boolean.TYPE, true));\n+        \n+        // test float conversions\n+        assertFalse(\"float -> char\", ClassUtils.isAssignable(Float.class, Character.TYPE, true));\n+        assertFalse(\"float -> byte\", ClassUtils.isAssignable(Float.class, Byte.TYPE, true));\n+        assertFalse(\"float -> short\", ClassUtils.isAssignable(Float.class, Short.TYPE, true));\n+        assertFalse(\"float -> int\", ClassUtils.isAssignable(Float.class, Integer.TYPE, true));\n+        assertFalse(\"float -> long\", ClassUtils.isAssignable(Float.class, Long.TYPE, true));\n+        assertTrue(\"float -> float\", ClassUtils.isAssignable(Float.class, Float.TYPE, true));\n+        assertTrue(\"float -> double\", ClassUtils.isAssignable(Float.class, Double.TYPE, true));\n+        assertFalse(\"float -> boolean\", ClassUtils.isAssignable(Float.class, Boolean.TYPE, true));\n+        \n+        // test double conversions\n+        assertFalse(\"double -> char\", ClassUtils.isAssignable(Double.class, Character.TYPE, true));\n+        assertFalse(\"double -> byte\", ClassUtils.isAssignable(Double.class, Byte.TYPE, true));\n+        assertFalse(\"double -> short\", ClassUtils.isAssignable(Double.class, Short.TYPE, true));\n+        assertFalse(\"double -> int\", ClassUtils.isAssignable(Double.class, Integer.TYPE, true));\n+        assertFalse(\"double -> long\", ClassUtils.isAssignable(Double.class, Long.TYPE, true));\n+        assertFalse(\"double -> float\", ClassUtils.isAssignable(Double.class, Float.TYPE, true));\n+        assertTrue(\"double -> double\", ClassUtils.isAssignable(Double.class, Double.TYPE, true));\n+        assertFalse(\"double -> boolean\", ClassUtils.isAssignable(Double.class, Boolean.TYPE, true));\n+        \n+        // test boolean conversions\n+        assertFalse(\"boolean -> char\", ClassUtils.isAssignable(Boolean.class, Character.TYPE, true));\n+        assertFalse(\"boolean -> byte\", ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true));\n+        assertFalse(\"boolean -> short\", ClassUtils.isAssignable(Boolean.class, Short.TYPE, true));\n+        assertFalse(\"boolean -> int\", ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true));\n+        assertFalse(\"boolean -> long\", ClassUtils.isAssignable(Boolean.class, Long.TYPE, true));\n+        assertFalse(\"boolean -> float\", ClassUtils.isAssignable(Boolean.class, Float.TYPE, true));\n+        assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.class, Double.TYPE, true));\n+        assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));\n+    }\n+    \n+    public void testPrimitiveToWrapper() {\n+       \n+        // test primitive classes\n+        assertEquals(\"boolean -> Boolean.class\", \n+            Boolean.class, ClassUtils.primitiveToWrapper(Boolean.TYPE));   \n+        assertEquals(\"byte -> Byte.class\",\n+            Byte.class, ClassUtils.primitiveToWrapper(Byte.TYPE));\n+        assertEquals(\"char -> Character.class\",\n+            Character.class, ClassUtils.primitiveToWrapper(Character.TYPE));\n+        assertEquals(\"short -> Short.class\",\n+            Short.class, ClassUtils.primitiveToWrapper(Short.TYPE));\n+        assertEquals(\"int -> Integer.class\",\n+            Integer.class, ClassUtils.primitiveToWrapper(Integer.TYPE));\n+        assertEquals(\"long -> Long.class\",\n+            Long.class, ClassUtils.primitiveToWrapper(Long.TYPE));\n+        assertEquals(\"double -> Double.class\",\n+            Double.class, ClassUtils.primitiveToWrapper(Double.TYPE));\n+        assertEquals(\"float -> Float.class\",\n+            Float.class, ClassUtils.primitiveToWrapper(Float.TYPE));\n+        \n+        // test a few other classes\n+        assertEquals(\"String.class -> String.class\",\n+            String.class, ClassUtils.primitiveToWrapper(String.class));\n+        assertEquals(\"ClassUtils.class -> ClassUtils.class\",\n+            org.apache.commons.lang3.ClassUtils.class, \n+            ClassUtils.primitiveToWrapper(org.apache.commons.lang3.ClassUtils.class));\n+        assertEquals(\"Void.TYPE -> Void.TYPE\",\n+            Void.TYPE, ClassUtils.primitiveToWrapper(Void.TYPE));\n+            \n+        // test null     \n+        assertNull(\"null -> null\",\n+            ClassUtils.primitiveToWrapper(null));\n+    }\n+\n+    public void testPrimitivesToWrappers() {\n+        // test null\n+        assertNull(\"null -> null\",\n+            ClassUtils.primitivesToWrappers(null));\n+        // test empty array\n+        assertEquals(\"empty -> empty\",\n+                ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY));\n+\n+        // test an array of various classes\n+        final Class<?>[] primitives = new Class[] {\n+                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE, \n+                Integer.TYPE, Long.TYPE, Double.TYPE, Float.TYPE,\n+                String.class, ClassUtils.class\n+        };\n+        Class<?>[] wrappers= ClassUtils.primitivesToWrappers(primitives);\n+        \n+        for (int i=0; i < primitives.length; i++) {\n+            // test each returned wrapper\n+            Class<?> primitive = primitives[i];\n+            Class<?> expectedWrapper = ClassUtils.primitiveToWrapper(primitive);\n+            \n+            assertEquals(primitive + \" -> \" + expectedWrapper, expectedWrapper, wrappers[i]);\n+        }\n+\n+        // test an array of no primitive classes\n+        final Class<?>[] noPrimitives = new Class[] {\n+                String.class, ClassUtils.class, Void.TYPE\n+        };\n+        // This used to return the exact same array, but no longer does.\n+        assertNotSame(\"unmodified\", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives));\n+    }\n+\n+    public void testWrapperToPrimitive() {\n+        // an array with classes to convert\n+        final Class<?>[] primitives = {\n+                Boolean.TYPE, Byte.TYPE, Character.TYPE, Short.TYPE,\n+                Integer.TYPE, Long.TYPE, Float.TYPE, Double.TYPE\n+        };\n+        for (int i = 0; i < primitives.length; i++) {\n+            Class<?> wrapperCls = ClassUtils.primitiveToWrapper(primitives[i]);\n+            assertFalse(\"Still primitive\", wrapperCls.isPrimitive());\n+            assertEquals(wrapperCls + \" -> \" + primitives[i], primitives[i],\n+                    ClassUtils.wrapperToPrimitive(wrapperCls));\n+        }\n+    }\n+\n+    public void testWrapperToPrimitiveNoWrapper() {\n+        assertNull(\"Wrong result for non wrapper class\", ClassUtils.wrapperToPrimitive(String.class));\n+    }\n+\n+    public void testWrapperToPrimitiveNull() {\n+        assertNull(\"Wrong result for null class\", ClassUtils.wrapperToPrimitive(null));\n+    }\n+\n+    public void testWrappersToPrimitives() {\n+        // an array with classes to test\n+        final Class<?>[] classes = {\n+                Boolean.class, Byte.class, Character.class, Short.class,\n+                Integer.class, Long.class, Float.class, Double.class,\n+                String.class, ClassUtils.class, null\n+        };\n+\n+        Class<?>[] primitives = ClassUtils.wrappersToPrimitives(classes);\n+        // now test the result\n+        assertEquals(\"Wrong length of result array\", classes.length, primitives.length);\n+        for (int i = 0; i < classes.length; i++) {\n+            Class<?> expectedPrimitive = ClassUtils.wrapperToPrimitive(classes[i]);\n+            assertEquals(classes[i] + \" -> \" + expectedPrimitive, expectedPrimitive,\n+                    primitives[i]);\n+        }\n+    }\n+\n+    public void testWrappersToPrimitivesNull() {\n+        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives(null));\n+    }\n+\n+    public void testWrappersToPrimitivesEmpty() {\n+        Class<?>[] empty = new Class[0];\n+        assertEquals(\"Wrong result for empty input\", empty, ClassUtils.wrappersToPrimitives(empty));\n+    }\n+\n+    public void testGetClassClassNotFound() throws Exception {\n+        assertGetClassThrowsClassNotFound( \"bool\" );\n+        assertGetClassThrowsClassNotFound( \"bool[]\" );\n+        assertGetClassThrowsClassNotFound( \"integer[]\" );\n+    }\n+\n+    public void testGetClassInvalidArguments() throws Exception {\n+        assertGetClassThrowsNullPointerException( null );\n+        assertGetClassThrowsClassNotFound( \"[][][]\" );\n+        assertGetClassThrowsClassNotFound( \"[[]\" );\n+        assertGetClassThrowsClassNotFound( \"[\" );\n+        assertGetClassThrowsClassNotFound( \"java.lang.String][\" );\n+        assertGetClassThrowsClassNotFound( \".hello.world\" );\n+        assertGetClassThrowsClassNotFound( \"hello..world\" );\n+    }\n+\n+    public void testWithInterleavingWhitespace() throws ClassNotFoundException {\n+        assertEquals( int[].class, ClassUtils.getClass( \" int [ ] \" ) );\n+        assertEquals( long[].class, ClassUtils.getClass( \"\\rlong\\t[\\n]\\r\" ) );\n+        assertEquals( short[].class, ClassUtils.getClass( \"\\tshort                \\t\\t[]\" ) );\n+        assertEquals( byte[].class, ClassUtils.getClass( \"byte[\\t\\t\\n\\r]   \" ) );\n+    }\n+\n+    public void testGetClassByNormalNameArrays() throws ClassNotFoundException {\n+        assertEquals( int[].class, ClassUtils.getClass( \"int[]\" ) );\n+        assertEquals( long[].class, ClassUtils.getClass( \"long[]\" ) );\n+        assertEquals( short[].class, ClassUtils.getClass( \"short[]\" ) );\n+        assertEquals( byte[].class, ClassUtils.getClass( \"byte[]\" ) );\n+        assertEquals( char[].class, ClassUtils.getClass( \"char[]\" ) );\n+        assertEquals( float[].class, ClassUtils.getClass( \"float[]\" ) );\n+        assertEquals( double[].class, ClassUtils.getClass( \"double[]\" ) );\n+        assertEquals( boolean[].class, ClassUtils.getClass( \"boolean[]\" ) );\n+        assertEquals( String[].class, ClassUtils.getClass( \"java.lang.String[]\" ) );\n+    }\n+\n+    public void testGetClassByNormalNameArrays2D() throws ClassNotFoundException {\n+        assertEquals( int[][].class, ClassUtils.getClass( \"int[][]\" ) );\n+        assertEquals( long[][].class, ClassUtils.getClass( \"long[][]\" ) );\n+        assertEquals( short[][].class, ClassUtils.getClass( \"short[][]\" ) );\n+        assertEquals( byte[][].class, ClassUtils.getClass( \"byte[][]\" ) );\n+        assertEquals( char[][].class, ClassUtils.getClass( \"char[][]\" ) );\n+        assertEquals( float[][].class, ClassUtils.getClass( \"float[][]\" ) );\n+        assertEquals( double[][].class, ClassUtils.getClass( \"double[][]\" ) );\n+        assertEquals( boolean[][].class, ClassUtils.getClass( \"boolean[][]\" ) );\n+        assertEquals( String[][].class, ClassUtils.getClass( \"java.lang.String[][]\" ) );\n+    }\n+\n+    public void testGetClassWithArrayClasses2D() throws Exception {\n+        assertGetClassReturnsClass( String[][].class );\n+        assertGetClassReturnsClass( int[][].class );\n+        assertGetClassReturnsClass( long[][].class );\n+        assertGetClassReturnsClass( short[][].class );\n+        assertGetClassReturnsClass( byte[][].class );\n+        assertGetClassReturnsClass( char[][].class );\n+        assertGetClassReturnsClass( float[][].class );\n+        assertGetClassReturnsClass( double[][].class );\n+        assertGetClassReturnsClass( boolean[][].class );\n+    }\n+\n+    public void testGetClassWithArrayClasses() throws Exception {\n+        assertGetClassReturnsClass( String[].class );\n+        assertGetClassReturnsClass( int[].class );\n+        assertGetClassReturnsClass( long[].class );\n+        assertGetClassReturnsClass( short[].class );\n+        assertGetClassReturnsClass( byte[].class );\n+        assertGetClassReturnsClass( char[].class );\n+        assertGetClassReturnsClass( float[].class );\n+        assertGetClassReturnsClass( double[].class );\n+        assertGetClassReturnsClass( boolean[].class );\n+    }\n+\n+    public void testGetClassRawPrimitives() throws ClassNotFoundException {\n+        assertEquals( int.class, ClassUtils.getClass( \"int\" ) );\n+        assertEquals( long.class, ClassUtils.getClass( \"long\" ) );\n+        assertEquals( short.class, ClassUtils.getClass( \"short\" ) );\n+        assertEquals( byte.class, ClassUtils.getClass( \"byte\" ) );\n+        assertEquals( char.class, ClassUtils.getClass( \"char\" ) );\n+        assertEquals( float.class, ClassUtils.getClass( \"float\" ) );\n+        assertEquals( double.class, ClassUtils.getClass( \"double\" ) );\n+        assertEquals( boolean.class, ClassUtils.getClass( \"boolean\" ) );\n+    }\n+\n+    private void assertGetClassReturnsClass( Class<?> c ) throws Exception {\n+        assertEquals( c, ClassUtils.getClass( c.getName() ) );\n+    }\n+\n+    private void assertGetClassThrowsException( String className, Class<?> exceptionType ) throws Exception {\n+        try {\n+            ClassUtils.getClass( className );\n+            fail( \"ClassUtils.getClass() should fail with an exception of type \" + exceptionType.getName() + \" when given class name \\\"\" + className + \"\\\".\" );\n+        }\n+        catch( Exception e ) {\n+            assertTrue( exceptionType.isAssignableFrom( e.getClass() ) );\n+        }\n+    }\n+\n+    private void assertGetClassThrowsNullPointerException( String className ) throws Exception {\n+        assertGetClassThrowsException( className, NullPointerException.class );\n+    }\n+\n+    private void assertGetClassThrowsClassNotFound( String className ) throws Exception {\n+        assertGetClassThrowsException( className, ClassNotFoundException.class );\n+    }\n+\n+    // Show the Java bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4071957\n+    // We may have to delete this if a JDK fixes the bug.\n+    public void testShowJavaBug() throws Exception {\n+        // Tests with Collections$UnmodifiableSet\n+        Set<?> set = Collections.unmodifiableSet(new HashSet<Object>());\n+        Method isEmptyMethod = set.getClass().getMethod(\"isEmpty\",  new Class[0]);\n+        try {\n+            isEmptyMethod.invoke(set, new Object[0]);\n+            fail(\"Failed to throw IllegalAccessException as expected\");\n+        } catch(IllegalAccessException iae) {\n+            // expected\n+        }\n+    }\n+\n+    public void testGetPublicMethod() throws Exception {\n+        // Tests with Collections$UnmodifiableSet\n+        Set<?> set = Collections.unmodifiableSet(new HashSet<Object>());\n+        Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), \"isEmpty\",  new Class[0]);\n+            assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers()));\n+ \n+        try {\n+            isEmptyMethod.invoke(set, new Object[0]);\n+        } catch(java.lang.IllegalAccessException iae) {\n+            fail(\"Should not have thrown IllegalAccessException\");\n+        }\n+               \n+        // Tests with a public Class\n+        Method toStringMethod = ClassUtils.getPublicMethod(Object.class, \"toString\",  new Class[0]);\n+            assertEquals(Object.class.getMethod(\"toString\", new Class[0]), toStringMethod);\n+    }\n+ \n+    public void testToClass_object() {\n+        assertEquals(null, ClassUtils.toClass(null));\n+\n+        assertSame(\n+            ArrayUtils.EMPTY_CLASS_ARRAY,\n+            ClassUtils.toClass(new Class[0]));\n+\n+        Object[] array = new Object[3];\n+        array[0] = new String(\"Test\");\n+        array[1] = new Integer(1);\n+        array[2] = new Double(99);\n+\n+        Class<?>[] results = ClassUtils.toClass(array);\n+        assertEquals(\"String\", ClassUtils.getShortClassName(results[0]));\n+        assertEquals(\"Integer\", ClassUtils.getShortClassName(results[1]));\n+        assertEquals(\"Double\", ClassUtils.getShortClassName(results[2]));\n+    }\n+\n+    public void test_getShortCanonicalName_Object() {\n+        assertEquals(\"<null>\", ClassUtils.getShortCanonicalName(null, \"<null>\"));\n+        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(new ClassUtils(), \"<null>\"));\n+        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(new ClassUtils[0], \"<null>\"));\n+        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], \"<null>\"));\n+        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(new int[0], \"<null>\"));\n+        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(new int[0][0], \"<null>\"));\n+    }\n+\n+    public void test_getShortCanonicalName_Class() {\n+        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(ClassUtils.class));\n+        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(ClassUtils[].class));\n+        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(ClassUtils[][].class));\n+        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(int[].class));\n+        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(int[][].class));\n+    }\n+\n+    public void test_getShortCanonicalName_String() {\n+        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtils\"));\n+        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(\"[Lorg.apache.commons.lang3.ClassUtils;\"));\n+        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(\"[[Lorg.apache.commons.lang3.ClassUtils;\"));\n+        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtils[]\"));\n+        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtils[][]\"));\n+        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(\"[I\"));\n+        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"[[I\"));\n+        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(\"int[]\"));\n+        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"int[][]\"));\n+    }\n+\n+    public void test_getPackageCanonicalName_Object() {\n+        assertEquals(\"<null>\", ClassUtils.getPackageCanonicalName(null, \"<null>\"));\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils(), \"<null>\"));\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils[0], \"<null>\"));\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], \"<null>\"));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0], \"<null>\"));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0][0], \"<null>\"));\n+    }\n+\n+    public void test_getPackageCanonicalName_Class() {\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils.class));\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils[].class));\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils[][].class));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[].class));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[][].class));\n+    }\n+\n+    public void test_getPackageCanonicalName_String() {\n+        assertEquals(\"org.apache.commons.lang3\", \n+            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils\"));\n+        assertEquals(\"org.apache.commons.lang3\", \n+            ClassUtils.getPackageCanonicalName(\"[Lorg.apache.commons.lang3.ClassUtils;\"));\n+        assertEquals(\"org.apache.commons.lang3\", \n+            ClassUtils.getPackageCanonicalName(\"[[Lorg.apache.commons.lang3.ClassUtils;\"));\n+        assertEquals(\"org.apache.commons.lang3\", \n+            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils[]\"));\n+        assertEquals(\"org.apache.commons.lang3\", \n+            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtils[][]\"));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[I\"));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[[I\"));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[]\"));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[][]\"));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+public class EnumUtilsTest extends TestCase {\n+\n+    public void testConstructable() {\n+        // enforce public constructor\n+        new EnumUtils();\n+    }\n+\n+    public void test_getEnumMap() {\n+        Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class);\n+        assertEquals( \"getEnumMap not created correctly\", \"{RED=RED, AMBER=AMBER, GREEN=GREEN}\", test.toString());\n+        assertEquals(3, test.size());\n+        assertEquals(true, test.containsKey(\"RED\"));\n+        assertEquals(Traffic.RED, test.get(\"RED\"));\n+        assertEquals(true, test.containsKey(\"AMBER\"));\n+        assertEquals(Traffic.AMBER, test.get(\"AMBER\"));\n+        assertEquals(true, test.containsKey(\"GREEN\"));\n+        assertEquals(Traffic.GREEN, test.get(\"GREEN\"));\n+        assertEquals(false, test.containsKey(\"PURPLE\"));\n+    }\n+\n+    public void test_getEnumList() {\n+        List<Traffic> test = EnumUtils.getEnumList(Traffic.class);\n+        assertEquals(3, test.size());\n+        assertEquals(Traffic.RED, test.get(0));\n+        assertEquals(Traffic.AMBER, test.get(1));\n+        assertEquals(Traffic.GREEN, test.get(2));\n+    }\n+\n+    public void test_isEnum() {\n+        assertEquals(true, EnumUtils.isValidEnum(Traffic.class, \"RED\"));\n+        assertEquals(true, EnumUtils.isValidEnum(Traffic.class, \"AMBER\"));\n+        assertEquals(true, EnumUtils.isValidEnum(Traffic.class, \"GREEN\"));\n+        assertEquals(false, EnumUtils.isValidEnum(Traffic.class, \"PURPLE\"));\n+    }\n+\n+    public void test_getEnum() {\n+        assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, \"RED\"));\n+        assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, \"AMBER\"));\n+        assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, \"GREEN\"));\n+        assertEquals(null, EnumUtils.getEnum(Traffic.class, \"PURPLE\"));\n+    }\n+\n+}\n+\n+enum Traffic {\n+    RED, AMBER, GREEN\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for {@link LocaleUtils}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author Chris Hyzer\n+ * @version $Id$\n+ */\n+public class LocaleUtilsTest extends TestCase {\n+\n+    private static final Locale LOCALE_EN = new Locale(\"en\", \"\");\n+    private static final Locale LOCALE_EN_US = new Locale(\"en\", \"US\");\n+    private static final Locale LOCALE_EN_US_ZZZZ = new Locale(\"en\", \"US\", \"ZZZZ\");\n+    private static final Locale LOCALE_FR = new Locale(\"fr\", \"\");\n+    private static final Locale LOCALE_FR_CA = new Locale(\"fr\", \"CA\");\n+    private static final Locale LOCALE_QQ = new Locale(\"qq\", \"\");\n+    private static final Locale LOCALE_QQ_ZZ = new Locale(\"qq\", \"ZZ\");\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param name\n+     */\n+    public LocaleUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        // Testing #LANG-304. Must be called before availableLocaleSet is called.\n+        LocaleUtils.isAvailableLocale(Locale.getDefault());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test that constructors are public, and work, etc.\n+     */\n+    public void testConstructor() {\n+        assertNotNull(new LocaleUtils());\n+        Constructor<?>[] cons = LocaleUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(LocaleUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(LocaleUtils.class.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Pass in a valid language, test toLocale.\n+     *\n+     * @param language  the language string\n+     */\n+    private void assertValidToLocale(String language) {\n+        Locale locale = LocaleUtils.toLocale(language);\n+        assertNotNull(\"valid locale\", locale);\n+        assertEquals(language, locale.getLanguage());\n+        //country and variant are empty\n+        assertTrue(locale.getCountry() == null || locale.getCountry().length() == 0);\n+        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);\n+    }\n+\n+    /**\n+     * Pass in a valid language, test toLocale.\n+     *\n+     * @param localeString to pass to toLocale()\n+     * @param language of the resulting Locale\n+     * @param country of the resulting Locale\n+     */\n+    private void assertValidToLocale(String localeString, String language, String country) {\n+        Locale locale = LocaleUtils.toLocale(localeString);\n+        assertNotNull(\"valid locale\", locale);\n+        assertEquals(language, locale.getLanguage());\n+        assertEquals(country, locale.getCountry());\n+        //variant is empty\n+        assertTrue(locale.getVariant() == null || locale.getVariant().length() == 0);\n+    }\n+\n+    /**\n+     * Pass in a valid language, test toLocale.\n+     *\n+     * @param localeString to pass to toLocale()\n+     * @param language of the resulting Locale\n+     * @param country of the resulting Locale\n+     * @param variant of the resulting Locale\n+     */\n+    private void assertValidToLocale(\n+            String localeString, String language, \n+            String country, String variant) {\n+        Locale locale = LocaleUtils.toLocale(localeString);\n+        assertNotNull(\"valid locale\", locale);\n+        assertEquals(language, locale.getLanguage());\n+        assertEquals(country, locale.getCountry());\n+        assertEquals(variant, locale.getVariant());\n+        \n+    }\n+\n+    /**\n+     * Test toLocale() method.\n+     */\n+    public void testToLocale_1Part() {\n+        assertEquals(null, LocaleUtils.toLocale((String) null));\n+        \n+        assertValidToLocale(\"us\");\n+        assertValidToLocale(\"fr\");\n+        assertValidToLocale(\"de\");\n+        assertValidToLocale(\"zh\");\n+        // Valid format but lang doesnt exist, should make instance anyway\n+        assertValidToLocale(\"qq\");\n+        \n+        try {\n+            LocaleUtils.toLocale(\"Us\");\n+            fail(\"Should fail if not lowercase\");\n+        } catch (IllegalArgumentException iae) {}\n+        try {\n+            LocaleUtils.toLocale(\"US\");\n+            fail(\"Should fail if not lowercase\");\n+        } catch (IllegalArgumentException iae) {}\n+        try {\n+            LocaleUtils.toLocale(\"uS\");\n+            fail(\"Should fail if not lowercase\");\n+        } catch (IllegalArgumentException iae) {}\n+        try {\n+            LocaleUtils.toLocale(\"u#\");\n+            fail(\"Should fail if not lowercase\");\n+        } catch (IllegalArgumentException iae) {}\n+        \n+        try {\n+            LocaleUtils.toLocale(\"u\");\n+            fail(\"Must be 2 chars if less than 5\");\n+        } catch (IllegalArgumentException iae) {}\n+       \n+        try {\n+            LocaleUtils.toLocale(\"uuu\");\n+            fail(\"Must be 2 chars if less than 5\");\n+        } catch (IllegalArgumentException iae) {}\n+\n+        try {\n+            LocaleUtils.toLocale(\"uu_U\");\n+            fail(\"Must be 2 chars if less than 5\");\n+        } catch (IllegalArgumentException iae) {}\n+    }        \n+\n+    /**\n+     * Test toLocale() method.\n+     */\n+    public void testToLocale_2Part() {\n+        assertValidToLocale(\"us_EN\", \"us\", \"EN\");\n+        //valid though doesnt exist\n+        assertValidToLocale(\"us_ZH\", \"us\", \"ZH\");\n+        \n+        try {\n+            LocaleUtils.toLocale(\"us-EN\");\n+            fail(\"Should fail as not underscore\");\n+        } catch (IllegalArgumentException iae) {}\n+        try {\n+            LocaleUtils.toLocale(\"us_En\");\n+            fail(\"Should fail second part not uppercase\");\n+        } catch (IllegalArgumentException iae) {}\n+        try {\n+            LocaleUtils.toLocale(\"us_en\");\n+            fail(\"Should fail second part not uppercase\");\n+        } catch (IllegalArgumentException iae) {}\n+        try {\n+            LocaleUtils.toLocale(\"us_eN\");\n+            fail(\"Should fail second part not uppercase\");\n+        } catch (IllegalArgumentException iae) {}\n+        try {\n+            LocaleUtils.toLocale(\"uS_EN\");\n+            fail(\"Should fail first part not lowercase\");\n+        } catch (IllegalArgumentException iae) {}\n+        try {\n+            LocaleUtils.toLocale(\"us_E3\");\n+            fail(\"Should fail second part not uppercase\");\n+        } catch (IllegalArgumentException iae) {}\n+    }        \n+\n+    /**\n+     * Test toLocale() method.\n+     */\n+    public void testToLocale_3Part() {\n+        assertValidToLocale(\"us_EN_A\", \"us\", \"EN\", \"A\");\n+        // this isn't pretty, but was caused by a jdk bug it seems\n+        // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4210525\n+        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n+            assertValidToLocale(\"us_EN_a\", \"us\", \"EN\", \"a\");\n+            assertValidToLocale(\"us_EN_SFsafdFDsdfF\", \"us\", \"EN\", \"SFsafdFDsdfF\");\n+        } else {\n+            assertValidToLocale(\"us_EN_a\", \"us\", \"EN\", \"A\");\n+            assertValidToLocale(\"us_EN_SFsafdFDsdfF\", \"us\", \"EN\", \"SFSAFDFDSDFF\");\n+        }\n+        \n+        try {\n+            LocaleUtils.toLocale(\"us_EN-a\");\n+            fail(\"Should fail as not underscore\");\n+        } catch (IllegalArgumentException iae) {}\n+        try {\n+            LocaleUtils.toLocale(\"uu_UU_\");\n+            fail(\"Must be 3, 5 or 7+ in length\");\n+        } catch (IllegalArgumentException iae) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Helper method for local lookups.\n+     *\n+     * @param locale  the input locale\n+     * @param defaultLocale  the input default locale\n+     * @param expected  expected results\n+     */\n+    private void assertLocaleLookupList(Locale locale, Locale defaultLocale, Locale[] expected) {\n+        List<Locale> localeList = defaultLocale == null ?\n+                LocaleUtils.localeLookupList(locale) :\n+                LocaleUtils.localeLookupList(locale, defaultLocale);\n+        \n+        assertEquals(expected.length, localeList.size());\n+        assertEquals(Arrays.asList(expected), localeList);\n+        assertUnmodifiableCollection(localeList);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test localeLookupList() method.\n+     */\n+    public void testLocaleLookupList_Locale() {\n+        assertLocaleLookupList(null, null, new Locale[0]);\n+        assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ});\n+        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\n+        assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN});\n+        assertLocaleLookupList(LOCALE_EN_US, null,\n+            new Locale[] {\n+                LOCALE_EN_US,\n+                LOCALE_EN});\n+        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,\n+            new Locale[] {\n+                LOCALE_EN_US_ZZZZ,\n+                LOCALE_EN_US,\n+                LOCALE_EN});\n+    }        \n+\n+    /**\n+     * Test localeLookupList() method.\n+     */\n+    public void testLocaleLookupList_LocaleLocale() {\n+        assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ, \n+                new Locale[]{LOCALE_QQ});\n+        assertLocaleLookupList(LOCALE_EN, LOCALE_EN, \n+                new Locale[]{LOCALE_EN});\n+        \n+        assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US, \n+            new Locale[]{\n+                LOCALE_EN_US,\n+                LOCALE_EN});\n+        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ,\n+            new Locale[] {\n+                LOCALE_EN_US,\n+                LOCALE_EN,\n+                LOCALE_QQ});\n+        assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ,\n+            new Locale[] {\n+                LOCALE_EN_US,\n+                LOCALE_EN,\n+                LOCALE_QQ_ZZ});\n+        \n+        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null,\n+            new Locale[] {\n+                LOCALE_EN_US_ZZZZ,\n+                LOCALE_EN_US,\n+                LOCALE_EN});\n+        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ,\n+            new Locale[] {\n+                LOCALE_EN_US_ZZZZ,\n+                LOCALE_EN_US,\n+                LOCALE_EN});\n+        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ,\n+            new Locale[] {\n+                LOCALE_EN_US_ZZZZ,\n+                LOCALE_EN_US,\n+                LOCALE_EN,\n+                LOCALE_QQ});\n+        assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ,\n+            new Locale[] {\n+                LOCALE_EN_US_ZZZZ,\n+                LOCALE_EN_US,\n+                LOCALE_EN,\n+                LOCALE_QQ_ZZ});\n+        assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN,\n+            new Locale[] {\n+                LOCALE_FR_CA,\n+                LOCALE_FR,\n+                LOCALE_EN});\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test availableLocaleList() method.\n+     */\n+    public void testAvailableLocaleList() {\n+        List<Locale> list = LocaleUtils.availableLocaleList();\n+        List<Locale> list2 = LocaleUtils.availableLocaleList();\n+        assertNotNull(list);\n+        assertSame(list, list2);\n+        assertUnmodifiableCollection(list);\n+        \n+        Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n+        List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray);\n+        assertEquals(jdkLocaleList, list);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test availableLocaleSet() method.\n+     */\n+    public void testAvailableLocaleSet() {\n+        Set<Locale> set = LocaleUtils.availableLocaleSet();\n+        Set<Locale> set2 = LocaleUtils.availableLocaleSet();\n+        assertNotNull(set);\n+        assertSame(set, set2);\n+        assertUnmodifiableCollection(set);\n+        \n+        Locale[] jdkLocaleArray = Locale.getAvailableLocales();\n+        List<Locale> jdkLocaleList = Arrays.asList(jdkLocaleArray);\n+        Set<Locale> jdkLocaleSet = new HashSet<Locale>(jdkLocaleList);\n+        assertEquals(jdkLocaleSet, set);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test availableLocaleSet() method.\n+     */\n+    public void testIsAvailableLocale() {\n+        Set<Locale> set = LocaleUtils.availableLocaleSet();\n+        assertEquals(set.contains(LOCALE_EN), LocaleUtils.isAvailableLocale(LOCALE_EN));\n+        assertEquals(set.contains(LOCALE_EN_US), LocaleUtils.isAvailableLocale(LOCALE_EN_US));\n+        assertEquals(set.contains(LOCALE_EN_US_ZZZZ), LocaleUtils.isAvailableLocale(LOCALE_EN_US_ZZZZ));\n+        assertEquals(set.contains(LOCALE_FR), LocaleUtils.isAvailableLocale(LOCALE_FR));\n+        assertEquals(set.contains(LOCALE_FR_CA), LocaleUtils.isAvailableLocale(LOCALE_FR_CA));\n+        assertEquals(set.contains(LOCALE_QQ), LocaleUtils.isAvailableLocale(LOCALE_QQ));\n+        assertEquals(set.contains(LOCALE_QQ_ZZ), LocaleUtils.isAvailableLocale(LOCALE_QQ_ZZ));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Make sure the language by country is correct. It checks that \n+     * the LocaleUtils.languagesByCountry(country) call contains the \n+     * array of languages passed in. It may contain more due to JVM \n+     * variations.\n+     *\n+     * @param country\n+     * @param languages array of languages that should be returned\n+     */\n+    private void assertLanguageByCountry(String country, String[] languages) {\n+        List<Locale> list = LocaleUtils.languagesByCountry(country);\n+        List<Locale> list2 = LocaleUtils.languagesByCountry(country);\n+        assertNotNull(list);\n+        assertSame(list, list2);\n+        //search through langauges\n+        for (int i = 0; i < languages.length; i++) {\n+            Iterator<Locale> iterator = list.iterator();\n+            boolean found = false;\n+            // see if it was returned by the set\n+            while (iterator.hasNext()) {\n+                Locale locale = iterator.next();\n+                // should have an en empty variant\n+                assertTrue(locale.getVariant() == null\n+                        || locale.getVariant().length() == 0);\n+                assertEquals(country, locale.getCountry());\n+                if (languages[i].equals(locale.getLanguage())) {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+            if (!found) {\n+                fail(\"Cound not find language: \" + languages[i]\n+                        + \" for country: \" + country);\n+            }\n+        }\n+        assertUnmodifiableCollection(list);\n+    }\n+\n+    /**\n+     * Test languagesByCountry() method.\n+     */\n+    public void testLanguagesByCountry() {\n+        assertLanguageByCountry(null, new String[0]);\n+        assertLanguageByCountry(\"GB\", new String[]{\"en\"});\n+        assertLanguageByCountry(\"ZZ\", new String[0]);\n+        assertLanguageByCountry(\"CH\", new String[]{\"fr\", \"de\", \"it\"});\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Make sure the country by language is correct. It checks that \n+     * the LocaleUtils.countryByLanguage(language) call contains the \n+     * array of countries passed in. It may contain more due to JVM \n+     * variations.\n+     *\n+     *\n+     * @param language\n+     * @param countries array of countries that should be returned\n+     */\n+    private void assertCountriesByLanguage(String language, String[] countries) {\n+        List<Locale> list = LocaleUtils.countriesByLanguage(language);\n+        List<Locale> list2 = LocaleUtils.countriesByLanguage(language);\n+        assertNotNull(list);\n+        assertSame(list, list2);\n+        //search through langauges\n+        for (int i = 0; i < countries.length; i++) {\n+            Iterator<Locale> iterator = list.iterator();\n+            boolean found = false;\n+            // see if it was returned by the set\n+            while (iterator.hasNext()) {\n+                Locale locale = iterator.next();\n+                // should have an en empty variant\n+                assertTrue(locale.getVariant() == null\n+                        || locale.getVariant().length() == 0);\n+                assertEquals(language, locale.getLanguage());\n+                if (countries[i].equals(locale.getCountry())) {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+            if (!found) {\n+                fail(\"Cound not find language: \" + countries[i]\n+                        + \" for country: \" + language);\n+            }\n+        }\n+        assertUnmodifiableCollection(list);\n+    }\n+\n+    /**\n+     * Test countriesByLanguage() method.\n+     */\n+    public void testCountriesByLanguage() {\n+        assertCountriesByLanguage(null, new String[0]);\n+        assertCountriesByLanguage(\"de\", new String[]{\"DE\", \"CH\", \"AT\", \"LU\"});\n+        assertCountriesByLanguage(\"zz\", new String[0]);\n+        assertCountriesByLanguage(\"it\", new String[]{\"IT\", \"CH\"});\n+    }\n+\n+    /**\n+     * @param coll  the collection to check\n+     */\n+    private static void assertUnmodifiableCollection(Collection<?> coll) {\n+        try {\n+            coll.add(null);\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+    }\n+\n+    /**\n+     * Tests #LANG-328 - only language+variant\n+     */\n+    public void testLang328() {\n+        assertValidToLocale(\"fr__POSIX\", \"fr\", \"\", \"POSIX\");\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.ObjectUtils}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author <a href=\"mailto:jmcnally@collab.net\">John McNally</a>\n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id$\n+ */\n+public class ObjectUtilsTest extends TestCase {\n+    private static final String FOO = \"foo\";\n+    private static final String BAR = \"bar\";\n+\n+    public ObjectUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new ObjectUtils());\n+        Constructor<?>[] cons = ObjectUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(ObjectUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(ObjectUtils.class.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsNull() {\n+        Object o = FOO;\n+        Object dflt = BAR;\n+        assertSame(\"dflt was not returned when o was null\", dflt, ObjectUtils.defaultIfNull(null, dflt));\n+        assertSame(\"dflt was returned when o was not null\", o, ObjectUtils.defaultIfNull(o, dflt));\n+    }\n+\n+    public void testFirstNonNull() {\n+        assertEquals(null, ObjectUtils.firstNonNull(null, null));\n+        assertEquals(\"\", ObjectUtils.firstNonNull(null, \"\"));\n+        String firstNonNullGenerics = ObjectUtils.firstNonNull(null, null, \"123\", \"456\");\n+        assertEquals(\"123\", firstNonNullGenerics);\n+        assertEquals(\"123\", ObjectUtils.firstNonNull(\"123\", null, \"456\", null));\n+        assertEquals(null, ObjectUtils.firstNonNull());\n+        assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE));\n+        assertNull(ObjectUtils.firstNonNull());\n+        assertNull(ObjectUtils.firstNonNull(null, null));\n+//        assertSame(\"123\", ObjectUtils.firstNonNull(null, ObjectUtils.NULL, \"123\", \"456\"));\n+//        assertSame(\"456\", ObjectUtils.firstNonNull(ObjectUtils.NULL, \"456\", \"123\", null));\n+//        assertNull(ObjectUtils.firstNonNull(null, null, ObjectUtils.NULL));\n+        assertNull(ObjectUtils.firstNonNull((Object) null));\n+        assertNull(ObjectUtils.firstNonNull((Object[]) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEquals() {\n+        assertTrue(\"ObjectUtils.equals(null, null) returned false\", ObjectUtils.equals(null, null));\n+        assertTrue(\"ObjectUtils.equals(\\\"foo\\\", null) returned true\", !ObjectUtils.equals(FOO, null));\n+        assertTrue(\"ObjectUtils.equals(null, \\\"bar\\\") returned true\", !ObjectUtils.equals(null, BAR));\n+        assertTrue(\"ObjectUtils.equals(\\\"foo\\\", \\\"bar\\\") returned true\", !ObjectUtils.equals(FOO, BAR));\n+        assertTrue(\"ObjectUtils.equals(\\\"foo\\\", \\\"foo\\\") returned false\", ObjectUtils.equals(FOO, FOO));\n+    }\n+\n+    public void testHashCode() {\n+        assertEquals(0, ObjectUtils.hashCode(null));\n+        assertEquals(\"a\".hashCode(), ObjectUtils.hashCode(\"a\"));\n+    }\n+\n+//    /**\n+//     * Show that java.util.Date and java.sql.Timestamp are apples and oranges.\n+//     * Prompted by an email discussion. \n+//     * \n+//     * The behavior is different b/w Sun Java 1.3.1_10 and 1.4.2_03.\n+//     */\n+//    public void testDateEqualsJava() {\n+//        long now = 1076957313284L; // Feb 16, 2004 10:49... PST\n+//        java.util.Date date = new java.util.Date(now);\n+//        java.sql.Timestamp realTimestamp = new java.sql.Timestamp(now);\n+//        java.util.Date timestamp = realTimestamp;\n+//        // sanity check 1:\n+//        assertEquals(284000000, realTimestamp.getNanos());\n+//        assertEquals(1076957313284L, date.getTime());\n+//        //\n+//        // On Sun 1.3.1_10:\n+//        //junit.framework.AssertionFailedError: expected:<1076957313284> but was:<1076957313000>\n+//        //\n+//        //assertEquals(1076957313284L, timestamp.getTime());\n+//        //\n+//        //junit.framework.AssertionFailedError: expected:<1076957313284> but was:<1076957313000>\n+//        //\n+//        //assertEquals(1076957313284L, realTimestamp.getTime());\n+//        // sanity check 2:        \n+//        assertEquals(date.getDay(), realTimestamp.getDay());\n+//        assertEquals(date.getHours(), realTimestamp.getHours());\n+//        assertEquals(date.getMinutes(), realTimestamp.getMinutes());\n+//        assertEquals(date.getMonth(), realTimestamp.getMonth());\n+//        assertEquals(date.getSeconds(), realTimestamp.getSeconds());\n+//        assertEquals(date.getTimezoneOffset(), realTimestamp.getTimezoneOffset());\n+//        assertEquals(date.getYear(), realTimestamp.getYear());\n+//        //\n+//        // Time values are == and equals() on Sun 1.4.2_03 but NOT on Sun 1.3.1_10:\n+//        //\n+//        //assertFalse(\"Sanity check failed: date.getTime() == timestamp.getTime()\", date.getTime() == timestamp.getTime());\n+//        //assertFalse(\"Sanity check failed: timestamp.equals(date)\", timestamp.equals(date));\n+//        //assertFalse(\"Sanity check failed: date.equals(timestamp)\", date.equals(timestamp));\n+//        // real test:\n+//        //assertFalse(\"java.util.Date and java.sql.Timestamp should be equal\", ObjectUtils.equals(date, timestamp));\n+//    }\n+    \n+    public void testIdentityToString() {\n+        assertEquals(null, ObjectUtils.identityToString(null));\n+        assertEquals(\n+            \"java.lang.String@\" + Integer.toHexString(System.identityHashCode(FOO)),\n+            ObjectUtils.identityToString(FOO));\n+        Integer i = new Integer(90);\n+        String expected = \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(i));\n+        assertEquals(expected, ObjectUtils.identityToString(i));\n+        StringBuffer buffer = new StringBuffer();\n+        ObjectUtils.identityToString(buffer, i);\n+        assertEquals(expected, buffer.toString());\n+\n+        try {\n+            ObjectUtils.identityToString(null, \"tmp\");\n+            fail(\"NullPointerException expected\");\n+        } catch(NullPointerException npe) {\n+        }\n+        try {\n+            ObjectUtils.identityToString(new StringBuffer(), null);\n+            fail(\"NullPointerException expected\");\n+        } catch(NullPointerException npe) {\n+        }\n+    }\n+\n+    public void testToString_Object() {\n+        assertEquals(\"\", ObjectUtils.toString((Object) null) );\n+        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE) );\n+    }\n+            \n+    public void testToString_ObjectString() {\n+        assertEquals(BAR, ObjectUtils.toString((Object) null, BAR) );\n+        assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR) );\n+    }\n+\n+    public void testNull() {\n+        assertNotNull(ObjectUtils.NULL);\n+        assertTrue(ObjectUtils.NULL instanceof ObjectUtils.Null);\n+        assertSame(ObjectUtils.NULL, SerializationUtils.clone(ObjectUtils.NULL));\n+    }\n+    \n+    \n+    \n+    public void testMax() {\n+        Calendar calendar = Calendar.getInstance();\n+        Date nonNullComparable1 = calendar.getTime();\n+        Date nonNullComparable2 = calendar.getTime();\n+        \n+        calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );\n+        Date minComparable = calendar.getTime();\n+        \n+        assertNotSame( nonNullComparable1, nonNullComparable2 );\n+        \n+        assertSame( nonNullComparable1, ObjectUtils.max( null, nonNullComparable1 ) );\n+        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, null ) );\n+        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, nonNullComparable2 ) );\n+        assertSame( nonNullComparable2, ObjectUtils.max( nonNullComparable2, nonNullComparable1 ) );\n+        assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, minComparable ) );\n+        assertSame( nonNullComparable1, ObjectUtils.max( minComparable, nonNullComparable1 ) );\n+\n+        assertNull( ObjectUtils.max((String)null, (String)null) );\n+    }\n+    \n+    public void testMin() {\n+        Calendar calendar = Calendar.getInstance();\n+        Date nonNullComparable1 = calendar.getTime();\n+        Date nonNullComparable2 = calendar.getTime();\n+        \n+        calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 );\n+        Date minComparable = calendar.getTime();\n+        \n+        assertNotSame( nonNullComparable1, nonNullComparable2 );\n+        \n+        assertSame( nonNullComparable1, ObjectUtils.min( null, nonNullComparable1 ) );\n+        assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, null ) );\n+        assertSame( nonNullComparable1, ObjectUtils.min( nonNullComparable1, nonNullComparable2 ) );\n+        assertSame( nonNullComparable2, ObjectUtils.min( nonNullComparable2, nonNullComparable1 ) );\n+        assertSame( minComparable, ObjectUtils.min( nonNullComparable1, minComparable ) );\n+        assertSame( minComparable, ObjectUtils.min( minComparable, nonNullComparable1 ) );\n+\n+        assertNull( ObjectUtils.min((String)null, (String)null) );\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.Random;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.RandomStringUtils}.\n+ *\n+ * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @author Phil Steitz\n+ * @version $Id$\n+ */\n+public class RandomStringUtilsTest extends junit.framework.TestCase {\n+    /**\n+     * Construct a new instance of RandomStringUtilsTest with the specified name\n+     */\n+    public RandomStringUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new RandomStringUtils());\n+        Constructor<?>[] cons = RandomStringUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(RandomStringUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(RandomStringUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test the implementation\n+     */\n+    public void testRandomStringUtils() {\n+        String r1 = RandomStringUtils.random(50);\n+        assertEquals(\"random(50) length\", 50, r1.length());\n+        String r2 = RandomStringUtils.random(50);\n+        assertEquals(\"random(50) length\", 50, r2.length());\n+        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+        \n+        r1 = RandomStringUtils.randomAscii(50);\n+        assertEquals(\"randomAscii(50) length\", 50, r1.length());\n+        for(int i = 0; i < r1.length(); i++) {\n+            assertTrue(\"char between 32 and 127\", r1.charAt(i) >= 32 && r1.charAt(i) <= 127);\n+        }        \n+        r2 = RandomStringUtils.randomAscii(50);\n+        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+\n+        r1 = RandomStringUtils.randomAlphabetic(50);\n+        assertEquals(\"randomAlphabetic(50)\", 50, r1.length());\n+        for(int i = 0; i < r1.length(); i++) {\n+            assertEquals(\"r1 contains alphabetic\", true, Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i)));\n+        }\n+        r2 = RandomStringUtils.randomAlphabetic(50);\n+        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+        \n+        r1 = RandomStringUtils.randomAlphanumeric(50);\n+        assertEquals(\"randomAlphanumeric(50)\", 50, r1.length());\n+        for(int i = 0; i < r1.length(); i++) {\n+            assertEquals(\"r1 contains alphanumeric\", true, Character.isLetterOrDigit(r1.charAt(i)));\n+        }\n+        r2 = RandomStringUtils.randomAlphabetic(50);\n+        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+        \n+        r1 = RandomStringUtils.randomNumeric(50);\n+        assertEquals(\"randomNumeric(50)\", 50, r1.length());\n+        for(int i = 0; i < r1.length(); i++) {\n+            assertEquals(\"r1 contains numeric\", true, Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i)));\n+        }\n+        r2 = RandomStringUtils.randomNumeric(50);\n+        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+        \n+        String set = \"abcdefg\";\n+        r1 = RandomStringUtils.random(50, set);\n+        assertEquals(\"random(50, \\\"abcdefg\\\")\", 50, r1.length());\n+        for(int i = 0; i < r1.length(); i++) {\n+            assertTrue(\"random char in set\", set.indexOf(r1.charAt(i)) > -1);\n+        }\n+        r2 = RandomStringUtils.random(50, set);\n+        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+        \n+        r1 = RandomStringUtils.random(50, (String) null);\n+        assertEquals(\"random(50) length\", 50, r1.length());\n+        r2 = RandomStringUtils.random(50, (String) null);\n+        assertEquals(\"random(50) length\", 50, r2.length());\n+        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+        \n+        set = \"stuvwxyz\";\n+        r1 = RandomStringUtils.random(50, set.toCharArray());\n+        assertEquals(\"random(50, \\\"stuvwxyz\\\")\", 50, r1.length());\n+        for(int i = 0; i < r1.length(); i++) {\n+            assertTrue(\"random char in set\", set.indexOf(r1.charAt(i)) > -1);\n+        }\n+        r2 = RandomStringUtils.random(50, set);\n+        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+        \n+        r1 = RandomStringUtils.random(50, (char[]) null);\n+        assertEquals(\"random(50) length\", 50, r1.length());\n+        r2 = RandomStringUtils.random(50, (char[]) null);\n+        assertEquals(\"random(50) length\", 50, r2.length());\n+        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+\n+        long seed = System.currentTimeMillis();\n+        r1 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));\n+        r2 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));\n+        assertEquals(\"r1.equals(r2)\", r1, r2);\n+\n+        r1 = RandomStringUtils.random(0);\n+        assertEquals(\"random(0).equals(\\\"\\\")\", \"\", r1);\n+\n+    }\n+    public void testExceptions() {\n+        try {\n+            RandomStringUtils.random(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, new char[0]);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, \"\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, 'a', 'z', false, false);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0]);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0], new Random());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    /**\n+     * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric\n+     * This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7\n+     */  \n+    public void testRandomAlphaNumeric() {\n+        char[] testChars = {'a', 'z', 'A', 'Z', '0', '9'};\n+        boolean[] found = {false, false, false, false, false, false};\n+        for (int i = 0; i < 100; i++) {\n+            String randString = RandomStringUtils.randomAlphanumeric(10);\n+            for (int j = 0; j < testChars.length; j++) {\n+                if (randString.indexOf(testChars[j]) > 0) {\n+                    found[j] = true;\n+                }\n+            }\n+        }\n+        for (int i = 0; i < testChars.length; i++) {\n+            if (!found[i]) {\n+                fail(\"alphanumeric character not generated in 1000 attempts: \" \n+                   + testChars[i] +\" -- repeated failures indicate a problem \");\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Make sure '0' and '9' are generated by randomNumeric\n+     * This test will fail randomly with probability = 2 * (9/10)**1000 ~ 3.5E-46\n+     */  \n+    public void testRandomNumeric() {\n+        char[] testChars = {'0','9'};\n+        boolean[] found = {false, false};\n+        for (int i = 0; i < 100; i++) {\n+            String randString = RandomStringUtils.randomNumeric(10);\n+            for (int j = 0; j < testChars.length; j++) {\n+                if (randString.indexOf(testChars[j]) > 0) {\n+                    found[j] = true;\n+                }\n+            }\n+        }\n+        for (int i = 0; i < testChars.length; i++) {\n+            if (!found[i]) {\n+                fail(\"digit not generated in 1000 attempts: \" \n+                   + testChars[i] +\" -- repeated failures indicate a problem \");\n+            }\n+        }  \n+    }\n+    \n+    /**\n+     * Make sure boundary alpha characters are generated by randomAlphabetic\n+     * This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8\n+     */  \n+    public void testRandomAlphabetic() {\n+        char[] testChars = {'a', 'z', 'A', 'Z'};\n+        boolean[] found = {false, false, false, false};\n+        for (int i = 0; i < 100; i++) {\n+            String randString = RandomStringUtils.randomAlphabetic(10);\n+            for (int j = 0; j < testChars.length; j++) {\n+                if (randString.indexOf(testChars[j]) > 0) {\n+                    found[j] = true;\n+                }\n+            }\n+        }\n+        for (int i = 0; i < testChars.length; i++) {\n+            if (!found[i]) {\n+                fail(\"alphanumeric character not generated in 1000 attempts: \" \n+                   + testChars[i] +\" -- repeated failures indicate a problem \");\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Make sure 32 and 127 are generated by randomNumeric\n+     * This test will fail randomly with probability = 2*(95/96)**1000 ~ 5.7E-5\n+     */  \n+    public void testRandomAscii() {\n+        char[] testChars = {(char) 32, (char) 126};\n+        boolean[] found = {false, false};\n+        for (int i = 0; i < 100; i++) {\n+            String randString = RandomStringUtils.randomAscii(10);\n+            for (int j = 0; j < testChars.length; j++) {\n+                if (randString.indexOf(testChars[j]) > 0) {\n+                    found[j] = true;\n+                }\n+            }\n+        }\n+        for (int i = 0; i < testChars.length; i++) {\n+            if (!found[i]) {\n+                fail(\"ascii character not generated in 1000 attempts: \" \n+                + (int) testChars[i] + \n+                 \" -- repeated failures indicate a problem\");\n+            }\n+        }  \n+    }\n+    \n+    /** \n+     * Test homogeneity of random strings generated --\n+     * i.e., test that characters show up with expected frequencies\n+     * in generated strings.  Will fail randomly about 1 in 1000 times.\n+     * Repeated failures indicate a problem.\n+     */\n+    public void testRandomStringUtilsHomog() {\n+        String set = \"abc\";\n+        char[] chars = set.toCharArray();\n+        String gen = \"\";\n+        int[] counts = {0,0,0};\n+        int[] expected = {200,200,200};\n+        for (int i = 0; i< 100; i++) {\n+           gen = RandomStringUtils.random(6,chars);\n+           for (int j = 0; j < 6; j++) {\n+               switch (gen.charAt(j)) {\n+                   case 'a': {counts[0]++; break;}\n+                   case 'b': {counts[1]++; break;}\n+                   case 'c': {counts[2]++; break;}\n+                   default: {fail(\"generated character not in set\");}\n+               }\n+           }\n+        } \n+        // Perform chi-square test with df = 3-1 = 2, testing at .001 level\n+        assertTrue(\"test homogeneity -- will fail about 1 in 1000 times\",\n+            chiSquare(expected,counts) < 13.82);  \n+    }\n+    \n+    /**\n+     * Computes Chi-Square statistic given observed and expected counts\n+     * @param observed array of observed frequency counts\n+     * @param expected array of expected frequency counts\n+     */\n+    private double chiSquare(int[] expected, int[] observed) {\n+        double sumSq = 0.0d;\n+        double dev = 0.0d;\n+        for (int i = 0; i < observed.length; i++) {\n+            dev = (observed[i] - expected[i]);\n+            sumSq += dev * dev / expected[i];\n+        }\n+        return sumSq;\n+    }           \n+\n+    /**\n+     * Checks if the string got by {@link RandomStringUtils#random(int)}\n+     * can be converted to UTF-8 and back without loss.\n+     *\n+     * @see <a href=\"http://issues.apache.org/jira/browse/LANG-100\">LANG-100</a>\n+     *\n+     * @throws Exception\n+     */\n+    public void testLang100() throws Exception {\n+        int size = 5000;\n+        String encoding = \"UTF-8\";\n+        String orig = RandomStringUtils.random(size);\n+        byte[] bytes = orig.getBytes(encoding);\n+        String copy = new String(bytes, encoding);\n+\n+        // for a verbose compare:\n+        for (int i=0; i < orig.length() && i < copy.length(); i++) {\n+            char o = orig.charAt(i);\n+            char c = copy.charAt(i);\n+            assertEquals(\"differs at \" + i + \"(\" + Integer.toHexString((new Character(o)).hashCode()) + \",\" +\n+            Integer.toHexString((new Character(c)).hashCode()) + \")\", o, c);\n+        }\n+        // compare length also\n+        assertEquals(orig.length(), copy.length());\n+        // just to be complete\n+        assertEquals(orig, copy);\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/RangeTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3;\n+\n+import java.util.Comparator;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * <p>\n+ * Tests the methods in the {@link org.apache.commons.lang3.Range} class.\n+ * </p>\n+ * \n+ * @version $Id: RangeTest.java 754804 2009-03-16 02:06:18Z sebb $\n+ */\n+@SuppressWarnings(\"boxing\")\n+public class RangeTest extends TestCase {\n+\n+    private Range<Byte> byteRange;\n+    private Range<Byte> byteRange2;\n+    private Range<Byte> byteRange3;\n+\n+    private Range<Integer> intRange;\n+    private Range<Long> longRange;\n+    private Range<Float> floatRange;\n+    private Range<Double> doubleRange;\n+\n+    @SuppressWarnings(\"cast\") // intRange\n+    @Override\n+    public void setUp() {\n+        byteRange   = Range.between((byte) 0, (byte) 5);\n+        byteRange2  = Range.between((byte) 0, (byte) 5);\n+        byteRange3  = Range.between((byte) 0, (byte) 10);\n+\n+        intRange    = Range.between((int) 10, (int) 20);\n+        longRange   = Range.between((long) 10, (long) 20);\n+        floatRange  = Range.between((float) 10, (float) 20);\n+        doubleRange = Range.between((double) 10, (double) 20);\n+    }\n+\n+    // --------------------------------------------------------------------------\n+\n+    public void testComparableConstructors() {\n+        Comparable c = \n+            new Comparable() { \n+                public int compareTo(Object other) {\n+                    return 1;\n+                }\n+            };\n+        Range.is(c);\n+        Range.between(c, c);\n+    }\n+\n+    public void testIsWithCompare(){\n+        Comparator<Integer> c = new Comparator<Integer>(){\n+            public int compare(Integer o1, Integer o2) {\n+                return 0; // all integers are equal\n+            }\n+        };\n+        Range<Integer> ri = Range.is(10);\n+        assertFalse(\"should not contain null\",ri.contains(null));\n+        assertTrue(\"should contain 10\",ri.contains(10));\n+        assertFalse(\"should not contain 11\",ri.contains(11));\n+        ri = Range.is(10,c);\n+        assertFalse(\"should not contain null\",ri.contains(null));\n+        assertTrue(\"should contain 10\",ri.contains(10));\n+        assertTrue(\"should contain 11\",ri.contains(11));\n+    }\n+\n+    public void testBetweenWithCompare(){\n+        // TODO add tests with a better comparator\n+        Comparator<Integer> c = new Comparator<Integer>(){\n+            public int compare(Integer o1, Integer o2) {\n+                return 0; // all integers are equal\n+            }\n+        };\n+        Range<Integer> rb = Range.between(-10,20);\n+        assertFalse(\"should not contain null\",rb.contains(null));\n+        assertTrue(\"should contain 10\",rb.contains(10));\n+        assertTrue(\"should contain -10\",rb.contains(-10));\n+        assertFalse(\"should not contain 21\",rb.contains(21));\n+        assertFalse(\"should not contain -11\",rb.contains(-11));\n+        rb = Range.between(-10,20,c);\n+        assertFalse(\"should not contain null\",rb.contains(null));\n+        assertTrue(\"should contain 10\",rb.contains(10));\n+        assertTrue(\"should contain -10\",rb.contains(-10));\n+        assertTrue(\"should contain 21\",rb.contains(21));\n+        assertTrue(\"should contain -11\",rb.contains(-11));\n+    }\n+\n+    // --------------------------------------------------------------------------\n+\n+    public void testRangeOfChars() {\n+        Range<Character> chars = Range.between('a', 'z');\n+        assertTrue(chars.contains('b'));\n+        assertFalse(chars.contains('B'));\n+    }\n+\n+    // --------------------------------------------------------------------------\n+\n+    public void testEqualsObject() {\n+        assertEquals(byteRange, byteRange);\n+        assertEquals(byteRange, byteRange2);\n+        assertEquals(byteRange2, byteRange2);\n+        assertTrue(byteRange.equals(byteRange));\n+        assertTrue(byteRange2.equals(byteRange2));\n+        assertTrue(byteRange3.equals(byteRange3));\n+        assertFalse(byteRange2.equals(byteRange3));\n+        assertFalse(byteRange2.equals(null));\n+        assertFalse(byteRange2.equals(\"Ni!\"));\n+    }\n+\n+    public void testHashCode() {\n+        assertEquals(byteRange.hashCode(), byteRange2.hashCode());\n+        assertFalse(byteRange.hashCode() == byteRange3.hashCode());\n+\n+        assertEquals(intRange.hashCode(), intRange.hashCode());\n+        assertTrue(intRange.hashCode() != 0);\n+    }\n+\n+    public void testToString() {\n+        assertNotNull(byteRange.toString());\n+\n+        String str = intRange.toString();\n+        assertEquals(\"Range[10,20]\", str);\n+//        assertSame(str, intRange.toString());  // no longer passes - does it matter?\n+        assertEquals(\"Range[-20,-10]\", Range.between(-20, -10).toString());\n+    }\n+\n+    // --------------------------------------------------------------------------\n+\n+    public void testGetMinimum() {\n+        assertEquals(10, (int) intRange.getMinimum());\n+        assertEquals(10L, (long) longRange.getMinimum());\n+        assertEquals(10f, floatRange.getMinimum(), 0.00001f);\n+        assertEquals(10d, doubleRange.getMinimum(), 0.00001d);\n+    }\n+    \n+    public void testGetMaximum() {\n+        assertEquals(20, (int) intRange.getMaximum());\n+        assertEquals(20L, (long) longRange.getMaximum());\n+        assertEquals(20f, floatRange.getMaximum(), 0.00001f);\n+        assertEquals(20d, doubleRange.getMaximum(), 0.00001d);\n+    }\n+\n+    public void testContains() {\n+        assertFalse(intRange.contains(null));\n+        \n+        assertFalse(intRange.contains(5));\n+        assertTrue(intRange.contains(10));\n+        assertTrue(intRange.contains(15));\n+        assertTrue(intRange.contains(20));\n+        assertFalse(intRange.contains(25));\n+    }\n+\n+    public void testElementBefore() {\n+        assertFalse(intRange.elementBefore(null));\n+        \n+        assertTrue(intRange.elementBefore(5));\n+        assertFalse(intRange.elementBefore(10));\n+        assertFalse(intRange.elementBefore(15));\n+        assertFalse(intRange.elementBefore(20));\n+        assertFalse(intRange.elementBefore(25));\n+    }\n+\n+    public void testElementAfter() {\n+        assertFalse(intRange.elementAfter(null));\n+        \n+        assertFalse(intRange.elementAfter(5));\n+        assertFalse(intRange.elementAfter(10));\n+        assertFalse(intRange.elementAfter(15));\n+        assertFalse(intRange.elementAfter(20));\n+        assertTrue(intRange.elementAfter(25));\n+    }\n+\n+    public void testElementCompareTo() {\n+        try {\n+            intRange.elementCompareTo(null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch(NullPointerException npe) {\n+            // expected\n+        }\n+        \n+        assertEquals(-1, intRange.elementCompareTo(5));\n+        assertEquals(0, intRange.elementCompareTo(10));\n+        assertEquals(0, intRange.elementCompareTo(15));\n+        assertEquals(0, intRange.elementCompareTo(20));\n+        assertEquals(1, intRange.elementCompareTo(25));\n+    }\n+\n+    // --------------------------------------------------------------------------\n+\n+    public void testContainsRange() {\n+\n+        // null handling\n+        assertFalse(intRange.containsRange(null));\n+\n+        // easy inside range\n+        assertTrue(intRange.containsRange(Range.between(12, 18)));\n+\n+        // outside range on each side\n+        assertFalse(intRange.containsRange(Range.between(32, 45)));\n+        assertFalse(intRange.containsRange(Range.between(2, 8)));\n+\n+        // equals range\n+        assertTrue(intRange.containsRange(Range.between(10, 20)));\n+\n+        // overlaps\n+        assertFalse(intRange.containsRange(Range.between(9, 14)));\n+        assertFalse(intRange.containsRange(Range.between(16, 21)));\n+\n+        // touches lower boundary\n+        assertTrue(intRange.containsRange(Range.between(10, 19)));\n+        assertFalse(intRange.containsRange(Range.between(10, 21)));\n+\n+        // touches upper boundary\n+        assertTrue(intRange.containsRange(Range.between(11, 20)));\n+        assertFalse(intRange.containsRange(Range.between(9, 20)));\n+        \n+        // negative\n+        assertFalse(intRange.containsRange(Range.between(-11, -18)));\n+\n+    }\n+\n+    public void testOverlapsRange() {\n+\n+        // null handling\n+        assertFalse(intRange.overlapsRange(null));\n+\n+        // easy inside range\n+        assertTrue(intRange.overlapsRange(Range.between(12, 18)));\n+\n+        // outside range on each side\n+        assertFalse(intRange.overlapsRange(Range.between(32, 45)));\n+        assertFalse(intRange.overlapsRange(Range.between(2, 8)));\n+\n+        // equals range\n+        assertTrue(intRange.overlapsRange(Range.between(10, 20)));\n+\n+        // overlaps\n+        assertTrue(intRange.overlapsRange(Range.between(9, 14)));\n+        assertTrue(intRange.overlapsRange(Range.between(16, 21)));\n+\n+        // touches lower boundary\n+        assertTrue(intRange.overlapsRange(Range.between(10, 19)));\n+        assertTrue(intRange.overlapsRange(Range.between(10, 21)));\n+\n+        // touches upper boundary\n+        assertTrue(intRange.overlapsRange(Range.between(11, 20)));\n+        assertTrue(intRange.overlapsRange(Range.between(9, 20)));\n+        \n+        // negative\n+        assertFalse(intRange.overlapsRange(Range.between(-11, -18)));\n+\n+    }\n+\n+    public void testSerializing() {\n+        SerializationUtils.clone(intRange);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.SerializationUtils}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @version $Id$\n+ */\n+public class SerializationUtilsTest extends TestCase {\n+\n+  static final String CLASS_NOT_FOUND_MESSAGE = \"ClassNotFoundSerialization.readObject fake exception\";\n+    protected static final String SERIALIZE_IO_EXCEPTION_MESSAGE = \"Anonymous OutputStream I/O exception\";\n+  \n+    private String iString;\n+    private Integer iInteger;\n+    private HashMap<Object, Object> iMap;\n+\n+    public SerializationUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+\n+        iString = \"foo\";\n+        iInteger = new Integer(7);\n+        iMap = new HashMap<Object, Object>();\n+        iMap.put(\"FOO\", iString);\n+        iMap.put(\"BAR\", iInteger);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new SerializationUtils());\n+        Constructor<?>[] cons = SerializationUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(SerializationUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(SerializationUtils.class.getModifiers()));\n+    }\n+    \n+    public void testException() {\n+        SerializationException serEx;\n+        Exception ex = new Exception();\n+        \n+        serEx = new SerializationException();\n+        assertSame(null, serEx.getMessage());\n+        assertSame(null, serEx.getCause());\n+        \n+        serEx = new SerializationException(\"Message\");\n+        assertSame(\"Message\", serEx.getMessage());\n+        assertSame(null, serEx.getCause());\n+        \n+        serEx = new SerializationException(ex);\n+        assertEquals(\"java.lang.Exception\", serEx.getMessage());\n+        assertSame(ex, serEx.getCause());\n+        \n+        serEx = new SerializationException(\"Message\", ex);\n+        assertSame(\"Message\", serEx.getMessage());\n+        assertSame(ex, serEx.getCause());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSerializeStream() throws Exception {\n+        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n+        SerializationUtils.serialize(iMap, streamTest);\n+\n+        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n+        oos.writeObject(iMap);\n+        oos.flush();\n+        oos.close();\n+\n+        byte[] testBytes = streamTest.toByteArray();\n+        byte[] realBytes = streamReal.toByteArray();\n+        assertEquals(testBytes.length, realBytes.length);\n+        for (int i = 0; i < realBytes.length; i++) {\n+            assertEquals(realBytes[i], testBytes[i]);\n+        }\n+    }\n+\n+    public void testSerializeStreamUnserializable() throws Exception {\n+        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n+        try {\n+            iMap.put(new Object(), new Object());\n+            SerializationUtils.serialize(iMap, streamTest);\n+        } catch (SerializationException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testSerializeStreamNullObj() throws Exception {\n+        ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n+        SerializationUtils.serialize(null, streamTest);\n+\n+        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n+        oos.writeObject(null);\n+        oos.flush();\n+        oos.close();\n+\n+        byte[] testBytes = streamTest.toByteArray();\n+        byte[] realBytes = streamReal.toByteArray();\n+        assertEquals(testBytes.length, realBytes.length);\n+        for (int i = 0; i < realBytes.length; i++) {\n+            assertEquals(realBytes[i], testBytes[i]);\n+        }\n+    }\n+\n+    public void testSerializeStreamObjNull() throws Exception {\n+        try {\n+            SerializationUtils.serialize(iMap, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testSerializeStreamNullNull() throws Exception {\n+        try {\n+            SerializationUtils.serialize(null, null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+    \n+    public void testSerializeIOException() throws Exception {\n+        // forces an IOException when the ObjectOutputStream is created, to test not closing the stream\n+        // in the finally block\n+        OutputStream streamTest = new OutputStream() {\n+            @Override\n+            public void write(int arg0) throws IOException {\n+                throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);\n+            }\n+        };\n+        try {\n+            SerializationUtils.serialize(iMap, streamTest);\n+        }\n+        catch(SerializationException e) {\n+            assertEquals(\"java.io.IOException: \" + SERIALIZE_IO_EXCEPTION_MESSAGE, e.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testDeserializeStream() throws Exception {\n+        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n+        oos.writeObject(iMap);\n+        oos.flush();\n+        oos.close();\n+\n+        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\n+        Object test = SerializationUtils.deserialize(inTest);\n+        assertNotNull(test);\n+        assertTrue(test instanceof HashMap<?, ?>);\n+        assertTrue(test != iMap);\n+        HashMap<?, ?> testMap = (HashMap<?, ?>) test;\n+        assertEquals(iString, testMap.get(\"FOO\"));\n+        assertTrue(iString != testMap.get(\"FOO\"));\n+        assertEquals(iInteger, testMap.get(\"BAR\"));\n+        assertTrue(iInteger != testMap.get(\"BAR\"));\n+        assertEquals(iMap, testMap);\n+    }\n+\n+    public void testDeserializeStreamOfNull() throws Exception {\n+        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n+        oos.writeObject(null);\n+        oos.flush();\n+        oos.close();\n+\n+        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\n+        Object test = SerializationUtils.deserialize(inTest);\n+        assertNull(test);\n+    }\n+\n+    public void testDeserializeStreamNull() throws Exception {\n+        try {\n+            SerializationUtils.deserialize((InputStream) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testDeserializeStreamBadStream() throws Exception {\n+        try {\n+            SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0]));\n+        } catch (SerializationException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testDeserializeStreamClassNotFound() throws Exception {\n+        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n+        oos.writeObject(new ClassNotFoundSerialization());\n+        oos.flush();\n+        oos.close();\n+\n+        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\n+        try {\n+            @SuppressWarnings(\"unused\")\n+            Object test = SerializationUtils.deserialize(inTest);\n+        } catch(SerializationException se) {\n+            assertEquals(\"java.lang.ClassNotFoundException: \" + CLASS_NOT_FOUND_MESSAGE, se.getMessage());\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+\n+    public void testSerializeBytes() throws Exception {\n+        byte[] testBytes = SerializationUtils.serialize(iMap);\n+\n+        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n+        oos.writeObject(iMap);\n+        oos.flush();\n+        oos.close();\n+\n+        byte[] realBytes = streamReal.toByteArray();\n+        assertEquals(testBytes.length, realBytes.length);\n+        for (int i = 0; i < realBytes.length; i++) {\n+            assertEquals(realBytes[i], testBytes[i]);\n+        }\n+    }\n+\n+    public void testSerializeBytesUnserializable() throws Exception {\n+        try {\n+            iMap.put(new Object(), new Object());\n+            SerializationUtils.serialize(iMap);\n+        } catch (SerializationException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testSerializeBytesNull() throws Exception {\n+        byte[] testBytes = SerializationUtils.serialize(null);\n+\n+        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n+        oos.writeObject(null);\n+        oos.flush();\n+        oos.close();\n+\n+        byte[] realBytes = streamReal.toByteArray();\n+        assertEquals(testBytes.length, realBytes.length);\n+        for (int i = 0; i < realBytes.length; i++) {\n+            assertEquals(realBytes[i], testBytes[i]);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testDeserializeBytes() throws Exception {\n+        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n+        oos.writeObject(iMap);\n+        oos.flush();\n+        oos.close();\n+\n+        Object test = SerializationUtils.deserialize(streamReal.toByteArray());\n+        assertNotNull(test);\n+        assertTrue(test instanceof HashMap<?, ?>);\n+        assertTrue(test != iMap);\n+        HashMap<?, ?> testMap = (HashMap<?, ?>) test;\n+        assertEquals(iString, testMap.get(\"FOO\"));\n+        assertTrue(iString != testMap.get(\"FOO\"));\n+        assertEquals(iInteger, testMap.get(\"BAR\"));\n+        assertTrue(iInteger != testMap.get(\"BAR\"));\n+        assertEquals(iMap, testMap);\n+    }\n+\n+    public void testDeserializeBytesOfNull() throws Exception {\n+        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n+        oos.writeObject(null);\n+        oos.flush();\n+        oos.close();\n+\n+        Object test = SerializationUtils.deserialize(streamReal.toByteArray());\n+        assertNull(test);\n+    }\n+\n+    public void testDeserializeBytesNull() throws Exception {\n+        try {\n+            SerializationUtils.deserialize((byte[]) null);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testDeserializeBytesBadStream() throws Exception {\n+        try {\n+            SerializationUtils.deserialize(new byte[0]);\n+        } catch (SerializationException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testClone() throws Exception {\n+        Object test = SerializationUtils.clone(iMap);\n+        assertNotNull(test);\n+        assertTrue(test instanceof HashMap<?,?>);\n+        assertTrue(test != iMap);\n+        HashMap<?, ?> testMap = (HashMap<?, ?>) test;\n+        assertEquals(iString, testMap.get(\"FOO\"));\n+        assertTrue(iString != testMap.get(\"FOO\"));\n+        assertEquals(iInteger, testMap.get(\"BAR\"));\n+        assertTrue(iInteger != testMap.get(\"BAR\"));\n+        assertEquals(iMap, testMap);\n+    }\n+\n+    public void testCloneNull() throws Exception {\n+        Object test = SerializationUtils.clone(null);\n+        assertNull(test);\n+    }\n+\n+    public void testCloneUnserializable() throws Exception {\n+        try {\n+            iMap.put(new Object(), new Object());\n+            SerializationUtils.clone(iMap);\n+        } catch (SerializationException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+}\n+\n+class ClassNotFoundSerialization implements Serializable\n+{\n+\n+    private void readObject(ObjectInputStream in) throws ClassNotFoundException    {\n+        throw new ClassNotFoundException(SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for {@link StringEscapeUtils}.\n+ *\n+ * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n+ * @version $Id$\n+ */\n+public class StringEscapeUtilsTest extends TestCase {\n+    private final static String FOO = \"foo\";\n+\n+    public StringEscapeUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new StringEscapeUtils());\n+        Constructor<?>[] cons = StringEscapeUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(StringEscapeUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(StringEscapeUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testEscapeJava() throws IOException {\n+        assertEquals(null, StringEscapeUtils.escapeJava(null));\n+        try {\n+            StringEscapeUtils.ESCAPE_JAVA.translate(null, null);\n+            fail();\n+        } catch (IOException ex) {\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        try {\n+            StringEscapeUtils.ESCAPE_JAVA.translate(\"\", null);\n+            fail();\n+        } catch (IOException ex) {\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        \n+        assertEscapeJava(\"empty string\", \"\", \"\");\n+        assertEscapeJava(FOO, FOO);\n+        assertEscapeJava(\"tab\", \"\\\\t\", \"\\t\");\n+        assertEscapeJava(\"backslash\", \"\\\\\\\\\", \"\\\\\");\n+        assertEscapeJava(\"single quote should not be escaped\", \"'\", \"'\");\n+        assertEscapeJava(\"\\\\\\\\\\\\b\\\\t\\\\r\", \"\\\\\\b\\t\\r\");\n+        assertEscapeJava(\"\\\\u1234\", \"\\u1234\");\n+        assertEscapeJava(\"\\\\u0234\", \"\\u0234\");\n+        assertEscapeJava(\"\\\\u00EF\", \"\\u00ef\");\n+        assertEscapeJava(\"\\\\u0001\", \"\\u0001\");\n+        assertEscapeJava(\"Should use capitalized unicode hex\", \"\\\\uABCD\", \"\\uabcd\");\n+\n+        assertEscapeJava(\"He didn't say, \\\\\\\"stop!\\\\\\\"\",\n+                \"He didn't say, \\\"stop!\\\"\");\n+        assertEscapeJava(\"non-breaking space\", \"This space is non-breaking:\" + \"\\\\u00A0\",\n+                \"This space is non-breaking:\\u00a0\");\n+        assertEscapeJava(\"\\\\uABCD\\\\u1234\\\\u012C\",\n+                \"\\uABCD\\u1234\\u012C\");\n+    }\n+\n+    /**\n+     * https://issues.apache.org/jira/browse/LANG-421\n+     */\n+    public void testEscapeJavaWithSlash() {\n+        final String input = \"String with a slash (/) in it\";\n+\n+        final String expected = input;\n+        final String actual = StringEscapeUtils.escapeJava(input);\n+\n+        /**\n+         * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape\n+         * in a Java string.\n+         */\n+        assertEquals(expected, actual);\n+    }\n+    \n+    private void assertEscapeJava(String escaped, String original) throws IOException {\n+        assertEscapeJava(null, escaped, original);\n+    }\n+\n+    private void assertEscapeJava(String message, String expected, String original) throws IOException {\n+        String converted = StringEscapeUtils.escapeJava(original);\n+        message = \"escapeJava(String) failed\" + (message == null ? \"\" : (\": \" + message));\n+        assertEquals(message, expected, converted);\n+\n+        StringWriter writer = new StringWriter();\n+        StringEscapeUtils.ESCAPE_JAVA.translate(original, writer);\n+        assertEquals(expected, writer.toString());\n+    }\n+\n+    public void testUnescapeJava() throws IOException {\n+        assertEquals(null, StringEscapeUtils.unescapeJava(null));\n+        try {\n+            StringEscapeUtils.UNESCAPE_JAVA.translate(null, null);\n+            fail();\n+        } catch (IOException ex) {\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        try {\n+            StringEscapeUtils.UNESCAPE_JAVA.translate(\"\", null);\n+            fail();\n+        } catch (IOException ex) {\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        try {\n+            StringEscapeUtils.unescapeJava(\"\\\\u02-3\");\n+            fail();\n+        } catch (RuntimeException ex) {\n+        }\n+        \n+        assertUnescapeJava(\"\", \"\");\n+        assertUnescapeJava(\"test\", \"test\");\n+        assertUnescapeJava(\"\\ntest\\b\", \"\\\\ntest\\\\b\");\n+        assertUnescapeJava(\"\\u123425foo\\ntest\\b\", \"\\\\u123425foo\\\\ntest\\\\b\");\n+        assertUnescapeJava(\"'\\foo\\teste\\r\", \"\\\\'\\\\foo\\\\teste\\\\r\");\n+        assertUnescapeJava(\"\", \"\\\\\");\n+        //foo\n+        assertUnescapeJava(\"lowercase unicode\", \"\\uABCDx\", \"\\\\uabcdx\");\n+        assertUnescapeJava(\"uppercase unicode\", \"\\uABCDx\", \"\\\\uABCDx\");\n+        assertUnescapeJava(\"unicode as final character\", \"\\uABCD\", \"\\\\uabcd\");\n+    }\n+\n+    private void assertUnescapeJava(String unescaped, String original) throws IOException {\n+        assertUnescapeJava(null, unescaped, original);\n+    }\n+\n+    private void assertUnescapeJava(String message, String unescaped, String original) throws IOException {\n+        String expected = unescaped;\n+        String actual = StringEscapeUtils.unescapeJava(original);\n+\n+        assertEquals(\"unescape(String) failed\" +\n+                (message == null ? \"\" : (\": \" + message)) +\n+                \": expected '\" + StringEscapeUtils.escapeJava(expected) +\n+                // we escape this so we can see it in the error message\n+                \"' actual '\" + StringEscapeUtils.escapeJava(actual) + \"'\",\n+                expected, actual);\n+\n+        StringWriter writer = new StringWriter();\n+        StringEscapeUtils.UNESCAPE_JAVA.translate(original, writer);\n+        assertEquals(unescaped, writer.toString());\n+\n+    }\n+\n+    public void testEscapeEcmaScript() {\n+        assertEquals(null, StringEscapeUtils.escapeEcmaScript(null));\n+        try {\n+            StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null);\n+            fail();\n+        } catch (IOException ex) {\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        try {\n+            StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(\"\", null);\n+            fail();\n+        } catch (IOException ex) {\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        \n+        assertEquals(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeEcmaScript(\"He didn't say, \\\"stop!\\\"\"));\n+        assertEquals(\"document.getElementById(\\\\\\\"test\\\\\\\").value = \\\\'<script>alert(\\\\'aaa\\\\');<\\\\/script>\\\\';\", \n+                StringEscapeUtils.escapeEcmaScript(\"document.getElementById(\\\"test\\\").value = '<script>alert('aaa');</script>';\"));\n+    }\n+\n+\n+    // HTML and XML\n+    //--------------------------------------------------------------\n+\n+    String[][] htmlEscapes = {\n+        {\"no escaping\", \"plain text\", \"plain text\"},\n+        {\"no escaping\", \"plain text\", \"plain text\"},\n+        {\"empty string\", \"\", \"\"},\n+        {\"null\", null, null},\n+        {\"ampersand\", \"bread &amp; butter\", \"bread & butter\"},\n+        {\"quotes\", \"&quot;bread&quot; &amp; butter\", \"\\\"bread\\\" & butter\"},\n+        {\"final character only\", \"greater than &gt;\", \"greater than >\"},\n+        {\"first character only\", \"&lt; less than\", \"< less than\"},\n+        {\"apostrophe\", \"Huntington's chorea\", \"Huntington's chorea\"},\n+        {\"languages\", \"English,Fran&ccedil;ais,\\u65E5\\u672C\\u8A9E (nihongo)\", \"English,Fran\\u00E7ais,\\u65E5\\u672C\\u8A9E (nihongo)\"},\n+        {\"8-bit ascii shouldn't number-escape\", \"\\u0080\\u009F\", \"\\u0080\\u009F\"},\n+    };\n+\n+    public void testEscapeHtml() {\n+        for (int i = 0; i < htmlEscapes.length; ++i) {\n+            String message = htmlEscapes[i][0];\n+            String expected = htmlEscapes[i][1];\n+            String original = htmlEscapes[i][2];\n+            assertEquals(message, expected, StringEscapeUtils.escapeHtml4(original));\n+            StringWriter sw = new StringWriter();\n+            try {\n+                StringEscapeUtils.ESCAPE_HTML4.translate(original, sw);\n+            } catch (IOException e) {\n+            }\n+            String actual = original == null ? null : sw.toString();\n+            assertEquals(message, expected, actual);\n+        }\n+    }\n+\n+    public void testUnescapeHtml4() {\n+        for (int i = 0; i < htmlEscapes.length; ++i) {\n+            String message = htmlEscapes[i][0];\n+            String expected = htmlEscapes[i][2];\n+            String original = htmlEscapes[i][1];\n+            assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original));\n+            \n+            StringWriter sw = new StringWriter();\n+            try {\n+                StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw);\n+            } catch (IOException e) {\n+            }\n+            String actual = original == null ? null : sw.toString();\n+            assertEquals(message, expected, actual);\n+        }\n+        // \\u00E7 is a cedilla (c with wiggle under)\n+        // note that the test string must be 7-bit-clean (unicode escaped) or else it will compile incorrectly\n+        // on some locales        \n+        assertEquals(\"funny chars pass through OK\", \"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml4(\"Fran\\u00E7ais\"));\n+        \n+        assertEquals(\"Hello&;World\", StringEscapeUtils.unescapeHtml4(\"Hello&;World\"));\n+        assertEquals(\"Hello&#;World\", StringEscapeUtils.unescapeHtml4(\"Hello&#;World\"));\n+        assertEquals(\"Hello&# ;World\", StringEscapeUtils.unescapeHtml4(\"Hello&# ;World\"));\n+        assertEquals(\"Hello&##;World\", StringEscapeUtils.unescapeHtml4(\"Hello&##;World\"));\n+    }\n+\n+    public void testUnescapeHexCharsHtml() {\n+        // Simple easy to grok test \n+        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml4(\"&#x80;&#x9F;\"));\n+        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml4(\"&#X80;&#X9F;\"));\n+        // Test all Character values:\n+        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {\n+            Character c1 = new Character(i);\n+            Character c2 = new Character((char)(i+1));\n+            String expected = c1.toString() + c2.toString();\n+            String escapedC1 = \"&#x\" + Integer.toHexString((c1.charValue())) + \";\";\n+            String escapedC2 = \"&#x\" + Integer.toHexString((c2.charValue())) + \";\";\n+            assertEquals(\"hex number unescape index \" + (int)i, expected, StringEscapeUtils.unescapeHtml4(escapedC1 + escapedC2));\n+        }\n+    }\n+\n+    public void testUnescapeUnknownEntity() throws Exception\n+    {\n+        assertEquals(\"&zzzz;\", StringEscapeUtils.unescapeHtml4(\"&zzzz;\"));\n+    }\n+\n+    public void testEscapeHtmlVersions() throws Exception\n+    {\n+        assertEquals(\"&Beta;\", StringEscapeUtils.escapeHtml4(\"\\u0392\"));\n+        assertEquals(\"\\u0392\", StringEscapeUtils.unescapeHtml4(\"&Beta;\"));\n+\n+        // TODO: refine API for escaping/unescaping specific HTML versions\n+\n+    }\n+\n+    public void testEscapeXml() throws Exception {\n+        assertEquals(\"&lt;abc&gt;\", StringEscapeUtils.escapeXml(\"<abc>\"));\n+        assertEquals(\"<abc>\", StringEscapeUtils.unescapeXml(\"&lt;abc&gt;\"));\n+\n+        assertEquals(\"XML should not escape >0x7f values\",\n+                \"\\u00A1\", StringEscapeUtils.escapeXml(\"\\u00A1\"));\n+        assertEquals(\"XML should be able to unescape >0x7f values\",\n+                \"\\u00A0\", StringEscapeUtils.unescapeXml(\"&#160;\"));\n+\n+        assertEquals(\"ain't\", StringEscapeUtils.unescapeXml(\"ain&apos;t\"));\n+        assertEquals(\"ain&apos;t\", StringEscapeUtils.escapeXml(\"ain't\"));\n+        assertEquals(\"\", StringEscapeUtils.escapeXml(\"\"));\n+        assertEquals(null, StringEscapeUtils.escapeXml(null));\n+        assertEquals(null, StringEscapeUtils.unescapeXml(null));\n+\n+        StringWriter sw = new StringWriter();\n+        try {\n+            StringEscapeUtils.ESCAPE_XML.translate(\"<abc>\", sw);\n+        } catch (IOException e) {\n+        }\n+        assertEquals(\"XML was escaped incorrectly\", \"&lt;abc&gt;\", sw.toString() );\n+\n+        sw = new StringWriter();\n+        try {\n+            StringEscapeUtils.UNESCAPE_XML.translate(\"&lt;abc&gt;\", sw);\n+        } catch (IOException e) {\n+        }\n+        assertEquals(\"XML was unescaped incorrectly\", \"<abc>\", sw.toString() );\n+    }\n+\n+    // Tests issue #38569\n+    // http://issues.apache.org/bugzilla/show_bug.cgi?id=38569\n+    public void testStandaloneAmphersand() {\n+        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeHtml4(\"&lt;P&O&gt;\"));\n+        assertEquals(\"test & <\", StringEscapeUtils.unescapeHtml4(\"test & &lt;\"));\n+        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeXml(\"&lt;P&O&gt;\"));\n+        assertEquals(\"test & <\", StringEscapeUtils.unescapeXml(\"test & &lt;\"));\n+    }\n+\n+    public void testLang313() {\n+        assertEquals(\"& &\", StringEscapeUtils.unescapeHtml4(\"& &amp;\"));\n+    }\n+\n+    public void testEscapeCsvString() throws Exception\n+    {\n+        assertEquals(\"foo.bar\",          StringEscapeUtils.escapeCsv(\"foo.bar\"));\n+        assertEquals(\"\\\"foo,bar\\\"\",      StringEscapeUtils.escapeCsv(\"foo,bar\"));\n+        assertEquals(\"\\\"foo\\nbar\\\"\",     StringEscapeUtils.escapeCsv(\"foo\\nbar\"));\n+        assertEquals(\"\\\"foo\\rbar\\\"\",     StringEscapeUtils.escapeCsv(\"foo\\rbar\"));\n+        assertEquals(\"\\\"foo\\\"\\\"bar\\\"\",   StringEscapeUtils.escapeCsv(\"foo\\\"bar\"));\n+        assertEquals(\"\",   StringEscapeUtils.escapeCsv(\"\"));\n+        assertEquals(null, StringEscapeUtils.escapeCsv(null));\n+    }\n+\n+    public void testEscapeCsvWriter() throws Exception\n+    {\n+        checkCsvEscapeWriter(\"foo.bar\",        \"foo.bar\");\n+        checkCsvEscapeWriter(\"\\\"foo,bar\\\"\",    \"foo,bar\");\n+        checkCsvEscapeWriter(\"\\\"foo\\nbar\\\"\",   \"foo\\nbar\");\n+        checkCsvEscapeWriter(\"\\\"foo\\rbar\\\"\",   \"foo\\rbar\");\n+        checkCsvEscapeWriter(\"\\\"foo\\\"\\\"bar\\\"\", \"foo\\\"bar\");\n+        checkCsvEscapeWriter(\"\", null);\n+        checkCsvEscapeWriter(\"\", \"\");\n+    }\n+\n+    private void checkCsvEscapeWriter(String expected, String value) {\n+        try {\n+            StringWriter writer = new StringWriter();\n+            StringEscapeUtils.ESCAPE_CSV.translate(value, writer);\n+            assertEquals(expected, writer.toString());\n+        } catch (IOException e) {\n+            fail(\"Threw: \" + e);\n+        }\n+    }\n+\n+    public void testUnescapeCsvString() throws Exception\n+    {\n+        assertEquals(\"foo.bar\",          StringEscapeUtils.unescapeCsv(\"foo.bar\"));\n+        assertEquals(\"foo,bar\",      StringEscapeUtils.unescapeCsv(\"\\\"foo,bar\\\"\"));\n+        assertEquals(\"foo\\nbar\",     StringEscapeUtils.unescapeCsv(\"\\\"foo\\nbar\\\"\"));\n+        assertEquals(\"foo\\rbar\",     StringEscapeUtils.unescapeCsv(\"\\\"foo\\rbar\\\"\"));\n+        assertEquals(\"foo\\\"bar\",   StringEscapeUtils.unescapeCsv(\"\\\"foo\\\"\\\"bar\\\"\"));\n+        assertEquals(\"\",   StringEscapeUtils.unescapeCsv(\"\"));\n+        assertEquals(null, StringEscapeUtils.unescapeCsv(null));\n+\n+        assertEquals(\"\\\"foo.bar\\\"\",          StringEscapeUtils.unescapeCsv(\"\\\"foo.bar\\\"\"));\n+    }\n+\n+    public void testUnescapeCsvWriter() throws Exception\n+    {\n+        checkCsvUnescapeWriter(\"foo.bar\",        \"foo.bar\");\n+        checkCsvUnescapeWriter(\"foo,bar\",    \"\\\"foo,bar\\\"\");\n+        checkCsvUnescapeWriter(\"foo\\nbar\",   \"\\\"foo\\nbar\\\"\");\n+        checkCsvUnescapeWriter(\"foo\\rbar\",   \"\\\"foo\\rbar\\\"\");\n+        checkCsvUnescapeWriter(\"foo\\\"bar\", \"\\\"foo\\\"\\\"bar\\\"\");\n+        checkCsvUnescapeWriter(\"\", null);\n+        checkCsvUnescapeWriter(\"\", \"\");\n+\n+        checkCsvUnescapeWriter(\"\\\"foo.bar\\\"\",        \"\\\"foo.bar\\\"\");\n+    }\n+\n+    private void checkCsvUnescapeWriter(String expected, String value) {\n+        try {\n+            StringWriter writer = new StringWriter();\n+            StringEscapeUtils.UNESCAPE_CSV.translate(value, writer);\n+            assertEquals(expected, writer.toString());\n+        } catch (IOException e) {\n+            fail(\"Threw: \" + e);\n+        }\n+    }\n+\n+    // https://issues.apache.org/jira/browse/LANG-480\n+    public void testEscapeHtmlHighUnicode() throws java.io.UnsupportedEncodingException {\n+        // this is the utf8 representation of the character:\n+        // COUNTING ROD UNIT DIGIT THREE\n+        // in unicode\n+        // codepoint: U+1D362\n+        byte[] data = new byte[] { (byte)0xF0, (byte)0x9D, (byte)0x8D, (byte)0xA2 };\n+\n+        String original = new String(data, \"UTF8\");\n+\n+        String escaped = StringEscapeUtils.escapeHtml4( original );\n+        assertEquals( \"High unicode should not have been escaped\", original, escaped);\n+\n+        String unescaped = StringEscapeUtils.unescapeHtml4( escaped );\n+        assertEquals( \"High unicode should have been unchanged\", original, unescaped);\n+\n+// TODO: I think this should hold, needs further investigation\n+//        String unescapedFromEntity = StringEscapeUtils.unescapeHtml4( \"&#119650;\" );\n+//        assertEquals( \"High unicode should have been unescaped\", original, unescapedFromEntity);\n+    }\n+\n+    // https://issues.apache.org/jira/browse/LANG-339\n+    public void testEscapeHiragana() {\n+        // Some random Japanese unicode characters\n+        String original = \"\\u304B\\u304C\\u3068\";\n+        String escaped = StringEscapeUtils.escapeHtml4(original);\n+        assertEquals( \"Hiragana character unicode behaviour should not be being escaped by escapeHtml4\",\n+        original, escaped);\n+\n+        String unescaped = StringEscapeUtils.unescapeHtml4( escaped );\n+\n+        assertEquals( \"Hiragana character unicode behaviour has changed - expected no unescaping\", escaped, unescaped);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.StringUtils} - Substring methods\n+ *\n+ * @author Apache Software Foundation\n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @author Phil Steitz\n+ * @version $Id$\n+ */\n+public class StringUtilsEqualsIndexOfTest extends TestCase {\n+    private static final String FOO = \"foo\";\n+    private static final String BAR = \"bar\";\n+    private static final String FOOBAR = \"foobar\";\n+    private static final String[] FOOBAR_SUB_ARRAY = new String[] {\"ob\", \"ba\"};\n+\n+    public StringUtilsEqualsIndexOfTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testEquals() {\n+        assertEquals(true, StringUtils.equals(null, null));\n+        assertEquals(true, StringUtils.equals(FOO, FOO));\n+        assertEquals(true, StringUtils.equals(FOO, new String(new char[] { 'f', 'o', 'o' })));\n+        assertEquals(false, StringUtils.equals(FOO, new String(new char[] { 'f', 'O', 'O' })));\n+        assertEquals(false, StringUtils.equals(FOO, BAR));\n+        assertEquals(false, StringUtils.equals(FOO, null));\n+        assertEquals(false, StringUtils.equals(null, FOO));\n+    }\n+\n+    public void testEqualsIgnoreCase() {\n+        assertEquals(true, StringUtils.equalsIgnoreCase(null, null));\n+        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, FOO));\n+        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));\n+        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));\n+        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, BAR));\n+        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, null));\n+        assertEquals(false, StringUtils.equalsIgnoreCase(null, FOO));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIndexOf_char() {\n+        assertEquals(-1, StringUtils.indexOf(null, ' '));\n+        assertEquals(-1, StringUtils.indexOf(\"\", ' '));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a'));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b'));\n+    }\n+\n+    public void testIndexOf_charInt() {\n+        assertEquals(-1, StringUtils.indexOf(null, ' ', 0));\n+        assertEquals(-1, StringUtils.indexOf(null, ' ', -1));\n+        assertEquals(-1, StringUtils.indexOf(\"\", ' ', 0));\n+        assertEquals(-1, StringUtils.indexOf(\"\", ' ', -1));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a', 0));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', 0));\n+        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", 'b', 3));\n+        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", 'b', 9));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', -1));\n+    }\n+\n+    public void testIndexOf_String() {\n+        assertEquals(-1, StringUtils.indexOf(null, null));\n+        assertEquals(-1, StringUtils.indexOf(\"\", null));\n+        assertEquals(0, StringUtils.indexOf(\"\", \"\"));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\"));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\"));\n+        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\"));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"\"));\n+    }\n+\n+    public void testIndexOfIgnoreCase_String() {\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(null, \"\"));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"\", null));\n+        assertEquals(0, StringUtils.indexOfIgnoreCase(\"\", \"\"));\n+        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"a\"));\n+        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"A\"));\n+        assertEquals(2, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"b\"));\n+        assertEquals(2, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\"));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"ab\"));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\"));\n+        assertEquals(0, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\"));\n+    }\n+\n+    public void testIndexOfIgnoreCase_StringInt() {\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", -1));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 0));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 1));\n+        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 2));\n+        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 3));\n+        assertEquals(4, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 4));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 5));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 6));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 7));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 8));\n+        assertEquals(1, StringUtils.indexOfIgnoreCase(\"aab\", \"AB\", 1));\n+        assertEquals(5, StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\", 5));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"ab\", \"AAB\", 0));\n+        assertEquals(-1, StringUtils.indexOfIgnoreCase(\"aab\", \"AAB\", 1));\n+    }\n+\n+    public void testOrdinalIndexOf() {\n+        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MIN_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MIN_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MIN_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MIN_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MIN_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MIN_VALUE));\n+        \n+        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, -1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", -1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", -1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", -1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", -1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", -1));\n+\n+        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 0));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", \"\", 0));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 0));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 0));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 0));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 0));\n+\n+        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 1));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 1));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 1));\n+        assertEquals(2, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 1));\n+        assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 1));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 1));\n+\n+        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, 2));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", 2));\n+        assertEquals(1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 2));\n+        assertEquals(5, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 2));\n+        assertEquals(4, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 2));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 2));\n+        \n+        assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"\", null, Integer.MAX_VALUE));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"\", \"\", Integer.MAX_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", Integer.MAX_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", Integer.MAX_VALUE));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", Integer.MAX_VALUE));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", Integer.MAX_VALUE));\n+        \n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 0));\n+        assertEquals(0, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 1));\n+        assertEquals(1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 2));\n+        assertEquals(2, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 3));\n+        assertEquals(3, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 4));\n+        assertEquals(4, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 5));\n+        assertEquals(5, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 6));\n+        assertEquals(6, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 7));\n+        assertEquals(7, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 8));\n+        assertEquals(8, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 9));\n+        assertEquals(-1, StringUtils.ordinalIndexOf(\"aaaaaaaaa\", \"a\", 10));\n+    }\n+\n+    public void testIndexOf_StringInt() {\n+        assertEquals(-1, StringUtils.indexOf(null, null, 0));\n+        assertEquals(-1, StringUtils.indexOf(null, null, -1));\n+        assertEquals(-1, StringUtils.indexOf(null, \"\", 0));\n+        assertEquals(-1, StringUtils.indexOf(null, \"\", -1));\n+        assertEquals(-1, StringUtils.indexOf(\"\", null, 0));\n+        assertEquals(-1, StringUtils.indexOf(\"\", null, -1));\n+        assertEquals(0, StringUtils.indexOf(\"\", \"\", 0));\n+        assertEquals(0, StringUtils.indexOf(\"\", \"\", -1));\n+        assertEquals(0, StringUtils.indexOf(\"\", \"\", 9));\n+        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", 0));\n+        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", -1));\n+        assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 9));\n+        assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 3));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\", 0));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", 0));\n+        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\", 0));\n+        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", \"b\", 3));\n+        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", \"b\", 9));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", -1));\n+        assertEquals(2,StringUtils.indexOf(\"aabaabaa\", \"\", 2)); \n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testLastIndexOf_char() {\n+        assertEquals(-1, StringUtils.lastIndexOf(null, ' '));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' '));\n+        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a'));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b'));\n+    }\n+\n+    public void testLastIndexOf_charInt() {\n+        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', -1));\n+        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 8));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 8));\n+        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 3));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1));\n+        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 0));\n+    }\n+\n+    public void testLastIndexOf_String() {\n+        assertEquals(-1, StringUtils.lastIndexOf(null, null));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", null));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"a\"));\n+        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\"));\n+        assertEquals(8, StringUtils.lastIndexOf(\"aabaabaa\", \"\"));\n+        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\"));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\"));\n+        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\"));\n+    }\n+\n+    public void testLastOrdinalIndexOf() {\n+        assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, \"*\", 42) );\n+        assertEquals(-1, StringUtils.lastOrdinalIndexOf(\"*\", null, 42) );\n+        assertEquals(0, StringUtils.lastOrdinalIndexOf(\"\", \"\", 42) );\n+        assertEquals(7, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 1) );\n+        assertEquals(6, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 2) );\n+        assertEquals(5, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 1) );\n+        assertEquals(2, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 2) );\n+        assertEquals(4, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 1) );\n+        assertEquals(1, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 2) );\n+        assertEquals(8, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 1) );\n+        assertEquals(8, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 2) );\n+    }\n+\n+    public void testLastIndexOf_StringInt() {\n+        assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));\n+        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", -1));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, -1));\n+        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"\", -1));\n+        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 9));\n+        assertEquals(0, StringUtils.lastIndexOf(\"abc\", \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"abc\", \"\", -1));\n+        assertEquals(3, StringUtils.lastIndexOf(\"abc\", \"\", 9));\n+        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8));\n+        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8));\n+        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 3));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0));\n+        assertEquals(0, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0));\n+    }\n+\n+    public void testLastIndexOfIgnoreCase_String() {\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\"));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", \"a\"));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\"));\n+        assertEquals(8, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"\"));\n+        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"a\"));\n+        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\"));\n+        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"b\"));\n+        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\"));\n+        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"ab\"));\n+        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\"));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"ab\", \"AAB\"));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AAB\"));\n+    }\n+\n+    public void testLastIndexOfIgnoreCase_StringInt() {\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, \"\", -1));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null, 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", null, -1));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", -1));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"\", \"\", 9));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", -1));\n+        assertEquals(3, StringUtils.lastIndexOfIgnoreCase(\"abc\", \"\", 9));\n+        assertEquals(7, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 8));\n+        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 8));\n+        assertEquals(4, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\", 8));\n+        assertEquals(2, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 3));\n+        assertEquals(5, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 9));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", -1));\n+        assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 0));\n+        assertEquals(0, StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 0));\n+        assertEquals(1, StringUtils.lastIndexOfIgnoreCase(\"aab\", \"AB\", 1));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContainsChar() {\n+        assertEquals(false, StringUtils.contains(null, ' '));\n+        assertEquals(false, StringUtils.contains(\"\", ' '));\n+        assertEquals(false, StringUtils.contains(\"\",null));\n+        assertEquals(false, StringUtils.contains(null,null));\n+        assertEquals(true, StringUtils.contains(\"abc\", 'a'));\n+        assertEquals(true, StringUtils.contains(\"abc\", 'b'));\n+        assertEquals(true, StringUtils.contains(\"abc\", 'c'));\n+        assertEquals(false, StringUtils.contains(\"abc\", 'z'));\n+    }\n+\n+    public void testContainsString() {\n+        assertEquals(false, StringUtils.contains(null, null));\n+        assertEquals(false, StringUtils.contains(null, \"\"));\n+        assertEquals(false, StringUtils.contains(null, \"a\"));\n+        assertEquals(false, StringUtils.contains(\"\", null));\n+        assertEquals(true, StringUtils.contains(\"\", \"\"));\n+        assertEquals(false, StringUtils.contains(\"\", \"a\"));\n+        assertEquals(true, StringUtils.contains(\"abc\", \"a\"));\n+        assertEquals(true, StringUtils.contains(\"abc\", \"b\"));\n+        assertEquals(true, StringUtils.contains(\"abc\", \"c\"));\n+        assertEquals(true, StringUtils.contains(\"abc\", \"abc\"));\n+        assertEquals(false, StringUtils.contains(\"abc\", \"z\"));\n+    }\n+\n+    public void testContainsIgnoreCase_StringString() {\n+        assertFalse(StringUtils.containsIgnoreCase(null, null));\n+        \n+        // Null tests\n+        assertFalse(StringUtils.containsIgnoreCase(null, \"\"));\n+        assertFalse(StringUtils.containsIgnoreCase(null, \"a\"));\n+        assertFalse(StringUtils.containsIgnoreCase(null, \"abc\"));\n+        \n+        assertFalse(StringUtils.containsIgnoreCase(\"\", null));\n+        assertFalse(StringUtils.containsIgnoreCase(\"a\", null));\n+        assertFalse(StringUtils.containsIgnoreCase(\"abc\", null));\n+        \n+        // Match len = 0\n+        assertTrue(StringUtils.containsIgnoreCase(\"\", \"\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"\"));\n+\n+        // Match len = 1\n+        assertFalse(StringUtils.containsIgnoreCase(\"\", \"a\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"a\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"a\"));\n+        assertFalse(StringUtils.containsIgnoreCase(\"\", \"A\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"a\", \"A\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"abc\", \"A\"));\n+        \n+        // Match len > 1\n+        assertFalse(StringUtils.containsIgnoreCase(\"\", \"abc\"));\n+        assertFalse(StringUtils.containsIgnoreCase(\"a\", \"abc\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"abc\"));\n+        assertFalse(StringUtils.containsIgnoreCase(\"\", \"ABC\"));\n+        assertFalse(StringUtils.containsIgnoreCase(\"a\", \"ABC\"));\n+        assertTrue(StringUtils.containsIgnoreCase(\"xabcz\", \"ABC\"));\n+    }\n+\n+    public void testContainsIgnoreCase_LocaleIndependence() {\n+        Locale orig = Locale.getDefault();\n+\n+        Locale[] locales = { Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault() };\n+\n+        String[][] tdata = { \n+            { \"i\", \"I\" },\n+            { \"I\", \"i\" },\n+            { \"\\u03C2\", \"\\u03C3\" },\n+            { \"\\u03A3\", \"\\u03C2\" },\n+            { \"\\u03A3\", \"\\u03C3\" },\n+        };\n+\n+        String[][] fdata = { \n+            { \"\\u00DF\", \"SS\" },\n+        };\n+\n+        try {\n+            for (int i = 0; i < locales.length; i++) {\n+                Locale.setDefault(locales[i]);\n+                for (int j = 0; j < tdata.length; j++) {\n+                    assertTrue(Locale.getDefault() + \": \" + j + \" \" + tdata[j][0] + \" \" + tdata[j][1], StringUtils\n+                            .containsIgnoreCase(tdata[j][0], tdata[j][1]));\n+                }\n+                for (int j = 0; j < fdata.length; j++) {\n+                    assertFalse(Locale.getDefault() + \": \" + j + \" \" + fdata[j][0] + \" \" + fdata[j][1], StringUtils\n+                            .containsIgnoreCase(fdata[j][0], fdata[j][1]));\n+                }\n+            }\n+        } finally {\n+            Locale.setDefault(orig);\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testIndexOfAny_StringStringarray() {\n+        assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));\n+        assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));\n+        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null));\n+        assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n+        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {\"llll\"}));\n+        assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {\"\"}));\n+        assertEquals(0, StringUtils.indexOfAny(\"\", new String[] {\"\"}));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {\"a\"}));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new String[] {null}));\n+        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null}));\n+        assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null}));\n+    }\n+\n+    public void testLastIndexOfAny_StringStringarray() {\n+        assertEquals(-1, StringUtils.lastIndexOfAny(null, null));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, null));\n+        assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[0]));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"llll\"}));\n+        assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"\"}));\n+        assertEquals(0, StringUtils.lastIndexOfAny(\"\", new String[] {\"\"}));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {\"a\"}));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(\"\", new String[] {null}));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null}));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null}));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIndexOfAny_StringChararray() {\n+        assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(null, new char[] {'a','b'}));\n+        \n+        assertEquals(-1, StringUtils.indexOfAny(\"\", (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[] {'a','b'}));\n+        \n+        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (char[]) null)); \n+        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", new char[0])); \n+        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'z','a'})); \n+        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'b','y'}));\n+        assertEquals(-1, StringUtils.indexOfAny(\"ab\", new char[] {'z'}));\n+    }\n+\n+    public void testIndexOfAny_StringString() {\n+        assertEquals(-1, StringUtils.indexOfAny(null, (String) null));\n+        assertEquals(-1, StringUtils.indexOfAny(null, \"\"));\n+        assertEquals(-1, StringUtils.indexOfAny(null, \"ab\"));\n+        \n+        assertEquals(-1, StringUtils.indexOfAny(\"\", (String) null));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", \"\"));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", \"ab\"));\n+        \n+        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (String) null)); \n+        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", \"\")); \n+        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", \"za\")); \n+        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", \"by\"));\n+        assertEquals(-1, StringUtils.indexOfAny(\"ab\", \"z\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContainsAny_StringChararray() {\n+        assertFalse(StringUtils.containsAny(null, (char[]) null));\n+        assertFalse(StringUtils.containsAny(null, new char[0]));\n+        assertFalse(StringUtils.containsAny(null, new char[] {'a','b'}));\n+        \n+        assertFalse(StringUtils.containsAny(\"\", (char[]) null));\n+        assertFalse(StringUtils.containsAny(\"\", new char[0]));\n+        assertFalse(StringUtils.containsAny(\"\", new char[] {'a','b'}));\n+        \n+        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (char[]) null)); \n+        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", new char[0])); \n+        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", new char[] {'z','a'})); \n+        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", new char[] {'b','y'}));\n+        assertFalse(StringUtils.containsAny(\"ab\", new char[] {'z'}));\n+    }\n+\n+    public void testContainsAny_StringString() {\n+        assertFalse(StringUtils.containsAny(null, (String) null));\n+        assertFalse(StringUtils.containsAny(null, \"\"));\n+        assertFalse(StringUtils.containsAny(null, \"ab\"));\n+        \n+        assertFalse(StringUtils.containsAny(\"\", (String) null));\n+        assertFalse(StringUtils.containsAny(\"\", \"\"));\n+        assertFalse(StringUtils.containsAny(\"\", \"ab\"));\n+        \n+        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", (String) null)); \n+        assertFalse(StringUtils.containsAny(\"zzabyycdxx\", \"\")); \n+        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"za\")); \n+        assertTrue(StringUtils.containsAny(\"zzabyycdxx\", \"by\"));\n+        assertFalse(StringUtils.containsAny(\"ab\", \"z\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIndexOfAnyBut_StringChararray() {\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] {'a','b'}));\n+        \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[] {'a','b'}));\n+        \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[0]));\n+        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'z','a'})); \n+        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'b','y'})); \n+        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", new char[] {'z'}));\n+    }\n+\n+    public void testIndexOfAnyBut_StringString() {\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"\"));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"ab\"));\n+        \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (String) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"\"));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"ab\"));\n+        \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (String) null)); \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")); \n+        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\")); \n+        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"by\"));\n+        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", \"z\"));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testContainsOnly_String() {\n+        String str1 = \"a\";\n+        String str2 = \"b\";\n+        String str3 = \"ab\";\n+        String chars1= \"b\";\n+        String chars2= \"a\";\n+        String chars3= \"ab\";\n+        assertEquals(false, StringUtils.containsOnly(null, (String) null));\n+        assertEquals(false, StringUtils.containsOnly(\"\", (String) null));\n+        assertEquals(false, StringUtils.containsOnly(null, \"\"));\n+        assertEquals(false, StringUtils.containsOnly(str1, \"\"));\n+        assertEquals(true, StringUtils.containsOnly(\"\", \"\"));\n+        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n+        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n+        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n+        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n+        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n+        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n+        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n+    }\n+\n+    public void testContainsOnly_Chararray() {\n+        String str1 = \"a\";\n+        String str2 = \"b\";\n+        String str3 = \"ab\";\n+        char[] chars1= {'b'};\n+        char[] chars2= {'a'};\n+        char[] chars3= {'a', 'b'};\n+        char[] emptyChars = new char[0];\n+        assertEquals(false, StringUtils.containsOnly(null, (char[]) null));\n+        assertEquals(false, StringUtils.containsOnly(\"\", (char[]) null));\n+        assertEquals(false, StringUtils.containsOnly(null, emptyChars));\n+        assertEquals(false, StringUtils.containsOnly(str1, emptyChars));\n+        assertEquals(true, StringUtils.containsOnly(\"\", emptyChars));\n+        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n+        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n+        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n+        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n+        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n+        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n+        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n+    }\n+\n+    public void testContainsNone_String() {\n+        String str1 = \"a\";\n+        String str2 = \"b\";\n+        String str3 = \"ab.\";\n+        String chars1= \"b\";\n+        String chars2= \".\";\n+        String chars3= \"cd\";\n+        assertEquals(true, StringUtils.containsNone(null, (String) null));\n+        assertEquals(true, StringUtils.containsNone(\"\", (String) null));\n+        assertEquals(true, StringUtils.containsNone(null, \"\"));\n+        assertEquals(true, StringUtils.containsNone(str1, \"\"));\n+        assertEquals(true, StringUtils.containsNone(\"\", \"\"));\n+        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n+        assertEquals(true, StringUtils.containsNone(str1, chars1));\n+        assertEquals(true, StringUtils.containsNone(str1, chars2));\n+        assertEquals(true, StringUtils.containsNone(str1, chars3));\n+        assertEquals(false, StringUtils.containsNone(str2, chars1));\n+        assertEquals(true, StringUtils.containsNone(str2, chars2));\n+        assertEquals(true, StringUtils.containsNone(str2, chars3));\n+        assertEquals(false, StringUtils.containsNone(str3, chars1));\n+        assertEquals(false, StringUtils.containsNone(str3, chars2));\n+        assertEquals(true, StringUtils.containsNone(str3, chars3));\n+    }\n+\n+    public void testContainsNone_Chararray() {\n+        String str1 = \"a\";\n+        String str2 = \"b\";\n+        String str3 = \"ab.\";\n+        char[] chars1= {'b'};\n+        char[] chars2= {'.'};\n+        char[] chars3= {'c', 'd'};\n+        char[] emptyChars = new char[0];\n+        assertEquals(true, StringUtils.containsNone(null, (char[]) null));\n+        assertEquals(true, StringUtils.containsNone(\"\", (char[]) null));\n+        assertEquals(true, StringUtils.containsNone(null, emptyChars));\n+        assertEquals(true, StringUtils.containsNone(str1, emptyChars));\n+        assertEquals(true, StringUtils.containsNone(\"\", emptyChars));\n+        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n+        assertEquals(true, StringUtils.containsNone(str1, chars1));\n+        assertEquals(true, StringUtils.containsNone(str1, chars2));\n+        assertEquals(true, StringUtils.containsNone(str1, chars3));\n+        assertEquals(false, StringUtils.containsNone(str2, chars1));\n+        assertEquals(true, StringUtils.containsNone(str2, chars2));\n+        assertEquals(true, StringUtils.containsNone(str2, chars3));\n+        assertEquals(false, StringUtils.containsNone(str3, chars1));\n+        assertEquals(false, StringUtils.containsNone(str3, chars2));\n+        assertEquals(true, StringUtils.containsNone(str3, chars3));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.StringUtils} - Substring methods\n+ *\n+ * @author Apache Software Foundation\n+ * @author Michael Davey\n+ * @version $Id$\n+ */\n+public class StringUtilsIsTest extends TestCase {\n+\n+    public StringUtilsIsTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testIsAlpha() {\n+        assertEquals(false, StringUtils.isAlpha(null));\n+        assertEquals(true, StringUtils.isAlpha(\"\"));\n+        assertEquals(false, StringUtils.isAlpha(\" \"));\n+        assertEquals(true, StringUtils.isAlpha(\"a\"));\n+        assertEquals(true, StringUtils.isAlpha(\"A\"));\n+        assertEquals(true, StringUtils.isAlpha(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n+        assertEquals(false, StringUtils.isAlpha(\"ham kso\"));\n+        assertEquals(false, StringUtils.isAlpha(\"1\"));\n+        assertEquals(false, StringUtils.isAlpha(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n+        assertEquals(false, StringUtils.isAlpha(\"_\"));\n+        assertEquals(false, StringUtils.isAlpha(\"hkHKHik*khbkuh\"));\n+    }\n+\n+    public void testIsAlphanumeric() {\n+        assertEquals(false, StringUtils.isAlphanumeric(null));\n+        assertEquals(true, StringUtils.isAlphanumeric(\"\"));\n+        assertEquals(false, StringUtils.isAlphanumeric(\" \"));\n+        assertEquals(true, StringUtils.isAlphanumeric(\"a\"));\n+        assertEquals(true, StringUtils.isAlphanumeric(\"A\"));\n+        assertEquals(true, StringUtils.isAlphanumeric(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n+        assertEquals(false, StringUtils.isAlphanumeric(\"ham kso\"));\n+        assertEquals(true, StringUtils.isAlphanumeric(\"1\"));\n+        assertEquals(true, StringUtils.isAlphanumeric(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n+        assertEquals(false, StringUtils.isAlphanumeric(\"_\"));\n+        assertEquals(false, StringUtils.isAlphanumeric(\"hkHKHik*khbkuh\"));\n+    }\n+\n+    public void testIsWhitespace() {\n+        assertEquals(false, StringUtils.isWhitespace(null));\n+        assertEquals(true, StringUtils.isWhitespace(\"\"));\n+        assertEquals(true, StringUtils.isWhitespace(\" \"));\n+        assertEquals(true, StringUtils.isWhitespace(\"\\t \\n \\t\"));\n+        assertEquals(false, StringUtils.isWhitespace(\"\\t aa\\n \\t\"));\n+        assertEquals(true, StringUtils.isWhitespace(\" \"));\n+        assertEquals(false, StringUtils.isWhitespace(\" a \"));\n+        assertEquals(false, StringUtils.isWhitespace(\"a  \"));\n+        assertEquals(false, StringUtils.isWhitespace(\"  a\"));\n+        assertEquals(false, StringUtils.isWhitespace(\"aba\"));\n+        assertEquals(true, StringUtils.isWhitespace(StringUtilsTest.WHITESPACE));\n+        assertEquals(false, StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));\n+    }\n+\n+    public void testIsAlphaspace() {\n+        assertEquals(false, StringUtils.isAlphaSpace(null));\n+        assertEquals(true, StringUtils.isAlphaSpace(\"\"));\n+        assertEquals(true, StringUtils.isAlphaSpace(\" \"));\n+        assertEquals(true, StringUtils.isAlphaSpace(\"a\"));\n+        assertEquals(true, StringUtils.isAlphaSpace(\"A\"));\n+        assertEquals(true, StringUtils.isAlphaSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n+        assertEquals(true, StringUtils.isAlphaSpace(\"ham kso\"));\n+        assertEquals(false, StringUtils.isAlphaSpace(\"1\"));\n+        assertEquals(false, StringUtils.isAlphaSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n+        assertEquals(false, StringUtils.isAlphaSpace(\"_\"));\n+        assertEquals(false, StringUtils.isAlphaSpace(\"hkHKHik*khbkuh\"));\n+    }\n+\n+    public void testIsAlphanumericSpace() {\n+        assertEquals(false, StringUtils.isAlphanumericSpace(null));\n+        assertEquals(true, StringUtils.isAlphanumericSpace(\"\"));\n+        assertEquals(true, StringUtils.isAlphanumericSpace(\" \"));\n+        assertEquals(true, StringUtils.isAlphanumericSpace(\"a\"));\n+        assertEquals(true, StringUtils.isAlphanumericSpace(\"A\"));\n+        assertEquals(true, StringUtils.isAlphanumericSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n+        assertEquals(true, StringUtils.isAlphanumericSpace(\"ham kso\"));\n+        assertEquals(true, StringUtils.isAlphanumericSpace(\"1\"));\n+        assertEquals(true, StringUtils.isAlphanumericSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n+        assertEquals(false, StringUtils.isAlphanumericSpace(\"_\"));\n+        assertEquals(false, StringUtils.isAlphanumericSpace(\"hkHKHik*khbkuh\"));\n+    }\n+\n+    public void testIsAsciiPrintable_String() {\n+        assertEquals(false, StringUtils.isAsciiPrintable(null));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\" \"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"a\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"A\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"1\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"Ceki\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"!ab2c~\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"1000\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"10 00\"));\n+        assertEquals(false, StringUtils.isAsciiPrintable(\"10\\t00\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"10.00\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"10,00\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"!ab-c~\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"\\u0020\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"\\u0021\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"\\u007e\"));\n+        assertEquals(false, StringUtils.isAsciiPrintable(\"\\u007f\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"G?lc?\"));\n+        assertEquals(true, StringUtils.isAsciiPrintable(\"=?iso-8859-1?Q?G=FClc=FC?=\"));\n+        assertEquals(false, StringUtils.isAsciiPrintable(\"G\\u00fclc\\u00fc\"));\n+    }\n+  \n+    public void testIsNumeric() {\n+        assertEquals(false, StringUtils.isNumeric(null));\n+        assertEquals(true, StringUtils.isNumeric(\"\"));\n+        assertEquals(false, StringUtils.isNumeric(\" \"));\n+        assertEquals(false, StringUtils.isNumeric(\"a\"));\n+        assertEquals(false, StringUtils.isNumeric(\"A\"));\n+        assertEquals(false, StringUtils.isNumeric(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n+        assertEquals(false, StringUtils.isNumeric(\"ham kso\"));\n+        assertEquals(true, StringUtils.isNumeric(\"1\"));\n+        assertEquals(true, StringUtils.isNumeric(\"1000\"));\n+        assertEquals(false, StringUtils.isNumeric(\"2.3\"));\n+        assertEquals(false, StringUtils.isNumeric(\"10 00\"));\n+        assertEquals(false, StringUtils.isNumeric(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n+        assertEquals(false, StringUtils.isNumeric(\"_\"));\n+        assertEquals(false, StringUtils.isNumeric(\"hkHKHik*khbkuh\"));\n+    }\n+\n+    public void testIsNumericSpace() {\n+        assertEquals(false, StringUtils.isNumericSpace(null));\n+        assertEquals(true, StringUtils.isNumericSpace(\"\"));\n+        assertEquals(true, StringUtils.isNumericSpace(\" \"));\n+        assertEquals(false, StringUtils.isNumericSpace(\"a\"));\n+        assertEquals(false, StringUtils.isNumericSpace(\"A\"));\n+        assertEquals(false, StringUtils.isNumericSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n+        assertEquals(false, StringUtils.isNumericSpace(\"ham kso\"));\n+        assertEquals(true, StringUtils.isNumericSpace(\"1\"));\n+        assertEquals(true, StringUtils.isNumericSpace(\"1000\"));\n+        assertEquals(false, StringUtils.isNumericSpace(\"2.3\"));\n+        assertEquals(true, StringUtils.isNumericSpace(\"10 00\"));\n+        assertEquals(false, StringUtils.isNumericSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n+        assertEquals(false, StringUtils.isNumericSpace(\"_\"));\n+        assertEquals(false, StringUtils.isNumericSpace(\"hkHKHik*khbkuh\"));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.StringUtils} - StartsWith/EndsWith methods\n+ *\n+ * @version $Id$\n+ */\n+public class StringUtilsStartsEndsWithTest extends TestCase {\n+    private static final String foo    = \"foo\";\n+    private static final String bar    = \"bar\";\n+    private static final String foobar = \"foobar\";\n+    private static final String FOO    = \"FOO\";\n+    private static final String BAR    = \"BAR\";\n+    private static final String FOOBAR = \"FOOBAR\";\n+\n+    public StringUtilsStartsEndsWithTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * Test StringUtils.startsWith()\n+     */\n+    public void testStartsWith() {\n+        assertTrue(\"startsWith(null, null)\", StringUtils.startsWith(null, (String)null));\n+        assertFalse(\"startsWith(FOOBAR, null)\", StringUtils.startsWith(FOOBAR, (String)null));\n+        assertFalse(\"startsWith(null, FOO)\",    StringUtils.startsWith(null, FOO));\n+        assertTrue(\"startsWith(FOOBAR, \\\"\\\")\",  StringUtils.startsWith(FOOBAR, \"\"));\n+\n+        assertTrue(\"startsWith(foobar, foo)\",  StringUtils.startsWith(foobar, foo));\n+        assertTrue(\"startsWith(FOOBAR, FOO)\",  StringUtils.startsWith(FOOBAR, FOO));\n+        assertFalse(\"startsWith(foobar, FOO)\", StringUtils.startsWith(foobar, FOO));\n+        assertFalse(\"startsWith(FOOBAR, foo)\", StringUtils.startsWith(FOOBAR, foo));\n+\n+        assertFalse(\"startsWith(foo, foobar)\", StringUtils.startsWith(foo, foobar));\n+        assertFalse(\"startsWith(foo, foobar)\", StringUtils.startsWith(bar, foobar));\n+\n+        assertFalse(\"startsWith(foobar, bar)\", StringUtils.startsWith(foobar, bar));\n+        assertFalse(\"startsWith(FOOBAR, BAR)\", StringUtils.startsWith(FOOBAR, BAR));\n+        assertFalse(\"startsWith(foobar, BAR)\", StringUtils.startsWith(foobar, BAR));\n+        assertFalse(\"startsWith(FOOBAR, bar)\", StringUtils.startsWith(FOOBAR, bar));\n+    }\n+\n+    /**\n+     * Test StringUtils.testStartsWithIgnoreCase()\n+     */\n+    public void testStartsWithIgnoreCase() {\n+        assertTrue(\"startsWithIgnoreCase(null, null)\",    StringUtils.startsWithIgnoreCase(null, (String)null));\n+        assertFalse(\"startsWithIgnoreCase(FOOBAR, null)\", StringUtils.startsWithIgnoreCase(FOOBAR, (String)null));\n+        assertFalse(\"startsWithIgnoreCase(null, FOO)\",    StringUtils.startsWithIgnoreCase(null, FOO));\n+        assertTrue(\"startsWithIgnoreCase(FOOBAR, \\\"\\\")\",  StringUtils.startsWithIgnoreCase(FOOBAR, \"\"));\n+\n+        assertTrue(\"startsWithIgnoreCase(foobar, foo)\", StringUtils.startsWithIgnoreCase(foobar, foo));\n+        assertTrue(\"startsWithIgnoreCase(FOOBAR, FOO)\", StringUtils.startsWithIgnoreCase(FOOBAR, FOO));\n+        assertTrue(\"startsWithIgnoreCase(foobar, FOO)\", StringUtils.startsWithIgnoreCase(foobar, FOO));\n+        assertTrue(\"startsWithIgnoreCase(FOOBAR, foo)\", StringUtils.startsWithIgnoreCase(FOOBAR, foo));\n+\n+        assertFalse(\"startsWithIgnoreCase(foo, foobar)\", StringUtils.startsWithIgnoreCase(foo, foobar));\n+        assertFalse(\"startsWithIgnoreCase(foo, foobar)\", StringUtils.startsWithIgnoreCase(bar, foobar));\n+\n+        assertFalse(\"startsWithIgnoreCase(foobar, bar)\", StringUtils.startsWithIgnoreCase(foobar, bar));\n+        assertFalse(\"startsWithIgnoreCase(FOOBAR, BAR)\", StringUtils.startsWithIgnoreCase(FOOBAR, BAR));\n+        assertFalse(\"startsWithIgnoreCase(foobar, BAR)\", StringUtils.startsWithIgnoreCase(foobar, BAR));\n+        assertFalse(\"startsWithIgnoreCase(FOOBAR, bar)\", StringUtils.startsWithIgnoreCase(FOOBAR, bar));\n+    }\n+\n+\n+    /**\n+     * Test StringUtils.endsWith()\n+     */\n+    public void testEndsWith() {\n+        assertTrue(\"endsWith(null, null)\",    StringUtils.endsWith(null, (String)null));\n+        assertFalse(\"endsWith(FOOBAR, null)\", StringUtils.endsWith(FOOBAR, (String)null));\n+        assertFalse(\"endsWith(null, FOO)\",    StringUtils.endsWith(null, FOO));\n+        assertTrue(\"endsWith(FOOBAR, \\\"\\\")\",  StringUtils.endsWith(FOOBAR, \"\"));\n+\n+        assertFalse(\"endsWith(foobar, foo)\", StringUtils.endsWith(foobar, foo));\n+        assertFalse(\"endsWith(FOOBAR, FOO)\", StringUtils.endsWith(FOOBAR, FOO));\n+        assertFalse(\"endsWith(foobar, FOO)\", StringUtils.endsWith(foobar, FOO));\n+        assertFalse(\"endsWith(FOOBAR, foo)\", StringUtils.endsWith(FOOBAR, foo));\n+\n+        assertFalse(\"endsWith(foo, foobar)\", StringUtils.endsWith(foo, foobar));\n+        assertFalse(\"endsWith(foo, foobar)\", StringUtils.endsWith(bar, foobar));\n+\n+        assertTrue(\"endsWith(foobar, bar)\",  StringUtils.endsWith(foobar, bar));\n+        assertTrue(\"endsWith(FOOBAR, BAR)\",  StringUtils.endsWith(FOOBAR, BAR));\n+        assertFalse(\"endsWith(foobar, BAR)\", StringUtils.endsWith(foobar, BAR));\n+        assertFalse(\"endsWith(FOOBAR, bar)\", StringUtils.endsWith(FOOBAR, bar));\n+    }\n+\n+    /**\n+     * Test StringUtils.endsWithIgnoreCase()\n+     */\n+    public void testEndsWithIgnoreCase() {\n+        assertTrue(\"endsWithIgnoreCase(null, null)\",    StringUtils.endsWithIgnoreCase(null, (String)null));\n+        assertFalse(\"endsWithIgnoreCase(FOOBAR, null)\", StringUtils.endsWithIgnoreCase(FOOBAR, (String)null));\n+        assertFalse(\"endsWithIgnoreCase(null, FOO)\",    StringUtils.endsWithIgnoreCase(null, FOO));\n+        assertTrue(\"endsWithIgnoreCase(FOOBAR, \\\"\\\")\",  StringUtils.endsWithIgnoreCase(FOOBAR, \"\"));\n+\n+        assertFalse(\"endsWithIgnoreCase(foobar, foo)\", StringUtils.endsWithIgnoreCase(foobar, foo));\n+        assertFalse(\"endsWithIgnoreCase(FOOBAR, FOO)\", StringUtils.endsWithIgnoreCase(FOOBAR, FOO));\n+        assertFalse(\"endsWithIgnoreCase(foobar, FOO)\", StringUtils.endsWithIgnoreCase(foobar, FOO));\n+        assertFalse(\"endsWithIgnoreCase(FOOBAR, foo)\", StringUtils.endsWithIgnoreCase(FOOBAR, foo));\n+\n+        assertFalse(\"endsWithIgnoreCase(foo, foobar)\", StringUtils.endsWithIgnoreCase(foo, foobar));\n+        assertFalse(\"endsWithIgnoreCase(foo, foobar)\", StringUtils.endsWithIgnoreCase(bar, foobar));\n+\n+        assertTrue(\"endsWithIgnoreCase(foobar, bar)\", StringUtils.endsWithIgnoreCase(foobar, bar));\n+        assertTrue(\"endsWithIgnoreCase(FOOBAR, BAR)\", StringUtils.endsWithIgnoreCase(FOOBAR, BAR));\n+        assertTrue(\"endsWithIgnoreCase(foobar, BAR)\", StringUtils.endsWithIgnoreCase(foobar, BAR));\n+        assertTrue(\"endsWithIgnoreCase(FOOBAR, bar)\", StringUtils.endsWithIgnoreCase(FOOBAR, bar));\n+\n+        // javadoc\n+        assertTrue(StringUtils.endsWithIgnoreCase(\"abcdef\", \"def\"));\n+        assertTrue(StringUtils.endsWithIgnoreCase(\"ABCDEF\", \"def\"));\n+        assertFalse(StringUtils.endsWithIgnoreCase(\"ABCDEF\", \"cde\"));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsSubstringTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.StringUtils} - Substring methods\n+ *\n+ * @author Apache Software Foundation\n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @author Phil Steitz\n+ * @version $Id$\n+ */\n+public class StringUtilsSubstringTest extends TestCase {\n+    private static final String FOO = \"foo\";\n+    private static final String BAR = \"bar\";\n+    private static final String BAZ = \"baz\";\n+    private static final String FOOBAR = \"foobar\";\n+    private static final String SENTENCE = \"foo bar baz\";\n+\n+    public StringUtilsSubstringTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+\n+    public void testSubstring_StringInt() {\n+        assertEquals(null, StringUtils.substring(null, 0));\n+        assertEquals(\"\", StringUtils.substring(\"\", 0));\n+        assertEquals(\"\", StringUtils.substring(\"\", 2));\n+        \n+        assertEquals(\"\", StringUtils.substring(SENTENCE, 80));\n+        assertEquals(BAZ, StringUtils.substring(SENTENCE, 8));\n+        assertEquals(BAZ, StringUtils.substring(SENTENCE, -3));\n+        assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0));\n+        assertEquals(\"abc\", StringUtils.substring(\"abc\", -4));\n+        assertEquals(\"abc\", StringUtils.substring(\"abc\", -3));\n+        assertEquals(\"bc\", StringUtils.substring(\"abc\", -2));\n+        assertEquals(\"c\", StringUtils.substring(\"abc\", -1));\n+        assertEquals(\"abc\", StringUtils.substring(\"abc\", 0));\n+        assertEquals(\"bc\", StringUtils.substring(\"abc\", 1));\n+        assertEquals(\"c\", StringUtils.substring(\"abc\", 2));\n+        assertEquals(\"\", StringUtils.substring(\"abc\", 3));\n+        assertEquals(\"\", StringUtils.substring(\"abc\", 4));\n+    }\n+    \n+    public void testSubstring_StringIntInt() {\n+        assertEquals(null, StringUtils.substring(null, 0, 0));\n+        assertEquals(null, StringUtils.substring(null, 1, 2));\n+        assertEquals(\"\", StringUtils.substring(\"\", 0, 0));\n+        assertEquals(\"\", StringUtils.substring(\"\", 1, 2));\n+        assertEquals(\"\", StringUtils.substring(\"\", -2, -1));\n+        \n+        assertEquals(\"\", StringUtils.substring(SENTENCE, 8, 6));\n+        assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3));\n+        assertEquals(\"o\", StringUtils.substring(SENTENCE, -9, 3));\n+        assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8));\n+        assertEquals(\"o\", StringUtils.substring(SENTENCE, -9, -8));\n+        assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80));\n+        assertEquals(\"\", StringUtils.substring(SENTENCE, 2, 2));\n+        assertEquals(\"b\",StringUtils.substring(\"abc\", -2, -1));\n+    }\n+           \n+    public void testLeft_String() {\n+        assertSame(null, StringUtils.left(null, -1));\n+        assertSame(null, StringUtils.left(null, 0));\n+        assertSame(null, StringUtils.left(null, 2));\n+        \n+        assertEquals(\"\", StringUtils.left(\"\", -1));\n+        assertEquals(\"\", StringUtils.left(\"\", 0));\n+        assertEquals(\"\", StringUtils.left(\"\", 2));\n+        \n+        assertEquals(\"\", StringUtils.left(FOOBAR, -1));\n+        assertEquals(\"\", StringUtils.left(FOOBAR, 0));\n+        assertEquals(FOO, StringUtils.left(FOOBAR, 3));\n+        assertSame(FOOBAR, StringUtils.left(FOOBAR, 80));\n+    }\n+    \n+    public void testRight_String() {\n+        assertSame(null, StringUtils.right(null, -1));\n+        assertSame(null, StringUtils.right(null, 0));\n+        assertSame(null, StringUtils.right(null, 2));\n+        \n+        assertEquals(\"\", StringUtils.right(\"\", -1));\n+        assertEquals(\"\", StringUtils.right(\"\", 0));\n+        assertEquals(\"\", StringUtils.right(\"\", 2));\n+        \n+        assertEquals(\"\", StringUtils.right(FOOBAR, -1));\n+        assertEquals(\"\", StringUtils.right(FOOBAR, 0));\n+        assertEquals(BAR, StringUtils.right(FOOBAR, 3));\n+        assertSame(FOOBAR, StringUtils.right(FOOBAR, 80));\n+    }\n+    \n+    public void testMid_String() {\n+        assertSame(null, StringUtils.mid(null, -1, 0));\n+        assertSame(null, StringUtils.mid(null, 0, -1));\n+        assertSame(null, StringUtils.mid(null, 3, 0));\n+        assertSame(null, StringUtils.mid(null, 3, 2));\n+        \n+        assertEquals(\"\", StringUtils.mid(\"\", 0, -1));\n+        assertEquals(\"\", StringUtils.mid(\"\", 0, 0));\n+        assertEquals(\"\", StringUtils.mid(\"\", 0, 2));\n+        \n+        assertEquals(\"\", StringUtils.mid(FOOBAR, 3, -1));\n+        assertEquals(\"\", StringUtils.mid(FOOBAR, 3, 0));\n+        assertEquals(\"b\", StringUtils.mid(FOOBAR, 3, 1));\n+        assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3));\n+        assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3));\n+        assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80));\n+        assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80));\n+        assertEquals(\"\", StringUtils.mid(FOOBAR, 9, 3));\n+        assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSubstringBefore_StringString() {\n+        assertEquals(\"foo\", StringUtils.substringBefore(\"fooXXbarXXbaz\", \"XX\"));\n+\n+        assertEquals(null, StringUtils.substringBefore(null, null));\n+        assertEquals(null, StringUtils.substringBefore(null, \"\"));\n+        assertEquals(null, StringUtils.substringBefore(null, \"XX\"));\n+        assertEquals(\"\", StringUtils.substringBefore(\"\", null));\n+        assertEquals(\"\", StringUtils.substringBefore(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.substringBefore(\"\", \"XX\"));\n+        \n+        assertEquals(\"foo\", StringUtils.substringBefore(\"foo\", null));\n+        assertEquals(\"foo\", StringUtils.substringBefore(\"foo\", \"b\"));\n+        assertEquals(\"f\", StringUtils.substringBefore(\"foot\", \"o\"));\n+        assertEquals(\"\", StringUtils.substringBefore(\"abc\", \"a\"));\n+        assertEquals(\"a\", StringUtils.substringBefore(\"abcba\", \"b\"));\n+        assertEquals(\"ab\", StringUtils.substringBefore(\"abc\", \"c\"));\n+        assertEquals(\"\", StringUtils.substringBefore(\"abc\", \"\"));\n+    }\n+    \n+    public void testSubstringAfter_StringString() {\n+        assertEquals(\"barXXbaz\", StringUtils.substringAfter(\"fooXXbarXXbaz\", \"XX\"));\n+        \n+        assertEquals(null, StringUtils.substringAfter(null, null));\n+        assertEquals(null, StringUtils.substringAfter(null, \"\"));\n+        assertEquals(null, StringUtils.substringAfter(null, \"XX\"));\n+        assertEquals(\"\", StringUtils.substringAfter(\"\", null));\n+        assertEquals(\"\", StringUtils.substringAfter(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.substringAfter(\"\", \"XX\"));\n+        \n+        assertEquals(\"\", StringUtils.substringAfter(\"foo\", null));\n+        assertEquals(\"ot\", StringUtils.substringAfter(\"foot\", \"o\"));\n+        assertEquals(\"bc\", StringUtils.substringAfter(\"abc\", \"a\"));\n+        assertEquals(\"cba\", StringUtils.substringAfter(\"abcba\", \"b\"));\n+        assertEquals(\"\", StringUtils.substringAfter(\"abc\", \"c\"));\n+        assertEquals(\"abc\", StringUtils.substringAfter(\"abc\", \"\"));\n+        assertEquals(\"\", StringUtils.substringAfter(\"abc\", \"d\"));\n+    }\n+\n+    public void testSubstringBeforeLast_StringString() {\n+        assertEquals(\"fooXXbar\", StringUtils.substringBeforeLast(\"fooXXbarXXbaz\", \"XX\"));\n+\n+        assertEquals(null, StringUtils.substringBeforeLast(null, null));\n+        assertEquals(null, StringUtils.substringBeforeLast(null, \"\"));\n+        assertEquals(null, StringUtils.substringBeforeLast(null, \"XX\"));\n+        assertEquals(\"\", StringUtils.substringBeforeLast(\"\", null));\n+        assertEquals(\"\", StringUtils.substringBeforeLast(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.substringBeforeLast(\"\", \"XX\"));\n+\n+        assertEquals(\"foo\", StringUtils.substringBeforeLast(\"foo\", null));\n+        assertEquals(\"foo\", StringUtils.substringBeforeLast(\"foo\", \"b\"));\n+        assertEquals(\"fo\", StringUtils.substringBeforeLast(\"foo\", \"o\"));\n+        assertEquals(\"abc\\r\\n\", StringUtils.substringBeforeLast(\"abc\\r\\n\", \"d\"));\n+        assertEquals(\"abc\", StringUtils.substringBeforeLast(\"abcdabc\", \"d\"));\n+        assertEquals(\"abcdabc\", StringUtils.substringBeforeLast(\"abcdabcd\", \"d\"));\n+        assertEquals(\"a\", StringUtils.substringBeforeLast(\"abc\", \"b\"));\n+        assertEquals(\"abc \", StringUtils.substringBeforeLast(\"abc \\n\", \"\\n\"));\n+        assertEquals(\"a\", StringUtils.substringBeforeLast(\"a\", null));\n+        assertEquals(\"a\", StringUtils.substringBeforeLast(\"a\", \"\"));\n+        assertEquals(\"\", StringUtils.substringBeforeLast(\"a\", \"a\"));\n+    }\n+    \n+    public void testSubstringAfterLast_StringString() {\n+        assertEquals(\"baz\", StringUtils.substringAfterLast(\"fooXXbarXXbaz\", \"XX\"));\n+\n+        assertEquals(null, StringUtils.substringAfterLast(null, null));\n+        assertEquals(null, StringUtils.substringAfterLast(null, \"\"));\n+        assertEquals(null, StringUtils.substringAfterLast(null, \"XX\"));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"\", null));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"a\"));\n+\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"foo\", null));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"foo\", \"b\"));\n+        assertEquals(\"t\", StringUtils.substringAfterLast(\"foot\", \"o\"));\n+        assertEquals(\"bc\", StringUtils.substringAfterLast(\"abc\", \"a\"));\n+        assertEquals(\"a\", StringUtils.substringAfterLast(\"abcba\", \"b\"));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"abc\", \"c\"));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"\", \"d\"));\n+        assertEquals(\"\", StringUtils.substringAfterLast(\"abc\", \"\"));\n+    }        \n+        \n+    //-----------------------------------------------------------------------\n+    public void testSubstringBetween_StringString() {\n+        assertEquals(null, StringUtils.substringBetween(null, \"tag\"));\n+        assertEquals(\"\", StringUtils.substringBetween(\"\", \"\"));\n+        assertEquals(null, StringUtils.substringBetween(\"\", \"abc\"));\n+        assertEquals(\"\", StringUtils.substringBetween(\"    \", \" \"));\n+        assertEquals(null, StringUtils.substringBetween(\"abc\", null));\n+        assertEquals(\"\", StringUtils.substringBetween(\"abc\", \"\"));\n+        assertEquals(null, StringUtils.substringBetween(\"abc\", \"a\"));\n+        assertEquals(\"bc\", StringUtils.substringBetween(\"abca\", \"a\"));\n+        assertEquals(\"bc\", StringUtils.substringBetween(\"abcabca\", \"a\"));\n+        assertEquals(\"bar\", StringUtils.substringBetween(\"\\nbar\\n\", \"\\n\"));\n+    }\n+            \n+    public void testSubstringBetween_StringStringString() {\n+        assertEquals(null, StringUtils.substringBetween(null, \"\", \"\"));\n+        assertEquals(null, StringUtils.substringBetween(\"\", null, \"\"));\n+        assertEquals(null, StringUtils.substringBetween(\"\", \"\", null));\n+        assertEquals(\"\", StringUtils.substringBetween(\"\", \"\", \"\"));\n+        assertEquals(\"\", StringUtils.substringBetween(\"foo\", \"\", \"\"));\n+        assertEquals(null, StringUtils.substringBetween(\"foo\", \"\", \"]\"));\n+        assertEquals(null, StringUtils.substringBetween(\"foo\", \"[\", \"]\"));\n+        assertEquals(\"\", StringUtils.substringBetween(\"    \", \" \", \"  \"));\n+        assertEquals(\"bar\", StringUtils.substringBetween(\"<foo>bar</foo>\", \"<foo>\", \"</foo>\") );\n+    }\n+\n+   /**\n+     * Tests the substringsBetween method that returns an String Array of substrings.\n+     */\n+    public void testSubstringsBetween_StringStringString() {\n+\n+        String[] results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"[\", \"]\");\n+        assertEquals(3, results.length);\n+        assertEquals(\"one\", results[0]);\n+        assertEquals(\"two\", results[1]);\n+        assertEquals(\"three\", results[2]);\n+\n+        results = StringUtils.substringsBetween(\"[one], [two], three\", \"[\", \"]\");\n+        assertEquals(2, results.length);\n+        assertEquals(\"one\", results[0]);\n+        assertEquals(\"two\", results[1]);\n+\n+        results = StringUtils.substringsBetween(\"[one], [two], three]\", \"[\", \"]\");\n+        assertEquals(2, results.length);\n+        assertEquals(\"one\", results[0]);\n+        assertEquals(\"two\", results[1]);\n+\n+        results = StringUtils.substringsBetween(\"[one], two], three]\", \"[\", \"]\");\n+        assertEquals(1, results.length);\n+        assertEquals(\"one\", results[0]);\n+\n+        results = StringUtils.substringsBetween(\"one], two], [three]\", \"[\", \"]\");\n+        assertEquals(1, results.length);\n+        assertEquals(\"three\", results[0]);\n+\n+        // 'ab hello ba' will match, but 'ab non ba' won't\n+        // this is because the 'a' is shared between the two and can't be matched twice\n+        results = StringUtils.substringsBetween(\"aabhellobabnonba\", \"ab\", \"ba\");\n+        assertEquals(1, results.length);\n+        assertEquals(\"hello\", results[0]);\n+\n+        results = StringUtils.substringsBetween(\"one, two, three\", \"[\", \"]\");\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(\"[one, two, three\", \"[\", \"]\");\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(\"one, two, three]\", \"[\", \"]\");\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"[\", null);\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(\"[one], [two], [three]\", null, \"]\");\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"\", \"\");\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(null, \"[\", \"]\");\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(\"\", \"[\", \"]\");\n+        assertEquals(0, results.length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCountMatches_String() {\n+        assertEquals(0, StringUtils.countMatches(null, null));\n+        assertEquals(0, StringUtils.countMatches(\"blah\", null));\n+        assertEquals(0, StringUtils.countMatches(null, \"DD\"));\n+\n+        assertEquals(0, StringUtils.countMatches(\"x\", \"\"));\n+        assertEquals(0, StringUtils.countMatches(\"\", \"\"));\n+\n+        assertEquals(3, \n+             StringUtils.countMatches(\"one long someone sentence of one\", \"one\"));\n+        assertEquals(0, \n+             StringUtils.countMatches(\"one long someone sentence of one\", \"two\"));\n+        assertEquals(4, \n+             StringUtils.countMatches(\"oooooooooooo\", \"ooo\"));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.StringUtils}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author Daniel L. Rall\n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n+ * @author Holger Krauth\n+ * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n+ * @author Phil Steitz\n+ * @author Gary D. Gregory\n+ * @author Scott Johnson\n+ * @author Al Chou\n+ * @version $Id$\n+ */\n+public class StringUtilsTest extends TestCase {\n+    \n+    static final String WHITESPACE;\n+    static final String NON_WHITESPACE;\n+    static final String TRIMMABLE;\n+    static final String NON_TRIMMABLE;\n+    static {\n+        String ws = \"\";\n+        String nws = \"\";\n+        String tr = \"\";\n+        String ntr = \"\";\n+        for (int i = 0; i < Character.MAX_VALUE; i++) {\n+            if (Character.isWhitespace((char) i)) {\n+                ws += String.valueOf((char) i);\n+                if (i > 32) {\n+                    ntr += String.valueOf((char) i);\n+                }\n+            } else if (i < 40) {\n+                nws += String.valueOf((char) i);\n+            }\n+        }\n+        for (int i = 0; i <= 32; i++) {\n+            tr += String.valueOf((char) i);\n+        }\n+        WHITESPACE = ws;\n+        NON_WHITESPACE = nws;\n+        TRIMMABLE = tr;\n+        NON_TRIMMABLE = ntr;\n+    }\n+\n+    private static final String[] ARRAY_LIST = { \"foo\", \"bar\", \"baz\" };\n+    private static final String[] EMPTY_ARRAY_LIST = {};\n+    private static final String[] NULL_ARRAY_LIST = {null};\n+    private static final String[] MIXED_ARRAY_LIST = {null, \"\", \"foo\"};\n+    private static final Object[] MIXED_TYPE_LIST = {new String(\"foo\"), new Long(2)};\n+\n+    private static final String SEPARATOR = \",\";\n+    private static final char   SEPARATOR_CHAR = ';';\n+\n+    private static final String TEXT_LIST = \"foo,bar,baz\";\n+    private static final String TEXT_LIST_CHAR = \"foo;bar;baz\";\n+    private static final String TEXT_LIST_NOSEP = \"foobarbaz\";\n+\n+    private static final String FOO_UNCAP = \"foo\";\n+    private static final String FOO_CAP = \"Foo\";\n+\n+    private static final String SENTENCE_UNCAP = \"foo bar baz\";\n+    private static final String SENTENCE_CAP = \"Foo Bar Baz\";\n+\n+    public StringUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new StringUtils());\n+        Constructor<?>[] cons = StringUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(StringUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(StringUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testCaseFunctions() {\n+        assertEquals(null, StringUtils.upperCase(null));\n+        assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH));\n+        assertEquals(null, StringUtils.lowerCase(null));\n+        assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH));\n+        assertEquals(null, StringUtils.capitalize(null));\n+        assertEquals(null, StringUtils.uncapitalize(null));\n+\n+        assertEquals(\"capitalize(empty-string) failed\",\n+                     \"\", StringUtils.capitalize(\"\") );\n+        assertEquals(\"capitalize(single-char-string) failed\",\n+                     \"X\", StringUtils.capitalize(\"x\") );\n+        assertEquals(\"uncapitalize(String) failed\",\n+                     FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );\n+        assertEquals(\"uncapitalize(empty-string) failed\",\n+                     \"\", StringUtils.uncapitalize(\"\") );\n+        assertEquals(\"uncapitalize(single-char-string) failed\",\n+                     \"x\", StringUtils.uncapitalize(\"X\") );\n+                     \n+        // reflection type of tests: Sentences.\n+        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n+                     SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) );\n+        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n+                     SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) );\n+\n+        // reflection type of tests: One word.\n+        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n+                     FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );\n+        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n+                     FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) );\n+\n+        assertEquals(\"upperCase(String) failed\",\n+                     \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\") );\n+        assertEquals(\"upperCase(empty-string) failed\",\n+                     \"\", StringUtils.upperCase(\"\") );\n+        assertEquals(\"lowerCase(String) failed\",\n+                     \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\") );\n+        assertEquals(\"lowerCase(empty-string) failed\",\n+                     \"\", StringUtils.lowerCase(\"\") );\n+\n+        assertEquals(\"upperCase(String, Locale) failed\",\n+                     \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\", Locale.ENGLISH) );\n+        assertEquals(\"upperCase(empty-string, Locale) failed\",\n+                     \"\", StringUtils.upperCase(\"\", Locale.ENGLISH) );\n+        assertEquals(\"lowerCase(String, Locale) failed\",\n+                     \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\", Locale.ENGLISH) );\n+        assertEquals(\"lowerCase(empty-string, Locale) failed\",\n+                     \"\", StringUtils.lowerCase(\"\", Locale.ENGLISH) );\n+    }\n+\n+    public void testSwapCase_String() {\n+        assertEquals(null, StringUtils.swapCase(null));\n+        assertEquals(\"\", StringUtils.swapCase(\"\"));\n+        assertEquals(\"  \", StringUtils.swapCase(\"  \"));\n+        \n+        assertEquals(\"i\", WordUtils.swapCase(\"I\") );\n+        assertEquals(\"I\", WordUtils.swapCase(\"i\") );\n+        assertEquals(\"I AM HERE 123\", StringUtils.swapCase(\"i am here 123\") );\n+        assertEquals(\"i aM hERE 123\", StringUtils.swapCase(\"I Am Here 123\") );\n+        assertEquals(\"I AM here 123\", StringUtils.swapCase(\"i am HERE 123\") );\n+        assertEquals(\"i am here 123\", StringUtils.swapCase(\"I AM HERE 123\") );\n+        \n+        String test = \"This String contains a TitleCase character: \\u01C8\";\n+        String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\n+        assertEquals(expect, WordUtils.swapCase(test));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testJoin_Objectarray() {\n+        assertEquals(null, StringUtils.join(null));\n+        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\n+        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\n+        assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));\n+        assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));\n+        assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));\n+        assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));\n+    }\n+        \n+    public void testJoin_ArrayChar() {\n+        assertEquals(null, StringUtils.join((Object[]) null, ','));\n+        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n+        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n+        assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));\n+        assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));\n+\n+        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));\n+        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));\n+        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));\n+        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));\n+        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));\n+    }\n+    \n+    public void testJoin_ArrayString() {\n+        assertEquals(null, StringUtils.join((Object[]) null, null));\n+        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));\n+        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, \"\"));\n+        \n+        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST, null));\n+        \n+        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, null));\n+        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, \"\"));\n+        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));\n+\n+        assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR));\n+        assertEquals(\",,foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR));\n+        assertEquals(\"foo,2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR));\n+\n+        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, \"/\", 0, MIXED_ARRAY_LIST.length-1));\n+        assertEquals(\"\", StringUtils.join(MIXED_ARRAY_LIST, \"\", 0, MIXED_ARRAY_LIST.length-1));\n+        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 1));\n+        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 0, 2));\n+        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 1, 2));\n+        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 2, 1));\n+    }\n+    \n+    public void testJoin_IteratorChar() {\n+        assertEquals(null, StringUtils.join((Iterator<?>) null, ','));\n+        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n+        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), 'x'));\n+    }\n+    \n+    public void testJoin_IteratorString() {\n+        assertEquals(null, StringUtils.join((Iterator<?>) null, null));\n+        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));\n+        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), \"\"));\n+        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), \"x\"));\n+        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), null));\n+\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));\n+        \n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), \"\"));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));\n+        \n+        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));\n+    }\n+\n+    public void testJoin_IterableChar() {\n+        assertEquals(null, StringUtils.join((Iterable<?>) null, ','));\n+        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), SEPARATOR_CHAR));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR_CHAR));\n+        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), 'x'));\n+    }\n+\n+    public void testJoin_IterableString() {\n+        assertEquals(null, StringUtils.join((Iterable<?>) null, null));\n+        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));\n+        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), \"\"));\n+        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), \"x\"));\n+        assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), null));\n+\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null));\n+\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), \"\"));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR));\n+\n+        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));\n+    }\n+\n+    public void testSplit_String() {\n+        assertEquals(null, StringUtils.split(null));\n+        assertEquals(0, StringUtils.split(\"\").length);\n+        \n+        String str = \"a b  .c\";\n+        String[] res = StringUtils.split(str);\n+        assertEquals(3, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\".c\", res[2]);\n+        \n+        str = \" a \";\n+        res = StringUtils.split(str);\n+        assertEquals(1, res.length);\n+        assertEquals(\"a\", res[0]);\n+        \n+        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n+        res = StringUtils.split(str);\n+        assertEquals(2, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[1]);                       \n+    }\n+    \n+    public void testSplit_StringChar() {\n+        assertEquals(null, StringUtils.split(null, '.'));\n+        assertEquals(0, StringUtils.split(\"\", '.').length);\n+\n+        String str = \"a.b.. c\";\n+        String[] res = StringUtils.split(str, '.');\n+        assertEquals(3, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\" c\", res[2]);\n+            \n+        str = \".a.\";\n+        res = StringUtils.split(str, '.');\n+        assertEquals(1, res.length);\n+        assertEquals(\"a\", res[0]);\n+        \n+        str = \"a b c\";\n+        res = StringUtils.split(str,' ');\n+        assertEquals(3, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\"c\", res[2]);\n+    }\n+    \n+    public void testSplit_StringString_StringStringInt() {\n+        assertEquals(null, StringUtils.split(null, \".\"));\n+        assertEquals(null, StringUtils.split(null, \".\", 3));\n+        \n+        assertEquals(0, StringUtils.split(\"\", \".\").length);\n+        assertEquals(0, StringUtils.split(\"\", \".\", 3).length);\n+        \n+        innerTestSplit('.', \".\", ' ');\n+        innerTestSplit('.', \".\", ',');\n+        innerTestSplit('.', \".,\", 'x');\n+        for (int i = 0; i < WHITESPACE.length(); i++) {\n+            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n+                innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n+                innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n+            }\n+        }\n+        \n+        String[] results = null;\n+        String[] expectedResults = {\"ab\", \"de fg\"};\n+        results = StringUtils.split(\"ab   de fg\", null, 2);\n+        assertEquals(expectedResults.length, results.length);\n+        for (int i = 0; i < expectedResults.length; i++) {\n+            assertEquals(expectedResults[i], results[i]);\n+        }\n+        \n+        String[] expectedResults2 = {\"ab\", \"cd:ef\"};\n+        results = StringUtils.split(\"ab:cd:ef\",\":\", 2);\n+        assertEquals(expectedResults2.length, results.length);\n+        for (int i = 0; i < expectedResults2.length; i++) {\n+            assertEquals(expectedResults2[i], results[i]);\n+        }\n+    }\n+    \n+    private void innerTestSplit(char separator, String sepStr, char noMatch) {\n+        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n+            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n+        \n+        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n+        String[] res;\n+        // (str, sepStr)\n+        res = StringUtils.split(str, sepStr);\n+        assertEquals(msg, 3, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, \"b\", res[1]);\n+        assertEquals(msg, noMatch + \"c\", res[2]);\n+        \n+        final String str2 = separator + \"a\" + separator;\n+        res = StringUtils.split(str2, sepStr);\n+        assertEquals(msg, 1, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+\n+        res = StringUtils.split(str, sepStr, -1);\n+        assertEquals(msg, 3, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, \"b\", res[1]);\n+        assertEquals(msg, noMatch + \"c\", res[2]);\n+        \n+        res = StringUtils.split(str, sepStr, 0);\n+        assertEquals(msg, 3, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, \"b\", res[1]);\n+        assertEquals(msg, noMatch + \"c\", res[2]);\n+        \n+        res = StringUtils.split(str, sepStr, 1);\n+        assertEquals(msg, 1, res.length);\n+        assertEquals(msg, str, res[0]);\n+        \n+        res = StringUtils.split(str, sepStr, 2);\n+        assertEquals(msg, 2, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, str.substring(2), res[1]);\n+    }\n+\n+    public void testSplitByWholeString_StringStringBoolean() {\n+        assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\" ) ) ;\n+\n+        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\" ).length ) ;\n+\n+        String stringToSplitOnNulls = \"ab   de fg\" ;\n+        String[] splitOnNullExpectedResults = { \"ab\", \"de\", \"fg\" } ;\n+\n+        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null ) ;\n+        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n+        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n+            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n+        }\n+\n+        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiously\" ;\n+\n+        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n+        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\" ) ;\n+        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n+        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i+= 1 ) {\n+            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n+        }\n+\n+        String[] splitWithMultipleSeparatorExpectedResults = {\"ab\", \"cd\", \"ef\"};\n+        String[] splitWithMultipleSeparator = StringUtils.splitByWholeSeparator(\"ab:cd::ef\", \":\");\n+        assertEquals( splitWithMultipleSeparatorExpectedResults.length, splitWithMultipleSeparator.length );\n+        for( int i = 0; i < splitWithMultipleSeparatorExpectedResults.length ; i++ ) {\n+            assertEquals( splitWithMultipleSeparatorExpectedResults[i], splitWithMultipleSeparator[i] ) ;\n+        }\n+    }\n+\n+    public void testSplitByWholeString_StringStringBooleanInt() {\n+        assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\", 3 ) ) ;\n+\n+        assertEquals( 0, StringUtils.splitByWholeSeparator( \"\", \".\", 3 ).length ) ;\n+\n+        String stringToSplitOnNulls = \"ab   de fg\" ;\n+        String[] splitOnNullExpectedResults = { \"ab\", \"de fg\" } ;\n+        //String[] splitOnNullExpectedResults = { \"ab\", \"de\" } ;\n+\n+        String[] splitOnNullResults = StringUtils.splitByWholeSeparator( stringToSplitOnNulls, null, 2 ) ;\n+        assertEquals( splitOnNullExpectedResults.length, splitOnNullResults.length ) ;\n+        for ( int i = 0 ; i < splitOnNullExpectedResults.length ; i+= 1 ) {\n+            assertEquals( splitOnNullExpectedResults[i], splitOnNullResults[i] ) ;\n+        }\n+\n+        String stringToSplitOnCharactersAndString = \"abstemiouslyaeiouyabstemiouslyaeiouyabstemiously\" ;\n+\n+        String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiouslyaeiouyabstemiously\" } ;\n+        //String[] splitOnStringExpectedResults = { \"abstemiously\", \"abstemiously\" } ;\n+        String[] splitOnStringResults = StringUtils.splitByWholeSeparator( stringToSplitOnCharactersAndString, \"aeiouy\", 2 ) ;\n+        assertEquals( splitOnStringExpectedResults.length, splitOnStringResults.length ) ;\n+        for ( int i = 0 ; i < splitOnStringExpectedResults.length ; i++ ) {\n+            assertEquals( splitOnStringExpectedResults[i], splitOnStringResults[i] ) ;\n+        }\n+    }\n+\n+    public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {\n+        assertEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, \".\", -1 ) ) ;\n+\n+        assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( \"\", \".\", -1 ).length ) ;\n+\n+        // test whitespace\n+        String input = \"ab   de fg\" ;\n+        String[] expected = new String[] { \"ab\", \"\", \"\", \"de\", \"fg\" } ;\n+\n+        String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ;\n+        assertEquals( expected.length, actual.length ) ;\n+        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n+            assertEquals( expected[i], actual[i] );\n+        }\n+\n+        // test delimiter singlechar\n+        input = \"1::2:::3::::4\";\n+        expected = new String[] { \"1\", \"\", \"2\", \"\", \"\", \"3\", \"\", \"\", \"\", \"4\" };\n+\n+        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \":\", -1 ) ;\n+        assertEquals( expected.length, actual.length ) ;\n+        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n+            assertEquals( expected[i], actual[i] );\n+        }\n+\n+        // test delimiter multichar\n+        input = \"1::2:::3::::4\";\n+        expected = new String[] { \"1\", \"2\", \":3\", \"\", \"4\" };\n+\n+        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \"::\", -1 ) ;\n+        assertEquals( expected.length, actual.length ) ;\n+        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n+            assertEquals( expected[i], actual[i] );\n+        }\n+\n+        // test delimiter char with max\n+        input = \"1::2::3:4\";\n+        expected = new String[] { \"1\", \"\", \"2\", \":3:4\" };\n+\n+        actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, \":\", 4 ) ;\n+        assertEquals( expected.length, actual.length ) ;\n+        for ( int i = 0 ; i < actual.length ; i+= 1 ) {\n+            assertEquals( expected[i], actual[i] );\n+        }\n+    }\n+    \n+    public void testSplitPreserveAllTokens_String() {\n+        assertEquals(null, StringUtils.splitPreserveAllTokens(null));\n+        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\").length);\n+        \n+        String str = \"abc def\";\n+        String[] res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(2, res.length);\n+        assertEquals(\"abc\", res[0]);\n+        assertEquals(\"def\", res[1]);\n+        \n+        str = \"abc  def\";\n+        res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(3, res.length);\n+        assertEquals(\"abc\", res[0]);\n+        assertEquals(\"\", res[1]);\n+        assertEquals(\"def\", res[2]);\n+        \n+        str = \" abc \";\n+        res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(3, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"abc\", res[1]);\n+        assertEquals(\"\", res[2]);\n+        \n+        str = \"a b .c\";\n+        res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(3, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\".c\", res[2]);\n+        \n+        str = \" a b .c\";\n+        res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(4, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"a\", res[1]);\n+        assertEquals(\"b\", res[2]);\n+        assertEquals(\".c\", res[3]);\n+        \n+        str = \"a  b  .c\";\n+        res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(5, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"\", res[1]);\n+        assertEquals(\"b\", res[2]);\n+        assertEquals(\"\", res[3]);\n+        assertEquals(\".c\", res[4]);\n+        \n+        str = \" a  \";\n+        res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(4, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"a\", res[1]);\n+        assertEquals(\"\", res[2]);\n+        assertEquals(\"\", res[3]);\n+\n+        str = \" a  b\";\n+        res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(4, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"a\", res[1]);\n+        assertEquals(\"\", res[2]);\n+        assertEquals(\"b\", res[3]);\n+\n+        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n+        res = StringUtils.splitPreserveAllTokens(str);\n+        assertEquals(WHITESPACE.length() + 1, res.length);\n+        assertEquals(\"a\", res[0]);\n+        for(int i = 1; i < WHITESPACE.length()-1; i++)\n+        {\n+          assertEquals(\"\", res[i]);\n+        }\n+        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[WHITESPACE.length()]);                       \n+    }\n+    \n+    public void testSplitPreserveAllTokens_StringChar() {\n+        assertEquals(null, StringUtils.splitPreserveAllTokens(null, '.'));\n+        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", '.').length);\n+\n+        String str = \"a.b. c\";\n+        String[] res = StringUtils.splitPreserveAllTokens(str, '.');\n+        assertEquals(3, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\" c\", res[2]);\n+            \n+        str = \"a.b.. c\";\n+        res = StringUtils.splitPreserveAllTokens(str, '.');\n+        assertEquals(4, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\"\", res[2]);\n+        assertEquals(\" c\", res[3]);\n+\n+        str = \".a.\";\n+        res = StringUtils.splitPreserveAllTokens(str, '.');\n+        assertEquals(3, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"a\", res[1]);\n+        assertEquals(\"\", res[2]);\n+       \n+        str = \".a..\";\n+        res = StringUtils.splitPreserveAllTokens(str, '.');\n+        assertEquals(4, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"a\", res[1]);\n+        assertEquals(\"\", res[2]);\n+        assertEquals(\"\", res[3]);\n+        \n+        str = \"..a.\";\n+        res = StringUtils.splitPreserveAllTokens(str, '.');\n+        assertEquals(4, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"\", res[1]);\n+        assertEquals(\"a\", res[2]);\n+        assertEquals(\"\", res[3]);\n+        \n+        str = \"..a\";\n+        res = StringUtils.splitPreserveAllTokens(str, '.');\n+        assertEquals(3, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"\", res[1]);\n+        assertEquals(\"a\", res[2]);\n+        \n+        str = \"a b c\";\n+        res = StringUtils.splitPreserveAllTokens(str,' ');\n+        assertEquals(3, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\"c\", res[2]);\n+\n+        str = \"a  b  c\";\n+        res = StringUtils.splitPreserveAllTokens(str,' ');\n+        assertEquals(5, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"\", res[1]);\n+        assertEquals(\"b\", res[2]);\n+        assertEquals(\"\", res[3]);\n+        assertEquals(\"c\", res[4]);\n+        \n+        str = \" a b c\";\n+        res = StringUtils.splitPreserveAllTokens(str,' ');\n+        assertEquals(4, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"a\", res[1]);\n+        assertEquals(\"b\", res[2]);\n+        assertEquals(\"c\", res[3]);\n+\n+        str = \"  a b c\";\n+        res = StringUtils.splitPreserveAllTokens(str,' ');\n+        assertEquals(5, res.length);\n+        assertEquals(\"\", res[0]);\n+        assertEquals(\"\", res[1]);\n+        assertEquals(\"a\", res[2]);\n+        assertEquals(\"b\", res[3]);\n+        assertEquals(\"c\", res[4]);\n+\n+        str = \"a b c \";\n+        res = StringUtils.splitPreserveAllTokens(str,' ');\n+        assertEquals(4, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\"c\", res[2]);\n+        assertEquals(\"\", res[3]);\n+\n+        str = \"a b c  \";\n+        res = StringUtils.splitPreserveAllTokens(str,' ');\n+        assertEquals(5, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\"c\", res[2]);\n+        assertEquals(\"\", res[3]);\n+        assertEquals(\"\", res[3]);\n+\n+        // Match example in javadoc\n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"a\", \"\", \"b\", \"c\"};\n+          results = StringUtils.splitPreserveAllTokens(\"a..b.c\",'.');\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+    }\n+    \n+    public void testSplitPreserveAllTokens_StringString_StringStringInt() {\n+        assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\"));\n+        assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\", 3));\n+        \n+        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\").length);\n+        assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", \".\", 3).length);\n+        \n+        innerTestSplitPreserveAllTokens('.', \".\", ' ');\n+        innerTestSplitPreserveAllTokens('.', \".\", ',');\n+        innerTestSplitPreserveAllTokens('.', \".,\", 'x');\n+        for (int i = 0; i < WHITESPACE.length(); i++) {\n+            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n+                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n+                innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n+            }\n+        }\n+\n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"de fg\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 2);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+\n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"  de fg\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+        \n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"::de:fg\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab:::de:fg\", \":\", 2);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+        \n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"\", \" de fg\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+        \n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"\", \"\", \"de fg\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+\n+        {\n+          String[] expectedResults = {\"ab\", \"cd:ef\"};\n+          String[] results = null;\n+          results = StringUtils.splitPreserveAllTokens(\"ab:cd:ef\",\":\", 2);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+\n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \":cd:ef\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab::cd:ef\",\":\", 2);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+\n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"\", \":cd:ef\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 3);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+\n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"ab\", \"\", \"\", \"cd:ef\"};\n+          results = StringUtils.splitPreserveAllTokens(\"ab:::cd:ef\",\":\", 4);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+\n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"\", \"ab\", \"\", \"\", \"cd:ef\"};\n+          results = StringUtils.splitPreserveAllTokens(\":ab:::cd:ef\",\":\", 5);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+        \n+        {\n+          String[] results = null;\n+          String[] expectedResults = {\"\", \"\", \"ab\", \"\", \"\", \"cd:ef\"};\n+          results = StringUtils.splitPreserveAllTokens(\"::ab:::cd:ef\",\":\", 6);\n+          assertEquals(expectedResults.length, results.length);\n+          for (int i = 0; i < expectedResults.length; i++) {\n+              assertEquals(expectedResults[i], results[i]);\n+          }\n+        }\n+        \n+    }\n+    \n+    private void innerTestSplitPreserveAllTokens(char separator, String sepStr, char noMatch) {\n+        String msg = \"Failed on separator hex(\" + Integer.toHexString(separator) +\n+            \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\";\n+        \n+        final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n+        String[] res;\n+        // (str, sepStr)\n+        res = StringUtils.splitPreserveAllTokens(str, sepStr);\n+        assertEquals(msg, 4, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, \"b\", res[1]);\n+        assertEquals(msg, \"\", res[2]);\n+        assertEquals(msg, noMatch + \"c\", res[3]);\n+        \n+        final String str2 = separator + \"a\" + separator;\n+        res = StringUtils.splitPreserveAllTokens(str2, sepStr);\n+        assertEquals(msg, 3, res.length);\n+        assertEquals(msg, \"\", res[0]);\n+        assertEquals(msg, \"a\", res[1]);\n+        assertEquals(msg, \"\", res[2]);\n+\n+        res = StringUtils.splitPreserveAllTokens(str, sepStr, -1);\n+        assertEquals(msg, 4, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, \"b\", res[1]);\n+        assertEquals(msg, \"\", res[2]);\n+        assertEquals(msg, noMatch + \"c\", res[3]);\n+        \n+        res = StringUtils.splitPreserveAllTokens(str, sepStr, 0);\n+        assertEquals(msg, 4, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, \"b\", res[1]);\n+        assertEquals(msg, \"\", res[2]);\n+        assertEquals(msg, noMatch + \"c\", res[3]);\n+        \n+        res = StringUtils.splitPreserveAllTokens(str, sepStr, 1);\n+        assertEquals(msg, 1, res.length);\n+        assertEquals(msg, str, res[0]);\n+        \n+        res = StringUtils.splitPreserveAllTokens(str, sepStr, 2);\n+        assertEquals(msg, 2, res.length);\n+        assertEquals(msg, \"a\", res[0]);\n+        assertEquals(msg, str.substring(2), res[1]);\n+    }\n+\n+    public void testSplitByCharacterType() {\n+        assertNull(StringUtils.splitByCharacterType(null));\n+        assertEquals(0, StringUtils.splitByCharacterType(\"\").length);\n+        \n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n+        \"fg\" }, StringUtils.splitByCharacterType(\"ab de fg\")));\n+        \n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n+        \"fg\" }, StringUtils.splitByCharacterType(\"ab   de fg\")));\n+        \n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n+        \"ef\" }, StringUtils.splitByCharacterType(\"ab:cd:ef\")));\n+        \n+        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n+                StringUtils.splitByCharacterType(\"number5\")));\n+        \n+        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"B\", \"ar\" },\n+                StringUtils.splitByCharacterType(\"fooBar\")));\n+        \n+        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"B\", \"ar\" },\n+                StringUtils.splitByCharacterType(\"foo200Bar\")));\n+        \n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ASFR\", \"ules\" },\n+                StringUtils.splitByCharacterType(\"ASFRules\")));\n+    }\n+    \n+    public void testSplitByCharacterTypeCamelCase() {\n+        assertNull(StringUtils.splitByCharacterTypeCamelCase(null));\n+        assertEquals(0, StringUtils.splitByCharacterTypeCamelCase(\"\").length);\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n+                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab de fg\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n+                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab   de fg\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n+                \"ef\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab:cd:ef\")));\n+        \n+        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n+                StringUtils.splitByCharacterTypeCamelCase(\"number5\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"Bar\" },\n+                StringUtils.splitByCharacterTypeCamelCase(\"fooBar\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"Bar\" },\n+                StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ASF\", \"Rules\" },\n+                StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")));\n+    }\n+\n+    public void testDeleteWhitespace_String() {\n+        assertEquals(null, StringUtils.deleteWhitespace(null));\n+        assertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\n+        assertEquals(\"\", StringUtils.deleteWhitespace(\"  \\u000C  \\t\\t\\u001F\\n\\n \\u000B  \"));\n+        assertEquals(\"\", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));\n+        assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));\n+        // Note: u-2007 and u-000A both cause problems in the source code\n+        // it should ignore 2007 but delete 000A\n+        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"  \\u00A0  \\t\\t\\n\\n \\u202F  \"));\n+        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"\\u00A0\\u202F\"));\n+        assertEquals(\"test\", StringUtils.deleteWhitespace(\"\\u000Bt  \\t\\n\\u0009e\\rs\\n\\n   \\tt\"));\n+    }\n+\n+    public void testReplace_StringStringString() {\n+        assertEquals(null, StringUtils.replace(null, null, null));\n+        assertEquals(null, StringUtils.replace(null, null, \"any\"));\n+        assertEquals(null, StringUtils.replace(null, \"any\", null));\n+        assertEquals(null, StringUtils.replace(null, \"any\", \"any\"));\n+\n+        assertEquals(\"\", StringUtils.replace(\"\", null, null));\n+        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\"));\n+        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null));\n+        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\"));\n+\n+        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"\", \"any\"));\n+        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, \"any\"));\n+        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"F\", null));\n+        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, null));\n+\n+        assertEquals(\"\", StringUtils.replace(\"foofoofoo\", \"foo\", \"\"));\n+        assertEquals(\"barbarbar\", StringUtils.replace(\"foofoofoo\", \"foo\", \"bar\"));\n+        assertEquals(\"farfarfar\", StringUtils.replace(\"foofoofoo\", \"oo\", \"ar\"));\n+       }\n+    \n+    public void testReplace_StringStringStringInt() {\n+        assertEquals(null, StringUtils.replace(null, null, null, 2));\n+        assertEquals(null, StringUtils.replace(null, null, \"any\", 2));\n+        assertEquals(null, StringUtils.replace(null, \"any\", null, 2));\n+        assertEquals(null, StringUtils.replace(null, \"any\", \"any\", 2));\n+\n+        assertEquals(\"\", StringUtils.replace(\"\", null, null, 2));\n+        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\", 2));\n+        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null, 2));\n+        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\", 2));\n+        \n+        String str = new String(new char[] {'o', 'o', 'f', 'o', 'o'});\n+        assertSame(str, StringUtils.replace(str, \"x\", \"\", -1));\n+        \n+        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -1));\n+        assertEquals(\"oofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 0));\n+        assertEquals(\"ofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1));\n+        assertEquals(\"foo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 2));\n+        assertEquals(\"fo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 3));\n+        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 4));\n+        \n+        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -5));\n+        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1000));\n+    }\n+    \n+    public void testReplaceOnce_StringStringString() {\n+        assertEquals(null, StringUtils.replaceOnce(null, null, null));\n+        assertEquals(null, StringUtils.replaceOnce(null, null, \"any\"));\n+        assertEquals(null, StringUtils.replaceOnce(null, \"any\", null));\n+        assertEquals(null, StringUtils.replaceOnce(null, \"any\", \"any\"));\n+\n+        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, null));\n+        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, \"any\"));\n+        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", null));\n+        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", \"any\"));\n+\n+        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"\", \"any\"));\n+        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, \"any\"));\n+        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"F\", null));\n+        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, null));\n+\n+        assertEquals(\"foofoo\", StringUtils.replaceOnce(\"foofoofoo\", \"foo\", \"\"));\n+    }\n+\n+    /**\n+     * Test method for 'StringUtils.replaceEach(String, String[], String[])'\n+     */\n+    public void testReplace_StringStringArrayStringArray() {\n+\n+        \n+        //JAVADOC TESTS START\n+        assertNull(StringUtils.replaceEach(null, new String[]{\"a\"}, new String[]{\"b\"}));\n+        assertEquals(StringUtils.replaceEach(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n+        assertEquals(StringUtils.replaceEach(\"aba\", null, null),\"aba\");\n+        assertEquals(StringUtils.replaceEach(\"aba\", new String[0], null),\"aba\");\n+        assertEquals(StringUtils.replaceEach(\"aba\", null, new String[0]),\"aba\");\n+        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null),\"aba\");\n+\n+        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\n+        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\n+        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\n+        assertEquals(StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"dcte\");\n+        //JAVADOC TESTS END\n+\n+        assertEquals(\"bcc\", StringUtils.replaceEach(\"abc\", new String[]{\"a\", \"b\"}, new String[]{\"b\", \"c\"}));\n+        assertEquals(\"q651.506bera\", StringUtils.replaceEach(\"d216.102oren\",\n+            new String[]{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \n+                \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \n+                \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \n+                \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"},\n+            new String[]{\"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \n+                \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"N\", \"O\", \"P\", \"Q\", \n+                \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \n+                \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\", \"3\", \"4\"}));\n+\n+        // Test null safety inside arrays - LANG-552\n+        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{null}),\"aba\");\n+        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\", \"b\"}, new String[]{\"c\", null}),\"cbc\");\n+    }\n+\n+    /**\n+     * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])'\n+     */\n+    public void testReplace_StringStringArrayStringArrayBoolean() {\n+        //JAVADOC TESTS START\n+        assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{\"a\"}, new String[]{\"b\"}));\n+        assertEquals(StringUtils.replaceEachRepeatedly(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n+        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, null),\"aba\");\n+        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null),\"aba\");\n+        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", null, new String[0]),\"aba\");\n+        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[0], null),\"aba\");\n+\n+        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{\"a\"}, new String[]{\"\"}),\"b\");\n+        assertEquals(StringUtils.replaceEachRepeatedly(\"aba\", new String[]{null}, new String[]{\"a\"}),\"aba\");\n+        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}),\"wcte\");\n+        assertEquals(StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}),\"tcte\");\n+\n+        try {\n+            StringUtils.replaceEachRepeatedly(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"});\n+            fail(\"Should be a circular reference\");\n+        } catch (IllegalStateException e) {}\n+\n+        //JAVADOC TESTS END\n+\n+    }\n+    \n+    public void testReplaceChars_StringCharChar() {\n+        assertEquals(null, StringUtils.replaceChars(null, 'b', 'z'));\n+        assertEquals(\"\", StringUtils.replaceChars(\"\", 'b', 'z'));\n+        assertEquals(\"azcza\", StringUtils.replaceChars(\"abcba\", 'b', 'z'));\n+        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", 'x', 'z'));\n+    }\n+    \n+    public void testReplaceChars_StringStringString() {\n+        assertEquals(null, StringUtils.replaceChars(null, null, null));\n+        assertEquals(null, StringUtils.replaceChars(null, \"\", null));\n+        assertEquals(null, StringUtils.replaceChars(null, \"a\", null));\n+        assertEquals(null, StringUtils.replaceChars(null, null, \"\"));\n+        assertEquals(null, StringUtils.replaceChars(null, null, \"x\"));\n+        \n+        assertEquals(\"\", StringUtils.replaceChars(\"\", null, null));\n+        assertEquals(\"\", StringUtils.replaceChars(\"\", \"\", null));\n+        assertEquals(\"\", StringUtils.replaceChars(\"\", \"a\", null));\n+        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"\"));\n+        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"x\"));\n+\n+        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, null));\n+        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"\"));\n+        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"x\"));\n+        \n+        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", null));\n+        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"\"));\n+        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"x\"));\n+        \n+        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", null));\n+        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", \"\"));\n+        assertEquals(\"axc\", StringUtils.replaceChars(\"abc\", \"b\", \"x\"));\n+        \n+        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n+        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n+        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n+        \n+        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n+        assertSame(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n+        \n+        // Javadoc examples:\n+        assertEquals(\"jelly\", StringUtils.replaceChars(\"hello\", \"ho\", \"jy\"));\n+        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n+        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n+        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n+        \n+        // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454\n+        assertEquals(\"bcc\", StringUtils.replaceChars(\"abc\", \"ab\", \"bc\"));\n+        assertEquals(\"q651.506bera\", StringUtils.replaceChars(\"d216.102oren\",\n+            \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789\",\n+            \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234\"));\n+    }\n+    \n+    public void testOverlay_StringStringIntInt() {\n+        assertEquals(null, StringUtils.overlay(null, null, 2, 4));\n+        assertEquals(null, StringUtils.overlay(null, null, -2, -4));\n+        \n+        assertEquals(\"\", StringUtils.overlay(\"\", null, 0, 0));\n+        assertEquals(\"\", StringUtils.overlay(\"\", \"\", 0, 0));\n+        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 0, 0));\n+        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", 2, 4));\n+        assertEquals(\"zzzz\", StringUtils.overlay(\"\", \"zzzz\", -2, -4));\n+        \n+        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 2, 4));\n+        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", null, 4, 2));\n+        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 2, 4));\n+        assertEquals(\"abef\", StringUtils.overlay(\"abcdef\", \"\", 4, 2));\n+        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4));\n+        assertEquals(\"abzzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2));\n+        \n+        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4));\n+        assertEquals(\"zzzzef\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, -1));\n+        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -1));\n+        assertEquals(\"zzzzabcdef\", StringUtils.overlay(\"abcdef\", \"zzzz\", -1, -2));\n+        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 10));\n+        assertEquals(\"abcdzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 4));\n+        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10));\n+        assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 8));\n+    }\n+\n+    public void testRepeat_StringInt() {\n+        assertEquals(null, StringUtils.repeat(null, 2));\n+        assertEquals(\"\", StringUtils.repeat(\"ab\", 0));\n+        assertEquals(\"\", StringUtils.repeat(\"\", 3));\n+        assertEquals(\"aaa\", StringUtils.repeat(\"a\", 3));\n+        assertEquals(\"ababab\", StringUtils.repeat(\"ab\", 3));\n+        assertEquals(\"abcabcabc\", StringUtils.repeat(\"abc\", 3));\n+        String str = StringUtils.repeat(\"a\", 10000);  // bigger than pad limit\n+        assertEquals(10000, str.length());\n+        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n+    }\n+\n+    public void testRepeat_StringStringInt() {\n+        assertEquals(null, StringUtils.repeat(null, null, 2));\n+        assertEquals(null, StringUtils.repeat(null, \"x\", 2));\n+        assertEquals(\"\", StringUtils.repeat(\"\", null, 2));\n+\n+        assertEquals(\"\", StringUtils.repeat(\"ab\", \"\", 0));\n+        assertEquals(\"\", StringUtils.repeat(\"\", \"\", 2));\n+\n+        assertEquals(\"xx\", StringUtils.repeat(\"\", \"x\", 3));\n+\n+        assertEquals(\"?, ?, ?\", StringUtils.repeat(\"?\", \", \", 3));\n+    }\n+\n+    public void testChop() {\n+\n+        String[][] chopCases = {\n+            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP } ,\n+            { FOO_UNCAP + \"\\n\" , FOO_UNCAP } ,\n+            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n+            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n+            { \"foo\", \"fo\"},\n+            { \"foo\\nfoo\", \"foo\\nfo\" },\n+            { \"\\n\", \"\" },\n+            { \"\\r\", \"\" },\n+            { \"\\r\\n\", \"\" },\n+            { null, null },\n+            { \"\", \"\" },\n+            { \"a\", \"\" },\n+        };\n+        for (int i = 0; i < chopCases.length; i++) {\n+            String original = chopCases[i][0];\n+            String expectedResult = chopCases[i][1];\n+            assertEquals(\"chop(String) failed\",\n+                    expectedResult, StringUtils.chop(original));\n+        }\n+    }\n+\n+    public void testChomp() {\n+\n+        String[][] chompCases = {\n+            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP },\n+            { FOO_UNCAP + \"\\n\" , FOO_UNCAP },\n+            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n+            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n+            { FOO_UNCAP, FOO_UNCAP },\n+            { FOO_UNCAP + \"\\n\\n\", FOO_UNCAP + \"\\n\"},\n+            { FOO_UNCAP + \"\\r\\n\\r\\n\", FOO_UNCAP + \"\\r\\n\" },\n+            { \"foo\\nfoo\", \"foo\\nfoo\" },\n+            { \"foo\\n\\rfoo\", \"foo\\n\\rfoo\" },\n+            { \"\\n\", \"\" },\n+            { \"\\r\", \"\" },\n+            { \"a\", \"a\" },\n+            { \"\\r\\n\", \"\" },\n+            { \"\", \"\" },\n+            { null, null },\n+            { FOO_UNCAP + \"\\n\\r\", FOO_UNCAP + \"\\n\"}\n+        };\n+        for (int i = 0; i < chompCases.length; i++) {\n+            String original = chompCases[i][0];\n+            String expectedResult = chompCases[i][1];\n+            assertEquals(\"chomp(String) failed\",\n+                    expectedResult, StringUtils.chomp(original));\n+        }\n+\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"foo\", StringUtils.chomp(\"foobar\", \"bar\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"foobar\", StringUtils.chomp(\"foobar\", \"baz\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"foo\", StringUtils.chomp(\"foo\", \"foooo\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"foobar\", StringUtils.chomp(\"foobar\", \"\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"foobar\", StringUtils.chomp(\"foobar\", null));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"\", StringUtils.chomp(\"\", \"foo\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"\", StringUtils.chomp(\"\", null));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"\", StringUtils.chomp(\"\", \"\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                null, StringUtils.chomp(null, \"foo\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                null, StringUtils.chomp(null, null));\n+        assertEquals(\"chomp(String, String) failed\",\n+                null, StringUtils.chomp(null, \"\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"\", StringUtils.chomp(\"foo\", \"foo\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \" \", StringUtils.chomp(\" foo\", \"foo\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"foo \", StringUtils.chomp(\"foo \", \"foo\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRightPad_StringInt() {\n+        assertEquals(null, StringUtils.rightPad(null, 5));\n+        assertEquals(\"     \", StringUtils.rightPad(\"\", 5));\n+        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5));\n+        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2));\n+        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1));\n+    }\n+\n+    public void testRightPad_StringIntChar() {\n+        assertEquals(null, StringUtils.rightPad(null, 5, ' '));\n+        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, ' '));\n+        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, ' '));\n+        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, ' '));\n+        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, ' '));\n+        assertEquals(\"abcxx\", StringUtils.rightPad(\"abc\", 5, 'x'));\n+        String str = StringUtils.rightPad(\"aaa\", 10000, 'a');  // bigger than pad length\n+        assertEquals(10000, str.length());\n+        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n+    }\n+\n+    public void testRightPad_StringIntString() {\n+        assertEquals(null, StringUtils.rightPad(null, 5, \"-+\"));\n+        assertEquals(\"     \", StringUtils.rightPad(\"\", 5, \" \"));\n+        assertEquals(null, StringUtils.rightPad(null, 8, null));\n+        assertEquals(\"abc-+-+\", StringUtils.rightPad(\"abc\", 7, \"-+\"));\n+        assertEquals(\"abc-+~\", StringUtils.rightPad(\"abc\", 6, \"-+~\"));\n+        assertEquals(\"abc-+\", StringUtils.rightPad(\"abc\", 5, \"-+~\"));\n+        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, \" \"));\n+        assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, \" \"));\n+        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, null));\n+        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, \"\"));\n+    }\n+        \n+    //-----------------------------------------------------------------------\n+    public void testLeftPad_StringInt() {\n+        assertEquals(null, StringUtils.leftPad(null, 5));\n+        assertEquals(\"     \", StringUtils.leftPad(\"\", 5));\n+        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5));\n+        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2));\n+    }\n+        \n+    public void testLeftPad_StringIntChar() {\n+        assertEquals(null, StringUtils.leftPad(null, 5, ' '));\n+        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, ' '));\n+        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, ' '));\n+        assertEquals(\"xxabc\", StringUtils.leftPad(\"abc\", 5, 'x'));\n+        assertEquals(\"\\uffff\\uffffabc\", StringUtils.leftPad(\"abc\", 5, '\\uffff'));\n+        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, ' '));\n+        String str = StringUtils.leftPad(\"aaa\", 10000, 'a');  // bigger than pad length\n+        assertEquals(10000, str.length());\n+        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n+    }\n+        \n+    public void testLeftPad_StringIntString() {\n+        assertEquals(null, StringUtils.leftPad(null, 5, \"-+\"));\n+        assertEquals(null, StringUtils.leftPad(null, 5, null));\n+        assertEquals(\"     \", StringUtils.leftPad(\"\", 5, \" \"));\n+        assertEquals(\"-+-+abc\", StringUtils.leftPad(\"abc\", 7, \"-+\"));\n+        assertEquals(\"-+~abc\", StringUtils.leftPad(\"abc\", 6, \"-+~\"));\n+        assertEquals(\"-+abc\", StringUtils.leftPad(\"abc\", 5, \"-+~\"));\n+        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, \" \"));\n+        assertEquals(\"abc\", StringUtils.leftPad(\"abc\", -1, \" \"));\n+        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, null));\n+        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, \"\"));\n+    }\n+\n+    public void testLength() {\n+        assertEquals(0, StringUtils.length(null));\n+        assertEquals(0, StringUtils.length(\"\"));\n+        assertEquals(0, StringUtils.length(StringUtils.EMPTY));\n+        assertEquals(1, StringUtils.length(\"A\"));\n+        assertEquals(1, StringUtils.length(\" \"));\n+        assertEquals(8, StringUtils.length(\"ABCDEFGH\"));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testCenter_StringInt() {\n+        assertEquals(null, StringUtils.center(null, -1));\n+        assertEquals(null, StringUtils.center(null, 4));\n+        assertEquals(\"    \", StringUtils.center(\"\", 4));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 0));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", -1));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 1));\n+        assertEquals(\"    \", StringUtils.center(\"\", 4));\n+        assertEquals(\" ab \", StringUtils.center(\"ab\", 4));\n+        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2));\n+        assertEquals(\" a  \", StringUtils.center(\"a\", 4));\n+        assertEquals(\"  a  \", StringUtils.center(\"a\", 5));\n+    }\n+    \n+    public void testCenter_StringIntChar() {\n+        assertEquals(null, StringUtils.center(null, -1, ' '));\n+        assertEquals(null, StringUtils.center(null, 4, ' '));\n+        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, ' '));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, ' '));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, ' '));\n+        assertEquals(\"    \", StringUtils.center(\"\", 4, ' '));\n+        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, ' '));\n+        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, ' '));\n+        assertEquals(\" a  \", StringUtils.center(\"a\", 4, ' '));\n+        assertEquals(\"  a  \", StringUtils.center(\"a\", 5, ' '));\n+        assertEquals(\"xxaxx\", StringUtils.center(\"a\", 5, 'x'));\n+    }\n+    \n+    public void testCenter_StringIntString() {\n+        assertEquals(null, StringUtils.center(null, 4, null));\n+        assertEquals(null, StringUtils.center(null, -1, \" \"));\n+        assertEquals(null, StringUtils.center(null, 4, \" \"));\n+        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, \" \"));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, \" \"));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, \" \"));\n+        assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n+        assertEquals(\" ab \", StringUtils.center(\"ab\", 4, \" \"));\n+        assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \" \"));\n+        assertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\n+        assertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\n+        assertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\n+        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, null));\n+        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, \"\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReverse_String() {\n+        assertEquals(null, StringUtils.reverse(null) );\n+        assertEquals(\"\", StringUtils.reverse(\"\") );\n+        assertEquals(\"sdrawkcab\", StringUtils.reverse(\"backwards\") );\n+    }\n+        \n+    public void testReverseDelimited_StringChar() {\n+        assertEquals(null, StringUtils.reverseDelimited(null, '.') );\n+        assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n+        assertEquals(\"c.b.a\", StringUtils.reverseDelimited(\"a.b.c\", '.') );\n+        assertEquals(\"a b c\", StringUtils.reverseDelimited(\"a b c\", '.') );\n+        assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDefault_String() {\n+        assertEquals(\"\", StringUtils.defaultString(null));\n+        assertEquals(\"\", StringUtils.defaultString(\"\"));\n+        assertEquals(\"abc\", StringUtils.defaultString(\"abc\"));\n+    }\n+\n+    public void testDefault_StringString() {\n+        assertEquals(\"NULL\", StringUtils.defaultString(null, \"NULL\"));\n+        assertEquals(\"\", StringUtils.defaultString(\"\", \"NULL\"));\n+        assertEquals(\"abc\", StringUtils.defaultString(\"abc\", \"NULL\"));\n+    }\n+\n+    public void testDefaultIfEmpty_StringString() {\n+        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(null, \"NULL\"));\n+        assertEquals(\"NULL\", StringUtils.defaultIfEmpty(\"\", \"NULL\"));\n+        assertEquals(\"abc\", StringUtils.defaultIfEmpty(\"abc\", \"NULL\"));\n+        assertNull(StringUtils.defaultIfEmpty(\"\", null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAbbreviate_StringInt() {\n+        assertEquals(null, StringUtils.abbreviate(null, 10));\n+        assertEquals(\"\", StringUtils.abbreviate(\"\", 10));\n+        assertEquals(\"short\", StringUtils.abbreviate(\"short\", 10));\n+        assertEquals(\"Now is ...\", StringUtils.abbreviate(\"Now is the time for all good men to come to the aid of their party.\", 10));\n+\n+        String raspberry = \"raspberry peach\";\n+        assertEquals(\"raspberry p...\", StringUtils.abbreviate(raspberry, 14));\n+        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 15));\n+        assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 16));\n+        assertEquals(\"abc...\", StringUtils.abbreviate(\"abcdefg\", 6));\n+        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 7));\n+        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 8));\n+        assertEquals(\"a...\", StringUtils.abbreviate(\"abcdefg\", 4));\n+        assertEquals(\"\", StringUtils.abbreviate(\"\", 4));\n+        \n+        try {\n+            @SuppressWarnings(\"unused\")\n+            String res = StringUtils.abbreviate(\"abc\", 3);\n+            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+                // empty\n+        }              \n+    }\n+    \n+    public void testAbbreviate_StringIntInt() {\n+        assertEquals(null, StringUtils.abbreviate(null, 10, 12));\n+        assertEquals(\"\", StringUtils.abbreviate(\"\", 0, 10));\n+        assertEquals(\"\", StringUtils.abbreviate(\"\", 2, 10));\n+        \n+        try {\n+            @SuppressWarnings(\"unused\")\n+            String res = StringUtils.abbreviate(\"abcdefghij\", 0, 3);\n+            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+                // empty\n+        }      \n+        try {\n+            @SuppressWarnings(\"unused\")\n+            String res = StringUtils.abbreviate(\"abcdefghij\", 5, 6);\n+            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+                // empty\n+        }      \n+        \n+\n+        String raspberry = \"raspberry peach\";\n+        assertEquals(\"raspberry peach\", StringUtils.abbreviate(raspberry, 11, 15));\n+\n+        assertEquals(null, StringUtils.abbreviate(null, 7, 14));\n+        assertAbbreviateWithOffset(\"abcdefg...\", -1, 10);\n+        assertAbbreviateWithOffset(\"abcdefg...\", 0, 10);\n+        assertAbbreviateWithOffset(\"abcdefg...\", 1, 10);\n+        assertAbbreviateWithOffset(\"abcdefg...\", 2, 10);\n+        assertAbbreviateWithOffset(\"abcdefg...\", 3, 10);\n+        assertAbbreviateWithOffset(\"abcdefg...\", 4, 10);\n+        assertAbbreviateWithOffset(\"...fghi...\", 5, 10);\n+        assertAbbreviateWithOffset(\"...ghij...\", 6, 10);\n+        assertAbbreviateWithOffset(\"...hijk...\", 7, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 8, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 9, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 10, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 11, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 12, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 13, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 14, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 15, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", 16, 10);\n+        assertAbbreviateWithOffset(\"...ijklmno\", Integer.MAX_VALUE, 10);\n+    }\n+\n+    private void assertAbbreviateWithOffset(String expected, int offset, int maxWidth) {\n+        String abcdefghijklmno = \"abcdefghijklmno\";\n+        String message = \"abbreviate(String,int,int) failed\";\n+        String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth);\n+        if (offset >= 0 && offset < abcdefghijklmno.length()) {\n+            assertTrue(message + \" -- should contain offset character\",\n+                    actual.indexOf((char)('a'+offset)) != -1);\n+        }\n+        assertTrue(message + \" -- should not be greater than maxWidth\",\n+                actual.length() <= maxWidth);\n+        assertEquals(message, expected, actual);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDifference_StringString() {\n+        assertEquals(null, StringUtils.difference(null, null));\n+        assertEquals(\"\", StringUtils.difference(\"\", \"\"));\n+        assertEquals(\"abc\", StringUtils.difference(\"\", \"abc\"));\n+        assertEquals(\"\", StringUtils.difference(\"abc\", \"\"));\n+        assertEquals(\"i am a robot\", StringUtils.difference(null, \"i am a robot\"));\n+        assertEquals(\"i am a machine\", StringUtils.difference(\"i am a machine\", null));\n+        assertEquals(\"robot\", StringUtils.difference(\"i am a machine\", \"i am a robot\"));\n+        assertEquals(\"\", StringUtils.difference(\"abc\", \"abc\"));\n+        assertEquals(\"you are a robot\", StringUtils.difference(\"i am a robot\", \"you are a robot\"));\n+    }\n+\n+    public void testDifferenceAt_StringString() {\n+        assertEquals(-1, StringUtils.indexOfDifference(null, null));\n+        assertEquals(0, StringUtils.indexOfDifference(null, \"i am a robot\"));\n+        assertEquals(-1, StringUtils.indexOfDifference(\"\", \"\"));\n+        assertEquals(0, StringUtils.indexOfDifference(\"\", \"abc\"));\n+        assertEquals(0, StringUtils.indexOfDifference(\"abc\", \"\"));\n+        assertEquals(0, StringUtils.indexOfDifference(\"i am a machine\", null));\n+        assertEquals(7, StringUtils.indexOfDifference(\"i am a machine\", \"i am a robot\"));\n+        assertEquals(-1, StringUtils.indexOfDifference(\"foo\", \"foo\"));\n+        assertEquals(0, StringUtils.indexOfDifference(\"i am a robot\", \"you are a robot\"));\n+        //System.out.println(\"indexOfDiff: \" + StringUtils.indexOfDifference(\"i am a robot\", \"not machine\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetLevenshteinDistance_StringString() {\n+        assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\") );\n+        assertEquals(1, StringUtils.getLevenshteinDistance(\"\", \"a\") );\n+        assertEquals(7, StringUtils.getLevenshteinDistance(\"aaapppp\", \"\") );\n+        assertEquals(1, StringUtils.getLevenshteinDistance(\"frog\", \"fog\") );\n+        assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\") );\n+        assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") );\n+        assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") );\n+        assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") );\n+        assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\") );\n+        assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\") );\n+        try {\n+            @SuppressWarnings(\"unused\")\n+            int d = StringUtils.getLevenshteinDistance(\"a\", null);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // empty\n+        }\n+        try {\n+            @SuppressWarnings(\"unused\")\n+            int d = StringUtils.getLevenshteinDistance(null, \"a\");\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // empty\n+        }\n+    }\n+\n+    /**\n+     * A sanity check for {@link StringUtils#EMPTY}.\n+     */\n+    public void testEMPTY() {\n+        assertNotNull(StringUtils.EMPTY);\n+        assertEquals(\"\", StringUtils.EMPTY);\n+        assertEquals(0, StringUtils.EMPTY.length());\n+    }\n+\n+    /**\n+     * Test for {@link StringUtils#isAllLowerCase(String)}.\n+     */\n+    public void testIsAllLowerCase() {\n+        assertFalse(StringUtils.isAllLowerCase(null));\n+        assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY));\n+        assertTrue(StringUtils.isAllLowerCase(\"abc\"));\n+        assertFalse(StringUtils.isAllLowerCase(\"abc \"));\n+        assertFalse(StringUtils.isAllLowerCase(\"abC\"));\n+    }\n+\n+    /**\n+     * Test for {@link StringUtils#isAllUpperCase(String)}.\n+     */\n+    public void testIsAllUpperCase() {\n+        assertFalse(StringUtils.isAllUpperCase(null));\n+        assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY));\n+        assertTrue(StringUtils.isAllUpperCase(\"ABC\"));\n+        assertFalse(StringUtils.isAllUpperCase(\"ABC \"));\n+        assertFalse(StringUtils.isAllUpperCase(\"aBC\"));\n+    }\n+\n+    public void testRemoveStart() {\n+        // StringUtils.removeStart(\"\", *)        = \"\"\n+        assertNull(StringUtils.removeStart(null, null));\n+        assertNull(StringUtils.removeStart(null, \"\"));\n+        assertNull(StringUtils.removeStart(null, \"a\"));\n+        \n+        // StringUtils.removeStart(*, null)      = *\n+        assertEquals(StringUtils.removeStart(\"\", null), \"\");\n+        assertEquals(StringUtils.removeStart(\"\", \"\"), \"\");\n+        assertEquals(StringUtils.removeStart(\"\", \"a\"), \"\");\n+        \n+        // All others:\n+        assertEquals(StringUtils.removeStart(\"www.domain.com\", \"www.\"), \"domain.com\");\n+        assertEquals(StringUtils.removeStart(\"domain.com\", \"www.\"), \"domain.com\");\n+        assertEquals(StringUtils.removeStart(\"domain.com\", \"\"), \"domain.com\");        \n+        assertEquals(StringUtils.removeStart(\"domain.com\", null), \"domain.com\");        \n+    }\n+    \n+    public void testRemoveStartIgnoreCase() {\n+        // StringUtils.removeStart(\"\", *)        = \"\"\n+        assertNull(\"removeStartIgnoreCase(null, null)\", StringUtils.removeStartIgnoreCase(null, null));\n+        assertNull(\"removeStartIgnoreCase(null, \\\"\\\")\", StringUtils.removeStartIgnoreCase(null, \"\"));\n+        assertNull(\"removeStartIgnoreCase(null, \\\"a\\\")\", StringUtils.removeStartIgnoreCase(null, \"a\"));\n+        \n+        // StringUtils.removeStart(*, null)      = *\n+        assertEquals(\"removeStartIgnoreCase(\\\"\\\", null)\", StringUtils.removeStartIgnoreCase(\"\", null), \"\");\n+        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"\"), \"\");\n+        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"a\"), \"\");\n+        \n+        // All others:\n+        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"www.\"), \"domain.com\");\n+        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"www.\"), \"domain.com\");\n+        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"\"), \"domain.com\");        \n+        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeStartIgnoreCase(\"domain.com\", null), \"domain.com\");        \n+        \n+        // Case insensitive:\n+        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"WWW.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\"), \"domain.com\");\n+    }\n+\n+    public void testRemoveEnd() {\n+        // StringUtils.removeEnd(\"\", *)        = \"\"\n+        assertNull(StringUtils.removeEnd(null, null));\n+        assertNull(StringUtils.removeEnd(null, \"\"));\n+        assertNull(StringUtils.removeEnd(null, \"a\"));\n+        \n+        // StringUtils.removeEnd(*, null)      = *\n+        assertEquals(StringUtils.removeEnd(\"\", null), \"\");\n+        assertEquals(StringUtils.removeEnd(\"\", \"\"), \"\");\n+        assertEquals(StringUtils.removeEnd(\"\", \"a\"), \"\");\n+        \n+        // All others:\n+        assertEquals(StringUtils.removeEnd(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n+        assertEquals(StringUtils.removeEnd(\"www.domain.com\", \".com\"), \"www.domain\");\n+        assertEquals(StringUtils.removeEnd(\"www.domain\", \".com\"), \"www.domain\");\n+        assertEquals(StringUtils.removeEnd(\"domain.com\", \"\"), \"domain.com\");   \n+        assertEquals(StringUtils.removeEnd(\"domain.com\", null), \"domain.com\");   \n+    }\n+\n+    public void testRemoveEndIgnoreCase() {\n+        // StringUtils.removeEndIgnoreCase(\"\", *)        = \"\"\n+        assertNull(\"removeEndIgnoreCase(null, null)\", StringUtils.removeEndIgnoreCase(null, null));\n+        assertNull(\"removeEndIgnoreCase(null, \\\"\\\")\", StringUtils.removeEndIgnoreCase(null, \"\"));\n+        assertNull(\"removeEndIgnoreCase(null, \\\"a\\\")\", StringUtils.removeEndIgnoreCase(null, \"a\"));\n+        \n+        // StringUtils.removeEnd(*, null)      = *\n+        assertEquals(\"removeEndIgnoreCase(\\\"\\\", null)\", StringUtils.removeEndIgnoreCase(\"\", null), \"\");\n+        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"\"), \"\");\n+        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"a\"), \"\");\n+        \n+        // All others:\n+        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com.\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n+        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com\"), \"www.domain\");\n+        assertEquals(\"removeEndIgnoreCase(\\\"www.domain\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain\", \".com\"), \"www.domain\");\n+        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"domain.com\", \"\"), \"domain.com\");   \n+        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeEndIgnoreCase(\"domain.com\", null), \"domain.com\");   \n+\n+        // Case insensitive:\n+        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".COM\"), \"www.domain\");\n+    }\n+\n+    public void testRemove_String() {\n+        // StringUtils.remove(null, *)        = null\n+        assertEquals(null, StringUtils.remove(null, null));\n+        assertEquals(null, StringUtils.remove(null, \"\"));\n+        assertEquals(null, StringUtils.remove(null, \"a\"));\n+        \n+        // StringUtils.remove(\"\", *)          = \"\"\n+        assertEquals(\"\", StringUtils.remove(\"\", null));\n+        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.remove(\"\", \"a\"));\n+        \n+        // StringUtils.remove(*, null)        = *\n+        assertEquals(null, StringUtils.remove(null, null));\n+        assertEquals(\"\", StringUtils.remove(\"\", null));\n+        assertEquals(\"a\", StringUtils.remove(\"a\", null));\n+        \n+        // StringUtils.remove(*, \"\")          = *\n+        assertEquals(null, StringUtils.remove(null, \"\"));\n+        assertEquals(\"\", StringUtils.remove(\"\", \"\"));\n+        assertEquals(\"a\", StringUtils.remove(\"a\", \"\"));\n+        \n+        // StringUtils.remove(\"queued\", \"ue\") = \"qd\"\n+        assertEquals(\"qd\", StringUtils.remove(\"queued\", \"ue\"));\n+        \n+        // StringUtils.remove(\"queued\", \"zz\") = \"queued\"\n+        assertEquals(\"queued\", StringUtils.remove(\"queued\", \"zz\"));\n+    }\n+\n+    public void testRemove_char() {\n+        // StringUtils.remove(null, *)       = null\n+        assertEquals(null, StringUtils.remove(null, 'a'));\n+        assertEquals(null, StringUtils.remove(null, 'a'));\n+        assertEquals(null, StringUtils.remove(null, 'a'));\n+        \n+        // StringUtils.remove(\"\", *)          = \"\"\n+        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n+        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n+        assertEquals(\"\", StringUtils.remove(\"\", 'a'));\n+        \n+        // StringUtils.remove(\"queued\", 'u') = \"qeed\"\n+        assertEquals(\"qeed\", StringUtils.remove(\"queued\", 'u'));\n+        \n+        // StringUtils.remove(\"queued\", 'z') = \"queued\"\n+        assertEquals(\"queued\", StringUtils.remove(\"queued\", 'z'));\n+    }\n+\n+    \n+    public void testDifferenceAt_StringArray(){        \n+        assertEquals(-1, StringUtils.indexOfDifference(null));\n+        assertEquals(-1, StringUtils.indexOfDifference(new String[] {}));\n+        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\"}));\n+        assertEquals(-1, StringUtils.indexOfDifference(new String[] {null, null}));\n+        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"\", \"\"}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", null}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", null, null}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {null, null, \"abc\"}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", \"abc\"}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", \"\"}));\n+        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\", \"abc\"}));\n+        assertEquals(1, StringUtils.indexOfDifference(new String[] {\"abc\", \"a\"}));\n+        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"ab\", \"abxyz\"}));\n+        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"abcde\", \"abxyz\"}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abcde\", \"xyz\"}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"xyz\", \"abcde\"}));\n+        assertEquals(7, StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}));\n+    }\n+    \n+    public void testGetCommonPrefix_StringArray(){        \n+        assertEquals(\"\", StringUtils.getCommonPrefix(null));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {}));\n+        assertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\"}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"\"}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", null}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", null, null}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null, \"abc\"}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"abc\"}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"\"}));\n+        assertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"abc\"}));\n+        assertEquals(\"a\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"a\"}));\n+        assertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"ab\", \"abxyz\"}));\n+        assertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"abxyz\"}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"xyz\"}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"xyz\", \"abcde\"}));\n+        assertEquals(\"i am a \", StringUtils.getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}));\n+    }\n+        \n+    public void testStartsWithAny() {\n+        assertFalse(StringUtils.startsWithAny(null, null));\n+        assertFalse(StringUtils.startsWithAny(null, new String[] {\"abc\"}));\n+        assertFalse(StringUtils.startsWithAny(\"abcxyz\", null));\n+        assertFalse(StringUtils.startsWithAny(\"abcxyz\", new String[] {}));\n+        assertTrue(StringUtils.startsWithAny(\"abcxyz\", new String[] {\"abc\"}));\n+        assertTrue(StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abc\"}));\n+        assertFalse(StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abcd\"}));\n+    }\n+ \n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.StringUtils} - Trim/Empty methods\n+ *\n+ * @author Apache Software Foundation\n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @version $Id$\n+ */\n+public class StringUtilsTrimEmptyTest extends TestCase {\n+    private static final String FOO = \"foo\";\n+\n+    public StringUtilsTrimEmptyTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsEmpty() {\n+        assertEquals(true, StringUtils.isEmpty(null));\n+        assertEquals(true, StringUtils.isEmpty(\"\"));\n+        assertEquals(false, StringUtils.isEmpty(\" \"));\n+        assertEquals(false, StringUtils.isEmpty(\"foo\"));\n+        assertEquals(false, StringUtils.isEmpty(\"  foo  \"));\n+    }\n+\n+    public void testIsNotEmpty() {\n+        assertEquals(false, StringUtils.isNotEmpty(null));\n+        assertEquals(false, StringUtils.isNotEmpty(\"\"));\n+        assertEquals(true, StringUtils.isNotEmpty(\" \"));\n+        assertEquals(true, StringUtils.isNotEmpty(\"foo\"));\n+        assertEquals(true, StringUtils.isNotEmpty(\"  foo  \"));\n+    }\n+\n+    public void testIsBlank() {\n+        assertEquals(true, StringUtils.isBlank(null));\n+        assertEquals(true, StringUtils.isBlank(\"\"));\n+        assertEquals(true, StringUtils.isBlank(StringUtilsTest.WHITESPACE));\n+        assertEquals(false, StringUtils.isBlank(\"foo\"));\n+        assertEquals(false, StringUtils.isBlank(\"  foo  \"));\n+    }\n+\n+    public void testIsNotBlank() {\n+        assertEquals(false, StringUtils.isNotBlank(null));\n+        assertEquals(false, StringUtils.isNotBlank(\"\"));\n+        assertEquals(false, StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));\n+        assertEquals(true, StringUtils.isNotBlank(\"foo\"));\n+        assertEquals(true, StringUtils.isNotBlank(\"  foo  \"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTrim() {\n+        assertEquals(FOO, StringUtils.trim(FOO + \"  \"));\n+        assertEquals(FOO, StringUtils.trim(\" \" + FOO + \"  \"));\n+        assertEquals(FOO, StringUtils.trim(\" \" + FOO));\n+        assertEquals(FOO, StringUtils.trim(FOO + \"\"));\n+        assertEquals(\"\", StringUtils.trim(\" \\t\\r\\n\\b \"));\n+        assertEquals(\"\", StringUtils.trim(StringUtilsTest.TRIMMABLE));\n+        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE));\n+        assertEquals(\"\", StringUtils.trim(\"\"));\n+        assertEquals(null, StringUtils.trim(null));\n+    }\n+\n+    public void testTrimToNull() {\n+        assertEquals(FOO, StringUtils.trimToNull(FOO + \"  \"));\n+        assertEquals(FOO, StringUtils.trimToNull(\" \" + FOO + \"  \"));\n+        assertEquals(FOO, StringUtils.trimToNull(\" \" + FOO));\n+        assertEquals(FOO, StringUtils.trimToNull(FOO + \"\"));\n+        assertEquals(null, StringUtils.trimToNull(\" \\t\\r\\n\\b \"));\n+        assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE));\n+        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE));\n+        assertEquals(null, StringUtils.trimToNull(\"\"));\n+        assertEquals(null, StringUtils.trimToNull(null));\n+    }\n+\n+    public void testTrimToEmpty() {\n+        assertEquals(FOO, StringUtils.trimToEmpty(FOO + \"  \"));\n+        assertEquals(FOO, StringUtils.trimToEmpty(\" \" + FOO + \"  \"));\n+        assertEquals(FOO, StringUtils.trimToEmpty(\" \" + FOO));\n+        assertEquals(FOO, StringUtils.trimToEmpty(FOO + \"\"));\n+        assertEquals(\"\", StringUtils.trimToEmpty(\" \\t\\r\\n\\b \"));\n+        assertEquals(\"\", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE));\n+        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE));\n+        assertEquals(\"\", StringUtils.trimToEmpty(\"\"));\n+        assertEquals(\"\", StringUtils.trimToEmpty(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testStrip_String() {\n+        assertEquals(null, StringUtils.strip(null));\n+        assertEquals(\"\", StringUtils.strip(\"\"));\n+        assertEquals(\"\", StringUtils.strip(\"        \"));\n+        assertEquals(\"abc\", StringUtils.strip(\"  abc  \"));\n+        assertEquals(StringUtilsTest.NON_WHITESPACE, \n+            StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\n+    }\n+    \n+    public void testStripToNull_String() {\n+        assertEquals(null, StringUtils.stripToNull(null));\n+        assertEquals(null, StringUtils.stripToNull(\"\"));\n+        assertEquals(null, StringUtils.stripToNull(\"        \"));\n+        assertEquals(null, StringUtils.stripToNull(StringUtilsTest.WHITESPACE));\n+        assertEquals(\"ab c\", StringUtils.stripToNull(\"  ab c  \"));\n+        assertEquals(StringUtilsTest.NON_WHITESPACE, \n+            StringUtils.stripToNull(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\n+    }\n+    \n+    public void testStripToEmpty_String() {\n+        assertEquals(\"\", StringUtils.stripToEmpty(null));\n+        assertEquals(\"\", StringUtils.stripToEmpty(\"\"));\n+        assertEquals(\"\", StringUtils.stripToEmpty(\"        \"));\n+        assertEquals(\"\", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE));\n+        assertEquals(\"ab c\", StringUtils.stripToEmpty(\"  ab c  \"));\n+        assertEquals(StringUtilsTest.NON_WHITESPACE, \n+            StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\n+    }\n+    \n+    public void testStrip_StringString() {\n+        // null strip\n+        assertEquals(null, StringUtils.strip(null, null));\n+        assertEquals(\"\", StringUtils.strip(\"\", null));\n+        assertEquals(\"\", StringUtils.strip(\"        \", null));\n+        assertEquals(\"abc\", StringUtils.strip(\"  abc  \", null));\n+        assertEquals(StringUtilsTest.NON_WHITESPACE, \n+            StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\n+\n+        // \"\" strip\n+        assertEquals(null, StringUtils.strip(null, \"\"));\n+        assertEquals(\"\", StringUtils.strip(\"\", \"\"));\n+        assertEquals(\"        \", StringUtils.strip(\"        \", \"\"));\n+        assertEquals(\"  abc  \", StringUtils.strip(\"  abc  \", \"\"));\n+        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, \"\"));\n+        \n+        // \" \" strip\n+        assertEquals(null, StringUtils.strip(null, \" \"));\n+        assertEquals(\"\", StringUtils.strip(\"\", \" \"));\n+        assertEquals(\"\", StringUtils.strip(\"        \", \" \"));\n+        assertEquals(\"abc\", StringUtils.strip(\"  abc  \", \" \"));\n+        \n+        // \"ab\" strip\n+        assertEquals(null, StringUtils.strip(null, \"ab\"));\n+        assertEquals(\"\", StringUtils.strip(\"\", \"ab\"));\n+        assertEquals(\"        \", StringUtils.strip(\"        \", \"ab\"));\n+        assertEquals(\"  abc  \", StringUtils.strip(\"  abc  \", \"ab\"));\n+        assertEquals(\"c\", StringUtils.strip(\"abcabab\", \"ab\"));\n+        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, \"\"));\n+    }\n+    \n+    public void testStripStart_StringString() {\n+        // null stripStart\n+        assertEquals(null, StringUtils.stripStart(null, null));\n+        assertEquals(\"\", StringUtils.stripStart(\"\", null));\n+        assertEquals(\"\", StringUtils.stripStart(\"        \", null));\n+        assertEquals(\"abc  \", StringUtils.stripStart(\"  abc  \", null));\n+        assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, \n+            StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\n+\n+        // \"\" stripStart\n+        assertEquals(null, StringUtils.stripStart(null, \"\"));\n+        assertEquals(\"\", StringUtils.stripStart(\"\", \"\"));\n+        assertEquals(\"        \", StringUtils.stripStart(\"        \", \"\"));\n+        assertEquals(\"  abc  \", StringUtils.stripStart(\"  abc  \", \"\"));\n+        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, \"\"));\n+        \n+        // \" \" stripStart\n+        assertEquals(null, StringUtils.stripStart(null, \" \"));\n+        assertEquals(\"\", StringUtils.stripStart(\"\", \" \"));\n+        assertEquals(\"\", StringUtils.stripStart(\"        \", \" \"));\n+        assertEquals(\"abc  \", StringUtils.stripStart(\"  abc  \", \" \"));\n+        \n+        // \"ab\" stripStart\n+        assertEquals(null, StringUtils.stripStart(null, \"ab\"));\n+        assertEquals(\"\", StringUtils.stripStart(\"\", \"ab\"));\n+        assertEquals(\"        \", StringUtils.stripStart(\"        \", \"ab\"));\n+        assertEquals(\"  abc  \", StringUtils.stripStart(\"  abc  \", \"ab\"));\n+        assertEquals(\"cabab\", StringUtils.stripStart(\"abcabab\", \"ab\"));\n+        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, \"\"));\n+    }\n+    \n+    public void testStripEnd_StringString() {\n+        // null stripEnd\n+        assertEquals(null, StringUtils.stripEnd(null, null));\n+        assertEquals(\"\", StringUtils.stripEnd(\"\", null));\n+        assertEquals(\"\", StringUtils.stripEnd(\"        \", null));\n+        assertEquals(\"  abc\", StringUtils.stripEnd(\"  abc  \", null));\n+        assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE, \n+            StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\n+\n+        // \"\" stripEnd\n+        assertEquals(null, StringUtils.stripEnd(null, \"\"));\n+        assertEquals(\"\", StringUtils.stripEnd(\"\", \"\"));\n+        assertEquals(\"        \", StringUtils.stripEnd(\"        \", \"\"));\n+        assertEquals(\"  abc  \", StringUtils.stripEnd(\"  abc  \", \"\"));\n+        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, \"\"));\n+        \n+        // \" \" stripEnd\n+        assertEquals(null, StringUtils.stripEnd(null, \" \"));\n+        assertEquals(\"\", StringUtils.stripEnd(\"\", \" \"));\n+        assertEquals(\"\", StringUtils.stripEnd(\"        \", \" \"));\n+        assertEquals(\"  abc\", StringUtils.stripEnd(\"  abc  \", \" \"));\n+        \n+        // \"ab\" stripEnd\n+        assertEquals(null, StringUtils.stripEnd(null, \"ab\"));\n+        assertEquals(\"\", StringUtils.stripEnd(\"\", \"ab\"));\n+        assertEquals(\"        \", StringUtils.stripEnd(\"        \", \"ab\"));\n+        assertEquals(\"  abc  \", StringUtils.stripEnd(\"  abc  \", \"ab\"));\n+        assertEquals(\"abc\", StringUtils.stripEnd(\"abcabab\", \"ab\"));\n+        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, \"\"));\n+    }\n+\n+    public void testStripAll() {\n+        // test stripAll method, merely an array version of the above strip\n+        String[] empty = new String[0];\n+        String[] fooSpace = new String[] { \"  \"+FOO+\"  \", \"  \"+FOO, FOO+\"  \" };\n+        String[] fooDots = new String[] { \"..\"+FOO+\"..\", \"..\"+FOO, FOO+\"..\" };\n+        String[] foo = new String[] { FOO, FOO, FOO };\n+\n+        assertEquals(null, StringUtils.stripAll(null));\n+        assertArrayEquals(empty, StringUtils.stripAll(empty));\n+        assertArrayEquals(foo, StringUtils.stripAll(fooSpace));\n+        \n+        assertEquals(null, StringUtils.stripAll(null, null));\n+        assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null));\n+        assertArrayEquals(foo, StringUtils.stripAll(fooDots, \".\"));\n+    }\n+\n+    public void testStripAccents() {\n+        if(SystemUtils.isJavaVersionAtLeast(1.6f)) {\n+            String cue = \"\\u00C7\\u00FA\\u00EA\";\n+            assertEquals( \"Failed to strip accents from \" + cue, \"Cue\", StringUtils.stripAccents(cue));\n+\n+            String lots = \"\\u00C0\\u00C1\\u00C2\\u00C3\\u00C4\\u00C5\\u00C7\\u00C8\\u00C9\" + \n+                          \"\\u00CA\\u00CB\\u00CC\\u00CD\\u00CE\\u00CF\\u00D1\\u00D2\\u00D3\" + \n+                          \"\\u00D4\\u00D5\\u00D6\\u00D9\\u00DA\\u00DB\\u00DC\\u00DD\";\n+            assertEquals( \"Failed to strip accents from \" + lots, \n+                          \"AAAAAACEEEEIIIINOOOOOUUUUY\", \n+                          StringUtils.stripAccents(lots));\n+\n+            assertNull( \"Failed null safety\", StringUtils.stripAccents(null) );\n+            assertEquals( \"Failed empty String\", \"\", StringUtils.stripAccents(\"\") );\n+            assertEquals( \"Failed to handle non-accented text\", \"control\", StringUtils.stripAccents(\"control\") );\n+            assertEquals( \"Failed to handle easy example\", \"eclair\", StringUtils.stripAccents(\"\\u00E9clair\") );\n+        } else {\n+            try {\n+                StringUtils.stripAccents(\"string\");\n+                fail(\"Before JDK 1.6, stripAccents is not expected to work\");\n+            } catch(UnsupportedOperationException uoe) {\n+                assertEquals(\"The stripAccents(String) method is not supported until Java 1.6\", uoe.getMessage());\n+            }\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    private void assertArrayEquals(Object[] o1, Object[] o2) {\n+        if(o1 == null) {\n+            assertEquals(o1,o2);\n+            return;\n+        }\n+        assertEquals(\"Length not equal. \", o1.length, o2.length);\n+        int sz = o1.length;\n+        for(int i=0; i<sz; i++) {\n+            if(o1[i] instanceof Object[]) {\n+                // do an assert equals on type....\n+                assertArrayEquals( (Object[]) o1[i], (Object[]) o2[i] );\n+            } else {\n+                assertEquals(o1[i], o2[i]);\n+            }\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.commons.lang3;\n+\n+import java.io.File;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.Locale;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.SystemUtils}.\n+ * \n+ * Only limited testing can be performed.\n+ * \n+ * @author Apache Software Foundation\n+ * @author Tetsuya Kaneuchi\n+ * @author Gary D. Gregory\n+ * @version $Id$\n+ */\n+public class SystemUtilsTest extends TestCase {\n+\n+    //-----------------------------------------------------------------------\n+    // COPIED FROM SystemUtils\n+    //-----------------------------------------------------------------------\n+    private String JAVA_VERSION;\n+\n+    private String JAVA_VERSION_TRIMMED;\n+\n+    private String OS_NAME;\n+\n+    private String OS_VERSION;\n+\n+    public SystemUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * <p>Gets the Java version number as a <code>float</code>.</p>\n+     *\n+     * <p>Example return values:</p>\n+     * <ul>\n+     *  <li><code>1.2f</code> for JDK 1.2\n+     *  <li><code>1.31f</code> for JDK 1.3.1\n+     * </ul>\n+     * \n+     * <p>Patch releases are not reported.\n+     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n+     * \n+     * @return the version, for example 1.31f for JDK 1.3.1\n+     */\n+    private float getJavaVersionAsFloat() {\n+        if (JAVA_VERSION_TRIMMED == null) {\n+            return 0f;\n+        }\n+        String str = JAVA_VERSION_TRIMMED.substring(0, 3);\n+        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n+            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n+        }\n+        try {\n+            return Float.parseFloat(str);\n+        } catch (Exception ex) {\n+            return 0;\n+        }\n+    }\n+\n+    /**\n+     * <p>Gets the Java version number as an <code>int</code>.</p>\n+     *\n+     * <p>Example return values:</p>\n+     * <ul>\n+     *  <li><code>120</code> for JDK 1.2\n+     *  <li><code>131</code> for JDK 1.3.1\n+     * </ul>\n+     * \n+     * <p>Patch releases are not reported.\n+     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n+     * \n+     * @return the version, for example 131 for JDK 1.3.1\n+     */\n+    private int getJavaVersionAsInt() {\n+        if (JAVA_VERSION == null) {\n+            return 0;\n+        }\n+        String str = JAVA_VERSION_TRIMMED.substring(0, 1);\n+        str = str + JAVA_VERSION_TRIMMED.substring(2, 3);\n+        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n+            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n+        } else {\n+            str = str + \"0\";\n+        }\n+        try {\n+            return Integer.parseInt(str);\n+        } catch (Exception ex) {\n+            return 0;\n+        }\n+    }\n+\n+    /**\n+     * Trims the text of the java version to start with numbers.\n+     * \n+     * @return the trimmed java version\n+     */\n+    private String getJavaVersionTrimmed() {\n+        if (JAVA_VERSION != null) {\n+            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n+                char ch = JAVA_VERSION.charAt(i);\n+                if (ch >= '0' && ch <= '9') {\n+                    return JAVA_VERSION.substring(i);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Decides if the java version matches.\n+     * \n+     * @param versionPrefix\n+     *                  the prefix for the java version\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private boolean getJavaVersionMatches(String versionPrefix) {\n+        if (JAVA_VERSION_TRIMMED == null) {\n+            return false;\n+        }\n+        return JAVA_VERSION_TRIMMED.startsWith(versionPrefix);\n+    }\n+\n+    /**\n+     * Decides if the operating system matches.\n+     * \n+     * @param osNamePrefix\n+     *                  the prefix for the os name\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private boolean getOSMatches(String osNamePrefix) {\n+        if (OS_NAME == null) {\n+            return false;\n+        }\n+        return OS_NAME.startsWith(osNamePrefix);\n+    }\n+\n+    /**\n+     * Decides if the operating system matches.\n+     * \n+     * @param osNamePrefix\n+     *                  the prefix for the os name\n+     * @param osVersionPrefix\n+     *                  the prefix for the version\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n+        if (OS_NAME == null || OS_VERSION == null) {\n+            return false;\n+        }\n+        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new SystemUtils());\n+        Constructor<?>[] cons = SystemUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(SystemUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(SystemUtils.class.getModifiers()));\n+    }\n+\n+    /**\n+     * Assums no security manager exists.\n+     */\n+    public void testGetJavaHome() {\n+        File dir = SystemUtils.getJavaHome();\n+        Assert.assertNotNull(dir);\n+        Assert.assertTrue(dir.exists());\n+    }\n+\n+    /**\n+     * Assums no security manager exists.\n+     */\n+    public void testGetJavaIoTmpDir() {\n+        File dir = SystemUtils.getJavaIoTmpDir();\n+        Assert.assertNotNull(dir);\n+        Assert.assertTrue(dir.exists());\n+    }\n+\n+    /**\n+     * Assums no security manager exists.\n+     */\n+    public void testGetUserDir() {\n+        File dir = SystemUtils.getUserDir();\n+        Assert.assertNotNull(dir);\n+        Assert.assertTrue(dir.exists());\n+    }\n+\n+    /**\n+     * Assums no security manager exists.\n+     */\n+    public void testGetUserHome() {\n+        File dir = SystemUtils.getUserHome();\n+        Assert.assertNotNull(dir);\n+        Assert.assertTrue(dir.exists());\n+    }\n+\n+    public void testIS_JAVA() {\n+        String javaVersion = System.getProperty(\"java.version\");\n+        if (javaVersion == null) {\n+            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n+        } else if (javaVersion.startsWith(\"1.1\")) {\n+            assertEquals(true, SystemUtils.IS_JAVA_1_1);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n+        } else if (javaVersion.startsWith(\"1.2\")) {\n+            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n+            assertEquals(true, SystemUtils.IS_JAVA_1_2);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n+        } else if (javaVersion.startsWith(\"1.3\")) {\n+            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n+            assertEquals(true, SystemUtils.IS_JAVA_1_3);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n+        } else if (javaVersion.startsWith(\"1.4\")) {\n+            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n+            assertEquals(true, SystemUtils.IS_JAVA_1_4);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n+        } else if (javaVersion.startsWith(\"1.5\")) {\n+            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n+            assertEquals(true, SystemUtils.IS_JAVA_1_5);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n+        } else if (javaVersion.startsWith(\"1.6\")) {\n+            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n+            assertEquals(true, SystemUtils.IS_JAVA_1_6);\n+        } else {\n+            System.out.println(\"Can't test IS_JAVA value\");\n+        }\n+    }\n+\n+    public void testIS_OS() {\n+        String osName = System.getProperty(\"os.name\");\n+        if (osName == null) {\n+            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+            assertEquals(false, SystemUtils.IS_OS_UNIX);\n+            assertEquals(false, SystemUtils.IS_OS_SOLARIS);\n+            assertEquals(false, SystemUtils.IS_OS_LINUX);\n+            assertEquals(false, SystemUtils.IS_OS_MAC_OSX);\n+        } else if (osName.startsWith(\"Windows\")) {\n+            assertEquals(false, SystemUtils.IS_OS_UNIX);\n+            assertEquals(true, SystemUtils.IS_OS_WINDOWS);\n+        } else if (osName.startsWith(\"Solaris\")) {\n+            assertEquals(true, SystemUtils.IS_OS_SOLARIS);\n+            assertEquals(true, SystemUtils.IS_OS_UNIX);\n+            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+        } else if (osName.toLowerCase(Locale.ENGLISH).startsWith(\"linux\")) {\n+            assertEquals(true, SystemUtils.IS_OS_LINUX);\n+            assertEquals(true, SystemUtils.IS_OS_UNIX);\n+            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+        } else if (osName.startsWith(\"Mac OS X\")) {\n+            assertEquals(true, SystemUtils.IS_OS_MAC_OSX);\n+            assertEquals(true, SystemUtils.IS_OS_UNIX);\n+            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+        } else if (osName.startsWith(\"OS/2\")) {\n+            assertEquals(true, SystemUtils.IS_OS_OS2);\n+            assertEquals(false, SystemUtils.IS_OS_UNIX);\n+            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+        } else if (osName.startsWith(\"SunOS\")) {\n+            assertEquals(true, SystemUtils.IS_OS_SUN_OS);\n+            assertEquals(true, SystemUtils.IS_OS_UNIX);\n+            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+        } else {\n+            System.out.println(\"Can't test IS_OS value\");\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testJavaVersionAsFloat() {\n+        JAVA_VERSION = null;\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(0f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(1.1f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.2\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(1.2f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.3.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(1.3f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.3.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.4.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(1.4f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.4.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(1.41f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.5.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(1.5f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.6.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(1.6f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"JavaVM-1.3.1\";  //HP-UX\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"XXX-1.3.x\";  //error\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(0.0f, getJavaVersionAsFloat(), 0.000001f);\n+    }\n+\n+    public void testJavaVersionAsInt() {\n+        JAVA_VERSION = null;\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(0, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(110, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.2\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(120, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.3.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(130, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.3.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(131, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.4.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(140, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.4.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(141, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.5.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(150, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.6.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(160, getJavaVersionAsInt());\n+        JAVA_VERSION = \"JavaVM-1.3.1\";  //HP-UX\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(131, getJavaVersionAsInt());\n+        JAVA_VERSION = \"XXX-1.3.x\";  //error\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(0, getJavaVersionAsInt());\n+    }\n+\n+    public void testJavaVersionAtLeastFloat() {\n+        float version = SystemUtils.JAVA_VERSION_FLOAT;\n+        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n+        version -= 0.1f;\n+        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n+        version += 0.2f;\n+        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n+    }\n+\n+    public void testJavaVersionAtLeastInt() {\n+        int version = SystemUtils.JAVA_VERSION_INT;\n+        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n+        version -= 10;\n+        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n+        version += 20;\n+        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testJavaVersionMatches() {\n+        JAVA_VERSION = null;\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(true, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.2\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.3.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.3.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.4.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.4.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.5.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.6.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+    }\n+\n+    public void testOSMatches() {\n+        OS_NAME = null;\n+        assertEquals(false, getOSMatches(\"Windows\"));\n+        OS_NAME = \"Windows 95\";\n+        assertEquals(true, getOSMatches(\"Windows\"));\n+        OS_NAME = \"Windows NT\";\n+        assertEquals(true, getOSMatches(\"Windows\"));\n+        OS_NAME = \"OS/2\";\n+        assertEquals(false, getOSMatches(\"Windows\"));\n+    }\n+\n+    public void testOSMatches2() {\n+        OS_NAME = null;\n+        OS_VERSION = null;\n+        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n+        OS_NAME = \"Windows 95\";\n+        OS_VERSION = \"4.0\";\n+        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n+        OS_NAME = \"Windows 95\";\n+        OS_VERSION = \"4.1\";\n+        assertEquals(true, getOSMatches(\"Windows 9\", \"4.1\"));\n+        OS_NAME = \"Windows 98\";\n+        OS_VERSION = \"4.1\";\n+        assertEquals(true, getOSMatches(\"Windows 9\", \"4.1\"));\n+        OS_NAME = \"Windows NT\";\n+        OS_VERSION = \"4.0\";\n+        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n+        OS_NAME = \"OS/2\";\n+        OS_VERSION = \"4.0\";\n+        assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n+    }\n+\n+    public void testJavaAwtHeadless() {\n+        boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(140);\n+        String expectedStringValue = System.getProperty(\"java.awt.headless\");\n+        String expectedStringValueWithDefault = System.getProperty(\"java.awt.headless\", \"false\");\n+        assertNotNull(expectedStringValueWithDefault);\n+        if (atLeastJava14) {\n+            boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue();\n+            if (expectedStringValue != null) {\n+                assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS);\n+            }\n+            assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless());\n+        } else {\n+            assertNull(expectedStringValue);\n+            assertNull(SystemUtils.JAVA_AWT_HEADLESS);\n+            assertEquals(expectedStringValueWithDefault, \"\" + SystemUtils.isJavaAwtHeadless());\n+        }\n+        assertEquals(expectedStringValueWithDefault, \"\" + SystemUtils.isJavaAwtHeadless());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/ValidateTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.Validate}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author Norm Deane\n+ * @version $Id$\n+ */\n+public class ValidateTest extends TestCase {\n+\n+    public ValidateTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue1() {\n+        Validate.isTrue(true);\n+        try {\n+            Validate.isTrue(false);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated expression is false\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue2() {\n+        Validate.isTrue(true, \"MSG\");\n+        try {\n+            Validate.isTrue(false, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue3() {\n+        Validate.isTrue(true, \"MSG\", new Integer(6));\n+        try {\n+            Validate.isTrue(false, \"MSG\", new Integer(6));\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue4() {\n+        Validate.isTrue(true, \"MSG\", 7);\n+        try {\n+            Validate.isTrue(false, \"MSG\", 7);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue5() {\n+        Validate.isTrue(true, \"MSG\", 7.4d);\n+        try {\n+            Validate.isTrue(false, \"MSG\", 7.4d);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testNotNull1() {\n+        Validate.notNull(new Object());\n+        try {\n+            Validate.notNull(null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+        \n+        String str = \"Hi\";\n+        String testStr = Validate.notNull(str);\n+        assertSame(str, testStr);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotNull2() {\n+        Validate.notNull(new Object(), \"MSG\");\n+        try {\n+            Validate.notNull(null, \"MSG\");\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        \n+        String str = \"Hi\";\n+        String testStr = Validate.notNull(str, \"Message\");\n+        assertSame(str, testStr);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyArray1() {\n+        Validate.notEmpty(new Object[] {null});\n+        try {\n+            Validate.notEmpty((Object[]) null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"The validated array is empty\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(new Object[0]);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated array is empty\", ex.getMessage());\n+        }\n+        \n+        String[] array = new String[] {\"hi\"};\n+        String[] test = Validate.notEmpty(array);\n+        assertSame(array, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyArray2() {\n+        Validate.notEmpty(new Object[] {null}, \"MSG\");\n+        try {\n+            Validate.notEmpty((Object[]) null, \"MSG\");\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(new Object[0], \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        \n+        String[] array = new String[] {\"hi\"};\n+        String[] test = Validate.notEmpty(array, \"Message\");\n+        assertSame(array, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyCollection1() {\n+        Collection<Integer> coll = new ArrayList<Integer>();\n+        try {\n+            Validate.notEmpty((Collection<?>) null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"The validated collection is empty\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(coll);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated collection is empty\", ex.getMessage());\n+        }\n+        coll.add(new Integer(8));\n+        Validate.notEmpty(coll);\n+        \n+        Collection<Integer> test = Validate.notEmpty(coll);\n+        assertSame(coll, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyCollection2() {\n+        Collection<Integer> coll = new ArrayList<Integer>();\n+        try {\n+            Validate.notEmpty((Collection<?>) null, \"MSG\");\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(coll, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        coll.add(new Integer(8));\n+        Validate.notEmpty(coll, \"MSG\");\n+        \n+        Collection<Integer> test = Validate.notEmpty(coll, \"Message\");\n+        assertSame(coll, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyMap1() {\n+        Map<String, Integer> map = new HashMap<String, Integer>();\n+        try {\n+            Validate.notEmpty((Map<?, ?>) null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"The validated map is empty\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(map);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated map is empty\", ex.getMessage());\n+        }\n+        map.put(\"ll\", new Integer(8));\n+        Validate.notEmpty(map);\n+        \n+        Map<String, Integer> test = Validate.notEmpty(map);\n+        assertSame(map, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyMap2() {\n+        Map<String, Integer> map = new HashMap<String, Integer>();\n+        try {\n+            Validate.notEmpty((Map<?, ?>) null, \"MSG\");\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(map, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        map.put(\"ll\", new Integer(8));\n+        Validate.notEmpty(map, \"MSG\");\n+        \n+        Map<String, Integer> test = Validate.notEmpty(map, \"Message\");\n+        assertSame(map, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyString1() {\n+        Validate.notEmpty(\"hjl\");\n+        try {\n+            Validate.notEmpty((String) null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"The validated character sequence is empty\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(\"\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated character sequence is empty\", ex.getMessage());\n+        }\n+        \n+        String str = \"Hi\";\n+        String testStr = Validate.notEmpty(str);\n+        assertSame(str, testStr);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyString2() {\n+        Validate.notEmpty(\"a\", \"MSG\");\n+        try {\n+            Validate.notEmpty((String) null, \"MSG\");\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(\"\", \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        \n+        String str = \"Hi\";\n+        String testStr = Validate.notEmpty(str, \"Message\");\n+        assertSame(str, testStr);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankNullStringShouldThrow() {\n+        //given\n+        String string = null;\n+\n+        try {\n+            //when\n+            Validate.notBlank(string);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException e) {\n+            //then\n+            assertEquals(\"The validated character sequence is blank\", e.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankMsgNullStringShouldThrow() {\n+        //given\n+        String string = null;\n+\n+        try {\n+            //when\n+            Validate.notBlank(string, \"Message\");\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException e) {\n+            //then\n+            assertEquals(\"Message\", e.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankEmptyStringShouldThrow() {\n+        //given\n+        String string = \"\";\n+\n+        try {\n+            //when\n+            Validate.notBlank(string);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            //then\n+            assertEquals(\"The validated character sequence is blank\", e.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankBlankStringWithWhitespacesShouldThrow() {\n+        //given\n+        String string = \"   \";\n+\n+        try {\n+            //when\n+            Validate.notBlank(string);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            //then\n+            assertEquals(\"The validated character sequence is blank\", e.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankBlankStringWithNewlinesShouldThrow() {\n+        //given\n+        String string = \" \\n \\t \\r \\n \";\n+\n+        try {\n+            //when\n+            Validate.notBlank(string);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            //then\n+            assertEquals(\"The validated character sequence is blank\", e.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankMsgBlankStringShouldThrow() {\n+        //given\n+        String string = \" \\n \\t \\r \\n \";\n+\n+        try {\n+            //when\n+            Validate.notBlank(string, \"Message\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            //then\n+            assertEquals(\"Message\", e.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankMsgBlankStringWithWhitespacesShouldThrow() {\n+        //given\n+        String string = \"   \";\n+\n+        try {\n+            //when\n+            Validate.notBlank(string, \"Message\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            //then\n+            assertEquals(\"Message\", e.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankMsgEmptyStringShouldThrow() {\n+        //given\n+        String string = \"\";\n+\n+        try {\n+            //when\n+            Validate.notBlank(string, \"Message\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            //then\n+            assertEquals(\"Message\", e.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankNotBlankStringShouldNotThrow() {\n+        //given\n+        String string = \"abc\";\n+\n+        //when\n+        Validate.notBlank(string);\n+\n+        //then should not throw\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankNotBlankStringWithWhitespacesShouldNotThrow() {\n+        //given\n+        String string = \"  abc   \";\n+\n+        //when\n+        Validate.notBlank(string);\n+\n+        //then should not throw\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankNotBlankStringWithNewlinesShouldNotThrow() {\n+        //given\n+        String string = \" \\n \\t abc \\r \\n \";\n+\n+        //when\n+        Validate.notBlank(string);\n+\n+        //then should not throw\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankMsgNotBlankStringShouldNotThrow() {\n+        //given\n+        String string = \"abc\";\n+\n+        //when\n+        Validate.notBlank(string, \"Message\");\n+\n+        //then should not throw\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow() {\n+        //given\n+        String string = \"  abc   \";\n+\n+        //when\n+        Validate.notBlank(string, \"Message\");\n+\n+        //then should not throw\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankMsgNotBlankStringWithNewlinesShouldNotThrow() {\n+        //given\n+        String string = \" \\n \\t abc \\r \\n \";\n+\n+        //when\n+        Validate.notBlank(string, \"Message\");\n+\n+        //then should not throw\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankReturnValues1() {\n+        String str = \"Hi\";\n+        String test = Validate.notBlank(str);\n+        assertSame(str, test);\n+    }\n+\n+    public void testNotBlankReturnValues2() {\n+        String str = \"Hi\";\n+        String test = Validate.notBlank(str, \"Message\");\n+        assertSame(str, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testNoNullElementsArray1() {\n+        String[] array = new String[] {\"a\", \"b\"};\n+        Validate.noNullElements(array);\n+        try {\n+            Validate.noNullElements((Object[]) null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+        array[1] = null;\n+        try {\n+            Validate.noNullElements(array);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated array contains null element at index: 1\", ex.getMessage());\n+        }\n+        \n+        array = new String[] {\"a\", \"b\"};\n+        String[] test = Validate.noNullElements(array);\n+        assertSame(array, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNoNullElementsArray2() {\n+        String[] array = new String[] {\"a\", \"b\"};\n+        Validate.noNullElements(array, \"MSG\");\n+        try {\n+            Validate.noNullElements((Object[]) null, \"MSG\");\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+        array[1] = null;\n+        try {\n+            Validate.noNullElements(array, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        \n+        array = new String[] {\"a\", \"b\"};\n+        String[] test = Validate.noNullElements(array, \"Message\");\n+        assertSame(array, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testNoNullElementsCollection1() {\n+        List<String> coll = new ArrayList<String>();\n+        coll.add(\"a\");\n+        coll.add(\"b\");\n+        Validate.noNullElements(coll);\n+        try {\n+            Validate.noNullElements((Collection<?>) null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+        coll.set(1, null);\n+        try {\n+            Validate.noNullElements(coll);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated collection contains null element at index: 1\", ex.getMessage());\n+        }\n+        \n+        coll.set(1, \"b\");\n+        List<String> test = Validate.noNullElements(coll);\n+        assertSame(coll, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNoNullElementsCollection2() {\n+        List<String> coll = new ArrayList<String>();\n+        coll.add(\"a\");\n+        coll.add(\"b\");\n+        Validate.noNullElements(coll, \"MSG\");\n+        try {\n+            Validate.noNullElements((Collection<?>) null, \"MSG\");\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+        coll.set(1, null);\n+        try {\n+            Validate.noNullElements(coll, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        \n+        coll.set(1, \"b\");\n+        List<String> test = Validate.noNullElements(coll, \"Message\");\n+        assertSame(coll, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new Validate());\n+        Constructor<?>[] cons = Validate.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(Validate.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(Validate.class.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testValidIndex_withMessage_array() {\n+        Object[] array = new Object[2];\n+        Validate.validIndex(array, 0, \"Broken: \");\n+        Validate.validIndex(array, 1, \"Broken: \");\n+        try {\n+            Validate.validIndex(array, -1, \"Broken: \");\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"Broken: \", ex.getMessage());\n+        }\n+        try {\n+            Validate.validIndex(array, 2, \"Broken: \");\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"Broken: \", ex.getMessage());\n+        }\n+        \n+        String[] strArray = new String[] {\"Hi\"};\n+        String[] test = Validate.noNullElements(strArray, \"Message\");\n+        assertSame(strArray, test);\n+    }\n+\n+    public void testValidIndex_array() {\n+        Object[] array = new Object[2];\n+        Validate.validIndex(array, 0);\n+        Validate.validIndex(array, 1);\n+        try {\n+            Validate.validIndex(array, -1);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"The validated array index is invalid: -1\", ex.getMessage());\n+        }\n+        try {\n+            Validate.validIndex(array, 2);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"The validated array index is invalid: 2\", ex.getMessage());\n+        }\n+        \n+        String[] strArray = new String[] {\"Hi\"};\n+        String[] test = Validate.noNullElements(strArray);\n+        assertSame(strArray, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testValidIndex_withMessage_collection() {\n+        Collection<String> coll = new ArrayList<String>();\n+        coll.add(null);\n+        coll.add(null);\n+        Validate.validIndex(coll, 0, \"Broken: \");\n+        Validate.validIndex(coll, 1, \"Broken: \");\n+        try {\n+            Validate.validIndex(coll, -1, \"Broken: \");\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"Broken: \", ex.getMessage());\n+        }\n+        try {\n+            Validate.validIndex(coll, 2, \"Broken: \");\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"Broken: \", ex.getMessage());\n+        }\n+        \n+        List<String> strColl = Arrays.asList(new String[] {\"Hi\"});\n+        List<String> test = Validate.validIndex(strColl, 0, \"Message\");\n+        assertSame(strColl, test);\n+    }\n+\n+    public void testValidIndex_collection() {\n+        Collection<String> coll = new ArrayList<String>();\n+        coll.add(null);\n+        coll.add(null);\n+        Validate.validIndex(coll, 0);\n+        Validate.validIndex(coll, 1);\n+        try {\n+            Validate.validIndex(coll, -1);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"The validated collection index is invalid: -1\", ex.getMessage());\n+        }\n+        try {\n+            Validate.validIndex(coll, 2);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"The validated collection index is invalid: 2\", ex.getMessage());\n+        }\n+        \n+        List<String> strColl = Arrays.asList(new String[] {\"Hi\"});\n+        List<String> test = Validate.validIndex(strColl, 0);\n+        assertSame(strColl, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testValidIndex_withMessage_charSequence() {\n+        CharSequence str = \"Hi\";\n+        Validate.validIndex(str, 0, \"Broken: \");\n+        Validate.validIndex(str, 1, \"Broken: \");\n+        try {\n+            Validate.validIndex(str, -1, \"Broken: \");\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"Broken: \", ex.getMessage());\n+        }\n+        try {\n+            Validate.validIndex(str, 2, \"Broken: \");\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"Broken: \", ex.getMessage());\n+        }\n+        \n+        String input = \"Hi\";\n+        String test = Validate.validIndex(input, 0, \"Message\");\n+        assertSame(input, test);\n+    }\n+\n+    public void testValidIndex_charSequence() {\n+        CharSequence str = \"Hi\";\n+        Validate.validIndex(str, 0);\n+        Validate.validIndex(str, 1);\n+        try {\n+            Validate.validIndex(str, -1);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"The validated character sequence index is invalid: -1\", ex.getMessage());\n+        }\n+        try {\n+            Validate.validIndex(str, 2);\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"The validated character sequence index is invalid: 2\", ex.getMessage());\n+        }\n+        \n+        String input = \"Hi\";\n+        String test = Validate.validIndex(input, 0);\n+        assertSame(input, test);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/WordUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for WordUtils class.\n+ * \n+ * @author Apache Software Foundation\n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @version $Id$\n+ */\n+public class WordUtilsTest extends TestCase {\n+\n+    public WordUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new WordUtils());\n+        Constructor<?>[] cons = WordUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(WordUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(WordUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWrap_StringInt() {\n+        assertEquals(null, WordUtils.wrap(null, 20));\n+        assertEquals(null, WordUtils.wrap(null, -1));\n+        \n+        assertEquals(\"\", WordUtils.wrap(\"\", 20));\n+        assertEquals(\"\", WordUtils.wrap(\"\", -1));\n+        \n+        // normal\n+        String systemNewLine = System.getProperty(\"line.separator\");\n+        String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n+        String expected = \"Here is one line of\" + systemNewLine + \"text that is going\" \n+            + systemNewLine + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20));\n+        \n+        // long word at end\n+        input = \"Click here to jump to the jakarta website - http://jakarta.apache.org\";\n+        expected = \"Click here to jump\" + systemNewLine + \"to the jakarta\" + systemNewLine \n+            + \"website -\" + systemNewLine + \"http://jakarta.apache.org\";\n+        assertEquals(expected, WordUtils.wrap(input, 20));\n+        \n+        // long word in middle\n+        input = \"Click here, http://jakarta.apache.org, to jump to the jakarta website\";\n+        expected = \"Click here,\" + systemNewLine + \"http://jakarta.apache.org,\" + systemNewLine \n+            + \"to jump to the\" + systemNewLine + \"jakarta website\";\n+        assertEquals(expected, WordUtils.wrap(input, 20));\n+    }\n+    \n+    public void testWrap_StringIntStringBoolean() {\n+        assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", false));\n+        assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", true));\n+        assertEquals(null, WordUtils.wrap(null, 20, null, true));\n+        assertEquals(null, WordUtils.wrap(null, 20, null, false));\n+        assertEquals(null, WordUtils.wrap(null, -1, null, true));\n+        assertEquals(null, WordUtils.wrap(null, -1, null, false));\n+        \n+        assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", false));\n+        assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", true));\n+        assertEquals(\"\", WordUtils.wrap(\"\", 20, null, false));\n+        assertEquals(\"\", WordUtils.wrap(\"\", 20, null, true));\n+        assertEquals(\"\", WordUtils.wrap(\"\", -1, null, false));\n+        assertEquals(\"\", WordUtils.wrap(\"\", -1, null, true));\n+        \n+        // normal\n+        String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n+        String expected = \"Here is one line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+\n+        // unusual newline char\n+        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n+        expected = \"Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", true));\n+\n+        // short line length\n+        input = \"Here is one line\";\n+        expected = \"Here\\nis one\\nline\";\n+        assertEquals(expected, WordUtils.wrap(input, 6, \"\\n\", false));\n+        expected = \"Here\\nis\\none\\nline\";\n+        assertEquals(expected, WordUtils.wrap(input, 2, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, -1, \"\\n\", false));\n+\n+        // system newline char\n+        String systemNewLine = System.getProperty(\"line.separator\");\n+        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n+        expected = \"Here is one line of\" + systemNewLine + \"text that is going\" + systemNewLine \n+            + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, null, false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, null, true));\n+\n+        // with extra spaces\n+        input = \" Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns.\";\n+        expected = \"Here:  is  one  line\\nof  text  that  is \\ngoing  to  be \\nwrapped  after  20 \\ncolumns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+        \n+        // with tab\n+        input = \"Here is\\tone line of text that is going to be wrapped after 20 columns.\";\n+        expected = \"Here is\\tone line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+        \n+        // with tab at wrapColumn\n+        input = \"Here is one line of\\ttext that is going to be wrapped after 20 columns.\";\n+        expected = \"Here is one line\\nof\\ttext that is\\ngoing to be wrapped\\nafter 20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+        \n+        // difference because of long word\n+        input = \"Click here to jump to the jakarta website - http://jakarta.apache.org\";\n+        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apache.org\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apach\\ne.org\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+        \n+        // difference because of long word in middle\n+        input = \"Click here, http://jakarta.apache.org, to jump to the jakarta website\";\n+        expected = \"Click here,\\nhttp://jakarta.apache.org,\\nto jump to the\\njakarta website\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        expected = \"Click here,\\nhttp://jakarta.apach\\ne.org, to jump to\\nthe jakarta website\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+//        System.err.println(expected);\n+//        System.err.println(WordUtils.wrap(input, 20, \"\\n\", false));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testCapitalize_String() {\n+        assertEquals(null, WordUtils.capitalize(null));\n+        assertEquals(\"\", WordUtils.capitalize(\"\"));\n+        assertEquals(\"  \", WordUtils.capitalize(\"  \"));\n+        \n+        assertEquals(\"I\", WordUtils.capitalize(\"I\") );\n+        assertEquals(\"I\", WordUtils.capitalize(\"i\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"i am here 123\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"I Am Here 123\") );\n+        assertEquals(\"I Am HERE 123\", WordUtils.capitalize(\"i am HERE 123\") );\n+        assertEquals(\"I AM HERE 123\", WordUtils.capitalize(\"I AM HERE 123\") );\n+    }\n+    \n+    public void testCapitalizeWithDelimiters_String() {\n+        assertEquals(null, WordUtils.capitalize(null, null));\n+        assertEquals(\"\", WordUtils.capitalize(\"\", new char[0]));\n+        assertEquals(\"  \", WordUtils.capitalize(\"  \", new char[0]));\n+        \n+        char[] chars = new char[] { '-', '+', ' ', '@' };\n+        assertEquals(\"I\", WordUtils.capitalize(\"I\", chars) );\n+        assertEquals(\"I\", WordUtils.capitalize(\"i\", chars) );\n+        assertEquals(\"I-Am Here+123\", WordUtils.capitalize(\"i-am here+123\", chars) );\n+        assertEquals(\"I Am+Here-123\", WordUtils.capitalize(\"I Am+Here-123\", chars) );\n+        assertEquals(\"I+Am-HERE 123\", WordUtils.capitalize(\"i+am-HERE 123\", chars) );\n+        assertEquals(\"I-AM HERE+123\", WordUtils.capitalize(\"I-AM HERE+123\", chars) );\n+        chars = new char[] {'.'};\n+        assertEquals(\"I aM.Fine\", WordUtils.capitalize(\"i aM.fine\", chars) );\n+        assertEquals(\"I Am.fine\", WordUtils.capitalize(\"i am.fine\", null) );\n+    }\n+\n+    public void testCapitalizeFully_String() {\n+        assertEquals(null, WordUtils.capitalizeFully(null));\n+        assertEquals(\"\", WordUtils.capitalizeFully(\"\"));\n+        assertEquals(\"  \", WordUtils.capitalizeFully(\"  \"));\n+        \n+        assertEquals(\"I\", WordUtils.capitalizeFully(\"I\") );\n+        assertEquals(\"I\", WordUtils.capitalizeFully(\"i\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am here 123\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I Am Here 123\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"i am HERE 123\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalizeFully(\"I AM HERE 123\") );\n+    }\n+    \n+    public void testCapitalizeFullyWithDelimiters_String() {\n+        assertEquals(null, WordUtils.capitalizeFully(null, null));\n+        assertEquals(\"\", WordUtils.capitalizeFully(\"\", new char[0]));\n+        assertEquals(\"  \", WordUtils.capitalizeFully(\"  \", new char[0]));\n+        \n+        char[] chars = new char[] { '-', '+', ' ', '@' };\n+        assertEquals(\"I\", WordUtils.capitalizeFully(\"I\", chars) );\n+        assertEquals(\"I\", WordUtils.capitalizeFully(\"i\", chars) );\n+        assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"i-am here+123\", chars) );\n+        assertEquals(\"I Am+Here-123\", WordUtils.capitalizeFully(\"I Am+Here-123\", chars) );\n+        assertEquals(\"I+Am-Here 123\", WordUtils.capitalizeFully(\"i+am-HERE 123\", chars) );\n+        assertEquals(\"I-Am Here+123\", WordUtils.capitalizeFully(\"I-AM HERE+123\", chars) );\n+        chars = new char[] {'.'};\n+        assertEquals(\"I am.Fine\", WordUtils.capitalizeFully(\"i aM.fine\", chars) );\n+        assertEquals(\"I Am.fine\", WordUtils.capitalizeFully(\"i am.fine\", null) );\n+    }\n+\n+    public void testUncapitalize_String() {\n+        assertEquals(null, WordUtils.uncapitalize(null));\n+        assertEquals(\"\", WordUtils.uncapitalize(\"\"));\n+        assertEquals(\"  \", WordUtils.uncapitalize(\"  \"));\n+        \n+        assertEquals(\"i\", WordUtils.uncapitalize(\"I\") );\n+        assertEquals(\"i\", WordUtils.uncapitalize(\"i\") );\n+        assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"i am here 123\") );\n+        assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"I Am Here 123\") );\n+        assertEquals(\"i am hERE 123\", WordUtils.uncapitalize(\"i am HERE 123\") );\n+        assertEquals(\"i aM hERE 123\", WordUtils.uncapitalize(\"I AM HERE 123\") );\n+    }\n+    \n+    public void testUncapitalizeWithDelimiters_String() {\n+        assertEquals(null, WordUtils.uncapitalize(null, null));\n+        assertEquals(\"\", WordUtils.uncapitalize(\"\", new char[0]));\n+        assertEquals(\"  \", WordUtils.uncapitalize(\"  \", new char[0]));\n+        \n+        char[] chars = new char[] { '-', '+', ' ', '@' };\n+        assertEquals(\"i\", WordUtils.uncapitalize(\"I\", chars) );\n+        assertEquals(\"i\", WordUtils.uncapitalize(\"i\", chars) );\n+        assertEquals(\"i am-here+123\", WordUtils.uncapitalize(\"i am-here+123\", chars) );\n+        assertEquals(\"i+am here-123\", WordUtils.uncapitalize(\"I+Am Here-123\", chars) );\n+        assertEquals(\"i-am+hERE 123\", WordUtils.uncapitalize(\"i-am+HERE 123\", chars) );\n+        assertEquals(\"i aM-hERE+123\", WordUtils.uncapitalize(\"I AM-HERE+123\", chars) );\n+        chars = new char[] {'.'};\n+        assertEquals(\"i AM.fINE\", WordUtils.uncapitalize(\"I AM.FINE\", chars) );\n+        assertEquals(\"i aM.FINE\", WordUtils.uncapitalize(\"I AM.FINE\", null) );\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testInitials_String() {\n+        assertEquals(null, WordUtils.initials(null));\n+        assertEquals(\"\", WordUtils.initials(\"\"));\n+        assertEquals(\"\", WordUtils.initials(\"  \"));\n+\n+        assertEquals(\"I\", WordUtils.initials(\"I\"));\n+        assertEquals(\"i\", WordUtils.initials(\"i\"));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\"));\n+        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\"));\n+        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\"));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\"));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testInitials_String_charArray() {\n+        char[] array = null;\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = new char[0];\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = \" \".toCharArray();\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"BJ\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"BJ.L\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = \" .\".toCharArray();\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"KO\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = \" .'\".toCharArray();\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\"\", WordUtils.initials(\"  \", array));\n+        assertEquals(\"I\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"S\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\"BJL\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"KOM\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"iah1\", WordUtils.initials(\"i am here 123\", array));\n+        \n+        array = \"SIJo1\".toCharArray();\n+        assertEquals(null, WordUtils.initials(null, array));\n+        assertEquals(\"\", WordUtils.initials(\"\", array));\n+        assertEquals(\" \", WordUtils.initials(\"  \", array));\n+        assertEquals(\"\", WordUtils.initials(\"I\", array));\n+        assertEquals(\"i\", WordUtils.initials(\"i\", array));\n+        assertEquals(\"C\", WordUtils.initials(\"SJC\", array));\n+        assertEquals(\"Bh\", WordUtils.initials(\"Ben John Lee\", array));\n+        assertEquals(\"B.\", WordUtils.initials(\"Ben J.Lee\", array));\n+        assertEquals(\" h\", WordUtils.initials(\" Ben   John  . Lee\", array));\n+        assertEquals(\"K\", WordUtils.initials(\"Kay O'Murphy\", array));\n+        assertEquals(\"i2\", WordUtils.initials(\"i am here 123\", array));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSwapCase_String() {\n+        assertEquals(null, WordUtils.swapCase(null));\n+        assertEquals(\"\", WordUtils.swapCase(\"\"));\n+        assertEquals(\"  \", WordUtils.swapCase(\"  \"));\n+        \n+        assertEquals(\"i\", WordUtils.swapCase(\"I\") );\n+        assertEquals(\"I\", WordUtils.swapCase(\"i\") );\n+        assertEquals(\"I AM HERE 123\", WordUtils.swapCase(\"i am here 123\") );\n+        assertEquals(\"i aM hERE 123\", WordUtils.swapCase(\"I Am Here 123\") );\n+        assertEquals(\"I AM here 123\", WordUtils.swapCase(\"i am HERE 123\") );\n+        assertEquals(\"i am here 123\", WordUtils.swapCase(\"I AM HERE 123\") );\n+\n+        String test = \"This String contains a TitleCase character: \\u01C8\";\n+        String expect = \"tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \\u01C9\";\n+        assertEquals(expect, WordUtils.swapCase(test));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testAbbreviate() {\n+        // check null and empty are returned respectively\n+        assertNull(WordUtils.abbreviate(null, 1,-1,\"\"));\n+        assertEquals(StringUtils.EMPTY, WordUtils.abbreviate(\"\", 1,-1,\"\"));\n+\n+        // test upper limit\n+        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 0,5,\"\"));\n+        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"\"));\n+        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5,\"\"));\n+        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n+        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n+\n+        // test upper limit + append string\n+        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 0,5,\"-\"));\n+        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"-\"));\n+        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5, null));\n+        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n+        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n+\n+        // test lower value\n+        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n+        assertEquals(\"01234\", WordUtils.abbreviate(\"01234 56789\", 5, 10, null));\n+        assertEquals(\"01 23 45 67\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, null));\n+        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, null));\n+        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 15, 20, null));\n+\n+        // test lower value + append\n+        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n+        assertEquals(\"01234-\", WordUtils.abbreviate(\"01234 56789\", 5, 10, \"-\"));\n+        assertEquals(\"01 23 45 67abc\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, \"abc\"));\n+        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, \"\"));\n+\n+        // others\n+        assertEquals(\"\", WordUtils.abbreviate(\"0123456790\", 0,0,\"\"));\n+        assertEquals(\"\", WordUtils.abbreviate(\" 0123456790\", 0,-1,\"\"));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.builder;\n+\n+import java.math.BigInteger;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.builder.CompareToBuilder}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author <a href=\"mailto:sdowney@panix.com\">Steve Downey</a>\n+ * @version $Id$\n+ */\n+public class CompareToBuilderTest extends TestCase {\n+\n+    public CompareToBuilderTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    static class TestObject implements Comparable<TestObject> {\n+        private int a;\n+        public TestObject(int a) {\n+            this.a = a;\n+        }\n+        @Override\n+        public boolean equals(Object o) {\n+            if (o == this) {\n+                return true;\n+            }\n+            if (!(o instanceof TestObject)) {\n+                return false;\n+            }\n+            TestObject rhs = (TestObject) o;\n+            return (a == rhs.a);\n+        }\n+\n+        public void setA(int a) {\n+            this.a = a;\n+        }\n+\n+        public int getA() {\n+            return a;\n+        }\n+        public int compareTo(TestObject rhs) {\n+            return (a < rhs.a) ? -1 : (a > rhs.a) ? +1 : 0;\n+        }\n+    }\n+\n+    static class TestSubObject extends TestObject {\n+        private int b;\n+        public TestSubObject() {\n+            super(0);\n+        }\n+        public TestSubObject(int a, int b) {\n+            super(a);\n+            this.b = b;\n+        }\n+        @Override\n+        public boolean equals(Object o) {\n+            if (o == this) {\n+                return true;\n+            }\n+            if (!(o instanceof TestSubObject)) {\n+                return false;\n+            }\n+            TestSubObject rhs = (TestSubObject) o;\n+            return super.equals(o) && (b == rhs.b);\n+        }\n+    }\n+\n+    static class TestTransientSubObject extends TestObject {\n+        @SuppressWarnings(\"unused\")\n+        private transient int t;\n+        public TestTransientSubObject(int a, int t) {\n+            super(a);\n+            this.t = t;\n+        }\n+    }\n+    \n+    public void testReflectionCompare() {\n+        TestObject o1 = new TestObject(4);\n+        TestObject o2 = new TestObject(4);\n+        assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0);\n+        assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0);\n+        o2.setA(5);\n+        assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0);\n+        assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0);\n+    }\n+\n+    public void testReflectionCompareEx1() {\n+        TestObject o1 = new TestObject(4);\n+        try {\n+            CompareToBuilder.reflectionCompare(o1, null);\n+        } catch (NullPointerException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testReflectionCompareEx2() {\n+        TestObject o1 = new TestObject(4);\n+        Object o2 = new Object();\n+        try {\n+            CompareToBuilder.reflectionCompare(o1, o2);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    public void testReflectionHierarchyCompare() {\n+        testReflectionHierarchyCompare(false, null);\n+    }\n+    \n+    public void testReflectionHierarchyCompareExcludeFields() {\n+        String[] excludeFields = new String[] { \"b\" };\n+        testReflectionHierarchyCompare(true, excludeFields);\n+        \n+        TestSubObject x;\n+        TestSubObject y;\n+        TestSubObject z;\n+        \n+        x = new TestSubObject(1, 1);\n+        y = new TestSubObject(2, 1);\n+        z = new TestSubObject(3, 1);\n+        assertXYZCompareOrder(x, y, z, true, excludeFields);\n+\n+        x = new TestSubObject(1, 3);\n+        y = new TestSubObject(2, 2);\n+        z = new TestSubObject(3, 1);\n+        assertXYZCompareOrder(x, y, z, true, excludeFields);\n+    }\n+    \n+    public void testReflectionHierarchyCompareTransients() {\n+        testReflectionHierarchyCompare(true, null);\n+\n+        TestTransientSubObject x;\n+        TestTransientSubObject y;\n+        TestTransientSubObject z;\n+\n+        x = new TestTransientSubObject(1, 1);\n+        y = new TestTransientSubObject(2, 2);\n+        z = new TestTransientSubObject(3, 3);\n+        assertXYZCompareOrder(x, y, z, true, null);\n+        \n+        x = new TestTransientSubObject(1, 1);\n+        y = new TestTransientSubObject(1, 2);\n+        z = new TestTransientSubObject(1, 3);\n+        assertXYZCompareOrder(x, y, z, true, null);  \n+    }\n+    \n+    private void assertXYZCompareOrder(Object x, Object y, Object z, boolean testTransients, String[] excludeFields) {\n+        assertTrue(0 == CompareToBuilder.reflectionCompare(x, x, testTransients, null, excludeFields));\n+        assertTrue(0 == CompareToBuilder.reflectionCompare(y, y, testTransients, null, excludeFields));\n+        assertTrue(0 == CompareToBuilder.reflectionCompare(z, z, testTransients, null, excludeFields));\n+        \n+        assertTrue(0 > CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields));\n+        assertTrue(0 > CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields));\n+        assertTrue(0 > CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields));\n+        \n+        assertTrue(0 < CompareToBuilder.reflectionCompare(y, x, testTransients, null, excludeFields));\n+        assertTrue(0 < CompareToBuilder.reflectionCompare(z, x, testTransients, null, excludeFields));\n+        assertTrue(0 < CompareToBuilder.reflectionCompare(z, y, testTransients, null, excludeFields));\n+    }\n+    \n+    public void testReflectionHierarchyCompare(boolean testTransients, String[] excludeFields) {\n+        TestObject to1 = new TestObject(1);\n+        TestObject to2 = new TestObject(2);\n+        TestObject to3 = new TestObject(3);\n+        TestSubObject tso1 = new TestSubObject(1, 1);\n+        TestSubObject tso2 = new TestSubObject(2, 2);\n+        TestSubObject tso3 = new TestSubObject(3, 3);\n+        \n+        assertReflectionCompareContract(to1, to1, to1, false, excludeFields);\n+        assertReflectionCompareContract(to1, to2, to3, false, excludeFields);\n+        assertReflectionCompareContract(tso1, tso1, tso1, false, excludeFields);\n+        assertReflectionCompareContract(tso1, tso2, tso3, false, excludeFields);\n+        assertReflectionCompareContract(\"1\", \"2\", \"3\", false, excludeFields);\n+        \n+        assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(1, 0), testTransients));\n+        assertTrue(0 != CompareToBuilder.reflectionCompare(tso1, new TestSubObject(0, 1), testTransients));\n+\n+        // root class\n+        assertXYZCompareOrder(to1, to2, to3, true, null);\n+        // subclass  \n+        assertXYZCompareOrder(tso1, tso2, tso3, true, null);  \n+    }\n+\n+    /**\n+     * See \"Effective Java\" under \"Consider Implementing Comparable\".\n+     *  \n+     * @param x an object to compare \n+     * @param y an object to compare\n+     * @param z an object to compare\n+     * @param testTransients Whether to include transients in the comparison\n+     * @param excludeFields fields to exclude\n+     */\n+    public void assertReflectionCompareContract(Object x, Object y, Object z, boolean testTransients, String[] excludeFields) {\n+\n+        // signum\n+        assertTrue(reflectionCompareSignum(x, y, testTransients, excludeFields) == -reflectionCompareSignum(y, x, testTransients, excludeFields));\n+        \n+        // transitive\n+        if (CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields) > 0 \n+                && CompareToBuilder.reflectionCompare(y, z, testTransients, null, excludeFields) > 0){\n+            assertTrue(CompareToBuilder.reflectionCompare(x, z, testTransients, null, excludeFields) > 0);\n+        }\n+        \n+        // un-named\n+        if (CompareToBuilder.reflectionCompare(x, y, testTransients, null, excludeFields) == 0) {\n+            assertTrue(reflectionCompareSignum(x, z, testTransients, excludeFields) == -reflectionCompareSignum(y, z, testTransients, excludeFields));\n+        }\n+        \n+        // strongly recommended but not strictly required\n+        assertTrue((CompareToBuilder.reflectionCompare(x, y, testTransients) ==0 ) == EqualsBuilder.reflectionEquals(x, y, testTransients));\n+    }\n+    \n+    /**\n+     * Returns the signum of the result of comparing x and y with\n+     * <code>CompareToBuilder.reflectionCompare</code>\n+     * \n+     * @param lhs The \"left-hand-side\" of the comparison.\n+     * @param rhs The \"right-hand-side\" of the comparison.\n+     * @param testTransients Whether to include transients in the comparison\n+     * @param excludeFields fields to exclude\n+     * @return int The signum\n+     */\n+    private int reflectionCompareSignum(Object lhs, Object rhs, boolean testTransients, String[] excludeFields) {\n+        return BigInteger.valueOf(CompareToBuilder.reflectionCompare(lhs, rhs, testTransients)).signum();\n+    }\n+    \n+    public void testAppendSuper() {\n+        TestObject o1 = new TestObject(4);\n+        TestObject o2 = new TestObject(5);\n+        assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0);\n+        \n+        assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0);\n+        \n+        assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0);\n+    }\n+    \n+    public void testObject() {\n+        TestObject o1 = new TestObject(4);\n+        TestObject o2 = new TestObject(4);\n+        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() == 0);\n+        o2.setA(5);\n+        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n+        \n+        assertTrue(new CompareToBuilder().append(o1, null).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append((Object) null, (Object) null).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(null, o1).toComparison() < 0);\n+    }\n+\n+    public void testObjectEx2() {\n+        TestObject o1 = new TestObject(4);\n+        Object o2 = new Object();\n+        try {\n+            new CompareToBuilder().append(o1, o2);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    public void testObjectComparator() {\n+        String o1 = \"Fred\";\n+        String o2 = \"Fred\";\n+        assertTrue(new CompareToBuilder().append(o1, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n+        o2 = \"FRED\";\n+        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n+        o2 = \"FREDA\";\n+        assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);\n+        \n+        assertTrue(new CompareToBuilder().append(o1, null, String.CASE_INSENSITIVE_ORDER).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append((Object) null, (Object) null, String.CASE_INSENSITIVE_ORDER).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(null, o1, String.CASE_INSENSITIVE_ORDER).toComparison() < 0);\n+    }\n+    \n+    public void testObjectComparatorNull() {\n+        String o1 = \"Fred\";\n+        String o2 = \"Fred\";\n+        assertTrue(new CompareToBuilder().append(o1, o1, null).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() == 0);\n+        o2 = \"Zebra\";\n+        assertTrue(new CompareToBuilder().append(o1, o2, null).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1, null).toComparison() > 0);\n+        \n+        assertTrue(new CompareToBuilder().append(o1, null, null).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append((Object) null, (Object) null, null).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(null, o1, null).toComparison() < 0);\n+    }\n+\n+    public void testLong() {\n+        long o1 = 1L;\n+        long o2 = 2L;\n+        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Long.MAX_VALUE).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(Long.MAX_VALUE, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Long.MIN_VALUE).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(Long.MIN_VALUE, o1).toComparison() < 0);\n+    }\n+\n+    public void testInt() {\n+        int o1 = 1;\n+        int o2 = 2;\n+        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Integer.MAX_VALUE).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(Integer.MAX_VALUE, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Integer.MIN_VALUE).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(Integer.MIN_VALUE, o1).toComparison() < 0);\n+    }\n+\n+    public void testShort() {\n+        short o1 = 1;\n+        short o2 = 2;\n+        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Short.MAX_VALUE).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(Short.MAX_VALUE, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Short.MIN_VALUE).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(Short.MIN_VALUE, o1).toComparison() < 0);\n+    }\n+\n+    public void testChar() {\n+        char o1 = 1;\n+        char o2 = 2;\n+        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Character.MAX_VALUE).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(Character.MAX_VALUE, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Character.MIN_VALUE).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(Character.MIN_VALUE, o1).toComparison() < 0);\n+    }\n+\n+    public void testByte() {\n+        byte o1 = 1;\n+        byte o2 = 2;\n+        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Byte.MAX_VALUE).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(Byte.MAX_VALUE, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Byte.MIN_VALUE).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(Byte.MIN_VALUE, o1).toComparison() < 0);\n+    }\n+\n+    public void testDouble() {\n+        double o1 = 1;\n+        double o2 = 2;\n+        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Double.MAX_VALUE).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(Double.MAX_VALUE, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Double.MIN_VALUE).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(Double.MIN_VALUE, o1).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(Double.NaN, Double.NaN).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(Double.NaN, Double.MAX_VALUE).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(Double.POSITIVE_INFINITY, Double.MAX_VALUE).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(Double.NEGATIVE_INFINITY, Double.MIN_VALUE).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(o1, Double.NaN).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(Double.NaN, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);\n+    }\n+\n+    public void testFloat() {\n+        float o1 = 1;\n+        float o2 = 2;\n+        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Float.MAX_VALUE).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(Float.MAX_VALUE, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o1, Float.MIN_VALUE).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(Float.MIN_VALUE, o1).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(Float.NaN, Float.NaN).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(Float.NaN, Float.MAX_VALUE).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(Float.POSITIVE_INFINITY, Float.MAX_VALUE).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(Float.NEGATIVE_INFINITY, Float.MIN_VALUE).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(o1, Float.NaN).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(Float.NaN, o1).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(-0.0, 0.0).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(0.0, -0.0).toComparison() > 0);\n+    }\n+\n+    public void testBoolean() {\n+        boolean o1 = true;\n+        boolean o2 = false;\n+        assertTrue(new CompareToBuilder().append(o1, o1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(o2, o2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(o1, o2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1).toComparison() < 0);\n+    }\n+\n+    public void testObjectArray() {\n+        TestObject[] obj1 = new TestObject[2];\n+        obj1[0] = new TestObject(4);\n+        obj1[1] = new TestObject(5);\n+        TestObject[] obj2 = new TestObject[2];\n+        obj2[0] = new TestObject(4);\n+        obj2[1] = new TestObject(5);\n+        TestObject[] obj3 = new TestObject[3];\n+        obj3[0] = new TestObject(4);\n+        obj3[1] = new TestObject(5);\n+        obj3[2] = new TestObject(6);\n+        \n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+        \n+        obj1[1] = new TestObject(7);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+\n+        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append((Object[]) null, (Object[]) null).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n+    }\n+\n+    public void testLongArray() {\n+        long[] obj1 = new long[2];\n+        obj1[0] = 5L;\n+        obj1[1] = 6L;\n+        long[] obj2 = new long[2];\n+        obj2[0] = 5L;\n+        obj2[1] = 6L;\n+        long[] obj3 = new long[3];\n+        obj3[0] = 5L;\n+        obj3[1] = 6L;\n+        obj3[2] = 7L;\n+        \n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        obj1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+\n+        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append((long[]) null, (long[]) null).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n+    }\n+\n+    public void testIntArray() {\n+        int[] obj1 = new int[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        int[] obj2 = new int[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        int[] obj3 = new int[3];\n+        obj3[0] = 5;\n+        obj3[1] = 6;\n+        obj3[2] = 7;\n+\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        obj1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+\n+        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n+    }\n+\n+    public void testShortArray() {\n+        short[] obj1 = new short[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        short[] obj2 = new short[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        short[] obj3 = new short[3];\n+        obj3[0] = 5;\n+        obj3[1] = 6;\n+        obj3[2] = 7;\n+\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        obj1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+\n+        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n+    }\n+\n+    public void testCharArray() {\n+        char[] obj1 = new char[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        char[] obj2 = new char[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        char[] obj3 = new char[3];\n+        obj3[0] = 5;\n+        obj3[1] = 6;\n+        obj3[2] = 7;\n+\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        obj1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+\n+        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append((char[]) null, (char[]) null).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n+    }\n+\n+    public void testByteArray() {\n+        byte[] obj1 = new byte[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        byte[] obj2 = new byte[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        byte[] obj3 = new byte[3];\n+        obj3[0] = 5;\n+        obj3[1] = 6;\n+        obj3[2] = 7;\n+\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        obj1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+\n+        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append((byte[]) null, (byte[]) null).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n+    }\n+\n+    public void testDoubleArray() {\n+        double[] obj1 = new double[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        double[] obj2 = new double[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        double[] obj3 = new double[3];\n+        obj3[0] = 5;\n+        obj3[1] = 6;\n+        obj3[2] = 7;\n+\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        obj1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+\n+        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append((double[]) null, (double[]) null).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n+    }\n+\n+    public void testFloatArray() {\n+        float[] obj1 = new float[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        float[] obj2 = new float[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        float[] obj3 = new float[3];\n+        obj3[0] = 5;\n+        obj3[1] = 6;\n+        obj3[2] = 7;\n+\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        obj1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+\n+        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append((float[]) null, (float[]) null).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n+    }\n+\n+    public void testBooleanArray() {\n+        boolean[] obj1 = new boolean[2];\n+        obj1[0] = true;\n+        obj1[1] = false;\n+        boolean[] obj2 = new boolean[2];\n+        obj2[0] = true;\n+        obj2[1] = false;\n+        boolean[] obj3 = new boolean[3];\n+        obj3[0] = true;\n+        obj3[1] = false;\n+        obj3[2] = true;\n+\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        obj1[1] = true;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+\n+        assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0);\n+    }\n+\n+    public void testMultiLongArray() {\n+        long[][] array1 = new long[2][2];\n+        long[][] array2 = new long[2][2];\n+        long[][] array3 = new long[2][3];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (i + 1) * (j + 1);\n+                array2[i][j] = (i + 1) * (j + 1);\n+                array3[i][j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        array3[1][2] = 100;\n+        array3[1][2] = 100;\n+        \n+        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n+        array1[1][1] = 200;\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n+    }\n+\n+    public void testMultiIntArray() {\n+        int[][] array1 = new int[2][2];\n+        int[][] array2 = new int[2][2];\n+        int[][] array3 = new int[2][3];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (i + 1) * (j + 1);\n+                array2[i][j] = (i + 1) * (j + 1);\n+                array3[i][j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        array3[1][2] = 100;\n+        array3[1][2] = 100;\n+        \n+        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n+        array1[1][1] = 200;\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n+    }\n+\n+    public void testMultiShortArray() {\n+        short[][] array1 = new short[2][2];\n+        short[][] array2 = new short[2][2];\n+        short[][] array3 = new short[2][3];\n+        for (short i = 0; i < array1.length; ++i) {\n+            for (short j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (short)((i + 1) * (j + 1));\n+                array2[i][j] = (short)((i + 1) * (j + 1));\n+                array3[i][j] = (short)((i + 1) * (j + 1));\n+            }\n+        }\n+        array3[1][2] = 100;\n+        array3[1][2] = 100;\n+        \n+        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n+        array1[1][1] = 200;\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n+    }\n+\n+    public void testMultiCharArray() {\n+        char[][] array1 = new char[2][2];\n+        char[][] array2 = new char[2][2];\n+        char[][] array3 = new char[2][3];\n+        for (short i = 0; i < array1.length; ++i) {\n+            for (short j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (char)((i + 1) * (j + 1));\n+                array2[i][j] = (char)((i + 1) * (j + 1));\n+                array3[i][j] = (char)((i + 1) * (j + 1));\n+            }\n+        }\n+        array3[1][2] = 100;\n+        array3[1][2] = 100;\n+        \n+        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n+        array1[1][1] = 200;\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n+    }\n+\n+    public void testMultiByteArray() {\n+        byte[][] array1 = new byte[2][2];\n+        byte[][] array2 = new byte[2][2];\n+        byte[][] array3 = new byte[2][3];\n+        for (byte i = 0; i < array1.length; ++i) {\n+            for (byte j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (byte)((i + 1) * (j + 1));\n+                array2[i][j] = (byte)((i + 1) * (j + 1));\n+                array3[i][j] = (byte)((i + 1) * (j + 1));\n+            }\n+        }\n+        array3[1][2] = 100;\n+        array3[1][2] = 100;\n+        \n+        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n+        array1[1][1] = 127;\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n+    }\n+    \n+    public void testMultiFloatArray() {\n+        float[][] array1 = new float[2][2];\n+        float[][] array2 = new float[2][2];\n+        float[][] array3 = new float[2][3];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = ((i + 1) * (j + 1));\n+                array2[i][j] = ((i + 1) * (j + 1));\n+                array3[i][j] = ((i + 1) * (j + 1));\n+            }\n+        }\n+        array3[1][2] = 100;\n+        array3[1][2] = 100;\n+        \n+        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n+        array1[1][1] = 127;\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n+    }\n+\n+    public void testMultiDoubleArray() {\n+        double[][] array1 = new double[2][2];\n+        double[][] array2 = new double[2][2];\n+        double[][] array3 = new double[2][3];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = ((i + 1) * (j + 1));\n+                array2[i][j] = ((i + 1) * (j + 1));\n+                array3[i][j] = ((i + 1) * (j + 1));\n+            }\n+        }\n+        array3[1][2] = 100;\n+        array3[1][2] = 100;\n+        \n+        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n+        array1[1][1] = 127;\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n+    }\n+\n+    public void testMultiBooleanArray() {\n+        boolean[][] array1 = new boolean[2][2];\n+        boolean[][] array2 = new boolean[2][2];\n+        boolean[][] array3 = new boolean[2][3];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = ((i == 1) ^ (j == 1));\n+                array2[i][j] = ((i == 1) ^ (j == 1));\n+                array3[i][j] = ((i == 1) ^ (j == 1));\n+            }\n+        }\n+        array3[1][2] = false;\n+        array3[1][2] = false;\n+        \n+        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n+        array1[1][1] = true;\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n+    }\n+\n+    public void testRaggedArray() {\n+        long array1[][] = new long[2][];\n+        long array2[][] = new long[2][];\n+        long array3[][] = new long[3][];\n+        for (int i = 0; i < array1.length; ++i) {\n+            array1[i] = new long[2];\n+            array2[i] = new long[2];\n+            array3[i] = new long[3];\n+            for (int j = 0; j < array1[i].length; ++j) {\n+                array1[i][j] = (i + 1) * (j + 1);\n+                array2[i][j] = (i + 1) * (j + 1);\n+                array3[i][j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        array3[1][2] = 100;\n+        array3[1][2] = 100;\n+        \n+        \n+        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n+        array1[1][1] = 200;\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n+    }\n+\n+    public void testMixedArray() {\n+        Object array1[] = new Object[2];\n+        Object array2[] = new Object[2];\n+        Object array3[] = new Object[2];\n+        for (int i = 0; i < array1.length; ++i) {\n+            array1[i] = new long[2];\n+            array2[i] = new long[2];\n+            array3[i] = new long[3];\n+            for (int j = 0; j < 2; ++j) {\n+                ((long[]) array1[i])[j] = (i + 1) * (j + 1);\n+                ((long[]) array2[i])[j] = (i + 1) * (j + 1);\n+                ((long[]) array3[i])[j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        ((long[]) array3[0])[2] = 1;\n+        ((long[]) array3[1])[2] = 1;\n+        assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0);\n+        ((long[]) array1[1])[1] = 200;\n+        assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0);\n+    }\n+\n+    public void testObjectArrayHiddenByObject() {\n+        TestObject[] array1 = new TestObject[2];\n+        array1[0] = new TestObject(4);\n+        array1[1] = new TestObject(5);\n+        TestObject[] array2 = new TestObject[2];\n+        array2[0] = new TestObject(4);\n+        array2[1] = new TestObject(5);\n+        TestObject[] array3 = new TestObject[3];\n+        array3[0] = new TestObject(4);\n+        array3[1] = new TestObject(5);\n+        array3[2] = new TestObject(6);\n+        \n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        Object obj3 = array3;\n+        \n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        array1[1] = new TestObject(7);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+    }\n+\n+    public void testLongArrayHiddenByObject() {\n+        long[] array1 = new long[2];\n+        array1[0] = 5L;\n+        array1[1] = 6L;\n+        long[] array2 = new long[2];\n+        array2[0] = 5L;\n+        array2[1] = 6L;\n+        long[] array3 = new long[3];\n+        array3[0] = 5L;\n+        array3[1] = 6L;\n+        array3[2] = 7L;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        Object obj3 = array3;\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        array1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+    }\n+\n+    public void testIntArrayHiddenByObject() {\n+        int[] array1 = new int[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        int[] array2 = new int[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        int[] array3 = new int[3];\n+        array3[0] = 5;\n+        array3[1] = 6;\n+        array3[2] = 7;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        Object obj3 = array3;\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        array1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+    }\n+\n+    public void testShortArrayHiddenByObject() {\n+        short[] array1 = new short[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        short[] array2 = new short[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        short[] array3 = new short[3];\n+        array3[0] = 5;\n+        array3[1] = 6;\n+        array3[2] = 7;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        Object obj3 = array3;\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        array1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+    }\n+\n+    public void testCharArrayHiddenByObject() {\n+        char[] array1 = new char[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        char[] array2 = new char[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        char[] array3 = new char[3];\n+        array3[0] = 5;\n+        array3[1] = 6;\n+        array3[2] = 7;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        Object obj3 = array3;\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        array1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+    }\n+\n+    public void testByteArrayHiddenByObject() {\n+        byte[] array1 = new byte[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        byte[] array2 = new byte[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        byte[] array3 = new byte[3];\n+        array3[0] = 5;\n+        array3[1] = 6;\n+        array3[2] = 7;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        Object obj3 = array3;\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        array1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+    }\n+\n+    public void testDoubleArrayHiddenByObject() {\n+        double[] array1 = new double[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        double[] array2 = new double[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        double[] array3 = new double[3];\n+        array3[0] = 5;\n+        array3[1] = 6;\n+        array3[2] = 7;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        Object obj3 = array3;\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        array1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+    }\n+\n+    public void testFloatArrayHiddenByObject() {\n+        float[] array1 = new float[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        float[] array2 = new float[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        float[] array3 = new float[3];\n+        array3[0] = 5;\n+        array3[1] = 6;\n+        array3[2] = 7;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        Object obj3 = array3;\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        array1[1] = 7;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+    }\n+\n+    public void testBooleanArrayHiddenByObject() {\n+        boolean[] array1 = new boolean[2];\n+        array1[0] = true;\n+        array1[1] = false;\n+        boolean[] array2 = new boolean[2];\n+        array2[0] = true;\n+        array2[1] = false;\n+        boolean[] array3 = new boolean[3];\n+        array3[0] = true;\n+        array3[1] = false;\n+        array3[2] = true;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        Object obj3 = array3;\n+        assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0);\n+        assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0);\n+        assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0);\n+\n+        array1[1] = true;\n+        assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0);\n+        assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0);\n+    }\n+  \n+ }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.builder;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.builder.ToStringStyleTest.Person;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.builder.DefaultToStringStyleTest}.\n+ *\n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ */\n+public class DefaultToStringStyleTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n+    \n+    public DefaultToStringStyleTest(String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+    }\n+\n+    //----------------------------------------------------------------\n+    \n+    public void testBlank() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n+    }\n+\n+    public void testAppendSuper() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n+        \n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testPerson() {\n+        Person p = new Person();\n+        p.name = \"John Doe\";\n+        p.age = 33;\n+        p.smoker = false;\n+        String pBaseStr = p.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p));\n+        assertEquals(pBaseStr + \"[name=John Doe,age=33,smoker=false]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.builder;\n+\n+import java.util.Arrays;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.builder.EqualsBuilder}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author <a href=\"mailto:sdowney@panix.com\">Steve Downey</a>\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @author Maarten Coene\n+ * @version $Id$\n+ */\n+public class EqualsBuilderTest extends TestCase {\n+\n+    public EqualsBuilderTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    static class TestObject {\n+        private int a;\n+        public TestObject() {\n+        }\n+        public TestObject(int a) {\n+            this.a = a;\n+        }\n+        @Override\n+        public boolean equals(Object o) {\n+            if (o == null) { return false; }\n+            if (o == this) { return true; }\n+            if (o.getClass() != getClass()) {\n+                return false;\n+            }\n+\n+            TestObject rhs = (TestObject) o;\n+            return (a == rhs.a);\n+        }\n+\n+        public void setA(int a) {\n+            this.a = a;\n+        }\n+\n+        public int getA() {\n+            return a;\n+        }\n+    }\n+\n+    static class TestSubObject extends TestObject {\n+        private int b;\n+        public TestSubObject() {\n+            super(0);\n+        }\n+        public TestSubObject(int a, int b) {\n+            super(a);\n+            this.b = b;\n+        }\n+        @Override\n+        public boolean equals(Object o) {\n+            if (o == null) { return false; }\n+            if (o == this) { return true; }\n+            if (o.getClass() != getClass()) {\n+                return false;\n+            }\n+\n+            TestSubObject rhs = (TestSubObject) o;\n+            return super.equals(o) && (b == rhs.b);\n+        }\n+\n+        public void setB(int b) {\n+            this.b = b;\n+        }\n+\n+        public int getB() {\n+            return b;\n+        }\n+    }\n+    \n+    static class TestEmptySubObject extends TestObject {\n+        public TestEmptySubObject(int a) {\n+            super(a);\n+        }\n+    }\n+\n+    static class TestTSubObject extends TestObject {\n+        @SuppressWarnings(\"unused\")\n+        private transient int t;\n+        public TestTSubObject(int a, int t) {\n+            super(a);\n+            this.t = t;\n+        }\n+    }\n+\n+    static class TestTTSubObject extends TestTSubObject {\n+        @SuppressWarnings(\"unused\")\n+        private transient int tt;\n+        public TestTTSubObject(int a, int t, int tt) {\n+            super(a, t);\n+            this.tt = tt;\n+        }\n+    }\n+\n+    static class TestTTLeafObject extends TestTTSubObject {\n+        @SuppressWarnings(\"unused\")\n+        private int leafValue;\n+        public TestTTLeafObject(int a, int t, int tt, int leafValue) {\n+            super(a, t, tt);\n+            this.leafValue = leafValue;\n+        }\n+    }\n+\n+    static class TestTSubObject2 extends TestObject {\n+        private transient int t;\n+        public TestTSubObject2(int a, int t) {\n+            super(a);\n+        }\n+        public int getT() {\n+            return t;\n+        }\n+        public void setT(int t) {\n+            this.t = t;\n+        }\n+    }\n+\n+    public void testReflectionEquals() {\n+        TestObject o1 = new TestObject(4);\n+        TestObject o2 = new TestObject(5);\n+        assertTrue(EqualsBuilder.reflectionEquals(o1, o1));\n+        assertTrue(!EqualsBuilder.reflectionEquals(o1, o2));\n+        o2.setA(4);\n+        assertTrue(EqualsBuilder.reflectionEquals(o1, o2));\n+\n+        assertTrue(!EqualsBuilder.reflectionEquals(o1, this));\n+\n+        assertTrue(!EqualsBuilder.reflectionEquals(o1, null));\n+        assertTrue(!EqualsBuilder.reflectionEquals(null, o2));\n+        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null));\n+    }\n+    \n+    public void testReflectionHierarchyEquals() {\n+        testReflectionHierarchyEquals(false);\n+        testReflectionHierarchyEquals(true);\n+        // Transients\n+        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n+        assertTrue(EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), false));\n+        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 0, 0, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n+        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(1, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 0), true));\n+        assertTrue(!EqualsBuilder.reflectionEquals(new TestTTLeafObject(0, 2, 3, 4), new TestTTLeafObject(1, 2, 3, 4), true));\n+    }\n+\n+    public void testReflectionHierarchyEquals(boolean testTransients) {\n+        TestObject to1 = new TestObject(4);\n+        TestObject to1Bis = new TestObject(4);\n+        TestObject to1Ter = new TestObject(4);\n+        TestObject to2 = new TestObject(5);\n+        TestEmptySubObject teso = new TestEmptySubObject(4);\n+        TestTSubObject ttso = new TestTSubObject(4, 1);\n+        TestTTSubObject tttso = new TestTTSubObject(4, 1, 2);\n+        TestTTLeafObject ttlo = new TestTTLeafObject(4, 1, 2, 3);\n+        TestSubObject tso1 = new TestSubObject(1, 4);\n+        TestSubObject tso1bis = new TestSubObject(1, 4);\n+        TestSubObject tso1ter = new TestSubObject(1, 4);\n+        TestSubObject tso2 = new TestSubObject(2, 5);\n+\n+        testReflectionEqualsEquivalenceRelationship(to1, to1Bis, to1Ter, to2, new TestObject(), testTransients);\n+        testReflectionEqualsEquivalenceRelationship(tso1, tso1bis, tso1ter, tso2, new TestSubObject(), testTransients);\n+\n+        // More sanity checks:\n+\n+        // same values\n+        assertTrue(EqualsBuilder.reflectionEquals(ttlo, ttlo, testTransients));\n+        assertTrue(EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 10), testTransients));\n+        // same super values, diff sub values\n+        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(1, 11), testTransients));\n+        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 11), new TestSubObject(1, 10), testTransients));\n+        // diff super values, same sub values\n+        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestSubObject(1, 10), testTransients));\n+        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(1, 10), new TestSubObject(0, 10), testTransients));\n+\n+        // mix super and sub types: equals\n+        assertTrue(EqualsBuilder.reflectionEquals(to1, teso, testTransients));\n+        assertTrue(EqualsBuilder.reflectionEquals(teso, to1, testTransients));\n+\n+        assertTrue(EqualsBuilder.reflectionEquals(to1, ttso, false)); // Force testTransients = false for this assert\n+        assertTrue(EqualsBuilder.reflectionEquals(ttso, to1, false)); // Force testTransients = false for this assert\n+\n+        assertTrue(EqualsBuilder.reflectionEquals(to1, tttso, false)); // Force testTransients = false for this assert\n+        assertTrue(EqualsBuilder.reflectionEquals(tttso, to1, false)); // Force testTransients = false for this assert\n+\n+        assertTrue(EqualsBuilder.reflectionEquals(ttso, tttso, false)); // Force testTransients = false for this assert\n+        assertTrue(EqualsBuilder.reflectionEquals(tttso, ttso, false)); // Force testTransients = false for this assert\n+\n+        // mix super and sub types: NOT equals\n+        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestEmptySubObject(1), testTransients));\n+        assertTrue(!EqualsBuilder.reflectionEquals(new TestEmptySubObject(1), new TestObject(0), testTransients));\n+\n+        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(0), new TestTSubObject(1, 1), testTransients));\n+        assertTrue(!EqualsBuilder.reflectionEquals(new TestTSubObject(1, 1), new TestObject(0), testTransients));\n+\n+        assertTrue(!EqualsBuilder.reflectionEquals(new TestObject(1), new TestSubObject(0, 10), testTransients));\n+        assertTrue(!EqualsBuilder.reflectionEquals(new TestSubObject(0, 10), new TestObject(1), testTransients));\n+\n+        assertTrue(!EqualsBuilder.reflectionEquals(to1, ttlo));\n+        assertTrue(!EqualsBuilder.reflectionEquals(tso1, this));\n+    }\n+\n+    /**\n+     * Equivalence relationship tests inspired by \"Effective Java\":\n+     * <ul>\n+     * <li>reflection</li>\n+     * <li>symmetry</li>\n+     * <li>transitive</li>\n+     * <li>consistency</li>\n+     * <li>non-null reference</li>\n+     * </ul>\n+     * @param to a TestObject\n+     * @param toBis a TestObject, equal to to and toTer\n+     * @param toTer Left hand side, equal to to and toBis\n+     * @param to2 a different TestObject\n+     * @param oToChange a TestObject that will be changed\n+     */\n+    public void testReflectionEqualsEquivalenceRelationship(\n+        TestObject to,\n+        TestObject toBis,\n+        TestObject toTer,\n+        TestObject to2,\n+        TestObject oToChange,\n+        boolean testTransients) {\n+\n+        // reflection test\n+        assertTrue(EqualsBuilder.reflectionEquals(to, to, testTransients));\n+        assertTrue(EqualsBuilder.reflectionEquals(to2, to2, testTransients));\n+\n+        // symmetry test\n+        assertTrue(EqualsBuilder.reflectionEquals(to, toBis, testTransients) && EqualsBuilder.reflectionEquals(toBis, to, testTransients));\n+\n+        // transitive test\n+        assertTrue(\n+            EqualsBuilder.reflectionEquals(to, toBis, testTransients)\n+                && EqualsBuilder.reflectionEquals(toBis, toTer, testTransients)\n+                && EqualsBuilder.reflectionEquals(to, toTer, testTransients));\n+\n+        // consistency test\n+        oToChange.setA(to.getA());\n+        if (oToChange instanceof TestSubObject) {\n+            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB());\n+        }\n+        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n+        assertTrue(EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n+        oToChange.setA(to.getA() + 1);\n+        if (oToChange instanceof TestSubObject) {\n+            ((TestSubObject) oToChange).setB(((TestSubObject) to).getB() + 1);\n+        }\n+        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n+        assertTrue(!EqualsBuilder.reflectionEquals(oToChange, to, testTransients));\n+\n+        // non-null reference test\n+        assertTrue(!EqualsBuilder.reflectionEquals(to, null, testTransients));\n+        assertTrue(!EqualsBuilder.reflectionEquals(to2, null, testTransients));\n+        assertTrue(!EqualsBuilder.reflectionEquals(null, to, testTransients));\n+        assertTrue(!EqualsBuilder.reflectionEquals(null, to2, testTransients));\n+        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null, testTransients));\n+    }\n+\n+    public void testSuper() {\n+        TestObject o1 = new TestObject(4);\n+        TestObject o2 = new TestObject(5);\n+        assertEquals(true, new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals());\n+        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals());\n+        assertEquals(false, new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals());\n+        assertEquals(false, new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals());\n+    }\n+\n+    public void testObject() {\n+        TestObject o1 = new TestObject(4);\n+        TestObject o2 = new TestObject(5);\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+        o2.setA(4);\n+        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());\n+\n+        assertTrue(!new EqualsBuilder().append(o1, this).isEquals());\n+        \n+        assertTrue(!new EqualsBuilder().append(o1, null).isEquals());\n+        assertTrue(!new EqualsBuilder().append(null, o2).isEquals());\n+        assertTrue(new EqualsBuilder().append((Object) null, (Object) null).isEquals());\n+    }\n+\n+    public void testLong() {\n+        long o1 = 1L;\n+        long o2 = 2L;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+    }\n+\n+    public void testInt() {\n+        int o1 = 1;\n+        int o2 = 2;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+    }\n+\n+    public void testShort() {\n+        short o1 = 1;\n+        short o2 = 2;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+    }\n+\n+    public void testChar() {\n+        char o1 = 1;\n+        char o2 = 2;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+    }\n+\n+    public void testByte() {\n+        byte o1 = 1;\n+        byte o2 = 2;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+    }\n+\n+    public void testDouble() {\n+        double o1 = 1;\n+        double o2 = 2;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, Double.NaN).isEquals());\n+        assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals());\n+        assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals());\n+    }\n+\n+    public void testFloat() {\n+        float o1 = 1;\n+        float o2 = 2;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, Float.NaN).isEquals());\n+        assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals());\n+        assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());\n+    }\n+\n+    public void testAccessors() {\n+        EqualsBuilder equalsBuilder = new EqualsBuilder();\n+        assertTrue(equalsBuilder.isEquals());\n+        equalsBuilder.setEquals(true);\n+        assertTrue(equalsBuilder.isEquals());\n+        equalsBuilder.setEquals(false);\n+        assertFalse(equalsBuilder.isEquals());\n+    }\n+\n+    public void testReset() {\n+        EqualsBuilder equalsBuilder = new EqualsBuilder();\n+        assertTrue(equalsBuilder.isEquals());\n+        equalsBuilder.setEquals(false);\n+        assertFalse(equalsBuilder.isEquals());\n+        equalsBuilder.reset();\n+        assertTrue(equalsBuilder.isEquals());\n+    }\n+    \n+    public void testBoolean() {\n+        boolean o1 = true;\n+        boolean o2 = false;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+    }\n+\n+    public void testObjectArray() {\n+        TestObject[] obj1 = new TestObject[3];\n+        obj1[0] = new TestObject(4);\n+        obj1[1] = new TestObject(5);\n+        obj1[2] = null;\n+        TestObject[] obj2 = new TestObject[3];\n+        obj2[0] = new TestObject(4);\n+        obj2[1] = new TestObject(5);\n+        obj2[2] = null;\n+        \n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1].setA(6);\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1].setA(5);\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[2] = obj1[1];\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[2] = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+                       \n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testLongArray() {\n+        long[] obj1 = new long[2];\n+        obj1[0] = 5L;\n+        obj1[1] = 6L;\n+        long[] obj2 = new long[2];\n+        obj2[0] = 5L;\n+        obj2[1] = 6L;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testIntArray() {\n+        int[] obj1 = new int[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        int[] obj2 = new int[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testShortArray() {\n+        short[] obj1 = new short[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        short[] obj2 = new short[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testCharArray() {\n+        char[] obj1 = new char[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        char[] obj2 = new char[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testByteArray() {\n+        byte[] obj1 = new byte[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        byte[] obj2 = new byte[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testDoubleArray() {\n+        double[] obj1 = new double[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        double[] obj2 = new double[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testFloatArray() {\n+        float[] obj1 = new float[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        float[] obj2 = new float[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testBooleanArray() {\n+        boolean[] obj1 = new boolean[2];\n+        obj1[0] = true;\n+        obj1[1] = false;\n+        boolean[] obj2 = new boolean[2];\n+        obj2[0] = true;\n+        obj2[1] = false;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = true;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testMultiLongArray() {\n+        long[][] array1 = new long[2][2];\n+        long[][] array2 = new long[2][2];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (i + 1) * (j + 1);\n+                array2[i][j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMultiIntArray() {\n+        int[][] array1 = new int[2][2];\n+        int[][] array2 = new int[2][2];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (i + 1) * (j + 1);\n+                array2[i][j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMultiShortArray() {\n+        short[][] array1 = new short[2][2];\n+        short[][] array2 = new short[2][2];\n+        for (short i = 0; i < array1.length; ++i) {\n+            for (short j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = i;\n+                array2[i][j] = i;\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMultiCharArray() {\n+        char[][] array1 = new char[2][2];\n+        char[][] array2 = new char[2][2];\n+        for (char i = 0; i < array1.length; ++i) {\n+            for (char j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = i;\n+                array2[i][j] = i;\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMultiByteArray() {\n+        byte[][] array1 = new byte[2][2];\n+        byte[][] array2 = new byte[2][2];\n+        for (byte i = 0; i < array1.length; ++i) {\n+            for (byte j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = i;\n+                array2[i][j] = i;\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+    public void testMultiFloatArray() {\n+        float[][] array1 = new float[2][2];\n+        float[][] array2 = new float[2][2];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (i + 1) * (j + 1);\n+                array2[i][j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMultiDoubleArray() {\n+        double[][] array1 = new double[2][2];\n+        double[][] array2 = new double[2][2];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (i + 1) * (j + 1);\n+                array2[i][j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMultiBooleanArray() {\n+        boolean[][] array1 = new boolean[2][2];\n+        boolean[][] array2 = new boolean[2][2];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (i == 1) || (j == 1);\n+                array2[i][j] = (i == 1) || (j == 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = false;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+        \n+        // compare 1 dim to 2.\n+        boolean[] array3 = new boolean[]{true, true};\n+        assertFalse(new EqualsBuilder().append(array1, array3).isEquals());\n+        assertFalse(new EqualsBuilder().append(array3, array1).isEquals());\n+        assertFalse(new EqualsBuilder().append(array2, array3).isEquals());\n+        assertFalse(new EqualsBuilder().append(array3, array2).isEquals());\n+    }\n+\n+    public void testRaggedArray() {\n+        long array1[][] = new long[2][];\n+        long array2[][] = new long[2][];\n+        for (int i = 0; i < array1.length; ++i) {\n+            array1[i] = new long[2];\n+            array2[i] = new long[2];\n+            for (int j = 0; j < array1[i].length; ++j) {\n+                array1[i][j] = (i + 1) * (j + 1);\n+                array2[i][j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMixedArray() {\n+        Object array1[] = new Object[2];\n+        Object array2[] = new Object[2];\n+        for (int i = 0; i < array1.length; ++i) {\n+            array1[i] = new long[2];\n+            array2[i] = new long[2];\n+            for (int j = 0; j < 2; ++j) {\n+                ((long[]) array1[i])[j] = (i + 1) * (j + 1);\n+                ((long[]) array2[i])[j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        ((long[]) array1[1])[1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testObjectArrayHiddenByObject() {\n+        TestObject[] array1 = new TestObject[2];\n+        array1[0] = new TestObject(4);\n+        array1[1] = new TestObject(5);\n+        TestObject[] array2 = new TestObject[2];\n+        array2[0] = new TestObject(4);\n+        array2[1] = new TestObject(5);\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1].setA(6);\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testLongArrayHiddenByObject() {\n+        long[] array1 = new long[2];\n+        array1[0] = 5L;\n+        array1[1] = 6L;\n+        long[] array2 = new long[2];\n+        array2[0] = 5L;\n+        array2[1] = 6L;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testIntArrayHiddenByObject() {\n+        int[] array1 = new int[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        int[] array2 = new int[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testShortArrayHiddenByObject() {\n+        short[] array1 = new short[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        short[] array2 = new short[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testCharArrayHiddenByObject() {\n+        char[] array1 = new char[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        char[] array2 = new char[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testByteArrayHiddenByObject() {\n+        byte[] array1 = new byte[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        byte[] array2 = new byte[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testDoubleArrayHiddenByObject() {\n+        double[] array1 = new double[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        double[] array2 = new double[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testFloatArrayHiddenByObject() {\n+        float[] array1 = new float[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        float[] array2 = new float[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testBooleanArrayHiddenByObject() {\n+        boolean[] array1 = new boolean[2];\n+        array1[0] = true;\n+        array1[1] = false;\n+        boolean[] array2 = new boolean[2];\n+        array2[0] = true;\n+        array2[1] = false;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = true;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+    \n+    public static class TestACanEqualB {\n+        private int a;\n+\n+        public TestACanEqualB(int a) {\n+            this.a = a;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (o == this)\n+                return true;\n+            if (o instanceof TestACanEqualB)\n+                return this.a == ((TestACanEqualB) o).getA();\n+            if (o instanceof TestBCanEqualA)\n+                return this.a == ((TestBCanEqualA) o).getB();\n+            return false;\n+        }\n+\n+        public int getA() {\n+            return this.a;\n+        }\n+    }\n+\n+    public static class TestBCanEqualA {\n+        private int b;\n+\n+        public TestBCanEqualA(int b) {\n+            this.b = b;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (o == this)\n+                return true;\n+            if (o instanceof TestACanEqualB)\n+                return this.b == ((TestACanEqualB) o).getA();\n+            if (o instanceof TestBCanEqualA)\n+                return this.b == ((TestBCanEqualA) o).getB();\n+            return false;\n+        }\n+\n+        public int getB() {\n+            return this.b;\n+        }\n+    }\n+    \n+    /**\n+     * Tests two instances of classes that can be equal and that are not \"related\". The two classes are not subclasses\n+     * of each other and do not share a parent aside from Object.\n+     * See http://issues.apache.org/bugzilla/show_bug.cgi?id=33069\n+     */\n+    public void testUnrelatedClasses() {\n+        Object[] x = new Object[]{new TestACanEqualB(1)};\n+        Object[] y = new Object[]{new TestBCanEqualA(1)};\n+\n+        // sanity checks:\n+        assertTrue(Arrays.equals(x, x));\n+        assertTrue(Arrays.equals(y, y));\n+        assertTrue(Arrays.equals(x, y));\n+        assertTrue(Arrays.equals(y, x));\n+        // real tests:\n+        assertTrue(x[0].equals(x[0]));\n+        assertTrue(y[0].equals(y[0]));\n+        assertTrue(x[0].equals(y[0]));\n+        assertTrue(y[0].equals(x[0]));\n+        assertTrue(new EqualsBuilder().append(x, x).isEquals());\n+        assertTrue(new EqualsBuilder().append(y, y).isEquals());\n+        assertTrue(new EqualsBuilder().append(x, y).isEquals());\n+        assertTrue(new EqualsBuilder().append(y, x).isEquals());\n+    }\n+    \n+    /**\n+     * Test from http://issues.apache.org/bugzilla/show_bug.cgi?id=33067\n+     */\n+    public void testNpeForNullElement() {\n+        Object[] x1 = new Object[] { new Integer(1), null, new Integer(3) };\n+        Object[] x2 = new Object[] { new Integer(1), new Integer(2), new Integer(3) };\n+\n+        // causes an NPE in 2.0 according to:\n+        // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067\n+        new EqualsBuilder().append(x1, x2);\n+    }\n+\n+    public void testReflectionEqualsExcludeFields() throws Exception {\n+        TestObjectWithMultipleFields x1 = new TestObjectWithMultipleFields(1, 2, 3);\n+        TestObjectWithMultipleFields x2 = new TestObjectWithMultipleFields(1, 3, 4);\n+\n+        // not equal when including all fields\n+        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2));\n+\n+        // doesn't barf on null, empty array, or non-existent field, but still tests as not equal\n+        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, (String[]) null));\n+        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {}));\n+        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"xxx\"}));\n+\n+        // not equal if only one of the differing fields excluded\n+        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"two\"}));\n+        assertTrue(!EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"three\"}));\n+\n+        // equal if both differing fields excluded\n+        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"two\", \"three\"}));\n+\n+        // still equal as long as both differing fields are among excluded\n+        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"one\", \"two\", \"three\"}));\n+        assertTrue(EqualsBuilder.reflectionEquals(x1, x2, new String[] {\"one\", \"two\", \"three\", \"xxx\"}));\n+    }\n+\n+    static class TestObjectWithMultipleFields {\n+        @SuppressWarnings(\"unused\")\n+        private TestObject one;\n+        @SuppressWarnings(\"unused\")\n+        private TestObject two;\n+        @SuppressWarnings(\"unused\")\n+        private TestObject three;\n+\n+        public TestObjectWithMultipleFields(int one, int two, int three) {\n+            this.one = new TestObject(one);\n+            this.two = new TestObject(two);\n+            this.three = new TestObject(three);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.builder;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@link org.apache.commons.lang3.builder.HashCodeBuilder} and\n+ * {@link org.apache.commons.lang3.builder.EqualsBuilderTest} to insure that equal\n+ * objects must have equal hash codes.\n+ * \n+ * @author Gary Gregory\n+ * @version $Id$\n+ */\n+public class HashCodeBuilderAndEqualsBuilderTest extends TestCase {\n+\n+    /**\n+     * Constructor for HashCodeBuilderAndEqualsBuilderTest.\n+     * @param name\n+     */\n+    public HashCodeBuilderAndEqualsBuilderTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testInteger(boolean testTransients) {\n+        Integer i1 = new Integer(12345);\n+        Integer i2 = new Integer(12345);\n+        assertEqualsAndHashCodeContract(i1, i2, testTransients);\n+    }\n+\n+    public void testInteger() {\n+        testInteger(false);\n+    }\n+\n+    public void testIntegerWithTransients() {\n+        testInteger(true);\n+    }\n+\n+    public void testFixture() {\n+        testFixture(false);\n+    }\n+\n+    public void testFixtureWithTransients() {\n+        testFixture(true);\n+    }\n+\n+    public void testFixture(boolean testTransients) {\n+        assertEqualsAndHashCodeContract(new TestFixture(2, 'c', \"Test\", (short) 2), new TestFixture(2, 'c', \"Test\", (short) 2), testTransients);\n+        assertEqualsAndHashCodeContract(\n+            new AllTransientFixture(2, 'c', \"Test\", (short) 2),\n+            new AllTransientFixture(2, 'c', \"Test\", (short) 2),\n+            testTransients);\n+        assertEqualsAndHashCodeContract(\n+            new SubTestFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n+            new SubTestFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n+            testTransients);\n+        assertEqualsAndHashCodeContract(\n+            new SubAllTransientFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n+            new SubAllTransientFixture(2, 'c', \"Test\", (short) 2, \"Same\"),\n+            testTransients);\n+    }\n+\n+    /**\n+     * Asserts that if <code>lhs</code> equals <code>rhs</code> \n+     * then their hash codes MUST be identical.\n+     * \n+     * @param lhs The Left-Hand-Side of the equals test\n+     * @param rhs The Right-Hand-Side of the equals test\n+     * @param testTransients wether to test transient fields\n+     */\n+    public void assertEqualsAndHashCodeContract(Object lhs, Object rhs, boolean testTransients) {\n+        if (EqualsBuilder.reflectionEquals(lhs, rhs, testTransients)) {\n+            // test a couple of times for consistency.\n+            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));\n+            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));\n+            assertEquals(HashCodeBuilder.reflectionHashCode(lhs, testTransients), HashCodeBuilder.reflectionHashCode(rhs, testTransients));\n+        }\n+    }\n+\n+    static class TestFixture {\n+        int i;\n+        char c;\n+        String string;\n+        short s;\n+\n+        TestFixture(int i, char c, String string, short s) {\n+            this.i = i;\n+            this.c = c;\n+            this.string = string;\n+            this.s = s;\n+        }\n+    }\n+\n+    static class SubTestFixture extends TestFixture {\n+        transient String tString;\n+\n+        SubTestFixture(int i, char c, String string, short s, String tString) {\n+            super(i, c, string, s);\n+            this.tString = tString;\n+        }\n+    }\n+\n+    static class AllTransientFixture {\n+        transient int i;\n+        transient char c;\n+        transient String string;\n+        transient short s;\n+\n+        AllTransientFixture(int i, char c, String string, short s) {\n+            this.i = i;\n+            this.c = c;\n+            this.string = string;\n+            this.s = s;\n+        }\n+    }\n+\n+    static class SubAllTransientFixture extends AllTransientFixture {\n+        transient String tString;\n+\n+        SubAllTransientFixture(int i, char c, String string, short s, String tString) {\n+            super(i, c, string, s);\n+            this.tString = tString;\n+        }\n+    }\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.builder;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.builder.HashCodeBuilder}.\n+ * \n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ */\n+public class HashCodeBuilderTest extends TestCase {\n+\n+    /**\n+     * A reflection test fixture.\n+     */\n+    static class ReflectionTestCycleA {\n+        ReflectionTestCycleB b;\n+\n+        @Override\n+        public int hashCode() {\n+            return HashCodeBuilder.reflectionHashCode(this);\n+        }\n+    }\n+\n+    /**\n+     * A reflection test fixture.\n+     */\n+    static class ReflectionTestCycleB {\n+        ReflectionTestCycleA a;\n+\n+        @Override\n+        public int hashCode() {\n+            return HashCodeBuilder.reflectionHashCode(this);\n+        }\n+    }\n+\n+    public HashCodeBuilderTest(String name) {\n+        super(name);\n+    }\n+\n+    // -----------------------------------------------------------------------\n+\n+    public void testConstructorEx1() {\n+        try {\n+            new HashCodeBuilder(0, 0);\n+\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testConstructorEx2() {\n+        try {\n+            new HashCodeBuilder(2, 2);\n+\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    static class TestObject {\n+        private int a;\n+\n+        public TestObject(int a) {\n+            this.a = a;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (o == this) {\n+                return true;\n+            }\n+            if (!(o instanceof TestObject)) {\n+                return false;\n+            }\n+            TestObject rhs = (TestObject) o;\n+            return (a == rhs.a);\n+        }\n+\n+        public void setA(int a) {\n+            this.a = a;\n+        }\n+\n+        public int getA() {\n+            return a;\n+        }\n+    }\n+\n+    static class TestSubObject extends TestObject {\n+        private int b;\n+\n+        @SuppressWarnings(\"unused\")\n+        transient private int t;\n+\n+        public TestSubObject() {\n+            super(0);\n+        }\n+\n+        public TestSubObject(int a, int b, int t) {\n+            super(a);\n+            this.b = b;\n+            this.t = t;\n+        }\n+\n+        @Override\n+        public boolean equals(Object o) {\n+            if (o == this) {\n+                return true;\n+            }\n+            if (!(o instanceof TestSubObject)) {\n+                return false;\n+            }\n+            TestSubObject rhs = (TestSubObject) o;\n+            return super.equals(o) && (b == rhs.b);\n+        }\n+    }\n+\n+    public void testReflectionHashCode() {\n+        assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0)));\n+        assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456)));\n+    }\n+\n+    public void testReflectionHierarchyHashCode() {\n+        assertEquals(17 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0)));\n+        assertEquals(17 * 37 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0), true));\n+        assertEquals((17 * 37 + 7890) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(123456, 7890,\n+                0)));\n+        assertEquals(((17 * 37 + 7890) * 37 + 0) * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestSubObject(\n+                123456, 7890, 0), true));\n+    }\n+\n+    public void testReflectionHierarchyHashCodeEx1() {\n+        try {\n+            HashCodeBuilder.reflectionHashCode(0, 0, new TestSubObject(0, 0, 0), true);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testReflectionHierarchyHashCodeEx2() {\n+        try {\n+            HashCodeBuilder.reflectionHashCode(2, 2, new TestSubObject(0, 0, 0), true);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testReflectionHashCodeEx1() {\n+        try {\n+            HashCodeBuilder.reflectionHashCode(0, 0, new TestObject(0), true);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testReflectionHashCodeEx2() {\n+        try {\n+            HashCodeBuilder.reflectionHashCode(2, 2, new TestObject(0), true);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testReflectionHashCodeEx3() {\n+        try {\n+            HashCodeBuilder.reflectionHashCode(13, 19, null, true);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testSuper() {\n+        Object obj = new Object();\n+        assertEquals(17 * 37 + (19 * 41 + obj.hashCode()), new HashCodeBuilder(17, 37).appendSuper(\n+                new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode());\n+    }\n+\n+    public void testObject() {\n+        Object obj = null;\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj = new Object();\n+        assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n+    public void testLong() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long) 0L).toHashCode());\n+        assertEquals(17 * 37 + (int) (123456789L ^ (123456789L >> 32)), new HashCodeBuilder(17, 37).append(\n+                (long) 123456789L).toHashCode());\n+    }\n+\n+    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n+    public void testInt() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int) 0).toHashCode());\n+        assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append((int) 123456).toHashCode());\n+    }\n+\n+    public void testShort() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short) 0).toHashCode());\n+        assertEquals(17 * 37 + 12345, new HashCodeBuilder(17, 37).append((short) 12345).toHashCode());\n+    }\n+\n+    public void testChar() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char) 0).toHashCode());\n+        assertEquals(17 * 37 + 1234, new HashCodeBuilder(17, 37).append((char) 1234).toHashCode());\n+    }\n+\n+    public void testByte() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte) 0).toHashCode());\n+        assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode());\n+    }\n+\n+    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n+    public void testDouble() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double) 0d).toHashCode());\n+        double d = 1234567.89;\n+        long l = Double.doubleToLongBits(d);\n+        assertEquals(17 * 37 + (int) (l ^ (l >> 32)), new HashCodeBuilder(17, 37).append(d).toHashCode());\n+    }\n+\n+    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n+    public void testFloat() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode());\n+        float f = 1234.89f;\n+        int i = Float.floatToIntBits(f);\n+        assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode());\n+    }\n+\n+    public void testBoolean() {\n+        assertEquals(17 * 37 + 0, new HashCodeBuilder(17, 37).append(true).toHashCode());\n+        assertEquals(17 * 37 + 1, new HashCodeBuilder(17, 37).append(false).toHashCode());\n+    }\n+\n+    public void testObjectArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode());\n+        Object[] obj = new Object[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = new Object();\n+        assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = new Object();\n+        assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj)\n+                .toHashCode());\n+    }\n+\n+    public void testObjectArrayAsObject() {\n+        Object[] obj = new Object[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = new Object();\n+        assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = new Object();\n+        assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(\n+                (Object) obj).toHashCode());\n+    }\n+\n+    public void testLongArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode());\n+        long[] obj = new long[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = 5L;\n+        int h1 = (int) (5L ^ (5L >> 32));\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = 6L;\n+        int h2 = (int) (6L ^ (6L >> 32));\n+        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testLongArrayAsObject() {\n+        long[] obj = new long[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = 5L;\n+        int h1 = (int) (5L ^ (5L >> 32));\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = 6L;\n+        int h2 = (int) (6L ^ (6L >> 32));\n+        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testIntArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode());\n+        int[] obj = new int[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = 6;\n+        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testIntArrayAsObject() {\n+        int[] obj = new int[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = 6;\n+        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testShortArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode());\n+        short[] obj = new short[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = (short) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = (short) 6;\n+        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testShortArrayAsObject() {\n+        short[] obj = new short[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = (short) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = (short) 6;\n+        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testCharArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode());\n+        char[] obj = new char[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = (char) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = (char) 6;\n+        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testCharArrayAsObject() {\n+        char[] obj = new char[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = (char) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = (char) 6;\n+        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testByteArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode());\n+        byte[] obj = new byte[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = (byte) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = (byte) 6;\n+        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testByteArrayAsObject() {\n+        byte[] obj = new byte[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = (byte) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = (byte) 6;\n+        assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testDoubleArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode());\n+        double[] obj = new double[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = 5.4d;\n+        long l1 = Double.doubleToLongBits(5.4d);\n+        int h1 = (int) (l1 ^ (l1 >> 32));\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = 6.3d;\n+        long l2 = Double.doubleToLongBits(6.3d);\n+        int h2 = (int) (l2 ^ (l2 >> 32));\n+        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testDoubleArrayAsObject() {\n+        double[] obj = new double[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = 5.4d;\n+        long l1 = Double.doubleToLongBits(5.4d);\n+        int h1 = (int) (l1 ^ (l1 >> 32));\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = 6.3d;\n+        long l2 = Double.doubleToLongBits(6.3d);\n+        int h2 = (int) (l2 ^ (l2 >> 32));\n+        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testFloatArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode());\n+        float[] obj = new float[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = 5.4f;\n+        int h1 = Float.floatToIntBits(5.4f);\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = 6.3f;\n+        int h2 = Float.floatToIntBits(6.3f);\n+        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testFloatArrayAsObject() {\n+        float[] obj = new float[2];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = 5.4f;\n+        int h1 = Float.floatToIntBits(5.4f);\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = 6.3f;\n+        int h2 = Float.floatToIntBits(6.3f);\n+        assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testBooleanArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode());\n+        boolean[] obj = new boolean[2];\n+        assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = true;\n+        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = false;\n+        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testBooleanArrayAsObject() {\n+        boolean[] obj = new boolean[2];\n+        assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = true;\n+        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = false;\n+        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testBooleanMultiArray() {\n+        boolean[][] obj = new boolean[2][];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = new boolean[0];\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = new boolean[1];\n+        assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = new boolean[2];\n+        assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0][0] = true;\n+        assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = new boolean[1];\n+        assertEquals((((17 * 37 + 0) * 37 + 1) * 37 + 1), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testReflectionHashCodeExcludeFields() throws Exception {\n+        TestObjectWithMultipleFields x = new TestObjectWithMultipleFields(1, 2, 3);\n+\n+        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x));\n+\n+        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, (String[]) null));\n+        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{}));\n+        assertEquals((((17 * 37 + 1) * 37 + 2) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{\"xxx\"}));\n+\n+        assertEquals(((17 * 37 + 1) * 37 + 3), HashCodeBuilder.reflectionHashCode(x, new String[]{\"two\"}));\n+        assertEquals(((17 * 37 + 1) * 37 + 2), HashCodeBuilder.reflectionHashCode(x, new String[]{\"three\"}));\n+\n+        assertEquals((17 * 37 + 1), HashCodeBuilder.reflectionHashCode(x, new String[]{\"two\", \"three\"}));\n+\n+        assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[]{\"one\", \"two\", \"three\"}));\n+        assertEquals(17, HashCodeBuilder.reflectionHashCode(x, new String[]{\"one\", \"two\", \"three\", \"xxx\"}));\n+    }\n+\n+    static class TestObjectWithMultipleFields {\n+        @SuppressWarnings(\"unused\")\n+        private int one = 0;\n+\n+        @SuppressWarnings(\"unused\")\n+        private int two = 0;\n+\n+        @SuppressWarnings(\"unused\")\n+        private int three = 0;\n+\n+        public TestObjectWithMultipleFields(int one, int two, int three) {\n+            this.one = one;\n+            this.two = two;\n+            this.three = three;\n+        }\n+    }\n+\n+    /**\n+     * Test Objects pointing to each other.\n+     */\n+    public void testReflectionObjectCycle() {\n+        ReflectionTestCycleA a = new ReflectionTestCycleA();\n+        ReflectionTestCycleB b = new ReflectionTestCycleB();\n+        a.b = b;\n+        b.a = a;\n+        \n+        // Used to caused:\n+        // java.lang.StackOverflowError\n+        // at java.lang.ClassLoader.getCallerClassLoader(Native Method)\n+        // at java.lang.Class.getDeclaredFields(Class.java:992)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:373)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\n+        // at\n+        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\n+        // at\n+        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\n+\n+        a.hashCode();\n+        b.hashCode();\n+    }\n+\n+    /**\n+     * Ensures LANG-520 remains true\n+     */\n+    public void testToHashCodeEqualsHashCode() {\n+        HashCodeBuilder hcb = new HashCodeBuilder(17, 37).append(new Object()).append('a');\n+        assertEquals(\"hashCode() is no longer returning the same value as toHashCode() - see LANG-520\", \n+                     hcb.toHashCode(), hcb.hashCode());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.builder;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.SystemUtils;\n+import org.apache.commons.lang3.builder.ToStringStyleTest.Person;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.builder.MultiLineToStringStyleTest}.\n+ *\n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ */\n+public class MultiLineToStringStyleTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n+    \n+    public MultiLineToStringStyleTest(String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+    }\n+\n+    //----------------------------------------------------------------\n+    \n+    public void testBlank() {\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).toString());\n+    }\n+\n+    public void testAppendSuper() {\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"]\").toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\").toString());\n+        \n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=hello\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"  a=hello\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=hello\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"  b=4\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<Integer>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=[]\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a={}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a={}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testPerson() {\n+        Person p = new Person();\n+        p.name = \"Jane Doe\";\n+        p.age = 25;\n+        p.smoker = true;\n+        String pBaseStr = p.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p));\n+        assertEquals(pBaseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  name=Jane Doe\" + SystemUtils.LINE_SEPARATOR + \"  age=25\" + SystemUtils.LINE_SEPARATOR + \"  smoker=true\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"  b=4\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {<null>,5,{3,6}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {<null>,5,{3,6}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {1,2,-3,4}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {1,2,-3,4}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {{1,2},<null>,{5}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {{1,2},<null>,{5}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.builder;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.builder.ToStringStyleTest.Person;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.builder.NoFieldNamesToStringStyleTest}.\n+ *\n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ */\n+public class NoFieldNamesToStringStyleTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n+    \n+    public NoFieldNamesToStringStyleTest(String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+    }\n+\n+    //----------------------------------------------------------------\n+    \n+    public void testBlank() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n+    }\n+\n+    public void testAppendSuper() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n+        \n+        assertEquals(baseStr + \"[hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[<null>,hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(baseStr + \"[3,4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(baseStr + \"[<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n+        assertEquals(baseStr + \"[[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n+        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n+        assertEquals(baseStr + \"[{}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n+        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(baseStr + \"[{}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testPerson() {\n+        Person p = new Person();\n+        p.name = \"Ron Paul\";\n+        p.age = 72;\n+        p.smoker = false;\n+        String pBaseStr = p.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(p));\n+        assertEquals(pBaseStr + \"[Ron Paul,72,false]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(baseStr + \"[3,4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.builder;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+/**\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">ggregory</a>\n+ * @version $Id$\n+ */\n+public class ReflectionToStringBuilderExcludeTest extends TestCase {\n+\n+    class TestFixture {\n+        @SuppressWarnings(\"unused\")\n+        private String secretField = SECRET_VALUE;\n+\n+        @SuppressWarnings(\"unused\")\n+        private String showField = NOT_SECRET_VALUE;\n+    }\n+\n+    private static final String NOT_SECRET_FIELD = \"showField\";\n+\n+    private static final String NOT_SECRET_VALUE = \"Hello World!\";\n+\n+    private static final String SECRET_FIELD = \"secretField\";\n+\n+    private static final String SECRET_VALUE = \"secret value\";\n+\n+    public void test_toStringExclude() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), SECRET_FIELD);\n+        this.validateSecretFieldAbsent(toString);\n+    }\n+\n+    public void test_toStringExcludeArray() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{SECRET_FIELD});\n+        this.validateSecretFieldAbsent(toString);\n+    }\n+\n+    public void test_toStringExcludeArrayWithNull() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{null});\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeArrayWithNulls() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{null, null});\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeCollection() {\n+        List<String> excludeList = new ArrayList<String>();\n+        excludeList.add(SECRET_FIELD);\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n+        this.validateSecretFieldAbsent(toString);\n+    }\n+\n+    public void test_toStringExcludeCollectionWithNull() {\n+        List<String> excludeList = new ArrayList<String>();\n+        excludeList.add(null);\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeCollectionWithNulls() {\n+        List<String> excludeList = new ArrayList<String>();\n+        excludeList.add(null);\n+        excludeList.add(null);\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeEmptyArray() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY);\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeEmptyCollection() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new ArrayList<String>());\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeNullArray() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (String[]) null);\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeNullCollection() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (Collection<String>) null);\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    private void validateNonSecretField(String toString) {\n+        Assert.assertTrue(toString.indexOf(NOT_SECRET_FIELD) > ArrayUtils.INDEX_NOT_FOUND);\n+        Assert.assertTrue(toString.indexOf(NOT_SECRET_VALUE) > ArrayUtils.INDEX_NOT_FOUND);\n+    }\n+\n+    private void validateSecretFieldAbsent(String toString) {\n+        Assert.assertEquals(ArrayUtils.INDEX_NOT_FOUND, toString.indexOf(SECRET_VALUE));\n+        this.validateNonSecretField(toString);\n+    }\n+\n+    private void validateSecretFieldPresent(String toString) {\n+        Assert.assertTrue(toString.indexOf(SECRET_VALUE) > 0);\n+        this.validateNonSecretField(toString);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.builder;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+import org.apache.commons.lang3.builder.ToStringStyleTest.Person;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.builder.ToStringStyle#SHORT_PREFIX_STYLE}.\n+ * \n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id$\n+ */\n+public class ShortPrefixToStringStyleTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    private final String baseStr = \"Integer\";\n+    \n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.SHORT_PREFIX_STYLE);\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+    }\n+\n+    //----------------------------------------------------------------\n+    \n+    public void testBlank() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n+    }\n+\n+    public void testAppendSuper() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n+        \n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testPerson() {\n+        Person p = new Person();\n+        p.name = \"John Q. Public\";\n+        p.age = 45;\n+        p.smoker = true;\n+        String pBaseStr = \"ToStringStyleTest.Person\";\n+        assertEquals(pBaseStr + \"[name=John Q. Public,age=45,smoker=true]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.builder;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.builder.ToStringStyleTest.Person;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.builder.SimpleToStringStyleTest}.\n+ *\n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ */\n+public class SimpleToStringStyleTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    \n+    public SimpleToStringStyleTest(String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.SIMPLE_STYLE);\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+    }\n+\n+    //----------------------------------------------------------------\n+    \n+    public void testBlank() {\n+        assertEquals(\"\", new ToStringBuilder(base).toString());\n+    }\n+\n+    public void testAppendSuper() {\n+        assertEquals(\"\", new ToStringBuilder(base).appendSuper(\"\").toString());\n+        assertEquals(\"<null>\", new ToStringBuilder(base).appendSuper(\"<null>\").toString());\n+        \n+        assertEquals(\"hello\", new ToStringBuilder(base).appendSuper(\"\").append(\"a\", \"hello\").toString());\n+        assertEquals(\"<null>,hello\", new ToStringBuilder(base).appendSuper(\"<null>\").append(\"a\", \"hello\").toString());\n+        assertEquals(\"hello\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(\"3\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(\"3\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(\"3,4\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(\"<Integer>\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n+        assertEquals(\"[]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n+        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n+        assertEquals(\"{}\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n+        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(\"{}\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testPerson() {\n+        Person p = new Person();\n+        p.name = \"Jane Q. Public\";\n+        p.age = 47;\n+        p.smoker = false;\n+        assertEquals(\"Jane Q. Public,47,false\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(\"3\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(\"3\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(\"3,4\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(\"{<null>,5,{3,6}}\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(\"{<null>,5,{3,6}}\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(\"{1,2,-3,4}\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(\"{1,2,-3,4}\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(\"{{1,2},<null>,{5}}\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(\"{{1,2},<null>,{5}}\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.builder;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.builder.ToStringStyleTest.Person;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.builder.ToStringStyle}.\n+ *\n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ */\n+public class StandardToStringStyleTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    private final String baseStr = \"Integer\";\n+    \n+    private static final StandardToStringStyle STYLE = new StandardToStringStyle();\n+    \n+    static {\n+        STYLE.setUseShortClassName(true);\n+        STYLE.setUseIdentityHashCode(false);\n+        STYLE.setArrayStart(\"[\");\n+        STYLE.setArraySeparator(\", \");\n+        STYLE.setArrayEnd(\"]\");\n+        STYLE.setNullText(\"%NULL%\");\n+        STYLE.setSizeStartText(\"%SIZE=\");\n+        STYLE.setSizeEndText(\"%\");\n+        STYLE.setSummaryObjectStartText(\"%\");\n+        STYLE.setSummaryObjectEndText(\"%\");\n+    }\n+    \n+    public StandardToStringStyleTest(String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        ToStringBuilder.setDefaultStyle(STYLE);\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+    }\n+\n+    //----------------------------------------------------------------\n+    \n+    public void testBlank() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n+    }\n+\n+    public void testAppendSuper() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[%NULL%]\").toString());\n+        \n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[%NULL%,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[%NULL%]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(baseStr + \"[a=%NULL%]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(baseStr + \"[a=%Integer%]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n+        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n+        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testPerson() {\n+        Person p = new Person();\n+        p.name = \"Suzy Queue\";\n+        p.age = 19;\n+        p.smoker = false;\n+        String pBaseStr = \"ToStringStyleTest.Person\";\n+        assertEquals(pBaseStr + \"[name=Suzy Queue,age=19,smoker=false]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(baseStr + \"[[%NULL%, 5, [3, 6]]]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[[%NULL%, 5, [3, 6]]]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[[1, 2, -3, 4]]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[[1, 2, -3, 4]]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[[[1, 2], %NULL%, [5]]]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[[[1, 2], %NULL%, [5]]]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.builder;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang3.builder.ToStringBuilder}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @author <a href=\"mailto:alex@apache.org\">Alex Chaffee</a>\n+ * @version $Id$\n+ */\n+public class ToStringBuilderTest extends TestCase {\n+\n+    private final Integer base = new Integer(5);\n+    private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n+    \n+    public ToStringBuilderTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testConstructorEx1() {\n+        assertEquals(\"<null>\", new ToStringBuilder(null).toString());\n+    }\n+\n+    public void testConstructorEx2() {\n+        assertEquals(\"<null>\", new ToStringBuilder(null, null).toString());\n+        new ToStringBuilder(this.base, null).toString();\n+    }\n+\n+    public void testConstructorEx3() {\n+        assertEquals(\"<null>\", new ToStringBuilder(null, null, null).toString());\n+        new ToStringBuilder(this.base, null, null);\n+        new ToStringBuilder(this.base, ToStringStyle.DEFAULT_STYLE, null);\n+    }\n+\n+    public void testGetSetDefault() {\n+        try {\n+            ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);\n+            assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle());\n+        } finally {\n+            // reset for other tests\n+            ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n+        }\n+    }\n+\n+    public void testSetDefaultEx() {\n+        try {\n+            ToStringBuilder.setDefaultStyle(null);\n+            \n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testBlank() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n+    }\n+    \n+    /**\n+     * Test wrapper for int primitive.\n+     */\n+    public void testReflectionInteger() {\n+        assertEquals(baseStr + \"[value=5]\", ToStringBuilder.reflectionToString(base));\n+    }\n+\n+    /**\n+     * Test wrapper for char primitive.\n+     */\n+    public void testReflectionCharacter() {\n+        Character c = new Character('A');\n+        assertEquals(this.toBaseString(c) + \"[value=A]\", ToStringBuilder.reflectionToString(c));\n+    }\n+\n+    /**\n+     * Test wrapper for char boolean.\n+     */\n+    public void testReflectionBoolean() {\n+        Boolean b;\n+        b = Boolean.TRUE;\n+        assertEquals(this.toBaseString(b) + \"[value=true]\", ToStringBuilder.reflectionToString(b));\n+        b = Boolean.FALSE;\n+        assertEquals(this.toBaseString(b) + \"[value=false]\", ToStringBuilder.reflectionToString(b));\n+    }\n+\n+    /**\n+     * Create the same toString() as Object.toString().\n+     * @param o the object to create the string for.\n+     * @return a String in the Object.toString format.\n+     */\n+    private String toBaseString(Object o) {\n+        return o.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(o));\n+    }\n+    \n+    // Reflection Array tests\n+    \n+    //\n+    // Note on the following line of code repeated in the reflection array tests.\n+    //\n+    // assertReflectionArray(\"<null>\", array);\n+    //\n+    // The expected value is not baseStr + \"[<null>]\" since array==null and is typed as Object.\n+    // The null array does not carry array type information.\n+    // If we added a primitive array type constructor and pile of associated methods, \n+    // then type declaring type information could be carried forward. IMHO, null is null.\n+    //\n+    // Gary Gregory - 2003-03-12 - ggregory@seagullsw.com  \n+    //\n+    \n+    public void assertReflectionArray(String expected, Object actual) {\n+        if (actual == null) {\n+            // Until ToStringBuilder supports null objects.\n+            return;\n+        }\n+        assertEquals(expected, ToStringBuilder.reflectionToString(actual));\n+        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null));\n+        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, true));\n+        assertEquals(expected, ToStringBuilder.reflectionToString(actual, null, false));\n+    }\n+\n+    public void testReflectionObjectArray() {\n+        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionLongArray() {\n+        long[] array = new long[] { 1, 2, -3, 4 };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionIntArray() {\n+        int[] array = new int[] { 1, 2, -3, 4 };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionShortArray() {\n+        short[] array = new short[] { 1, 2, -3, 4 };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionyteArray() {\n+        byte[] array = new byte[] { 1, 2, -3, 4 };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionCharArray() {\n+        char[] array = new char[] { 'A', '2', '_', 'D' };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionDoubleArray() {\n+        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionFloatArray() {\n+        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionBooleanArray() {\n+        boolean[] array = new boolean[] { true, false, false };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+    \n+    // Reflection Array Array tests\n+\n+    public void testReflectionFloatArrayArray() {\n+        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+\n+    public void testReflectionLongArrayArray() {\n+        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionIntArrayArray() {\n+        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionhortArrayArray() {\n+        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionByteArrayArray() {\n+        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionCharArrayArray() {\n+        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionDoubleArrayArray() {\n+        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionBooleanArrayArray() {\n+        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n+        String baseStr = this.toBaseString(array);\n+        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));\n+        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));\n+        array = null;\n+        assertReflectionArray(\"<null>\", array);\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+    \n+    // Reflection hierarchy tests\n+\n+    public void testReflectionHierarchyArrayList() {\n+        List<Object> base = new ArrayList<Object>();\n+        String baseStr = this.toBaseString(base);\n+        assertEquals(baseStr + \"[elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>},size=0,modCount=0]\", ToStringBuilder.reflectionToString(base, null, true));\n+        assertEquals(baseStr + \"[size=0]\", ToStringBuilder.reflectionToString(base, null, false));\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionHierarchy() {\n+        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n+        String baseStr = this.toBaseString(baseA);\n+        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));\n+        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));\n+        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));\n+        assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));\n+        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));\n+        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));\n+        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));\n+        \n+        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n+        baseStr = this.toBaseString(baseB);\n+        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));\n+        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));\n+        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));\n+        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));\n+        assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));\n+        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));\n+        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));\n+        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));\n+        assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    static class ReflectionTestFixtureA {\n+        @SuppressWarnings(\"unused\")\n+        private char a='a';\n+        @SuppressWarnings(\"unused\")\n+        private transient char transientA='t';\n+    }\n+\n+    static class ReflectionTestFixtureB extends ReflectionTestFixtureA {\n+        @SuppressWarnings(\"unused\")\n+        private char b='b';\n+        @SuppressWarnings(\"unused\")\n+        private transient char transientB='t';\n+    }\n+\n+    public void testInnerClassReflection() {\n+        Outer outer = new Outer();\n+        assertEquals(toBaseString(outer) + \"[inner=\" + toBaseString(outer.inner) + \"[]]\", outer.toString());\n+    }\n+    \n+    static class Outer {\n+        Inner inner = new Inner();\n+        class Inner {\n+            @Override\n+            public String toString() {\n+                return ToStringBuilder.reflectionToString(this);\n+            }\n+        }\n+        @Override\n+        public String toString() {\n+            return ToStringBuilder.reflectionToString(this);\n+        }\n+    }\n+    \n+    // Reflection cycle tests\n+\n+    /**\n+     * Test an array element pointing to its container.\n+     */\n+    public void testReflectionArrayCycle() throws Exception {\n+        Object[] objects = new Object[1];\n+        objects[0] = objects;\n+        assertEquals(\n+            this.toBaseString(objects) + \"[{\" + this.toBaseString(objects) + \"}]\",\n+            ToStringBuilder.reflectionToString(objects));\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    /**\n+     * Test an array element pointing to its container.\n+     */\n+    public void testReflectionArrayCycleLevel2() throws Exception {\n+        Object[] objects = new Object[1];\n+        Object[] objectsLevel2 = new Object[1];\n+        objects[0] = objectsLevel2;\n+        objectsLevel2[0] = objects;\n+        assertEquals(\n+            this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n+            ToStringBuilder.reflectionToString(objects));\n+        assertEquals(\n+            this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n+            ToStringBuilder.reflectionToString(objectsLevel2));\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    public void testReflectionArrayArrayCycle() throws Exception {\n+        Object[][] objects = new Object[2][2];\n+        objects[0][0] = objects;\n+        objects[0][1] = objects;\n+        objects[1][0] = objects;\n+        objects[1][1] = objects;\n+        String basicToString = this.toBaseString(objects);\n+        assertEquals(\n+            basicToString\n+                + \"[{{\"\n+                + basicToString\n+                + \",\"\n+                + basicToString\n+                + \"},{\"\n+                + basicToString\n+                + \",\"\n+                + basicToString\n+                + \"}}]\",\n+            ToStringBuilder.reflectionToString(objects));\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    /**\n+     * A reflection test fixture.\n+     */\n+    static class ReflectionTestCycleA {\n+        ReflectionTestCycleB b;\n+\n+        @Override\n+        public String toString() {\n+            return ToStringBuilder.reflectionToString(this);\n+        }\n+    }\n+\n+    /**\n+     * A reflection test fixture.\n+     */\n+    static class ReflectionTestCycleB {\n+        ReflectionTestCycleA a;\n+\n+        @Override\n+        public String toString() {\n+            return ToStringBuilder.reflectionToString(this);\n+        }\n+    }\n+\n+    /**\n+     * A reflection test fixture.\n+     */\n+    static class SimpleReflectionTestFixture {\n+        Object o;\n+\n+        public SimpleReflectionTestFixture() {\n+        }\n+\n+        public SimpleReflectionTestFixture(Object o) {\n+            this.o = o;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return ToStringBuilder.reflectionToString(this);\n+        }\n+    }\n+\n+    private static class SelfInstanceVarReflectionTestFixture {\n+        @SuppressWarnings(\"unused\")\n+        private SelfInstanceVarReflectionTestFixture typeIsSelf;\n+\n+        public SelfInstanceVarReflectionTestFixture() {\n+            this.typeIsSelf = this;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return ToStringBuilder.reflectionToString(this);\n+        }\n+      }\n+    \n+    private static class SelfInstanceTwoVarsReflectionTestFixture {\n+        @SuppressWarnings(\"unused\")\n+        private SelfInstanceTwoVarsReflectionTestFixture typeIsSelf;\n+        private String otherType = \"The Other Type\";\n+\n+        public SelfInstanceTwoVarsReflectionTestFixture() {\n+            this.typeIsSelf = this;\n+        }\n+        \n+        public String getOtherType(){\n+            return this.otherType;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return ToStringBuilder.reflectionToString(this);\n+        }\n+      }\n+    \n+    \n+    /**\n+     * Test an Object pointing to itself, the simplest test.\n+     * \n+     * @throws Exception\n+     */\n+    public void testSimpleReflectionObjectCycle() throws Exception {\n+        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\n+        simple.o = simple;\n+        assertTrue(ToStringStyle.getRegistry().isEmpty());\n+        assertEquals(this.toBaseString(simple) + \"[o=\" + this.toBaseString(simple) + \"]\", simple.toString());\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+\n+    /**\n+     * Test a class that defines an ivar pointing to itself.\n+     * \n+     * @throws Exception\n+     */\n+    public void testSelfInstanceVarReflectionObjectCycle() throws Exception {\n+        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\n+        assertTrue(ToStringStyle.getRegistry().isEmpty());\n+        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \"]\", test.toString());\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+    \n+    /**\n+     * Test a class that defines an ivar pointing to itself.  This test was \n+     * created to show that handling cyclical object resulted in a missing endFieldSeparator call.\n+     * \n+     * @throws Exception\n+     */\n+    public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception {\n+        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();\n+        assertTrue(ToStringStyle.getRegistry().isEmpty());\n+        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \",otherType=\" + test.getOtherType().toString() + \"]\", test.toString());\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+    \n+\n+    /**\n+     * Test Objects pointing to each other.\n+     * \n+     * @throws Exception\n+     */\n+    public void testReflectionObjectCycle() throws Exception {\n+        ReflectionTestCycleA a = new ReflectionTestCycleA();\n+        ReflectionTestCycleB b = new ReflectionTestCycleB();\n+        a.b = b;\n+        b.a = a;\n+        assertEquals(\n+            this.toBaseString(a) + \"[b=\" + this.toBaseString(b) + \"[a=\" + this.toBaseString(a) + \"]]\",\n+            a.toString());\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+    \n+    /**\n+     * Test a nasty combination of arrays and Objects pointing to each other.\n+     * objects[0] -> SimpleReflectionTestFixture[ o -> objects ]\n+     * \n+     * @throws Exception\n+     */\n+    public void testReflectionArrayAndObjectCycle() throws Exception {\n+        Object[] objects = new Object[1];\n+        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n+        objects[0] = simple;\n+        assertEquals(\n+            this.toBaseString(objects)\n+                + \"[{\"\n+                + this.toBaseString(simple)\n+                + \"[o=\"\n+                + this.toBaseString(objects)\n+                + \"]\"\n+                + \"}]\",\n+            ToStringBuilder.reflectionToString(objects));\n+        assertEquals(\n+            this.toBaseString(simple)\n+                + \"[o={\"\n+                + this.toBaseString(simple)\n+                + \"}]\",\n+            ToStringBuilder.reflectionToString(simple));\n+        this.validateEmptyToStringStyleRegistry();\n+    }\n+        \n+    void validateEmptyToStringStyleRegistry() {\n+       if (!ToStringStyle.getRegistry().isEmpty()) {\n+           System.out.println(ToStringStyle.getRegistry());\n+       }\n+       \n+        assertTrue(ToStringStyle.getRegistry().isEmpty());        \n+    }\n+    //  End: Reflection cycle tests\n+\n+    public void testAppendSuper() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n+        \n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n+    public void testAppendToString() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendToString(\"Integer@8888[]\").toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendToString(\"Integer@8888[<null>]\").toString());\n+        \n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendToString(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendToString(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendToString(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n+    public void testObject() {\n+        Integer i3 = new Integer(3);\n+        Integer i4 = new Integer(4);\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n+        assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n+        assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(3L).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n+    }\n+\n+    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n+    public void testInt() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((int) 3).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (int) 3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (int) 3).append(\"b\", (int) 4).toString());\n+    }\n+\n+    public void testShort() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((short) 3).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (short) 3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (short) 3).append(\"b\", (short) 4).toString());\n+    }\n+\n+    public void testChar() {\n+        assertEquals(baseStr + \"[A]\", new ToStringBuilder(base).append((char) 65).toString());\n+        assertEquals(baseStr + \"[a=A]\", new ToStringBuilder(base).append(\"a\", (char) 65).toString());\n+        assertEquals(baseStr + \"[a=A,b=B]\", new ToStringBuilder(base).append(\"a\", (char) 65).append(\"b\", (char) 66).toString());\n+    }\n+\n+    public void testByte() {\n+        assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((byte) 3).toString());\n+        assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (byte) 3).toString());\n+        assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", (byte) 3).append(\"b\", (byte) 4).toString());\n+    }\n+\n+    @SuppressWarnings(\"cast\")\n+    public void testDouble() {\n+        assertEquals(baseStr + \"[3.2]\", new ToStringBuilder(base).append((double) 3.2).toString());\n+        assertEquals(baseStr + \"[a=3.2]\", new ToStringBuilder(base).append(\"a\", (double) 3.2).toString());\n+        assertEquals(baseStr + \"[a=3.2,b=4.3]\", new ToStringBuilder(base).append(\"a\", (double) 3.2).append(\"b\", (double) 4.3).toString());\n+    }\n+\n+    public void testFloat() {\n+        assertEquals(baseStr + \"[3.2]\", new ToStringBuilder(base).append((float) 3.2).toString());\n+        assertEquals(baseStr + \"[a=3.2]\", new ToStringBuilder(base).append(\"a\", (float) 3.2).toString());\n+        assertEquals(baseStr + \"[a=3.2,b=4.3]\", new ToStringBuilder(base).append(\"a\", (float) 3.2).append(\"b\", (float) 4.3).toString());\n+    }\n+\n+    public void testBoolean() {\n+        assertEquals(baseStr + \"[true]\", new ToStringBuilder(base).append(true).toString());\n+        assertEquals(baseStr + \"[a=true]\", new ToStringBuilder(base).append(\"a\", true).toString());\n+        assertEquals(baseStr + \"[a=true,b=false]\", new ToStringBuilder(base).append(\"a\", true).append(\"b\", false).toString());\n+    }\n+\n+\n+    public void testObjectArray() {\n+        Object[] array = new Object[] {null, base, new int[] {3, 6}};\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArray() {\n+        long[] array = new long[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testIntArray() {\n+        int[] array = new int[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testShortArray() {\n+        short[] array = new short[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+    \n+    public void testByteArray() {\n+        byte[] array = new byte[] {1, 2, -3, 4};\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1,2,-3,4}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testCharArray() {\n+        char[] array = new char[] {'A', '2', '_', 'D'};\n+        assertEquals(baseStr + \"[{A,2,_,D}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{A,2,_,D}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testDoubleArray() {\n+        double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3};\n+        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testFloatArray() {\n+        float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f};\n+        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+    \n+    public void testBooleanArray() {\n+        boolean[] array = new boolean[] {true, false, false};\n+        assertEquals(baseStr + \"[{true,false,false}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{true,false,false}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testLongArrayArray() {\n+        long[][] array = new long[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testIntArrayArray() {\n+        int[][] array = new int[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testShortArrayArray() {\n+        short[][] array = new short[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testByteArrayArray() {\n+        byte[][] array = new byte[][] {{1, 2}, null, {5}};\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testCharArrayArray() {\n+        char[][] array = new char[][] {{'A', 'B'}, null, {'p'}};\n+        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testDoubleArrayArray() {\n+        double[][] array = new double[][] {{1.0, 2.29686}, null, {Double.NaN}};\n+        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testFloatArrayArray() {\n+        float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}};\n+        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testBooleanArrayArray() {\n+        boolean[][] array = new boolean[][] {{true, false}, null, {false}};\n+        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", new ToStringBuilder(base).append((Object) array).toString());\n+        array = null;\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(array).toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) array).toString());\n+    }\n+\n+    public void testObjectCycle() {\n+        ObjectCycle a = new ObjectCycle();\n+        ObjectCycle b = new ObjectCycle();\n+        a.obj = b;\n+        b.obj = a;\n+       \n+        String expected = toBaseString(a) + \"[\" + toBaseString(b) + \"[\" + toBaseString(a) + \"]]\";\n+        assertEquals(expected, a.toString());\n+        validateEmptyToStringStyleRegistry();\n+    }\n+    \n+    static class ObjectCycle {\n+        Object obj;\n+       \n+        @Override\n+        public String toString() {\n+            return new ToStringBuilder(this).append(obj).toString();\n+        }\n+    }\n+    \n+    public void testSimpleReflectionStatics() {\n+        SimpleReflectionStaticFieldsFixture instance1 = new SimpleReflectionStaticFieldsFixture();\n+        assertEquals(\n+            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n+            ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));\n+        assertEquals(\n+            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n+            ReflectionToStringBuilder.toString(instance1, null, true, true, SimpleReflectionStaticFieldsFixture.class));\n+        assertEquals(\n+            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n+            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n+        assertEquals(\n+            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n+            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n+    }\n+\n+    /**\n+     * Tests ReflectionToStringBuilder.toString() for statics.\n+     */\n+    public void testReflectionStatics() {\n+        ReflectionStaticFieldsFixture instance1 = new ReflectionStaticFieldsFixture();\n+        assertEquals(\n+            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]\",\n+            ReflectionToStringBuilder.toString(instance1, null, false, true, ReflectionStaticFieldsFixture.class));\n+        assertEquals(\n+            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,staticTransientString=staticTransientString,staticTransientInt=54321,instanceString=instanceString,instanceInt=67890,transientString=transientString,transientInt=98765]\",\n+            ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class));\n+        assertEquals(\n+            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]\",\n+            this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));\n+        assertEquals(\n+            this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]\",\n+            this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));\n+    }\n+\n+    /**\n+     * Tests ReflectionToStringBuilder.toString() for statics.\n+     */\n+    public void testInheritedReflectionStatics() {\n+        InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture();\n+        assertEquals(\n+            this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890]\",\n+            ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class));\n+        assertEquals(\n+            this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]\",\n+            ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));\n+        assertEquals(\n+            this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]\",\n+            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n+        assertEquals(\n+            this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]\",\n+            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n+    }\n+\n+    /**\n+     * <p>This method uses reflection to build a suitable\n+     * <code>toString</code> value which includes static fields.</p>\n+     *\n+     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run\n+     * under a security manager, if the permissions are not set up correctly.\n+     * It is also not as efficient as testing explicitly. </p>\n+     *\n+     * <p>Transient fields are not output.</p>\n+     *\n+     * <p>Superclass fields will be appended up to and including the specified superclass. \n+     * A null superclass is treated as <code>java.lang.Object</code>.</p>\n+     *\n+     * <p>If the style is <code>null</code>, the default\n+     * <code>ToStringStyle</code> is used.</p>\n+     * \n+     * @param object  the Object to be output\n+     * @param style  the style of the <code>toString</code> to create,\n+     *  may be <code>null</code>\n+     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n+     *  may be <code>null</code>\n+     * @return the String result\n+     * @throws IllegalArgumentException if the Object is <code>null</code>\n+     */\n+    public Object toStringWithStatics(Object object, ToStringStyle style, Class reflectUpToClass) {\n+        return ReflectionToStringBuilder.toString(object, style, false, true, reflectUpToClass);\n+    }\n+\n+    /**\n+     * Tests ReflectionToStringBuilder setUpToClass().\n+     */\n+    public void test_setUpToClass_valid() {\n+        Integer val = new Integer(5);\n+        ReflectionToStringBuilder test = new ReflectionToStringBuilder(val);\n+        test.setUpToClass(Number.class);\n+    }\n+    \n+    /**\n+     * Tests ReflectionToStringBuilder setUpToClass().\n+     */\n+    public void test_setUpToClass_invalid() {\n+        Integer val = new Integer(5);\n+        ReflectionToStringBuilder test = new ReflectionToStringBuilder(val);\n+        try {\n+            test.setUpToClass(String.class);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+    \n+    /**\n+     * Tests ReflectionToStringBuilder.toString() for statics.\n+     */\n+    class ReflectionStaticFieldsFixture {\n+        static final String staticString = \"staticString\";\n+        static final int staticInt = 12345;\n+        static final transient String staticTransientString = \"staticTransientString\";\n+        static final transient int staticTransientInt = 54321;\n+        String instanceString = \"instanceString\";\n+        int instanceInt = 67890;\n+        transient String transientString = \"transientString\";\n+        transient int transientInt = 98765;\n+    }\n+\n+    /**\n+     * Test fixture for ReflectionToStringBuilder.toString() for statics.\n+     */\n+    class SimpleReflectionStaticFieldsFixture {\n+        static final String staticString = \"staticString\";\n+        static final int staticInt = 12345;\n+    }\n+\n+    /**\n+     * Test fixture for ReflectionToStringBuilder.toString() for statics.\n+     */\n+    class InheritedReflectionStaticFieldsFixture extends SimpleReflectionStaticFieldsFixture {\n+        static final String staticString2 = \"staticString2\";\n+        static final int staticInt2 = 67890;\n+    }\n+\n+    public void testReflectionNull() {\n+        assertEquals(\"<null>\", ReflectionToStringBuilder.toString(null));\n+    }\n+\n+    /**\n+     * Points out failure to print anything from appendToString methods using MULTI_LINE_STYLE.\n+     * See issue LANG-372.\n+     */\n+    class MultiLineTestObject {\n+        Integer i = new Integer(31337);\n+        @Override\n+        public String toString() {\n+            return new ToStringBuilder(this).append(\"testInt\", i).toString();\n+        }\n+    }\n+\n+    public void testAppendToStringUsingMultiLineStyle() {\n+        MultiLineTestObject obj = new MultiLineTestObject();\n+        ToStringBuilder testBuilder = new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)\n+                                          .appendToString(obj.toString());\n+        assertEquals(testBuilder.toString().indexOf(\"testInt=31337\"), -1);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/ToStringStyleTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.builder;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test case for ToStringStyle.\n+ * \n+ * @author Masato Tezuka\n+ * @version $Id$\n+ */\n+public class ToStringStyleTest extends TestCase {\n+\n+    public ToStringStyleTest(String name) {\n+        super(name);\n+    }\n+\n+    private static class ToStringStyleImpl extends ToStringStyle {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetArrayStart() {\n+        ToStringStyle style = new ToStringStyleImpl();\n+        style.setArrayStart(null);\n+        assertEquals(\"\", style.getArrayStart());\n+    }\n+\n+    public void testSetArrayEnd() {\n+        ToStringStyle style = new ToStringStyleImpl();\n+        style.setArrayEnd(null);\n+        assertEquals(\"\", style.getArrayEnd());\n+    }\n+\n+    public void testSetArraySeparator() {\n+        ToStringStyle style = new ToStringStyleImpl();\n+        style.setArraySeparator(null);\n+        assertEquals(\"\", style.getArraySeparator());\n+    }\n+\n+    public void testSetContentStart() {\n+        ToStringStyle style = new ToStringStyleImpl();\n+        style.setContentStart(null);\n+        assertEquals(\"\", style.getContentStart());\n+    }\n+\n+    public void testSetContentEnd() {\n+        ToStringStyle style = new ToStringStyleImpl();\n+        style.setContentEnd(null);\n+        assertEquals(\"\", style.getContentEnd());\n+    }\n+\n+    public void testSetFieldNameValueSeparator() {\n+        ToStringStyle style = new ToStringStyleImpl();\n+        style.setFieldNameValueSeparator(null);\n+        assertEquals(\"\", style.getFieldNameValueSeparator());\n+    }\n+\n+    public void testSetFieldSeparator() {\n+        ToStringStyle style = new ToStringStyleImpl();\n+        style.setFieldSeparator(null);\n+        assertEquals(\"\", style.getFieldSeparator());\n+    }\n+\n+    public void testSetNullText() {\n+        ToStringStyle style = new ToStringStyleImpl();\n+        style.setNullText(null);\n+        assertEquals(\"\", style.getNullText());\n+    }\n+\n+    public void testSetSizeStartText() {\n+        ToStringStyle style = new ToStringStyleImpl();\n+        style.setSizeStartText(null);\n+        assertEquals(\"\", style.getSizeStartText());\n+    }\n+\n+    public void testSetSizeEndText() {\n+        ToStringStyle style = new ToStringStyleImpl();\n+        style.setSizeEndText(null);\n+        assertEquals(\"\", style.getSizeEndText());\n+    }\n+\n+    public void testSetSummaryObjectStartText() {\n+        ToStringStyle style = new ToStringStyleImpl();\n+        style.setSummaryObjectStartText(null);\n+        assertEquals(\"\", style.getSummaryObjectStartText());\n+    }\n+\n+    public void testSetSummaryObjectEndText() {\n+        ToStringStyle style = new ToStringStyleImpl();\n+        style.setSummaryObjectEndText(null);\n+        assertEquals(\"\", style.getSummaryObjectEndText());\n+    }\n+\n+    /**\n+     * An object used to test {@link ToStringStyle}.\n+     * \n+     * @author Scott Bassin\n+     */\n+    static class Person {\n+        /**\n+         * Test String field.\n+         */\n+        String name;\n+\n+        /**\n+         * Test integer field.\n+         */\n+        int age;\n+\n+        /**\n+         * Test boolean field.\n+         */\n+        boolean smoker;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.concurrent;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import junit.framework.TestCase;\n+\n+public class BackgroundInitializerTest extends TestCase {\n+    /**\n+     * Helper method for checking whether the initialize() method was correctly\n+     * called. start() must already have been invoked.\n+     *\n+     * @param init the initializer to test\n+     */\n+    private void checkInitialize(BackgroundInitializerTestImpl init) {\n+        try {\n+            Integer result = init.get();\n+            assertEquals(\"Wrong result\", 1, result.intValue());\n+            assertEquals(\"Wrong number of invocations\", 1, init.initializeCalls);\n+            assertNotNull(\"No future\", init.getFuture());\n+        } catch (ConcurrentException cex) {\n+            fail(\"Unexpected exception: \" + cex);\n+        }\n+    }\n+\n+    /**\n+     * Tests whether initialize() is invoked.\n+     */\n+    public void testInitialize() {\n+        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n+        init.start();\n+        checkInitialize(init);\n+    }\n+\n+    /**\n+     * Tries to obtain the executor before start(). It should not have been\n+     * initialized yet.\n+     */\n+    public void testGetActiveExecutorBeforeStart() {\n+        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n+        assertNull(\"Got an executor\", init.getActiveExecutor());\n+    }\n+\n+    /**\n+     * Tests whether an external executor is correctly detected.\n+     */\n+    public void testGetActiveExecutorExternal() {\n+        ExecutorService exec = Executors.newSingleThreadExecutor();\n+        try {\n+            BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(\n+                    exec);\n+            init.start();\n+            assertSame(\"Wrong executor\", exec, init.getActiveExecutor());\n+            checkInitialize(init);\n+        } finally {\n+            exec.shutdown();\n+        }\n+    }\n+\n+    /**\n+     * Tests getActiveExecutor() for a temporary executor.\n+     */\n+    public void testGetActiveExecutorTemp() {\n+        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n+        init.start();\n+        assertNotNull(\"No active executor\", init.getActiveExecutor());\n+        checkInitialize(init);\n+    }\n+\n+    /**\n+     * Tests the execution of the background task if a temporary executor has to\n+     * be created.\n+     */\n+    public void testInitializeTempExecutor() {\n+        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n+        assertTrue(\"Wrong result of start()\", init.start());\n+        checkInitialize(init);\n+        assertTrue(\"Executor not shutdown\", init.getActiveExecutor()\n+                .isShutdown());\n+    }\n+\n+    /**\n+     * Tests whether an external executor can be set using the\n+     * setExternalExecutor() method.\n+     */\n+    public void testSetExternalExecutor() throws Exception {\n+        ExecutorService exec = Executors.newCachedThreadPool();\n+        try {\n+            BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n+            init.setExternalExecutor(exec);\n+            assertEquals(\"Wrong executor service\", exec, init\n+                    .getExternalExecutor());\n+            assertTrue(\"Wrong result of start()\", init.start());\n+            assertSame(\"Wrong active executor\", exec, init.getActiveExecutor());\n+            checkInitialize(init);\n+            assertFalse(\"Executor was shutdown\", exec.isShutdown());\n+        } finally {\n+            exec.shutdown();\n+        }\n+    }\n+\n+    /**\n+     * Tests that setting an executor after start() causes an exception.\n+     */\n+    public void testSetExternalExecutorAfterStart() throws ConcurrentException {\n+        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n+        init.start();\n+        try {\n+            init.setExternalExecutor(Executors.newSingleThreadExecutor());\n+            fail(\"Could set executor after start()!\");\n+        } catch (IllegalStateException istex) {\n+            init.get();\n+        }\n+    }\n+\n+    /**\n+     * Tests invoking start() multiple times. Only the first invocation should\n+     * have an effect.\n+     */\n+    public void testStartMultipleTimes() {\n+        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n+        assertTrue(\"Wrong result for start()\", init.start());\n+        for (int i = 0; i < 10; i++) {\n+            assertFalse(\"Could start again\", init.start());\n+        }\n+        checkInitialize(init);\n+    }\n+\n+    /**\n+     * Tests calling get() before start(). This should cause an exception.\n+     */\n+    public void testGetBeforeStart() throws ConcurrentException {\n+        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n+        try {\n+            init.get();\n+            fail(\"Could call get() before start()!\");\n+        } catch (IllegalStateException istex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests the get() method if background processing causes a runtime\n+     * exception.\n+     */\n+    public void testGetRuntimeException() throws Exception {\n+        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n+        RuntimeException rex = new RuntimeException();\n+        init.ex = rex;\n+        init.start();\n+        try {\n+            init.get();\n+            fail(\"Exception not thrown!\");\n+        } catch (Exception ex) {\n+            assertEquals(\"Runtime exception not thrown\", rex, ex);\n+        }\n+    }\n+\n+    /**\n+     * Tests the get() method if background processing causes a checked\n+     * exception.\n+     */\n+    public void testGetCheckedException() throws Exception {\n+        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n+        Exception ex = new Exception();\n+        init.ex = ex;\n+        init.start();\n+        try {\n+            init.get();\n+            fail(\"Exception not thrown!\");\n+        } catch (ConcurrentException cex) {\n+            assertEquals(\"Exception not thrown\", ex, cex.getCause());\n+        }\n+    }\n+\n+    /**\n+     * Tests the get() method if waiting for the initialization is interrupted.\n+     */\n+    public void testGetInterruptedException() throws Exception {\n+        ExecutorService exec = Executors.newSingleThreadExecutor();\n+        final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(\n+                exec);\n+        final CountDownLatch latch1 = new CountDownLatch(1);\n+        init.shouldSleep = true;\n+        init.start();\n+        final AtomicReference<InterruptedException> iex = new AtomicReference<InterruptedException>();\n+        Thread getThread = new Thread() {\n+            @Override\n+            public void run() {\n+                try {\n+                    init.get();\n+                } catch (ConcurrentException cex) {\n+                    if (cex.getCause() instanceof InterruptedException) {\n+                        iex.set((InterruptedException) cex.getCause());\n+                    }\n+                } finally {\n+                    assertTrue(\"Thread not interrupted\", isInterrupted());\n+                    latch1.countDown();\n+                }\n+            }\n+        };\n+        getThread.start();\n+        getThread.interrupt();\n+        latch1.await();\n+        exec.shutdownNow();\n+        exec.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);\n+        assertNotNull(\"No interrupted exception\", iex.get());\n+    }\n+\n+    /**\n+     * Tests isStarted() before start() was called.\n+     */\n+    public void testIsStartedFalse() {\n+        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n+        assertFalse(\"Already started\", init.isStarted());\n+    }\n+\n+    /**\n+     * Tests isStarted() after start().\n+     */\n+    public void testIsStartedTrue() {\n+        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n+        init.start();\n+        assertTrue(\"Not started\", init.isStarted());\n+    }\n+\n+    /**\n+     * Tests isStarted() after the background task has finished.\n+     */\n+    public void testIsStartedAfterGet() {\n+        BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n+        init.start();\n+        checkInitialize(init);\n+        assertTrue(\"Not started\", init.isStarted());\n+    }\n+\n+    /**\n+     * A concrete implementation of BackgroundInitializer. It also overloads\n+     * some methods that simplify testing.\n+     */\n+    private static class BackgroundInitializerTestImpl extends\n+            BackgroundInitializer<Integer> {\n+        /** An exception to be thrown by initialize(). */\n+        Exception ex;\n+\n+        /** A flag whether the background task should sleep a while. */\n+        boolean shouldSleep;\n+\n+        /** The number of invocations of initialize(). */\n+        volatile int initializeCalls;\n+\n+        public BackgroundInitializerTestImpl() {\n+            super();\n+        }\n+\n+        public BackgroundInitializerTestImpl(ExecutorService exec) {\n+            super(exec);\n+        }\n+\n+        /**\n+         * Records this invocation. Optionally throws an exception or sleeps a\n+         * while.\n+         */\n+        @Override\n+        protected Integer initialize() throws Exception {\n+            if (ex != null) {\n+                throw ex;\n+            }\n+            if (shouldSleep) {\n+                Thread.sleep(60000L);\n+            }\n+            return ++initializeCalls;\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.concurrent;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test class for {@code CallableBackgroundInitializer}\n+ *\n+ * @version $Id$\n+ */\n+public class CallableBackgroundInitializerTest extends TestCase {\n+    /** Constant for the result of the call() invocation. */\n+    private static final Integer RESULT = 42;\n+\n+    /**\n+     * Tries to create an instance without a Callable. This should cause an\n+     * exception.\n+     */\n+    public void testInitNullCallable() {\n+        try {\n+            new CallableBackgroundInitializer<Object>(null);\n+            fail(\"Could create instance without a Callable!\");\n+        } catch (IllegalArgumentException iex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests whether the executor service is correctly passed to the super\n+     * class.\n+     */\n+    public void testInitExecutor() {\n+        ExecutorService exec = Executors.newSingleThreadExecutor();\n+        CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(\n+                new TestCallable(), exec);\n+        assertEquals(\"Executor not set\", exec, init.getExternalExecutor());\n+    }\n+\n+    /**\n+     * Tries to pass a null Callable to the constructor that takes an executor.\n+     * This should cause an exception.\n+     */\n+    public void testInitExecutorNullCallable() {\n+        ExecutorService exec = Executors.newSingleThreadExecutor();\n+        try {\n+            new CallableBackgroundInitializer<Integer>(null, exec);\n+            fail(\"Could create instance without a Callable!\");\n+        } catch (IllegalArgumentException iex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests the implementation of initialize().\n+     */\n+    public void testInitialize() throws Exception {\n+        TestCallable call = new TestCallable();\n+        CallableBackgroundInitializer<Integer> init = new CallableBackgroundInitializer<Integer>(\n+                call);\n+        assertEquals(\"Wrong result\", RESULT, init.initialize());\n+        assertEquals(\"Wrong number of invocations\", 1, call.callCount);\n+    }\n+\n+    /**\n+     * A test Callable implementation for checking the initializer's\n+     * implementation of the initialize() method.\n+     */\n+    private static class TestCallable implements Callable<Integer> {\n+        /** A counter for the number of call() invocations. */\n+        int callCount;\n+\n+        /**\n+         * Records this invocation and returns the test result.\n+         */\n+        public Integer call() throws Exception {\n+            callCount++;\n+            return RESULT;\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.concurrent;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test class for {@link ConcurrentUtils}.\n+ *\n+ * @version $Id$\n+ */\n+public class ConcurrentUtilsTest extends TestCase {\n+    /**\n+     * Tests creating a ConcurrentException with a runtime exception as cause.\n+     */\n+    public void testConcurrentExceptionCauseUnchecked() {\n+        try {\n+            new ConcurrentException(new RuntimeException());\n+            fail(\"Could create ConcurrentException with unchecked cause!\");\n+        } catch (IllegalArgumentException iex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests creating a ConcurrentException with an error as cause.\n+     */\n+    public void testConcurrentExceptionCauseError() {\n+        try {\n+            new ConcurrentException(\"An error\", new Error());\n+            fail(\"Could create ConcurrentException with an error cause!\");\n+        } catch (IllegalArgumentException iex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests creating a ConcurrentException with null as cause.\n+     */\n+    public void testConcurrentExceptionCauseNull() {\n+        try {\n+            new ConcurrentException(null);\n+            fail(\"Could create ConcurrentException with null cause!\");\n+        } catch (IllegalArgumentException iex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests extractCause() for a null exception.\n+     */\n+    public void testExtractCauseNull() {\n+        assertNull(\"Non null result\", ConcurrentUtils.extractCause(null));\n+    }\n+\n+    /**\n+     * Tests extractCause() if the cause of the passed in exception is null.\n+     */\n+    public void testExtractCauseNullCause() {\n+        assertNull(\"Non null result\", ConcurrentUtils\n+                .extractCause(new ExecutionException(\"Test\", null)));\n+    }\n+\n+    /**\n+     * Tests extractCause() if the cause is an error.\n+     */\n+    public void testExtractCauseError() {\n+        Error err = new AssertionError(\"Test\");\n+        try {\n+            ConcurrentUtils.extractCause(new ExecutionException(err));\n+            fail(\"Error not thrown!\");\n+        } catch (Error e) {\n+            assertEquals(\"Wrong error\", err, e);\n+        }\n+    }\n+\n+    /**\n+     * Tests extractCause() if the cause is an unchecked exception.\n+     */\n+    public void testExtractCauseUnchecked() {\n+        RuntimeException rex = new RuntimeException(\"Test\");\n+        try {\n+            ConcurrentUtils.extractCause(new ExecutionException(rex));\n+            fail(\"Runtime exception not thrown!\");\n+        } catch (RuntimeException r) {\n+            assertEquals(\"Wrong exception\", rex, r);\n+        }\n+    }\n+\n+    /**\n+     * Tests extractCause() if the cause is a checked exception.\n+     */\n+    public void testExtractCauseChecked() {\n+        Exception ex = new Exception(\"Test\");\n+        ConcurrentException cex = ConcurrentUtils\n+                .extractCause(new ExecutionException(ex));\n+        assertSame(\"Wrong cause\", ex, cex.getCause());\n+    }\n+\n+    /**\n+     * Tests handleCause() if the cause is an error.\n+     */\n+    public void testHandleCauseError() throws ConcurrentException {\n+        Error err = new AssertionError(\"Test\");\n+        try {\n+            ConcurrentUtils.handleCause(new ExecutionException(err));\n+            fail(\"Error not thrown!\");\n+        } catch (Error e) {\n+            assertEquals(\"Wrong error\", err, e);\n+        }\n+    }\n+\n+    /**\n+     * Tests handleCause() if the cause is an unchecked exception.\n+     */\n+    public void testHandleCauseUnchecked() throws ConcurrentException {\n+        RuntimeException rex = new RuntimeException(\"Test\");\n+        try {\n+            ConcurrentUtils.handleCause(new ExecutionException(rex));\n+            fail(\"Runtime exception not thrown!\");\n+        } catch (RuntimeException r) {\n+            assertEquals(\"Wrong exception\", rex, r);\n+        }\n+    }\n+\n+    /**\n+     * Tests handleCause() if the cause is a checked exception.\n+     */\n+    public void testHandleCauseChecked() {\n+        Exception ex = new Exception(\"Test\");\n+        try {\n+            ConcurrentUtils.handleCause(new ExecutionException(ex));\n+            fail(\"ConcurrentException not thrown!\");\n+        } catch (ConcurrentException cex) {\n+            assertEquals(\"Wrong cause\", ex, cex.getCause());\n+        }\n+    }\n+\n+    /**\n+     * Tests handleCause() for a null parameter or a null cause. In this case\n+     * the method should do nothing. We can only test that no exception is\n+     * thrown.\n+     */\n+    public void testHandleCauseNull() throws ConcurrentException {\n+        ConcurrentUtils.handleCause(null);\n+        ConcurrentUtils.handleCause(new ExecutionException(\"Test\", null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests constant future.\n+     */\n+    public void testConstantFuture_Integer() throws Exception {\n+        Integer value = new Integer(5);\n+        Future<Integer> test = ConcurrentUtils.constantFuture(value);\n+        assertEquals(true, test.isDone());\n+        assertSame(value, test.get());\n+        assertSame(value, test.get(1000, TimeUnit.SECONDS));\n+        assertSame(value, test.get(1000, null));\n+        assertEquals(false, test.isCancelled());\n+        assertEquals(false, test.cancel(true));\n+        assertEquals(false, test.cancel(false));\n+    }\n+\n+    /**\n+     * Tests constant future.\n+     */\n+    public void testConstantFuture_null() throws Exception {\n+        Integer value = null;\n+        Future<Integer> test = ConcurrentUtils.constantFuture(value);\n+        assertEquals(true, test.isDone());\n+        assertSame(value, test.get());\n+        assertSame(value, test.get(1000, TimeUnit.SECONDS));\n+        assertSame(value, test.get(1000, null));\n+        assertEquals(false, test.isCancelled());\n+        assertEquals(false, test.cancel(true));\n+        assertEquals(false, test.cancel(false));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/LazyInitializerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.concurrent;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test class for {@code LazyInitializer}.\n+ *\n+ * @version $Id$\n+ */\n+public class LazyInitializerTest extends TestCase {\n+    /** The initializer to be tested. */\n+    private LazyInitializerTestImpl initializer;\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        initializer = new LazyInitializerTestImpl();\n+    }\n+\n+    /**\n+     * Tests obtaining the managed object.\n+     */\n+    public void testGet() {\n+        assertNotNull(\"No managed object\", initializer.get());\n+    }\n+\n+    /**\n+     * Tests whether sequential get() invocations always return the same\n+     * instance.\n+     */\n+    public void testGetMultipleTimes() {\n+        Object obj = initializer.get();\n+        for (int i = 0; i < 10; i++) {\n+            assertEquals(\"Got different object at \" + i, obj, initializer.get());\n+        }\n+    }\n+\n+    /**\n+     * Tests invoking get() from multiple threads concurrently.\n+     */\n+    public void testGetConcurrent() throws InterruptedException {\n+        final int threadCount = 20;\n+        final CountDownLatch startLatch = new CountDownLatch(1);\n+        class GetThread extends Thread {\n+            Object object;\n+\n+            @Override\n+            public void run() {\n+                try {\n+                    // wait until all threads are ready for maximum parallelism\n+                    startLatch.await();\n+                    // access the initializer\n+                    object = initializer.get();\n+                } catch (InterruptedException iex) {\n+                    // ignore\n+                }\n+            }\n+        }\n+\n+        GetThread[] threads = new GetThread[threadCount];\n+        for (int i = 0; i < threadCount; i++) {\n+            threads[i] = new GetThread();\n+            threads[i].start();\n+        }\n+\n+        // fire all threads and wait until they are ready\n+        startLatch.countDown();\n+        for (Thread t : threads) {\n+            t.join();\n+        }\n+\n+        // check results\n+        Object managedObject = initializer.get();\n+        for (GetThread t : threads) {\n+            assertEquals(\"Wrong object\", managedObject, t.object);\n+        }\n+    }\n+\n+    /**\n+     * A test implementation of LazyInitializer. This class creates a plain\n+     * Object. As Object does not provide a specific equals() method, it is easy\n+     * to check whether multiple instances were created.\n+     */\n+    private static class LazyInitializerTestImpl extends\n+            LazyInitializer<Object> {\n+        @Override\n+        protected Object initialize() {\n+            return new Object();\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.concurrent;\n+\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test class for {@link MultiBackgroundInitializer}.\n+ *\n+ * @version $Id$\n+ */\n+public class MultiBackgroundInitializerTest extends TestCase {\n+    /** Constant for the names of the child initializers. */\n+    private static final String CHILD_INIT = \"childInitializer\";\n+\n+    /** The initializer to be tested. */\n+    private MultiBackgroundInitializer initializer;\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        initializer = new MultiBackgroundInitializer();\n+    }\n+\n+    /**\n+     * Tests whether a child initializer has been executed. Optionally the\n+     * expected executor service can be checked, too.\n+     *\n+     * @param child the child initializer\n+     * @param expExec the expected executor service (null if the executor should\n+     * not be checked)\n+     * @throws ConcurrentException if an error occurs\n+     */\n+    private void checkChild(BackgroundInitializer<?> child,\n+            ExecutorService expExec) throws ConcurrentException {\n+        ChildBackgroundInitializer cinit = (ChildBackgroundInitializer) child;\n+        Integer result = cinit.get();\n+        assertEquals(\"Wrong result\", 1, result.intValue());\n+        assertEquals(\"Wrong number of executions\", 1, cinit.initializeCalls);\n+        if (expExec != null) {\n+            assertEquals(\"Wrong executor service\", expExec,\n+                    cinit.currentExecutor);\n+        }\n+    }\n+\n+    /**\n+     * Tests addInitializer() if a null name is passed in. This should cause an\n+     * exception.\n+     */\n+    public void testAddInitializerNullName() {\n+        try {\n+            initializer.addInitializer(null, new ChildBackgroundInitializer());\n+            fail(\"Null name not detected!\");\n+        } catch (IllegalArgumentException iex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests addInitializer() if a null initializer is passed in. This should\n+     * cause an exception.\n+     */\n+    public void testAddInitializerNullInit() {\n+        try {\n+            initializer.addInitializer(CHILD_INIT, null);\n+            fail(\"Could add null initializer!\");\n+        } catch (IllegalArgumentException iex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests the background processing if there are no child initializers.\n+     */\n+    public void testInitializeNoChildren() throws ConcurrentException {\n+        assertTrue(\"Wrong result of start()\", initializer.start());\n+        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer\n+                .get();\n+        assertTrue(\"Got child initializers\", res.initializerNames().isEmpty());\n+        assertTrue(\"Executor not shutdown\", initializer.getActiveExecutor()\n+                .isShutdown());\n+    }\n+\n+    /**\n+     * Helper method for testing the initialize() method. This method can\n+     * operate with both an external and a temporary executor service.\n+     *\n+     * @return the result object produced by the initializer\n+     */\n+    private MultiBackgroundInitializer.MultiBackgroundInitializerResults checkInitialize()\n+            throws ConcurrentException {\n+        final int count = 5;\n+        for (int i = 0; i < count; i++) {\n+            initializer.addInitializer(CHILD_INIT + i,\n+                    new ChildBackgroundInitializer());\n+        }\n+        initializer.start();\n+        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer\n+                .get();\n+        assertEquals(\"Wrong number of child initializers\", count, res\n+                .initializerNames().size());\n+        for (int i = 0; i < count; i++) {\n+            String key = CHILD_INIT + i;\n+            assertTrue(\"Name not found: \" + key, res.initializerNames()\n+                    .contains(key));\n+            assertEquals(\"Wrong result object\", Integer.valueOf(1), res\n+                    .getResultObject(key));\n+            assertFalse(\"Exception flag\", res.isException(key));\n+            assertNull(\"Got an exception\", res.getException(key));\n+            checkChild(res.getInitializer(key), initializer.getActiveExecutor());\n+        }\n+        return res;\n+    }\n+\n+    /**\n+     * Tests background processing if a temporary executor is used.\n+     */\n+    public void testInitializeTempExec() throws ConcurrentException {\n+        checkInitialize();\n+        assertTrue(\"Executor not shutdown\", initializer.getActiveExecutor()\n+                .isShutdown());\n+    }\n+\n+    /**\n+     * Tests background processing if an external executor service is provided.\n+     */\n+    public void testInitializeExternalExec() throws ConcurrentException {\n+        ExecutorService exec = Executors.newCachedThreadPool();\n+        try {\n+            initializer = new MultiBackgroundInitializer(exec);\n+            checkInitialize();\n+            assertEquals(\"Wrong executor\", exec, initializer\n+                    .getActiveExecutor());\n+            assertFalse(\"Executor was shutdown\", exec.isShutdown());\n+        } finally {\n+            exec.shutdown();\n+        }\n+    }\n+\n+    /**\n+     * Tests the behavior of initialize() if a child initializer has a specific\n+     * executor service. Then this service should not be overridden.\n+     */\n+    public void testInitializeChildWithExecutor() throws ConcurrentException {\n+        final String initExec = \"childInitializerWithExecutor\";\n+        ExecutorService exec = Executors.newSingleThreadExecutor();\n+        try {\n+            ChildBackgroundInitializer c1 = new ChildBackgroundInitializer();\n+            ChildBackgroundInitializer c2 = new ChildBackgroundInitializer();\n+            c2.setExternalExecutor(exec);\n+            initializer.addInitializer(CHILD_INIT, c1);\n+            initializer.addInitializer(initExec, c2);\n+            initializer.start();\n+            initializer.get();\n+            checkChild(c1, initializer.getActiveExecutor());\n+            checkChild(c2, exec);\n+        } finally {\n+            exec.shutdown();\n+        }\n+    }\n+\n+    /**\n+     * Tries to add another child initializer after the start() method has been\n+     * called. This should not be allowed.\n+     */\n+    public void testAddInitializerAfterStart() throws ConcurrentException {\n+        initializer.start();\n+        try {\n+            initializer.addInitializer(CHILD_INIT,\n+                    new ChildBackgroundInitializer());\n+            fail(\"Could add initializer after start()!\");\n+        } catch (IllegalStateException istex) {\n+            initializer.get();\n+        }\n+    }\n+\n+    /**\n+     * Tries to query an unknown child initializer from the results object. This\n+     * should cause an exception.\n+     */\n+    public void testResultGetInitializerUnknown() throws ConcurrentException {\n+        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\n+        try {\n+            res.getInitializer(\"unknown\");\n+            fail(\"Could obtain unknown child initializer!\");\n+        } catch (NoSuchElementException nex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tries to query the results of an unknown child initializer from the\n+     * results object. This should cause an exception.\n+     */\n+    public void testResultGetResultObjectUnknown() throws ConcurrentException {\n+        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\n+        try {\n+            res.getResultObject(\"unknown\");\n+            fail(\"Could obtain results from unknown child initializer!\");\n+        } catch (NoSuchElementException nex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tries to query the exception of an unknown child initializer from the\n+     * results object. This should cause an exception.\n+     */\n+    public void testResultGetExceptionUnknown() throws ConcurrentException {\n+        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\n+        try {\n+            res.getException(\"unknown\");\n+            fail(\"Could obtain exception from unknown child initializer!\");\n+        } catch (NoSuchElementException nex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tries to query the exception flag of an unknown child initializer from\n+     * the results object. This should cause an exception.\n+     */\n+    public void testResultIsExceptionUnknown() throws ConcurrentException {\n+        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\n+        try {\n+            res.isException(\"unknown\");\n+            fail(\"Could obtain exception status from unknown child initializer!\");\n+        } catch (NoSuchElementException nex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests that the set with the names of the initializers cannot be modified.\n+     */\n+    public void testResultInitializerNamesModify() throws ConcurrentException {\n+        checkInitialize();\n+        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer\n+                .get();\n+        Iterator<String> it = res.initializerNames().iterator();\n+        it.next();\n+        try {\n+            it.remove();\n+            fail(\"Could modify set with initializer names!\");\n+        } catch (UnsupportedOperationException uex) {\n+            // ok\n+        }\n+    }\n+\n+    /**\n+     * Tests the behavior of the initializer if one of the child initializers\n+     * throws a runtime exception.\n+     */\n+    public void testInitializeRuntimeEx() {\n+        ChildBackgroundInitializer child = new ChildBackgroundInitializer();\n+        child.ex = new RuntimeException();\n+        initializer.addInitializer(CHILD_INIT, child);\n+        initializer.start();\n+        try {\n+            initializer.get();\n+            fail(\"Runtime exception not thrown!\");\n+        } catch (Exception ex) {\n+            assertEquals(\"Wrong exception\", child.ex, ex);\n+        }\n+    }\n+\n+    /**\n+     * Tests the behavior of the initializer if one of the child initializers\n+     * throws a checked exception.\n+     */\n+    public void testInitializeEx() throws ConcurrentException {\n+        ChildBackgroundInitializer child = new ChildBackgroundInitializer();\n+        child.ex = new Exception();\n+        initializer.addInitializer(CHILD_INIT, child);\n+        initializer.start();\n+        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer\n+                .get();\n+        assertTrue(\"No exception flag\", res.isException(CHILD_INIT));\n+        assertNull(\"Got a results object\", res.getResultObject(CHILD_INIT));\n+        ConcurrentException cex = res.getException(CHILD_INIT);\n+        assertEquals(\"Wrong cause\", child.ex, cex.getCause());\n+    }\n+\n+    /**\n+     * Tests whether MultiBackgroundInitializers can be combined in a nested\n+     * way.\n+     */\n+    public void testInitializeNested() throws ConcurrentException {\n+        final String nameMulti = \"multiChildInitializer\";\n+        initializer\n+                .addInitializer(CHILD_INIT, new ChildBackgroundInitializer());\n+        MultiBackgroundInitializer mi2 = new MultiBackgroundInitializer();\n+        final int count = 3;\n+        for (int i = 0; i < count; i++) {\n+            mi2\n+                    .addInitializer(CHILD_INIT + i,\n+                            new ChildBackgroundInitializer());\n+        }\n+        initializer.addInitializer(nameMulti, mi2);\n+        initializer.start();\n+        MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer\n+                .get();\n+        ExecutorService exec = initializer.getActiveExecutor();\n+        checkChild(res.getInitializer(CHILD_INIT), exec);\n+        MultiBackgroundInitializer.MultiBackgroundInitializerResults res2 = (MultiBackgroundInitializer.MultiBackgroundInitializerResults) res\n+                .getResultObject(nameMulti);\n+        assertEquals(\"Wrong number of initializers\", count, res2\n+                .initializerNames().size());\n+        for (int i = 0; i < count; i++) {\n+            checkChild(res2.getInitializer(CHILD_INIT + i), exec);\n+        }\n+        assertTrue(\"Executor not shutdown\", exec.isShutdown());\n+    }\n+\n+    /**\n+     * A concrete implementation of {@code BackgroundInitializer} used for\n+     * defining background tasks for {@code MultiBackgroundInitializer}.\n+     */\n+    private static class ChildBackgroundInitializer extends\n+            BackgroundInitializer<Integer> {\n+        /** Stores the current executor service. */\n+        volatile ExecutorService currentExecutor;\n+\n+        /** A counter for the invocations of initialize(). */\n+        volatile int initializeCalls;\n+\n+        /** An exception to be thrown by initialize(). */\n+        Exception ex;\n+\n+        /**\n+         * Records this invocation. Optionally throws an exception.\n+         */\n+        @Override\n+        protected Integer initialize() throws Exception {\n+            currentExecutor = getActiveExecutor();\n+            initializeCalls++;\n+\n+            if (ex != null) {\n+                throw ex;\n+            }\n+\n+            return initializeCalls;\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.exception;\n+\n+import java.io.Serializable;\n+import java.util.Date;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * JUnit tests for ContextedException.\n+ * @author D. Ashmore\n+ *\n+ */\n+public class ContextedExceptionTest extends TestCase {\n+    \n+    private static final String TEST_MESSAGE_2 = \"This is monotonous\";\n+    private static final String TEST_MESSAGE = \"Test Message\";\n+    private ContextedException contextedException;\n+\n+    public ContextedExceptionTest(String name) {\n+        super(name);\n+    }\n+\n+    public void testContextedException() {\n+        contextedException = new ContextedException();\n+        String message = contextedException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(StringUtils.isEmpty(message));\n+    }\n+\n+    public void testContextedExceptionString() {\n+        contextedException = new ContextedException(TEST_MESSAGE);\n+        assertEquals(TEST_MESSAGE, contextedException.getMessage());\n+        \n+        String trace = ExceptionUtils.getStackTrace(contextedException);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+    }\n+\n+    public void testContextedExceptionThrowable() {\n+        contextedException = new ContextedException(new Exception(TEST_MESSAGE));\n+        String message = contextedException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n+    }\n+\n+    public void testContextedExceptionStringThrowable() {\n+        contextedException = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE));\n+        String message = contextedException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0);\n+        assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n+    }\n+    \n+    public void testContextedExceptionStringThrowableContext() {\n+        contextedException = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\n+        String message = contextedException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0);\n+        assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n+    }\n+\n+    public void testAddValue() {\n+        contextedException = new ContextedException(new Exception(TEST_MESSAGE))\n+        .addValue(\"test1\", null)\n+        .addValue(\"test2\", \"some value\")\n+        .addValue(\"test Date\", new Date())\n+        .addValue(\"test Nbr\", new Integer(5))\n+        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        \n+        String message = contextedException.getMessage();\n+        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(message.indexOf(\"test1\")>=0);\n+        assertTrue(message.indexOf(\"test2\")>=0);\n+        assertTrue(message.indexOf(\"test Date\")>=0);\n+        assertTrue(message.indexOf(\"test Nbr\")>=0);\n+        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n+        assertTrue(message.indexOf(\"some value\")>=0);\n+        assertTrue(message.indexOf(\"5\")>=0);\n+        assertTrue(message.indexOf(\"Crap\")>=0);\n+        \n+        assertTrue(contextedException.getValue(\"test1\") == null);\n+        assertTrue(contextedException.getValue(\"test2\").equals(\"some value\"));\n+        assertTrue(contextedException.getValue(\"crap\") == null);\n+        assertTrue(contextedException.getValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n+        \n+        assertTrue(contextedException.getLabelSet().size() == 5);\n+        assertTrue(contextedException.getLabelSet().contains(\"test1\"));\n+        assertTrue(contextedException.getLabelSet().contains(\"test2\"));\n+        assertTrue(contextedException.getLabelSet().contains(\"test Date\"));\n+        assertTrue(contextedException.getLabelSet().contains(\"test Nbr\"));\n+        assertTrue(contextedException.getLabelSet().contains(\"test Poorly written obj\"));\n+        \n+        assertTrue(!contextedException.getLabelSet().contains(\"crap\"));\n+\n+        contextedException.addValue(\"test Poorly written obj\", \"replacement\");\n+        \n+        String contextMessage = contextedException.getFormattedExceptionMessage(null);\n+        assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n+        assertTrue(contextedException.getMessage().endsWith(contextMessage));\n+    }\n+    \n+    public void testNullExceptionPassing() {\n+        contextedException = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null)\n+        .addValue(\"test1\", null)\n+        .addValue(\"test2\", \"some value\")\n+        .addValue(\"test Date\", new Date())\n+        .addValue(\"test Nbr\", new Integer(5))\n+        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        \n+        String message = contextedException.getMessage();\n+        assertTrue(message != null);\n+    }\n+\n+    public void testGetMessage() {\n+        testAddValue();\n+    }\n+    \n+    static class ObjectWithFaultyToString implements Serializable {\n+\n+        private static final long serialVersionUID = 3495843995332310458L;\n+\n+        @Override\n+        public String toString() {\n+            throw new RuntimeException(\"Crap\");\n+        }\n+        \n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.exception;\n+\n+import java.util.Date;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.exception.ContextedExceptionTest.ObjectWithFaultyToString;\n+\n+/**\n+ * JUnit tests for ContextedRuntimeException.\n+ * @author D. Ashmore\n+ *\n+ */\n+public class ContextedRuntimeExceptionTest extends TestCase {\n+    \n+    private static final String TEST_MESSAGE_2 = \"This is monotonous\";\n+    private static final String TEST_MESSAGE = \"Test Message\";\n+    private ContextedRuntimeException contextedRuntimeException;\n+\n+    public ContextedRuntimeExceptionTest(String name) {\n+        super(name);\n+    }\n+\n+    public void testContextedException() {\n+        contextedRuntimeException = new ContextedRuntimeException();\n+        String message = contextedRuntimeException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(StringUtils.isEmpty(message));\n+    }\n+\n+    public void testContextedExceptionString() {\n+        contextedRuntimeException = new ContextedRuntimeException(TEST_MESSAGE);\n+        assertEquals(TEST_MESSAGE, contextedRuntimeException.getMessage());\n+        \n+        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+    }\n+\n+    public void testContextedExceptionThrowable() {\n+        contextedRuntimeException = new ContextedRuntimeException(new Exception(TEST_MESSAGE));\n+        String message = contextedRuntimeException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n+    }\n+\n+    public void testContextedExceptionStringThrowable() {\n+        contextedRuntimeException = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE));\n+        String message = contextedRuntimeException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0);\n+        assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n+    }\n+    \n+    public void testContextedExceptionStringThrowableContext() {\n+        contextedRuntimeException = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext());\n+        String message = contextedRuntimeException.getMessage();\n+        String trace = ExceptionUtils.getStackTrace(contextedRuntimeException);\n+        assertTrue(trace.indexOf(\"ContextedException\")>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0);\n+        assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n+    }\n+\n+    public void testAddValue() {\n+        contextedRuntimeException = new ContextedRuntimeException(new Exception(TEST_MESSAGE))\n+        .addValue(\"test1\", null)\n+        .addValue(\"test2\", \"some value\")\n+        .addValue(\"test Date\", new Date())\n+        .addValue(\"test Nbr\", new Integer(5))\n+        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        \n+        String message = contextedRuntimeException.getMessage();\n+        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(message.indexOf(\"test1\")>=0);\n+        assertTrue(message.indexOf(\"test2\")>=0);\n+        assertTrue(message.indexOf(\"test Date\")>=0);\n+        assertTrue(message.indexOf(\"test Nbr\")>=0);\n+        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n+        assertTrue(message.indexOf(\"some value\")>=0);\n+        assertTrue(message.indexOf(\"5\")>=0);\n+        assertTrue(message.indexOf(\"Crap\")>=0);\n+        \n+        assertTrue(contextedRuntimeException.getValue(\"test1\") == null);\n+        assertTrue(contextedRuntimeException.getValue(\"test2\").equals(\"some value\"));\n+        assertTrue(contextedRuntimeException.getValue(\"crap\") == null);\n+        assertTrue(contextedRuntimeException.getValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n+        \n+        assertTrue(contextedRuntimeException.getLabelSet().size() == 5);\n+        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test1\"));\n+        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test2\"));\n+        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test Date\"));\n+        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test Nbr\"));\n+        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test Poorly written obj\"));\n+        \n+        assertTrue(!contextedRuntimeException.getLabelSet().contains(\"crap\"));\n+\n+        contextedRuntimeException.addValue(\"test Poorly written obj\", \"replacement\");\n+        \n+        String contextMessage = contextedRuntimeException.getFormattedExceptionMessage(null);\n+        assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n+        assertTrue(contextedRuntimeException.getMessage().endsWith(contextMessage));\n+    }\n+    \n+    public void testNullExceptionPassing() {\n+        contextedRuntimeException = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null)\n+        .addValue(\"test1\", null)\n+        .addValue(\"test2\", \"some value\")\n+        .addValue(\"test Date\", new Date())\n+        .addValue(\"test Nbr\", new Integer(5))\n+        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        \n+        String message = contextedRuntimeException.getMessage();\n+        assertTrue(message != null);\n+    }\n+\n+    public void testGetMessage() {\n+        testAddValue();\n+    }\n+    \n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.exception;\n+\n+import java.util.Date;\n+\n+import org.apache.commons.lang3.exception.ContextedExceptionTest.ObjectWithFaultyToString;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit tests for DefaultExceptionContext\n+ * @author D. Ashmore\n+ *\n+ */\n+public class DefaultExceptionContextTest extends TestCase {\n+    \n+    private ExceptionContext defaultExceptionContext;\n+\n+    public DefaultExceptionContextTest(String name) {\n+        super(name);\n+    }\n+    \n+    @Override\n+    public void setUp() {\n+        defaultExceptionContext = new DefaultExceptionContext()\n+        .addValue(\"test1\", null)\n+        .addValue(\"test2\", \"some value\")\n+        .addValue(\"test Date\", new Date())\n+        .addValue(\"test Nbr\", new Integer(5))\n+        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+    }\n+    \n+    public void testAddValue() {\n+                \n+        String message = defaultExceptionContext.getFormattedExceptionMessage(\"This is an error\");\n+        assertTrue(message.indexOf(\"This is an error\")>=0);\n+        assertTrue(message.indexOf(\"test1\")>=0);\n+        assertTrue(message.indexOf(\"test2\")>=0);\n+        assertTrue(message.indexOf(\"test Date\")>=0);\n+        assertTrue(message.indexOf(\"test Nbr\")>=0);\n+        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n+        assertTrue(message.indexOf(\"some value\")>=0);\n+        assertTrue(message.indexOf(\"5\")>=0);\n+        assertTrue(message.indexOf(\"Crap\")>=0);\n+        \n+        //contextedException.printStackTrace();\n+    }\n+    \n+    public void testFormattedExceptionMessageNull() {\n+        defaultExceptionContext = new DefaultExceptionContext();\n+        defaultExceptionContext.getFormattedExceptionMessage(null);\n+    }\n+    \n+    public void testGetValue() {\n+        assertTrue(defaultExceptionContext.getValue(\"test1\") == null);\n+        assertTrue(defaultExceptionContext.getValue(\"test2\").equals(\"some value\"));\n+        assertTrue(defaultExceptionContext.getValue(\"crap\") == null);\n+        assertTrue(defaultExceptionContext.getValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n+    }\n+    \n+    public void testGetLabelSet() {\n+        assertTrue(defaultExceptionContext.getLabelSet().size() == 5);\n+        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test1\"));\n+        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test2\"));\n+        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test Date\"));\n+        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test Nbr\"));\n+        assertTrue(defaultExceptionContext.getLabelSet().contains(\"test Poorly written obj\"));\n+        \n+        assertTrue(!defaultExceptionContext.getLabelSet().contains(\"crap\"));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.exception;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Modifier;\n+import java.sql.SQLException;\n+import java.util.List;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.SystemUtils;\n+\n+/**\n+ * Tests {@link org.apache.commons.lang3.exception.ExceptionUtils}.\n+ * \n+ * <h3>Notes</h3>\n+ * <p>\n+ * Make sure this exception code does not depend on Java 1.4 nested exceptions. SVN revision 38990 does not compile with\n+ * Java 1.3.1.\n+ * </p>\n+ * <ul>\n+ * <li>Compiled with Sun Java 1.3.1_15</li>\n+ * <li>Tested with Sun Java 1.3.1_15</li>\n+ * <li>Tested with Sun Java 1.4.2_12</li>\n+ * <li>Tested with Sun Java 1.5.0_08</li>\n+ * <li>All of the above on Windows XP SP2 + patches.</li>\n+ * </ul>\n+ * <p>\n+ * Gary Gregory; August 16, 2006.\n+ * </p>\n+ * \n+ * @author Apache Software Foundation\n+ * @author Daniel L. Rall\n+ * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @since 1.0\n+ */\n+public class ExceptionUtilsTest extends TestCase {\n+    \n+    private NestableException nested;\n+    private Throwable withCause;\n+    private Throwable withoutCause;\n+    private Throwable jdkNoCause;\n+    private ExceptionWithCause cyclicCause;\n+\n+    public ExceptionUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    public void setUp() {\n+        withoutCause = createExceptionWithoutCause();\n+        nested = new NestableException(withoutCause);\n+        withCause = new ExceptionWithCause(nested);\n+        jdkNoCause = new NullPointerException();\n+        ExceptionWithCause a = new ExceptionWithCause(null);\n+        ExceptionWithCause b = new ExceptionWithCause(a);\n+        a.setCause(b);\n+        cyclicCause = new ExceptionWithCause(a);\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        withoutCause = null;\n+        nested = null;\n+        withCause = null;\n+        jdkNoCause = null;\n+        cyclicCause = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private Throwable createExceptionWithoutCause() {\n+        try {\n+            throw new ExceptionWithoutCause();\n+        } catch (Throwable t) {\n+            return t;\n+        }\n+    }\n+\n+    private Throwable createExceptionWithCause() {\n+        try {\n+            try {\n+                throw new ExceptionWithCause(createExceptionWithoutCause());\n+            } catch (Throwable t) {\n+                throw new ExceptionWithCause(t);\n+            }\n+        } catch (Throwable t) {\n+            return t;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    \n+    public void testConstructor() {\n+        assertNotNull(new ExceptionUtils());\n+        Constructor<?>[] cons = ExceptionUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(ExceptionUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(ExceptionUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testGetCause_Throwable() {\n+        assertSame(null, ExceptionUtils.getCause(null));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause));\n+        assertSame(withoutCause, ExceptionUtils.getCause(nested));\n+        assertSame(nested, ExceptionUtils.getCause(withCause));\n+        assertSame(null, ExceptionUtils.getCause(jdkNoCause));\n+        assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause));\n+        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getCause(cyclicCause.getCause()));\n+        assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(((ExceptionWithCause) cyclicCause.getCause()).getCause()));\n+    }\n+\n+    public void testGetCause_ThrowableArray() {\n+        assertSame(null, ExceptionUtils.getCause(null, null));\n+        assertSame(null, ExceptionUtils.getCause(null, new String[0]));\n+\n+        // not known type, so match on supplied method names\n+        assertSame(nested, ExceptionUtils.getCause(withCause, null));  // default names\n+        assertSame(null, ExceptionUtils.getCause(withCause, new String[0]));\n+        assertSame(null, ExceptionUtils.getCause(withCause, new String[] {null}));\n+        assertSame(nested, ExceptionUtils.getCause(withCause, new String[] {\"getCause\"}));\n+        \n+        // not known type, so match on supplied method names\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, null));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0]));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {null}));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {\"getCause\"}));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {\"getTargetException\"}));\n+    }\n+\n+    public void testGetRootCause_Throwable() {\n+        assertSame(null, ExceptionUtils.getRootCause(null));\n+        assertSame(null, ExceptionUtils.getRootCause(withoutCause));\n+        assertSame(withoutCause, ExceptionUtils.getRootCause(nested));\n+        assertSame(withoutCause, ExceptionUtils.getRootCause(withCause));\n+        assertSame(null, ExceptionUtils.getRootCause(jdkNoCause));\n+        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getRootCause(cyclicCause));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetThrowableCount_Throwable() {\n+        assertEquals(0, ExceptionUtils.getThrowableCount(null));\n+        assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause));\n+        assertEquals(2, ExceptionUtils.getThrowableCount(nested));\n+        assertEquals(3, ExceptionUtils.getThrowableCount(withCause));\n+        assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause));\n+        assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetThrowables_Throwable_null() {\n+        assertEquals(0, ExceptionUtils.getThrowables(null).length);\n+    }\n+\n+    public void testGetThrowables_Throwable_withoutCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(withoutCause);\n+        assertEquals(1, throwables.length);\n+        assertSame(withoutCause, throwables[0]);\n+    }\n+\n+    public void testGetThrowables_Throwable_nested() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(nested);\n+        assertEquals(2, throwables.length);\n+        assertSame(nested, throwables[0]);\n+        assertSame(withoutCause, throwables[1]);\n+    }\n+\n+    public void testGetThrowables_Throwable_withCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(withCause);\n+        assertEquals(3, throwables.length);\n+        assertSame(withCause, throwables[0]);\n+        assertSame(nested, throwables[1]);\n+        assertSame(withoutCause, throwables[2]);\n+    }\n+\n+    public void testGetThrowables_Throwable_jdkNoCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(jdkNoCause);\n+        assertEquals(1, throwables.length);\n+        assertSame(jdkNoCause, throwables[0]);\n+    }\n+\n+    public void testGetThrowables_Throwable_recursiveCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(cyclicCause);\n+        assertEquals(3, throwables.length);\n+        assertSame(cyclicCause, throwables[0]);\n+        assertSame(cyclicCause.getCause(), throwables[1]);\n+        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables[2]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetThrowableList_Throwable_null() {\n+        List<?> throwables = ExceptionUtils.getThrowableList(null);\n+        assertEquals(0, throwables.size());\n+    }\n+\n+    public void testGetThrowableList_Throwable_withoutCause() {\n+        List<?> throwables = ExceptionUtils.getThrowableList(withoutCause);\n+        assertEquals(1, throwables.size());\n+        assertSame(withoutCause, throwables.get(0));\n+    }\n+\n+    public void testGetThrowableList_Throwable_nested() {\n+        List<?> throwables = ExceptionUtils.getThrowableList(nested);\n+        assertEquals(2, throwables.size());\n+        assertSame(nested, throwables.get(0));\n+        assertSame(withoutCause, throwables.get(1));\n+    }\n+\n+    public void testGetThrowableList_Throwable_withCause() {\n+        List<?> throwables = ExceptionUtils.getThrowableList(withCause);\n+        assertEquals(3, throwables.size());\n+        assertSame(withCause, throwables.get(0));\n+        assertSame(nested, throwables.get(1));\n+        assertSame(withoutCause, throwables.get(2));\n+    }\n+\n+    public void testGetThrowableList_Throwable_jdkNoCause() {\n+        List<?> throwables = ExceptionUtils.getThrowableList(jdkNoCause);\n+        assertEquals(1, throwables.size());\n+        assertSame(jdkNoCause, throwables.get(0));\n+    }\n+\n+    public void testGetThrowableList_Throwable_recursiveCause() {\n+        List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause);\n+        assertEquals(3, throwables.size());\n+        assertSame(cyclicCause, throwables.get(0));\n+        assertSame(cyclicCause.getCause(), throwables.get(1));\n+        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIndexOf_ThrowableClass() {\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class));\n+        assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class));\n+        assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class));\n+        assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class));\n+    }\n+\n+    public void testIndexOf_ThrowableClassInt() {\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0));\n+        assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));\n+        assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0));\n+        assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0));\n+\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIndexOfType_ThrowableClass() {\n+        assertEquals(-1, ExceptionUtils.indexOfType(null, null));\n+        assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class));\n+        assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(nested, null));\n+        assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class));\n+        assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class));\n+        assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));\n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class));\n+        assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class));\n+        assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class));\n+        \n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class));\n+    }\n+\n+    public void testIndexOfType_ThrowableClassInt() {\n+        assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0));\n+        assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0));\n+        assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0));\n+        assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));\n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));\n+        assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0));\n+        assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0));\n+\n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1));\n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9));\n+        \n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrintRootCauseStackTrace_Throwable() throws Exception {\n+        ExceptionUtils.printRootCauseStackTrace(null);\n+        // could pipe system.err to a known stream, but not much point as\n+        // internally this method calls stram method anyway\n+    }\n+    \n+    public void testPrintRootCauseStackTrace_ThrowableStream() throws Exception {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\n+        ExceptionUtils.printRootCauseStackTrace(null, (PrintStream) null);\n+        ExceptionUtils.printRootCauseStackTrace(null, new PrintStream(out));\n+        assertEquals(0, out.toString().length());\n+        \n+        out = new ByteArrayOutputStream(1024);\n+        try {\n+            ExceptionUtils.printRootCauseStackTrace(withCause, (PrintStream) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        \n+        out = new ByteArrayOutputStream(1024);\n+        Throwable withCause = createExceptionWithCause();\n+        ExceptionUtils.printRootCauseStackTrace(withCause, new PrintStream(out));\n+        String stackTrace = out.toString();\n+        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);\n+        \n+        out = new ByteArrayOutputStream(1024);\n+        ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintStream(out));\n+        stackTrace = out.toString();\n+        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);\n+    }\n+\n+    public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception {\n+        StringWriter writer = new StringWriter(1024);\n+        ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null);\n+        ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer));\n+        assertEquals(0, writer.getBuffer().length());\n+        \n+        writer = new StringWriter(1024);\n+        try {\n+            ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        \n+        writer = new StringWriter(1024);\n+        Throwable withCause = createExceptionWithCause();\n+        ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer));\n+        String stackTrace = writer.toString();\n+        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);\n+        \n+        writer = new StringWriter(1024);\n+        ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer));\n+        stackTrace = writer.toString();\n+        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetRootCauseStackTrace_Throwable() throws Exception {\n+        assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length);\n+        \n+        Throwable withCause = createExceptionWithCause();\n+        String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause);\n+        boolean match = false;\n+        for (int i = 0; i < stackTrace.length; i++) {\n+            if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) {\n+                match = true;\n+                break;\n+            }\n+        }\n+        assertEquals(true, match);\n+        \n+        stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause);\n+        match = false;\n+        for (int i = 0; i < stackTrace.length; i++) {\n+            if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) {\n+                match = true;\n+                break;\n+            }\n+        }\n+        assertEquals(false, match);\n+    }\n+\n+    public void testRemoveCommonFrames_ListList() throws Exception {\n+        try {\n+            ExceptionUtils.removeCommonFrames(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+    }\n+\n+    public void test_getMessage_Throwable() {\n+        Throwable th = null;\n+        assertEquals(\"\", ExceptionUtils.getMessage(th));\n+        \n+        th = new IllegalArgumentException(\"Base\");\n+        assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getMessage(th));\n+        \n+        th = new ExceptionWithCause(\"Wrapper\", th);\n+        assertEquals(\"ExceptionUtilsTest.ExceptionWithCause: Wrapper\", ExceptionUtils.getMessage(th));\n+    }\n+\n+    public void test_getRootCauseMessage_Throwable() {\n+        Throwable th = null;\n+        assertEquals(\"\", ExceptionUtils.getRootCauseMessage(th));\n+        \n+        th = new IllegalArgumentException(\"Base\");\n+        assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getRootCauseMessage(th));\n+        \n+        th = new ExceptionWithCause(\"Wrapper\", th);\n+        assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getRootCauseMessage(th));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Provides a method with a well known chained/nested exception\n+     * name which matches the full signature (e.g. has a return value\n+     * of <code>Throwable</code>.\n+     */\n+    private static class ExceptionWithCause extends Exception {\n+        private Throwable cause;\n+\n+        public ExceptionWithCause(String str, Throwable cause) {\n+            super(str);\n+            setCause(cause);\n+        }\n+\n+        public ExceptionWithCause(Throwable cause) {\n+            super();\n+            setCause(cause);\n+        }\n+\n+        @Override\n+        public Throwable getCause() {\n+            return cause;\n+        }\n+\n+        public void setCause(Throwable cause) {\n+            this.cause = cause;\n+        }\n+    }\n+\n+    /**\n+     * Provides a method with a well known chained/nested exception\n+     * name which does not match the full signature (e.g. lacks a\n+     * return value of <code>Throwable</code>.\n+     */\n+    private static class ExceptionWithoutCause extends Exception {\n+        @SuppressWarnings(\"unused\")\n+        public void getTargetException() {\n+        }\n+    }\n+\n+    // Temporary classes to allow the nested exception code to be removed \n+    // prior to a rewrite of this test class. \n+    private static class NestableException extends Exception { \n+        @SuppressWarnings(\"unused\")\n+        public NestableException() { super(); }\n+        public NestableException(Throwable t) { super(t); }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/math/FractionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.lang3.math;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test cases for the {@link Fraction} class\n+ *\n+ * @author Apache Software Foundation\n+ * @author C. Scott Ananian\n+ * @version $Id$\n+ */\n+public class FractionTest extends TestCase {\n+    \n+    private static final int SKIP = 500;  //53\n+\n+    public FractionTest(String name) {\n+        super(name);\n+    }\n+\n+    //--------------------------------------------------------------------------\n+    \n+    public void testConstants() {\n+        assertEquals(0, Fraction.ZERO.getNumerator());\n+        assertEquals(1, Fraction.ZERO.getDenominator());\n+        \n+        assertEquals(1, Fraction.ONE.getNumerator());\n+        assertEquals(1, Fraction.ONE.getDenominator());\n+        \n+        assertEquals(1, Fraction.ONE_HALF.getNumerator());\n+        assertEquals(2, Fraction.ONE_HALF.getDenominator());\n+        \n+        assertEquals(1, Fraction.ONE_THIRD.getNumerator());\n+        assertEquals(3, Fraction.ONE_THIRD.getDenominator());\n+        \n+        assertEquals(2, Fraction.TWO_THIRDS.getNumerator());\n+        assertEquals(3, Fraction.TWO_THIRDS.getDenominator());\n+        \n+        assertEquals(1, Fraction.ONE_QUARTER.getNumerator());\n+        assertEquals(4, Fraction.ONE_QUARTER.getDenominator());\n+        \n+        assertEquals(2, Fraction.TWO_QUARTERS.getNumerator());\n+        assertEquals(4, Fraction.TWO_QUARTERS.getDenominator());\n+        \n+        assertEquals(3, Fraction.THREE_QUARTERS.getNumerator());\n+        assertEquals(4, Fraction.THREE_QUARTERS.getDenominator());\n+        \n+        assertEquals(1, Fraction.ONE_FIFTH.getNumerator());\n+        assertEquals(5, Fraction.ONE_FIFTH.getDenominator());\n+        \n+        assertEquals(2, Fraction.TWO_FIFTHS.getNumerator());\n+        assertEquals(5, Fraction.TWO_FIFTHS.getDenominator());\n+        \n+        assertEquals(3, Fraction.THREE_FIFTHS.getNumerator());\n+        assertEquals(5, Fraction.THREE_FIFTHS.getDenominator());\n+        \n+        assertEquals(4, Fraction.FOUR_FIFTHS.getNumerator());\n+        assertEquals(5, Fraction.FOUR_FIFTHS.getDenominator());\n+    }\n+\n+    public void testFactory_int_int() {\n+        Fraction f = null;\n+        \n+        // zero\n+        f = Fraction.getFraction(0, 1);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getFraction(0, 2);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        // normal\n+        f = Fraction.getFraction(1, 1);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getFraction(2, 1);\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getFraction(23, 345);\n+        assertEquals(23, f.getNumerator());\n+        assertEquals(345, f.getDenominator());\n+        \n+        // improper\n+        f = Fraction.getFraction(22, 7);\n+        assertEquals(22, f.getNumerator());\n+        assertEquals(7, f.getDenominator());\n+        \n+        // negatives\n+        f = Fraction.getFraction(-6, 10);\n+        assertEquals(-6, f.getNumerator());\n+        assertEquals(10, f.getDenominator());\n+        \n+        f = Fraction.getFraction(6, -10);\n+        assertEquals(-6, f.getNumerator());\n+        assertEquals(10, f.getDenominator());\n+        \n+        f = Fraction.getFraction(-6, -10);\n+        assertEquals(6, f.getNumerator());\n+        assertEquals(10, f.getDenominator());\n+        \n+        // zero denominator\n+        try {\n+            f = Fraction.getFraction(1, 0);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(2, 0);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(-3, 0);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+\n+        // very large: can't represent as unsimplified fraction, although\n+        try {\n+            f = Fraction.getFraction(4, Integer.MIN_VALUE);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        try {\n+            f = Fraction.getFraction(1, Integer.MIN_VALUE);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testFactory_int_int_int() {\n+        Fraction f = null;\n+        \n+        // zero\n+        f = Fraction.getFraction(0, 0, 2);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getFraction(2, 0, 2);\n+        assertEquals(4, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getFraction(0, 1, 2);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        // normal\n+        f = Fraction.getFraction(1, 1, 2);\n+        assertEquals(3, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        // negatives\n+        try {\n+            f = Fraction.getFraction(1, -6, -10);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+\n+        try {\n+            f = Fraction.getFraction(1, -6, -10);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+\n+        try {\n+            f = Fraction.getFraction(1, -6, -10);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        // negative whole\n+        f = Fraction.getFraction(-1, 6, 10);\n+        assertEquals(-16, f.getNumerator());\n+        assertEquals(10, f.getDenominator());\n+        \n+        try {\n+            f = Fraction.getFraction(-1, -6, 10);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+\n+        try {\n+            f = Fraction.getFraction(-1, 6, -10);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(-1, -6, -10);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        // zero denominator\n+        try {\n+            f = Fraction.getFraction(0, 1, 0);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(1, 2, 0);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(-1, -3, 0);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(Integer.MAX_VALUE, 1, 2); \n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(-Integer.MAX_VALUE, 1, 2);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+\n+        // very large\n+        f = Fraction.getFraction(-1, 0, Integer.MAX_VALUE);\n+        assertEquals(-Integer.MAX_VALUE, f.getNumerator());\n+        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n+\n+        try {\n+            // negative denominators not allowed in this constructor.\n+            f = Fraction.getFraction(0, 4, Integer.MIN_VALUE);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        try {\n+            f = Fraction.getFraction(1, 1, Integer.MAX_VALUE);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        try {\n+            f = Fraction.getFraction(-1, 2, Integer.MAX_VALUE);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+    }\n+    public void testReducedFactory_int_int() {\n+        Fraction f = null;\n+        \n+        // zero\n+        f = Fraction.getReducedFraction(0, 1);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        // normal\n+        f = Fraction.getReducedFraction(1, 1);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(2, 1);\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        // improper\n+        f = Fraction.getReducedFraction(22, 7);\n+        assertEquals(22, f.getNumerator());\n+        assertEquals(7, f.getDenominator());\n+        \n+        // negatives\n+        f = Fraction.getReducedFraction(-6, 10);\n+        assertEquals(-3, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(6, -10);\n+        assertEquals(-3, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(-6, -10);\n+        assertEquals(3, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        // zero denominator\n+        try {\n+            f = Fraction.getReducedFraction(1, 0);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getReducedFraction(2, 0);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getReducedFraction(-3, 0);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+\n+        // reduced        \n+        f = Fraction.getReducedFraction(0, 2);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(2, 2);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(2, 4);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(15, 10);\n+        assertEquals(3, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(121, 22);\n+        assertEquals(11, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        // Extreme values \n+        // OK, can reduce before negating\n+        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());\n+        \n+        // Can't reduce, negation will throw\n+        try { \n+            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n+            fail(\"Expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}      \n+    }\n+\n+    public void testFactory_double() {\n+        Fraction f = null;\n+        \n+        try {\n+            f = Fraction.getFraction(Double.NaN);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(Double.POSITIVE_INFINITY);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(Double.NEGATIVE_INFINITY);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction((double) Integer.MAX_VALUE + 1);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        // zero\n+        f = Fraction.getFraction(0.0d);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        // one\n+        f = Fraction.getFraction(1.0d);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        // one half\n+        f = Fraction.getFraction(0.5d);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        // negative\n+        f = Fraction.getFraction(-0.875d);\n+        assertEquals(-7, f.getNumerator());\n+        assertEquals(8, f.getDenominator());\n+        \n+        // over 1\n+        f = Fraction.getFraction(1.25d);\n+        assertEquals(5, f.getNumerator());\n+        assertEquals(4, f.getDenominator());\n+        \n+        // two thirds\n+        f = Fraction.getFraction(0.66666d);\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(3, f.getDenominator());\n+        \n+        // small\n+        f = Fraction.getFraction(1.0d/10001d);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        // normal\n+        Fraction f2 = null;\n+        for (int i = 1; i <= 100; i++) {  // denominator\n+            for (int j = 1; j <= i; j++) {  // numerator\n+                try {\n+                    f = Fraction.getFraction((double) j / (double) i);\n+                } catch (ArithmeticException ex) {\n+                    System.err.println(j + \" \" + i);\n+                    throw ex;\n+                }\n+                f2 = Fraction.getReducedFraction(j, i);\n+                assertEquals(f2.getNumerator(), f.getNumerator());\n+                assertEquals(f2.getDenominator(), f.getDenominator());\n+            }\n+        }\n+        // save time by skipping some tests!  (\n+        for (int i = 1001; i <= 10000; i+=SKIP) {  // denominator\n+            for (int j = 1; j <= i; j++) {  // numerator\n+                try {\n+                    f = Fraction.getFraction((double) j / (double) i);\n+                } catch (ArithmeticException ex) {\n+                    System.err.println(j + \" \" + i);\n+                    throw ex;\n+                }\n+                f2 = Fraction.getReducedFraction(j, i);\n+                assertEquals(f2.getNumerator(), f.getNumerator());\n+                assertEquals(f2.getDenominator(), f.getDenominator());\n+            }\n+        }\n+    }\n+\n+    public void testFactory_String() {\n+        try {\n+            Fraction.getFraction(null);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    \n+    public void testFactory_String_double() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(\"0.0\");\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"0.2\");\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"0.5\");\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"0.66666\");\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(3, f.getDenominator());\n+        \n+        try {\n+            f = Fraction.getFraction(\"2.3R\");\n+            fail(\"Expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\"2147483648\"); // too big\n+            fail(\"Expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\".\");\n+            fail(\"Expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {}\n+    }\n+\n+    public void testFactory_String_proper() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(\"0 0/1\");\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"1 1/5\");\n+        assertEquals(6, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"7 1/2\");\n+        assertEquals(15, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"1 2/4\");\n+        assertEquals(6, f.getNumerator());\n+        assertEquals(4, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"-7 1/2\");\n+        assertEquals(-15, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"-1 2/4\");\n+        assertEquals(-6, f.getNumerator());\n+        assertEquals(4, f.getDenominator());\n+        \n+        try {\n+            f = Fraction.getFraction(\"2 3\");\n+            fail(\"expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\"a 3\");\n+            fail(\"expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\"2 b/4\");\n+            fail(\"expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\"2 \");\n+            fail(\"expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {}\n+\n+        try {\n+            f = Fraction.getFraction(\" 3\");\n+            fail(\"expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\" \");\n+            fail(\"expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {}\n+    }\n+\n+    public void testFactory_String_improper() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(\"0/1\");\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"1/5\");\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"1/2\");\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"2/3\");\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(3, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"7/3\");\n+        assertEquals(7, f.getNumerator());\n+        assertEquals(3, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"2/4\");\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(4, f.getDenominator());\n+        \n+        try {\n+            f = Fraction.getFraction(\"2/d\");\n+            fail(\"expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\"2e/3\");\n+            fail(\"expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\"2/\");\n+            fail(\"expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\"/\");\n+            fail(\"expecting NumberFormatException\");\n+        } catch (NumberFormatException ex) {}\n+    }\n+\n+    public void testGets() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(3, 5, 6);\n+        assertEquals(23, f.getNumerator());\n+        assertEquals(3, f.getProperWhole());\n+        assertEquals(5, f.getProperNumerator());\n+        assertEquals(6, f.getDenominator());\n+        \n+        f = Fraction.getFraction(-3, 5, 6);\n+        assertEquals(-23, f.getNumerator());\n+        assertEquals(-3, f.getProperWhole());\n+        assertEquals(5, f.getProperNumerator());\n+        assertEquals(6, f.getDenominator());\n+\n+        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n+        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n+        assertEquals(Integer.MIN_VALUE, f.getProperWhole());\n+        assertEquals(0, f.getProperNumerator());\n+        assertEquals(1, f.getDenominator());\n+    }\n+            \n+    public void testConversions() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(3, 7, 8);\n+        assertEquals(3, f.intValue());\n+        assertEquals(3L, f.longValue());\n+        assertEquals(3.875f, f.floatValue(), 0.00001f);\n+        assertEquals(3.875d, f.doubleValue(), 0.00001d);\n+    }\n+    \n+    public void testReduce() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(50, 75);\n+        Fraction result = f.reduce();\n+        assertEquals(2, result.getNumerator());\n+        assertEquals(3, result.getDenominator());\n+\n+        f = Fraction.getFraction(-2, -3);\n+        result = f.reduce();\n+        assertEquals(2, result.getNumerator());\n+        assertEquals(3, result.getDenominator());\n+\n+        f = Fraction.getFraction(2, -3);\n+        result = f.reduce();\n+        assertEquals(-2, result.getNumerator());\n+        assertEquals(3, result.getDenominator());\n+\n+        f = Fraction.getFraction(-2, 3);\n+        result = f.reduce();\n+        assertEquals(-2, result.getNumerator());\n+        assertEquals(3, result.getDenominator());\n+        assertSame(f, result);\n+\n+        f = Fraction.getFraction(2, 3);\n+        result = f.reduce();\n+        assertEquals(2, result.getNumerator());\n+        assertEquals(3, result.getDenominator());\n+        assertSame(f, result);\n+\n+        f = Fraction.getFraction(0, 1);\n+        result = f.reduce();\n+        assertEquals(0, result.getNumerator());\n+        assertEquals(1, result.getDenominator());\n+        assertSame(f, result);\n+\n+        f = Fraction.getFraction(0, 100);\n+        result = f.reduce();\n+        assertEquals(0, result.getNumerator());\n+        assertEquals(1, result.getDenominator());\n+        assertSame(result, Fraction.ZERO);\n+    }\n+    \n+    public void testInvert() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(50, 75);\n+        f = f.invert();\n+        assertEquals(75, f.getNumerator());\n+        assertEquals(50, f.getDenominator());\n+        \n+        f = Fraction.getFraction(4, 3);\n+        f = f.invert();\n+        assertEquals(3, f.getNumerator());\n+        assertEquals(4, f.getDenominator());\n+        \n+        f = Fraction.getFraction(-15, 47);\n+        f = f.invert();\n+        assertEquals(-47, f.getNumerator());\n+        assertEquals(15, f.getDenominator());\n+        \n+        f = Fraction.getFraction(0, 3);\n+        try {\n+            f = f.invert();\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+\n+        // large values\n+        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n+        try {\n+            f = f.invert();\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+\n+        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n+        f = f.invert();\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n+    }\n+    \n+    public void testNegate() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(50, 75);\n+        f = f.negate();\n+        assertEquals(-50, f.getNumerator());\n+        assertEquals(75, f.getDenominator());\n+        \n+        f = Fraction.getFraction(-50, 75);\n+        f = f.negate();\n+        assertEquals(50, f.getNumerator());\n+        assertEquals(75, f.getDenominator());\n+\n+        // large values\n+        f = Fraction.getFraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);\n+        f = f.negate();\n+        assertEquals(Integer.MIN_VALUE+2, f.getNumerator());\n+        assertEquals(Integer.MAX_VALUE, f.getDenominator());\n+\n+        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n+        try {\n+            f = f.negate();\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+    }\n+    \n+    public void testAbs() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(50, 75);\n+        f = f.abs();\n+        assertEquals(50, f.getNumerator());\n+        assertEquals(75, f.getDenominator());\n+        \n+        f = Fraction.getFraction(-50, 75);\n+        f = f.abs();\n+        assertEquals(50, f.getNumerator());\n+        assertEquals(75, f.getDenominator());\n+\n+        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n+        f = f.abs();\n+        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+\n+        f = Fraction.getFraction(Integer.MAX_VALUE, -1);\n+        f = f.abs();\n+        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+\n+        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n+        try {\n+            f = f.abs();\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+    }\n+    \n+    public void testPow() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(3, 5);\n+        assertEquals(Fraction.ONE, f.pow(0));\n+        \n+        f = Fraction.getFraction(3, 5);\n+        assertSame(f, f.pow(1));\n+        assertEquals(f, f.pow(1));\n+\n+        f = Fraction.getFraction(3, 5);\n+        f = f.pow(2);\n+        assertEquals(9, f.getNumerator());\n+        assertEquals(25, f.getDenominator());\n+        \n+        f = Fraction.getFraction(3, 5);\n+        f = f.pow(3);\n+        assertEquals(27, f.getNumerator());\n+        assertEquals(125, f.getDenominator());\n+        \n+        f = Fraction.getFraction(3, 5);\n+        f = f.pow(-1);\n+        assertEquals(5, f.getNumerator());\n+        assertEquals(3, f.getDenominator());\n+        \n+        f = Fraction.getFraction(3, 5);\n+        f = f.pow(-2);\n+        assertEquals(25, f.getNumerator());\n+        assertEquals(9, f.getDenominator());\n+        \n+        // check unreduced fractions stay that way.\n+        f = Fraction.getFraction(6, 10);\n+        assertEquals(Fraction.ONE, f.pow(0));\n+        \n+        f = Fraction.getFraction(6, 10);\n+        assertEquals(f, f.pow(1));\n+        assertFalse(f.pow(1).equals(Fraction.getFraction(3,5)));\n+\n+        f = Fraction.getFraction(6, 10);\n+        f = f.pow(2);\n+        assertEquals(9, f.getNumerator());\n+        assertEquals(25, f.getDenominator());\n+        \n+        f = Fraction.getFraction(6, 10);\n+        f = f.pow(3);\n+        assertEquals(27, f.getNumerator());\n+        assertEquals(125, f.getDenominator());\n+        \n+        f = Fraction.getFraction(6, 10);\n+        f = f.pow(-1);\n+        assertEquals(10, f.getNumerator());\n+        assertEquals(6, f.getDenominator());\n+        \n+        f = Fraction.getFraction(6, 10);\n+        f = f.pow(-2);\n+        assertEquals(25, f.getNumerator());\n+        assertEquals(9, f.getDenominator());\n+        \n+        // zero to any positive power is still zero.\n+        f = Fraction.getFraction(0, 1231);\n+        f = f.pow(1);\n+        assertTrue(0==f.compareTo(Fraction.ZERO));\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1231, f.getDenominator());\n+        f = f.pow(2);\n+        assertTrue(0==f.compareTo(Fraction.ZERO));\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+\n+        // zero to negative powers should throw an exception\n+        try {\n+            f = f.pow(-1);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        try {\n+            f = f.pow(Integer.MIN_VALUE);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+\n+        // one to any power is still one.\n+        f = Fraction.getFraction(1, 1);\n+        f = f.pow(0);\n+        assertEquals(f, Fraction.ONE);\n+        f = f.pow(1);\n+        assertEquals(f, Fraction.ONE);\n+        f = f.pow(-1);\n+        assertEquals(f, Fraction.ONE);\n+        f = f.pow(Integer.MAX_VALUE);\n+        assertEquals(f, Fraction.ONE);\n+        f = f.pow(Integer.MIN_VALUE);\n+        assertEquals(f, Fraction.ONE);\n+\n+        f = Fraction.getFraction(Integer.MAX_VALUE, 1);\n+        try {\n+            f = f.pow(2);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+\n+        // Numerator growing too negative during the pow operation.\n+        f = Fraction.getFraction(Integer.MIN_VALUE, 1);\n+        try {\n+            f = f.pow(3);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+\n+        f = Fraction.getFraction(65536, 1);\n+        try {\n+            f = f.pow(2);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+    }\n+    \n+    public void testAdd() {\n+        Fraction f = null;\n+        Fraction f1 = null;\n+        Fraction f2 = null;\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(1, 5);\n+        f = f1.add(f2);\n+        assertEquals(4, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(2, 5);\n+        f = f1.add(f2);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(3, 5);\n+        f = f1.add(f2);\n+        assertEquals(6, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(-4, 5);\n+        f = f1.add(f2);\n+        assertEquals(-1, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);\n+        f2 = Fraction.ONE;\n+        f = f1.add(f2);\n+        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(1, 2);\n+        f = f1.add(f2);\n+        assertEquals(11, f.getNumerator());\n+        assertEquals(10, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 8);\n+        f2 = Fraction.getFraction(1, 6);\n+        f = f1.add(f2);\n+        assertEquals(13, f.getNumerator());\n+        assertEquals(24, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(0, 5);\n+        f2 = Fraction.getFraction(1, 5);\n+        f = f1.add(f2);\n+        assertSame(f2, f);\n+        f = f2.add(f1);\n+        assertSame(f2, f);\n+        \n+        f1 = Fraction.getFraction(-1, 13*13*2*2);\n+        f2 = Fraction.getFraction(-2, 13*17*2);\n+        f = f1.add(f2);\n+        assertEquals(13*13*17*2*2, f.getDenominator());\n+        assertEquals(-17 - 2*13*2, f.getNumerator());\n+        \n+        try {\n+            f.add(null);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        // if this fraction is added naively, it will overflow.\n+        // check that it doesn't.\n+        f1 = Fraction.getFraction(1,32768*3);\n+        f2 = Fraction.getFraction(1,59049);\n+        f = f1.add(f2);\n+        assertEquals(52451, f.getNumerator());\n+        assertEquals(1934917632, f.getDenominator());\n+\n+        f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);\n+        f2 = Fraction.ONE_THIRD;\n+        f = f1.add(f2);\n+        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n+        assertEquals(3, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1);\n+        f2 = Fraction.ONE;\n+        f = f1.add(f2);\n+        assertEquals(Integer.MAX_VALUE, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        try {\n+            f = f.add(Fraction.ONE); // should overflow\n+            fail(\"expecting ArithmeticException but got: \" + f.toString());\n+        } catch (ArithmeticException ex) {}\n+        \n+        // denominator should not be a multiple of 2 or 3 to trigger overflow\n+        f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);\n+        f2 = Fraction.getFraction(-1,5);\n+        try {\n+            f = f1.add(f2); // should overflow\n+            fail(\"expecting ArithmeticException but got: \" + f.toString());\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f= Fraction.getFraction(-Integer.MAX_VALUE, 1);\n+            f = f.add(f);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+            \n+        try {\n+            f= Fraction.getFraction(-Integer.MAX_VALUE, 1);\n+            f = f.add(f);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+            \n+        f1 = Fraction.getFraction(3,327680);\n+        f2 = Fraction.getFraction(2,59049);\n+        try {\n+            f = f1.add(f2); // should overflow\n+            fail(\"expecting ArithmeticException but got: \" + f.toString());\n+        } catch (ArithmeticException ex) {}\n+    }\n+            \n+    public void testSubtract() {\n+        Fraction f = null;\n+        Fraction f1 = null;\n+        Fraction f2 = null;\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(1, 5);\n+        f = f1.subtract(f2);\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(7, 5);\n+        f2 = Fraction.getFraction(2, 5);\n+        f = f1.subtract(f2);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(3, 5);\n+        f = f1.subtract(f2);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(-4, 5);\n+        f = f1.subtract(f2);\n+        assertEquals(7, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(0, 5);\n+        f2 = Fraction.getFraction(4, 5);\n+        f = f1.subtract(f2);\n+        assertEquals(-4, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(0, 5);\n+        f2 = Fraction.getFraction(-4, 5);\n+        f = f1.subtract(f2);\n+        assertEquals(4, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(1, 2);\n+        f = f1.subtract(f2);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(10, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(0, 5);\n+        f2 = Fraction.getFraction(1, 5);\n+        f = f2.subtract(f1);\n+        assertSame(f2, f);\n+        \n+        try {\n+            f.subtract(null);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        // if this fraction is subtracted naively, it will overflow.\n+        // check that it doesn't.\n+        f1 = Fraction.getFraction(1,32768*3);\n+        f2 = Fraction.getFraction(1,59049);\n+        f = f1.subtract(f2);\n+        assertEquals(-13085, f.getNumerator());\n+        assertEquals(1934917632, f.getDenominator());\n+\n+        f1 = Fraction.getFraction(Integer.MIN_VALUE, 3);\n+        f2 = Fraction.ONE_THIRD.negate();\n+        f = f1.subtract(f2);\n+        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());\n+        assertEquals(3, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);\n+        f2 = Fraction.ONE;\n+        f = f1.subtract(f2);\n+        assertEquals(Integer.MAX_VALUE-1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+\n+        try {\n+            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n+            f2 = Fraction.getFraction(1, Integer.MAX_VALUE - 1);\n+            f = f1.subtract(f2);\n+            fail(\"expecting ArithmeticException\");  //should overflow\n+        } catch (ArithmeticException ex) {}\n+            \n+        // denominator should not be a multiple of 2 or 3 to trigger overflow\n+        f1 = Fraction.getFraction(Integer.MIN_VALUE, 5);\n+        f2 = Fraction.getFraction(1,5);\n+        try {\n+            f = f1.subtract(f2); // should overflow\n+            fail(\"expecting ArithmeticException but got: \" + f.toString());\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f= Fraction.getFraction(Integer.MIN_VALUE, 1);\n+            f = f.subtract(Fraction.ONE);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+            \n+        try {\n+            f= Fraction.getFraction(Integer.MAX_VALUE, 1);\n+            f = f.subtract(Fraction.ONE.negate());\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+            \n+        f1 = Fraction.getFraction(3,327680);\n+        f2 = Fraction.getFraction(2,59049);\n+        try {\n+            f = f1.subtract(f2); // should overflow\n+            fail(\"expecting ArithmeticException but got: \" + f.toString());\n+        } catch (ArithmeticException ex) {}\n+    }\n+            \n+    public void testMultiply() {\n+        Fraction f = null;\n+        Fraction f1 = null;\n+        Fraction f2 = null;\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(2, 5);\n+        f = f1.multiplyBy(f2);\n+        assertEquals(6, f.getNumerator());\n+        assertEquals(25, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(6, 10);\n+        f2 = Fraction.getFraction(6, 10);\n+        f = f1.multiplyBy(f2);\n+        assertEquals(9, f.getNumerator());\n+        assertEquals(25, f.getDenominator());\n+        f = f.multiplyBy(f2);\n+        assertEquals(27, f.getNumerator());\n+        assertEquals(125, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(-2, 5);\n+        f = f1.multiplyBy(f2);\n+        assertEquals(-6, f.getNumerator());\n+        assertEquals(25, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(-3, 5);\n+        f2 = Fraction.getFraction(-2, 5);\n+        f = f1.multiplyBy(f2);\n+        assertEquals(6, f.getNumerator());\n+        assertEquals(25, f.getDenominator());\n+        \n+        \n+        f1 = Fraction.getFraction(0, 5);\n+        f2 = Fraction.getFraction(2, 7);\n+        f = f1.multiplyBy(f2);\n+        assertSame(Fraction.ZERO, f);\n+        \n+        f1 = Fraction.getFraction(2, 7);\n+        f2 = Fraction.ONE;\n+        f = f1.multiplyBy(f2);\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(7, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(Integer.MAX_VALUE, 1);\n+        f2 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n+        f = f1.multiplyBy(f2);\n+        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+\n+        try {\n+            f.multiplyBy(null);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n+            f = f1.multiplyBy(f1);  // should overflow\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+            \n+        try {\n+            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);\n+            f = f1.multiplyBy(f1);  // should overflow\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+    }\n+            \n+    public void testDivide() {\n+        Fraction f = null;\n+        Fraction f1 = null;\n+        Fraction f2 = null;\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(2, 5);\n+        f = f1.divideBy(f2);\n+        assertEquals(3, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.ZERO;\n+        try {\n+            f = f1.divideBy(f2);\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        \n+        f1 = Fraction.getFraction(0, 5);\n+        f2 = Fraction.getFraction(2, 7);\n+        f = f1.divideBy(f2);\n+        assertSame(Fraction.ZERO, f);\n+        \n+        f1 = Fraction.getFraction(2, 7);\n+        f2 = Fraction.ONE;\n+        f = f1.divideBy(f2);\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(7, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n+        f = f1.divideBy(f1);  \n+        assertEquals(1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE);\n+        f2 = Fraction.getFraction(1, Integer.MAX_VALUE);\n+        f = f1.divideBy(f2);\n+        assertEquals(Integer.MIN_VALUE, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+\n+        try {\n+            f.divideBy(null);\n+            fail(\"IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            f1 = Fraction.getFraction(1, Integer.MAX_VALUE);\n+            f = f1.divideBy(f1.invert());  // should overflow\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+        try {\n+            f1 = Fraction.getFraction(1, -Integer.MAX_VALUE);\n+            f = f1.divideBy(f1.invert());  // should overflow\n+            fail(\"expecting ArithmeticException\");\n+        } catch (ArithmeticException ex) {}\n+    }\n+            \n+    public void testEquals() {\n+        Fraction f1 = null;\n+        Fraction f2 = null;\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        assertEquals(false, f1.equals(null));\n+        assertEquals(false, f1.equals(new Object()));\n+        assertEquals(false, f1.equals(new Integer(6)));\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(2, 5);\n+        assertEquals(false, f1.equals(f2));\n+        assertEquals(true, f1.equals(f1));\n+        assertEquals(true, f2.equals(f2));\n+        \n+        f2 = Fraction.getFraction(3, 5);\n+        assertEquals(true, f1.equals(f2));\n+        \n+        f2 = Fraction.getFraction(6, 10);\n+        assertEquals(false, f1.equals(f2));\n+    }\n+    \n+    public void testHashCode() {\n+        Fraction f1 = Fraction.getFraction(3, 5);\n+        Fraction f2 = Fraction.getFraction(3, 5);\n+        \n+        assertTrue(f1.hashCode() == f2.hashCode());\n+        \n+        f2 = Fraction.getFraction(2, 5);\n+        assertTrue(f1.hashCode() != f2.hashCode());\n+        \n+        f2 = Fraction.getFraction(6, 10);\n+        assertTrue(f1.hashCode() != f2.hashCode());\n+    }\n+    \n+    public void testCompareTo() {\n+        Fraction f1 = null;\n+        Fraction f2 = null;\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        assertTrue(f1.compareTo(f1) == 0);\n+        \n+        try {\n+            f1.compareTo(null);\n+            fail(\"expecting NullPointerException\");\n+        } catch (NullPointerException ex) {}\n+        \n+        f2 = Fraction.getFraction(2, 5);\n+        assertTrue(f1.compareTo(f2) > 0);\n+        assertTrue(f2.compareTo(f2) == 0);\n+        \n+        f2 = Fraction.getFraction(4, 5);\n+        assertTrue(f1.compareTo(f2) < 0);\n+        assertTrue(f2.compareTo(f2) == 0);\n+        \n+        f2 = Fraction.getFraction(3, 5);\n+        assertTrue(f1.compareTo(f2) == 0);\n+        assertTrue(f2.compareTo(f2) == 0);\n+        \n+        f2 = Fraction.getFraction(6, 10);\n+        assertTrue(f1.compareTo(f2) == 0);\n+        assertTrue(f2.compareTo(f2) == 0);\n+\n+        f2 = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n+        assertTrue(f1.compareTo(f2) > 0);\n+        assertTrue(f2.compareTo(f2) == 0);\n+\n+    }\n+    \n+    public void testToString() {\n+        Fraction f = null;\n+\n+        f = Fraction.getFraction(3, 5);\n+        String str = f.toString();\n+        assertEquals(\"3/5\", str);\n+        assertSame(str, f.toString());\n+        \n+        f = Fraction.getFraction(7, 5);\n+        assertEquals(\"7/5\", f.toString());        \n+        \n+        f = Fraction.getFraction(4, 2);\n+        assertEquals(\"4/2\", f.toString());        \n+        \n+        f = Fraction.getFraction(0, 2);\n+        assertEquals(\"0/2\", f.toString());        \n+        \n+        f = Fraction.getFraction(2, 2);\n+        assertEquals(\"2/2\", f.toString());        \n+\n+        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n+        assertEquals(\"-2147483648/1\", f.toString());        \n+\n+        f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n+        assertEquals(\"-2147483648/2147483647\", f.toString());\n+    }\n+    \n+    public void testToProperString() {\n+        Fraction f = null;\n+\n+        f = Fraction.getFraction(3, 5);\n+        String str = f.toProperString();\n+        assertEquals(\"3/5\", str);\n+        assertSame(str, f.toProperString());\n+        \n+        f = Fraction.getFraction(7, 5);\n+        assertEquals(\"1 2/5\", f.toProperString());        \n+        \n+        f = Fraction.getFraction(14, 10);\n+        assertEquals(\"1 4/10\", f.toProperString());        \n+        \n+        f = Fraction.getFraction(4, 2);\n+        assertEquals(\"2\", f.toProperString());        \n+        \n+        f = Fraction.getFraction(0, 2);\n+        assertEquals(\"0\", f.toProperString());        \n+        \n+        f = Fraction.getFraction(2, 2);\n+        assertEquals(\"1\", f.toProperString());        \n+        \n+        f = Fraction.getFraction(-7, 5);\n+        assertEquals(\"-1 2/5\", f.toProperString());        \n+\n+        f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1);\n+        assertEquals(\"-2147483648\", f.toProperString());        \n+\n+        f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE);\n+        assertEquals(\"-1 1/2147483647\", f.toProperString());\n+\n+        assertEquals(\"-1\", Fraction.getFraction(-1).toProperString());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/math/IEEE754rUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.math;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.math.IEEE754rUtils}.\n+ *\n+ * @version $Id$\n+ */\n+public class IEEE754rUtilsTest extends TestCase {\n+\n+    public void testLang381() {\n+        assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01);\n+        assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01);\n+        assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN)));\n+        assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01);\n+        assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01);\n+        assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN)));\n+\n+        double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n+        assertEquals(42.0, IEEE754rUtils.max(a), 0.01);\n+        assertEquals(1.2, IEEE754rUtils.min(a), 0.01);\n+\n+        double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n+        assertEquals(42.0, IEEE754rUtils.max(b), 0.01);\n+        assertEquals(1.2, IEEE754rUtils.min(b), 0.01);\n+\n+        float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n+        assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01);\n+        assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01);\n+\n+        float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n+        assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01);\n+        assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01);\n+    }\n+\n+    public void testEnforceExceptions() {\n+        try {\n+            IEEE754rUtils.min( (float[]) null);\n+            fail(\"IllegalArgumentException expected for null input\");\n+        } catch(IllegalArgumentException iae) { /* expected */ }\n+\n+        try {\n+            IEEE754rUtils.min(new float[0]);\n+            fail(\"IllegalArgumentException expected for empty input\");\n+        } catch(IllegalArgumentException iae) { /* expected */ }\n+\n+        try {\n+            IEEE754rUtils.max( (float[]) null);\n+            fail(\"IllegalArgumentException expected for null input\");\n+        } catch(IllegalArgumentException iae) { /* expected */ }\n+\n+        try {\n+            IEEE754rUtils.max(new float[0]);\n+            fail(\"IllegalArgumentException expected for empty input\");\n+        } catch(IllegalArgumentException iae) { /* expected */ }\n+\n+        try {\n+            IEEE754rUtils.min( (double[]) null);\n+            fail(\"IllegalArgumentException expected for null input\");\n+        } catch(IllegalArgumentException iae) { /* expected */ }\n+\n+        try {\n+            IEEE754rUtils.min(new double[0]);\n+            fail(\"IllegalArgumentException expected for empty input\");\n+        } catch(IllegalArgumentException iae) { /* expected */ }\n+\n+        try {\n+            IEEE754rUtils.max( (double[]) null);\n+            fail(\"IllegalArgumentException expected for null input\");\n+        } catch(IllegalArgumentException iae) { /* expected */ }\n+\n+        try {\n+            IEEE754rUtils.max(new double[0]);\n+            fail(\"IllegalArgumentException expected for empty input\");\n+        } catch(IllegalArgumentException iae) { /* expected */ }\n+\n+    }\n+\n+    public void testConstructorExists() {\n+        new IEEE754rUtils();\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.math;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.SystemUtils;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.math.NumberUtils}.\n+ *\n+ * @author Apache Software Foundation\n+ * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @author Eric Pugh\n+ * @author Phil Steitz\n+ * @author Matthew Hawthorne\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id$\n+ */\n+public class NumberUtilsTest extends TestCase {\n+\n+    public NumberUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new NumberUtils());\n+        Constructor<?>[] cons = NumberUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(NumberUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(NumberUtils.class.getModifiers()));\n+    }\n+    \n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * Test for {@link NumberUtils#toInt(String)}.\n+     */\n+    public void testToIntString() {\n+        assertTrue(\"toInt(String) 1 failed\", NumberUtils.toInt(\"12345\") == 12345);\n+        assertTrue(\"toInt(String) 2 failed\", NumberUtils.toInt(\"abc\") == 0);\n+        assertTrue(\"toInt(empty) failed\", NumberUtils.toInt(\"\") == 0);\n+        assertTrue(\"toInt(null) failed\", NumberUtils.toInt(null) == 0);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toInt(String, int)}.\n+     */\n+    public void testToIntStringI() {\n+        assertTrue(\"toInt(String,int) 1 failed\", NumberUtils.toInt(\"12345\", 5) == 12345);\n+        assertTrue(\"toInt(String,int) 2 failed\", NumberUtils.toInt(\"1234.5\", 5) == 5);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toLong(String)}.\n+     */\n+    public void testToLongString() {\n+        assertTrue(\"toLong(String) 1 failed\", NumberUtils.toLong(\"12345\") == 12345l);\n+        assertTrue(\"toLong(String) 2 failed\", NumberUtils.toLong(\"abc\") == 0l);\n+        assertTrue(\"toLong(String) 3 failed\", NumberUtils.toLong(\"1L\") == 0l);\n+        assertTrue(\"toLong(String) 4 failed\", NumberUtils.toLong(\"1l\") == 0l);\n+        assertTrue(\"toLong(Long.MAX_VALUE) failed\", NumberUtils.toLong(Long.MAX_VALUE+\"\") == Long.MAX_VALUE);\n+        assertTrue(\"toLong(Long.MIN_VALUE) failed\", NumberUtils.toLong(Long.MIN_VALUE+\"\") == Long.MIN_VALUE);\n+        assertTrue(\"toLong(empty) failed\", NumberUtils.toLong(\"\") == 0l);\n+        assertTrue(\"toLong(null) failed\", NumberUtils.toLong(null) == 0l);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toLong(String, long)}.\n+     */\n+    public void testToLongStringL() {\n+        assertTrue(\"toLong(String,long) 1 failed\", NumberUtils.toLong(\"12345\", 5l) == 12345l);\n+        assertTrue(\"toLong(String,long) 2 failed\", NumberUtils.toLong(\"1234.5\", 5l) == 5l);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toFloat(String)}.\n+     */\n+    public void testToFloatString() {\n+        assertTrue(\"toFloat(String) 1 failed\", NumberUtils.toFloat(\"-1.2345\") == -1.2345f);\n+        assertTrue(\"toFloat(String) 2 failed\", NumberUtils.toFloat(\"1.2345\") == 1.2345f);\n+        assertTrue(\"toFloat(String) 3 failed\", NumberUtils.toFloat(\"abc\") == 0.0f);\n+        assertTrue(\"toFloat(Float.MAX_VALUE) failed\", NumberUtils.toFloat(Float.MAX_VALUE+\"\") ==  Float.MAX_VALUE);\n+        assertTrue(\"toFloat(Float.MIN_VALUE) failed\", NumberUtils.toFloat(Float.MIN_VALUE+\"\") == Float.MIN_VALUE);\n+        assertTrue(\"toFloat(empty) failed\", NumberUtils.toFloat(\"\") == 0.0f);\n+        assertTrue(\"toFloat(null) failed\", NumberUtils.toFloat(null) == 0.0f);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toFloat(String, float)}.\n+     */\n+    public void testToFloatStringF() {\n+        assertTrue(\"toFloat(String,int) 1 failed\", NumberUtils.toFloat(\"1.2345\", 5.1f) == 1.2345f);\n+        assertTrue(\"toFloat(String,int) 2 failed\", NumberUtils.toFloat(\"a\", 5.0f) == 5.0f);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toDouble(String)}.\n+     */\n+    public void testStringToDoubleString() {\n+        assertTrue(\"toDouble(String) 1 failed\", NumberUtils.toDouble(\"-1.2345\") == -1.2345d);\n+        assertTrue(\"toDouble(String) 2 failed\", NumberUtils.toDouble(\"1.2345\") == 1.2345d);\n+        assertTrue(\"toDouble(String) 3 failed\", NumberUtils.toDouble(\"abc\") == 0.0d);\n+        assertTrue(\"toDouble(Double.MAX_VALUE) failed\", NumberUtils.toDouble(Double.MAX_VALUE+\"\") == Double.MAX_VALUE);\n+        assertTrue(\"toDouble(Double.MIN_VALUE) failed\", NumberUtils.toDouble(Double.MIN_VALUE+\"\") == Double.MIN_VALUE);\n+        assertTrue(\"toDouble(empty) failed\", NumberUtils.toDouble(\"\") == 0.0d);\n+        assertTrue(\"toDouble(null) failed\", NumberUtils.toDouble(null) == 0.0d);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toDouble(String, double)}.\n+     */\n+    public void testStringToDoubleStringD() {\n+        assertTrue(\"toDouble(String,int) 1 failed\", NumberUtils.toDouble(\"1.2345\", 5.1d) == 1.2345d);\n+        assertTrue(\"toDouble(String,int) 2 failed\", NumberUtils.toDouble(\"a\", 5.0d) == 5.0d);\n+    }\n+\n+     /**\n+     * Test for {@link NumberUtils#toByte(String)}.\n+     */\n+    public void testToByteString() {\n+        assertTrue(\"toByte(String) 1 failed\", NumberUtils.toByte(\"123\") == 123);\n+        assertTrue(\"toByte(String) 2 failed\", NumberUtils.toByte(\"abc\") == 0);\n+        assertTrue(\"toByte(empty) failed\", NumberUtils.toByte(\"\") == 0);\n+        assertTrue(\"toByte(null) failed\", NumberUtils.toByte(null) == 0);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toByte(String, byte)}.\n+     */\n+    public void testToByteStringI() {\n+        assertTrue(\"toByte(String,byte) 1 failed\", NumberUtils.toByte(\"123\", (byte) 5) == 123);\n+        assertTrue(\"toByte(String,byte) 2 failed\", NumberUtils.toByte(\"12.3\", (byte) 5) == 5);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toShort(String)}.\n+     */\n+    public void testToShortString() {\n+        assertTrue(\"toShort(String) 1 failed\", NumberUtils.toShort(\"12345\") == 12345);\n+        assertTrue(\"toShort(String) 2 failed\", NumberUtils.toShort(\"abc\") == 0);\n+        assertTrue(\"toShort(empty) failed\", NumberUtils.toShort(\"\") == 0);\n+        assertTrue(\"toShort(null) failed\", NumberUtils.toShort(null) == 0);\n+    }\n+\n+    /**\n+     * Test for {@link NumberUtils#toShort(String, short)}.\n+     */\n+    public void testToShortStringI() {\n+        assertTrue(\"toShort(String,short) 1 failed\", NumberUtils.toShort(\"12345\", (short) 5) == 12345);\n+        assertTrue(\"toShort(String,short) 2 failed\", NumberUtils.toShort(\"1234.5\", (short) 5) == 5);\n+    }\n+\n+    public void testCreateNumber() {\n+        // a lot of things can go wrong\n+        assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n+        assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));\n+        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n+        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n+        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n+        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));\n+        assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n+            + (Integer.MAX_VALUE + 1L)));\n+        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n+        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345l\"));\n+        assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n+        assertEquals(\"createNumber(String) 8 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n+        assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n+        assertTrue(\"createNumber(String) 10 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n+        assertEquals(\"createNumber(String) 11 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n+        assertEquals(\"createNumber(String) 12 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n+        assertEquals(\"createNumber(String) 13 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n+        assertEquals(\"createNumber(String) 14 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n+        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n+        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n+                .createNumber(\"12345678901234567890L\"));\n+\n+        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n+        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {\n+            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n+                    .createNumber(\"1.1E-700F\"));\n+        }\n+        assertEquals(\"createNumber(String) 16 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n+                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n+        assertEquals(\"createNumber(String) 17 failed\", new Long(\"10\" + Integer.MAX_VALUE), NumberUtils\n+                .createNumber(\"10\" + Integer.MAX_VALUE));\n+        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n+                .createNumber(\"10\" + Long.MAX_VALUE));\n+\n+        // LANG-521\n+        assertEquals(\"createNumber(String) LANG-521 failed\", new Float(\"2.\"), NumberUtils.createNumber(\"2.\"));\n+    }\n+\n+    public void testCreateFloat() {\n+        assertEquals(\"createFloat(String) failed\", new Float(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n+        assertEquals(\"createFloat(null) failed\", null, NumberUtils.createFloat(null));\n+        this.testCreateFloatFailure(\"\");\n+        this.testCreateFloatFailure(\" \");\n+        this.testCreateFloatFailure(\"\\b\\t\\n\\f\\r\");\n+        // Funky whitespaces\n+        this.testCreateFloatFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n+    }\n+\n+    protected void testCreateFloatFailure(String str) {\n+        try {\n+            Float value = NumberUtils.createFloat(str);\n+            fail(\"createFloat(blank) failed: \" + value);\n+        } catch (NumberFormatException ex) {\n+            // empty\n+        }\n+    }\n+\n+    public void testCreateDouble() {\n+        assertEquals(\"createDouble(String) failed\", new Double(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n+        assertEquals(\"createDouble(null) failed\", null, NumberUtils.createDouble(null));\n+        this.testCreateDoubleFailure(\"\");\n+        this.testCreateDoubleFailure(\" \");\n+        this.testCreateDoubleFailure(\"\\b\\t\\n\\f\\r\");\n+        // Funky whitespaces\n+        this.testCreateDoubleFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n+    }\n+\n+    protected void testCreateDoubleFailure(String str) {\n+        try {\n+            Double value = NumberUtils.createDouble(str);\n+            fail(\"createDouble(blank) failed: \" + value);\n+        } catch (NumberFormatException ex) {\n+            // empty\n+        }\n+    }\n+\n+    public void testCreateInteger() {\n+        assertEquals(\"createInteger(String) failed\", new Integer(\"12345\"), NumberUtils.createInteger(\"12345\"));\n+        assertEquals(\"createInteger(null) failed\", null, NumberUtils.createInteger(null));\n+        this.testCreateIntegerFailure(\"\");\n+        this.testCreateIntegerFailure(\" \");\n+        this.testCreateIntegerFailure(\"\\b\\t\\n\\f\\r\");\n+        // Funky whitespaces\n+        this.testCreateIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n+    }\n+\n+    protected void testCreateIntegerFailure(String str) {\n+        try {\n+            Integer value = NumberUtils.createInteger(str);\n+            fail(\"createInteger(blank) failed: \" + value);\n+        } catch (NumberFormatException ex) {\n+            // empty\n+        }\n+    }\n+\n+    public void testCreateLong() {\n+        assertEquals(\"createLong(String) failed\", new Long(\"12345\"), NumberUtils.createLong(\"12345\"));\n+        assertEquals(\"createLong(null) failed\", null, NumberUtils.createLong(null));\n+        this.testCreateLongFailure(\"\");\n+        this.testCreateLongFailure(\" \");\n+        this.testCreateLongFailure(\"\\b\\t\\n\\f\\r\");\n+        // Funky whitespaces\n+        this.testCreateLongFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n+    }\n+\n+    protected void testCreateLongFailure(String str) {\n+        try {\n+            Long value = NumberUtils.createLong(str);\n+            fail(\"createLong(blank) failed: \" + value);\n+        } catch (NumberFormatException ex) {\n+            // empty\n+        }\n+    }\n+\n+    public void testCreateBigInteger() {\n+        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"));\n+        assertEquals(\"createBigInteger(null) failed\", null, NumberUtils.createBigInteger(null));\n+        this.testCreateBigIntegerFailure(\"\");\n+        this.testCreateBigIntegerFailure(\" \");\n+        this.testCreateBigIntegerFailure(\"\\b\\t\\n\\f\\r\");\n+        // Funky whitespaces\n+        this.testCreateBigIntegerFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n+    }\n+\n+    protected void testCreateBigIntegerFailure(String str) {\n+        try {\n+            BigInteger value = NumberUtils.createBigInteger(str);\n+            fail(\"createBigInteger(blank) failed: \" + value);\n+        } catch (NumberFormatException ex) {\n+            // empty\n+        }\n+    }\n+\n+    public void testCreateBigDecimal() {\n+        assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n+        assertEquals(\"createBigDecimal(null) failed\", null, NumberUtils.createBigDecimal(null));\n+        this.testCreateBigDecimalFailure(\"\");\n+        this.testCreateBigDecimalFailure(\" \");\n+        this.testCreateBigDecimalFailure(\"\\b\\t\\n\\f\\r\");\n+        // Funky whitespaces\n+        this.testCreateBigDecimalFailure(\"\\u00A0\\uFEFF\\u000B\\u000C\\u001C\\u001D\\u001E\\u001F\");\n+    }\n+\n+    protected void testCreateBigDecimalFailure(String str) {\n+        try {\n+            BigDecimal value = NumberUtils.createBigDecimal(str);\n+            fail(\"createBigDecimal(blank) failed: \" + value);\n+        } catch (NumberFormatException ex) {\n+            // empty\n+        }\n+    }\n+\n+    // min/max tests\n+    // ----------------------------------------------------------------------\n+    public void testMinLong() {\n+        final long[] l = null;\n+        try {\n+            NumberUtils.min(l);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.min(new long[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"min(long[]) failed for array length 1\",\n+            5,\n+            NumberUtils.min(new long[] { 5 }));\n+\n+        assertEquals(\n+            \"min(long[]) failed for array length 2\",\n+            6,\n+            NumberUtils.min(new long[] { 6, 9 }));\n+\n+        assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 }));\n+    }\n+\n+    public void testMinInt() {\n+        final int[] i = null;\n+        try {\n+            NumberUtils.min(i);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.min(new int[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"min(int[]) failed for array length 1\",\n+            5,\n+            NumberUtils.min(new int[] { 5 }));\n+\n+        assertEquals(\n+            \"min(int[]) failed for array length 2\",\n+            6,\n+            NumberUtils.min(new int[] { 6, 9 }));\n+\n+        assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 }));\n+    }\n+\n+    public void testMinShort() {\n+        final short[] s = null;\n+        try {\n+            NumberUtils.min(s);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.min(new short[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"min(short[]) failed for array length 1\",\n+            5,\n+            NumberUtils.min(new short[] { 5 }));\n+\n+        assertEquals(\n+            \"min(short[]) failed for array length 2\",\n+            6,\n+            NumberUtils.min(new short[] { 6, 9 }));\n+\n+        assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 }));\n+    }\n+\n+    public void testMinByte() {\n+        final byte[] b = null;\n+        try {\n+            NumberUtils.min(b);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.min(new byte[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"min(byte[]) failed for array length 1\",\n+            5,\n+            NumberUtils.min(new byte[] { 5 }));\n+\n+        assertEquals(\n+            \"min(byte[]) failed for array length 2\",\n+            6,\n+            NumberUtils.min(new byte[] { 6, 9 }));\n+\n+        assertEquals(-10, NumberUtils.min(new byte[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(-10, NumberUtils.min(new byte[] { -5, 0, -10, 5, 10 }));\n+    }\n+\n+    public void testMinDouble() {\n+        final double[] d = null;\n+        try {\n+            NumberUtils.min(d);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.min(new double[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"min(double[]) failed for array length 1\",\n+            5.12,\n+            NumberUtils.min(new double[] { 5.12 }),\n+            0);\n+\n+        assertEquals(\n+            \"min(double[]) failed for array length 2\",\n+            6.23,\n+            NumberUtils.min(new double[] { 6.23, 9.34 }),\n+            0);\n+\n+        assertEquals(\n+            \"min(double[]) failed for array length 5\",\n+            -10.45,\n+            NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }),\n+            0);\n+        assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n+        assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001);\n+    }\n+\n+    public void testMinFloat() {\n+        final float[] f = null;\n+        try {\n+            NumberUtils.min(f);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.min(new float[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"min(float[]) failed for array length 1\",\n+            5.9f,\n+            NumberUtils.min(new float[] { 5.9f }),\n+            0);\n+\n+        assertEquals(\n+            \"min(float[]) failed for array length 2\",\n+            6.8f,\n+            NumberUtils.min(new float[] { 6.8f, 9.7f }),\n+            0);\n+\n+        assertEquals(\n+            \"min(float[]) failed for array length 5\",\n+            -10.6f,\n+            NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }),\n+            0);\n+        assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n+        assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f);\n+    }\n+\n+    public void testMaxLong() {\n+        final long[] l = null;\n+        try {\n+            NumberUtils.max(l);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.max(new long[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"max(long[]) failed for array length 1\",\n+            5,\n+            NumberUtils.max(new long[] { 5 }));\n+\n+        assertEquals(\n+            \"max(long[]) failed for array length 2\",\n+            9,\n+            NumberUtils.max(new long[] { 6, 9 }));\n+\n+        assertEquals(\n+            \"max(long[]) failed for array length 5\",\n+            10,\n+            NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 }));\n+    }\n+\n+    public void testMaxInt() {\n+        final int[] i = null;\n+        try {\n+            NumberUtils.max(i);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.max(new int[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"max(int[]) failed for array length 1\",\n+            5,\n+            NumberUtils.max(new int[] { 5 }));\n+\n+        assertEquals(\n+            \"max(int[]) failed for array length 2\",\n+            9,\n+            NumberUtils.max(new int[] { 6, 9 }));\n+\n+        assertEquals(\n+            \"max(int[]) failed for array length 5\",\n+            10,\n+            NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 }));\n+    }\n+\n+    public void testMaxShort() {\n+        final short[] s = null;\n+        try {\n+            NumberUtils.max(s);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.max(new short[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"max(short[]) failed for array length 1\",\n+            5,\n+            NumberUtils.max(new short[] { 5 }));\n+\n+        assertEquals(\n+            \"max(short[]) failed for array length 2\",\n+            9,\n+            NumberUtils.max(new short[] { 6, 9 }));\n+\n+        assertEquals(\n+            \"max(short[]) failed for array length 5\",\n+            10,\n+            NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 }));\n+    }\n+\n+    public void testMaxByte() {\n+        final byte[] b = null;\n+        try {\n+            NumberUtils.max(b);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.max(new byte[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"max(byte[]) failed for array length 1\",\n+            5,\n+            NumberUtils.max(new byte[] { 5 }));\n+\n+        assertEquals(\n+            \"max(byte[]) failed for array length 2\",\n+            9,\n+            NumberUtils.max(new byte[] { 6, 9 }));\n+\n+        assertEquals(\n+            \"max(byte[]) failed for array length 5\",\n+            10,\n+            NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 }));\n+    }\n+\n+    public void testMaxDouble() {\n+        final double[] d = null;\n+        try {\n+            NumberUtils.max(d);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.max(new double[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"max(double[]) failed for array length 1\",\n+            5.1f,\n+            NumberUtils.max(new double[] { 5.1f }),\n+            0);\n+\n+        assertEquals(\n+            \"max(double[]) failed for array length 2\",\n+            9.2f,\n+            NumberUtils.max(new double[] { 6.3f, 9.2f }),\n+            0);\n+\n+        assertEquals(\n+            \"max(double[]) failed for float length 5\",\n+            10.4f,\n+            NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n+            0);\n+        assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n+        assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001);\n+    }\n+ \n+    public void testMaxFloat() {\n+        final float[] f = null;\n+        try {\n+            NumberUtils.max(f);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.max(new float[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"max(float[]) failed for array length 1\",\n+            5.1f,\n+            NumberUtils.max(new float[] { 5.1f }),\n+            0);\n+\n+        assertEquals(\n+            \"max(float[]) failed for array length 2\",\n+            9.2f,\n+            NumberUtils.max(new float[] { 6.3f, 9.2f }),\n+            0);\n+\n+        assertEquals(\n+            \"max(float[]) failed for float length 5\",\n+            10.4f,\n+            NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n+            0);\n+        assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n+        assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f);\n+    }\n+\n+    public void testMinimumLong() {\n+        assertEquals(\"minimum(long,long,long) 1 failed\", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L));\n+        assertEquals(\"minimum(long,long,long) 2 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L));\n+        assertEquals(\"minimum(long,long,long) 3 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L));\n+        assertEquals(\"minimum(long,long,long) 4 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L));\n+        assertEquals(\"minimum(long,long,long) 5 failed\", 12345L, NumberUtils.min(12345L, 12345L, 12345L));\n+    }\n+\n+    public void testMinimumInt() {\n+        assertEquals(\"minimum(int,int,int) 1 failed\", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2));\n+        assertEquals(\"minimum(int,int,int) 2 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2));\n+        assertEquals(\"minimum(int,int,int) 3 failed\", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345));\n+        assertEquals(\"minimum(int,int,int) 4 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345));\n+        assertEquals(\"minimum(int,int,int) 5 failed\", 12345, NumberUtils.min(12345, 12345, 12345));\n+    }\n+\n+    public void testMinimumShort() {\n+        short low = 1234;\n+        short mid = 1234 + 1;\n+        short high = 1234 + 2;\n+        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, high));\n+        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, low, high));\n+        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, high, low));\n+        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, low));\n+    }\n+\n+    public void testMinimumByte() {\n+        byte low = 123;\n+        byte mid = 123 + 1;\n+        byte high = 123 + 2;\n+        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, high));\n+        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, low, high));\n+        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, high, low));\n+        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, low));\n+    }\n+\n+    public void testMinimumDouble() {\n+        double low = 12.3;\n+        double mid = 12.3 + 1;\n+        double high = 12.3 + 2;\n+        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001);\n+        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001);\n+        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001);\n+        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001);\n+        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);\n+    }\n+\n+    public void testMinimumFloat() {\n+        float low = 12.3f;\n+        float mid = 12.3f + 1;\n+        float high = 12.3f + 2;\n+        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f);\n+        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f);\n+        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f);\n+        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f);\n+        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);\n+    }\n+\n+    public void testMaximumLong() {\n+        assertEquals(\"maximum(long,long,long) 1 failed\", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L));\n+        assertEquals(\"maximum(long,long,long) 2 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L));\n+        assertEquals(\"maximum(long,long,long) 3 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L));\n+        assertEquals(\"maximum(long,long,long) 4 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L));\n+        assertEquals(\"maximum(long,long,long) 5 failed\", 12345L, NumberUtils.max(12345L, 12345L, 12345L));\n+    }\n+\n+    public void testMaximumInt() {\n+        assertEquals(\"maximum(int,int,int) 1 failed\", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2));\n+        assertEquals(\"maximum(int,int,int) 2 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2));\n+        assertEquals(\"maximum(int,int,int) 3 failed\", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345));\n+        assertEquals(\"maximum(int,int,int) 4 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345));\n+        assertEquals(\"maximum(int,int,int) 5 failed\", 12345, NumberUtils.max(12345, 12345, 12345));\n+    }\n+\n+    public void testMaximumShort() {\n+        short low = 1234;\n+        short mid = 1234 + 1;\n+        short high = 1234 + 2;\n+        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(low, mid, high));\n+        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, low, high));\n+        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, high, low));\n+        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(high, mid, high));\n+    }\n+\n+    public void testMaximumByte() {\n+        byte low = 123;\n+        byte mid = 123 + 1;\n+        byte high = 123 + 2;\n+        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(low, mid, high));\n+        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, low, high));\n+        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, high, low));\n+        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(high, mid, high));\n+    }\n+\n+    public void testMaximumDouble() {\n+        double low = 12.3;\n+        double mid = 12.3 + 1;\n+        double high = 12.3 + 2;\n+        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001);\n+        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001);\n+        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001);\n+        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001);\n+        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);\n+    }\n+\n+    public void testMaximumFloat() {\n+        float low = 12.3f;\n+        float mid = 12.3f + 1;\n+        float high = 12.3f + 2;\n+        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f);\n+        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f);\n+        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f);\n+        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f);\n+        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);\n+    }\n+\n+    // Testing JDK against old Lang functionality\n+    public void testCompareDouble() {\n+        assertTrue(Double.compare(Double.NaN, Double.NaN) == 0);\n+        assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);\n+        assertTrue(Double.compare(Double.NaN, Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(Double.NaN, 1.2d) == +1);\n+        assertTrue(Double.compare(Double.NaN, 0.0d) == +1);\n+        assertTrue(Double.compare(Double.NaN, -0.0d) == +1);\n+        assertTrue(Double.compare(Double.NaN, -1.2d) == +1);\n+        assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);\n+        assertTrue(Double.compare(Double.MAX_VALUE, 1.2d) == +1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, 0.0d) == +1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, -0.0d) == +1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(1.2d, Double.NaN) == -1);\n+        assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(1.2d, 1.2d) == 0);\n+        assertTrue(Double.compare(1.2d, 0.0d) == +1);\n+        assertTrue(Double.compare(1.2d, -0.0d) == +1);\n+        assertTrue(Double.compare(1.2d, -1.2d) == +1);\n+        assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(0.0d, Double.NaN) == -1);\n+        assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(0.0d, 1.2d) == -1);\n+        assertTrue(Double.compare(0.0d, 0.0d) == 0);\n+        assertTrue(Double.compare(0.0d, -0.0d) == +1);\n+        assertTrue(Double.compare(0.0d, -1.2d) == +1);\n+        assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(-0.0d, Double.NaN) == -1);\n+        assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(-0.0d, 1.2d) == -1);\n+        assertTrue(Double.compare(-0.0d, 0.0d) == -1);\n+        assertTrue(Double.compare(-0.0d, -0.0d) == 0);\n+        assertTrue(Double.compare(-0.0d, -1.2d) == +1);\n+        assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(-1.2d, Double.NaN) == -1);\n+        assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(-1.2d, 1.2d) == -1);\n+        assertTrue(Double.compare(-1.2d, 0.0d) == -1);\n+        assertTrue(Double.compare(-1.2d, -0.0d) == -1);\n+        assertTrue(Double.compare(-1.2d, -1.2d) == 0);\n+        assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, 1.2d) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, 0.0d) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, -0.0d) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);\n+    }\n+\n+    public void testCompareFloat() {\n+        assertTrue(Float.compare(Float.NaN, Float.NaN) == 0);\n+        assertTrue(Float.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);\n+        assertTrue(Float.compare(Float.NaN, Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(Float.NaN, 1.2f) == +1);\n+        assertTrue(Float.compare(Float.NaN, 0.0f) == +1);\n+        assertTrue(Float.compare(Float.NaN, -0.0f) == +1);\n+        assertTrue(Float.compare(Float.NaN, -1.2f) == +1);\n+        assertTrue(Float.compare(Float.NaN, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(Float.MAX_VALUE, Float.NaN) == -1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);\n+        assertTrue(Float.compare(Float.MAX_VALUE, 1.2f) == +1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, 0.0f) == +1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, -0.0f) == +1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, -1.2f) == +1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(1.2f, Float.NaN) == -1);\n+        assertTrue(Float.compare(1.2f, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(1.2f, Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(1.2f, 1.2f) == 0);\n+        assertTrue(Float.compare(1.2f, 0.0f) == +1);\n+        assertTrue(Float.compare(1.2f, -0.0f) == +1);\n+        assertTrue(Float.compare(1.2f, -1.2f) == +1);\n+        assertTrue(Float.compare(1.2f, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(0.0f, Float.NaN) == -1);\n+        assertTrue(Float.compare(0.0f, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(0.0f, Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(0.0f, 1.2f) == -1);\n+        assertTrue(Float.compare(0.0f, 0.0f) == 0);\n+        assertTrue(Float.compare(0.0f, -0.0f) == +1);\n+        assertTrue(Float.compare(0.0f, -1.2f) == +1);\n+        assertTrue(Float.compare(0.0f, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(-0.0f, Float.NaN) == -1);\n+        assertTrue(Float.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(-0.0f, Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(-0.0f, 1.2f) == -1);\n+        assertTrue(Float.compare(-0.0f, 0.0f) == -1);\n+        assertTrue(Float.compare(-0.0f, -0.0f) == 0);\n+        assertTrue(Float.compare(-0.0f, -1.2f) == +1);\n+        assertTrue(Float.compare(-0.0f, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(-1.2f, Float.NaN) == -1);\n+        assertTrue(Float.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(-1.2f, Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(-1.2f, 1.2f) == -1);\n+        assertTrue(Float.compare(-1.2f, 0.0f) == -1);\n+        assertTrue(Float.compare(-1.2f, -0.0f) == -1);\n+        assertTrue(Float.compare(-1.2f, -1.2f) == 0);\n+        assertTrue(Float.compare(-1.2f, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(-Float.MAX_VALUE, Float.NaN) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, 1.2f) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, 0.0f) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, -0.0f) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, -1.2f) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);\n+    }\n+\n+    public void testIsDigits() {\n+        assertEquals(\"isDigits(null) failed\", false, NumberUtils.isDigits(null));\n+        assertEquals(\"isDigits('') failed\", false, NumberUtils.isDigits(\"\"));\n+        assertEquals(\"isDigits(String) failed\", true, NumberUtils.isDigits(\"12345\"));\n+        assertEquals(\"isDigits(String) neg 1 failed\", false, NumberUtils.isDigits(\"1234.5\"));\n+        assertEquals(\"isDigits(String) neg 3 failed\", false, NumberUtils.isDigits(\"1ab\"));\n+        assertEquals(\"isDigits(String) neg 4 failed\", false, NumberUtils.isDigits(\"abc\"));\n+    }\n+    \n+    /**\n+     * Tests isNumber(String) and tests that createNumber(String) returns\n+     * a valid number iff isNumber(String) returns false.\n+     */\n+    public void testIsNumber() {\n+        String val = \"12345\";\n+        assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\n+        val = \"1234.5\";\n+        assertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\n+        val = \".12345\";\n+        assertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\n+        val = \"1234E5\";\n+        assertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\n+        val = \"1234E+5\";\n+        assertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\n+        val = \"1234E-5\";\n+        assertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\n+        val = \"123.4E5\";\n+        assertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\n+        val = \"-1234\";\n+        assertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\n+        val = \"-1234.5\";\n+        assertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\n+        val = \"-.12345\";\n+        assertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\n+        val = \"-1234E5\";\n+        assertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\n+        val = \"0\";\n+        assertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\n+        val = \"-0\";\n+        assertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\n+        val = \"01234\";\n+        assertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\n+        val = \"-01234\";\n+        assertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\n+        val = \"0xABC123\";\n+        assertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\n+        val = \"0x0\";\n+        assertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\n+        val = \"123.4E21D\";\n+        assertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\n+        val = \"-221.23F\";\n+        assertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\n+        val = \"22338L\";\n+        assertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\n+        val = null;\n+        assertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\n+        val = \"\";\n+        assertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\n+        val = \"--2.3\";\n+        assertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\n+        val = \".12.3\";\n+        assertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\n+        val = \"-123E\";\n+        assertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\n+        val = \"-123E+-212\";\n+        assertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\n+        val = \"-123E2.12\";\n+        assertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\n+        val = \"0xGF\";\n+        assertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\n+        val = \"0xFAE-1\";\n+        assertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\n+        val = \".\";\n+        assertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\n+        val = \"-0ABC123\";\n+        assertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\n+        val = \"123.4E-D\";\n+        assertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\n+        val = \"123.4ED\";\n+        assertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\n+        val = \"1234E5l\";\n+        assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n+        val = \"11a\";\n+        assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val)); \n+        val = \"1a\";\n+        assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val)); \n+        val = \"a\";\n+        assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11g\";\n+        assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11z\";\n+        assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11def\";\n+        assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11d11\";\n+        assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11 11\";\n+        assertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));\n+        val = \" 1111\";\n+        assertTrue(\"isNumber(String) 23 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 23 Neg failed\", !checkCreateNumber(val));\n+        val = \"1111 \";\n+        assertTrue(\"isNumber(String) 24 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 24 Neg failed\", !checkCreateNumber(val));\n+\n+        // LANG-521\n+        val = \"2.\";\n+        assertTrue(\"isNumber(String) LANG-521 failed\", NumberUtils.isNumber(val));\n+    }\n+\n+    private boolean checkCreateNumber(String val) {\n+        try {\n+            Object obj = NumberUtils.createNumber(val);\n+            if (obj == null) {\n+                return false;\n+            }\n+            return true;\n+        } catch (NumberFormatException e) {\n+            return false;\n+       }\n+    }\n+\n+    @SuppressWarnings(\"cast\") // suppress instanceof warning check\n+    public void testConstants() {\n+        assertTrue(NumberUtils.LONG_ZERO instanceof Long);\n+        assertTrue(NumberUtils.LONG_ONE instanceof Long);\n+        assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long);\n+        assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer);\n+        assertTrue(NumberUtils.INTEGER_ONE instanceof Integer);\n+        assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer);\n+        assertTrue(NumberUtils.SHORT_ZERO instanceof Short);\n+        assertTrue(NumberUtils.SHORT_ONE instanceof Short);\n+        assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short);\n+        assertTrue(NumberUtils.BYTE_ZERO instanceof Byte);\n+        assertTrue(NumberUtils.BYTE_ONE instanceof Byte);\n+        assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte);\n+        assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double);\n+        assertTrue(NumberUtils.DOUBLE_ONE instanceof Double);\n+        assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double);\n+        assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);\n+        assertTrue(NumberUtils.FLOAT_ONE instanceof Float);\n+        assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);\n+        \n+        assertTrue(NumberUtils.LONG_ZERO.longValue() == 0);\n+        assertTrue(NumberUtils.LONG_ONE.longValue() == 1);\n+        assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1);\n+        assertTrue(NumberUtils.INTEGER_ZERO.intValue() == 0);\n+        assertTrue(NumberUtils.INTEGER_ONE.intValue() == 1);\n+        assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue() == -1);\n+        assertTrue(NumberUtils.SHORT_ZERO.shortValue() == 0);\n+        assertTrue(NumberUtils.SHORT_ONE.shortValue() == 1);\n+        assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue() == -1);\n+        assertTrue(NumberUtils.BYTE_ZERO.byteValue() == 0);\n+        assertTrue(NumberUtils.BYTE_ONE.byteValue() == 1);\n+        assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue() == -1);\n+        assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue() == 0.0d);\n+        assertTrue(NumberUtils.DOUBLE_ONE.doubleValue() == 1.0d);\n+        assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue() == -1.0d);\n+        assertTrue(NumberUtils.FLOAT_ZERO.floatValue() == 0.0f);\n+        assertTrue(NumberUtils.FLOAT_ONE.floatValue() == 1.0f);\n+        assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f);\n+    }\n+\n+    public void testLang300() {\n+        NumberUtils.createNumber(\"-1l\");\n+        NumberUtils.createNumber(\"01l\");\n+        NumberUtils.createNumber(\"1l\");\n+    }\n+\n+    public void testLang381() {\n+        assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN)));\n+        assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN)));\n+        assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN)));\n+        assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN)));\n+\n+        double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n+        assertTrue(Double.isNaN(NumberUtils.max(a)));\n+        assertTrue(Double.isNaN(NumberUtils.min(a)));\n+\n+        double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN };\n+        assertTrue(Double.isNaN(NumberUtils.max(b)));\n+        assertTrue(Double.isNaN(NumberUtils.min(b)));\n+\n+        float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n+        assertTrue(Float.isNaN(NumberUtils.max(aF)));\n+\n+        float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN };\n+        assertTrue(Float.isNaN(NumberUtils.max(bF)));\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.mutable;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @since 2.2\n+ * @see MutableBoolean\n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ */\n+public class MutableBooleanTest extends TestCase {\n+\n+    public MutableBooleanTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public void testCompareTo() {\n+        final MutableBoolean mutBool = new MutableBoolean(false);\n+\n+        assertEquals(0, mutBool.compareTo(new MutableBoolean(false)));\n+        assertEquals(-1, mutBool.compareTo(new MutableBoolean(true)));\n+        mutBool.setValue(true);\n+        assertEquals(+1, mutBool.compareTo(new MutableBoolean(false)));\n+        assertEquals(0, mutBool.compareTo(new MutableBoolean(true)));\n+\n+        try {\n+            mutBool.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {\n+        }\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals(false, new MutableBoolean().booleanValue());\n+\n+        assertEquals(true, new MutableBoolean(true).booleanValue());\n+        assertEquals(false, new MutableBoolean(false).booleanValue());\n+\n+        assertEquals(true, new MutableBoolean(Boolean.TRUE).booleanValue());\n+        assertEquals(false, new MutableBoolean(Boolean.FALSE).booleanValue());\n+\n+        try {\n+            new MutableBoolean(null);\n+            fail();\n+        } catch (NullPointerException ex) {\n+        }\n+    }\n+\n+    public void testEquals() {\n+        final MutableBoolean mutBoolA = new MutableBoolean(false);\n+        final MutableBoolean mutBoolB = new MutableBoolean(false);\n+        final MutableBoolean mutBoolC = new MutableBoolean(true);\n+\n+        assertEquals(true, mutBoolA.equals(mutBoolA));\n+        assertEquals(true, mutBoolA.equals(mutBoolB));\n+        assertEquals(true, mutBoolB.equals(mutBoolA));\n+        assertEquals(true, mutBoolB.equals(mutBoolB));\n+        assertEquals(false, mutBoolA.equals(mutBoolC));\n+        assertEquals(false, mutBoolB.equals(mutBoolC));\n+        assertEquals(true, mutBoolC.equals(mutBoolC));\n+        assertEquals(false, mutBoolA.equals(null));\n+        assertEquals(false, mutBoolA.equals(Boolean.FALSE));\n+        assertEquals(false, mutBoolA.equals(\"false\"));\n+    }\n+\n+    public void testGetSet() {\n+        assertEquals(false, new MutableBoolean().booleanValue());\n+        assertEquals(Boolean.FALSE, new MutableBoolean().getValue());\n+        \n+        final MutableBoolean mutBool = new MutableBoolean(false);\n+        assertEquals(Boolean.FALSE, mutBool.toBoolean());\n+        assertEquals(false, mutBool.booleanValue());\n+        assertEquals(true, mutBool.isFalse());\n+        assertEquals(false, mutBool.isTrue());\n+\n+        mutBool.setValue(Boolean.TRUE);\n+        assertEquals(Boolean.TRUE, mutBool.toBoolean());\n+        assertEquals(true, mutBool.booleanValue());\n+        assertEquals(false, mutBool.isFalse());\n+        assertEquals(true, mutBool.isTrue());\n+\n+        mutBool.setValue(false);\n+        assertEquals(false, mutBool.booleanValue());\n+\n+        mutBool.setValue(true);\n+        assertEquals(true, mutBool.booleanValue());\n+\n+        try {\n+            mutBool.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {\n+        }\n+    }\n+\n+    public void testHashCode() {\n+        final MutableBoolean mutBoolA = new MutableBoolean(false);\n+        final MutableBoolean mutBoolB = new MutableBoolean(false);\n+        final MutableBoolean mutBoolC = new MutableBoolean(true);\n+\n+        assertEquals(true, mutBoolA.hashCode() == mutBoolA.hashCode());\n+        assertEquals(true, mutBoolA.hashCode() == mutBoolB.hashCode());\n+        assertEquals(false, mutBoolA.hashCode() == mutBoolC.hashCode());\n+        assertEquals(true, mutBoolA.hashCode() == Boolean.FALSE.hashCode());\n+        assertEquals(true, mutBoolC.hashCode() == Boolean.TRUE.hashCode());\n+    }\n+\n+    public void testToString() {\n+        assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString());\n+        assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.mutable;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id$\n+ * @see MutableByte\n+ */\n+public class MutableByteTest extends TestCase {\n+\n+    public MutableByteTest(String testName) {\n+        super(testName);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals((byte) 0, new MutableByte().byteValue());\n+        \n+        assertEquals((byte) 1, new MutableByte((byte) 1).byteValue());\n+        \n+        assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue());\n+        assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue());\n+\n+        assertEquals((byte) 2, new MutableByte(\"2\").byteValue());\n+\n+        try {\n+            new MutableByte((Number)null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testGetSet() {\n+        final MutableByte mutNum = new MutableByte((byte) 0);\n+        assertEquals((byte) 0, new MutableByte().byteValue());\n+        assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue());\n+        \n+        mutNum.setValue((byte) 1);\n+        assertEquals((byte) 1, mutNum.byteValue());\n+        assertEquals(Byte.valueOf((byte) 1), mutNum.getValue());\n+        \n+        mutNum.setValue(Byte.valueOf((byte) 2));\n+        assertEquals((byte) 2, mutNum.byteValue());\n+        assertEquals(Byte.valueOf((byte) 2), mutNum.getValue());\n+        \n+        mutNum.setValue(new MutableByte((byte) 3));\n+        assertEquals((byte) 3, mutNum.byteValue());\n+        assertEquals(Byte.valueOf((byte) 3), mutNum.getValue());\n+        try {\n+            mutNum.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testEquals() {\n+        final MutableByte mutNumA = new MutableByte((byte) 0);\n+        final MutableByte mutNumB = new MutableByte((byte) 0);\n+        final MutableByte mutNumC = new MutableByte((byte) 1);\n+\n+        assertEquals(true, mutNumA.equals(mutNumA));\n+        assertEquals(true, mutNumA.equals(mutNumB));\n+        assertEquals(true, mutNumB.equals(mutNumA));\n+        assertEquals(true, mutNumB.equals(mutNumB));\n+        assertEquals(false, mutNumA.equals(mutNumC));\n+        assertEquals(false, mutNumB.equals(mutNumC));\n+        assertEquals(true, mutNumC.equals(mutNumC));\n+        assertEquals(false, mutNumA.equals(null));\n+        assertEquals(false, mutNumA.equals(Byte.valueOf((byte) 0)));\n+        assertEquals(false, mutNumA.equals(\"0\"));\n+    }\n+\n+    public void testHashCode() {\n+        final MutableByte mutNumA = new MutableByte((byte) 0);\n+        final MutableByte mutNumB = new MutableByte((byte) 0);\n+        final MutableByte mutNumC = new MutableByte((byte) 1);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode());\n+    }\n+\n+    public void testCompareTo() {\n+        final MutableByte mutNum = new MutableByte((byte) 0);\n+\n+        assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0)));\n+        assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1)));\n+        assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1)));\n+        try {\n+            mutNum.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testPrimitiveValues() {\n+        MutableByte mutNum = new MutableByte( (byte) 1 );\n+        \n+        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n+        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n+        assertEquals( (byte) 1, mutNum.byteValue() );\n+        assertEquals( (short) 1, mutNum.shortValue() );\n+        assertEquals( 1, mutNum.intValue() );\n+        assertEquals( 1L, mutNum.longValue() );\n+    }\n+\n+    public void testToByte() {\n+        assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte());\n+        assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte());\n+    }\n+\n+    public void testIncrement() {\n+        MutableByte mutNum = new MutableByte((byte) 1);\n+        mutNum.increment();\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testDecrement() {\n+        MutableByte mutNum = new MutableByte((byte) 1);\n+        mutNum.decrement();\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testAddValuePrimitive() {\n+        MutableByte mutNum = new MutableByte((byte) 1);\n+        mutNum.add((byte)1);\n+        \n+        assertEquals((byte) 2, mutNum.byteValue());\n+    }\n+\n+    public void testAddValueObject() {\n+        MutableByte mutNum = new MutableByte((byte) 1);\n+        mutNum.add(new Integer(1));\n+        \n+        assertEquals((byte) 2, mutNum.byteValue());\n+    }\n+\n+    public void testSubtractValuePrimitive() {\n+        MutableByte mutNum = new MutableByte((byte) 1);\n+        mutNum.subtract((byte) 1);\n+        \n+        assertEquals((byte) 0, mutNum.byteValue());\n+    }\n+\n+    public void testSubtractValueObject() {\n+        MutableByte mutNum = new MutableByte((byte) 1);\n+        mutNum.subtract(new Integer(1));\n+        \n+        assertEquals((byte) 0, mutNum.byteValue());\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"0\", new MutableByte((byte) 0).toString());\n+        assertEquals(\"10\", new MutableByte((byte) 10).toString());\n+        assertEquals(\"-123\", new MutableByte((byte) -123).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.mutable;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id$\n+ * @see MutableDouble\n+ */\n+public class MutableDoubleTest extends TestCase {\n+\n+    public MutableDoubleTest(String testName) {\n+        super(testName);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);\n+        \n+        assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d);\n+        \n+        assertEquals(2d, new MutableDouble(new Double(2d)).doubleValue(), 0.0001d);\n+        assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d);\n+        \n+        assertEquals(2d, new MutableDouble(\"2.0\").doubleValue(), 0.0001d);\n+\n+        try {\n+            new MutableDouble((Number)null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testGetSet() {\n+        final MutableDouble mutNum = new MutableDouble(0d);\n+        assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d);\n+        assertEquals(new Double(0), new MutableDouble().getValue());\n+        \n+        mutNum.setValue(1);\n+        assertEquals(1d, mutNum.doubleValue(), 0.0001d);\n+        assertEquals(new Double(1d), mutNum.getValue());\n+        \n+        mutNum.setValue(new Double(2d));\n+        assertEquals(2d, mutNum.doubleValue(), 0.0001d);\n+        assertEquals(new Double(2d), mutNum.getValue());\n+        \n+        mutNum.setValue(new MutableDouble(3d));\n+        assertEquals(3d, mutNum.doubleValue(), 0.0001d);\n+        assertEquals(new Double(3d), mutNum.getValue());\n+        try {\n+            mutNum.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testNanInfinite() {\n+        MutableDouble mutNum = new MutableDouble(Double.NaN);\n+        assertEquals(true, mutNum.isNaN());\n+        \n+        mutNum = new MutableDouble(Double.POSITIVE_INFINITY);\n+        assertEquals(true, mutNum.isInfinite());\n+        \n+        mutNum = new MutableDouble(Double.NEGATIVE_INFINITY);\n+        assertEquals(true, mutNum.isInfinite());\n+    }\n+\n+    public void testEquals() {\n+        final MutableDouble mutNumA = new MutableDouble(0d);\n+        final MutableDouble mutNumB = new MutableDouble(0d);\n+        final MutableDouble mutNumC = new MutableDouble(1d);\n+\n+        assertEquals(true, mutNumA.equals(mutNumA));\n+        assertEquals(true, mutNumA.equals(mutNumB));\n+        assertEquals(true, mutNumB.equals(mutNumA));\n+        assertEquals(true, mutNumB.equals(mutNumB));\n+        assertEquals(false, mutNumA.equals(mutNumC));\n+        assertEquals(false, mutNumB.equals(mutNumC));\n+        assertEquals(true, mutNumC.equals(mutNumC));\n+        assertEquals(false, mutNumA.equals(null));\n+        assertEquals(false, mutNumA.equals(new Double(0d)));\n+        assertEquals(false, mutNumA.equals(\"0\"));\n+    }\n+\n+    public void testHashCode() {\n+        final MutableDouble mutNumA = new MutableDouble(0d);\n+        final MutableDouble mutNumB = new MutableDouble(0d);\n+        final MutableDouble mutNumC = new MutableDouble(1d);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == new Double(0d).hashCode());\n+    }\n+\n+    public void testCompareTo() {\n+        final MutableDouble mutNum = new MutableDouble(0d);\n+\n+        assertEquals(0, mutNum.compareTo(new MutableDouble(0d)));\n+        assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d)));\n+        assertEquals(-1, mutNum.compareTo(new MutableDouble(1d)));\n+        try {\n+            mutNum.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testPrimitiveValues() {\n+        MutableDouble mutNum = new MutableDouble(1.7);\n+        \n+        assertEquals( 1.7F, mutNum.floatValue(), 0 );\n+        assertEquals( 1.7, mutNum.doubleValue(), 0 );\n+        assertEquals( (byte) 1, mutNum.byteValue() );\n+        assertEquals( (short) 1, mutNum.shortValue() );\n+        assertEquals( 1, mutNum.intValue() );\n+        assertEquals( 1L, mutNum.longValue() );\n+    }\n+\n+    public void testToDouble() {\n+        assertEquals(new Double(0d), new MutableDouble(0d).toDouble());\n+        assertEquals(new Double(12.3d), new MutableDouble(12.3d).toDouble());\n+    }\n+\n+    public void testIncrement() {\n+        MutableDouble mutNum = new MutableDouble(1);\n+        mutNum.increment();\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testDecrement() {\n+        MutableDouble mutNum = new MutableDouble(1);\n+        mutNum.decrement();\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testAddValuePrimitive() {\n+        MutableDouble mutNum = new MutableDouble(1);\n+        mutNum.add(1.1d);\n+        \n+        assertEquals(2.1d, mutNum.doubleValue(), 0.01d);\n+    }\n+\n+    public void testAddValueObject() {\n+        MutableDouble mutNum = new MutableDouble(1);\n+        mutNum.add(new Double(1.1d));\n+        \n+        assertEquals(2.1d, mutNum.doubleValue(), 0.01d);\n+    }\n+\n+    public void testSubtractValuePrimitive() {\n+        MutableDouble mutNum = new MutableDouble(1);\n+        mutNum.subtract(0.9d);\n+        \n+        assertEquals(0.1d, mutNum.doubleValue(), 0.01d);\n+    }\n+\n+    public void testSubtractValueObject() {\n+        MutableDouble mutNum = new MutableDouble(1);\n+        mutNum.subtract(new Double(0.9d));\n+        \n+        assertEquals(0.1d, mutNum.doubleValue(), 0.01d);\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"0.0\", new MutableDouble(0d).toString());\n+        assertEquals(\"10.0\", new MutableDouble(10d).toString());\n+        assertEquals(\"-123.0\", new MutableDouble(-123d).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.mutable;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id$\n+ * @see MutableFloat\n+ */\n+public class MutableFloatTest extends TestCase {\n+\n+    public MutableFloatTest(String testName) {\n+        super(testName);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);\n+        \n+        assertEquals(1f, new MutableFloat(1f).floatValue(), 0.0001f);\n+        \n+        assertEquals(2f, new MutableFloat(new Float(2f)).floatValue(), 0.0001f);\n+        assertEquals(3f, new MutableFloat(new MutableFloat(3f)).floatValue(), 0.0001f);\n+\n+        assertEquals(2f, new MutableDouble(\"2.0\").floatValue(), 0.0001f);\n+\n+        try {\n+            new MutableFloat((Number)null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testGetSet() {\n+        final MutableFloat mutNum = new MutableFloat(0f);\n+        assertEquals(0f, new MutableFloat().floatValue(), 0.0001f);\n+        assertEquals(new Float(0), new MutableFloat().getValue());\n+        \n+        mutNum.setValue(1);\n+        assertEquals(1f, mutNum.floatValue(), 0.0001f);\n+        assertEquals(new Float(1f), mutNum.getValue());\n+        \n+        mutNum.setValue(new Float(2f));\n+        assertEquals(2f, mutNum.floatValue(), 0.0001f);\n+        assertEquals(new Float(2f), mutNum.getValue());\n+        \n+        mutNum.setValue(new MutableFloat(3f));\n+        assertEquals(3f, mutNum.floatValue(), 0.0001f);\n+        assertEquals(new Float(3f), mutNum.getValue());\n+        try {\n+            mutNum.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testNanInfinite() {\n+        MutableFloat mutNum = new MutableFloat(Float.NaN);\n+        assertEquals(true, mutNum.isNaN());\n+        \n+        mutNum = new MutableFloat(Float.POSITIVE_INFINITY);\n+        assertEquals(true, mutNum.isInfinite());\n+        \n+        mutNum = new MutableFloat(Float.NEGATIVE_INFINITY);\n+        assertEquals(true, mutNum.isInfinite());\n+    }\n+\n+    public void testEquals() {\n+        final MutableFloat mutNumA = new MutableFloat(0f);\n+        final MutableFloat mutNumB = new MutableFloat(0f);\n+        final MutableFloat mutNumC = new MutableFloat(1f);\n+\n+        assertEquals(true, mutNumA.equals(mutNumA));\n+        assertEquals(true, mutNumA.equals(mutNumB));\n+        assertEquals(true, mutNumB.equals(mutNumA));\n+        assertEquals(true, mutNumB.equals(mutNumB));\n+        assertEquals(false, mutNumA.equals(mutNumC));\n+        assertEquals(false, mutNumB.equals(mutNumC));\n+        assertEquals(true, mutNumC.equals(mutNumC));\n+        assertEquals(false, mutNumA.equals(null));\n+        assertEquals(false, mutNumA.equals(new Float(0f)));\n+        assertEquals(false, mutNumA.equals(\"0\"));\n+    }\n+\n+    public void testHashCode() {\n+        final MutableFloat mutNumA = new MutableFloat(0f);\n+        final MutableFloat mutNumB = new MutableFloat(0f);\n+        final MutableFloat mutNumC = new MutableFloat(1f);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == new Float(0f).hashCode());\n+    }\n+\n+    public void testCompareTo() {\n+        final MutableFloat mutNum = new MutableFloat(0f);\n+\n+        assertEquals(0, mutNum.compareTo(new MutableFloat(0f)));\n+        assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f)));\n+        assertEquals(-1, mutNum.compareTo(new MutableFloat(1f)));\n+        try {\n+            mutNum.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testPrimitiveValues() {\n+        MutableFloat mutNum = new MutableFloat(1.7F);\n+        \n+        assertEquals( 1, mutNum.intValue() );\n+        assertEquals( 1.7, mutNum.doubleValue(), 0.00001 );\n+        assertEquals( (byte) 1, mutNum.byteValue() );\n+        assertEquals( (short) 1, mutNum.shortValue() );\n+        assertEquals( 1, mutNum.intValue() );\n+        assertEquals( 1L, mutNum.longValue() );\n+    }\n+\n+    public void testToFloat() {\n+        assertEquals(new Float(0f), new MutableFloat(0f).toFloat());\n+        assertEquals(new Float(12.3f), new MutableFloat(12.3f).toFloat());\n+    }\n+\n+    public void testIncrement() {\n+        MutableFloat mutNum = new MutableFloat(1);\n+        mutNum.increment();\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testDecrement() {\n+        MutableFloat mutNum = new MutableFloat(1);\n+        mutNum.decrement();\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testAddValuePrimitive() {\n+        MutableFloat mutNum = new MutableFloat(1);\n+        mutNum.add(1.1f);\n+        \n+        assertEquals(2.1f, mutNum.floatValue(), 0.01f);\n+    }\n+\n+    public void testAddValueObject() {\n+        MutableFloat mutNum = new MutableFloat(1);\n+        mutNum.add(new Float(1.1f));\n+        \n+        assertEquals(2.1f, mutNum.floatValue(), 0.01f);\n+    }\n+\n+    public void testSubtractValuePrimitive() {\n+        MutableFloat mutNum = new MutableFloat(1);\n+        mutNum.subtract(0.9f);\n+        \n+        assertEquals(0.1f, mutNum.floatValue(), 0.01f);\n+    }\n+\n+    public void testSubtractValueObject() {\n+        MutableFloat mutNum = new MutableFloat(1);\n+        mutNum.subtract(new Float(0.9f));\n+        \n+        assertEquals(0.1f, mutNum.floatValue(), 0.01f);\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"0.0\", new MutableFloat(0f).toString());\n+        assertEquals(\"10.0\", new MutableFloat(10f).toString());\n+        assertEquals(\"-123.0\", new MutableFloat(-123f).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.mutable;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id$\n+ * @see MutableInt\n+ */\n+public class MutableIntTest extends TestCase {\n+\n+    public MutableIntTest(String testName) {\n+        super(testName);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals(0, new MutableInt().intValue());\n+        \n+        assertEquals(1, new MutableInt(1).intValue());\n+        \n+        assertEquals(2, new MutableInt(new Integer(2)).intValue());\n+        assertEquals(3, new MutableInt(new MutableLong(3)).intValue());\n+\n+        assertEquals(2, new MutableInt(\"2\").intValue());\n+\n+        try {\n+            new MutableInt((Number)null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testGetSet() {\n+        final MutableInt mutNum = new MutableInt(0);\n+        assertEquals(0, new MutableInt().intValue());\n+        assertEquals(new Integer(0), new MutableInt().getValue());\n+        \n+        mutNum.setValue(1);\n+        assertEquals(1, mutNum.intValue());\n+        assertEquals(new Integer(1), mutNum.getValue());\n+        \n+        mutNum.setValue(new Integer(2));\n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(new Integer(2), mutNum.getValue());\n+        \n+        mutNum.setValue(new MutableLong(3));\n+        assertEquals(3, mutNum.intValue());\n+        assertEquals(new Integer(3), mutNum.getValue());\n+        try {\n+            mutNum.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testEquals() {\n+        this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1));\n+        // Should Numbers be supported? GaryG July-21-2005.\n+        //this.testEquals(mutNumA, new Integer(0), mutNumC);\n+    }\n+\n+    /**\n+     * @param numA must not be a 0 Integer; must not equal numC.\n+     * @param numB must equal numA; must not equal numC.\n+     * @param numC must not equal numA; must not equal numC.\n+     */\n+    void testEquals(final Number numA, final Number numB, final Number numC) {\n+        assertEquals(true, numA.equals(numA));\n+        assertEquals(true, numA.equals(numB));\n+        assertEquals(true, numB.equals(numA));\n+        assertEquals(true, numB.equals(numB));\n+        assertEquals(false, numA.equals(numC));\n+        assertEquals(false, numB.equals(numC));\n+        assertEquals(true, numC.equals(numC));\n+        assertEquals(false, numA.equals(null));\n+        assertEquals(false, numA.equals(new Integer(0)));\n+        assertEquals(false, numA.equals(\"0\"));\n+    }\n+\n+    public void testHashCode() {\n+        final MutableInt mutNumA = new MutableInt(0);\n+        final MutableInt mutNumB = new MutableInt(0);\n+        final MutableInt mutNumC = new MutableInt(1);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == new Integer(0).hashCode());\n+    }\n+\n+    public void testCompareTo() {\n+        final MutableInt mutNum = new MutableInt(0);\n+\n+        assertEquals(0, mutNum.compareTo(new MutableInt(0)));\n+        assertEquals(+1, mutNum.compareTo(new MutableInt(-1)));\n+        assertEquals(-1, mutNum.compareTo(new MutableInt(1)));\n+        try {\n+            mutNum.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testPrimitiveValues() {\n+        MutableInt mutNum = new MutableInt(1);\n+        \n+        assertEquals( (byte) 1, mutNum.byteValue() );\n+        assertEquals( (short) 1, mutNum.shortValue() );\n+        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n+        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n+        assertEquals( 1L, mutNum.longValue() );\n+    }\n+\n+    public void testToInteger() {\n+        assertEquals(new Integer(0), new MutableInt(0).toInteger());\n+        assertEquals(new Integer(123), new MutableInt(123).toInteger());\n+    }\n+\n+    public void testIncrement() {\n+        MutableInt mutNum = new MutableInt(1);\n+        mutNum.increment();\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testDecrement() {\n+        MutableInt mutNum = new MutableInt(1);\n+        mutNum.decrement();\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testAddValuePrimitive() {\n+        MutableInt mutNum = new MutableInt(1);\n+        mutNum.add(1);\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testAddValueObject() {\n+        MutableInt mutNum = new MutableInt(1);\n+        mutNum.add(new Integer(1));\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testSubtractValuePrimitive() {\n+        MutableInt mutNum = new MutableInt(1);\n+        mutNum.subtract(1);\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testSubtractValueObject() {\n+        MutableInt mutNum = new MutableInt(1);\n+        mutNum.subtract(new Integer(1));\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"0\", new MutableInt(0).toString());\n+        assertEquals(\"10\", new MutableInt(10).toString());\n+        assertEquals(\"-123\", new MutableInt(-123).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.mutable;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id$\n+ * @see MutableLong\n+ */\n+public class MutableLongTest extends TestCase {\n+\n+    public MutableLongTest(String testName) {\n+        super(testName);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals(0, new MutableLong().longValue());\n+        \n+        assertEquals(1, new MutableLong(1).longValue());\n+        \n+        assertEquals(2, new MutableLong(new Long(2)).longValue());\n+        assertEquals(3, new MutableLong(new MutableLong(3)).longValue());\n+\n+        assertEquals(2, new MutableLong(\"2\").longValue());\n+\n+        try {\n+            new MutableLong((Number)null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testGetSet() {\n+        final MutableLong mutNum = new MutableLong(0);\n+        assertEquals(0, new MutableLong().longValue());\n+        assertEquals(new Long(0), new MutableLong().getValue());\n+        \n+        mutNum.setValue(1);\n+        assertEquals(1, mutNum.longValue());\n+        assertEquals(new Long(1), mutNum.getValue());\n+        \n+        mutNum.setValue(new Long(2));\n+        assertEquals(2, mutNum.longValue());\n+        assertEquals(new Long(2), mutNum.getValue());\n+        \n+        mutNum.setValue(new MutableLong(3));\n+        assertEquals(3, mutNum.longValue());\n+        assertEquals(new Long(3), mutNum.getValue());\n+        try {\n+            mutNum.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testEquals() {\n+        final MutableLong mutNumA = new MutableLong(0);\n+        final MutableLong mutNumB = new MutableLong(0);\n+        final MutableLong mutNumC = new MutableLong(1);\n+\n+        assertEquals(true, mutNumA.equals(mutNumA));\n+        assertEquals(true, mutNumA.equals(mutNumB));\n+        assertEquals(true, mutNumB.equals(mutNumA));\n+        assertEquals(true, mutNumB.equals(mutNumB));\n+        assertEquals(false, mutNumA.equals(mutNumC));\n+        assertEquals(false, mutNumB.equals(mutNumC));\n+        assertEquals(true, mutNumC.equals(mutNumC));\n+        assertEquals(false, mutNumA.equals(null));\n+        assertEquals(false, mutNumA.equals(new Long(0)));\n+        assertEquals(false, mutNumA.equals(\"0\"));\n+    }\n+\n+    public void testHashCode() {\n+        final MutableLong mutNumA = new MutableLong(0);\n+        final MutableLong mutNumB = new MutableLong(0);\n+        final MutableLong mutNumC = new MutableLong(1);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == new Long(0).hashCode());\n+    }\n+\n+    public void testCompareTo() {\n+        final MutableLong mutNum = new MutableLong(0);\n+\n+        assertEquals(0, mutNum.compareTo(new MutableLong(0)));\n+        assertEquals(+1, mutNum.compareTo(new MutableLong(-1)));\n+        assertEquals(-1, mutNum.compareTo(new MutableLong(1)));\n+        try {\n+            mutNum.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testPrimitiveValues() {\n+        MutableLong mutNum = new MutableLong(1L);\n+\n+        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n+        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n+        assertEquals( (byte) 1, mutNum.byteValue() );\n+        assertEquals( (short) 1, mutNum.shortValue() );\n+        assertEquals( 1, mutNum.intValue() );\n+        assertEquals( 1L, mutNum.longValue() );\n+    }\n+\n+    public void testToLong() {\n+        assertEquals(new Long(0L), new MutableLong(0L).toLong());\n+        assertEquals(new Long(123L), new MutableLong(123L).toLong());\n+    }\n+\n+    public void testIncrement() {\n+        MutableLong mutNum = new MutableLong(1);\n+        mutNum.increment();\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testDecrement() {\n+        MutableLong mutNum = new MutableLong(1);\n+        mutNum.decrement();\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testAddValuePrimitive() {\n+        MutableLong mutNum = new MutableLong(1);\n+        mutNum.add(1);\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testAddValueObject() {\n+        MutableLong mutNum = new MutableLong(1);\n+        mutNum.add(new Long(1));\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testSubtractValuePrimitive() {\n+        MutableLong mutNum = new MutableLong(1);\n+        mutNum.subtract(1);\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testSubtractValueObject() {\n+        MutableLong mutNum = new MutableLong(1);\n+        mutNum.subtract(new Long(1));\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"0\", new MutableLong(0).toString());\n+        assertEquals(\"10\", new MutableLong(10).toString());\n+        assertEquals(\"-123\", new MutableLong(-123).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.mutable;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id$\n+ * @see MutableShort\n+ */\n+public class MutableObjectTest extends TestCase {\n+\n+    public MutableObjectTest(String testName) {\n+        super(testName);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals(null, new MutableObject<String>().getValue());\n+        \n+        Integer i = new Integer(6);\n+        assertSame(i, new MutableObject<Integer>(i).getValue());\n+        assertSame(\"HI\", new MutableObject<String>(\"HI\").getValue());\n+        assertSame(null, new MutableObject<Object>(null).getValue());\n+    }\n+\n+    public void testGetSet() {\n+        final MutableObject<String> mutNum = new MutableObject<String>();\n+        assertEquals(null, new MutableObject<Object>().getValue());\n+        \n+        mutNum.setValue(\"HELLO\");\n+        assertSame(\"HELLO\", mutNum.getValue());\n+        \n+        mutNum.setValue(null);\n+        assertSame(null, mutNum.getValue());\n+    }\n+\n+    public void testEquals() {\n+        final MutableObject<String> mutNumA = new MutableObject<String>(\"ALPHA\");\n+        final MutableObject<String> mutNumB = new MutableObject<String>(\"ALPHA\");\n+        final MutableObject<String> mutNumC = new MutableObject<String>(\"BETA\");\n+        final MutableObject<String> mutNumD = new MutableObject<String>(null);\n+\n+        assertEquals(true, mutNumA.equals(mutNumA));\n+        assertEquals(true, mutNumA.equals(mutNumB));\n+        assertEquals(true, mutNumB.equals(mutNumA));\n+        assertEquals(true, mutNumB.equals(mutNumB));\n+        assertEquals(false, mutNumA.equals(mutNumC));\n+        assertEquals(false, mutNumB.equals(mutNumC));\n+        assertEquals(true, mutNumC.equals(mutNumC));\n+        assertEquals(false, mutNumA.equals(mutNumD));\n+        assertEquals(true, mutNumD.equals(mutNumD));\n+        \n+        assertEquals(false, mutNumA.equals(null));\n+        assertEquals(false, mutNumA.equals(new Object()));\n+        assertEquals(false, mutNumA.equals(\"0\"));\n+    }\n+\n+    public void testHashCode() {\n+        final MutableObject<String> mutNumA = new MutableObject<String>(\"ALPHA\");\n+        final MutableObject<String> mutNumB = new MutableObject<String>(\"ALPHA\");\n+        final MutableObject<String> mutNumC = new MutableObject<String>(\"BETA\");\n+        final MutableObject<String> mutNumD = new MutableObject<String>(null);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumD.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == \"ALPHA\".hashCode());\n+        assertEquals(0, mutNumD.hashCode());\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"HI\", new MutableObject<String>(\"HI\").toString());\n+        assertEquals(\"10.0\", new MutableObject<Double>(new Double(10)).toString());\n+        assertEquals(\"null\", new MutableObject<Object>(null).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.mutable;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id$\n+ * @see MutableShort\n+ */\n+public class MutableShortTest extends TestCase {\n+\n+    public MutableShortTest(String testName) {\n+        super(testName);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals((short) 0, new MutableShort().shortValue());\n+        \n+        assertEquals((short) 1, new MutableShort((short) 1).shortValue());\n+        \n+        assertEquals((short) 2, new MutableShort(new Short((short) 2)).shortValue());\n+        assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue());\n+\n+        assertEquals((short) 2, new MutableShort(\"2\").shortValue());\n+\n+        try {\n+            new MutableShort((Number)null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testGetSet() {\n+        final MutableShort mutNum = new MutableShort((short) 0);\n+        assertEquals((short) 0, new MutableShort().shortValue());\n+        assertEquals(new Short((short) 0), new MutableShort().getValue());\n+        \n+        mutNum.setValue((short) 1);\n+        assertEquals((short) 1, mutNum.shortValue());\n+        assertEquals(new Short((short) 1), mutNum.getValue());\n+        \n+        mutNum.setValue(new Short((short) 2));\n+        assertEquals((short) 2, mutNum.shortValue());\n+        assertEquals(new Short((short) 2), mutNum.getValue());\n+        \n+        mutNum.setValue(new MutableShort((short) 3));\n+        assertEquals((short) 3, mutNum.shortValue());\n+        assertEquals(new Short((short) 3), mutNum.getValue());\n+        try {\n+            mutNum.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testEquals() {\n+        final MutableShort mutNumA = new MutableShort((short) 0);\n+        final MutableShort mutNumB = new MutableShort((short) 0);\n+        final MutableShort mutNumC = new MutableShort((short) 1);\n+\n+        assertEquals(true, mutNumA.equals(mutNumA));\n+        assertEquals(true, mutNumA.equals(mutNumB));\n+        assertEquals(true, mutNumB.equals(mutNumA));\n+        assertEquals(true, mutNumB.equals(mutNumB));\n+        assertEquals(false, mutNumA.equals(mutNumC));\n+        assertEquals(false, mutNumB.equals(mutNumC));\n+        assertEquals(true, mutNumC.equals(mutNumC));\n+        assertEquals(false, mutNumA.equals(null));\n+        assertEquals(false, mutNumA.equals(new Short((short) 0)));\n+        assertEquals(false, mutNumA.equals(\"0\"));\n+    }\n+\n+    public void testHashCode() {\n+        final MutableShort mutNumA = new MutableShort((short) 0);\n+        final MutableShort mutNumB = new MutableShort((short) 0);\n+        final MutableShort mutNumC = new MutableShort((short) 1);\n+\n+        assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n+        assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n+        assertEquals(true, mutNumA.hashCode() == new Short((short) 0).hashCode());\n+    }\n+\n+    public void testCompareTo() {\n+        final MutableShort mutNum = new MutableShort((short) 0);\n+\n+        assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0)));\n+        assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1)));\n+        assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1)));\n+        try {\n+            mutNum.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testPrimitiveValues() {\n+        MutableShort mutNum = new MutableShort( (short) 1 );\n+        \n+        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n+        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n+        assertEquals( (byte) 1, mutNum.byteValue() );\n+        assertEquals( (short) 1, mutNum.shortValue() );\n+        assertEquals( 1, mutNum.intValue() );\n+        assertEquals( 1L, mutNum.longValue() );\n+    }\n+\n+    public void testToShort() {\n+        assertEquals(new Short((short) 0), new MutableShort((short) 0).toShort());\n+        assertEquals(new Short((short) 123), new MutableShort((short) 123).toShort());\n+    }\n+\n+    public void testIncrement() {\n+        MutableShort mutNum = new MutableShort((short) 1);\n+        mutNum.increment();\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testDecrement() {\n+        MutableShort mutNum = new MutableShort((short) 1);\n+        mutNum.decrement();\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testAddValuePrimitive() {\n+        MutableShort mutNum = new MutableShort((short) 1);\n+        mutNum.add((short) 1);\n+        \n+        assertEquals((short) 2, mutNum.shortValue());\n+    }\n+\n+    public void testAddValueObject() {\n+        MutableShort mutNum = new MutableShort((short) 1);\n+        mutNum.add(new Short((short) 1));\n+        \n+        assertEquals((short) 2, mutNum.shortValue());\n+    }\n+\n+    public void testSubtractValuePrimitive() {\n+        MutableShort mutNum = new MutableShort((short) 1);\n+        mutNum.subtract((short) 1);\n+        \n+        assertEquals((short) 0, mutNum.shortValue());\n+    }\n+\n+    public void testSubtractValueObject() {\n+        MutableShort mutNum = new MutableShort((short) 1);\n+        mutNum.subtract(new Short((short) 1));\n+        \n+        assertEquals((short) 0, mutNum.shortValue());\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"0\", new MutableShort((short) 0).toString());\n+        assertEquals(\"10\", new MutableShort((short) 10).toString());\n+        assertEquals(\"-123\", new MutableShort((short) -123).toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+\n+/**\n+ * Unit tests ConstructorUtils\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class ConstructorUtilsTest extends TestCase {\n+    public static class TestBean {\n+        private String toString;\n+\n+        public TestBean() {\n+            toString = \"()\";\n+        }\n+\n+        public TestBean(int i) {\n+            toString = \"(int)\";\n+        }\n+\n+        public TestBean(Integer i) {\n+            toString = \"(Integer)\";\n+        }\n+\n+        public TestBean(double d) {\n+            toString = \"(double)\";\n+        }\n+\n+        public TestBean(String s) {\n+            toString = \"(String)\";\n+        }\n+\n+        public TestBean(Object o) {\n+            toString = \"(Object)\";\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return toString;\n+        }\n+    }\n+\n+    private static class PrivateClass {\n+        @SuppressWarnings(\"unused\")\n+        public PrivateClass() {\n+        }\n+    }\n+\n+    private Map<Class<?>, Class<?>[]> classCache;\n+\n+    public ConstructorUtilsTest(String name) {\n+        super(name);\n+        classCache = new HashMap<Class<?>, Class<?>[]>();\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        classCache.clear();\n+    }\n+\n+    public void testConstructor() throws Exception {\n+        assertNotNull(MethodUtils.class.newInstance());\n+    }\n+\n+    public void testInvokeConstructor() throws Exception {\n+        assertEquals(\"()\", ConstructorUtils.invokeConstructor(TestBean.class,\n+                ArrayUtils.EMPTY_CLASS_ARRAY).toString());\n+        assertEquals(\"()\", ConstructorUtils.invokeConstructor(TestBean.class,\n+                (Class[]) null).toString());\n+        assertEquals(\"(String)\", ConstructorUtils.invokeConstructor(\n+                TestBean.class, \"\").toString());\n+        assertEquals(\"(Object)\", ConstructorUtils.invokeConstructor(\n+                TestBean.class, new Object()).toString());\n+        assertEquals(\"(Object)\", ConstructorUtils.invokeConstructor(\n+                TestBean.class, Boolean.TRUE).toString());\n+        assertEquals(\"(Integer)\", ConstructorUtils.invokeConstructor(\n+                TestBean.class, NumberUtils.INTEGER_ONE).toString());\n+        assertEquals(\"(int)\", ConstructorUtils.invokeConstructor(\n+                TestBean.class, NumberUtils.BYTE_ONE).toString());\n+        assertEquals(\"(double)\", ConstructorUtils.invokeConstructor(\n+                TestBean.class, NumberUtils.LONG_ONE).toString());\n+        assertEquals(\"(double)\", ConstructorUtils.invokeConstructor(\n+                TestBean.class, NumberUtils.DOUBLE_ONE).toString());\n+    }\n+\n+    public void testInvokeExactConstructor() throws Exception {\n+        assertEquals(\"()\", ConstructorUtils.invokeExactConstructor(\n+                TestBean.class, ArrayUtils.EMPTY_CLASS_ARRAY).toString());\n+        assertEquals(\"()\", ConstructorUtils.invokeExactConstructor(\n+                TestBean.class, (Class[]) null).toString());\n+        assertEquals(\"(String)\", ConstructorUtils.invokeExactConstructor(\n+                TestBean.class, \"\").toString());\n+        assertEquals(\"(Object)\", ConstructorUtils.invokeExactConstructor(\n+                TestBean.class, new Object()).toString());\n+        assertEquals(\"(Integer)\", ConstructorUtils.invokeExactConstructor(\n+                TestBean.class, NumberUtils.INTEGER_ONE).toString());\n+        assertEquals(\"(double)\", ConstructorUtils.invokeExactConstructor(\n+                TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE },\n+                new Class[] { Double.TYPE }).toString());\n+\n+        try {\n+            ConstructorUtils.invokeExactConstructor(TestBean.class,\n+                    NumberUtils.BYTE_ONE);\n+            fail(\"should throw NoSuchMethodException\");\n+        } catch (NoSuchMethodException e) {\n+        }\n+        try {\n+            ConstructorUtils.invokeExactConstructor(TestBean.class,\n+                    NumberUtils.LONG_ONE);\n+            fail(\"should throw NoSuchMethodException\");\n+        } catch (NoSuchMethodException e) {\n+        }\n+        try {\n+            ConstructorUtils.invokeExactConstructor(TestBean.class,\n+                    Boolean.TRUE);\n+            fail(\"should throw NoSuchMethodException\");\n+        } catch (NoSuchMethodException e) {\n+        }\n+    }\n+\n+    public void testGetAccessibleConstructor() throws Exception {\n+        assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class\n+                .getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));\n+        assertNull(ConstructorUtils.getAccessibleConstructor(PrivateClass.class\n+                .getConstructor(ArrayUtils.EMPTY_CLASS_ARRAY)));\n+    }\n+\n+    public void testGetAccessibleConstructorFromDescription() throws Exception {\n+        assertNotNull(ConstructorUtils.getAccessibleConstructor(Object.class,\n+                ArrayUtils.EMPTY_CLASS_ARRAY));\n+        assertNull(ConstructorUtils.getAccessibleConstructor(\n+                PrivateClass.class, ArrayUtils.EMPTY_CLASS_ARRAY));\n+    }\n+\n+    public void testGetMatchingAccessibleMethod() throws Exception {\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY);\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class, null,\n+                ArrayUtils.EMPTY_CLASS_ARRAY);\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(String.class), singletonArray(String.class));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Object.class), singletonArray(Object.class));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Boolean.class), singletonArray(Object.class));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Byte.class), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Byte.TYPE), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Short.class), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Short.TYPE), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Character.class), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Character.TYPE), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Integer.class), singletonArray(Integer.class));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Integer.TYPE), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Long.class), singletonArray(Double.TYPE));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Long.TYPE), singletonArray(Double.TYPE));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Float.class), singletonArray(Double.TYPE));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Float.TYPE), singletonArray(Double.TYPE));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Double.class), singletonArray(Double.TYPE));\n+        expectMatchingAccessibleConstructorParameterTypes(TestBean.class,\n+                singletonArray(Double.TYPE), singletonArray(Double.TYPE));\n+    }\n+\n+    private void expectMatchingAccessibleConstructorParameterTypes(Class<?> cls,\n+            Class<?>[] requestTypes, Class<?>[] actualTypes) {\n+        Constructor<?> c = ConstructorUtils.getMatchingAccessibleConstructor(cls,\n+                requestTypes);\n+        assertTrue(toString(c.getParameterTypes()) + \" not equals \"\n+                + toString(actualTypes), Arrays.equals(actualTypes, c\n+                .getParameterTypes()));\n+    }\n+\n+    private String toString(Class<?>[] c) {\n+        return Arrays.asList(c).toString();\n+    }\n+\n+    private Class<?>[] singletonArray(Class<?> c) {\n+        Class<?>[] result = classCache.get(c);\n+        if (result == null) {\n+            result = new Class[] { c };\n+            classCache.put(c, result);\n+        }\n+        return result;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect;\n+\n+import java.lang.reflect.Field;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.reflect.testbed.Ambig;\n+import org.apache.commons.lang3.reflect.testbed.Foo;\n+import org.apache.commons.lang3.reflect.testbed.PrivatelyShadowedChild;\n+import org.apache.commons.lang3.reflect.testbed.PublicChild;\n+import org.apache.commons.lang3.reflect.testbed.PubliclyShadowedChild;\n+import org.apache.commons.lang3.reflect.testbed.StaticContainer;\n+import org.apache.commons.lang3.reflect.testbed.StaticContainerChild;\n+\n+/**\n+ * Unit tests FieldUtils\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class FieldUtilsTest extends TestCase {\n+\n+    static final String S = \"s\";\n+    static final String SS = \"ss\";\n+    static final Integer I0 = new Integer(0);\n+    static final Integer I1 = new Integer(1);\n+    static final Double D0 = new Double(0.0);\n+    static final Double D1 = new Double(1.0);\n+\n+    private PublicChild publicChild;\n+    private PubliclyShadowedChild publiclyShadowedChild;\n+    private PrivatelyShadowedChild privatelyShadowedChild;\n+    private Class<?> parentClass = PublicChild.class.getSuperclass();\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        StaticContainer.reset();\n+        publicChild = new PublicChild();\n+        publiclyShadowedChild = new PubliclyShadowedChild();\n+        privatelyShadowedChild = new PrivatelyShadowedChild();\n+    }\n+\n+    public void testGetField() {\n+        assertEquals(Foo.class, FieldUtils.getField(PublicChild.class, \"VALUE\").getDeclaringClass());\n+        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"s\").getDeclaringClass());\n+        assertNull(FieldUtils.getField(PublicChild.class, \"b\"));\n+        assertNull(FieldUtils.getField(PublicChild.class, \"i\"));\n+        assertNull(FieldUtils.getField(PublicChild.class, \"d\"));\n+        assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, \"VALUE\").getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"s\")\n+                .getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"b\")\n+                .getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"i\")\n+                .getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"d\")\n+                .getDeclaringClass());\n+        assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"VALUE\").getDeclaringClass());\n+        assertEquals(parentClass, FieldUtils.getField(PrivatelyShadowedChild.class, \"s\").getDeclaringClass());\n+        assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"b\"));\n+        assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"i\"));\n+        assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"d\"));\n+    }\n+\n+    public void testGetFieldForceAccess() {\n+        assertEquals(PublicChild.class, FieldUtils.getField(PublicChild.class, \"VALUE\", true).getDeclaringClass());\n+        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"s\", true).getDeclaringClass());\n+        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"b\", true).getDeclaringClass());\n+        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"i\", true).getDeclaringClass());\n+        assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"d\", true).getDeclaringClass());\n+        assertEquals(Foo.class, FieldUtils.getField(PubliclyShadowedChild.class, \"VALUE\", true).getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"s\", true)\n+                .getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"b\", true)\n+                .getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"i\", true)\n+                .getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getField(PubliclyShadowedChild.class, \"d\", true)\n+                .getDeclaringClass());\n+        assertEquals(Foo.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"VALUE\", true).getDeclaringClass());\n+        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"s\", true)\n+                .getDeclaringClass());\n+        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"b\", true)\n+                .getDeclaringClass());\n+        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"i\", true)\n+                .getDeclaringClass());\n+        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"d\", true)\n+                .getDeclaringClass());\n+    }\n+\n+    public void testGetDeclaredField() {\n+        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"VALUE\"));\n+        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"s\"));\n+        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"b\"));\n+        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"i\"));\n+        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"d\"));\n+        assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"VALUE\"));\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"s\")\n+                .getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"b\")\n+                .getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"i\")\n+                .getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"d\")\n+                .getDeclaringClass());\n+        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"VALUE\"));\n+        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"s\"));\n+        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"b\"));\n+        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"i\"));\n+        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"d\"));\n+    }\n+\n+    public void testGetDeclaredFieldForceAccess() {\n+        assertEquals(PublicChild.class, FieldUtils.getDeclaredField(PublicChild.class, \"VALUE\", true)\n+                .getDeclaringClass());\n+        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"s\", true));\n+        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"b\", true));\n+        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"i\", true));\n+        assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"d\", true));\n+        assertNull(FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"VALUE\", true));\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"s\", true)\n+                .getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"b\", true)\n+                .getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"i\", true)\n+                .getDeclaringClass());\n+        assertEquals(PubliclyShadowedChild.class, FieldUtils.getDeclaredField(PubliclyShadowedChild.class, \"d\", true)\n+                .getDeclaringClass());\n+        assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"VALUE\", true));\n+        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"s\", true)\n+                .getDeclaringClass());\n+        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"b\", true)\n+                .getDeclaringClass());\n+        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"i\", true)\n+                .getDeclaringClass());\n+        assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"d\", true)\n+                .getDeclaringClass());\n+    }\n+\n+    public void testReadStaticField() throws Exception {\n+        assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\n+    }\n+\n+    public void testReadStaticFieldForceAccess() throws Exception {\n+        assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\n+        assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(PublicChild.class, \"VALUE\")));\n+    }\n+\n+    public void testReadNamedStaticField() throws Exception {\n+        assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, \"VALUE\"));\n+        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, \"VALUE\"));\n+        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, \"VALUE\"));\n+        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PublicChild.class, \"VALUE\"));\n+    }\n+\n+    public void testReadNamedStaticFieldForceAccess() throws Exception {\n+        assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, \"VALUE\", true));\n+        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, \"VALUE\", true));\n+        assertEquals(Foo.VALUE, FieldUtils.readStaticField(PrivatelyShadowedChild.class, \"VALUE\", true));\n+        assertEquals(\"child\", FieldUtils.readStaticField(PublicChild.class, \"VALUE\", true));\n+    }\n+\n+    public void testReadDeclaredNamedStaticField() throws Exception {\n+        assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, \"VALUE\"));\n+        try {\n+            assertEquals(\"child\", FieldUtils.readDeclaredStaticField(PublicChild.class, \"VALUE\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, \"VALUE\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, \"VALUE\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+    }\n+\n+    public void testReadDeclaredNamedStaticFieldForceAccess() throws Exception {\n+        assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, \"VALUE\", true));\n+        assertEquals(\"child\", FieldUtils.readDeclaredStaticField(PublicChild.class, \"VALUE\", true));\n+        try {\n+            assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PubliclyShadowedChild.class, \"VALUE\", true));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(PrivatelyShadowedChild.class, \"VALUE\", true));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+    }\n+\n+    public void testReadField() throws Exception {\n+        Field parentS = FieldUtils.getDeclaredField(parentClass, \"s\");\n+        assertEquals(\"s\", FieldUtils.readField(parentS, publicChild));\n+        assertEquals(\"s\", FieldUtils.readField(parentS, publiclyShadowedChild));\n+        assertEquals(\"s\", FieldUtils.readField(parentS, privatelyShadowedChild));\n+        Field parentB = FieldUtils.getDeclaredField(parentClass, \"b\", true);\n+        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild));\n+        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild));\n+        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild));\n+        Field parentI = FieldUtils.getDeclaredField(parentClass, \"i\", true);\n+        assertEquals(I0, FieldUtils.readField(parentI, publicChild));\n+        assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild));\n+        assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild));\n+        Field parentD = FieldUtils.getDeclaredField(parentClass, \"d\", true);\n+        assertEquals(D0, FieldUtils.readField(parentD, publicChild));\n+        assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild));\n+        assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild));\n+    }\n+\n+    public void testReadFieldForceAccess() throws Exception {\n+        Field parentS = FieldUtils.getDeclaredField(parentClass, \"s\");\n+        parentS.setAccessible(false);\n+        assertEquals(\"s\", FieldUtils.readField(parentS, publicChild, true));\n+        assertEquals(\"s\", FieldUtils.readField(parentS, publiclyShadowedChild, true));\n+        assertEquals(\"s\", FieldUtils.readField(parentS, privatelyShadowedChild, true));\n+        Field parentB = FieldUtils.getDeclaredField(parentClass, \"b\", true);\n+        parentB.setAccessible(false);\n+        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publicChild, true));\n+        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, publiclyShadowedChild, true));\n+        assertEquals(Boolean.FALSE, FieldUtils.readField(parentB, privatelyShadowedChild, true));\n+        Field parentI = FieldUtils.getDeclaredField(parentClass, \"i\", true);\n+        parentI.setAccessible(false);\n+        assertEquals(I0, FieldUtils.readField(parentI, publicChild, true));\n+        assertEquals(I0, FieldUtils.readField(parentI, publiclyShadowedChild, true));\n+        assertEquals(I0, FieldUtils.readField(parentI, privatelyShadowedChild, true));\n+        Field parentD = FieldUtils.getDeclaredField(parentClass, \"d\", true);\n+        parentD.setAccessible(false);\n+        assertEquals(D0, FieldUtils.readField(parentD, publicChild, true));\n+        assertEquals(D0, FieldUtils.readField(parentD, publiclyShadowedChild, true));\n+        assertEquals(D0, FieldUtils.readField(parentD, privatelyShadowedChild, true));\n+    }\n+\n+    public void testReadNamedField() throws Exception {\n+        assertEquals(\"s\", FieldUtils.readField(publicChild, \"s\"));\n+        assertEquals(\"ss\", FieldUtils.readField(publiclyShadowedChild, \"s\"));\n+        assertEquals(\"s\", FieldUtils.readField(privatelyShadowedChild, \"s\"));\n+        try {\n+            assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, \"b\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, \"b\"));\n+        try {\n+            assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, \"b\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            assertEquals(I0, FieldUtils.readField(publicChild, \"i\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, \"i\"));\n+        try {\n+            assertEquals(I0, FieldUtils.readField(privatelyShadowedChild, \"i\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            assertEquals(D0, FieldUtils.readField(publicChild, \"d\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, \"d\"));\n+        try {\n+            assertEquals(D0, FieldUtils.readField(privatelyShadowedChild, \"d\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+    }\n+\n+    public void testReadNamedFieldForceAccess() throws Exception {\n+        assertEquals(\"s\", FieldUtils.readField(publicChild, \"s\", true));\n+        assertEquals(\"ss\", FieldUtils.readField(publiclyShadowedChild, \"s\", true));\n+        assertEquals(\"ss\", FieldUtils.readField(privatelyShadowedChild, \"s\", true));\n+        assertEquals(Boolean.FALSE, FieldUtils.readField(publicChild, \"b\", true));\n+        assertEquals(Boolean.TRUE, FieldUtils.readField(publiclyShadowedChild, \"b\", true));\n+        assertEquals(Boolean.TRUE, FieldUtils.readField(privatelyShadowedChild, \"b\", true));\n+        assertEquals(I0, FieldUtils.readField(publicChild, \"i\", true));\n+        assertEquals(I1, FieldUtils.readField(publiclyShadowedChild, \"i\", true));\n+        assertEquals(I1, FieldUtils.readField(privatelyShadowedChild, \"i\", true));\n+        assertEquals(D0, FieldUtils.readField(publicChild, \"d\", true));\n+        assertEquals(D1, FieldUtils.readField(publiclyShadowedChild, \"d\", true));\n+        assertEquals(D1, FieldUtils.readField(privatelyShadowedChild, \"d\", true));\n+    }\n+\n+    public void testReadDeclaredNamedField() throws Exception {\n+        try {\n+            assertEquals(\"s\", FieldUtils.readDeclaredField(publicChild, \"s\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        assertEquals(\"ss\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\"));\n+        try {\n+            assertEquals(\"s\", FieldUtils.readDeclaredField(privatelyShadowedChild, \"s\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, \"b\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\"));\n+        try {\n+            assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, \"b\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            assertEquals(I0, FieldUtils.readDeclaredField(publicChild, \"i\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\"));\n+        try {\n+            assertEquals(I0, FieldUtils.readDeclaredField(privatelyShadowedChild, \"i\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            assertEquals(D0, FieldUtils.readDeclaredField(publicChild, \"d\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\"));\n+        try {\n+            assertEquals(D0, FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\"));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+    }\n+\n+    public void testReadDeclaredNamedFieldForceAccess() throws Exception {\n+        try {\n+            assertEquals(\"s\", FieldUtils.readDeclaredField(publicChild, \"s\", true));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        assertEquals(\"ss\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\", true));\n+        assertEquals(\"ss\", FieldUtils.readDeclaredField(privatelyShadowedChild, \"s\", true));\n+        try {\n+            assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publicChild, \"b\", true));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\", true));\n+        assertEquals(Boolean.TRUE, FieldUtils.readDeclaredField(privatelyShadowedChild, \"b\", true));\n+        try {\n+            assertEquals(I0, FieldUtils.readDeclaredField(publicChild, \"i\", true));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        assertEquals(I1, FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\", true));\n+        assertEquals(I1, FieldUtils.readDeclaredField(privatelyShadowedChild, \"i\", true));\n+        try {\n+            assertEquals(D0, FieldUtils.readDeclaredField(publicChild, \"d\", true));\n+            fail(\"expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        assertEquals(D1, FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\", true));\n+        assertEquals(D1, FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\", true));\n+    }\n+\n+    public void testWriteStaticField() throws Exception {\n+        Field field = StaticContainer.class.getDeclaredField(\"mutablePublic\");\n+        FieldUtils.writeStaticField(field, \"new\");\n+        assertEquals(\"new\", StaticContainer.mutablePublic);\n+        field = StaticContainer.class.getDeclaredField(\"mutableProtected\");\n+        try {\n+            FieldUtils.writeStaticField(field, \"new\");\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        field = StaticContainer.class.getDeclaredField(\"mutablePackage\");\n+        try {\n+            FieldUtils.writeStaticField(field, \"new\");\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        field = StaticContainer.class.getDeclaredField(\"mutablePrivate\");\n+        try {\n+            FieldUtils.writeStaticField(field, \"new\");\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PUBLIC\");\n+        try {\n+            FieldUtils.writeStaticField(field, \"new\");\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PROTECTED\");\n+        try {\n+            FieldUtils.writeStaticField(field, \"new\");\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PACKAGE\");\n+        try {\n+            FieldUtils.writeStaticField(field, \"new\");\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE\");\n+        try {\n+            FieldUtils.writeStaticField(field, \"new\");\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+    }\n+\n+    public void testWriteStaticFieldForceAccess() throws Exception {\n+        Field field = StaticContainer.class.getDeclaredField(\"mutablePublic\");\n+        FieldUtils.writeStaticField(field, \"new\", true);\n+        assertEquals(\"new\", StaticContainer.mutablePublic);\n+        field = StaticContainer.class.getDeclaredField(\"mutableProtected\");\n+        FieldUtils.writeStaticField(field, \"new\", true);\n+        assertEquals(\"new\", StaticContainer.getMutableProtected());\n+        field = StaticContainer.class.getDeclaredField(\"mutablePackage\");\n+        FieldUtils.writeStaticField(field, \"new\", true);\n+        assertEquals(\"new\", StaticContainer.getMutablePackage());\n+        field = StaticContainer.class.getDeclaredField(\"mutablePrivate\");\n+        FieldUtils.writeStaticField(field, \"new\", true);\n+        assertEquals(\"new\", StaticContainer.getMutablePrivate());\n+        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PUBLIC\");\n+        try {\n+            FieldUtils.writeStaticField(field, \"new\", true);\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PROTECTED\");\n+        try {\n+            FieldUtils.writeStaticField(field, \"new\", true);\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PACKAGE\");\n+        try {\n+            FieldUtils.writeStaticField(field, \"new\", true);\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        field = StaticContainer.class.getDeclaredField(\"IMMUTABLE_PRIVATE\");\n+        try {\n+            FieldUtils.writeStaticField(field, \"new\", true);\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+    }\n+\n+    public void testWriteNamedStaticField() throws Exception {\n+        FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePublic\", \"new\");\n+        assertEquals(\"new\", StaticContainer.mutablePublic);\n+        try {\n+            FieldUtils.writeStaticField(StaticContainerChild.class, \"mutableProtected\", \"new\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePackage\", \"new\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePrivate\", \"new\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PUBLIC\", \"new\");\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PROTECTED\", \"new\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PACKAGE\", \"new\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PRIVATE\", \"new\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+    }\n+\n+    public void testWriteNamedStaticFieldForceAccess() throws Exception {\n+        FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePublic\", \"new\", true);\n+        assertEquals(\"new\", StaticContainer.mutablePublic);\n+        FieldUtils.writeStaticField(StaticContainerChild.class, \"mutableProtected\", \"new\", true);\n+        assertEquals(\"new\", StaticContainer.getMutableProtected());\n+        FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePackage\", \"new\", true);\n+        assertEquals(\"new\", StaticContainer.getMutablePackage());\n+        FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePrivate\", \"new\", true);\n+        assertEquals(\"new\", StaticContainer.getMutablePrivate());\n+        try {\n+            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PUBLIC\", \"new\", true);\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PROTECTED\", \"new\", true);\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PACKAGE\", \"new\", true);\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeStaticField(StaticContainerChild.class, \"IMMUTABLE_PRIVATE\", \"new\", true);\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+    }\n+\n+    public void testWriteDeclaredNamedStaticField() throws Exception {\n+        FieldUtils.writeStaticField(StaticContainer.class, \"mutablePublic\", \"new\");\n+        assertEquals(\"new\", StaticContainer.mutablePublic);\n+        try {\n+            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutableProtected\", \"new\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePackage\", \"new\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePrivate\", \"new\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PUBLIC\", \"new\");\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PROTECTED\", \"new\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PACKAGE\", \"new\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PRIVATE\", \"new\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+    }\n+\n+    public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception {\n+        FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePublic\", \"new\", true);\n+        assertEquals(\"new\", StaticContainer.mutablePublic);\n+        FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutableProtected\", \"new\", true);\n+        assertEquals(\"new\", StaticContainer.getMutableProtected());\n+        FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePackage\", \"new\", true);\n+        assertEquals(\"new\", StaticContainer.getMutablePackage());\n+        FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePrivate\", \"new\", true);\n+        assertEquals(\"new\", StaticContainer.getMutablePrivate());\n+        try {\n+            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PUBLIC\", \"new\", true);\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PROTECTED\", \"new\", true);\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PACKAGE\", \"new\", true);\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"IMMUTABLE_PRIVATE\", \"new\", true);\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+    }\n+\n+    public void testWriteField() throws Exception {\n+        Field field = parentClass.getDeclaredField(\"s\");\n+        FieldUtils.writeField(field, publicChild, \"S\");\n+        assertEquals(\"S\", field.get(publicChild));\n+        field = parentClass.getDeclaredField(\"b\");\n+        try {\n+            FieldUtils.writeField(field, publicChild, Boolean.TRUE);\n+            fail(\"Expected IllegalAccessException\");\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        field = parentClass.getDeclaredField(\"i\");\n+        try {\n+            FieldUtils.writeField(field, publicChild, new Integer(Integer.MAX_VALUE));\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+        field = parentClass.getDeclaredField(\"d\");\n+        try {\n+            FieldUtils.writeField(field, publicChild, new Double(Double.MAX_VALUE));\n+        } catch (IllegalAccessException e) {\n+            // pass\n+        }\n+    }\n+\n+    public void testWriteFieldForceAccess() throws Exception {\n+        Field field = parentClass.getDeclaredField(\"s\");\n+        FieldUtils.writeField(field, publicChild, \"S\", true);\n+        assertEquals(\"S\", field.get(publicChild));\n+        field = parentClass.getDeclaredField(\"b\");\n+        FieldUtils.writeField(field, publicChild, Boolean.TRUE, true);\n+        assertEquals(Boolean.TRUE, field.get(publicChild));\n+        field = parentClass.getDeclaredField(\"i\");\n+        FieldUtils.writeField(field, publicChild, new Integer(Integer.MAX_VALUE), true);\n+        assertEquals(new Integer(Integer.MAX_VALUE), field.get(publicChild));\n+        field = parentClass.getDeclaredField(\"d\");\n+        FieldUtils.writeField(field, publicChild, new Double(Double.MAX_VALUE), true);\n+        assertEquals(new Double(Double.MAX_VALUE), field.get(publicChild));\n+    }\n+\n+    public void testWriteNamedField() throws Exception {\n+        FieldUtils.writeField(publicChild, \"s\", \"S\");\n+        assertEquals(\"S\", FieldUtils.readField(publicChild, \"s\"));\n+        try {\n+            FieldUtils.writeField(publicChild, \"b\", Boolean.TRUE);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeField(publicChild, \"i\", new Integer(1));\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeField(publicChild, \"d\", new Double(1.0));\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+\n+        FieldUtils.writeField(publiclyShadowedChild, \"s\", \"S\");\n+        assertEquals(\"S\", FieldUtils.readField(publiclyShadowedChild, \"s\"));\n+        FieldUtils.writeField(publiclyShadowedChild, \"b\", Boolean.FALSE);\n+        assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, \"b\"));\n+        FieldUtils.writeField(publiclyShadowedChild, \"i\", new Integer(0));\n+        assertEquals(new Integer(0), FieldUtils.readField(publiclyShadowedChild, \"i\"));\n+        FieldUtils.writeField(publiclyShadowedChild, \"d\", new Double(0.0));\n+        assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, \"d\"));\n+\n+        FieldUtils.writeField(privatelyShadowedChild, \"s\", \"S\");\n+        assertEquals(\"S\", FieldUtils.readField(privatelyShadowedChild, \"s\"));\n+        try {\n+            FieldUtils.writeField(privatelyShadowedChild, \"b\", Boolean.TRUE);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeField(privatelyShadowedChild, \"i\", new Integer(1));\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeField(privatelyShadowedChild, \"d\", new Double(1.0));\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+    }\n+\n+    public void testWriteNamedFieldForceAccess() throws Exception {\n+        FieldUtils.writeField(publicChild, \"s\", \"S\", true);\n+        assertEquals(\"S\", FieldUtils.readField(publicChild, \"s\", true));\n+        FieldUtils.writeField(publicChild, \"b\", Boolean.TRUE, true);\n+        assertEquals(Boolean.TRUE, FieldUtils.readField(publicChild, \"b\", true));\n+        FieldUtils.writeField(publicChild, \"i\", new Integer(1), true);\n+        assertEquals(new Integer(1), FieldUtils.readField(publicChild, \"i\", true));\n+        FieldUtils.writeField(publicChild, \"d\", new Double(1.0), true);\n+        assertEquals(new Double(1.0), FieldUtils.readField(publicChild, \"d\", true));\n+\n+        FieldUtils.writeField(publiclyShadowedChild, \"s\", \"S\", true);\n+        assertEquals(\"S\", FieldUtils.readField(publiclyShadowedChild, \"s\", true));\n+        FieldUtils.writeField(publiclyShadowedChild, \"b\", Boolean.FALSE, true);\n+        assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, \"b\", true));\n+        FieldUtils.writeField(publiclyShadowedChild, \"i\", new Integer(0), true);\n+        assertEquals(new Integer(0), FieldUtils.readField(publiclyShadowedChild, \"i\", true));\n+        FieldUtils.writeField(publiclyShadowedChild, \"d\", new Double(0.0), true);\n+        assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, \"d\", true));\n+\n+        FieldUtils.writeField(privatelyShadowedChild, \"s\", \"S\", true);\n+        assertEquals(\"S\", FieldUtils.readField(privatelyShadowedChild, \"s\", true));\n+        FieldUtils.writeField(privatelyShadowedChild, \"b\", Boolean.FALSE, true);\n+        assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, \"b\", true));\n+        FieldUtils.writeField(privatelyShadowedChild, \"i\", new Integer(0), true);\n+        assertEquals(new Integer(0), FieldUtils.readField(privatelyShadowedChild, \"i\", true));\n+        FieldUtils.writeField(privatelyShadowedChild, \"d\", new Double(0.0), true);\n+        assertEquals(new Double(0.0), FieldUtils.readField(privatelyShadowedChild, \"d\", true));\n+    }\n+\n+    public void testWriteDeclaredNamedField() throws Exception {\n+        try {\n+            FieldUtils.writeDeclaredField(publicChild, \"s\", \"S\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredField(publicChild, \"b\", Boolean.TRUE);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredField(publicChild, \"i\", new Integer(1));\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredField(publicChild, \"d\", new Double(1.0));\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+\n+        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"s\", \"S\");\n+        assertEquals(\"S\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\"));\n+        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"b\", Boolean.FALSE);\n+        assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\"));\n+        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"i\", new Integer(0));\n+        assertEquals(new Integer(0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\"));\n+        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"d\", new Double(0.0));\n+        assertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\"));\n+\n+        try {\n+            FieldUtils.writeDeclaredField(privatelyShadowedChild, \"s\", \"S\");\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredField(privatelyShadowedChild, \"b\", Boolean.TRUE);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredField(privatelyShadowedChild, \"i\", new Integer(1));\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredField(privatelyShadowedChild, \"d\", new Double(1.0));\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+    }\n+\n+    public void testWriteDeclaredNamedFieldForceAccess() throws Exception {\n+        try {\n+            FieldUtils.writeDeclaredField(publicChild, \"s\", \"S\", true);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredField(publicChild, \"b\", Boolean.TRUE, true);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredField(publicChild, \"i\", new Integer(1), true);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+        try {\n+            FieldUtils.writeDeclaredField(publicChild, \"d\", new Double(1.0), true);\n+            fail(\"Expected IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+\n+        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"s\", \"S\", true);\n+        assertEquals(\"S\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\", true));\n+        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"b\", Boolean.FALSE, true);\n+        assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\", true));\n+        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"i\", new Integer(0), true);\n+        assertEquals(new Integer(0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\", true));\n+        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"d\", new Double(0.0), true);\n+        assertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\", true));\n+\n+        FieldUtils.writeDeclaredField(privatelyShadowedChild, \"s\", \"S\", true);\n+        assertEquals(\"S\", FieldUtils.readDeclaredField(privatelyShadowedChild, \"s\", true));\n+        FieldUtils.writeDeclaredField(privatelyShadowedChild, \"b\", Boolean.FALSE, true);\n+        assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, \"b\", true));\n+        FieldUtils.writeDeclaredField(privatelyShadowedChild, \"i\", new Integer(0), true);\n+        assertEquals(new Integer(0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"i\", true));\n+        FieldUtils.writeDeclaredField(privatelyShadowedChild, \"d\", new Double(0.0), true);\n+        assertEquals(new Double(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\", true));\n+    }\n+\n+    public void testAmbig() {\n+        try {\n+            FieldUtils.getField(Ambig.class, \"VALUE\");\n+            fail(\"should have failed on interface field ambiguity\");\n+        } catch (IllegalArgumentException e) {\n+            // pass\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect;\n+\n+import java.lang.reflect.Method;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.commons.lang3.mutable.Mutable;\n+import org.apache.commons.lang3.mutable.MutableObject;\n+\n+/**\n+ * Unit tests MethodUtils\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class MethodUtilsTest extends TestCase {\n+    public static class TestBean {\n+\n+        public static String bar() {\n+            return \"bar()\";\n+        }\n+\n+        public static String bar(int i) {\n+            return \"bar(int)\";\n+        }\n+\n+        public static String bar(Integer i) {\n+            return \"bar(Integer)\";\n+        }\n+\n+        public static String bar(double d) {\n+            return \"bar(double)\";\n+        }\n+\n+        public static String bar(String s) {\n+            return \"bar(String)\";\n+        }\n+\n+        public static String bar(Object o) {\n+            return \"bar(Object)\";\n+        }\n+\n+        public String foo() {\n+            return \"foo()\";\n+        }\n+\n+        public String foo(int i) {\n+            return \"foo(int)\";\n+        }\n+\n+        public String foo(Integer i) {\n+            return \"foo(Integer)\";\n+        }\n+\n+        public String foo(double d) {\n+            return \"foo(double)\";\n+        }\n+\n+        public String foo(String s) {\n+            return \"foo(String)\";\n+        }\n+\n+        public String foo(Object o) {\n+            return \"foo(Object)\";\n+        }\n+    }\n+\n+    private static class TestMutable implements Mutable<Object> {\n+        public Object getValue() {\n+            return null;\n+        }\n+\n+        public void setValue(Object value) {\n+        }\n+    }\n+\n+    private TestBean testBean;\n+    private Map<Class<?>, Class<?>[]> classCache;\n+\n+    public MethodUtilsTest(String name) {\n+        super(name);\n+        classCache = new HashMap<Class<?>, Class<?>[]>();\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        testBean = new TestBean();\n+        classCache.clear();\n+    }\n+\n+    public void testConstructor() throws Exception {\n+        assertNotNull(MethodUtils.class.newInstance());\n+    }\n+\n+    public void testInvokeMethod() throws Exception {\n+        assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\",\n+                ArrayUtils.EMPTY_CLASS_ARRAY));\n+        assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\",\n+                (Class[]) null));\n+        assertEquals(\"foo(String)\", MethodUtils.invokeMethod(testBean, \"foo\",\n+                \"\"));\n+        assertEquals(\"foo(Object)\", MethodUtils.invokeMethod(testBean, \"foo\",\n+                new Object()));\n+        assertEquals(\"foo(Object)\", MethodUtils.invokeMethod(testBean, \"foo\",\n+                Boolean.TRUE));\n+        assertEquals(\"foo(Integer)\", MethodUtils.invokeMethod(testBean, \"foo\",\n+                NumberUtils.INTEGER_ONE));\n+        assertEquals(\"foo(int)\", MethodUtils.invokeMethod(testBean, \"foo\",\n+                NumberUtils.BYTE_ONE));\n+        assertEquals(\"foo(double)\", MethodUtils.invokeMethod(testBean, \"foo\",\n+                NumberUtils.LONG_ONE));\n+        assertEquals(\"foo(double)\", MethodUtils.invokeMethod(testBean, \"foo\",\n+                NumberUtils.DOUBLE_ONE));\n+    }\n+\n+    public void testInvokeExactMethod() throws Exception {\n+        assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\",\n+                ArrayUtils.EMPTY_CLASS_ARRAY));\n+        assertEquals(\"foo()\", MethodUtils.invokeMethod(testBean, \"foo\",\n+                (Class[]) null));\n+        assertEquals(\"foo(String)\", MethodUtils.invokeExactMethod(testBean,\n+                \"foo\", \"\"));\n+        assertEquals(\"foo(Object)\", MethodUtils.invokeExactMethod(testBean,\n+                \"foo\", new Object()));\n+        assertEquals(\"foo(Integer)\", MethodUtils.invokeExactMethod(testBean,\n+                \"foo\", NumberUtils.INTEGER_ONE));\n+        assertEquals(\"foo(double)\", MethodUtils.invokeExactMethod(testBean,\n+                \"foo\", new Object[] { NumberUtils.DOUBLE_ONE },\n+                new Class[] { Double.TYPE }));\n+\n+        try {\n+            MethodUtils\n+                    .invokeExactMethod(testBean, \"foo\", NumberUtils.BYTE_ONE);\n+            fail(\"should throw NoSuchMethodException\");\n+        } catch (NoSuchMethodException e) {\n+        }\n+        try {\n+            MethodUtils\n+                    .invokeExactMethod(testBean, \"foo\", NumberUtils.LONG_ONE);\n+            fail(\"should throw NoSuchMethodException\");\n+        } catch (NoSuchMethodException e) {\n+        }\n+        try {\n+            MethodUtils.invokeExactMethod(testBean, \"foo\", Boolean.TRUE);\n+            fail(\"should throw NoSuchMethodException\");\n+        } catch (NoSuchMethodException e) {\n+        }\n+    }\n+\n+    public void testInvokeStaticMethod() throws Exception {\n+        assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class,\n+                \"bar\", ArrayUtils.EMPTY_CLASS_ARRAY));\n+        assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class,\n+                \"bar\", (Class[]) null));\n+        assertEquals(\"bar(String)\", MethodUtils.invokeStaticMethod(\n+                TestBean.class, \"bar\", \"\"));\n+        assertEquals(\"bar(Object)\", MethodUtils.invokeStaticMethod(\n+                TestBean.class, \"bar\", new Object()));\n+        assertEquals(\"bar(Object)\", MethodUtils.invokeStaticMethod(\n+                TestBean.class, \"bar\", Boolean.TRUE));\n+        assertEquals(\"bar(Integer)\", MethodUtils.invokeStaticMethod(\n+                TestBean.class, \"bar\", NumberUtils.INTEGER_ONE));\n+        assertEquals(\"bar(int)\", MethodUtils.invokeStaticMethod(TestBean.class,\n+                \"bar\", NumberUtils.BYTE_ONE));\n+        assertEquals(\"bar(double)\", MethodUtils.invokeStaticMethod(\n+                TestBean.class, \"bar\", NumberUtils.LONG_ONE));\n+        assertEquals(\"bar(double)\", MethodUtils.invokeStaticMethod(\n+                TestBean.class, \"bar\", NumberUtils.DOUBLE_ONE));\n+    }\n+\n+    public void testInvokeExactStaticMethod() throws Exception {\n+        assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class,\n+                \"bar\", ArrayUtils.EMPTY_CLASS_ARRAY));\n+        assertEquals(\"bar()\", MethodUtils.invokeStaticMethod(TestBean.class,\n+                \"bar\", (Class[]) null));\n+        assertEquals(\"bar(String)\", MethodUtils.invokeExactStaticMethod(\n+                TestBean.class, \"bar\", \"\"));\n+        assertEquals(\"bar(Object)\", MethodUtils.invokeExactStaticMethod(\n+                TestBean.class, \"bar\", new Object()));\n+        assertEquals(\"bar(Integer)\", MethodUtils.invokeExactStaticMethod(\n+                TestBean.class, \"bar\", NumberUtils.INTEGER_ONE));\n+        assertEquals(\"bar(double)\", MethodUtils.invokeExactStaticMethod(\n+                TestBean.class, \"bar\", new Object[] { NumberUtils.DOUBLE_ONE },\n+                new Class[] { Double.TYPE }));\n+\n+        try {\n+            MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\",\n+                    NumberUtils.BYTE_ONE);\n+            fail(\"should throw NoSuchMethodException\");\n+        } catch (NoSuchMethodException e) {\n+        }\n+        try {\n+            MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\",\n+                    NumberUtils.LONG_ONE);\n+            fail(\"should throw NoSuchMethodException\");\n+        } catch (NoSuchMethodException e) {\n+        }\n+        try {\n+            MethodUtils.invokeExactStaticMethod(TestBean.class, \"bar\",\n+                    Boolean.TRUE);\n+            fail(\"should throw NoSuchMethodException\");\n+        } catch (NoSuchMethodException e) {\n+        }\n+    }\n+\n+    public void testGetAccessibleInterfaceMethod() throws Exception {\n+\n+        Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };\n+        for (int i = 0; i < p.length; i++) {\n+            Method method = TestMutable.class.getMethod(\"getValue\", p[i]);\n+            Method accessibleMethod = MethodUtils.getAccessibleMethod(method);\n+            assertNotSame(accessibleMethod, method);\n+            assertSame(Mutable.class, accessibleMethod.getDeclaringClass());\n+        }\n+    }\n+\n+    public void testGetAccessibleInterfaceMethodFromDescription()\n+            throws Exception {\n+        Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null };\n+        for (int i = 0; i < p.length; i++) {\n+            Method accessibleMethod = MethodUtils.getAccessibleMethod(\n+                    TestMutable.class, \"getValue\", p[i]);\n+            assertSame(Mutable.class, accessibleMethod.getDeclaringClass());\n+        }\n+    }\n+\n+    public void testGetAccessiblePublicMethod() throws Exception {\n+        assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(\n+                MutableObject.class.getMethod(\"getValue\",\n+                        ArrayUtils.EMPTY_CLASS_ARRAY)).getDeclaringClass());\n+    }\n+\n+    public void testGetAccessiblePublicMethodFromDescription() throws Exception {\n+        assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(\n+                MutableObject.class, \"getValue\", ArrayUtils.EMPTY_CLASS_ARRAY)\n+                .getDeclaringClass());\n+    }\n+\n+    public void testGetMatchingAccessibleMethod() throws Exception {\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY);\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                null, ArrayUtils.EMPTY_CLASS_ARRAY);\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(String.class), singletonArray(String.class));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Object.class), singletonArray(Object.class));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Boolean.class), singletonArray(Object.class));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Byte.class), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Byte.TYPE), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Short.class), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Short.TYPE), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Character.class), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Character.TYPE), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Integer.class), singletonArray(Integer.class));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Integer.TYPE), singletonArray(Integer.TYPE));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Long.class), singletonArray(Double.TYPE));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Long.TYPE), singletonArray(Double.TYPE));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Float.class), singletonArray(Double.TYPE));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Float.TYPE), singletonArray(Double.TYPE));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Double.class), singletonArray(Double.TYPE));\n+        expectMatchingAccessibleMethodParameterTypes(TestBean.class, \"foo\",\n+                singletonArray(Double.TYPE), singletonArray(Double.TYPE));\n+    }\n+\n+    private void expectMatchingAccessibleMethodParameterTypes(Class<?> cls,\n+            String methodName, Class<?>[] requestTypes, Class<?>[] actualTypes) {\n+        Method m = MethodUtils.getMatchingAccessibleMethod(cls, methodName,\n+                requestTypes);\n+        assertTrue(toString(m.getParameterTypes()) + \" not equals \"\n+                + toString(actualTypes), Arrays.equals(actualTypes, m\n+                .getParameterTypes()));\n+    }\n+\n+    private String toString(Class<?>[] c) {\n+        return Arrays.asList(c).toString();\n+    }\n+\n+    private Class<?>[] singletonArray(Class<?> c) {\n+        Class<?>[] result = classCache.get(c);\n+        if (result == null) {\n+            result = new Class[] { c };\n+            classCache.put(c, result);\n+        }\n+        return result;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect;\n+\n+import static junit.framework.Assert.*;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.TypeVariable;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.reflect.testbed.*;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test TypeUtils\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class TypeUtilsTest {\n+    private Field stringParentField;\n+    private Field integerParentField;\n+    private Field foosField;\n+    private Field barParentsField;\n+    private TypeVariable<?> genericParentT;\n+    private TypeVariable<?> listType;\n+    private TypeVariable<?> iterableType;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        stringParentField = GenericTypeHolder.class.getDeclaredField(\"stringParent\");\n+        integerParentField = GenericTypeHolder.class.getDeclaredField(\"integerParent\");\n+        foosField = GenericTypeHolder.class.getDeclaredField(\"foos\");\n+        barParentsField = GenericTypeHolder.class.getDeclaredField(\"barParents\");\n+        genericParentT = GenericParent.class.getTypeParameters()[0];\n+        listType = List.class.getTypeParameters()[0];\n+        iterableType = Iterable.class.getTypeParameters()[0];\n+    }\n+\n+    @Test\n+    public void testGetRawTypeClass() throws Exception {\n+        assertEquals(GenericParent.class, TypeUtils.getRawType(null, GenericParent.class));\n+    }\n+\n+    @Test\n+    public void testGetRawTypeParameterizedType() throws Exception {\n+        assertEquals(GenericParent.class, TypeUtils.getRawType(GenericTypeHolder.class,\n+                stringParentField.getGenericType()));\n+        assertEquals(GenericParent.class, TypeUtils.getRawType(GenericTypeHolder.class,\n+                integerParentField.getGenericType()));\n+        assertEquals(List.class, TypeUtils.getRawType(GenericTypeHolder.class, foosField\n+                .getGenericType()));\n+    }\n+\n+    @Test\n+    public void testGetRawTypeTypeVariable() throws Exception {\n+        assertEquals(String.class, TypeUtils.getRawType(StringParameterizedChild.class,\n+                genericParentT));\n+        assertEquals(String.class, TypeUtils.getRawType(stringParentField.getGenericType(),\n+                genericParentT));\n+        assertEquals(Foo.class, TypeUtils.getRawType(foosField.getGenericType(), iterableType));\n+        assertEquals(Foo.class, TypeUtils.getRawType(foosField.getGenericType(), listType));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetRawTypeUnresolvableTypeVariable() {\n+        TypeUtils.getRawType(GenericParent.class, genericParentT);\n+    }\n+\n+    @Test\n+    public void testGetRawTypeGenericArray() throws Exception {\n+        assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class,\n+                barParentsField.getGenericType()));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/Ambig.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect.testbed;\n+\n+/**\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class Ambig implements Foo, Bar {\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/Bar.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect.testbed;\n+\n+/**\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public interface Bar {\n+    public static final String VALUE = \"bar\";\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/Foo.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect.testbed;\n+\n+/**\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public interface Foo {\n+    public static final String VALUE = \"foo\";\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/GenericParent.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect.testbed;\n+\n+/**\n+ * Class declaring a parameter variable.\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class GenericParent<T> {\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/GenericTypeHolder.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect.testbed;\n+\n+import java.util.List;\n+\n+/**\n+ * Holds generic testbed types.\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class GenericTypeHolder {\n+    public GenericParent<String> stringParent;\n+    public GenericParent<Integer> integerParent;\n+    public List<Foo> foos;\n+    public GenericParent<Bar>[] barParents;\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/Parent.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect.testbed;\n+\n+/**\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+class Parent implements Foo {\n+    public String s = \"s\";\n+    protected boolean b = false;\n+    int i = 0;\n+    @SuppressWarnings(\"unused\")\n+    private double d = 0.0;\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/PrivatelyShadowedChild.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect.testbed;\n+\n+/**\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+@SuppressWarnings({ \"unused\", \"hiding\" }) // deliberate re-use of variable names\n+public class PrivatelyShadowedChild extends Parent {\n+    private String s = \"ss\";\n+    private boolean b = true;\n+    private int i = 1;\n+    private double d = 1.0;\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/PublicChild.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect.testbed;\n+\n+/**\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class PublicChild extends Parent {\n+    @SuppressWarnings(\"hiding\") // deliberate reuse of variable name\n+    static final String VALUE = \"child\";\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/PubliclyShadowedChild.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect.testbed;\n+\n+/**\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+@SuppressWarnings(\"hiding\") // deliberate re-use of variable names\n+public class PubliclyShadowedChild extends Parent {\n+    public String s = \"ss\";\n+    public boolean b = true;\n+    public int i = 1;\n+    public double d = 1.0;\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/StaticContainer.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect.testbed;\n+\n+/**\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class StaticContainer {\n+    public static final Object IMMUTABLE_PUBLIC = \"public\";\n+    protected static final Object IMMUTABLE_PROTECTED = \"protected\";\n+    static final Object IMMUTABLE_PACKAGE = \"\";\n+    @SuppressWarnings(\"unused\")\n+    private static final Object IMMUTABLE_PRIVATE = \"private\";\n+\n+    public static Object mutablePublic;\n+    protected static Object mutableProtected;\n+    static Object mutablePackage;\n+    private static Object mutablePrivate;\n+\n+    public static void reset() {\n+        mutablePublic = null;\n+        mutableProtected = null;\n+        mutablePackage = null;\n+        mutablePrivate = null;\n+    }\n+\n+    public static Object getMutableProtected() {\n+        return mutableProtected;\n+    }\n+\n+    public static Object getMutablePackage() {\n+        return mutablePackage;\n+    }\n+\n+    public static Object getMutablePrivate() {\n+        return mutablePrivate;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/StaticContainerChild.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect.testbed;\n+\n+/**\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class StaticContainerChild extends StaticContainer {\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/StringParameterizedChild.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.reflect.testbed;\n+\n+/**\n+ * {@link GenericParent} subclass that explicitly specifies <T> as {@link String}.\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class StringParameterizedChild extends GenericParent<String> {\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/CompositeFormatTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.text;\n+\n+import java.text.FieldPosition;\n+import java.text.Format;\n+import java.text.ParsePosition;\n+import java.text.SimpleDateFormat;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang3.text.CompositeFormat}.\n+ */\n+public class CompositeFormatTest extends TestCase {\n+\n+    /**\n+     * Create a new test case with the specified name.\n+     * \n+     * @param name\n+     *            name\n+     */\n+    public CompositeFormatTest(String name) {\n+        super(name);\n+    }\n+\n+\n+    /**\n+     * Ensures that the parse/format separation is correctly maintained. \n+     */\n+    public void testCompositeFormat() {\n+\n+        Format parser = new Format() {\n+            @Override\n+            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n+                throw new UnsupportedOperationException(\"Not implemented\");\n+            }\n+\n+            @Override\n+            public Object parseObject(String source, ParsePosition pos) {\n+                return null;    // do nothing\n+            }\n+        };\n+\n+        Format formatter = new Format() {\n+            @Override\n+            public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n+                return null;    // do nothing\n+            }\n+\n+            @Override\n+            public Object parseObject(String source, ParsePosition pos) {\n+                throw new UnsupportedOperationException(\"Not implemented\");\n+            }\n+        };\n+\n+        CompositeFormat composite = new CompositeFormat(parser, formatter);\n+\n+        composite.parseObject(\"\", null);\n+        composite.format(new Object(), new StringBuffer(), null);\n+        assertEquals( \"Parser get method incorrectly implemented\", parser, composite.getParser() );\n+        assertEquals( \"Formatter get method incorrectly implemented\", formatter, composite.getFormatter() );\n+    }\n+\n+    public void testUsage() throws Exception {\n+        Format f1 = new SimpleDateFormat(\"MMddyyyy\", Locale.ENGLISH);\n+        Format f2 = new SimpleDateFormat(\"MMMM d, yyyy\", Locale.ENGLISH);\n+        CompositeFormat c = new CompositeFormat(f1, f2);\n+        String testString = \"January 3, 2005\";\n+        assertEquals(testString, c.format(c.parseObject(\"01032005\")));\n+        assertEquals(testString, c.reformat(\"01032005\"));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.text;\n+\n+import java.text.ChoiceFormat;\n+import java.text.DateFormat;\n+import java.text.FieldPosition;\n+import java.text.Format;\n+import java.text.MessageFormat;\n+import java.text.NumberFormat;\n+import java.text.ParsePosition;\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.SystemUtils;\n+\n+/**\n+ * Test case for {@link ExtendedMessageFormat}.\n+ *\n+ * @since 2.4\n+ * @version $Id$\n+ */\n+public class ExtendedMessageFormatTest extends TestCase {\n+\n+    private final Map<String, FormatFactory> registry = new HashMap<String, FormatFactory>();\n+\n+    /**\n+     * Create a new test case.\n+     *\n+     * @param name The name of the test\n+     */\n+    public ExtendedMessageFormatTest(String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        registry.put(\"lower\", new LowerCaseFormatFactory());\n+        registry.put(\"upper\", new UpperCaseFormatFactory());\n+    }\n+\n+    /**\n+     * Test extended formats.\n+     */\n+    public void testExtendedFormats() {\n+        String pattern = \"Lower: {0,lower} Upper: {1,upper}\";\n+        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n+        assertPatternsEqual(\"TOPATTERN\", pattern, emf.toPattern());\n+        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"foo\", \"bar\"}));\n+        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"Foo\", \"Bar\"}));\n+        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"FOO\", \"BAR\"}));\n+        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"FOO\", \"bar\"}));\n+        assertEquals(\"Lower: foo Upper: BAR\", emf.format(new Object[] {\"foo\", \"BAR\"}));\n+    }\n+\n+    /**\n+     * Test Bug LANG-477 - out of memory error with escaped quote\n+     */\n+    public void testEscapedQuote_LANG_477() {\n+        String pattern = \"it''s a {0,lower} 'test'!\";\n+        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n+        assertEquals(\"it's a dummy test!\", emf.format(new Object[] {\"DUMMY\"}));\n+    }\n+\n+    /**\n+     * Test extended and built in formats.\n+     */\n+    public void testExtendedAndBuiltInFormats() {\n+        Calendar cal = Calendar.getInstance();\n+        cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05);\n+        Object[] args = new Object[] {\"John Doe\", cal.getTime(), new Double(\"12345.67\")};\n+        String builtinsPattern = \"DOB: {1,date,short} Salary: {2,number,currency}\";\n+        String extendedPattern = \"Name: {0,upper} \";\n+        String pattern = extendedPattern + builtinsPattern;\n+\n+        HashSet<Locale> testLocales = new HashSet<Locale>();\n+        testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales()));\n+        testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales()));\n+        testLocales.add(null);\n+\n+        for (Iterator<Locale> l = testLocales.iterator(); l.hasNext();) {\n+            Locale locale = l.next();\n+            MessageFormat builtins = createMessageFormat(builtinsPattern, locale);\n+            String expectedPattern = extendedPattern + builtins.toPattern();\n+            DateFormat df = null;\n+            NumberFormat nf = null;\n+            ExtendedMessageFormat emf = null;\n+            if (locale == null) {\n+                df = DateFormat.getDateInstance(DateFormat.SHORT);\n+                nf = NumberFormat.getCurrencyInstance();\n+                emf = new ExtendedMessageFormat(pattern, registry);\n+            } else {\n+                df = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n+                nf = NumberFormat.getCurrencyInstance(locale);\n+                emf = new ExtendedMessageFormat(pattern, locale, registry);\n+            }\n+            StringBuffer expected = new StringBuffer();\n+            expected.append(\"Name: \");\n+            expected.append(args[0].toString().toUpperCase());\n+            expected.append(\" DOB: \");\n+            expected.append(df.format(args[1]));\n+            expected.append(\" Salary: \");\n+            expected.append(nf.format(args[2]));\n+            assertPatternsEqual(\"pattern comparison for locale \" + locale, expectedPattern, emf.toPattern());\n+            assertEquals(String.valueOf(locale), expected.toString(), emf.format(args));\n+        }\n+    }\n+\n+//    /**\n+//     * Test extended formats with choice format.\n+//     *\n+//     * N.B. FAILING - currently sub-formats not supported\n+//     */\n+//    public void testExtendedWithChoiceFormat() {\n+//        String pattern = \"Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}\";\n+//        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n+//        assertPatterns(null, pattern, emf.toPattern());\n+//        try {\n+//            assertEquals(\"one\", emf.format(new Object[] {new Integer(1), \"ONE\"}));\n+//            assertEquals(\"TWO\", emf.format(new Object[] {new Integer(2), \"two\"}));\n+//        } catch (IllegalArgumentException e) {\n+//            // currently sub-formats not supported\n+//        }\n+//    }\n+\n+//    /**\n+//     * Test mixed extended and built-in formats with choice format.\n+//     *\n+//     * N.B. FAILING - currently sub-formats not supported\n+//     */\n+//    public void testExtendedAndBuiltInWithChoiceFormat() {\n+//        String pattern = \"Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}\";\n+//        Object[] lowArgs  = new Object[] {new Integer(1), \"Low\",  new Double(\"1234.56\")};\n+//        Object[] highArgs = new Object[] {new Integer(2), \"High\", new Double(\"9876.54\")};\n+//        Locale[] availableLocales = ChoiceFormat.getAvailableLocales();\n+//        Locale[] testLocales = new Locale[availableLocales.length + 1];\n+//        testLocales[0] = null;\n+//        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length);\n+//        for (int i = 0; i < testLocales.length; i++) {\n+//            NumberFormat nf = null;\n+//            NumberFormat cf = null;\n+//            ExtendedMessageFormat emf = null;\n+//            if (testLocales[i] == null) {\n+//                nf = NumberFormat.getNumberInstance();\n+//                cf = NumberFormat.getCurrencyInstance();\n+//                emf = new ExtendedMessageFormat(pattern, registry);\n+//            } else {\n+//                nf = NumberFormat.getNumberInstance(testLocales[i]);\n+//                cf = NumberFormat.getCurrencyInstance(testLocales[i]);\n+//                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry);\n+//            }\n+//            assertPatterns(null, pattern, emf.toPattern());\n+//            try {\n+//                String lowExpected = lowArgs[0] + \" low \"    + nf.format(lowArgs[2]);\n+//                String highExpected = highArgs[0] + \" HIGH \"  + cf.format(highArgs[2]);\n+//                assertEquals(lowExpected,  emf.format(lowArgs));\n+//                assertEquals(highExpected, emf.format(highArgs));\n+//            } catch (IllegalArgumentException e) {\n+//                // currently sub-formats not supported\n+//            }\n+//        }\n+//    }\n+\n+    /**\n+     * Test the built in choice format.\n+     */\n+    public void testBuiltInChoiceFormat() {\n+        Object[] values = new Number[] {new Integer(1), new Double(\"2.2\"), new Double(\"1234.5\")};\n+        String choicePattern = null;\n+        Locale[] availableLocales = ChoiceFormat.getAvailableLocales();\n+\n+        choicePattern = \"{0,choice,1#One|2#Two|3#Many {0,number}}\";\n+        for (int i = 0; i < values.length; i++) {\n+            checkBuiltInFormat(values[i] + \": \" + choicePattern, new Object[] {values[i]}, availableLocales);\n+        }\n+\n+        choicePattern = \"{0,choice,1#''One''|2#\\\"Two\\\"|3#''{Many}'' {0,number}}\";\n+        for (int i = 0; i < values.length; i++) {\n+            checkBuiltInFormat(values[i] + \": \" + choicePattern, new Object[] {values[i]}, availableLocales);\n+        }\n+    }\n+\n+    /**\n+     * Test the built in date/time formats\n+     */\n+    public void testBuiltInDateTimeFormat() {\n+        Calendar cal = Calendar.getInstance();\n+        cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05);\n+        Object[] args = new Object[] {cal.getTime()};\n+        Locale[] availableLocales = DateFormat.getAvailableLocales();\n+\n+        checkBuiltInFormat(\"1: {0,date,short}\",    args, availableLocales);\n+        checkBuiltInFormat(\"2: {0,date,medium}\",   args, availableLocales);\n+        checkBuiltInFormat(\"3: {0,date,long}\",     args, availableLocales);\n+        checkBuiltInFormat(\"4: {0,date,full}\",     args, availableLocales);\n+        checkBuiltInFormat(\"5: {0,date,d MMM yy}\", args, availableLocales);\n+        checkBuiltInFormat(\"6: {0,time,short}\",    args, availableLocales);\n+        checkBuiltInFormat(\"7: {0,time,medium}\",   args, availableLocales);\n+        checkBuiltInFormat(\"8: {0,time,long}\",     args, availableLocales);\n+        checkBuiltInFormat(\"9: {0,time,full}\",     args, availableLocales);\n+        checkBuiltInFormat(\"10: {0,time,HH:mm}\",   args, availableLocales);\n+        checkBuiltInFormat(\"11: {0,date}\",         args, availableLocales);\n+        checkBuiltInFormat(\"12: {0,time}\",         args, availableLocales);\n+    }\n+\n+    public void testOverriddenBuiltinFormat() {\n+        Calendar cal = Calendar.getInstance();\n+        cal.set(2007, Calendar.JANUARY, 23);\n+        Object[] args = new Object[] {cal.getTime()};\n+        Locale[] availableLocales = DateFormat.getAvailableLocales();\n+        Map<String, ? extends FormatFactory> registry = Collections.singletonMap(\"date\", new OverrideShortDateFormatFactory());\n+\n+        //check the non-overridden builtins:\n+        checkBuiltInFormat(\"1: {0,date}\", registry,          args, availableLocales);\n+        checkBuiltInFormat(\"2: {0,date,medium}\", registry,   args, availableLocales);\n+        checkBuiltInFormat(\"3: {0,date,long}\", registry,     args, availableLocales);\n+        checkBuiltInFormat(\"4: {0,date,full}\", registry,     args, availableLocales);\n+        checkBuiltInFormat(\"5: {0,date,d MMM yy}\", registry, args, availableLocales);\n+\n+        //check the overridden format:\n+        for (int i = -1; i < availableLocales.length; i++) {\n+            Locale locale = i < 0 ? null : availableLocales[i];\n+            MessageFormat dateDefault = createMessageFormat(\"{0,date}\", locale);\n+            String pattern = \"{0,date,short}\";\n+            ExtendedMessageFormat dateShort = new ExtendedMessageFormat(pattern, locale, registry);\n+            assertEquals(\"overridden date,short format\", dateDefault.format(args), dateShort.format(args));\n+            assertEquals(\"overridden date,short pattern\", pattern, dateShort.toPattern());\n+        }\n+    }\n+\n+    /**\n+     * Test the built in number formats.\n+     */\n+    public void testBuiltInNumberFormat() {\n+        Object[] args = new Object[] {new Double(\"6543.21\")};\n+        Locale[] availableLocales = NumberFormat.getAvailableLocales();\n+        checkBuiltInFormat(\"1: {0,number}\",            args, availableLocales);\n+        checkBuiltInFormat(\"2: {0,number,integer}\",    args, availableLocales);\n+        checkBuiltInFormat(\"3: {0,number,currency}\",   args, availableLocales);\n+        checkBuiltInFormat(\"4: {0,number,percent}\",    args, availableLocales);\n+        checkBuiltInFormat(\"5: {0,number,00000.000}\",  args, availableLocales);\n+    }\n+\n+    /**\n+     * Test a built in format for the specified Locales, plus <code>null</code> Locale.\n+     * @param pattern MessageFormat pattern\n+     * @param args MessageFormat arguments\n+     * @param locales to test\n+     */\n+    private void checkBuiltInFormat(String pattern, Object[] args, Locale[] locales) {\n+        checkBuiltInFormat(pattern, null, args, locales);\n+    }\n+\n+    /**\n+     * Test a built in format for the specified Locales, plus <code>null</code> Locale.\n+     * @param pattern MessageFormat pattern\n+     * @param registry FormatFactory registry to use\n+     * @param args MessageFormat arguments\n+     * @param locales to test\n+     */\n+    private void checkBuiltInFormat(String pattern, Map<String, ?> registry, Object[] args, Locale[] locales) {\n+        checkBuiltInFormat(pattern, registry, args, (Locale) null);\n+        for (int i = 0; i < locales.length; i++) {\n+            checkBuiltInFormat(pattern, registry, args, locales[i]);\n+        }\n+    }\n+\n+    /**\n+     * Create an ExtendedMessageFormat for the specified pattern and locale and check the\n+     * formated output matches the expected result for the parameters.\n+     * @param pattern string\n+     * @param registry map\n+     * @param args Object[]\n+     * @param locale Locale\n+     */\n+    private void checkBuiltInFormat(String pattern, Map<String, ?> registry, Object[] args, Locale locale) {\n+        StringBuffer buffer = new StringBuffer();\n+        buffer.append(\"Pattern=[\");\n+        buffer.append(pattern);\n+        buffer.append(\"], locale=[\");\n+        buffer.append(locale);\n+        buffer.append(\"]\");\n+        MessageFormat mf = createMessageFormat(pattern, locale);\n+        // System.out.println(buffer + \", result=[\" + mf.format(args) +\"]\");\n+        ExtendedMessageFormat emf = null;\n+        if (locale == null) {\n+            emf = new ExtendedMessageFormat(pattern);\n+        } else {\n+            emf = new ExtendedMessageFormat(pattern, locale);\n+        }\n+        assertEquals(\"format \"    + buffer.toString(), mf.format(args), emf.format(args));\n+        assertPatternsEqual(\"toPattern \" + buffer.toString(), mf.toPattern(),  emf.toPattern());\n+    }\n+\n+    //can't trust what MessageFormat does with toPattern() pre 1.4:\n+    private void assertPatternsEqual(String message, String expected, String actual) {\n+        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n+            assertEquals(message, expected, actual);\n+        }\n+    }\n+\n+    /**\n+     * Replace MessageFormat(String, Locale) constructor (not available until JDK 1.4).\n+     * @param pattern string\n+     * @param locale Locale\n+     * @return MessageFormat\n+     */\n+    private MessageFormat createMessageFormat(String pattern, Locale locale) {\n+        MessageFormat result = new MessageFormat(pattern);\n+        if (locale != null) {\n+            result.setLocale(locale);\n+            result.applyPattern(pattern);\n+        }\n+        return result;\n+    }\n+\n+    // ------------------------ Test Formats ------------------------\n+\n+    /**\n+     * {@link Format} implementation which converts to lower case.\n+     */\n+    private static class LowerCaseFormat extends Format {\n+        @Override\n+        public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n+            return toAppendTo.append(((String)obj).toLowerCase());\n+        }\n+        @Override\n+        public Object parseObject(String source, ParsePosition pos) {throw new UnsupportedOperationException();}\n+    }\n+\n+    /**\n+     * {@link Format} implementation which converts to upper case.\n+     */\n+    private static class UpperCaseFormat extends Format {\n+        @Override\n+        public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n+            return toAppendTo.append(((String)obj).toUpperCase());\n+        }\n+        @Override\n+        public Object parseObject(String source, ParsePosition pos) {throw new UnsupportedOperationException();}\n+    }\n+\n+\n+    // ------------------------ Test Format Factories ---------------\n+    /**\n+     * {@link FormatFactory} implementation for lower case format.\n+     */\n+    private static class LowerCaseFormatFactory implements FormatFactory {\n+        private static final Format LOWER_INSTANCE = new LowerCaseFormat();\n+        public Format getFormat(String name, String arguments, Locale locale) {\n+            return LOWER_INSTANCE;\n+        }\n+    }\n+    /**\n+     * {@link FormatFactory} implementation for upper case format.\n+     */\n+    private static class UpperCaseFormatFactory implements FormatFactory {\n+        private static final Format UPPER_INSTANCE = new UpperCaseFormat();\n+        public Format getFormat(String name, String arguments, Locale locale) {\n+            return UPPER_INSTANCE;\n+        }\n+    }\n+    /**\n+     * {@link FormatFactory} implementation to override date format \"short\" to \"default\".\n+     */\n+    private static class OverrideShortDateFormatFactory implements FormatFactory {\n+        public Format getFormat(String name, String arguments, Locale locale) {\n+            return !\"short\".equals(arguments) ? null\n+                    : locale == null ? DateFormat\n+                            .getDateInstance(DateFormat.DEFAULT) : DateFormat\n+                            .getDateInstance(DateFormat.DEFAULT, locale);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.text;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.SystemUtils;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang3.text.StrBuilder}.\n+ *\n+ * @version $Id$\n+ */\n+public class StrBuilderAppendInsertTest extends TestCase {\n+\n+    /** The system line separator. */\n+    private static final String SEP = SystemUtils.LINE_SEPARATOR;\n+\n+    /** Test subclass of Object, with a toString method. */\n+    private static final Object FOO = new Object() {\n+        @Override\n+        public String toString() {\n+            return \"foo\";\n+        }\n+    };\n+\n+    /**\n+     * Create a new test case with the specified name.\n+     * \n+     * @param name  the name\n+     */\n+    public StrBuilderAppendInsertTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendNewLine() {\n+        StrBuilder sb = new StrBuilder(\"---\");\n+        sb.appendNewLine().append(\"+++\");\n+        assertEquals(\"---\" + SEP + \"+++\", sb.toString());\n+        \n+        sb = new StrBuilder(\"---\");\n+        sb.setNewLineText(\"#\").appendNewLine().setNewLineText(null).appendNewLine();\n+        assertEquals(\"---#\" + SEP, sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendWithNullText() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"NULL\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendNull();\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb.append((Object) null);\n+        assertEquals(\"NULLNULL\", sb.toString());\n+\n+        sb.append(FOO);\n+        assertEquals(\"NULLNULLfoo\", sb.toString());\n+\n+        sb.append((String) null);\n+        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n+\n+        sb.append(\"\");\n+        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n+\n+        sb.append(\"bar\");\n+        assertEquals(\"NULLNULLfooNULLbar\", sb.toString());\n+\n+        sb.append((StringBuffer) null);\n+        assertEquals(\"NULLNULLfooNULLbarNULL\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"baz\"));\n+        assertEquals(\"NULLNULLfooNULLbarNULLbaz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_Object() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendNull();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append((Object) null);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append(FOO);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((StringBuffer) null);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"baz\"));\n+        assertEquals(\"foobaz\", sb.toString());\n+\n+        sb.append(new StrBuilder(\"yes\"));\n+        assertEquals(\"foobazyes\", sb.toString());\n+\n+        sb.append((CharSequence) \"Seq\");\n+        assertEquals(\"foobazyesSeq\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_String() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"NULL\").append((String) null);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(\"\");\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(\"bar\");\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_String_int_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"NULL\").append((String) null, 0, 1);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n+        sb.append(\"foo\", 0, 3);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(\"bar\", -1, 1);\n+            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", 3, 1);\n+            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", 1, -1);\n+            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", 1, 3);\n+            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", -1, 3);\n+            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", 4, 0);\n+            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(\"bar\", 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(\"abcbardef\", 3, 3);\n+        assertEquals(\"foobar\", sb.toString());\n+\n+        sb.append( (CharSequence)\"abcbardef\", 4, 3);\n+        assertEquals(\"foobarard\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_StringBuffer() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"NULL\").append((StringBuffer) null);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n+        sb.append(new StringBuffer(\"foo\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"bar\"));\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_StringBuffer_int_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"NULL\").append((StringBuffer) null, 0, 1);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n+        sb.append(new StringBuffer(\"foo\"), 0, 3);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), -1, 1);\n+            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), 3, 1);\n+            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), 1, -1);\n+            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), 1, 3);\n+            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), -1, 3);\n+            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), 4, 0);\n+            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(new StringBuffer(\"bar\"), 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"abcbardef\"), 3, 3);\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_StrBuilder() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"NULL\").append((StrBuilder) null);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n+        sb.append(new StrBuilder(\"foo\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StrBuilder(\"\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StrBuilder(\"bar\"));\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_StrBuilder_int_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"NULL\").append((StrBuilder) null, 0, 1);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n+        sb.append(new StrBuilder(\"foo\"), 0, 3);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), -1, 1);\n+            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), 3, 1);\n+            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), 1, -1);\n+            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), 1, 3);\n+            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), -1, 3);\n+            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), 4, 0);\n+            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(new StrBuilder(\"bar\"), 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StrBuilder(\"abcbardef\"), 3, 3);\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_CharArray() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"NULL\").append((char[]) null);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n+        sb.append(new char[0]);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append(new char[]{'f', 'o', 'o'});\n+        assertEquals(\"foo\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_CharArray_int_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"NULL\").append((char[]) null, 0, 1);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n+        sb.append(new char[]{'f', 'o', 'o'}, 0, 3);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, -1, 1);\n+            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 3, 1);\n+            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 1, -1);\n+            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 1, 3);\n+            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, -1, 3);\n+            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 4, 0);\n+            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(new char[]{'b', 'a', 'r'}, 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new char[]{'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f'}, 3, 3);\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_Boolean() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(true);\n+        assertEquals(\"true\", sb.toString());\n+\n+        sb.append(false);\n+        assertEquals(\"truefalse\", sb.toString());\n+\n+        sb.append('!');\n+        assertEquals(\"truefalse!\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_PrimitiveNumber() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(0);\n+        assertEquals(\"0\", sb.toString());\n+\n+        sb.append(1L);\n+        assertEquals(\"01\", sb.toString());\n+\n+        sb.append(2.3f);\n+        assertEquals(\"012.3\", sb.toString());\n+\n+        sb.append(4.5d);\n+        assertEquals(\"012.34.5\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_Object() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendln((Object) null);\n+        assertEquals(\"\" + SEP, sb.toString());\n+\n+        sb.appendln(FOO);\n+        assertEquals(SEP + \"foo\" + SEP, sb.toString());\n+\n+        sb.appendln(new Integer(6));\n+        assertEquals(SEP + \"foo\" + SEP + \"6\" + SEP, sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_String() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            @Override\n+            public StrBuilder append(String str) {\n+                count[0]++;\n+                return super.append(str);\n+            }\n+            @Override\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(\"foo\");\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(2, count[0]);  // appendNewLine() calls append(String)\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_String_int_int() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            @Override\n+            public StrBuilder append(String str, int startIndex, int length) {\n+                count[0]++;\n+                return super.append(str, startIndex, length);\n+            }\n+            @Override\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(\"foo\", 0, 3);\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_StringBuffer() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            @Override\n+            public StrBuilder append(StringBuffer str) {\n+                count[0]++;\n+                return super.append(str);\n+            }\n+            @Override\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(new StringBuffer(\"foo\"));\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_StringBuffer_int_int() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            @Override\n+            public StrBuilder append(StringBuffer str, int startIndex, int length) {\n+                count[0]++;\n+                return super.append(str, startIndex, length);\n+            }\n+            @Override\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(new StringBuffer(\"foo\"), 0, 3);\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_StrBuilder() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            @Override\n+            public StrBuilder append(StrBuilder str) {\n+                count[0]++;\n+                return super.append(str);\n+            }\n+            @Override\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(new StrBuilder(\"foo\"));\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_StrBuilder_int_int() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            @Override\n+            public StrBuilder append(StrBuilder str, int startIndex, int length) {\n+                count[0]++;\n+                return super.append(str, startIndex, length);\n+            }\n+            @Override\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(new StrBuilder(\"foo\"), 0, 3);\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_CharArray() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            @Override\n+            public StrBuilder append(char[] str) {\n+                count[0]++;\n+                return super.append(str);\n+            }\n+            @Override\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(\"foo\".toCharArray());\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_CharArray_int_int() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            @Override\n+            public StrBuilder append(char[] str, int startIndex, int length) {\n+                count[0]++;\n+                return super.append(str, startIndex, length);\n+            }\n+            @Override\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(\"foo\".toCharArray(), 0, 3);\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_Boolean() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendln(true);\n+        assertEquals(\"true\" + SEP, sb.toString());\n+        \n+        sb.clear();\n+        sb.appendln(false);\n+        assertEquals(\"false\" + SEP, sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendln_PrimitiveNumber() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendln(0);\n+        assertEquals(\"0\" + SEP, sb.toString());\n+        \n+        sb.clear();\n+        sb.appendln(1L);\n+        assertEquals(\"1\" + SEP, sb.toString());\n+        \n+        sb.clear();\n+        sb.appendln(2.3f);\n+        assertEquals(\"2.3\" + SEP, sb.toString());\n+        \n+        sb.clear();\n+        sb.appendln(4.5d);\n+        assertEquals(\"4.5\" + SEP, sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendPadding() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.appendPadding(-1, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.appendPadding(0, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.appendPadding(1, '-');\n+        assertEquals(\"foo-\", sb.toString());\n+\n+        sb.appendPadding(16, '-');\n+        assertEquals(20, sb.length());\n+        //            12345678901234567890\n+        assertEquals(\"foo-----------------\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendFixedWidthPadLeft() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadLeft(\"foo\", -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 1, '-');\n+        assertEquals(\"o\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 2, '-');\n+        assertEquals(\"oo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 3, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 4, '-');\n+        assertEquals(\"-foo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 10, '-');\n+        assertEquals(10, sb.length());\n+        //            1234567890\n+        assertEquals(\"-------foo\", sb.toString());\n+\n+        sb.clear();\n+        sb.setNullText(\"null\");\n+        sb.appendFixedWidthPadLeft(null, 5, '-');\n+        assertEquals(\"-null\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendFixedWidthPadLeft_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadLeft(123, -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 1, '-');\n+        assertEquals(\"3\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 2, '-');\n+        assertEquals(\"23\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 3, '-');\n+        assertEquals(\"123\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 4, '-');\n+        assertEquals(\"-123\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 10, '-');\n+        assertEquals(10, sb.length());\n+        //            1234567890\n+        assertEquals(\"-------123\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendFixedWidthPadRight() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadRight(\"foo\", -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 1, '-');\n+        assertEquals(\"f\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 2, '-');\n+        assertEquals(\"fo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 3, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 4, '-');\n+        assertEquals(\"foo-\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 10, '-');\n+        assertEquals(10, sb.length());\n+        //            1234567890\n+        assertEquals(\"foo-------\", sb.toString());\n+\n+        sb.clear();\n+        sb.setNullText(\"null\");\n+        sb.appendFixedWidthPadRight(null, 5, '-');\n+        assertEquals(\"null-\", sb.toString());\n+    }\n+\n+    // See: http://issues.apache.org/jira/browse/LANG-299\n+    public void testLang299() {\n+        StrBuilder sb = new StrBuilder(1);\n+        sb.appendFixedWidthPadRight(\"foo\", 1, '-');\n+        assertEquals(\"f\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendFixedWidthPadRight_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadRight(123, -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 1, '-');\n+        assertEquals(\"1\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 2, '-');\n+        assertEquals(\"12\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 3, '-');\n+        assertEquals(\"123\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 4, '-');\n+        assertEquals(\"123-\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 10, '-');\n+        assertEquals(10, sb.length());\n+        //            1234567890\n+        assertEquals(\"123-------\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendAll_Array() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendAll((Object[]) null);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendAll(new Object[0]);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendAll(new Object[]{\"foo\", \"bar\", \"baz\"});\n+        assertEquals(\"foobarbaz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendAll_Collection() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendAll((Collection<?>) null);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendAll(Collections.EMPTY_LIST);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendAll(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}));\n+        assertEquals(\"foobarbaz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendAll_Iterator() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendAll((Iterator<?>) null);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendAll(Collections.EMPTY_LIST.iterator());\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendAll(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator());\n+        assertEquals(\"foobarbaz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendWithSeparators_Array() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendWithSeparators((Object[]) null, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(new Object[0], \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, \",\");\n+        assertEquals(\"foo,bar,baz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, null);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n+        assertEquals(\"foo,,baz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendWithSeparators_Collection() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendWithSeparators((Collection<?>) null, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Collections.EMPTY_LIST, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), \",\");\n+        assertEquals(\"foo,bar,baz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), null);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n+        assertEquals(\"foo,,baz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendWithSeparators_Iterator() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendWithSeparators((Iterator<?>) null, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), \",\");\n+        assertEquals(\"foo,bar,baz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), null);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}).iterator(), \",\");\n+        assertEquals(\"foo,,baz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendWithSeparatorsWithNullText() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"null\");\n+        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n+        assertEquals(\"foo,null,baz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n+        assertEquals(\"foo,null,baz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendSeparator_String() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendSeparator(\",\");  // no effect\n+        assertEquals(\"\", sb.toString());\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+        sb.appendSeparator(\",\");\n+        assertEquals(\"foo,\", sb.toString());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAppendSeparator_String_String() {\n+        StrBuilder sb = new StrBuilder();\n+        final String startSeparator = \"order by \";\n+        final String standardSeparator = \",\";\n+        final String foo = \"foo\";\n+        sb.appendSeparator(null, null);\n+        assertEquals(\"\", sb.toString());\n+        sb.appendSeparator(standardSeparator, null);\n+        assertEquals(\"\", sb.toString());\n+        sb.appendSeparator(standardSeparator, startSeparator); \n+        assertEquals(startSeparator, sb.toString());\n+        sb.appendSeparator(null, null); \n+        assertEquals(startSeparator, sb.toString());\n+        sb.appendSeparator(null, startSeparator); \n+        assertEquals(startSeparator, sb.toString());\n+        sb.append(foo);\n+        assertEquals(startSeparator + foo, sb.toString());\n+        sb.appendSeparator(standardSeparator, startSeparator);\n+        assertEquals(startSeparator + foo + standardSeparator, sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendSeparator_char() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendSeparator(',');  // no effect\n+        assertEquals(\"\", sb.toString());\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+        sb.appendSeparator(',');\n+        assertEquals(\"foo,\", sb.toString());\n+    }\n+    public void testAppendSeparator_char_char() {\n+        StrBuilder sb = new StrBuilder();\n+        final char startSeparator = ':';\n+        final char standardSeparator = ',';\n+        final String foo = \"foo\";\n+        sb.appendSeparator(standardSeparator, startSeparator);  // no effect\n+        assertEquals(String.valueOf(startSeparator), sb.toString());\n+        sb.append(foo);\n+        assertEquals(String.valueOf(startSeparator) + foo, sb.toString());\n+        sb.appendSeparator(standardSeparator, startSeparator);\n+        assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendSeparator_String_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendSeparator(\",\", 0);  // no effect\n+        assertEquals(\"\", sb.toString());\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+        sb.appendSeparator(\",\", 1);\n+        assertEquals(\"foo,\", sb.toString());\n+        \n+        sb.appendSeparator(\",\", -1);  // no effect\n+        assertEquals(\"foo,\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendSeparator_char_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendSeparator(',', 0);  // no effect\n+        assertEquals(\"\", sb.toString());\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+        sb.appendSeparator(',', 1);\n+        assertEquals(\"foo,\", sb.toString());\n+        \n+        sb.appendSeparator(',', -1);  // no effect\n+        assertEquals(\"foo,\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testInsert() {\n+\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, FOO);\n+            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, FOO);\n+            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (Object) null);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, FOO);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, \"foo\");\n+            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, \"foo\");\n+            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (String) null);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, \"foo\");\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, new char[]{'f', 'o', 'o'});\n+            fail(\"insert(-1, char[]) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, new char[]{'f', 'o', 'o'});\n+            fail(\"insert(7, char[]) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (char[]) null);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, new char[0]);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, new char[]{'f', 'o', 'o'});\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n+            fail(\"insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n+            fail(\"insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (char[]) null, 0, 0);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, new char[0], 0, 0);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3);\n+            fail(\"insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3);\n+            fail(\"insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1);\n+            fail(\"insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10);\n+            fail(\"insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, true);\n+            fail(\"insert(-1, boolean) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, true);\n+            fail(\"insert(7, boolean) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, true);\n+        assertEquals(\"truebarbaz\", sb.toString());\n+\n+        sb.insert(0, false);\n+        assertEquals(\"falsetruebarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, '!');\n+            fail(\"insert(-1, char) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, '!');\n+            fail(\"insert(7, char) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, '!');\n+        assertEquals(\"!barbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, 0);\n+            fail(\"insert(-1, int) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, 0);\n+            fail(\"insert(7, int) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, '0');\n+        assertEquals(\"0barbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, 1L);\n+            fail(\"insert(-1, long) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, 1L);\n+            fail(\"insert(7, long) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, 1L);\n+        assertEquals(\"1barbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, 2.3F);\n+            fail(\"insert(-1, float) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, 2.3F);\n+            fail(\"insert(7, float) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, 2.3F);\n+        assertEquals(\"2.3barbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, 4.5D);\n+            fail(\"insert(-1, double) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, 4.5D);\n+            fail(\"insert(7, double) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, 4.5D);\n+        assertEquals(\"4.5barbaz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testInsertWithNullText() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"null\");\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, FOO);\n+            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, FOO);\n+            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (Object) null);\n+        assertEquals(\"nullbarbaz\", sb.toString());\n+\n+        sb.insert(0, FOO);\n+        assertEquals(\"foonullbarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, \"foo\");\n+            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, \"foo\");\n+            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (String) null);\n+        assertEquals(\"nullbarbaz\", sb.toString());\n+\n+        sb.insert(0, \"foo\");\n+        assertEquals(\"foonullbarbaz\", sb.toString());\n+\n+        sb.insert(0, (char[]) null);\n+        assertEquals(\"nullfoonullbarbaz\", sb.toString());\n+\n+        sb.insert(0, (char[]) null, 0, 0);\n+        assertEquals(\"nullnullfoonullbarbaz\", sb.toString());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.text;\n+\n+import java.io.Reader;\n+import java.io.Writer;\n+import java.util.Arrays;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang3.text.StrBuilder}.\n+ * \n+ * @author Michael Heuer\n+ * @version $Id$\n+ */\n+public class StrBuilderTest extends TestCase {\n+\n+    /**\n+     * Create a new test case with the specified name.\n+     * \n+     * @param name\n+     *            name\n+     */\n+    public StrBuilderTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructors() {\n+        StrBuilder sb0 = new StrBuilder();\n+        assertEquals(32, sb0.capacity());\n+        assertEquals(0, sb0.length());\n+        assertEquals(0, sb0.size());\n+\n+        StrBuilder sb1 = new StrBuilder(32);\n+        assertEquals(32, sb1.capacity());\n+        assertEquals(0, sb1.length());\n+        assertEquals(0, sb1.size());\n+\n+        StrBuilder sb2 = new StrBuilder(0);\n+        assertEquals(32, sb2.capacity());\n+        assertEquals(0, sb2.length());\n+        assertEquals(0, sb2.size());\n+\n+        StrBuilder sb3 = new StrBuilder(-1);\n+        assertEquals(32, sb3.capacity());\n+        assertEquals(0, sb3.length());\n+        assertEquals(0, sb3.size());\n+\n+        StrBuilder sb4 = new StrBuilder(1);\n+        assertEquals(1, sb4.capacity());\n+        assertEquals(0, sb4.length());\n+        assertEquals(0, sb4.size());\n+\n+        StrBuilder sb5 = new StrBuilder((String) null);\n+        assertEquals(32, sb5.capacity());\n+        assertEquals(0, sb5.length());\n+        assertEquals(0, sb5.size());\n+\n+        StrBuilder sb6 = new StrBuilder(\"\");\n+        assertEquals(32, sb6.capacity());\n+        assertEquals(0, sb6.length());\n+        assertEquals(0, sb6.size());\n+\n+        StrBuilder sb7 = new StrBuilder(\"foo\");\n+        assertEquals(35, sb7.capacity());\n+        assertEquals(3, sb7.length());\n+        assertEquals(3, sb7.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testChaining() {\n+        StrBuilder sb = new StrBuilder();\n+        assertSame(sb, sb.setNewLineText(null));\n+        assertSame(sb, sb.setNullText(null));\n+        assertSame(sb, sb.setLength(1));\n+        assertSame(sb, sb.setCharAt(0, 'a'));\n+        assertSame(sb, sb.ensureCapacity(0));\n+        assertSame(sb, sb.minimizeCapacity());\n+        assertSame(sb, sb.clear());\n+        assertSame(sb, sb.reverse());\n+        assertSame(sb, sb.trim());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetSetNewLineText() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(null, sb.getNewLineText());\n+\n+        sb.setNewLineText(\"#\");\n+        assertEquals(\"#\", sb.getNewLineText());\n+\n+        sb.setNewLineText(\"\");\n+        assertEquals(\"\", sb.getNewLineText());\n+\n+        sb.setNewLineText((String) null);\n+        assertEquals(null, sb.getNewLineText());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetSetNullText() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(null, sb.getNullText());\n+\n+        sb.setNullText(\"null\");\n+        assertEquals(\"null\", sb.getNullText());\n+\n+        sb.setNullText(\"\");\n+        assertEquals(null, sb.getNullText());\n+\n+        sb.setNullText(\"NULL\");\n+        assertEquals(\"NULL\", sb.getNullText());\n+\n+        sb.setNullText((String) null);\n+        assertEquals(null, sb.getNullText());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCapacityAndLength() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(32, sb.capacity());\n+        assertEquals(0, sb.length());\n+        assertEquals(0, sb.size());\n+        assertTrue(sb.isEmpty());\n+\n+        sb.minimizeCapacity();\n+        assertEquals(0, sb.capacity());\n+        assertEquals(0, sb.length());\n+        assertEquals(0, sb.size());\n+        assertTrue(sb.isEmpty());\n+\n+        sb.ensureCapacity(32);\n+        assertTrue(sb.capacity() >= 32);\n+        assertEquals(0, sb.length());\n+        assertEquals(0, sb.size());\n+        assertTrue(sb.isEmpty());\n+\n+        sb.append(\"foo\");\n+        assertTrue(sb.capacity() >= 32);\n+        assertEquals(3, sb.length());\n+        assertEquals(3, sb.size());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        sb.clear();\n+        assertTrue(sb.capacity() >= 32);\n+        assertEquals(0, sb.length());\n+        assertEquals(0, sb.size());\n+        assertTrue(sb.isEmpty());\n+\n+        sb.append(\"123456789012345678901234567890123\");\n+        assertTrue(sb.capacity() > 32);\n+        assertEquals(33, sb.length());\n+        assertEquals(33, sb.size());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        sb.ensureCapacity(16);\n+        assertTrue(sb.capacity() > 16);\n+        assertEquals(33, sb.length());\n+        assertEquals(33, sb.size());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        sb.minimizeCapacity();\n+        assertEquals(33, sb.capacity());\n+        assertEquals(33, sb.length());\n+        assertEquals(33, sb.size());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        try {\n+            sb.setLength(-1);\n+            fail(\"setLength(-1) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.setLength(33);\n+        assertEquals(33, sb.capacity());\n+        assertEquals(33, sb.length());\n+        assertEquals(33, sb.size());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        sb.setLength(16);\n+        assertTrue(sb.capacity() >= 16);\n+        assertEquals(16, sb.length());\n+        assertEquals(16, sb.size());\n+        assertEquals(\"1234567890123456\", sb.toString());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        sb.setLength(32);\n+        assertTrue(sb.capacity() >= 32);\n+        assertEquals(32, sb.length());\n+        assertEquals(32, sb.size());\n+        assertEquals(\"1234567890123456\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", sb.toString());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        sb.setLength(0);\n+        assertTrue(sb.capacity() >= 32);\n+        assertEquals(0, sb.length());\n+        assertEquals(0, sb.size());\n+        assertTrue(sb.isEmpty());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testLength() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(0, sb.length());\n+        \n+        sb.append(\"Hello\");\n+        assertEquals(5, sb.length());\n+    }\n+\n+    public void testSetLength() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(\"Hello\");\n+        sb.setLength(2);  // shorten\n+        assertEquals(\"He\", sb.toString());\n+        sb.setLength(2);  // no change\n+        assertEquals(\"He\", sb.toString());\n+        sb.setLength(3);  // lengthen\n+        assertEquals(\"He\\0\", sb.toString());\n+\n+        try {\n+            sb.setLength(-1);\n+            fail(\"setLength(-1) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCapacity() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(sb.buffer.length, sb.capacity());\n+        \n+        sb.append(\"HelloWorldHelloWorldHelloWorldHelloWorld\");\n+        assertEquals(sb.buffer.length, sb.capacity());\n+    }\n+\n+    public void testEnsureCapacity() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.ensureCapacity(2);\n+        assertEquals(true, sb.capacity() >= 2);\n+        \n+        sb.ensureCapacity(-1);\n+        assertEquals(true, sb.capacity() >= 0);\n+        \n+        sb.append(\"HelloWorld\");\n+        sb.ensureCapacity(40);\n+        assertEquals(true, sb.capacity() >= 40);\n+    }\n+\n+    public void testMinimizeCapacity() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.minimizeCapacity();\n+        assertEquals(0, sb.capacity());\n+        \n+        sb.append(\"HelloWorld\");\n+        sb.minimizeCapacity();\n+        assertEquals(10, sb.capacity());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSize() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(0, sb.size());\n+        \n+        sb.append(\"Hello\");\n+        assertEquals(5, sb.size());\n+    }\n+\n+    public void testIsEmpty() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(true, sb.isEmpty());\n+        \n+        sb.append(\"Hello\");\n+        assertEquals(false, sb.isEmpty());\n+        \n+        sb.clear();\n+        assertEquals(true, sb.isEmpty());\n+    }\n+\n+    public void testClear() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(\"Hello\");\n+        sb.clear();\n+        assertEquals(0, sb.length());\n+        assertEquals(true, sb.buffer.length >= 5);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCharAt() {\n+        StrBuilder sb = new StrBuilder();\n+        try {\n+            sb.charAt(0);\n+            fail(\"charAt(0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        try {\n+            sb.charAt(-1);\n+            fail(\"charAt(-1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        sb.append(\"foo\");\n+        assertEquals('f', sb.charAt(0));\n+        assertEquals('o', sb.charAt(1));\n+        assertEquals('o', sb.charAt(2));\n+        try {\n+            sb.charAt(-1);\n+            fail(\"charAt(-1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        try {\n+            sb.charAt(3);\n+            fail(\"charAt(3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetCharAt() {\n+        StrBuilder sb = new StrBuilder();\n+        try {\n+            sb.setCharAt(0, 'f');\n+            fail(\"setCharAt(0,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        try {\n+            sb.setCharAt(-1, 'f');\n+            fail(\"setCharAt(-1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        sb.append(\"foo\");\n+        sb.setCharAt(0, 'b');\n+        sb.setCharAt(1, 'a');\n+        sb.setCharAt(2, 'r');\n+        try {\n+            sb.setCharAt(3, '!');\n+            fail(\"setCharAt(3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        assertEquals(\"bar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDeleteCharAt() {\n+        StrBuilder sb = new StrBuilder(\"abc\");\n+        sb.deleteCharAt(0);\n+        assertEquals(\"bc\", sb.toString()); \n+        \n+        try {\n+            sb.deleteCharAt(1000);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToCharArray() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray());\n+\n+        char[] a = sb.toCharArray();\n+        assertNotNull(\"toCharArray() result is null\", a);\n+        assertEquals(\"toCharArray() result is too large\", 0, a.length);\n+\n+        sb.append(\"junit\");\n+        a = sb.toCharArray();\n+        assertEquals(\"toCharArray() result incorrect length\", 5, a.length);\n+        assertTrue(\"toCharArray() result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n+    }\n+\n+    public void testToCharArrayIntInt() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0));\n+\n+        sb.append(\"junit\");\n+        char[] a = sb.toCharArray(0, 20); // too large test\n+        assertEquals(\"toCharArray(int,int) result incorrect length\", 5, a.length);\n+        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n+\n+        a = sb.toCharArray(0, 4);\n+        assertEquals(\"toCharArray(int,int) result incorrect length\", 4, a.length);\n+        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"juni\".toCharArray(), a));\n+\n+        a = sb.toCharArray(0, 4);\n+        assertEquals(\"toCharArray(int,int) result incorrect length\", 4, a.length);\n+        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"juni\".toCharArray(), a));\n+\n+        a = sb.toCharArray(0, 1);\n+        assertNotNull(\"toCharArray(int,int) result is null\", a);\n+\n+        try {\n+            sb.toCharArray(-1, 5);\n+            fail(\"no string index out of bound on -1\");\n+        } catch (IndexOutOfBoundsException e) {\n+        }\n+\n+        try {\n+            sb.toCharArray(6, 5);\n+            fail(\"no string index out of bound on -1\");\n+        } catch (IndexOutOfBoundsException e) {\n+        }\n+    }\n+\n+    public void testGetChars ( ) {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        char[] input = new char[10];\n+        char[] a = sb.getChars(input);\n+        assertSame (input, a);\n+        assertTrue(Arrays.equals(new char[10], a));\n+        \n+        sb.append(\"junit\");\n+        a = sb.getChars(input);\n+        assertSame(input, a);\n+        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a));\n+        \n+        a = sb.getChars(null);\n+        assertNotSame(input,a);\n+        assertEquals(5,a.length);\n+        assertTrue(Arrays.equals(\"junit\".toCharArray(),a));\n+        \n+        input = new char[5];\n+        a = sb.getChars(input);\n+        assertSame(input, a);\n+        \n+        input = new char[4];\n+        a = sb.getChars(input);\n+        assertNotSame(input, a);\n+    }\n+\n+    public void testGetCharsIntIntCharArrayInt( ) {\n+        StrBuilder sb = new StrBuilder();\n+               \n+        sb.append(\"junit\");\n+        char[] a = new char[5];\n+        sb.getChars(0,5,a,0);\n+        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a));\n+        \n+        a = new char[5];\n+        sb.getChars(0,2,a,3);\n+        assertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a));\n+        \n+        try {\n+            sb.getChars(-1,0,a,0);\n+            fail(\"no exception\");\n+        }\n+        catch (IndexOutOfBoundsException e) {\n+        }\n+        \n+        try {\n+            sb.getChars(0,-1,a,0);\n+            fail(\"no exception\");\n+        }\n+        catch (IndexOutOfBoundsException e) {\n+        }\n+        \n+        try {\n+            sb.getChars(0,20,a,0);\n+            fail(\"no exception\");\n+        }\n+        catch (IndexOutOfBoundsException e) {\n+        }\n+        \n+        try {\n+            sb.getChars(4,2,a,0);\n+            fail(\"no exception\");\n+        }\n+        catch (IndexOutOfBoundsException e) {\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDeleteIntInt() {\n+        StrBuilder sb = new StrBuilder(\"abc\");\n+        sb.delete(0, 1);\n+        assertEquals(\"bc\", sb.toString()); \n+        sb.delete(1, 2);\n+        assertEquals(\"b\", sb.toString());\n+        sb.delete(0, 1);\n+        assertEquals(\"\", sb.toString()); \n+        sb.delete(0, 1000);\n+        assertEquals(\"\", sb.toString()); \n+        \n+        try {\n+            sb.delete(1, 2);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            sb.delete(-1, 1);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        \n+        sb = new StrBuilder(\"anything\");\n+        try {\n+            sb.delete(2, 1);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDeleteAll_char() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.deleteAll('X');\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.deleteAll('a');\n+        assertEquals(\"bcbccb\", sb.toString());\n+        sb.deleteAll('c');\n+        assertEquals(\"bbb\", sb.toString());\n+        sb.deleteAll('b');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb = new StrBuilder(\"\");\n+        sb.deleteAll('b');\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    public void testDeleteFirst_char() {\n+        StrBuilder sb = new StrBuilder(\"abcba\");\n+        sb.deleteFirst('X');\n+        assertEquals(\"abcba\", sb.toString());\n+        sb.deleteFirst('a');\n+        assertEquals(\"bcba\", sb.toString());\n+        sb.deleteFirst('c');\n+        assertEquals(\"bba\", sb.toString());\n+        sb.deleteFirst('b');\n+        assertEquals(\"ba\", sb.toString());\n+\n+        sb = new StrBuilder(\"\");\n+        sb.deleteFirst('b');\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testDeleteAll_String() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.deleteAll((String) null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.deleteAll(\"\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb.deleteAll(\"X\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.deleteAll(\"a\");\n+        assertEquals(\"bcbccb\", sb.toString());\n+        sb.deleteAll(\"c\");\n+        assertEquals(\"bbb\", sb.toString());\n+        sb.deleteAll(\"b\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb = new StrBuilder(\"abcbccba\");\n+        sb.deleteAll(\"bc\");\n+        assertEquals(\"acba\", sb.toString());\n+\n+        sb = new StrBuilder(\"\");\n+        sb.deleteAll(\"bc\");\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    public void testDeleteFirst_String() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.deleteFirst((String) null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.deleteFirst(\"\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+\n+        sb.deleteFirst(\"X\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.deleteFirst(\"a\");\n+        assertEquals(\"bcbccba\", sb.toString());\n+        sb.deleteFirst(\"c\");\n+        assertEquals(\"bbccba\", sb.toString());\n+        sb.deleteFirst(\"b\");\n+        assertEquals(\"bccba\", sb.toString());\n+\n+        sb = new StrBuilder(\"abcbccba\");\n+        sb.deleteFirst(\"bc\");\n+        assertEquals(\"abccba\", sb.toString());\n+\n+        sb = new StrBuilder(\"\");\n+        sb.deleteFirst(\"bc\");\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testDeleteAll_StrMatcher() {\n+        StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\n+        sb.deleteAll((StrMatcher) null);\n+        assertEquals(\"A0xA1A2yA3\", sb.toString());\n+        sb.deleteAll(A_NUMBER_MATCHER);\n+        assertEquals(\"xy\", sb.toString());\n+\n+        sb = new StrBuilder(\"Ax1\");\n+        sb.deleteAll(A_NUMBER_MATCHER);\n+        assertEquals(\"Ax1\", sb.toString());\n+\n+        sb = new StrBuilder(\"\");\n+        sb.deleteAll(A_NUMBER_MATCHER);\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    public void testDeleteFirst_StrMatcher() {\n+        StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\n+        sb.deleteFirst((StrMatcher) null);\n+        assertEquals(\"A0xA1A2yA3\", sb.toString());\n+        sb.deleteFirst(A_NUMBER_MATCHER);\n+        assertEquals(\"xA1A2yA3\", sb.toString());\n+\n+        sb = new StrBuilder(\"Ax1\");\n+        sb.deleteFirst(A_NUMBER_MATCHER);\n+        assertEquals(\"Ax1\", sb.toString());\n+\n+        sb = new StrBuilder(\"\");\n+        sb.deleteFirst(A_NUMBER_MATCHER);\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testReplace_int_int_String() {\n+        StrBuilder sb = new StrBuilder(\"abc\");\n+        sb.replace(0, 1, \"d\");\n+        assertEquals(\"dbc\", sb.toString());\n+        sb.replace(0, 1, \"aaa\");\n+        assertEquals(\"aaabc\", sb.toString());\n+        sb.replace(0, 3, \"\");\n+        assertEquals(\"bc\", sb.toString());\n+        sb.replace(1, 2, (String) null);\n+        assertEquals(\"b\", sb.toString());\n+        sb.replace(1, 1000, \"text\");\n+        assertEquals(\"btext\", sb.toString());\n+        sb.replace(0, 1000, \"text\");\n+        assertEquals(\"text\", sb.toString());\n+        \n+        sb = new StrBuilder(\"atext\");\n+        sb.replace(1, 1, \"ny\");\n+        assertEquals(\"anytext\", sb.toString());\n+        try {\n+            sb.replace(2, 1, \"anything\");\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        \n+        sb = new StrBuilder();\n+        try {\n+            sb.replace(1, 2, \"anything\");\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            sb.replace(-1, 1, \"anything\");\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReplaceAll_char_char() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replaceAll('x', 'y');\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll('a', 'd');\n+        assertEquals(\"dbcbccbd\", sb.toString());\n+        sb.replaceAll('b', 'e');\n+        assertEquals(\"dececced\", sb.toString());\n+        sb.replaceAll('c', 'f');\n+        assertEquals(\"defeffed\", sb.toString());\n+        sb.replaceAll('d', 'd');\n+        assertEquals(\"defeffed\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReplaceFirst_char_char() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replaceFirst('x', 'y');\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst('a', 'd');\n+        assertEquals(\"dbcbccba\", sb.toString());\n+        sb.replaceFirst('b', 'e');\n+        assertEquals(\"decbccba\", sb.toString());\n+        sb.replaceFirst('c', 'f');\n+        assertEquals(\"defbccba\", sb.toString());\n+        sb.replaceFirst('d', 'd');\n+        assertEquals(\"defbccba\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReplaceAll_String_String() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replaceAll((String) null, null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll((String) null, \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll(\"\", null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll(\"\", \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb.replaceAll(\"x\", \"y\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll(\"a\", \"d\");\n+        assertEquals(\"dbcbccbd\", sb.toString());\n+        sb.replaceAll(\"d\", null);\n+        assertEquals(\"bcbccb\", sb.toString());\n+        sb.replaceAll(\"cb\", \"-\");\n+        assertEquals(\"b-c-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcba\");\n+        sb.replaceAll(\"b\", \"xbx\");\n+        assertEquals(\"axbxcxbxa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"bb\");\n+        sb.replaceAll(\"b\", \"xbx\");\n+        assertEquals(\"xbxxbx\", sb.toString());\n+    }\n+\n+    public void testReplaceFirst_String_String() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replaceFirst((String) null, null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst((String) null, \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst(\"\", null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst(\"\", \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb.replaceFirst(\"x\", \"y\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst(\"a\", \"d\");\n+        assertEquals(\"dbcbccba\", sb.toString());\n+        sb.replaceFirst(\"d\", null);\n+        assertEquals(\"bcbccba\", sb.toString());\n+        sb.replaceFirst(\"cb\", \"-\");\n+        assertEquals(\"b-ccba\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcba\");\n+        sb.replaceFirst(\"b\", \"xbx\");\n+        assertEquals(\"axbxcba\", sb.toString());\n+        \n+        sb = new StrBuilder(\"bb\");\n+        sb.replaceFirst(\"b\", \"xbx\");\n+        assertEquals(\"xbxb\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReplaceAll_StrMatcher_String() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replaceAll((StrMatcher) null, null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll((StrMatcher) null, \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll(StrMatcher.noneMatcher(), null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll(StrMatcher.noneMatcher(), \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb.replaceAll(StrMatcher.charMatcher('x'), \"y\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll(StrMatcher.charMatcher('a'), \"d\");\n+        assertEquals(\"dbcbccbd\", sb.toString());\n+        sb.replaceAll(StrMatcher.charMatcher('d'), null);\n+        assertEquals(\"bcbccb\", sb.toString());\n+        sb.replaceAll(StrMatcher.stringMatcher(\"cb\"), \"-\");\n+        assertEquals(\"b-c-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcba\");\n+        sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\n+        assertEquals(\"axbxcxbxa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"bb\");\n+        sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\n+        assertEquals(\"xbxxbx\", sb.toString());\n+        \n+        sb = new StrBuilder(\"A1-A2A3-A4\");\n+        sb.replaceAll(A_NUMBER_MATCHER, \"***\");\n+        assertEquals(\"***-******-***\", sb.toString());\n+    }\n+\n+    public void testReplaceFirst_StrMatcher_String() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replaceFirst((StrMatcher) null, null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst((StrMatcher) null, \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst(StrMatcher.noneMatcher(), null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst(StrMatcher.noneMatcher(), \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb.replaceFirst(StrMatcher.charMatcher('x'), \"y\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst(StrMatcher.charMatcher('a'), \"d\");\n+        assertEquals(\"dbcbccba\", sb.toString());\n+        sb.replaceFirst(StrMatcher.charMatcher('d'), null);\n+        assertEquals(\"bcbccba\", sb.toString());\n+        sb.replaceFirst(StrMatcher.stringMatcher(\"cb\"), \"-\");\n+        assertEquals(\"b-ccba\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcba\");\n+        sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\n+        assertEquals(\"axbxcba\", sb.toString());\n+        \n+        sb = new StrBuilder(\"bb\");\n+        sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\n+        assertEquals(\"xbxb\", sb.toString());\n+        \n+        sb = new StrBuilder(\"A1-A2A3-A4\");\n+        sb.replaceFirst(A_NUMBER_MATCHER, \"***\");\n+        assertEquals(\"***-A2A3-A4\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReplace_StrMatcher_String_int_int_int_VaryMatcher() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replace((StrMatcher) null, \"x\", 0, sb.length(), -1);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb.replace(StrMatcher.charMatcher('a'), \"x\", 0, sb.length(), -1);\n+        assertEquals(\"xbcbccbx\", sb.toString());\n+        \n+        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"x\", 0, sb.length(), -1);\n+        assertEquals(\"xbxcxx\", sb.toString());\n+        \n+        sb = new StrBuilder(\"A1-A2A3-A4\");\n+        sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\n+        assertEquals(\"***-******-***\", sb.toString());\n+        \n+        sb = new StrBuilder();\n+        sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    public void testReplace_StrMatcher_String_int_int_int_VaryReplace() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"cb\", 0, sb.length(), -1);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcbccba\");\n+        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"-\", 0, sb.length(), -1);\n+        assertEquals(\"ab-c-a\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcbccba\");\n+        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"+++\", 0, sb.length(), -1);\n+        assertEquals(\"ab+++c+++a\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcbccba\");\n+        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"\", 0, sb.length(), -1);\n+        assertEquals(\"abca\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcbccba\");\n+        sb.replace(StrMatcher.stringMatcher(\"cb\"), null, 0, sb.length(), -1);\n+        assertEquals(\"abca\", sb.toString());\n+    }\n+\n+    public void testReplace_StrMatcher_String_int_int_int_VaryStartIndex() {\n+        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, sb.length(), -1);\n+        assertEquals(\"-x--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 1, sb.length(), -1);\n+        assertEquals(\"aax--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, sb.length(), -1);\n+        assertEquals(\"aax--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 3, sb.length(), -1);\n+        assertEquals(\"aax--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 4, sb.length(), -1);\n+        assertEquals(\"aaxa-ay-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 5, sb.length(), -1);\n+        assertEquals(\"aaxaa-y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 6, sb.length(), -1);\n+        assertEquals(\"aaxaaaay-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 7, sb.length(), -1);\n+        assertEquals(\"aaxaaaay-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 8, sb.length(), -1);\n+        assertEquals(\"aaxaaaay-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 9, sb.length(), -1);\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 10, sb.length(), -1);\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        try {\n+            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 11, sb.length(), -1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        try {\n+            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", -1, sb.length(), -1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+    }\n+\n+    public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex() {\n+        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 0, -1);\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 2, -1);\n+        assertEquals(\"-xaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 3, -1);\n+        assertEquals(\"-xaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 4, -1);\n+        assertEquals(\"-xaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 5, -1);\n+        assertEquals(\"-x-aayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 6, -1);\n+        assertEquals(\"-x-aayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 7, -1);\n+        assertEquals(\"-x--yaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 8, -1);\n+        assertEquals(\"-x--yaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 9, -1);\n+        assertEquals(\"-x--yaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\n+        assertEquals(\"-x--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 1000, -1);\n+        assertEquals(\"-x--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        try {\n+            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, 1, -1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+    }\n+\n+    public void testReplace_StrMatcher_String_int_int_int_VaryCount() {\n+        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\n+        assertEquals(\"-x--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 0);\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 1);\n+        assertEquals(\"-xaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 2);\n+        assertEquals(\"-x-aayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 3);\n+        assertEquals(\"-x--yaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 4);\n+        assertEquals(\"-x--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 5);\n+        assertEquals(\"-x--y-\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReverse() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(\"\", sb.reverse().toString());\n+        \n+        sb.clear().append(true);\n+        assertEquals(\"eurt\", sb.reverse().toString());\n+        assertEquals(\"true\", sb.reverse().toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTrim() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(\"\", sb.reverse().toString());\n+        \n+        sb.clear().append(\" \\u0000 \");\n+        assertEquals(\"\", sb.trim().toString());\n+        \n+        sb.clear().append(\" \\u0000 a b c\");\n+        assertEquals(\"a b c\", sb.trim().toString());\n+        \n+        sb.clear().append(\"a b c \\u0000 \");\n+        assertEquals(\"a b c\", sb.trim().toString());\n+        \n+        sb.clear().append(\" \\u0000 a b c \\u0000 \");\n+        assertEquals(\"a b c\", sb.trim().toString());\n+        \n+        sb.clear().append(\"a b c\");\n+        assertEquals(\"a b c\", sb.trim().toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testStartsWith() {\n+        StrBuilder sb = new StrBuilder();\n+        assertFalse(sb.startsWith(\"a\"));\n+        assertFalse(sb.startsWith(null));\n+        assertTrue(sb.startsWith(\"\"));\n+        sb.append(\"abc\");\n+        assertTrue(sb.startsWith(\"a\"));\n+        assertTrue(sb.startsWith(\"ab\"));\n+        assertTrue(sb.startsWith(\"abc\"));\n+        assertFalse(sb.startsWith(\"cba\"));\n+    }\n+\n+    public void testEndsWith() {\n+        StrBuilder sb = new StrBuilder();\n+        assertFalse(sb.endsWith(\"a\"));\n+        assertFalse(sb.endsWith(\"c\"));\n+        assertTrue(sb.endsWith(\"\"));\n+        assertFalse(sb.endsWith(null));\n+        sb.append(\"abc\");\n+        assertTrue(sb.endsWith(\"c\"));\n+        assertTrue(sb.endsWith(\"bc\"));\n+        assertTrue(sb.endsWith(\"abc\"));\n+        assertFalse(sb.endsWith(\"cba\"));\n+        assertFalse(sb.endsWith(\"abcd\"));\n+        assertFalse(sb.endsWith(\" abc\"));\n+        assertFalse(sb.endsWith(\"abc \"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSubSequenceIntInt() {\n+       StrBuilder sb = new StrBuilder (\"hello goodbye\");\n+       // Start index is negative\n+       try {\n+            sb.subSequence(-1, 5);\n+            fail();\n+        } catch (IndexOutOfBoundsException e) {}\n+        \n+        // End index is negative\n+       try {\n+            sb.subSequence(2, -1);\n+            fail();\n+        } catch (IndexOutOfBoundsException e) {}\n+        \n+        // End index greater than length()\n+        try {\n+            sb.subSequence(2, sb.length() + 1);\n+            fail();\n+        } catch (IndexOutOfBoundsException e) {}\n+        \n+        // Start index greater then end index\n+        try {\n+            sb.subSequence(3, 2);\n+            fail();\n+        } catch (IndexOutOfBoundsException e) {}\n+        \n+        // Normal cases\n+        assertEquals (\"hello\", sb.subSequence(0, 5));\n+        assertEquals (\"hello goodbye\".subSequence(0, 6), sb.subSequence(0, 6));\n+        assertEquals (\"goodbye\", sb.subSequence(6, 13));\n+        assertEquals (\"hello goodbye\".subSequence(6,13), sb.subSequence(6, 13));\n+    }\n+\n+    public void testSubstringInt() {\n+        StrBuilder sb = new StrBuilder (\"hello goodbye\");\n+        assertEquals (\"goodbye\", sb.substring(6));\n+        assertEquals (\"hello goodbye\".substring(6), sb.substring(6));\n+        assertEquals (\"hello goodbye\", sb.substring(0));\n+        assertEquals (\"hello goodbye\".substring(0), sb.substring(0));\n+        try {\n+            sb.substring(-1);\n+            fail ();\n+        } catch (IndexOutOfBoundsException e) {}\n+        \n+        try {\n+            sb.substring(15);\n+            fail ();\n+        } catch (IndexOutOfBoundsException e) {}\n+    \n+    }\n+    \n+    public void testSubstringIntInt() {\n+        StrBuilder sb = new StrBuilder (\"hello goodbye\");\n+        assertEquals (\"hello\", sb.substring(0, 5));\n+        assertEquals (\"hello goodbye\".substring(0, 6), sb.substring(0, 6));\n+        \n+        assertEquals (\"goodbye\", sb.substring(6, 13));\n+        assertEquals (\"hello goodbye\".substring(6,13), sb.substring(6, 13));\n+        \n+        assertEquals (\"goodbye\", sb.substring(6, 20));\n+        \n+        try {\n+            sb.substring(-1, 5);\n+            fail();\n+        } catch (IndexOutOfBoundsException e) {}\n+        \n+        try {\n+            sb.substring(15, 20);\n+            fail();\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testMidString() {\n+        StrBuilder sb = new StrBuilder(\"hello goodbye hello\");\n+        assertEquals(\"goodbye\", sb.midString(6, 7));\n+        assertEquals(\"hello\", sb.midString(0, 5));\n+        assertEquals(\"hello\", sb.midString(-5, 5));\n+        assertEquals(\"\", sb.midString(0, -1));\n+        assertEquals(\"\", sb.midString(20, 2));\n+        assertEquals(\"hello\", sb.midString(14, 22));\n+    }\n+\n+    public void testRightString() {\n+        StrBuilder sb = new StrBuilder(\"left right\");\n+        assertEquals(\"right\", sb.rightString(5));\n+        assertEquals(\"\", sb.rightString(0));\n+        assertEquals(\"\", sb.rightString(-5));\n+        assertEquals(\"left right\", sb.rightString(15));\n+    }\n+\n+    public void testLeftString() {\n+        StrBuilder sb = new StrBuilder(\"left right\");\n+        assertEquals(\"left\", sb.leftString(4));\n+        assertEquals(\"\", sb.leftString(0));\n+        assertEquals(\"\", sb.leftString(-5));\n+        assertEquals(\"left right\", sb.leftString(15));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testContains_char() {\n+        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n+        assertEquals(true, sb.contains('a'));\n+        assertEquals(true, sb.contains('o'));\n+        assertEquals(true, sb.contains('z'));\n+        assertEquals(false, sb.contains('1'));\n+    }\n+\n+    public void testContains_String() {\n+        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n+        assertEquals(true, sb.contains(\"a\"));\n+        assertEquals(true, sb.contains(\"pq\"));\n+        assertEquals(true, sb.contains(\"z\"));\n+        assertEquals(false, sb.contains(\"zyx\"));\n+        assertEquals(false, sb.contains((String) null));\n+    }\n+\n+    public void testContains_StrMatcher() {\n+        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n+        assertEquals(true, sb.contains(StrMatcher.charMatcher('a')));\n+        assertEquals(true, sb.contains(StrMatcher.stringMatcher(\"pq\")));\n+        assertEquals(true, sb.contains(StrMatcher.charMatcher('z')));\n+        assertEquals(false, sb.contains(StrMatcher.stringMatcher(\"zy\")));\n+        assertEquals(false, sb.contains((StrMatcher) null));\n+\n+        sb = new StrBuilder();\n+        assertEquals(false, sb.contains(A_NUMBER_MATCHER));\n+        sb.append(\"B A1 C\");\n+        assertEquals(true, sb.contains(A_NUMBER_MATCHER));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testIndexOf_char() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        assertEquals(0, sb.indexOf('a'));\n+        \n+        // should work like String#indexOf\n+        assertEquals(\"abab\".indexOf('a'), sb.indexOf('a'));\n+\n+        assertEquals(1, sb.indexOf('b'));\n+        assertEquals(\"abab\".indexOf('b'), sb.indexOf('b'));\n+\n+        assertEquals(-1, sb.indexOf('z'));\n+    }\n+\n+    public void testIndexOf_char_int() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        assertEquals(0, sb.indexOf('a', -1));\n+        assertEquals(0, sb.indexOf('a', 0));\n+        assertEquals(2, sb.indexOf('a', 1));\n+        assertEquals(-1, sb.indexOf('a', 4));\n+        assertEquals(-1, sb.indexOf('a', 5));\n+\n+        // should work like String#indexOf\n+        assertEquals(\"abab\".indexOf('a', 1), sb.indexOf('a', 1));\n+\n+        assertEquals(3, sb.indexOf('b', 2));\n+        assertEquals(\"abab\".indexOf('b', 2), sb.indexOf('b', 2));\n+\n+        assertEquals(-1, sb.indexOf('z', 2));\n+\n+        sb = new StrBuilder(\"xyzabc\");\n+        assertEquals(2, sb.indexOf('z', 0));\n+        assertEquals(-1, sb.indexOf('z', 3));\n+    }\n+\n+    public void testLastIndexOf_char() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals (2, sb.lastIndexOf('a'));\n+        //should work like String#lastIndexOf\n+        assertEquals (\"abab\".lastIndexOf('a'), sb.lastIndexOf('a'));\n+        \n+        assertEquals(3, sb.lastIndexOf('b'));\n+        assertEquals (\"abab\".lastIndexOf('b'), sb.lastIndexOf('b'));\n+        \n+        assertEquals (-1, sb.lastIndexOf('z'));\n+    }\n+\n+    public void testLastIndexOf_char_int() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        assertEquals(-1, sb.lastIndexOf('a', -1));\n+        assertEquals(0, sb.lastIndexOf('a', 0));\n+        assertEquals(0, sb.lastIndexOf('a', 1));\n+\n+        // should work like String#lastIndexOf\n+        assertEquals(\"abab\".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));\n+\n+        assertEquals(1, sb.lastIndexOf('b', 2));\n+        assertEquals(\"abab\".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));\n+\n+        assertEquals(-1, sb.lastIndexOf('z', 2));\n+\n+        sb = new StrBuilder(\"xyzabc\");\n+        assertEquals(2, sb.lastIndexOf('z', sb.length()));\n+        assertEquals(-1, sb.lastIndexOf('z', 1));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testIndexOf_String() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals(0, sb.indexOf(\"a\"));\n+        //should work like String#indexOf\n+        assertEquals(\"abab\".indexOf(\"a\"), sb.indexOf(\"a\"));\n+        \n+        assertEquals(0, sb.indexOf(\"ab\"));\n+        //should work like String#indexOf\n+        assertEquals(\"abab\".indexOf(\"ab\"), sb.indexOf(\"ab\"));\n+        \n+        assertEquals(1, sb.indexOf(\"b\"));\n+        assertEquals(\"abab\".indexOf(\"b\"), sb.indexOf(\"b\"));\n+        \n+        assertEquals(1, sb.indexOf(\"ba\"));\n+        assertEquals(\"abab\".indexOf(\"ba\"), sb.indexOf(\"ba\"));\n+        \n+        assertEquals(-1, sb.indexOf(\"z\"));\n+        \n+        assertEquals(-1, sb.indexOf((String) null));\n+    }\n+\n+    public void testIndexOf_String_int() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        assertEquals(0, sb.indexOf(\"a\", -1));\n+        assertEquals(0, sb.indexOf(\"a\", 0));\n+        assertEquals(2, sb.indexOf(\"a\", 1));\n+        assertEquals(2, sb.indexOf(\"a\", 2));\n+        assertEquals(-1, sb.indexOf(\"a\", 3));\n+        assertEquals(-1, sb.indexOf(\"a\", 4));\n+        assertEquals(-1, sb.indexOf(\"a\", 5));\n+        \n+        assertEquals(-1, sb.indexOf(\"abcdef\", 0));\n+        assertEquals(0, sb.indexOf(\"\", 0));\n+        assertEquals(1, sb.indexOf(\"\", 1));\n+        \n+        //should work like String#indexOf\n+        assertEquals (\"abab\".indexOf(\"a\", 1), sb.indexOf(\"a\", 1));\n+        \n+        assertEquals(2, sb.indexOf(\"ab\", 1));\n+        //should work like String#indexOf\n+        assertEquals(\"abab\".indexOf(\"ab\", 1), sb.indexOf(\"ab\", 1));\n+        \n+        assertEquals(3, sb.indexOf(\"b\", 2));\n+        assertEquals(\"abab\".indexOf(\"b\", 2), sb.indexOf(\"b\", 2));\n+        \n+        assertEquals(1, sb.indexOf(\"ba\", 1));\n+        assertEquals(\"abab\".indexOf(\"ba\", 2), sb.indexOf(\"ba\", 2));\n+        \n+        assertEquals(-1, sb.indexOf(\"z\", 2));\n+        \n+        sb = new StrBuilder(\"xyzabc\");\n+        assertEquals(2, sb.indexOf(\"za\", 0));\n+        assertEquals(-1, sb.indexOf(\"za\", 3));\n+        \n+        assertEquals(-1, sb.indexOf((String) null, 2));\n+    }\n+\n+    public void testLastIndexOf_String() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals(2, sb.lastIndexOf(\"a\"));\n+        //should work like String#lastIndexOf\n+        assertEquals(\"abab\".lastIndexOf(\"a\"), sb.lastIndexOf(\"a\"));\n+        \n+        assertEquals(2, sb.lastIndexOf(\"ab\"));\n+        //should work like String#lastIndexOf\n+        assertEquals(\"abab\".lastIndexOf(\"ab\"), sb.lastIndexOf(\"ab\"));\n+        \n+        assertEquals(3, sb.lastIndexOf(\"b\"));\n+        assertEquals(\"abab\".lastIndexOf(\"b\"), sb.lastIndexOf(\"b\"));\n+        \n+        assertEquals(1, sb.lastIndexOf(\"ba\"));\n+        assertEquals(\"abab\".lastIndexOf(\"ba\"), sb.lastIndexOf(\"ba\"));\n+        \n+        assertEquals(-1, sb.lastIndexOf(\"z\"));\n+        \n+        assertEquals(-1, sb.lastIndexOf((String) null));\n+    }\n+\n+    public void testLastIndexOf_String_int() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        assertEquals(-1, sb.lastIndexOf(\"a\", -1));\n+        assertEquals(0, sb.lastIndexOf(\"a\", 0));\n+        assertEquals(0, sb.lastIndexOf(\"a\", 1));\n+        assertEquals(2, sb.lastIndexOf(\"a\", 2));\n+        assertEquals(2, sb.lastIndexOf(\"a\", 3));\n+        assertEquals(2, sb.lastIndexOf(\"a\", 4));\n+        assertEquals(2, sb.lastIndexOf(\"a\", 5));\n+        \n+        assertEquals(-1, sb.lastIndexOf(\"abcdef\", 3));\n+        assertEquals(\"abab\".lastIndexOf(\"\", 3), sb.lastIndexOf(\"\", 3));\n+        assertEquals(\"abab\".lastIndexOf(\"\", 1), sb.lastIndexOf(\"\", 1));\n+        \n+        //should work like String#lastIndexOf\n+        assertEquals(\"abab\".lastIndexOf(\"a\", 1), sb.lastIndexOf(\"a\", 1));\n+        \n+        assertEquals(0, sb.lastIndexOf(\"ab\", 1));\n+        //should work like String#lastIndexOf\n+        assertEquals(\"abab\".lastIndexOf(\"ab\", 1), sb.lastIndexOf(\"ab\", 1));\n+        \n+        assertEquals(1, sb.lastIndexOf(\"b\", 2));\n+        assertEquals(\"abab\".lastIndexOf(\"b\", 2), sb.lastIndexOf(\"b\", 2));\n+        \n+        assertEquals(1, sb.lastIndexOf(\"ba\", 2));\n+        assertEquals(\"abab\".lastIndexOf(\"ba\", 2), sb.lastIndexOf(\"ba\", 2));\n+        \n+        assertEquals(-1, sb.lastIndexOf(\"z\", 2));\n+        \n+        sb = new StrBuilder(\"xyzabc\");\n+        assertEquals(2, sb.lastIndexOf(\"za\", sb.length()));\n+        assertEquals(-1, sb.lastIndexOf(\"za\", 1));\n+        \n+        assertEquals(-1, sb.lastIndexOf((String) null, 2));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testIndexOf_StrMatcher() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(-1, sb.indexOf((StrMatcher) null));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a')));\n+        \n+        sb.append(\"ab bd\");\n+        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a')));\n+        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b')));\n+        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher()));\n+        assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d')));\n+        assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher()));\n+        assertEquals(-1, sb.indexOf((StrMatcher) null));\n+        \n+        sb.append(\" A1 junction\");\n+        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER));\n+    }\n+\n+    public void testIndexOf_StrMatcher_int() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(-1, sb.indexOf((StrMatcher) null, 2));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 0));\n+        \n+        sb.append(\"ab bd\");\n+        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2));\n+        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20));\n+        \n+        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1));\n+        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0));\n+        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1));\n+        assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2));\n+        assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6));\n+        \n+        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2));\n+        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0));\n+        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2));\n+        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4));\n+        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20));\n+        \n+        assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0));\n+        assertEquals(-1, sb.indexOf((StrMatcher) null, 0));\n+        \n+        sb.append(\" A1 junction with A2\");\n+        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5));\n+        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6));\n+        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7));\n+        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22));\n+        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23));\n+        assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24));\n+    }\n+\n+    public void testLastIndexOf_StrMatcher() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a')));\n+        \n+        sb.append(\"ab bd\");\n+        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a')));\n+        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b')));\n+        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher()));\n+        assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d')));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher()));\n+        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n+        \n+        sb.append(\" A1 junction\");\n+        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER));\n+    }\n+\n+    public void testLastIndexOf_StrMatcher_int() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1));\n+        \n+        sb.append(\"ab bd\");\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2));\n+        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\n+        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\n+        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20));\n+        \n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0));\n+        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1));\n+        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2));\n+        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3));\n+        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4));\n+        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5));\n+        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6));\n+        \n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0));\n+        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2));\n+        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4));\n+        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20));\n+        \n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0));\n+        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0));\n+        \n+        sb.append(\" A1 junction with A2\");\n+        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5));\n+        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); // A matches, 1 is outside bounds\n+        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7));\n+        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22));\n+        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23)); // A matches, 2 is outside bounds\n+        assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24));\n+    }\n+\n+    static final StrMatcher A_NUMBER_MATCHER = new StrMatcher() {\n+        @Override\n+        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n+            if (buffer[pos] == 'A') {\n+                pos++;\n+                if (pos < bufferEnd && buffer[pos] >= '0' && buffer[pos] <= '9') {\n+                    return 2;\n+                }\n+            }\n+            return 0;\n+        }\n+    };\n+\n+    //-----------------------------------------------------------------------\n+    public void testAsTokenizer() throws Exception {\n+        // from Javadoc\n+        StrBuilder b = new StrBuilder();\n+        b.append(\"a b \");\n+        StrTokenizer t = b.asTokenizer();\n+        \n+        String[] tokens1 = t.getTokenArray();\n+        assertEquals(2, tokens1.length);\n+        assertEquals(\"a\", tokens1[0]);\n+        assertEquals(\"b\", tokens1[1]);\n+        assertEquals(2, t.size());\n+        \n+        b.append(\"c d \");\n+        String[] tokens2 = t.getTokenArray();\n+        assertEquals(2, tokens2.length);\n+        assertEquals(\"a\", tokens2[0]);\n+        assertEquals(\"b\", tokens2[1]);\n+        assertEquals(2, t.size());\n+        assertEquals(\"a\", t.next());\n+        assertEquals(\"b\", t.next());\n+        \n+        t.reset();\n+        String[] tokens3 = t.getTokenArray();\n+        assertEquals(4, tokens3.length);\n+        assertEquals(\"a\", tokens3[0]);\n+        assertEquals(\"b\", tokens3[1]);\n+        assertEquals(\"c\", tokens3[2]);\n+        assertEquals(\"d\", tokens3[3]);\n+        assertEquals(4, t.size());\n+        assertEquals(\"a\", t.next());\n+        assertEquals(\"b\", t.next());\n+        assertEquals(\"c\", t.next());\n+        assertEquals(\"d\", t.next());\n+        \n+        assertEquals(\"a b c d \", t.getContent());\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testAsReader() throws Exception {\n+        StrBuilder sb = new StrBuilder(\"some text\");\n+        Reader reader = sb.asReader();\n+        assertEquals(true, reader.ready());\n+        char[] buf = new char[40];\n+        assertEquals(9, reader.read(buf));\n+        assertEquals(\"some text\", new String(buf, 0, 9));\n+        \n+        assertEquals(-1, reader.read());\n+        assertEquals(false, reader.ready());\n+        assertEquals(0, reader.skip(2));\n+        assertEquals(0, reader.skip(-1));\n+        \n+        assertEquals(true, reader.markSupported());\n+        reader = sb.asReader();\n+        assertEquals('s', reader.read());\n+        reader.mark(-1);\n+        char[] array = new char[3];\n+        assertEquals(3, reader.read(array, 0, 3));\n+        assertEquals('o', array[0]);\n+        assertEquals('m', array[1]);\n+        assertEquals('e', array[2]);\n+        reader.reset();\n+        assertEquals(1, reader.read(array, 1, 1));\n+        assertEquals('o', array[0]);\n+        assertEquals('o', array[1]);\n+        assertEquals('e', array[2]);\n+        assertEquals(2, reader.skip(2));\n+        assertEquals(' ', reader.read());\n+        \n+        assertEquals(true, reader.ready());\n+        reader.close();\n+        assertEquals(true, reader.ready());\n+        \n+        reader = sb.asReader();\n+        array = new char[3];\n+        try {\n+            reader.read(array, -1, 0);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            reader.read(array, 0, -1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            reader.read(array, 100, 1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            reader.read(array, 0, 100);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        \n+        assertEquals(0, reader.read(array, 0, 0));\n+        assertEquals(0, array[0]);\n+        assertEquals(0, array[1]);\n+        assertEquals(0, array[2]);\n+        \n+        reader.skip(9);\n+        assertEquals(-1, reader.read(array, 0, 1));\n+        \n+        reader.reset();\n+        array = new char[30];\n+        assertEquals(9, reader.read(array, 0, 30));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAsWriter() throws Exception {\n+        StrBuilder sb = new StrBuilder(\"base\");\n+        Writer writer = sb.asWriter();\n+        \n+        writer.write('l');\n+        assertEquals(\"basel\", sb.toString());\n+        \n+        writer.write(new char[] {'i', 'n'});\n+        assertEquals(\"baselin\", sb.toString());\n+        \n+        writer.write(new char[] {'n', 'e', 'r'}, 1, 2);\n+        assertEquals(\"baseliner\", sb.toString());\n+        \n+        writer.write(\" rout\");\n+        assertEquals(\"baseliner rout\", sb.toString());\n+        \n+        writer.write(\"ping that server\", 1, 3);\n+        assertEquals(\"baseliner routing\", sb.toString());\n+        \n+        writer.flush();  // no effect\n+        assertEquals(\"baseliner routing\", sb.toString());\n+        \n+        writer.close();  // no effect\n+        assertEquals(\"baseliner routing\", sb.toString());\n+        \n+        writer.write(\" hi\");  // works after close\n+        assertEquals(\"baseliner routing hi\", sb.toString());\n+        \n+        sb.setLength(4);  // mix and match\n+        writer.write('d');\n+        assertEquals(\"based\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEqualsIgnoreCase() {\n+        StrBuilder sb1 = new StrBuilder();\n+        StrBuilder sb2 = new StrBuilder();\n+        assertEquals(true, sb1.equalsIgnoreCase(sb1));\n+        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n+        assertEquals(true, sb2.equalsIgnoreCase(sb2));\n+        \n+        sb1.append(\"abc\");\n+        assertEquals(false, sb1.equalsIgnoreCase(sb2));\n+        \n+        sb2.append(\"ABC\");\n+        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n+        \n+        sb2.clear().append(\"abc\");\n+        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n+        assertEquals(true, sb1.equalsIgnoreCase(sb1));\n+        assertEquals(true, sb2.equalsIgnoreCase(sb2));\n+        \n+        sb2.clear().append(\"aBc\");\n+        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testEquals() {\n+        StrBuilder sb1 = new StrBuilder();\n+        StrBuilder sb2 = new StrBuilder();\n+        assertEquals(true, sb1.equals(sb2));\n+        assertEquals(true, sb1.equals(sb1));\n+        assertEquals(true, sb2.equals(sb2));\n+        assertEquals(true, sb1.equals((Object) sb2));\n+        \n+        sb1.append(\"abc\");\n+        assertEquals(false, sb1.equals(sb2));\n+        assertEquals(false, sb1.equals((Object) sb2));\n+        \n+        sb2.append(\"ABC\");\n+        assertEquals(false, sb1.equals(sb2));\n+        assertEquals(false, sb1.equals((Object) sb2));\n+        \n+        sb2.clear().append(\"abc\");\n+        assertEquals(true, sb1.equals(sb2));\n+        assertEquals(true, sb1.equals((Object) sb2));\n+        \n+        assertEquals(false, sb1.equals(new Integer(1)));\n+        assertEquals(false, sb1.equals(\"abc\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testHashCode() {\n+        StrBuilder sb = new StrBuilder();\n+        int hc1a = sb.hashCode();\n+        int hc1b = sb.hashCode();\n+        assertEquals(0, hc1a);\n+        assertEquals(hc1a, hc1b);\n+        \n+        sb.append(\"abc\");\n+        int hc2a = sb.hashCode();\n+        int hc2b = sb.hashCode();\n+        assertEquals(true, hc2a != 0);\n+        assertEquals(hc2a, hc2b);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        StrBuilder sb = new StrBuilder(\"abc\");\n+        assertEquals(\"abc\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStringBuffer() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());\n+        \n+        sb.append(\"junit\");\n+        assertEquals(new StringBuffer(\"junit\").toString(), sb.toStringBuffer().toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testLang294() {\n+        StrBuilder sb = new StrBuilder(\"\\n%BLAH%\\nDo more stuff\\neven more stuff\\n%BLAH%\\n\");\n+        sb.deleteAll(\"\\n%BLAH%\");\n+        assertEquals(\"\\nDo more stuff\\neven more stuff\\n\", sb.toString()); \n+    }\n+\n+    public void testIndexOfLang294() {\n+        StrBuilder sb = new StrBuilder(\"onetwothree\");\n+        sb.deleteFirst(\"three\");\n+        assertEquals(-1, sb.indexOf(\"three\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testLang295() {\n+        StrBuilder sb = new StrBuilder(\"onetwothree\");\n+        sb.deleteFirst(\"three\");\n+        assertFalse( \"The contains(char) method is looking beyond the end of the string\", sb.contains('h'));\n+        assertEquals( \"The indexOf(char) method is looking beyond the end of the string\", -1, sb.indexOf('h'));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testLang412Right() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadRight(null, 10, '*');\n+        assertEquals( \"Failed to invoke appendFixedWidthPadRight correctly\", \"**********\", sb.toString());\n+    }\n+\n+    public void testLang412Left() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadLeft(null, 10, '*');\n+        assertEquals( \"Failed to invoke appendFixedWidthPadLeft correctly\", \"**********\", sb.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.text;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test class for StrLookup.\n+ *\n+ * @version $Id$\n+ */\n+public class StrLookupTest extends TestCase {\n+\n+    //-----------------------------------------------------------------------\n+    public void testNoneLookup() {\n+        assertEquals(null, StrLookup.noneLookup().lookup(null));\n+        assertEquals(null, StrLookup.noneLookup().lookup(\"\"));\n+        assertEquals(null, StrLookup.noneLookup().lookup(\"any\"));\n+    }\n+\n+    public void testSystemProperiesLookup() {\n+        assertEquals(System.getProperty(\"os.name\"), StrLookup.systemPropertiesLookup().lookup(\"os.name\"));\n+        assertEquals(null, StrLookup.systemPropertiesLookup().lookup(\"\"));\n+        assertEquals(null, StrLookup.systemPropertiesLookup().lookup(\"other\"));\n+        try {\n+            StrLookup.systemPropertiesLookup().lookup(null);\n+            fail();\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMapLookup() {\n+        Map<String, Object> map = new HashMap<String, Object>();\n+        map.put(\"key\", \"value\");\n+        map.put(\"number\", new Integer(2));\n+        assertEquals(\"value\", StrLookup.mapLookup(map).lookup(\"key\"));\n+        assertEquals(\"2\", StrLookup.mapLookup(map).lookup(\"number\"));\n+        assertEquals(null, StrLookup.mapLookup(map).lookup(null));\n+        assertEquals(null, StrLookup.mapLookup(map).lookup(\"\"));\n+        assertEquals(null, StrLookup.mapLookup(map).lookup(\"other\"));\n+    }\n+\n+    public void testMapLookup_nullMap() {\n+        Map<String, ?> map = null;\n+        assertEquals(null, StrLookup.mapLookup(map).lookup(null));\n+        assertEquals(null, StrLookup.mapLookup(map).lookup(\"\"));\n+        assertEquals(null, StrLookup.mapLookup(map).lookup(\"any\"));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/StrMatcherTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.text;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang3.text.StrMatcher}.\n+ *\n+ * @version $Id$\n+ */\n+public class StrMatcherTest extends TestCase {\n+\n+    private static final char[] BUFFER1 = \"0,1\\t2 3\\n\\r\\f\\u0000'\\\"\".toCharArray();\n+\n+    private static final char[] BUFFER2 = \"abcdef\".toCharArray();\n+\n+    /**\n+     * Create a new test case with the specified name.\n+     * \n+     * @param name  the name\n+     */\n+    public StrMatcherTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCommaMatcher() {\n+        StrMatcher matcher = StrMatcher.commaMatcher();\n+        assertSame(matcher, StrMatcher.commaMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 0));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 1));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTabMatcher() {\n+        StrMatcher matcher = StrMatcher.tabMatcher();\n+        assertSame(matcher, StrMatcher.tabMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 3));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSpaceMatcher() {\n+        StrMatcher matcher = StrMatcher.spaceMatcher();\n+        assertSame(matcher, StrMatcher.spaceMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 5));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 6));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSplitMatcher() {\n+        StrMatcher matcher = StrMatcher.splitMatcher();\n+        assertSame(matcher, StrMatcher.splitMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 3));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 5));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 6));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 7));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 8));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 9));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 10));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTrimMatcher() {\n+        StrMatcher matcher = StrMatcher.trimMatcher();\n+        assertSame(matcher, StrMatcher.trimMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 3));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 5));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 6));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 7));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 8));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 9));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 10));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleQuoteMatcher() {\n+        StrMatcher matcher = StrMatcher.singleQuoteMatcher();\n+        assertSame(matcher, StrMatcher.singleQuoteMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 10));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 11));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 12));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDoubleQuoteMatcher() {\n+        StrMatcher matcher = StrMatcher.doubleQuoteMatcher();\n+        assertSame(matcher, StrMatcher.doubleQuoteMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 11));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 12));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testQuoteMatcher() {\n+        StrMatcher matcher = StrMatcher.quoteMatcher();\n+        assertSame(matcher, StrMatcher.quoteMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 10));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 11));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 12));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNoneMatcher() {\n+        StrMatcher matcher = StrMatcher.noneMatcher();\n+        assertSame(matcher, StrMatcher.noneMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 0));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 1));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 2));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 3));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 4));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 5));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 6));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 7));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 8));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 9));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 10));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 11));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 12));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCharMatcher_char() {\n+        StrMatcher matcher = StrMatcher.charMatcher('c');\n+        assertEquals(0, matcher.isMatch(BUFFER2, 0));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 1));\n+        assertEquals(1, matcher.isMatch(BUFFER2, 2));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 3));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 4));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 5));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCharSetMatcher_String() {\n+        StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\");\n+        assertEquals(1, matcher.isMatch(BUFFER2, 0));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 1));\n+        assertEquals(1, matcher.isMatch(BUFFER2, 2));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 3));\n+        assertEquals(1, matcher.isMatch(BUFFER2, 4));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 5));\n+        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(\"\"));\n+        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null));\n+        assertTrue(StrMatcher.charSetMatcher(\"a\") instanceof StrMatcher.CharMatcher);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCharSetMatcher_charArray() {\n+        StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\".toCharArray());\n+        assertEquals(1, matcher.isMatch(BUFFER2, 0));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 1));\n+        assertEquals(1, matcher.isMatch(BUFFER2, 2));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 3));\n+        assertEquals(1, matcher.isMatch(BUFFER2, 4));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 5));\n+        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(new char[0]));\n+        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((char[]) null));\n+        assertTrue(StrMatcher.charSetMatcher(\"a\".toCharArray()) instanceof StrMatcher.CharMatcher);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testStringMatcher_String() {\n+        StrMatcher matcher = StrMatcher.stringMatcher(\"bc\");\n+        assertEquals(0, matcher.isMatch(BUFFER2, 0));\n+        assertEquals(2, matcher.isMatch(BUFFER2, 1));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 2));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 3));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 4));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 5));\n+        assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher(\"\"));\n+        assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher((String) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMatcherIndices() {\n+        // remember that the API contract is tight for the isMatch() method\n+        // all the onus is on the caller, so invalid inputs are not\n+        // the concern of StrMatcher, and are not bugs\n+        StrMatcher matcher = StrMatcher.stringMatcher(\"bc\");\n+        assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length));\n+        assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.text;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.mutable.MutableObject;\n+\n+/**\n+ * Test class for StrSubstitutor.\n+ * \n+ * @author Oliver Heger\n+ * @version $Id$\n+ */\n+public class StrSubstitutorTest extends TestCase {\n+\n+    private Map<String, String> values;\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        values = new HashMap<String, String>();\n+        values.put(\"animal\", \"quick brown fox\");\n+        values.put(\"target\", \"lazy dog\");\n+    }\n+\n+    @Override\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+        values = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests simple key replace.\n+     */\n+    public void testReplaceSimple() {\n+        doTestReplace(\"The quick brown fox jumps over the lazy dog.\", \"The ${animal} jumps over the ${target}.\", true);\n+    }\n+\n+    /**\n+     * Tests simple key replace.\n+     */\n+    public void testReplaceSolo() {\n+        doTestReplace(\"quick brown fox\", \"${animal}\", false);\n+    }\n+\n+    /**\n+     * Tests replace with no variables.\n+     */\n+    public void testReplaceNoVariables() {\n+        doTestNoReplace(\"The balloon arrived.\");\n+    }\n+\n+    /**\n+     * Tests replace with null.\n+     */\n+    public void testReplaceNull() {\n+        doTestNoReplace(null);\n+    }\n+\n+    /**\n+     * Tests replace with null.\n+     */\n+    public void testReplaceEmpty() {\n+        doTestNoReplace(\"\");\n+    }\n+\n+    /**\n+     * Tests key replace changing map after initialization (not recommended).\n+     */\n+    public void testReplaceChangedMap() {\n+        StrSubstitutor sub = new StrSubstitutor(values);\n+        values.put(\"target\", \"moon\");\n+        assertEquals(\"The quick brown fox jumps over the moon.\", sub.replace(\"The ${animal} jumps over the ${target}.\"));\n+    }\n+\n+    /**\n+     * Tests unknown key replace.\n+     */\n+    public void testReplaceUnknownKey() {\n+        doTestReplace(\"The ${person} jumps over the lazy dog.\", \"The ${person} jumps over the ${target}.\", true);\n+    }\n+\n+    /**\n+     * Tests adjacent keys.\n+     */\n+    public void testReplaceAdjacentAtStart() {\n+        values.put(\"code\", \"GBP\");\n+        values.put(\"amount\", \"12.50\");\n+        StrSubstitutor sub = new StrSubstitutor(values);\n+        assertEquals(\"GBP12.50 charged\", sub.replace(\"${code}${amount} charged\"));\n+    }\n+\n+    /**\n+     * Tests adjacent keys.\n+     */\n+    public void testReplaceAdjacentAtEnd() {\n+        values.put(\"code\", \"GBP\");\n+        values.put(\"amount\", \"12.50\");\n+        StrSubstitutor sub = new StrSubstitutor(values);\n+        assertEquals(\"Amount is GBP12.50\", sub.replace(\"Amount is ${code}${amount}\"));\n+    }\n+\n+    /**\n+     * Tests simple recursive replace.\n+     */\n+    public void testReplaceRecursive() {\n+        values.put(\"animal\", \"${critter}\");\n+        values.put(\"target\", \"${pet}\");\n+        values.put(\"pet\", \"${petCharacteristic} dog\");\n+        values.put(\"petCharacteristic\", \"lazy\");\n+        values.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\n+        values.put(\"critterSpeed\", \"quick\");\n+        values.put(\"critterColor\", \"brown\");\n+        values.put(\"critterType\", \"fox\");\n+        doTestReplace(\"The quick brown fox jumps over the lazy dog.\", \"The ${animal} jumps over the ${target}.\", true);\n+    }\n+\n+    /**\n+     * Tests escaping.\n+     */\n+    public void testReplaceEscaping() {\n+        doTestReplace(\"The ${animal} jumps over the lazy dog.\", \"The $${animal} jumps over the ${target}.\", true);\n+    }\n+\n+    /**\n+     * Tests escaping.\n+     */\n+    public void testReplaceSoloEscaping() {\n+        doTestReplace(\"${animal}\", \"$${animal}\", false);\n+    }\n+\n+    /**\n+     * Tests complex escaping.\n+     */\n+    public void testReplaceComplexEscaping() {\n+        doTestReplace(\"The ${quick brown fox} jumps over the lazy dog.\", \"The $${${animal}} jumps over the ${target}.\", true);\n+    }\n+\n+    /**\n+     * Tests when no prefix or suffix.\n+     */\n+    public void testReplaceNoPefixNoSuffix() {\n+        doTestReplace(\"The animal jumps over the lazy dog.\", \"The animal jumps over the ${target}.\", true);\n+    }\n+\n+    /**\n+     * Tests when no incomplete prefix.\n+     */\n+    public void testReplaceIncompletePefix() {\n+        doTestReplace(\"The {animal} jumps over the lazy dog.\", \"The {animal} jumps over the ${target}.\", true);\n+    }\n+\n+    /**\n+     * Tests when prefix but no suffix.\n+     */\n+    public void testReplacePrefixNoSuffix() {\n+        doTestReplace(\"The ${animal jumps over the ${target} lazy dog.\", \"The ${animal jumps over the ${target} ${target}.\", true);\n+    }\n+\n+    /**\n+     * Tests when suffix but no prefix.\n+     */\n+    public void testReplaceNoPrefixSuffix() {\n+        doTestReplace(\"The animal} jumps over the lazy dog.\", \"The animal} jumps over the ${target}.\", true);\n+    }\n+\n+    /**\n+     * Tests when no variable name.\n+     */\n+    public void testReplaceEmptyKeys() {\n+        doTestReplace(\"The ${} jumps over the lazy dog.\", \"The ${} jumps over the ${target}.\", true);\n+    }\n+\n+    /**\n+     * Tests replace creates output same as input.\n+     */\n+    public void testReplaceToIdentical() {\n+        values.put(\"animal\", \"$${${thing}}\");\n+        values.put(\"thing\", \"animal\");\n+        doTestReplace(\"The ${animal} jumps.\", \"The ${animal} jumps.\", true);\n+    }\n+\n+    /**\n+     * Tests a cyclic replace operation.\n+     * The cycle should be detected and cause an exception to be thrown.\n+     */\n+    public void testCyclicReplacement() {\n+        Map<String, String> map = new HashMap<String, String>();\n+        map.put(\"animal\", \"${critter}\");\n+        map.put(\"target\", \"${pet}\");\n+        map.put(\"pet\", \"${petCharacteristic} dog\");\n+        map.put(\"petCharacteristic\", \"lazy\");\n+        map.put(\"critter\", \"${critterSpeed} ${critterColor} ${critterType}\");\n+        map.put(\"critterSpeed\", \"quick\");\n+        map.put(\"critterColor\", \"brown\");\n+        map.put(\"critterType\", \"${animal}\");\n+        StrSubstitutor sub = new StrSubstitutor(map);\n+        try {\n+            sub.replace(\"The ${animal} jumps over the ${target}.\");\n+            fail(\"Cyclic replacement was not detected!\");\n+        } catch (IllegalStateException ex) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     * Tests interpolation with weird boundary patterns.\n+     */\n+    public void testReplaceWeirdPattens() {\n+        doTestNoReplace(\"\");\n+        doTestNoReplace(\"${}\");\n+        doTestNoReplace(\"${ }\");\n+        doTestNoReplace(\"${\\t}\");\n+        doTestNoReplace(\"${\\n}\");\n+        doTestNoReplace(\"${\\b}\");\n+        doTestNoReplace(\"${\");\n+        doTestNoReplace(\"$}\");\n+        doTestNoReplace(\"}\");\n+        doTestNoReplace(\"${}$\");\n+        doTestNoReplace(\"${${\");\n+        doTestNoReplace(\"${${}}\");\n+        doTestNoReplace(\"${$${}}\");\n+        doTestNoReplace(\"${$$${}}\");\n+        doTestNoReplace(\"${$$${$}}\");\n+        doTestNoReplace(\"${${}}\");\n+        doTestNoReplace(\"${${ }}\");\n+    }\n+\n+    /**\n+     * Tests simple key replace.\n+     */\n+    public void testReplacePartialString_noReplace() {\n+        StrSubstitutor sub = new StrSubstitutor();\n+        assertEquals(\"${animal} jumps\", sub.replace(\"The ${animal} jumps over the ${target}.\", 4, 15));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests protected.\n+     */\n+    public void testResolveVariable() {\n+        final StrBuilder builder = new StrBuilder(\"Hi ${name}!\");\n+        Map<String, String> map = new HashMap<String, String>();\n+        map.put(\"name\", \"commons\");\n+        StrSubstitutor sub = new StrSubstitutor(map) {\n+            @Override\n+            protected String resolveVariable(String variableName, StrBuilder buf, int startPos, int endPos) {\n+                assertEquals(\"name\", variableName);\n+                assertSame(builder, buf);\n+                assertEquals(3, startPos);\n+                assertEquals(10, endPos);\n+                return \"jakarta\";\n+            }\n+        };\n+        sub.replaceIn(builder);\n+        assertEquals(\"Hi jakarta!\", builder.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests constructor.\n+     */\n+    public void testConstructorNoArgs() {\n+        StrSubstitutor sub = new StrSubstitutor();\n+        assertEquals(\"Hi ${name}\", sub.replace(\"Hi ${name}\"));\n+    }\n+\n+    /**\n+     * Tests constructor.\n+     */\n+    public void testConstructorMapPrefixSuffix() {\n+        Map<String, String> map = new HashMap<String, String>();\n+        map.put(\"name\", \"commons\");\n+        StrSubstitutor sub = new StrSubstitutor(map, \"<\", \">\");\n+        assertEquals(\"Hi < commons\", sub.replace(\"Hi $< <name>\"));\n+    }\n+\n+    /**\n+     * Tests constructor.\n+     */\n+    public void testConstructorMapFull() {\n+        Map<String, String> map = new HashMap<String, String>();\n+        map.put(\"name\", \"commons\");\n+        StrSubstitutor sub = new StrSubstitutor(map, \"<\", \">\", '!');\n+        assertEquals(\"Hi < commons\", sub.replace(\"Hi !< <name>\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests get set.\n+     */\n+    public void testGetSetEscape() {\n+        StrSubstitutor sub = new StrSubstitutor();\n+        assertEquals('$', sub.getEscapeChar());\n+        sub.setEscapeChar('<');\n+        assertEquals('<', sub.getEscapeChar());\n+    }\n+\n+    /**\n+     * Tests get set.\n+     */\n+    public void testGetSetPrefix() {\n+        StrSubstitutor sub = new StrSubstitutor();\n+        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n+        sub.setVariablePrefix('<');\n+        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher);\n+        \n+        sub.setVariablePrefix(\"<<\");\n+        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n+        try {\n+            sub.setVariablePrefix((String) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n+        \n+        StrMatcher matcher = StrMatcher.commaMatcher();\n+        sub.setVariablePrefixMatcher(matcher);\n+        assertSame(matcher, sub.getVariablePrefixMatcher());\n+        try {\n+            sub.setVariablePrefixMatcher((StrMatcher) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        assertSame(matcher, sub.getVariablePrefixMatcher());\n+    }\n+\n+    /**\n+     * Tests get set.\n+     */\n+    public void testGetSetSuffix() {\n+        StrSubstitutor sub = new StrSubstitutor();\n+        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n+        sub.setVariableSuffix('<');\n+        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher);\n+        \n+        sub.setVariableSuffix(\"<<\");\n+        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n+        try {\n+            sub.setVariableSuffix((String) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n+        \n+        StrMatcher matcher = StrMatcher.commaMatcher();\n+        sub.setVariableSuffixMatcher(matcher);\n+        assertSame(matcher, sub.getVariableSuffixMatcher());\n+        try {\n+            sub.setVariableSuffixMatcher((StrMatcher) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+        assertSame(matcher, sub.getVariableSuffixMatcher());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests static.\n+     */\n+    public void testStaticReplace() {\n+        Map<String, String> map = new HashMap<String, String>();\n+        map.put(\"name\", \"commons\");\n+        assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi ${name}!\", map));\n+    }\n+\n+    /**\n+     * Tests static.\n+     */\n+    public void testStaticReplacePrefixSuffix() {\n+        Map<String, String> map = new HashMap<String, String>();\n+        map.put(\"name\", \"commons\");\n+        assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi <name>!\", map, \"<\", \">\"));\n+    }\n+\n+    /**\n+     * Tests interpolation with system properties.\n+     */\n+    public void testStaticReplaceSystemProperties() {\n+        StrBuilder buf = new StrBuilder();\n+        buf.append(\"Hi \").append(System.getProperty(\"user.name\"));\n+        buf.append(\", you are working with \");\n+        buf.append(System.getProperty(\"os.name\"));\n+        buf.append(\", your home directory is \");\n+        buf.append(System.getProperty(\"user.home\")).append('.');\n+        assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties(\"Hi ${user.name}, you are \"\n+            + \"working with ${os.name}, your home \"\n+            + \"directory is ${user.home}.\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void doTestReplace(String expectedResult, String replaceTemplate, boolean substring) {\n+        String expectedShortResult = expectedResult.substring(1, expectedResult.length() - 1);\n+        StrSubstitutor sub = new StrSubstitutor(values);\n+        \n+        // replace using String\n+        assertEquals(expectedResult, sub.replace(replaceTemplate));\n+        if (substring) {\n+            assertEquals(expectedShortResult, sub.replace(replaceTemplate, 1, replaceTemplate.length() - 2));\n+        }\n+        \n+        // replace using char[]\n+        char[] chars = replaceTemplate.toCharArray();\n+        assertEquals(expectedResult, sub.replace(chars));\n+        if (substring) {\n+            assertEquals(expectedShortResult, sub.replace(chars, 1, chars.length - 2));\n+        }\n+        \n+        // replace using StringBuffer\n+        StringBuffer buf = new StringBuffer(replaceTemplate);\n+        assertEquals(expectedResult, sub.replace(buf));\n+        if (substring) {\n+            assertEquals(expectedShortResult, sub.replace(buf, 1, buf.length() - 2));\n+        }\n+        \n+        // replace using StrBuilder\n+        StrBuilder bld = new StrBuilder(replaceTemplate);\n+        assertEquals(expectedResult, sub.replace(bld));\n+        if (substring) {\n+            assertEquals(expectedShortResult, sub.replace(bld, 1, bld.length() - 2));\n+        }\n+        \n+        // replace using object\n+        MutableObject<String> obj = new MutableObject<String>(replaceTemplate);  // toString returns template\n+        assertEquals(expectedResult, sub.replace(obj));\n+        \n+        // replace in StringBuffer\n+        buf = new StringBuffer(replaceTemplate);\n+        assertEquals(true, sub.replaceIn(buf));\n+        assertEquals(expectedResult, buf.toString());\n+        if (substring) {\n+            buf = new StringBuffer(replaceTemplate);\n+            assertEquals(true, sub.replaceIn(buf, 1, buf.length() - 2));\n+            assertEquals(expectedResult, buf.toString());  // expect full result as remainder is untouched\n+        }\n+        \n+        // replace in StrBuilder\n+        bld = new StrBuilder(replaceTemplate);\n+        assertEquals(true, sub.replaceIn(bld));\n+        assertEquals(expectedResult, bld.toString());\n+        if (substring) {\n+            bld = new StrBuilder(replaceTemplate);\n+            assertEquals(true, sub.replaceIn(bld, 1, bld.length() - 2));\n+            assertEquals(expectedResult, bld.toString());  // expect full result as remainder is untouched\n+        }\n+    }\n+\n+    private void doTestNoReplace(String replaceTemplate) {\n+        StrSubstitutor sub = new StrSubstitutor(values);\n+        \n+        if (replaceTemplate == null) {\n+            assertEquals(null, sub.replace((String) null));\n+            assertEquals(null, sub.replace((String) null, 0, 100));\n+            assertEquals(null, sub.replace((char[]) null));\n+            assertEquals(null, sub.replace((char[]) null, 0, 100));\n+            assertEquals(null, sub.replace((StringBuffer) null));\n+            assertEquals(null, sub.replace((StringBuffer) null, 0, 100));\n+            assertEquals(null, sub.replace((StrBuilder) null));\n+            assertEquals(null, sub.replace((StrBuilder) null, 0, 100));\n+            assertEquals(null, sub.replace((Object) null));\n+            assertEquals(false, sub.replaceIn((StringBuffer) null));\n+            assertEquals(false, sub.replaceIn((StringBuffer) null, 0, 100));\n+            assertEquals(false, sub.replaceIn((StrBuilder) null));\n+            assertEquals(false, sub.replaceIn((StrBuilder) null, 0, 100));\n+        } else {\n+            assertEquals(replaceTemplate, sub.replace(replaceTemplate));\n+            StrBuilder bld = new StrBuilder(replaceTemplate);\n+            assertEquals(false, sub.replaceIn(bld));\n+            assertEquals(replaceTemplate, bld.toString());\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.text;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.ObjectUtils;\n+\n+/**\n+ * Unit test for Tokenizer.\n+ * \n+ * @author Matthew Inger\n+ */\n+public class StrTokenizerTest extends TestCase {\n+\n+    private static final String CSV_SIMPLE_FIXTURE = \"A,b,c\";\n+\n+    private static final String TSV_SIMPLE_FIXTURE = \"A\\tb\\tc\";\n+\n+    /**\n+     * JUnit constructor.\n+     * \n+     * @param name\n+     */\n+    public StrTokenizerTest(String name) {\n+        super(name);\n+    }\n+\n+    private void checkClone(StrTokenizer tokenizer) {\n+        assertFalse(StrTokenizer.getCSVInstance() == tokenizer);\n+        assertFalse(StrTokenizer.getTSVInstance() == tokenizer);\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void test1() {\n+\n+        String input = \"a;b;c;\\\"d;\\\"\\\"e\\\";f; ; ;  \";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        tok.setDelimiterChar(';');\n+        tok.setQuoteChar('\"');\n+        tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n+        tok.setIgnoreEmptyTokens(false);\n+        String tokens[] = tok.getTokenArray();\n+\n+        String expected[] = new String[]{\"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", \"\", \"\", \"\",};\n+\n+        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n+        for (int i = 0; i < expected.length; i++) {\n+            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n+                    ObjectUtils.equals(expected[i], tokens[i]));\n+        }\n+\n+    }\n+\n+    public void test2() {\n+\n+        String input = \"a;b;c ;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        tok.setDelimiterChar(';');\n+        tok.setQuoteChar('\"');\n+        tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n+        tok.setIgnoreEmptyTokens(false);\n+        String tokens[] = tok.getTokenArray();\n+\n+        String expected[] = new String[]{\"a\", \"b\", \"c \", \"d;\\\"e\", \"f\", \" \", \" \", \"\",};\n+\n+        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n+        for (int i = 0; i < expected.length; i++) {\n+            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n+                    ObjectUtils.equals(expected[i], tokens[i]));\n+        }\n+\n+    }\n+\n+    public void test3() {\n+\n+        String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        tok.setDelimiterChar(';');\n+        tok.setQuoteChar('\"');\n+        tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n+        tok.setIgnoreEmptyTokens(false);\n+        String tokens[] = tok.getTokenArray();\n+\n+        String expected[] = new String[]{\"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", \" \", \" \", \"\",};\n+\n+        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n+        for (int i = 0; i < expected.length; i++) {\n+            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n+                    ObjectUtils.equals(expected[i], tokens[i]));\n+        }\n+\n+    }\n+\n+    public void test4() {\n+\n+        String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        tok.setDelimiterChar(';');\n+        tok.setQuoteChar('\"');\n+        tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n+        tok.setIgnoreEmptyTokens(true);\n+        String tokens[] = tok.getTokenArray();\n+\n+        String expected[] = new String[]{\"a\", \"b\", \"c\", \"d;\\\"e\", \"f\",};\n+\n+        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n+        for (int i = 0; i < expected.length; i++) {\n+            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n+                    ObjectUtils.equals(expected[i], tokens[i]));\n+        }\n+\n+    }\n+\n+    public void test5() {\n+\n+        String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        tok.setDelimiterChar(';');\n+        tok.setQuoteChar('\"');\n+        tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n+        tok.setIgnoreEmptyTokens(false);\n+        tok.setEmptyTokenAsNull(true);\n+        String tokens[] = tok.getTokenArray();\n+\n+        String expected[] = new String[]{\"a\", \"b\", \"c\", \"d;\\\"e\", \"f\", null, null, null,};\n+\n+        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n+        for (int i = 0; i < expected.length; i++) {\n+            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n+                    ObjectUtils.equals(expected[i], tokens[i]));\n+        }\n+\n+    }\n+\n+    public void test6() {\n+\n+        String input = \"a;b; c;\\\"d;\\\"\\\"e\\\";f; ; ;\";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        tok.setDelimiterChar(';');\n+        tok.setQuoteChar('\"');\n+        tok.setIgnoredMatcher(StrMatcher.trimMatcher());\n+        tok.setIgnoreEmptyTokens(false);\n+        // tok.setTreatingEmptyAsNull(true);\n+        String tokens[] = tok.getTokenArray();\n+\n+        String expected[] = new String[]{\"a\", \"b\", \" c\", \"d;\\\"e\", \"f\", null, null, null,};\n+\n+        int nextCount = 0;\n+        while (tok.hasNext()) {\n+            tok.next();\n+            nextCount++;\n+        }\n+\n+        int prevCount = 0;\n+        while (tok.hasPrevious()) {\n+            tok.previous();\n+            prevCount++;\n+        }\n+\n+        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n+\n+        assertTrue(\"could not cycle through entire token list\" + \" using the 'hasNext' and 'next' methods\",\n+                nextCount == expected.length);\n+\n+        assertTrue(\"could not cycle through entire token list\" + \" using the 'hasPrevious' and 'previous' methods\",\n+                prevCount == expected.length);\n+\n+    }\n+\n+    public void test7() {\n+\n+        String input = \"a   b c \\\"d e\\\" f \";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        tok.setDelimiterMatcher(StrMatcher.spaceMatcher());\n+        tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());\n+        tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n+        tok.setIgnoreEmptyTokens(false);\n+        String tokens[] = tok.getTokenArray();\n+\n+        String expected[] = new String[]{\"a\", \"\", \"\", \"b\", \"c\", \"d e\", \"f\", \"\",};\n+\n+        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n+        for (int i = 0; i < expected.length; i++) {\n+            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n+                    ObjectUtils.equals(expected[i], tokens[i]));\n+        }\n+\n+    }\n+\n+    public void test8() {\n+\n+        String input = \"a   b c \\\"d e\\\" f \";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        tok.setDelimiterMatcher(StrMatcher.spaceMatcher());\n+        tok.setQuoteMatcher(StrMatcher.doubleQuoteMatcher());\n+        tok.setIgnoredMatcher(StrMatcher.noneMatcher());\n+        tok.setIgnoreEmptyTokens(true);\n+        String tokens[] = tok.getTokenArray();\n+\n+        String expected[] = new String[]{\"a\", \"b\", \"c\", \"d e\", \"f\",};\n+\n+        assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length);\n+        for (int i = 0; i < expected.length; i++) {\n+            assertTrue(\"token[\" + i + \"] was '\" + tokens[i] + \"' but was expected to be '\" + expected[i] + \"'\",\n+                    ObjectUtils.equals(expected[i], tokens[i]));\n+        }\n+\n+    }\n+\n+    public void testBasic1() {\n+        String input = \"a  b c\";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(\"c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasic2() {\n+        String input = \"a \\nb\\fc\";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(\"c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasic3() {\n+        String input = \"a \\nb\\u0001\\fc\";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\\u0001\", tok.next());\n+        assertEquals(\"c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasic4() {\n+        String input = \"a \\\"b\\\" c\";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"\\\"b\\\"\", tok.next());\n+        assertEquals(\"c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasic5() {\n+        String input = \"a:b':c\";\n+        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b'\", tok.next());\n+        assertEquals(\"c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicDelim1() {\n+        String input = \"a:b:c\";\n+        StrTokenizer tok = new StrTokenizer(input, ':');\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(\"c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicDelim2() {\n+        String input = \"a:b:c\";\n+        StrTokenizer tok = new StrTokenizer(input, ',');\n+        assertEquals(\"a:b:c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicEmpty1() {\n+        String input = \"a  b c\";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        tok.setIgnoreEmptyTokens(false);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(\"c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicEmpty2() {\n+        String input = \"a  b c\";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        tok.setIgnoreEmptyTokens(false);\n+        tok.setEmptyTokenAsNull(true);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(null, tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(\"c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicQuoted1() {\n+        String input = \"a 'b' c\";\n+        StrTokenizer tok = new StrTokenizer(input, ' ', '\\'');\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(\"c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicQuoted2() {\n+        String input = \"a:'b':\";\n+        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n+        tok.setIgnoreEmptyTokens(false);\n+        tok.setEmptyTokenAsNull(true);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(null, tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicQuoted3() {\n+        String input = \"a:'b''c'\";\n+        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n+        tok.setIgnoreEmptyTokens(false);\n+        tok.setEmptyTokenAsNull(true);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b'c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicQuoted4() {\n+        String input = \"a: 'b' 'c' :d\";\n+        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n+        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n+        tok.setIgnoreEmptyTokens(false);\n+        tok.setEmptyTokenAsNull(true);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b c\", tok.next());\n+        assertEquals(\"d\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicQuoted5() {\n+        String input = \"a: 'b'x'c' :d\";\n+        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n+        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n+        tok.setIgnoreEmptyTokens(false);\n+        tok.setEmptyTokenAsNull(true);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"bxc\", tok.next());\n+        assertEquals(\"d\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicQuoted6() {\n+        String input = \"a:'b'\\\"c':d\";\n+        StrTokenizer tok = new StrTokenizer(input, ':');\n+        tok.setQuoteMatcher(StrMatcher.quoteMatcher());\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\\\"c:d\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicQuoted7() {\n+        String input = \"a:\\\"There's a reason here\\\":b\";\n+        StrTokenizer tok = new StrTokenizer(input, ':');\n+        tok.setQuoteMatcher(StrMatcher.quoteMatcher());\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"There's a reason here\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicQuotedTrimmed1() {\n+        String input = \"a: 'b' :\";\n+        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n+        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n+        tok.setIgnoreEmptyTokens(false);\n+        tok.setEmptyTokenAsNull(true);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(null, tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicTrimmed1() {\n+        String input = \"a: b :  \";\n+        StrTokenizer tok = new StrTokenizer(input, ':');\n+        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n+        tok.setIgnoreEmptyTokens(false);\n+        tok.setEmptyTokenAsNull(true);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(null, tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicTrimmed2() {\n+        String input = \"a:  b  :\";\n+        StrTokenizer tok = new StrTokenizer(input, ':');\n+        tok.setTrimmerMatcher(StrMatcher.stringMatcher(\"  \"));\n+        tok.setIgnoreEmptyTokens(false);\n+        tok.setEmptyTokenAsNull(true);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(null, tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicIgnoreTrimmed1() {\n+        String input = \"a: bIGNOREc : \";\n+        StrTokenizer tok = new StrTokenizer(input, ':');\n+        tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\n+        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n+        tok.setIgnoreEmptyTokens(false);\n+        tok.setEmptyTokenAsNull(true);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"bc\", tok.next());\n+        assertEquals(null, tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicIgnoreTrimmed2() {\n+        String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\n+        StrTokenizer tok = new StrTokenizer(input, ':');\n+        tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\n+        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n+        tok.setIgnoreEmptyTokens(false);\n+        tok.setEmptyTokenAsNull(true);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"bc\", tok.next());\n+        assertEquals(null, tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicIgnoreTrimmed3() {\n+        String input = \"IGNOREaIGNORE: IGNORE bIGNOREc IGNORE : IGNORE \";\n+        StrTokenizer tok = new StrTokenizer(input, ':');\n+        tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\n+        tok.setIgnoreEmptyTokens(false);\n+        tok.setEmptyTokenAsNull(true);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"  bc  \", tok.next());\n+        assertEquals(\"  \", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    public void testBasicIgnoreTrimmed4() {\n+        String input = \"IGNOREaIGNORE: IGNORE 'bIGNOREc'IGNORE'd' IGNORE : IGNORE \";\n+        StrTokenizer tok = new StrTokenizer(input, ':', '\\'');\n+        tok.setIgnoredMatcher(StrMatcher.stringMatcher(\"IGNORE\"));\n+        tok.setTrimmerMatcher(StrMatcher.trimMatcher());\n+        tok.setIgnoreEmptyTokens(false);\n+        tok.setEmptyTokenAsNull(true);\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"bIGNOREcd\", tok.next());\n+        assertEquals(null, tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testListArray() {\n+        String input = \"a  b c\";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        String[] array = tok.getTokenArray();\n+        List<?> list = tok.getTokenList();\n+        \n+        assertEquals(Arrays.asList(array), list);\n+        assertEquals(3, list.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCSV(String data) {\n+        this.testXSVAbc(StrTokenizer.getCSVInstance(data));\n+        this.testXSVAbc(StrTokenizer.getCSVInstance(data.toCharArray()));\n+    }\n+\n+    public void testCSVEmpty() {\n+        this.testEmpty(StrTokenizer.getCSVInstance());\n+        this.testEmpty(StrTokenizer.getCSVInstance(\"\"));\n+    }\n+\n+    public void testCSVSimple() {\n+        this.testCSV(CSV_SIMPLE_FIXTURE);\n+    }\n+\n+    public void testCSVSimpleNeedsTrim() {\n+        this.testCSV(\"   \" + CSV_SIMPLE_FIXTURE);\n+        this.testCSV(\"   \\n\\t  \" + CSV_SIMPLE_FIXTURE);\n+        this.testCSV(\"   \\n  \" + CSV_SIMPLE_FIXTURE + \"\\n\\n\\r\");\n+    }\n+\n+    void testEmpty(StrTokenizer tokenizer) {\n+        this.checkClone(tokenizer);\n+        assertEquals(false, tokenizer.hasNext());\n+        assertEquals(false, tokenizer.hasPrevious());\n+        assertEquals(null, tokenizer.nextToken());\n+        assertEquals(0, tokenizer.size());\n+        try {\n+            tokenizer.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+    }\n+\n+    public void testGetContent() {\n+        String input = \"a   b c \\\"d e\\\" f \";\n+        StrTokenizer tok = new StrTokenizer(input);\n+        assertEquals(input, tok.getContent());\n+\n+        tok = new StrTokenizer(input.toCharArray());\n+        assertEquals(input, tok.getContent());\n+        \n+        tok = new StrTokenizer();\n+        assertEquals(null, tok.getContent());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testChaining() {\n+        StrTokenizer tok = new StrTokenizer();\n+        assertEquals(tok, tok.reset());\n+        assertEquals(tok, tok.reset(\"\"));\n+        assertEquals(tok, tok.reset(new char[0]));\n+        assertEquals(tok, tok.setDelimiterChar(' '));\n+        assertEquals(tok, tok.setDelimiterString(\" \"));\n+        assertEquals(tok, tok.setDelimiterMatcher(null));\n+        assertEquals(tok, tok.setQuoteChar(' '));\n+        assertEquals(tok, tok.setQuoteMatcher(null));\n+        assertEquals(tok, tok.setIgnoredChar(' '));\n+        assertEquals(tok, tok.setIgnoredMatcher(null));\n+        assertEquals(tok, tok.setTrimmerMatcher(null));\n+        assertEquals(tok, tok.setEmptyTokenAsNull(false));\n+        assertEquals(tok, tok.setIgnoreEmptyTokens(false));\n+    }\n+\n+    /**\n+     * Tests that the {@link StrTokenizer#clone()} clone method catches {@link CloneNotSupportedException} and returns\n+     * <code>null</code>.\n+     */\n+    public void testCloneNotSupportedException() {\n+        Object notCloned = (new StrTokenizer() {\n+            @Override\n+            Object cloneReset() throws CloneNotSupportedException {\n+                throw new CloneNotSupportedException(\"test\");\n+            }\n+        }).clone();\n+        assertNull(notCloned);\n+    }\n+\n+    public void testCloneNull() {\n+        StrTokenizer tokenizer = new StrTokenizer((char[]) null);\n+        // Start sanity check\n+        assertEquals(null, tokenizer.nextToken());\n+        tokenizer.reset();\n+        assertEquals(null, tokenizer.nextToken());\n+        // End sanity check\n+        StrTokenizer clonedTokenizer = (StrTokenizer) tokenizer.clone();\n+        tokenizer.reset();\n+        assertEquals(null, tokenizer.nextToken());\n+        assertEquals(null, clonedTokenizer.nextToken());\n+    }\n+\n+    public void testCloneReset() {\n+        char[] input = new char[]{'a'};\n+        StrTokenizer tokenizer = new StrTokenizer(input);\n+        // Start sanity check\n+        assertEquals(\"a\", tokenizer.nextToken());\n+        tokenizer.reset(input);\n+        assertEquals(\"a\", tokenizer.nextToken());\n+        // End sanity check\n+        StrTokenizer clonedTokenizer = (StrTokenizer) tokenizer.clone();\n+        input[0] = 'b';\n+        tokenizer.reset(input);\n+        assertEquals(\"b\", tokenizer.nextToken());\n+        assertEquals(\"a\", clonedTokenizer.nextToken());\n+    }\n+  \n+    // -----------------------------------------------------------------------\n+    public void testConstructor_String() {\n+        StrTokenizer tok = new StrTokenizer(\"a b\");\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer(\"\");\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer((String) null);\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_String_char() {\n+        StrTokenizer tok = new StrTokenizer(\"a b\", ' ');\n+        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer(\"\", ' ');\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer((String) null, ' ');\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_String_char_char() {\n+        StrTokenizer tok = new StrTokenizer(\"a b\", ' ', '\"');\n+        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n+        assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer(\"\", ' ', '\"');\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer((String) null, ' ', '\"');\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_charArray() {\n+        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer(new char[0]);\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer((char[]) null);\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_charArray_char() {\n+        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ');\n+        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer(new char[0], ' ');\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer((char[]) null, ' ');\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_charArray_char_char() {\n+        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ', '\"');\n+        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n+        assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer(new char[0], ' ', '\"');\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer((char[]) null, ' ', '\"');\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReset() {\n+        StrTokenizer tok = new StrTokenizer(\"a b c\");\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(\"c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok.reset();\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(\"c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReset_String() {\n+        StrTokenizer tok = new StrTokenizer(\"x x x\");\n+        tok.reset(\"d e\");\n+        assertEquals(\"d\", tok.next());\n+        assertEquals(\"e\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok.reset((String) null);\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReset_charArray() {\n+        StrTokenizer tok = new StrTokenizer(\"x x x\");\n+        \n+        char[] array = new char[] {'a', 'b', 'c'};\n+        tok.reset(array);\n+        assertEquals(\"abc\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok.reset((char[]) null);\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTSV() {\n+        this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE));\n+        this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray()));\n+    }\n+\n+    public void testTSVEmpty() {\n+        this.testEmpty(StrTokenizer.getCSVInstance());\n+        this.testEmpty(StrTokenizer.getCSVInstance(\"\"));\n+    }\n+\n+    void testXSVAbc(StrTokenizer tokenizer) {\n+        this.checkClone(tokenizer);\n+        assertEquals(-1, tokenizer.previousIndex());\n+        assertEquals(0, tokenizer.nextIndex());\n+        assertEquals(null, tokenizer.previousToken());\n+        assertEquals(\"A\", tokenizer.nextToken());\n+        assertEquals(1, tokenizer.nextIndex());\n+        assertEquals(\"b\", tokenizer.nextToken());\n+        assertEquals(2, tokenizer.nextIndex());\n+        assertEquals(\"c\", tokenizer.nextToken());\n+        assertEquals(3, tokenizer.nextIndex());\n+        assertEquals(null, tokenizer.nextToken());\n+        assertEquals(3, tokenizer.nextIndex());\n+        assertEquals(\"c\", tokenizer.previousToken());\n+        assertEquals(2, tokenizer.nextIndex());\n+        assertEquals(\"b\", tokenizer.previousToken());\n+        assertEquals(1, tokenizer.nextIndex());\n+        assertEquals(\"A\", tokenizer.previousToken());\n+        assertEquals(0, tokenizer.nextIndex());\n+        assertEquals(null, tokenizer.previousToken());\n+        assertEquals(0, tokenizer.nextIndex());\n+        assertEquals(-1, tokenizer.previousIndex());\n+        assertEquals(3, tokenizer.size());\n+    }\n+\n+    public void testIteration() {\n+        StrTokenizer tkn = new StrTokenizer(\"a b c\");\n+        assertEquals(false, tkn.hasPrevious());\n+        try {\n+            tkn.previous();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        assertEquals(true, tkn.hasNext());\n+        \n+        assertEquals(\"a\", tkn.next());\n+        try {\n+            tkn.remove();\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        try {\n+            tkn.set(\"x\");\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        try {\n+            tkn.add(\"y\");\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        assertEquals(true, tkn.hasPrevious());\n+        assertEquals(true, tkn.hasNext());\n+        \n+        assertEquals(\"b\", tkn.next());\n+        assertEquals(true, tkn.hasPrevious());\n+        assertEquals(true, tkn.hasNext());\n+        \n+        assertEquals(\"c\", tkn.next());\n+        assertEquals(true, tkn.hasPrevious());\n+        assertEquals(false, tkn.hasNext());\n+        \n+        try {\n+            tkn.next();\n+            fail();\n+        } catch (NoSuchElementException ex) {}\n+        assertEquals(true, tkn.hasPrevious());\n+        assertEquals(false, tkn.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTokenizeSubclassInputChange() {\n+        StrTokenizer tkn = new StrTokenizer(\"a b c d e\") {\n+            @Override\n+            protected List<String> tokenize(char[] chars, int offset, int count) {\n+                return super.tokenize(\"w x y z\".toCharArray(), 2, 5);\n+            }\n+        };\n+        assertEquals(\"x\", tkn.next());\n+        assertEquals(\"y\", tkn.next());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTokenizeSubclassOutputChange() {\n+        StrTokenizer tkn = new StrTokenizer(\"a b c\") {\n+            @Override\n+            protected List<String> tokenize(char[] chars, int offset, int count) {\n+                List<String> list = super.tokenize(chars, offset, count);\n+                Collections.reverse(list);\n+                return list;\n+            }\n+        };\n+        assertEquals(\"c\", tkn.next());\n+        assertEquals(\"b\", tkn.next());\n+        assertEquals(\"a\", tkn.next());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        StrTokenizer tkn = new StrTokenizer(\"a b c d e\");\n+        assertEquals(\"StrTokenizer[not tokenized yet]\", tkn.toString());\n+        tkn.next();\n+        assertEquals(\"StrTokenizer[a, b, c, d, e]\", tkn.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/EntityArraysTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.text.translate;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang3.text.translate.EntityArrays}.\n+ */\n+public class EntityArraysTest extends TestCase {\n+\n+    public void testConstructorExists() {\n+        new EntityArrays();\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/LookupTranslatorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.text.translate;\n+\n+import junit.framework.TestCase;\n+\n+import java.io.StringWriter;\n+import java.io.IOException;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang3.text.translate.LookupTranslator}.\n+ */\n+public class LookupTranslatorTest extends TestCase {\n+\n+    public void testBasicLookup() throws IOException {\n+        LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { \"one\", \"two\" } });\n+        StringWriter out = new StringWriter();\n+        int result = lt.translate(\"one\", 0, out);\n+        assertEquals(\"Incorrect codepoint consumption\", 3, result);\n+        assertEquals(\"Incorrect value\", \"two\", out.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityEscaperTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.text.translate;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang3.text.translate.NumericEntityEscaper}.\n+ */\n+public class NumericEntityEscaperTest extends TestCase {\n+\n+    public void testBelow() {\n+        NumericEntityEscaper nee = NumericEntityEscaper.below('F');\n+\n+        String input = \"ADFGZ\";\n+        String result = nee.translate(input);\n+        assertEquals(\"Failed to escape numeric entities via the below method\", \"&#65;&#68;FGZ\", result);\n+    }\n+\n+    public void testBetween() {\n+        NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L');\n+\n+        String input = \"ADFGZ\";\n+        String result = nee.translate(input);\n+        assertEquals(\"Failed to escape numeric entities via the between method\", \"AD&#70;&#71;Z\", result);\n+    }\n+\n+    public void testAbove() {\n+        NumericEntityEscaper nee = NumericEntityEscaper.above('F');\n+\n+        String input = \"ADFGZ\";\n+        String result = nee.translate(input);\n+        assertEquals(\"Failed to escape numeric entities via the above method\", \"ADF&#71;&#90;\", result);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/UnicodeEscaperTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.text.translate;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang3.text.translate.UnicodeEscaper}.\n+ */\n+public class UnicodeEscaperTest extends TestCase {\n+\n+    public void testBelow() {\n+        UnicodeEscaper nee = UnicodeEscaper.below('F');\n+\n+        String input = \"ADFGZ\";\n+        String result = nee.translate(input);\n+        assertEquals(\"Failed to escape unicode characters via the below method\", \"\\\\u0041\\\\u0044FGZ\", result);\n+    }\n+\n+    public void testBetween() {\n+        UnicodeEscaper nee = UnicodeEscaper.between('F', 'L');\n+\n+        String input = \"ADFGZ\";\n+        String result = nee.translate(input);\n+        assertEquals(\"Failed to escape unicode characters via the between method\", \"AD\\\\u0046\\\\u0047Z\", result);\n+    }\n+\n+    public void testAbove() {\n+        UnicodeEscaper nee = UnicodeEscaper.above('F');\n+\n+        String input = \"ADFGZ\";\n+        String result = nee.translate(input);\n+        assertEquals(\"Failed to escape unicode characters via the above method\", \"ADF\\\\u0047\\\\u005A\", result);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/UnicodeUnescaperTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.text.translate;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang3.text.translate.UnicodeEscaper}.\n+ */\n+public class UnicodeUnescaperTest extends TestCase {\n+\n+    // Requested in LANG-507\n+    public void testUPlus() {\n+        UnicodeUnescaper uu = new UnicodeUnescaper();\n+\n+        String input = \"\\\\u+0047\";\n+        try {\n+            uu.translate(input);\n+            fail(\"Default behaviour should not parse u+\");\n+        } catch(IllegalArgumentException iae) {\n+            // expected\n+        }\n+\n+        uu = new UnicodeUnescaper(UnicodeUnescaper.OPTION.escapePlus);\n+        assertEquals(\"Failed to unescape unicode characters with 'u+' notation\", \"G\", uu.translate(input));\n+    }\n+\n+    public void testUuuuu() {\n+        UnicodeUnescaper uu = new UnicodeUnescaper();\n+\n+        String input = \"\\\\uuuuuuuu0047\";\n+        String result = uu.translate(input);\n+        assertEquals(\"Failed to unescape unicode characters with many 'u' characters\", \"G\", result);\n+    }\n+\n+    public void testLessThanFour() {\n+        UnicodeUnescaper uu = new UnicodeUnescaper();\n+\n+        String input = \"\\\\0047\\\\u006\";\n+        try {\n+            uu.translate(input);\n+            fail(\"A lack of digits in a unicode escape sequence failed to throw an exception\");\n+        } catch(IllegalArgumentException iae) {\n+            // expected\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.time;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.Calendar;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * TestCase for DateFormatUtils.\n+ *\n+ * @author Apache Software Foundation\n+ * @author Apache Ant - DateUtilsTest\n+ * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n+ * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ */\n+public class DateFormatUtilsTest extends TestCase {\n+\n+    public DateFormatUtilsTest(String s) {\n+        super(s);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new DateFormatUtils());\n+        Constructor<?>[] cons = DateFormatUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(DateFormatUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(DateFormatUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testFormat() {\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+        c.set(2005,0,1,12,0,0);\n+        c.setTimeZone(TimeZone.getDefault());\n+        StringBuffer buffer = new StringBuffer ();\n+        int year = c.get(Calendar.YEAR);\n+        int month = c.get(Calendar.MONTH) + 1;\n+        int day = c.get(Calendar.DAY_OF_MONTH);\n+        int hour = c.get(Calendar.HOUR_OF_DAY);\n+        buffer.append (year);\n+        buffer.append(month);\n+        buffer.append(day);\n+        buffer.append(hour);\n+        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\"));\n+        \n+        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), \"yyyyMdH\"));\n+        \n+        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\", Locale.US));\n+        \n+        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), \"yyyyMdH\", Locale.US));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testFormatCalendar() {\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+        c.set(2005,0,1,12,0,0);\n+        c.setTimeZone(TimeZone.getDefault());\n+        StringBuffer buffer = new StringBuffer ();\n+        int year = c.get(Calendar.YEAR);\n+        int month = c.get(Calendar.MONTH) + 1;\n+        int day = c.get(Calendar.DAY_OF_MONTH);\n+        int hour = c.get(Calendar.HOUR_OF_DAY);\n+        buffer.append (year);\n+        buffer.append(month);\n+        buffer.append(day);\n+        buffer.append(hour);\n+        assertEquals(buffer.toString(), DateFormatUtils.format(c, \"yyyyMdH\"));\n+        \n+        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\"));\n+        \n+        assertEquals(buffer.toString(), DateFormatUtils.format(c, \"yyyyMdH\", Locale.US));\n+        \n+        assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), \"yyyyMdH\", Locale.US));\n+    }\n+    \n+    public void testFormatUTC() {\n+        Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n+        c.set(2005,0,1,12,0,0);\n+        assertEquals (\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));\n+        \n+        assertEquals (\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));\n+        \n+        assertEquals (\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));\n+        \n+        assertEquals (\"2005-01-01T12:00:00\", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));\n+    }\n+    \n+    public void testDateTimeISO(){\n+        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n+        Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2002,1,23,9,11,12);\n+        String text = DateFormatUtils.format(cal.getTime(), \n+                        DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"2002-02-23T09:11:12\", text);\n+        text = DateFormatUtils.format(cal.getTime().getTime(), \n+                      DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"2002-02-23T09:11:12\", text);\n+        text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal);\n+        assertEquals(\"2002-02-23T09:11:12\", text);\n+        \n+        text = DateFormatUtils.format(cal.getTime(), \n+                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n+        text = DateFormatUtils.format(cal.getTime().getTime(), \n+                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n+        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n+        assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n+    }\n+\n+    public void testDateISO(){\n+        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n+        Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2002,1,23,10,11,12);\n+        String text = DateFormatUtils.format(cal.getTime(), \n+                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"2002-02-23\", text);\n+        text = DateFormatUtils.format(cal.getTime().getTime(), \n+                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"2002-02-23\", text);\n+        text = DateFormatUtils.ISO_DATE_FORMAT.format(cal);\n+        assertEquals(\"2002-02-23\", text);\n+        \n+        text = DateFormatUtils.format(cal.getTime(), \n+                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"2002-02-23-03:00\", text);\n+        text = DateFormatUtils.format(cal.getTime().getTime(), \n+                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"2002-02-23-03:00\", text);\n+        text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal);\n+        assertEquals(\"2002-02-23-03:00\", text);\n+    }\n+\n+    public void testTimeISO(){\n+        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n+        Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2002,1,23,10,11,12);\n+        String text = DateFormatUtils.format(cal.getTime(), \n+                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"T10:11:12\", text);\n+        text = DateFormatUtils.format(cal.getTime().getTime(), \n+                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"T10:11:12\", text);\n+        text = DateFormatUtils.ISO_TIME_FORMAT.format(cal);\n+        assertEquals(\"T10:11:12\", text);\n+        \n+        text = DateFormatUtils.format(cal.getTime(), \n+                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"T10:11:12-03:00\", text);\n+        text = DateFormatUtils.format(cal.getTime().getTime(), \n+                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"T10:11:12-03:00\", text);\n+        text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal);\n+        assertEquals(\"T10:11:12-03:00\", text);\n+    }\n+\n+    public void testTimeNoTISO(){\n+        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n+        Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2002,1,23,10,11,12);\n+        String text = DateFormatUtils.format(cal.getTime(), \n+                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"10:11:12\", text);\n+        text = DateFormatUtils.format(cal.getTime().getTime(), \n+                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"10:11:12\", text);\n+        text = DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(cal);\n+        assertEquals(\"10:11:12\", text);\n+        \n+        text = DateFormatUtils.format(cal.getTime(), \n+                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"10:11:12-03:00\", text);\n+        text = DateFormatUtils.format(cal.getTime().getTime(), \n+                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);\n+        assertEquals(\"10:11:12-03:00\", text);\n+        text = DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.format(cal);\n+        assertEquals(\"10:11:12-03:00\", text);\n+    }\n+\n+    public void testSMTP(){\n+        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n+        Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2003,5,8,10,11,12);\n+        String text = DateFormatUtils.format(cal.getTime(), \n+                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n+                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n+        assertEquals(\"Sun, 08 Jun 2003 10:11:12 -0300\", text);\n+        text = DateFormatUtils.format(cal.getTime().getTime(), \n+                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,\n+                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n+        assertEquals(\"Sun, 08 Jun 2003 10:11:12 -0300\", text);\n+        text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal);\n+        assertEquals(\"Sun, 08 Jun 2003 10:11:12 -0300\", text);\n+        \n+        // format UTC\n+        text = DateFormatUtils.formatUTC(cal.getTime().getTime(), \n+                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),\n+                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());\n+        assertEquals(\"Sun, 08 Jun 2003 13:11:12 +0000\", text);\n+    }\n+\n+    /*\n+    public void testLang312() {\n+        String pattern = \"dd/MM/yyyy\";\n+        String expected = \"19/04/1948\";\n+        TimeZone timeZone = TimeZone.getTimeZone(\"CET\");\n+        Locale locale = Locale.GERMANY;\n+\n+        // show Calendar is good\n+        Calendar cal = Calendar.getInstance(timeZone, locale);\n+        cal.set(1948, 3, 19);\n+        assertEquals(expected, DateFormatUtils.format( cal.getTime(), pattern, timeZone, locale ) );\n+\n+        Date date = new Date(48, 3, 19);\n+\n+        // test JDK\n+        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(pattern, locale);\n+        sdf.setTimeZone(timeZone);\n+// There's nothing we can do if the JDK fails, so just going to pring a warning in this case\n+//        assertEquals(expected, sdf.format( date ) );\n+        if( ! expected.equals( sdf.format( date ) ) ) {\n+            System.out.println(\"WARNING: JDK test failed - testLang312()\");\n+        }\n+\n+        // test Commons\n+        assertEquals(expected, DateFormatUtils.format( date, pattern, timeZone, locale ) );\n+    }\n+    */\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsFragmentTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.time;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+\n+import junit.framework.TestCase;\n+\n+public class DateUtilsFragmentTest extends TestCase {\n+\n+    private static final int months = 7;   // second final prime before 12\n+    private static final int days = 23;    // second final prime before 31 (and valid)\n+    private static final int hours = 19;   // second final prime before 24\n+    private static final int minutes = 53; // second final prime before 60\n+    private static final int seconds = 47; // third final prime before 60\n+    private static final int millis = 991; // second final prime before 1000\n+\n+    private Date aDate;\n+    private Calendar aCalendar;\n+\n+    @Override\n+    protected void setUp() {\n+        aCalendar = Calendar.getInstance();\n+        aCalendar.set(2005, months, days, hours, minutes, seconds);\n+        aCalendar.set(Calendar.MILLISECOND, millis);\n+        aDate = aCalendar.getTime();\n+    }\n+    \n+    public void testNullDate() {\n+        try {\n+            DateUtils.getFragmentInMilliseconds((Date) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInSeconds((Date) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInMinutes((Date) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInHours((Date) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInDays((Date) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+    }\n+\n+    public void testNullCalendar() {\n+        try {\n+            DateUtils.getFragmentInMilliseconds((Calendar) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInSeconds((Calendar) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInMinutes((Calendar) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInHours((Calendar) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInDays((Calendar) null, Calendar.MILLISECOND);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+    }\n+    \n+    public void testInvalidFragmentWithDate() {\n+        try {\n+            DateUtils.getFragmentInMilliseconds(aDate, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInSeconds(aDate, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInMinutes(aDate, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInHours(aDate, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInDays(aDate, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+    }\n+\n+    public void testInvalidFragmentWithCalendar() {\n+        try {\n+            DateUtils.getFragmentInMilliseconds(aCalendar, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInSeconds(aCalendar, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInMinutes(aCalendar, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInHours(aCalendar, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+\n+        try {\n+            DateUtils.getFragmentInDays(aCalendar, 0);\n+            fail();\n+        } catch(IllegalArgumentException iae) {}\n+    }\n+\n+    public void testMillisecondFragmentInLargerUnitWithDate() {\n+        assertEquals(0, DateUtils.getFragmentInMilliseconds(aDate, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MILLISECOND));\n+    }\n+\n+    public void testMillisecondFragmentInLargerUnitWithCalendar() {\n+        assertEquals(0, DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MILLISECOND));\n+        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MILLISECOND));\n+    }\n+    \n+    public void testSecondFragmentInLargerUnitWithDate() {\n+        assertEquals(0, DateUtils.getFragmentInSeconds(aDate, Calendar.SECOND));\n+        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.SECOND));\n+        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.SECOND));\n+        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.SECOND));\n+    }\n+\n+    public void testSecondFragmentInLargerUnitWithCalendar() {\n+        assertEquals(0, DateUtils.getFragmentInSeconds(aCalendar, Calendar.SECOND));\n+        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.SECOND));\n+        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.SECOND));\n+        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.SECOND));\n+    }\n+    \n+    public void testMinuteFragmentInLargerUnitWithDate() {\n+        assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE));\n+        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE));\n+        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE));\n+    }\n+\n+    public void testMinuteFragmentInLargerUnitWithCalendar() {\n+        assertEquals(0, DateUtils.getFragmentInMinutes(aCalendar, Calendar.MINUTE));\n+        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.MINUTE));\n+        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.MINUTE));\n+    }\n+\n+    public void testHourOfDayFragmentInLargerUnitWithDate() {\n+        assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.HOUR_OF_DAY));\n+        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.HOUR_OF_DAY));\n+    }\n+\n+    public void testHourOfDayFragmentInLargerUnitWithCalendar() {\n+        assertEquals(0, DateUtils.getFragmentInHours(aCalendar, Calendar.HOUR_OF_DAY));\n+        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.HOUR_OF_DAY));\n+    }\n+\n+    public void testDayOfYearFragmentInLargerUnitWithDate() {\n+        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DAY_OF_YEAR));\n+    }\n+\n+    public void testDayOfYearFragmentInLargerUnitWithCalendar() {\n+        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DAY_OF_YEAR));\n+    }\n+\n+    public void testDateFragmentInLargerUnitWithDate() {\n+        assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.DATE));\n+    }\n+\n+    public void testDateFragmentInLargerUnitWithCalendar() {\n+        assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE));\n+    }\n+\n+    //Calendar.SECOND as useful fragment\n+    \n+    public void testMillisecondsOfSecondWithDate() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND);\n+        assertEquals(millis, testResult);\n+    }\n+\n+    public void testMillisecondsOfSecondWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.SECOND);\n+        assertEquals(millis, testResult);\n+        assertEquals(aCalendar.get(Calendar.MILLISECOND), testResult);\n+    }\n+\n+    //Calendar.MINUTE as useful fragment\n+\n+    public void testMillisecondsOfMinuteWithDate() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MINUTE);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n+    }\n+\n+    public void testMillisecondsOfMinuteWithCalender() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MINUTE);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND), testResult);\n+    }\n+\n+    public void testSecondsofMinuteWithDate() {\n+        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MINUTE);\n+        assertEquals(seconds, testResult);\n+    }\n+\n+    public void testSecondsofMinuteWithCalendar() {\n+        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MINUTE);\n+        assertEquals(seconds, testResult);\n+        assertEquals(aCalendar.get(Calendar.SECOND), testResult);\n+    }\n+\n+    //Calendar.HOUR_OF_DAY as useful fragment\n+    \n+    public void testMillisecondsOfHourWithDate() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.HOUR_OF_DAY);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n+    }\n+    \n+    public void testMillisecondsOfHourWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.HOUR_OF_DAY);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE), testResult);\n+    }\n+\n+    public void testSecondsofHourWithDate() {\n+        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.HOUR_OF_DAY);\n+        assertEquals(\n+                seconds\n+                        + (minutes\n+                                * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),\n+                testResult);\n+    }\n+\n+    public void testSecondsofHourWithCalendar() {\n+        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY);\n+        assertEquals(\n+                seconds\n+                        + (minutes\n+                                * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND),\n+                testResult);\n+    }\n+\n+    public void testMinutesOfHourWithDate() {\n+        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.HOUR_OF_DAY);\n+        assertEquals(minutes, testResult);\n+    }\n+\n+    public void testMinutesOfHourWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY);\n+        assertEquals(minutes, testResult);\n+    }\n+\n+    //Calendar.DATE and Calendar.DAY_OF_YEAR as useful fragment\n+    public void testMillisecondsOfDayWithDate() {\n+        long testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DATE);\n+        long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); \n+        assertEquals(expectedValue, testresult);\n+        testresult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue, testresult);\n+    }\n+    \n+    public void testMillisecondsOfDayWithCalendar() {\n+        long testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DATE);\n+        long expectedValue = millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR); \n+        assertEquals(expectedValue, testresult);\n+        testresult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue, testresult);\n+    }\n+\n+    public void testSecondsOfDayWithDate() {\n+        long testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DATE);\n+        long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n+        assertEquals(expectedValue, testresult);\n+        testresult = DateUtils.getFragmentInSeconds(aDate, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue, testresult);\n+    }\n+\n+    public void testSecondsOfDayWithCalendar() {\n+        long testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DATE);\n+        long expectedValue = seconds + ((minutes * DateUtils.MILLIS_PER_MINUTE) + (hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_SECOND;\n+        assertEquals(expectedValue, testresult);\n+        testresult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue, testresult);\n+    }\n+\n+    public void testMinutesOfDayWithDate() {\n+        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DATE);\n+        long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE; \n+        assertEquals(expectedValue,testResult);\n+        testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue,testResult);\n+    }\n+\n+    public void testMinutesOfDayWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE);\n+        long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE; \n+        assertEquals(expectedValue, testResult);\n+        testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue, testResult);\n+    }\n+    \n+    public void testHoursOfDayWithDate() {\n+        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.DATE);\n+        long expectedValue = hours; \n+        assertEquals(expectedValue,testResult);\n+        testResult = DateUtils.getFragmentInHours(aDate, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue,testResult);\n+    }\n+\n+    public void testHoursOfDayWithCalendar() {\n+        long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DATE);\n+        long expectedValue = hours; \n+        assertEquals(expectedValue, testResult);\n+        testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.DAY_OF_YEAR);\n+        assertEquals(expectedValue, testResult);\n+    }\n+    \n+    \n+    //Calendar.MONTH as useful fragment\n+    public void testMillisecondsOfMonthWithDate() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.MONTH);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n+                                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),\n+                testResult);\n+    }\n+\n+    public void testMillisecondsOfMonthWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.MONTH);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n+                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY),\n+testResult);\n+    }\n+    \n+    public void testSecondsOfMonthWithDate() {\n+        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.MONTH);\n+        assertEquals(\n+                seconds\n+                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n+                                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_SECOND,\n+                testResult);\n+    }\n+\n+    public void testSecondsOfMonthWithCalendar() {\n+        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.MONTH);\n+        assertEquals(\n+                seconds\n+                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n+                                + (hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_SECOND,\n+                testResult);\n+    }\n+\n+    public void testMinutesOfMonthWithDate() {\n+        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.MONTH);\n+        assertEquals(minutes\n+                                + ((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_MINUTE,\n+                testResult);\n+    }\n+\n+    public void testMinutesOfMonthWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH);\n+        assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_MINUTE,\n+                testResult);\n+    }\n+\n+    public void testHoursOfMonthWithDate() {\n+        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.MONTH);\n+        assertEquals(hours + ((days * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_HOUR,\n+                testResult);\n+    }\n+\n+    public void testHoursOfMonthWithCalendar() {\n+        long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.MONTH);\n+        assertEquals( hours +((days * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_HOUR,\n+                testResult);\n+    }\n+    \n+    //Calendar.YEAR as useful fragment\n+    public void testMillisecondsOfYearWithDate() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.YEAR);\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n+                                + (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),\n+                testResult);\n+    }\n+\n+    public void testMillisecondsOfYearWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMilliseconds(aCalendar, Calendar.YEAR);\n+        assertEquals(millis + (seconds * DateUtils.MILLIS_PER_SECOND) + (minutes * DateUtils.MILLIS_PER_MINUTE)\n+                + (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY),\n+testResult);\n+    }\n+    \n+    public void testSecondsOfYearWithDate() {\n+        long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR);\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(\n+                seconds\n+                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n+                                + (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_SECOND,\n+                testResult);\n+    }\n+\n+    public void testSecondsOfYearWithCalendar() {\n+        long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.YEAR);\n+        assertEquals(\n+                seconds\n+                        + ((minutes * DateUtils.MILLIS_PER_MINUTE)\n+                                + (hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_SECOND,\n+                testResult);\n+    }\n+\n+    public void testMinutesOfYearWithDate() {\n+        long testResult = DateUtils.getFragmentInMinutes(aDate, Calendar.YEAR);\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(minutes\n+                                + ((hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_MINUTE,\n+                testResult);\n+    }\n+\n+    public void testMinutesOfYearWithCalendar() {\n+        long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.YEAR);\n+        assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_MINUTE,\n+                testResult);\n+    }\n+\n+    public void testHoursOfYearWithDate() {\n+        long testResult = DateUtils.getFragmentInHours(aDate, Calendar.YEAR);\n+        Calendar cal = Calendar.getInstance();\n+        cal.setTime(aDate);\n+        assertEquals(hours + ((cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_HOUR,\n+                testResult);\n+    }\n+\n+    public void testHoursOfYearWithCalendar() {\n+        long testResult = DateUtils.getFragmentInHours(aCalendar, Calendar.YEAR);\n+        assertEquals( hours +((aCalendar.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY))\n+                        / DateUtils.MILLIS_PER_HOUR,\n+                testResult);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsRoundingTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.time;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * These Unit-tests will check all possible extremes when using some rounding-methods of DateUtils.\n+ * The extremes are tested at the switch-point in milliseconds\n+ * \n+ * According to the implementation SEMI_MONTH will either round/truncate to the 1st or 16th\n+ * When rounding Calendar.MONTH it depends on the number of days within that month.\n+ * A month with 28 days will be rounded up from the 15th\n+ * A month with 29 or 30 days will be rounded up from the 16th\n+ * A month with 31 days will be rounded up from the 17th\n+ * \n+ * @author Robert Scholte\n+ * @since 3.0\n+ *\n+ */\n+// TODO: Add DateUtils.ceil()-tests if method is available\n+public class DateUtilsRoundingTest extends TestCase {\n+\n+    DateFormat dateTimeParser;\n+    \n+    Date januaryOneDate;\n+    Date targetYearDate;\n+    //No targetMonths, these must be tested for every type of month(28-31 days)\n+    Date targetDateDate, targetDayOfMonthDate, targetAmDate, targetPmDate;\n+    Date targetHourOfDayDate, targetHourDate;\n+    Date targetMinuteDate;\n+    Date targetSecondDate;\n+    Date targetMilliSecondDate;\n+\n+    Calendar januaryOneCalendar;\n+    FastDateFormat fdf = DateFormatUtils.ISO_DATETIME_FORMAT;\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        dateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);\n+        \n+        targetYearDate = dateTimeParser.parse(\"January 1, 2007 0:00:00.000\");\n+        targetDateDate = targetDayOfMonthDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n+        targetAmDate =  dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n+        targetPmDate = dateTimeParser.parse(\"June 1, 2008 12:00:00.000\");\n+        targetHourDate = dateTimeParser.parse(\"June 1, 2008 8:00:00.000\");\n+        targetHourOfDayDate = dateTimeParser.parse(\"June 1, 2008 8:00:00.000\");\n+        targetMinuteDate =  dateTimeParser.parse(\"June 1, 2008 8:15:00.000\");\n+        targetSecondDate =  dateTimeParser.parse(\"June 1, 2008 8:15:14.000\");\n+        targetMilliSecondDate =  dateTimeParser.parse(\"June 1, 2008 8:15:14.231\");\n+        \n+        januaryOneDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.000\");\n+        januaryOneCalendar = Calendar.getInstance();\n+        januaryOneCalendar.setTime(januaryOneDate);\n+    }\n+\n+    /**\n+     * Tests DateUtils.round()-method with Calendar.Year\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundYear() throws Exception {\n+        final int calendarField = Calendar.YEAR;\n+        Date roundedUpDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.000\");\n+        Date roundedDownDate = targetYearDate;\n+        Date lastRoundedDownDate = dateTimeParser.parse(\"June 30, 2007 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.MONTH\n+     * Includes rounding months with 28, 29, 30 and 31 days\n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundMonth() throws Exception {\n+        final int calendarField = Calendar.MONTH;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+        \n+        //month with 28 days\n+        roundedUpDate = dateTimeParser.parse(\"March 1, 2007 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"February 14, 2007 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //month with 29 days\n+        roundedUpDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"February 15, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //month with 30 days\n+        roundedUpDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"April 15, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //month with 31 days\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"May 16, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 17, 2007 00:00:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 16, 2008 23:59:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with DateUtils.SEMI_MONTH\n+     * Includes rounding months with 28, 29, 30 and 31 days, each with first and second half \n+     * Includes rounding to January 1\n+     *      \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundSemiMonth() throws Exception {\n+        final int calendarField = DateUtils.SEMI_MONTH;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+        \n+        //month with 28 days (1)\n+        roundedUpDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"February 8, 2007 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //month with 28 days (2)\n+        roundedUpDate = dateTimeParser.parse(\"March 1, 2007 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"February 23, 2007 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //month with 29 days (1)\n+        roundedUpDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"February 8, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //month with 29 days (2)\n+        roundedUpDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"February 23, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //month with 30 days (1)\n+        roundedUpDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"April 8, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //month with 30 days (2)\n+        roundedUpDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"April 23, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //month with 31 days (1)\n+        roundedUpDate = dateTimeParser.parse(\"May 16, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"May 8, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //month with 31 days (2)\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n+        roundedDownDate = dateTimeParser.parse(\"May 16, 2008 0:00:00.000\");\n+        lastRoundedDownDate = dateTimeParser.parse(\"May 23, 2008 23:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 24, 2007 00:00:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 8, 2008 23:59:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.DATE\n+     * Includes rounding the extremes of one day \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundDate() throws Exception {\n+        final int calendarField = Calendar.DATE;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n+        roundedDownDate = targetDateDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 12:00:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 11:59:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.DAY_OF_MONTH\n+     * Includes rounding the extremes of one day \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundDayOfMonth() throws Exception {\n+        final int calendarField = Calendar.DAY_OF_MONTH;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n+        roundedDownDate = targetDayOfMonthDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 12:00:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 11:59:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.AM_PM\n+     * Includes rounding the extremes of both AM and PM of one day \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundAmPm() throws Exception {\n+        final int calendarField = Calendar.AM_PM;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        //AM\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 12:00:00.000\");\n+        roundedDownDate = targetAmDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 5:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //PM\n+        roundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n+        roundedDownDate = targetPmDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 17:59:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 18:00:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 5:59:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.HOUR_OF_DAY\n+     * Includes rounding the extremes of one hour \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundHourOfDay() throws Exception {\n+        final int calendarField = Calendar.HOUR_OF_DAY;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 9:00:00.000\");\n+        roundedDownDate = targetHourOfDayDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:29:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 23:30:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 0:29:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.HOUR\n+     * Includes rounding the extremes of one hour \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundHour() throws Exception {\n+        final int calendarField = Calendar.HOUR;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 9:00:00.000\");\n+        roundedDownDate = targetHourDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:29:59.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 23:30:00.000\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 0:29:59.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.MINUTE\n+     * Includes rounding the extremes of one minute \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundMinute() throws Exception {\n+        final int calendarField = Calendar.MINUTE;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:16:00.000\");\n+        roundedDownDate = targetMinuteDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:15:29.999\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 23:59:30.000\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 0:00:29.999\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.SECOND\n+     * Includes rounding the extremes of one second \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundSecond() throws Exception {\n+        final int calendarField = Calendar.SECOND;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:15:15.000\");\n+        roundedDownDate = targetSecondDate;\n+        lastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.499\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = dateTimeParser.parse(\"December 31, 2007 23:59:59.500\");\n+        maxDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.499\");\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Tests DateUtils.round()-method with Calendar.MILLISECOND\n+     * Includes rounding the extremes of one second \n+     * Includes rounding to January 1\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testRoundMilliSecond() throws Exception {\n+        final int calendarField = Calendar.MILLISECOND;\n+        Date roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+        Date minDate, maxDate;\n+\n+        roundedDownDate = lastRoundedDownDate = targetMilliSecondDate;\n+        roundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.232\");\n+        baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+        \n+        //round to January 1\n+        minDate = maxDate = januaryOneDate;\n+        roundToJanuaryFirst(minDate, maxDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.YEAR\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateYear() throws Exception {\n+        final int calendarField = Calendar.YEAR;\n+        Date lastTruncateDate = dateTimeParser.parse(\"December 31, 2007 23:59:59.999\");\n+        baseTruncateTest(targetYearDate, lastTruncateDate, calendarField);\n+    }\n+\n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.MONTH\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateMonth() throws Exception {\n+        final int calendarField = Calendar.MONTH;\n+        Date truncatedDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n+        Date lastTruncateDate = dateTimeParser.parse(\"March 31, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+    }\n+\n+    /**\n+     * Test DateUtils.truncate()-method with DateUtils.SEMI_MONTH\n+     * Includes truncating months with 28, 29, 30 and 31 days, each with first and second half\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateSemiMonth() throws Exception {\n+        final int calendarField = DateUtils.SEMI_MONTH;\n+        Date truncatedDate, lastTruncateDate;\n+        \n+        //month with 28 days (1)\n+        truncatedDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"February 15, 2007 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+        //month with 28 days (2)\n+        truncatedDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"February 28, 2007 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+        //month with 29 days (1)\n+        truncatedDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"February 15, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+        //month with 29 days (2)\n+        truncatedDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"February 29, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+        //month with 30 days (1)\n+        truncatedDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"April 15, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+        //month with 30 days (2)\n+        truncatedDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"April 30, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+        \n+        //month with 31 days (1)\n+        truncatedDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"March 15, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+        //month with 31 days (2)\n+        truncatedDate = dateTimeParser.parse(\"March 16, 2008 0:00:00.000\");\n+        lastTruncateDate = dateTimeParser.parse(\"March 31, 2008 23:59:59.999\");\n+        baseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+    }\n+\n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.DATE\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateDate() throws Exception {\n+        final int calendarField = Calendar.DATE;\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n+        baseTruncateTest(targetDateDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateDayOfMonth() throws Exception {\n+        final int calendarField = Calendar.DAY_OF_MONTH;\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n+        baseTruncateTest(targetDayOfMonthDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.AM_PM\n+     * Includes truncating the extremes of both AM and PM of one day \n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateAmPm() throws Exception {\n+        final int calendarField = Calendar.AM_PM;\n+        \n+        //AM\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n+        baseTruncateTest(targetAmDate, lastTruncateDate, calendarField);\n+\n+        //PM\n+        lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n+        baseTruncateTest(targetPmDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.HOUR\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateHour() throws Exception {\n+        final int calendarField = Calendar.HOUR;\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\n+        baseTruncateTest(targetHourDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.HOUR_OF_DAY\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateHourOfDay() throws Exception {\n+        final int calendarField = Calendar.HOUR_OF_DAY;\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\n+        baseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.MINUTE\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateMinute() throws Exception {\n+        final int calendarField = Calendar.MINUTE;\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:59.999\");\n+        baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.SECOND\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateSecond() throws Exception {\n+        final int calendarField = Calendar.SECOND;\n+        Date lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.999\");\n+        baseTruncateTest(targetSecondDate, lastTruncateDate, calendarField);\n+    }\n+    \n+    /**\n+     * Test DateUtils.truncate()-method with Calendar.SECOND\n+     * \n+     * @throws Exception\n+     * @since 3.0\n+     */\n+    public void testTruncateMilliSecond() throws Exception {\n+        final int calendarField = Calendar.MILLISECOND;\n+        baseTruncateTest(targetMilliSecondDate, targetMilliSecondDate, calendarField);\n+    }\n+        \n+    /**\n+     * When using this basetest all extremes are tested.<br> \n+     * It will test the Date, Calendar and Object-implementation<br>\n+     * lastRoundDownDate should round down to roundedDownDate<br>\n+     * lastRoundDownDate + 1 millisecond should round up to roundedUpDate\n+     * \n+     * @param roundedUpDate the next rounded date after <strong>roundedDownDate</strong> when using <strong>calendarField</strong>\n+     * @param roundedDownDate the result if <strong>lastRoundDownDate</strong> was rounded with <strong>calendarField</strong>\n+     * @param lastRoundDownDate rounding this value with <strong>calendarField</strong> will result in <strong>roundedDownDate</strong>\n+     * @param calendarField\n+     * @since 3.0\n+     */\n+    protected void baseRoundTest(final Date roundedUpDate, final Date roundedDownDate, final Date lastRoundDownDate, final int calendarField) {\n+        Date firstRoundUpDate = DateUtils.addMilliseconds(lastRoundDownDate, 1);\n+        \n+        //Date-comparison\n+        assertEquals(roundedDownDate, DateUtils.round(roundedDownDate, calendarField));\n+        assertEquals(roundedUpDate, DateUtils.round(roundedUpDate, calendarField));\n+        assertEquals(roundedDownDate, DateUtils.round(lastRoundDownDate, calendarField));\n+        assertEquals(roundedUpDate, DateUtils.round(firstRoundUpDate, calendarField));\n+        \n+        //Calendar-initiations\n+        Calendar roundedUpCalendar, roundedDownCalendar, lastRoundDownCalendar, firstRoundUpCalendar; \n+        roundedDownCalendar = Calendar.getInstance();\n+        roundedUpCalendar = Calendar.getInstance();\n+        lastRoundDownCalendar = Calendar.getInstance();\n+        firstRoundUpCalendar = Calendar.getInstance();\n+        roundedDownCalendar.setTime(roundedDownDate);\n+        roundedUpCalendar.setTime(roundedUpDate);\n+        lastRoundDownCalendar.setTime(lastRoundDownDate);\n+        firstRoundUpCalendar.setTime(firstRoundUpDate);\n+\n+        //Calendar-comparison\n+        assertEquals(roundedDownCalendar, DateUtils.round(roundedDownCalendar, calendarField));\n+        assertEquals(roundedUpCalendar, DateUtils.round(roundedUpCalendar, calendarField));\n+        assertEquals(roundedDownCalendar, DateUtils.round(lastRoundDownCalendar, calendarField));\n+        assertEquals(roundedUpCalendar, DateUtils.round(firstRoundUpCalendar, calendarField));\n+\n+        //Object-comparison\n+        assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownDate, calendarField));\n+        assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpDate, calendarField));\n+        assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));\n+        assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));\n+        assertEquals(roundedDownDate, DateUtils.round((Object) roundedDownCalendar, calendarField));\n+        assertEquals(roundedUpDate, DateUtils.round((Object) roundedUpCalendar, calendarField));\n+        assertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));\n+        assertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));\n+    }\n+    \n+    /**\n+     * When using this basetest all extremes are tested.<br> \n+     * It will test the Date, Calendar and Object-implementation<br>\n+     * lastTruncateDate should round down to truncatedDate<br>\n+     * lastTruncateDate + 1 millisecond should never round down to truncatedDate\n+     * \n+     * @param truncatedDate expected Date when <strong>lastTruncateDate</strong> is truncated with <strong>calendarField</strong>\n+     * @param lastTruncateDate the last possible Date which will truncate to <strong>truncatedDate</strong> with <strong>calendarField</strong>\n+     * @param calendarField a Calendar.field value\n+     * @since 3.0\n+     */\n+    protected void baseTruncateTest(final Date truncatedDate, final Date lastTruncateDate, final int calendarField) {\n+        Date nextTruncateDate = DateUtils.addMilliseconds(lastTruncateDate, 1);\n+        \n+        //Date-comparison\n+        assertEquals(\"Truncating \"+ fdf.format(truncatedDate) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", truncatedDate, DateUtils.truncate(truncatedDate, calendarField));\n+        assertEquals(truncatedDate, DateUtils.truncate(lastTruncateDate, calendarField));\n+        assertFalse(fdf.format(lastTruncateDate) +\" is not an extreme when truncating as Date with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate(nextTruncateDate, calendarField)));\n+        \n+        //Calendar-initiations\n+        Calendar truncatedCalendar, lastTruncateCalendar, nextTruncateCalendar; \n+        truncatedCalendar = Calendar.getInstance();\n+        lastTruncateCalendar = Calendar.getInstance();\n+        nextTruncateCalendar = Calendar.getInstance();\n+        truncatedCalendar.setTime(truncatedDate);\n+        lastTruncateCalendar.setTime(lastTruncateDate);\n+        nextTruncateCalendar.setTime(nextTruncateDate);\n+\n+        //Calendar-comparison\n+        assertEquals(\"Truncating \"+ fdf.format(truncatedCalendar) +\" as Calendar with CalendarField-value \"+ calendarField +\" must return itself\", truncatedCalendar, DateUtils.truncate(truncatedCalendar, calendarField));\n+        assertEquals(truncatedCalendar, DateUtils.truncate(lastTruncateCalendar, calendarField));\n+        assertFalse(fdf.format(lastTruncateCalendar) +\" is not an extreme when truncating as Calendar with CalendarField-value \"+ calendarField, truncatedCalendar.equals(DateUtils.truncate(nextTruncateCalendar, calendarField)));\n+\n+        //Object-comparison\n+        assertEquals(\"Truncating \"+ fdf.format(truncatedDate) +\" as Date cast to Object with CalendarField-value \"+ calendarField +\" must return itself as Date\", truncatedDate, DateUtils.truncate((Object) truncatedDate, calendarField));\n+        assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateDate, calendarField));\n+        assertFalse(fdf.format(lastTruncateDate) +\" is not an extreme when truncating as Date cast to Object with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateDate, calendarField)));\n+        assertEquals(\"Truncating \"+ fdf.format(truncatedCalendar) +\" as Calendar cast to Object with CalendarField-value \"+ calendarField +\" must return itself as Date\", truncatedDate, DateUtils.truncate((Object) truncatedCalendar, calendarField));\n+        assertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateCalendar, calendarField));\n+        assertFalse(fdf.format(lastTruncateCalendar) +\" is not an extreme when truncating as Calendar cast to Object with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateCalendar, calendarField)));\n+    }\n+    \n+    /**\n+     * \n+     * Any January 1 could be considered as the ultimate extreme.\n+     * Instead of comparing the results if the input has a difference of 1 millisecond we check the output to be exactly January first. \n+     * \n+     * @param minDate\n+     * @param maxDate\n+     * @param calendarField\n+     * @since 3.0\n+     */\n+    protected void roundToJanuaryFirst(Date minDate, Date maxDate, int calendarField) {\n+        assertEquals(\"Rounding \"+ fdf.format(januaryOneDate) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", januaryOneDate, DateUtils.round(januaryOneDate, calendarField));\n+        assertEquals(januaryOneDate, DateUtils.round(minDate, calendarField));\n+        assertEquals(januaryOneDate, DateUtils.round(maxDate, calendarField));\n+        \n+        Calendar minCalendar = Calendar.getInstance();\n+        minCalendar.setTime(minDate);\n+        Calendar maxCalendar = Calendar.getInstance();\n+        maxCalendar.setTime(maxDate);\n+        assertEquals(\"Rounding \"+ fdf.format(januaryOneCalendar) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", januaryOneCalendar, DateUtils.round(januaryOneCalendar, calendarField));\n+        assertEquals(januaryOneCalendar, DateUtils.round(minCalendar, calendarField));\n+        assertEquals(januaryOneCalendar, DateUtils.round(maxCalendar, calendarField));\n+\n+        Date toPrevRoundDate = DateUtils.addMilliseconds(minDate, -1);\n+        Date toNextRoundDate = DateUtils.addMilliseconds(maxDate, 1);\n+        assertFalse(fdf.format(minDate) +\" is not an lower-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));\n+        assertFalse(fdf.format(maxDate) +\" is not an upper-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));\n+        \n+        Calendar toPrevRoundCalendar = Calendar.getInstance();\n+        toPrevRoundCalendar.setTime(toPrevRoundDate);\n+        Calendar toNextRoundCalendar = Calendar.getInstance();\n+        toNextRoundCalendar.setTime(toNextRoundDate);\n+        assertFalse(fdf.format(minCalendar) +\" is not an lower-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));\n+        assertFalse(fdf.format(maxCalendar) +\" is not an upper-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.time;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.Iterator;\n+import java.util.Locale;\n+import java.util.NoSuchElementException;\n+import java.util.TimeZone;\n+\n+import junit.framework.AssertionFailedError;\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.SystemUtils;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.time.DateUtils}.\n+ *\n+ * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n+ * @author <a href=\"mailto:steve@mungoknotwise.com\">Steven Caswell</a>\n+ */\n+public class DateUtilsTest extends TestCase {\n+\n+    private static final long MILLIS_TEST;\n+    static {\n+        GregorianCalendar cal = new GregorianCalendar(2000, 6, 5, 4, 3, 2);\n+        cal.set(Calendar.MILLISECOND, 1);\n+        MILLIS_TEST = cal.getTime().getTime();\n+    }\n+\n+    DateFormat dateParser = null;\n+    DateFormat dateTimeParser = null;\n+    DateFormat timeZoneDateParser = null;\n+    Date dateAmPm1 = null;\n+    Date dateAmPm2 = null;\n+    Date dateAmPm3 = null;\n+    Date dateAmPm4 = null;\n+    Date date0 = null;\n+    Date date1 = null;\n+    Date date2 = null;\n+    Date date3 = null;\n+    Date date4 = null;\n+    Date date5 = null;\n+    Date date6 = null;\n+    Date date7 = null;\n+    Date date8 = null;\n+    Calendar calAmPm1 = null;\n+    Calendar calAmPm2 = null;\n+    Calendar calAmPm3 = null;\n+    Calendar calAmPm4 = null;\n+    Calendar cal1 = null;\n+    Calendar cal2 = null;\n+    Calendar cal3 = null;\n+    Calendar cal4 = null;\n+    Calendar cal5 = null;\n+    Calendar cal6 = null;\n+    Calendar cal7 = null;\n+    Calendar cal8 = null;\n+    TimeZone zone = null;\n+    TimeZone defaultZone = null;\n+\n+    public DateUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+\n+        dateParser = new SimpleDateFormat(\"MMM dd, yyyy\", Locale.ENGLISH);\n+        dateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);\n+\n+        dateAmPm1 = dateTimeParser.parse(\"February 3, 2002 01:10:00.000\");\n+        dateAmPm2 = dateTimeParser.parse(\"February 3, 2002 11:10:00.000\");\n+        dateAmPm3 = dateTimeParser.parse(\"February 3, 2002 13:10:00.000\");\n+        dateAmPm4 = dateTimeParser.parse(\"February 3, 2002 19:10:00.000\");\n+        date0 = dateTimeParser.parse(\"February 3, 2002 12:34:56.789\");\n+        date1 = dateTimeParser.parse(\"February 12, 2002 12:34:56.789\");\n+        date2 = dateTimeParser.parse(\"November 18, 2001 1:23:11.321\");\n+        defaultZone = TimeZone.getDefault();\n+        zone = TimeZone.getTimeZone(\"MET\");\n+        TimeZone.setDefault(zone);\n+        dateTimeParser.setTimeZone(zone);\n+        date3 = dateTimeParser.parse(\"March 30, 2003 05:30:45.000\");\n+        date4 = dateTimeParser.parse(\"March 30, 2003 01:10:00.000\");\n+        date5 = dateTimeParser.parse(\"March 30, 2003 01:40:00.000\");\n+        date6 = dateTimeParser.parse(\"March 30, 2003 02:10:00.000\");\n+        date7 = dateTimeParser.parse(\"March 30, 2003 02:40:00.000\");\n+        date8 = dateTimeParser.parse(\"October 26, 2003 05:30:45.000\");\n+        dateTimeParser.setTimeZone(defaultZone);\n+        TimeZone.setDefault(defaultZone);\n+        calAmPm1 = Calendar.getInstance();\n+        calAmPm1.setTime(dateAmPm1);\n+        calAmPm2 = Calendar.getInstance();\n+        calAmPm2.setTime(dateAmPm2);\n+        calAmPm3 = Calendar.getInstance();\n+        calAmPm3.setTime(dateAmPm3);\n+        calAmPm4 = Calendar.getInstance();\n+        calAmPm4.setTime(dateAmPm4);\n+        cal1 = Calendar.getInstance();\n+        cal1.setTime(date1);\n+        cal2 = Calendar.getInstance();\n+        cal2.setTime(date2);\n+        TimeZone.setDefault(zone);\n+        cal3 = Calendar.getInstance();\n+        cal3.setTime(date3);\n+        cal4 = Calendar.getInstance();\n+        cal4.setTime(date4);\n+        cal5 = Calendar.getInstance();\n+        cal5.setTime(date5);\n+        cal6 = Calendar.getInstance();\n+        cal6.setTime(date6);\n+        cal7 = Calendar.getInstance();\n+        cal7.setTime(date7);\n+        cal8 = Calendar.getInstance();\n+        cal8.setTime(date8);\n+        TimeZone.setDefault(defaultZone);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new DateUtils());\n+        Constructor<?>[] cons = DateUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(DateUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(DateUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsSameDay_Date() {\n+        Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n+        Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n+        assertEquals(true, DateUtils.isSameDay(date1, date2));\n+        date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n+        assertEquals(false, DateUtils.isSameDay(date1, date2));\n+        date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n+        assertEquals(true, DateUtils.isSameDay(date1, date2));\n+        date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\n+        assertEquals(false, DateUtils.isSameDay(date1, date2));\n+        try {\n+            DateUtils.isSameDay((Date) null, (Date) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsSameDay_Cal() {\n+        GregorianCalendar cal1 = new GregorianCalendar(2004, 6, 9, 13, 45);\n+        GregorianCalendar cal2 = new GregorianCalendar(2004, 6, 9, 13, 45);\n+        assertEquals(true, DateUtils.isSameDay(cal1, cal2));\n+        cal2.add(Calendar.DAY_OF_YEAR, 1);\n+        assertEquals(false, DateUtils.isSameDay(cal1, cal2));\n+        cal1.add(Calendar.DAY_OF_YEAR, 1);\n+        assertEquals(true, DateUtils.isSameDay(cal1, cal2));\n+        cal2.add(Calendar.YEAR, 1);\n+        assertEquals(false, DateUtils.isSameDay(cal1, cal2));\n+        try {\n+            DateUtils.isSameDay((Calendar) null, (Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsSameInstant_Date() {\n+        Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n+        Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n+        assertEquals(true, DateUtils.isSameInstant(date1, date2));\n+        date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n+        assertEquals(false, DateUtils.isSameInstant(date1, date2));\n+        date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n+        assertEquals(true, DateUtils.isSameInstant(date1, date2));\n+        date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\n+        assertEquals(false, DateUtils.isSameInstant(date1, date2));\n+        try {\n+            DateUtils.isSameInstant((Date) null, (Date) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsSameInstant_Cal() {\n+        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\n+        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\n+        cal1.set(2004, 6, 9, 13, 45, 0);\n+        cal1.set(Calendar.MILLISECOND, 0);\n+        cal2.set(2004, 6, 9, 13, 45, 0);\n+        cal2.set(Calendar.MILLISECOND, 0);\n+        assertEquals(false, DateUtils.isSameInstant(cal1, cal2));\n+        \n+        cal2.set(2004, 6, 9, 11, 45, 0);\n+        assertEquals(true, DateUtils.isSameInstant(cal1, cal2));\n+        try {\n+            DateUtils.isSameInstant((Calendar) null, (Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsSameLocalTime_Cal() {\n+        GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT+1\"));\n+        GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-1\"));\n+        cal1.set(2004, 6, 9, 13, 45, 0);\n+        cal1.set(Calendar.MILLISECOND, 0);\n+        cal2.set(2004, 6, 9, 13, 45, 0);\n+        cal2.set(Calendar.MILLISECOND, 0);\n+        assertEquals(true, DateUtils.isSameLocalTime(cal1, cal2));\n+        \n+        cal2.set(2004, 6, 9, 11, 45, 0);\n+        assertEquals(false, DateUtils.isSameLocalTime(cal1, cal2));\n+        try {\n+            DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testParseDate() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1972, 11, 3);\n+        String dateStr = \"1972-12-03\";\n+        String[] parsers = new String[] {\"yyyy'-'DDD\", \"yyyy'-'MM'-'dd\", \"yyyyMMdd\"};\n+        Date date = DateUtils.parseDate(dateStr, parsers);\n+        assertEquals(cal.getTime(), date);\n+        \n+        dateStr = \"1972-338\";\n+        date = DateUtils.parseDate(dateStr, parsers);\n+        assertEquals(cal.getTime(), date);\n+        \n+        dateStr = \"19721203\";\n+        date = DateUtils.parseDate(dateStr, parsers);\n+        assertEquals(cal.getTime(), date);\n+        \n+        try {\n+            DateUtils.parseDate(\"PURPLE\", parsers);\n+            fail();\n+        } catch (ParseException ex) {}\n+        try {\n+            DateUtils.parseDate(\"197212AB\", parsers);\n+            fail();\n+        } catch (ParseException ex) {}\n+        try {\n+            DateUtils.parseDate(null, parsers);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.parseDate(dateStr, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.parseDate(dateStr, new String[0]);\n+            fail();\n+        } catch (ParseException ex) {}\n+    }\n+    // LANG-486\n+    public void testParseDateWithLeniency() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1998, 6, 30);\n+        String dateStr = \"February 942, 1996\";\n+        String[] parsers = new String[] {\"MMMMM DDD, yyyy\"};\n+        \n+        Date date = DateUtils.parseDate(dateStr, parsers);\n+        assertEquals(cal.getTime(), date);\n+        \n+        try {\n+            date = DateUtils.parseDateStrictly(dateStr, parsers);\n+            fail();\n+        } catch (ParseException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddYears() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addYears(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addYears(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2001, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addYears(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 1999, 6, 5, 4, 3, 2, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMonths() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addMonths(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addMonths(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 7, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addMonths(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 5, 5, 4, 3, 2, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddWeeks() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addWeeks(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addWeeks(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 12, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addWeeks(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);      // july\n+        assertDate(result, 2000, 5, 28, 4, 3, 2, 1);   // june\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddDays() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addDays(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addDays(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 6, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addDays(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 4, 4, 3, 2, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddHours() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addHours(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addHours(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 5, 3, 2, 1);\n+        \n+        result = DateUtils.addHours(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 3, 3, 2, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMinutes() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addMinutes(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addMinutes(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 4, 2, 1);\n+        \n+        result = DateUtils.addMinutes(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 2, 2, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddSeconds() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addSeconds(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addSeconds(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 3, 1);\n+        \n+        result = DateUtils.addSeconds(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 1, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMilliseconds() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.addMilliseconds(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+        \n+        result = DateUtils.addMilliseconds(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 2);\n+        \n+        result = DateUtils.addMilliseconds(base, -1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 0);\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSetYears() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setYears(base, 2000);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+\n+        result = DateUtils.setYears(base, 2008);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2008, 6, 5, 4, 3, 2, 1);\n+\n+        result = DateUtils.setYears(base, 2005);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2005, 6, 5, 4, 3, 2, 1);\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSetMonths() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setMonths(base, 5);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 5, 5, 4, 3, 2, 1);\n+\n+        result = DateUtils.setMonths(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 1, 5, 4, 3, 2, 1);\n+\n+        try {\n+            result = DateUtils.setMonths(base, 12);\n+            fail(\"DateUtils.setMonths did not throw an expected IllegalArguementException.\");\n+        } catch (IllegalArgumentException e) {\n+\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSetDays() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setDays(base, 1);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 1, 4, 3, 2, 1);\n+\n+        result = DateUtils.setDays(base, 29);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 29, 4, 3, 2, 1);\n+\n+        try {\n+            result = DateUtils.setDays(base, 32);\n+            fail(\"DateUtils.setDays did not throw an expected IllegalArguementException.\");\n+        } catch (IllegalArgumentException e) {\n+\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSetHours() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setHours(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 0, 3, 2, 1);\n+\n+        result = DateUtils.setHours(base, 23);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 23, 3, 2, 1);\n+\n+        try {\n+            result = DateUtils.setHours(base, 24);\n+            fail(\"DateUtils.setHours did not throw an expected IllegalArguementException.\");\n+        } catch (IllegalArgumentException e) {\n+\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSetMinutes() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setMinutes(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 0, 2, 1);\n+\n+        result = DateUtils.setMinutes(base, 59);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 59, 2, 1);\n+\n+        try {\n+            result = DateUtils.setMinutes(base, 60);\n+            fail(\"DateUtils.setMinutes did not throw an expected IllegalArguementException.\");\n+        } catch (IllegalArgumentException e) {\n+\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSetSeconds() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setSeconds(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 0, 1);\n+\n+        result = DateUtils.setSeconds(base, 59);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 59, 1);\n+\n+        try {\n+            result = DateUtils.setSeconds(base, 60);\n+            fail(\"DateUtils.setSeconds did not throw an expected IllegalArguementException.\");\n+        } catch (IllegalArgumentException e) {\n+\n+        }\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testSetMilliseconds() throws Exception {\n+        Date base = new Date(MILLIS_TEST);\n+        Date result = DateUtils.setMilliseconds(base, 0);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 0);\n+\n+        result = DateUtils.setMilliseconds(base, 999);\n+        assertNotSame(base, result);\n+        assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+        assertDate(result, 2000, 6, 5, 4, 3, 2, 999);\n+\n+        try {\n+            result = DateUtils.setMilliseconds(base, 1000);\n+            fail(\"DateUtils.setMilliseconds did not throw an expected IllegalArguementException.\");\n+        } catch (IllegalArgumentException e) {\n+\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void assertDate(Date date, int year, int month, int day, int hour, int min, int sec, int mil) throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar();\n+        cal.setTime(date);\n+        assertEquals(year, cal.get(Calendar.YEAR));\n+        assertEquals(month, cal.get(Calendar.MONTH));\n+        assertEquals(day, cal.get(Calendar.DAY_OF_MONTH));\n+        assertEquals(hour, cal.get(Calendar.HOUR_OF_DAY));\n+        assertEquals(min, cal.get(Calendar.MINUTE));\n+        assertEquals(sec, cal.get(Calendar.SECOND));\n+        assertEquals(mil, cal.get(Calendar.MILLISECOND));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests various values with the round method\n+     */\n+    public void testRound() throws Exception {\n+        // tests for public static Date round(Date date, int field)\n+        assertEquals(\"round year-1 failed\",\n+                dateParser.parse(\"January 1, 2002\"),\n+                DateUtils.round(date1, Calendar.YEAR));\n+        assertEquals(\"round year-2 failed\",\n+                dateParser.parse(\"January 1, 2002\"),\n+                DateUtils.round(date2, Calendar.YEAR));\n+        assertEquals(\"round month-1 failed\",\n+                dateParser.parse(\"February 1, 2002\"),\n+                DateUtils.round(date1, Calendar.MONTH));\n+        assertEquals(\"round month-2 failed\",\n+                dateParser.parse(\"December 1, 2001\"),\n+                DateUtils.round(date2, Calendar.MONTH));\n+        assertEquals(\"round semimonth-0 failed\",\n+                dateParser.parse(\"February 1, 2002\"),\n+                DateUtils.round(date0, DateUtils.SEMI_MONTH));\n+        assertEquals(\"round semimonth-1 failed\",\n+                dateParser.parse(\"February 16, 2002\"),\n+                DateUtils.round(date1, DateUtils.SEMI_MONTH));\n+        assertEquals(\"round semimonth-2 failed\",\n+                dateParser.parse(\"November 16, 2001\"),\n+                DateUtils.round(date2, DateUtils.SEMI_MONTH));\n+        \n+        \n+        assertEquals(\"round date-1 failed\",\n+                dateParser.parse(\"February 13, 2002\"),\n+                DateUtils.round(date1, Calendar.DATE));\n+        assertEquals(\"round date-2 failed\",\n+                dateParser.parse(\"November 18, 2001\"),\n+                DateUtils.round(date2, Calendar.DATE));\n+        assertEquals(\"round hour-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n+                DateUtils.round(date1, Calendar.HOUR));\n+        assertEquals(\"round hour-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n+                DateUtils.round(date2, Calendar.HOUR));\n+        assertEquals(\"round minute-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n+                DateUtils.round(date1, Calendar.MINUTE));\n+        assertEquals(\"round minute-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n+                DateUtils.round(date2, Calendar.MINUTE));\n+        assertEquals(\"round second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n+                DateUtils.round(date1, Calendar.SECOND));\n+        assertEquals(\"round second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n+                DateUtils.round(date2, Calendar.SECOND));\n+        assertEquals(\"round ampm-1 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n+                DateUtils.round(dateAmPm1, Calendar.AM_PM));\n+        assertEquals(\"round ampm-2 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.round(dateAmPm2, Calendar.AM_PM));\n+        assertEquals(\"round ampm-3 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.round(dateAmPm3, Calendar.AM_PM));\n+        assertEquals(\"round ampm-4 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.round(dateAmPm4, Calendar.AM_PM));\n+\n+        // tests for public static Date round(Object date, int field)\n+        assertEquals(\"round year-1 failed\",\n+                dateParser.parse(\"January 1, 2002\"),\n+                DateUtils.round((Object) date1, Calendar.YEAR));\n+        assertEquals(\"round year-2 failed\",\n+                dateParser.parse(\"January 1, 2002\"),\n+                DateUtils.round((Object) date2, Calendar.YEAR));\n+        assertEquals(\"round month-1 failed\",\n+                dateParser.parse(\"February 1, 2002\"),\n+                DateUtils.round((Object) date1, Calendar.MONTH));\n+        assertEquals(\"round month-2 failed\",\n+                dateParser.parse(\"December 1, 2001\"),\n+                DateUtils.round((Object) date2, Calendar.MONTH));\n+        assertEquals(\"round semimonth-1 failed\",\n+                dateParser.parse(\"February 16, 2002\"),\n+                DateUtils.round((Object) date1, DateUtils.SEMI_MONTH));\n+        assertEquals(\"round semimonth-2 failed\",\n+                dateParser.parse(\"November 16, 2001\"),\n+                DateUtils.round((Object) date2, DateUtils.SEMI_MONTH));\n+        assertEquals(\"round date-1 failed\",\n+                dateParser.parse(\"February 13, 2002\"),\n+                DateUtils.round((Object) date1, Calendar.DATE));\n+        assertEquals(\"round date-2 failed\",\n+                dateParser.parse(\"November 18, 2001\"),\n+                DateUtils.round((Object) date2, Calendar.DATE));\n+        assertEquals(\"round hour-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n+                DateUtils.round((Object) date1, Calendar.HOUR));\n+        assertEquals(\"round hour-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n+                DateUtils.round((Object) date2, Calendar.HOUR));\n+        assertEquals(\"round minute-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n+                DateUtils.round((Object) date1, Calendar.MINUTE));\n+        assertEquals(\"round minute-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n+                DateUtils.round((Object) date2, Calendar.MINUTE));\n+        assertEquals(\"round second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n+                DateUtils.round((Object) date1, Calendar.SECOND));\n+        assertEquals(\"round second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n+                DateUtils.round((Object) date2, Calendar.SECOND));\n+        assertEquals(\"round calendar second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n+                DateUtils.round((Object) cal1, Calendar.SECOND));\n+        assertEquals(\"round calendar second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n+                DateUtils.round((Object) cal2, Calendar.SECOND));\n+        assertEquals(\"round ampm-1 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n+                DateUtils.round((Object) dateAmPm1, Calendar.AM_PM));\n+        assertEquals(\"round ampm-2 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.round((Object) dateAmPm2, Calendar.AM_PM));\n+        assertEquals(\"round ampm-3 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.round((Object) dateAmPm3, Calendar.AM_PM));\n+        assertEquals(\"round ampm-4 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.round((Object) dateAmPm4, Calendar.AM_PM));\n+\n+        try {\n+            DateUtils.round((Date) null, Calendar.SECOND);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.round((Calendar) null, Calendar.SECOND);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.round((Object) null, Calendar.SECOND);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.round(\"\", Calendar.SECOND);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            DateUtils.round(date1, -9999);\n+            fail();\n+        } catch(IllegalArgumentException ex) {}\n+\n+        assertEquals(\"round ampm-1 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n+                DateUtils.round((Object) calAmPm1, Calendar.AM_PM));\n+        assertEquals(\"round ampm-2 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.round((Object) calAmPm2, Calendar.AM_PM));\n+        assertEquals(\"round ampm-3 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.round((Object) calAmPm3, Calendar.AM_PM));\n+        assertEquals(\"round ampm-4 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.round((Object) calAmPm4, Calendar.AM_PM));\n+        \n+        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560 / LANG-13\n+        // Test rounding across the beginning of daylight saving time\n+        TimeZone.setDefault(zone);\n+        dateTimeParser.setTimeZone(zone);\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round(date4, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round((Object) cal4, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round(date5, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round((Object) cal5, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round(date6, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round((Object) cal6, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round(date7, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round((Object) cal7, Calendar.DATE));\n+        \n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n+                DateUtils.round(date4, Calendar.HOUR_OF_DAY));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n+                DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY));\n+        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n+            assertEquals(\"round MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                    DateUtils.round(date5, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"round MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                    DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"round MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                    DateUtils.round(date6, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"round MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                    DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"round MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n+                    DateUtils.round(date7, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"round MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n+                    DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY));\n+        } else {\n+            this.warn(\"WARNING: Some date rounding tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n+        }\n+        TimeZone.setDefault(defaultZone);\n+        dateTimeParser.setTimeZone(defaultZone);\n+    }\n+\n+    /**\n+     * Tests the Changes Made by LANG-346 to the DateUtils.modify() private method invoked\n+     * by DateUtils.round().\n+     */\n+    public void testRoundLang346() throws Exception\n+    {\n+        TimeZone.setDefault(defaultZone);\n+        dateTimeParser.setTimeZone(defaultZone);\n+        Calendar testCalendar = Calendar.getInstance();\n+        testCalendar.set(2007, 6, 2, 8, 8, 50);\n+        Date date = testCalendar.getTime();\n+        assertEquals(\"Minute Round Up Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n+                     DateUtils.round(date, Calendar.MINUTE));\n+\n+        testCalendar.set(2007, 6, 2, 8, 8, 20);\n+        date = testCalendar.getTime();\n+        assertEquals(\"Minute No Round Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n+                     DateUtils.round(date, Calendar.MINUTE));\n+\n+        testCalendar.set(2007, 6, 2, 8, 8, 50);\n+        testCalendar.set(Calendar.MILLISECOND, 600);\n+        date = testCalendar.getTime();\n+\n+        assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n+                     DateUtils.round(date, Calendar.SECOND));\n+\n+        testCalendar.set(2007, 6, 2, 8, 8, 50);\n+        testCalendar.set(Calendar.MILLISECOND, 200);\n+        date = testCalendar.getTime();\n+        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n+                     DateUtils.round(date, Calendar.SECOND));\n+\n+        testCalendar.set(2007, 6, 2, 8, 8, 20);\n+        testCalendar.set(Calendar.MILLISECOND, 600);\n+        date = testCalendar.getTime();\n+        assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n+                     DateUtils.round(date, Calendar.SECOND));\n+\n+        testCalendar.set(2007, 6, 2, 8, 8, 20);\n+        testCalendar.set(Calendar.MILLISECOND, 200);\n+        date = testCalendar.getTime();\n+        assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n+                     DateUtils.round(date, Calendar.SECOND));\n+\n+        testCalendar.set(2007, 6, 2, 8, 8, 50);\n+        date = testCalendar.getTime();\n+        assertEquals(\"Hour Round Down Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n+                     DateUtils.round(date, Calendar.HOUR));\n+\n+        testCalendar.set(2007, 6, 2, 8, 31, 50);\n+        date = testCalendar.getTime();\n+        assertEquals(\"Hour Round Up Failed\",\n+                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n+                     DateUtils.round(date, Calendar.HOUR));\n+    }\n+\n+    /**\n+     * Tests various values with the trunc method\n+     */\n+    public void testTruncate() throws Exception {\n+        // tests public static Date truncate(Date date, int field)\n+        assertEquals(\"truncate year-1 failed\",\n+                dateParser.parse(\"January 1, 2002\"),\n+                DateUtils.truncate(date1, Calendar.YEAR));\n+        assertEquals(\"truncate year-2 failed\",\n+                dateParser.parse(\"January 1, 2001\"),\n+                DateUtils.truncate(date2, Calendar.YEAR));\n+        assertEquals(\"truncate month-1 failed\",\n+                dateParser.parse(\"February 1, 2002\"),\n+                DateUtils.truncate(date1, Calendar.MONTH));\n+        assertEquals(\"truncate month-2 failed\",\n+                dateParser.parse(\"November 1, 2001\"),\n+                DateUtils.truncate(date2, Calendar.MONTH));\n+        assertEquals(\"truncate semimonth-1 failed\",\n+                dateParser.parse(\"February 1, 2002\"),\n+                DateUtils.truncate(date1, DateUtils.SEMI_MONTH));\n+        assertEquals(\"truncate semimonth-2 failed\",\n+                dateParser.parse(\"November 16, 2001\"),\n+                DateUtils.truncate(date2, DateUtils.SEMI_MONTH));\n+        assertEquals(\"truncate date-1 failed\",\n+                dateParser.parse(\"February 12, 2002\"),\n+                DateUtils.truncate(date1, Calendar.DATE));\n+        assertEquals(\"truncate date-2 failed\",\n+                dateParser.parse(\"November 18, 2001\"),\n+                DateUtils.truncate(date2, Calendar.DATE));\n+        assertEquals(\"truncate hour-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"),\n+                DateUtils.truncate(date1, Calendar.HOUR));\n+        assertEquals(\"truncate hour-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n+                DateUtils.truncate(date2, Calendar.HOUR));\n+        assertEquals(\"truncate minute-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"),\n+                DateUtils.truncate(date1, Calendar.MINUTE));\n+        assertEquals(\"truncate minute-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n+                DateUtils.truncate(date2, Calendar.MINUTE));\n+        assertEquals(\"truncate second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n+                DateUtils.truncate(date1, Calendar.SECOND));\n+        assertEquals(\"truncate second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n+                DateUtils.truncate(date2, Calendar.SECOND));\n+        assertEquals(\"truncate ampm-1 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n+                DateUtils.truncate(dateAmPm1, Calendar.AM_PM));\n+        assertEquals(\"truncate ampm-2 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n+                DateUtils.truncate(dateAmPm2, Calendar.AM_PM));\n+        assertEquals(\"truncate ampm-3 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.truncate(dateAmPm3, Calendar.AM_PM));\n+        assertEquals(\"truncate ampm-4 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.truncate(dateAmPm4, Calendar.AM_PM));\n+\n+        // tests public static Date truncate(Object date, int field)\n+        assertEquals(\"truncate year-1 failed\",\n+                dateParser.parse(\"January 1, 2002\"),\n+                DateUtils.truncate((Object) date1, Calendar.YEAR));\n+        assertEquals(\"truncate year-2 failed\",\n+                dateParser.parse(\"January 1, 2001\"),\n+                DateUtils.truncate((Object) date2, Calendar.YEAR));\n+        assertEquals(\"truncate month-1 failed\",\n+                dateParser.parse(\"February 1, 2002\"),\n+                DateUtils.truncate((Object) date1, Calendar.MONTH));\n+        assertEquals(\"truncate month-2 failed\",\n+                dateParser.parse(\"November 1, 2001\"),\n+                DateUtils.truncate((Object) date2, Calendar.MONTH));\n+        assertEquals(\"truncate semimonth-1 failed\",\n+                dateParser.parse(\"February 1, 2002\"),\n+                DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH));\n+        assertEquals(\"truncate semimonth-2 failed\",\n+                dateParser.parse(\"November 16, 2001\"),\n+                DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH));\n+        assertEquals(\"truncate date-1 failed\",\n+                dateParser.parse(\"February 12, 2002\"),\n+                DateUtils.truncate((Object) date1, Calendar.DATE));\n+        assertEquals(\"truncate date-2 failed\",\n+                dateParser.parse(\"November 18, 2001\"),\n+                DateUtils.truncate((Object) date2, Calendar.DATE));\n+        assertEquals(\"truncate hour-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:00:00.000\"),\n+                DateUtils.truncate((Object) date1, Calendar.HOUR));\n+        assertEquals(\"truncate hour-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:00:00.000\"),\n+                DateUtils.truncate((Object) date2, Calendar.HOUR));\n+        assertEquals(\"truncate minute-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:00.000\"),\n+                DateUtils.truncate((Object) date1, Calendar.MINUTE));\n+        assertEquals(\"truncate minute-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:00.000\"),\n+                DateUtils.truncate((Object) date2, Calendar.MINUTE));\n+        assertEquals(\"truncate second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n+                DateUtils.truncate((Object) date1, Calendar.SECOND));\n+        assertEquals(\"truncate second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n+                DateUtils.truncate((Object) date2, Calendar.SECOND));\n+        assertEquals(\"truncate ampm-1 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n+                DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM));\n+        assertEquals(\"truncate ampm-2 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n+                DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM));\n+        assertEquals(\"truncate ampm-3 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM));\n+        assertEquals(\"truncate ampm-4 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM));\n+        \n+        assertEquals(\"truncate calendar second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:56.000\"),\n+                DateUtils.truncate((Object) cal1, Calendar.SECOND));\n+        assertEquals(\"truncate calendar second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:11.000\"),\n+                DateUtils.truncate((Object) cal2, Calendar.SECOND));\n+        \n+        assertEquals(\"truncate ampm-1 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n+                DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM));\n+        assertEquals(\"truncate ampm-2 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 00:00:00.000\"),\n+                DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM));\n+        assertEquals(\"truncate ampm-3 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM));\n+        assertEquals(\"truncate ampm-4 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM));\n+        \n+        try {\n+            DateUtils.truncate((Date) null, Calendar.SECOND);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.truncate((Calendar) null, Calendar.SECOND);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.truncate((Object) null, Calendar.SECOND);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.truncate(\"\", Calendar.SECOND);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+\n+        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560\n+        // Test truncate across beginning of daylight saving time\n+        TimeZone.setDefault(zone);\n+        dateTimeParser.setTimeZone(zone);\n+        assertEquals(\"truncate MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.truncate(date3, Calendar.DATE));\n+        assertEquals(\"truncate MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.truncate((Object) cal3, Calendar.DATE));\n+        // Test truncate across end of daylight saving time\n+        assertEquals(\"truncate MET date across DST change-over\",\n+                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n+                DateUtils.truncate(date8, Calendar.DATE));\n+        assertEquals(\"truncate MET date across DST change-over\",\n+                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n+                DateUtils.truncate((Object) cal8, Calendar.DATE));\n+        TimeZone.setDefault(defaultZone);\n+        dateTimeParser.setTimeZone(defaultZone);\n+        \n+        // Bug 31395, large dates\n+        Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis\n+        GregorianCalendar endCal = new GregorianCalendar();\n+        endCal.setTime(endOfTime);\n+        try {\n+            DateUtils.truncate(endCal, Calendar.DATE);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        endCal.set(Calendar.YEAR, 280000001);\n+        try {\n+            DateUtils.truncate(endCal, Calendar.DATE);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        endCal.set(Calendar.YEAR, 280000000);\n+        Calendar cal = DateUtils.truncate(endCal, Calendar.DATE);\n+        assertEquals(0, cal.get(Calendar.HOUR));\n+    }\n+\n+    /**\n+     * Tests for LANG-59\n+     *\n+     * see http://issues.apache.org/jira/browse/LANG-59\n+     */\n+    public void testTruncateLang59() throws Exception {\n+        if (!SystemUtils.isJavaVersionAtLeast(1.4f)) {\n+            this.warn(\"WARNING: Test for LANG-59 not run since the current version is \" + SystemUtils.JAVA_VERSION);\n+            return;\n+        }\n+\n+        // Set TimeZone to Mountain Time\n+        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n+        TimeZone.setDefault(MST_MDT);\n+        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n+        format.setTimeZone(MST_MDT);\n+\n+        Date oct31_01MDT = new Date(1099206000000L); \n+\n+        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n+        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n+        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n+        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n+\n+        assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));\n+        assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));\n+        assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));\n+        assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));\n+        assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));\n+\n+        // ------- Demonstrate Problem -------\n+        Calendar gval = Calendar.getInstance();\n+        gval.setTime(new Date(oct31_01MDT.getTime()));\n+        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n+        assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);\n+\n+        // ---------- Test Truncate ----------\n+        assertEquals(\"Truncate Calendar.MILLISECOND\",\n+                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n+\n+        assertEquals(\"Truncate Calendar.SECOND\",\n+                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));\n+\n+        assertEquals(\"Truncate Calendar.MINUTE\",\n+                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));\n+\n+        assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n+                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n+\n+        assertEquals(\"Truncate Calendar.HOUR\",\n+                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));\n+\n+        assertEquals(\"Truncate Calendar.DATE\",\n+                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));\n+\n+\n+        // ---------- Test Round (down) ----------\n+        assertEquals(\"Round Calendar.MILLISECOND\",\n+                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n+\n+        assertEquals(\"Round Calendar.SECOND\",\n+                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));\n+\n+        assertEquals(\"Round Calendar.MINUTE\",\n+                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));\n+\n+        assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n+                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n+\n+        assertEquals(\"Round Calendar.HOUR\",\n+                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));\n+\n+        assertEquals(\"Round Calendar.DATE\",\n+                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));\n+\n+        // restore default time zone\n+        TimeZone.setDefault(defaultZone);\n+    }\n+\n+    // http://issues.apache.org/jira/browse/LANG-520\n+    public void testLang520() throws ParseException {\n+        Date d = new Date();\n+        String isoDateStr = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(d);\n+        Date d2 = DateUtils.parseDate(isoDateStr, new String[] { DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern() });\n+        // the format loses milliseconds so have to reintroduce them\n+        assertEquals(\"Date not equal to itself ISO formatted and parsed\", d.getTime(), d2.getTime() + d.getTime() % 1000); \n+    }\n+    \n+    /**\n+     * Tests various values with the ceiling method\n+     */\n+    public void testCeil() throws Exception {\n+        // tests public static Date ceiling(Date date, int field)\n+        assertEquals(\"ceiling year-1 failed\",\n+                dateParser.parse(\"January 1, 2003\"),\n+                DateUtils.ceiling(date1, Calendar.YEAR));\n+        assertEquals(\"ceiling year-2 failed\",\n+                dateParser.parse(\"January 1, 2002\"),\n+                DateUtils.ceiling(date2, Calendar.YEAR));\n+        assertEquals(\"ceiling month-1 failed\",\n+                dateParser.parse(\"March 1, 2002\"),\n+                DateUtils.ceiling(date1, Calendar.MONTH));\n+        assertEquals(\"ceiling month-2 failed\",\n+                dateParser.parse(\"December 1, 2001\"),\n+                DateUtils.ceiling(date2, Calendar.MONTH));\n+        assertEquals(\"ceiling semimonth-1 failed\",\n+                dateParser.parse(\"February 16, 2002\"),\n+                DateUtils.ceiling(date1, DateUtils.SEMI_MONTH));\n+        assertEquals(\"ceiling semimonth-2 failed\",\n+                dateParser.parse(\"December 1, 2001\"),\n+                DateUtils.ceiling(date2, DateUtils.SEMI_MONTH));\n+        assertEquals(\"ceiling date-1 failed\",\n+                dateParser.parse(\"February 13, 2002\"),\n+                DateUtils.ceiling(date1, Calendar.DATE));\n+        assertEquals(\"ceiling date-2 failed\",\n+                dateParser.parse(\"November 19, 2001\"),\n+                DateUtils.ceiling(date2, Calendar.DATE));\n+        assertEquals(\"ceiling hour-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n+                DateUtils.ceiling(date1, Calendar.HOUR));\n+        assertEquals(\"ceiling hour-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"),\n+                DateUtils.ceiling(date2, Calendar.HOUR));\n+        assertEquals(\"ceiling minute-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n+                DateUtils.ceiling(date1, Calendar.MINUTE));\n+        assertEquals(\"ceiling minute-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"),\n+                DateUtils.ceiling(date2, Calendar.MINUTE));\n+        assertEquals(\"ceiling second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n+                DateUtils.ceiling(date1, Calendar.SECOND));\n+        assertEquals(\"ceiling second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n+                DateUtils.ceiling(date2, Calendar.SECOND));\n+        assertEquals(\"ceiling ampm-1 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.ceiling(dateAmPm1, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-2 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.ceiling(dateAmPm2, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-3 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.ceiling(dateAmPm3, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-4 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.ceiling(dateAmPm4, Calendar.AM_PM));\n+        \n+     // tests public static Date ceiling(Object date, int field)\n+        assertEquals(\"ceiling year-1 failed\",\n+                dateParser.parse(\"January 1, 2003\"),\n+                DateUtils.ceiling((Object) date1, Calendar.YEAR));\n+        assertEquals(\"ceiling year-2 failed\",\n+                dateParser.parse(\"January 1, 2002\"),\n+                DateUtils.ceiling((Object) date2, Calendar.YEAR));\n+        assertEquals(\"ceiling month-1 failed\",\n+                dateParser.parse(\"March 1, 2002\"),\n+                DateUtils.ceiling((Object) date1, Calendar.MONTH));\n+        assertEquals(\"ceiling month-2 failed\",\n+                dateParser.parse(\"December 1, 2001\"),\n+                DateUtils.ceiling((Object) date2, Calendar.MONTH));\n+        assertEquals(\"ceiling semimonth-1 failed\",\n+                dateParser.parse(\"February 16, 2002\"),\n+                DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH));\n+        assertEquals(\"ceiling semimonth-2 failed\",\n+                dateParser.parse(\"December 1, 2001\"),\n+                DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH));\n+        assertEquals(\"ceiling date-1 failed\",\n+                dateParser.parse(\"February 13, 2002\"),\n+                DateUtils.ceiling((Object) date1, Calendar.DATE));\n+        assertEquals(\"ceiling date-2 failed\",\n+                dateParser.parse(\"November 19, 2001\"),\n+                DateUtils.ceiling((Object) date2, Calendar.DATE));\n+        assertEquals(\"ceiling hour-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n+                DateUtils.ceiling((Object) date1, Calendar.HOUR));\n+        assertEquals(\"ceiling hour-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"),\n+                DateUtils.ceiling((Object) date2, Calendar.HOUR));\n+        assertEquals(\"ceiling minute-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n+                DateUtils.ceiling((Object) date1, Calendar.MINUTE));\n+        assertEquals(\"ceiling minute-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"),\n+                DateUtils.ceiling((Object) date2, Calendar.MINUTE));\n+        assertEquals(\"ceiling second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n+                DateUtils.ceiling((Object) date1, Calendar.SECOND));\n+        assertEquals(\"ceiling second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n+                DateUtils.ceiling((Object) date2, Calendar.SECOND));\n+        assertEquals(\"ceiling ampm-1 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-2 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-3 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-4 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM));\n+        \n+        assertEquals(\"ceiling calendar second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n+                DateUtils.ceiling((Object) cal1, Calendar.SECOND));\n+        assertEquals(\"ceiling calendar second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n+                DateUtils.ceiling((Object) cal2, Calendar.SECOND));\n+        \n+        assertEquals(\"ceiling ampm-1 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-2 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-3 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-4 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM));\n+\n+        try {\n+            DateUtils.ceiling((Date) null, Calendar.SECOND);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.ceiling((Calendar) null, Calendar.SECOND);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.ceiling((Object) null, Calendar.SECOND);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.ceiling(\"\", Calendar.SECOND);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            DateUtils.ceiling(date1, -9999);\n+            fail();\n+        } catch(IllegalArgumentException ex) {}\n+\n+        \n+        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560\n+        // Test ceiling across the beginning of daylight saving time\n+        TimeZone.setDefault(zone);\n+        dateTimeParser.setTimeZone(zone);\n+\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling(date4, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling((Object) cal4, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling(date5, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling((Object) cal5, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling(date6, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling((Object) cal6, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling(date7, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling((Object) cal7, Calendar.DATE));\n+        \n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY));\n+        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n+            assertEquals(\"ceiling MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                    DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"ceiling MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                    DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"ceiling MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n+                    DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"ceiling MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n+                    DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"ceiling MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n+                    DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"ceiling MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n+                    DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY));\n+        } else {\n+            this.warn(\"WARNING: Some date ceiling tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n+        }\n+        TimeZone.setDefault(defaultZone);\n+        dateTimeParser.setTimeZone(defaultZone);\n+        \n+     // Bug 31395, large dates\n+        Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis\n+        GregorianCalendar endCal = new GregorianCalendar();\n+        endCal.setTime(endOfTime);\n+        try {\n+            DateUtils.ceiling(endCal, Calendar.DATE);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        endCal.set(Calendar.YEAR, 280000001);\n+        try {\n+            DateUtils.ceiling(endCal, Calendar.DATE);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        endCal.set(Calendar.YEAR, 280000000);\n+        Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE);\n+        assertEquals(0, cal.get(Calendar.HOUR));\n+    }\n+\n+    /**\n+     * Tests the iterator exceptions\n+     */\n+    public void testIteratorEx() throws Exception {\n+        try {\n+            DateUtils.iterator(Calendar.getInstance(), -9999);\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.iterator(\"\", DateUtils.RANGE_WEEK_CENTER);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    /**\n+     * Tests the calendar iterator for week ranges\n+     */\n+    public void testWeekIterator() throws Exception {\n+        Calendar now = Calendar.getInstance();\n+        for (int i = 0; i< 7; i++) {\n+            Calendar today = DateUtils.truncate(now, Calendar.DATE);\n+            Calendar sunday = DateUtils.truncate(now, Calendar.DATE);\n+            sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));\n+            Calendar monday = DateUtils.truncate(now, Calendar.DATE);\n+            if (monday.get(Calendar.DAY_OF_WEEK) == 1) {\n+                //This is sunday... roll back 6 days\n+                monday.add(Calendar.DATE, -6);\n+            } else {\n+                monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));\n+            }\n+            Calendar centered = DateUtils.truncate(now, Calendar.DATE);\n+            centered.add(Calendar.DATE, -3);\n+            \n+            Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY);\n+            assertWeekIterator(it, sunday);\n+            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY);\n+            assertWeekIterator(it, monday);\n+            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE);\n+            assertWeekIterator(it, today);\n+            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);\n+            assertWeekIterator(it, centered);\n+            \n+            it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER);\n+            assertWeekIterator(it, centered);\n+            it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER);\n+            assertWeekIterator(it, centered);\n+            try {\n+                it.next();\n+                fail();\n+            } catch (NoSuchElementException ex) {}\n+            it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER);\n+            it.next();\n+            try {\n+                it.remove();\n+            } catch( UnsupportedOperationException ex) {}\n+            \n+            now.add(Calendar.DATE,1);\n+        }\n+    }\n+            \n+    /**\n+     * Tests the calendar iterator for month-based ranges\n+     */\n+    public void testMonthIterator() throws Exception {\n+        Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY);\n+        assertWeekIterator(it,\n+                dateParser.parse(\"January 27, 2002\"),\n+                dateParser.parse(\"March 2, 2002\"));\n+\n+        it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY);\n+        assertWeekIterator(it,\n+                dateParser.parse(\"January 28, 2002\"),\n+                dateParser.parse(\"March 3, 2002\"));\n+\n+        it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY);\n+        assertWeekIterator(it,\n+                dateParser.parse(\"October 28, 2001\"),\n+                dateParser.parse(\"December 1, 2001\"));\n+\n+        it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY);\n+        assertWeekIterator(it,\n+                dateParser.parse(\"October 29, 2001\"),\n+                dateParser.parse(\"December 2, 2001\"));\n+    }\n+\n+    /**\n+     * This checks that this is a 7 element iterator of Calendar objects\n+     * that are dates (no time), and exactly 1 day spaced after each other.\n+     */\n+    private static void assertWeekIterator(Iterator<?> it, Calendar start) {\n+        Calendar end = (Calendar) start.clone();\n+        end.add(Calendar.DATE, 6);\n+\n+        assertWeekIterator(it, start, end);\n+    }\n+\n+    /**\n+     * Convenience method for when working with Date objects\n+     */\n+    private static void assertWeekIterator(Iterator<?> it, Date start, Date end) {\n+        Calendar calStart = Calendar.getInstance();\n+        calStart.setTime(start);\n+        Calendar calEnd = Calendar.getInstance();\n+        calEnd.setTime(end);\n+\n+        assertWeekIterator(it, calStart, calEnd);\n+    }\n+\n+    /**\n+     * This checks that this is a 7 divisble iterator of Calendar objects\n+     * that are dates (no time), and exactly 1 day spaced after each other\n+     * (in addition to the proper start and stop dates)\n+     */\n+    private static void assertWeekIterator(Iterator<?> it, Calendar start, Calendar end) {\n+        Calendar cal = (Calendar) it.next();\n+        assertEquals(\"\", start, cal, 0);\n+        Calendar last = null;\n+        int count = 1;\n+        while (it.hasNext()) {\n+            //Check this is just a date (no time component)\n+            assertEquals(\"\", cal, DateUtils.truncate(cal, Calendar.DATE), 0);\n+\n+            last = cal;\n+            cal = (Calendar) it.next();\n+            count++;\n+\n+            //Check that this is one day more than the last date\n+            last.add(Calendar.DATE, 1);\n+            assertEquals(\"\", last, cal, 0);\n+        }\n+        if (count % 7 != 0) {\n+            throw new AssertionFailedError(\"There were \" + count + \" days in this iterator\");\n+        }\n+        assertEquals(\"\", end, cal, 0);\n+    }\n+\n+    /**\n+     * Used to check that Calendar objects are close enough\n+     * delta is in milliseconds\n+     */\n+    private static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {\n+        if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {\n+            throw new AssertionFailedError(\n+                    message + \" expected \" + cal1.getTime() + \" but got \" + cal2.getTime());\n+        }\n+    }\n+\n+    void warn(String msg) {\n+        System.err.println(msg);\n+    }\n+}\n+\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.time;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.Calendar;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * TestCase for DurationFormatUtils.\n+ * \n+ * @author Apache Software Foundation\n+ * @author Apache Ant - DateUtilsTest\n+ * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n+ * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ */\n+public class DurationFormatUtilsTest extends TestCase {\n+\n+    public DurationFormatUtilsTest(String s) {\n+        super(s);\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new DurationFormatUtils());\n+        Constructor<?>[] cons = DurationFormatUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(DurationFormatUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(DurationFormatUtils.class.getModifiers()));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testFormatDurationWords() {\n+        String text = null;\n+\n+        text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false);\n+        assertEquals(\"50 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false);\n+        assertEquals(\"1 minute 5 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false);\n+        assertEquals(\"2 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false);\n+        assertEquals(\"2 minutes 1 second\", text);\n+        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false);\n+        assertEquals(\"1 hour 12 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false);\n+        assertEquals(\"1 day 0 hours 0 minutes 0 seconds\", text);\n+\n+        text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true);\n+        assertEquals(\"50 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true);\n+        assertEquals(\"1 minute 5 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true);\n+        assertEquals(\"2 minutes\", text);\n+        text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true);\n+        assertEquals(\"2 minutes 1 second\", text);\n+        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true);\n+        assertEquals(\"1 hour 12 minutes\", text);\n+        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true);\n+        assertEquals(\"1 day\", text);\n+\n+        text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true);\n+        assertEquals(\"0 days 0 hours 0 minutes 50 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true);\n+        assertEquals(\"0 days 0 hours 1 minute 5 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true);\n+        assertEquals(\"0 days 0 hours 2 minutes\", text);\n+        text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true);\n+        assertEquals(\"0 days 0 hours 2 minutes 1 second\", text);\n+        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true);\n+        assertEquals(\"0 days 1 hour 12 minutes\", text);\n+        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true);\n+        assertEquals(\"1 day\", text);\n+\n+        text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false);\n+        assertEquals(\"0 days 0 hours 0 minutes 50 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false);\n+        assertEquals(\"0 days 0 hours 1 minute 5 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false);\n+        assertEquals(\"0 days 0 hours 2 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false);\n+        assertEquals(\"0 days 0 hours 2 minutes 1 second\", text);\n+        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false);\n+        assertEquals(\"0 days 1 hour 12 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);\n+        assertEquals(\"1 day 1 hour 12 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);\n+        assertEquals(\"2 days 1 hour 12 minutes 0 seconds\", text);\n+        for (int i = 2; i < 31; i++) {\n+            text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false);\n+            // assertEquals(i + \" days 0 hours 0 minutes 0 seconds\", text);\n+            //            \n+            // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours\n+            // -2 minutes -47...>\n+            // at junit.framework.Assert.assertEquals(Assert.java:81)\n+            // at junit.framework.Assert.assertEquals(Assert.java:87)\n+            // at\n+            // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124)\n+            // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n+            // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n+            // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n+            // at java.lang.reflect.Method.invoke(Method.java:324)\n+            // at junit.framework.TestCase.runTest(TestCase.java:154)\n+            // at junit.framework.TestCase.runBare(TestCase.java:127)\n+            // at junit.framework.TestResult$1.protect(TestResult.java:106)\n+            // at junit.framework.TestResult.runProtected(TestResult.java:124)\n+            // at junit.framework.TestResult.run(TestResult.java:109)\n+            // at junit.framework.TestCase.run(TestCase.java:118)\n+            // at junit.framework.TestSuite.runTest(TestSuite.java:208)\n+            // at junit.framework.TestSuite.run(TestSuite.java:203)\n+            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n+            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n+            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n+        }\n+    }\n+\n+    /**\n+     * Tests that \"1 <unit>s\" gets converted to \"1 <unit>\" but that \"11 <unit>s\" is left alone.\n+     */\n+    public void testFormatDurationPluralWords() {\n+        long oneSecond = 1000;\n+        long oneMinute = oneSecond * 60;\n+        long oneHour = oneMinute * 60;\n+        long oneDay = oneHour * 24;\n+        String text = null;\n+\n+        text = DurationFormatUtils.formatDurationWords(oneSecond, false, false);\n+        assertEquals(\"0 days 0 hours 0 minutes 1 second\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneSecond * 2, false, false);\n+        assertEquals(\"0 days 0 hours 0 minutes 2 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneSecond * 11, false, false);\n+        assertEquals(\"0 days 0 hours 0 minutes 11 seconds\", text);\n+\n+        text = DurationFormatUtils.formatDurationWords(oneMinute, false, false);\n+        assertEquals(\"0 days 0 hours 1 minute 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneMinute * 2, false, false);\n+        assertEquals(\"0 days 0 hours 2 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneMinute * 11, false, false);\n+        assertEquals(\"0 days 0 hours 11 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneMinute + oneSecond, false, false);\n+        assertEquals(\"0 days 0 hours 1 minute 1 second\", text);\n+\n+        text = DurationFormatUtils.formatDurationWords(oneHour, false, false);\n+        assertEquals(\"0 days 1 hour 0 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneHour * 2, false, false);\n+        assertEquals(\"0 days 2 hours 0 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneHour * 11, false, false);\n+        assertEquals(\"0 days 11 hours 0 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneHour + oneMinute + oneSecond, false, false);\n+        assertEquals(\"0 days 1 hour 1 minute 1 second\", text);\n+\n+        text = DurationFormatUtils.formatDurationWords(oneDay, false, false);\n+        assertEquals(\"1 day 0 hours 0 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneDay * 2, false, false);\n+        assertEquals(\"2 days 0 hours 0 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneDay * 11, false, false);\n+        assertEquals(\"11 days 0 hours 0 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneDay + oneHour + oneMinute + oneSecond, false, false);\n+        assertEquals(\"1 day 1 hour 1 minute 1 second\", text);\n+    }\n+\n+    public void testFormatDurationHMS() {\n+        long time = 0;\n+        assertEquals(\"0:00:00.000\", DurationFormatUtils.formatDurationHMS(time));\n+\n+        time = 1;\n+        assertEquals(\"0:00:00.001\", DurationFormatUtils.formatDurationHMS(time));\n+\n+        time = 15;\n+        assertEquals(\"0:00:00.015\", DurationFormatUtils.formatDurationHMS(time));\n+\n+        time = 165;\n+        assertEquals(\"0:00:00.165\", DurationFormatUtils.formatDurationHMS(time));\n+\n+        time = 1675;\n+        assertEquals(\"0:00:01.675\", DurationFormatUtils.formatDurationHMS(time));\n+\n+        time = 13465;\n+        assertEquals(\"0:00:13.465\", DurationFormatUtils.formatDurationHMS(time));\n+\n+        time = 72789;\n+        assertEquals(\"0:01:12.789\", DurationFormatUtils.formatDurationHMS(time));\n+\n+        time = 12789 + 32 * 60000;\n+        assertEquals(\"0:32:12.789\", DurationFormatUtils.formatDurationHMS(time));\n+\n+        time = 12789 + 62 * 60000;\n+        assertEquals(\"1:02:12.789\", DurationFormatUtils.formatDurationHMS(time));\n+    }\n+\n+    public void testFormatDurationISO() {\n+        assertEquals(\"P0Y0M0DT0H0M0.000S\", DurationFormatUtils.formatDurationISO(0L));\n+        assertEquals(\"P0Y0M0DT0H0M0.001S\", DurationFormatUtils.formatDurationISO(1L));\n+        assertEquals(\"P0Y0M0DT0H0M0.010S\", DurationFormatUtils.formatDurationISO(10L));\n+        assertEquals(\"P0Y0M0DT0H0M0.100S\", DurationFormatUtils.formatDurationISO(100L));\n+        assertEquals(\"P0Y0M0DT0H1M15.321S\", DurationFormatUtils.formatDurationISO(75321L));\n+    }\n+\n+    public void testFormatDuration() {\n+        long duration = 0;\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"y\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"M\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"d\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"H\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"m\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"s\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"S\"));\n+        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"SSSS\"));\n+        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"yyyy\"));\n+        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"yyMM\"));\n+\n+        duration = 60 * 1000;\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"y\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"M\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"d\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"H\"));\n+        assertEquals(\"1\", DurationFormatUtils.formatDuration(duration, \"m\"));\n+        assertEquals(\"60\", DurationFormatUtils.formatDuration(duration, \"s\"));\n+        assertEquals(\"60000\", DurationFormatUtils.formatDuration(duration, \"S\"));\n+        assertEquals(\"01:00\", DurationFormatUtils.formatDuration(duration, \"mm:ss\"));\n+\n+        Calendar base = Calendar.getInstance();\n+        base.set(2000, 0, 1, 0, 0, 0);\n+        base.set(Calendar.MILLISECOND, 0);\n+\n+        Calendar cal = Calendar.getInstance();\n+        cal.set(2003, 1, 1, 0, 0, 0);\n+        cal.set(Calendar.MILLISECOND, 0);\n+        duration = cal.getTime().getTime() - base.getTime().getTime(); // duration from 2000-01-01 to cal\n+        // don't use 1970 in test as time zones were less reliable in 1970 than now\n+        // remember that duration formatting ignores time zones, working on strict hour lengths\n+        int days = 366 + 365 + 365 + 31;\n+        assertEquals(\"0 0 \" + days, DurationFormatUtils.formatDuration(duration, \"y M d\"));\n+    }\n+\n+    public void testFormatPeriodISO() {\n+        TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n+        Calendar base = Calendar.getInstance(timeZone);\n+        base.set(1970, 0, 1, 0, 0, 0);\n+        base.set(Calendar.MILLISECOND, 0);\n+\n+        Calendar cal = Calendar.getInstance(timeZone);\n+        cal.set(2002, 1, 23, 9, 11, 12);\n+        cal.set(Calendar.MILLISECOND, 1);\n+        String text;\n+        // repeat a test from testDateTimeISO to compare extended and not extended.\n+        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n+        assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n+        // test fixture is the same as above, but now with extended format.\n+        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\n+                DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\n+        assertEquals(\"P32Y1M22DT9H11M12.001S\", text);\n+        // test fixture from example in http://www.w3.org/TR/xmlschema-2/#duration\n+        cal.set(1971, 1, 3, 10, 30, 0);\n+        cal.set(Calendar.MILLISECOND, 0);\n+        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\n+                DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\n+        assertEquals(\"P1Y1M2DT10H30M0.000S\", text);\n+        // want a way to say 'don't print the seconds in format()' or other fields for that matter:\n+        // assertEquals(\"P1Y2M3DT10H30M\", text);\n+    }\n+\n+    public void testFormatPeriod() {\n+        Calendar cal1970 = Calendar.getInstance();\n+        cal1970.set(1970, 0, 1, 0, 0, 0);\n+        cal1970.set(Calendar.MILLISECOND, 0);\n+        long time1970 = cal1970.getTime().getTime();\n+\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"y\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"M\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"d\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"H\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"m\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"s\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"S\"));\n+        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"SSSS\"));\n+        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyyy\"));\n+        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyMM\"));\n+\n+        long time = time1970 + 60 * 1000;\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"y\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"M\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"d\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"H\"));\n+        assertEquals(\"1\", DurationFormatUtils.formatPeriod(time1970, time, \"m\"));\n+        assertEquals(\"60\", DurationFormatUtils.formatPeriod(time1970, time, \"s\"));\n+        assertEquals(\"60000\", DurationFormatUtils.formatPeriod(time1970, time, \"S\"));\n+        assertEquals(\"01:00\", DurationFormatUtils.formatPeriod(time1970, time, \"mm:ss\"));\n+\n+        Calendar cal = Calendar.getInstance();\n+        cal.set(1973, 6, 1, 0, 0, 0);\n+        cal.set(Calendar.MILLISECOND, 0);\n+        time = cal.getTime().getTime();\n+        assertEquals(\"36\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n+        assertEquals(\"3 years 6 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n+        assertEquals(\"03/06\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n+\n+        cal.set(1973, 10, 1, 0, 0, 0);\n+        cal.set(Calendar.MILLISECOND, 0);\n+        time = cal.getTime().getTime();\n+        assertEquals(\"310\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n+        assertEquals(\"3 years 10 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n+        assertEquals(\"03/10\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n+\n+        cal.set(1974, 0, 1, 0, 0, 0);\n+        cal.set(Calendar.MILLISECOND, 0);\n+        time = cal.getTime().getTime();\n+        assertEquals(\"40\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n+        assertEquals(\"4 years 0 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n+        assertEquals(\"04/00\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n+        assertEquals(\"48\", DurationFormatUtils.formatPeriod(time1970, time, \"M\"));\n+        assertEquals(\"48\", DurationFormatUtils.formatPeriod(time1970, time, \"MM\"));\n+        assertEquals(\"048\", DurationFormatUtils.formatPeriod(time1970, time, \"MMM\"));\n+    }\n+\n+    public void testLexx() {\n+        // tests each constant\n+        assertArrayEquals(new DurationFormatUtils.Token[]{\n+            new DurationFormatUtils.Token(DurationFormatUtils.y, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.M, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.d, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.m, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.s, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx(\"yMdHmsS\"));\n+\n+        // tests the ISO8601-like\n+        assertArrayEquals(new DurationFormatUtils.Token[]{\n+            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\":\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.m, 2),\n+            new DurationFormatUtils.Token(new StringBuffer(\":\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.s, 2),\n+            new DurationFormatUtils.Token(new StringBuffer(\".\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx(\"H:mm:ss.SSS\"));\n+\n+        // test the iso extended format\n+        assertArrayEquals(new DurationFormatUtils.Token[]{\n+            new DurationFormatUtils.Token(new StringBuffer(\"P\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.y, 4),\n+            new DurationFormatUtils.Token(new StringBuffer(\"Y\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.M, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\"M\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.d, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\"DT\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\"H\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.m, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\"M\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.s, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\".\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.S, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\"S\"), 1)}, DurationFormatUtils\n+                .lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN));\n+\n+        // test failures in equals\n+        DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4);\n+        assertFalse(\"Token equal to non-Token class. \", token.equals(new Object()));\n+        assertFalse(\"Token equal to Token with wrong value class. \", token.equals(new DurationFormatUtils.Token(\n+                new Object())));\n+        assertFalse(\"Token equal to Token with different count. \", token.equals(new DurationFormatUtils.Token(\n+                DurationFormatUtils.y, 1)));\n+        DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(new Integer(1), 4);\n+        assertTrue(\"Token with Number value not equal to itself. \", numToken.equals(numToken));\n+    }\n+\n+\n+    // http://issues.apache.org/bugzilla/show_bug.cgi?id=38401\n+    public void testBugzilla38401() {\n+        assertEqualDuration( \"0000/00/30 16:00:00 000\", new int[] { 2006, 0, 26, 18, 47, 34 }, \n+                             new int[] { 2006, 1, 26, 10, 47, 34 }, \"yyyy/MM/dd HH:mm:ss SSS\");\n+    }\n+\n+    // https://issues.apache.org/jira/browse/LANG-281\n+    public void testJiraLang281() {\n+        assertEqualDuration( \"09\", new int[] { 2005, 11, 31, 0, 0, 0 }, \n+                             new int[] { 2006, 9, 6, 0, 0, 0 }, \"MM\");\n+    }\n+    \n+    // Testing the under a day range in DurationFormatUtils.formatPeriod\n+    public void testLowDurations() {\n+        for(int hr=0; hr < 24; hr++) {\n+            for(int min=0; min < 60; min++) {\n+                for(int sec=0; sec < 60; sec++) {\n+                    assertEqualDuration( hr + \":\" + min + \":\" + sec, \n+                                         new int[] { 2000, 0, 1, 0, 0, 0, 0 },\n+                                         new int[] { 2000, 0, 1, hr, min, sec },\n+                                         \"H:m:s\"\n+                                       );\n+                }\n+            }\n+        }\n+    }\n+\n+    // Attempting to test edge cases in DurationFormatUtils.formatPeriod\n+    public void testEdgeDurations() {\n+        assertEqualDuration( \"01\", new int[] { 2006, 0, 15, 0, 0, 0 }, \n+                             new int[] { 2006, 2, 10, 0, 0, 0 }, \"MM\");\n+        assertEqualDuration( \"12\", new int[] { 2005, 0, 15, 0, 0, 0 }, \n+                             new int[] { 2006, 0, 15, 0, 0, 0 }, \"MM\");\n+        assertEqualDuration( \"12\", new int[] { 2005, 0, 15, 0, 0, 0 }, \n+                             new int[] { 2006, 0, 16, 0, 0, 0 }, \"MM\");\n+        assertEqualDuration( \"11\", new int[] { 2005, 0, 15, 0, 0, 0 }, \n+                             new int[] { 2006, 0, 14, 0, 0, 0 }, \"MM\");\n+        \n+        assertEqualDuration( \"01 26\", new int[] { 2006, 0, 15, 0, 0, 0 },\n+                             new int[] { 2006, 2, 10, 0, 0, 0 }, \"MM dd\");\n+        assertEqualDuration( \"54\", new int[] { 2006, 0, 15, 0, 0, 0 },\n+                             new int[] { 2006, 2, 10, 0, 0, 0 }, \"dd\"); \n+        \n+        assertEqualDuration( \"09 12\", new int[] { 2006, 1, 20, 0, 0, 0 },\n+                             new int[] { 2006, 11, 4, 0, 0, 0 }, \"MM dd\");\n+        assertEqualDuration( \"287\", new int[] { 2006, 1, 20, 0, 0, 0 },\n+                             new int[] { 2006, 11, 4, 0, 0, 0 }, \"dd\"); \n+\n+        assertEqualDuration( \"11 30\", new int[] { 2006, 0, 2, 0, 0, 0 },\n+                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"MM dd\"); \n+        assertEqualDuration( \"364\", new int[] { 2006, 0, 2, 0, 0, 0 },\n+                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"dd\"); \n+\n+        assertEqualDuration( \"12 00\", new int[] { 2006, 0, 1, 0, 0, 0 },\n+                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"MM dd\"); \n+        assertEqualDuration( \"365\", new int[] { 2006, 0, 1, 0, 0, 0 },\n+                             new int[] { 2007, 0, 1, 0, 0, 0 }, \"dd\"); \n+    \n+        assertEqualDuration( \"31\", new int[] { 2006, 0, 1, 0, 0, 0 },\n+                new int[] { 2006, 1, 1, 0, 0, 0 }, \"dd\"); \n+        \n+        assertEqualDuration( \"92\", new int[] { 2005, 9, 1, 0, 0, 0 },\n+                new int[] { 2006, 0, 1, 0, 0, 0 }, \"dd\"); \n+        assertEqualDuration( \"77\", new int[] { 2005, 9, 16, 0, 0, 0 },\n+                new int[] { 2006, 0, 1, 0, 0, 0 }, \"dd\"); \n+\n+        // test month larger in start than end\n+        assertEqualDuration( \"136\", new int[] { 2005, 9, 16, 0, 0, 0 },\n+                new int[] { 2006, 2, 1, 0, 0, 0 }, \"dd\"); \n+        // test when start in leap year\n+        assertEqualDuration( \"136\", new int[] { 2004, 9, 16, 0, 0, 0 },\n+                new int[] { 2005, 2, 1, 0, 0, 0 }, \"dd\"); \n+        // test when end in leap year\n+        assertEqualDuration( \"137\", new int[] { 2003, 9, 16, 0, 0, 0 },\n+                new int[] { 2004, 2, 1, 0, 0, 0 }, \"dd\");         \n+        // test when end in leap year but less than end of feb\n+        assertEqualDuration( \"135\", new int[] { 2003, 9, 16, 0, 0, 0 },\n+                new int[] { 2004, 1, 28, 0, 0, 0 }, \"dd\"); \n+\n+        assertEqualDuration( \"364\", new int[] { 2007, 0, 2, 0, 0, 0 },\n+                new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\"); \n+        assertEqualDuration( \"729\", new int[] { 2006, 0, 2, 0, 0, 0 },\n+                new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\"); \n+\n+        assertEqualDuration( \"365\", new int[] { 2007, 2, 2, 0, 0, 0 },\n+                new int[] { 2008, 2, 1, 0, 0, 0 }, \"dd\"); \n+        assertEqualDuration( \"333\", new int[] { 2007, 1, 2, 0, 0, 0 },\n+                new int[] { 2008, 0, 1, 0, 0, 0 }, \"dd\"); \n+\n+        assertEqualDuration( \"28\", new int[] { 2008, 1, 2, 0, 0, 0 },\n+                new int[] { 2008, 2, 1, 0, 0, 0 }, \"dd\"); \n+        assertEqualDuration( \"393\", new int[] { 2007, 1, 2, 0, 0, 0 },\n+                new int[] { 2008, 2, 1, 0, 0, 0 }, \"dd\"); \n+\n+        assertEqualDuration( \"369\", new int[] { 2004, 0, 29, 0, 0, 0 },\n+                new int[] { 2005, 1, 1, 0, 0, 0 }, \"dd\"); \n+\n+        assertEqualDuration( \"338\", new int[] { 2004, 1, 29, 0, 0, 0 },\n+                new int[] { 2005, 1, 1, 0, 0, 0 }, \"dd\"); \n+\n+        assertEqualDuration( \"28\", new int[] { 2004, 2, 8, 0, 0, 0 },\n+                new int[] { 2004, 3, 5, 0, 0, 0 }, \"dd\"); \n+\n+        assertEqualDuration( \"48\", new int[] { 1992, 1, 29, 0, 0, 0 },\n+                new int[] { 1996, 1, 29, 0, 0, 0 }, \"M\"); \n+        \n+        \n+        // this seems odd - and will fail if I throw it in as a brute force \n+        // below as it expects the answer to be 12. It's a tricky edge case\n+        assertEqualDuration( \"11\", new int[] { 1996, 1, 29, 0, 0, 0 },\n+                new int[] { 1997, 1, 28, 0, 0, 0 }, \"M\"); \n+        // again - this seems odd\n+        assertEqualDuration( \"11 28\", new int[] { 1996, 1, 29, 0, 0, 0 },\n+                new int[] { 1997, 1, 28, 0, 0, 0 }, \"M d\"); \n+        \n+    }\n+    \n+    public void testDurationsByBruteForce() {\n+        bruteForce(2006, 0, 1, \"d\", Calendar.DAY_OF_MONTH);\n+        bruteForce(2006, 0, 2, \"d\", Calendar.DAY_OF_MONTH);\n+        bruteForce(2007, 1, 2, \"d\", Calendar.DAY_OF_MONTH);\n+        bruteForce(2004, 1, 29, \"d\", Calendar.DAY_OF_MONTH);\n+        bruteForce(1996, 1, 29, \"d\", Calendar.DAY_OF_MONTH);\n+\n+        bruteForce(1969, 1, 28, \"M\", Calendar.MONTH);  // tests for 48 years\n+        //bruteForce(1996, 1, 29, \"M\", Calendar.MONTH);  // this will fail\n+    }\n+    \n+    private int FOUR_YEARS = 365 * 3 + 366;\n+    \n+    // Takes a minute to run, so generally turned off\n+//    public void testBrutally() {\n+//        Calendar c = Calendar.getInstance();\n+//        c.set(2004, 0, 1, 0, 0, 0);\n+//        for (int i=0; i < FOUR_YEARS; i++) {\n+//            bruteForce(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH), \"d\", Calendar.DAY_OF_MONTH );\n+//            c.add(Calendar.DAY_OF_MONTH, 1);\n+//        }\n+//    }        \n+    \n+    private void bruteForce(int year, int month, int day, String format, int calendarType) {\n+        String msg = year + \"-\" + month + \"-\" + day + \" to \";\n+        Calendar c = Calendar.getInstance();\n+        c.set(year, month, day, 0, 0, 0);\n+        int[] array1 = new int[] { year, month, day, 0, 0, 0 };\n+        int[] array2 = new int[] { year, month, day, 0, 0, 0 };\n+        for (int i=0; i < FOUR_YEARS; i++) {\n+            array2[0] = c.get(Calendar.YEAR);\n+            array2[1] = c.get(Calendar.MONTH);\n+            array2[2] = c.get(Calendar.DAY_OF_MONTH);\n+            String tmpMsg = msg + array2[0] + \"-\" + array2[1] + \"-\" + array2[2] + \" at \";\n+            assertEqualDuration( tmpMsg + i, Integer.toString(i), array1, array2, format );\n+            c.add(calendarType, 1);\n+        }\n+    }\n+\n+    private void assertEqualDuration(String expected, int[] start, int[] end, String format) {\n+        assertEqualDuration(null, expected, start, end, format);\n+    }\n+    private void assertEqualDuration(String message, String expected, int[] start, int[] end, String format) {\n+        Calendar cal1 = Calendar.getInstance();\n+        cal1.set(start[0], start[1], start[2], start[3], start[4], start[5]);\n+        cal1.set(Calendar.MILLISECOND, 0);\n+        Calendar cal2 = Calendar.getInstance();\n+        cal2.set(end[0], end[1], end[2], end[3], end[4], end[5]);\n+        cal2.set(Calendar.MILLISECOND, 0);\n+        long milli1 = cal1.getTime().getTime();\n+        long milli2 = cal2.getTime().getTime();\n+        String result = DurationFormatUtils.formatPeriod(milli1, milli2, format);\n+        if (message == null) {\n+            assertEquals(expected, result);\n+        } else {\n+            assertEquals(message, expected, result);\n+        }\n+    }\n+\n+    private void assertArrayEquals(DurationFormatUtils.Token[] obj1, DurationFormatUtils.Token[] obj2) {\n+        assertEquals(\"Arrays are unequal length. \", obj1.length, obj2.length);\n+        for (int i = 0; i < obj1.length; i++) {\n+            assertTrue(\"Index \" + i + \" not equal, \" + obj1[i] + \" vs \" + obj2[i], obj1[i].equals(obj2[i]));\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.time;\n+\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.lang3.SerializationUtils;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang3.time.FastDateFormat}.\n+ *\n+ * @author Sean Schofield\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @author Fredrik Westermarck\n+ * @since 2.0\n+ * @version $Id$\n+ */\n+public class FastDateFormatTest extends TestCase {\n+\n+    public FastDateFormatTest(String name) {\n+        super(name);\n+    }\n+\n+    public void test_getInstance() {\n+        FastDateFormat format1 = FastDateFormat.getInstance();\n+        FastDateFormat format2 = FastDateFormat.getInstance();\n+        assertSame(format1, format2);\n+        assertEquals(new SimpleDateFormat().toPattern(), format1.getPattern());\n+    }\n+\n+    public void test_getInstance_String() {\n+        FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n+        FastDateFormat format2 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n+        FastDateFormat format3 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n+\n+        assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n+        assertSame(format2, format3);\n+        assertEquals(\"MM/DD/yyyy\", format1.getPattern());\n+        assertEquals(TimeZone.getDefault(), format1.getTimeZone());\n+        assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n+        assertEquals(false, format1.getTimeZoneOverridesCalendar());\n+        assertEquals(false, format2.getTimeZoneOverridesCalendar());\n+    }\n+\n+    public void test_getInstance_String_TimeZone() {\n+        Locale realDefaultLocale = Locale.getDefault();\n+        TimeZone realDefaultZone = TimeZone.getDefault();\n+        try {\n+            Locale.setDefault(Locale.US);\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n+\n+            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n+                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"));\n+            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n+            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n+            FastDateFormat format4 = FastDateFormat.getInstance(\"MM/DD/yyyy\", TimeZone.getDefault());\n+            FastDateFormat format5 = FastDateFormat.getInstance(\"MM-DD-yyyy\", TimeZone.getDefault());\n+            FastDateFormat format6 = FastDateFormat.getInstance(\"MM-DD-yyyy\");\n+\n+            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n+            assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n+            assertEquals(true, format1.getTimeZoneOverridesCalendar());\n+            assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n+            assertEquals(false, format2.getTimeZoneOverridesCalendar());\n+            assertSame(format3, format4);\n+            assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5);\n+            assertTrue(format4 != format6); // -- junit 3.8 version -- assertFalse(format3 == format5);\n+\n+        } finally {\n+            Locale.setDefault(realDefaultLocale);\n+            TimeZone.setDefault(realDefaultZone);\n+        }\n+    }\n+\n+    public void test_getInstance_String_Locale() {\n+        Locale realDefaultLocale = Locale.getDefault();\n+        try {\n+            Locale.setDefault(Locale.US);\n+            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n+            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\");\n+            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n+\n+            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n+            assertSame(format1, format3);\n+            assertSame(Locale.GERMANY, format1.getLocale());\n+\n+        } finally {\n+            Locale.setDefault(realDefaultLocale);\n+        }\n+    }\n+\n+    public void test_changeDefault_Locale_DateInstance() {\n+        Locale realDefaultLocale = Locale.getDefault();\n+        try {\n+            Locale.setDefault(Locale.US);\n+            FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY);\n+            FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n+            Locale.setDefault(Locale.GERMANY);\n+            FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL);\n+\n+            assertSame(Locale.GERMANY, format1.getLocale());\n+            assertSame(Locale.US, format2.getLocale());\n+            assertSame(Locale.GERMANY, format3.getLocale());\n+            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n+            assertTrue(format2 != format3);\n+\n+        } finally {\n+            Locale.setDefault(realDefaultLocale);\n+        }\n+    }\n+\n+    public void test_changeDefault_Locale_DateTimeInstance() {\n+        Locale realDefaultLocale = Locale.getDefault();\n+        try {\n+            Locale.setDefault(Locale.US);\n+            FastDateFormat format1 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL, Locale.GERMANY);\n+            FastDateFormat format2 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n+            Locale.setDefault(Locale.GERMANY);\n+            FastDateFormat format3 = FastDateFormat.getDateTimeInstance(FastDateFormat.FULL, FastDateFormat.FULL);\n+\n+            assertSame(Locale.GERMANY, format1.getLocale());\n+            assertSame(Locale.US, format2.getLocale());\n+            assertSame(Locale.GERMANY, format3.getLocale());\n+            assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);\n+            assertTrue(format2 != format3);\n+\n+        } finally {\n+            Locale.setDefault(realDefaultLocale);\n+        }\n+    }\n+\n+    public void test_getInstance_String_TimeZone_Locale() {\n+        Locale realDefaultLocale = Locale.getDefault();\n+        TimeZone realDefaultZone = TimeZone.getDefault();\n+        try {\n+            Locale.setDefault(Locale.US);\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n+\n+            FastDateFormat format1 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n+                    TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), Locale.GERMANY);\n+            FastDateFormat format2 = FastDateFormat.getInstance(\"MM/DD/yyyy\", Locale.GERMANY);\n+            FastDateFormat format3 = FastDateFormat.getInstance(\"MM/DD/yyyy\",\n+                    TimeZone.getDefault(), Locale.GERMANY);\n+\n+            assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2);\n+            assertEquals(TimeZone.getTimeZone(\"Atlantic/Reykjavik\"), format1.getTimeZone());\n+            assertEquals(TimeZone.getDefault(), format2.getTimeZone());\n+            assertEquals(TimeZone.getDefault(), format3.getTimeZone());\n+            assertEquals(true, format1.getTimeZoneOverridesCalendar());\n+            assertEquals(false, format2.getTimeZoneOverridesCalendar());\n+            assertEquals(true, format3.getTimeZoneOverridesCalendar());\n+            assertEquals(Locale.GERMANY, format1.getLocale());\n+            assertEquals(Locale.GERMANY, format2.getLocale());\n+            assertEquals(Locale.GERMANY, format3.getLocale());\n+\n+        } finally {\n+            Locale.setDefault(realDefaultLocale);\n+            TimeZone.setDefault(realDefaultZone);\n+        }\n+    }\n+\n+    public void testFormat() {\n+        Locale realDefaultLocale = Locale.getDefault();\n+        TimeZone realDefaultZone = TimeZone.getDefault();\n+        try {\n+            Locale.setDefault(Locale.US);\n+            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n+            FastDateFormat fdf = null;\n+            SimpleDateFormat sdf = null;\n+\n+            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n+            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n+            Date date1 = cal1.getTime();\n+            Date date2 = cal2.getTime();\n+            long millis1 = date1.getTime();\n+            long millis2 = date2.getTime();\n+\n+            fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n+            sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n+            assertEquals(sdf.format(date1), fdf.format(date1));\n+            assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));\n+            assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));\n+            assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));\n+            assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));\n+            assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));\n+            assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));\n+\n+            fdf = FastDateFormat.getInstance(\"Z\");\n+            assertEquals(\"-0500\", fdf.format(date1));\n+            assertEquals(\"-0500\", fdf.format(cal1));\n+            assertEquals(\"-0500\", fdf.format(millis1));\n+\n+            fdf = FastDateFormat.getInstance(\"Z\");\n+            assertEquals(\"-0400\", fdf.format(date2));\n+            assertEquals(\"-0400\", fdf.format(cal2));\n+            assertEquals(\"-0400\", fdf.format(millis2));\n+\n+            fdf = FastDateFormat.getInstance(\"ZZ\");\n+            assertEquals(\"-05:00\", fdf.format(date1));\n+            assertEquals(\"-05:00\", fdf.format(cal1));\n+            assertEquals(\"-05:00\", fdf.format(millis1));\n+\n+            fdf = FastDateFormat.getInstance(\"ZZ\");\n+            assertEquals(\"-04:00\", fdf.format(date2));\n+            assertEquals(\"-04:00\", fdf.format(cal2));\n+            assertEquals(\"-04:00\", fdf.format(millis2));\n+\n+            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n+                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n+            fdf = FastDateFormat.getInstance(pattern);\n+            sdf = new SimpleDateFormat(pattern);\n+            assertEquals(sdf.format(date1), fdf.format(date1));\n+            assertEquals(sdf.format(date2), fdf.format(date2));\n+\n+        } finally {\n+            Locale.setDefault(realDefaultLocale);\n+            TimeZone.setDefault(realDefaultZone);\n+        }\n+    }\n+\n+    /**\n+     * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.\n+     */\n+    public void testShortDateStyleWithLocales() {\n+        Locale usLocale = Locale.US;\n+        Locale swedishLocale = new Locale(\"sv\", \"SE\");\n+        Calendar cal = Calendar.getInstance();\n+        cal.set(2004, 1, 3);\n+        FastDateFormat fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, usLocale);\n+        assertEquals(\"2/3/04\", fdf.format(cal));\n+\n+        fdf = FastDateFormat.getDateInstance(FastDateFormat.SHORT, swedishLocale);\n+        assertEquals(\"2004-02-03\", fdf.format(cal));\n+\n+    }\n+\n+    /**\n+     * Tests that pre-1000AD years get padded with yyyy\n+     */\n+    public void testLowYearPadding() {\n+        Calendar cal = Calendar.getInstance();\n+        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/DD\");\n+\n+        cal.set(1,0,1);\n+        assertEquals(\"0001/01/01\", format.format(cal));\n+        cal.set(10,0,1);\n+        assertEquals(\"0010/01/01\", format.format(cal));\n+        cal.set(100,0,1);\n+        assertEquals(\"0100/01/01\", format.format(cal));\n+        cal.set(999,0,1);\n+        assertEquals(\"0999/01/01\", format.format(cal));\n+    }\n+    /**\n+     * Show Bug #39410 is solved\n+     */\n+    public void testMilleniumBug() {\n+        Calendar cal = Calendar.getInstance();\n+        FastDateFormat format = FastDateFormat.getInstance(\"dd.MM.yyyy\");\n+\n+        cal.set(1000,0,1);\n+        assertEquals(\"01.01.1000\", format.format(cal));\n+    }\n+\n+    /**\n+     * testLowYearPadding showed that the date was buggy\n+     * This test confirms it, getting 366 back as a date\n+     */\n+     // TODO: Fix this problem\n+    public void testSimpleDate() {\n+        Calendar cal = Calendar.getInstance();\n+        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/dd\");\n+\n+        cal.set(2004,11,31);\n+        assertEquals(\"2004/12/31\", format.format(cal));\n+        cal.set(999,11,31);\n+        assertEquals(\"0999/12/31\", format.format(cal));\n+        cal.set(1,2,2);\n+        assertEquals(\"0001/03/02\", format.format(cal));\n+    }\n+\n+    public void testLang303() {\n+        Calendar cal = Calendar.getInstance();\n+        cal.set(2004,11,31);\n+\n+        FastDateFormat format = FastDateFormat.getInstance(\"yyyy/MM/dd\");\n+        String output = format.format(cal);\n+\n+        format = (FastDateFormat) SerializationUtils.deserialize( SerializationUtils.serialize( format ) );\n+        assertEquals(output, format.format(cal));\n+    }\n+\n+    public void testLang538() {\n+        final String dateTime = \"2009-10-16T16:42:16.000Z\";\n+\n+        // more commonly constructed with: cal = new GregorianCalendar(2009, 9, 16, 8, 42, 16)\n+        // for the unit test to work in any time zone, constructing with GMT-8 rather than default locale time zone\n+        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone(\"GMT-8\"));\n+        cal.clear();\n+        cal.set(2009, 9, 16, 8, 42, 16);\n+\n+        FastDateFormat format = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));\n+        assertEquals(\"dateTime\", dateTime, format.format(cal));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/time/StopWatchTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.time;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+/**\n+ * TestCase for StopWatch.\n+ *\n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ */\n+public class StopWatchTest extends TestCase {\n+\n+    public StopWatchTest(String s) {\n+        super(s);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testStopWatchSimple(){\n+        StopWatch watch = new StopWatch();\n+        watch.start();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.stop();\n+        long time = watch.getTime();\n+        assertEquals(time, watch.getTime());\n+        \n+        assertTrue(time >= 500);\n+        assertTrue(time < 700);\n+        \n+        watch.reset();\n+        assertEquals(0, watch.getTime());\n+    }\n+    \n+    public void testStopWatchSimpleGet(){\n+        StopWatch watch = new StopWatch();\n+        assertEquals(0, watch.getTime());\n+        assertEquals(\"0:00:00.000\", watch.toString());\n+        \n+        watch.start();\n+            try {Thread.sleep(500);} catch (InterruptedException ex) {}\n+        assertTrue(watch.getTime() < 2000);\n+    }\n+    \n+    public void testStopWatchSplit(){\n+        StopWatch watch = new StopWatch();\n+        watch.start();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.split();\n+        long splitTime = watch.getSplitTime();\n+        String splitStr = watch.toSplitString();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.unsplit();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.stop();\n+        long totalTime = watch.getTime();\n+\n+        assertEquals(\"Formatted split string not the correct length\", \n+                     splitStr.length(), 11);\n+        assertTrue(splitTime >= 500);\n+        assertTrue(splitTime < 700);\n+        assertTrue(totalTime >= 1500);\n+        assertTrue(totalTime < 1900);\n+    }\n+    \n+    public void testStopWatchSuspend(){\n+        StopWatch watch = new StopWatch();\n+        watch.start();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.suspend();\n+        long suspendTime = watch.getTime();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.resume();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.stop();\n+        long totalTime = watch.getTime();\n+        \n+        assertTrue(suspendTime >= 500);\n+        assertTrue(suspendTime < 700);\n+        assertTrue(totalTime >= 1000);\n+        assertTrue(totalTime < 1300);\n+    }\n+\n+    public void testLang315() {\n+        StopWatch watch = new StopWatch();\n+        watch.start();\n+            try {Thread.sleep(200);} catch (InterruptedException ex) {}\n+        watch.suspend();\n+        long suspendTime = watch.getTime();\n+            try {Thread.sleep(200);} catch (InterruptedException ex) {}\n+        watch.stop();\n+        long totalTime = watch.getTime();\n+        assertTrue( suspendTime == totalTime );\n+    }\n+\n+    // test bad states\n+    public void testBadStates() {\n+        StopWatch watch = new StopWatch();\n+        try {\n+            watch.stop();\n+            fail(\"Calling stop on an unstarted StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.stop();\n+            fail(\"Calling stop on an unstarted StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.suspend();\n+            fail(\"Calling suspend on an unstarted StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.split();\n+            fail(\"Calling split on a non-running StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.unsplit();\n+            fail(\"Calling unsplit on an unsplit StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.resume();\n+            fail(\"Calling resume on an unsuspended StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        watch.start();\n+\n+        try {\n+            watch.start();\n+            fail(\"Calling start on a started StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.unsplit();\n+            fail(\"Calling unsplit on an unsplit StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.getSplitTime();\n+            fail(\"Calling getSplitTime on an unsplit StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        try {\n+            watch.resume();\n+            fail(\"Calling resume on an unsuspended StopWatch should throw an exception. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+\n+        watch.stop();\n+\n+        try {\n+            watch.start();\n+            fail(\"Calling start on a stopped StopWatch should throw an exception as it needs to be reset. \");\n+        } catch(IllegalStateException ise) {\n+            // expected\n+        }\n+    }\n+\n+    public void testGetStartTime() {\n+        long beforeStopWatch = System.currentTimeMillis();\n+        StopWatch watch = new StopWatch();\n+        try {\n+            watch.getStartTime();\n+            fail(\"Calling getStartTime on an unstarted StopWatch should throw an exception\");\n+        } catch (IllegalStateException expected) {\n+            // expected\n+        }\n+        watch.start();\n+        try {\n+            watch.getStartTime();\n+            Assert.assertTrue(watch.getStartTime() >= beforeStopWatch);\n+        } catch (IllegalStateException ex) {\n+            fail(\"Start time should be available: \" + ex.getMessage());\n+        }\n+        watch.reset();\n+        try {\n+            watch.getStartTime();\n+            fail(\"Calling getStartTime on a reset, but unstarted StopWatch should throw an exception\");\n+        } catch (IllegalStateException expected) {\n+            // expected\n+        }\n+    }\n+\n+}", "timestamp": 1262484886, "metainfo": ""}