{"sha": "8c1a7f9b0653a367ac61ca7d9619e2cbc55e8cda", "log": "Tests the difference in performance between CharUtils and CharSet.   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/CharUtilsPerfTest.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang;\n+\n+import java.text.NumberFormat;\n+import java.util.Calendar;\n+\n+/**\n+ * Tests the difference in performance between CharUtils and CharSet.\n+ * \n+ * Sample runs:\n+\n+Now: Thu Mar 18 14:29:48 PST 2004\n+Sun Microsystems Inc. Java(TM) 2 Runtime Environment, Standard Edition 1.3.1_10-b03\n+Sun Microsystems Inc. Java HotSpot(TM) Client VM 1.3.1_10-b03\n+Windows XP 5.1 x86 pentium i486 i386\n+Do nohting: 0 milliseconds.\n+run_CharUtils_isAsciiNumeric: 4,545 milliseconds.\n+run_inlined_CharUtils_isAsciiNumeric: 3,417 milliseconds.\n+run_inlined_CharUtils_isAsciiNumeric: 85,679 milliseconds.\n+\n+\n+Now: Thu Mar 18 14:24:51 PST 2004\n+Sun Microsystems Inc. Java(TM) 2 Runtime Environment, Standard Edition 1.4.2_04-b05\n+Sun Microsystems Inc. Java HotSpot(TM) Client VM 1.4.2_04-b05\n+Windows XP 5.1 x86 pentium i486 i386\n+Do nohting: 0 milliseconds.\n+run_CharUtils_isAsciiNumeric: 2,578 milliseconds.\n+run_inlined_CharUtils_isAsciiNumeric: 2,477 milliseconds.\n+run_inlined_CharUtils_isAsciiNumeric: 114,429 milliseconds.\n+\n+Now: Thu Mar 18 14:27:55 PST 2004\n+Sun Microsystems Inc. Java(TM) 2 Runtime Environment, Standard Edition 1.4.2_04-b05\n+Sun Microsystems Inc. Java HotSpot(TM) Server VM 1.4.2_04-b05\n+Windows XP 5.1 x86 pentium i486 i386\n+Do nohting: 0 milliseconds.\n+run_CharUtils_isAsciiNumeric: 630 milliseconds.\n+run_inlined_CharUtils_isAsciiNumeric: 709 milliseconds.\n+run_inlined_CharUtils_isAsciiNumeric: 84,420 milliseconds.\n+\n+\n+ * @version $Id: CharUtilsPerfTest.java,v 1.1 2004/03/18 22:37:39 ggregory Exp $\n+ */\n+public class CharUtilsPerfTest {\n+    final static String VERSION = \"$Id: CharUtilsPerfTest.java,v 1.1 2004/03/18 22:37:39 ggregory Exp $\";\n+\n+    final static int WARM_UP = 100;\n+\n+    final static int COUNT = 5000;\n+\n+    final static char[] CHAR_SAMPLES;\n+    static {\n+        CHAR_SAMPLES = new char[Character.MAX_VALUE];\n+        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {\n+            CHAR_SAMPLES[i] = i;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        new CharUtilsPerfTest().run();\n+    }\n+\n+    private void printSysInfo() {\n+        System.out.println(VERSION);\n+        System.out.println(\"Now: \" + Calendar.getInstance().getTime());\n+        System.out.println(System.getProperty(\"java.vendor\")\n+                + \" \"\n+                + System.getProperty(\"java.runtime.name\")\n+                + \" \"\n+                + System.getProperty(\"java.runtime.version\"));\n+        System.out.println(System.getProperty(\"java.vm.vendor\")\n+                + \" \"\n+                + System.getProperty(\"java.vm.name\")\n+                + \" \"\n+                + System.getProperty(\"java.vm.version\"));\n+        System.out.println(System.getProperty(\"os.name\")\n+            + \" \"\n+            + System.getProperty(\"os.version\")\n+            + \" \"\n+            + System.getProperty(\"os.arch\")\n+            + \" \"\n+            + System.getProperty(\"sun.cpu.isalist\"));\n+    }\n+\n+    private void run() {\n+        this.printSysInfo();\n+        long start;\n+        start = System.currentTimeMillis();\n+        this.printlnTotal(\"Do nohting\", start);\n+        //System.out.println(\"Warming up...\");\n+        run_CharUtils_isAsciiNumeric(WARM_UP);\n+        //System.out.println(\"Measuring...\");\n+        start = System.currentTimeMillis();\n+        run_CharUtils_isAsciiNumeric(COUNT);\n+        this.printlnTotal(\"run_CharUtils_isAsciiNumeric\", start);\n+        //System.out.println(\"Warming up...\");\n+        run_inlined_CharUtils_isAsciiNumeric(WARM_UP);\n+        //System.out.println(\"Measuring...\");\n+        start = System.currentTimeMillis();\n+        run_inlined_CharUtils_isAsciiNumeric(COUNT);\n+        this.printlnTotal(\"run_inlined_CharUtils_isAsciiNumeric\", start);\n+        //System.out.println(\"Warming up...\");\n+        run_CharSet(WARM_UP);\n+        //System.out.println(\"Measuring...\");\n+        start = System.currentTimeMillis();\n+        run_CharSet(COUNT);\n+        this.printlnTotal(\"run_inlined_CharUtils_isAsciiNumeric\", start);\n+    }\n+\n+    private int run_CharSet(int loopCount) {\n+        int t = 0;\n+        for (int i = 0; i < loopCount; i++) {\n+            for (int j = 0; j < CHAR_SAMPLES.length; j++) {\n+                char ch = CHAR_SAMPLES[j];\n+                boolean b = CharSet.ASCII_NUMERIC.contains(ch);\n+                t += b ? 1 : 0;\n+            }\n+        }\n+        return t;\n+    }\n+\n+    private int run_CharUtils_isAsciiNumeric(int loopCount) {\n+        int t = 0;\n+        for (int i = 0; i < loopCount; i++) {\n+            for (int j = 0; j < CHAR_SAMPLES.length; j++) {\n+                char ch = CHAR_SAMPLES[j];\n+                boolean b = CharUtils.isAsciiNumeric(ch);\n+                t += b ? 1 : 0;\n+            }\n+        }\n+        return t;\n+    }\n+\n+    private int run_inlined_CharUtils_isAsciiNumeric(int loopCount) {\n+        int t = 0;\n+        for (int i = 0; i < loopCount; i++) {\n+            for (int j = 0; j < CHAR_SAMPLES.length; j++) {\n+                char ch = CHAR_SAMPLES[j];\n+                boolean b = (ch >= '0' && ch <= '9');\n+                t += b ? 1 : 0;\n+            }\n+        }\n+        return t;\n+    }\n+\n+    private void printlnTotal(String prefix, long start) {\n+        long total = System.currentTimeMillis() - start;\n+        System.out.println(prefix + \": \" + NumberFormat.getInstance().format(total) + \" milliseconds.\");\n+    }\n+}", "timestamp": 1079649459, "metainfo": ""}