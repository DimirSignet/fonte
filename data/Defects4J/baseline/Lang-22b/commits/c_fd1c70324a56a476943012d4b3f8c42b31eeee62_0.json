{"sha": "fd1c70324a56a476943012d4b3f8c42b31eeee62", "log": "provide read access to the registered listener instances  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n+++ b/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n \n package org.apache.commons.lang3.event;\n \n+import java.lang.reflect.Array;\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n     private final L proxy;\n \n     /**\n+     * Empty typed array for #getListeners().\n+     */\n+    private final L[] prototypeArray;\n+\n+    /**\n      * Creates an EventListenerSupport object which supports the specified \n      * listener type.\n      *\n         proxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader, \n                 new Class[]{listenerInterface},\n                 new ProxyInvocationHandler()));\n+        @SuppressWarnings(\"unchecked\")\n+        final L[] prototypeArray = (L[]) Array.newInstance(listenerInterface, 0);\n+        this.prototypeArray = prototypeArray;\n     }\n \n     /**\n     {\n         Validate.notNull(listener, \"Listener object cannot be null.\");\n         listeners.remove(listener);\n+    }\n+\n+    /**\n+     * Get an array containing the currently registered listeners.\n+     * Modification to this array's elements will have no effect on the\n+     * {@link EventListenerSupport} instance.\n+     * @return L[]\n+     */\n+    public L[] getListeners() {\n+        return listeners.toArray(prototypeArray);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java\n+++ b/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java\n import java.awt.event.ActionListener;\n import java.util.ArrayList;\n import java.util.List;\n+\n+import org.easymock.EasyMock;\n \n /**\n  * @since 3.0\n         assertEquals(listenerSupport.getListenerCount(), 0);\n     }\n \n+    public void testGetListeners() {\n+        final EventListenerSupport<ActionListener> listenerSupport = EventListenerSupport.create(ActionListener.class);\n+\n+        ActionListener[] listeners = listenerSupport.getListeners();\n+        assertEquals(0, listeners.length);\n+        ActionListener[] empty = listeners;\n+        //for fun, show that the same empty instance is used \n+        assertSame(empty, listenerSupport.getListeners());\n+\n+        ActionListener listener1 = EasyMock.createNiceMock(ActionListener.class);\n+        listenerSupport.addListener(listener1);\n+        assertEquals(1, listenerSupport.getListeners().length);\n+        assertEquals(ActionListener.class, listenerSupport.getListeners().getClass().getComponentType());\n+        ActionListener listener2 = EasyMock.createNiceMock(ActionListener.class);\n+        listenerSupport.addListener(listener2);\n+        assertEquals(2, listenerSupport.getListeners().length);\n+        listenerSupport.removeListener(listener1);\n+        assertEquals(1, listenerSupport.getListeners().length);\n+        listenerSupport.removeListener(listener2);\n+        assertSame(empty, listenerSupport.getListeners());\n+    }\n+\n     private void addDeregisterListener(final EventListenerSupport<ActionListener> listenerSupport)\n     {\n         listenerSupport.addListener(new ActionListener()", "timestamp": 1282166885, "metainfo": ""}