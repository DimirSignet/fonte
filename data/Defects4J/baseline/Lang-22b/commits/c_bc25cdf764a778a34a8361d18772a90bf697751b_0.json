{"sha": "bc25cdf764a778a34a8361d18772a90bf697751b", "log": "Fix DateUtils.truncate oddity at the far end of the Date spectrum bug 31395, from Marc Portier   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 2.0\n- * @version $Id: DateUtils.java,v 1.33 2004/10/16 17:08:42 scolebourne Exp $\n+ * @version $Id: DateUtils.java,v 1.34 2004/10/16 17:43:05 scolebourne Exp $\n  */\n public class DateUtils {\n     \n      *  or <code>SEMI_MONTH</code>\n      * @return the rounded date\n      * @throws IllegalArgumentException if the date is <code>null</code>\n+     * @throws ArithmeticException if the year is over 280 million\n      */\n     public static Date round(Date date, int field) {\n         if (date == null) {\n      *  or <code>SEMI_MONTH</code>\n      * @return the rounded date (a different object)\n      * @throws IllegalArgumentException if the date is <code>null</code>\n+     * @throws ArithmeticException if the year is over 280 million\n      */\n     public static Calendar round(Calendar date, int field) {\n         if (date == null) {\n      * @throws IllegalArgumentException if the date is <code>null</code>\n      * @throws ClassCastException if the object type is not a <code>Date</code>\n      *  or <code>Calendar</code>\n+     * @throws ArithmeticException if the year is over 280 million\n      */\n     public static Date round(Object date, int field) {\n         if (date == null) {\n      *  or <code>SEMI_MONTH</code>\n      * @return the rounded date\n      * @throws IllegalArgumentException if the date is <code>null</code>\n+     * @throws ArithmeticException if the year is over 280 million\n      */\n     public static Date truncate(Date date, int field) {\n         if (date == null) {\n      *  or <code>SEMI_MONTH</code>\n      * @return the rounded date (a different object)\n      * @throws IllegalArgumentException if the date is <code>null</code>\n+     * @throws ArithmeticException if the year is over 280 million\n      */\n     public static Calendar truncate(Calendar date, int field) {\n         if (date == null) {\n      *  is <code>null</code>\n      * @throws ClassCastException if the object type is not a\n      *  <code>Date</code> or <code>Calendar</code>\n+     * @throws ArithmeticException if the year is over 280 million\n      */\n     public static Date truncate(Object date, int field) {\n         if (date == null) {\n      * @param val  the calendar\n      * @param field  the field constant\n      * @param round  true to round, false to truncate\n+     * @throws ArithmeticException if the year is over 280 million\n      */\n     private static void modify(Calendar val, int field, boolean round) {\n+        if (val.get(Calendar.YEAR) > 280000000) {\n+            throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n+        }\n+        \n         boolean roundUp = false;\n         for (int i = 0; i < fields.length; i++) {\n             for (int j = 0; j < fields[i].length; j++) {\n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n                 DateUtils.truncate((Object) cal8, Calendar.DATE));\n         TimeZone.setDefault(defaultZone);\n         dateTimeParser.setTimeZone(defaultZone);\n+        \n+        // Bug 31395, large dates\n+        Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis\n+        GregorianCalendar endCal = new GregorianCalendar();\n+        endCal.setTime(endOfTime);\n+        try {\n+            DateUtils.truncate(endCal, Calendar.DATE);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        endCal.set(Calendar.YEAR, 280000001);\n+        try {\n+            DateUtils.truncate(endCal, Calendar.DATE);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        endCal.set(Calendar.YEAR, 280000000);\n+        Calendar cal = DateUtils.truncate(endCal, Calendar.DATE);\n+        assertEquals(0, cal.get(Calendar.HOUR));\n     }\n \n     /**", "timestamp": 1097948585, "metainfo": ""}