{"sha": "81903abbb25ff92597d5f1e3acc648d12bdee444", "log": "Fixing NumberUtils.isNumber so that 1.1L is not considered a number. LANG-664  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n             }\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n-                // not allowing L with an exponent\n-                return foundDigit && !hasExp;\n+                // not allowing L with an exponent or decimal point\n+                return foundDigit && !hasExp && !hasDecPoint;\n             }\n             // last character is illegal\n             return false;\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n         // LANG-521\n         val = \"2.\";\n         assertTrue(\"isNumber(String) LANG-521 failed\", NumberUtils.isNumber(val));\n+\n+        // LANG-664\n+        val = \"1.1L\";\n+        assertFalse(\"isNumber(String) LANG-664 failed\", NumberUtils.isNumber(val));\n     }\n \n     private boolean checkCreateNumber(String val) {", "timestamp": 1293865019, "metainfo": ""}