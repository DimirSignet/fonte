<b>What steps will reproduce the problem?</b>
1. Run:
var x = &quot;\u00003&quot;; if (x.length &lt; 2) { alert(&quot;fail&quot;); } else { alert(&quot;win&quot;); }
2. Compile and run

<b>What is the expected output? What do you see instead?</b>
&quot;win&quot; is expected. &quot;fail&quot; is observed

<b>What version of the product are you using? On what operating system?</b>
r1167 on OS x 10.6

<b>Please provide any additional information below.</b>
The problem is here: http://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/javascript/jscomp/CodeGenerator.java#1015

Here's a patch that fixes it:
$ svn diff
Index: src/com/google/javascript/jscomp/CodeGenerator.java
===================================================================
--- src/com/google/javascript/jscomp/CodeGenerator.java	(revision 1167)
+++ src/com/google/javascript/jscomp/CodeGenerator.java	(working copy)
@@ -1012,7 +1012,7 @@
     for (int i = 0; i &lt; s.length(); i++) {
       char c = s.charAt(i);
       switch (c) {
-        case '\0': sb.append(&quot;\\0&quot;); break;
+        case '\0': sb.append(&quot;\\000&quot;); break;
         case '\n': sb.append(&quot;\\n&quot;); break;
         case '\r': sb.append(&quot;\\r&quot;); break;
         case '\t': sb.append(&quot;\\t&quot;); break;

You could also lookahead and output &quot;\\000&quot; only if the following char is 0-7 (octal valid) and otherwise output &quot;\\0&quot;. Is 2 bytes worth the complexity?