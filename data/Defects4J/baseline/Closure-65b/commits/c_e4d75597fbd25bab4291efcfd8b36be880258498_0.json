{"sha": "e4d75597fbd25bab4291efcfd8b36be880258498", "log": "Update passes to use the pass private mayHaveSideEffects call.  R=dcc DELTA=7  (0 added, 0 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=89005   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n     // TODO(johnlenz) Use type information if available to fold\n     // instanceof.\n     if (NodeUtil.isLiteralValue(left, true)\n-        && !NodeUtil.mayHaveSideEffects(right)) {\n+        && !mayHaveSideEffects(right)) {\n \n       Node replacementNode = null;\n \n       return n;\n     }\n \n-    if (NodeUtil.mayHaveSideEffects(left)) {\n+    if (mayHaveSideEffects(left)) {\n       return n;\n     }\n \n           // If x has no side-effects:\n           //   (x || TRUE) => TRUE\n           //   (x && FALSE) => FALSE\n-          if (!NodeUtil.mayHaveSideEffects(left)) {\n+          if (!mayHaveSideEffects(left)) {\n             result = right;\n           }\n         }\n       int knownLength = -1;\n       switch (left.getType()) {\n         case Token.ARRAYLIT:\n-          if (NodeUtil.mayHaveSideEffects(left)) {\n+          if (mayHaveSideEffects(left)) {\n             // Nope, can't fold this, without handling the side-effects.\n             return n;\n           }\n--- a/src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java\n     // We'll let PeepholeFoldConstants handle folding literals\n     // and we can't remove arguments with possible side effects.\n     if (!NodeUtil.isLiteralValue(argumentNode, true) &&\n-        !NodeUtil.mayHaveSideEffects(argumentNode)) {\n+        !mayHaveSideEffects(argumentNode)) {\n       JSType argumentType = argumentNode.getJSType();\n             \n       String typeName = null;\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n       switch (result.getType()) {\n         case Token.VOID:\n           Node operand = result.getFirstChild();\n-          if (!NodeUtil.mayHaveSideEffects(operand)) {\n+          if (!mayHaveSideEffects(operand)) {\n             n.removeFirstChild();\n             reportCodeChange();\n           }\n               // evaluates LHS before cond]\n               // NOTE - there are some circumstances where we can\n               // proceed even if there are side effects...\n-              !NodeUtil.mayEffectMutableState(lhs)) {\n+              !mayEffectMutableState(lhs)) {\n \n             n.removeChild(cond);\n             Node assignName = thenOp.removeFirstChild();", "timestamp": 1280940416, "metainfo": ""}