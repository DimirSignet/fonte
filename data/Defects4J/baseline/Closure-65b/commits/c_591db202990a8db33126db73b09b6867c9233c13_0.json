{"sha": "591db202990a8db33126db73b09b6867c9233c13", "log": "Add support for a DEBUGGER statement in the validator. Add a basic unit test.  R=acleung DELTA=148  (145 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1369   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AstValidator.java\n+++ b/src/com/google/javascript/jscomp/AstValidator.java\n   // * optionally verify every node has an assigned JSType\n   //\n \n-  interface ViolationHandler {\n+  public interface ViolationHandler {\n     void handleViolation(String message, Node n);\n   }\n \n   private final ViolationHandler violationHandler;\n \n-  AstValidator(ViolationHandler handler) {\n+  public AstValidator(ViolationHandler handler) {\n     this.violationHandler = handler;\n   }\n \n-  AstValidator() {\n+  public AstValidator() {\n     this.violationHandler = new ViolationHandler() {\n       @Override\n       public void handleViolation(String message, Node n) {\n         validateContinue(n);\n         return;\n       case Token.EMPTY:\n+        validateChildless(n);\n+        return;\n+      case Token.DEBUGGER:\n+        validateChildless(n);\n         return;\n       default:\n         violation(\"Expected statement but was \"\n--- /dev/null\n+++ b/test/com/google/javascript/jscomp/AstValidatorTest.java\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.jscomp.AstValidator.ViolationHandler;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+\n+/**\n+ * @author johnlenz@google.com (John Lenz)\n+ */\n+public class AstValidatorTest extends CompilerTestCase {\n+\n+  private boolean lastCheckWasValid = true;\n+\n+  @Override\n+  protected CompilerPass getProcessor(Compiler compiler) {\n+    return createValidator();\n+  }\n+\n+  private AstValidator createValidator() {\n+    lastCheckWasValid = true;\n+    return new AstValidator(new ViolationHandler() {\n+      @Override\n+      public void handleViolation(String message, Node n) {\n+        lastCheckWasValid = false;\n+      }\n+    });\n+  }\n+\n+  @Override\n+  protected int getNumRepetitions() {\n+    return 1;\n+  }\n+\n+  @Override\n+  protected void setUp() throws Exception {\n+    super.enableAstValidation(false);\n+    super.disableNormalize();\n+    super.enableLineNumberCheck(false);\n+    super.setUp();\n+  }\n+\n+  public void testForIn() {\n+    valid(\"for(var a in b);\");\n+    valid(\"for(var a = 1 in b);\");\n+    valid(\"for(a in b);\");\n+    valid(\"for(a in []);\");\n+    valid(\"for(a in {});\");\n+  }\n+\n+  public void testDebugger() {\n+    valid(\"debugger;\");\n+  }\n+\n+  public void testValidScript() {\n+    Node n = new Node(Token.SCRIPT);\n+    n.setIsSyntheticBlock(true);\n+    expectInvalid(n, Check.EXPRESSION);\n+    expectInvalid(n, Check.STATEMENT);\n+    expectValid(n, Check.SCRIPT);\n+  }\n+\n+  public void testValidStatement1() {\n+    Node n = new Node(Token.RETURN);\n+    expectInvalid(n, Check.EXPRESSION);\n+    expectValid(n, Check.STATEMENT);\n+    expectInvalid(n, Check.SCRIPT);\n+  }\n+\n+  public void testValidExpression1() {\n+    Node n = new Node(Token.ARRAYLIT, new Node(Token.EMPTY));\n+    expectValid(n, Check.EXPRESSION);\n+    expectInvalid(n, Check.STATEMENT);\n+    expectInvalid(n, Check.SCRIPT);\n+  }\n+\n+  public void testValidExpression2() {\n+    Node n = new Node(Token.NOT, new Node(Token.TRUE));\n+    expectValid(n, Check.EXPRESSION);\n+    expectInvalid(n, Check.STATEMENT);\n+    expectInvalid(n, Check.SCRIPT);\n+  }\n+\n+  public void testInvalidEmptyStatement() {\n+    Node n = new Node(Token.EMPTY, new Node(Token.TRUE));\n+    expectInvalid(n, Check.STATEMENT);\n+    n.detachChildren();\n+    expectValid(n, Check.STATEMENT);\n+  }\n+\n+  private void valid(String code) {\n+    testSame(code);\n+    assertTrue(lastCheckWasValid);\n+  }\n+\n+  private enum Check {\n+    SCRIPT,\n+    STATEMENT,\n+    EXPRESSION\n+  }\n+\n+  private boolean doCheck(Node n, Check level) {\n+    AstValidator validator = createValidator();\n+    switch (level) {\n+      case SCRIPT:\n+        validator.validateScript(n);\n+        break;\n+      case STATEMENT:\n+        validator.validateStatement(n);\n+        break;\n+      case EXPRESSION:\n+        validator.validateExpression(n);\n+        break;\n+    }\n+    return lastCheckWasValid;\n+  }\n+\n+  private void expectInvalid(Node n, Check level) {\n+    assertFalse(doCheck(n, level));\n+  }\n+\n+  private void expectValid(Node n, Check level) {\n+    assertTrue(doCheck(n, level));\n+  }\n+}", "timestamp": 1302630219, "metainfo": ""}