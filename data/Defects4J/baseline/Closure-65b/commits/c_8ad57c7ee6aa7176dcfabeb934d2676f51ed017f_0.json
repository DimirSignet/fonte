{"sha": "8ad57c7ee6aa7176dcfabeb934d2676f51ed017f", "log": "Verify that rhino understand casting of object literals.  R=nicksantos DELTA=87  (87 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=60   ", "commit": "\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n   public void testCast8() throws Exception {\n     testTypes(\"function f() { return /** @type {foo} */ (new Object()); }\",\n         \"Parse error. Unknown type foo\");\n+  }\n+\n+  public void testCast9() throws Exception {\n+    testTypes(\"var foo = {};\" +\n+        \"function f() { return /** @type {foo} */ (new Object()); }\",\n+        \"Parse error. Unknown type foo\");\n+  }\n+\n+  public void testCast10() throws Exception {\n+    testTypes(\"var foo = function() {};\" +\n+        \"function f() { return /** @type {foo} */ (new Object()); }\",\n+        \"Parse error. Unknown type foo\");\n+  }\n+\n+  public void testCast11() throws Exception {\n+    testTypes(\"var goog = {}; goog.foo = {};\" +\n+        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n+        \"Parse error. Unknown type goog.foo\");\n+  }\n+\n+  public void testCast12() throws Exception {\n+    testTypes(\"var goog = {}; goog.foo = function() {};\" +\n+        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n+        \"Parse error. Unknown type goog.foo\");\n+  }\n+\n+  public void testCast13() throws Exception {\n+    // Test to make sure that the forward-declaration still allows for\n+    // a warning.\n+    testClosureTypes(\"var goog = {}; \" +\n+        \"goog.addDependency('zzz.js', ['goog.foo'], []);\" +\n+        \"goog.foo = function() {};\" +\n+        \"function f() { return /** @type {goog.foo} */ (new Object()); }\",\n+        \"Parse error. Unknown type goog.foo\");\n+  }\n+\n+  public void testCast14() throws Exception {\n+    // Test to make sure that the forward-declaration still prevents\n+    // some warnings.\n+    testClosureTypes(\"var goog = {}; \" +\n+        \"goog.addDependency('zzz.js', ['goog.bar'], []);\" +\n+        \"function f() { return /** @type {goog.bar} */ (new Object()); }\",\n+        null);\n+  }\n+\n+  public void testCast15() throws Exception {\n+    // This fixes a bug where a type cast on an object literal\n+    // would cause a runtime cast exception if the node was visited\n+    // more than once.\n+    //\n+    // Some code assumes that an object literal must have a object type,\n+    // while because of the cast, it could have any type (including\n+    // a union).\n+    testTypes(\n+        \"for (var i = 0; i < 10; i++) {\" +\n+          \"var x = /** @type {Object|number} */ ({foo: 3});\" +\n+          \"/** @param {boolean} x */ function f(x) {}\" +\n+          \"f(x.foo);\" +\n+          \"f([].foo);\" +\n+        \"}\",\n+        \"Property foo never defined on Array\");\n+  }\n+\n+  public void testCast16() throws Exception {\n+    // Mostly verifying that rhino actually understands these JsDocs.\n+    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n+        \"/** @type {Foo} */ var x = /** @type {Foo} */ ({})\");\n+\n+    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n+        \"/** @type {Foo} */ var x = (/** @type {Foo} */ {})\");\n+\n+    // Not really encourage because of possible ambiguity but it works.\n+    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n+        \"/** @type {Foo} */ var x = /** @type {Foo} */ {}\");\n   }\n \n   public void testNestedCasts() throws Exception {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n           \"f([].foo);\" +\n         \"}\",\n         \"Property foo never defined on Array\");\n+  }\n+\n+  public void testCast16() throws Exception {\n+    // Mostly verifying that rhino actually understands these JsDocs.\n+    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n+        \"/** @type {Foo} */ var x = /** @type {Foo} */ ({})\");\n+\n+    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n+        \"/** @type {Foo} */ var x = (/** @type {Foo} */ {})\");\n+\n+    // Not really encourage because of possible ambiguity but it works.\n+    testTypes(\"/** @constructor */ function Foo() {} \\n\" +\n+        \"/** @type {Foo} */ var x = /** @type {Foo} */ {}\");\n   }\n \n   public void testNestedCasts() throws Exception {", "timestamp": 1291658102, "metainfo": ""}