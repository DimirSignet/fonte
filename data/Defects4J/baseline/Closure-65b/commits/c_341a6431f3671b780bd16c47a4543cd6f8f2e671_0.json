{"sha": "341a6431f3671b780bd16c47a4543cd6f8f2e671", "log": "More missed IF-ElSE folding.  R=johnlenz DELTA=36  (10 added, 5 deleted, 21 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=557   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n \n             return expr;\n           }\n-        } else if (NodeUtil.isCall(thenOp)) {\n-          // if(x)foo();else bar(); -> x?foo():bar()\n-          n.removeChild(cond);\n-          thenOp.detachFromParent();\n-          elseOp.detachFromParent();\n-          Node hookNode = new Node(Token.HOOK, cond, thenOp, elseOp)\n-                              .copyInformationFrom(n);\n-          Node expr = NodeUtil.newExpr(hookNode);\n-          parent.replaceChild(n, expr);\n-          reportCodeChange();\n-\n-          return expr;\n-        }\n-      }\n-      return n;\n+        }\n+      }\n+      // if(x)foo();else bar(); -> x?foo():bar()\n+      n.removeChild(cond);\n+      thenOp.detachFromParent();\n+      elseOp.detachFromParent();\n+      Node hookNode = new Node(Token.HOOK, cond, thenOp, elseOp)\n+                          .copyInformationFrom(n);\n+      Node expr = NodeUtil.newExpr(hookNode);\n+      parent.replaceChild(n, expr);\n+      reportCodeChange();\n+      return expr;\n     }\n \n     boolean thenBranchIsVar = isVarBlock(thenBranch);\n--- a/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n \n      fold(\"if(x()){} else {x()}\", \"x()||x()\");\n      fold(\"if(x){}\", \"\"); // Even the condition has no side effect.\n-     fold(\"if(a()){A()} else if (b()) {} else {C()}\",\n-          \"if(a())A();else b()||C()\");\n+     fold(\"if(a()){A()} else if (b()) {} else {C()}\", \"a()?A():b()||C()\");\n \n      fold(\"if(a()){} else if (b()) {} else {C()}\",\n           \"a()||b()||C()\");\n      fold(\"if(a()){A()} else if (b()) {} else if (c()) {} else{D()}\",\n-          \"if(a())A();else b()||c()||D()\");\n+          \"a()?A():b()||c()||D()\");\n      fold(\"if(a()){} else if (b()) {} else if (c()) {} else{D()}\",\n           \"a()||b()||c()||D()\");\n      fold(\"if(a()){A()} else if (b()) {} else if (c()) {} else{}\",\n-          \"if(a())A();else b()||c()\");\n+          \"a()?A():b()||c()\");\n \n      // Verify that non-global scope works.\n      fold(\"function foo(){if(x()){}}\", \"function foo(){x()}\");\n--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n     fold(\"function f(){if(x){if(y)foo();else bar()}}\",\n          \"function f(){x&&(y?foo():bar())}\");\n     fold(\"function f(){if(x){if(y)foo()}else bar()}\",\n-         \"function f(){if(x)y&&foo();else bar()}\");\n+         \"function f(){x?y&&foo():bar()}\");\n     fold(\"function f(){if(x){if(y)foo();else bar()}else{baz()}}\",\n-         \"function f(){if(x)y?foo():bar();else baz()}\");\n+         \"function f(){x?y?foo():bar():baz()}\");\n \n     fold(\"if(e1){while(e2){if(e3){foo()}}}else{bar()}\",\n          \"if(e1)while(e2)e3&&foo();else bar()\");\n     fold(\"function f(){if(x)y|=1;else y|=2;}\", \"function f(){y|=x?1:2}\");\n \n     // sanity check, don't fold if the 2 ops don't match\n-    foldSame(\"function f(){if(x)y-=1;else y+=2}\");\n+    foldSame(\"function f(){x ? y-=1 : y+=2}\");\n \n     // sanity check, don't fold if the 2 LHS don't match\n-    foldSame(\"function f(){if(x)y-=1;else z-=1}\");\n+    foldSame(\"function f(){x ? y-=1 : z-=1}\");\n \n     // sanity check, don't fold if there are potential effects\n-    foldSame(\"function f(){if(x)y().a=3;else y().a=4}\");\n+    foldSame(\"function f(){x ? y().a=3 : y().a=4}\");\n   }\n \n   public void testRemoveDuplicateStatements() {\n   public void testNotCond() {\n     fold(\"function f(){if(!x)foo()}\", \"function f(){x||foo()}\");\n     fold(\"function f(){if(!x)b=1}\", \"function f(){x||(b=1)}\");\n-    fold(\"if(!x)z=1;else if(y)z=2\", \"if(x){y&&(z=2)}else z=1\");\n+    fold(\"if(!x)z=1;else if(y)z=2\", \"x ? y&&(z=2) : z=1\");\n     foldSame(\"function f(){if(!(x=1))a.b=1}\");\n   }\n \n     fold(\"if (f) { f.bonchange(); }\", \"f && f.bonchange();\");\n     foldSame(\"if (f) { f['x'](); }\");\n   }\n-\n   public void testUndefined() {\n     foldSame(\"var x = undefined\");\n     foldSame(\"function f(f) {var undefined=2;var x = undefined;}\");\n         \"var undefined = 1;\" +\n         \"function f() {var undefined=2;var x = undefined;}\");\n   }\n+\n+  public void testFoldIfAfterStatementFusion() {\n+    fold(\"if (x) { a,b,c } else { d,c,e }\", \"x ? (a,b,c) : (d,c,e)\");\n+    fold(\"if (x) { a() && b() } else { c() && d () }\",\n+         \"x ? a() && b() : c() && d () \");\n+    fold(\"if (x) { (a(),a()) && b() } else { d() }\",\n+         \"x ? (a(),a()) && b() : d () \");\n+    fold(\"if (x) { (a(),a()) && b() } else { (c(),c()) && d () }\",\n+         \"x ? (a(),a()) && b() : (c(),c()) && d () \");\n+  }\n }", "timestamp": 1298012815, "metainfo": ""}