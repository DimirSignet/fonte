{"sha": "a642d2adbc3e58512c9425f507b77a3a8c16c793", "log": "Rhino supports 2 error reporter apis: the old one (which uses line/column), and an IdeErrorReporter (which uses source offset).  The IdeErrorReporter exposes more accurate information about the error (mostly because the people building IDEs care more about this), so let's use that one when it's available.  R=acleung DELTA=83  (67 added, 1 deleted, 15 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4639   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCompiler.java\n+++ b/src/com/google/javascript/jscomp/AbstractCompiler.java\n   // CompilerPass's constructor.\n \n   /**\n-   * Looks up an input (possibly an externs input) by name. May return null.\n+   * Looks up an input (possibly an externs input) by input id.\n+   * May return null.\n    */\n   public abstract CompilerInput getInput(InputId inputId);\n+\n+  /**\n+   * Looks up a source file by name. May return null.\n+   */\n+  abstract SourceFile getSourceFileByName(String sourceName);\n \n   /**\n    * Creates a new externs file.\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     logger.fine(str);\n   }\n \n-  private SourceFile getSourceFileByName(String sourceName) {\n+  @Override\n+  SourceFile getSourceFileByName(String sourceName) {\n     // Here we assume that the source name is the input name, this\n     // is try of javascript parsed from source.\n     if (sourceName != null) {\n--- a/src/com/google/javascript/jscomp/JSError.java\n+++ b/src/com/google/javascript/jscomp/JSError.java\n   }\n \n   /**\n+   * Get the line number. One-based.\n+   */\n+  public int getLineNumber() {\n+    return lineNumber;\n+  }\n+\n+  /**\n    * @return the offset of the region the Error applies to, or -1 if the offset\n    *         is unknown.\n    */\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n   // A map of Rhino messages to their DiagnosticType.\n   private final Map<Pattern, DiagnosticType> typeMap;\n \n-  private final AbstractCompiler compiler;\n+  final AbstractCompiler compiler;\n \n   /**\n    * For each message such as \"Not a good use of {0}\", replace the place\n     return new OldRhinoErrorReporter(compiler);\n   }\n \n-  public void warning(String message, String sourceName, int line,\n+  void warningAtLine(String message, String sourceName, int line,\n       int lineOffset) {\n     compiler.report(\n         makeError(message, sourceName, line, lineOffset, CheckLevel.WARNING));\n   }\n \n-  public void error(String message, String sourceName, int line,\n+  void errorAtLine(String message, String sourceName, int line,\n       int lineOffset) {\n     compiler.report(\n         makeError(message, sourceName, line, lineOffset, CheckLevel.ERROR));\n     private OldRhinoErrorReporter(AbstractCompiler compiler) {\n       super(compiler);\n     }\n+\n+    @Override\n+    public void error(String message, String sourceName, int line,\n+        int lineOffset) {\n+      super.errorAtLine(message, sourceName, line, lineOffset);\n+    }\n+\n+    @Override\n+    public void warning(String message, String sourceName, int line,\n+        int lineOffset) {\n+      super.warningAtLine(message, sourceName, line, lineOffset);\n+    }\n   }\n \n   private static class NewRhinoErrorReporter extends RhinoErrorReporter\n-      implements com.google.javascript.rhino.head.ErrorReporter {\n+      implements com.google.javascript.rhino.head.ast.IdeErrorReporter {\n \n     private NewRhinoErrorReporter(AbstractCompiler compiler) {\n       super(compiler);\n     @Override\n     public void error(String message, String sourceName, int line,\n         String sourceLine, int lineOffset) {\n-      super.error(message, sourceName, line, lineOffset);\n+      super.errorAtLine(message, sourceName, line, lineOffset);\n+    }\n+\n+    @Override\n+    public void error(String message, String sourceName,\n+        int offset, int length) {\n+      int line = 1;\n+      int column = 0;\n+      SourceFile file = this.compiler.getSourceFileByName(sourceName);\n+      if (file != null) {\n+        line = file.getLineOfOffset(offset);\n+        column = file.getColumnOfOffset(offset);\n+      }\n+      super.errorAtLine(message, sourceName, line, column);\n     }\n \n     @Override\n     public void warning(String message, String sourceName, int line,\n         String sourceLine, int lineOffset) {\n-      super.warning(message, sourceName, line, lineOffset);\n+      super.warningAtLine(message, sourceName, line, lineOffset);\n+    }\n+\n+    @Override\n+    public void warning(String message, String sourceName,\n+        int offset, int length) {\n+      int line = 1;\n+      int column = 0;\n+      SourceFile file = this.compiler.getSourceFileByName(sourceName);\n+      if (file != null) {\n+        line = file.getLineOfOffset(offset);\n+        column = file.getColumnOfOffset(offset);\n+      }\n+      super.errorAtLine(message, sourceName, line, column);\n     }\n   }\n }\n--- a/test/com/google/javascript/jscomp/JsMessageExtractorTest.java\n+++ b/test/com/google/javascript/jscomp/JsMessageExtractorTest.java\n       extractMessage(\"\", \"if (true) {}}\");\n       fail(\"Expected exception\");\n     } catch (RuntimeException e) {\n-      assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));\n-      assertTrue(e.getMessage().contains(\n-          \"testcode:2: ERROR - Parse error. syntax error\\n\"));\n-      assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));\n+      assertTrue(\n+          e.getMessage(),\n+          e.getMessage().contains(\"JSCompiler errors\\n\"));\n+      assertTrue(\n+          e.getMessage(),\n+          e.getMessage().contains(\n+              \"testcode:2: ERROR - Parse error. syntax error\\n\"));\n+      assertTrue(\n+          e.getMessage(),\n+          e.getMessage().contains(\"if (true) {}}\\n\"));\n     }\n   }\n \n--- a/test/com/google/javascript/jscomp/RhinoErrorReporterTest.java\n+++ b/test/com/google/javascript/jscomp/RhinoErrorReporterTest.java\n         \"var x = [1,];\",\n         RhinoErrorReporter.TRAILING_COMMA,\n         message);\n-    assertError(\n-        \"var x = {1: 2,};\",\n+    JSError error = assertError(\n+        \"var x = {\\n\" +\n+        \"    1: 2,\\n\" +\n+        \"};\",\n         RhinoErrorReporter.TRAILING_COMMA,\n         message);\n+\n+    assertEquals(2, error.getLineNumber());\n+\n+    // Rhino uses the \"beginning\" of the line where the comma appears,\n+    // for some odd reason.\n+    assertEquals(4, error.getCharno());\n   }\n-\n \n   /**\n    * Verifies that the compiler emits an error for the given code.\n    */\n-  private void assertError(\n+  private JSError assertError(\n       String code, DiagnosticType type, String description) {\n     Compiler compiler = new Compiler();\n     List<SourceFile> externs = ImmutableList.of();\n         Iterables.getOnlyElement(Lists.newArrayList(compiler.getErrors()));\n     assertEquals(type, error.getType());\n     assertEquals(description, error.description);\n+    return error;\n   }\n }", "timestamp": 1335822628, "metainfo": ""}