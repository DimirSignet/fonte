{"sha": "b089412dba369d4d4defe6fc0b4a52ed58f06091", "log": "analyze recursive functions properly.  R=johnlenz DELTA=42  (22 added, 2 deleted, 18 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=676   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\n+++ b/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\n \n   /** move the code accordingly */\n   private void moveCode() {\n-    for (Map.Entry<Var, NamedInfo> e : namedInfo.entrySet()) {\n-      NamedInfo info = e.getValue();\n-\n+    for (NamedInfo info : namedInfo.values()) {\n       JSModule deepestDependency = info.deepestModule;\n \n       // Only move if all are true:\n \n       // CASE #1:\n       String scopeFuncName = rootNode.getFirstChild().getString();\n+      Node scopeFuncParent = rootNode.getParent();\n       if (scopeFuncName.equals(name)) {\n         recursive = true;\n-      }\n-\n-      // CASE #2:\n-\n-\n-      // Suppose name is Foo, we keep look up the scope stack to look for\n-      // a scope with \"Foo.prototype.bar = function() { ..... \"\n-      for  (Scope s = t.getScope(); s.getParent() != null; s = s.getParent()) {\n-        Node curRoot = s.getRootNode();\n-        if (curRoot.getParent().getType() == Token.ASSIGN) {\n-          Node owner = curRoot.getParent().getFirstChild();\n-          while (owner.getType() == Token.GETPROP) {\n-            owner = owner.getFirstChild();\n-          }\n-          if (owner.getType() == Token.NAME && owner.getString().equals(name)) {\n-            recursive = true;\n-            break;\n+      } else if (scopeFuncParent.getType() == Token.NAME &&\n+          scopeFuncParent.getString().equals(name)) {\n+        recursive = true;\n+      } else {\n+        // CASE #2:\n+        // Suppose name is Foo, we keep look up the scope stack to look for\n+        // a scope with \"Foo.prototype.bar = function() { ..... \"\n+        for (Scope s = t.getScope();\n+             s.getParent() != null; s = s.getParent()) {\n+          Node curRoot = s.getRootNode();\n+          if (curRoot.getParent().getType() == Token.ASSIGN) {\n+            Node owner = curRoot.getParent().getFirstChild();\n+            while (owner.getType() == Token.GETPROP) {\n+              owner = owner.getFirstChild();\n+            }\n+            if (owner.getType() == Token.NAME &&\n+                owner.getString().equals(name)) {\n+              recursive = true;\n+              break;\n+            }\n           }\n         }\n       }\n--- a/test/com/google/javascript/jscomp/CrossModuleCodeMotionTest.java\n+++ b/test/com/google/javascript/jscomp/CrossModuleCodeMotionTest.java\n       \"\",\n       // m2\n       \"function f(n){return (n<1)?1:f(n-1)}\" +\n+      \"var a = f(4);\",\n+    });\n+  }\n+\n+  public void testFunctionMovement5b() {\n+    // Try moving a recursive function declared differently.\n+    JSModule[] modules = createModuleStar(\n+      // m1\n+      \"var f = function(n){return (n<1)?1:f(n-1)};\",\n+      // m2\n+      \"var a = f(4);\"\n+    );\n+\n+    test(modules, new String[] {\n+      // m1\n+      \"\",\n+      // m2\n+      \"var f = function(n){return (n<1)?1:f(n-1)};\" +\n       \"var a = f(4);\",\n     });\n   }", "timestamp": 1298647831, "metainfo": ""}