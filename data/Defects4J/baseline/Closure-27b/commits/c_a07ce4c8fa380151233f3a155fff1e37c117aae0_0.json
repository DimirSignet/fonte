{"sha": "a07ce4c8fa380151233f3a155fff1e37c117aae0", "log": "Better error messaging about operators whose result is unused.  R=acleung DELTA=13  (12 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2507   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n         return;  // it might be ok to not have a side-effect\n       }\n     }\n-    if (NodeUtil.isSimpleOperatorType(n.getType()) ||\n+\n+    boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());\n+    if (isSimpleOp ||\n         !NodeUtil.mayHaveSideEffects(n, t.getCompiler())) {\n       if (n.isQualifiedName() && n.getJSDocInfo() != null) {\n         // This no-op statement was there so that JSDoc information could\n       String msg = \"This code lacks side-effects. Is there a bug?\";\n       if (n.getType() == Token.STRING) {\n         msg = \"Is there a missing '+' on the previous line?\";\n+      } else if (isSimpleOp) {\n+        msg = \"The result of the '\" + Node.tokenToName(n.getType()) +\n+            \"' operator is not being used.\";\n       }\n \n       t.getCompiler().report(\n--- a/test/com/google/javascript/jscomp/CheckSideEffectsTest.java\n+++ b/test/com/google/javascript/jscomp/CheckSideEffectsTest.java\n     test(\"(0, eval)('alert');\", ok);\n     test(\"(0, foo)('alert');\", e);\n   }\n+\n+  public void testIsue504() {\n+    test(\"void f();\", e);\n+    assertEquals(\n+        \"Suspicious code. The result of the 'void' operator is not being used.\",\n+        getLastCompiler().getErrorManager().getErrors()[0].description);\n+  }\n }", "timestamp": 1310008491, "metainfo": ""}