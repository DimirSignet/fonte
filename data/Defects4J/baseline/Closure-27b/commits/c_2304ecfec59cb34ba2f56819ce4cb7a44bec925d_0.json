{"sha": "2304ecfec59cb34ba2f56819ce4cb7a44bec925d", "log": "Advanced mode depends on source names being annotated on SCRIPT nodes to map them back to inputs in modules.  R=acleung DELTA=117  (68 added, 27 deleted, 22 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1780   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AstValidator.java\n+++ b/src/com/google/javascript/jscomp/AstValidator.java\n   public void validateScript(Node n) {\n     validateNodeType(Token.SCRIPT, n);\n     validateIsSynthetic(n);\n+    validateHasSourceName(n);\n     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n       validateStatement(c);\n     }\n     }\n   }\n \n+  private void validateHasSourceName(Node n) {\n+    String sourceName = (String) n.getProp(Node.SOURCENAME_PROP);\n+    if (sourceName == null || sourceName.isEmpty()) {\n+      violation(\"Missing 'source name' annotation.\", n);\n+    }\n+  }\n+\n   private void validateLabel(Node n) {\n     validateNodeType(Token.LABEL, n);\n     validateChildCount(n, 2);\n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n    *     appear in warning messages emitted by the compiler.\n    */\n   SourceFile(String fileName) {\n+    if (fileName == null || fileName.isEmpty()) {\n+      throw new IllegalArgumentException(\"a source must have a name\");\n+    }\n     this.fileName = fileName;\n     // Starting point: offset 0 is at line 1.\n     this.lastOffset = 0;\n--- a/src/com/google/javascript/jscomp/jsonml/JsonMLAst.java\n+++ b/src/com/google/javascript/jscomp/jsonml/JsonMLAst.java\n     translator.setRootElement(jsonml);\n     try {\n       root = translator.parse(compiler);\n+      root.putProp(Node.SOURCENAME_PROP, getSourceName());\n       new AstValidator().validateScript(root);\n     } catch (JsonMLException e) {\n       // compiler should already have JSErrors\n--- a/test/com/google/javascript/jscomp/AstValidatorTest.java\n+++ b/test/com/google/javascript/jscomp/AstValidatorTest.java\n \n   public void testValidScript() {\n     Node n = new Node(Token.SCRIPT);\n+    expectInvalid(n, Check.SCRIPT);\n     n.setIsSyntheticBlock(true);\n+    expectInvalid(n, Check.SCRIPT);\n+    n.putProp(Node.SOURCENAME_PROP, \"something\");\n+    expectValid(n, Check.SCRIPT);\n+    expectInvalid(n, Check.STATEMENT);\n     expectInvalid(n, Check.EXPRESSION);\n-    expectInvalid(n, Check.STATEMENT);\n-    expectValid(n, Check.SCRIPT);\n   }\n \n   public void testValidStatement1() {", "timestamp": 1304709074, "metainfo": ""}