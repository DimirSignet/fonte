{"sha": "5125d75104683c0e6b78dbfe4196e1919aedf3aa", "log": "Add a diagnostic group that can be used to control the duplicate message check.  R=tylerg,nicksantos DELTA=56  (43 added, 2 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3905   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     return input.getAstRoot(this);\n   }\n \n+  /**\n+   * Allow subclasses to override the default CompileOptions object.\n+   */\n+  protected CompilerOptions newCompilerOptions() {\n+    return new CompilerOptions();\n+  }\n+\n   void initCompilerOptionsIfTesting() {\n     if (options == null) {\n       // initialization for tests that don't initialize the compiler\n       // by the normal mechanisms.\n-      initOptions(new CompilerOptions());\n+      initOptions(newCompilerOptions());\n     }\n   }\n \n   @Override\n   public ErrorManager getErrorManager() {\n     if (options == null) {\n-      initOptions(new CompilerOptions());\n+      initOptions(newCompilerOptions());\n     }\n     return errorManager;\n   }\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n   // If a group is suppressable on a per-file basis, it should be added\n   // to parser/ParserConfig.properties\n   static final String DIAGNOSTIC_GROUP_NAMES =\n-      \"accessControls, ambiguousFunctionDecl, checkRegExp,\" +\n+      \"accessControls, ambiguousFunctionDecl, checkRegExp, \" +\n       \"checkTypes, checkVars, constantProperty, deprecated, \" +\n+      \"duplicateMessage, \" +\n       \"es5Strict, externsValidation, fileoverviewTags, globalThis, \" +\n       \"internetExplorerChecks, invalidCasts, missingProperties, \" +\n       \"nonStandardJsDocs, strictModuleDepCheck, typeInvalidation, \" +\n       DiagnosticGroups.registerGroup(\"checkProvides\",\n           CheckProvides.MISSING_PROVIDE_WARNING);\n \n+  public static DiagnosticGroup DUPLICATE_MESSAGE =\n+      DiagnosticGroups.registerGroup(\"duplicateMessage\",\n+          JsMessageVisitor.MESSAGE_DUPLICATE_KEY);\n+\n   /**\n    * Adds warning levels by name.\n    */\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n    */\n   protected abstract CompilerPass getProcessor(Compiler compiler);\n \n-  /**\n-   * Gets the compiler options to use for this test. Defaults to do nothing\n-   * options.\n-   *\n-   * This is really only for configuring warnings guards. Use getProcessor\n-   * to determine what passes should be run.\n+\n+  /**\n+   * Gets the compiler options to use for this test. Use getProcessor to\n+   * determine what passes should be run.\n    */\n   protected CompilerOptions getOptions() {\n-    CompilerOptions options = new CompilerOptions();\n-\n+    return getOptions(new CompilerOptions());\n+  }\n+\n+  /**\n+   * Gets the compiler options to use for this test. Use getProcessor to\n+   * determine what passes should be run.\n+   */\n+  protected CompilerOptions getOptions(CompilerOptions options) {\n     if (this.acceptES5) {\n       options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n     }", "timestamp": 1322778906, "metainfo": ""}