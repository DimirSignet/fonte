{"sha": "615db36c86e390bf58879acb118c499b68123825", "log": "Add support for Path element in sources Code review at: http://codereview.appspot.com/4942047  Fixes issue 535 Contibuted by jhansche  Revision created by MOE tool push_codebase.  R=bolinfest DELTA=72  (60 added, 0 deleted, 12 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3087   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ant/CompileTask.java\n+++ b/src/com/google/javascript/jscomp/ant/CompileTask.java\n import org.apache.tools.ant.Project;\n import org.apache.tools.ant.Task;\n import org.apache.tools.ant.types.FileList;\n+import org.apache.tools.ant.types.Path;\n \n import java.io.File;\n import java.io.FileOutputStream;\n   private File outputFile;\n   private final List<FileList> externFileLists;\n   private final List<FileList> sourceFileLists;\n+  private final List<Path> sourcePaths;\n \n   public CompileTask() {\n     this.warningLevel = WarningLevel.DEFAULT;\n     this.generateExports = false;\n     this.externFileLists = Lists.newLinkedList();\n     this.sourceFileLists = Lists.newLinkedList();\n+    this.sourcePaths = Lists.newLinkedList();\n   }\n \n   /**\n     this.sourceFileLists.add(list);\n   }\n \n+  /**\n+   * Adds a <path/> entry.\n+   */\n+  public void addPath(Path list) {\n+    this.sourcePaths.add(list);\n+  }\n+\n   public void execute() {\n     if (this.outputFile == null) {\n       throw new BuildException(\"outputFile attribute must be set\");\n       files.addAll(findJavaScriptFiles(list));\n     }\n \n+    for (Path list : this.sourcePaths) {\n+      files.addAll(findJavaScriptFiles(list));\n+    }\n+\n     return files.toArray(new JSSourceFile[files.size()]);\n   }\n \n \n     for (String included : fileList.getFiles(getProject())) {\n       files.add(JSSourceFile.fromFile(new File(baseDir, included),\n+          Charset.forName(encoding)));\n+    }\n+\n+    return files;\n+  }\n+\n+  /**\n+   * Translates an Ant Path into the file list format that the compiler\n+   * expects.\n+   */\n+  private List<JSSourceFile> findJavaScriptFiles(Path path) {\n+    List<JSSourceFile> files = Lists.newArrayList();\n+\n+    for (String included : path.list()) {\n+      files.add(JSSourceFile.fromFile(new File(included),\n           Charset.forName(encoding)));\n     }\n \n    */\n   private boolean isStale() {\n     long lastRun = outputFile.lastModified();\n-    long sourcesLastModified = getLastModifiedTime(this.sourceFileLists);\n+    long sourcesLastModified = Math.max(\n+        getLastModifiedTime(this.sourceFileLists),\n+        getLastModifiedTime(this.sourcePaths));\n     long externsLastModified = getLastModifiedTime(this.externFileLists);\n \n     return lastRun <= sourcesLastModified || lastRun <= externsLastModified;\n   }\n \n-  private long getLastModifiedTime(List<FileList> fileLists) {\n+  /**\n+   * Returns the most recent modified timestamp of the file collection.\n+   *\n+   * Note: this must be combined into one method to account for both\n+   * Path and FileList erasure types.\n+   *\n+   * @param fileLists Collection of FileList or Path\n+   * @return Most recent modified timestamp\n+   */\n+  private long getLastModifiedTime(List<?> fileLists) {\n     long lastModified = 0;\n-    for (FileList list : fileLists) {\n-      for (String fileName : list.getFiles(this.getProject())) {\n-        File path = list.getDir(this.getProject());\n-        File file = new File(path, fileName);\n-        long fileLastModified = file.lastModified();\n-        // If the file is absent, we don't know if it changed (maybe\n-        // was deleted), so assume it has just changed.\n-        if (fileLastModified == 0) {\n-          fileLastModified = new Date().getTime();\n+\n+    for (Object entry : fileLists) {\n+      if (entry instanceof FileList) {\n+        FileList list = (FileList) entry;\n+\n+        for (String fileName : list.getFiles(this.getProject())) {\n+          File path = list.getDir(this.getProject());\n+          File file = new File(path, fileName);\n+          lastModified = Math.max(getLastModifiedTime(file), lastModified);\n         }\n-        lastModified = Math.max(fileLastModified, lastModified);\n+      } else if (entry instanceof Path) {\n+        Path path = (Path) entry;\n+        for (String src : path.list()) {\n+          File file = new File(src);\n+          lastModified = Math.max(getLastModifiedTime(file), lastModified);\n+        }\n       }\n     }\n+\n     return lastModified;\n   }\n+\n+  /**\n+   * Returns the last modified timestamp of the given File.\n+   */\n+  private long getLastModifiedTime(File file) {\n+    long fileLastModified = file.lastModified();\n+    // If the file is absent, we don't know if it changed (maybe was deleted),\n+    // so assume it has just changed.\n+    if (fileLastModified == 0) {\n+      fileLastModified = new Date().getTime();\n+    }\n+    return fileLastModified;\n+  }\n }", "timestamp": 1314057301, "metainfo": ""}