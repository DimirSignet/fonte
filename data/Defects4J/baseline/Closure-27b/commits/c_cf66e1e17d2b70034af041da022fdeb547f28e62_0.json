{"sha": "cf66e1e17d2b70034af041da022fdeb547f28e62", "log": "Enable statement reordering  R=nicksantos DELTA=19  (9 added, 6 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3180   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n             new PeepholeRemoveDeadCode(),\n             new PeepholeSubstituteAlternateSyntax(true),\n             new PeepholeReplaceKnownMethods(),\n-            new PeepholeFoldConstants());\n+            new PeepholeFoldConstants(),\n+            new ReorderConstantExpression());\n     }\n   };\n \n--- a/src/com/google/javascript/jscomp/ReorderConstantExpression.java\n+++ b/src/com/google/javascript/jscomp/ReorderConstantExpression.java\n  */\n class ReorderConstantExpression extends AbstractPeepholeOptimization {\n \n-  private AbstractCompiler compiler;\n-\n   // TODO(user): Rename this pass to PeepholeReorderConstantExpression\n   // to follow our naming convention.\n-  ReorderConstantExpression(AbstractCompiler compiler) {\n-    this.compiler = compiler;\n-  }\n-\n   @Override\n   Node optimizeSubtree(Node subtree) {\n     // if the operator is symertric\n \n         subtree.addChildrenToFront(lastNode);\n         subtree.addChildrenToBack(firstNode);\n-        this.compiler.reportCodeChange();\n+        reportCodeChange();\n       }\n     }\n     return subtree;\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n          \"}\",\n          \"function f(b) {\" +\n          \" var a;\" +\n-         \" return ((a=b.id) && (a=parseInt(a.substr(1))) && a>0);\" +\n+         \" return ((a=b.id) && (a=parseInt(a.substr(1))) && 0<a);\" +\n          \"}\");\n   }\n \n--- a/test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java\n+++ b/test/com/google/javascript/jscomp/ReorderConstantExpressionTest.java\n   @Override\n   protected CompilerPass getProcessor(final Compiler compiler) {\n     return new PeepholeOptimizationsPass(compiler,\n-        new ReorderConstantExpression(compiler));\n+        new ReorderConstantExpression());\n   }\n \n   @Override", "timestamp": 1315041281, "metainfo": ""}