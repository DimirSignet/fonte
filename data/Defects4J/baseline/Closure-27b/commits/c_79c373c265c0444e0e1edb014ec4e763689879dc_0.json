{"sha": "79c373c265c0444e0e1edb014ec4e763689879dc", "log": "As per email/IM conversations, this CL raises the maximum number of alternate types tracked by the UnionTypeBuilder during property checking. This prevents methods that appear on more than 20 types from always being reported as being a property of ?  R=moedinger,nicksantos DELTA=63  (58 added, 1 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2760   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n public class JSTypeRegistry implements Serializable {\n   private static final long serialVersionUID = 1L;\n \n+  /**\n+   * The UnionTypeBuilder caps the maximum number of alternate types it\n+   * remembers and then defaults to \"?\" (unknown type). By default this max\n+   * is 20, but it's very easy for the same property to appear on more than 20\n+   * types. Use larger unions for property checking. 3000 was picked\n+   * semi-randomly for use by the Oz (Emerald Sea FE) project.\n+   */\n+  private static final int PROPERTY_CHECKING_UNION_SIZE = 3000;\n+\n   // TODO(user): An instance of this class should be used during\n   // compilation. We also want to make all types' constructors package private\n   // and force usage of this registry instead. This will allow us to evolve the\n   public void registerPropertyOnType(String propertyName, JSType type) {\n     UnionTypeBuilder typeSet = typesIndexedByProperty.get(propertyName);\n     if (typeSet == null) {\n-      typeSet = new UnionTypeBuilder(this);\n+      typeSet = new UnionTypeBuilder(this, PROPERTY_CHECKING_UNION_SIZE);\n       typesIndexedByProperty.put(propertyName, typeSet);\n     }\n \n--- a/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n \n   // If the best we can do is say \"this object is one of twenty things\",\n   // then we should just give up and admit that we have no clue.\n-  private static final int MAX_UNION_SIZE = 20;\n+  private static final int DEFAULT_MAX_UNION_SIZE = 20;\n \n   private final JSTypeRegistry registry;\n   private final List<JSType> alternates = Lists.newArrayList();\n   private boolean isAllType = false;\n   private boolean isNativeUnknownType = false;\n   private boolean areAllUnknownsChecked = true;\n+  private final int maxUnionSize;\n \n   // Memoize the result, in case build() is called multiple times.\n   private JSType result = null;\n \n   UnionTypeBuilder(JSTypeRegistry registry) {\n+    this(registry, DEFAULT_MAX_UNION_SIZE);\n+  }\n+\n+  UnionTypeBuilder(JSTypeRegistry registry, int maxUnionSize) {\n     this.registry = registry;\n+    this.maxUnionSize = maxUnionSize;\n   }\n \n   Iterable<JSType> getAlternates() {\n           addAlternate(unionAlt);\n         }\n       } else {\n-        if (alternates.size() > MAX_UNION_SIZE) {\n+        if (alternates.size() > maxUnionSize) {\n           return this;\n         }\n \n       }\n     } else {\n       int size = alternates.size();\n-      if (size > MAX_UNION_SIZE) {\n+      if (size > maxUnionSize) {\n         return registry.getNativeType(UNKNOWN_TYPE);\n       } else if (size > 1) {\n         return null;\n--- a/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java\n     assertTrue(typeRegistry.hasNamespace(\"a.b\"));\n   }\n \n+  public void testPropertyOnManyTypes() {\n+    JSTypeRegistry typeRegistry = new JSTypeRegistry(null);\n+\n+    JSType type = null;\n+\n+    // By default the UnionTypeBuilder will treat a union of more than 20\n+    // types as an unknown type. We don't want that for property checking\n+    // so test that the limit is higher.\n+    for (int i = 0; i < 100; i++) {\n+      type = typeRegistry.createObjectType(\"type: \" + i, null, null);\n+      typeRegistry.registerPropertyOnType(\"foo\", type);\n+    }\n+\n+    assertFalse(typeRegistry.getGreatestSubtypeWithProperty(type, \"foo\").isUnknownType());\n+  }\n+\n   public void testTypeAsNamespace() {\n     JSTypeRegistry typeRegistry = new JSTypeRegistry(null);\n ", "timestamp": 1311765427, "metainfo": ""}