{"sha": "9d9957fdd23ff13d187d4b8832d580bf8622baf6", "log": "Flag null pointer exceptions that are provable at compile time.  R=johnlenz DELTA=48  (38 added, 0 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=236   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n           // should match a string context.\n           String message = \"left side of comparison\";\n           validator.expectString(t, n, leftType, message);\n-          validator.expectNotVoid(\n+          validator.expectNotNullOrUndefined(\n               t, n, leftType, message, getNativeType(STRING_TYPE));\n           message = \"right side of comparison\";\n           validator.expectString(t, n, rightType, message);\n-          validator.expectNotVoid(\n+          validator.expectNotNullOrUndefined(\n               t, n, rightType, message, getNativeType(STRING_TYPE));\n         }\n         ensureTyped(t, n, BOOLEAN_TYPE);\n \n     // TODO(user): remove in favor of flagging every property access on\n     // non-object.\n-    if (!validator.expectNotVoid(t, n, childType,\n-            \"undefined has no properties\", getNativeType(OBJECT_TYPE))) {\n+    if (!validator.expectNotNullOrUndefined(t, n, childType,\n+            childType + \" has no properties\", getNativeType(OBJECT_TYPE))) {\n       ensureTyped(t, n);\n       return;\n     }\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n   private final JSTypeRegistry typeRegistry;\n   private final JSType allValueTypes;\n   private boolean shouldReport = true;\n+  private final JSType nullOrUndefined;\n \n   // TODO(nicksantos): Provide accessors to better filter the list of type\n   // mismatches. For example, if we pass (Cake|null) where only Cake is\n     this.typeRegistry = compiler.getTypeRegistry();\n     this.allValueTypes = typeRegistry.createUnionType(\n         STRING_TYPE, NUMBER_TYPE, BOOLEAN_TYPE, NULL_TYPE, VOID_TYPE);\n+    this.nullOrUndefined = typeRegistry.createUnionType(\n+        NULL_TYPE, VOID_TYPE);\n   }\n \n   /**\n   }\n \n   /**\n-   * Expect the type to be anything but the void type. If the expectation is not\n-   * met, issue a warning at the provided node's source code position. Note that\n-   * a union type that includes the void type and at least one other type meets\n-   * the expectation.\n+   * Expect the type to be anything but the null or void type. If the\n+   * expectation is not met, issue a warning at the provided node's\n+   * source code position. Note that a union type that includes the\n+   * void type and at least one other type meets the expectation.\n    * @return Whether the expectation was met.\n    */\n-  boolean expectNotVoid(\n+  boolean expectNotNullOrUndefined(\n       NodeTraversal t, Node n, JSType type, String msg, JSType expectedType) {\n-    if (type.isVoidType()) {\n+    if (!type.isNoType() && !type.isUnknownType() &&\n+        type.isSubtype(nullOrUndefined)) {\n+\n+      // There's one edge case right now that we don't handle well, and\n+      // that we don't want to warn about.\n+      // if (this.x == null) {\n+      //   this.initializeX();\n+      //   this.x.foo();\n+      // }\n+      // In this case, we incorrectly type x because of how we\n+      // infer properties locally. See issue 109.\n+      // http://code.google.com/p/closure-compiler/issues/detail?id=109\n+      //\n+      // We do not do this inference globally.\n+      if (n.getType() == Token.GETPROP &&\n+          !t.inGlobalScope() && type.isNullType()) {\n+        return true;\n+      }\n+\n       mismatch(t, n, msg, type, expectedType);\n       return false;\n     }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"undefined has no properties\\n\" +\n         \"found   : undefined\\n\" +\n         \"required: Object\");\n+  }\n+\n+  public void testGetprop2() throws Exception {\n+    testTypes(\"var x = null; x.alert();\",\n+        \"null has no properties\\n\" +\n+        \"found   : null\\n\" +\n+        \"required: Object\");\n+  }\n+\n+  public void testGetprop3() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ \" +\n+        \"function Foo() { /** @type {?Object} */ this.x = null; }\" +\n+        \"Foo.prototype.initX = function() { this.x = {foo: 1}; };\" +\n+        \"Foo.prototype.bar = function() {\" +\n+        \"  if (this.x == null) { this.initX(); alert(this.x.foo); }\" +\n+        \"};\");\n   }\n \n   public void testArrayAccess1() throws Exception {", "timestamp": 1294692855, "metainfo": ""}