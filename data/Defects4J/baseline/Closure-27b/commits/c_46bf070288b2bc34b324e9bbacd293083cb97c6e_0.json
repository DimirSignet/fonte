{"sha": "46bf070288b2bc34b324e9bbacd293083cb97c6e", "log": "Make InstanceObjectType package-private There's not really any reason to use this class directly.  R=tylerg DELTA=59  (11 added, 9 deleted, 39 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3204   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.jstype.FunctionType;\n-import com.google.javascript.rhino.jstype.InstanceObjectType;\n import com.google.javascript.rhino.jstype.JSType;\n import com.google.javascript.rhino.jstype.JSTypeNative;\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n \n     invalidatingTypes.add(type);\n     ObjectType objType = ObjectType.cast(type);\n-    if (objType instanceof InstanceObjectType) {\n+    if (objType != null && objType.isInstanceType()) {\n       invalidatingTypes.add(objType.getImplicitPrototype());\n     }\n   }\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n import com.google.javascript.rhino.jstype.FunctionBuilder;\n import com.google.javascript.rhino.jstype.FunctionParamBuilder;\n import com.google.javascript.rhino.jstype.FunctionType;\n-import com.google.javascript.rhino.jstype.InstanceObjectType;\n import com.google.javascript.rhino.jstype.JSType;\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.ObjectType;\n     JSType existingType = typeRegistry.getType(fnName);\n \n     if (existingType != null) {\n-      boolean isInstanceObject = existingType instanceof InstanceObjectType;\n+      boolean isInstanceObject = existingType.isInstanceType();\n       if (isInstanceObject || fnName.equals(\"Function\")) {\n         FunctionType existingFn =\n             isInstanceObject ?\n-            ((InstanceObjectType) existingType).getConstructor() :\n+            existingType.toObjectType().getConstructor() :\n             typeRegistry.getNativeFunctionType(FUNCTION_FUNCTION_TYPE);\n \n         if (existingFn.getSource() == null) {\n--- a/src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java\n+++ b/src/com/google/javascript/jscomp/NameReferenceGraphConstruction.java\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.jstype.FunctionType;\n-import com.google.javascript.rhino.jstype.InstanceObjectType;\n import com.google.javascript.rhino.jstype.JSType;\n import com.google.javascript.rhino.jstype.JSTypeNative;\n import com.google.javascript.rhino.jstype.ObjectType;\n       if (type.isUnknownType() || type.isUnionType()) {\n         return false;\n       }\n-      return (type instanceof InstanceObjectType || type.autoboxesTo() != null);\n+      return (type.isInstanceType() || type.autoboxesTo() != null);\n     }\n \n     private Name recordStaticNameDefinition(NodeTraversal t, String name,\n--- a/src/com/google/javascript/rhino/jstype/InstanceObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/InstanceObjectType.java\n /**\n  * An object type that is an instance of some function constructor.\n  */\n-public class InstanceObjectType extends PrototypeObjectType {\n+class InstanceObjectType extends PrototypeObjectType {\n   private static final long serialVersionUID = 1L;\n \n   private final FunctionType constructor;\n--- a/test/com/google/javascript/jscomp/FunctionTypeBuilderTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionTypeBuilderTest.java\n import static com.google.javascript.rhino.testing.BaseJSTypeTestCase.ALL_NATIVE_EXTERN_TYPES;\n \n import com.google.javascript.jscomp.CheckLevel;\n-\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.jstype.FunctionType;\n-import com.google.javascript.rhino.jstype.InstanceObjectType;\n+import com.google.javascript.rhino.jstype.ObjectType;\n \n import java.util.List;\n \n   public void testExternSubTypes() throws Exception {\n     testSame(ALL_NATIVE_EXTERN_TYPES, \"\", null);\n \n-    List<FunctionType> subtypes = ((InstanceObjectType) getLastCompiler()\n+    List<FunctionType> subtypes = ((ObjectType) getLastCompiler()\n         .getTypeRegistry().getType(\"Error\")).getConstructor().getSubTypes();\n     for (FunctionType type : subtypes) {\n       String typeName = type.getInstanceType().toString();\n-      FunctionType typeInRegistry = ((InstanceObjectType) getLastCompiler()\n+      FunctionType typeInRegistry = ((ObjectType) getLastCompiler()\n           .getTypeRegistry().getType(typeName)).getConstructor();\n       assertTrue(typeInRegistry == type);\n     }", "timestamp": 1315407941, "metainfo": ""}