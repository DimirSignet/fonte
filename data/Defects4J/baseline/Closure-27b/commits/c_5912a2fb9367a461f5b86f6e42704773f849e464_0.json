{"sha": "5912a2fb9367a461f5b86f6e42704773f849e464", "log": "Handle locally defined constructors more gracefully  R=johnlenz DELTA=61  (52 added, 0 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2852   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n       return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n     }\n \n+    private FunctionType getFunctionType(@Nullable Var v) {\n+      JSType t = v == null ? null : v.getType();\n+      ObjectType o = t == null ? null : t.dereference();\n+      return o instanceof FunctionType ? ((FunctionType) o) : null;\n+    }\n+\n     /**\n      * Look for class-defining calls.\n      * Because JS has no 'native' syntax for defining classes,\n       SubclassRelationship relationship =\n           codingConvention.getClassesDefinedByCall(n);\n       if (relationship != null) {\n-        ObjectType superClass = ObjectType.cast(\n-            typeRegistry.getType(relationship.superclassName));\n-        ObjectType subClass = ObjectType.cast(\n-            typeRegistry.getType(relationship.subclassName));\n-        if (superClass != null && subClass != null) {\n-          FunctionType superCtor = superClass.getConstructor();\n-          FunctionType subCtor = subClass.getConstructor();\n-\n-          if (relationship.type == SubclassType.INHERITS) {\n+        FunctionType superCtor = getFunctionType(\n+            scope.getVar(relationship.superclassName));\n+        FunctionType subCtor = getFunctionType(\n+            scope.getVar(relationship.subclassName));\n+        if (superCtor != null && superCtor.isConstructor() &&\n+            subCtor != null && subCtor.isConstructor()) {\n+          ObjectType superClass = superCtor.getInstanceType();\n+          ObjectType subClass = subCtor.getInstanceType();\n+\n+          // superCtor and subCtor might be structural constructors\n+          // (like {function(new:Object)}) so we need to resolve them back\n+          // to the original ctor objects.\n+          superCtor = superClass.getConstructor();\n+          subCtor = subClass.getConstructor();\n+\n+          if (relationship.type == SubclassType.INHERITS &&\n+              !superClass.isEmptyType() && !subClass.isEmptyType()) {\n             validator.expectSuperType(t, n, superClass, subClass);\n           }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"actual parameter 1 of f does not match formal parameter\\n\" +\n         \"found   : E\\n\" +\n         \"required: number\");\n+  }\n+\n+  public void testGoodExtends14() throws Exception {\n+    testTypes(\n+        CLOSURE_DEFS +\n+        \"/** @param {Function} f */ function g(f) {\" +\n+        \"  /** @constructor */ function NewType() {};\" +\n+        \"  goog.inherits(NewType, f);\" +\n+        \"  (new NewType());\" +\n+        \"}\");\n+  }\n+\n+  public void testGoodExtends15() throws Exception {\n+    testTypes(\n+        CLOSURE_DEFS +\n+        \"/** @constructor */ function OldType() {}\" +\n+        \"/** @param {?function(new:OldType)} f */ function g(f) {\" +\n+        \"  /**\\n\" +\n+        \"    * @constructor\\n\" +\n+        \"    * @extends {OldType}\\n\" +\n+        \"    */\\n\" +\n+        \"  function NewType() {};\" +\n+        \"  goog.inherits(NewType, f);\" +\n+        \"  NewType.prototype.method = function() {\" +\n+        \"    NewType.superClass_.foo.call(this);\" +\n+        \"  };\" +\n+        \"}\",\n+        \"Property foo never defined on OldType.prototype\");\n+  }\n+\n+  public void testGoodExtends16() throws Exception {\n+    testTypes(\n+        CLOSURE_DEFS +\n+        \"/** @param {Function} f */ function g(f) {\" +\n+        \"  /** @constructor */ function NewType() {};\" +\n+        \"  goog.inherits(f, NewType);\" +\n+        \"  (new NewType());\" +\n+        \"}\");\n   }\n \n   public void testBadExtends1() throws Exception {", "timestamp": 1312221419, "metainfo": ""}