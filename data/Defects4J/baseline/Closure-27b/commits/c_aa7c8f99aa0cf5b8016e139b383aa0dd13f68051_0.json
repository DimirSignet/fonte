{"sha": "aa7c8f99aa0cf5b8016e139b383aa0dd13f68051", "log": "Type Check for Multiple Extends Interface Properties  R=nicksantos DELTA=222  (222 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1944   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n import com.google.javascript.rhino.jstype.TernaryValue;\n \n import java.util.Iterator;\n+import java.util.Set;\n+import java.util.HashMap;\n \n /**\n  * <p>Checks the types of JS expressions against any declared type\n           \"JSC_ILLEGAL_IMPLICIT_CAST\",\n           \"Illegal annotation on {0}. @implicitCast may only be used in \" +\n           \"externs.\");\n+\n+  static final DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE =\n+      DiagnosticType.warning(\n+          \"JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE\",\n+          \"Interface {0} has a property {1} with incompatible types in \" +\n+          \"its super interfaces {2} and {3}\");\n \n   static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n       DETERMINISTIC_TEST,\n       UNRESOLVED_TYPE,\n       WRONG_ARGUMENT_COUNT,\n       ILLEGAL_IMPLICIT_CAST,\n+      INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n       RhinoErrorReporter.TYPE_PARSE_ERROR,\n       TypedScopeCreator.UNKNOWN_LENDS,\n       TypedScopeCreator.LENDS_ON_NON_OBJECT,\n         report(t, line, NOT_A_CONSTRUCTOR);\n       }\n       ensureTyped(t, n);\n+    }\n+  }\n+\n+  /**\n+   * Check whether there's any property conflict for for a particular super\n+   * interface\n+   * @param t The node traversal object that supplies context\n+   * @param n The node being visited\n+   * @param functionName The function name being checked\n+   * @param properties The property names in the super interfaces that have\n+   * been visited\n+   * @param currentProperties The property names in the super interface\n+   * that have been visited\n+   * @param interfaceType The super interface that is being visited\n+   */\n+  private void checkInterfaceConflictProperties(NodeTraversal t, Node n,\n+      String functionName, HashMap<String, ObjectType> properties,\n+      HashMap<String, ObjectType> currentProperties,\n+      ObjectType interfaceType) {\n+    Set<String> currentPropertyNames = interfaceType.getPropertyNames();\n+    for (String name : currentPropertyNames) {\n+      ObjectType oType = properties.get(name);\n+      if (oType != null) {\n+        if (!interfaceType.getPropertyType(name).isEquivalentTo(\n+            oType.getPropertyType(name))) {\n+          compiler.report(\n+              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n+                  functionName, name, oType.toString(),\n+                  interfaceType.toString()));\n+        }\n+      }\n+      currentProperties.put(name, interfaceType);\n+    }\n+    for (ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {\n+      checkInterfaceConflictProperties(t, n, functionName, properties,\n+          currentProperties, iType);\n     }\n   }\n \n         compiler.report(t.makeError(n,\n             CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n       }\n+      // Check whether the extended interfaces have any conflicts\n+      if (functionType.getExtendedInterfacesCount() > 1) {\n+        // Only check when extending more than one interfaces\n+        HashMap<String, ObjectType> properties\n+            = new HashMap<String, ObjectType>();\n+        HashMap<String, ObjectType> currentProperties\n+            = new HashMap<String, ObjectType>();\n+        for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {\n+          currentProperties.clear();\n+          checkInterfaceConflictProperties(t, n, functionPrivateName,\n+              properties, currentProperties, interfaceType);\n+          properties.putAll(currentProperties);\n+        }\n+      }\n     }\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n     return extendedInterfaces;\n   }\n \n+  /** Returns the number of interfaces directly extended by an interface */\n+  public int getExtendedInterfacesCount() {\n+    return extendedInterfaces.size();\n+  }\n+\n   public void setExtendedInterfaces(List<ObjectType> extendedInterfaces)\n     throws UnsupportedOperationException {\n     if (isInterface()) {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         expectedType, objectType.getPropertyType(propertyName));\n   }\n \n+  public void testExtendedInterfacePropertiesCompatibility1() throws Exception {\n+    testTypes(\n+        \"/** @interface */function Int0() {};\" +\n+        \"/** @interface */function Int1() {};\" +\n+        \"/** @type {number} */\" +\n+        \"Int0.prototype.foo;\" +\n+        \"/** @type {string} */\" +\n+        \"Int1.prototype.foo;\" +\n+        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} */\" +\n+        \"function Int2() {};\",\n+        \"Interface Int2 has a property foo with incompatible types in its \" +\n+        \"super interfaces Int0 and Int1\");\n+  }\n+\n+  public void testExtendedInterfacePropertiesCompatibility2() throws Exception {\n+    testTypes(\n+        \"/** @interface */function Int0() {};\" +\n+        \"/** @interface */function Int1() {};\" +\n+        \"/** @interface */function Int2() {};\" +\n+        \"/** @type {number} */\" +\n+        \"Int0.prototype.foo;\" +\n+        \"/** @type {string} */\" +\n+        \"Int1.prototype.foo;\" +\n+        \"/** @type {Object} */\" +\n+        \"Int2.prototype.foo;\" +\n+        \"/** @interface \\n @extends {Int0} \\n @extends {Int1} \\n\" +\n+        \"@extends {Int2}*/\" +\n+        \"function Int3() {};\",\n+        new String[] {\n+            \"Interface Int3 has a property foo with incompatible types in \" +\n+            \"its super interfaces Int0 and Int1\",\n+            \"Interface Int3 has a property foo with incompatible types in \" +\n+            \"its super interfaces Int1 and Int2\"\n+        });\n+  }\n+\n+  public void testExtendedInterfacePropertiesCompatibility3() throws Exception {\n+    testTypes(\n+        \"/** @interface */function Int0() {};\" +\n+        \"/** @interface */function Int1() {};\" +\n+        \"/** @type {number} */\" +\n+        \"Int0.prototype.foo;\" +\n+        \"/** @type {string} */\" +\n+        \"Int1.prototype.foo;\" +\n+        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n+        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n+        \"function Int3() {};\",\n+        \"Interface Int3 has a property foo with incompatible types in its \" +\n+        \"super interfaces Int0 and Int1\");\n+  }\n+\n+  public void testExtendedInterfacePropertiesCompatibility4() throws Exception {\n+    testTypes(\n+        \"/** @interface */function Int0() {};\" +\n+        \"/** @interface \\n @extends {Int0} */ function Int1() {};\" +\n+        \"/** @type {number} */\" +\n+        \"Int0.prototype.foo;\" +\n+        \"/** @interface */function Int2() {};\" +\n+        \"/** @interface \\n @extends {Int2} */ function Int3() {};\" +\n+        \"/** @type {string} */\" +\n+        \"Int2.prototype.foo;\" +\n+        \"/** @interface \\n @extends {Int1} \\n @extends {Int3} */\" +\n+        \"function Int4() {};\",\n+        \"Interface Int4 has a property foo with incompatible types in its \" +\n+        \"super interfaces Int0 and Int2\");\n+  }\n+\n+  public void testExtendedInterfacePropertiesCompatibility5() throws Exception {\n+    testTypes(\n+        \"/** @interface */function Int0() {};\" +\n+        \"/** @interface */function Int1() {};\" +\n+        \"/** @type {number} */\" +\n+        \"Int0.prototype.foo;\" +\n+        \"/** @type {string} */\" +\n+        \"Int1.prototype.foo;\" +\n+        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n+        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n+        \"function Int3() {};\" +\n+        \"/** @interface */function Int4() {};\" +\n+        \"/** @type {number} */\" +\n+        \"Int4.prototype.foo;\" +\n+        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n+        \"function Int5() {};\",\n+        new String[] {\n+            \"Interface Int3 has a property foo with incompatible types in its\" +\n+            \" super interfaces Int0 and Int1\",\n+            \"Interface Int5 has a property foo with incompatible types in its\" +\n+            \" super interfaces Int1 and Int4\"});\n+  }\n+\n+  public void testExtendedInterfacePropertiesCompatibility6() throws Exception {\n+    testTypes(\n+        \"/** @interface */function Int0() {};\" +\n+        \"/** @interface */function Int1() {};\" +\n+        \"/** @type {number} */\" +\n+        \"Int0.prototype.foo;\" +\n+        \"/** @type {string} */\" +\n+        \"Int1.prototype.foo;\" +\n+        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n+        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n+        \"function Int3() {};\" +\n+        \"/** @interface */function Int4() {};\" +\n+        \"/** @type {string} */\" +\n+        \"Int4.prototype.foo;\" +\n+        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n+        \"function Int5() {};\",\n+        \"Interface Int3 has a property foo with incompatible types in its\" +\n+        \" super interfaces Int0 and Int1\");\n+  }\n+\n+  public void testExtendedInterfacePropertiesCompatibility7() throws Exception {\n+    testTypes(\n+        \"/** @interface */function Int0() {};\" +\n+        \"/** @interface */function Int1() {};\" +\n+        \"/** @type {number} */\" +\n+        \"Int0.prototype.foo;\" +\n+        \"/** @type {string} */\" +\n+        \"Int1.prototype.foo;\" +\n+        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n+        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n+        \"function Int3() {};\" +\n+        \"/** @interface */function Int4() {};\" +\n+        \"/** @type {Object} */\" +\n+        \"Int4.prototype.foo;\" +\n+        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n+        \"function Int5() {};\",\n+        new String[] {\n+            \"Interface Int3 has a property foo with incompatible types in its\" +\n+            \" super interfaces Int0 and Int1\",\n+            \"Interface Int5 has a property foo with incompatible types in its\" +\n+            \" super interfaces Int1 and Int4\"});\n+  }\n+\n+  public void testExtendedInterfacePropertiesCompatibility8() throws Exception {\n+    testTypes(\n+        \"/** @interface */function Int0() {};\" +\n+        \"/** @interface */function Int1() {};\" +\n+        \"/** @type {number} */\" +\n+        \"Int0.prototype.foo;\" +\n+        \"/** @type {string} */\" +\n+        \"Int1.prototype.bar;\" +\n+        \"/** @interface \\n @extends {Int1} */ function Int2() {};\" +\n+        \"/** @interface \\n @extends {Int0} \\n @extends {Int2} */\" +\n+        \"function Int3() {};\" +\n+        \"/** @interface */function Int4() {};\" +\n+        \"/** @type {Object} */\" +\n+        \"Int4.prototype.foo;\" +\n+        \"/** @type {Null} */\" +\n+        \"Int4.prototype.bar;\" +\n+        \"/** @interface \\n @extends {Int3} \\n @extends {Int4} */\" +\n+        \"function Int5() {};\",\n+        new String[] {\n+            \"Interface Int5 has a property bar with incompatible types in its\" +\n+            \" super interfaces Int1 and Int4\",\n+            \"Interface Int5 has a property foo with incompatible types in its\" +\n+            \" super interfaces Int0 and Int4\"});\n+  }\n+\n   private void testTypes(String js) throws Exception {\n     testTypes(js, (String) null);\n   }", "timestamp": 1305737598, "metainfo": ""}