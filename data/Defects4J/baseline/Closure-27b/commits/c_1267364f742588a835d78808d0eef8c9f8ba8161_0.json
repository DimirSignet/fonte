{"sha": "1267364f742588a835d78808d0eef8c9f8ba8161", "log": "Scratching an itch. When shrinking string literal arrays, try to use the empty string as a delimiter. Fixed issue 702  R=acleung DELTA=54  (39 added, 4 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4601   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n     if(!late) {\n       return n;\n     }\n+\n     int numElements = n.getChildCount();\n     // We save two bytes per element.\n     int saving = numElements * 2 - STRING_SPLIT_OVERHEAD;\n \n     // These delimiters are chars that appears a lot in the program therefore\n     // probably have a small Huffman encoding.\n-    NEXT_DELIMITER: for (char delimiter : new char[]{',', ' ', ';', '{', '}'}) {\n-      for (String cur : strings) {\n-        if (cur.indexOf(delimiter) != -1) {\n-          continue NEXT_DELIMITER;\n-        }\n-      }\n+    String delimiter = pickDelimiter(strings);\n+    if (delimiter != null) {\n       String template = Joiner.on(delimiter).join(strings);\n       Node call = IR.call(\n           IR.getprop(\n       return call;\n     }\n     return n;\n+  }\n+\n+  /**\n+   * Find a delimiter that does not occur in the given strings\n+   * @param strings The strings that must be separated.\n+   * @return a delimiter string or null\n+   */\n+  private String pickDelimiter(String[] strings) {\n+    boolean allLength1 = true;\n+    for (String s : strings) {\n+      if (s.length() != 1) {\n+        allLength1 = false;\n+        break;\n+      }\n+    }\n+\n+    if (allLength1) {\n+      return \"\";\n+    }\n+\n+    String[] delimiters = new String[]{\" \", \";\", \",\", \"{\", \"}\", null};\n+    int i = 0;\n+    NEXT_DELIMITER: for (;delimiters[i] != null; i++) {\n+      for (String cur : strings) {\n+        if (cur.contains(delimiters[i])) {\n+          continue NEXT_DELIMITER;\n+        }\n+      }\n+      break;\n+    }\n+    return delimiters[i];\n   }\n \n   private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     options.foldConstants = true;\n     test(options,\n       \"var x=['1','2','3','4','5','6','7']\",\n-      \"var x='1,2,3,4,5,6,7'.split(',')\");\n+      \"var x='1234567'.split('')\");\n \n     options = createCompilerOptions();\n     options.foldConstants = true;\n--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n     testSame(\"var x=['1','2','3','4']\");\n     testSame(\"var x=['1','2','3','4','5']\");\n     test(\"var x=['1','2','3','4','5','6']\",\n-         \"var x='1,2,3,4,5,6'.split(',')\");\n+         \"var x='123456'.split('')\");\n+    test(\"var x=['1','2','3','4','5','00']\",\n+         \"var x='1 2 3 4 5 00'.split(' ')\");\n     test(\"var x=['1','2','3','4','5','6','7']\",\n-         \"var x='1,2,3,4,5,6,7'.split(',')\");\n-    test(\"var x=[',',',',',',',',',',',']\",\n-         \"var x=', , , , , ,'.split(' ')\");\n-    test(\"var x=[',',' ',',',',',',',',']\",\n-         \"var x=',; ;,;,;,;,'.split(';')\");\n-    test(\"var x=[',',' ',',',',',',',',']\",\n-         \"var x=',; ;,;,;,;,'.split(';')\");\n+        \"var x='1234567'.split('')\");\n+    test(\"var x=['1','2','3','4','5','6','00']\",\n+         \"var x='1 2 3 4 5 6 00'.split(' ')\");\n+    test(\"var x=[' ,',',',',',',',',',',']\",\n+         \"var x=' ,;,;,;,;,;,'.split(';')\");\n+    test(\"var x=[',,',' ',',',',',',',',']\",\n+         \"var x=',,; ;,;,;,;,'.split(';')\");\n+    test(\"var x=['a,',' ',',',',',',',',']\",\n+         \"var x='a,; ;,;,;,;,'.split(';')\");\n+\n+    // all possible delimiters used, leave it alone\n+    testSame(\"var x=[',', ' ', ';', '{', '}']\");\n   }\n \n   public void testRemoveElseCause() {", "timestamp": 1334951791, "metainfo": ""}