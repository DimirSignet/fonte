{"sha": "724b9cd0bee577e4c5be852041ae55e4345dfa68", "log": "Pull expressions into for loop conditions when possible.  R=acleung DELTA=76  (68 added, 0 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3676   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n \n       case Token.FOR:\n         if (!NodeUtil.isForIn(node)) {\n+          tryJoinForCondition(node);\n           tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n         }\n         return node;\n \n       default:\n         return node; //Nothing changed\n+    }\n+  }\n+\n+  private void tryJoinForCondition(Node n) {\n+    if (!late) {\n+      return;\n+    }\n+\n+    Node block = n.getLastChild();\n+    Node maybeIf = block.getFirstChild();\n+    if (maybeIf != null && maybeIf.getType() == Token.IF) {\n+      Node maybeBreak = maybeIf.getChildAtIndex(1).getFirstChild();\n+      if (maybeBreak != null && maybeBreak.getType() == Token.BREAK\n+          && !maybeBreak.hasChildren()) {\n+\n+        // Preserve the IF ELSE expression is there is one.\n+        if (maybeIf.getChildCount() == 3) {\n+          block.replaceChild(maybeIf,\n+              maybeIf.getLastChild().detachFromParent());\n+        } else {\n+          block.removeFirstChild();\n+        }\n+\n+        Node ifCondition = maybeIf.removeFirstChild();\n+        Node fixedIfCondition = new Node(Token.NOT, ifCondition)\n+            .copyInformationFrom(ifCondition);\n+\n+        // Ok, join the IF expression with the FOR expression\n+        Node forCondition = NodeUtil.getConditionExpression(n);\n+        if (forCondition.getType() == Token.EMPTY) {\n+          n.replaceChild(forCondition, fixedIfCondition);\n+        } else {\n+          Node replacement = new Node(Token.AND);\n+          n.replaceChild(forCondition, replacement);\n+          replacement.addChildToBack(forCondition);\n+          replacement.addChildToBack(fixedIfCondition);\n+        }\n+\n+        reportCodeChange();\n+      }\n     }\n   }\n \n--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n       \"var RegExp = function f(a){};\\n\" +\n       \"var Array = function f(a){};\\n\";\n \n-  private boolean doCommaSplitting = true;\n+  private boolean late = true;\n \n   // TODO(user): Remove this when we no longer need to do string comparison.\n   private PeepholeSubstituteAlternateSyntaxTest(boolean compareAsTree) {\n \n   @Override\n   public void setUp() throws Exception {\n-    doCommaSplitting = true;\n+    late = true;\n     super.setUp();\n     enableLineNumberCheck(true);\n+    disableNormalize();\n   }\n \n   @Override\n   public CompilerPass getProcessor(final Compiler compiler) {\n     CompilerPass peepholePass =\n       new PeepholeOptimizationsPass(compiler,\n-          new PeepholeSubstituteAlternateSyntax(doCommaSplitting));\n+          new PeepholeSubstituteAlternateSyntax(late));\n \n     return peepholePass;\n   }\n     fold(\"if(!!(f() > 20)) {foo();foo()}\", \"if(f() > 20){foo();foo()}\");\n   }\n \n+  public void testFoldLoopBreakLate() {\n+    late = true;\n+    fold(\"for(;;) if (a) break\", \"for(;!a;);\");\n+    foldSame(\"for(;;) if (a) { f(); break }\");\n+    fold(\"for(;;) if (a) break; else f()\", \"for(;!a;) { { f(); } }\");\n+    fold(\"for(;a;) if (b) break\", \"for(;a && !b;);\");\n+    fold(\"for(;a;) { if (b) break; if (c) break; }\", \"for(;(a && !b) && !c;);\");\n+\n+    // 'while' is normalized to 'for'\n+    enableNormalize(true);\n+    fold(\"while(true) if (a) break\", \"for(;1&&!a;);\");\n+  }\n+\n+  public void testFoldLoopBreakEarly() {\n+    late = false;\n+    foldSame(\"for(;;) if (a) break\");\n+    foldSame(\"for(;;) if (a) { f(); break }\");\n+    foldSame(\"for(;;) if (a) break; else f()\");\n+    foldSame(\"for(;a;) if (b) break\");\n+    foldSame(\"for(;a;) { if (b) break; if (c) break; }\");\n+\n+    foldSame(\"while(1) if (a) break\");\n+    enableNormalize(true);\n+    foldSame(\"while(1) if (a) break\");\n+  }\n+\n   public void testFoldConditionalVarDeclaration() {\n     fold(\"if(x) var y=1;else y=2\", \"var y=x?1:2\");\n     fold(\"if(x) y=1;else var y=2\", \"var y=x?1:2\");\n \n   public void testComma1() {\n     fold(\"1, 2\", \"1; 1\");\n-    doCommaSplitting = false;\n+    late = false;\n     foldSame(\"1, 2\");\n   }\n \n   public void testComma2() {\n     test(\"1, a()\", \"1; a()\");\n-    doCommaSplitting = false;\n+    late = false;\n     foldSame(\"1, a()\");\n   }\n \n   public void testComma3() {\n     test(\"1, a(), b()\", \"1; a(); b()\");\n-    doCommaSplitting = false;\n+    late = false;\n     foldSame(\"1, a(), b()\");\n   }\n \n   public void testComma4() {\n     test(\"a(), b()\", \"a();b()\");\n-    doCommaSplitting = false;\n+    late = false;\n     foldSame(\"a(), b()\");\n   }\n \n   public void testComma5() {\n     test(\"a(), b(), 1\", \"a();b();1\");\n-    doCommaSplitting = false;\n+    late = false;\n     foldSame(\"a(), b(), 1\");\n   }\n ", "timestamp": 1320884886, "metainfo": ""}