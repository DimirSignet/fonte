{"sha": "f322be0e576d5e2114cb59c0a6537197997b9c59", "log": "Don't overwrite orginal names that have already been set on node.  R=acleung DELTA=61  (54 added, 2 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1372   ", "commit": "\n--- a/src/com/google/javascript/jscomp/SourceInformationAnnotator.java\n+++ b/src/com/google/javascript/jscomp/SourceInformationAnnotator.java\n     // Annotate the original name.\n     switch (n.getType()) {\n       case Token.GETPROP:\n-        Node propNode = n.getFirstChild().getNext();\n-        if (propNode.getType() == Token.STRING) {\n-          n.putProp(Node.ORIGINALNAME_PROP, propNode.getString());\n-        }\n+        Node propNode = n.getLastChild();\n+        setOriginalName(n, propNode.getString());\n         break;\n \n       case Token.FUNCTION:\n         String functionName = NodeUtil.getNearestFunctionName(n);\n         if (functionName != null) {\n-          n.putProp(Node.ORIGINALNAME_PROP, functionName);\n+          setOriginalName(n, functionName);\n         }\n         break;\n \n       case Token.NAME:\n-        n.putProp(Node.ORIGINALNAME_PROP, n.getString());\n+        setOriginalName(n, n.getString());\n         break;\n \n       case Token.OBJECTLIT:\n              key = key.getNext()) {\n            // We only want keys were unquoted.\n            if (!key.isQuotedString()) {\n-             key.putProp(Node.ORIGINALNAME_PROP, key.getString());\n+             setOriginalName(key, key.getString());\n            }\n          }\n         break;\n     }\n   }\n+\n+  void setOriginalName(Node n, String name) {\n+    if (!name.isEmpty() && n.getProp(Node.ORIGINALNAME_PROP) == null) {\n+      n.putProp(Node.ORIGINALNAME_PROP, name);\n+    }\n+  }\n }\n--- /dev/null\n+++ b/test/com/google/javascript/jscomp/SourceInformationAnnotatorTest.java\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+/**\n+ * @author johnlenz@google.com (John Lenz)\n+ */\n+public class SourceInformationAnnotatorTest extends CompilerTestCase {\n+\n+  @Override\n+  protected CompilerPass getProcessor(final Compiler compiler) {\n+    return new CompilerPass() {\n+      @Override\n+      public void process(Node externs, Node root) {\n+        NodeTraversal.traverse(compiler, root,\n+            new SourceInformationAnnotator(\"\", false));\n+      }};\n+  }\n+\n+  public void testPreserveAnnotatedName() {\n+    Node root = new Node(Token.SCRIPT);\n+    root.setIsSyntheticBlock(true);\n+    Node name = Node.newString(\"foo\");\n+    name.putProp(Node.ORIGINALNAME_PROP, \"bar\");\n+    root.addChildToBack(name);\n+\n+    NodeTraversal.traverse(null, root,\n+        new SourceInformationAnnotator(\"\", false));\n+    assertEquals(name.getProp(Node.ORIGINALNAME_PROP), \"bar\");\n+  }\n+}", "timestamp": 1302635743, "metainfo": ""}