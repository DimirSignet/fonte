{"sha": "4d79ace580fcd65afb53a2e5d40a9b5bfc3ea13d", "log": "Update Javadoc defining empty, space and whitespace Improve performance of repeat Add defaultString(String) back in for performance   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n /**\n  * <p>Common <code>String</code> manipulation routines.</p>\n  *\n- * <p>Originally from \n- * <a href=\"http://jakarta.apache.org/turbine/\">Turbine</a> and the\n- * GenerationJavaCore library.</p>\n+ * <p>The <code>StringUtils</code> class defines certain words related to\n+ * String handling.</p>\n+ * \n+ * <ul>\n+ *  <li>null - <code>null</code>\n+ *  <li>empty - a zero-length string (<code>\"\"</code>)\n+ *  <li>space - the space character (<code>' '</code>)(32)\n+ *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}\n+ * </ul>\n+ * \n+ * <p>The <code>StringUtils</code> class varies in its handling of\n+ * <code>null</code>. Each method should be consulted individually.</p>\n  *\n+ * @author <a href=\"http://jakarta.apache.org/turbine/\">Apache Jakarta Turbine</a>\n+ * @author GenerationJavaCore\n  * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author <a href=\"mailto:gcoladonato@yahoo.com\">Greg Coladonato</a>\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.55 2003/07/14 23:02:08 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.56 2003/07/15 23:41:54 scolebourne Exp $\n  */\n public class StringUtils {\n \n     private static int PAD_LIMIT = 8192;\n \n     /**\n-     * <p>A <code>String</code> containing all blank characters.</p>\n-     *\n-     * <p>Used for efficient blank padding.  The length of the string expands as needed.</p>\n-     */\n-    private static String blanks = new String(\" \");\n+     * <p>A <code>String</code> containing all space characters (' ').</p>\n+     *\n+     * <p>Used for efficient space padding.  The length of the string expands as needed.</p>\n+     */\n+    private static String spaces = new String(\" \");\n \n     /**\n      * <p>An array of <code>String</code>s used for padding.</p>\n      *\n-     * <p>Used for efficient blank padding. The length of each string expands as needed.</p>\n+     * <p>Used for efficient space padding. The length of each string expands as needed.</p>\n      */\n     private final static String[] padding = new String[Character.MAX_VALUE];\n        // String.concat about twice as fast as StringBuffer.append\n     /**\n      * <p>Removes control characters, including whitespace, from both\n      * ends of this String, handling <code>null</code> by returning\n-     * an empty String.</p>\n+     * an empty String (\"\").</p>\n      * \n      * <pre>\n      * StringUtils.clean(\"abc\")         = \"abc\"\n     /** \n      * <p>Removes control characters, including whitespace, from both  \n      * ends of this string returning <code>null</code> if the string is \n-     * empty after the trim or if it is <code>null</code>.\n+     * empty (\"\") after the trim or if it is <code>null</code>.\n      * \n      * <p>The string is trimmed using {@link String#trim()}.</p>\n      * \n     /** \n      * <p>Removes control characters, including whitespace, from both \n      * ends of this string returning an empty string (\"\") if the string\n-     * is empty after the trim or if it is <code>null</code>.\n+     * is empty (\"\") after the trim or if it is <code>null</code>.\n      * \n      * <p>The string is trimmed using {@link String#trim()}.</p>\n      * \n     }\n \n     /**\n-     * <p>Deletes all 'space' characters from a String.</p>\n+     * <p>Deletes all 'space' characters from a String as defined by\n+     * {@link Character#isSpace(char)}.</p>\n      *\n      * <p>Spaces are defined as <code>{' ', '\\t', '\\r', '\\n', '\\b'}</code>\n-     * in line with the deprecated {@link Character#isSpace(char)}.</p>\n+     * in line with the deprecated <code>isSpace</code> method.</p>\n      *\n      * @param str  the String to delete spaces from, may be null\n      * @return the String without spaces, <code>null</code> if null string input\n     }\n \n     /**\n-     * <p>Deletes all whitespaces from a String.</p>\n-     *\n-     * <p>Whitespace is defined by\n+     * <p>Deletes all whitespaces from a String as defined by\n      * {@link Character#isWhitespace(char)}.</p>\n      *\n      * @param str  the String to delete whitespace from, may be null\n      * <p>Joins the elements of the provided array into a single String\n      * containing the provided list of elements.</p>\n      *\n-     * <p>No delimiter is added before or after the list. A\n-     * <code>null</code> separator is the same as a blank String.</p>\n+     * <p>No delimiter is added before or after the list.\n+     * A <code>null</code> separator is the same as an empty String (\"\").</p>\n      *\n      * @param array the array of values to join together\n      * @param separator the separator character to use\n      * <p>Joins the elements of the provided <code>Iterator</code> into\n      * a single String containing the provided elements.</p>\n      *\n-     * <p>No delimiter is added before or after the list. A\n-     * <code>null</code> separator is the same as a blank String.</p>\n+     * <p>No delimiter is added before or after the list.\n+     * A <code>null</code> separator is the same as an empty String (\"\").</p>\n      *\n      * @param iterator the <code>Iterator</code> of values to join together\n      * @param separator  the separator character to use\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * <p>Center a String in a larger String of size <code>n</code>.<p>\n-     *\n-     * <p>Uses spaces as the value to buffer the String with.\n-     * Equivalent to <code>center(str, size, \" \")</code>.</p>\n-     *\n-     * @param str String to center\n-     * @param size int size of new String\n+     * <p>Center a String in a larger String of size <code>size</code>\n+     * using the space character (' ').<p>\n+     *\n+     * <p>Equivalent to <code>center(str, size, \" \")</code>.</p>\n+     *\n+     * @param str  the String to center, must not be null\n+     * @param size  the int size of new String\n      * @return String containing centered String\n      * @throws NullPointerException if str is <code>null</code>\n      */\n     public static String center(String str, int size) {\n-        return center(str, size, \" \");\n-    }\n-\n-    /**\n-     * <p>Center a String in a larger String of size <code>n</code>.</p>\n-     *\n-     * <p>Uses a supplied String as the value to buffer the String with.</p>\n-     *\n-     * @param str String to center\n-     * @param size int size of new String\n-     * @param delim String to buffer the new String with\n-     * @return String containing centered String\n-     * @throws NullPointerException if str or delim is <code>null</code>\n-     * @throws ArithmeticException if delim is the empty String\n-     */\n-    public static String center(String str, int size, String delim) {\n         int sz = str.length();\n         int p = size - sz;\n         if (p < 1) {\n             return str;\n         }\n-        str = leftPad(str, sz + p / 2, delim);\n-        str = rightPad(str, size, delim);\n+        str = leftPad(str, sz + p / 2, ' ');\n+        str = rightPad(str, size, ' ');\n+        return str;\n+    }\n+\n+    /**\n+     * <p>Center a String in a larger String of size <code>size</code>.</p>\n+     *\n+     * <p>Uses a supplied String as the value to pad the String with.</p>\n+     *\n+     * @param str  the String to center, must not be null\n+     * @param size  the int size of new String\n+     * @param padStr  the String to pad the new String with, must not be null\n+     * @return String containing centered String\n+     * @throws NullPointerException if str or padStr is <code>null</code>\n+     * @throws ArithmeticException if padStr is the empty String\n+     */\n+    public static String center(String str, int size, String padStr) {\n+        int sz = str.length();\n+        int p = size - sz;\n+        if (p < 1) {\n+            return str;\n+        }\n+        str = leftPad(str, sz + p / 2, padStr);\n+        str = rightPad(str, size, padStr);\n         return str;\n     }\n \n     //--------------------------------------------------------------------------\n     \n     /**\n-     * <p>Repeat a String <code>n</code> times to form a\n+     * <p>Repeat a String <code>repeat</code> times to form a\n      * new string.</p>\n      *\n-     * @param str String to repeat\n-     * @param repeat number of times to repeat str\n-     * @return String with repeated String\n-     * @throws NegativeArraySizeException if <code>repeat < 0</code>\n+     * <pre>\n+     * StringUtils.repeat(\"\", 0)   = \"\"\n+     * StringUtils.repeat(\"\", 2)   = \"\"\n+     * StringUtils.repeat(\"a\", 3)  = \"aaa\"\n+     * StringUtils.repeat(\"ab\", 2) = \"abab\"\n+     * StringUtils.repeat(null, 2) = NullPointerException\n+     * StringUtils.repeat(\"a\", -2) = NegativeArraySizeException\n+     * </pre>\n+     *\n+     * @param str  the String to repeat, must not be null\n+     * @param repeat  number of times to repeat str\n+     * @return a new String consisting of the original String repeated\n+     * @throws NegativeArraySizeException if <code>repeat &lt; 0</code>\n      * @throws NullPointerException if str is <code>null</code>\n      */\n     public static String repeat(String str, int repeat) {\n-        if (str.length() == 1 && repeat <= PAD_LIMIT) {\n+        int inputLength = str.length();\n+        if (repeat == 0) {\n+            return \"\";\n+        }\n+        if (inputLength == 1 && repeat <= PAD_LIMIT) {\n            return padding(repeat, str.charAt(0));\n         }\n \n-        StringBuffer buffer = new StringBuffer(repeat * str.length());\n-        for (int i = 0; i < repeat; i++) {\n-            buffer.append(str);\n-        }\n-        return buffer.toString();\n-    }\n-\n-    /**\n-     * <p>Returns blank padding with a given length.</p>\n-     *\n-     * @param repeat number of times to repeat a blank\n-     * @return String with repeated character\n-     * @throws IndexOutOfBoundsException if repeat < 0\n+        char[] input = str.toCharArray();\n+        char[] output = new char[repeat * inputLength];\n+        switch (inputLength) {\n+            case 1:\n+                char ch = input[0];\n+                for (int i = repeat - 1; i >= 0; i--) {\n+                    output[i] = ch;\n+                }\n+                break;\n+            case 2:\n+                char ch0 = input[0];\n+                char ch1 = input[1];\n+                for (int i = repeat * 2 - 2; i >= 0; i--,i--) {\n+                    output[i] = ch0;\n+                    output[i + 1] = ch1;\n+                }\n+                break;\n+            default:\n+                for (int i = repeat - 1; i >= 0; i--) {\n+                    System.arraycopy(input, 0, output, i * inputLength, inputLength);\n+                }\n+                break;            \n+        }\n+        return new String(output);\n+    }\n+\n+    /**\n+     * <p>Returns a string containing the requested number of \n+     * space characters (' ').</p>\n+     * \n+     * <pre>\n+     * StringUtils.padding(0)  = \"\"\n+     * StringUtils.padding(3)  = \"   \"\n+     * StringUtils.padding(-2) = IndexOutOfBoundsException\n+     * </pre>\n+     *\n+     * @param repeat  number of times to repeat space\n+     * @return a String with <code>repeat</code> spaces\n+     * @throws IndexOutOfBoundsException if <code>repeat &lt; 0</code>\n      */\n     private static String padding(int repeat) {\n-        while (blanks.length() < repeat)  {\n-            blanks = blanks.concat(blanks);\n-        }\n-        return blanks.substring(0, repeat);\n+        while (spaces.length() < repeat)  {\n+            spaces = spaces.concat(spaces);\n+        }\n+        return spaces.substring(0, repeat);\n     }\n \n     /**\n      * <p>Returns padding using the specified delimiter repeated\n      * to a given length.</p>\n      *\n-     * @param repeat number of times to repeat delim\n-     * @param delim character to repeat\n+     * <pre>\n+     * StringUtils.padding(0, 'e')  = \"\"\n+     * StringUtils.padding(3, 'e')  = \"eee\"\n+     * StringUtils.padding(-2, 'e') = IndexOutOfBoundsException\n+     * </pre>\n+     *\n+     * @param repeat  number of times to repeat delim\n+     * @param padChar  character to repeat\n      * @return String with repeated character\n-     * @throws NullPointerException if delim is <code>null</code>\n-     * @throws IndexOutOfBoundsException if repeat < 0\n-     */\n-\n-    private static String padding(int repeat, char delim) {\n-        if (padding[delim] == null) {\n-            padding[delim] = String.valueOf(delim);\n-        }\n-        while (padding[delim].length() < repeat) {\n-            padding[delim] = padding[delim].concat(padding[delim]);\n-        }\n-        return padding[delim].substring(0, repeat);\n-    }\n-\n-    /**\n-     * <p>Right pad a String with spaces.</p>\n-     *\n-     * <p>The String is padded to the size of <code>n</code>.</p>\n-     * \n-     * @param str String to pad out\n-     * @param size number of times to repeat str\n+     * @throws IndexOutOfBoundsException if <code>repeat &lt; 0</code>\n+     */\n+    private static String padding(int repeat, char padChar) {\n+        if (padding[padChar] == null) {\n+            padding[padChar] = String.valueOf(padChar);\n+        }\n+        while (padding[padChar].length() < repeat) {\n+            padding[padChar] = padding[padChar].concat(padding[padChar]);\n+        }\n+        return padding[padChar].substring(0, repeat);\n+    }\n+\n+    /**\n+     * <p>Right pad a String with spaces (' ').</p>\n+     *\n+     * <p>The String is padded to the size of <code>size</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.rightPad(\"bat\", 3)  = \"bat\"\n+     * StringUtils.rightPad(\"bat\", 5)  = \"bat  \"\n+     * StringUtils.rightPad(\"bat\", 1)  = \"bat\"\n+     * StringUtils.rightPad(\"bat\", -1) = \"bat\"\n+     * StringUtils.rightPad(null, 1)   = NullPointerException\n+     * </pre>\n+     *\n+     * @param str  the String to pad out, must not be null\n+     * @param size  the size of the returned string, padded on the right\n      * @return right padded String or original String if no padding is necessary\n      * @throws NullPointerException if str is <code>null</code>\n      */\n         if (pads > PAD_LIMIT) {\n             return rightPad(str, size, ' ');\n         }\n-        return str + padding(pads);\n+        return str.concat(padding(pads));\n     }\n \n     /**\n      * <p>Right pad a String with a specified character.</p>\n      *\n-     * <p>The String is padded to the size of <code>n</code>.</p>\n-     *\n-     * @param str String to pad out\n-     * @param size size to pad to\n-     * @param delim character to pad with\n+     * <p>The String is padded to the size of <code>size</code>.</p>\n+     *\n+     * <pre>\n+     * StringUtils.rightPad(\"bat\", 3, 'z')  = \"bat\"\n+     * StringUtils.rightPad(\"bat\", 5, 'z')  = \"batzz\"\n+     * StringUtils.rightPad(\"bat\", 1, 'z')  = \"bat\"\n+     * StringUtils.rightPad(\"bat\", -1, 'z') = \"bat\"\n+     * StringUtils.rightPad(null, 1, 'z')   = NullPointerException\n+     * </pre>\n+     *\n+     * @param str  the String to pad out, must not be null\n+     * @param size  the size to pad to\n+     * @param padChar  the character to pad with\n      * @return right padded String or original String if no padding is necessary\n-     * @throws NullPointerException if str or delim is <code>null<code>\n-     */\n-    public static String rightPad(String str, int size, char delim) {\n+     * @throws NullPointerException if str is <code>null<code>\n+     */\n+    public static String rightPad(String str, int size, char padChar) {\n         int pads = size - str.length();\n         if (pads <= 0) {\n             return str; // returns original string when possible\n         }\n         if (pads > PAD_LIMIT) {\n-            return rightPad(str, size, String.valueOf(delim));\n-        }\n-        return str + padding(pads, delim);\n+            return rightPad(str, size, String.valueOf(padChar));\n+        }\n+        return str.concat(padding(pads, padChar));\n     }\n \n     /**\n      * <p>Right pad a String with a specified string.</p>\n      *\n-     * <p>The String is padded to the size of <code>n</code>.</p>\n-     *\n-     * @param str String to pad out\n-     * @param size size to pad to\n-     * @param delim String to pad with\n+     * <p>The String is padded to the size of <code>size</code>.</p>\n+     *\n+     * <pre>\n+     * StringUtils.rightPad(\"bat\", 3, \"yz\")  = \"bat\"\n+     * StringUtils.rightPad(\"bat\", 5, \"yz\")  = \"batyz\"\n+     * StringUtils.rightPad(\"bat\", 8, \"yz\")  = \"batyzyzy\"\n+     * StringUtils.rightPad(\"bat\", 1, \"yz\")  = \"bat\"\n+     * StringUtils.rightPad(\"bat\", -1, \"yz\") = \"bat\"\n+     * StringUtils.rightPad(null, 1, \"yz\")   = NullPointerException\n+     * StringUtils.rightPad(\"bat\", 1, null)  = NullPointerException\n+     * StringUtils.rightPad(\"bat\", 1, \"\")    = ArithmeticException\n+     * </pre>\n+     *\n+     * @param str  the String to pad out, must not be null\n+     * @param size  the size to pad to\n+     * @param padStr  the String to pad with, must not be null\n      * @return right padded String or original String if no padding is necessary\n-     * @throws NullPointerException if str or delim is <code>null<code>\n-     * @throws ArithmeticException if delim is the empty String\n-     */\n-    public static String rightPad(String str, int size, String delim) {\n-        if (delim.length() == 1 && size - str.length() <= PAD_LIMIT) {\n-           return rightPad(str, size, delim.charAt(0));\n-        }\n-\n-        size = (size - str.length()) / delim.length();\n+     * @throws NullPointerException if str or padStr is <code>null<code>\n+     * @throws ArithmeticException if padStr is the empty String\n+     */\n+    public static String rightPad(String str, int size, String padStr) {\n+        if (padStr.length() == 1 && size - str.length() <= PAD_LIMIT) {\n+           return rightPad(str, size, padStr.charAt(0));\n+        }\n+\n+        size = (size - str.length()) / padStr.length();\n         if (size > 0) {\n-            str += repeat(delim, size);\n+            str += repeat(padStr, size);\n         }\n         return str;\n     }\n \n     /**\n-     * <p>Left pad a String with spaces.</p>\n-     *\n-     * <p>The String is padded to the size of <code>n<code>.</p>\n-     *\n-     * @param str String to pad out\n-     * @param size size to pad to\n+     * <p>Left pad a String with spaces (' ').</p>\n+     *\n+     * <p>The String is padded to the size of <code>size<code>.</p>\n+     *\n+     * <pre>\n+     * StringUtils.leftPad(\"bat\", 3)  = \"bat\"\n+     * StringUtils.leftPad(\"bat\", 5)  = \"  bat\"\n+     * StringUtils.leftPad(\"bat\", 1)  = \"bat\"\n+     * StringUtils.leftPad(\"bat\", -1) = \"bat\"\n+     * StringUtils.leftPad(null, 1)   = NullPointerException\n+     * </pre>\n+     *\n+     * @param str  the String to pad out, must not be null\n+     * @param size  the size to pad to\n      * @return left padded String or original String if no padding is necessary\n-     * @throws NullPointerException if str or delim is <code>null<code>\n+     * @throws NullPointerException if str is <code>null<code>\n      */\n     public static String leftPad(String str, int size) {\n         int pads = size - str.length();\n     /**\n      * <p>Left pad a String with a specified character.</p>\n      *\n-     * <p>Pad to a size of <code>n</code>.</p>\n-     *\n-     * @param str String to pad out\n-     * @param size size to pad to\n-     * @param delim character to pad with\n+     * <p>Pad to a size of <code>size</code>.</p>\n+     *\n+     * <pre>\n+     * StringUtils.leftPad(\"bat\", 3, 'z')  = \"bat\"\n+     * StringUtils.leftPad(\"bat\", 5, 'z')  = \"zzbat\"\n+     * StringUtils.leftPad(\"bat\", 1, 'z')  = \"bat\"\n+     * StringUtils.leftPad(\"bat\", -1, 'z') = \"bat\"\n+     * StringUtils.leftPad(null, 1, 'z')   = NullPointerException\n+     * </pre>\n+     *\n+     * @param str  the String to pad out, must not be null\n+     * @param size  the size to pad to\n+     * @param padChar  the character to pad with\n      * @return left padded String or original String if no padding is necessary\n      * @throws NullPointerException if str or delim is <code>null</code>\n      */\n-    public static String leftPad(String str, int size, char delim) {\n+    public static String leftPad(String str, int size, char padChar) {\n         int pads = size - str.length();\n         if (pads <= 0) {\n             return str; // returns original string when possible\n         if (pads > PAD_LIMIT) {\n             return leftPad(str, size, ' ');\n         }\n-        return padding(pads, delim).concat(str);\n+        return padding(pads, padChar).concat(str);\n     }\n \n     /**\n      * <p>Left pad a String with a specified string.</p>\n      *\n-     * <p>Pad to a size of <code>n</code>.</p>\n-     *\n-     * @param str String to pad out\n-     * @param size size to pad to\n-     * @param delim String to pad with\n+     * <p>Pad to a size of <code>size</code>.</p>\n+     *\n+     * <pre>\n+     * StringUtils.leftPad(\"bat\", 3, \"yz\")  = \"bat\"\n+     * StringUtils.leftPad(\"bat\", 5, \"yz\")  = \"yzbat\"\n+     * StringUtils.leftPad(\"bat\", 8, \"yz\")  = \"yzyzybat\"\n+     * StringUtils.leftPad(\"bat\", 1, \"yz\")  = \"bat\"\n+     * StringUtils.leftPad(\"bat\", -1, \"yz\") = \"bat\"\n+     * StringUtils.leftPad(null, 1, \"yz\")   = NullPointerException\n+     * StringUtils.leftPad(\"bat\", 1, null)  = NullPointerException\n+     * StringUtils.leftPad(\"bat\", 1, \"\")    = ArithmeticException\n+     * </pre>\n+     *\n+     * @param str  the String to pad out, must not be null\n+     * @param size  the size to pad to\n+     * @param padStr  the String to pad with\n      * @return left padded String or original String if no padding is necessary\n      * @throws NullPointerException if str or delim is null\n      * @throws ArithmeticException if delim is the empty string\n      */\n-    public static String leftPad(String str, int size, String delim) {\n-        if (delim.length() == 1 && size - str.length() <= PAD_LIMIT)\n-           return leftPad(str, size, delim.charAt(0));\n-        size = (size - str.length()) / delim.length();\n+    public static String leftPad(String str, int size, String padStr) {\n+        if (padStr.length() == 1 && size - str.length() <= PAD_LIMIT)\n+           return leftPad(str, size, padStr.charAt(0));\n+        size = (size - str.length()) / padStr.length();\n         if (size > 0) {\n-            str = repeat(delim, size) + str;\n+            str = repeat(padStr, size) + str;\n         }\n         return str;\n     }\n      * <p>Checks if the String contains only unicode letters.</p>\n      *\n      * <p><code>null</code> will return <code>false</code>.\n-     * An empty String will return <code>true</code>.</p>\n+     * An empty String (\"\") will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n      * @return <code>true</code> if only contains letters, and is non-null\n     /**\n      * <p>Checks if the String contains only whitespace.</p>\n      *\n-     * <p><code>null</code> will return <code>false</code>. An\n-     * empty String will return <code>true</code>.</p>\n+     * <p><code>null</code> will return <code>false</code>.\n+     * An empty String (\"\") will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n      * @return <code>true</code> if only contains whitespace, and is non-null\n \n     /**\n      * <p>Checks if the String contains only unicode letters and\n-     * space (<code>' '</code>).</p>\n-     *\n-     * <p><code>null</code> will return <code>false</code>. An\n-     * empty String will return <code>true</code>.</p>\n+     * space (' ').</p>\n+     *\n+     * <p><code>null</code> will return <code>false</code>\n+     * An empty String (\"\") will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n      * @return <code>true</code> if only contains letters and space,\n     /**\n      * <p>Checks if the String contains only unicode letters or digits.</p>\n      *\n-     * <p><code>null</code> will return <code>false</code>. An empty\n-     * String will return <code>true</code>.</p>\n+     * <p><code>null</code> will return <code>false</code>.\n+     * An empty String (\"\") will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n      * @return <code>true</code> if only contains letters or digits,\n      * <p>Checks if the String contains only unicode letters, digits\n      * or space (<code>' '</code>).</p>\n      *\n-     * <p><code>null</code> will return <code>false</code>. An empty\n-     * String will return <code>true</code>.</p>\n+     * <p><code>null</code> will return <code>false</code>.\n+     * An empty String (\"\") will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n      * @return <code>true</code> if only contains letters, digits or space,\n      * <p>Checks if the String contains only unicode digits.</p>\n      *\n      * <p><code>null</code> will return <code>false</code>.\n-     * An empty String will return <code>true</code>.</p>\n+     * An empty String (\"\") will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n      * @return <code>true</code> if only contains digits, and is non-null\n      * <p>Checks if the String contains only unicode digits or space\n      * (<code>' '</code>).</p>\n      *\n-     * <p><code>null</code> will return <code>false</code>. An empty\n-     * String will return <code>true</code>.</p>\n+     * <p><code>null</code> will return <code>false</code>.\n+     * An empty String (\"\") will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n      * @return <code>true</code> if only contains digits or space,\n     //--------------------------------------------------------------------------\n     \n     /**\n+     * <p>Returns either the passed in String, \n+     * or if the String is <code>null</code>, an empty String (\"\").</p>\n+     * \n+     * <pre>\n+     * StringUtils.defaultString(null)  = \"\"\n+     * StringUtils.defaultString(\"\")    = \"\"\n+     * StringUtils.defaultString(\"bat\") = \"bat\"\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @return the passed in String, or the empty string if it\n+     *  was <code>null</code>\n+     */\n+    public static String defaultString(String str) {\n+        return (str == null ? \"\" : str);\n+    }\n+\n+    /**\n      * <p>Returns either the passed in <code>Object</code> as a String,\n-     * or, if the <code>Object</code> is <code>null</code>, an empty\n-     * String.</p>\n-     * \n-     * @param obj the Object to check\n-     * @return the passed in Object's toString, or blank if it was\n-     *  <code>null</code>\n+     * or, if the <code>Object</code> is <code>null</code>,\n+     * an empty String (\"\").</p>\n+     * \n+     * <pre>\n+     * StringUtils.defaultString(null)         = \"null\"\n+     * StringUtils.defaultString(\"\")           = \"\"\n+     * StringUtils.defaultString(\"bat\")        = \"bat\"\n+     * StringUtils.defaultString(Boolean.TRUE) = \"true\"\n+     * </pre>\n+     * \n+     * @param obj  the Object to check, using <code>toString()</code>, may be null\n+     * @return the passed in Object's toString, or the empty string if it\n+     *  was <code>null</code>\n      */\n     public static String defaultString(Object obj) {\n-        return defaultString(obj, \"\");\n+        return (obj == null ? \"\" : obj.toString());\n+    }\n+\n+    /**\n+     * <p>Returns either the passed in String, \n+     * or if the String is <code>null</code>, an empty String (\"\").</p>\n+     * \n+     * <pre>\n+     * StringUtils.defaultString(null, \"null\")  = \"null\"\n+     * StringUtils.defaultString(\"\", \"null\")    = \"\"\n+     * StringUtils.defaultString(\"bat\", \"null\") = \"bat\"\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param defaultStr  the default String to return \n+     *  if the input is <code>null</code>, may be null\n+     * @return the passed in String, or the default if it was <code>null</code>\n+     */\n+    public static String defaultString(String str, String defaultStr) {\n+        return (str == null ? defaultStr : str);\n     }\n \n     /**\n      * or, if the <code>Object</code> is <code>null</code>, a passed\n      * in default String.</p>\n      * \n-     * @param obj the Object to check\n-     * @param defaultString  the default String to return if str is\n-     *  <code>null</code>\n-     * @return the passed in string, or the default if it was\n-     *  <code>null</code>\n-     */\n-    public static String defaultString(Object obj, String defaultString) {\n-        return (obj == null) ? defaultString : obj.toString();\n+     * <pre>\n+     * StringUtils.defaultString(null, \"null\")         = \"null\"\n+     * StringUtils.defaultString(\"\", \"null\")           = \"\"\n+     * StringUtils.defaultString(\"bat\", \"null\")        = \"bat\"\n+     * StringUtils.defaultString(Boolean.TRUE, \"null\") = \"true\"\n+     * </pre>\n+     * \n+     * @param obj  the Object to check, using <code>toString()</code>, may be null\n+     * @param defaultStr  the default String to return \n+     *  if the input is <code>null</code>, may be null\n+     * @return the passed in Object's toString, or the default if it was <code>null</code>\n+     */\n+    public static String defaultString(Object obj, String defaultStr) {\n+        return (obj == null ? defaultStr : obj.toString());\n     }\n \n     // Reversing\n      *\n      * <p><code>null</code> String returns <code>null</code>.</p>\n      * \n-     * @param str the String to reverse\n-     * @return the reversed String\n+     * <pre>\n+     * StringUtils.reverse(null)  = null\n+     * StringUtils.reverse(\"\")    = \"\"\n+     * StringUtils.reverse(\"bat\") = \"tab\"\n+     * </pre>\n+     * \n+     * @param str  the String to reverse, may be null\n+     * @return the reversed String, <code>null</code> if null string input\n      */\n     public static String reverse(String str) {\n         if (str == null) {\n      * Thus java.lang.String becomes String.lang.java (if the delimiter\n      * is <code>'.'</code>).</p>\n      * \n-     * @param str the String to reverse\n-     * @param delimiter the delimiter to use\n+     * @param str  the String to reverse\n+     * @param delimiter  the delimiter to use\n      * @return the reversed String\n      */\n     public static String reverseDelimitedString(String str, String delimiter) {\n      * (More precisely, return the remainder of the second string,\n      * starting from where it's different from the first.)</p>\n      *\n-     * <p>\n-     * For example, <code>difference(\"i am a machine\", \"i am a robot\") -> \"robot\"</code>\n-     *\n-     * @return the portion of s2 where it differs from s1; returns the empty string (\"\") if they are equal\n+     * <p>For example,\n+     * <code>difference(\"i am a machine\", \"i am a robot\") -> \"robot\"</code>.</p>\n+     *\n+     * @return the portion of s2 where it differs from s1; returns the \n+     * empty string if they are equal\n      */\n     public static String difference(String s1, String s2) {\n         int at = differenceAt(s1, s2);\n     }\n \n     /**\n-     * <p>Compare two strings, and return the index at which the strings begin to differ.</p>\n-     * \n-     * <p>For example, <code>differenceAt(\"i am a machine\", \"i am a robot\") -> 7</code></p>\n+     * <p>Compare two strings, and return the index at which the\n+     * strings begin to differ.</p>\n+     * \n+     * <p>For example, \n+     * <code>differenceAt(\"i am a machine\", \"i am a robot\") -> 7</code></p>\n      *\n      * @return the index where s2 and s1 begin to differ; -1 if they are equal\n      */\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n- * @version $Id: StringUtilsTest.java,v 1.21 2003/06/23 03:51:13 bayard Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.22 2003/07/15 23:41:54 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n \n     }\n \n     public void testRepeat() {\n-        assertEquals(\"repeat(String, int) failed\",\n-                     FOO + FOO + FOO, StringUtils.repeat(FOO, 3) );\n+        assertEquals(\"\", StringUtils.repeat(\"ab\", 0));\n+        assertEquals(\"\", StringUtils.repeat(\"\", 3));\n+        assertEquals(\"aaa\", StringUtils.repeat(\"a\", 3));\n+        assertEquals(\"ababab\", StringUtils.repeat(\"ab\", 3));\n+        assertEquals(\"abcabcabc\", StringUtils.repeat(\"abc\", 3));\n+        try {\n+            StringUtils.repeat(null, 0);\n+            fail();\n+        } catch (NullPointerException ex) {\n+        }\n     }\n \n     public void testCenter() {\n                      FOO, StringUtils.defaultString(FOO, BAR) );\n         assertEquals(\"defaultString(null,String) failed\",\n                      BAR, StringUtils.defaultString(null, BAR) );\n+\n+        assertEquals(\"defaultString((Object) empty-string) failed\",\n+                     \"\", StringUtils.defaultString((Object) \"\") );\n+        assertEquals(\"defaultString((Object) String) failed\",\n+                     FOO, StringUtils.defaultString((Object) FOO) );\n+        assertEquals(\"defaultString((Object) null) failed\",\n+                     \"\", StringUtils.defaultString((Object) null) );\n+        assertEquals(\"defaultString((Object) empty-string,String) failed\",\n+                     \"\", StringUtils.defaultString((Object) \"\", BAR) );\n+        assertEquals(\"defaultString((Object) String,String) failed\",\n+                     FOO, StringUtils.defaultString((Object) FOO, BAR) );\n+        assertEquals(\"defaultString((Object) null,String) failed\",\n+                     BAR, StringUtils.defaultString((Object) null, BAR) );\n+        assertEquals(\"defaultString(Boolean.TRUE,String) failed\",\n+                     Boolean.TRUE.toString(), StringUtils.defaultString(Boolean.TRUE, BAR) );\n     }\n \n     public void testEscapeFunctions() {", "timestamp": 1058312514, "metainfo": ""}