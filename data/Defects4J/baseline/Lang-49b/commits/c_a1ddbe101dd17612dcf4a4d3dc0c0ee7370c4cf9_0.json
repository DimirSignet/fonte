{"sha": "a1ddbe101dd17612dcf4a4d3dc0c0ee7370c4cf9", "log": "Add since tags Formatting   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/Nestable.java\n+++ b/src/java/org/apache/commons/lang/exception/Nestable.java\n-package org.apache.commons.lang.exception;\n-\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n+package org.apache.commons.lang.exception;\n \n import java.io.PrintStream;\n import java.io.PrintWriter;\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: Nestable.java,v 1.4 2002/09/12 01:20:25 stevencaswell Exp $\n+ * @since 1.0\n+ * @version $Id: Nestable.java,v 1.5 2002/12/23 00:15:19 scolebourne Exp $\n  */\n-public interface Nestable\n-{\n+public interface Nestable {\n+    \n     /**\n      * Returns the reference to the exception or error that caused the\n      * exception implementing the <code>Nestable</code> to be thrown.\n      * @return the throwable count\n      */\n     public int getThrowableCount();\n-    \n+\n     /**\n      * Returns this <code>Nestable</code> and any nested <code>Throwable</code>s\n      * in an array of <code>Throwable</code>s, one element for each\n      * chain\n      */\n     public int indexOfThrowable(Class type, int fromIndex);\n-    \n+\n     /**\n      * Prints the stack trace of this exception to the specified print\n      * writer.  Includes inforamation from the exception--if\n--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n-package org.apache.commons.lang.exception;\n-\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n+package org.apache.commons.lang.exception;\n \n import java.io.PrintStream;\n import java.io.PrintWriter;\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author Sean C. Sullivan\n- * @version $Id: NestableDelegate.java,v 1.10 2002/10/09 05:29:52 sullis Exp $\n+ * @since 1.0\n+ * @version $Id: NestableDelegate.java,v 1.11 2002/12/23 00:15:19 scolebourne Exp $\n  */\n-public class NestableDelegate\n-\timplements java.io.Serializable\n-{\n+public class NestableDelegate implements java.io.Serializable {\n+\n     /**\n      * Constructor error message.\n      */\n     private transient static final String MUST_BE_THROWABLE =\n         \"The Nestable implementation passed to the NestableDelegate(Nestable) \"\n-        + \"constructor must extend java.lang.Throwable\";\n+            + \"constructor must extend java.lang.Throwable\";\n \n     /**\n      * Holds the reference to the exception or error that we're\n      * @param nestable the Nestable implementation (<i>must</i> extend\n      * {@link java.lang.Throwable})\n      */\n-    NestableDelegate(Nestable nestable) // package\n-    {\n-        if (nestable instanceof Throwable)\n-        {\n+    NestableDelegate(Nestable nestable) {\n+        if (nestable instanceof Throwable) {\n             this.nestable = (Throwable) nestable;\n-        }\n-        else\n-        {\n+        } else {\n             throw new IllegalArgumentException(MUST_BE_THROWABLE);\n         }\n     }\n      * negative or not less than the count of <code>Throwable</code>s in the\n      * chain\n      */\n-    String getMessage(int index)\n-    {\n+    String getMessage(int index) {\n         Throwable t = this.getThrowable(index);\n-        if(Nestable.class.isInstance(t))\n-        {\n+        if (Nestable.class.isInstance(t)) {\n             return ((Nestable) t).getMessage(0);\n-        }\n-        else\n-        {\n+        } else {\n             return t.getMessage();\n         }\n     }\n-    \n+\n     /**\n      * Returns the full message contained by the <code>Nestable</code>\n      * and any nested <code>Throwable</code>s.\n      * @return The concatenated message for this and all nested\n      * <code>Throwable</code>s\n      */\n-    String getMessage(String baseMsg) // package\n-    {\n+    String getMessage(String baseMsg) {\n         StringBuffer msg = new StringBuffer();\n-        if (baseMsg != null)\n-        {\n+        if (baseMsg != null) {\n             msg.append(baseMsg);\n         }\n \n         Throwable nestedCause = ExceptionUtils.getCause(this.nestable);\n-        if (nestedCause != null)\n-        {\n+        if (nestedCause != null) {\n             String causeMsg = nestedCause.getMessage();\n-            if (causeMsg != null)\n-            {\n-                if (baseMsg != null)\n-                {\n+            if (causeMsg != null) {\n+                if (baseMsg != null) {\n                     msg.append(\": \");\n                 }\n                 msg.append(causeMsg);\n      *\n      * @return the error messages\n      */\n-    String[] getMessages() // package\n-    {\n+    String[] getMessages() {\n         Throwable[] throwables = this.getThrowables();\n         String[] msgs = new String[throwables.length];\n-        for(int i = 0; i < throwables.length; i++)\n-        {\n-            msgs[i] = (Nestable.class.isInstance(throwables[i]) ?\n-                       ((Nestable) throwables[i]).getMessage(0) :\n-                       throwables[i].getMessage());\n+        for (int i = 0; i < throwables.length; i++) {\n+            msgs[i] =\n+                (Nestable.class.isInstance(throwables[i])\n+                    ? ((Nestable) throwables[i]).getMessage(0)\n+                    : throwables[i].getMessage());\n         }\n         return msgs;\n     }\n      * negative or not less than the count of <code>Throwable</code>s in the\n      * chain\n      */\n-    Throwable getThrowable(int index)\n-    {\n-        if(index == 0)\n-        {\n+    Throwable getThrowable(int index) {\n+        if (index == 0) {\n             return this.nestable;\n         }\n         Throwable[] throwables = this.getThrowables();\n         return throwables[index];\n     }\n-    \n+\n     /**\n      * Returns the number of <code>Throwable</code>s contained in the\n      * <code>Nestable</code> contained by this delegate.\n      *\n      * @return the throwable count\n      */\n-    int getThrowableCount() // package\n-    {\n+    int getThrowableCount() {\n         return ExceptionUtils.getThrowableCount(this.nestable);\n     }\n-    \n+\n     /**\n      * Returns this delegate's <code>Nestable</code> and any nested\n      * <code>Throwable</code>s in an array of <code>Throwable</code>s, one\n      *\n      * @return the <code>Throwable</code>s\n      */\n-    Throwable[] getThrowables() // package\n-    {\n+    Throwable[] getThrowables() {\n         return ExceptionUtils.getThrowables(this.nestable);\n     }\n \n      * is negative or not less than the count of <code>Throwable</code>s in the\n      * chain\n      */\n-    int indexOfThrowable(Class type, int fromIndex) // package\n-    {\n+    int indexOfThrowable(Class type, int fromIndex) {\n         return ExceptionUtils.indexOfThrowable(this.nestable, type, fromIndex);\n     }\n-    \n+\n     /**\n      * Prints the stack trace of this exception the the standar error\n      * stream.\n      */\n-    public void printStackTrace()\n-    {\n+    public void printStackTrace() {\n         printStackTrace(System.err);\n     }\n \n      * @param out <code>PrintStream</code> to use for output.\n      * @see #printStackTrace(PrintWriter)\n      */\n-    public void printStackTrace(PrintStream out)\n-    {\n-        synchronized (out)\n-        {\n+    public void printStackTrace(PrintStream out) {\n+        synchronized (out) {\n             PrintWriter pw = new PrintWriter(out, false);\n             printStackTrace(pw);\n             // Flush the PrintWriter before it's GC'ed.\n      *\n      * @param out <code>PrintWriter</code> to use for output.\n      */\n-    public void printStackTrace(PrintWriter out)\n-    {\n-        synchronized (out)\n-        {\n+    public void printStackTrace(PrintWriter out) {\n+        synchronized (out) {\n             String[] st = getStackFrames(this.nestable);\n             Throwable nestedCause = ExceptionUtils.getCause(this.nestable);\n-            if (nestedCause != null)\n-            {\n-                if (nestedCause instanceof Nestable)\n-                {\n+            if (nestedCause != null) {\n+                if (nestedCause instanceof Nestable) {\n                     // Recurse until a non-Nestable is encountered.\n-                    ((Nestable) nestedCause).printStackTrace(out);\n-                }\n-                else\n-                {\n+                     ((Nestable) nestedCause).printStackTrace(out);\n+                } else {\n                     String[] nst = getStackFrames(nestedCause);\n-                    for (int i = 0; i < nst.length; i++)\n-                    {\n+                    for (int i = 0; i < nst.length; i++) {\n                         out.println(nst[i]);\n                     }\n                 }\n             }\n \n             // Output desired frames from stack trace.\n-            for (int i = 0; i < st.length; i++)\n-            {\n+            for (int i = 0; i < st.length; i++) {\n                 out.println(st[i]);\n             }\n         }\n      * @param t The <code>Throwable</code>.\n      * @return  An array of strings describing each stack frame.\n      */\n-    private String[] getStackFrames(Throwable t)\n-    {\n+    private String[] getStackFrames(Throwable t) {\n         StringWriter sw = new StringWriter();\n         PrintWriter pw = new PrintWriter(sw, true);\n \n         // Avoid infinite loop between decompose() and printStackTrace().\n-        if (t instanceof Nestable)\n-        {\n+        if (t instanceof Nestable) {\n             ((Nestable) t).printPartialStackTrace(pw);\n-        }\n-        else\n-        {\n+        } else {\n             t.printStackTrace(pw);\n         }\n         return ExceptionUtils.getStackFrames(sw.getBuffer().toString());\n--- a/src/java/org/apache/commons/lang/exception/NestableError.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableError.java\n-package org.apache.commons.lang.exception;\n-\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n+package org.apache.commons.lang.exception;\n \n import java.io.PrintStream;\n import java.io.PrintWriter;\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @see org.apache.commons.lang.exception.NestableException\n  * @since 1.0\n+ * @version $Id: NestableError.java,v 1.4 2002/12/23 00:15:19 scolebourne Exp $\n  */\n-public class NestableError extends Error implements Nestable\n-{\n+public class NestableError extends Error implements Nestable {\n+\n     /**\n      * The helper instance which contains much of the code which we\n      * delegate to.\n      * Constructs a new <code>NestableError</code> without specified\n      * detail message.\n      */\n-    public NestableError()\n-    {\n+    public NestableError() {\n         super();\n     }\n \n      *\n      * @param msg The error message.\n      */\n-    public NestableError(String msg)\n-    {\n+    public NestableError(String msg) {\n         super(msg);\n     }\n \n      * @param cause the exception or error that caused this exception to be\n      * thrown\n      */\n-    public NestableError(Throwable cause)\n-    {\n+    public NestableError(Throwable cause) {\n         super();\n         this.cause = cause;\n     }\n      * @param cause  the exception or error that caused this exception to be\n      * thrown\n      */\n-    public NestableError(String msg, Throwable cause)\n-    {\n+    public NestableError(String msg, Throwable cause) {\n         super(msg);\n         this.cause = cause;\n     }\n \n-    public Throwable getCause()\n-    {\n+    public Throwable getCause() {\n         return cause;\n     }\n \n-    public String getMessage()\n-    {\n+    public String getMessage() {\n         return delegate.getMessage(super.getMessage());\n     }\n \n-    public String getMessage(int index)\n-    {\n-        if (index == 0)\n-        {\n+    public String getMessage(int index) {\n+        if (index == 0) {\n             return super.getMessage();\n-        }\n-        else\n-        {\n+        } else {\n             return delegate.getMessage(index);\n         }\n     }\n-    \n-    public String[] getMessages()\n-    {\n+\n+    public String[] getMessages() {\n         return delegate.getMessages();\n     }\n-    \n-    public Throwable getThrowable(int index)\n-    {\n+\n+    public Throwable getThrowable(int index) {\n         return delegate.getThrowable(index);\n     }\n-    \n-    public int getThrowableCount()\n-    {\n+\n+    public int getThrowableCount() {\n         return delegate.getThrowableCount();\n     }\n-    \n-    public Throwable[] getThrowables()\n-    {\n+\n+    public Throwable[] getThrowables() {\n         return delegate.getThrowables();\n     }\n-    \n-    public int indexOfThrowable(Class type)\n-    {\n+\n+    public int indexOfThrowable(Class type) {\n         return delegate.indexOfThrowable(type, 0);\n     }\n \n-    public int indexOfThrowable(Class type, int fromIndex)\n-    {\n+    public int indexOfThrowable(Class type, int fromIndex) {\n         return delegate.indexOfThrowable(type, fromIndex);\n     }\n \n-    public void printStackTrace()\n-    {\n+    public void printStackTrace() {\n         delegate.printStackTrace();\n     }\n \n-    public void printStackTrace(PrintStream out)\n-    {\n+    public void printStackTrace(PrintStream out) {\n         delegate.printStackTrace(out);\n     }\n \n-    public void printStackTrace(PrintWriter out)\n-    {\n+    public void printStackTrace(PrintWriter out) {\n         delegate.printStackTrace(out);\n     }\n \n-    public final void printPartialStackTrace(PrintWriter out)\n-    {\n+    public final void printPartialStackTrace(PrintWriter out) {\n         super.printStackTrace(out);\n     }\n }\n--- a/src/java/org/apache/commons/lang/exception/NestableException.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableException.java\n-package org.apache.commons.lang.exception;\n-\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n+package org.apache.commons.lang.exception;\n \n import java.io.PrintStream;\n import java.io.PrintWriter;\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableException.java,v 1.5 2002/09/29 08:20:52 bayard Exp $\n+ * @since 1.0\n+ * @version $Id: NestableException.java,v 1.6 2002/12/23 00:15:19 scolebourne Exp $\n  */\n-public class NestableException extends Exception implements Nestable\n-{\n+public class NestableException extends Exception implements Nestable {\n+    \n     /**\n      * The helper instance which contains much of the code which we\n      * delegate to.\n      * Constructs a new <code>NestableException</code> without specified\n      * detail message.\n      */\n-    public NestableException()\n-    {\n+    public NestableException() {\n         super();\n     }\n \n      *\n      * @param msg The error message.\n      */\n-    public NestableException(String msg)\n-    {\n+    public NestableException(String msg) {\n         super(msg);\n     }\n \n      * @param cause the exception or error that caused this exception to be\n      * thrown\n      */\n-    public NestableException(Throwable cause)\n-    {\n+    public NestableException(Throwable cause) {\n         super();\n         this.cause = cause;\n     }\n      * @param cause  the exception or error that caused this exception to be\n      * thrown\n      */\n-    public NestableException(String msg, Throwable cause)\n-    {\n+    public NestableException(String msg, Throwable cause) {\n         super(msg);\n         this.cause = cause;\n     }\n \n-    public Throwable getCause()\n-    {\n+    public Throwable getCause() {\n         return cause;\n     }\n \n-    public String getMessage()\n-    {\n+    public String getMessage() {\n         return delegate.getMessage(super.getMessage());\n     }\n \n-    public String getMessage(int index)\n-    {\n-        if (index == 0)\n-        {\n+    public String getMessage(int index) {\n+        if (index == 0) {\n             return super.getMessage();\n-        }\n-        else\n-        {\n+        } else {\n             return delegate.getMessage(index);\n         }\n     }\n-    \n-    public String[] getMessages()\n-    {\n+\n+    public String[] getMessages() {\n         return delegate.getMessages();\n     }\n-    \n-    public Throwable getThrowable(int index)\n-    {\n+\n+    public Throwable getThrowable(int index) {\n         return delegate.getThrowable(index);\n     }\n-    \n-    public int getThrowableCount()\n-    {\n+\n+    public int getThrowableCount() {\n         return delegate.getThrowableCount();\n     }\n-    \n-    public Throwable[] getThrowables()\n-    {\n+\n+    public Throwable[] getThrowables() {\n         return delegate.getThrowables();\n     }\n-    \n-    public int indexOfThrowable(Class type)\n-    {\n+\n+    public int indexOfThrowable(Class type) {\n         return delegate.indexOfThrowable(type, 0);\n     }\n \n-    public int indexOfThrowable(Class type, int fromIndex)\n-    {\n+    public int indexOfThrowable(Class type, int fromIndex) {\n         return delegate.indexOfThrowable(type, fromIndex);\n     }\n \n-    public void printStackTrace()\n-    {\n+    public void printStackTrace() {\n         delegate.printStackTrace();\n     }\n \n-    public void printStackTrace(PrintStream out)\n-    {\n+    public void printStackTrace(PrintStream out) {\n         delegate.printStackTrace(out);\n     }\n \n-    public void printStackTrace(PrintWriter out)\n-    {\n+    public void printStackTrace(PrintWriter out) {\n         delegate.printStackTrace(out);\n     }\n \n-    public final void printPartialStackTrace(PrintWriter out)\n-    {\n+    public final void printPartialStackTrace(PrintWriter out) {\n         super.printStackTrace(out);\n     }\n-    \n+\n }\n--- a/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java\n-package org.apache.commons.lang.exception;\n-\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n  * information on the Apache Software Foundation, please see\n  * <http://www.apache.org/>.\n  */\n+package org.apache.commons.lang.exception;\n \n import java.io.PrintStream;\n import java.io.PrintWriter;\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableRuntimeException.java,v 1.5 2002/09/29 08:20:52 bayard Exp $\n+ * @since 1.0\n+ * @version $Id: NestableRuntimeException.java,v 1.6 2002/12/23 00:15:19 scolebourne Exp $\n  */\n-public class NestableRuntimeException extends RuntimeException\n-    implements Nestable\n-{\n+public class NestableRuntimeException extends RuntimeException implements Nestable {\n+    \n     /**\n      * The helper instance which contains much of the code which we\n      * delegate to.\n      * Constructs a new <code>NestableRuntimeException</code> without specified\n      * detail message.\n      */\n-    public NestableRuntimeException()\n-    {\n+    public NestableRuntimeException() {\n         super();\n     }\n \n      *\n      * @param msg the error message\n      */\n-    public NestableRuntimeException(String msg)\n-    {\n+    public NestableRuntimeException(String msg) {\n         super(msg);\n     }\n \n      * @param cause the exception or error that caused this exception to be\n      * thrown\n      */\n-    public NestableRuntimeException(Throwable cause)\n-    {\n+    public NestableRuntimeException(Throwable cause) {\n         super();\n         this.cause = cause;\n     }\n      * @param cause  the exception or error that caused this exception to be\n      * thrown\n      */\n-    public NestableRuntimeException(String msg, Throwable cause)\n-    {\n+    public NestableRuntimeException(String msg, Throwable cause) {\n         super(msg);\n         this.cause = cause;\n     }\n \n-    public Throwable getCause()\n-    {\n+    public Throwable getCause() {\n         return cause;\n     }\n \n-    public String getMessage()\n-    {\n+    public String getMessage() {\n         return delegate.getMessage(super.getMessage());\n     }\n \n-    public String getMessage(int index)\n-    {\n-        if (index == 0)\n-        {\n+    public String getMessage(int index) {\n+        if (index == 0) {\n             return super.getMessage();\n-        }\n-        else\n-        {\n+        } else {\n             return delegate.getMessage(index);\n         }\n     }\n-    \n-    public String[] getMessages()\n-    {\n+\n+    public String[] getMessages() {\n         return delegate.getMessages();\n     }\n-    \n-    public Throwable getThrowable(int index)\n-    {\n+\n+    public Throwable getThrowable(int index) {\n         return delegate.getThrowable(index);\n     }\n-    \n-    public int getThrowableCount()\n-    {\n+\n+    public int getThrowableCount() {\n         return delegate.getThrowableCount();\n     }\n-    \n-    public Throwable[] getThrowables()\n-    {\n+\n+    public Throwable[] getThrowables() {\n         return delegate.getThrowables();\n     }\n-    \n-    public int indexOfThrowable(Class type)\n-    {\n+\n+    public int indexOfThrowable(Class type) {\n         return delegate.indexOfThrowable(type, 0);\n     }\n \n-    public int indexOfThrowable(Class type, int fromIndex)\n-    {\n+    public int indexOfThrowable(Class type, int fromIndex) {\n         return delegate.indexOfThrowable(type, fromIndex);\n     }\n-    \n-    public void printStackTrace()\n-    {\n+\n+    public void printStackTrace() {\n         delegate.printStackTrace();\n     }\n \n-    public void printStackTrace(PrintStream out)\n-    {\n+    public void printStackTrace(PrintStream out) {\n         delegate.printStackTrace(out);\n     }\n \n-    public void printStackTrace(PrintWriter out)\n-    {\n+    public void printStackTrace(PrintWriter out) {\n         delegate.printStackTrace(out);\n     }\n \n-    public final void printPartialStackTrace(PrintWriter out)\n-    {\n+    public final void printPartialStackTrace(PrintWriter out) {\n         super.printStackTrace(out);\n     }\n-    \n+\n }", "timestamp": 1040602519, "metainfo": ""}