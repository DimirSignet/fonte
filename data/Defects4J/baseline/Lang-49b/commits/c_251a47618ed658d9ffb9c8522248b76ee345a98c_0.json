{"sha": "251a47618ed658d9ffb9c8522248b76ee345a98c", "log": "Add new methods for null-safe indexOf/lastIndexOf Add new methods for contains   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.66 2003/07/19 21:55:05 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.67 2003/07/19 23:29:06 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     //-----------------------------------------------------------------------\n     \n     /**\n+     * <p>Finds the first index within a String, handling <code>null</code>.\n+     * This method uses {@link String#indexOf(int)}</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.indexOf(null, ' ')       = -1\n+     * StringUtils.indexOf(\"\", ' ')         = -1\n+     * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n+     * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param searchChar  the character to find\n+     * @return the first index of the search character, \n+     *  -1 if no match or <code>null</code> string input\n+     */\n+    public static int indexOf(String str, char searchChar) {\n+        if (str == null || str.length() == 0) {\n+            return -1;\n+        }\n+        return str.indexOf(searchChar);\n+    }\n+    \n+    /**\n+     * <p>Finds the first index within a String from a start position,\n+     * handling <code>null</code>.\n+     * This method uses {@link String#indexOf(int, int)}</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A negative start position is treated as zero.\n+     * A start position greater than the string length returns <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.indexOf(null, ' ', 0)        = -1\n+     * StringUtils.indexOf(null, ' ', -1)       = -1\n+     * StringUtils.indexOf(\"\", ' ', 0)          = -1\n+     * StringUtils.indexOf(\"\", ' ', -1)         = -1\n+     * StringUtils.indexOf(\"aabaabaa\", 'b', 0)  = 2\n+     * StringUtils.indexOf(\"aabaabaa\", 'b', 3)  = 5\n+     * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n+     * StringUtils.indexOf(\"aabaabaa\", 'b', -1) = 2\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param searchChar  the character to find\n+     * @param startPos  the start position, negative treated as zero\n+     * @return the first index of the search character, \n+     *  -1 if no match or <code>null</code> string input\n+     */\n+    public static int indexOf(String str, char searchChar, int startPos) {\n+        if (str == null || str.length() == 0) {\n+            return -1;\n+        }\n+        return str.indexOf(searchChar, startPos);\n+    }\n+    \n+    /**\n+     * <p>Finds the first index within a String, handling <code>null</code>.\n+     * This method uses {@link String#indexOf(String)}</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.indexOf(null, null)       = -1\n+     * StringUtils.indexOf(\"\", null)         = -1\n+     * StringUtils.indexOf(\"\", \"\")           = 0\n+     * StringUtils.indexOf(\"aabaabaa\", \"a\")  = 0\n+     * StringUtils.indexOf(\"aabaabaa\", \"b\")  = 2\n+     * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param searchStr  the String to find, may be null\n+     * @return the first index of the search String,\n+     *  -1 if no match or <code>null</code> string input\n+     */\n+    public static int indexOf(String str, String searchStr) {\n+        if (str == null || searchStr == null) {\n+            return -1;\n+        }\n+        return str.indexOf(searchStr);\n+    }\n+    \n+    /**\n+     * <p>Finds the first index within a String, handling <code>null</code>.\n+     * This method uses {@link String#indexOf(String, int)}</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A negative start position is treated as zero.\n+     * An empty (\"\") search String always matches.\n+     * A start position greater than the string length only matches\n+     * an empty search String.</p>\n+     * \n+     * <pre>\n+     * StringUtils.indexOf(null, null, 0)       = -1\n+     * StringUtils.indexOf(null, null, -1)      = -1\n+     * StringUtils.indexOf(\"\", null, 0)         = -1\n+     * StringUtils.indexOf(\"\", null, -1)        = -1\n+     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n+     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n+     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n+     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n+     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n+     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n+     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param searchStr  the String to find, may be null\n+     * @param startPos  the start position, negative treated as zero\n+     * @return the first index of the search String,\n+     *  -1 if no match or <code>null</code> string input\n+     */\n+    public static int indexOf(String str, String searchStr, int startPos) {\n+        if (str == null || searchStr == null) {\n+            return -1;\n+        }\n+        return str.indexOf(searchStr, startPos);\n+    }\n+    \n+    // LastIndexOf\n+    //-----------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Finds the last index within a String, handling <code>null</code>.\n+     * This method uses {@link String#indexOf(int)}</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.lastIndexOf(null, ' ')       = -1\n+     * StringUtils.lastIndexOf(\"\", ' ')         = -1\n+     * StringUtils.lastIndexOf(\"aabaabaa\", 'a') = 7\n+     * StringUtils.lastIndexOf(\"aabaabaa\", 'b') = 5\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param searchChar  the character to find\n+     * @return the last index of the search character, \n+     *  -1 if no match or <code>null</code> string input\n+     */\n+    public static int lastIndexOf(String str, char searchChar) {\n+        if (str == null || str.length() == 0) {\n+            return -1;\n+        }\n+        return str.lastIndexOf(searchChar);\n+    }\n+    \n+    /**\n+     * <p>Finds the last index within a String from a start position,\n+     * handling <code>null</code>.\n+     * This method uses {@link String#indexOf(int, int)}</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A negative  or zero start position returns <code>-1</code>.\n+     * A start position greater than the string length searches the whole string.</p>\n+     * \n+     * <pre>\n+     * StringUtils.lastIndexOf(null, ' ', 0)        = -1\n+     * StringUtils.lastIndexOf(null, ' ', -1)       = -1\n+     * StringUtils.lastIndexOf(\"\", ' ', 0)          = -1\n+     * StringUtils.lastIndexOf(\"\", ' ', -1)         = -1\n+     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 8)  = 5\n+     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 4)  = 2\n+     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 0)  = -1\n+     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9)  = 5\n+     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1) = -1\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param searchChar  the character to find\n+     * @param startPos  the start position\n+     * @return the last index of the search character, \n+     *  -1 if no match or <code>null</code> string input\n+     */\n+    public static int lastIndexOf(String str, char searchChar, int startPos) {\n+        if (str == null || str.length() == 0) {\n+            return -1;\n+        }\n+        return str.lastIndexOf(searchChar, startPos);\n+    }\n+    \n+    /**\n+     * <p>Finds the last index within a String, handling <code>null</code>.\n+     * This method uses {@link String#indexOf(String)}</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.lastIndexOf(null, null)       = -1\n+     * StringUtils.lastIndexOf(\"\", null)         = -1\n+     * StringUtils.lastIndexOf(\"\", \"\")           = 0\n+     * StringUtils.lastIndexOf(\"aabaabaa\", \"a\")  = 0\n+     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\")  = 2\n+     * StringUtils.lastIndexOf(\"aabaabaa\", \"ab\") = 1\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param searchStr  the String to find, may be null\n+     * @return the last index of the search String,\n+     *  -1 if no match or <code>null</code> string input\n+     */\n+    public static int lastIndexOf(String str, String searchStr) {\n+        if (str == null || searchStr == null) {\n+            return -1;\n+        }\n+        return str.lastIndexOf(searchStr);\n+    }\n+    \n+    /**\n+     * <p>Finds the first index within a String, handling <code>null</code>.\n+     * This method uses {@link String#indexOf(String, int)}</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A negative start position returns <code>-1</code>.\n+     * A zero start position only matches an empty String (\"\").\n+     * An empty (\"\") search String always matches unless start position negative.\n+     * A start position greater than the string length searches the whole string.</p>\n+     * \n+     * <pre>\n+     * StringUtils.lastIndexOf(null, null, 0)       = -1\n+     * StringUtils.lastIndexOf(null, null, -1)      = -1\n+     * StringUtils.lastIndexOf(\"\", null, 0)         = -1\n+     * StringUtils.lastIndexOf(\"\", null, -1)        = -1\n+     * StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8)  = 7\n+     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8)  = 5\n+     * StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8) = 4\n+     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9)  = 5\n+     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1) = -1\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param searchStr  the String to find, may be null\n+     * @param startPos  the start position, negative treated as zero\n+     * @return the first index of the search String,\n+     *  -1 if no match or <code>null</code> string input\n+     */\n+    public static int lastIndexOf(String str, String searchStr, int startPos) {\n+        if (str == null || searchStr == null) {\n+            return -1;\n+        }\n+        return str.lastIndexOf(searchStr, startPos);\n+    }\n+    \n+    // Contains\n+    //-----------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Checks if String contains a search character, handling <code>null</code>.\n+     * This method uses {@link String#indexOf(int)}</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.contains(null, ' ')  = false\n+     * StringUtils.contains(\"\", ' ')    = false\n+     * StringUtils.contains(\"abc\", 'a') = true\n+     * StringUtils.contains(\"abc\", 'z') = false\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param searchChar  the character to find\n+     * @return true if the String contains the search character, \n+     *  false if not or <code>null</code> string input\n+     */\n+    public static boolean contains(String str, char searchChar) {\n+        if (str == null || str.length() == 0) {\n+            return false;\n+        }\n+        return (str.indexOf(searchChar) >= 0);\n+    }\n+    \n+    /**\n+     * <p>Find the first index within a String, handling <code>null</code>.\n+     * This method uses {@link String#indexOf(String)}</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.contains(null, null)  = false\n+     * StringUtils.contains(\"\", null)    = false\n+     * StringUtils.contains(\"\", \"\")      = true\n+     * StringUtils.contains(\"abc\", \"\")   = true\n+     * StringUtils.contains(\"abc\", \"a\")  = true\n+     * StringUtils.contains(\"abc\", \"z\")  = false\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param searchStr  the String to find, may be null\n+     * @return true if the String contains the search character, \n+     *  false if not or <code>null</code> string input\n+     */\n+    public static boolean contains(String str, String searchStr) {\n+        if (str == null || searchStr == null) {\n+            return false;\n+        }\n+        return (str.indexOf(searchStr) >= 0);\n+    }\n+    \n+    // IndexOfAny\n+    //-----------------------------------------------------------------------\n+    \n+    /**\n      * <p>Find the first index of any of a set of potential substrings.</p>\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.\n         return ret;\n     }\n \n+    // IndexOfAnyBut\n+    //-----------------------------------------------------------------------\n+    \n     /**\n      * <p>Search a String to find the first index of any\n      * character not in the given set of characters.</p>\n         return -1;\n     }\n \n-    // Contains\n+    // ContainsOnly\n     //-----------------------------------------------------------------------\n     \n     /**\n         }\n         return containsOnly(str, validChars.toCharArray());\n     }\n+    \n+    // ContainsNone\n+    //-----------------------------------------------------------------------\n     \n     /**\n      * <p>Checks that the String does not contain certain characters.</p>\n--- a/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: StringUtilsEqualsIndexOfTest.java,v 1.2 2003/03/23 21:50:58 scolebourne Exp $\n+ * @version $Id: StringUtilsEqualsIndexOfTest.java,v 1.3 2003/07/19 23:29:06 scolebourne Exp $\n  */\n public class StringUtilsEqualsIndexOfTest extends TestCase {\n     private static final String FOO = \"foo\";\n         assertEquals(false, StringUtils.equalsIgnoreCase(null, FOO));\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testIndexOf_char() {\n+        assertEquals(-1, StringUtils.indexOf(null, ' '));\n+        assertEquals(-1, StringUtils.indexOf(\"\", ' '));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a'));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b'));\n+    }\n+\n+    public void testIndexOf_charInt() {\n+        assertEquals(-1, StringUtils.indexOf(null, ' ', 0));\n+        assertEquals(-1, StringUtils.indexOf(null, ' ', -1));\n+        assertEquals(-1, StringUtils.indexOf(\"\", ' ', 0));\n+        assertEquals(-1, StringUtils.indexOf(\"\", ' ', -1));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", 'a', 0));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', 0));\n+        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", 'b', 3));\n+        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", 'b', 9));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", 'b', -1));\n+    }\n+\n+    public void testIndexOf_String() {\n+        assertEquals(-1, StringUtils.indexOf(null, null));\n+        assertEquals(-1, StringUtils.indexOf(\"\", null));\n+        assertEquals(0, StringUtils.indexOf(\"\", \"\"));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\"));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\"));\n+        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\"));\n+    }\n+\n+    public void testIndexOf_StringInt() {\n+        assertEquals(-1, StringUtils.indexOf(null, null, 0));\n+        assertEquals(-1, StringUtils.indexOf(null, null, -1));\n+        assertEquals(-1, StringUtils.indexOf(null, \"\", 0));\n+        assertEquals(-1, StringUtils.indexOf(null, \"\", -1));\n+        assertEquals(-1, StringUtils.indexOf(\"\", null, 0));\n+        assertEquals(-1, StringUtils.indexOf(\"\", null, -1));\n+        assertEquals(0, StringUtils.indexOf(\"\", \"\", 0));\n+        assertEquals(0, StringUtils.indexOf(\"\", \"\", -1));\n+        assertEquals(0, StringUtils.indexOf(\"\", \"\", 9));\n+        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", 0));\n+        assertEquals(0, StringUtils.indexOf(\"abc\", \"\", -1));\n+        assertEquals(3, StringUtils.indexOf(\"abc\", \"\", 9));\n+        assertEquals(0, StringUtils.indexOf(\"aabaabaa\", \"a\", 0));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", 0));\n+        assertEquals(1, StringUtils.indexOf(\"aabaabaa\", \"ab\", 0));\n+        assertEquals(5, StringUtils.indexOf(\"aabaabaa\", \"b\", 3));\n+        assertEquals(-1, StringUtils.indexOf(\"aabaabaa\", \"b\", 9));\n+        assertEquals(2, StringUtils.indexOf(\"aabaabaa\", \"b\", -1));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testLastIndexOf_char() {\n+        assertEquals(-1, StringUtils.lastIndexOf(null, ' '));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' '));\n+        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a'));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b'));\n+    }\n+\n+    public void testLastIndexOf_charInt() {\n+        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", ' ', -1));\n+        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", 'a', 8));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 8));\n+        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 3));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1));\n+    }\n+\n+    public void testLastIndexOf_String() {\n+        assertEquals(-1, StringUtils.lastIndexOf(null, null));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", null));\n+        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\"));\n+        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\"));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\"));\n+        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\"));\n+    }\n+\n+    public void testLastIndexOf_StringInt() {\n+        assertEquals(-1, StringUtils.lastIndexOf(null, null, 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(null, null, -1));\n+        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(null, \"\", -1));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", null, -1));\n+        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"\", \"\", -1));\n+        assertEquals(0, StringUtils.lastIndexOf(\"\", \"\", 9));\n+        assertEquals(0, StringUtils.lastIndexOf(\"abc\", \"\", 0));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"abc\", \"\", -1));\n+        assertEquals(3, StringUtils.lastIndexOf(\"abc\", \"\", 9));\n+        assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8));\n+        assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8));\n+        assertEquals(2, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 3));\n+        assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9));\n+        assertEquals(-1, StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void contains_char() {\n+        assertEquals(false, StringUtils.contains(null, ' '));\n+        assertEquals(false, StringUtils.contains(\"\", ' '));\n+        assertEquals(true, StringUtils.contains(\"abc\", 'a'));\n+        assertEquals(true, StringUtils.contains(\"abc\", 'b'));\n+        assertEquals(true, StringUtils.contains(\"abc\", 'c'));\n+        assertEquals(false, StringUtils.contains(\"abc\", 'z'));\n+    }\n+\n+    public void contains_String() {\n+        assertEquals(false, StringUtils.contains(null, null));\n+        assertEquals(false, StringUtils.contains(null, \"\"));\n+        assertEquals(false, StringUtils.contains(null, \"a\"));\n+        assertEquals(false, StringUtils.contains(\"\", null));\n+        assertEquals(true, StringUtils.contains(\"\", \"\"));\n+        assertEquals(false, StringUtils.contains(\"\", \"a\"));\n+        assertEquals(true, StringUtils.contains(\"abc\", \"a\"));\n+        assertEquals(true, StringUtils.contains(\"abc\", \"b\"));\n+        assertEquals(true, StringUtils.contains(\"abc\", \"c\"));\n+        assertEquals(true, StringUtils.contains(\"abc\", \"abc\"));\n+        assertEquals(false, StringUtils.contains(\"abc\", \"z\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testIndexOfAny() {\n         assertEquals(-1, StringUtils.indexOfAny(null, null));\n         assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));\n         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {\"llll\"}));\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testIndexOfAnyBut() {\n+        String str1 = \"a\";\n+        String str2 = \"b\";\n+        String str3 = \"ab\";\n+        String chars1= \"b\";\n+        String chars2= \"a\";\n+        String chars3= \"ab\";\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (String) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"\"));\n+        assertEquals(0, StringUtils.indexOfAnyBut(str1, \"\"));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"\"));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", chars1));\n+        assertEquals(0, StringUtils.indexOfAnyBut(str1, chars1));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(str1, chars2));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(str1, chars3));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(str2, chars1));\n+        assertEquals(0, StringUtils.indexOfAnyBut(str2, chars2));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(str2, chars3));\n+        assertEquals(0, StringUtils.indexOfAnyBut(str3, chars1));\n+        assertEquals(1, StringUtils.indexOfAnyBut(str3, chars2));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(str3, chars3));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContainsOnly_String() {\n+        String str1 = \"a\";\n+        String str2 = \"b\";\n+        String str3 = \"ab\";\n+        String chars1= \"b\";\n+        String chars2= \"a\";\n+        String chars3= \"ab\";\n+        assertEquals(false, StringUtils.containsOnly(null, (String) null));\n+        assertEquals(false, StringUtils.containsOnly(\"\", (String) null));\n+        assertEquals(false, StringUtils.containsOnly(null, \"\"));\n+        assertEquals(false, StringUtils.containsOnly(str1, \"\"));\n+        assertEquals(true, StringUtils.containsOnly(\"\", \"\"));\n+        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n+        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n+        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n+        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n+        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n+        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n+        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n+    }\n+\n+    public void testContainsOnly_CharArray() {\n+        String str1 = \"a\";\n+        String str2 = \"b\";\n+        String str3 = \"ab\";\n+        char[] chars1= {'b'};\n+        char[] chars2= {'a'};\n+        char[] chars3= {'a', 'b'};\n+        char[] emptyChars = new char[0];\n+        assertEquals(false, StringUtils.containsOnly(null, (char[]) null));\n+        assertEquals(false, StringUtils.containsOnly(\"\", (char[]) null));\n+        assertEquals(false, StringUtils.containsOnly(null, emptyChars));\n+        assertEquals(false, StringUtils.containsOnly(str1, emptyChars));\n+        assertEquals(true, StringUtils.containsOnly(\"\", emptyChars));\n+        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n+        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n+        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n+        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n+        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n+        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n+        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n+        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n+    }\n+\n+    public void testContainsNone_String() {\n+        String str1 = \"a\";\n+        String str2 = \"b\";\n+        String str3 = \"ab.\";\n+        String chars1= \"b\";\n+        String chars2= \".\";\n+        String chars3= \"cd\";\n+        assertEquals(true, StringUtils.containsNone(null, (String) null));\n+        assertEquals(true, StringUtils.containsNone(\"\", (String) null));\n+        assertEquals(true, StringUtils.containsNone(null, \"\"));\n+        assertEquals(true, StringUtils.containsNone(str1, \"\"));\n+        assertEquals(true, StringUtils.containsNone(\"\", \"\"));\n+        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n+        assertEquals(true, StringUtils.containsNone(str1, chars1));\n+        assertEquals(true, StringUtils.containsNone(str1, chars2));\n+        assertEquals(true, StringUtils.containsNone(str1, chars3));\n+        assertEquals(false, StringUtils.containsNone(str2, chars1));\n+        assertEquals(true, StringUtils.containsNone(str2, chars2));\n+        assertEquals(true, StringUtils.containsNone(str2, chars3));\n+        assertEquals(false, StringUtils.containsNone(str3, chars1));\n+        assertEquals(false, StringUtils.containsNone(str3, chars2));\n+        assertEquals(true, StringUtils.containsNone(str3, chars3));\n+    }\n+\n+    public void testContainsNone_CharArray() {\n+        String str1 = \"a\";\n+        String str2 = \"b\";\n+        String str3 = \"ab.\";\n+        char[] chars1= {'b'};\n+        char[] chars2= {'.'};\n+        char[] chars3= {'c', 'd'};\n+        char[] emptyChars = new char[0];\n+        assertEquals(true, StringUtils.containsNone(null, (char[]) null));\n+        assertEquals(true, StringUtils.containsNone(\"\", (char[]) null));\n+        assertEquals(true, StringUtils.containsNone(null, emptyChars));\n+        assertEquals(true, StringUtils.containsNone(str1, emptyChars));\n+        assertEquals(true, StringUtils.containsNone(\"\", emptyChars));\n+        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n+        assertEquals(true, StringUtils.containsNone(str1, chars1));\n+        assertEquals(true, StringUtils.containsNone(str1, chars2));\n+        assertEquals(true, StringUtils.containsNone(str1, chars3));\n+        assertEquals(false, StringUtils.containsNone(str2, chars1));\n+        assertEquals(true, StringUtils.containsNone(str2, chars2));\n+        assertEquals(true, StringUtils.containsNone(str2, chars3));\n+        assertEquals(false, StringUtils.containsNone(str3, chars1));\n+        assertEquals(false, StringUtils.containsNone(str3, chars2));\n+        assertEquals(true, StringUtils.containsNone(str3, chars3));\n+    }\n+\n }", "timestamp": 1058657346, "metainfo": ""}