{"sha": "0dc48cd72054756c05096bb3dd68b76d65f81995", "log": "Change method ordering to group getStackTrace/getStackFrames  ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Gets the stack trace from a Throwable as a String.</p>\n-     *\n-     * <p>The result of this method vary by JDK version as this method\n-     * uses {@link Throwable#printStackTrace(java.io.PrintWriter)}.\n-     * On JDK1.3 and earlier, the cause exception will not be shown\n-     * unless the specified throwable alters printStackTrace.</p>\n-     *\n-     * @param throwable  the <code>Throwable</code> to be examined\n-     * @return the stack trace as generated by the exception's\n-     *  <code>printStackTrace(PrintWriter)</code> method\n-     */\n-    public static String getStackTrace(Throwable throwable) {\n-        StringWriter sw = new StringWriter();\n-        PrintWriter pw = new PrintWriter(sw, true);\n-        throwable.printStackTrace(pw);\n-        return sw.getBuffer().toString();\n-    }\n-\n-    /**\n      * <p>A way to get the entire nested stack-trace of an throwable.</p>\n      *\n      * <p>The result of this method is highly dependent on the JDK version\n \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Captures the stack trace associated with the specified\n-     * <code>Throwable</code> object, decomposing it into a list of\n-     * stack frames.</p>\n+     * <p>Gets the stack trace from a Throwable as a String.</p>\n      *\n      * <p>The result of this method vary by JDK version as this method\n      * uses {@link Throwable#printStackTrace(java.io.PrintWriter)}.\n      * On JDK1.3 and earlier, the cause exception will not be shown\n      * unless the specified throwable alters printStackTrace.</p>\n      *\n+     * @param throwable  the <code>Throwable</code> to be examined\n+     * @return the stack trace as generated by the exception's\n+     *  <code>printStackTrace(PrintWriter)</code> method\n+     */\n+    public static String getStackTrace(Throwable throwable) {\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw, true);\n+        throwable.printStackTrace(pw);\n+        return sw.getBuffer().toString();\n+    }\n+\n+    /**\n+     * <p>Captures the stack trace associated with the specified\n+     * <code>Throwable</code> object, decomposing it into a list of\n+     * stack frames.</p>\n+     *\n+     * <p>The result of this method vary by JDK version as this method\n+     * uses {@link Throwable#printStackTrace(java.io.PrintWriter)}.\n+     * On JDK1.3 and earlier, the cause exception will not be shown\n+     * unless the specified throwable alters printStackTrace.</p>\n+     *\n      * @param throwable  the <code>Throwable</code> to examine, may be null\n      * @return an array of strings describing each stack frame, never null\n      */\n         return getStackFrames(getStackTrace(throwable));\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Returns an array where each element is a line from the argument.</p>\n      *", "timestamp": 1136596491, "metainfo": ""}