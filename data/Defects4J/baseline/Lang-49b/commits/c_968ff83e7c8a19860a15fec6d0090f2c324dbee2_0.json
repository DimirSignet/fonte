{"sha": "968ff83e7c8a19860a15fec6d0090f2c324dbee2", "log": "Add extra system property constants Add java version methods   ", "commit": "\n--- a/src/java/org/apache/commons/lang/SystemUtils.java\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n  * @author Based on code from Avalon Excalibur\n  * @author Based on code from Lucene\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n- * @version $Id: SystemUtils.java,v 1.1 2002/08/22 22:11:25 scolebourne Exp $\n+ * @author <a href=\"mailto:sdowney@panix.com\">Steve Downey</a>\n+ * @version $Id: SystemUtils.java,v 1.2 2002/08/25 22:17:53 scolebourne Exp $\n  */\n public class SystemUtils {\n     \n     /**\n-     * Prevent construction of SystemUtils instances\n-     */\n-    private SystemUtils() {\n+     * SystemUtils instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as <code>SystemUtils.FILE_SEPARATOR</code>.\n+     * This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.\n+     */\n+    public SystemUtils() {\n     }\n \n-    /** The line separator string from System.getProperty() */\n+    /**\n+     * System Property: file.separator\n+     * File separator (\"/\" on UNIX).\n+     * First in version: 1.1\n+     */\n+    public static final String FILE_SEPARATOR = System.getProperty(\"file.separator\");\n+    \n+\n+    /**\n+     * System Property: java.class.path\n+     * Java class path.\n+     * First in version: 1.1\n+     */\n+    public static final String JAVA_CLASS_PATH = System.getProperty(\"java.class.path\");\n+    \n+\n+    /**\n+     * System Property: java.class.version\n+     * Java class format version number.\n+     * First in version: 1.1\n+     */\n+    public static final String JAVA_CLASS_VERSION = System.getProperty(\"java.class.version\");\n+    \n+\n+    /**\n+     * System Property: java.compiler\n+     * Name of JIT compiler to use.\n+     * First in version: 1.4 \n+     */\n+    public static final String JAVA_COMPILER = System.getProperty(\"java.compiler\");\n+    \n+\n+    /**\n+     * System Property: java.ext.dirs\n+     * Path of extension directory or directories.\n+     * First in version: 1.3 \n+     */\n+    public static final String JAVA_EXT_DIRS = System.getProperty(\"java.ext.dirs\");\n+    \n+\n+    /**\n+     * System Property: java.home\n+     * Java installation directory.\n+     * First in version: 1.1 \n+     */\n+    public static final String JAVA_HOME = System.getProperty(\"java.home\");\n+    \n+\n+    /**\n+     * System Property: java.io.tmpdir\n+     * Default temp file path.\n+     * First in version: 1.4 \n+     */\n+    public static final String JAVA_IO_TMPDIR = System.getProperty(\"java.io.tmpdir\");\n+    \n+\n+    /**\n+     * System Property: java.library.path\n+     * List of paths to search when loading libraries.\n+     * First in version: 1.4 \n+     */\n+    public static final String JAVA_LIBRARY_PATH = System.getProperty(\"java.library.path\");\n+    \n+\n+    /**\n+     * System Property: java.specification.name\n+     * Java Runtime Environment specification name.\n+     * First in version: 1.2 \n+     */\n+    public static final String JAVA_SPECIFICATION_NAME = System.getProperty(\"java.specification.name\");\n+    \n+\n+    /**\n+     * System Property: java.specification.vendor\n+     * Java Runtime Environment specification vendor.\n+     * First in version: 1.2 \n+     */\n+    public static final String JAVA_SPECIFICATION_VENDOR = System.getProperty(\"java.specification.vendor\");\n+    \n+\n+    /**\n+     * System Property: java.specification.version\n+     * Java Runtime Environment specification version.\n+     * First in version: 1.2 \n+     */\n+    public static final String JAVA_SPECIFICATION_VERSION = System.getProperty(\"java.specification.version\");\n+    \n+\n+    /**\n+     * System Property: java.vendor\n+     * Java vendor-specific string.\n+     * First in version: 1.1 \n+     */\n+    public static final String JAVA_VENDOR = System.getProperty(\"java.vendor\");\n+    \n+\n+    /**\n+     * System Property: java.vendor.url\n+     * Java vendor URL.\n+     * First in version: 1.1 \n+     */\n+    public static final String JAVA_VENDOR_URL = System.getProperty(\"java.vendor.url\");\n+    \n+\n+    /**\n+     * System Property: java.version\n+     * Java version number.\n+     * First in version: 1.1 \n+     */\n+    public static final String JAVA_VERSION = System.getProperty(\"java.version\");\n+    \n+\n+    /**\n+     * System Property: java.vm.name\n+     * Java Virtual Machine implementation name.\n+     * First in version: 1.2 \n+     */\n+    public static final String JAVA_VM_NAME = System.getProperty(\"java.vm.name\");\n+    \n+\n+    /**\n+     * System Property: java.vm.specification.name\n+     * Java Virtual Machine specification name.\n+     * First in version: 1.2 \n+     */\n+    public static final String JAVA_VM_SPECIFICATION_NAME = System.getProperty(\"java.vm.specification.name\");\n+    \n+\n+    /**\n+     * System Property: java.vm.specification.vendor\n+     * Java Virtual Machine specification vendor.\n+     * First in version: 1.2 \n+     */\n+    public static final String JAVA_VM_SPECIFICATION_VENDOR = System.getProperty(\"java.vm.specification.vendor\");\n+    \n+\n+    /**\n+     * System Property: java.vm.specification.version\n+     * Java Virtual Machine specification version.\n+     * First in version: 1.2 \n+     */\n+    public static final String JAVA_VM_SPECIFICATION_VERSION = System.getProperty(\"java.vm.specification.version\");\n+    \n+\n+    /**\n+     * System Property: java.vm.vendor\n+     * Java Virtual Machine implementation vendor.\n+     * First in version: 1.2 \n+     */\n+    public static final String JAVA_VM_VENDOR = System.getProperty(\"java.vm.vendor\");\n+    \n+\n+    /**\n+     * System Property: java.vm.version\n+     * Java Virtual Machine implementation version.\n+     * First in version: 1.2 \n+     */\n+    public static final String JAVA_VM_VERSION = System.getProperty(\"java.vm.version\");\n+    \n+\n+    /**\n+     * System Property: line.separator\n+     * Line separator (\"\\n\" on UNIX).\n+     * First in version: 1.1 \n+     */\n     public static final String LINE_SEPARATOR = System.getProperty(\"line.separator\");\n-    /** The path separator string from System.getProperty() */\n+    \n+\n+    /**\n+     * System Property: os.arch\n+     * Operating system architecture.\n+     * First in version: 1.1 \n+     */\n+    public static final String OS_ARCH = System.getProperty(\"os.arch\");\n+    \n+\n+    /**\n+     * System Property: os.name\n+     * Operating system name.\n+     * First in version: 1.1 \n+     */\n+    public static final String OS_NAME = System.getProperty(\"os.name\");\n+    \n+\n+    /**\n+     * System Property: os.version\n+     * Operating system version.\n+     * First in version: 1.1 \n+     */\n+    public static final String OS_VERSION = System.getProperty(\"os.version\");\n+    \n+\n+    /**\n+     * System Property: path.separator\n+     * Path separator (\":\" on UNIX).\n+     * First in version: 1.1 \n+     */\n     public static final String PATH_SEPARATOR = System.getProperty(\"path.separator\");\n-    /** The file separator string from System.getProperty() */\n-    public static final String FILE_SEPARATOR = System.getProperty(\"file.separator\");\n-    \n-    /** The working (user) directory string from System.getProperty() */\n-    public static final String USER_WORKING_DIRECTORY = System.getProperty(\"user.dir\");\n-    /** The user home directory string from System.getProperty() */\n-    public static final String USER_HOME_DIRECTORY = System.getProperty(\"user.home\");\n-    /** The user account name string from System.getProperty() */\n+    \n+\n+    /**\n+     * System Property: user.dir\n+     * User's current working directory.\n+     * First in version: 1.1 \n+     */\n+    public static final String USER_DIR = System.getProperty(\"user.dir\");\n+    \n+\n+    /**\n+     * System Property: user.home\n+     * User's home directory.\n+     * First in version: 1.1 \n+     */\n+    public static final String USER_HOME = System.getProperty(\"user.home\");\n+    \n+\n+    /**\n+     * System Property: user.name\n+     * User's account name.\n+     * First in version: 1.1 \n+     */\n     public static final String USER_NAME = System.getProperty(\"user.name\");\n     \n-    /** The os name string from System.getProperty() */\n-    public static final String OS_NAME = System.getProperty(\"os.name\");\n-    /** The os architecture string from System.getProperty() */\n-    public static final String OS_ARCHITECTURE = System.getProperty(\"os.arch\");\n-    /** The os version string from System.getProperty() */\n-    public static final String OS_VERSION = System.getProperty(\"os.version\");\n-    /** True iff this is running on Windows */\n-    public static final boolean IS_WINDOWS;\n-    /** True iff this is running on Unix */\n-    public static final boolean IS_UNIX;\n-    /** True iff this is running on Mac */\n-    public static final boolean IS_MAC;\n-    /** True iff this is running on OS2 */\n-    public static final boolean IS_OS2;\n-    /** True iff this is running on Linux */\n-    public static final boolean IS_LINUX;\n-    \n-    /** The Java vendor string from System.getProperty() */\n-    public static final String JAVA_VENDOR = System.getProperty(\"java.vendor\");\n-    /** The Java vendor url string from System.getProperty() */\n-    public static final String JAVA_VENDOR_URL = System.getProperty(\"java.vendor.url\");\n-    /** The Java installation directory string from System.getProperty() */\n-    public static final String JAVA_HOME = System.getProperty(\"java.home\");\n-    /** The Java class version number string from System.getProperty() */\n-    public static final String JAVA_CLASS_VERSION = System.getProperty(\"java.class.version\");\n-    /** The Java classpath string from System.getProperty() */\n-    public static final String JAVA_CLASS_PATH = System.getProperty(\"java.class.path\");\n-    \n-    /** The Java version string from System.getProperty() */\n-    public static final String JAVA_VERSION = System.getProperty(\"java.version\");\n     /** True iff this is Java version 1.1. */\n     public static final boolean IS_JAVA_1_1 = JAVA_VERSION.startsWith(\"1.1.\");\n     /** True iff this is Java version 1.2. */\n     /** True iff this is Java version 1.3. */\n     public static final boolean IS_JAVA_1_5 = JAVA_VERSION.startsWith(\"1.5.\");\n \n-    /*\n-     * The JLS doesn't seem to specify an exact naming convention for the\n-     * os.name. We ensure a uniform naming here.\n-     */\n-    static {\n-        // from http://www.geocities.com/vamp201/os.html\n-        if (OS_NAME.startsWith(\"Windows\")) {\n-            IS_WINDOWS = true;\n-            IS_UNIX = false;\n-            IS_MAC = false;\n-            IS_OS2 = false;\n-            IS_LINUX = false;\n-        } else if (OS_NAME.startsWith(\"SunOS\")) {\n-            IS_WINDOWS = false;\n-            IS_UNIX = true;\n-            IS_MAC = false;\n-            IS_OS2 = false;\n-            IS_LINUX = false;\n-        } else if (OS_NAME.startsWith(\"Solaris\")) {\n-            IS_WINDOWS = false;\n-            IS_UNIX = true;\n-            IS_MAC = false;\n-            IS_OS2 = false;\n-            IS_LINUX = false;\n-        } else if (OS_NAME.startsWith(\"Linux\")) {\n-            IS_WINDOWS = false;\n-            IS_UNIX = true;\n-            IS_MAC = false;\n-            IS_OS2 = false;\n-            IS_LINUX = true;\n-        } else if (OS_NAME.startsWith(\"HP-UX\")) {\n-            IS_WINDOWS = false;\n-            IS_UNIX = true;\n-            IS_MAC = false;\n-            IS_OS2 = false;\n-            IS_LINUX = false;\n-        } else if (OS_NAME.startsWith(\"AIX\")) {\n-            IS_WINDOWS = false;\n-            IS_UNIX = true;\n-            IS_MAC = false;\n-            IS_OS2 = false;\n-            IS_LINUX = false;\n-        } else if (OS_NAME.startsWith(\"Irix\")) {\n-            IS_WINDOWS = false;\n-            IS_UNIX = true;\n-            IS_MAC = false;\n-            IS_OS2 = false;\n-            IS_LINUX = false;\n-        } else if (OS_NAME.startsWith(\"Digital Unix\")) {\n-            IS_WINDOWS = false;\n-            IS_UNIX = true;\n-            IS_MAC = false;\n-            IS_OS2 = false;\n-            IS_LINUX = false;\n-        } else if (OS_NAME.startsWith(\"OS/2\")) {\n-            IS_WINDOWS = false;\n-            IS_UNIX = false;\n-            IS_MAC = false;\n-            IS_OS2 = true;\n-            IS_LINUX = false;\n-        } else if (OS_NAME.startsWith(\"Mac\")) {\n-            IS_WINDOWS = false;\n-            IS_UNIX = false;\n-            IS_MAC = true;\n-            IS_OS2 = false;\n-            IS_LINUX = false;\n-        } else {\n-            IS_WINDOWS = false;\n-            IS_UNIX = false;\n-            IS_MAC = false;\n-            IS_OS2 = false;\n-            IS_LINUX = false;\n+\n+    // Parsing operating system may stay here, or it may be moved somewhere else entirely\n+//    /** True iff this is running on Windows */\n+//    public static final boolean IS_WINDOWS;\n+//    /** True iff this is running on Unix */\n+//    public static final boolean IS_UNIX;\n+//    /** True iff this is running on Mac */\n+//    public static final boolean IS_MAC;\n+//    /** True iff this is running on OS2 */\n+//    public static final boolean IS_OS2;\n+//    /** True iff this is running on Linux */\n+//    public static final boolean IS_LINUX;\n+//    \n+//    /*\n+//     * The JLS doesn't seem to specify an exact naming convention for the\n+//     * os.name. We ensure a uniform naming here.\n+//     */\n+//    static {\n+//        // from http://www.geocities.com/vamp201/os.html\n+//        if (OS_NAME.startsWith(\"Windows\")) {\n+//            IS_WINDOWS = true;\n+//            IS_UNIX = false;\n+//            IS_MAC = false;\n+//            IS_OS2 = false;\n+//            IS_LINUX = false;\n+//        } else if (OS_NAME.startsWith(\"SunOS\")) {\n+//            IS_WINDOWS = false;\n+//            IS_UNIX = true;\n+//            IS_MAC = false;\n+//            IS_OS2 = false;\n+//            IS_LINUX = false;\n+//        } else if (OS_NAME.startsWith(\"Solaris\")) {\n+//            IS_WINDOWS = false;\n+//            IS_UNIX = true;\n+//            IS_MAC = false;\n+//            IS_OS2 = false;\n+//            IS_LINUX = false;\n+//        } else if (OS_NAME.startsWith(\"Linux\")) {\n+//            IS_WINDOWS = false;\n+//            IS_UNIX = true;\n+//            IS_MAC = false;\n+//            IS_OS2 = false;\n+//            IS_LINUX = true;\n+//        } else if (OS_NAME.startsWith(\"HP-UX\")) {\n+//            IS_WINDOWS = false;\n+//            IS_UNIX = true;\n+//            IS_MAC = false;\n+//            IS_OS2 = false;\n+//            IS_LINUX = false;\n+//        } else if (OS_NAME.startsWith(\"AIX\")) {\n+//            IS_WINDOWS = false;\n+//            IS_UNIX = true;\n+//            IS_MAC = false;\n+//            IS_OS2 = false;\n+//            IS_LINUX = false;\n+//        } else if (OS_NAME.startsWith(\"Irix\")) {\n+//            IS_WINDOWS = false;\n+//            IS_UNIX = true;\n+//            IS_MAC = false;\n+//            IS_OS2 = false;\n+//            IS_LINUX = false;\n+//        } else if (OS_NAME.startsWith(\"Digital Unix\")) {\n+//            IS_WINDOWS = false;\n+//            IS_UNIX = true;\n+//            IS_MAC = false;\n+//            IS_OS2 = false;\n+//            IS_LINUX = false;\n+//        } else if (OS_NAME.startsWith(\"OS/400\")) {\n+//            IS_WINDOWS = false;\n+//            IS_UNIX = true;\n+//            IS_MAC = false;\n+//            IS_OS2 = false;\n+//            IS_LINUX = false;\n+//        } else if (OS_NAME.startsWith(\"OS/2\")) {\n+//            IS_WINDOWS = false;\n+//            IS_UNIX = false;\n+//            IS_MAC = false;\n+//            IS_OS2 = true;\n+//            IS_LINUX = false;\n+//        } else if (OS_NAME.startsWith(\"Mac OS X\")) {\n+//            IS_WINDOWS = false;\n+//            IS_UNIX = true;\n+//            IS_MAC = true;\n+//            IS_OS2 = false;\n+//            IS_LINUX = false;\n+//        } else if (OS_NAME.startsWith(\"Mac\")) {\n+//            IS_WINDOWS = false;\n+//            IS_UNIX = false;\n+//            IS_MAC = true;\n+//            IS_OS2 = false;\n+//            IS_LINUX = false;\n+//        } else {\n+//            IS_WINDOWS = false;\n+//            IS_UNIX = false;\n+//            IS_MAC = false;\n+//            IS_OS2 = false;\n+//            IS_LINUX = false;\n+//        }\n+//    }\n+\n+    /**\n+     * Get the Java version number as a float.\n+     * Example output:<br>\n+     * 1.2f  for JDK 1.2<br>\n+     * 1.31f  for JDK 1.3.1<br>\n+     * \n+     * @return the version, for example 1.31f for JDK 1.3.1\n+     */\n+    public static float getJavaVersion() {\n+        String str = JAVA_VERSION.substring(0, 3);\n+        if (JAVA_VERSION.length() >= 5) {\n+            str = str + JAVA_VERSION.substring(4, 5);\n         }\n+        return Float.parseFloat(str);\n     }\n-\n+    \n+    /**\n+     * Is the Java version at the the requested version.\n+     * Example input:<br>\n+     * 1.2f  for JDK 1.2<br>\n+     * 1.31f  for JDK 1.3.1<br>\n+     * \n+     * @param requiredVersion  the required version, for example 1.31f\n+     * @return true if the actual version is equal or greater than the required version\n+     */\n+    public boolean isJavaVersionAtLeast(float requiredVersion) {\n+        return (getJavaVersion() >= requiredVersion);\n+    }\n+    \n }", "timestamp": 1030313873, "metainfo": ""}