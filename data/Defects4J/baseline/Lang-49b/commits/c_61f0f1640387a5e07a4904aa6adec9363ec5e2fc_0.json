{"sha": "61f0f1640387a5e07a4904aa6adec9363ec5e2fc", "log": "NumberUtils moved to math subpackage   ", "commit": "\n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n  */\n package org.apache.commons.lang;\n \n+import org.apache.commons.lang.math.NumberUtils;\n+\n /**\n  * <p><code>BooleanUtils</code> contains utility methods for working for\n  * boolean and Boolean objects.</p>\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: BooleanUtils.java,v 1.4 2003/02/04 22:50:31 scolebourne Exp $\n+ * @version $Id: BooleanUtils.java,v 1.5 2003/06/24 21:14:50 scolebourne Exp $\n  */\n public class BooleanUtils {\n \n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n \n import java.math.BigInteger;\n import java.math.BigDecimal;\n+\n /**\n  * <p>Provides extra functionality for Java Number classes.</p>\n  *\n  * @author Eric Pugh\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: NumberUtils.java,v 1.10 2003/06/08 14:14:01 scolebourne Exp $\n+ * @version $Id: NumberUtils.java,v 1.11 2003/06/24 21:14:50 scolebourne Exp $\n+ * \n+ * @deprecated Moved to org.apache.commons.lang.math.\n+ *             Class will be removed in Commons Lang 3.0.\n  */\n public final class NumberUtils {\n-    \n-    /** Reusable Long constant for zero. */\n-    public static final Long LONG_ZERO = new Long(0L);\n-    /** Reusable Long constant for one. */\n-    public static final Long LONG_ONE = new Long(1L);\n-    /** Reusable Long constant for minus one. */\n-    public static final Long LONG_MINUS_ONE = new Long(-1L);\n-    /** Reusable Integer constant for zero. */\n-    public static final Integer INTEGER_ZERO = new Integer(0);\n-    /** Reusable Integer constant for one. */\n-    public static final Integer INTEGER_ONE = new Integer(1);\n-    /** Reusable Integer constant for minus one. */\n-    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);\n-    /** Reusable Short constant for zero. */\n-    public static final Short SHORT_ZERO = new Short((short) 0);\n-    /** Reusable Short constant for one. */\n-    public static final Short SHORT_ONE = new Short((short) 1);\n-    /** Reusable Short constant for minus one. */\n-    public static final Short SHORT_MINUS_ONE = new Short((short) -1);\n-    /** Reusable Byte constant for zero. */\n-    public static final Byte BYTE_ZERO = new Byte((byte) 0);\n-    /** Reusable Byte constant for one. */\n-    public static final Byte BYTE_ONE = new Byte((byte) 1);\n-    /** Reusable Byte constant for minus one. */\n-    public static final Byte BYTE_MINUS_ONE = new Byte((byte) -1);\n-    /** Reusable Double constant for zero. */\n-    public static final Double DOUBLE_ZERO = new Double(0.0d);\n-    /** Reusable Double constant for one. */\n-    public static final Double DOUBLE_ONE = new Double(1.0d);\n-    /** Reusable Double constant for minus one. */\n-    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);\n-    /** Reusable Float constant for zero. */\n-    public static final Float FLOAT_ZERO = new Float(0.0f);\n-    /** Reusable Float constant for one. */\n-    public static final Float FLOAT_ONE = new Float(1.0f);\n-    /** Reusable Float constant for minus one. */\n-    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);\n-\n+    // DEPRECATED CLASS !!!\n+    \n     /**\n      * <p><code>NumberUtils</code> instances should NOT be constructed in standard programming.\n      * Instead, the class should be used as <code>NumberUtils.stringToInt(\"6\");</code>.</p>\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n import java.util.Iterator;\n import java.util.StringTokenizer;\n \n+import org.apache.commons.lang.math.NumberUtils;\n+\n /**\n  * <p>Common <code>String</code> manipulation routines.</p>\n  *\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.50 2003/06/24 08:15:15 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.51 2003/06/24 21:14:50 scolebourne Exp $\n  */\n public class StringUtils {\n \n                 }\n \n                 // Step 6\n-                d[i][j] = NumberUtils.minimum(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n+                d[i][j] = NumberUtils.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);\n             }\n         }\n \n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n import java.lang.reflect.Modifier;\n import java.util.Comparator;\n \n-import org.apache.commons.lang.NumberUtils;\n+import org.apache.commons.lang.math.NumberUtils;\n+\n /** \n  * <p><code>CompareTo</code> generation routines.</p>\n  *\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: CompareToBuilder.java,v 1.14 2003/04/18 09:12:16 ggregory Exp $\n+ * @version $Id: CompareToBuilder.java,v 1.15 2003/06/24 21:14:50 scolebourne Exp $\n  */\n public class CompareToBuilder {\n     \n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import java.math.BigInteger;\n+import java.math.BigDecimal;\n+\n+/**\n+ * <p>Provides extra functionality for Java Number classes.</p>\n+ *\n+ * @author <a href=\"mailto:bayard@generationjava.com\">Henri Yandell</a>\n+ * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n+ * @author Stephen Colebourne\n+ * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n+ * @author Eric Pugh\n+ * @author Phil Steitz\n+ * @since 1.0\n+ * @version $Id: NumberUtils.java,v 1.1 2003/06/24 21:14:50 scolebourne Exp $\n+ */\n+public final class NumberUtils {\n+    \n+    /** Reusable Long constant for zero. */\n+    public static final Long LONG_ZERO = new Long(0L);\n+    /** Reusable Long constant for one. */\n+    public static final Long LONG_ONE = new Long(1L);\n+    /** Reusable Long constant for minus one. */\n+    public static final Long LONG_MINUS_ONE = new Long(-1L);\n+    /** Reusable Integer constant for zero. */\n+    public static final Integer INTEGER_ZERO = new Integer(0);\n+    /** Reusable Integer constant for one. */\n+    public static final Integer INTEGER_ONE = new Integer(1);\n+    /** Reusable Integer constant for minus one. */\n+    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);\n+    /** Reusable Short constant for zero. */\n+    public static final Short SHORT_ZERO = new Short((short) 0);\n+    /** Reusable Short constant for one. */\n+    public static final Short SHORT_ONE = new Short((short) 1);\n+    /** Reusable Short constant for minus one. */\n+    public static final Short SHORT_MINUS_ONE = new Short((short) -1);\n+    /** Reusable Byte constant for zero. */\n+    public static final Byte BYTE_ZERO = new Byte((byte) 0);\n+    /** Reusable Byte constant for one. */\n+    public static final Byte BYTE_ONE = new Byte((byte) 1);\n+    /** Reusable Byte constant for minus one. */\n+    public static final Byte BYTE_MINUS_ONE = new Byte((byte) -1);\n+    /** Reusable Double constant for zero. */\n+    public static final Double DOUBLE_ZERO = new Double(0.0d);\n+    /** Reusable Double constant for one. */\n+    public static final Double DOUBLE_ONE = new Double(1.0d);\n+    /** Reusable Double constant for minus one. */\n+    public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);\n+    /** Reusable Float constant for zero. */\n+    public static final Float FLOAT_ZERO = new Float(0.0f);\n+    /** Reusable Float constant for one. */\n+    public static final Float FLOAT_ONE = new Float(1.0f);\n+    /** Reusable Float constant for minus one. */\n+    public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);\n+\n+    /**\n+     * <p><code>NumberUtils</code> instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as <code>NumberUtils.stringToInt(\"6\");</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n+     */\n+    public NumberUtils() {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Convert a <code>String</code> to an <code>int</code>, returning\n+     * <code>zero</code> if the conversion fails.</p>\n+     * \n+     * @param str  the string to convert\n+     * @return the int represented by the string, or <code>zero</code> if\n+     *  conversion fails\n+     */\n+    public static int stringToInt(String str) {\n+        return stringToInt(str, 0);\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to an <code>int</code>, returning a\n+     * default value if the conversion fails.</p>\n+     * \n+     * @param str  the string to convert\n+     * @param defaultValue  the default value\n+     * @return the int represented by the string, or the default if conversion fails\n+     */\n+    public static int stringToInt(String str, int defaultValue) {\n+        try {\n+            return Integer.parseInt(str);\n+        } catch (NumberFormatException nfe) {\n+            return defaultValue;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    // must handle Long, Float, Integer, Float, Short,\n+    //                  BigDecimal, BigInteger and Byte\n+    // useful methods:\n+    // Byte.decode(String)\n+    // Byte.valueOf(String,int radix)\n+    // Byte.valueOf(String)\n+    // Double.valueOf(String)\n+    // Float.valueOf(String)\n+    // new Float(String)\n+    // Integer.valueOf(String,int radix)\n+    // Integer.valueOf(String)\n+    // Integer.decode(String)\n+    // Integer.getInteger(String)\n+    // Integer.getInteger(String,int val)\n+    // Integer.getInteger(String,Integer val)\n+    // new Integer(String)\n+    // new Double(String)\n+    // new Byte(String)\n+    // new Long(String)\n+    // Long.getLong(String)\n+    // Long.getLong(String,int)\n+    // Long.getLong(String,Integer)\n+    // Long.valueOf(String,int)\n+    // Long.valueOf(String)\n+    // new Short(String)\n+    // Short.decode(String)\n+    // Short.valueOf(String,int)\n+    // Short.valueOf(String)\n+    // new BigDecimal(String)\n+    // new BigInteger(String)\n+    // new BigInteger(String,int radix)\n+    // Possible inputs:\n+    // 45 45.5 45E7 4.5E7 Hex Oct Binary xxxF xxxD xxxf xxxd\n+    // plus minus everything. Prolly more. A lot are not separable.\n+\n+    /**\n+     * <p>Turns a string value into a java.lang.Number.</p>\n+     *\n+     * <p>First, the value is examined for a type qualifier on the end\n+     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n+     * trying to create succissively larger types from the type specified\n+     * until one is found that can hold the value.</p>\n+     *\n+     * <p>If a type specifier is not found, it will check for a decimal point\n+     * and then try successively larger types from <code>Integer</code> to\n+     * <code>BigInteger</code> and from <code>Float</code> to\n+     * <code>BigDecimal</code>.</p>\n+     *\n+     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n+     * will be interpreted as a hexadecimal integer.  Values with leading\n+     * <code>0</code>'s will not be interpreted as octal.</p>\n+     *\n+     * @param val String containing a number\n+     * @return Number created from the string\n+     * @throws NumberFormatException if the value cannot be converted\n+     */\n+    public static Number createNumber(String val) throws NumberFormatException {\n+        if (val == null) {\n+            return null;\n+        }\n+        if (val.length() == 0) {\n+            throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n+        }\n+        if (val.startsWith(\"--\")) {\n+            // this is protection for poorness in java.lang.BigDecimal.\n+            // it accepts this as a legal value, but it does not appear \n+            // to be in specification of class. OS X Java parses it to \n+            // a wrong value.\n+            return null;\n+        }\n+        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n+            return createInteger(val);\n+        }   \n+        char lastChar = val.charAt(val.length() - 1);\n+        String mant;\n+        String dec;\n+        String exp;\n+        int decPos = val.indexOf('.');\n+        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n+\n+        if (decPos > -1) {\n+\n+            if (expPos > -1) {\n+                if (expPos < decPos) {\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                }\n+                dec = val.substring(decPos + 1, expPos);\n+            } else {\n+                dec = val.substring(decPos + 1);\n+            }\n+            mant = val.substring(0, decPos);\n+        } else {\n+            if (expPos > -1) {\n+                mant = val.substring(0, expPos);\n+            } else {\n+                mant = val;\n+            }\n+            dec = null;\n+        }\n+        if (!Character.isDigit(lastChar)) {\n+            if (expPos > -1 && expPos < val.length() - 1) {\n+                exp = val.substring(expPos + 1, val.length() - 1);\n+            } else {\n+                exp = null;\n+            }\n+            //Requesting a specific type..\n+            String numeric = val.substring(0, val.length() - 1);\n+            boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+            switch (lastChar) {\n+                case 'l' :\n+                case 'L' :\n+                    if (dec == null\n+                        && exp == null\n+                        && isDigits(numeric.substring(1))\n+                        && (numeric.charAt(0) == '-' || Character.isDigit(numeric.charAt(0)))) {\n+                        try {\n+                            return createLong(numeric);\n+                        } catch (NumberFormatException nfe) {\n+                            //Too big for a long\n+                        }\n+                        return createBigInteger(numeric);\n+\n+                    }\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                case 'f' :\n+                case 'F' :\n+                    try {\n+                        Float f = NumberUtils.createFloat(numeric);\n+                        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                            //If it's too big for a float or the float value = 0 and the string\n+                            //has non-zeros in it, then float doens't have the presision we want\n+                            return f;\n+                        }\n+\n+                    } catch (NumberFormatException nfe) {\n+                    }\n+                    //Fall through\n+                case 'd' :\n+                case 'D' :\n+                    try {\n+                        Double d = NumberUtils.createDouble(numeric);\n+                        if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n+                            return d;\n+                        }\n+                    } catch (NumberFormatException nfe) {\n+                    }\n+                    try {\n+                        return createBigDecimal(numeric);\n+                    } catch (NumberFormatException e) {\n+                    }\n+                    //Fall through\n+                default :\n+                    throw new NumberFormatException(val + \" is not a valid number.\");\n+\n+            }\n+        } else {\n+            //User doesn't have a preference on the return type, so let's start\n+            //small and go from there...\n+            if (expPos > -1 && expPos < val.length() - 1) {\n+                exp = val.substring(expPos + 1, val.length());\n+            } else {\n+                exp = null;\n+            }\n+            if (dec == null && exp == null) {\n+                //Must be an int,long,bigint\n+                try {\n+                    return createInteger(val);\n+                } catch (NumberFormatException nfe) {\n+                }\n+                try {\n+                    return createLong(val);\n+                } catch (NumberFormatException nfe) {\n+                }\n+                return createBigInteger(val);\n+\n+            } else {\n+                //Must be a float,double,BigDec\n+                boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+                try {\n+                    Float f = createFloat(val);\n+                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                        return f;\n+                    }\n+                } catch (NumberFormatException nfe) {\n+                }\n+                try {\n+                    Double d = createDouble(val);\n+                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                        return d;\n+                    }\n+                } catch (NumberFormatException nfe) {\n+                }\n+\n+                return createBigDecimal(val);\n+\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n+     *\n+     * <p>Returns <code>true</code> if s is <code>null</code>.</p>\n+     * \n+     * @param s the String to check\n+     * @return if it is all zeros or <code>null</code>\n+     */\n+    private static boolean isAllZeros(String s) {\n+        if (s == null) {\n+            return true;\n+        }\n+        for (int i = s.length() - 1; i >= 0; i--) {\n+            if (s.charAt(i) != '0') {\n+                return false;\n+            }\n+        }\n+        return s.length() > 0;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Convert a <code>String</code> to a <code>Float</code>.</p>\n+     * \n+     * @param val  a <code>String</code> to convert\n+     * @return converted <code>Float</code>\n+     * @throws NumberFormatException if the value cannot be converted\n+     */\n+    public static Float createFloat(String val) {\n+        return Float.valueOf(val);\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to a <code>Double</code>.</p>\n+     * \n+     * @param val  a <code>String</code> to convert\n+     * @return converted <code>Double</code>\n+     * @throws NumberFormatException if the value cannot be converted\n+     */\n+    public static Double createDouble(String val) {\n+        return Double.valueOf(val);\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to a <code>Integer</code>, handling\n+     * hex and octal notations.</p>\n+     * \n+     * @param val  a <code>String</code> to convert\n+     * @return converted <code>Integer</code>\n+     * @throws NumberFormatException if the value cannot be converted\n+     */\n+    public static Integer createInteger(String val) {\n+        // decode() handles 0xAABD and 0777 (hex and octal) as well.\n+        return Integer.decode(val);\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to a <code>Long</code>.</p>\n+     * \n+     * @param val  a <code>String</code> to convert\n+     * @return converted <code>Long</code>\n+     * @throws NumberFormatException if the value cannot be converted\n+     */\n+    public static Long createLong(String val) {\n+        return Long.valueOf(val);\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to a <code>BigInteger</code>.</p>\n+     * \n+     * @param val  a <code>String</code> to convert\n+     * @return converted <code>BigInteger</code>\n+     * @throws NumberFormatException if the value cannot be converted\n+     */\n+    public static BigInteger createBigInteger(String val) {\n+        BigInteger bi = new BigInteger(val);\n+        return bi;\n+    }\n+\n+    /**\n+     * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>\n+     * \n+     * @param val  a <code>String</code> to convert\n+     * @return converted <code>BigDecimal</code>\n+     * @throws NumberFormatException if the value cannot be converted\n+     */\n+    public static BigDecimal createBigDecimal(String val) {\n+        BigDecimal bd = new BigDecimal(val);\n+        return bd;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Gets the minimum of three <code>long</code> values.</p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the smallest of the values\n+     */\n+    public static long min(long a, long b, long c) {\n+        if (b < a) {\n+            a = b;\n+        }\n+        if (c < a) {\n+            a = c;\n+        }\n+        return a;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum of three <code>int</code> values.</p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the smallest of the values\n+     */\n+    public static int min(int a, int b, int c) {\n+        if (b < a) {\n+            a = b;\n+        }\n+        if (c < a) {\n+            a = c;\n+        }\n+        return a;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum of three <code>short</code> values.</p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the smallest of the values\n+     */\n+    public static short min(short a, short b, short c) {\n+        if (b < a) {\n+            a = b;\n+        }\n+        if (c < a) {\n+            a = c;\n+        }\n+        return a;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum of three <code>byte</code> values.</p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the smallest of the values\n+     */\n+    public static byte min(byte a, byte b, byte c) {\n+        if (b < a) {\n+            a = b;\n+        }\n+        if (c < a) {\n+            a = c;\n+        }\n+        return a;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum of three <code>double</code> values.</p>\n+     * \n+     * <p>If any value is NaN, NaN is returned. Infinity is handled.</p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the smallest of the values\n+     */\n+    public static double min(double a, double b, double c) {\n+        return Math.min(Math.min(a, b), c);\n+    }\n+\n+    /**\n+     * <p>Gets the minimum of three <code>float</code> values.</p>\n+     * \n+     * <p>If any value is NaN, NaN is returned. Infinity is handled.</p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the smallest of the values\n+     */\n+    public static float min(float a, float b, float c) {\n+        return Math.min(Math.min(a, b), c);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Gets the maximum of three <code>long</code> values.</p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the largest of the values\n+     */\n+    public static long max(long a, long b, long c) {\n+        if (b > a) {\n+            a = b;\n+        }\n+        if (c > a) {\n+            a = c;\n+        }\n+        return a;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum of three <code>int</code> values.</p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the largest of the values\n+     */\n+    public static int max(int a, int b, int c) {\n+        if (b > a) {\n+            a = b;\n+        }\n+        if (c > a) {\n+            a = c;\n+        }\n+        return a;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum of three <code>short</code> values.</p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the largest of the values\n+     */\n+    public static short max(short a, short b, short c) {\n+        if (b > a) {\n+            a = b;\n+        }\n+        if (c > a) {\n+            a = c;\n+        }\n+        return a;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum of three <code>byte</code> values.</p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the largest of the values\n+     */\n+    public static byte max(byte a, byte b, byte c) {\n+        if (b > a) {\n+            a = b;\n+        }\n+        if (c > a) {\n+            a = c;\n+        }\n+        return a;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum of three <code>double</code> values.</p>\n+     * \n+     * <p>If any value is NaN, NaN is returned. Infinity is handled.</p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the largest of the values\n+     */\n+    public static double max(double a, double b, double c) {\n+        return Math.max(Math.max(a, b), c);\n+    }\n+\n+    /**\n+     * <p>Gets the maximum of three <code>float</code> values.</p>\n+     * \n+     * <p>If any value is NaN, NaN is returned. Infinity is handled.</p>\n+     * \n+     * @param a  value 1\n+     * @param b  value 2\n+     * @param c  value 3\n+     * @return  the largest of the values\n+     */\n+    public static float max(float a, float b, float c) {\n+        return Math.max(Math.max(a, b), c);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Compares two <code>doubles</code> for order.</p>\n+     *\n+     * <p>This method is more comprehensive than the standard Java greater\n+     * than, less than and equals operators.</p>\n+     * <ul>\n+     *  <li>It returns <code>-1</code> if the first value is less than the second.\n+     *  <li>It returns <code>+1</code> if the first value is greater than the second.\n+     *  <li>It returns <code>0</code> if the values are equal.\n+     * </ul>\n+     *\n+     * <p>\n+     * The ordering is as follows, largest to smallest:\n+     * <ul>\n+     *  <li>NaN\n+     *  <li>Positive infinity\n+     *  <li>Maximum double\n+     *  <li>Normal positve numbers\n+     *  <li>+0.0\n+     *  <li>-0.0\n+     *  <li>Normal negative numbers\n+     *  <li>Minimum double (-Double.MAX_VALUE)\n+     *  <li>Negative infinity\n+     * </ul>\n+     * </p>\n+     *\n+     * <p>Comparing <code>NaN</code> with <code>NaN</code> will\n+     * return <code>0</code>.</p>\n+     * \n+     * @param lhs  the first <code>double</code>\n+     * @param rhs  the second <code>double</code>\n+     * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,\n+     *  <code>0</code> if equal to rhs\n+     */\n+    public static int compare(double lhs, double rhs) {\n+        if (lhs < rhs) {\n+            return -1;\n+        }\n+        if (lhs > rhs) {\n+            return +1;\n+        }\n+        // Need to compare bits to handle 0.0 == -0.0 being true\n+        // compare should put -0.0 < +0.0\n+        // Two NaNs are also == for compare purposes\n+        // where NaN == NaN is false\n+        long lhsBits = Double.doubleToLongBits(lhs);\n+        long rhsBits = Double.doubleToLongBits(rhs);\n+        if (lhsBits == rhsBits) {\n+            return 0;\n+        }\n+        // Something exotic! A comparison to NaN or 0.0 vs -0.0\n+        // Fortunately NaN's long is > than everything else\n+        // Also negzeros bits < poszero\n+        // NAN: 9221120237041090560\n+        // MAX: 9218868437227405311\n+        // NEGZERO: -9223372036854775808\n+        if (lhsBits < rhsBits) {\n+            return -1;\n+        } else {\n+            return +1;\n+        }\n+    }\n+    \n+    /**\n+     * <p>Compares two floats for order.</p>\n+     *\n+     * <p>This method is more comprhensive than the standard Java greater than,\n+     * less than and equals operators.</p>\n+     * <ul>\n+     *  <li>It returns <code>-1</code> if the first value is less than the second.\n+     *  <li>It returns <code>+1</code> if the first value is greater than the second.\n+     *  <li>It returns <code>0</code> if the values are equal.\n+     * </ul>\n+     *\n+     * <p> The ordering is as follows, largest to smallest:\n+     * <ul>\n+     * <li>NaN\n+     * <li>Positive infinity\n+     * <li>Maximum float\n+     * <li>Normal positve numbers\n+     * <li>+0.0\n+     * <li>-0.0\n+     * <li>Normal negative numbers\n+     * <li>Minimum float (-Float.MAX_VALUE)\n+     * <li>Negative infinity\n+     * </ul>\n+     *\n+     * <p>Comparing <code>NaN</code> with <code>NaN</code> will return\n+     * <code>0</code>.</p>\n+     * \n+     * @param lhs  the first <code>float</code>\n+     * @param rhs  the second <code>float</code>\n+     * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,\n+     *  <code>0</code> if equal to rhs\n+     */\n+    public static int compare(float lhs, float rhs) {\n+        if (lhs < rhs) {\n+            return -1;\n+        }\n+        if (lhs > rhs) {\n+            return +1;\n+        }\n+        //Need to compare bits to handle 0.0 == -0.0 being true\n+        // compare should put -0.0 < +0.0\n+        // Two NaNs are also == for compare purposes\n+        // where NaN == NaN is false\n+        int lhsBits = Float.floatToIntBits(lhs);\n+        int rhsBits = Float.floatToIntBits(rhs);\n+        if (lhsBits == rhsBits) {\n+            return 0;\n+        }\n+        //Something exotic! A comparison to NaN or 0.0 vs -0.0\n+        //Fortunately NaN's int is > than everything else\n+        //Also negzeros bits < poszero\n+        //NAN: 2143289344\n+        //MAX: 2139095039\n+        //NEGZERO: -2147483648\n+        if (lhsBits < rhsBits) {\n+            return -1;\n+        } else {\n+            return +1;\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Checks whether the <code>String</code> contains only\n+     * digit characters.</p>\n+     *\n+     * <p><code>Null</code> and empty String will return\n+     * <code>false</code>.</p>\n+     *\n+     * @param str  the <code>String</code> to check\n+     * @return <code>true</code> if str contains only unicode numeric\n+     */\n+    public static boolean isDigits(String str) {\n+        if ((str == null) || (str.length() == 0)) {\n+            return false;\n+        }\n+        for (int i = 0; i < str.length(); i++) {\n+            if (!Character.isDigit(str.charAt(i))) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks whether the String a valid Java number.</p>\n+     *\n+     * <p>Valid numbers include hexadecimal marked with the <code>0x</code>\n+     * qualifier, scientific notation and numbers marked with a type\n+     * qualifier (e.g. 123L).</p>\n+     *\n+     * <p><code>Null</code> and empty String will return\n+     * <code>false</code>.</p>\n+     *\n+     * @param str  the <code>String</code> to check\n+     * @return <code>true</code> if the string is a correctly formatted number\n+     */\n+    public static boolean isNumber(String str) {\n+        if ((str == null) || (str.length() == 0)) {\n+            return false;\n+        }\n+        char[] chars = str.toCharArray();\n+        int sz = chars.length;\n+        boolean hasExp = false;\n+        boolean hasDecPoint = false;\n+        boolean allowSigns = false;\n+        boolean foundDigit = false;\n+        // deal with any possible sign up front\n+        int start = (chars[0] == '-') ? 1 : 0;\n+        if (sz > start + 1) {\n+            if (chars[start] == '0' && chars[start + 1] == 'x') {\n+                int i = start + 2;\n+                if (i == sz) {\n+                    return false; // str == \"0x\"\n+                }\n+                // checking hex (it can't be anything else)\n+                for (; i < chars.length; i++) {\n+                    if ((chars[i] < '0' || chars[i] > '9')\n+                        && (chars[i] < 'a' || chars[i] > 'f')\n+                        && (chars[i] < 'A' || chars[i] > 'F')) {\n+                        return false;\n+                    }\n+                }\n+                return true;\n+            }\n+        }\n+        sz--; // don't want to loop to the last char, check it afterwords\n+              // for type qualifiers\n+        int i = start;\n+        // loop to the next to last char or to the last char if we need another digit to\n+        // make a valid number (e.g. chars[0..5] = \"1234E\")\n+        while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n+            if (chars[i] >= '0' && chars[i] <= '9') {\n+                foundDigit = true;\n+                allowSigns = false;\n+\n+            } else if (chars[i] == '.') {\n+                if (hasDecPoint || hasExp) {\n+                    // two decimal points or dec in exponent   \n+                    return false;\n+                }\n+                hasDecPoint = true;\n+            } else if (chars[i] == 'e' || chars[i] == 'E') {\n+                // we've already taken care of hex.\n+                if (hasExp) {\n+                    // two E's\n+                    return false;\n+                }\n+                if (!foundDigit) {\n+                    return false;\n+                }\n+                hasExp = true;\n+                allowSigns = true;\n+            } else if (chars[i] == '+' || chars[i] == '-') {\n+                if (!allowSigns) {\n+                    return false;\n+                }\n+                allowSigns = false;\n+                foundDigit = false; // we need a digit after the E\n+            } else {\n+                return false;\n+            }\n+            i++;\n+        }\n+        if (i < chars.length) {\n+            if (chars[i] >= '0' && chars[i] <= '9') {\n+                // no type qualifier, OK\n+                return true;\n+            }\n+            if (chars[i] == 'e' || chars[i] == 'E') {\n+                // can't have an E at the last byte\n+                return false;\n+            }\n+            if (!allowSigns\n+                && (chars[i] == 'd'\n+                    || chars[i] == 'D'\n+                    || chars[i] == 'f'\n+                    || chars[i] == 'F')) {\n+                return foundDigit;\n+            }\n+            if (chars[i] == 'l'\n+                || chars[i] == 'L') {\n+                // not allowing L with an exponoent\n+                return foundDigit && !hasExp;\n+            }\n+            // last character is illegal\n+            return false;\n+        }\n+        // allowSigns is true iff the val ends in 'E'\n+        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass\n+        return !allowSigns && foundDigit;\n+    }\n+    \n+}\n--- a/src/java/org/apache/commons/lang/math/Range.java\n+++ b/src/java/org/apache/commons/lang/math/Range.java\n  */\n package org.apache.commons.lang.math;\n \n-import org.apache.commons.lang.NumberUtils;\n-\n /**\n  * <p><code>Range</code> represents a range of numbers of the same type.</p>\n  * \n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: Range.java,v 1.2 2003/03/23 17:51:15 scolebourne Exp $\n+ * @version $Id: Range.java,v 1.3 2003/06/24 21:14:50 scolebourne Exp $\n  */\n public abstract class Range {\n \n--- a/src/test/org/apache/commons/lang/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/NumberUtilsTest.java\n  * @author Eric Pugh\n  * @author Phil Steitz\n  * @author Stephen Colebourne\n- * @version $Id: NumberUtilsTest.java,v 1.7 2003/06/08 14:14:01 scolebourne Exp $\n+ * @version $Id: NumberUtilsTest.java,v 1.8 2003/06/24 21:14:51 scolebourne Exp $\n  */\n public class NumberUtilsTest extends TestCase {\n \n         }\n     }\n \n-    public void testConstants() {\n-        assertTrue(NumberUtils.LONG_ZERO instanceof Long);\n-        assertTrue(NumberUtils.LONG_ONE instanceof Long);\n-        assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long);\n-        assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer);\n-        assertTrue(NumberUtils.INTEGER_ONE instanceof Integer);\n-        assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer);\n-        assertTrue(NumberUtils.SHORT_ZERO instanceof Short);\n-        assertTrue(NumberUtils.SHORT_ONE instanceof Short);\n-        assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short);\n-        assertTrue(NumberUtils.BYTE_ZERO instanceof Byte);\n-        assertTrue(NumberUtils.BYTE_ONE instanceof Byte);\n-        assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte);\n-        assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double);\n-        assertTrue(NumberUtils.DOUBLE_ONE instanceof Double);\n-        assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double);\n-        assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);\n-        assertTrue(NumberUtils.FLOAT_ONE instanceof Float);\n-        assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);\n-        \n-        assertTrue(NumberUtils.LONG_ZERO.longValue() == 0);\n-        assertTrue(NumberUtils.LONG_ONE.longValue() == 1);\n-        assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1);\n-        assertTrue(NumberUtils.INTEGER_ZERO.intValue() == 0);\n-        assertTrue(NumberUtils.INTEGER_ONE.intValue() == 1);\n-        assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue() == -1);\n-        assertTrue(NumberUtils.SHORT_ZERO.shortValue() == 0);\n-        assertTrue(NumberUtils.SHORT_ONE.shortValue() == 1);\n-        assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue() == -1);\n-        assertTrue(NumberUtils.BYTE_ZERO.byteValue() == 0);\n-        assertTrue(NumberUtils.BYTE_ONE.byteValue() == 1);\n-        assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue() == -1);\n-        assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue() == 0.0d);\n-        assertTrue(NumberUtils.DOUBLE_ONE.doubleValue() == 1.0d);\n-        assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue() == -1.0d);\n-        assertTrue(NumberUtils.FLOAT_ZERO.floatValue() == 0.0f);\n-        assertTrue(NumberUtils.FLOAT_ONE.floatValue() == 1.0f);\n-        assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f);\n-    }\n }\n--- a/src/test/org/apache/commons/lang/math/MathTestSuite.java\n+++ b/src/test/org/apache/commons/lang/math/MathTestSuite.java\n /* ====================================================================\n  * The Apache Software License, Version 1.1\n  *\n- * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n  * reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n  * Test suite for the Math package.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: MathTestSuite.java,v 1.3 2003/05/14 02:41:26 bayard Exp $\n+ * @version $Id: MathTestSuite.java,v 1.4 2003/06/24 21:14:51 scolebourne Exp $\n  */\n public class MathTestSuite extends TestCase {\n     \n         suite.addTest(IntRangeTest.suite());\n         suite.addTest(LongRangeTest.suite());\n         suite.addTest(NumberRangeTest.suite());\n+        suite.addTest(NumberUtilsTest.suite());\n         suite.addTest(RandomUtilsTest.suite());\n         return suite;\n     }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.lang.SystemUtils;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang.math.NumberUtils}.\n+ *\n+ * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @author Eric Pugh\n+ * @author Phil Steitz\n+ * @author Stephen Colebourne\n+ * @version $Id: NumberUtilsTest.java,v 1.1 2003/06/24 21:14:51 scolebourne Exp $\n+ */\n+public class NumberUtilsTest extends TestCase {\n+\n+    public NumberUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(NumberUtilsTest.class);\n+        suite.setName(\"NumberUtils Tests\");\n+        return suite;\n+    }\n+\n+    //---------------------------------------------------------------------\n+\n+    /**\n+     * Test for int stringToInt(String)\n+     */\n+    public void testStringToIntString() {\n+        assertTrue(\"stringToInt(String) 1 failed\", NumberUtils.stringToInt(\"12345\") == 12345);\n+        assertTrue(\"stringToInt(String) 2 failed\", NumberUtils.stringToInt(\"abc\") == 0);\n+    }\n+\n+    /**\n+     * Test for int stringToInt(String, int)\n+     */\n+    public void testStringToIntStringI() {\n+        assertTrue(\"stringToInt(String,int) 1 failed\", NumberUtils.stringToInt(\"12345\", 5) == 12345);\n+        assertTrue(\"stringToInt(String,int) 2 failed\", NumberUtils.stringToInt(\"1234.5\", 5) == 5);\n+    }\n+\n+    public void testCreateNumber() {\n+        //a lot of things can go wrong\n+        assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n+        assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));\n+        assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n+        assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n+        assertEquals(\"createNumber(String) 5 failed\", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\" + (Integer.MAX_VALUE + 1L)));\n+        assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n+        assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n+        assertEquals(\"createNumber(String) 8 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n+        assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n+        assertTrue(\"createNumber(String) 10 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n+        assertEquals(\"createNumber(String) 11 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n+        assertEquals(\"createNumber(String) 12 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n+        assertEquals(\"createNumber(String) 13 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n+        assertEquals(\"createNumber(String) 14 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n+\n+        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n+        if(SystemUtils.isJavaVersionAtLeast(1.3f)) { \n+            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils.createNumber(\"1.1E-700F\"));\n+        }\n+        assertEquals(\n+            \"createNumber(String) 16 failed\",\n+            new Long(\"10\" + Integer.MAX_VALUE),\n+            NumberUtils.createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n+        assertEquals(\n+            \"createNumber(String) 17 failed\",\n+            new Long(\"10\" + Integer.MAX_VALUE),\n+            NumberUtils.createNumber(\"10\" + Integer.MAX_VALUE));\n+        assertEquals(\n+            \"createNumber(String) 18 failed\",\n+            new BigInteger(\"10\" + Long.MAX_VALUE),\n+            NumberUtils.createNumber(\"10\" + Long.MAX_VALUE));\n+\n+    }\n+\n+    public void testCreateFloat() {\n+        assertEquals(\"createFloat(String) failed\", new Float(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n+    }\n+\n+    public void testCreateDouble() {\n+        assertEquals(\"createDouble(String) failed\", new Double(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n+    }\n+\n+    public void testCreateInteger() {\n+        assertEquals(\"createInteger(String) failed\", new Integer(\"12345\"), NumberUtils.createInteger(\"12345\"));\n+    }\n+\n+    public void testCreateLong() {\n+        assertEquals(\"createInteger(String) failed\", new Long(\"12345\"), NumberUtils.createLong(\"12345\"));\n+    }\n+\n+    public void testCreateBigInteger() {\n+        assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"));\n+    }\n+\n+    public void testCreateBigDecimal() {\n+        assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n+    }\n+\n+    public void testMinimumLong() {\n+        assertEquals(\"minimum(long,long,long) 1 failed\", 12345L, NumberUtils.min(12345L, 12345L + 1L, 12345L + 2L));\n+        assertEquals(\"minimum(long,long,long) 2 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345 + 2L));\n+        assertEquals(\"minimum(long,long,long) 3 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L + 2L, 12345L));\n+        assertEquals(\"minimum(long,long,long) 4 failed\", 12345L, NumberUtils.min(12345L + 1L, 12345L, 12345L));\n+        assertEquals(\"minimum(long,long,long) 5 failed\", 12345L, NumberUtils.min(12345L, 12345L, 12345L));\n+    }\n+\n+    public void testMinimumInt() {\n+        assertEquals(\"minimum(int,int,int) 1 failed\", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2));\n+        assertEquals(\"minimum(int,int,int) 2 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2));\n+        assertEquals(\"minimum(int,int,int) 3 failed\", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345));\n+        assertEquals(\"minimum(int,int,int) 4 failed\", 12345, NumberUtils.min(12345 + 1, 12345, 12345));\n+        assertEquals(\"minimum(int,int,int) 5 failed\", 12345, NumberUtils.min(12345, 12345, 12345));\n+    }\n+\n+    public void testMinimumShort() {\n+        short low = 1234;\n+        short mid = 1234 + 1;\n+        short high = 1234 + 2;\n+        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(low, mid, high));\n+        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(mid, low, high));\n+        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(mid, high, low));\n+        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(low, mid, low));\n+    }\n+\n+    public void testMinimumByte() {\n+        byte low = 123;\n+        byte mid = 123 + 1;\n+        byte high = 123 + 2;\n+        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(low, mid, high));\n+        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(mid, low, high));\n+        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(mid, high, low));\n+        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(low, mid, low));\n+    }\n+\n+    public void testMaximumLong() {\n+        assertEquals(\"maximum(long,long,long) 1 failed\", 12345L, NumberUtils.max(12345L, 12345L - 1L, 12345L - 2L));\n+        assertEquals(\"maximum(long,long,long) 2 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L - 2L));\n+        assertEquals(\"maximum(long,long,long) 3 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L - 2L, 12345L));\n+        assertEquals(\"maximum(long,long,long) 4 failed\", 12345L, NumberUtils.max(12345L - 1L, 12345L, 12345L));\n+        assertEquals(\"maximum(long,long,long) 5 failed\", 12345L, NumberUtils.max(12345L, 12345L, 12345L));\n+    }\n+\n+    public void testMaximumInt() {\n+        assertEquals(\"maximum(int,int,int) 1 failed\", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2));\n+        assertEquals(\"maximum(int,int,int) 2 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2));\n+        assertEquals(\"maximum(int,int,int) 3 failed\", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345));\n+        assertEquals(\"maximum(int,int,int) 4 failed\", 12345, NumberUtils.max(12345 - 1, 12345, 12345));\n+        assertEquals(\"maximum(int,int,int) 5 failed\", 12345, NumberUtils.max(12345, 12345, 12345));\n+    }\n+\n+    public void testMaximumShort() {\n+        short low = 1234;\n+        short mid = 1234 + 1;\n+        short high = 1234 + 2;\n+        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(low, mid, high));\n+        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(mid, low, high));\n+        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(mid, high, low));\n+        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(high, mid, high));\n+    }\n+\n+    public void testMaximumByte() {\n+        byte low = 123;\n+        byte mid = 123 + 1;\n+        byte high = 123 + 2;\n+        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(low, mid, high));\n+        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(mid, low, high));\n+        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(mid, high, low));\n+        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(high, mid, high));\n+    }\n+\n+    public void testCompareDouble() {\n+        assertTrue(NumberUtils.compare(Double.NaN, Double.NaN) == 0);\n+        assertTrue(NumberUtils.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);\n+        assertTrue(NumberUtils.compare(Double.NaN, Double.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(Double.NaN, 1.2d) == +1);\n+        assertTrue(NumberUtils.compare(Double.NaN, 0.0d) == +1);\n+        assertTrue(NumberUtils.compare(Double.NaN, -0.0d) == +1);\n+        assertTrue(NumberUtils.compare(Double.NaN, -1.2d) == +1);\n+        assertTrue(NumberUtils.compare(Double.NaN, -Double.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);\n+        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);\n+        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);\n+        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);\n+        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);\n+        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);\n+        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NaN) == -1);\n+        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);\n+        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 1.2d) == +1);\n+        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 0.0d) == +1);\n+        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -0.0d) == +1);\n+        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -1.2d) == +1);\n+        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(1.2d, Double.NaN) == -1);\n+        assertTrue(NumberUtils.compare(1.2d, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(1.2d, Double.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(1.2d, 1.2d) == 0);\n+        assertTrue(NumberUtils.compare(1.2d, 0.0d) == +1);\n+        assertTrue(NumberUtils.compare(1.2d, -0.0d) == +1);\n+        assertTrue(NumberUtils.compare(1.2d, -1.2d) == +1);\n+        assertTrue(NumberUtils.compare(1.2d, -Double.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(0.0d, Double.NaN) == -1);\n+        assertTrue(NumberUtils.compare(0.0d, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(0.0d, Double.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(0.0d, 1.2d) == -1);\n+        assertTrue(NumberUtils.compare(0.0d, 0.0d) == 0);\n+        assertTrue(NumberUtils.compare(0.0d, -0.0d) == +1);\n+        assertTrue(NumberUtils.compare(0.0d, -1.2d) == +1);\n+        assertTrue(NumberUtils.compare(0.0d, -Double.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(-0.0d, Double.NaN) == -1);\n+        assertTrue(NumberUtils.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(-0.0d, Double.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(-0.0d, 1.2d) == -1);\n+        assertTrue(NumberUtils.compare(-0.0d, 0.0d) == -1);\n+        assertTrue(NumberUtils.compare(-0.0d, -0.0d) == 0);\n+        assertTrue(NumberUtils.compare(-0.0d, -1.2d) == +1);\n+        assertTrue(NumberUtils.compare(-0.0d, -Double.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(-1.2d, Double.NaN) == -1);\n+        assertTrue(NumberUtils.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(-1.2d, Double.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(-1.2d, 1.2d) == -1);\n+        assertTrue(NumberUtils.compare(-1.2d, 0.0d) == -1);\n+        assertTrue(NumberUtils.compare(-1.2d, -0.0d) == -1);\n+        assertTrue(NumberUtils.compare(-1.2d, -1.2d) == 0);\n+        assertTrue(NumberUtils.compare(-1.2d, -Double.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NaN) == -1);\n+        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 1.2d) == -1);\n+        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 0.0d) == -1);\n+        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -0.0d) == -1);\n+        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -1.2d) == -1);\n+        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);\n+        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);\n+        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);\n+        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);\n+        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);\n+        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);\n+        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);\n+    }\n+\n+    public void testCompareFloat() {\n+        assertTrue(NumberUtils.compare(Float.NaN, Float.NaN) == 0);\n+        assertTrue(NumberUtils.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);\n+        assertTrue(NumberUtils.compare(Float.NaN, Float.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(Float.NaN, 1.2f) == +1);\n+        assertTrue(NumberUtils.compare(Float.NaN, 0.0f) == +1);\n+        assertTrue(NumberUtils.compare(Float.NaN, -0.0f) == +1);\n+        assertTrue(NumberUtils.compare(Float.NaN, -1.2f) == +1);\n+        assertTrue(NumberUtils.compare(Float.NaN, -Float.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);\n+        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);\n+        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);\n+        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);\n+        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);\n+        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);\n+        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NaN) == -1);\n+        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);\n+        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 1.2f) == +1);\n+        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 0.0f) == +1);\n+        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -0.0f) == +1);\n+        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -1.2f) == +1);\n+        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(1.2f, Float.NaN) == -1);\n+        assertTrue(NumberUtils.compare(1.2f, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(1.2f, Float.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(1.2f, 1.2f) == 0);\n+        assertTrue(NumberUtils.compare(1.2f, 0.0f) == +1);\n+        assertTrue(NumberUtils.compare(1.2f, -0.0f) == +1);\n+        assertTrue(NumberUtils.compare(1.2f, -1.2f) == +1);\n+        assertTrue(NumberUtils.compare(1.2f, -Float.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(0.0f, Float.NaN) == -1);\n+        assertTrue(NumberUtils.compare(0.0f, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(0.0f, Float.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(0.0f, 1.2f) == -1);\n+        assertTrue(NumberUtils.compare(0.0f, 0.0f) == 0);\n+        assertTrue(NumberUtils.compare(0.0f, -0.0f) == +1);\n+        assertTrue(NumberUtils.compare(0.0f, -1.2f) == +1);\n+        assertTrue(NumberUtils.compare(0.0f, -Float.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(-0.0f, Float.NaN) == -1);\n+        assertTrue(NumberUtils.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(-0.0f, Float.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(-0.0f, 1.2f) == -1);\n+        assertTrue(NumberUtils.compare(-0.0f, 0.0f) == -1);\n+        assertTrue(NumberUtils.compare(-0.0f, -0.0f) == 0);\n+        assertTrue(NumberUtils.compare(-0.0f, -1.2f) == +1);\n+        assertTrue(NumberUtils.compare(-0.0f, -Float.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(-1.2f, Float.NaN) == -1);\n+        assertTrue(NumberUtils.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(-1.2f, Float.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(-1.2f, 1.2f) == -1);\n+        assertTrue(NumberUtils.compare(-1.2f, 0.0f) == -1);\n+        assertTrue(NumberUtils.compare(-1.2f, -0.0f) == -1);\n+        assertTrue(NumberUtils.compare(-1.2f, -1.2f) == 0);\n+        assertTrue(NumberUtils.compare(-1.2f, -Float.MAX_VALUE) == +1);\n+        assertTrue(NumberUtils.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NaN) == -1);\n+        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 1.2f) == -1);\n+        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 0.0f) == -1);\n+        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -0.0f) == -1);\n+        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -1.2f) == -1);\n+        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);\n+        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);\n+        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);\n+        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);\n+        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);\n+        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);\n+        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);\n+        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);\n+    }\n+\n+    public void testIsDigits() {\n+        assertEquals(\"isDigits(null) failed\", false, NumberUtils.isDigits(null));\n+        assertEquals(\"isDigits('') failed\", false, NumberUtils.isDigits(\"\"));\n+        assertEquals(\"isDigits(String) failed\", true, NumberUtils.isDigits(\"12345\"));\n+        assertEquals(\"isDigits(String) neg 1 failed\", false, NumberUtils.isDigits(\"1234.5\"));\n+        assertEquals(\"isDigits(String) neg 3 failed\", false, NumberUtils.isDigits(\"1ab\"));\n+        assertEquals(\"isDigits(String) neg 4 failed\", false, NumberUtils.isDigits(\"abc\"));\n+    }\n+    \n+    /**\n+     * Tests isNumber(String) and tests that createNumber(String) returns\n+     * a valid number iff isNumber(String) returns false.\n+     */\n+    public void testIsNumber() {\n+        String val = \"12345\";\n+        assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));\n+        val = \"1234.5\";\n+        assertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));\n+        val = \".12345\";\n+        assertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));\n+        val = \"1234E5\";\n+        assertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));\n+        val = \"1234E+5\";\n+        assertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));\n+        val = \"1234E-5\";\n+        assertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));\n+        val = \"123.4E5\";\n+        assertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));\n+        val = \"-1234\";\n+        assertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));\n+        val = \"-1234.5\";\n+        assertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));\n+        val = \"-.12345\";\n+        assertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));\n+        val = \"-1234E5\";\n+        assertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));\n+        val = \"0\";\n+        assertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));\n+        val = \"-0\";\n+        assertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));\n+        val = \"01234\";\n+        assertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));\n+        val = \"-01234\";\n+        assertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));\n+        val = \"0xABC123\";\n+        assertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));\n+        val = \"0x0\";\n+        assertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));\n+        val = \"123.4E21D\";\n+        assertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));\n+        val = \"-221.23F\";\n+        assertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));\n+        val = \"22338L\";\n+        assertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));\n+        val = null;\n+        assertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));\n+        val = \"\";\n+        assertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));\n+        val = \"--2.3\";\n+        assertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));\n+        val = \".12.3\";\n+        assertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));\n+        val = \"-123E\";\n+        assertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));\n+        val = \"-123E+-212\";\n+        assertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));\n+        val = \"-123E2.12\";\n+        assertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));\n+        val = \"0xGF\";\n+        assertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));\n+        val = \"0xFAE-1\";\n+        assertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));\n+        val = \".\";\n+        assertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));\n+        val = \"-0ABC123\";\n+        assertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));\n+        val = \"123.4E-D\";\n+        assertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));\n+        val = \"123.4ED\";\n+        assertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));\n+        val = \"1234E5l\";\n+        assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));\n+        val = \"11a\";\n+        assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val)); \n+        val = \"1a\";\n+        assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val)); \n+        val = \"a\";\n+        assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11g\";\n+        assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11z\";\n+        assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11def\";\n+        assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11d11\";\n+        assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \n+\n+    }\n+\n+    private boolean checkCreateNumber(String val) {\n+        try {\n+            Object obj = NumberUtils.createNumber(val);\n+            if (obj == null) {\n+                return false;\n+            }\n+            return true;\n+        } catch (NumberFormatException e) {\n+            return false;\n+        } catch (NullPointerException e) {\n+            return false;\n+        }\n+    }\n+\n+    public void testConstants() {\n+        assertTrue(NumberUtils.LONG_ZERO instanceof Long);\n+        assertTrue(NumberUtils.LONG_ONE instanceof Long);\n+        assertTrue(NumberUtils.LONG_MINUS_ONE instanceof Long);\n+        assertTrue(NumberUtils.INTEGER_ZERO instanceof Integer);\n+        assertTrue(NumberUtils.INTEGER_ONE instanceof Integer);\n+        assertTrue(NumberUtils.INTEGER_MINUS_ONE instanceof Integer);\n+        assertTrue(NumberUtils.SHORT_ZERO instanceof Short);\n+        assertTrue(NumberUtils.SHORT_ONE instanceof Short);\n+        assertTrue(NumberUtils.SHORT_MINUS_ONE instanceof Short);\n+        assertTrue(NumberUtils.BYTE_ZERO instanceof Byte);\n+        assertTrue(NumberUtils.BYTE_ONE instanceof Byte);\n+        assertTrue(NumberUtils.BYTE_MINUS_ONE instanceof Byte);\n+        assertTrue(NumberUtils.DOUBLE_ZERO instanceof Double);\n+        assertTrue(NumberUtils.DOUBLE_ONE instanceof Double);\n+        assertTrue(NumberUtils.DOUBLE_MINUS_ONE instanceof Double);\n+        assertTrue(NumberUtils.FLOAT_ZERO instanceof Float);\n+        assertTrue(NumberUtils.FLOAT_ONE instanceof Float);\n+        assertTrue(NumberUtils.FLOAT_MINUS_ONE instanceof Float);\n+        \n+        assertTrue(NumberUtils.LONG_ZERO.longValue() == 0);\n+        assertTrue(NumberUtils.LONG_ONE.longValue() == 1);\n+        assertTrue(NumberUtils.LONG_MINUS_ONE.longValue() == -1);\n+        assertTrue(NumberUtils.INTEGER_ZERO.intValue() == 0);\n+        assertTrue(NumberUtils.INTEGER_ONE.intValue() == 1);\n+        assertTrue(NumberUtils.INTEGER_MINUS_ONE.intValue() == -1);\n+        assertTrue(NumberUtils.SHORT_ZERO.shortValue() == 0);\n+        assertTrue(NumberUtils.SHORT_ONE.shortValue() == 1);\n+        assertTrue(NumberUtils.SHORT_MINUS_ONE.shortValue() == -1);\n+        assertTrue(NumberUtils.BYTE_ZERO.byteValue() == 0);\n+        assertTrue(NumberUtils.BYTE_ONE.byteValue() == 1);\n+        assertTrue(NumberUtils.BYTE_MINUS_ONE.byteValue() == -1);\n+        assertTrue(NumberUtils.DOUBLE_ZERO.doubleValue() == 0.0d);\n+        assertTrue(NumberUtils.DOUBLE_ONE.doubleValue() == 1.0d);\n+        assertTrue(NumberUtils.DOUBLE_MINUS_ONE.doubleValue() == -1.0d);\n+        assertTrue(NumberUtils.FLOAT_ZERO.floatValue() == 0.0f);\n+        assertTrue(NumberUtils.FLOAT_ONE.floatValue() == 1.0f);\n+        assertTrue(NumberUtils.FLOAT_MINUS_ONE.floatValue() == -1.0f);\n+    }\n+    \n+}", "timestamp": 1056489291, "metainfo": ""}