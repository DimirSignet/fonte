{"sha": "bf1865a9121b18781de93a6a95cd06f14c467b4b", "log": "Change constructors to take Matcher, not CharSetMatcher   ", "commit": "\n--- a/src/java/org/apache/commons/lang/Tokenizer.java\n+++ b/src/java/org/apache/commons/lang/Tokenizer.java\n  * @author Stephen Colebourne\n  * @author Gary D. Gregory\n  * @since 2.1\n- * @version $Id: Tokenizer.java,v 1.6 2004/02/19 21:04:03 fredrik Exp $\n+ * @version $Id: Tokenizer.java,v 1.7 2004/08/28 09:14:21 scolebourne Exp $\n  */\n public class Tokenizer implements ListIterator, Cloneable {\n \n \n     //-----------------------------------------------------------------------\n     /**\n-     * Get a tokenizer instance which parses Comma Seperated Value\n-     * strings.  You must call a \"reset\" method to set the string which\n-     * you want to parse.\n+     * Gets a new tokenizer instance which parses Comma Seperated Value strings.\n+     * You must call a \"reset\" method to set the string which you want to parse.\n      */\n     public static final Tokenizer getCSVInstance() {\n         return (Tokenizer)(CSV_TOKENIZER_PROTOTYPE.clone());\n     }\n \n     /**\n-     * Get a tokenizer instance which parses Comma Seperated Value\n-     * strings, initializing it with the given input.\n+     * Gets a new tokenizer instance which parses Comma Seperated Value strings\n+     * initializing it with the given input.\n      * \n      * @param input  the string to parse\n      */\n     }\n \n     /**\n-     * Get a tokenizer instance which parses Comma Seperated Value\n-     * strings, initializing it with the given input.\n+     * Gets a new tokenizer instance which parses Comma Seperated Value strings\n+     * initializing it with the given input.\n      * \n      * @param input  the text to parse\n      */\n     }\n \n     /**\n-     * Get a tokenizer instance which parses Tab Seperated Value\n-     * strings.  You must call a \"reset\" method to set the string which\n-     * you want to parse.\n+     * Gets a new tokenizer instance which parses Tab Seperated Value strings.\n+     * You must call a \"reset\" method to set the string which you want to parse.\n      */\n     public static final Tokenizer getTSVInstance() {\n         return (Tokenizer)(TSV_TOKENIZER_PROTOTYPE.clone());\n     }\n \n     /**\n-     * Get a tokenizer instance which parses Tab Seperated Value\n-     * strings, initializing it with the given input.\n+     * Gets a new tokenizer instance which parses Tab Seperated Value strings\n+     * initializing it with the given input.\n      * \n      * @param input  the string to parse\n      */\n     }\n \n     /**\n-     * Get a tokenizer instance which parses Tab Seperated Value\n-     * strings, initializing it with the given input.\n+     * Gets a new tokenizer instance which parses Tab Seperated Value strings\n+     * initializing it with the given input.\n      * \n      * @param input  the text to parse\n      */\n     }\n \n     /**\n-     * Constructs a tokenizer splitting on space, tab, newline and formfeed\n-     * as per StringTokenizer.\n+     * Constructs a tokenizer splitting using the specified delimiter matcher.\n      * \n      * @param input  the string which is to be parsed\n-     * @param delim  the field delimiter character\n-     */\n-    public Tokenizer(String input, CharSetMatcher delim) {\n+     * @param delim  the field delimiter matcher\n+     */\n+    public Tokenizer(String input, Matcher delim) {\n         this(input);\n         setDelimiterMatcher(delim);\n     }\n \n     /**\n-     * Constructs a tokenizer splitting on space, tab, newline and formfeed\n-     * as per StringTokenizer.\n+     * Constructs a tokenizer splitting on the specified delimiter character\n+     * and handling quotes using the specified quote character.\n      * \n      * @param input  the string which is to be parsed\n      * @param delim  the field delimiter character\n     }\n \n     /**\n-     * Constructs a tokenizer splitting on space, tab, newline and formfeed\n-     * as per StringTokenizer.\n+     * Constructs a tokenizer splitting using the specified delimiter matcher\n+     * and handling quotes using the specified quote matcher.\n      * \n      * @param input  the string which is to be parsed\n-     * @param delim  the field delimiter character\n-     * @param quote  the field quoted string character\n-     */\n-    public Tokenizer(String input, CharSetMatcher delim, CharSetMatcher quote) {\n+     * @param delim  the field delimiter matcher\n+     * @param quote  the field quoted string matcher\n+     */\n+    public Tokenizer(String input, Matcher delim, Matcher quote) {\n         this(input, delim);\n         setQuoteMatcher(quote);\n     }\n     }\n \n     /**\n-     * Constructs a tokenizer splitting on space, tab, newline and formfeed\n-     * as per StringTokenizer.\n+     * Constructs a tokenizer splitting using the specified delimiter matcher.\n      * \n      * @param input  the string which is to be parsed, cloned\n-     * @param delim  the field delimiter character\n-     */\n-    public Tokenizer(char[] input, CharSetMatcher delim) {\n+     * @param delim  the field delimiter matcher\n+     */\n+    public Tokenizer(char[] input, Matcher delim) {\n         this(input);\n         setDelimiterMatcher(delim);\n     }\n \n     /**\n-     * Constructs a tokenizer splitting on space, tab, newline and formfeed\n-     * as per StringTokenizer.\n+     * Constructs a tokenizer splitting on the specified delimiter character\n+     * and handling quotes using the specified quote character.\n      * \n      * @param input  the string which is to be parsed, cloned\n      * @param delim  the field delimiter character\n     }\n \n     /**\n-     * Constructs a tokenizer splitting on space, tab, newline and formfeed\n-     * as per StringTokenizer.\n+     * Constructs a tokenizer splitting using the specified delimiter matcher\n+     * and handling quotes using the specified quote matcher.\n      * \n      * @param input  the string which is to be parsed, cloned\n      * @param delim  the field delimiter character\n      * @param quote  the field quoted string character\n      */\n-    public Tokenizer(char[] input, CharSetMatcher delim, CharSetMatcher quote) {\n+    public Tokenizer(char[] input, Matcher delim, Matcher quote) {\n         this(input, delim);\n         setQuoteMatcher(quote);\n     }\n             // Quoting mode can occur several times throughout\n             // a given string, so must switch between quoting\n             // and non-quoting until we encounter a non-quoted\n-            // delimiter, or end of string, which inidicates end\n+            // delimiter, or end of string, which indicates end\n             // of token.\n             if (quoting) {\n                 // If we've found a quote character, see if it's", "timestamp": 1093684461, "metainfo": ""}