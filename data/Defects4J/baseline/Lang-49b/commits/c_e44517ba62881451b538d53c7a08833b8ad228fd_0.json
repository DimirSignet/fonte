{"sha": "e44517ba62881451b538d53c7a08833b8ad228fd", "log": "Return of WordWrapUtils, fresh with bugs fixed in StringTaglib. Part of the reason for dropping it originally was that I knew my methods [wordWrap rather than wrapText or wrapLine] had nasty die-a-death bugs and hadn't had time to fix them. These got fixed as a part of String Taglib so I'm now personally happy with the code. As happy as you can ever be anyway without more tests to hurt it.  Submitted by:\tHenning Schmiedehausen   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/WordWrapUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.util.NoSuchElementException;\n+import java.util.StringTokenizer;\n+\n+/**\n+ * <code>WordWrapUtils</code> is a utility class to assist with word wrapping.\n+ * \n+ * @author Henri Yandell\n+ * @author Stephen Colebourne\n+ * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n+ * @version $Id: WordWrapUtils.java,v 1.1 2003/04/15 14:28:41 bayard Exp $\n+ */\n+public class WordWrapUtils {\n+\n+    // Wrapping\n+    //--------------------------------------------------------------------------\n+\n+    /**\n+     * Wraps a block of text to a specified line length.\n+     * <p>\n+     * This method takes a block of text, which might have long lines in it\n+     * and wraps the long lines based on the supplied wrapColumn parameter. \n+     * It was initially implemented for use by VelocityEmail. If there are tabs\n+     * in inString, you are going to get results that are a bit strange,\n+     * since tabs are a single character but are displayed as 4 or 8\n+     * spaces. Remove the tabs.\n+     *\n+     * @param str  text which is in need of word-wrapping\n+     * @param newline  the characters that define a newline\n+     * @param wrapColumn  the column to wrap the words at\n+     * @return the text with all the long lines word-wrapped\n+     */\n+    public static String wrapText(String str, String newline, int wrapColumn) {\n+        StringTokenizer lineTokenizer = new StringTokenizer(str, newline, true);\n+        StringBuffer stringBuffer = new StringBuffer();\n+\n+        while (lineTokenizer.hasMoreTokens()) {\n+            try {\n+                String nextLine = lineTokenizer.nextToken();\n+\n+                if (nextLine.length() > wrapColumn) {\n+                    // This line is long enough to be wrapped.\n+                    nextLine = wrapLine(nextLine, newline, wrapColumn);\n+                }\n+\n+                stringBuffer.append(nextLine);\n+\n+            } catch (NoSuchElementException nsee) {\n+                // thrown by nextToken(), but I don't know why it would\n+                break;\n+            }\n+        }\n+\n+        return (stringBuffer.toString());\n+    }\n+\n+    /**\n+     * Wraps a single line of text. \n+     * Called by wrapText() to do the real work of wrapping.\n+     *\n+     * @param line  a line which is in need of word-wrapping\n+     * @param newline  the characters that define a newline\n+     * @param wrapColumn  the column to wrap the words at\n+     * @return a line with newlines inserted\n+     */\n+    private static String wrapLine(String line, String newline, int wrapColumn) {\n+        StringBuffer wrappedLine = new StringBuffer();\n+\n+        while (line.length() > wrapColumn) {\n+            int spaceToWrapAt = line.lastIndexOf(' ', wrapColumn);\n+\n+            if (spaceToWrapAt >= 0) {\n+                wrappedLine.append(line.substring(0, spaceToWrapAt));\n+                wrappedLine.append(newline);\n+                line = line.substring(spaceToWrapAt + 1);\n+            }\n+\n+            // This must be a really long word or URL. Pass it\n+            // through unchanged even though it's longer than the\n+            // wrapColumn would allow. This behavior could be\n+            // dependent on a parameter for those situations when\n+            // someone wants long words broken at line length.\n+            else {\n+                spaceToWrapAt = line.indexOf(' ', wrapColumn);\n+\n+                if (spaceToWrapAt >= 0) {\n+                    wrappedLine.append(line.substring(0, spaceToWrapAt));\n+                    wrappedLine.append(newline);\n+                    line = line.substring(spaceToWrapAt + 1);\n+                } else {\n+                    wrappedLine.append(line);\n+                    line = \"\";\n+                }\n+            }\n+        }\n+\n+        // Whatever is left in line is short enough to just pass through\n+        wrappedLine.append(line);\n+\n+        return (wrappedLine.toString());\n+    }\n+\n+    // Word wrapping\n+    //--------------------------------------------------------------------------\n+\n+    /**\n+     * Create a word-wrapped version of a String. Wrap at 80 characters and \n+     * use newlines as the delimiter. If a word is over 80 characters long \n+     * use a - sign to split it.\n+     */\n+    public static String wordWrap(String str) {\n+        return wordWrap(str, 80, \"\\n\", \"-\");\n+    }\n+    /**\n+     * Create a word-wrapped version of a String. Wrap at a specified width and \n+     * use newlines as the delimiter. If a word is over the width in lenght \n+     * use a - sign to split it.\n+     */\n+    public static String wordWrap(String str, int width) {\n+        return wordWrap(str, width, \"\\n\", \"-\");\n+    }\n+    /**\n+     * Word-wrap a string.\n+     *\n+     * @param str   String to word-wrap\n+     * @param width int to wrap at\n+     * @param delim String to use to separate lines\n+     * @param split String to use to split a word greater than width long\n+     *\n+     * @return String that has been word wrapped\n+     */\n+    public static String wordWrap(String str, int width, String delim, String split) {\n+        int sz = str.length();\n+\n+        /// shift width up one. mainly as it makes the logic easier\n+        width++;\n+\n+        // our best guess as to an initial size\n+        StringBuffer buffer = new StringBuffer(sz / width * delim.length() + sz);\n+\n+        // every line will include a delim on the end\n+        width = width - delim.length();\n+\n+        int idx = -1;\n+        String substr = null;\n+\n+        // beware: i is rolled-back inside the loop\n+        for (int i = 0; i < sz; i += width) {\n+\n+            // on the last line\n+            if (i > sz - width) {\n+                buffer.append(str.substring(i));\n+                break;\n+            }\n+\n+            // the current line\n+            substr = str.substring(i, i + width);\n+\n+            // is the delim already on the line\n+            idx = substr.indexOf(delim);\n+            if (idx != -1) {\n+                buffer.append(substr.substring(0, idx));\n+                buffer.append(delim);\n+                i -= width - idx - delim.length();\n+\n+                // Erase a space after a delim. Is this too obscure?\n+                if(substr.length() > idx + 1) {\n+                    if (substr.charAt(idx + 1) != '\\n') {\n+                        if (Character.isWhitespace(substr.charAt(idx + 1))) {\n+                            i++;\n+                        }\n+                    }\n+                }\n+                continue;\n+            }\n+\n+            idx = -1;\n+\n+            // figure out where the last space is\n+            char[] chrs = substr.toCharArray();\n+            for (int j = width; j > 0; j--) {\n+                if (Character.isWhitespace(chrs[j - 1])) {\n+                    idx = j;\n+                    break;\n+                }\n+            }\n+\n+            // idx is the last whitespace on the line.\n+            if (idx == -1) {\n+                for (int j = width; j > 0; j--) {\n+                    if (chrs[j - 1] == '-') {\n+                        idx = j;\n+                        break;\n+                    }\n+                }\n+                if (idx == -1) {\n+                    buffer.append(substr);\n+                    buffer.append(delim);\n+                } else {\n+                    if (idx != width) {\n+                        idx++;\n+                    }\n+                    buffer.append(substr.substring(0, idx));\n+                    buffer.append(delim);\n+                    i -= width - idx;\n+                }\n+            } else {\n+                    buffer.append(substr.substring(0, idx));\n+                    buffer.append(StringUtils.repeat(\" \", width - idx));\n+                    buffer.append(delim);\n+                    i -= width - idx;\n+            }\n+        }\n+        return buffer.toString();\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/WordWrapUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Unit tests for the wrap methods of WordWrapUtils.\n+ * \n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @version $Id: WordWrapUtilsTest.java,v 1.1 2003/04/15 14:28:41 bayard Exp $\n+ */\n+public class WordWrapUtilsTest extends TestCase {\n+\n+    public WordWrapUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(WordWrapUtilsTest.class);\n+        suite.setName(\"WordWrapperTests\");\n+        return suite;\n+    }\n+\n+    /**\n+     * Wrap text. This is the most general use.\n+     */\n+    public void testWrapText1() {\n+        String input =\n+                \"Here is one line of text that is going to be wrapped after 20 columns.\";\n+        String expected =\n+                \"Here is one line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n+        assertEquals(\"Text didn't wrap correctly, \", expected, WordWrapUtils.wrapText(input, \"\\n\", 20));\n+    }\n+\n+    /**\n+     * Wrap text with a tab character in the middle of a string.\n+     */\n+    public void testWrapText2() {\n+        String input =\n+                \"Here is\\tone line of text that is going to be wrapped after 20 columns.\";\n+        String expected =\n+                \"Here is\\tone line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n+        assertEquals(\"Text with tab didn't wrap correctly, \", expected, WordWrapUtils.wrapText(input, \"\\n\", 20));\n+    }\n+\n+    /**\n+     * Wrap text with a tab character located at the wrapping column index.\n+     */\n+    public void testWrapText3() {\n+        String input =\n+                \"Here is one line of\\ttext that is going to be wrapped after 20 columns.\";\n+        String expected =\n+                \"Here is one line\\nof\\ttext that is\\ngoing to be wrapped\\nafter 20 columns.\";\n+        assertEquals(\"Text with tab at wrapping index didn't wrap correctly, \", expected, WordWrapUtils.wrapText(input, \"\\n\", 20));\n+    }\n+}", "timestamp": 1050416921, "metainfo": ""}