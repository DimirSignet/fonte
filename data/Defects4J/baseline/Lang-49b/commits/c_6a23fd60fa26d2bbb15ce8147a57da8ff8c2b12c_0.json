{"sha": "6a23fd60fa26d2bbb15ce8147a57da8ff8c2b12c", "log": "Handle Java version with text prefix, as found on HP-UX bug 32123, from Jason Gritman   ", "commit": "\n--- a/src/java/org/apache/commons/lang/SystemUtils.java\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n  * @author Michael Becke\n  * @author Tetsuya Kaneuchi\n  * @author Rafal Krupinski\n+ * @author Jason Gritman\n  * @since 1.0\n- * @version $Id: SystemUtils.java,v 1.37 2004/11/06 01:27:59 ggregory Exp $\n+ * @version $Id: SystemUtils.java,v 1.38 2004/11/12 00:48:41 scolebourne Exp $\n  */\n public class SystemUtils {\n \n \n     // Java version\n     //-----------------------------------------------------------------------\n-    // These MUST be declared after those above as they depend on the\n+    // This MUST be declared after those above as it depends on the\n     // values being set up\n-    \n+\n+    /**\n+     * <p>Gets the Java version as a <code>String</code> trimming leading letters.</p>\n+     *\n+     * <p>The field will return <code>null</code> if {@link #JAVA_VERSION} is <code>null</code>.</p>\n+     * \n+     * @since 2.1\n+     */\n+    public static final String JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+\n+    // Java version values\n+    //-----------------------------------------------------------------------\n+    // These MUST be declared after the trim above as they depend on the\n+    // value being set up\n+\n     /**\n      * <p>Gets the Java version as a <code>float</code>.</p>\n      *\n      * </ul>\n      * \n      * <p>Patch releases are not reported.\n-     * Zero is returned if {@link #JAVA_VERSION} is <code>null</code>.</p>\n+     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n      * \n      * @return the version, for example 1.31f for JDK 1.3.1\n      */\n     private static float getJavaVersionAsFloat() {\n-        if (JAVA_VERSION == null) {\n+        if (JAVA_VERSION_TRIMMED == null) {\n             return 0f;\n         }\n-        String str = JAVA_VERSION.substring(0, 3);\n-        if (JAVA_VERSION.length() >= 5) {\n-            str = str + JAVA_VERSION.substring(4, 5);\n+        String str = JAVA_VERSION_TRIMMED.substring(0, 3);\n+        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n+            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n         }\n         return Float.parseFloat(str);\n     }\n      * </ul>\n      * \n      * <p>Patch releases are not reported.\n-     * Zero is returned if {@link #JAVA_VERSION} is <code>null</code>.</p>\n+     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n      * \n      * @return the version, for example 131 for JDK 1.3.1\n      */\n     private static int getJavaVersionAsInt() {\n-        if (JAVA_VERSION == null) {\n+        if (JAVA_VERSION_TRIMMED == null) {\n             return 0;\n         }\n-        String str = JAVA_VERSION.substring(0, 1);\n-        str = str + JAVA_VERSION.substring(2, 3);\n-        if (JAVA_VERSION.length() >= 5) {\n-            str = str + JAVA_VERSION.substring(4, 5);\n+        String str = JAVA_VERSION_TRIMMED.substring(0, 1);\n+        str = str + JAVA_VERSION_TRIMMED.substring(2, 3);\n+        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n+            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n         } else {\n             str = str + \"0\";\n         }\n     }\n \n     /**\n+     * Trims the text of the java version to start with numbers.\n+     * \n+     * @return the trimmed java version\n+     */\n+    private static String getJavaVersionTrimmed() {\n+        if (JAVA_VERSION != null) {\n+            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n+                char ch = JAVA_VERSION.charAt(i);\n+                if (ch >= '0' && ch <= '9') {\n+                    return JAVA_VERSION.substring(i);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n      * <p>Decides if the java version matches.</p>\n      * \n      * @param versionPrefix  the prefix for the java version\n      * @return true if matches, or false if not or can't determine\n      */\n     private static boolean getJavaVersionMatches(String versionPrefix) {\n-        if (JAVA_VERSION == null) {\n+        if (JAVA_VERSION_TRIMMED == null) {\n             return false;\n         }\n-        return JAVA_VERSION.startsWith(versionPrefix);\n+        return JAVA_VERSION_TRIMMED.startsWith(versionPrefix);\n     }    \n     \n     /**\n--- a/src/test/org/apache/commons/lang/SystemUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/SystemUtilsTest.java\n  * @author Stephen Colebourne\n  * @author Tetsuya Kaneuchi\n  * @author Gary D. Gregory\n- * @version $Id: SystemUtilsTest.java,v 1.10 2004/02/25 00:25:29 ggregory Exp $\n+ * @version $Id: SystemUtilsTest.java,v 1.11 2004/11/12 00:48:41 scolebourne Exp $\n  */\n public class SystemUtilsTest extends TestCase {\n     public static void main(String[] args) {\n     //-----------------------------------------------------------------------\n     private String JAVA_VERSION;\n \n+    private String JAVA_VERSION_TRIMMED;\n+\n     private String OS_NAME;\n \n     private String OS_VERSION;\n     }\n \n     /**\n-     * <p>\n-     * Get the Java version number as a <code>float</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Example output:\n-     * </p>\n+     * <p>Gets the Java version number as a <code>float</code>.</p>\n+     *\n+     * <p>Example return values:</p>\n      * <ul>\n-     * <li><code>1.2f</code> for JDK 1.2\n-     * <li><code>1.31f</code> for JDK 1.3.1\n+     *  <li><code>1.2f</code> for JDK 1.2\n+     *  <li><code>1.31f</code> for JDK 1.3.1\n      * </ul>\n      * \n-     * <p>\n-     * Patch releases are not reported. Zero is returned if JAVA_VERSION is <code>null</code>.\n-     * </p>\n+     * <p>Patch releases are not reported.\n+     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n      * \n      * @return the version, for example 1.31f for JDK 1.3.1\n      */\n     private float getJavaVersionAsFloat() {\n-        if (JAVA_VERSION == null) {\n+        if (JAVA_VERSION_TRIMMED == null) {\n             return 0f;\n         }\n-        String str = JAVA_VERSION.substring(0, 3);\n-        if (JAVA_VERSION.length() >= 5) {\n-            str = str + JAVA_VERSION.substring(4, 5);\n+        String str = JAVA_VERSION_TRIMMED.substring(0, 3);\n+        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n+            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n         }\n         return Float.parseFloat(str);\n     }\n \n     /**\n-     * <p>\n-     * Get the Java version number as an <code>int</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Example output:\n-     * </p>\n+     * <p>Gets the Java version number as an <code>int</code>.</p>\n+     *\n+     * <p>Example return values:</p>\n      * <ul>\n-     * <li><code>120</code> for JDK 1.2\n-     * <li><code>131</code> for JDK 1.3.1\n+     *  <li><code>120</code> for JDK 1.2\n+     *  <li><code>131</code> for JDK 1.3.1\n      * </ul>\n      * \n-     * <p>\n-     * Patch releases are not reported. Zero is returned if JAVA_VERSION is <code>null</code>.\n-     * </p>\n+     * <p>Patch releases are not reported.\n+     * Zero is returned if {@link #JAVA_VERSION_TRIMMED} is <code>null</code>.</p>\n      * \n      * @return the version, for example 131 for JDK 1.3.1\n      */\n         if (JAVA_VERSION == null) {\n             return 0;\n         }\n-        String str = JAVA_VERSION.substring(0, 1);\n-        str = str + JAVA_VERSION.substring(2, 3);\n-        if (JAVA_VERSION.length() >= 5) {\n-            str = str + JAVA_VERSION.substring(4, 5);\n+        String str = JAVA_VERSION_TRIMMED.substring(0, 1);\n+        str = str + JAVA_VERSION_TRIMMED.substring(2, 3);\n+        if (JAVA_VERSION_TRIMMED.length() >= 5) {\n+            str = str + JAVA_VERSION_TRIMMED.substring(4, 5);\n         } else {\n             str = str + \"0\";\n         }\n         return Integer.parseInt(str);\n+    }\n+\n+    /**\n+     * Trims the text of the java version to start with numbers.\n+     * \n+     * @return the trimmed java version\n+     */\n+    private String getJavaVersionTrimmed() {\n+        if (JAVA_VERSION != null) {\n+            for (int i = 0; i < JAVA_VERSION.length(); i++) {\n+                char ch = JAVA_VERSION.charAt(i);\n+                if (ch >= '0' && ch <= '9') {\n+                    return JAVA_VERSION.substring(i);\n+                }\n+            }\n+        }\n+        return null;\n     }\n \n     /**\n      * @return true if matches, or false if not or can't determine\n      */\n     private boolean getJavaVersionMatches(String versionPrefix) {\n-        if (JAVA_VERSION == null) {\n+        if (JAVA_VERSION_TRIMMED == null) {\n             return false;\n         }\n-        return JAVA_VERSION.startsWith(versionPrefix);\n+        return JAVA_VERSION_TRIMMED.startsWith(versionPrefix);\n     }\n \n     /**\n \n     public void testJavaVersionAsFloat() {\n         JAVA_VERSION = null;\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(0f, getJavaVersionAsFloat(), 0.000001f);\n         JAVA_VERSION = \"1.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(1.1f, getJavaVersionAsFloat(), 0.000001f);\n         JAVA_VERSION = \"1.2\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(1.2f, getJavaVersionAsFloat(), 0.000001f);\n         JAVA_VERSION = \"1.3.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(1.3f, getJavaVersionAsFloat(), 0.000001f);\n         JAVA_VERSION = \"1.3.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);\n         JAVA_VERSION = \"1.4.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(1.4f, getJavaVersionAsFloat(), 0.000001f);\n         JAVA_VERSION = \"1.4.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(1.41f, getJavaVersionAsFloat(), 0.000001f);\n         JAVA_VERSION = \"1.5.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(1.5f, getJavaVersionAsFloat(), 0.000001f);\n         JAVA_VERSION = \"1.6.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(1.6f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"JavaVM-1.3.1\";  //HP-UX\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);\n     }\n \n     public void testJavaVersionAsInt() {\n         JAVA_VERSION = null;\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(0, getJavaVersionAsInt());\n         JAVA_VERSION = \"1.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(110, getJavaVersionAsInt());\n         JAVA_VERSION = \"1.2\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(120, getJavaVersionAsInt());\n         JAVA_VERSION = \"1.3.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(130, getJavaVersionAsInt());\n         JAVA_VERSION = \"1.3.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(131, getJavaVersionAsInt());\n         JAVA_VERSION = \"1.4.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(140, getJavaVersionAsInt());\n         JAVA_VERSION = \"1.4.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(141, getJavaVersionAsInt());\n         JAVA_VERSION = \"1.5.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(150, getJavaVersionAsInt());\n         JAVA_VERSION = \"1.6.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(160, getJavaVersionAsInt());\n+        JAVA_VERSION = \"JavaVM-1.3.1\";  //HP-UX\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n+        assertEquals(131, getJavaVersionAsInt());\n     }\n \n     public void testJavaVersionAtLeastFloat() {\n     //-----------------------------------------------------------------------\n     public void testJavaVersionMatches() {\n         JAVA_VERSION = null;\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(false, getJavaVersionMatches(\"1.1\"));\n         assertEquals(false, getJavaVersionMatches(\"1.2\"));\n         assertEquals(false, getJavaVersionMatches(\"1.3\"));\n         assertEquals(false, getJavaVersionMatches(\"1.4\"));\n         assertEquals(false, getJavaVersionMatches(\"1.5\"));\n         JAVA_VERSION = \"1.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(true, getJavaVersionMatches(\"1.1\"));\n         assertEquals(false, getJavaVersionMatches(\"1.2\"));\n         assertEquals(false, getJavaVersionMatches(\"1.3\"));\n         assertEquals(false, getJavaVersionMatches(\"1.4\"));\n         assertEquals(false, getJavaVersionMatches(\"1.5\"));\n         JAVA_VERSION = \"1.2\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(false, getJavaVersionMatches(\"1.1\"));\n         assertEquals(true, getJavaVersionMatches(\"1.2\"));\n         assertEquals(false, getJavaVersionMatches(\"1.3\"));\n         assertEquals(false, getJavaVersionMatches(\"1.4\"));\n         assertEquals(false, getJavaVersionMatches(\"1.5\"));\n         JAVA_VERSION = \"1.3.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(false, getJavaVersionMatches(\"1.1\"));\n         assertEquals(false, getJavaVersionMatches(\"1.2\"));\n         assertEquals(true, getJavaVersionMatches(\"1.3\"));\n         assertEquals(false, getJavaVersionMatches(\"1.4\"));\n         assertEquals(false, getJavaVersionMatches(\"1.5\"));\n         JAVA_VERSION = \"1.3.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(false, getJavaVersionMatches(\"1.1\"));\n         assertEquals(false, getJavaVersionMatches(\"1.2\"));\n         assertEquals(true, getJavaVersionMatches(\"1.3\"));\n         assertEquals(false, getJavaVersionMatches(\"1.4\"));\n         assertEquals(false, getJavaVersionMatches(\"1.5\"));\n         JAVA_VERSION = \"1.4.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(false, getJavaVersionMatches(\"1.1\"));\n         assertEquals(false, getJavaVersionMatches(\"1.2\"));\n         assertEquals(false, getJavaVersionMatches(\"1.3\"));\n         assertEquals(true, getJavaVersionMatches(\"1.4\"));\n         assertEquals(false, getJavaVersionMatches(\"1.5\"));\n         JAVA_VERSION = \"1.4.1\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(false, getJavaVersionMatches(\"1.1\"));\n         assertEquals(false, getJavaVersionMatches(\"1.2\"));\n         assertEquals(false, getJavaVersionMatches(\"1.3\"));\n         assertEquals(true, getJavaVersionMatches(\"1.4\"));\n         assertEquals(false, getJavaVersionMatches(\"1.5\"));\n         JAVA_VERSION = \"1.5.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(false, getJavaVersionMatches(\"1.1\"));\n         assertEquals(false, getJavaVersionMatches(\"1.2\"));\n         assertEquals(false, getJavaVersionMatches(\"1.3\"));\n         assertEquals(false, getJavaVersionMatches(\"1.4\"));\n         assertEquals(true, getJavaVersionMatches(\"1.5\"));\n         JAVA_VERSION = \"1.6.0\";\n+        JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();\n         assertEquals(false, getJavaVersionMatches(\"1.1\"));\n         assertEquals(false, getJavaVersionMatches(\"1.2\"));\n         assertEquals(false, getJavaVersionMatches(\"1.3\"));", "timestamp": 1100220521, "metainfo": ""}