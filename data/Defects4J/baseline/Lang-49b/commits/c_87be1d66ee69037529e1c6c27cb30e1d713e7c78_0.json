{"sha": "87be1d66ee69037529e1c6c27cb30e1d713e7c78", "log": "Add BooleanUtils with lots of boolean conversions   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+/**\n+ * <p><code>BooleanUtils</code> contains utility methods for working for\n+ * boolean and Boolean objects.</p>\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: BooleanUtils.java,v 1.1 2002/12/15 16:55:32 scolebourne Exp $\n+ */\n+public class BooleanUtils {\n+\n+    /**\n+     * <p><code>BooleanUtils</code> instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as <code>BooleanUtils.toBooleanObject(true);</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n+     */\n+    public BooleanUtils() {\n+    }\n+\n+    // boolean Boolean methods\n+    //--------------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Boolean factory that avoids creating new Boolean objecs all the time.</p>\n+     * \n+     * <p>This method was added to JDK1.4 but is available here for earlier JDKs.</p>\n+     * \n+     * @param bool  the boolean to convert\n+     * @return Boolean.TRUE or Boolean.FALSE as appropriate\n+     */\n+    public static Boolean toBooleanObject(boolean bool) {\n+        return (bool ? Boolean.TRUE : Boolean.FALSE);\n+    }\n+    \n+    /**\n+     * <p>Converts a Boolean to a boolean handling null by returning false.</p>\n+     * \n+     * @param bool  the boolean to convert\n+     * @return true or false\n+     */\n+    public static boolean toBoolean(Boolean bool) {\n+        if (bool == null) {\n+            return false;\n+        }\n+        return (bool.booleanValue() ? true : false);\n+    }\n+    \n+    /**\n+     * <p>Converts a Boolean to a boolean handling null.</p>\n+     * \n+     * @param bool  the boolean to convert\n+     * @param valueIfNull  the boolean value to return if null\n+     * @return true or false\n+     */\n+    public static boolean toBooleanDefaultIfNull(Boolean bool, boolean valueIfNull) {\n+        if (bool == null) {\n+            return valueIfNull;\n+        }\n+        return (bool.booleanValue() ? true : false);\n+    }\n+    \n+    // Integer to Boolean methods\n+    //--------------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Convert an int to a boolean using the convention that zero is false.</p>\n+     * \n+     * @param value  the int to convert\n+     * @return true if non-zero, false if zero\n+     */\n+    public static boolean toBoolean(int value) {\n+        return (value == 0 ? false : true);\n+    }\n+    \n+    /**\n+     * <p>Convert an int to a Boolean using the convention that zero is false.</p>\n+     * \n+     * @param value  the int to convert\n+     * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero, null if null\n+     */\n+    public static Boolean toBooleanObject(int value) {\n+        return (value == 0 ? Boolean.FALSE : Boolean.TRUE);\n+    }\n+    \n+    /**\n+     * <p>Convert an Integer to a Boolean using the convention that zero is false.</p>\n+     * \n+     * <p>null will be converted to null.</p>\n+     * \n+     * @param value  the Integer to convert\n+     * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero, null if null\n+     */\n+    public static Boolean toBooleanObject(Integer value) {\n+        if (value == null) {\n+            return null;\n+        }\n+        return (value.intValue() == 0 ? Boolean.FALSE : Boolean.TRUE);\n+    }\n+    \n+    /**\n+     * <p>Convert an int to a boolean specifying the conversion values.</p>\n+     * \n+     * @param value  the Integer to convert\n+     * @param trueValue  the value to match for true\n+     * @param falseValue  the value to match for false\n+     * @return true or false\n+     * @throws IllegalArgumentException if no match\n+     */\n+    public static boolean toBoolean(int value, int trueValue, int falseValue) {\n+        if (value == trueValue) {\n+            return true;\n+        } else if (value == falseValue) {\n+            return false;\n+        }\n+        // no match\n+        throw new IllegalArgumentException(\"The Integer did not match either specified value\");\n+    }\n+    \n+    /**\n+     * <p>Convert an Integer to a boolean specifying the conversion values.</p>\n+     * \n+     * @param value  the Integer to convert\n+     * @param trueValue  the value to match for true, may be null\n+     * @param falseValue  the value to match for false, may be null\n+     * @return true or false\n+     * @throws IllegalArgumentException if no match\n+     */\n+    public static boolean toBoolean(Integer value, Integer trueValue, Integer falseValue) {\n+        if (value == null) {\n+            if (trueValue == null) {\n+                return true;\n+            } else if (falseValue == null) {\n+                return false;\n+            }\n+        } else if (value.equals(trueValue)) {\n+            return true;\n+        } else if (value.equals(falseValue)) {\n+            return false;\n+        }\n+        // no match\n+        throw new IllegalArgumentException(\"The Integer did not match either specified value\");\n+    }\n+    \n+    /**\n+     * <p>Convert an int to a Boolean specifying the conversion values.</p>\n+     * \n+     * @param value  the Integer to convert\n+     * @param trueValue  the value to match for true\n+     * @param falseValue  the value to match for false\n+     * @param nullValue  the value to to match for null\n+     * @return Boolean.TRUE, Boolean.FALSE, or null\n+     * @throws IllegalArgumentException if no match\n+     */\n+    public static Boolean toBooleanObject(int value, int trueValue, int falseValue, int nullValue) {\n+        if (value == trueValue) {\n+            return Boolean.TRUE;\n+        } else if (value == falseValue) {\n+            return Boolean.FALSE;\n+        } else if (value == nullValue) {\n+            return null;\n+        }\n+        // no match\n+        throw new IllegalArgumentException(\"The Integer did not match any specified value\");\n+    }\n+    \n+    /**\n+     * <p>Convert an Integer to a Boolean specifying the conversion values.</p>\n+     * \n+     * @param value  the Integer to convert\n+     * @param trueValue  the value to match for true, may be null\n+     * @param falseValue  the value to match for false, may be null\n+     * @param nullValue  the value to to match for null, may be null\n+     * @return Boolean.TRUE, Boolean.FALSE, or null\n+     * @throws IllegalArgumentException if no match\n+     */\n+    public static Boolean toBooleanObject(Integer value, Integer trueValue, Integer falseValue, Integer nullValue) {\n+        if (value == null) {\n+            if (trueValue == null) {\n+                return Boolean.TRUE;\n+            } else if (falseValue == null) {\n+                return Boolean.FALSE;\n+            } else if (nullValue == null) {\n+                return null;\n+            }\n+        } else if (value.equals(trueValue)) {\n+            return Boolean.TRUE;\n+        } else if (value.equals(falseValue)) {\n+            return Boolean.FALSE;\n+        } else if (value.equals(nullValue)) {\n+            return null;\n+        }\n+        // no match\n+        throw new IllegalArgumentException(\"The Integer did not match any specified value\");\n+    }\n+    \n+    // Boolean to Integer methods\n+    //--------------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Convert a boolean to an int using the convention that zero is false.</p>\n+     * \n+     * @param bool  the boolean to convert\n+     * @return one if true, zero if false\n+     */\n+    public static int toInteger(boolean bool) {\n+        return (bool ? 1 : 0);\n+    }\n+    \n+    /**\n+     * <p>Convert a boolean to an Integer using the convention that zero is false.</p>\n+     * \n+     * @param bool  the boolean to convert\n+     * @return one if true, zero if false\n+     */\n+    public static Integer toIntegerObject(boolean bool) {\n+        return (bool ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO);\n+    }\n+    \n+    /**\n+     * <p>Convert a Boolean to a Integer using the convention that zero is false.</p>\n+     * \n+     * <p>null will be converted to null.</p>\n+     * \n+     * @param bool  the Boolean to convert\n+     * @return one if Boolean.TRUE, zero if Boolean.FALSE, null if null\n+     */\n+    public static Integer toIntegerObject(Boolean bool) {\n+        if (bool == null) {\n+            return null;\n+        }\n+        return (bool.booleanValue() ? NumberUtils.INTEGER_ONE : NumberUtils.INTEGER_ZERO);\n+    }\n+    \n+    /**\n+     * <p>Convert a boolean to an int specifying the conversion values.</p>\n+     * \n+     * @param bool  the to convert\n+     * @param trueValue  the value to return if true\n+     * @param falseValue  the value to return if false\n+     * @param nullValue  the value to return if null\n+     * @return the appropriate value\n+     */\n+    public static int toInteger(boolean bool, int trueValue, int falseValue) {\n+        return (bool ? trueValue : falseValue);\n+    }\n+    \n+    /**\n+     * <p>Convert a Boolean to an int specifying the conversion values.</p>\n+     * \n+     * @param bool  the Boolean to convert\n+     * @param trueValue  the value to return if true\n+     * @param falseValue  the value to return if false\n+     * @param nullValue  the value to return if null\n+     * @return the appropriate value\n+     */\n+    public static int toInteger(Boolean bool, int trueValue, int falseValue, int nullValue) {\n+        if (bool == null) {\n+            return nullValue;\n+        }\n+        return (bool.booleanValue() ? trueValue : falseValue);\n+    }\n+    \n+    /**\n+     * <p>Convert a boolean to an Integer specifying the conversion values.</p>\n+     * \n+     * @param bool  the to convert\n+     * @param trueValue  the value to return if true, may be null\n+     * @param falseValue  the value to return if false, may be null\n+     * @param nullValue  the value to return if null, may be null\n+     * @return the appropriate value\n+     */\n+    public static Integer toIntegerObject(boolean bool, Integer trueValue, Integer falseValue) {\n+        return (bool ? trueValue : falseValue);\n+    }\n+    \n+    /**\n+     * <p>Convert a Boolean to an Integer specifying the conversion values.</p>\n+     * \n+     * @param bool  the Boolean to convert\n+     * @param trueValue  the value to return if true, may be null\n+     * @param falseValue  the value to return if false, may be null\n+     * @param nullValue  the value to return if null, may be null\n+     * @return the appropriate value\n+     */\n+    public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer falseValue, Integer nullValue) {\n+        if (bool == null) {\n+            return nullValue;\n+        }\n+        return (bool.booleanValue() ? trueValue : falseValue);\n+    }\n+    \n+    // String to Boolean methods\n+    //--------------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Converts a String to a Boolean.</p>\n+     * \n+     * <p>'true', 'on' or 'yes' (case insensitive) will return true.\n+     * 'false', 'off' or 'no' (case insensitive) will return false.\n+     * Otherwise, null is returned.</p>\n+     *\n+     * @param str  the String to check\n+     * @return the Boolean value of the string, null if no match or null input\n+     */\n+    public static Boolean toBooleanObject(String str) {\n+        if (\"true\".equalsIgnoreCase(str)) {\n+            return Boolean.TRUE;\n+        } else if (\"false\".equalsIgnoreCase(str)) {\n+            return Boolean.FALSE;\n+        } else if (\"on\".equalsIgnoreCase(str)) {\n+            return Boolean.TRUE;\n+        } else if (\"off\".equalsIgnoreCase(str)) {\n+            return Boolean.FALSE;\n+        } else if (\"yes\".equalsIgnoreCase(str)) {\n+            return Boolean.TRUE;\n+        } else if (\"no\".equalsIgnoreCase(str)) {\n+            return Boolean.FALSE;\n+        }\n+        // no match\n+        return null;\n+    }\n+\n+    /**\n+     * <p>Converts a String to a Boolean throwing an exception if no match.</p>\n+     *\n+     * @param str  the String to check\n+     * @param trueString  the String to match for true (case sensitive), may be null\n+     * @param falseString  the String to match for false (case sensitive), may be null\n+     * @param nullString  the String to match for null (case sensitive), may be null\n+     * @return the Boolean value of the string, null if no match or null input\n+     */\n+    public static Boolean toBooleanObject(String str, String trueString, String falseString, String nullString) {\n+        if (str == null) {\n+            if (trueString == null) {\n+                return Boolean.TRUE;\n+            } else if (falseString == null) {\n+                return Boolean.FALSE;\n+            } else if (nullString == null) {\n+                return null;\n+            }\n+        } else if (str.equals(trueString)) {\n+            return Boolean.TRUE;\n+        } else if (str.equals(falseString)) {\n+            return Boolean.FALSE;\n+        } else if (str.equals(nullString)) {\n+            return null;\n+        }\n+        // no match\n+        throw new IllegalArgumentException(\"The String did not match any specified value\");\n+    }\n+\n+    // String to boolean methods\n+    //--------------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Converts a String to a boolean.</p>\n+     * \n+     * <p>'true', 'on' or 'yes' (case insensitive) will return true.\n+     * Otherwise, false is returned.</p>\n+     *\n+     * @param str  the String to check\n+     * @return the boolean value of the string, false if no match\n+     */\n+    public static boolean toBoolean(String str) {\n+        if (\"true\".equalsIgnoreCase(str)) {\n+            return true;\n+        } else if (\"on\".equalsIgnoreCase(str)) {\n+            return true;\n+        } else if (\"yes\".equalsIgnoreCase(str)) {\n+            return true;\n+        }\n+        // no match\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Converts a String to a Boolean throwing an exception if no match found.</p>\n+     * \n+     * <p>null is returned if there is no match.</p>\n+     *\n+     * @param str  the String to check\n+     * @param trueString  the String to match for true (case sensitive), may be null\n+     * @param falseString  the String to match for false (case sensitive), may be null\n+     * @return the boolean value of the string\n+     * @throws IllegalArgumentException if the String doesn't match\n+     */\n+    public static boolean toBoolean(String str, String trueString, String falseString) {\n+        if (str == null) {\n+            if (trueString == null) {\n+                return true;\n+            } else if (falseString == null) {\n+                return false;\n+            }\n+        } else if (str.equals(trueString)) {\n+            return true;\n+        } else if (str.equals(falseString)) {\n+            return false;\n+        }\n+        // no match\n+        throw new IllegalArgumentException(\"The String did not match either specified value\");\n+    }\n+\n+    // Boolean to String methods\n+    //--------------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Converts a Boolean to a String returning 'true', 'false', or <code>null</code>.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @return 'true', 'false', or <code>null</code>\n+     */\n+    public static String toStringTrueFalse(Boolean bool) {\n+        return toString(bool, \"true\", \"false\", null);\n+    }\n+    \n+    /**\n+     * <p>Converts a Boolean to a String returning 'on', 'off', or <code>null</code>.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @return 'on', 'off', or <code>null</code>\n+     */\n+    public static String toStringOnOff(Boolean bool) {\n+        return toString(bool, \"on\", \"off\", null);\n+    }\n+    \n+    /**\n+     * <p>Converts a Boolean to a String returning 'yes', 'no', or <code>null</code>.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @return 'yes', 'no', or <code>null</code>\n+     */\n+    public static String toStringYesNo(Boolean bool) {\n+        return toString(bool, \"yes\", \"no\", null);\n+    }\n+    \n+    /**\n+     * <p>Converts a Boolean to a String returning one of the input Strings.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @param trueString  the String to return if true, may be null\n+     * @param falseString  the String to return if false, may be null\n+     * @param nullString  the String to return if null, may be null\n+     * @return one of the three input Strings\n+     */\n+    public static String toString(Boolean bool, String trueString, String falseString, String nullString) {\n+        if (bool == null) {\n+            return nullString;\n+        }\n+        return (bool.booleanValue() ? trueString : falseString);\n+    }\n+    \n+    // boolean to String methods\n+    //--------------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Converts a boolean to a String returning 'true' or 'false'.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @return 'true', 'false', or <code>null</code>\n+     */\n+    public static String toStringTrueFalse(boolean bool) {\n+        return toString(bool, \"true\", \"false\");\n+    }\n+    \n+    /**\n+     * <p>Converts a boolean to a String returning 'on' or 'off'.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @return 'on', 'off', or <code>null</code>\n+     */\n+    public static String toStringOnOff(boolean bool) {\n+        return toString(bool, \"on\", \"off\");\n+    }\n+    \n+    /**\n+     * <p>Converts a boolean to a String returning 'yes' or 'no'.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @return 'yes', 'no', or <code>null</code>\n+     */\n+    public static String toStringYesNo(boolean bool) {\n+        return toString(bool, \"yes\", \"no\");\n+    }\n+    \n+    /**\n+     * <p>Converts a boolean to a String returning one of the input Strings.</p>\n+     * \n+     * @param bool  the Boolean to check\n+     * @param trueString  the String to return if true, may be null\n+     * @param falseString  the String to return if false, may be null\n+     * @return one of the two input Strings\n+     */\n+    public static String toString(boolean bool, String trueString, String falseString) {\n+        return (bool ? trueString : falseString);\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/BooleanUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Unit tests {@link org.apache.commons.lang.BooleanUtils}.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: BooleanUtilsTest.java,v 1.1 2002/12/15 16:55:32 scolebourne Exp $\n+ */\n+public class BooleanUtilsTest extends TestCase {\n+\n+    public BooleanUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+    \tTestSuite suite = new TestSuite(BooleanUtilsTest.class);\n+    \tsuite.setName(\"BooleanUtils Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_toBooleanObject_boolean() {\n+        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject(true));\n+        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject(false));\n+    }\n+\n+    public void test_toBoolean_Boolean() {\n+        assertEquals(true, BooleanUtils.toBoolean(Boolean.TRUE));\n+        assertEquals(false, BooleanUtils.toBoolean(Boolean.FALSE));\n+        assertEquals(false, BooleanUtils.toBoolean((Boolean) null));\n+    }\n+\n+    public void test_toBooleanDefaultIfNull_Boolean_boolean() {\n+        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, true));\n+        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false));\n+        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true));\n+        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, false));\n+        assertEquals(true, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, true));\n+        assertEquals(false, BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void test_toBoolean_int() {\n+        assertEquals(true, BooleanUtils.toBoolean(1));\n+        assertEquals(true, BooleanUtils.toBoolean(-1));\n+        assertEquals(false, BooleanUtils.toBoolean(0));\n+    }\n+    \n+    public void test_toBooleanObject_int() {\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(1));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(-1));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(0));\n+    }\n+    \n+    public void test_toBooleanObject_Integer() {\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n+        assertEquals(null, BooleanUtils.toBooleanObject((Integer) null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_toBoolean_int_int_int() {\n+        assertEquals(true, BooleanUtils.toBoolean(6, 6, 7));\n+        assertEquals(false, BooleanUtils.toBoolean(7, 6, 7));\n+        try {\n+            BooleanUtils.toBoolean(8, 6, 7);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void test_toBoolean_Integer_Integer_Integer() {\n+        Integer six = new Integer(6);\n+        Integer seven = new Integer(7);\n+        assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n+        assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n+        try {\n+            BooleanUtils.toBoolean(new Integer(8), six, seven);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_toBooleanObject_int_int_int() {\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8));\n+        assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8));\n+        try {\n+            BooleanUtils.toBooleanObject(9, 6, 7, 8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void test_toBooleanObject_Integer_Integer_Integer() {\n+        Integer six = new Integer(6);\n+        Integer seven = new Integer(7);\n+        Integer eight = new Integer(8);\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n+        assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n+        try {\n+            BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_toInteger_boolean() {\n+        assertEquals(1, BooleanUtils.toInteger(true));\n+        assertEquals(0, BooleanUtils.toInteger(false));\n+    }\n+    \n+    public void test_toIntegerObject_boolean() {\n+        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n+        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(false));\n+    }\n+    \n+    public void test_toIntegerObject_Boolean() {\n+        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(Boolean.TRUE));\n+        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(Boolean.FALSE));\n+        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_toInteger_boolean_int_int() {\n+        assertEquals(6, BooleanUtils.toInteger(true, 6, 7));\n+        assertEquals(7, BooleanUtils.toInteger(false, 6, 7));\n+    }\n+    \n+    public void test_toInteger_Boolean_int_int_int() {\n+        assertEquals(6, BooleanUtils.toInteger(Boolean.TRUE, 6, 7, 8));\n+        assertEquals(7, BooleanUtils.toInteger(Boolean.FALSE, 6, 7, 8));\n+        assertEquals(8, BooleanUtils.toInteger(null, 6, 7, 8));\n+    }\n+    \n+    public void test_toIntegerObject_boolean_Integer_Integer() {\n+        Integer six = new Integer(6);\n+        Integer seven = new Integer(7);\n+        assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven));\n+        assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven));\n+    }\n+    \n+    public void test_toIntegerObject_Boolean_Integer_Integer_Integer() {\n+        Integer six = new Integer(6);\n+        Integer seven = new Integer(7);\n+        Integer eight = new Integer(8);\n+        assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight));\n+        assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight));\n+        assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight));\n+        assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void test_toBooleanObject_String() {\n+        assertEquals(null, BooleanUtils.toBooleanObject((String) null));\n+        assertEquals(null, BooleanUtils.toBooleanObject(\"\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"false\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"no\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"off\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"FALSE\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"NO\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"OFF\"));\n+        assertEquals(null, BooleanUtils.toBooleanObject(\"oof\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"true\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"yes\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"on\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TRUE\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"ON\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"YES\"));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"TruE\"));\n+    }\n+    \n+    public void test_toBooleanObject_String_String_String_String() {\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"Y\", \"Y\", \"N\", \"U\"));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"N\", \"Y\", \"N\", \"U\"));\n+        assertEquals(null, BooleanUtils.toBooleanObject(\"U\", \"Y\", \"N\", \"U\"));\n+        try {\n+            BooleanUtils.toBooleanObject(null, \"Y\", \"N\", \"U\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            BooleanUtils.toBooleanObject(\"X\", \"Y\", \"N\", \"U\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_toBoolean_String() {\n+        assertEquals(false, BooleanUtils.toBoolean((String) null));\n+        assertEquals(false, BooleanUtils.toBoolean(\"\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"off\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"oof\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"true\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"yes\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"on\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TRUE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"ON\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"YES\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TruE\"));\n+    }\n+\n+    public void test_toBoolean_String_String_String() {\n+        assertEquals(true, BooleanUtils.toBoolean(\"Y\", \"Y\", \"N\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"N\", \"Y\", \"N\"));\n+        try {\n+            BooleanUtils.toBoolean(null, \"Y\", \"N\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            BooleanUtils.toBoolean(\"X\", \"Y\", \"N\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_toStringTrueFalse_Boolean() {\n+        assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null));\n+        assertEquals(\"true\", BooleanUtils.toStringTrueFalse(Boolean.TRUE));\n+        assertEquals(\"false\", BooleanUtils.toStringTrueFalse(Boolean.FALSE));\n+    }\n+    \n+    public void test_toStringOnOff_Boolean() {\n+        assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null));\n+        assertEquals(\"on\", BooleanUtils.toStringOnOff(Boolean.TRUE));\n+        assertEquals(\"off\", BooleanUtils.toStringOnOff(Boolean.FALSE));\n+    }\n+    \n+    public void test_toStringYesNo_Boolean() {\n+        assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null));\n+        assertEquals(\"yes\", BooleanUtils.toStringYesNo(Boolean.TRUE));\n+        assertEquals(\"no\", BooleanUtils.toStringYesNo(Boolean.FALSE));\n+    }\n+    \n+    public void test_toString_Boolean_String_String_String() {\n+        assertEquals(\"U\", BooleanUtils.toString((Boolean) null, \"Y\", \"N\", \"U\"));\n+        assertEquals(\"Y\", BooleanUtils.toString(Boolean.TRUE, \"Y\", \"N\", \"U\"));\n+        assertEquals(\"N\", BooleanUtils.toString(Boolean.FALSE, \"Y\", \"N\", \"U\"));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_toStringTrueFalse_boolean() {\n+        assertEquals(\"true\", BooleanUtils.toStringTrueFalse(true));\n+        assertEquals(\"false\", BooleanUtils.toStringTrueFalse(false));\n+    }\n+    \n+    public void test_toStringOnOff_boolean() {\n+        assertEquals(\"on\", BooleanUtils.toStringOnOff(true));\n+        assertEquals(\"off\", BooleanUtils.toStringOnOff(false));\n+    }\n+    \n+    public void test_toStringYesNo_boolean() {\n+        assertEquals(\"yes\", BooleanUtils.toStringYesNo(true));\n+        assertEquals(\"no\", BooleanUtils.toStringYesNo(false));\n+    }\n+    \n+    public void test_toString_boolean_String_String_String() {\n+        assertEquals(\"Y\", BooleanUtils.toString(true, \"Y\", \"N\"));\n+        assertEquals(\"N\", BooleanUtils.toString(false, \"Y\", \"N\"));\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/lang/LangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/LangTestSuite.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: LangTestSuite.java,v 1.6 2002/12/13 17:21:56 scolebourne Exp $\n+ * @version $Id: LangTestSuite.java,v 1.7 2002/12/15 16:55:32 scolebourne Exp $\n  */\n public class LangTestSuite extends TestCase {\n     \n         TestSuite suite = new TestSuite();\n         suite.setName(\"Commons-Lang Tests\");\n         suite.addTest(ArrayUtilsTest.suite());\n+        suite.addTest(BooleanUtilsTest.suite());\n         suite.addTest(CharSetUtilsTest.suite());\n         suite.addTest(NumberRangeTest.suite());\n         suite.addTest(NumberUtilsTest.suite());", "timestamp": 1039971332, "metainfo": ""}