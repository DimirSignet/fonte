{"sha": "8ae0d1b674327cef9230399c193df581670cb3e7", "log": "overloaded addAll for all primitives   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @author Maarten Coene\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.50 2005/01/22 04:22:12 bayard Exp $\n+ * @version $Id: ArrayUtils.java,v 1.51 2005/01/27 06:43:20 bayard Exp $\n  */\n public class ArrayUtils {\n \n             return clone(array2);\n         } else if (array2 == null) {\n             return clone(array1);\n-        } else {\n-            Object[] joinedArray = (Object[]) Array.newInstance(array1.getClass().getComponentType(), array1.length\n-                + array2.length);\n-            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            return joinedArray;\n-        }\n+        }\n+        Object[] joinedArray = (Object[]) Array.newInstance(array1.getClass().getComponentType(),\n+                                                            array1.length + array2.length);\n+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        return joinedArray;\n+    }\n+\n+    /**\n+     * <p>Adds all the elements of the given arrays into a new array.</p>\n+     * <p>The new array contains all of the element of <code>array1</code> followed\n+     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * a new array.</p>\n+     *\n+     * <pre>\n+     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n+     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n+     * ArrayUtils.addAll([], [])         = []\n+     * </pre>\n+     *\n+     * @param array1  the first array whose elements are added to the new array.\n+     * @param array2  the second array whose elements are added to the new array.\n+     * @return The new boolean[] array.\n+     * @since 2.1\n+     */\n+    public static boolean[] addAll(boolean[] array1, boolean[] array2) {\n+        if (array1 == null) {\n+            return clone(array2);\n+        } else if (array2 == null) {\n+            return clone(array1);\n+        }\n+        boolean[] joinedArray = new boolean[array1.length + array2.length];\n+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        return joinedArray;\n+    }\n+\n+    /**\n+     * <p>Adds all the elements of the given arrays into a new array.</p>\n+     * <p>The new array contains all of the element of <code>array1</code> followed\n+     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * a new array.</p>\n+     *\n+     * <pre>\n+     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n+     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n+     * ArrayUtils.addAll([], [])         = []\n+     * </pre>\n+     *\n+     * @param array1  the first array whose elements are added to the new array.\n+     * @param array2  the second array whose elements are added to the new array.\n+     * @return The new char[] array.\n+     * @since 2.1\n+     */\n+    public static char[] addAll(char[] array1, char[] array2) {\n+        if (array1 == null) {\n+            return clone(array2);\n+        } else if (array2 == null) {\n+            return clone(array1);\n+        }\n+        char[] joinedArray = new char[array1.length + array2.length];\n+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        return joinedArray;\n+    }\n+\n+    /**\n+     * <p>Adds all the elements of the given arrays into a new array.</p>\n+     * <p>The new array contains all of the element of <code>array1</code> followed\n+     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * a new array.</p>\n+     *\n+     * <pre>\n+     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n+     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n+     * ArrayUtils.addAll([], [])         = []\n+     * </pre>\n+     *\n+     * @param array1  the first array whose elements are added to the new array.\n+     * @param array2  the second array whose elements are added to the new array.\n+     * @return The new byte[] array.\n+     * @since 2.1\n+     */\n+    public static byte[] addAll(byte[] array1, byte[] array2) {\n+        if (array1 == null) {\n+            return clone(array2);\n+        } else if (array2 == null) {\n+            return clone(array1);\n+        }\n+        byte[] joinedArray = new byte[array1.length + array2.length];\n+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        return joinedArray;\n+    }\n+\n+    /**\n+     * <p>Adds all the elements of the given arrays into a new array.</p>\n+     * <p>The new array contains all of the element of <code>array1</code> followed\n+     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * a new array.</p>\n+     *\n+     * <pre>\n+     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n+     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n+     * ArrayUtils.addAll([], [])         = []\n+     * </pre>\n+     *\n+     * @param array1  the first array whose elements are added to the new array.\n+     * @param array2  the second array whose elements are added to the new array.\n+     * @return The new short[] array.\n+     * @since 2.1\n+     */\n+    public static short[] addAll(short[] array1, short[] array2) {\n+        if (array1 == null) {\n+            return clone(array2);\n+        } else if (array2 == null) {\n+            return clone(array1);\n+        }\n+        short[] joinedArray = new short[array1.length + array2.length];\n+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        return joinedArray;\n+    }\n+\n+    /**\n+     * <p>Adds all the elements of the given arrays into a new array.</p>\n+     * <p>The new array contains all of the element of <code>array1</code> followed\n+     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * a new array.</p>\n+     *\n+     * <pre>\n+     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n+     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n+     * ArrayUtils.addAll([], [])         = []\n+     * </pre>\n+     *\n+     * @param array1  the first array whose elements are added to the new array.\n+     * @param array2  the second array whose elements are added to the new array.\n+     * @return The new int[] array.\n+     * @since 2.1\n+     */\n+    public static int[] addAll(int[] array1, int[] array2) {\n+        if (array1 == null) {\n+            return clone(array2);\n+        } else if (array2 == null) {\n+            return clone(array1);\n+        }\n+        int[] joinedArray = new int[array1.length + array2.length];\n+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        return joinedArray;\n+    }\n+\n+    /**\n+     * <p>Adds all the elements of the given arrays into a new array.</p>\n+     * <p>The new array contains all of the element of <code>array1</code> followed\n+     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * a new array.</p>\n+     *\n+     * <pre>\n+     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n+     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n+     * ArrayUtils.addAll([], [])         = []\n+     * </pre>\n+     *\n+     * @param array1  the first array whose elements are added to the new array.\n+     * @param array2  the second array whose elements are added to the new array.\n+     * @return The new long[] array.\n+     * @since 2.1\n+     */\n+    public static long[] addAll(long[] array1, long[] array2) {\n+        if (array1 == null) {\n+            return clone(array2);\n+        } else if (array2 == null) {\n+            return clone(array1);\n+        }\n+        long[] joinedArray = new long[array1.length + array2.length];\n+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        return joinedArray;\n+    }\n+\n+    /**\n+     * <p>Adds all the elements of the given arrays into a new array.</p>\n+     * <p>The new array contains all of the element of <code>array1</code> followed\n+     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * a new array.</p>\n+     *\n+     * <pre>\n+     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n+     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n+     * ArrayUtils.addAll([], [])         = []\n+     * </pre>\n+     *\n+     * @param array1  the first array whose elements are added to the new array.\n+     * @param array2  the second array whose elements are added to the new array.\n+     * @return The new float[] array.\n+     * @since 2.1\n+     */\n+    public static float[] addAll(float[] array1, float[] array2) {\n+        if (array1 == null) {\n+            return clone(array2);\n+        } else if (array2 == null) {\n+            return clone(array1);\n+        }\n+        float[] joinedArray = new float[array1.length + array2.length];\n+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        return joinedArray;\n+    }\n+\n+    /**\n+     * <p>Adds all the elements of the given arrays into a new array.</p>\n+     * <p>The new array contains all of the element of <code>array1</code> followed\n+     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * a new array.</p>\n+     *\n+     * <pre>\n+     * ArrayUtils.addAll(array1, null)   = cloned copy of array1\n+     * ArrayUtils.addAll(null, array2)   = cloned copy of array2\n+     * ArrayUtils.addAll([], [])         = []\n+     * </pre>\n+     *\n+     * @param array1  the first array whose elements are added to the new array.\n+     * @param array2  the second array whose elements are added to the new array.\n+     * @return The new double[] array.\n+     * @since 2.1\n+     */\n+    public static double[] addAll(double[] array1, double[] array2) {\n+        if (array1 == null) {\n+            return clone(array2);\n+        } else if (array2 == null) {\n+            return clone(array1);\n+        }\n+        double[] joinedArray = new double[array1.length + array2.length];\n+        System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+        System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+        return joinedArray;\n     }\n \n     /**\n--- a/src/test/org/apache/commons/lang/ArrayUtilsAddTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsAddTest.java\n  * Tests ArrayUtils add methods.\n  * \n  * @author Gary D. Gregory\n- * @version $Id: ArrayUtilsAddTest.java,v 1.5 2005/01/22 04:22:12 bayard Exp $\n+ * @version $Id: ArrayUtilsAddTest.java,v 1.6 2005/01/27 06:43:20 bayard Exp $\n  */\n public class ArrayUtilsAddTest extends TestCase {\n     public static void main(String[] args) {\n     }\n     \n     public void testAddObjectArrayToObjectArray() {\n-        assertNull(ArrayUtils.addAll(null, null));\n+        assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null));\n         Object[] newArray;\n         String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n         String[] stringArray2 = new String[]{\"1\", \"2\", \"3\"};\n         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);        \n         assertTrue(Arrays.equals((new String[]{null, null}), newArray));\n         assertEquals(String.class, newArray.getClass().getComponentType());\n+\n+        // boolean\n+        assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, \n+            ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) );\n+\n+        // char\n+        assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, \n+            ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) );\n+\n+        // byte\n+        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, \n+            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) );\n+\n+        // short\n+        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, \n+            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) );\n+\n+        // int\n+        assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, \n+            ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) );\n+\n+        // long\n+        assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, \n+            ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) );\n+\n+        // float\n+        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, \n+            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) );\n+\n+        // double\n+        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, \n+            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) );\n+\n     }    \n     \n     public void testAddObjectAtIndex() {", "timestamp": 1106808200, "metainfo": ""}