{"sha": "2efffe393caf942f01f72698d5abb3734b37c373", "log": "Rework isEmpty and isNotEmpty following user feedback   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.16 2003/07/19 20:17:12 scolebourne Exp $\n+ * @version $Id: ClassUtils.java,v 1.17 2003/07/19 21:55:05 scolebourne Exp $\n  */\n public class ClassUtils {\n \n      * @throws IllegalArgumentException if the className is empty\n      */\n     public static String getShortClassName(String className) {\n-        if (StringUtils.isEmptyOrNull(className)) {\n+        if (StringUtils.isEmpty(className)) {\n             throw new IllegalArgumentException(\"The class name must not be empty\");\n         }\n         char[] chars = className.toCharArray();\n      * @throws IllegalArgumentException if the className is empty\n      */\n     public static String getPackageName(String className) {\n-        if (StringUtils.isEmptyOrNull(className)) {\n+        if (StringUtils.isEmpty(className)) {\n             throw new IllegalArgumentException(\"The class name must not be empty\");\n         }\n         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.65 2003/07/19 18:09:33 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.66 2003/07/19 21:55:05 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     //-----------------------------------------------------------------------\n \n     /**\n-     * <p>Checks if a String is empty (\"\").\n+     * <p>Checks if a String is empty (\"\") or null.\n      * <code>null</code> returns <code>false</code></p>\n      * \n      * <pre>\n-     * StringUtils.isEmpty(null)      = false\n+     * StringUtils.isEmpty(null)      = true\n      * StringUtils.isEmpty(\"\")        = true\n      * StringUtils.isEmpty(\" \")       = false\n      * StringUtils.isEmpty(\"bob\")     = false\n      * </pre>\n      *\n      * <p>NOTE: This method changed in version 2.0.\n-     * It no longer trims the String, and null is no longer true.\n-     * That functionality is available in isEmptyTrimmedOrNull().</p>\n+     * It no longer trims the String.\n+     * That functionality is available in isBlank().</p>\n      * \n      * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is empty\n+     * @return <code>true</code> if the String is empty or null\n      */\n     public static boolean isEmpty(String str) {\n-        return (str != null && str.length() == 0);\n-    }\n-\n-    /**\n-     * <p>Checks if a String is not empty (\"\").\n-     * <code>null</code> returns <code>true</code></p>\n-     * \n-     * <pre>\n-     * StringUtils.isNotEmpty(null)      = true\n+        return (str == null || str.length() == 0);\n+    }\n+\n+    /**\n+     * <p>Checks if a String is not empty (\"\") and not null.</p>\n+     * \n+     * <pre>\n+     * StringUtils.isNotEmpty(null)      = false\n      * StringUtils.isNotEmpty(\"\")        = false\n      * StringUtils.isNotEmpty(\" \")       = true\n      * StringUtils.isNotEmpty(\"bob\")     = true\n      * StringUtils.isNotEmpty(\"  bob  \") = true\n      * </pre>\n      *\n-     * <p>NOTE: This method changed in version 2.0.\n-     * It no longer returns false for null.\n-     * That functionality is available in isNotEmptyOrNull().</p>\n-     * \n      * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is not empty\n+     * @return <code>true</code> if the String is not empty and not null\n      */\n     public static boolean isNotEmpty(String str) {\n-        return (str == null || str.length() > 0);\n-    }\n-\n-    /**\n-     * <p>Checks if a String is empty (\"\") or <code>null</code>.</p>\n-     * \n-     * <pre>\n-     * StringUtils.isEmptyOrNull(null)      = true\n-     * StringUtils.isEmptyOrNull(\"\")        = true\n-     * StringUtils.isEmptyOrNull(\" \")       = false\n-     * StringUtils.isEmptyOrNull(\"bob\")     = false\n-     * StringUtils.isEmptyOrNull(\"  bob  \") = false\n+        return (str != null && str.length() > 0);\n+    }\n+\n+    /**\n+     * <p>Checks if a String is whitespace, empty (\"\") or null.</p>\n+     * \n+     * <pre>\n+     * StringUtils.isBlank(null)      = true\n+     * StringUtils.isBlank(\"\")        = true\n+     * StringUtils.isBlank(\" \")       = true\n+     * StringUtils.isBlank(\"bob\")     = false\n+     * StringUtils.isBlank(\"  bob  \") = false\n      * </pre>\n      *\n      * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is empty or null\n-     */\n-    public static boolean isEmptyOrNull(String str) {\n-        return (str == null || str.length() == 0);\n-    }\n-\n-    /**\n-     * <p>Checks if a String is not not empty (\"\") and not <code>null</code>.</p>\n-     * \n-     * <pre>\n-     * StringUtils.isNotEmptyOrNull(null)      = false\n-     * StringUtils.isNotEmptyOrNull(\"\")        = false\n-     * StringUtils.isNotEmptyOrNull(\" \")       = true\n-     * StringUtils.isNotEmptyOrNull(\"bob\")     = true\n-     * StringUtils.isNotEmptyOrNull(\"  bob  \") = true\n+     * @return <code>true</code> if the String is null, empty or whitespace\n+     */\n+    public static boolean isBlank(String str) {\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return true;\n+        }\n+        for (int i = 0; i < strLen; i++) {\n+            if ((Character.isWhitespace(str.charAt(i)) == false) ) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks if a String is not empty (\"\") and not null.</p>\n+     * \n+     * <pre>\n+     * StringUtils.isNotBlank(null)      = false\n+     * StringUtils.isNotBlank(\"\")        = false\n+     * StringUtils.isNotBlank(\" \")       = false\n+     * StringUtils.isNotBlank(\"bob\")     = true\n+     * StringUtils.isNotBlank(\"  bob  \") = true\n      * </pre>\n      *\n      * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is neither empty nor null\n-     */\n-    public static boolean isNotEmptyOrNull(String str) {\n-        return (str != null && str.length() > 0);\n-    }\n-\n-    /**\n-     * <p>Checks if a trimmed String is empty (\"\").\n-     * <code>null</code> returns <code>false</code></p>\n-     * \n-     * <p>The String is trimmed using {@link String#trim()}.\n-     * Trim removes start and end characters &lt;= 32.</p>\n-     *\n-     * <pre>\n-     * StringUtils.isEmptyTrimmed(null)      = false\n-     * StringUtils.isEmptyTrimmed(\"\")        = true\n-     * StringUtils.isEmptyTrimmed(\" \")       = true\n-     * StringUtils.isEmptyTrimmed(\"bob\")     = false\n-     * StringUtils.isEmptyTrimmed(\"  bob  \") = false\n-     * </pre>\n-     *\n-     * @see java.lang.String#trim()\n-     * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is empty after trim()\n-     */\n-    public static boolean isEmptyTrimmed(String str) {\n-        return (str != null && str.trim().length() == 0);\n-    }\n-\n-    /**\n-     * <p>Checks if a trimmed String is not empty (\"\").</p>\n-     * <code>null</code> returns <code>true</code></p>\n-     * \n-     * <p>The String is trimmed using {@link String#trim()}.\n-     * Trim removes start and end characters &lt;= 32.</p>\n-     *\n-     * <pre>\n-     * StringUtils.isNotEmptyTrimmed(null)      = true\n-     * StringUtils.isNotEmptyTrimmed(\"\")        = false\n-     * StringUtils.isNotEmptyTrimmed(\" \")       = false\n-     * StringUtils.isNotEmptyTrimmed(\"bob\")     = true\n-     * StringUtils.isNotEmptyTrimmed(\"  bob  \") = true\n-     * </pre>\n-     *\n-     * @see java.lang.String#trim()\n-     * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is not empty after trim()\n-     */\n-    public static boolean isNotEmptyTrimmed(String str) {\n-        return (str == null || str.trim().length() > 0);\n-    }\n-\n-    /**\n-     * <p>Checks if a trimmed String is empty (\"\") or <code>null</code>.</p>\n-     * \n-     * <p>The String is trimmed using {@link String#trim()}.\n-     * Trim removes start and end characters &lt;= 32.</p>\n-     *\n-     * <pre>\n-     * StringUtils.isEmptyTrimmedOrNull(null)      = true\n-     * StringUtils.isEmptyTrimmedOrNull(\"\")        = true\n-     * StringUtils.isEmptyTrimmedOrNull(\" \")       = true\n-     * StringUtils.isEmptyTrimmedOrNull(\"bob\")     = false\n-     * StringUtils.isEmptyTrimmedOrNull(\"  bob  \") = false\n-     * </pre>\n-     *\n-     * @see java.lang.String#trim()\n-     * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is <code>null</code>\n-     *  or empty after trim()\n-     */\n-    public static boolean isEmptyTrimmedOrNull(String str) {\n-        return (str == null || str.trim().length() == 0);\n-    }\n-\n-    /**\n-     * <p>Checks if a trimmed String is not empty (\"\") and not <code>null</code>.</p>\n-     * \n-     * <p>The String is trimmed using {@link String#trim()}.\n-     * Trim removes start and end characters &lt;= 32.</p>\n-     *\n-     * <pre>\n-     * StringUtils.isNotEmptyTrimmedOrNull(null)      = false\n-     * StringUtils.isNotEmptyTrimmedOrNull(\"\")        = false\n-     * StringUtils.isNotEmptyTrimmedOrNull(\" \")       = false\n-     * StringUtils.isNotEmptyTrimmedOrNull(\"bob\")     = true\n-     * StringUtils.isNotEmptyTrimmedOrNull(\"  bob  \") = true\n-     * </pre>\n-     *\n-     * @see java.lang.String#trim()\n-     * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is not <code>null</code>\n-     *  and not empty after trim()\n-     */\n-    public static boolean isNotEmptyTrimmedOrNull(String str) {\n-        return (str != null && str.trim().length() > 0);\n+     * @return <code>true</code> if the String is \n+     *  not empty and not null and not whitespace\n+     */\n+    public static boolean isNotBlank(String str) {\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return false;\n+        }\n+        for (int i = 0; i < strLen; i++) {\n+            if ((Character.isWhitespace(str.charAt(i)) == false) ) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     // Equals\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n  * @author Chris Webb\n  * @author Mike Bowler\n  * @since 1.0\n- * @version $Id: Enum.java,v 1.13 2003/07/16 21:19:21 scolebourne Exp $\n+ * @version $Id: Enum.java,v 1.14 2003/07/19 21:55:04 scolebourne Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n     // After discussion, the default size for HashMaps is used, as the\n     protected Enum(String name) {\n         super();\n \n-        if (StringUtils.isEmptyOrNull(name)) {\n+        if (StringUtils.isEmpty(name)) {\n             throw new IllegalArgumentException(\"The Enum name must not be empty or null\");\n         }\n         iName = name;\n--- a/src/java/org/apache/commons/lang/reflect/ReflectionUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/ReflectionUtils.java\n  * reflection.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n- * @version $Id: ReflectionUtils.java,v 1.8 2003/07/16 21:19:22 scolebourne Exp $\n+ * @version $Id: ReflectionUtils.java,v 1.9 2003/07/19 21:55:05 scolebourne Exp $\n  */\n public class ReflectionUtils {\n     \n      * @throws IllegalArgumentException if the class name is empty\n      */\n     public static Class getClass(String className) throws ReflectionException {\n-        if (StringUtils.isEmptyOrNull(className)) {\n+        if (StringUtils.isEmpty(className)) {\n             throw new IllegalArgumentException(\"The class name must not be null\");\n         }\n         try {\n--- a/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: StringUtilsTrimEmptyTest.java,v 1.11 2003/07/19 18:10:30 scolebourne Exp $\n+ * @version $Id: StringUtilsTrimEmptyTest.java,v 1.12 2003/07/19 21:55:05 scolebourne Exp $\n  */\n public class StringUtilsTrimEmptyTest extends TestCase {\n     private static final String FOO = \"foo\";\n     }\n \n     public void testIsEmpty() {\n+        assertEquals(true, StringUtils.isEmpty(null));\n+        assertEquals(true, StringUtils.isEmpty(\"\"));\n+        assertEquals(false, StringUtils.isEmpty(\" \"));\n         assertEquals(false, StringUtils.isEmpty(\"foo\"));\n         assertEquals(false, StringUtils.isEmpty(\"  foo  \"));\n-        assertEquals(false, StringUtils.isEmpty(\" \"));\n-        assertEquals(true, StringUtils.isEmpty(\"\"));\n-        assertEquals(false, StringUtils.isEmpty(null));\n     }\n \n     public void testIsNotEmpty() {\n+        assertEquals(false, StringUtils.isNotEmpty(null));\n+        assertEquals(false, StringUtils.isNotEmpty(\"\"));\n+        assertEquals(true, StringUtils.isNotEmpty(\" \"));\n         assertEquals(true, StringUtils.isNotEmpty(\"foo\"));\n         assertEquals(true, StringUtils.isNotEmpty(\"  foo  \"));\n-        assertEquals(true, StringUtils.isNotEmpty(\" \"));\n-        assertEquals(false, StringUtils.isNotEmpty(\"\"));\n-        assertEquals(true, StringUtils.isNotEmpty(null));\n-    }\n-\n-    public void testIsEmptyOrNull() {\n-        assertEquals(false, StringUtils.isEmptyOrNull(\"foo\"));\n-        assertEquals(false, StringUtils.isEmptyOrNull(\"  foo  \"));\n-        assertEquals(false, StringUtils.isEmptyOrNull(\" \"));\n-        assertEquals(true, StringUtils.isEmptyOrNull(\"\"));\n-        assertEquals(true, StringUtils.isEmptyOrNull(null));\n-    }\n-\n-    public void testIsNotEmptyOrNull() {\n-        assertEquals(true, StringUtils.isNotEmptyOrNull(\"foo\"));\n-        assertEquals(true, StringUtils.isNotEmptyOrNull(\"  foo  \"));\n-        assertEquals(true, StringUtils.isNotEmptyOrNull(\" \"));\n-        assertEquals(false, StringUtils.isNotEmptyOrNull(\"\"));\n-        assertEquals(false, StringUtils.isNotEmptyOrNull(null));\n-    }\n-\n-    public void testIsEmptyTrimmed() {\n-        assertEquals(false, StringUtils.isEmptyTrimmed(\"foo\"));\n-        assertEquals(false, StringUtils.isEmptyTrimmed(\"  foo  \"));\n-        assertEquals(true, StringUtils.isEmptyTrimmed(\" \"));\n-        assertEquals(true, StringUtils.isEmptyTrimmed(\"\"));\n-        assertEquals(false, StringUtils.isEmptyTrimmed(null));\n-    }\n-\n-    public void testIsNotEmptyTrimmed() {\n-        assertEquals(true, StringUtils.isNotEmptyTrimmed(\"foo\"));\n-        assertEquals(true, StringUtils.isNotEmptyTrimmed(\"  foo  \"));\n-        assertEquals(false, StringUtils.isNotEmptyTrimmed(\" \"));\n-        assertEquals(false, StringUtils.isNotEmptyTrimmed(\"\"));\n-        assertEquals(true, StringUtils.isNotEmptyTrimmed(null));\n-    }\n-\n-    public void testIsEmptyTrimmedOrNull() {\n-        assertEquals(false, StringUtils.isEmptyTrimmedOrNull(\"foo\"));\n-        assertEquals(false, StringUtils.isEmptyTrimmedOrNull(\"  foo  \"));\n-        assertEquals(true, StringUtils.isEmptyTrimmedOrNull(\" \"));\n-        assertEquals(true, StringUtils.isEmptyTrimmedOrNull(\"\"));\n-        assertEquals(true, StringUtils.isEmptyTrimmedOrNull(null));\n-    }\n-\n-    public void testIsNotEmptyTrimmedOrNull() {\n-        assertEquals(true, StringUtils.isNotEmptyTrimmedOrNull(\"foo\"));\n-        assertEquals(true, StringUtils.isNotEmptyTrimmedOrNull(\"  foo  \"));\n-        assertEquals(false, StringUtils.isNotEmptyTrimmedOrNull(\" \"));\n-        assertEquals(false, StringUtils.isNotEmptyTrimmedOrNull(\"\"));\n-        assertEquals(false, StringUtils.isNotEmptyTrimmedOrNull(null));\n+    }\n+\n+    public void testIsBlank() {\n+        assertEquals(true, StringUtils.isBlank(null));\n+        assertEquals(true, StringUtils.isBlank(\"\"));\n+        assertEquals(true, StringUtils.isBlank(StringUtilsTest.WHITESPACE));\n+        assertEquals(false, StringUtils.isBlank(\"foo\"));\n+        assertEquals(false, StringUtils.isBlank(\"  foo  \"));\n+    }\n+\n+    public void testIsNotBlank() {\n+        assertEquals(false, StringUtils.isNotBlank(null));\n+        assertEquals(false, StringUtils.isNotBlank(\"\"));\n+        assertEquals(false, StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));\n+        assertEquals(true, StringUtils.isNotBlank(\"foo\"));\n+        assertEquals(true, StringUtils.isNotBlank(\"  foo  \"));\n     }\n \n     public void testDeleteSpace() {", "timestamp": 1058651705, "metainfo": ""}