{"sha": "29c4587f6b77f6c11b9974ed28001592c07458cb", "log": "I've finally worked out the oddball build and class loading issue that only seems to happen on Windows XP (SP2) since Simon reports that the ant build works fine for him on Linux.   I can report success with \"ant clean dist-build-2.1 test\" on Sun Java versions:  1.5.0_03 1.5.0_02 1.4.2_08 1.3.1_14  In order achieve this; the new build.xml depends on Ant 1.6.  Version 1.2.2_017 hangs miserably for me though, as it did before.   ", "commit": "\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n      * @return the resulting class loader\n      */\n     public static ClassLoader newSystemClassLoader() throws SecurityException, IllegalArgumentException {\n-        ClassLoader scl = ClassLoader.getSystemClassLoader();\n-        if (!(scl instanceof URLClassLoader)) {\n+        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();\n+        ClassLoader myClassLoader = ClassUtilsTest.class.getClassLoader();\n+        if (!(myClassLoader instanceof URLClassLoader)) {\n             fail(\"Need a better test set up.\");\n         }\n-        URLClassLoader urlScl = (URLClassLoader) scl;\n+        if (!(systemClassLoader instanceof URLClassLoader)) {\n+            fail(\"Need a better test set up.\");\n+        }\n+        if (!myClassLoader.equals(systemClassLoader)) {\n+            fail(\"Need a better test set up?\");            \n+        }\n+        URLClassLoader urlScl = (URLClassLoader) myClassLoader;\n         return URLClassLoader.newInstance(urlScl.getURLs(), null);\n     }\n \n--- a/src/test/org/apache/commons/lang/enum/EnumTest.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang.enum;\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+\n import org.apache.commons.lang.ClassUtilsTest;\n import org.apache.commons.lang.SerializationUtils;\n \n /**\n  * Test cases for the {@link Enum} class.\n- *\n+ * \n  * @author Stephen Colebourne\n  * @author Gary D. Gregory\n  * @version $Id$\n \n public final class EnumTest extends TestCase {\n \n+    private static final String ENUM_CLASS_NAME = \"org.apache.commons.lang.enum.ColorEnum\";\n+\n     public EnumTest(String name) {\n         super(name);\n     }\n         try {\n             ColorEnum.RED.compareTo(null);\n             fail();\n-        } catch (NullPointerException ex) {}\n+        } catch (NullPointerException ex) {\n+        }\n         try {\n             ColorEnum.RED.compareTo(new Object());\n             fail();\n-        } catch (ClassCastException ex) {}\n+        } catch (ClassCastException ex) {\n+        }\n     }\n \n     public void testEquals() {\n \n     public void testList() {\n         List list = new ArrayList(ColorEnum.getEnumList());\n-        \n+\n         assertNotNull(list);\n-        \n-        assertEquals( list.size(),\n-                        ColorEnum.getEnumMap().keySet().size());\n-        \n+\n+        assertEquals(list.size(), ColorEnum.getEnumMap().keySet().size());\n+\n         Iterator it = list.iterator();\n         assertSame(ColorEnum.RED, it.next());\n         assertSame(ColorEnum.GREEN, it.next());\n \n     public void testMap() {\n         Map map = new HashMap(ColorEnum.getEnumMap());\n-        \n+\n         assertNotNull(map);\n         assertTrue(map.containsValue(ColorEnum.RED));\n         assertTrue(map.containsValue(ColorEnum.GREEN));\n         assertSame(ColorEnum.RED, map.get(\"Red\"));\n         assertSame(ColorEnum.GREEN, map.get(\"Green\"));\n         assertSame(ColorEnum.BLUE, map.get(\"Blue\"));\n-        assertEquals( map.keySet().size(),\n-                        ColorEnum.getEnumList().size());\n+        assertEquals(map.keySet().size(), ColorEnum.getEnumList().size());\n     }\n \n     public void testGet() {\n         assertNotNull(list);\n         assertEquals(2, list.size());\n         assertEquals(list.size(), OperationEnum.getEnumMap().keySet().size());\n-        \n+\n         Iterator it = list.iterator();\n         assertSame(OperationEnum.PLUS, it.next());\n         assertSame(OperationEnum.MINUS, it.next());\n         Map map = OperationEnum.getEnumMap();\n         assertNotNull(map);\n         assertEquals(map.keySet().size(), OperationEnum.getEnumList().size());\n-        \n+\n         assertTrue(map.containsValue(OperationEnum.PLUS));\n         assertTrue(map.containsValue(OperationEnum.MINUS));\n         assertSame(OperationEnum.PLUS, map.get(\"Plus\"));\n         assertEquals(3, OperationEnum.PLUS.eval(1, 2));\n         assertEquals(-1, OperationEnum.MINUS.eval(1, 2));\n     }\n-    \n-    //-----------------------------------------------------------------------\n+\n+    // -----------------------------------------------------------------------\n     public void testExtended1Get() {\n         assertSame(Extended1Enum.ALPHA, Extended1Enum.getEnum(\"Alpha\"));\n         assertSame(Extended1Enum.BETA, Extended1Enum.getEnum(\"Beta\"));\n         assertSame(null, Extended1Enum.getEnum(\"Gamma\"));\n         assertSame(null, Extended1Enum.getEnum(\"Delta\"));\n     }\n-            \n+\n     public void testExtended2Get() {\n         assertSame(Extended1Enum.ALPHA, Extended2Enum.ALPHA);\n         assertSame(Extended1Enum.BETA, Extended2Enum.BETA);\n-        \n+\n         assertSame(Extended2Enum.ALPHA, Extended2Enum.getEnum(\"Alpha\"));\n         assertSame(Extended2Enum.BETA, Extended2Enum.getEnum(\"Beta\"));\n         assertSame(Extended2Enum.GAMMA, Extended2Enum.getEnum(\"Gamma\"));\n         assertSame(Extended2Enum.ALPHA, Extended3Enum.ALPHA);\n         assertSame(Extended2Enum.BETA, Extended3Enum.BETA);\n         assertSame(Extended2Enum.GAMMA, Extended3Enum.GAMMA);\n-        \n+\n         assertSame(Extended3Enum.ALPHA, Extended3Enum.getEnum(\"Alpha\"));\n         assertSame(Extended3Enum.BETA, Extended3Enum.getEnum(\"Beta\"));\n         assertSame(Extended3Enum.GAMMA, Extended3Enum.getEnum(\"Gamma\"));\n     public void testExtendedToString() {\n         assertEquals(\"Extended1Enum[Alpha]\", Extended1Enum.ALPHA.toString());\n         assertEquals(\"Extended1Enum[Beta]\", Extended1Enum.BETA.toString());\n-        \n+\n         assertEquals(\"Extended1Enum[Alpha]\", Extended2Enum.ALPHA.toString());\n         assertEquals(\"Extended1Enum[Beta]\", Extended2Enum.BETA.toString());\n         assertEquals(\"Extended2Enum[Gamma]\", Extended2Enum.GAMMA.toString());\n-        \n+\n         assertEquals(\"Extended1Enum[Alpha]\", Extended3Enum.ALPHA.toString());\n         assertEquals(\"Extended1Enum[Beta]\", Extended3Enum.BETA.toString());\n         assertEquals(\"Extended2Enum[Gamma]\", Extended3Enum.GAMMA.toString());\n         assertNotNull(list);\n         assertEquals(2, list.size());\n         assertEquals(list.size(), Extended1Enum.getEnumMap().keySet().size());\n-        \n+\n         Iterator it = list.iterator();\n         assertSame(Extended1Enum.ALPHA, it.next());\n         assertSame(Extended1Enum.BETA, it.next());\n         assertNotNull(list);\n         assertEquals(3, list.size());\n         assertEquals(list.size(), Extended2Enum.getEnumMap().keySet().size());\n-        \n+\n         Iterator it = list.iterator();\n         assertSame(Extended2Enum.ALPHA, it.next());\n         assertSame(Extended2Enum.BETA, it.next());\n         assertNotNull(list);\n         assertEquals(4, list.size());\n         assertEquals(list.size(), Extended3Enum.getEnumMap().keySet().size());\n-        \n+\n         Iterator it = list.iterator();\n         assertSame(Extended3Enum.ALPHA, it.next());\n         assertSame(Extended3Enum.BETA, it.next());\n         Map map = Extended1Enum.getEnumMap();\n         assertNotNull(map);\n         assertEquals(map.keySet().size(), Extended1Enum.getEnumList().size());\n-        \n+\n         assertTrue(map.containsValue(Extended1Enum.ALPHA));\n         assertTrue(map.containsValue(Extended1Enum.BETA));\n         assertSame(Extended1Enum.ALPHA, map.get(\"Alpha\"));\n         Map map = Extended2Enum.getEnumMap();\n         assertNotNull(map);\n         assertEquals(map.keySet().size(), Extended2Enum.getEnumList().size());\n-        \n+\n         assertTrue(map.containsValue(Extended2Enum.ALPHA));\n         assertTrue(map.containsValue(Extended2Enum.BETA));\n         assertTrue(map.containsValue(Extended2Enum.GAMMA));\n         Map map = Extended3Enum.getEnumMap();\n         assertNotNull(map);\n         assertEquals(map.keySet().size(), Extended3Enum.getEnumList().size());\n-        \n+\n         assertTrue(map.containsValue(Extended3Enum.ALPHA));\n         assertTrue(map.containsValue(Extended3Enum.BETA));\n         assertTrue(map.containsValue(Extended3Enum.GAMMA));\n         assertSame(Extended3Enum.DELTA, map.get(\"Delta\"));\n     }\n \n-    //-----------------------------------------------------------------------\n+    // -----------------------------------------------------------------------\n     public void testNested() {\n         List list = new ArrayList(Nest.ColorEnum.getEnumList());\n-        assertEquals(3, list.size());  // all is well\n+        assertEquals(3, list.size()); // all is well\n         Iterator it = list.iterator();\n         assertSame(Nest.ColorEnum.RED, it.next());\n         assertSame(Nest.ColorEnum.GREEN, it.next());\n     public void testNestedBroken() {\n         List list = new ArrayList(NestBroken.ColorEnum.getEnumList());\n         try {\n-            assertEquals(0, list.size());  // no enums!!! \n+            assertEquals(0, list.size()); // no enums!!!\n             // this is BROKEN because the enum constants are defined in a DIFFERENT\n             // class from getEnumList(). Once NestBroken class is referenced,\n             // and thus class loaded with its enum constants, the getEnumList works:\n         }\n         new NestBroken();\n         list = new ArrayList(NestBroken.ColorEnum.getEnumList());\n-        assertEquals(3, list.size());  // all is well!!!\n+        assertEquals(3, list.size()); // all is well!!!\n         Iterator it = list.iterator();\n         assertSame(NestBroken.RED, it.next());\n         assertSame(NestBroken.GREEN, it.next());\n \n     public void testNestedLinked() {\n         List list = new ArrayList(NestLinked.ColorEnum.getEnumList());\n-        assertEquals(3, list.size());  // all is well\n+        assertEquals(3, list.size()); // all is well\n         Iterator it = list.iterator();\n         assertSame(NestLinked.RED, it.next());\n         assertSame(NestLinked.GREEN, it.next());\n \n     public void testNestedReferenced() {\n         List list = new ArrayList(NestReferenced.ColorEnum.getEnumList());\n-        assertEquals(3, list.size());  // all is well\n+        assertEquals(3, list.size()); // all is well\n         Iterator it = list.iterator();\n         assertSame(NestReferenced.RED, it.next());\n         assertSame(NestReferenced.GREEN, it.next());\n         // the SAME class as the getEnumList(). The references in the outer class\n         // are just extra references.\n     }\n-    \n+\n     public void testColorEnumEqualsWithDifferentClassLoaders() throws SecurityException, IllegalArgumentException,\n             ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n         this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.BLUE);\n         // set up:\n         assertNotNull(classLoader);\n         assertFalse(classLoader.equals(ColorEnum.class.getClassLoader()));\n-        Class otherColorEnumClass = classLoader.loadClass(\"org.apache.commons.lang.enum.ColorEnum\");\n+        Class otherColorEnumClass = null;\n+        try {\n+            otherColorEnumClass = classLoader.loadClass(ENUM_CLASS_NAME);\n+        } catch (ClassNotFoundException e) {\n+            // Dump some information to help debug class loader issues under different JREs, Ant, Eclipse.\n+            System.err.println(\"Could not load \" + ENUM_CLASS_NAME + \" from the class loader \" + classLoader);\n+            URLClassLoader urlCl = (URLClassLoader) classLoader;\n+            URL[] urls = urlCl.getURLs();\n+            System.err.println(\"Class loader has \" + urls.length + \" URLs:\");\n+            for (int i = 0; i < urls.length; i++) {\n+                System.err.println(\"URL[\" + i + \"] = \" + urls[i]);\n+            }\n+            e.printStackTrace();\n+            throw e;\n+        }\n         assertNotNull(otherColorEnumClass);\n         assertNotNull(otherColorEnumClass.getClassLoader());\n         assertTrue(classLoader.equals(otherColorEnumClass.getClassLoader()));\n--- a/src/test/org/apache/commons/lang/enums/EnumTest.java\n+++ b/src/test/org/apache/commons/lang/enums/EnumTest.java\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n import junit.framework.TestSuite;\n import org.apache.commons.lang.ClassUtilsTest;\n import org.apache.commons.lang.SerializationUtils;\n+import org.apache.commons.lang.enum.ColorEnum;\n \n /**\n  * Test cases for the {@link Enum} class.\n  */\n \n public final class EnumTest extends TestCase {\n+\n+    private static final String ENUMS_CLASS_NAME = \"org.apache.commons.lang.enums.ColorEnum\";\n \n     public EnumTest(String name) {\n         super(name);\n         // set up:\n         assertNotNull(classLoader);\n         assertFalse(classLoader.equals(ColorEnum.class.getClassLoader()));\n-        Class otherColorEnumClass = classLoader.loadClass(\"org.apache.commons.lang.enums.ColorEnum\");\n+        Class otherColorEnumClass = null;\n+        try {\n+            otherColorEnumClass = classLoader.loadClass(ENUMS_CLASS_NAME);\n+        } catch (ClassNotFoundException e) {\n+            // Dump some information to help debug class loader issues under different JREs, Ant, Eclipse.\n+            System.err.println(\"Could not load \" + ENUMS_CLASS_NAME + \" from the class loader \" + classLoader);\n+            URLClassLoader urlCl = (URLClassLoader) classLoader;\n+            URL[] urls = urlCl.getURLs();\n+            System.err.println(\"Class loader has \" + urls.length + \" URLs:\");\n+            for (int i = 0; i < urls.length; i++) {\n+                System.err.println(\"URL[\" + i + \"] = \" + urls[i]);\n+            }\n+            e.printStackTrace();\n+            throw e;\n+        }\n         assertNotNull(otherColorEnumClass);\n         assertNotNull(otherColorEnumClass.getClassLoader());\n         assertTrue(classLoader.equals(otherColorEnumClass.getClassLoader()));", "timestamp": 1117561688, "metainfo": ""}