{"sha": "30a88df811879f5d389f56257c93ab5f740a0518", "log": "Don't collapse templated types in unions.  R=nicksantos DELTA=120  (119 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4967   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n   String toStringHelper(boolean forAnnotations) {\n     return super.toString();\n   }\n+\n+  @Override\n+  public boolean hasAnyTemplateInternal() {\n+    return returnType.hasAnyTemplate()\n+        || hasTemplatedParameterType();\n+  }\n+\n+  private boolean hasTemplatedParameterType() {\n+    if (parameters != null) {\n+      for (Node paramNode = parameters.getFirstChild();\n+           paramNode != null; paramNode = paramNode.getNext()) {\n+        JSType type = paramNode.getJSType();\n+        if (type != null && type.hasAnyTemplate()) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n }\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n     result.setPrototypeBasedOn(getInstanceType());\n     return result;\n   }\n+\n+  @Override\n+  public boolean hasAnyTemplateInternal() {\n+    return !getTemplateTypeNames().isEmpty()\n+        || typeOfThis.hasAnyTemplate()\n+        || call.hasAnyTemplate();\n+  }\n }\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n   private boolean resolved = false;\n   private JSType resolveResult = null;\n \n+  private boolean inTemplatedCheckVisit = false;\n+\n   public static final String UNKNOWN_NAME =\n       \"Unknown class name\";\n \n   }\n \n   public boolean isTemplateType() {\n+    return false;\n+  }\n+\n+  public boolean hasAnyTemplate() {\n+    if (!this.inTemplatedCheckVisit) {\n+      this.inTemplatedCheckVisit = true;\n+      boolean result = hasAnyTemplateInternal();\n+      this.inTemplatedCheckVisit = false;\n+      return result;\n+    } else {\n+      // prevent infinite recursion, this is \"not yet\".\n+      return false;\n+    }\n+  }\n+\n+  boolean hasAnyTemplateInternal() {\n     return false;\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n+++ b/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n   public <T> T visit(Visitor<T> visitor) {\n     return visitor.caseParameterizedType(this);\n   }\n+\n+  @Override\n+  public boolean hasAnyTemplateInternal() {\n+    return super.hasAnyTemplate() || parameterType.hasAnyTemplate();\n+  }\n }\n--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n   public void matchConstraint(ObjectType constraint) {\n     referencedType.matchConstraint(constraint);\n   }\n+\n+  @Override\n+  public boolean isTemplateType() {\n+    return referencedType.isTemplateType();\n+  }\n+\n+  @Override\n+  public boolean hasAnyTemplateInternal() {\n+    return referencedType.hasAnyTemplate();\n+  }\n }\n--- a/src/com/google/javascript/rhino/jstype/TemplateType.java\n+++ b/src/com/google/javascript/rhino/jstype/TemplateType.java\n   }\n \n   @Override\n+  public boolean hasAnyTemplateInternal() {\n+    return true;\n+  }\n+\n+  @Override\n   public <T> T visit(Visitor<T> visitor) {\n     return visitor.caseTemplateType(this);\n   }\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n       alternate.matchConstraint(constraintObj);\n     }\n   }\n+\n+  @Override\n+  public boolean hasAnyTemplateInternal() {\n+    for (JSType alternate : alternates) {\n+      if (alternate.hasAnyTemplate()) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n }\n--- a/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n           if (alternate.isUnknownType() ||\n               current.isUnknownType() ||\n               alternate.isNoResolvedType() ||\n-              current.isNoResolvedType()) {\n+              current.isNoResolvedType() ||\n+              alternate.hasAnyTemplate() ||\n+              current.hasAnyTemplate()) {\n             if (alternate.isEquivalentTo(current)) {\n               // Alternate is unnecessary.\n               return this;\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n             googBar));\n   }\n \n+  public void testIsTemplatedType() throws Exception {\n+    assertTrue(\n+        new TemplateType(registry, \"T\")\n+            .hasAnyTemplate());\n+    assertFalse(\n+        ARRAY_TYPE\n+            .hasAnyTemplate());\n+\n+    assertTrue(\n+        registry.createParameterizedType(\n+            ARRAY_TYPE, new TemplateType(registry, \"T\"))\n+            .hasAnyTemplate());\n+    assertFalse(\n+        registry.createParameterizedType(\n+            ARRAY_TYPE, STRING_TYPE)\n+            .hasAnyTemplate());\n+\n+    assertTrue(\n+        new FunctionBuilder(registry)\n+            .withReturnType(new TemplateType(registry, \"T\"))\n+            .build()\n+            .hasAnyTemplate());\n+    assertTrue(\n+        new FunctionBuilder(registry)\n+            .withTypeOfThis(new TemplateType(registry, \"T\"))\n+            .build()\n+            .hasAnyTemplate());\n+    assertFalse(\n+        new FunctionBuilder(registry)\n+            .withReturnType(STRING_TYPE)\n+            .build()\n+            .hasAnyTemplate());\n+\n+    assertTrue(\n+        registry.createUnionType(\n+            NULL_TYPE, new TemplateType(registry, \"T\"), STRING_TYPE)\n+            .hasAnyTemplate());\n+    assertFalse(\n+        registry.createUnionType(\n+            NULL_TYPE, ARRAY_TYPE, STRING_TYPE)\n+            .hasAnyTemplate());\n+  }\n+\n   private static boolean containsType(\n       Iterable<? extends JSType> types, JSType type) {\n     for (JSType alt : types) {", "timestamp": 1339095420, "metainfo": ""}