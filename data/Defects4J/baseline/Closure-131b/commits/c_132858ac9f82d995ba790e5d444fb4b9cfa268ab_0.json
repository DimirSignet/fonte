{"sha": "132858ac9f82d995ba790e5d444fb4b9cfa268ab", "log": "fix a bug in the parameterized subtype relation  R=johnlenz   Revision created by MOE tool push_codebase. MOE_MIGRATION=6038   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n+++ b/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n       JSType thisParameter = this.parameterType;\n       JSType thatParameter = thatType.toMaybeParameterizedType().parameterType;\n       // Currently, there is no way to declare a parameterized type so we have\n-      // no way to determine if the type parameters are in anyway related so\n-      // we disallow any subtype relationship between parameterized types.\n-      // This seems appropriate for \"Array.<X>\" and \"Object.<X>\" which are the\n-      // two parameterized types we recognize without a formal declaration.\n-      return this.wrapsSameRawType(thatType)\n-          && (thisParameter.isSubtype(thatParameter)\n-              || thatParameter.isSubtype(thisParameter));\n-    } else {\n-      return this.getReferencedTypeInternal().isSubtype(thatType);\n+      // no way to determine if the type parameters are in anyway related.\n+      //\n+      // Right now we fallback to the raw type relationship if the raw types\n+      // are different. This is not great, and we'll figure out a better\n+      // solution later.\n+      if (this.wrapsSameRawType(thatType)) {\n+        return (thisParameter.isSubtype(thatParameter)\n+            || thatParameter.isSubtype(thisParameter));\n+      }\n     }\n+\n+    return this.getReferencedTypeInternal().isSubtype(thatType);\n   }\n \n   boolean wrapsSameRawType(JSType that) {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"required: (Array.<number>|null)\");\n   }\n \n+  public void testParameterized5() throws Exception {\n+    testTypes(\n+        \"/**\\n\" +\n+        \" * @param {Object.<T>} obj\\n\" +\n+        \" * @return {boolean|undefined}\\n\" +\n+        \" * @template T\\n\" +\n+        \" */\\n\" +\n+        \"var some = function(obj) {\" +\n+        \"  for (var key in obj) if (obj[key]) return true;\" +\n+        \"};\" +\n+        \"/** @return {!Array} */ function f() { return []; }\" +\n+        \"/** @return {!Array.<string>} */ function g() { return []; }\" +\n+        \"some(f());\\n\" +\n+        \"some(g());\\n\");\n+  }\n+\n   public void testParameterizedTypeSubtypes2() throws Exception {\n     JSType arrayOfNumber = createParameterizedType(\n         ARRAY_TYPE, NUMBER_TYPE);\n--- a/test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java\n         ARRAY_TYPE, UNKNOWN_TYPE);\n     assertEquals(\"Array.<?>\", arrOfUnknown.toString());\n   }\n+\n+  public void testDifferentRawTypes() throws Exception {\n+    ParameterizedType arrOfNumber = createParameterizedType(\n+        ARRAY_TYPE, NUMBER_TYPE);\n+    ParameterizedType objType = createParameterizedType(\n+        OBJECT_TYPE, UNKNOWN_TYPE);\n+    assertTrue(arrOfNumber.isSubtype(objType));\n+    assertFalse(objType.isSubtype(arrOfNumber));\n+  }\n }", "timestamp": 1356122601, "metainfo": ""}