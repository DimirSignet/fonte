{"sha": "37672b931498dab108693e7c19c59824faf8c3c9", "log": "Adds a method to export module dependencies as JSON.  Enables output of individual module compilation units for modules derived from CommonJS based input files if the flag --module=auto is given to the binary.  Introduces a virtual root-module for all common JS derived modules which every module depends on, to make the module graph happy. Fixes issue 764  R=nicksantos,johnlenz DELTA=239  (229 added, 1 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5635   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.Set;\n-import java.util.Map.Entry;\n import java.util.logging.Level;\n \n /**\n   static DependencyOptions createDependencyOptions(\n       boolean manageClosureDependencies,\n       boolean onlyClosureDependencies,\n+      boolean processCommonJSModules,\n       List<String> closureEntryPoints)\n       throws FlagUsageException {\n     if (onlyClosureDependencies) {\n           .setDependencySorting(true)\n           .setMoocherDropping(true)\n           .setEntryPoints(closureEntryPoints);\n-    } else if (manageClosureDependencies ||\n+    } else if (processCommonJSModules) {\n+      return new DependencyOptions()\n+        .setDependencyPruning(false)\n+        .setDependencySorting(true)\n+        .setMoocherDropping(false)\n+        .setEntryPoints(closureEntryPoints);\n+    }\n+    else if (manageClosureDependencies ||\n         closureEntryPoints.size() > 0) {\n       return new DependencyOptions()\n           .setDependencyPruning(true)\n     DependencyOptions depOptions = createDependencyOptions(\n         config.manageClosureDependencies,\n         config.onlyClosureDependencies,\n+        config.processCommonJSModules,\n         config.closureEntryPoints);\n     if (depOptions != null) {\n       options.setDependencyOptions(depOptions);\n \n     List<String> jsFiles = config.js;\n     List<String> moduleSpecs = config.module;\n+\n+    boolean createCommonJsModules = false;\n+    if (options.processCommonJSModules) {\n+      if (moduleSpecs.size() == 1 && \"auto\".equals(moduleSpecs.get(0))) {\n+        createCommonJsModules = true;\n+        moduleSpecs.remove(0);\n+      }\n+    }\n     if (!moduleSpecs.isEmpty()) {\n       modules = createJsModules(moduleSpecs, jsFiles);\n       if (config.skipNormalOutputs) {\n       } else {\n         result = compiler.compile(externs, inputs, options);\n       }\n+    }\n+    if (createCommonJsModules) {\n+      // For CommonJS modules construct modules from actual inputs.\n+      modules = Lists.newArrayList(compiler.getDegenerateModuleGraph()\n+          .getAllModules());\n     }\n \n     int errCode = processResults(result, modules, options);\n       // Output the manifest and bundle files if requested.\n       outputManifest();\n       outputBundle();\n+      outputModuleGraphJson();\n       return 0;\n     } else if (result.success) {\n+      outputModuleGraphJson();\n       if (modules == null) {\n         writeOutput(\n             jsOutput, compiler, compiler.toSource(), config.outputWrapper,\n   }\n \n   /**\n+   * Creates a file containing the current module graph in JSON serialization.\n+   */\n+  private void outputModuleGraphJson() throws IOException {\n+    if (config.outputModuleDependencies != null &&\n+        config.outputModuleDependencies != \"\") {\n+      Writer out = fileNameToOutputWriter2(config.outputModuleDependencies);\n+      printModuleGraphJsonTo(compiler.getDegenerateModuleGraph(), out);\n+      out.close();\n+    }\n+  }\n+\n+  /**\n+   * Prints the current module graph as JSON.\n+   */\n+  @VisibleForTesting\n+  void printModuleGraphJsonTo(JSModuleGraph graph,\n+      Appendable out) throws IOException {\n+    out.append(compiler.getDegenerateModuleGraph().toJson().toString());\n+  }\n+\n+  /**\n    * Prints a set of modules to the manifest or bundle file.\n    */\n   @VisibleForTesting\n       return this;\n     }\n \n+    private String outputModuleDependencies = null;\n+\n+    /**\n+     * Sets whether a JSON file representing the dependencies between modules\n+     * should be created.\n+     */\n+    CommandLineConfig setOutputModuleDependencies(String\n+        outputModuleDependencies) {\n+      this.outputModuleDependencies = outputModuleDependencies;\n+      return this;\n+    }\n+\n     private List<String> outputBundles = ImmutableList.of();\n \n     /**\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n         + \"unique. Each dep is the name of a module that this module \"\n         + \"depends on. Modules must be listed in dependency order, and JS \"\n         + \"source files must be listed in the corresponding order. Where \"\n-        + \"--module flags occur in relation to --js flags is unimportant\")\n+        + \"--module flags occur in relation to --js flags is unimportant. \"\n+        + \"Provide the value 'auto' to trigger module creation from CommonJS\"\n+        + \"modules.\")\n     private List<String> module = Lists.newArrayList();\n \n     @Option(name = \"--variable_map_input_file\",\n         + \"If you're using modularization, using %outname% will create \"\n         + \"a manifest for each module.\")\n     private String output_manifest = \"\";\n+\n+    @Option(name = \"--output_module_dependencies\",\n+        usage = \"Prints out a JSON file of dependencies between modules.\")\n+    private String output_module_dependencies = \"\";\n \n     @Option(name = \"--accept_const_keyword\",\n         usage = \"Allows usage of const keyword.\")\n           .setOnlyClosureDependencies(flags.only_closure_dependencies)\n           .setClosureEntryPoints(flags.closure_entry_point)\n           .setOutputManifest(ImmutableList.of(flags.output_manifest))\n+          .setOutputModuleDependencies(flags.output_module_dependencies)\n           .setAcceptConstKeyword(flags.accept_const_keyword)\n           .setLanguageIn(flags.language_in)\n           .setProcessCommonJSModules(flags.process_common_js_modules)\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n import com.google.javascript.jscomp.CompilerOptions.LanguageMode;\n import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection;\n import com.google.javascript.jscomp.Scope.Var;\n+import com.google.javascript.jscomp.deps.SortedDependencies;\n import com.google.javascript.jscomp.deps.SortedDependencies.CircularDependencyException;\n import com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException;\n import com.google.javascript.jscomp.parsing.Config;\n             options.dependencyOptions, inputs)) {\n           modules.add(modulesByInput.get(input));\n         }\n+        JSModule root = new JSModule(\"root\");\n+        for (JSModule m : modules) {\n+          m.addDependency(root);\n+        }\n+        modules.add(0, root);\n+        SortedDependencies<JSModule> sorter =\n+          new SortedDependencies<JSModule>(modules);\n+        modules = sorter.getDependenciesOf(modules, true);\n         this.modules = modules;\n+\n         this.moduleGraph = new JSModuleGraph(modules);\n       } catch (Exception e) {\n         Throwables.propagate(e);\n--- a/src/com/google/javascript/jscomp/JSModuleGraph.java\n+++ b/src/com/google/javascript/jscomp/JSModuleGraph.java\n package com.google.javascript.jscomp;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.LinkedHashMultimap;\n import java.util.Set;\n import java.util.TreeSet;\n \n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n /**\n  * A {@link JSModule} dependency graph that assigns a depth to each module and\n  * can answer depth-related queries about them. For the purposes of this class,\n    */\n   JSModule getRootModule() {\n     return Iterables.getOnlyElement(modulesByDepth.get(0));\n+  }\n+\n+  /**\n+   * Returns a JSON representation of the JSModuleGraph. Specifically a\n+   * JSONArray of \"Modules\" where each module has a\n+   * - \"name\"\n+   * - \"dependencies\" (list of module names)\n+   * - \"transitive-dependencies\" (list of module names, deepest first)\n+   * - \"inputs\" (list of file names)\n+   * @return List of module JSONObjects.\n+   */\n+  JSONArray toJson() {\n+    JSONArray modules = new JSONArray();\n+    for (JSModule module : getAllModules()) {\n+      JSONObject node = new JSONObject();\n+      try {\n+        node.put(\"name\", module.getName());\n+        JSONArray deps = new JSONArray();\n+        node.put(\"dependencies\", deps);\n+        for (JSModule m : module.getDependencies()) {\n+          deps.put(m.getName());\n+        }\n+        JSONArray transitiveDeps = new JSONArray();\n+        node.put(\"transitive-dependencies\", transitiveDeps);\n+        for (JSModule m : getTransitiveDepsDeepestFirst(module)) {\n+          transitiveDeps.put(m.getName());\n+        }\n+        JSONArray inputs = new JSONArray();\n+        node.put(\"inputs\", inputs);\n+        for (CompilerInput input : module.getInputs()) {\n+          inputs.put(input.getSourceFile().getOriginalPath());\n+        }\n+        modules.put(node);\n+      } catch (JSONException e) {\n+        Throwables.propagate(e);\n+      }\n+    }\n+    return modules;\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n         builder.toString());\n   }\n \n+  public void testOutputModuleGraphJson() throws Exception {\n+    useModules = ModulePattern.STAR;\n+    testSame(new String[] {\n+        \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n+\n+    StringBuilder builder = new StringBuilder();\n+    lastCommandLineRunner.printModuleGraphJsonTo(\n+        lastCompiler.getModuleGraph(), builder);\n+    assertTrue(builder.toString().indexOf(\"transitive-dependencies\") != -1);\n+  }\n+\n   public void testVersionFlag() {\n     args.add(\"--version\");\n     testSame(\"\");\n   }\n \n   public void testProcessCJS() {\n+    useStringComparison = true;\n     args.add(\"--process_common_js_modules\");\n     args.add(\"--common_js_entry_module=foo/bar\");\n     setFilename(0, \"foo/bar.js\");\n+    String expected = \"var module$foo$bar={test:1};\";\n+    test(\"exports.test = 1\", expected);\n+    assertEquals(expected + \"\\n\", outReader.toString());\n+  }\n+\n+  public void testProcessCJSWithModuleOutput() {\n+    useStringComparison = true;\n+    args.add(\"--process_common_js_modules\");\n+    args.add(\"--common_js_entry_module=foo/bar\");\n+    args.add(\"--module=auto\");\n+    setFilename(0, \"foo/bar.js\");\n     test(\"exports.test = 1\",\n         \"var module$foo$bar={test:1};\");\n+    // With modules=auto no direct output is created.\n+    assertEquals(\"\", outReader.toString());\n   }\n \n   public void testTransformAMDAndProcessCJS() {\n+    useStringComparison = true;\n     args.add(\"--transform_amd_modules\");\n     args.add(\"--process_common_js_modules\");\n     args.add(\"--common_js_entry_module=foo/bar\");\n     setFilename(0, \"foo/bar.js\");\n     test(\"define({foo: 1})\",\n-        \"var module$foo$bar={}, module$foo$bar={foo:1};\");\n+        \"var module$foo$bar={},module$foo$bar={foo:1};\");\n+  }\n+\n+  public void testModuleJSON() {\n+    useStringComparison = true;\n+    args.add(\"--transform_amd_modules\");\n+    args.add(\"--process_common_js_modules\");\n+    args.add(\"--common_js_entry_module=foo/bar\");\n+    args.add(\"--output_module_dependencies=test.json\");\n+    setFilename(0, \"foo/bar.js\");\n+    test(\"define({foo: 1})\",\n+        \"var module$foo$bar={},module$foo$bar={foo:1};\");\n   }\n \n   /* Helper functions */\n--- a/test/com/google/javascript/jscomp/CompilerTest.java\n+++ b/test/com/google/javascript/jscomp/CompilerTest.java\n \n     Compiler compiler = initCompilerForCommonJS(inputs, entryPoints);\n     JSModuleGraph graph = compiler.getModuleGraph();\n-    assertEquals(graph.getModuleCount(), 3);\n+    assertEquals(4, graph.getModuleCount());\n     List<CompilerInput> result = graph.manageDependencies(entryPoints,\n         compiler.getInputsForTesting());\n-    assertEquals(\"[module$tonic]\", result.get(0).getName());\n-    assertEquals(\"[module$gin]\", result.get(1).getName());\n-    assertEquals(\"tonic.js\", result.get(2).getName());\n-    assertEquals(\"gin.js\", result.get(3).getName());\n-    assertEquals(\"mix.js\", result.get(4).getName());\n+    assertEquals(\"[root]\", result.get(0).getName());\n+    assertEquals(\"[module$tonic]\", result.get(1).getName());\n+    assertEquals(\"[module$gin]\", result.get(2).getName());\n+    assertEquals(\"tonic.js\", result.get(3).getName());\n+    assertEquals(\"gin.js\", result.get(4).getName());\n+    assertEquals(\"mix.js\", result.get(5).getName());\n   }\n \n   public void testCommonJSMissingRequire() throws Exception {\n--- a/test/com/google/javascript/jscomp/JSModuleGraphTest.java\n+++ b/test/com/google/javascript/jscomp/JSModuleGraphTest.java\n import junit.framework.*;\n \n import java.util.*;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n \n /**\n  * Tests for {@link JSModuleGraph}\n     assertTrue(results.isEmpty());\n   }\n \n+  public void testToJson() throws JSONException {\n+    JSONArray modules = graph.toJson();\n+    assertEquals(6, modules.length());\n+    for (int i = 0; i < modules.length(); i++) {\n+      JSONObject m = modules.getJSONObject(i);\n+      assertNotNull(m.getString(\"name\"));\n+      assertNotNull(m.getJSONArray(\"dependencies\"));\n+      assertNotNull(m.getJSONArray(\"transitive-dependencies\"));\n+      assertNotNull(m.getJSONArray(\"inputs\"));\n+    }\n+    JSONObject m = modules.getJSONObject(3);\n+    assertEquals(\"D\", m.getString(\"name\"));\n+    assertEquals(\"[\\\"B\\\"]\", m.getJSONArray(\"dependencies\").toString());\n+    assertEquals(2,\n+        m.getJSONArray(\"transitive-dependencies\").length());\n+    assertEquals(\"[]\", m.getJSONArray(\"inputs\").toString());\n+  }\n+\n   private List<CompilerInput> setUpManageDependenciesTest() {\n     List<CompilerInput> inputs = Lists.newArrayList();\n \n--- a/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessCommonJSModulesTest.java\n  */\n \n package com.google.javascript.jscomp;\n+\n+import java.util.List;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.Lists;\n \n /**\n  * Unit tests for {@link ProcessCommonJSModules}\n     assertEquals(\"module$bar$baz\",\n         pass.guessCJSModuleName(\"foo\\\\bar\\\\baz.js\"));\n   }\n+\n+  public void testSortInputs() throws Exception {\n+    SourceFile a = SourceFile.fromCode(\"a.js\",\n+            \"require('b');require('c')\");\n+    SourceFile b = SourceFile.fromCode(\"b.js\",\n+            \"require('d')\");\n+    SourceFile c = SourceFile.fromCode(\"c.js\",\n+            \"require('d')\");\n+    SourceFile d = SourceFile.fromCode(\"d.js\", \"1;\");\n+\n+    assertSortedInputs(\n+        ImmutableList.of(d, b, c, a),\n+        ImmutableList.of(a, b, c, d));\n+    assertSortedInputs(\n+        ImmutableList.of(d, b, c, a),\n+        ImmutableList.of(d, b, c, a));\n+    assertSortedInputs(\n+        ImmutableList.of(d, c, b, a),\n+        ImmutableList.of(d, c, b, a));\n+    assertSortedInputs(\n+        ImmutableList.of(d, b, c, a),\n+        ImmutableList.of(d, a, b, c));\n+  }\n+\n+  private void assertSortedInputs(\n+      List<SourceFile> expected, List<SourceFile> shuffled)\n+      throws Exception {\n+    Compiler compiler = new Compiler(System.err);\n+    compiler.initCompilerOptionsIfTesting();\n+    compiler.getOptions().setProcessCommonJSModules(true);\n+    compiler.getOptions().dependencyOptions.setEntryPoints(\n+        Lists.newArrayList(ProcessCommonJSModules.toModuleName(\"a\")));\n+    compiler.compile(Lists.newArrayList(SourceFile.fromCode(\"externs.js\", \"\")),\n+        shuffled, compiler.getOptions());\n+\n+    List<SourceFile> result = Lists.newArrayList();\n+    for (JSModule m : compiler.getModuleGraph().getAllModules()) {\n+      for (CompilerInput i : m.getInputs()) {\n+        result.add(i.getSourceFile());\n+      }\n+    }\n+\n+    assertEquals(expected, result);\n+  }\n }", "timestamp": 1350039248, "metainfo": ""}