{"sha": "1369e98d3d3b130b4677959b570b00ecbcb85cc3", "log": "Small improvement to UnreachableCodeElimination.  R=dcc DELTA=39  (35 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=88003   ", "commit": "\n--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\n+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.common.base.Predicate;\n import com.google.javascript.jscomp.ControlFlowGraph.Branch;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;\n import com.google.javascript.jscomp.graph.GraphReachability;\n import com.google.javascript.jscomp.graph.GraphNode;\n+import com.google.javascript.jscomp.graph.GraphReachability.EdgeTuple;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n     cfgStack.push(curCfg);\n     curCfg = cfa.getCfg();\n \n-    new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg)\n-        .compute(curCfg.getEntry().getValue());\n+    new GraphReachability<Node, ControlFlowGraph.Branch>(\n+        curCfg, new ReachablePredicate()).compute(curCfg.getEntry().getValue());\n   }\n \n   @Override\n     }\n     NodeUtil.removeChild(parent, n);\n   }\n-}\n+  \n+  private final class ReachablePredicate implements\n+      Predicate<EdgeTuple<Node, ControlFlowGraph.Branch>> {\n+\n+    @Override\n+    public boolean apply(EdgeTuple<Node, Branch> input) {\n+      Branch branch = input.edge;\n+      if (!branch.isConditional()) {\n+        return true;\n+      }\n+      Node predecessor = input.sourceNode;\n+      Node condition = NodeUtil.getConditionExpression(predecessor);\n+  \n+      // TODO(user): Handle more complicated expression like true == true,\n+      // etc....\n+      if (condition != null && NodeUtil.isImmutableValue(condition)) {\n+        return NodeUtil.getBooleanValue(condition).toBoolean(true) ==\n+            (branch == Branch.ON_TRUE);\n+      }\n+      return true;\n+    }\n+  }\n+}\n--- a/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java\n+++ b/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java\n   }\n \n   public void testConditionalDeadCode() {\n-    test(\"function f() { if (1) return; else return; x = 1}\",\n-        \"function f() { if (1) return; else return; }\");\n+    test(\"function f() { if (x) return; else return; x = 1}\",\n+        \"function f() { if (x) return; else return; }\");\n+  }\n+\n+  public void testKnownIf() {\n+    test(\"if(0) {alert(1)}\", \"\");\n+    test(\"if(0) if(0) {{alert(1)}}\", \"\");\n+  }\n+\n+  public void testKnownWhile() {\n+    // TODO(user): Improve elimination method to clean these up.\n+    test(\"while(0) {alert(1)}\", \"while(0);\");\n+    test(\"while(0) while(0) {{alert(1)}}\", \"while(0);\");\n   }\n \n   public void testSwitchCase() {", "timestamp": 1280951461, "metainfo": ""}