{"sha": "de684ba3efacbeb36f741eb8ed1598cf34df7783", "log": "dereference all qualified names, not just simple ones Fixes issue 483  R=acleung DELTA=41  (30 added, 3 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2680   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n                   iterKeyType = narrowedKeyType;\n                 }\n               }\n-              redeclare(informed, item.getString(), iterKeyType);\n+              redeclareSimpleVar(informed, item, iterKeyType);\n             }\n             newScope = informed;\n             break;\n     Node name = n.getFirstChild();\n     JSType type = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n     name.setJSType(type);\n-    redeclare(scope, name.getString(), type);\n+    redeclareSimpleVar(scope, name, type);\n     return scope;\n   }\n \n         //    which is just wrong. This bug needs to be fixed eventually.\n         boolean isVarDeclaration = left.hasChildren();\n         if (!isVarDeclaration || var == null || var.isTypeInferred()) {\n-          redeclare(scope, varName, resultType);\n+          redeclareSimpleVar(scope, left, resultType);\n         }\n         left.setJSType(isVarDeclaration || leftType == null ?\n             resultType : null);\n         JSType type = getJSType(assertedNode);\n         JSType narrowed = type.restrictByNotNullOrUndefined();\n         if (type != narrowed) {\n-          scope = scope.createChildFlowScope();\n-          redeclare(scope, assertedNodeName, narrowed);\n+          scope = narrowScope(scope, assertedNode, narrowed);\n           callNode.setJSType(narrowed);\n         }\n       } else if (assertedNode.getType() == Token.AND ||\n       JSType type = getJSType(assertedNode);\n       JSType narrowed = type.getGreatestSubtype(getNativeType(assertedType));\n       if (type != narrowed) {\n-        scope = scope.createChildFlowScope();\n-        redeclare(scope, assertedNodeName, narrowed);\n+        scope = narrowScope(scope, assertedNode, narrowed);\n         callNode.setJSType(narrowed);\n       }\n+    }\n+    return scope;\n+  }\n+\n+  private FlowScope narrowScope(FlowScope scope, Node node, JSType narrowed) {\n+    scope = scope.createChildFlowScope();\n+    if (node.getType() == Token.GETPROP) {\n+      scope.inferQualifiedSlot(\n+          node.getQualifiedName(), getNativeType(UNKNOWN_TYPE), narrowed);\n+    } else {\n+      redeclareSimpleVar(scope, node, narrowed);\n     }\n     return scope;\n   }\n    * null or undefined.\n    */\n   private FlowScope dereferencePointer(Node n, FlowScope scope) {\n-    if (n.getType() == Token.NAME) {\n+    if (n.isQualifiedName()) {\n       JSType type = getJSType(n);\n       JSType narrowed = type.restrictByNotNullOrUndefined();\n       if (type != narrowed) {\n-        scope = scope.createChildFlowScope();\n-        redeclare(scope, n.getString(), narrowed);\n+        scope = narrowScope(scope, n, narrowed);\n       }\n     }\n     return scope;\n         flowScope, flowScope);\n   }\n \n-  private void redeclare(FlowScope scope, String varName, JSType varType) {\n+  private void redeclareSimpleVar(\n+      FlowScope scope, Node nameNode, JSType varType) {\n+    Preconditions.checkState(nameNode.getType() == Token.NAME);\n+    String varName = nameNode.getString();\n     if (varType == null) {\n       varType = getNativeType(JSTypeNative.UNKNOWN_TYPE);\n     }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"var list = /** @type {!Array.<string>} */ ['hello', 'you'];\\n\" +\n         \"list.push('?');\\n\" +\n         \"document.getElementById('node').innerHTML = list.toString();\");\n+  }\n+\n+  public void testIssue483() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function C() {\" +\n+        \"  /** @type {?Array} */ this.a = [];\" +\n+        \"}\" +\n+        \"C.prototype.f = function() {\" +\n+        \"  if (this.a.length > 0) {\" +\n+        \"    g(this.a);\" +\n+        \"  }\" +\n+        \"};\" +\n+        \"/** @param {number} a */ function g(a) {}\",\n+        \"actual parameter 1 of g does not match formal parameter\\n\" +\n+        \"found   : Array\\n\" +\n+        \"required: number\");\n   }\n \n   /**", "timestamp": 1311116970, "metainfo": ""}