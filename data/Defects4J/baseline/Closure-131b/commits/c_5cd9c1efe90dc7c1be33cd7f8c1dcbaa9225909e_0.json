{"sha": "5cd9c1efe90dc7c1be33cd7f8c1dcbaa9225909e", "log": "Introduce a new life cycle stage, NORMALIZED_OBFUSCATED  R=johnlenz DELTA=52  (37 added, 5 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=160   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCompiler.java\n+++ b/src/com/google/javascript/jscomp/AbstractCompiler.java\n \n   static enum LifeCycleStage {\n     RAW,\n-    NORMALIZED;\n+\n+    // See constraints put on the tree by Normalize.java\n+    NORMALIZED,\n+\n+    // The normalize pass has put constraints on the tree,\n+    // but variables and properties have been renamed so\n+    // coding conventions no longer apply.\n+    NORMALIZED_OBFUSCATED;\n \n     boolean isNormalized() {\n+      return this == NORMALIZED || this == NORMALIZED_OBFUSCATED;\n+    }\n+\n+    boolean isNormalizedUnobfuscated() {\n       return this == NORMALIZED;\n+    }\n+\n+    boolean isNormalizedObfuscated() {\n+      return this == NORMALIZED_OBFUSCATED;\n     }\n   }\n }\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n     new PropagateConstantAnnotationsOverVars(compiler, assertOnChange)\n         .process(externs, root);\n \n-    compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);\n+    if (!compiler.getLifeCycleStage().isNormalized()) {\n+      compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED);\n+    }\n   }\n \n   /**\n         case Token.STRING:\n         case Token.GET:\n         case Token.SET:\n-          annotateConstantsByConvention(n, parent);\n+          if (!compiler.getLifeCycleStage().isNormalizedObfuscated()) {\n+            annotateConstantsByConvention(n, parent);\n+          }\n           break;\n       }\n     }\n--- a/src/com/google/javascript/jscomp/RenameProperties.java\n+++ b/src/com/google/javascript/jscomp/RenameProperties.java\n \n package com.google.javascript.jscomp;\n \n-import javax.annotation.Nullable;\n import com.google.common.base.Preconditions;\n+import com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n import java.util.*;\n \n+import javax.annotation.Nullable;\n \n /**\n  * RenameProperties renames properties (including methods) of all Javascript\n \n   @Override\n   public void process(Node externs, Node root) {\n+    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n+\n     NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n     NodeTraversal.traverse(compiler, root, new ProcessProperties());\n \n     if (changed) {\n       compiler.reportCodeChange();\n     }\n+\n+    compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/RenamePrototypes.java\n+++ b/src/com/google/javascript/jscomp/RenamePrototypes.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.common.base.Preconditions;\n+import com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n-import javax.annotation.Nullable;\n \n import java.util.Arrays;\n import java.util.Comparator;\n import java.util.SortedSet;\n import java.util.TreeSet;\n \n+import javax.annotation.Nullable;\n+\n /**\n  * RenamePrototypes renames custom properties (including methods) of custom\n  * prototypes and object literals. Externed property names are never renamed.\n    * @param root The root of the main code parse tree\n    */\n   public void process(Node externs, Node root) {\n+    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n+\n     NodeTraversal.traverse(compiler, externs,\n                            new ProcessExternedProperties());\n     NodeTraversal.traverse(compiler, root, new ProcessProperties());\n     if (changed) {\n       compiler.reportCodeChange();\n     }\n+\n+    compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/SanityCheck.java\n+++ b/src/com/google/javascript/jscomp/SanityCheck.java\n \n     String source2 = compiler.toSource(root2);\n     if (!source.equals(source2)) {\n-      compiler.report(JSError.make(GENERATED_BAD_CODE,\n-              Strings.truncateAtMaxLength(source, 1000, true),\n-              Strings.truncateAtMaxLength(source2, 1000, true)));\n+      compiler.report(JSError.make(GENERATED_BAD_CODE, source, source2));\n \n       // Throw an exception, so that the infrastructure will tell us\n       // which pass violated the sanity check.\n     if (compiler.getLifeCycleStage().isNormalized()) {\n       (new Normalize(compiler, true)).process(externs, root);\n \n-      boolean checkUserDeclarations = true;\n-      CompilerPass pass = new Normalize.VerifyConstants(\n-          compiler, checkUserDeclarations);\n-      pass.process(externs, root);\n+      if (compiler.getLifeCycleStage().isNormalizedUnobfuscated()) {\n+        boolean checkUserDeclarations = true;\n+        CompilerPass pass = new Normalize.VerifyConstants(\n+            compiler, checkUserDeclarations);\n+        pass.process(externs, root);\n+      }\n     }\n \n     compiler.removeChangeHandler(handler);\n--- a/test/com/google/javascript/jscomp/RenamePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/RenamePropertiesTest.java\n \n   public RenamePropertiesTest() {\n     super(EXTERNS);\n+    enableNormalize();\n   }\n \n   @Override\n   }\n \n   public void testRemoveRenameFunctionStubs2() {\n-    test(\"function() { function JSCompiler_renameProperty(x) {} }\" +\n-         \"var JSCompiler_renameProperty = function(x) { return x; }; \" +\n+    test(\"function JSCompiler_renameProperty(x) { return x; }\" +\n          \"var foo = {myProp: 0}; f(foo[JSCompiler_renameProperty('myProp')]);\",\n-         \"function() {} var foo = {a: 0}; f(foo['a']);\");\n+         \"var foo = {a: 0}; f(foo['a']);\");\n   }\n \n   public void testGeneratePseudoNames() {\n--- a/test/com/google/javascript/jscomp/RenamePrototypesTest.java\n+++ b/test/com/google/javascript/jscomp/RenamePrototypesTest.java\n \n   public RenamePrototypesTest() {\n     super(EXTERNS);\n+    enableNormalize();\n   }\n \n   @Override", "timestamp": 1292601310, "metainfo": ""}