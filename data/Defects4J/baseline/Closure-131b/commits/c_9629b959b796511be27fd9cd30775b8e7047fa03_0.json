{"sha": "9629b959b796511be27fd9cd30775b8e7047fa03", "log": "add new detail to whitelists  R=mknichel   Revision created by MOE tool push_codebase. MOE_MIGRATION=5382   ", "commit": "\n--- a/src/com/google/javascript/jscomp/WhitelistWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/WhitelistWarningsGuard.java\n package com.google.javascript.jscomp;\n \n import com.google.common.base.Charsets;\n+import com.google.common.base.Joiner;\n import com.google.common.base.Preconditions;\n import com.google.common.base.Splitter;\n import com.google.common.collect.ImmutableList;\n     private final Set<JSError> warnings = Sets.newLinkedHashSet();\n     private String productName = null;\n     private String generatorTarget = null;\n+    private String headerNote = null;\n \n     /** Fill in your product name to get a fun message! */\n     public WhitelistBuilder setProductName(String name) {\n     /** Fill in instructions on how to generate this whitelist. */\n     public WhitelistBuilder setGeneratorTarget(String name) {\n       this.generatorTarget = name;\n+      return this;\n+    }\n+\n+    /** A note to include at the top of the whitelist file. */\n+    public WhitelistBuilder setNote(String note) {\n+      this.headerNote  = note;\n       return this;\n     }\n \n         out.append(\"# When you fix any of these warnings, run \"\n             + generatorTarget + \" task.\\n\");\n       }\n+      \n+      if (headerNote != null) {\n+        out.append(\"# \"\n+            + Joiner.on(\"\\n# \").join(Splitter.on(\"\\n\").split(headerNote))\n+            + \"\\n\");\n+      }\n \n       Multimap<DiagnosticType, String> warningsByType = TreeMultimap.create();\n       for (JSError warning : warnings) {", "timestamp": 1345155313, "metainfo": ""}