{"sha": "7d5af6c478fc06d685a7afd9acfec41c3de3b7bc", "log": "Add determinism checking regression test.  R=acleung,nicksantos DELTA=226 (154 added, 57 deleted, 15 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6153   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     if (options.devMode == DevMode.EVERY_PASS) {\n       phaseOptimizer.setSanityCheck(sanityCheck);\n     }\n+    if (options.checkDeterminism) {\n+      phaseOptimizer.setPrintAstHashcodes(true);\n+    }\n     phaseOptimizer.consume(getPassConfig().getChecks());\n     phaseOptimizer.process(externsRoot, jsRoot);\n     if (hasErrors()) {\n     if (options.devMode == DevMode.EVERY_PASS) {\n       phaseOptimizer.setSanityCheck(sanityCheck);\n     }\n+    if (options.checkDeterminism) {\n+      phaseOptimizer.setPrintAstHashcodes(true);\n+    }\n     phaseOptimizer.consume(getPassConfig().getOptimizations());\n     phaseOptimizer.process(externsRoot, jsRoot);\n   }\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n    */\n   DevMode devMode;\n \n+  /**\n+   * Configures the compiler to log a hash code of the AST after\n+   * every pass. Only intended for internal development.\n+   */\n+  public boolean checkDeterminism;\n+\n   //--------------------------------\n   // Input Options\n   //--------------------------------\n     skipAllPasses = false;\n     nameAnonymousFunctionsOnly = false;\n     devMode = DevMode.OFF;\n+    checkDeterminism = false;\n     checkSymbols = false;\n     aggressiveVarCheck = CheckLevel.OFF;\n     checkSuspiciousCode = false;\n--- a/src/com/google/javascript/jscomp/PhaseOptimizer.java\n+++ b/src/com/google/javascript/jscomp/PhaseOptimizer.java\n   private Tracer currentTracer = null;\n   private String currentPassName = null;\n   private PassFactory sanityCheck = null;\n+  private boolean printAstHashcodes = false;\n \n   private double progress = 0.0;\n   private double progressStep = 0.0;\n   }\n \n   /**\n+   * Sets the hashcode of the AST to be logged every pass. Intended for development.\n+   */\n+  void setPrintAstHashcodes(boolean printAstHashcodes) {\n+    this.printAstHashcodes = printAstHashcodes;\n+  }\n+\n+  /**\n    * Run all the passes in the optimizer.\n    */\n   @Override\n       currentPassName = null;\n       currentTracer = null;\n \n+      maybePrintAstHashcodes(passToCheck, root);\n       maybeSanityCheck(externs, root);\n     } catch (Exception e) {\n       // TODO(johnlenz): Remove this once the normalization checks report\n       // errors instead of exceptions.\n       throw new RuntimeException(\"Sanity check failed for \" + passToCheck, e);\n+    }\n+  }\n+\n+  private void maybePrintAstHashcodes(String passName, Node root) {\n+    if (printAstHashcodes) {\n+      String hashCodeMsg = \"AST hashCode after \" + passName + \": \" +\n+          compiler.toSource(root).hashCode();\n+      System.err.println(hashCodeMsg);\n+      compiler.addToDebugLog(hashCodeMsg);\n     }\n   }\n ", "timestamp": 1358444552, "metainfo": ""}