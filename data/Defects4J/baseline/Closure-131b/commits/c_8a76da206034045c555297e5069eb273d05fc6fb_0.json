{"sha": "8a76da206034045c555297e5069eb273d05fc6fb", "log": "Update visibility of some JSType classes to allow cleaner integration of tools to the AST.  R=johnlenz,nicksantos DELTA=132  (131 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=97   ", "commit": "\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n  * {@link JSDocInfoBuilder} which provides early incompatibility detection.</p>\n  *\n  */\n-public final class JSDocInfo implements Serializable {\n+public class JSDocInfo implements Serializable {\n   private static final long serialVersionUID = 1L;\n \n   /**\n--- a/src/com/google/javascript/rhino/jstype/AllType.java\n+++ b/src/com/google/javascript/rhino/jstype/AllType.java\n   }\n \n   @Override\n+  public String getDisplayName() {\n+    return \"<Any Type>\";\n+  }\n+\n+  @Override\n+  public boolean hasDisplayName() {\n+    return true;\n+  }\n+\n+  @Override\n   public <T> T visit(Visitor<T> visitor) {\n     return visitor.caseAllType();\n   }\n--- a/src/com/google/javascript/rhino/jstype/BooleanType.java\n+++ b/src/com/google/javascript/rhino/jstype/BooleanType.java\n \n   @Override\n   public String toString() {\n+    return getDisplayName();\n+  }\n+\n+  @Override\n+  public String getDisplayName() {\n     return \"boolean\";\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/EnumType.java\n+++ b/src/com/google/javascript/rhino/jstype/EnumType.java\n   }\n \n   @Override\n+  public String getDisplayName() {\n+    return elementsType.getDisplayName();\n+  }\n+\n+  @Override\n   public <T> T visit(Visitor<T> visitor) {\n     return visitor.caseObjectType(this);\n   }\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n    */\n   public JSDocInfo getJSDocInfo() {\n     return null;\n+  }\n+\n+  /**\n+   * Returns a user meaningful label for the JSType instance.  For example,\n+   * Functions and Enums will return their declaration name (if they have one).\n+   * Some types will not have a meaningful display name.  Calls to\n+   * hasDisplayName() will return true IFF getDisplayName() will return null\n+   * or a zero length string.\n+   *\n+   * @return the display name of the type, or null if one is not available\n+   */\n+  public String getDisplayName() {\n+    return null;\n+  }\n+\n+  /**\n+   * @return true if the JSType has a user meaningful label.\n+   */\n+  public boolean hasDisplayName() {\n+    String displayName = getDisplayName();\n+    return displayName != null && !displayName.isEmpty();\n   }\n \n   /**\n--- a/src/com/google/javascript/rhino/jstype/NullType.java\n+++ b/src/com/google/javascript/rhino/jstype/NullType.java\n \n   @Override\n   public String toString() {\n+    return getDisplayName();\n+  }\n+\n+  @Override\n+  public String getDisplayName() {\n     return \"null\";\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/NumberType.java\n+++ b/src/com/google/javascript/rhino/jstype/NumberType.java\n \n   @Override\n   public String toString() {\n+    return getDisplayName();\n+  }\n+\n+  @Override\n+  public String getDisplayName() {\n     return \"number\";\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/ObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java\n     return name;\n   }\n \n+  @Override\n+  public String getDisplayName() {\n+    return getNormalizedReferenceName();\n+  }\n+\n   /**\n    * Creates a suffix for a proxy delegate.\n    * @see #getNormalizedReferenceName\n--- a/src/com/google/javascript/rhino/jstype/StringType.java\n+++ b/src/com/google/javascript/rhino/jstype/StringType.java\n \n   @Override\n   public String toString() {\n+    return getDisplayName();\n+  }\n+\n+  @Override\n+  public String getDisplayName() {\n     return \"string\";\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/UnknownType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnknownType.java\n   }\n \n   @Override\n+  public String getDisplayName() {\n+    return \"Unknown\";\n+  }\n+\n+  @Override\n+  public boolean hasDisplayName() {\n+    return true;\n+  }\n+\n+  @Override\n   public boolean isPropertyTypeDeclared(String propertyName) {\n     return false;\n   }\n--- a/src/com/google/javascript/rhino/jstype/ValueType.java\n+++ b/src/com/google/javascript/rhino/jstype/ValueType.java\n-/* \n+/*\n  *\n  * ***** BEGIN LICENSE BLOCK *****\n  * Version: MPL 1.1/GPL 2.0\n  * file under either the MPL or the GPL.\n  *\n  * ***** END LICENSE BLOCK ***** */\n- \n+\n package com.google.javascript.rhino.jstype;\n \n import com.google.javascript.rhino.ErrorReporter;\n   final JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     return this;\n   }\n+\n+  @Override\n+  public boolean hasDisplayName() {\n+    return true;\n+  }\n+\n }\n--- a/src/com/google/javascript/rhino/jstype/VoidType.java\n+++ b/src/com/google/javascript/rhino/jstype/VoidType.java\n \n   @Override\n   public String toString() {\n+    return getDisplayName();\n+  }\n+\n+  @Override\n+  public String getDisplayName() {\n     return \"undefined\";\n   }\n \n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n     // toString\n     assertEquals(\"Function\",\n         U2U_CONSTRUCTOR_TYPE.toString());\n+    assertTrue(U2U_CONSTRUCTOR_TYPE.hasDisplayName());\n+    assertEquals(\"Function\", U2U_CONSTRUCTOR_TYPE.getDisplayName());\n \n     // getPropertyType\n     assertTypeEquals(UNKNOWN_TYPE,\n \n     // toString\n     assertEquals(\"NoObject\", NO_OBJECT_TYPE.toString());\n+    assertFalse(NO_OBJECT_TYPE.hasDisplayName());\n+    assertEquals(null, NO_OBJECT_TYPE.getDisplayName());\n+\n \n     // getPropertyType\n     assertTypeEquals(NO_TYPE,\n \n     // toString\n     assertEquals(\"None\", NO_TYPE.toString());\n+    assertEquals(null, NO_TYPE.getDisplayName());\n+    assertFalse(NO_TYPE.hasDisplayName());\n \n     // getPropertyType\n     assertTypeEquals(NO_TYPE,\n \n     // toString\n     assertEquals(\"Array\", ARRAY_TYPE.toString());\n+    assertTrue(ARRAY_TYPE.hasDisplayName());\n+    assertEquals(\"Array\", ARRAY_TYPE.getDisplayName());\n \n     assertTrue(ARRAY_TYPE.isNativeObjectType());\n \n \n     // toString\n     assertEquals(\"?\", UNKNOWN_TYPE.toString());\n+    assertTrue(UNKNOWN_TYPE.hasDisplayName());\n+    assertEquals(\"Unknown\", UNKNOWN_TYPE.getDisplayName());\n \n     Asserts.assertResolvesToSame(UNKNOWN_TYPE);\n   }\n \n     // toString\n     assertEquals(\"*\", ALL_TYPE.toString());\n+\n+    assertTrue(ALL_TYPE.hasDisplayName());\n+    assertEquals(\"<Any Type>\", ALL_TYPE.getDisplayName());\n \n     Asserts.assertResolvesToSame(ALL_TYPE);\n   }\n \n     // toString\n     assertEquals(\"Number\", NUMBER_OBJECT_TYPE.toString());\n+    assertTrue(NUMBER_OBJECT_TYPE.hasDisplayName());\n+    assertEquals(\"Number\", NUMBER_OBJECT_TYPE.getDisplayName());\n \n     assertTrue(NUMBER_OBJECT_TYPE.isNativeObjectType());\n \n \n     // toString\n     assertEquals(\"number\", NUMBER_TYPE.toString());\n+    assertTrue(NUMBER_TYPE.hasDisplayName());\n+    assertEquals(\"number\", NUMBER_TYPE.getDisplayName());\n \n     Asserts.assertResolvesToSame(NUMBER_TYPE);\n   }\n \n     // toString\n     assertEquals(\"null\", NULL_TYPE.toString());\n+    assertTrue(NULL_TYPE.hasDisplayName());\n+    assertEquals(\"null\", NULL_TYPE.getDisplayName());\n \n     Asserts.assertResolvesToSame(NULL_TYPE);\n   }\n \n     // toString\n     assertEquals(\"Date\", DATE_TYPE.toString());\n+    assertTrue(DATE_TYPE.hasDisplayName());\n+    assertEquals(\"Date\", DATE_TYPE.getDisplayName());\n \n     assertTrue(DATE_TYPE.isNativeObjectType());\n \n \n     // toString\n     assertEquals(\"RegExp\", REGEXP_TYPE.toString());\n+    assertTrue(REGEXP_TYPE.hasDisplayName());\n+    assertEquals(\"RegExp\", REGEXP_TYPE.getDisplayName());\n \n     assertTrue(REGEXP_TYPE.isNativeObjectType());\n \n     assertTrue(STRING_OBJECT_TYPE.isNativeObjectType());\n \n     Asserts.assertResolvesToSame(STRING_OBJECT_TYPE);\n+\n+    assertTrue(STRING_OBJECT_TYPE.hasDisplayName());\n+    assertEquals(\"String\", STRING_OBJECT_TYPE.getDisplayName());\n   }\n \n   /**\n \n     // toString\n     assertEquals(\"string\", STRING_TYPE.toString());\n+    assertTrue(STRING_TYPE.hasDisplayName());\n+    assertEquals(\"string\", STRING_TYPE.getDisplayName());\n \n     // findPropertyType\n     assertTypeEquals(NUMBER_TYPE, STRING_TYPE.findPropertyType(\"length\"));\n     assertPropertyTypeInferred(functionType, \"prototype\");\n \n     Asserts.assertResolvesToSame(functionType);\n+\n+\n+    assertEquals(\"aFunctionName\", new FunctionBuilder(registry).\n+        withName(\"aFunctionName\").build().getDisplayName());\n   }\n \n   /**\n \n     // toString\n     assertEquals(\"boolean\", BOOLEAN_TYPE.toString());\n+    assertTrue(BOOLEAN_TYPE.hasDisplayName());\n+    assertEquals(\"boolean\", BOOLEAN_TYPE.getDisplayName());\n \n     Asserts.assertResolvesToSame(BOOLEAN_TYPE);\n   }\n \n     // toString\n     assertEquals(\"Boolean\", BOOLEAN_OBJECT_TYPE.toString());\n+    assertTrue(BOOLEAN_OBJECT_TYPE.hasDisplayName());\n+    assertEquals(\"Boolean\", BOOLEAN_OBJECT_TYPE.getDisplayName());\n \n     assertTrue(BOOLEAN_OBJECT_TYPE.isNativeObjectType());\n \n \n     // toString\n     assertEquals(\"enum{Enum}\", enumType.toString());\n+    assertTrue(enumType.hasDisplayName());\n+    assertEquals(\"Enum\", enumType.getDisplayName());\n+\n+    assertEquals(\"AnotherEnum\", new EnumType(registry, \"AnotherEnum\",\n+        NUMBER_TYPE).getDisplayName());\n+    assertFalse(new EnumType(registry, null, NUMBER_TYPE).hasDisplayName());\n \n     Asserts.assertResolvesToSame(enumType);\n   }\n \n     // toString\n     assertEquals(\"Enum.<number>\", elementsType.toString());\n+    assertTrue(elementsType.hasDisplayName());\n+    assertEquals(\"Enum\", elementsType.getDisplayName());\n \n     Asserts.assertResolvesToSame(elementsType);\n   }\n \n     // toString\n     assertEquals(\"{...}\", objectType.toString());\n+    assertEquals(null, objectType.getDisplayName());\n+    assertFalse(objectType.hasReferenceName());\n+    assertEquals(\"anObject\", new PrototypeObjectType(registry, \"anObject\",\n+        null).getDisplayName());\n \n     Asserts.assertResolvesToSame(objectType);\n   }", "timestamp": 1291839496, "metainfo": ""}