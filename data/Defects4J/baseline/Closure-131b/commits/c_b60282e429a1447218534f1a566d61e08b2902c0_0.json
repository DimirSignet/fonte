{"sha": "b60282e429a1447218534f1a566d61e08b2902c0", "log": "When checking for type equivalence also check type parameters.  R=nicksantos DELTA=97  (97 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4908   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n+++ b/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n   }\n \n   @Override\n+  public boolean isEquivalentTo(JSType that) {\n+    return (super.isEquivalentTo(that)\n+        && JSType.isEquivalent(\n+            parameterType, that.toObjectType().getParameterType()));\n+  }\n+\n+  @Override\n   String toStringHelper(boolean forAnnotations) {\n     String result = super.toStringHelper(forAnnotations);\n     return parameterType.isUnknownType() ?\n--- /dev/null\n+++ b/test/com/google/javascript/rhino/jstype/ParameterizedTypeTest.java\n+/*\n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   John Lenz\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+\n+package com.google.javascript.rhino.jstype;\n+\n+import com.google.javascript.rhino.testing.BaseJSTypeTestCase;\n+\n+public class ParameterizedTypeTest extends BaseJSTypeTestCase {\n+  private NamedType unresolvedNamedType;\n+\n+  @Override\n+  public void setUp() throws Exception {\n+    super.setUp();\n+    unresolvedNamedType =\n+        new NamedType(registry, \"not.resolved.named.type\", null, -1, -1);\n+  }\n+\n+  protected ParameterizedType createParameterizedType(\n+      ObjectType objectType, JSType parameterType) {\n+    return registry.createParameterizedType(objectType, parameterType);\n+  }\n+\n+  /**\n+   * Assert that a type can assign to itself.\n+   */\n+  private void assertTypeCanAssignToItself(JSType type) {\n+    assertTrue(type.canAssignTo(type));\n+  }\n+\n+  /**\n+   * Tests the behavior of variants type.\n+   */\n+  @SuppressWarnings(\"checked\")\n+  public void testParameterizedType() throws Exception {\n+    ParameterizedType arrOfString = createParameterizedType(\n+        ARRAY_TYPE, STRING_TYPE);\n+    assertTypeCanAssignToItself(arrOfString);\n+    assertTrue(arrOfString.canAssignTo(ARRAY_TYPE));\n+    assertTrue(ARRAY_TYPE.canAssignTo(arrOfString));\n+\n+    ParameterizedType arrOfNumber = createParameterizedType(\n+        ARRAY_TYPE, NUMBER_TYPE);\n+    assertTypeCanAssignToItself(arrOfNumber);\n+    assertTrue(arrOfNumber.canAssignTo(ARRAY_TYPE));\n+    assertTrue(ARRAY_TYPE.canAssignTo(arrOfNumber));\n+\n+    assertTrue(arrOfString.isEquivalentTo(createParameterizedType(\n+        ARRAY_TYPE, STRING_TYPE)));\n+\n+    assertFalse(arrOfString.isEquivalentTo(ARRAY_TYPE));\n+    assertFalse(arrOfString.isEquivalentTo(ARRAY_TYPE));\n+    assertFalse(arrOfString.isEquivalentTo(arrOfNumber));\n+    assertFalse(arrOfNumber.isEquivalentTo(arrOfString));\n+  }\n+}", "timestamp": 1338415072, "metainfo": ""}