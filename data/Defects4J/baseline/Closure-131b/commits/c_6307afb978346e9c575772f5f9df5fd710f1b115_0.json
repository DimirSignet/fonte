{"sha": "6307afb978346e9c575772f5f9df5fd710f1b115", "log": "Move startPass, endPass, newTracer and stopTracer in NamedPass, nothing else in PhaseOptimizer uses them. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=42918171", "commit": "\n--- a/src/com/google/javascript/jscomp/PhaseOptimizer.java\n+++ b/src/com/google/javascript/jscomp/PhaseOptimizer.java\n   private final PerformanceTracker tracker;\n   private final CodeChangeHandler recentChange = new CodeChangeHandler();\n   private boolean loopMutex = false;\n-  private Tracer currentTracer = null;\n-  private String currentPassName = null;\n   private PassFactory sanityCheck = null;\n   private boolean printAstHashcodes = false;\n \n     }\n   }\n \n-  /**\n-   * Marks the beginning of a pass.\n-   */\n-  private void startPass(String passName, boolean isOneTime) {\n-    Preconditions.checkState(currentTracer == null && currentPassName == null);\n-    currentPassName = passName;\n-    currentTracer = newTracer(passName, isOneTime);\n-  }\n-\n-  /**\n-   * Marks the end of a pass.\n-   */\n-  private void endPass(Node externs, Node root) {\n-    Preconditions.checkState(currentTracer != null && currentPassName != null);\n-\n-    String passToCheck = currentPassName;\n-    try {\n-      if (progressRange == null) {\n-        compiler.setProgress(-1, currentPassName);\n-      } else {\n-        progress += progressStep;\n-        compiler.setProgress(progress, currentPassName);\n-      }\n-      stopTracer(currentTracer, currentPassName);\n-      currentPassName = null;\n-      currentTracer = null;\n-\n-      maybePrintAstHashcodes(passToCheck, root);\n-      maybeSanityCheck(externs, root);\n-    } catch (Exception e) {\n-      // TODO(johnlenz): Remove this once the normalization checks report\n-      // errors instead of exceptions.\n-      throw new RuntimeException(\"Sanity check failed for \" + passToCheck, e);\n-    }\n-  }\n-\n   private void maybePrintAstHashcodes(String passName, Node root) {\n     if (printAstHashcodes) {\n       String hashCodeMsg = \"AST hashCode after \" + passName + \": \" +\n   }\n \n   /**\n-   * Returns a new tracer for the given pass name.\n-   */\n-  private Tracer newTracer(String passName, boolean isOneTime) {\n-    String comment = passName +\n-        (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n-    if (tracker != null) {\n-      tracker.recordPassStart(passName, isOneTime);\n-    }\n-    return new Tracer(\"JSCompiler\", comment);\n-  }\n-\n-  private void stopTracer(Tracer t, String passName) {\n-    long result = t.stop();\n-    if (tracker != null) {\n-      tracker.recordPassStop(passName, result);\n-    }\n-  }\n-\n-  /**\n    * A single compiler pass.\n    */\n   class NamedPass implements CompilerPass {\n     final String name;\n     private final PassFactory factory;\n+    private Tracer tracer;\n \n     NamedPass(PassFactory factory) {\n       this.name = factory.getName();\n     @Override\n     public void process(Node externs, Node root) {\n       logger.fine(name);\n-      startPass(name, factory.isOneTimePass());\n+      tracer = newTracer();\n       // Delay the creation of the actual pass until *after* all previous passes\n       // have been processed.\n       // Some precondition checks rely on this, eg, in CoalesceVariableNames.\n       factory.create(compiler).process(externs, root);\n       endPass(externs, root);\n+    }\n+\n+    /**\n+     * Marks the end of a pass.\n+     */\n+    private void endPass(Node externs, Node root) {\n+      try {\n+        if (progressRange == null) {\n+          compiler.setProgress(-1, name);\n+        } else {\n+          progress += progressStep;\n+          compiler.setProgress(progress, name);\n+        }\n+        if (tracker != null) {\n+          tracker.recordPassStop(name, tracer.stop());\n+        }\n+        maybePrintAstHashcodes(name, root);\n+        maybeSanityCheck(externs, root);\n+      } catch (Exception e) {\n+        // TODO(johnlenz): Remove this once the normalization checks report\n+        // errors instead of exceptions.\n+        throw new RuntimeException(\"Sanity check failed for \" + name, e);\n+      }\n+    }\n+\n+    /**\n+     * Returns a new tracer for the given pass name.\n+     */\n+    private Tracer newTracer() {\n+      String comment = name +\n+          (recentChange.hasCodeChanged() ? \" on recently changed AST\" : \"\");\n+      if (tracker != null) {\n+        tracker.recordPassStart(name, factory.isOneTimePass());\n+      }\n+      return new Tracer(\"JSCompiler\", comment);\n     }\n   }\n ", "timestamp": 1361568477, "metainfo": ""}