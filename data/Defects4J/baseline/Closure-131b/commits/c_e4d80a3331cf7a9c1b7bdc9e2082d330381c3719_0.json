{"sha": "e4d80a3331cf7a9c1b7bdc9e2082d330381c3719", "log": "Enable keywords as property names for ECMASCRIPT5  R=acleung DELTA=106  (91 added, 1 deleted, 14 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=884   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n     if (jsDocInfo != null) {\n       irNode.setJSDocInfo(jsDocInfo);\n     }\n-\n+    setSourceInfo(irNode, node);\n+    return irNode;\n+  }\n+\n+  private Node transformNameAsString(Name node) {\n+    JSDocInfo jsDocInfo = handleJsDoc(node);\n+    Node irNode = transformDispatcher.processName(node, true);\n+    if (jsDocInfo != null) {\n+      irNode.setJSDocInfo(jsDocInfo);\n+    }\n+    setSourceInfo(irNode, node);\n+    return irNode;\n+  }\n+\n+  private void setSourceInfo(Node irNode, AstNode node) {\n     // If we have a named function, set the position to that of the name.\n     if (irNode.getType() == Token.FUNCTION &&\n         irNode.getFirstChild().getLineno() != -1) {\n         irNode.setCharno(charno);\n       }\n     }\n-    return irNode;\n   }\n \n   /**\n      * unquoted.\n      */\n     private Node transformAsString(AstNode n) {\n-      Node ret = transform(n);\n-      if (ret.getType() == Token.STRING) {\n-        ret.putBooleanProp(Node.QUOTED_PROP, true);\n-      } else if (ret.getType() == Token.NAME) {\n-        ret.setType(Token.STRING);\n+      Node ret;\n+      if (n instanceof Name) {\n+        ret = transformNameAsString((Name)n);\n+      } else {\n+        ret = transform(n);\n+        Preconditions.checkState(ret.getType() == Token.NUMBER\n+            || ret.getType() == Token.STRING);\n+        if (ret.getType() == Token.STRING) {\n+          ret.putBooleanProp(Node.QUOTED_PROP, true);\n+        }\n       }\n       return ret;\n     }\n \n     @Override\n     Node processName(Name nameNode) {\n-      if (isReservedKeyword(nameNode.getIdentifier())) {\n-        errorReporter.error(\n-          \"identifier is a reserved word\",\n-          sourceName,\n-          nameNode.getLineno(), \"\", 0);\n-      }\n-      return newStringNode(Token.NAME, nameNode.getIdentifier());\n+      return processName(nameNode, false);\n+    }\n+\n+    Node processName(Name nameNode, boolean asString) {\n+      if (asString) {\n+        return newStringNode(Token.STRING, nameNode.getIdentifier());\n+      } else {\n+        if (isReservedKeyword(nameNode.getIdentifier())) {\n+          errorReporter.error(\n+            \"identifier is a reserved word\",\n+            sourceName,\n+            nameNode.getLineno(), \"\", 0);\n+        }\n+        return newStringNode(Token.NAME, nameNode.getIdentifier());\n+      }\n     }\n \n     /**\n--- a/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n+++ b/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n     if (config.isIdeMode || config.languageMode != LanguageMode.ECMASCRIPT3) {\n       // Do our own identifier check for ECMASCRIPT 5\n       compilerEnv.setReservedKeywordAsIdentifier(true);\n+      compilerEnv.setAllowKeywordAsObjectPropertyName(true);\n     }\n \n     if (config.isIdeMode) {\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n \n   public void testReservedKeywords() {\n     boolean isIdeMode = false;\n+\n+    mode = LanguageMode.ECMASCRIPT3;\n+\n     parseError(\"var boolean;\", \"missing variable name\");\n     parseError(\"function boolean() {};\",\n         \"missing ( before function parameters.\");\n     parse(\"boolean = 1;\");\n     parseError(\"class = 1;\", \"identifier is a reserved word\");\n     parseError(\"public = 2;\", \"identifier is a reserved word\");\n-\n+  }\n+\n+  public void testKeywordsAsProperties() {\n+    boolean isIdeMode = false;\n+\n+    mode = LanguageMode.ECMASCRIPT3;\n+\n+    parseError(\"var x = {function: 1};\", \"invalid property id\");\n+    parseError(\"x.function;\", \"missing name after . operator\");\n+    parseError(\"var x = {get x(){} };\",\n+        \"getters are not supported in Internet Explorer\");\n+    parseError(\"var x = {get function(){} };\", \"invalid property id\");\n+    parseError(\"var x = {get 'function'(){} };\",\n+        \"getters are not supported in Internet Explorer\");\n+    parseError(\"var x = {get 1(){} };\",\n+        \"getters are not supported in Internet Explorer\");\n+    parseError(\"var x = {set function(a){} };\", \"invalid property id\");\n+    parseError(\"var x = {set 'function'(a){} };\",\n+        \"setters are not supported in Internet Explorer\");\n+    parseError(\"var x = {set 1(a){} };\",\n+        \"setters are not supported in Internet Explorer\");\n+    parseError(\"var x = {class: 1};\", \"invalid property id\");\n+    parseError(\"x.class;\", \"missing name after . operator\");\n+    parse(\"var x = {let: 1};\");\n+    parse(\"x.let;\");\n+    parse(\"var x = {yield: 1};\");\n+    parse(\"x.yield;\");\n+\n+    mode = LanguageMode.ECMASCRIPT5;\n+\n+    parse(\"var x = {function: 1};\");\n+    parse(\"x.function;\");\n+    parse(\"var x = {get function(){} };\");\n+    parse(\"var x = {get 'function'(){} };\");\n+    parse(\"var x = {get 1(){} };\");\n+    parse(\"var x = {set function(a){} };\");\n+    parse(\"var x = {set 'function'(a){} };\");\n+    parse(\"var x = {set 1(a){} };\");\n+    parse(\"var x = {class: 1};\");\n+    parse(\"x.class;\");\n+    parse(\"var x = {let: 1};\");\n+    parse(\"x.let;\");\n+    parse(\"var x = {yield: 1};\");\n+    parse(\"x.yield;\");\n+\n+    mode = LanguageMode.ECMASCRIPT5_STRICT;\n+\n+    parse(\"var x = {function: 1};\");\n+    parse(\"x.function;\");\n+    parse(\"var x = {get function(){} };\");\n+    parse(\"var x = {get 'function'(){} };\");\n+    parse(\"var x = {get 1(){} };\");\n+    parse(\"var x = {set function(a){} };\");\n+    parse(\"var x = {set 'function'(a){} };\");\n+    parse(\"var x = {set 1(a){} };\");\n+    parse(\"var x = {class: 1};\");\n+    parse(\"x.class;\");\n+    parse(\"var x = {let: 1};\");\n+    parse(\"x.let;\");\n+    parse(\"var x = {yield: 1};\");\n+    parse(\"x.yield;\");\n   }\n \n   private void parseError(String string, String... errors) {", "timestamp": 1300229836, "metainfo": ""}