{"sha": "d2b19965df52e66385a2d7146887a44cea50330a", "log": "build.xml output improvements. fixes issue 638  R=johnlenz DELTA=79  (17 added, 28 deleted, 34 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4105   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AliasStrings.java\n+++ b/src/com/google/javascript/jscomp/AliasStrings.java\n \n   @Override\n   public void process(Node externs, Node root) {\n-    logger.info(\"Aliasing common strings\");\n+    logger.fine(\"Aliasing common strings\");\n \n     // Traverse the tree and collect strings\n     NodeTraversal.traverse(compiler, root, this);\n       }\n     }\n     // TODO(user): Make this save to file OR output to the application\n-    logger.info(sb.toString());\n+    logger.fine(sb.toString());\n   }\n \n   // -------------------------------------------------------------------------\n--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java\n       }\n     }\n \n-    logger.info(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"\n+    logger.fine(\"Collapsed \" + numRenamedPropertyNames + \" properties into \"\n                 + numNewPropertyNames + \" and skipped renaming \"\n                 + numSkippedPropertyNames + \" properties.\");\n   }\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n   }\n \n   private void externExports() {\n-    logger.info(\"Creating extern file for exports\");\n+    logger.fine(\"Creating extern file for exports\");\n     startPass(\"externExports\");\n \n     ExternExportsPass pass = new ExternExportsPass(this);\n    * Removes try/catch/finally statements for easier debugging.\n    */\n   void removeTryCatchFinally() {\n-    logger.info(\"Remove try/catch/finally\");\n+    logger.fine(\"Remove try/catch/finally\");\n     startPass(\"removeTryCatchFinally\");\n     RemoveTryCatch r = new RemoveTryCatch(this);\n     process(r);\n    */\n   void stripCode(Set<String> stripTypes, Set<String> stripNameSuffixes,\n       Set<String> stripTypePrefixes, Set<String> stripNamePrefixes) {\n-    logger.info(\"Strip code\");\n+    logger.fine(\"Strip code\");\n     startPass(\"stripCode\");\n     StripCode r = new StripCode(this, stripTypes, stripNameSuffixes,\n         stripTypePrefixes, stripNamePrefixes);\n \n   /** Control Flow Analysis. */\n   ControlFlowGraph<Node> computeCFG() {\n-    logger.info(\"Computing Control Flow Graph\");\n+    logger.fine(\"Computing Control Flow Graph\");\n     Tracer tracer = newTracer(\"computeCFG\");\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(this, true, false);\n     process(cfa);\n   }\n \n   public void normalize() {\n-    logger.info(\"Normalizing\");\n+    logger.fine(\"Normalizing\");\n     startPass(\"normalize\");\n     process(new Normalize(this, false));\n     endPass();\n   }\n \n   void recordFunctionInformation() {\n-    logger.info(\"Recording function information\");\n+    logger.fine(\"Recording function information\");\n     startPass(\"recordFunctionInformation\");\n     RecordFunctionInformation recordFunctionInfoPass =\n         new RecordFunctionInformation(\n--- a/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\n+++ b/src/com/google/javascript/jscomp/CrossModuleCodeMotion.java\n \n   @Override\n   public void process(Node externs, Node root) {\n-    logger.info(\"Moving functions + variable into deeper modules\");\n+    logger.fine(\"Moving functions + variable into deeper modules\");\n \n     // If there are <2 modules, then we will never move anything, so we're done\n     if (graph != null && graph.getModuleCount() > 1) {\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n         }\n       }\n     }\n-    logger.info(\"Renamed \" + instancesRenamed + \" instances of \"\n+    logger.fine(\"Renamed \" + instancesRenamed + \" instances of \"\n                 + propsRenamed + \" properties.\");\n-    logger.info(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n+    logger.fine(\"Skipped renaming \" + instancesSkipped + \" invalidated \"\n                 + \"properties, \" + propsSkipped + \" instances of properties \"\n                 + \"that were skipped for specific types and \" + singleTypeProps\n                 + \" properties that were referenced from only one type.\");\n--- a/src/com/google/javascript/jscomp/ExpandJqueryAliases.java\n+++ b/src/com/google/javascript/jscomp/ExpandJqueryAliases.java\n \n   @Override\n   public void process(Node externs, Node root) {\n-    logger.info(\"Expanding Jquery Aliases\");\n+    logger.fine(\"Expanding Jquery Aliases\");\n \n     // Traverse the tree and collect strings\n     NodeTraversal.traverse(compiler, root, this);\n--- a/src/com/google/javascript/jscomp/NameAnonymousFunctions.java\n+++ b/src/com/google/javascript/jscomp/NameAnonymousFunctions.java\n     AnonymousFunctionNamingCallback namingCallback =\n         new AnonymousFunctionNamingCallback(new AnonymousFunctionNamer());\n     NodeTraversal.traverse(compiler, root, namingCallback);\n-    logger.info(\"Named \" + namedCount + \" anon functions using \" +\n+    logger.fine(\"Named \" + namedCount + \" anon functions using \" +\n         bytesUsed + \" bytes\");\n   }\n \n--- a/src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java\n+++ b/src/com/google/javascript/jscomp/NameAnonymousFunctionsMapped.java\n     AnonymousFunctionNamingCallback namingCallback =\n         new AnonymousFunctionNamingCallback(new MappedFunctionNamer());\n     NodeTraversal.traverse(compiler, root, namingCallback);\n-    logger.info(\"Named \" + namedCount + \" anon functions using \" +\n+    logger.fine(\"Named \" + namedCount + \" anon functions using \" +\n         bytesUsed + \" bytes\");\n     if (namedCount > 0) {\n       compiler.reportCodeChange();\n--- a/src/com/google/javascript/jscomp/PhaseOptimizer.java\n+++ b/src/com/google/javascript/jscomp/PhaseOptimizer.java\n \n     @Override\n     public void process(Node externs, Node root) {\n-      logger.info(name);\n+      logger.fine(name);\n       startPass(name);\n       processInternal(externs, root);\n       endPass(externs, root);\n--- a/src/com/google/javascript/jscomp/deps/DepsFileParser.java\n+++ b/src/com/google/javascript/jscomp/deps/DepsFileParser.java\n    */\n   public List<DependencyInfo> parseFileReader(String filePath, Reader reader) {\n     depInfos = Lists.newArrayList();\n-    logger.info(\"Parsing Dep: \" + filePath);\n+    logger.fine(\"Parsing Dep: \" + filePath);\n     doParse(filePath, reader);\n     return depInfos;\n   }", "timestamp": 1326989120, "metainfo": ""}