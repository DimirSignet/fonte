{"sha": "92087fa9bdb7b8da77b85445d4eefa5ee7ea31fe", "log": "Hashcodes can change during type resolving. Make UnionType reflect that. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=42869279", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n import static com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;\n \n import com.google.common.base.Joiner;\n-import com.google.common.base.Preconditions;\n import com.google.common.base.Predicate;\n-import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n import com.google.javascript.rhino.ErrorReporter;\n \n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     setResolvedTypeInternal(this); // for circularly defined types.\n \n-    boolean changed = false;\n-    ImmutableList.Builder<JSType> resolvedTypes = ImmutableList.builder();\n+    // Just resolve the alternates, but do not update as that breaks some error\n+    // reporting cases.\n     for (JSType alternate : alternates) {\n-      JSType newAlternate = alternate.resolve(t, scope);\n-      changed |= (alternate != newAlternate);\n-      resolvedTypes.add(alternate);\n-    }\n-    if (changed) {\n-      Collection<JSType> newAlternates = resolvedTypes.build();\n-      Preconditions.checkState(\n-          newAlternates.hashCode() == this.hashcode);\n-      alternates = newAlternates;\n-    }\n+      alternate.resolve(t, scope);\n+    }\n+    // Ensure the union is in a normalized state.\n+    rebuildAlternates();\n     return this;\n   }\n ", "timestamp": 1361486424, "metainfo": ""}