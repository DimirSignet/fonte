{"sha": "b10e8c0b60432db7b24a6b9c4c921bb20829be86", "log": "Add only_closure_dependencies flag  R=johnlenz DELTA=83  (79 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4431   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n     createDefineOrTweakReplacements(config.tweak, options, true);\n \n     // Dependency options\n-    options.setManageClosureDependencies(config.manageClosureDependencies);\n-    if (config.closureEntryPoints.size() > 0) {\n-      options.setManageClosureDependencies(config.closureEntryPoints);\n+    if (config.onlyClosureDependencies) {\n+      if (config.closureEntryPoints.isEmpty()) {\n+        throw new FlagUsageException(\"When only_closure_dependencies is \"\n+          + \"on, you must specify at least one closure_entry_point\");\n+      }\n+\n+      options.setDependencyOptions(new DependencyOptions()\n+          .setDependencyPruning(true)\n+          .setDependencySorting(true)\n+          .setMoocherDropping(true)\n+          .setEntryPoints(config.closureEntryPoints));\n+    } else if (config.manageClosureDependencies ||\n+        config.closureEntryPoints.size() > 0) {\n+      options.setDependencyOptions(new DependencyOptions()\n+          .setDependencyPruning(true)\n+          .setDependencySorting(true)\n+          .setMoocherDropping(false)\n+          .setEntryPoints(config.closureEntryPoints));\n     }\n \n     options.devMode = config.jscompDevMode;\n       return this;\n     }\n \n+    private boolean onlyClosureDependencies = false;\n+\n+    /**\n+     * Sets whether to sort files by their goog.provide/require deps,\n+     * and prune inputs that are not required, and drop all non-closure\n+     * files.\n+     */\n+    CommandLineConfig setOnlyClosureDependencies(boolean newVal) {\n+      this.onlyClosureDependencies = newVal;\n+      return this;\n+    }\n+\n     private List<String> closureEntryPoints = ImmutableList.of();\n \n     /**\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n         + \"be included in the compilation.\")\n     private boolean manage_closure_dependencies = false;\n \n+    @Option(name = \"--only_closure_dependencies\",\n+        handler = BooleanOptionHandler.class,\n+        usage = \"Only include files in the transitive dependency of the \"\n+        + \"entry points (specified by closure_entry_point). Files that do \"\n+        + \"not provide dependencies will be removed. This supercedes\"\n+        + \"manage_closure_dependencies\")\n+    private boolean only_closure_dependencies = false;\n+\n     @Option(name = \"--closure_entry_point\",\n         usage = \"Entry points to the program. Must be goog.provide'd \"\n         + \"symbols. Any goog.provide'd symbols that are not a transitive \"\n           .setDefine(flags.define)\n           .setCharset(flags.charset)\n           .setManageClosureDependencies(flags.manage_closure_dependencies)\n+          .setOnlyClosureDependencies(flags.only_closure_dependencies)\n           .setClosureEntryPoints(flags.closure_entry_point)\n           .setOutputManifest(ImmutableList.of(flags.output_manifest))\n           .setAcceptConstKeyword(flags.accept_const_keyword)\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n    * This supercedes manageClosureDependencies.\n    */\n   public void setDependencyOptions(DependencyOptions options) {\n+    Preconditions.checkNotNull(options);\n     this.dependencyOptions = options;\n   }\n \n--- a/src/com/google/javascript/jscomp/DependencyOptions.java\n+++ b/src/com/google/javascript/jscomp/DependencyOptions.java\n    * The syntactic form of a symbol depends on the type of dependency\n    * primitives we're using. For example, goog.provide('foo.bar')\n    * provides the symbol 'foo.bar'.\n+   *\n+   * @return this for easy chaining.\n    */\n-  public void setEntryPoints(Collection<String> symbols) {\n+  public DependencyOptions setEntryPoints(Collection<String> symbols) {\n     entryPoints.clear();\n     entryPoints.addAll(symbols);\n+    return this;\n   }\n \n   /** Returns whether re-ordering of files is needed. */\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n          RhinoErrorReporter.TYPE_PARSE_ERROR);\n   }\n \n+  public void testOnlyClosureDependenciesEmptyEntryPoints() throws Exception {\n+    // Prevents this from trying to load externs.zip\n+    args.add(\"--use_only_custom_externs=true\");\n+\n+    args.add(\"--only_closure_dependencies=true\");\n+    try {\n+      CommandLineRunner runner = createCommandLineRunner(new String[0]);\n+      runner.doRun();\n+      fail(\"Expected FlagUsageException\");\n+    } catch (FlagUsageException e) {\n+      assertTrue(e.getMessage(),\n+          e.getMessage().contains(\"only_closure_dependencies\"));\n+    }\n+  }\n+\n+  public void testOnlyClosureDependenciesOneEntryPoint() throws Exception {\n+    args.add(\"--only_closure_dependencies=true\");\n+    args.add(\"--closure_entry_point=beer\");\n+    test(new String[] {\n+          \"goog.require('beer'); var beerRequired = 1;\",\n+          \"goog.provide('beer');\\ngoog.require('hops');\\nvar beerProvided = 1;\",\n+          \"goog.provide('hops'); var hopsProvided = 1;\",\n+          \"goog.provide('scotch'); var scotchProvided = 1;\",\n+          \"var includeFileWithoutProvides = 1;\"\n+         },\n+         new String[] {\n+           \"var hops = {}, hopsProvided = 1;\",\n+           \"var beer = {}, beerProvided = 1;\"\n+         });\n+  }\n+\n   public void testSourceMapExpansion1() {\n     args.add(\"--js_output_file\");\n     args.add(\"/path/to/out.js\");", "timestamp": 1332870454, "metainfo": ""}