{"sha": "773b2b3f0e0fa6f64bf86e7df484499b711b453e", "log": "Convert if-else-if chains to if-if when possible.  R=acleung DELTA=60  (58 added, 1 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3565   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n         }\n         return node;\n \n-\n       case Token.TRUE:\n       case Token.FALSE:\n         return reduceTrueFalse(node);\n           n.replaceChild(child, returnNode);\n           n.removeChild(nextNode);\n           reportCodeChange();\n+        } else if (elseBranch != null && statementMustExitParent(thenBranch)) {\n+          child.removeChild(elseBranch);\n+          n.addChildAfter(elseBranch, child);\n+          reportCodeChange();\n         }\n       }\n     }\n     return n;\n+  }\n+\n+  private boolean statementMustExitParent(Node n) {\n+    switch (n.getType()) {\n+      case Token.THROW:\n+      case Token.RETURN:\n+        return true;\n+      case Token.BLOCK:\n+        if (n.hasChildren()) {\n+          Node child = n.getLastChild();\n+          return statementMustExitParent(child);\n+        }\n+        return false;\n+      // TODO(johnlenz): handle TRY/FINALLY\n+      case Token.FUNCTION:\n+      default:\n+        return false;\n+    }\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n     fold(\"function f(){if(x)return;return 2-x}\",\n          \"function f(){return x?void 0:2-x}\");\n     fold(\"function f(){if(x)return x;else return}\",\n-         \"function f(){if(x)return x;else;}\");\n+         \"function f(){if(x)return x;{}}\");\n     fold(\"function f(){if(x)return x;return}\",\n          \"function f(){if(x)return x}\");\n \n          \"var x=',; ;,;,;,;,'.split(';')\");\n   }\n \n+  public void testRemoveElseCause() {\n+    test(\"function f() {\" +\n+         \" if(x) return 1;\" +\n+         \" else if(x) return 2;\" +\n+         \" else if(x) return 3 }\",\n+         \"function f() {\" +\n+         \" if(x) return 1;\" +\n+         \"{ if(x) return 2;\" +\n+         \"{ if(x) return 3 } } }\");\n+  }\n+\n+\n+  public void testRemoveElseCause1() {\n+    test(\"function f() { if (x) throw 1; else f() }\",\n+         \"function f() { if (x) throw 1; { f() } }\");\n+  }\n+\n+  public void testRemoveElseCause2() {\n+    test(\"function f() { if (x) return 1; else f() }\",\n+         \"function f() { if (x) return 1; { f() } }\");\n+    test(\"function f() { if (x) return; else f() }\",\n+         \"function f() { if (x) {} else { f() } }\");\n+    // This case is handled by minimize exit points.\n+    testSame(\"function f() { if (x) return; f() }\");\n+  }\n+\n+  public void testRemoveElseCause3() {\n+    testSame(\"function f() { a:{if (x) break a; else f() } }\");\n+    testSame(\"function f() { if (x) { a:{ break a } } else f() }\");\n+    testSame(\"function f() { if (x) a:{ break a } else f() }\");\n+  }\n+\n+  public void testRemoveElseCause4() {\n+    testSame(\"function f() { if (x) { if (y) { return 1; } } else f() }\");\n+  }\n+\n   public void testBindToCall1() {\n     test(\"(goog.bind(f))()\", \"f()\");\n     test(\"(goog.bind(f,a))()\", \"f.call(a)\");", "timestamp": 1319737402, "metainfo": ""}