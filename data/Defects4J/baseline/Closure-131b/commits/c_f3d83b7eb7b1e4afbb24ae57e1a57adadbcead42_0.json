{"sha": "f3d83b7eb7b1e4afbb24ae57e1a57adadbcead42", "log": "Rudimentary handling of declared properties of object literals.  R=johnlenz DELTA=101  (95 added, 0 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=331   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n \n     @Override\n     public void visit(NodeTraversal t, Node n, Node parent) {\n-      attachLiteralTypes(n);\n+      attachLiteralTypes(t, n);\n \n       switch (n.getType()) {\n         case Token.CALL:\n       }\n     }\n \n-    private void attachLiteralTypes(Node n) {\n+    private void attachLiteralTypes(NodeTraversal t, Node n) {\n       switch (n.getType()) {\n         case Token.NULL:\n           n.setJSType(getNativeType(NULL_TYPE));\n           break;\n \n         case Token.OBJECTLIT:\n-          processObjectLit(n);\n+          processObjectLit(t, n);\n           break;\n \n           // NOTE(nicksantos): If we ever support Array tuples,\n       }\n     }\n \n-    private void processObjectLit(Node objectLit) {\n+    private void processObjectLit(NodeTraversal t, Node objectLit) {\n       JSDocInfo info = objectLit.getJSDocInfo();\n       if (info != null &&\n           info.getLendsName() != null) {\n       if (objectLit.getJSType() == null) {\n         objectLit.setJSType(typeRegistry.createAnonymousObjectType());\n       }\n+\n+      processObjectLitProperties(\n+          t, objectLit, ObjectType.cast(objectLit.getJSType()));\n+    }\n+\n+    /**\n+     * Process an object literal and all the types on it.\n+     * @param objLit The OBJECTLIT node.\n+     * @param objLitType The type of the OBJECTLIT node. This might be a named\n+     *     type, because of the lends annotation.\n+     */\n+    void processObjectLitProperties(\n+        NodeTraversal t, Node objLit, ObjectType objLitType) {\n+      // TODO(nicksantos): Even if the type of the object literal is null,\n+      // we may want to declare its properties in the current scope.\n+      if (objLitType == null) {\n+        return;\n+      }\n+\n+      for (Node name = objLit.getFirstChild(); name != null;\n+           name = name.getNext()) {\n+        Node value = name.getFirstChild();\n+        String memberName = NodeUtil.getStringValue(name);\n+        JSType type = getDeclaredTypeInAnnotation(\n+            t, name, name.getJSDocInfo());\n+        if (type != null) {\n+          boolean isExtern = t.getInput() != null && t.getInput().isExtern();\n+          objLitType.defineDeclaredProperty(\n+              memberName, type, isExtern, name);\n+        }\n+      }\n     }\n \n     /**\n     JSType getDeclaredTypeInAnnotation(String sourceName,\n         Node node, JSDocInfo info) {\n       JSType jsType = null;\n-      Node objNode = node.getType() == Token.GETPROP ?\n-          node.getFirstChild() : null;\n+      Node objNode =\n+          node.getType() == Token.GETPROP ? node.getFirstChild() :\n+          NodeUtil.isObjectLitKey(node, node.getParent()) ? node.getParent() :\n+          null;\n       if (info != null) {\n         if (info.hasType()) {\n           jsType = info.getType().evaluate(scope, typeRegistry);\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"/** @type {number} */ 'def': 0,\" +\n         \"/** @type {string} */ 3: 'fgh'\" +\n         \"};\");\n+  }\n+\n+  public void testObjectLiteralDeclaration2() throws Exception {\n+    testTypes(\n+        \"var x = {\" +\n+        \"  /** @type {boolean} */ abc: true\" +\n+        \"};\" +\n+        \"x.abc = 0;\",\n+        \"assignment to property abc of x\\n\" +\n+        \"found   : number\\n\" +\n+        \"required: boolean\");\n   }\n \n   public void testCallDateConstructorAsFunction() throws Exception {\n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n         globalScope.getVar(\"ns.foo\").getType().toString());\n   }\n \n+  public void testDeclaredObjectLitProperty1() throws Exception {\n+    testSame(\"var x = {/** @type {number} */ y: 3};\");\n+    ObjectType xType = ObjectType.cast(globalScope.getVar(\"x\").getType());\n+    assertEquals(\n+        \"number\",\n+         xType.getPropertyType(\"y\").toString());\n+    assertEquals(\n+        \"{y: number}\",\n+        xType.toString());\n+  }\n+\n+  public void testDeclaredObjectLitProperty2() throws Exception {\n+    // TODO(nicksantos): Fix this so that it infers that the type\n+    // of the function is @return void.\n+    testSame(\"var x = {/** @param {number} z */ y: function(z){}};\");\n+    ObjectType xType = ObjectType.cast(globalScope.getVar(\"x\").getType());\n+    assertEquals(\n+        \"function (number): ?\",\n+         xType.getPropertyType(\"y\").toString());\n+    assertEquals(\n+        \"{y: function (number): ?}\",\n+        xType.toString());\n+  }\n+\n+  public void testDeclaredObjectLitProperty3() throws Exception {\n+    // TODO(nicksantos): Fix this so that it infers that the type\n+    // of the function is function(?): number.\n+    testSame(\"function f() {\" +\n+        \"  var x = {/** @return {number} */ y: function(z){ return 3; }};\" +\n+        \"}\");\n+    ObjectType xType = ObjectType.cast(lastLocalScope.getVar(\"x\").getType());\n+    assertEquals(\n+        \"function (): number\",\n+         xType.getPropertyType(\"y\").toString());\n+    assertEquals(\n+        \"{y: function (): number}\",\n+        xType.toString());\n+  }\n+\n+  public void testDeclaredObjectLitProperty4() throws Exception {\n+    testSame(\"var x = {y: 5, /** @type {number} */ z: 3};\");\n+    ObjectType xType = ObjectType.cast(globalScope.getVar(\"x\").getType());\n+    assertEquals(\n+        \"number\", xType.getPropertyType(\"y\").toString());\n+    assertFalse(xType.isPropertyTypeDeclared(\"y\"));\n+    assertTrue(xType.isPropertyTypeDeclared(\"z\"));\n+    assertEquals(\n+        \"{y: number, z: number}\",\n+        xType.toString());\n+  }\n+\n   public void testBadCtorInit1() throws Exception {\n     testSame(\"/** @constructor */ var f;\", CTOR_INITIALIZER);\n   }", "timestamp": 1295636265, "metainfo": ""}