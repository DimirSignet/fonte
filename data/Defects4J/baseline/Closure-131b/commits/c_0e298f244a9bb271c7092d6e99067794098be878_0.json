{"sha": "0e298f244a9bb271c7092d6e99067794098be878", "log": "First step for adding a new stable ID generator in JSCompiler: add a new @stableIdGenerator jsdoc annotation.  This will be used in a follow-up CL to trigger a new ID generation strategy in ReplaceIdGenerators.  R=johnlenz DELTA=84  (74 added, 3 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5928   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/Annotation.java\n+++ b/src/com/google/javascript/jscomp/parsing/Annotation.java\n   PUBLIC,\n   RETURN,\n   SEE,\n+  STABLEIDGENERATOR,\n+  STRUCT,\n   SUPPRESS,\n-  STRUCT,\n   TEMPLATE,\n   THIS,\n   THROWS,\n       put(\"return\", Annotation.RETURN).\n       put(\"returns\", Annotation.RETURN).\n       put(\"see\", Annotation.SEE).\n+      put(\"stableIdGenerator\", Annotation.STABLEIDGENERATOR).\n       put(\"struct\", Annotation.STRUCT).\n       put(\"suppress\", Annotation.SUPPRESS).\n       put(\"template\", Annotation.TEMPLATE).\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n                   }\n                   continue retry;\n \n+                case STABLEIDGENERATOR:\n+                  if (!jsdocBuilder.recordStableIdGenerator()) {\n+                    parser.addParserWarning(\"msg.jsdoc.stableidgen\",\n+                      stream.getLineno(), stream.getCharno());\n+                  }\n+                  token = eatTokensUntilEOL();\n+                  continue retry;\n+\n                 case SUPPRESS:\n                   token = parseSuppressTag(next());\n                   continue retry;\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n   private static final int MASK_EXTERNS       = 0x00008000; // @externs\n   private static final int MASK_JAVADISPATCH  = 0x00010000; // @javadispatch\n   private static final int MASK_NOCOMPILE     = 0x00020000; // @nocompile\n-  // @consistentIdGenerator\n-  private static final int MASK_CONSISTIDGEN  = 0x00040000;\n-  // @idGenerator\n-  private static final int MASK_IDGEN         = 0x00080000;\n+  private static final int MASK_CONSISTIDGEN  = 0x00040000; // @consistentIdGenerator\n+  private static final int MASK_IDGEN         = 0x00080000; // @idGenerator\n   private static final int MASK_EXPOSE        = 0x00100000; // @expose\n-\n-  private static final int MASK_STRUCT        = 0x00200000;\n-  private static final int MASK_DICT          = 0x00400000;\n+  private static final int MASK_STRUCT        = 0x00200000; // @struct\n+  private static final int MASK_DICT          = 0x00400000; // @dict\n+  private static final int MASK_STALBEIDGEN   = 0x00800000; // @stableIdGenerator\n \n   // 3 bit type field stored in the top 3 bits of the most significant\n   // nibble.\n     setFlag(value, MASK_CONSISTIDGEN);\n   }\n \n+  void setStableIdGenerator(boolean value) {\n+    setFlag(value, MASK_STALBEIDGEN);\n+  }\n+\n   void setConstant(boolean value) {\n     setFlag(value, MASK_CONSTANT);\n   }\n    */\n   public boolean isConsistentIdGenerator() {\n     return getFlag(MASK_CONSISTIDGEN);\n+  }\n+\n+  /**\n+   * @return whether the {@code @stableIdGenerator} is present on this {@link JSDocInfo}.\n+   */\n+  public boolean isStableIdGenerator() {\n+    return getFlag(MASK_STALBEIDGEN);\n   }\n \n   /**\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n    *     {@code false} if it was already recorded\n    */\n   public boolean recordConsistentIdGenerator() {\n-    if (!currentInfo.isConsistentIdGenerator()) {\n+    if (!currentInfo.isConsistentIdGenerator() &&\n+        !currentInfo.isStableIdGenerator()) {\n       currentInfo.setConsistentIdGenerator(true);\n       populated = true;\n       return true;\n     } else {\n       return false;\n+    }\n+  }\n+\n+  /**\n+   * Records that the {@link JSDocInfo} being built should have its {@link\n+   * JSDocInfo#isStableIdGenerator()} flag set to {@code true}.\n+   *\n+   * @return {@code true} if the stableIdGenerator flag was recorded and {@code false} if it was\n+   *     already recorded or there is a confliciting ID generation annotation.\n+   */\n+  public boolean recordStableIdGenerator() {\n+    if (currentInfo.isStableIdGenerator() ||\n+        currentInfo.isIdGenerator() ||\n+        currentInfo.isConsistentIdGenerator()) {\n+      return false;\n+    } else {\n+      currentInfo.setStableIdGenerator(true);\n+      populated = true;\n+      return true;\n     }\n   }\n \n    *     if it was already recorded\n    */\n   public boolean recordIdGenerator() {\n-    if (!currentInfo.isIdGenerator()) {\n+    if (!currentInfo.isIdGenerator() &&\n+        !currentInfo.isStableIdGenerator()) {\n       currentInfo.setIdGenerator(true);\n       populated = true;\n       return true;\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n           \"function DictDict() {}\",\n           \"Bad type annotation. \" +\n           \"type annotation incompatible with other annotations\");\n+  }\n+\n+  public void testStableIdGeneratorConflict1() throws Exception {\n+    parse(\"/**\\n\" +\n+          \" * @stableIdGenerator\\n\" +\n+          \" * @consistentIdGenerator\\n\" +\n+          \" */\\n\" +\n+          \"function getId() {}\",\n+          \"extra @consistentIdGenerator tag\");\n+  }\n+\n+  public void testStableIdGeneratorConflict2() throws Exception {\n+    parse(\"/**\\n\" +\n+          \" * @stableIdGenerator\\n\" +\n+          \" * @idGenerator\\n\" +\n+          \" */\\n\" +\n+          \"function getId() {}\",\n+          \"extra @idGenerator tag\");\n+  }\n+\n+  public void testStableIdGeneratorConflict3() throws Exception {\n+    parse(\"/**\\n\" +\n+          \" * @stableIdGenerator\\n\" +\n+          \" * @stableIdGenerator\\n\" +\n+          \" */\\n\" +\n+          \"function getId() {}\",\n+          \"extra @stableIdGenerator tag\");\n   }\n \n   public void testParserWithTemplateTypeNameMissing() {", "timestamp": 1354740307, "metainfo": ""}