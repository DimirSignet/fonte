{"sha": "88d49c11272573f4d1b5a13aafab8985a1ed74fe", "log": "The new JDK uses more memory per stack frame, so we're getting stack overflow errors on some binaries. Raise the stack space.  R=dimvar DELTA=19  (18 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5236   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n       DiagnosticType.error(\"JSC_OPTIMIZE_LOOP_ERROR\",\n           \"Exceeded max number of code motion iterations: {0}\");\n \n-  private static final long COMPILER_STACK_SIZE = 1048576L;\n+  // We use many recursive algorithms that use O(d) memory in the depth\n+  // of the tree.\n+  private static final long COMPILER_STACK_SIZE = (1 << 21); // About 2MB\n \n \n   /**\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     test(options, code, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n   }\n \n+  public void testManyAdds() {\n+    CompilerOptions options = createCompilerOptions();\n+    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n+    level.setOptionsForCompilationLevel(options);\n+    WarningLevel warnings = WarningLevel.VERBOSE;\n+    warnings.setOptionsForWarningLevel(options);\n+\n+    int numAdds = 5000;\n+    StringBuilder original = new StringBuilder(\"var x = 0\");\n+    for (int i = 0; i < numAdds; i++) {\n+      original.append(\" + 1\");\n+    }\n+    original.append(\";\");\n+    test(options, original.toString(), \"var x = \" + numAdds + \";\");\n+  }\n+\n   /** Creates a CompilerOptions object with google coding conventions. */\n   @Override\n   protected CompilerOptions createCompilerOptions() {", "timestamp": 1343327105, "metainfo": ""}