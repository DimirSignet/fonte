{"sha": "1a400824eb5299485e84d40698d811c4e284511e", "log": "Add skip_normal_outputs to do dummy compilation (initialize modules and check dependency), used when we want to generate MF/bundle files but compile = 0  R=nicksantos DELTA=151  (144 added, 1 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2254   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n     inputCharset = getInputCharset();\n \n     if (config.jsOutputFile.length() > 0) {\n-      options.jsOutputFile = config.jsOutputFile;\n+      if (config.skipNormalOutputs) {\n+        throw new FlagUsageException(\"skip_normal_outputs and js_output_file\"\n+            + \" cannot be used together.\");\n+      } else {\n+        options.jsOutputFile = config.jsOutputFile;\n+      }\n+    }\n+\n+    if (config.skipNormalOutputs && config.printAst) {\n+      throw new FlagUsageException(\"skip_normal_outputs and print_ast cannot\"\n+          + \" be used together.\");\n+    }\n+\n+    if (config.skipNormalOutputs && config.printTree) {\n+      throw new FlagUsageException(\"skip_normal_outputs and print_tree cannot\"\n+          + \" be used together.\");\n     }\n \n     if (config.createSourceMap.length() > 0) {\n     B options = createOptions();\n \n     List<JSModule> modules = null;\n-    Result result;\n+    Result result = null;\n \n     setRunOptions(options);\n \n     List<String> moduleSpecs = config.module;\n     if (!moduleSpecs.isEmpty()) {\n       modules = createJsModules(moduleSpecs, jsFiles);\n-      result = compiler.compileModules(externs, modules, options);\n+      if (config.skipNormalOutputs) {\n+        compiler.initModules(externs, modules, options);\n+      } else {\n+        result = compiler.compileModules(externs, modules, options);\n+      }\n     } else {\n       List<JSSourceFile> inputs = createSourceInputs(jsFiles);\n-      result = compiler.compile(externs, inputs, options);\n+      if (config.skipNormalOutputs) {\n+        compiler.init(externs, inputs, options);\n+      } else {\n+        result = compiler.compile(externs, inputs, options);\n+      }\n     }\n \n     int errCode = processResults(result, modules, options);\n       }\n     }\n \n-    if (result.success) {\n+    if (config.skipNormalOutputs) {\n+      // Output the manifest if requested.\n+      outputManifest();\n+      return 0;\n+    } else if (result.success) {\n       if (modules == null) {\n         writeOutput(\n             jsOutput, compiler, compiler.toSource(), config.outputWrapper,\n       this.languageIn = languageIn;\n       return this;\n     }\n+\n+    /**\n+     * Set whether the normal outputs of compilation should be skipped\n+     */\n+    private boolean skipNormalOutputs = false;\n+\n+    CommandLineConfig setSkipNormalOutputs(boolean skipNormalOutputs) {\n+      this.skipNormalOutputs = skipNormalOutputs;\n+      return this;\n+    }\n   }\n \n   /**", "timestamp": 1307988259, "metainfo": ""}