{"sha": "2b3560b87a5dc052d77a0e903c0d3ef5ae0020c0", "log": "When inferring the template type for a varargs template parameter, collect the types of the following parameters as well. This improves the handling of Array.prototype.push and similiar functions.  R=nicksantos DELTA=25  (24 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5911   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n       Iterator<Node> callParams,\n       Map<TemplateType, JSType> resolvedTypes) {\n     while (declParams.hasNext() && callParams.hasNext()) {\n+      Node declParam = declParams.next();\n       maybeResolveTemplatedType(\n-          getJSType(declParams.next()),\n+          getJSType(declParam),\n           getJSType(callParams.next()),\n           resolvedTypes);\n+      if (declParam.isVarArgs()) {\n+        while (callParams.hasNext()) {\n+          maybeResolveTemplatedType(\n+              getJSType(declParam),\n+              getJSType(callParams.next()),\n+              resolvedTypes);\n+        }\n+      }\n     }\n   }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"required: string\");\n   }\n \n+  public void testTemplateType4() throws Exception {\n+    testTypes(\n+        \"/**\" +\n+        \" * @param {...T} p\\n\" +\n+        \" * @return {T} \\n\" +\n+        \" * @template T\\n\" +\n+        \" */\\n\" +\n+        \"function fn(p) { return p; }\\n\" +\n+        \"/** @type {!Object} */ var x;\" +\n+        \"x = fn(3, null);\",\n+        \"assignment\\n\" +\n+        \"found   : (null|number)\\n\" +\n+        \"required: Object\");\n+  }\n+\n   public void disable_testBadTemplateType4() throws Exception {\n     // TODO(johnlenz): Add a check for useless of template types.\n     // Unless there are at least two references to a Template type in", "timestamp": 1354556131, "metainfo": ""}