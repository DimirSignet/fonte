{"sha": "b9bc1534921f1e98da5a373e39ea2d71a4a39175", "log": "fix a nasty edge case in how we handle references in externs when aliasExternals is on.  R=acleung DELTA=86  (69 added, 0 deleted, 17 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=206076   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n     //   }\n     // otherwise 'var e = 1' would be rewritten as 'e = 1'.\n     // TODO(johnlenz): Introduce a seperate scope for catch nodes.\n-    removeDuplicateDeclarations(root);\n+    removeDuplicateDeclarations(externs, root);\n     new PropogateConstantAnnotations(compiler, assertOnChange)\n         .process(externs, root);\n \n   /**\n    * Remove duplicate VAR declarations.\n    */\n-  private void removeDuplicateDeclarations(Node root) {\n+  private void removeDuplicateDeclarations(Node externs, Node root) {\n     Callback tickler = new ScopeTicklingCallback();\n     ScopeCreator scopeCreator =  new SyntacticScopeCreator(\n         compiler, new DuplicateDeclarationHandler());\n     NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);\n-    t.traverse(root);\n+    t.traverseRoots(externs, root);\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/VarCheck.java\n+++ b/src/com/google/javascript/jscomp/VarCheck.java\n \n   @Override\n   public void process(Node externs, Node root) {\n-    NodeTraversal.traverse(compiler, externs, new NameRefInExternsCheck());\n+    // Don't run externs-checking in sanity check mode. Normalization will\n+    // remove duplicate VAR declarations, which will make\n+    // externs look like they have assigns.\n+    if (!sanityCheck) {\n+      NodeTraversal.traverse(compiler, externs, new NameRefInExternsCheck());\n+    }\n+\n     NodeTraversal.traverseRoots(\n         compiler, Lists.newArrayList(externs, root), this);\n     for (String varName : varsToDeclareInExterns) {\n--- a/test/com/google/javascript/jscomp/NormalizeTest.java\n+++ b/test/com/google/javascript/jscomp/NormalizeTest.java\n          \"var a;var b; var c;a:for(;;);\");\n     test(\"if (true) a:var a,b;\",\n          \"if (true)a:{ var a; var b; }\");\n+  }\n+\n+  public void testDuplicateVarInExterns() {\n+    test(\"var extern;\",\n+         \"/** @suppress {duplicate} */ var extern = 3;\", \"extern = 3;\",\n+         null, null);\n   }\n \n   public void testUnhandled() {\n     test(\"try { } catch(e) {e; try { } catch(e) {e;}};\",\n          \"try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; \");\n \n-    // Verify global redefinition of extern definition is left alone.\n-    testSame(\"/** @suppress {duplicate} */\\nvar window;\");\n+    // Verify global redefinition of extern definition is removed.\n+    test(\"/** @suppress {duplicate} */\\nvar window;\", \"\");\n \n     // Verify local masking extern made unique.\n     test(\"function f() {var window}\",", "timestamp": 1283350734, "metainfo": ""}