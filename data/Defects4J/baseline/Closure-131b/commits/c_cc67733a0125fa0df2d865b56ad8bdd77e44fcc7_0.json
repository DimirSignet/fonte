{"sha": "cc67733a0125fa0df2d865b56ad8bdd77e44fcc7", "log": "Additional compiler changes need to allow incremental addition of files.  R=nicksantos DELTA=10  (10 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4075   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     getRoot().getLastChild().addChildToBack(newRoot);\n \n     CompilerInput newInput = new CompilerInput(ast);\n+\n+    // TODO(tylerg): handle this for multiple modules at some point.\n+    if (moduleGraph == null && !modules.isEmpty()) {\n+      // singleton module\n+      modules.get(0).add(newInput);\n+    }\n+\n     inputsById.put(ast.getInputId(), newInput);\n \n     return true;\n--- a/src/com/google/javascript/jscomp/GlobalVarReferenceMap.java\n+++ b/src/com/google/javascript/jscomp/GlobalVarReferenceMap.java\n   private void removeScriptReferences(InputId inputId) {\n     Preconditions.checkNotNull(inputId);\n \n+    if (!inputOrder.containsKey(inputId)) {\n+      return; // Input did not exist when last computed, so skip\n+    }\n     // TODO(bashir): If this is too slow it is not too difficult to make it\n     // faster with keeping an index for variables accessed in sourceName.\n     for (ReferenceCollection collection : refMap.values()) {", "timestamp": 1326404321, "metainfo": ""}