{"sha": "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450", "log": "Add --accept_const_keyword and --language_in flag so that we can accept 'const' keyword and ECMAScript5 compatible javascript source code.  R=johnlenz DELTA=115  (104 added, 0 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=480   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n       options.inputPropertyMapSerialized =\n           VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n+\n+    if (config.languageIn.length() > 0) {\n+      if (config.languageIn.equals(\"ECMASCRIPT5\") ||\n+          config.languageIn.equals(\"ES5\")) {\n+        options.languageIn = CompilerOptions.LanguageMode.ECMASCRIPT5;\n+      } else if (config.languageIn.equals(\"ECMASCRIPT3\") ||\n+                 config.languageIn.equals(\"ES3\")) {\n+        options.languageIn = CompilerOptions.LanguageMode.ECMASCRIPT3;\n+      } else {\n+        throw new FlagUsageException(\"Unknown language `\" + config.languageIn +\n+                                     \"' specified.\");\n+      }\n+    }\n+\n+    options.acceptConstKeyword = config.acceptConstKeyword;\n   }\n \n   final protected A getCompiler() {\n       this.outputManifest = outputManifest;\n       return this;\n     }\n+\n+    private boolean acceptConstKeyword = false;\n+\n+    /**\n+     * Sets whether to accept usage of 'const' keyword.\n+     */\n+    CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword) {\n+      this.acceptConstKeyword = acceptConstKeyword;\n+      return this;\n+    }\n+\n+    private String languageIn = \"\";\n+\n+    /**\n+     * Sets whether to accept input files as ECMAScript5 compliant.\n+     * Otherwise input files are treated as ECMAScript3 compliant.\n+     */\n+    CommandLineConfig setLanguageIn(String languageIn) {\n+      this.languageIn = languageIn;\n+      return this;\n+    }\n   }\n }\n--- a/src/com/google/javascript/jscomp/AbstractCompiler.java\n+++ b/src/com/google/javascript/jscomp/AbstractCompiler.java\n   abstract boolean acceptEcmaScript5();\n \n   /**\n+   * @return Whether the compiler accepts `const' keyword.\n+   */\n+  abstract boolean acceptConstKeyword();\n+\n+  /**\n    * Returns the parser configuration.\n    */\n   abstract Config getParserConfig();\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n         + \"a manifest for each module.\")\n     private String output_manifest = \"\";\n \n+    @Option(name = \"--accept_const_keyword\",\n+        usage = \"Allows usage of const keyword.\")\n+    private boolean accept_const_keyword = false;\n+\n+    @Option(name = \"--language_in\",\n+        usage = \"Sets what language spec that input sources conform. \"\n+        + \"Options: ECMASCRIPT3 (default), ECMASCRIPT5\")\n+    private String language_in = \"ECMASCRIPT3\";\n+\n     @Option(name = \"--version\",\n         handler = BooleanOptionHandler.class,\n         usage = \"Prints the compiler version to stderr.\")\n           .setCharset(flags.charset)\n           .setManageClosureDependencies(flags.manage_closure_dependencies)\n           .setClosureEntryPoints(flags.closure_entry_point)\n-          .setOutputManifest(flags.output_manifest);\n+          .setOutputManifest(flags.output_manifest)\n+          .setAcceptConstKeyword(flags.accept_const_keyword)\n+          .setLanguageIn(flags.language_in);\n     }\n   }\n \n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n   }\n \n   @Override\n+  public boolean acceptConstKeyword() {\n+    return options.acceptConstKeyword;\n+  }\n+\n+  @Override\n   Config getParserConfig() {\n     if (parserConfig == null) {\n       parserConfig = ParserRunner.createConfig(\n-        isIdeMode(), acceptEcmaScript5());\n+        isIdeMode(), acceptEcmaScript5(), acceptConstKeyword());\n     }\n     return parserConfig;\n   }\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n    */\n   LanguageMode languageIn;\n \n+\n+  /**\n+   * Whether the compiler handles `const' keyword or not.\n+   */\n+  boolean acceptConstKeyword;\n+\n   // TODO(johnlenz): Add an language output mode.\n \n   /**\n   public CompilerOptions() {\n     // Accepted language\n     languageIn = LanguageMode.ECMASCRIPT3;\n+\n+    // Language variation\n+    acceptConstKeyword = false;\n \n     // Checks\n     skipAllPasses = false;\n   }\n \n   /**\n+   * If true, accept `const' keyword.\n+   */\n+  public void setAcceptConstKeyword(boolean value) {\n+    this.acceptConstKeyword = value;\n+  }\n+\n+  /**\n    * Enable runtime type checking, which adds JS type assertions for debugging.\n    *\n    * @param logFunction A JS function to be used for logging runtime type\n--- a/src/com/google/javascript/jscomp/parsing/Config.java\n+++ b/src/com/google/javascript/jscomp/parsing/Config.java\n   final Set<String> suppressionNames;\n \n   /**\n-   * Recognized names in a {@code @suppress} tag.\n+   * Accept ECMAScript5 syntax, such as getter/setter.\n    */\n   final boolean acceptES5;\n+\n+  /**\n+   * Accept `const' keyword.\n+   */\n+  final boolean acceptConstKeyword;\n \n   /**\n    * Annotation names.\n    */\n \n   Config(Set<String> annotationWhitelist, Set<String> suppressionNames,\n-      boolean isIdeMode, boolean acceptES5) {\n+      boolean isIdeMode, boolean acceptES5, boolean acceptConstKeyword) {\n     this.annotationNames = buildAnnotationNames(annotationWhitelist);\n     this.parseJsDocDocumentation = isIdeMode;\n     this.suppressionNames = suppressionNames;\n     this.isIdeMode = isIdeMode;\n     this.acceptES5 = acceptES5;\n+    this.acceptConstKeyword = acceptConstKeyword;\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n \n     @Override\n     Node processVariableDeclaration(VariableDeclaration declarationNode) {\n+      if (!config.acceptConstKeyword && declarationNode.getType() ==\n+          com.google.javascript.jscomp.mozilla.rhino.Token.CONST) {\n+        processIllegalToken(declarationNode);\n+      }\n+\n       Node node = newNode(Token.VAR);\n       for (VariableInitializer child : declarationNode.getVariables()) {\n         node.addChildToBack(transform(child));\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n     Config config = new Config(\n         Sets.<String>newHashSet(),\n         Sets.<String>newHashSet(),\n+        false,\n         false,\n         false);\n     JsDocInfoParser parser = new JsDocInfoParser(\n--- a/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n+++ b/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n     return createConfig(isIdeMode, false);\n   }\n \n+  @Deprecated\n   public static Config createConfig(boolean isIdeMode, boolean isES5Mode) {\n+    return createConfig(isIdeMode, isES5Mode, false);\n+  }\n+\n+  public static Config createConfig(boolean isIdeMode,\n+                                    boolean isES5Mode,\n+                                    boolean acceptConstKeyword) {\n     initResourceConfig();\n-    return new Config(annotationNames, suppressionNames, isIdeMode, isES5Mode);\n+    return new Config(annotationNames, suppressionNames, isIdeMode, isES5Mode,\n+                      acceptConstKeyword);\n   }\n \n   private static synchronized void initResourceConfig() {\n--- a/src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java\n+++ b/src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java\n         return processThrowStatement((ThrowStatement) node);\n       case Token.TRY:\n         return processTryStatement((TryStatement) node);\n+      case Token.CONST:\n       case Token.VAR:\n         if (node instanceof VariableDeclaration) {\n           return processVariableDeclaration((VariableDeclaration) node);\n--- a/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n     Parser p = new Parser(environment);\n     AstRoot script = p.parse(string, null, 0);\n \n-    Config config = ParserRunner.createConfig(true, es5mode);\n+    Config config = ParserRunner.createConfig(true, es5mode, false);\n     Node root = IRFactory.transformTree(script, string, config, errorReporter);\n \n     return root;\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n     super.setUp();\n     extraAnnotations =\n         Sets.newHashSet(\n-            ParserRunner.createConfig(true, false).annotationNames.keySet());\n+            ParserRunner.createConfig(true, false, false).annotationNames.\n+            keySet());\n     extraSuppressions =\n         Sets.newHashSet(\n-            ParserRunner.createConfig(true, false).suppressionNames);\n+            ParserRunner.createConfig(true, false, false).suppressionNames);\n \n     extraSuppressions.add(\"x\");\n     extraSuppressions.add(\"y\");\n     AstRoot script = p.parse(code, null, 0);\n \n     Config config =\n-        new Config(extraAnnotations, extraSuppressions, true, false);\n+        new Config(extraAnnotations, extraSuppressions, true, false, false);\n     for (Comment comment : script.getComments()) {\n       JsDocInfoParser jsdocParser =\n         new JsDocInfoParser(\n     TestErrorReporter errorReporter = new TestErrorReporter(null, warnings);\n \n     Config config = new Config(extraAnnotations, extraSuppressions,\n-        parseDocumentation, false);\n+        parseDocumentation, false, false);\n     JsDocInfoParser jsdocParser = new JsDocInfoParser(\n         stream(comment),\n         new Comment(0, 0, CommentType.JSDOC, comment),", "timestamp": 1297229910, "metainfo": ""}