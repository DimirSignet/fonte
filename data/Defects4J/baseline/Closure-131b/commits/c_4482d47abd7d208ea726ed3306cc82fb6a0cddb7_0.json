{"sha": "4482d47abd7d208ea726ed3306cc82fb6a0cddb7", "log": "When using a flagfile preserve command-line warning guard settings and have them take presedence over the flag file. Fixes issue 916 ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=42555623", "commit": "\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n  */\n public class CommandLineRunner extends\n     AbstractCommandLineRunner<Compiler, CompilerOptions> {\n+  private static class GuardLevel {\n+    final String name;\n+    final CheckLevel level;\n+    GuardLevel(String name, CheckLevel level) {\n+      this.name = name;\n+      this.level = level;\n+    }\n+  }\n+\n   // I don't really care about unchecked warnings in this class.\n   @SuppressWarnings(\"unchecked\")\n   private static class Flags {\n-    private static final WarningGuardSpec warningGuardSpec =\n-        new WarningGuardSpec();\n+    private static List<GuardLevel> guardLevels = Lists.newArrayList();\n \n     @Option(name = \"--help\",\n         handler = BooleanOptionHandler.class,\n         usage = \"Check source validity but do not enforce Closure style \"\n         + \"rules and conventions\")\n     private boolean third_party = false;\n-\n \n     @Option(name = \"--summary_detail_level\",\n         usage = \"Controls how detailed the compilation summary is. Values:\"\n \n       @Override public void addValue(String value) throws CmdLineException {\n         proxy.addValue(value);\n-        warningGuardSpec.add(level, value);\n-      }\n+        guardLevels.add(new GuardLevel(value, level));\n+      }\n+    }\n+\n+    public static WarningGuardSpec getWarningGuardSpec() {\n+      WarningGuardSpec spec = new WarningGuardSpec();\n+      for (GuardLevel guardLevel : guardLevels) {\n+        spec.add(guardLevel.level, guardLevel.name);\n+      }\n+      return spec;\n     }\n   }\n \n     List<String> processedFileArgs\n         = processArgs(argsInFile.toArray(new String[] {}));\n     CmdLineParser parserFileArgs = new CmdLineParser(flags);\n-    Flags.warningGuardSpec.clear();\n+    // Command-line warning levels should override flag file settings,\n+    // which means they should go last.\n+    List<GuardLevel> previous = Lists.newArrayList(Flags.guardLevels);\n+    Flags.guardLevels.clear();\n     parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n+    Flags.guardLevels.addAll(previous);\n \n     // Currently we are not supporting this (prevent direct/indirect loops)\n     if (!flags.flag_file.equals(\"\")) {\n     List<String> processedArgs = processArgs(args);\n \n     CmdLineParser parser = new CmdLineParser(flags);\n-    Flags.warningGuardSpec.clear();\n+    Flags.guardLevels.clear();\n     isConfigValid = true;\n     try {\n       parser.parseArgument(processedArgs.toArray(new String[] {}));\n           .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n           .setCreateSourceMap(flags.create_source_map)\n           .setSourceMapFormat(flags.source_map_format)\n-          .setWarningGuardSpec(Flags.warningGuardSpec)\n+          .setWarningGuardSpec(Flags.getWarningGuardSpec())\n           .setDefine(flags.define)\n           .setCharset(flags.charset)\n           .setManageClosureDependencies(flags.manage_closure_dependencies)", "timestamp": 1361319502, "metainfo": ""}