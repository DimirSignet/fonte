{"sha": "b7c2861bf45b358b26ebc5ee1be9b6ce96bec78a", "log": "Fixes issue 756. http://code.google.com/p/closure-compiler/issues/detail?id=756 The bug was that a START_OF_EXPR context is passed downward to the object literal, so parentheses are inserted. The addExpr function was clearing only the IN_FOR_INIT_CLAUSE context, but it's safe to clear all contexts, so I did. The function clearContextForNoInOperator is no longer needed, so I removed it. I also deleted the old regression-test script.  R=nicksantos,johnlenz DELTA=87  (1 added, 84 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5204   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n \n   private void addExpr(Node n, int minPrecedence, Context context) {\n     if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n-        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n-        (n.isIn()))){\n+        ((context == Context.IN_FOR_INIT_CLAUSE) && n.isIn())){\n       add(\"(\");\n-      add(n, clearContextForNoInOperator(context));\n+      add(n, Context.OTHER);\n       add(\")\");\n     } else {\n       add(n, context);\n   }\n \n   /**\n-   * If we're in a IN_FOR_INIT_CLAUSE, (and thus can't permit in operators\n-   * in the expression), but have added parentheses, the expressions within\n-   * the parens have no limits.  Clear the context flag  Be safe and don't\n-   * clear the flag if it held another value.\n-   */\n-  private  Context clearContextForNoInOperator(Context context) {\n-    return (context == Context.IN_FOR_INIT_CLAUSE\n-        ? Context.OTHER : context);\n-  }\n-\n-  /**\n    * @see #appendHexJavaScriptRepresentation(int, Appendable)\n    */\n   private static void appendHexJavaScriptRepresentation(\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n     assertPrint(\"var x=({x:1})\", \"var x={x:1}\");\n     assertPrint(\"var x={'x':1}\", \"var x={\\\"x\\\":1}\");\n     assertPrint(\"var x={1:1}\", \"var x={1:1}\");\n+    assertPrint(\"({},42)+0\", \"({},42)+0\");\n   }\n \n   public void testObjectLit2() {", "timestamp": 1343075373, "metainfo": ""}