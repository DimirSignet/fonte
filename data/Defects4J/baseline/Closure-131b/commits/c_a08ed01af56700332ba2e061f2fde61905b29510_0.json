{"sha": "a08ed01af56700332ba2e061f2fde61905b29510", "log": "When a local variable has the same name as the renamePrefixNamespace, add a suffix to the name of that variable.  R=acleung,johnlenz DELTA=52  (50 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3692   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RescopeGlobalSymbols.java\n+++ b/src/com/google/javascript/jscomp/RescopeGlobalSymbols.java\n  *\n  */\n class RescopeGlobalSymbols implements CompilerPass {\n+\n+  // Appended to variables names that conflict with globalSymbolNamespace.\n+  private static final String DISAMBIGUATION_SUFFIX = \"$\";\n \n   private final AbstractCompiler compiler;\n   private final String globalSymbolNamespace;\n         return;\n       }\n       Scope.Var var = t.getScope().getVar(name);\n-      // We only care about global vars that are not extern.\n-      if (var == null || !var.isGlobal() || var.isExtern()) {\n+      if (var == null) {\n+        return;\n+      }\n+      // Don't touch externs.\n+      if (var.isExtern()) {\n+        return;\n+      }\n+      // When the globalSymbolNamespace is used as a local variable name\n+      // add suffix to avoid shadowing the namespace. Also add a suffix\n+      // if a name starts with the name of the globalSymbolnamespace and\n+      // the suffix.\n+      if (!var.isExtern() && (name.equals(globalSymbolNamespace) ||\n+          name.indexOf(globalSymbolNamespace + DISAMBIGUATION_SUFFIX) == 0)) {\n+        n.setString(name + DISAMBIGUATION_SUFFIX);\n+        compiler.reportCodeChange();\n+      }\n+      // We only care about global vars.\n+      if (!var.isGlobal()) {\n         return;\n       }\n       Node nameNode = var.getNameNode();\n--- a/test/com/google/javascript/jscomp/RescopeGlobalSymbolsTest.java\n+++ b/test/com/google/javascript/jscomp/RescopeGlobalSymbolsTest.java\n         \"try{_.a = 1}catch(e){throw e}\");\n   }\n \n+  public void testShadow() {\n+    test(\"var _ = 1; (function () { _ = 2 })()\",\n+        \"_._ = 1; (function () { _._ = 2 })()\");\n+    test(\"function foo() { var _ = {}; _.foo = foo; _.bar = 1; }\",\n+        \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1}\");\n+    test(\"function foo() { var _ = {}; _.foo = foo; _.bar = 1; \" +\n+        \"(function() { var _ = 0;})() }\",\n+        \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; \" +\n+        \"(function() { var _$ = 0;})() }\");\n+    test(\"function foo() { var _ = {}; _.foo = foo; _.bar = 1; \" +\n+        \"var _$ = 1; }\",\n+        \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; \" +\n+        \"var _$$ = 1; }\");\n+    test(\"function foo() { var _ = {}; _.foo = foo; _.bar = 1; \" +\n+        \"var _$ = 1; (function() { _ = _$ })() }\",\n+        \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; \" +\n+        \"var _$$ = 1; (function() { _$ = _$$ })() }\");\n+    test(\"function foo() { var _ = {}; _.foo = foo; _.bar = 1; \" +\n+        \"var _$ = 1, _$$ = 2 (function() { _ = _$ = _$$; \" +\n+        \"var _$, _$$$ })() }\",\n+        \"_.foo = function () { var _$ = {}; _$.foo = _.foo; _$.bar = 1; \" +\n+        \"var _$$ = 1, _$$$ = 2 (function() { _$ = _$$ = _$$$; \" +\n+        \"var _$$, _$$$$ })() }\");\n+    test(\"function foo() { var _a = 1;}\",\n+        \"_.foo = function () { var _a = 1;}\");\n+    // We accept this unnecessary renaming as acceptable to simplify pattern\n+    // matching in the traversal.\n+    test(\"function foo() { var _$a = 1;}\",\n+        \"_.foo = function () { var _$a$ = 1;}\");\n+  }\n+\n   private class StringCompare extends CompilerTestCase {\n \n     StringCompare() {", "timestamp": 1321024823, "metainfo": ""}