{"sha": "75f82cdbdd71492aba8e462fdd58645cfd46c27f", "log": "Add toMaybeParameterizedType and toMaybeTemplateType  R=nicksantos DELTA=50  (44 added, 0 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4972   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n     }\n \n     int startIndex = 0, endIndex = input.length() - 1;\n-    \n-    // Remove leading zeros\n-    while (startIndex < input.length() && input.charAt(startIndex) == '0' &&\n-        input.charAt(startIndex) != '.') {\n+    while (startIndex < input.length() && input.charAt(startIndex) == '0') {\n       startIndex++;\n     }\n-    \n-    // Remove trailing zeros only after the decimal\n-    if (input.indexOf('.') >= 0) {\n-      while (endIndex >= 0 && input.charAt(endIndex) == '0') {\n-        endIndex--;\n-      }\n-      if (input.charAt(endIndex) == '.') {\n-        endIndex--;\n-      }\n+    while (endIndex >= 0 && input.charAt(endIndex) == '0') {\n+      endIndex--;\n     }\n     if (startIndex >= endIndex) {\n       return input;\n       }\n \n       stringVal = NodeUtil.trimJsWhiteSpace(stringVal);\n-      if (stringVal.length() == 0) {\n-        return n;\n-      }\n     }\n \n     Node newNode;\n-    if (stringVal.equals(\"0\")) {\n-      // Special case for parseInt(\"0\") or parseFloat(\"0\")\n-      newNode = IR.number(0);\n-    } else if (isParseInt) {\n+    if (isParseInt) {\n       if (radix == 0 || radix == 16) {\n         if (stringVal.length() > 1 &&\n             stringVal.substring(0, 2).equalsIgnoreCase(\"0x\")) {\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n     return null;\n   }\n \n-  public boolean isTemplateType() {\n-    return false;\n+  public final boolean isParameterizedType() {\n+    return toMaybeParameterizedType() != null;\n+  }\n+\n+  /**\n+   * Downcasts this to a ParameterizedType, or returns null if this is not\n+   * a function.\n+   */\n+  public ParameterizedType toMaybeParameterizedType() {\n+    return null;\n+  }\n+\n+  /**\n+   * Null-safe version of toMaybeParameterizedType().\n+   */\n+  public static ParameterizedType toMaybeParameterizedType(JSType type) {\n+    return type == null ? null : type.toMaybeParameterizedType();\n+  }\n+\n+  public final boolean isTemplateType() {\n+    return toMaybeTemplateType() != null;\n+  }\n+\n+  /**\n+   * Downcasts this to a TemplateType, or returns null if this is not\n+   * a function.\n+   */\n+  public TemplateType toMaybeTemplateType() {\n+    return null;\n+  }\n+\n+  /**\n+   * Null-safe version of toMaybeTemplateType().\n+   */\n+  public static TemplateType toMaybeTemplateType(JSType type) {\n+    return type == null ? null : type.toMaybeTemplateType();\n   }\n \n   public boolean hasAnyTemplate() {\n--- a/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n+++ b/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n   }\n \n   @Override\n+  public ParameterizedType toMaybeParameterizedType() {\n+    return this;\n+  }\n+\n+  @Override\n   public boolean hasAnyTemplateInternal() {\n     return super.hasAnyTemplate() || parameterType.hasAnyTemplate();\n   }\n--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n   }\n \n   @Override\n-  public boolean isTemplateType() {\n-    return referencedType.isTemplateType();\n+  public ParameterizedType toMaybeParameterizedType() {\n+    return referencedType.toMaybeParameterizedType();\n+  }\n+\n+  @Override\n+  public TemplateType toMaybeTemplateType() {\n+    return referencedType.toMaybeTemplateType();\n   }\n \n   @Override\n--- a/src/com/google/javascript/rhino/jstype/TemplateType.java\n+++ b/src/com/google/javascript/rhino/jstype/TemplateType.java\n   }\n \n   @Override\n-  public boolean isTemplateType() {\n-    return true;\n+  public TemplateType toMaybeTemplateType() {\n+    return this;\n   }\n \n   @Override\n--- a/test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java\n     fold(\"x = parseInt('0xA', 16)\", \"x = 10\");\n     fold(\"x = parseInt('07', 8)\", \"x = 7\");\n     fold(\"x = parseInt('08')\", \"x = 8\");\n-    fold(\"x = parseInt('0')\", \"x = 0\");\n-    fold(\"x = parseFloat('0')\", \"x = 0\");\n     fold(\"x = parseFloat('1.23')\", \"x = 1.23\");\n     fold(\"x = parseFloat('1.2300')\", \"x = 1.23\");\n     fold(\"x = parseFloat(' 0.3333')\", \"x = 0.3333\");\n-    fold(\"x = parseFloat('0100')\", \"x = 100\");\n-    fold(\"x = parseFloat('0100.000')\", \"x = 100\");\n \n     //Mozilla Dev Center test cases\n     fold(\"x = parseInt(' 0xF', 16)\", \"x = 15\");\n \n     //Invalid calls\n     foldSame(\"x = parseInt('0xa', 10)\");\n-    foldSame(\"x = parseInt('')\");\n \n     enableEcmaScript5(false);\n     foldSame(\"x = parseInt('08')\");", "timestamp": 1339178167, "metainfo": ""}