{"sha": "6588923bf1f47ee23764ea41f3e73febb92e3053", "log": "Fix a compiler crash for a rare case when type-checking unannotated code. Also, now that source info is attached to nodes, use that for source info in exceptions when available.  R=johnlenz DELTA=34  (27 added, 0 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5282   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeTraversal.java\n+++ b/src/com/google/javascript/jscomp/NodeTraversal.java\n   private static final String MISSING_SOURCE = \"[source unknown]\";\n \n   private String formatNodePosition(Node n) {\n-    if (n == null) {\n+    String sourceFileName = getBestSourceFileName(n);\n+    if (sourceFileName == null) {\n       return MISSING_SOURCE + \"\\n\";\n     }\n \n     int lineNumber = n.getLineno();\n     int columnNumber = n.getCharno();\n-    String src = compiler.getSourceLine(sourceName, lineNumber);\n+    String src = compiler.getSourceLine(sourceFileName, lineNumber);\n     if (src == null) {\n       src = MISSING_SOURCE;\n     }\n-    return sourceName + \":\" + lineNumber + \":\" + columnNumber + \"\\n\"\n+    return sourceFileName + \":\" + lineNumber + \":\" + columnNumber + \"\\n\"\n         + src + \"\\n\";\n   }\n \n   /** Reports a diagnostic (error or warning) */\n   public void report(Node n, DiagnosticType diagnosticType,\n       String... arguments) {\n-    JSError error = JSError.make(getSourceName(), n, diagnosticType, arguments);\n+    JSError error = JSError.make(getBestSourceFileName(n),\n+        n, diagnosticType, arguments);\n     compiler.report(error);\n   }\n \n    */\n   public JSError makeError(Node n, CheckLevel level, DiagnosticType type,\n       String... arguments) {\n-    return JSError.make(getSourceName(), n, level, type, arguments);\n+    return JSError.make(getBestSourceFileName(n), n, level, type, arguments);\n   }\n \n   /**\n    * @param arguments Arguments to be incorporated into the message\n    */\n   public JSError makeError(Node n, DiagnosticType type, String... arguments) {\n-    return JSError.make(getSourceName(), n, type, arguments);\n+    return JSError.make(getBestSourceFileName(n), n, type, arguments);\n+  }\n+\n+  private String getBestSourceFileName(Node n) {\n+    return n == null ? sourceName : n.getSourceFileName();\n   }\n }\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n \n           // Infer the context type.\n           boolean searchedForThisType = false;\n-          if (ownerType != null && ownerType.isFunctionPrototypeType()) {\n+          if (ownerType != null && ownerType.isFunctionPrototypeType() &&\n+              ownerType.getOwnerFunction().hasInstanceType()) {\n             builder.inferThisType(\n                 info, ownerType.getOwnerFunction().getInstanceType());\n             searchedForThisType = true;\n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n     assertEquals(Lists.newArrayList(foo), registry.getTypesWithProperty(\"Bar\"));\n   }\n \n+  public void testPrototypePropertyMethodWithoutAnnotation() {\n+    testSame(\"var Foo = function Foo() {};\" +\n+             \"var proto = Foo.prototype = {\" +\n+             \"   bar: function(a, b){}\" +\n+             \"};\" +\n+             \"proto.baz = function(c) {};\" +\n+             \"(function() { proto.baz = function() {}; })();\");\n+    ObjectType foo = (ObjectType) findNameType(\"Foo\", globalScope);\n+    assertTrue(foo.hasProperty(\"prototype\"));\n+\n+    ObjectType fooProto = (ObjectType) foo.getPropertyType(\"prototype\");\n+    assertTrue(fooProto.hasProperty(\"bar\"));\n+    assertEquals(\"function (?, ?): undefined\",\n+        fooProto.getPropertyType(\"bar\").toString());\n+\n+    assertTrue(fooProto.hasProperty(\"baz\"));\n+    assertEquals(\"function (?): undefined\",\n+        fooProto.getPropertyType(\"baz\").toString());\n+  }\n+\n   public void testEnumProperty() {\n     testSame(\"var foo = {}; /** @enum */ foo.Bar = {XXX: 'xxx'};\");\n     ObjectType foo = (ObjectType) findNameType(\"foo\", globalScope);", "timestamp": 1343687631, "metainfo": ""}