{"sha": "4dfd943bd8896e062c6f03e8f658c6579efcbc17", "log": "Add support in the Rhino parser for annotating function parameters and catch expressions.  R=nicksantos DELTA=53  (46 added, 6 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5745   ", "commit": "\n--- a/lib/rhino/src/org/mozilla/javascript/Parser.java\n+++ b/lib/rhino/src/org/mozilla/javascript/Parser.java\n                 destructuring.put(pname, expr);\n             } else {\n                 if (mustMatchToken(Token.NAME, \"msg.no.parm\")) {\n-                    fnNode.addParam(createNameNode());\n+                    Name paramNameNode = createNameNode();\n+                    Comment jsdocNodeForName = getAndResetJsDoc();\n+                    if (jsdocNodeForName != null) {\n+                      paramNameNode.setJsDocNode(jsdocNodeForName);\n+                    }\n+                    fnNode.addParam(paramNameNode);\n                     String paramName = ts.getString();\n                     defineSymbol(Token.LP, paramName);\n                     if (this.inUseStrictDirective) {\n                     lp = ts.tokenBeg;\n \n                 mustMatchToken(Token.NAME, \"msg.bad.catchcond\");\n+\n                 Name varName = createNameNode();\n+                Comment jsdocNodeForName = getAndResetJsDoc();\n+                if (jsdocNodeForName != null) {\n+                  varName.setJsDocNode(jsdocNodeForName);\n+                }\n                 String varNameString = varName.getIdentifier();\n                 if (inUseStrictDirective) {\n                     if (\"eval\".equals(varNameString) ||\n--- a/lib/rhino/testsrc/org/mozilla/javascript/tests/ParserTest.java\n+++ b/lib/rhino/testsrc/org/mozilla/javascript/tests/ParserTest.java\n         assertNotNull(st.getJsDoc());\n     }\n \n+    public void testJSDocAttachment17() {\n+      AstRoot root = parse(\n+      \"try { throw 'a'; } catch (/** @type {string} */ e) {\\n\" +\n+      \"}\\n\");\n+      assertNotNull(root.getComments());\n+      assertEquals(1, root.getComments().size());\n+\n+      TryStatement tryNode = (TryStatement) root.getFirstChild();\n+      CatchClause catchNode = tryNode.getCatchClauses().get(0);\n+      assertNotNull(catchNode.getVarName().getJsDoc());\n+    }\n+\n+    public void testJSDocAttachment18() {\n+      AstRoot root = parse(\n+      \"function f(/** @type {string} */ e) {}\\n\");\n+      assertNotNull(root.getComments());\n+      assertEquals(1, root.getComments().size());\n+\n+      FunctionNode function = (FunctionNode) root.getFirstChild();\n+      AstNode param = function.getParams().get(0);\n+      assertNotNull(param.getJsDoc());\n+    }\n+\n     public void testParsingWithoutJSDoc() {\n         AstRoot root = parse(\"var a = /** @type number */(x);\", false);\n         assertNotNull(root.getComments());\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n           FunctionNode fnNode = (FunctionNode)node;\n           valid = fnNode.getFunctionType() == FunctionNode.FUNCTION_STATEMENT;\n           break;\n+        // Object literal properties and catch declarations are valid.\n+        case com.google.javascript.rhino.head.Token.NAME:\n+          valid = node.getParent() instanceof ObjectProperty\n+              || node.getParent() instanceof CatchClause\n+              || node.getParent() instanceof FunctionNode;\n+          break;\n         // Object literal properties are valid\n         case com.google.javascript.rhino.head.Token.GET:\n         case com.google.javascript.rhino.head.Token.SET:\n-        case com.google.javascript.rhino.head.Token.NAME:\n         case com.google.javascript.rhino.head.Token.NUMBER:\n         case com.google.javascript.rhino.head.Token.STRING:\n           valid = node.getParent() instanceof ObjectProperty;\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n         MISPLACED_TYPE_ANNOTATION);\n   }\n \n-  public void testMisplacedTypeAnnotation7() {\n-    // TODO(johnlenz): handle this case\n-    parse(\"function f(/** @type {string} */ a) {}\");\n-  }\n-\n   public void testValidTypeAnnotation1() {\n     parse(\"/** @type {string} */ var o = 'str';\");\n     parse(\"var /** @type {string} */ o = 'str', /** @type {number} */ p = 0;\");\n     mode = LanguageMode.ECMASCRIPT5;\n     parse(\"var o = { /** @type {string} */ get prop() { return 'str' }};\");\n     parse(\"var o = { /** @type {string} */ set prop(s) {}};\");\n+  }\n+\n+  public void testValidTypeAnnotation3() {\n+    // These two we don't currently support in the type checker but\n+    // we would like to.\n+    parse(\"try {} catch (/** @type {Error} */ e) {}\");\n+    parse(\"function f(/** @type {string} */ a) {}\");\n   }\n \n   /**", "timestamp": 1352095286, "metainfo": ""}