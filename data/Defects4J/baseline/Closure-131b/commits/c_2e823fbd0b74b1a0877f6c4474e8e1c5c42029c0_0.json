{"sha": "2e823fbd0b74b1a0877f6c4474e8e1c5c42029c0", "log": "Fixes issue 370 http://code.google.com/p/closure-compiler/issues/detail?id=370 Warn when comparing the result of a TYPEOF to a string that does not correspond to a type name. Note that the TYPEOF can be arbitrarily far from the mistyped string, and in this case we won't emit a warning, eg, var s = typeof 123; if (s == 'numbr') ...  The earliest this error can be detected is in caseTypeof in SemanticReverseAbstractInterpreter.java. However, all warnings are emitted during the type-checking phase, so I perform the test there in order to have access to the validator.  R=nicksantos,johnlenz DELTA=37  (32 added, 1 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5284   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n       case Token.NE:\n       case Token.SHEQ:\n       case Token.SHNE: {\n-        leftType = getJSType(n.getFirstChild());\n-        rightType = getJSType(n.getLastChild());\n+        left = n.getFirstChild();\n+        right = n.getLastChild();\n+\n+        if (left.isTypeOf()) {\n+          if (right.isString()) {\n+            checkTypeofString(t, right, right.getString());\n+          }\n+        } else if (right.isTypeOf() && left.isString()) {\n+          checkTypeofString(t, left, left.getString());\n+        }\n+\n+        leftType = getJSType(left);\n+        rightType = getJSType(right);\n \n         // We do not want to warn about explicit comparisons to VOID. People\n         // often do this if they think their type annotations screwed up.\n \n         TernaryValue result = TernaryValue.UNKNOWN;\n         if (n.getType() == Token.EQ || n.getType() == Token.NE) {\n-          result = leftTypeRestricted.testForEquality(\n-              rightTypeRestricted);\n+          result = leftTypeRestricted.testForEquality(rightTypeRestricted);\n           if (n.isNE()) {\n             result = result.not();\n           }\n     }\n \n     checkNoTypeCheckSection(n, false);\n+  }\n+\n+  private void checkTypeofString(NodeTraversal t, Node n, String s) {\n+    if (!(s.equals(\"number\") || s.equals(\"string\") || s.equals(\"boolean\") ||\n+          s.equals(\"undefined\") || s.equals(\"function\") || s.equals(\"object\"))){\n+      validator.expectValidTypeofName(t, n, s);\n+    }\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n         \"original: {2}\\n\" +\n         \"override: {3}\");\n \n+  static final DiagnosticType UNKNOWN_TYPEOF_VALUE =\n+      DiagnosticType.warning(\"JSC_UNKNOWN_TYPEOF_VALUE\", \"unknown type: {0}\");\n+\n   static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n       INVALID_CAST,\n       TYPE_MISMATCH_WARNING,\n       DUP_VAR_DECLARATION,\n       HIDDEN_PROPERTY_MISMATCH,\n       INTERFACE_METHOD_NOT_IMPLEMENTED,\n-      HIDDEN_INTERFACE_PROPERTY_MISMATCH);\n+      HIDDEN_INTERFACE_PROPERTY_MISMATCH,\n+      UNKNOWN_TYPEOF_VALUE);\n \n   TypeValidator(AbstractCompiler compiler) {\n     this.compiler = compiler;\n   // expectCondition(NodeTraversal t, Node n, ...);\n   // If there is a mismatch, the {@code expect} method should issue\n   // a warning and attempt to correct the mismatch, when possible.\n+\n+  void expectValidTypeofName(NodeTraversal t, Node n, String found) {\n+    report(JSError.make(t.getSourceName(), n, UNKNOWN_TYPEOF_VALUE, found));\n+  }\n \n   /**\n    * Expect the type to be an object, or a type convertible to object. If the\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n     testTypes(\"/**@return {void}*/function foo(){ var a = typeof foo(); }\");\n   }\n \n+  public void testTypeof2() throws Exception {\n+    testTypes(\"function f(){ if (typeof 123 == 'numbr') return 321; }\",\n+              \"unknown type: numbr\");\n+  }\n+\n   public void testConstructorType1() throws Exception {\n     testTypes(\"/**@constructor*/function Foo(){}\" +\n         \"/**@type{!Foo}*/var f = new Date();\",", "timestamp": 1343839015, "metainfo": ""}