{"sha": "840ddca5b28cea7563a5be20d2624478af67bc02", "log": "Fix a regression for when the user assigns an unknown value to a prototype. We don't need to handle this case well, as long as we handle it consistently.  R=johnlenz DELTA=73  (73 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=298   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n       return false;\n     }\n \n+    boolean replacedPrototype = prototype != null;\n     this.prototype = prototype;\n \n     if (isConstructor() || isInterface()) {\n         superClass.addSubType(this);\n       }\n     }\n+\n+    if (replacedPrototype) {\n+      clearCachedValues();\n+    }\n+\n     return true;\n   }\n \n     subTypes.add(subType);\n   }\n \n+  @Override\n+  void clearCachedValues() {\n+    super.clearCachedValues();\n+\n+    if (subTypes != null) {\n+      for (FunctionType subType : subTypes) {\n+        subType.clearCachedValues();\n+      }\n+    }\n+\n+    if (!isNativeObjectType()) {\n+      if (hasInstanceType()) {\n+        getInstanceType().clearCachedValues();\n+      }\n+\n+      if (prototype != null) {\n+        prototype.clearCachedValues();\n+      }\n+    }\n+  }\n+\n   /**\n    * Returns a list of types that are subtypes of this type. This is only valid\n    * for constructor functions, and may be null. This allows a downward\n--- a/src/com/google/javascript/rhino/jstype/ObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java\n     return !unknown;\n   }\n \n+  void clearCachedValues() {\n+    unknown = true;\n+  }\n+\n   /** Whether this is a built-in object. */\n   public boolean isNativeObjectType() {\n     return false;\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n     assertTrue(type instanceof FunctionType);\n     FunctionType fType = (FunctionType) type;\n     assertEquals(\"A\", fType.getReferenceName());\n+  }\n+\n+  public void testConstructorType8() throws Exception {\n+    testTypes(\n+        \"var ns = {};\" +\n+        \"ns.create = function() { return function() {}; };\" +\n+        \"/** @constructor */ ns.Foo = ns.create();\" +\n+        \"ns.Foo.prototype = {x: 0, y: 0};\" +\n+        \"/**\\n\" +\n+        \" * @param {ns.Foo} foo\\n\" +\n+        \" * @return {string}\\n\" +\n+        \" */\\n\" +\n+        \"function f(foo) {\" +\n+        \"  return foo.x;\" +\n+        \"}\",\n+        \"inconsistent return type\\n\" +\n+        \"found   : number\\n\" +\n+        \"required: string\");\n+  }\n+\n+  public void testConstructorType9() throws Exception {\n+    testTypes(\n+        \"var ns = {};\" +\n+        \"ns.create = function() { return function() {}; };\" +\n+        \"ns.extend = function(x) { return x; };\" +\n+        \"/** @constructor */ ns.Foo = ns.create();\" +\n+        \"ns.Foo.prototype = ns.extend({x: 0, y: 0});\" +\n+        \"/**\\n\" +\n+        \" * @param {ns.Foo} foo\\n\" +\n+        \" * @return {string}\\n\" +\n+        \" */\\n\" +\n+        \"function f(foo) {\" +\n+        \"  return foo.x;\" +\n+        \"}\");\n   }\n \n   public void testAnonymousType1() throws Exception {\n--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n     assertTrue(objReturnBoolean.canAssignTo(ifaceReturnBoolean));\n   }\n \n+  public void testCtorWithPrototypeSet() {\n+    FunctionType ctor = registry.createConstructorType(\n+        \"Foo\", null, null, null);\n+    assertFalse(ctor.getInstanceType().isUnknownType());\n+    ctor.defineDeclaredProperty(\"prototype\", UNKNOWN_TYPE, false, null);\n+    assertTrue(ctor.getInstanceType().isUnknownType());\n+  }\n+\n   private void assertLeastSupertype(String s, JSType t1, JSType t2) {\n     assertEquals(s, t1.getLeastSupertype(t2).toString());\n     assertEquals(s, t2.getLeastSupertype(t1).toString());", "timestamp": 1295371642, "metainfo": ""}