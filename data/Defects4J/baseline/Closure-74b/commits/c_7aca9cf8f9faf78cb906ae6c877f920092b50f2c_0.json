{"sha": "7aca9cf8f9faf78cb906ae6c877f920092b50f2c", "log": "Fix a bug where type inference was getting short-circuited too early  R=acleung DELTA=56  (45 added, 7 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=113   ", "commit": "\n--- a/src/com/google/javascript/jscomp/LinkedFlowScope.java\n+++ b/src/com/google/javascript/jscomp/LinkedFlowScope.java\n       return true;\n     }\n \n-    // Both slots must be non-null.\n-    JSType aType = slotA.getType();\n-    JSType bType = slotB.getType();\n-    if (aType.isNoType() || bType.isNoType()) {\n-      return false;\n-    }\n-\n-    // Both types must be non-null.\n-    return aType.differsFrom(bType);\n+    // Both slots and types must be non-null.\n+    return slotA.getType().differsFrom(slotB.getType());\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/LinkedFlowScopeTest.java\n+++ b/test/com/google/javascript/jscomp/LinkedFlowScopeTest.java\n         childA.findUniqueRefinedSlot(localEntry).getType());\n   }\n \n-  public void testDiffer() {\n+  public void testDiffer1() {\n     FlowScope childA = localEntry.createChildFlowScope();\n     childA.inferSlotType(\"localB\", NUMBER_TYPE);\n \n     childBC.inferSlotType(\"localA\", NO_TYPE);\n \n     assertScopesSame(childAB, childB);\n-    assertScopesSame(childABC, childBC);\n+    assertScopesDiffer(childABC, childBC);\n \n     assertScopesDiffer(childABC, childB);\n     assertScopesDiffer(childAB, childBC);\n     assertScopesDiffer(childA, childABC);\n     assertScopesDiffer(childA, childB);\n     assertScopesDiffer(childA, childBC);\n+  }\n+\n+  public void testDiffer2() {\n+    FlowScope childA = localEntry.createChildFlowScope();\n+    childA.inferSlotType(\"localA\", NUMBER_TYPE);\n+\n+    FlowScope childB = localEntry.createChildFlowScope();\n+    childB.inferSlotType(\"localA\", NO_TYPE);\n+\n+    assertScopesDiffer(childA, childB);\n   }\n \n   private void assertScopesDiffer(FlowScope a, FlowScope b) {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"var f = function(x) {\\n\" +\n         \"if (!x || x == 1) { return 1; } else { return x; }\\n\" +\n         \"};\");\n+  }\n+\n+  public void testControlFlowRestrictsType10() throws Exception {\n+    // We should correctly infer that y will be (null|{}) because\n+    // the loop wraps around.\n+    testTypes(\"/** @param {number} x */ function f(x) {}\" +\n+        \"function g() {\" +\n+        \"  var y = null;\" +\n+        \"  for (var i = 0; i < 10; i++) {\" +\n+        \"    f(y);\" +\n+        \"    if (y != null) {\" +\n+        \"      // y is None the first time it goes thru this branch\\n\" +\n+        \"    } else {\" +\n+        \"      y = {};\" +\n+        \"    }\" +\n+        \"  }\" +\n+        \"};\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n+        \"found   : (null|{})\\n\" +\n+        \"required: number\");\n+  }\n+\n+  public void testControlFlowRestrictsType11() throws Exception {\n+    testTypes(\"/** @param {boolean} x */ function f(x) {}\" +\n+        \"function g() {\" +\n+        \"  var y = null;\" +\n+        \"  if (y != null) {\" +\n+        \"    for (var i = 0; i < 10; i++) {\" +\n+        \"      f(y);\" +\n+        \"    }\" +\n+        \"  }\" +\n+        \"};\",\n+        \"condition always evaluates to false\\n\" +\n+        \"left : null\\n\" +\n+        \"right: null\");\n   }\n \n   public void testSwitchCase3() throws Exception {", "timestamp": 1292007688, "metainfo": ""}