{"sha": "fe722ddeb545b6b3103369dea073ad3e6becde28", "log": "Add an alias for the --define flag to ensure the api is backwards compatible.  (Nick) R=robert DELTA=9  (6 added, 0 deleted, 3 changed)  Change the default pretty printer so that then clauses of if statements and bodies of for statements get printed in blocks and on separate lines even if the the body is a single statement: if (a) { b } rather than if (a) b; This makes it easier to put breakpoints on the then clause rather than only on the entire if statement. (Robert) R=john DELTA=125  (122 added, 0 deleted, 3 changed)  Revision created by MOE tool push_codebase. MOE_MIGRATION=   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n             ch == '$' ||\n             Character.isLetterOrDigit(ch));\n   }\n+\n+  /**\n+   * If the body of a for loop or the then clause of an if statement has\n+   * a single statement, should it be wrapped in a block?  Doing so can\n+   * help when pretty-printing the code, and permits putting a debugging\n+   * breakpoint on the statement inside the condition.\n+   *\n+   * @return {@boolean true} if such expressions should be wrapped\n+   */\n+  boolean shouldPreserveExtraBlocks() {\n+    return false;\n+  }\n }\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n       }\n     }\n \n-    // Strip unneeded blocks, that is blocks with <2 children.\n-    if (n.getType() == Token.BLOCK) {\n+    // Strip unneeded blocks, that is blocks with <2 children unless\n+    // the CodePrinter specifically wants to keep them.\n+    if (n.getType() == Token.BLOCK ) {\n       int count = getNonEmptyChildCount(n);\n       if (count == 0) {\n         cc.endStatement(true);\n         //   Safari needs a block around function declarations.\n         //   IE6/7 needs a block around DOs.\n         Node firstAndOnlyChild = getFirstNonEmptyChild(n);\n-        if (firstAndOnlyChild.getType() == Token.FUNCTION ||\n+        boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();\n+        if (alwaysWrapInBlock ||\n+            firstAndOnlyChild.getType() == Token.FUNCTION ||\n             firstAndOnlyChild.getType() == Token.DO) {\n           cc.beginBlock();\n           add(firstAndOnlyChild, Context.STATEMENT);\n--- a/src/com/google/javascript/jscomp/CodePrinter.java\n+++ b/src/com/google/javascript/jscomp/CodePrinter.java\n       } else {\n         append(op);\n       }\n+    }\n+\n+    /**\n+     * If the body of a for loop or the then clause of an if statement has\n+     * a single statement, should it be wrapped in a block?\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    boolean shouldPreserveExtraBlocks() {\n+      // When pretty-printing, always place the statement in its own block\n+      // so it is printed on a separate line.  This allows breakpoints to be\n+      // placed on the statement.\n+      return true;\n     }\n   }\n \n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n \n     // Make sure we don't treat non-latin character escapes as raw strings.\n     assertPrint(\"({ 'a': 4, '\\\\u0100': 4 })\", \"({a:4,\\\"\\\\u0100\\\":4})\");\n+\n+    // Test if statement and for statements with single statements in body.\n+    assertPrint(\"if (true) { alert();}\", \"if(true)alert()\");\n+    assertPrint(\"if (false) {} else {alert(\\\"a\\\");}\",\n+        \"if(false);else alert(\\\"a\\\")\");\n+    assertPrint(\"for(;;) { alert();};\", \"for(;;)alert()\");\n+\n+    assertPrint(\"do { alert(); } while(true);\",\n+        \"do alert();while(true)\");\n+    assertPrint(\"myLabel: { alert();}\",\n+        \"myLabel:alert()\");\n+    assertPrint(\"myLabel: for(;;) continue myLabel;\",\n+        \"myLabel:for(;;)continue myLabel\");\n \n     // Test nested var statement\n     assertPrint(\"if (true) var x; x = 4;\", \"if(true)var x;x=4\");\n     assertPrettyPrint(\"(function(){})();\",\"(function() {\\n})()\");\n     assertPrettyPrint(\"var a = (function() {});alert(a);\",\n         \"var a = function() {\\n};\\nalert(a)\");\n+\n+    // Check we correctly handle putting brackets around all if clauses so\n+    // we can put breakpoints inside statements.\n+    assertPrettyPrint(\"if (1) {}\",\n+        \"if(1);\");\n+    assertPrettyPrint(\"if (1) {alert(\\\"\\\");}\",\n+        \"if(1) {\\n\" +\n+        \"  alert(\\\"\\\")\\n\" +\n+        \"}\");\n+    assertPrettyPrint(\"if (1)alert(\\\"\\\");\",\n+        \"if(1) {\\n\" +\n+        \"  alert(\\\"\\\")\\n\" +\n+        \"}\");\n+    assertPrettyPrint(\"if (1) {alert();alert();}\",\n+        \"if(1) {\\n\" +\n+        \"  alert();\\n\" +\n+        \"  alert()\\n\" +\n+        \"}\");\n+\n+    // Don't add blocks if they weren't there already.\n+    assertPrettyPrint(\"label: alert();\",\n+        \"label:alert()\");\n+\n+    // But if statements and loops get blocks automagically.\n+    assertPrettyPrint(\"if (1) alert();\",\n+        \"if(1) {\\n\" +\n+        \"  alert()\\n\" +\n+        \"}\");\n+    assertPrettyPrint(\"for (;;) alert();\",\n+        \"for(;;) {\\n\" +\n+        \"  alert()\\n\" +\n+        \"}\");\n+\n+    assertPrettyPrint(\"while (1) alert();\",\n+        \"while(1) {\\n\" +\n+        \"  alert()\\n\" +\n+        \"}\");\n+\n+    // Do we put else clauses in blocks?\n+    assertPrettyPrint(\"if (1) {} else {alert(a);}\",\n+        \"if(1);else {\\n  alert(a)\\n}\");\n+\n+    // Do we add blocks to else clauses?\n+    assertPrettyPrint(\"if (1) alert(a); else alert(b);\",\n+        \"if(1) {\\n\" +\n+        \"  alert(a)\\n\" +\n+        \"}else {\\n\" +\n+        \"  alert(b)\\n\" +\n+        \"}\");\n+\n+    // Do we put for bodies in blocks?\n+    assertPrettyPrint(\"for(;;) { alert();}\",\n+        \"for(;;) {\\n\" +\n+         \"  alert()\\n\" +\n+         \"}\");\n+    assertPrettyPrint(\"for(;;) {}\",\n+        \"for(;;);\");\n+    assertPrettyPrint(\"for(;;) { alert(); alert(); }\",\n+        \"for(;;) {\\n\" +\n+        \"  alert();\\n\" +\n+        \"  alert()\\n\" +\n+        \"}\");\n+\n+    // How about do loops?\n+    assertPrettyPrint(\"do { alert(); } while(true);\",\n+        \"do {\\n\" +\n+        \"  alert()\\n\" +\n+        \"}while(true)\");\n+\n+    // label?\n+    assertPrettyPrint(\"myLabel: { alert();}\",\n+        \"myLabel: {\\n\" +\n+        \"  alert()\\n\" +\n+        \"}\");\n+\n+    // Don't move the label on a loop, because then break {label} and\n+    // continue {label} won't work.\n+    assertPrettyPrint(\"myLabel: for(;;) continue myLabel;\",\n+        \"myLabel:for(;;) {\\n\" +\n+        \"  continue myLabel\\n\" +\n+        \"}\");\n   }\n \n   public void testTypeAnnotations() {", "timestamp": 1268695432, "metainfo": ""}