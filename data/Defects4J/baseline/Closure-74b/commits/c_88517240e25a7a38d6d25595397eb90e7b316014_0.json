{"sha": "88517240e25a7a38d6d25595397eb90e7b316014", "log": "Fix some problems with testForEquality, and write an exhaustive test for it.  R=johnlenz DELTA=27  (25 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=252   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n   }\n \n   TernaryValue testForEqualityHelper(JSType aType, JSType bType) {\n-    if (bType.isAllType() || bType.isEmptyType() || bType.isUnknownType()) {\n+    if (bType.isAllType() || bType.isEmptyType() || bType.isUnknownType() ||\n+        aType.isAllType() || aType.isEmptyType() || aType.isUnknownType()) {\n       return UNKNOWN;\n     }\n     if (aType.isFunctionType() || bType.isFunctionType()) {\n       // In practice, how a function serializes to a string is\n       // implementation-dependent, so it does not really make sense to test\n       // for equality with a string.\n-      if (otherType.isSubtype(getNativeType(JSTypeNative.OBJECT_TYPE))) {\n+      if (!otherType.getGreatestSubtype(\n+              getNativeType(JSTypeNative.OBJECT_TYPE)).isEmptyType()) {\n         return TernaryValue.UNKNOWN;\n       } else {\n         return TernaryValue.FALSE;\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n     compare(FALSE, U2U_CONSTRUCTOR_TYPE, NULL_TYPE);\n     compare(UNKNOWN, U2U_CONSTRUCTOR_TYPE, OBJECT_TYPE);\n     compare(UNKNOWN, U2U_CONSTRUCTOR_TYPE, ALL_TYPE);\n+\n+    compare(UNKNOWN, NULL_TYPE, subclassOfUnresolvedNamedType);\n+\n+    JSType functionAndNull = createUnionType(NULL_TYPE, dateMethod);\n+    compare(UNKNOWN, functionAndNull, dateMethod);\n   }\n \n   private void compare(TernaryValue r, JSType t1, JSType t2) {\n                               );\n   }\n \n+  public void testSymmetryOfTestForEquality() {\n+    List<JSType> listA = getTypesToTestForSymmetry();\n+    List<JSType> listB = getTypesToTestForSymmetry();\n+    for (JSType typeA : listA) {\n+      for (JSType typeB : listB) {\n+        TernaryValue aOnB = typeA.testForEquality(typeB);\n+        TernaryValue bOnA = typeB.testForEquality(typeA);\n+        assertTrue(\n+            String.format(\"testForEquality not symmetrical:\\n\" +\n+                \"typeA: %s\\ntypeB: %s\\n\" +\n+                \"a.testForEquality(b): %s\\n\" +\n+                \"b.testForEquality(a): %s\\n\",\n+                typeA, typeB, aOnB, bOnA),\n+            aOnB == bOnA);\n+      }\n+    }\n+  }\n+\n   /**\n    * Tests that getLeastSupertype is a symmetric relation.\n    */", "timestamp": 1294804319, "metainfo": ""}