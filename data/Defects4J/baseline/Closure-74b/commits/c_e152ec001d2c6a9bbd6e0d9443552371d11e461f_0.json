{"sha": "e152ec001d2c6a9bbd6e0d9443552371d11e461f", "log": "Make guava not google_common  R=acleung DELTA=87  (34 added, 19 deleted, 34 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=196209   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n import com.google.common.base.Joiner;\n import com.google.common.base.Preconditions;\n-import com.google.common.base.Receiver;\n import com.google.common.base.Supplier;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n   private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;\n   private Supplier<List<JSSourceFile>> inputsSupplierForTesting = null;\n   private Supplier<List<JSModule>> modulesSupplierForTesting = null;\n-  private Receiver<Integer> exitCodeReceiverForTesting = null;\n+  private Function<Integer, Boolean> exitCodeReceiverForTesting = null;\n \n   // Bookkeeping to measure optimal phase orderings.\n   private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;\n       Supplier<List<JSSourceFile>> externsSupplier,\n       Supplier<List<JSSourceFile>> inputsSupplier,\n       Supplier<List<JSModule>> modulesSupplier,\n-      Receiver<Integer> exitCodeReceiver) {\n+      Function<Integer, Boolean> exitCodeReceiver) {\n     Preconditions.checkArgument(\n         inputsSupplier == null ^ modulesSupplier == null);\n     testMode = true;\n     }\n \n     if (testMode) {\n-      exitCodeReceiverForTesting.accept(result);\n+      exitCodeReceiverForTesting.apply(result);\n     } else {\n       System.exit(result);\n     }\n--- a/src/com/google/javascript/jscomp/CallGraph.java\n+++ b/src/com/google/javascript/jscomp/CallGraph.java\n import com.google.common.base.Predicate;\n import com.google.common.collect.Collections2;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.javascript.jscomp.DefinitionsRemover.Definition;\n import com.google.javascript.jscomp.NameReferenceGraph.Name;\n import com.google.javascript.rhino.Token;\n \n import java.util.Collection;\n+import java.util.LinkedList;\n import java.util.Map;\n \n /**\n     \n     private void addCallsiteInFunction(Callsite callsite) {\n       if (callsitesInFunction == null) {\n-        callsitesInFunction = Lists.newLinkedList(callsite);\n-      } else {\n-        callsitesInFunction.add(callsite);\n-      }\n+        callsitesInFunction = new LinkedList<Callsite>();\n+      } \n+      callsitesInFunction.add(callsite);\n     }\n     \n     /**\n     private void addCallsitePossiblyTargetingFunction(Callsite callsite) {\n       Preconditions.checkState(computeBackwardGraph);\n       if (callsitesPossiblyTargetingFunction == null) {\n-        callsitesPossiblyTargetingFunction = Lists.newLinkedList(callsite);\n-      } else {\n-        callsitesPossiblyTargetingFunction.add(callsite);\n-      }\n+        callsitesPossiblyTargetingFunction =\n+            new LinkedList<Callsite>();\n+      } \n+      callsitesPossiblyTargetingFunction.add(callsite);\n     }\n   \n     /**\n       Preconditions.checkState(computeForwardGraph);\n       \n       if (possibleTargets == null) {\n-        possibleTargets = Lists.newLinkedList(target);\n-      } else {\n-        possibleTargets.add(target);\n-      }\n+        possibleTargets = new LinkedList<Function>();\n+      } \n+      possibleTargets.add(target);\n     }\n     \n     /**\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n     Set<ObjectType> typeSet = typesIndexedByProperty.get(propertyName);\n     if (typeSet == null) {\n       typesIndexedByProperty.put(\n-          propertyName, typeSet = Sets.newLinkedHashSet());\n+          propertyName, typeSet = new LinkedHashSet<ObjectType>());\n     }\n     greatestSubtypeByProperty.remove(propertyName);\n     typeSet.add(owner);\n   public Set<ObjectType> getTypesWithProperty(String propertyName) {\n     Set<ObjectType> typeSet = typesIndexedByProperty.get(propertyName);\n     if (typeSet == null) {\n-      return Sets.newLinkedHashSet(getNativeObjectType(NO_TYPE));\n+      Set<ObjectType> set = new LinkedHashSet<ObjectType>();\n+      set.add(getNativeObjectType(NO_TYPE));\n+      return set;\n     }\n     return typeSet;\n   }\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.common.base.Function;\n import com.google.common.base.Joiner;\n-import com.google.common.base.Receivers;\n import com.google.common.base.Supplier;\n import com.google.common.base.Suppliers;\n import com.google.common.collect.Lists;\n         Suppliers.<List<JSSourceFile>>ofInstance(externs),\n         inputsSupplier,\n         modulesSupplier,\n-        Receivers.<Integer>collect(exitCodes));\n+        new Function<Integer, Boolean>() {\n+          @Override\n+          public Boolean apply(Integer code) {\n+            return exitCodes.add(code);\n+          }\n+        });\n     runner.run();\n     lastCompiler = runner.getCompiler();\n     lastCommandLineRunner = runner;", "timestamp": 1282949524, "metainfo": ""}