{"sha": "0993b376430000ffb90aa749db7eda482f9e7411", "log": "Checkstyle", "commit": "\n--- a/src/main/java/org/joda/time/DateTimeUtils.java\n+++ b/src/main/java/org/joda/time/DateTimeUtils.java\n      * @since 2.0\n      */\n     public static final DateFormatSymbols getDateFormatSymbols(Locale locale) {\n-        try {        \t\n-        \tMethod method = DateFormatSymbols.class.getMethod(\"getInstance\", new Class[] {Locale.class});        \t\n-        \treturn (DateFormatSymbols) method.invoke(null, new Object[] {locale});        \t\n+        try {\n+            Method method = DateFormatSymbols.class.getMethod(\"getInstance\", new Class[] {Locale.class});\n+            return (DateFormatSymbols) method.invoke(null, new Object[] {locale});\n         } catch (Exception ex) {\n-        \treturn new DateFormatSymbols(locale);\n-        } \n+            return new DateFormatSymbols(locale);\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/joda/time/base/BasePeriod.java\n+++ b/src/main/java/org/joda/time/base/BasePeriod.java\n      * @throws IllegalArgumentException if an unsupported field's value is non-zero\n      */\n     protected int[] mergePeriodInto(int[] values, ReadablePeriod period) {\n-         for (int i = 0, isize = period.size(); i < isize; i++) {\n-             DurationFieldType type = period.getFieldType(i);\n-             int value = period.getValue(i);\n-             checkAndUpdate(type, values, value);\n-         }\n-         return values;\n+        for (int i = 0, isize = period.size(); i < isize; i++) {\n+            DurationFieldType type = period.getFieldType(i);\n+            int value = period.getValue(i);\n+            checkAndUpdate(type, values, value);\n+        }\n+        return values;\n     }\n \n     /**\n      * @throws IllegalArgumentException if an unsupported field's value is non-zero\n      */\n     protected int[] addPeriodInto(int[] values, ReadablePeriod period) {\n-         for (int i = 0, isize = period.size(); i < isize; i++) {\n-             DurationFieldType type = period.getFieldType(i);\n-             int value = period.getValue(i);\n-             if (value != 0) {\n-                 int index = indexOf(type);\n-                 if (index == -1) {\n-                     throw new IllegalArgumentException(\n-                         \"Period does not support field '\" + type.getName() + \"'\");\n-                 } else {\n-                     values[index] = FieldUtils.safeAdd(getValue(index), value);\n-                 }\n-             }\n-         }\n-         return values;\n+        for (int i = 0, isize = period.size(); i < isize; i++) {\n+            DurationFieldType type = period.getFieldType(i);\n+            int value = period.getValue(i);\n+            if (value != 0) {\n+                int index = indexOf(type);\n+                if (index == -1) {\n+                    throw new IllegalArgumentException(\n+                        \"Period does not support field '\" + type.getName() + \"'\");\n+                } else {\n+                    values[index] = FieldUtils.safeAdd(getValue(index), value);\n+                }\n+            }\n+        }\n+        return values;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n             String best = null;\n             for (String id : ALL_IDS) {\n                 if (str.startsWith(id)) {\n-                \tif (best == null || id.length() > best.length()) {\n-                \t\tbest = id;\n-                \t}\n+                    if (best == null || id.length() > best.length()) {\n+                        best = id;\n+                    }\n                 }\n             }\n             if (best != null) {\n--- a/src/main/java/org/joda/time/tz/FixedDateTimeZone.java\n+++ b/src/main/java/org/joda/time/tz/FixedDateTimeZone.java\n             return true;\n         }\n         if (obj instanceof FixedDateTimeZone) {\n-            FixedDateTimeZone other = (FixedDateTimeZone)obj;\n+            FixedDateTimeZone other = (FixedDateTimeZone) obj;\n             return\n                 getID().equals(other.getID()) &&\n                 iStandardOffset == other.iStandardOffset &&\n--- a/src/main/java/org/joda/time/tz/ZoneInfoProvider.java\n+++ b/src/main/java/org/joda/time/tz/ZoneInfoProvider.java\n             DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\n             iZoneInfoMap.put(id, new SoftReference<DateTimeZone>(tz));\n             return tz;\n-        } catch (IOException e) {\n-            uncaughtException(e);\n+        } catch (IOException ex) {\n+            uncaughtException(ex);\n             iZoneInfoMap.remove(id);\n             return null;\n         } finally {\n                 if (in != null) {\n                     in.close();\n                 }\n-            } catch (IOException e) {\n+            } catch (IOException ex) {\n             }\n         }\n     }\n         } finally {\n             try {\n                 din.close();\n-            } catch (IOException e) {\n+            } catch (IOException ex) {\n             }\n         }\n         map.put(\"UTC\", new SoftReference<DateTimeZone>(DateTimeZone.UTC));\n         for (int i=0; i<size; i++) {\n             try {\n                 zimap.put(pool[din.readUnsignedShort()], pool[din.readUnsignedShort()]);\n-            } catch (ArrayIndexOutOfBoundsException e) {\n+            } catch (ArrayIndexOutOfBoundsException ex) {\n                 throw new IOException(\"Corrupt zone info map\");\n             }\n         }", "timestamp": 1329932120, "metainfo": ""}