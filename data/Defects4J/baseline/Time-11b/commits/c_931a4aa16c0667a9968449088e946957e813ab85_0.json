{"sha": "931a4aa16c0667a9968449088e946957e813ab85", "log": "More tests   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n  */\n package org.joda.time.format;\n \n+import java.io.CharArrayWriter;\n import java.util.Locale;\n import java.util.TimeZone;\n \n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.MutableDateTime;\n+import org.joda.time.ReadablePartial;\n \n /**\n  * This class is a Junit unit test for DateTime Formating.\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testPrint_writerMethods() throws Exception {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        CharArrayWriter out = new CharArrayWriter();\n+        f.printTo(out, dt);\n+        assertEquals(\"Wed 2004-06-09T10:20:30Z\", out.toString());\n+        \n+        out = new CharArrayWriter();\n+        f.printTo(out, dt.getMillis());\n+        assertEquals(\"Wed 2004-06-09T11:20:30+01:00\", out.toString());\n+        \n+        out = new CharArrayWriter();\n+        ISODateTimeFormat.yearMonthDay().printTo(out, dt.toYearMonthDay());\n+        assertEquals(\"2004-06-09\", out.toString());\n+        \n+        out = new CharArrayWriter();\n+        try {\n+            ISODateTimeFormat.yearMonthDay().printTo(out, (ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testPrint_chrono_and_zone() {\n         DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n         assertEquals(\"Wed 2004-06-09T10:20:30Z\",\n         assertEquals(Locale.FRENCH, f2.getLocale());\n         assertSame(f2, f2.withLocale(Locale.FRENCH));\n         \n+        f2 = f.withLocale(null);\n+        assertEquals(null, f2.getLocale());\n+        assertSame(f2, f2.withLocale(null));\n+        \n         f2 = f.withZone(PARIS);\n         assertEquals(PARIS, f2.getZone());\n         assertSame(f2, f2.withZone(PARIS));\n         \n+        f2 = f.withZone(null);\n+        assertEquals(null, f2.getZone());\n+        assertSame(f2, f2.withZone(null));\n+        \n         f2 = f.withChronology(BUDDHIST_PARIS);\n         assertEquals(BUDDHIST_PARIS, f2.getChronolgy());\n         assertSame(f2, f2.withChronology(BUDDHIST_PARIS));\n-    }        \n+        \n+        f2 = f.withChronology(null);\n+        assertEquals(null, f2.getChronolgy());\n+        assertSame(f2, f2.withChronology(null));\n+    }\n \n     public void testWithGetOffsetParsedMethods() {\n         DateTimeFormatter f2 = f;", "timestamp": 1108321508, "metainfo": ""}