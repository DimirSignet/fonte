{"sha": "9aa6681d31b410756bf0b8c252a86e31f4aee30f", "log": "Fix period formating from throwing NegativeArraySizeException  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n \n             int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);\n             if (iFieldType >= SECONDS_MILLIS) {\n-                sum++; // decimal point\n+                // valueLong contains the seconds and millis fields\n+                // the minimum output is 0.000, which is 4 digits\n+                sum = Math.max(sum, 4);\n+                // plus one for the decimal point\n+                sum++;\n                 if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n-                    (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND) == 0) {\n+                        (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND) == 0) {\n                     sum -= 4; // remove three digits and decimal point\n                 }\n+                // reset valueLong to refer to the seconds part for the prefic/suffix calculation\n                 valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;\n             }\n             int value = (int) valueLong;\n--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n         assertEquals(\"1\", f.print(PERIOD));\n         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatMonths() {\n         assertEquals(\"2\", f.print(PERIOD));\n         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatWeeks() {\n         assertEquals(\"3\", f.print(PERIOD));\n         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatDays() {\n         assertEquals(\"4\", f.print(PERIOD));\n         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatHours() {\n         assertEquals(\"5\", f.print(PERIOD));\n         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatMinutes() {\n         assertEquals(\"6\", f.print(PERIOD));\n         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSeconds() {\n         assertEquals(\"7\", f.print(PERIOD));\n         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSecondsWithMillis() {\n         assertEquals(\"-7.001\", f.print(p));\n         assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0.000\", f.print(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSecondsWithOptionalMillis() {\n         assertEquals(\"-7.001\", f.print(p));\n         assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatMillis() {\n         assertEquals(\"8\", f.print(PERIOD));\n         assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0\", f.print(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatMillis3Digit() {\n         assertEquals(\"008\", f.print(PERIOD));\n         assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"000\", f.print(p));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\"Years:1\", f.print(PERIOD));\n         assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"Years:0\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatPrefixSimple2() {\n         assertEquals(\"Hours:5\", f.print(PERIOD));\n         assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"Hours:0\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatPrefixSimple3() {\n         assertEquals(\"Year:1\", f.print(PERIOD));\n         assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"Years:0\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatPrefixPlural2() {\n         assertEquals(\"Hours:5\", f.print(PERIOD));\n         assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"Hours:0\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatPrefixPlural3() {\n         assertEquals(\"1 years\", f.print(PERIOD));\n         assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0 years\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSuffixSimple2() {\n         assertEquals(\"5 hours\", f.print(PERIOD));\n         assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0 hours\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSuffixSimple3() {\n         assertEquals(\"1 year\", f.print(PERIOD));\n         assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0 years\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSuffixPlural2() {\n         assertEquals(\"5 hours\", f.print(PERIOD));\n         assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"0 hours\", f.print(p));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSuffixPlural3() {\n         assertEquals(\"P1Y\", f.print(PERIOD));\n         assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n         assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n+        \n+        Period p = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"P0Y\", f.print(p));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1172445761, "metainfo": ""}