{"sha": "eadcce774d6c344fb631543465205b91e7b419a3", "log": "Ensure conversion to j.u.TimeZone produces best matching object possible  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java\n         return instant;\n     }\n \n+    /**\n+     * Override to return the correct timzone instance.\n+     * @since 1.5\n+     */\n     public java.util.TimeZone toTimeZone() {\n+        String id = getID();\n+        if (id.length() == 6 && (id.startsWith(\"+\") || id.startsWith(\"-\"))) {\n+            // standard format offset [+-]hh:mm\n+            // our ID is without any prefix, so we need to add the GMT back\n+            return java.util.TimeZone.getTimeZone(\"GMT\" + getID());\n+        }\n+        // unusual offset, so setup a SimpleTimeZone as best we can\n         return new java.util.SimpleTimeZone(iWallOffset, getID());\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n         assertEquals(\"America/New_York\", zone.getID());\n     }\n \n+    public void testTimeZoneConversion() {\n+        TimeZone jdkTimeZone = TimeZone.getTimeZone(\"GMT-10\");\n+        assertEquals(\"GMT-10:00\", jdkTimeZone.getID());\n+        \n+        DateTimeZone jodaTimeZone = DateTimeZone.forTimeZone(jdkTimeZone);\n+        assertEquals(\"-10:00\", jodaTimeZone.getID());\n+        assertEquals(jdkTimeZone.getRawOffset(), jodaTimeZone.getOffset(0L));\n+        \n+        TimeZone convertedTimeZone = jodaTimeZone.toTimeZone();\n+        assertEquals(\"GMT-10:00\", jdkTimeZone.getID());\n+        \n+        assertEquals(jdkTimeZone.getID(), convertedTimeZone.getID());\n+        assertEquals(jdkTimeZone.getRawOffset(), convertedTimeZone.getRawOffset());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testGetAvailableIDs() {\n         assertTrue(DateTimeZone.getAvailableIDs().contains(\"UTC\"));\n--- a/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java\n+++ b/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java\n         assertEquals(false, zone1.hashCode() == zone4.hashCode());\n     }\n \n-    public void testToTimeZone() throws Exception {\n+    public void testToTimeZone1() throws Exception {\n+        FixedDateTimeZone zone = new FixedDateTimeZone(\"+00:01\", \"+00:01\", 60000, 60000);\n+        java.util.TimeZone tz = zone.toTimeZone();\n+        \n+        assertEquals(60000, tz.getRawOffset());\n+        assertEquals(60000, tz.getOffset(1167638400000L));\n+        assertEquals(60000, tz.getOffset(1185951600000L));\n+    }\n+\n+    public void testToTimeZone2() throws Exception {\n         FixedDateTimeZone zone = new FixedDateTimeZone(\"A\", \"B\", 1, 5);\n         java.util.TimeZone tz = zone.toTimeZone();\n-\n+        \n         assertEquals(1, tz.getRawOffset());\n         assertEquals(1, tz.getOffset(1167638400000L));\n         assertEquals(1, tz.getOffset(1185951600000L));\n     }\n+\n }", "timestamp": 1177147889, "metainfo": ""}