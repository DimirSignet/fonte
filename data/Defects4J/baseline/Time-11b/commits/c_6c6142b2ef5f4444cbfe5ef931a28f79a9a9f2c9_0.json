{"sha": "6c6142b2ef5f4444cbfe5ef931a28f79a9a9f2c9", "log": "Fixed bug which caused getInstance to fail on second identical call.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n                  GregorianChronology.getInstance(zone, minDaysInFirstWeek),\n                  cutoverInstant);\n         } else {\n-            chrono = getInstance(DateTimeZone.UTC, gregorianCutover, minDaysInFirstWeek);\n-            chrono = new GJChronology(ZonedChronology.getInstance(chrono, zone));\n+            chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek);\n+            chrono = new GJChronology\n+                (ZonedChronology.getInstance(chrono, zone),\n+                 chrono.iJulianChronology,\n+                 chrono.iGregorianChronology,\n+                 chrono.iCutoverInstant);\n         }\n \n         chronos.add(chrono);\n     /**\n      * Called when applying a time zone.\n      */\n-    private GJChronology(Chronology base) {\n-        super(base, null);\n+    private GJChronology(Chronology base,\n+                         JulianChronology julian,\n+                         GregorianChronology gregorian,\n+                         Instant cutoverInstant) {\n+        super(base, new Object[] {julian, gregorian, cutoverInstant});\n     }\n \n     /**\n      * @return the cutover instant\n      */\n     public Instant getGregorianCutover() {\n-        Instant cutover = iCutoverInstant;\n-        if (cutover == null) {\n-            iCutoverInstant = cutover = new Instant(iCutoverMillis);\n-        }\n-        return cutover;\n+        return iCutoverInstant;\n     }\n \n     public final int getMinimumDaysInFirstWeek() {\n     }\n \n     protected void assemble(Fields fields) {\n-        if (getBase() != null) {\n-            return;\n-        }\n-\n         Object[] params = (Object[])getParam();\n \n         JulianChronology julian = (JulianChronology)params[0];\n         Instant cutoverInstant = (Instant)params[2];\n         iCutoverMillis = cutoverInstant.getMillis();\n \n-        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {\n-            throw new IllegalArgumentException();\n-        }\n-\n         iJulianChronology = julian;\n         iGregorianChronology = gregorian;\n         iCutoverInstant = cutoverInstant;\n+\n+        if (getBase() != null) {\n+            return;\n+        }\n+\n+        if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) {\n+            throw new IllegalArgumentException();\n+        }\n \n         // Compute difference between the chronologies at the cutover instant\n         iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis);", "timestamp": 1076136584, "metainfo": ""}