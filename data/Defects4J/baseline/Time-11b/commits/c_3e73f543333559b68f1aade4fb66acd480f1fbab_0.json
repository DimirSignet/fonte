{"sha": "3e73f543333559b68f1aade4fb66acd480f1fbab", "log": "Test field package   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/field/MillisDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/MillisDurationField.java\n     }\n \n     public long add(long instant, int value) {\n-        return instant + value;\n+        return FieldUtils.safeAdd(instant, value);\n     }\n \n     public long add(long instant, long value) {\n-        return instant + value;\n+        return FieldUtils.safeAdd(instant, value);\n     }\n \n     public int getDifference(long minuendInstant, long subtrahendInstant) {\n-        return FieldUtils.safeToInt(minuendInstant - subtrahendInstant);\n+        return FieldUtils.safeToInt(FieldUtils.safeAdd(minuendInstant, -subtrahendInstant));\n     }\n \n     public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n-        return minuendInstant - subtrahendInstant;\n+        return FieldUtils.safeAdd(minuendInstant, -subtrahendInstant);\n     }\n \n     //------------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestAllPackages.java\n+++ b/JodaTime/src/test/org/joda/time/TestAllPackages.java\n         suite.addTest(org.joda.time.chrono.TestAll.suite());\n         suite.addTest(org.joda.time.chrono.gj.TestAll.suite());\n         suite.addTest(org.joda.time.convert.TestAll.suite());\n+        suite.addTest(org.joda.time.field.TestAll.suite());\n         suite.addTest(org.joda.time.format.TestAll.suite());\n         suite.addTest(org.joda.time.tz.TestAll.suite());\n         return suite;\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/field/TestAll.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.field;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Id$\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+\n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestMillisDurationField.suite());\n+        \n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = {\n+            TestAll.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.field;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+\n+/**\n+ * This class is a Junit unit test for PeriodFormatterBuilder.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMillisDurationField extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMillisDurationField.class);\n+    }\n+\n+    public TestMillisDurationField(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getType() {\n+        assertEquals(DurationFieldType.millis(), MillisDurationField.INSTANCE.getType());\n+    }\n+\n+    public void test_getName() {\n+        assertEquals(\"millis\", MillisDurationField.INSTANCE.getName());\n+    }\n+    \n+    public void test_isSupported() {\n+        assertEquals(true, MillisDurationField.INSTANCE.isSupported());\n+    }\n+\n+    public void test_isPrecise() {\n+        assertEquals(true, MillisDurationField.INSTANCE.isPrecise());\n+    }\n+\n+    public void test_getUnitMillis() {\n+        assertEquals(1, MillisDurationField.INSTANCE.getUnitMillis());\n+    }\n+\n+    public void test_toString() {\n+        assertEquals(\"DurationField[millis]\", MillisDurationField.INSTANCE.toString());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_getValue_long() {\n+        assertEquals(0, MillisDurationField.INSTANCE.getValue(0L));\n+        assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L));\n+        assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L));\n+        try {\n+            MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getValueAsLong_long() {\n+        assertEquals(0L, MillisDurationField.INSTANCE.getValueAsLong(0L));\n+        assertEquals(1234L, MillisDurationField.INSTANCE.getValueAsLong(1234L));\n+        assertEquals(-1234L, MillisDurationField.INSTANCE.getValueAsLong(-1234L));\n+        assertEquals(((long) (Integer.MAX_VALUE)) + 1L, MillisDurationField.INSTANCE.getValueAsLong(((long) (Integer.MAX_VALUE)) + 1L));\n+    }\n+\n+    public void test_getValue_long_long() {\n+        assertEquals(0, MillisDurationField.INSTANCE.getValue(0L, 567L));\n+        assertEquals(1234, MillisDurationField.INSTANCE.getValue(1234L, 567L));\n+        assertEquals(-1234, MillisDurationField.INSTANCE.getValue(-1234L, 567L));\n+        try {\n+            MillisDurationField.INSTANCE.getValue(((long) (Integer.MAX_VALUE)) + 1L, 567L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getValueAsLong_long_long() {\n+        assertEquals(0L, MillisDurationField.INSTANCE.getValueAsLong(0L, 567L));\n+        assertEquals(1234L, MillisDurationField.INSTANCE.getValueAsLong(1234L, 567L));\n+        assertEquals(-1234L, MillisDurationField.INSTANCE.getValueAsLong(-1234L, 567L));\n+        assertEquals(((long) (Integer.MAX_VALUE)) + 1L, MillisDurationField.INSTANCE.getValueAsLong(((long) (Integer.MAX_VALUE)) + 1L, 567L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMillis_int() {\n+        assertEquals(0, MillisDurationField.INSTANCE.getMillis(0));\n+        assertEquals(1234, MillisDurationField.INSTANCE.getMillis(1234));\n+        assertEquals(-1234, MillisDurationField.INSTANCE.getMillis(-1234));\n+    }\n+\n+    public void test_getMillis_long() {\n+        assertEquals(0L, MillisDurationField.INSTANCE.getMillis(0L));\n+        assertEquals(1234L, MillisDurationField.INSTANCE.getMillis(1234L));\n+        assertEquals(-1234L, MillisDurationField.INSTANCE.getMillis(-1234L));\n+    }\n+\n+    public void test_getMillis_int_long() {\n+        assertEquals(0, MillisDurationField.INSTANCE.getMillis(0, 567L));\n+        assertEquals(1234, MillisDurationField.INSTANCE.getMillis(1234, 567L));\n+        assertEquals(-1234, MillisDurationField.INSTANCE.getMillis(-1234, 567L));\n+    }\n+\n+    public void test_getMillis_long_long() {\n+        assertEquals(0L, MillisDurationField.INSTANCE.getMillis(0L, 567L));\n+        assertEquals(1234L, MillisDurationField.INSTANCE.getMillis(1234L, 567L));\n+        assertEquals(-1234L, MillisDurationField.INSTANCE.getMillis(-1234L, 567L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_add_long_int() {\n+        assertEquals(567L, MillisDurationField.INSTANCE.add(567L, 0));\n+        assertEquals(567L + 1234L, MillisDurationField.INSTANCE.add(567L, 1234));\n+        assertEquals(567L - 1234L, MillisDurationField.INSTANCE.add(567L, -1234));\n+        try {\n+            MillisDurationField.INSTANCE.add(Long.MAX_VALUE, 1);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_add_long_long() {\n+        assertEquals(567L, MillisDurationField.INSTANCE.add(567L, 0L));\n+        assertEquals(567L + 1234L, MillisDurationField.INSTANCE.add(567L, 1234L));\n+        assertEquals(567L - 1234L, MillisDurationField.INSTANCE.add(567L, -1234L));\n+        try {\n+            MillisDurationField.INSTANCE.add(Long.MAX_VALUE, 1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getDifference_long_int() {\n+        assertEquals(567, MillisDurationField.INSTANCE.getDifference(567L, 0));\n+        assertEquals(567 - 1234, MillisDurationField.INSTANCE.getDifference(567L, 1234));\n+        assertEquals(567 + 1234, MillisDurationField.INSTANCE.getDifference(567L, -1234));\n+        try {\n+            MillisDurationField.INSTANCE.getDifference(Long.MAX_VALUE, 1);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getDifferenceAsLong_long_long() {\n+        assertEquals(567L, MillisDurationField.INSTANCE.getDifference(567L, 0L));\n+        assertEquals(567L - 1234L, MillisDurationField.INSTANCE.getDifference(567L, 1234L));\n+        assertEquals(567L + 1234L, MillisDurationField.INSTANCE.getDifference(567L, -1234L));\n+        try {\n+            MillisDurationField.INSTANCE.getDifference(Long.MAX_VALUE, 1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_compareTo() {\n+        assertEquals(0, MillisDurationField.INSTANCE.compareTo(MillisDurationField.INSTANCE));\n+        assertEquals(-1, MillisDurationField.INSTANCE.compareTo(Chronology.getISO().seconds()));\n+        DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);\n+        assertEquals(1, MillisDurationField.INSTANCE.compareTo(dummy));\n+        try {\n+            MillisDurationField.INSTANCE.compareTo(\"\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            MillisDurationField.INSTANCE.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        DurationField test = MillisDurationField.INSTANCE;\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DurationField result = (DurationField) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(test, result);\n+    }\n+\n+}", "timestamp": 1095204790, "metainfo": ""}