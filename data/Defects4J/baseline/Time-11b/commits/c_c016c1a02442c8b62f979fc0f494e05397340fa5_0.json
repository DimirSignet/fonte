{"sha": "c016c1a02442c8b62f979fc0f494e05397340fa5", "log": "Testing MutableDuration   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         \n         suite.addTest(TestMutableDuration_Constructors.suite());\n         suite.addTest(TestMutableDuration_Basics.suite());\n+        suite.addTest(TestMutableDuration_Updates.suite());\n         \n         suite.addTest(TestTimeOfDay.suite());\n         suite.addTest(TestYearMonthDay.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDuration_Updates.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a JUnit test for MutableDuration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableDuration_Updates extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableDuration_Updates.class);\n+    }\n+\n+    public TestMutableDuration_Updates(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddYears() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addYears(10);\n+        assertEquals(11, test.getYears());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addYears(-10);\n+        assertEquals(-9, test.getYears());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addYears(0);\n+        assertEquals(1, test.getYears());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMonths() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMonths(10);\n+        assertEquals(12, test.getMonths());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMonths(-10);\n+        assertEquals(-8, test.getMonths());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMonths(0);\n+        assertEquals(2, test.getMonths());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddWeeks() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addWeeks(10);\n+        assertEquals(13, test.getWeeks());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addWeeks(-10);\n+        assertEquals(-7, test.getWeeks());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addWeeks(0);\n+        assertEquals(3, test.getWeeks());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddDays() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addDays(10);\n+        assertEquals(14, test.getDays());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addDays(-10);\n+        assertEquals(-6, test.getDays());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addDays(0);\n+        assertEquals(4, test.getDays());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddHours() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addHours(10);\n+        assertEquals(15, test.getHours());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addHours(-10);\n+        assertEquals(-5, test.getHours());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addHours(0);\n+        assertEquals(5, test.getHours());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMinutes() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMinutes(10);\n+        assertEquals(16, test.getMinutes());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMinutes(-10);\n+        assertEquals(-4, test.getMinutes());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMinutes(0);\n+        assertEquals(6, test.getMinutes());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddSeconds() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addSeconds(10);\n+        assertEquals(17, test.getSeconds());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addSeconds(-10);\n+        assertEquals(-3, test.getSeconds());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addSeconds(0);\n+        assertEquals(7, test.getSeconds());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMillis() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMillis(10);\n+        assertEquals(18, test.getMillis());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMillis(-10);\n+        assertEquals(-2, test.getMillis());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.addMillis(0);\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetYears() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setYears(10);\n+        assertEquals(10, test.getYears());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setYears(-10);\n+        assertEquals(-10, test.getYears());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setYears(0);\n+        assertEquals(0, test.getYears());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMonths() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMonths(10);\n+        assertEquals(10, test.getMonths());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMonths(-10);\n+        assertEquals(-10, test.getMonths());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMonths(0);\n+        assertEquals(0, test.getMonths());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetWeeks() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setWeeks(10);\n+        assertEquals(10, test.getWeeks());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setWeeks(-10);\n+        assertEquals(-10, test.getWeeks());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setWeeks(0);\n+        assertEquals(0, test.getWeeks());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDays() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setDays(10);\n+        assertEquals(10, test.getDays());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setDays(-10);\n+        assertEquals(-10, test.getDays());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setDays(0);\n+        assertEquals(0, test.getDays());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetHours() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setHours(10);\n+        assertEquals(10, test.getHours());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setHours(-10);\n+        assertEquals(-10, test.getHours());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setHours(0);\n+        assertEquals(0, test.getHours());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMinutes() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMinutes(10);\n+        assertEquals(10, test.getMinutes());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMinutes(-10);\n+        assertEquals(-10, test.getMinutes());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMinutes(0);\n+        assertEquals(0, test.getMinutes());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetSeconds() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setSeconds(10);\n+        assertEquals(10, test.getSeconds());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setSeconds(-10);\n+        assertEquals(-10, test.getSeconds());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setSeconds(0);\n+        assertEquals(0, test.getSeconds());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMillis() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMillis(10);\n+        assertEquals(10, test.getMillis());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMillis(-10);\n+        assertEquals(-10, test.getMillis());\n+        \n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setMillis(0);\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDuration_8ints1() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setDuration(11, 12, 13, 14, 15, 16, 17, 18);\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testSetDuration_8ints2() {\n+        MutableDuration test = new MutableDuration(100L);\n+        try {\n+            test.setDuration(11, 12, 13, 14, 15, 16, 17, 18);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+        assertEquals(100, test.getTotalMillis());\n+    }\n+\n+    public void testSetDuration_8ints3() {\n+        MutableDuration test = new MutableDuration(100L);\n+        test.setDuration(0, 0, 0, 0, 0, 0, 0, 18);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+        assertEquals(18, test.getTotalMillis());\n+    }\n+\n+    public void testSetDuration_8ints4() {\n+        MutableDuration test = new MutableDuration(0, 0, 0, 0, 5, 6, 7, 8);\n+        assertEquals(true, test.isPrecise());\n+        test.setDuration(11, 12, 13, 14, 15, 16, 17, 18);\n+        assertEquals(false, test.isPrecise());\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDuration_RD1() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setDuration(new MutableDuration(11, 12, 13, 14, 15, 16, 17, 18));\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testSetDuration_RD2() {\n+        MutableDuration test = new MutableDuration(100L);\n+        try {\n+            test.setDuration(new MutableDuration(11, 12, 13, 14, 15, 16, 17, 18));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+        assertEquals(100, test.getTotalMillis());\n+    }\n+\n+    public void testSetDuration_RD3() {\n+        MutableDuration test = new MutableDuration(100L);\n+        test.setDuration(new MutableDuration(0, 0, 0, 0, 0, 0, 0, 18));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+        assertEquals(18, test.getTotalMillis());\n+    }\n+\n+    public void testSetDuration_RD4() {\n+        MutableDuration test = new MutableDuration(0, 0, 0, 0, 5, 6, 7, 8);\n+        assertEquals(true, test.isPrecise());\n+        test.setDuration(new MutableDuration(11, 12, 13, 14, 15, 16, 17, 18));\n+        assertEquals(false, test.isPrecise());\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testSetDuration_RD5() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setDuration(null);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetTotalMillis_long_long1() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTotalMillis(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_long2() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTotalMillis(dt2.getMillis(), dt1.getMillis());\n+        assertEquals(-1, test.getYears());\n+        assertEquals(-1, test.getMonths());\n+        assertEquals(-1, test.getWeeks());\n+        assertEquals(-1, test.getDays());\n+        assertEquals(-1, test.getHours());\n+        assertEquals(-1, test.getMinutes());\n+        assertEquals(-1, test.getSeconds());\n+        assertEquals(-1, test.getMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_long3() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        test.setTotalMillis(dt1.getMillis(), dt1.getMillis());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_long_NoYears() {\n+        MutableDuration test = new MutableDuration(DurationType.getAllType().withYearsRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTotalMillis(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(0, test.getYears());\n+        assertEquals(13, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_long_NoMonths() {\n+        MutableDuration test = new MutableDuration(DurationType.getAllType().withMonthsRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTotalMillis(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(5, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_long_NoWeeks() {\n+        MutableDuration test = new MutableDuration(DurationType.getAllType().withWeeksRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTotalMillis(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(8, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_long_NoDays() {\n+        MutableDuration test = new MutableDuration(DurationType.getAllType().withDaysRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTotalMillis(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(25, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_long_NoHours() {\n+        MutableDuration test = new MutableDuration(DurationType.getAllType().withHoursRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTotalMillis(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(61, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_long_NoMinutes() {\n+        MutableDuration test = new MutableDuration(DurationType.getAllType().withMinutesRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTotalMillis(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(61, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_long_NoSeconds() {\n+        MutableDuration test = new MutableDuration(DurationType.getAllType().withSecondsRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTotalMillis(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(1001, test.getMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_long_NoMillis() {\n+        MutableDuration test = new MutableDuration(DurationType.getAllType().withMillisRemoved());\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setTotalMillis(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetTotalMillis_long1() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.setTotalMillis(100L);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+    }\n+\n+    public void testSetTotalMillis_long2() {\n+        MutableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType());\n+        test.setTotalMillis(\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testSetTotalMillis_long3() {\n+        MutableDuration test = new MutableDuration(DurationType.getPreciseYearWeekType());\n+        test.setTotalMillis(\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L);\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(12, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_NoYears() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withYearsRemoved());\n+        test.setTotalMillis(ms);\n+        assertEquals(0, test.getYears());\n+        assertEquals(15, test.getMonths()); // totalDays=365+85=450=15*30\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(ms, test.getTotalMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_NoMonths() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withMonthsRemoved());\n+        test.setTotalMillis(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(85, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(ms, test.getTotalMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_NoWeeks() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableDuration test = new MutableDuration(DurationType.getPreciseYearWeekType().withWeeksRemoved());\n+        test.setTotalMillis(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(85, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(ms, test.getTotalMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_NoDays() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withDaysRemoved());\n+        test.setTotalMillis(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5 + 25 * 24, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(ms, test.getTotalMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_NoHours() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withHoursRemoved());\n+        test.setTotalMillis(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(6 + 5 * 60, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(ms, test.getTotalMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_NoMinutes() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withMinutesRemoved());\n+        test.setTotalMillis(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(7 + 6 * 60, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(ms, test.getTotalMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_NoSeconds() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withSecondsRemoved());\n+        test.setTotalMillis(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(8 + 7 * 1000, test.getMillis());\n+        assertEquals(ms, test.getTotalMillis());\n+    }\n+\n+    public void testSetTotalMillis_long_NoMillis() {\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutableDuration test = new MutableDuration(DurationType.getPreciseYearMonthType().withMillisRemoved());\n+        test.setTotalMillis(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(ms - 8, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_long1() {\n+        MutableDuration test = new MutableDuration(100L);\n+        test.add(100L);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(200, test.getMillis());\n+        assertEquals(200L, test.getTotalMillis());\n+    }\n+\n+    public void testAdd_long2() {\n+        MutableDuration test = new MutableDuration(100L, DurationType.getPreciseYearMonthType());\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        test.add(ms);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+        assertEquals(ms + 100L, test.getTotalMillis());\n+    }\n+\n+    public void testAdd_long3() {\n+        MutableDuration test = new MutableDuration(100L, DurationType.getPreciseYearMonthType());\n+        long ms =0L;\n+        test.add(ms);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+        assertEquals(100L, test.getTotalMillis());\n+    }\n+\n+    public void testAdd_long4() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.add(100L);\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_RD1() {\n+        MutableDuration test = new MutableDuration(100L);\n+        test.add(new Duration(100L));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(200, test.getMillis());\n+        assertEquals(200L, test.getTotalMillis());\n+    }\n+\n+    public void testAdd_RD2() {\n+        MutableDuration test = new MutableDuration(100L, DurationType.getPreciseYearMonthType());\n+        test.add(new Duration(1, 0, 12, 1, 5, 6, 7, 8, DurationType.getPreciseYearWeekType()));\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(25, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+    }\n+\n+    public void testAdd_RD3() {\n+        MutableDuration test = new MutableDuration(100L, DurationType.getPreciseYearMonthType());\n+        test.add(Duration.ZERO);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+        assertEquals(100L, test.getTotalMillis());\n+    }\n+\n+    public void testAdd_RD4() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.add(new Duration(100L));\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testAdd_RD5() {\n+        MutableDuration test = new MutableDuration(100L);\n+        try {\n+            test.add(new Duration(1, 2, 3, 4, 5, 6, 7, 8));\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testAdd_RD6() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.add(null);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNormalize1() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.normalize();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testNormalize2() {\n+        MutableDuration test = new MutableDuration(1, 14, 0, 34, 29, 66, 67, 1008, DurationType.getPreciseYearMonthType());\n+        test.normalize();\n+        assertEquals(2, test.getYears());\n+        assertEquals(3, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(5, test.getDays());\n+        assertEquals(6, test.getHours());\n+        assertEquals(7, test.getMinutes());\n+        assertEquals(8, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+}", "timestamp": 1090714810, "metainfo": ""}