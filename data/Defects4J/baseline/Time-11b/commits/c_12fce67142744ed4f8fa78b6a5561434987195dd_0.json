{"sha": "12fce67142744ed4f8fa78b6a5561434987195dd", "log": "Use getID() when parsing JDK TimeZone  Bug from Steve Livengood (mailing list)", "commit": "\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n \n         // Support GMT+/-hh:mm formats\n         if (convId == null) {\n-            convId = zone.getDisplayName();\n+            convId = zone.getID();\n             if (convId.startsWith(\"GMT+\") || convId.startsWith(\"GMT-\")) {\n                 convId = convId.substring(3);\n                 int offset = parseOffset(convId);\n--- a/src/test/java/org/joda/time/TestDateTimeZone.java\n+++ b/src/test/java/org/joda/time/TestDateTimeZone.java\n         assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),\n                 zone.getOffset(TEST_TIME_SUMMER));\n         \n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+1:23\"));\n+        assertEquals(\"+01:23\", zone.getID());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + (23L * DateTimeConstants.MILLIS_PER_MINUTE),\n+                zone.getOffset(TEST_TIME_SUMMER));\n+        \n         zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT-02:00\"));\n         assertEquals(\"-02:00\", zone.getID());\n         assertEquals((-2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER));\n+        \n+        zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"GMT+2\"));\n+        assertEquals(\"+02:00\", zone.getID());\n+        assertEquals((2L * DateTimeConstants.MILLIS_PER_HOUR), zone.getOffset(TEST_TIME_SUMMER));\n         \n         zone = DateTimeZone.forTimeZone(TimeZone.getTimeZone(\"EST\"));\n         assertEquals(\"America/New_York\", zone.getID());", "timestamp": 1328963050, "metainfo": ""}