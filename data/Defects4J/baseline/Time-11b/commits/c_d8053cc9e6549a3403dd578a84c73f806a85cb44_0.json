{"sha": "d8053cc9e6549a3403dd578a84c73f806a85cb44", "log": "Add Period constructors for ReadablePartials Add PeriodType constants that exclude time   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n \n     /**\n      * Create a period from a set of field values using the standard set of fields.\n+     * Note that the parameters specify the time fields hours, minutes,\n+     * seconds and millis, not the date fields.\n      *\n      * @param hours  amount of hours in this period\n      * @param minutes  amount of minutes in this period\n     }\n \n     /**\n+     * Creates a period from two partially specified times.\n+     * The two partials must contain the same fields, thus you can\n+     * specify two YearMonthDay objects, or two TimeOfDay objects,\n+     * but not one of each.\n+     * As these are Partial objects, time zones have no effect on\n+     * the result.\n+     *\n+     * @param start  the start of the period, must not be null\n+     * @param end  the end of the period, must not be null\n+     * @throws IllegalArgumentException if the partials are null or invalid\n+     */\n+    public Period(ReadablePartial start, ReadablePartial end) {\n+        super(start, end, null);\n+    }\n+\n+    /**\n+     * Creates a period from the given duration and end point.\n+     * The two partials must contain the same fields, thus you can\n+     * specify two YearMonthDay objects, or two TimeOfDay objects,\n+     * but not one of each.\n+     * As these are Partial objects, time zones have no effect on\n+     * the result.\n+     *\n+     * @param start  the start of the period, must not be null\n+     * @param end  the end of the period, must not be null\n+     * @param type  which set of fields this period supports, null means standard\n+     * @throws IllegalArgumentException if the partials are null or invalid\n+     */\n+    public Period(ReadablePartial start, ReadablePartial end, PeriodType type) {\n+        super(start, end, type);\n+    }\n+\n+    /**\n      * Creates a period from the given start point and the duration.\n      *\n      * @param startInstant  the interval start, null means now\n--- a/JodaTime/src/java/org/joda/time/PeriodType.java\n+++ b/JodaTime/src/java/org/joda/time/PeriodType.java\n  * <ul>\n  * <li>Standard - years, months, weeks, days, hours, minutes, seconds, millis\n  * <li>YearMonthDayTime - years, months, days, hours, minutes, seconds, millis\n+ * <li>YearMonthDay - years, months, days\n  * <li>YearWeekDayTime - years, weeks, days, hours, minutes, seconds, millis\n+ * <li>YearWeekDay - years, weeks, days\n  * <li>YearDayTime - years, days, hours, minutes, seconds, millis\n+ * <li>YearDay - years, days, hours\n  * <li>DayTime - days, hours, minutes, seconds, millis\n  * <li>Time - hours, minutes, seconds, millis\n  * <li>plus one for each single type\n     \n     private static PeriodType cStandard;\n     private static PeriodType cYMDTime;\n+    private static PeriodType cYMD;\n     private static PeriodType cYWDTime;\n+    private static PeriodType cYWD;\n     private static PeriodType cYDTime;\n+    private static PeriodType cYD;\n     private static PeriodType cDTime;\n     private static PeriodType cTime;\n     \n     }\n \n     /**\n+     * Gets a type that defines the year, month and day fields.\n+     * <ul>\n+     * <li>years\n+     * <li>months\n+     * <li>days\n+     * </ul>\n+     *\n+     * @return the period type\n+     */\n+    public static PeriodType yearMonthDay() {\n+        PeriodType type = cYMD;\n+        if (type == null) {\n+            type = new PeriodType(\n+                \"YearMonthDay\",\n+                new DurationFieldType[] {\n+                    DurationFieldType.years(), DurationFieldType.months(),\n+                    DurationFieldType.days(),\n+                },\n+                new int[] { 0, 1, -1, 2, -1, -1, -1, -1, }\n+            );\n+            cYMD = type;\n+        }\n+        return type;\n+    }\n+\n+    /**\n      * Gets a type that defines all standard fields except months.\n      * <ul>\n      * <li>years\n     }\n \n     /**\n+     * Gets a type that defines year, week and day fields.\n+     * <ul>\n+     * <li>years\n+     * <li>weeks\n+     * <li>days\n+     * </ul>\n+     *\n+     * @return the period type\n+     */\n+    public static PeriodType yearWeekDay() {\n+        PeriodType type = cYWD;\n+        if (type == null) {\n+            type = new PeriodType(\n+                \"YearWeekDay\",\n+                new DurationFieldType[] {\n+                    DurationFieldType.years(),\n+                    DurationFieldType.weeks(), DurationFieldType.days(),\n+                },\n+                new int[] { 0, -1, 1, 2, -1, -1, -1, -1, }\n+            );\n+            cYWD = type;\n+        }\n+        return type;\n+    }\n+\n+    /**\n      * Gets a type that defines all standard fields except months and weeks.\n      * <ul>\n      * <li>years\n                 new int[] { 0, -1, -1, 1, 2, 3, 4, 5, }\n             );\n             cYDTime = type;\n+        }\n+        return type;\n+    }\n+\n+    /**\n+     * Gets a type that defines the year and day fields.\n+     * <ul>\n+     * <li>years\n+     * <li>days\n+     * </ul>\n+     *\n+     * @return the period type\n+     */\n+    public static PeriodType yearDay() {\n+        PeriodType type = cYD;\n+        if (type == null) {\n+            type = new PeriodType(\n+                \"YearDay\",\n+                new DurationFieldType[] {\n+                    DurationFieldType.years(), DurationFieldType.days(),\n+                },\n+                new int[] { 0, -1, -1, 1, -1, -1, -1, -1, }\n+            );\n+            cYD = type;\n         }\n         return type;\n     }\n--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n import org.joda.time.ReadWritablePeriod;\n import org.joda.time.ReadableDuration;\n import org.joda.time.ReadableInstant;\n+import org.joda.time.ReadablePartial;\n import org.joda.time.ReadablePeriod;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.PeriodConverter;\n     }\n \n     /**\n+     * Creates a period from the given duration and end point.\n+     * The two partials must contain the same fields, thus you can\n+     * specify two YearMonthDay objects, or two TimeOfDay objects,\n+     * but not one of each.\n+     * As these are Partial objects, time zones have no effect on\n+     * the result.\n+     *\n+     * @param start  the start of the period, must not be null\n+     * @param end  the end of the period, must not be null\n+     * @param type  which set of fields this period supports, null means standard\n+     * @throws IllegalArgumentException if the partials are null or invalid\n+     */\n+    protected BasePeriod(ReadablePartial start, ReadablePartial end, PeriodType type) {\n+        super();\n+        if (start == null || end == null) {\n+            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n+        }\n+        if (start.size() != end.size()) {\n+            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n+        }\n+        for (int i = 0, isize = start.size(); i < isize; i++) {\n+            if (start.getFieldType(i) != end.getFieldType(i)) {\n+                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n+            }\n+        }\n+        iType = checkPeriodType(type);\n+        Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();\n+        iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));\n+    }\n+\n+    /**\n      * Creates a period from the given start point and duration.\n      *\n      * @param startInstant  the interval start, null means now\n--- a/JodaTime/src/test/org/joda/time/TestPeriodType.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriodType.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testYearMonthDay() throws Exception {\n+        PeriodType type = PeriodType.yearMonthDay();\n+        assertEquals(3, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.months(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(2));\n+        assertEquals(\"YearMonthDay\", type.getName());\n+        assertEquals(\"PeriodType[YearMonthDay]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.yearMonthDay());\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.yearMonthDay().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testYearWeekDayTime() throws Exception {\n         PeriodType type = PeriodType.yearWeekDayTime();\n         assertEquals(7, type.size());\n         assertEquals(false, type.equals(PeriodType.millis()));\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearWeekDayTime().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testYearWeekDay() throws Exception {\n+        PeriodType type = PeriodType.yearWeekDay();\n+        assertEquals(3, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.weeks(), type.getFieldType(1));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(2));\n+        assertEquals(\"YearWeekDay\", type.getName());\n+        assertEquals(\"PeriodType[YearWeekDay]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.yearWeekDay());\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.yearWeekDay().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertSameAfterSerialization(type);\n     }\n         assertEquals(false, type.equals(PeriodType.millis()));\n         assertEquals(true, type.hashCode() == type.hashCode());\n         assertEquals(true, type.hashCode() == PeriodType.yearDayTime().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n+        assertSameAfterSerialization(type);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testYearDay() throws Exception {\n+        PeriodType type = PeriodType.yearDay();\n+        assertEquals(2, type.size());\n+        assertEquals(DurationFieldType.years(), type.getFieldType(0));\n+        assertEquals(DurationFieldType.days(), type.getFieldType(1));\n+        assertEquals(\"YearDay\", type.getName());\n+        assertEquals(\"PeriodType[YearDay]\", type.toString());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.yearDay());\n+        assertEquals(false, type.equals(PeriodType.millis()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.yearDay().hashCode());\n         assertEquals(false, type.hashCode() == PeriodType.millis().hashCode());\n         assertSameAfterSerialization(type);\n     }\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testConstructor_RP_RP1() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay dt2 = new YearMonthDay(2005, 7, 10);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_RP_RP2() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay dt2 = new YearMonthDay(2005, 5, 17);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(11, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_RP_RP3() throws Throwable {\n+        YearMonthDay dt1 = null;\n+        YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);\n+        try {\n+            new Period(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP4() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n+        YearMonthDay dt2 = null;\n+        try {\n+            new Period(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP5() throws Throwable {\n+        YearMonthDay dt1 = null;\n+        YearMonthDay dt2 = null;\n+        try {\n+            new Period(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP6() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n+        TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            new Period(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RP_RP_PeriodType1() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay dt2 = new YearMonthDay(2005, 7, 10);\n+        Period test = new Period(dt1, dt2, PeriodType.standard());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType2() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay dt2 = new YearMonthDay(2005, 5, 17);\n+        Period test = new Period(dt1, dt2, PeriodType.yearMonthDay());\n+        assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(11, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(8, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType3() throws Throwable {\n+        YearMonthDay dt1 = null;\n+        YearMonthDay dt2 = new YearMonthDay(2005, 7, 17);\n+        try {\n+            new Period(dt1, dt2, PeriodType.standard());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType4() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n+        YearMonthDay dt2 = null;\n+        try {\n+            new Period(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType5() throws Throwable {\n+        YearMonthDay dt1 = null;\n+        YearMonthDay dt2 = null;\n+        try {\n+            new Period(dt1, dt2, PeriodType.standard());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_RP_RP_PeriodType6() throws Throwable {\n+        YearMonthDay dt1 = new YearMonthDay(2005, 7, 17);\n+        TimeOfDay dt2 = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            new Period(dt1, dt2, PeriodType.standard());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testConstructor_RI_RD1() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);", "timestamp": 1113667085, "metainfo": ""}