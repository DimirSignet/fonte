{"sha": "05574876666fbcc5f96daca7cb28cfb45b4c077e", "log": "Add since tags  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n      * \n      * @param millisProvider  the provider of the current time to use, not null\n      * @throws SecurityException if the application does not have sufficient security rights\n+     * @since 2.0\n      */\n     public static final void setCurrentMillisProvider(MillisProvider millisProvider) throws SecurityException {\n         if (millisProvider == null) {\n      * \n      * @param locale  the {@link Locale} used to get the correct {@link DateFormatSymbols}\n      * @return the symbols\n+     * @since 2.0\n      */\n     public static final DateFormatSymbols getDateFormatSymbols(Locale locale) {\n         try {        \t\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n      * @return the parsed date, never null\n      * @throws UnsupportedOperationException if parsing is not supported\n      * @throws IllegalArgumentException if the text to parse is invalid\n+     * @since 2.0\n      */\n     public LocalDate parseLocalDate(String text) {\n         return parseLocalDateTime(text).toLocalDate();\n      * @return the parsed time, never null\n      * @throws UnsupportedOperationException if parsing is not supported\n      * @throws IllegalArgumentException if the text to parse is invalid\n+     * @since 2.0\n      */\n     public LocalTime parseLocalTime(String text) {\n         return parseLocalDateTime(text).toLocalTime();\n      * @return the parsed date-time, never null\n      * @throws UnsupportedOperationException if parsing is not supported\n      * @throws IllegalArgumentException if the text to parse is invalid\n+     * @since 2.0\n      */\n     public LocalDateTime parseLocalDateTime(String text) {\n         DateTimeParser parser = requireParser();\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n      * more precision is required. 1=hours, 2=minutes, 3=seconds, 4=fraction\n      * @param maxFields  maximum number of fields to print\n      * @return this DateTimeFormatterBuilder, for chaining\n+     * @since 2.0\n      */\n     public DateTimeFormatterBuilder appendTimeZoneOffset(\n             String zeroOffsetPrintText, String zeroOffsetParseText, boolean showSeparators,", "timestamp": 1272799856, "metainfo": ""}