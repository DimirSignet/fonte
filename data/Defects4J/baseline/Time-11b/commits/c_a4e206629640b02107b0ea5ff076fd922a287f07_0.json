{"sha": "a4e206629640b02107b0ea5ff076fd922a287f07", "log": "Use chronology factory method on chronology subclass instead of that on Chronology   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestAbstractPartial.java\n+++ b/JodaTime/src/test/org/joda/time/TestAbstractPartial.java\n import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractPartial;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.AbstractPartialFieldProperty;\n \n /**\n \n     public void testGetField() throws Throwable {\n         MockPartial mock = new MockPartial();\n-        assertEquals(Chronology.getBuddhistUTC().year(), mock.getField(0));\n-        assertEquals(Chronology.getBuddhistUTC().monthOfYear(), mock.getField(1));\n+        assertEquals(BuddhistChronology.getInstanceUTC().year(), mock.getField(0));\n+        assertEquals(BuddhistChronology.getInstanceUTC().monthOfYear(), mock.getField(1));\n         \n         try {\n             mock.getField(-1);\n \n     public void testGetPropertyEquals() throws Throwable {\n         MockPartial mock = new MockPartial();\n-        YearMonthDay ymd = new YearMonthDay(1970, 2, 1, Chronology.getBuddhist());\n+        YearMonthDay ymd = new YearMonthDay(1970, 2, 1, BuddhistChronology.getInstance());\n         \n         MockProperty0 prop0 = new MockProperty0();\n         assertEquals(true, prop0.equals(prop0));\n         }\n \n         public Chronology getChronology() {\n-            return Chronology.getBuddhistUTC();\n+            return BuddhistChronology.getInstanceUTC();\n         }\n     }\n     \n     }\n     static class MockProperty0Field extends MockProperty0 {\n         public DateTimeField getField() {\n-            return Chronology.getBuddhistUTC().hourOfDay();\n+            return BuddhistChronology.getInstanceUTC().hourOfDay();\n         }\n     }\n     static class MockProperty0Val extends MockProperty0 {\n         public ReadablePartial getReadablePartial() {\n             return new MockPartial() {\n                 public Chronology getChronology() {\n-                    return Chronology.getISOUTC();\n+                    return ISOChronology.getInstanceUTC();\n                 }\n             };\n         }\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n \n import org.joda.time.base.AbstractInstant;\n import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.UnsupportedDateTimeField;\n \n     //-----------------------------------------------------------------------\n     public void testToYearMonthDay() {\n-        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, Chronology.getCoptic());\n+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, CopticChronology.getInstance());\n         YearMonthDay test = base.toYearMonthDay();\n-        assertEquals(new YearMonthDay(TEST_TIME1_UTC, Chronology.getCoptic()), test);\n+        assertEquals(new YearMonthDay(TEST_TIME1_UTC, CopticChronology.getInstance()), test);\n     }\n \n     public void testToInterval() {\n-        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, Chronology.getCoptic());\n+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, CopticChronology.getInstance());\n         Interval test = base.toInterval();\n         DateMidnight end = base.plus(Period.days(1));\n         assertEquals(new Interval(base, end), test);\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.chrono.CopticChronology;\n+\n /**\n  * This class is a Junit unit test for Chronology.\n  *\n         assertEquals(\"era\", DateTimeFieldType.era().getName());\n         assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType());\n         assertEquals(null, DateTimeFieldType.era().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().era(), DateTimeFieldType.era().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().era().isSupported(), DateTimeFieldType.era().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().era(), DateTimeFieldType.era().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().era().isSupported(), DateTimeFieldType.era().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.era());\n     }\n \n         assertEquals(\"centuryOfEra\", DateTimeFieldType.centuryOfEra().getName());\n         assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType());\n         assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.centuryOfEra());\n     }\n \n         assertEquals(\"yearOfCentury\", DateTimeFieldType.yearOfCentury().getName());\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType());\n         assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.yearOfCentury());\n     }\n \n         assertEquals(\"yearOfEra\", DateTimeFieldType.yearOfEra().getName());\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfEra().getDurationType());\n         assertEquals(DurationFieldType.eras(), DateTimeFieldType.yearOfEra().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().yearOfEra(), DateTimeFieldType.yearOfEra().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().yearOfEra().isSupported(), DateTimeFieldType.yearOfEra().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().yearOfEra(), DateTimeFieldType.yearOfEra().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().yearOfEra().isSupported(), DateTimeFieldType.yearOfEra().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.yearOfEra());\n     }\n \n         assertEquals(\"year\", DateTimeFieldType.year().getName());\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.year().getDurationType());\n         assertEquals(null, DateTimeFieldType.year().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().year(), DateTimeFieldType.year().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().year().isSupported(), DateTimeFieldType.year().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().year(), DateTimeFieldType.year().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().year().isSupported(), DateTimeFieldType.year().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.year());\n     }\n \n         assertEquals(\"monthOfYear\", DateTimeFieldType.monthOfYear().getName());\n         assertEquals(DurationFieldType.months(), DateTimeFieldType.monthOfYear().getDurationType());\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.monthOfYear().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().monthOfYear(), DateTimeFieldType.monthOfYear().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().monthOfYear().isSupported(), DateTimeFieldType.monthOfYear().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().monthOfYear(), DateTimeFieldType.monthOfYear().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().monthOfYear().isSupported(), DateTimeFieldType.monthOfYear().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.monthOfYear());\n     }\n \n         assertEquals(\"weekyearOfCentury\", DateTimeFieldType.weekyearOfCentury().getName());\n         assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyearOfCentury().getDurationType());\n         assertEquals(DurationFieldType.centuries(), DateTimeFieldType.weekyearOfCentury().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().weekyearOfCentury().isSupported(), DateTimeFieldType.weekyearOfCentury().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weekyearOfCentury().isSupported(), DateTimeFieldType.weekyearOfCentury().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.weekyearOfCentury());\n     }\n \n         assertEquals(\"weekyear\", DateTimeFieldType.weekyear().getName());\n         assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyear().getDurationType());\n         assertEquals(null, DateTimeFieldType.weekyear().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().weekyear(), DateTimeFieldType.weekyear().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().weekyear().isSupported(), DateTimeFieldType.weekyear().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weekyear(), DateTimeFieldType.weekyear().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weekyear().isSupported(), DateTimeFieldType.weekyear().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.weekyear());\n     }\n \n         assertEquals(\"weekOfWeekyear\", DateTimeFieldType.weekOfWeekyear().getName());\n         assertEquals(DurationFieldType.weeks(), DateTimeFieldType.weekOfWeekyear().getDurationType());\n         assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekOfWeekyear().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().weekOfWeekyear().isSupported(), DateTimeFieldType.weekOfWeekyear().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weekOfWeekyear().isSupported(), DateTimeFieldType.weekOfWeekyear().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.weekOfWeekyear());\n     }\n \n         assertEquals(\"dayOfYear\", DateTimeFieldType.dayOfYear().getName());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfYear().getDurationType());\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.dayOfYear().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().dayOfYear(), DateTimeFieldType.dayOfYear().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().dayOfYear().isSupported(), DateTimeFieldType.dayOfYear().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().dayOfYear(), DateTimeFieldType.dayOfYear().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().dayOfYear().isSupported(), DateTimeFieldType.dayOfYear().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.dayOfYear());\n     }\n \n         assertEquals(\"dayOfMonth\", DateTimeFieldType.dayOfMonth().getName());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfMonth().getDurationType());\n         assertEquals(DurationFieldType.months(), DateTimeFieldType.dayOfMonth().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.dayOfMonth());\n     }\n \n         assertEquals(\"dayOfWeek\", DateTimeFieldType.dayOfWeek().getName());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfWeek().getDurationType());\n         assertEquals(DurationFieldType.weeks(), DateTimeFieldType.dayOfWeek().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().dayOfWeek(), DateTimeFieldType.dayOfWeek().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().dayOfWeek().isSupported(), DateTimeFieldType.dayOfWeek().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().dayOfWeek(), DateTimeFieldType.dayOfWeek().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().dayOfWeek().isSupported(), DateTimeFieldType.dayOfWeek().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.dayOfWeek());\n     }\n \n         assertEquals(\"halfdayOfDay\", DateTimeFieldType.halfdayOfDay().getName());\n         assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.halfdayOfDay().getDurationType());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.halfdayOfDay().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().halfdayOfDay(), DateTimeFieldType.halfdayOfDay().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().halfdayOfDay().isSupported(), DateTimeFieldType.halfdayOfDay().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay(), DateTimeFieldType.halfdayOfDay().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().halfdayOfDay().isSupported(), DateTimeFieldType.halfdayOfDay().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.halfdayOfDay());\n     }\n \n         assertEquals(\"clockhourOfDay\", DateTimeFieldType.clockhourOfDay().getName());\n         assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfDay().getDurationType());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.clockhourOfDay().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().clockhourOfDay(), DateTimeFieldType.clockhourOfDay().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().clockhourOfDay().isSupported(), DateTimeFieldType.clockhourOfDay().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay(), DateTimeFieldType.clockhourOfDay().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().clockhourOfDay().isSupported(), DateTimeFieldType.clockhourOfDay().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.clockhourOfDay());\n     }\n \n         assertEquals(\"clockhourOfHalfday\", DateTimeFieldType.clockhourOfHalfday().getName());\n         assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfHalfday().getDurationType());\n         assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.clockhourOfHalfday().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().clockhourOfHalfday().isSupported(), DateTimeFieldType.clockhourOfHalfday().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().clockhourOfHalfday().isSupported(), DateTimeFieldType.clockhourOfHalfday().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.clockhourOfHalfday());\n     }\n \n         assertEquals(\"hourOfHalfday\", DateTimeFieldType.hourOfHalfday().getName());\n         assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfHalfday().getDurationType());\n         assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.hourOfHalfday().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().hourOfHalfday(), DateTimeFieldType.hourOfHalfday().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().hourOfHalfday().isSupported(), DateTimeFieldType.hourOfHalfday().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday(), DateTimeFieldType.hourOfHalfday().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().hourOfHalfday().isSupported(), DateTimeFieldType.hourOfHalfday().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.hourOfHalfday());\n     }\n \n         assertEquals(\"hourOfDay\", DateTimeFieldType.hourOfDay().getName());\n         assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfDay().getDurationType());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.hourOfDay().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().hourOfDay(), DateTimeFieldType.hourOfDay().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().hourOfDay().isSupported(), DateTimeFieldType.hourOfDay().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().hourOfDay(), DateTimeFieldType.hourOfDay().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().hourOfDay().isSupported(), DateTimeFieldType.hourOfDay().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.hourOfDay());\n     }\n \n         assertEquals(\"minuteOfDay\", DateTimeFieldType.minuteOfDay().getName());\n         assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfDay().getDurationType());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.minuteOfDay().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().minuteOfDay(), DateTimeFieldType.minuteOfDay().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().minuteOfDay().isSupported(), DateTimeFieldType.minuteOfDay().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().minuteOfDay(), DateTimeFieldType.minuteOfDay().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().minuteOfDay().isSupported(), DateTimeFieldType.minuteOfDay().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.minuteOfDay());\n     }\n \n         assertEquals(\"minuteOfHour\", DateTimeFieldType.minuteOfHour().getName());\n         assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfHour().getDurationType());\n         assertEquals(DurationFieldType.hours(), DateTimeFieldType.minuteOfHour().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().minuteOfHour(), DateTimeFieldType.minuteOfHour().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().minuteOfHour().isSupported(), DateTimeFieldType.minuteOfHour().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().minuteOfHour(), DateTimeFieldType.minuteOfHour().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().minuteOfHour().isSupported(), DateTimeFieldType.minuteOfHour().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.minuteOfHour());\n     }\n \n         assertEquals(\"secondOfDay\", DateTimeFieldType.secondOfDay().getName());\n         assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfDay().getDurationType());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.secondOfDay().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().secondOfDay(), DateTimeFieldType.secondOfDay().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().secondOfDay().isSupported(), DateTimeFieldType.secondOfDay().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().secondOfDay(), DateTimeFieldType.secondOfDay().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().secondOfDay().isSupported(), DateTimeFieldType.secondOfDay().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.secondOfDay());\n     }\n \n         assertEquals(\"secondOfMinute\", DateTimeFieldType.secondOfMinute().getName());\n         assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfMinute().getDurationType());\n         assertEquals(DurationFieldType.minutes(), DateTimeFieldType.secondOfMinute().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().secondOfMinute(), DateTimeFieldType.secondOfMinute().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().secondOfMinute().isSupported(), DateTimeFieldType.secondOfMinute().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().secondOfMinute(), DateTimeFieldType.secondOfMinute().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().secondOfMinute().isSupported(), DateTimeFieldType.secondOfMinute().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.secondOfMinute());\n     }\n \n         assertEquals(\"millisOfDay\", DateTimeFieldType.millisOfDay().getName());\n         assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfDay().getDurationType());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.millisOfDay().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().millisOfDay(), DateTimeFieldType.millisOfDay().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().millisOfDay().isSupported(), DateTimeFieldType.millisOfDay().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().millisOfDay(), DateTimeFieldType.millisOfDay().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().millisOfDay().isSupported(), DateTimeFieldType.millisOfDay().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.millisOfDay());\n     }\n \n         assertEquals(\"millisOfSecond\", DateTimeFieldType.millisOfSecond().getName());\n         assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfSecond().getDurationType());\n         assertEquals(DurationFieldType.seconds(), DateTimeFieldType.millisOfSecond().getRangeDurationType());\n-        assertEquals(Chronology.getCopticUTC().millisOfSecond(), DateTimeFieldType.millisOfSecond().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().millisOfSecond().isSupported(), DateTimeFieldType.millisOfSecond().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().millisOfSecond(), DateTimeFieldType.millisOfSecond().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().millisOfSecond().isSupported(), DateTimeFieldType.millisOfSecond().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DateTimeFieldType.millisOfSecond());\n     }\n \n         assertSame(DurationFieldType.hours(), type.getDurationType());\n         assertSame(DurationFieldType.months(), type.getRangeDurationType());\n         try {\n-            type.getField(Chronology.getCopticUTC());\n+            type.getField(CopticChronology.getInstanceUTC());\n             fail();\n         } catch (InternalError ex) {}\n         DateTimeFieldType result = doSerialization(type);\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n \n import org.joda.time.base.AbstractInstant;\n import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n \n /**\n \n     //-----------------------------------------------------------------------\n     public void testGetIntervalChronology_RInterval() {\n-        Interval dt = new Interval(123L, 456L, Chronology.getBuddhist());\n-        assertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt));\n-        \n-        assertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(null));\n+        Interval dt = new Interval(123L, 456L, BuddhistChronology.getInstance());\n+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt));\n+        \n+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null));\n         \n         MutableInterval ai = new MutableInterval() {\n             public Chronology getChronology() {\n                 return null; // testing for this\n             }\n         };\n-        assertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(ai));\n+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(ai));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testGetIntervalChronology_RI_RI() {\n-        DateTime dt1 = new DateTime(123L, Chronology.getBuddhist());\n-        DateTime dt2 = new DateTime(123L, Chronology.getCoptic());\n-        assertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt1, dt2));\n-        assertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt1, null));\n-        assertEquals(Chronology.getCoptic(), DateTimeUtils.getIntervalChronology(null, dt2));\n-        assertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(null, null));\n+        DateTime dt1 = new DateTime(123L, BuddhistChronology.getInstance());\n+        DateTime dt2 = new DateTime(123L, CopticChronology.getInstance());\n+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, dt2));\n+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getIntervalChronology(dt1, null));\n+        assertEquals(CopticChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, dt2));\n+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getIntervalChronology(null, null));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n import org.joda.time.base.AbstractInstant;\n import org.joda.time.chrono.BaseChronology;\n import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.UnsupportedDateTimeField;\n \n     //-----------------------------------------------------------------------\n     public void testToDateMidnight() {\n-        DateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());\n+        DateTime base = new DateTime(TEST_TIME1, CopticChronology.getInstance());\n         DateMidnight test = base.toDateMidnight();\n-        assertEquals(new DateMidnight(base, Chronology.getCoptic()), test);\n+        assertEquals(new DateMidnight(base, CopticChronology.getInstance()), test);\n     }\n \n     public void testToYearMonthDay() {\n-        DateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());\n+        DateTime base = new DateTime(TEST_TIME1, CopticChronology.getInstance());\n         YearMonthDay test = base.toYearMonthDay();\n-        assertEquals(new YearMonthDay(TEST_TIME1, Chronology.getCoptic()), test);\n+        assertEquals(new YearMonthDay(TEST_TIME1, CopticChronology.getInstance()), test);\n     }\n \n     public void testToTimeOfDay() {\n-        DateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());\n+        DateTime base = new DateTime(TEST_TIME1, CopticChronology.getInstance());\n         TimeOfDay test = base.toTimeOfDay();\n-        assertEquals(new TimeOfDay(TEST_TIME1, Chronology.getCoptic()), test);\n+        assertEquals(new TimeOfDay(TEST_TIME1, CopticChronology.getInstance()), test);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n \n /**\n  * This class is a Junit unit test for DateTime.\n         assertEquals(true, test1.year().equals(test1.year()));\n         assertEquals(true, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0).year()));\n         assertEquals(false, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0).monthOfYear()));\n-        assertEquals(false, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic()).year()));\n+        assertEquals(false, test1.year().equals(new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()).year()));\n         \n         assertEquals(true, test1.year().hashCode() == test1.year().hashCode());\n         assertEquals(true, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0).year().hashCode());\n         assertEquals(false, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0).monthOfYear().hashCode());\n-        assertEquals(false, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic()).year().hashCode());\n+        assertEquals(false, test1.year().hashCode() == new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance()).year().hashCode());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestDurationFieldType.java\n+++ b/JodaTime/src/test/org/joda/time/TestDurationFieldType.java\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n \n /**\n  * This class is a Junit unit test for DurationFieldType.\n     public void test_eras() throws Exception {\n         assertEquals(DurationFieldType.eras(), DurationFieldType.eras());\n         assertEquals(\"eras\", DurationFieldType.eras().getName());\n-        assertEquals(Chronology.getCopticUTC().eras(), DurationFieldType.eras().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().eras().isSupported(), DurationFieldType.eras().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().eras(), DurationFieldType.eras().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().eras().isSupported(), DurationFieldType.eras().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DurationFieldType.eras());\n     }\n \n     public void test_centuries() throws Exception {\n         assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries());\n         assertEquals(\"centuries\", DurationFieldType.centuries().getName());\n-        assertEquals(Chronology.getCopticUTC().centuries(), DurationFieldType.centuries().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().centuries(), DurationFieldType.centuries().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DurationFieldType.centuries());\n     }\n \n     public void test_years() throws Exception {\n         assertEquals(DurationFieldType.years(), DurationFieldType.years());\n         assertEquals(\"years\", DurationFieldType.years().getName());\n-        assertEquals(Chronology.getCopticUTC().years(), DurationFieldType.years().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().years().isSupported(), DurationFieldType.years().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().years(), DurationFieldType.years().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().years().isSupported(), DurationFieldType.years().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DurationFieldType.years());\n     }\n \n     public void test_months() throws Exception {\n         assertEquals(DurationFieldType.months(), DurationFieldType.months());\n         assertEquals(\"months\", DurationFieldType.months().getName());\n-        assertEquals(Chronology.getCopticUTC().months(), DurationFieldType.months().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().months().isSupported(), DurationFieldType.months().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().months(), DurationFieldType.months().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().months().isSupported(), DurationFieldType.months().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DurationFieldType.months());\n     }\n \n     public void test_weekyears() throws Exception {\n         assertEquals(DurationFieldType.weekyears(), DurationFieldType.weekyears());\n         assertEquals(\"weekyears\", DurationFieldType.weekyears().getName());\n-        assertEquals(Chronology.getCopticUTC().weekyears(), DurationFieldType.weekyears().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().weekyears().isSupported(), DurationFieldType.weekyears().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weekyears(), DurationFieldType.weekyears().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weekyears().isSupported(), DurationFieldType.weekyears().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DurationFieldType.weekyears());\n     }\n \n     public void test_weeks() throws Exception {\n         assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks());\n         assertEquals(\"weeks\", DurationFieldType.weeks().getName());\n-        assertEquals(Chronology.getCopticUTC().weeks(), DurationFieldType.weeks().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weeks(), DurationFieldType.weeks().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DurationFieldType.weeks());\n     }\n \n     public void test_days() throws Exception {\n         assertEquals(DurationFieldType.days(), DurationFieldType.days());\n         assertEquals(\"days\", DurationFieldType.days().getName());\n-        assertEquals(Chronology.getCopticUTC().days(), DurationFieldType.days().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().days().isSupported(), DurationFieldType.days().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().days(), DurationFieldType.days().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().days().isSupported(), DurationFieldType.days().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DurationFieldType.days());\n     }\n \n     public void test_halfdays() throws Exception {\n         assertEquals(DurationFieldType.halfdays(), DurationFieldType.halfdays());\n         assertEquals(\"halfdays\", DurationFieldType.halfdays().getName());\n-        assertEquals(Chronology.getCopticUTC().halfdays(), DurationFieldType.halfdays().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().halfdays().isSupported(), DurationFieldType.halfdays().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().halfdays(), DurationFieldType.halfdays().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().halfdays().isSupported(), DurationFieldType.halfdays().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DurationFieldType.halfdays());\n     }\n \n     public void test_hours() throws Exception {\n         assertEquals(DurationFieldType.hours(), DurationFieldType.hours());\n         assertEquals(\"hours\", DurationFieldType.hours().getName());\n-        assertEquals(Chronology.getCopticUTC().hours(), DurationFieldType.hours().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().hours().isSupported(), DurationFieldType.hours().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().hours(), DurationFieldType.hours().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().hours().isSupported(), DurationFieldType.hours().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DurationFieldType.hours());\n     }\n \n     public void test_minutes() throws Exception {\n         assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes());\n         assertEquals(\"minutes\", DurationFieldType.minutes().getName());\n-        assertEquals(Chronology.getCopticUTC().minutes(), DurationFieldType.minutes().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().minutes(), DurationFieldType.minutes().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DurationFieldType.minutes());\n     }\n \n     public void test_seconds() throws Exception {\n         assertEquals(DurationFieldType.seconds(), DurationFieldType.seconds());\n         assertEquals(\"seconds\", DurationFieldType.seconds().getName());\n-        assertEquals(Chronology.getCopticUTC().seconds(), DurationFieldType.seconds().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().seconds().isSupported(), DurationFieldType.seconds().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().seconds(), DurationFieldType.seconds().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().seconds().isSupported(), DurationFieldType.seconds().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DurationFieldType.seconds());\n     }\n \n     public void test_millis() throws Exception {\n         assertEquals(DurationFieldType.millis(), DurationFieldType.millis());\n         assertEquals(\"millis\", DurationFieldType.millis().getName());\n-        assertEquals(Chronology.getCopticUTC().millis(), DurationFieldType.millis().getField(Chronology.getCopticUTC()));\n-        assertEquals(Chronology.getCopticUTC().millis().isSupported(), DurationFieldType.millis().isSupported(Chronology.getCopticUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().millis(), DurationFieldType.millis().getField(CopticChronology.getInstanceUTC()));\n+        assertEquals(CopticChronology.getInstanceUTC().millis().isSupported(), DurationFieldType.millis().isSupported(CopticChronology.getInstanceUTC()));\n         assertSerialization(DurationFieldType.millis());\n     }\n \n         \n         assertEquals(\"other\", type.getName());\n         try {\n-            type.getField(Chronology.getCopticUTC());\n+            type.getField(CopticChronology.getInstanceUTC());\n             fail();\n         } catch (InternalError ex) {}\n         DurationFieldType result = doSerialization(type);\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n \n import org.joda.time.base.AbstractDuration;\n import org.joda.time.base.BaseDuration;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for Duration.\n             6L * DateTimeConstants.MILLIS_PER_MINUTE +\n             7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n         Duration test = new Duration(length);\n-        Period result = test.toPeriod(Chronology.getISOUTC());\n-        assertEquals(new Period(test, Chronology.getISOUTC()), result);\n-        assertEquals(new Period(test.getMillis(), Chronology.getISOUTC()), result);\n+        Period result = test.toPeriod(ISOChronology.getInstanceUTC());\n+        assertEquals(new Period(test, ISOChronology.getInstanceUTC()), result);\n+        assertEquals(new Period(test.getMillis(), ISOChronology.getInstanceUTC()), result);\n     }\n \n     //-----------------------------------------------------------------------\n             6L * DateTimeConstants.MILLIS_PER_MINUTE +\n             7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n         Duration test = new Duration(length);\n-        Period result = test.toPeriod(PeriodType.standard().withMillisRemoved(), Chronology.getISOUTC());\n-        assertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), Chronology.getISOUTC()), result);\n-        assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), Chronology.getISOUTC()), result);\n+        Period result = test.toPeriod(PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC());\n+        assertEquals(new Period(test, PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result);\n+        assertEquals(new Period(test.getMillis(), PeriodType.standard().withMillisRemoved(), ISOChronology.getInstanceUTC()), result);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java\n+++ b/JodaTime/src/test/org/joda/time/TestIllegalFieldValueException.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.field.SkipDateTimeField;\n \n \n     public void testVerifyValueBounds() {\n         try {\n-            FieldUtils.verifyValueBounds(Chronology.getISO().monthOfYear(), -5, 1, 31);\n+            FieldUtils.verifyValueBounds(ISOChronology.getInstance().monthOfYear(), -5, 1, 31);\n             fail();\n         } catch (IllegalFieldValueException e) {\n             assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());\n \n     public void testSkipDateTimeField() {\n         DateTimeField field = new SkipDateTimeField\n-            (Chronology.getISOUTC(), Chronology.getISOUTC().year(), 1970);\n+            (ISOChronology.getInstanceUTC(), ISOChronology.getInstanceUTC().year(), 1970);\n         try {\n             field.set(0, 1970);\n             fail();\n \n     public void testSetText() {\n         try {\n-            Chronology.getISOUTC().year().set(0, null, java.util.Locale.US);\n+            ISOChronology.getInstanceUTC().year().set(0, null, java.util.Locale.US);\n             fail();\n         } catch (IllegalFieldValueException e) {\n             assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());\n         }\n \n         try {\n-            Chronology.getISOUTC().year().set(0, \"nineteen seventy\", java.util.Locale.US);\n+            ISOChronology.getInstanceUTC().year().set(0, \"nineteen seventy\", java.util.Locale.US);\n             fail();\n         } catch (IllegalFieldValueException e) {\n             assertEquals(DateTimeFieldType.year(), e.getDateTimeFieldType());\n         }\n \n         try {\n-            Chronology.getISOUTC().era().set(0, \"long ago\", java.util.Locale.US);\n+            ISOChronology.getInstanceUTC().era().set(0, \"long ago\", java.util.Locale.US);\n             fail();\n         } catch (IllegalFieldValueException e) {\n             assertEquals(DateTimeFieldType.era(), e.getDateTimeFieldType());\n         }\n \n         try {\n-            Chronology.getISOUTC().monthOfYear().set(0, \"spring\", java.util.Locale.US);\n+            ISOChronology.getInstanceUTC().monthOfYear().set(0, \"spring\", java.util.Locale.US);\n             fail();\n         } catch (IllegalFieldValueException e) {\n             assertEquals(DateTimeFieldType.monthOfYear(), e.getDateTimeFieldType());\n         }\n \n         try {\n-            Chronology.getISOUTC().dayOfWeek().set(0, \"yesterday\", java.util.Locale.US);\n+            ISOChronology.getInstanceUTC().dayOfWeek().set(0, \"yesterday\", java.util.Locale.US);\n             fail();\n         } catch (IllegalFieldValueException e) {\n             assertEquals(DateTimeFieldType.dayOfWeek(), e.getDateTimeFieldType());\n         }\n \n         try {\n-            Chronology.getISOUTC().halfdayOfDay().set(0, \"morning\", java.util.Locale.US);\n+            ISOChronology.getInstanceUTC().halfdayOfDay().set(0, \"morning\", java.util.Locale.US);\n             fail();\n         } catch (IllegalFieldValueException e) {\n             assertEquals(DateTimeFieldType.halfdayOfDay(), e.getDateTimeFieldType());\n     }\n \n     public void testJulianYearZero() {\n-        DateTime dt = new DateTime(Chronology.getJulianUTC());\n+        DateTime dt = new DateTime(JulianChronology.getInstanceUTC());\n         try {\n             dt.year().setCopy(0);\n             fail();\n     }\n \n     public void testGJCutover() {\n-        DateTime dt = new DateTime(\"1582-10-04\", Chronology.getGJUTC());\n+        DateTime dt = new DateTime(\"1582-10-04\", GJChronology.getInstanceUTC());\n         try {\n             dt.dayOfMonth().setCopy(5);\n             fail();\n             assertEquals(null, e.getUpperBound());\n         }\n \n-        dt = new DateTime(\"1582-10-15\", Chronology.getGJUTC());\n+        dt = new DateTime(\"1582-10-15\", GJChronology.getInstanceUTC());\n         try {\n             dt.dayOfMonth().setCopy(14);\n             fail();\n--- a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n     public void testGetMethods() {\n         Instant test = new Instant();\n         \n-        assertEquals(Chronology.getISOUTC(), test.getChronology());\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n         assertEquals(DateTimeZone.UTC, test.getZone());\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n     }\n             return TEST_TIME1;\n         }\n         public Chronology getChronology() {\n-            return Chronology.getISOUTC();\n+            return ISOChronology.getInstanceUTC();\n         }\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.MockZeroNullIntegerConverter;\n \n      */\n     public void testConstructor() throws Throwable {\n         Instant test = new Instant();\n-        assertEquals(Chronology.getISOUTC(), test.getChronology());\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n     }\n \n      */\n     public void testConstructor_long1() throws Throwable {\n         Instant test = new Instant(TEST_TIME1);\n-        assertEquals(Chronology.getISOUTC(), test.getChronology());\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n         assertEquals(TEST_TIME1, test.getMillis());\n     }\n \n      */\n     public void testConstructor_long2() throws Throwable {\n         Instant test = new Instant(TEST_TIME2);\n-        assertEquals(Chronology.getISOUTC(), test.getChronology());\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n         assertEquals(TEST_TIME2, test.getMillis());\n     }\n \n     public void testConstructor_Object() throws Throwable {\n         Date date = new Date(TEST_TIME1);\n         Instant test = new Instant(date);\n-        assertEquals(Chronology.getISOUTC(), test.getChronology());\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n         assertEquals(TEST_TIME1, test.getMillis());\n     }\n \n      */\n     public void testConstructor_nullObject() throws Throwable {\n         Instant test = new Instant((Object) null);\n-        assertEquals(Chronology.getISOUTC(), test.getChronology());\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n     }\n \n         try {\n             ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n             Instant test = new Instant(new Integer(0));\n-            assertEquals(Chronology.getISOUTC(), test.getChronology());\n+            assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n             assertEquals(0L, test.getMillis());\n         } finally {\n             ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInterval;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for Instant.\n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n         assertEquals(false, test1.hashCode() == test3.hashCode());\n         assertEquals(false, test2.hashCode() == test3.hashCode());\n         \n-        Interval test4 = new Interval(TEST_TIME1, TEST_TIME2, Chronology.getGJ());\n+        Interval test4 = new Interval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance());\n         assertEquals(true, test4.equals(test4));\n         assertEquals(false, test1.equals(test4));\n         assertEquals(false, test2.equals(test4));\n             super();\n         }\n         public Chronology getChronology() {\n-            return Chronology.getISO();\n+            return ISOChronology.getInstance();\n         }\n         public long getStartMillis() {\n             return TEST_TIME1;\n     //-----------------------------------------------------------------------\n     public void testWithChronology1() {\n         Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n-        Interval test = base.withChronology(Chronology.getBuddhist());\n-        assertEquals(new Interval(TEST_TIME1, TEST_TIME2, Chronology.getBuddhist()), test);\n+        Interval test = base.withChronology(BuddhistChronology.getInstance());\n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME2, BuddhistChronology.getInstance()), test);\n     }\n \n     public void testWithChronology2() {\n         Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n         Interval test = base.withChronology(null);\n-        assertEquals(new Interval(TEST_TIME1, TEST_TIME2, Chronology.getISO()), test);\n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME2, ISOChronology.getInstance()), test);\n     }\n \n     public void testWithChronology3() {\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.IntervalConverter;\n-\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n /**\n  * This class is a JUnit test for Interval.\n         Interval test = new Interval(dt1.getMillis(), dt2.getMillis());\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getISO(), test.getChronology());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n     }\n \n     public void testConstructor_long_long2() throws Throwable {\n         Interval test = new Interval(dt1.getMillis(), dt1.getMillis());\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt1.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getISO(), test.getChronology());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n     }\n \n     public void testConstructor_long_long3() throws Throwable {\n     public void testConstructor_long_long_Chronology1() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), Chronology.getGJ());\n-        assertEquals(dt1.getMillis(), test.getStartMillis());\n-        assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getGJ(), test.getChronology());\n+        Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), GJChronology.getInstance());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(GJChronology.getInstance(), test.getChronology());\n     }\n \n     public void testConstructor_long_long_Chronology2() throws Throwable {\n         Interval test = new Interval(dt1.getMillis(), dt2.getMillis(), null);\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getISO(), test.getChronology());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     public void testConstructor_RI_RI8() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getGJ());\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, GJChronology.getInstance());\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n         Interval test = new Interval(dt1, dt2);\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getGJ(), test.getChronology());\n+        assertEquals(GJChronology.getInstance(), test.getChronology());\n     }\n \n     public void testConstructor_RI_RI9() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getGJ());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, GJChronology.getInstance());\n         Interval test = new Interval(dt1, dt2);\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getISO(), test.getChronology());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     public void testConstructor_RI_RP3() throws Throwable {\n-        DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getCopticUTC());\n+        DateTime dt = new DateTime(TEST_TIME_NOW, CopticChronology.getInstanceUTC());\n         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());\n         long result = TEST_TIME_NOW;\n-        result = Chronology.getCopticUTC().months().add(result, 6);\n-        result = Chronology.getCopticUTC().days().add(result, 3);\n-        result = Chronology.getCopticUTC().hours().add(result, 1);\n+        result = CopticChronology.getInstanceUTC().months().add(result, 6);\n+        result = CopticChronology.getInstanceUTC().days().add(result, 3);\n+        result = CopticChronology.getInstanceUTC().hours().add(result, 1);\n         \n         Interval test = new Interval(dt, dur);\n         assertEquals(dt.getMillis(), test.getStartMillis());\n         Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);\n         long result = TEST_TIME_NOW;\n-        result = Chronology.getISOUTC().months().add(result, -6);\n-        result = Chronology.getISOUTC().days().add(result, -3);\n-        result = Chronology.getISOUTC().hours().add(result, -1);\n+        result = ISOChronology.getInstanceUTC().months().add(result, -6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, -3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, -1);\n         \n         Interval test = new Interval(dur, dt);\n         assertEquals(result, test.getStartMillis());\n     }\n \n     public void testConstructor_RP_RI3() throws Throwable {\n-        DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getCopticUTC());\n+        DateTime dt = new DateTime(TEST_TIME_NOW, CopticChronology.getInstanceUTC());\n         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());\n         long result = TEST_TIME_NOW;\n-        result = Chronology.getCopticUTC().months().add(result, -6);\n-        result = Chronology.getCopticUTC().days().add(result, -3);\n-        result = Chronology.getCopticUTC().hours().add(result, -1);\n+        result = CopticChronology.getInstanceUTC().months().add(result, -6);\n+        result = CopticChronology.getInstanceUTC().days().add(result, -3);\n+        result = CopticChronology.getInstanceUTC().hours().add(result, -1);\n         \n         Interval test = new Interval(dur, dt);\n         assertEquals(result, test.getStartMillis());\n \n     class MockInterval implements ReadableInterval {\n         public Chronology getChronology() {\n-            return Chronology.getISO();\n+            return ISOChronology.getInstance();\n         }\n         public long getStartMillis() {\n             return 1234L;\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n         Interval base = new Interval(dt1, dt2);\n         \n-        Interval test = new Interval(base, Chronology.getBuddhist());\n-        assertEquals(dt1.getMillis(), test.getStartMillis());\n-        assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getBuddhist(), test.getChronology());\n+        Interval test = new Interval(base, BuddhistChronology.getInstance());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(BuddhistChronology.getInstance(), test.getChronology());\n     }\n \n     public void testConstructor_Object_Chronology2() throws Throwable {\n         Interval test = new Interval(base, null);\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getISO(), test.getChronology());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n     }\n \n }\n--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java\n import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInterval;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for Instant.\n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n     \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n         assertEquals(false, test1.hashCode() == test3.hashCode());\n         assertEquals(false, test2.hashCode() == test3.hashCode());\n         \n-        MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, Chronology.getGJ());\n+        MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2, GJChronology.getInstance());\n         assertEquals(true, test4.equals(test4));\n         assertEquals(false, test1.equals(test4));\n         assertEquals(false, test2.equals(test4));\n             super();\n         }\n         public Chronology getChronology() {\n-            return Chronology.getISO();\n+            return ISOChronology.getInstance();\n         }\n         public long getStartMillis() {\n             return TEST_TIME1;\n--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.IntervalConverter;\n-\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n \n /**\n  * This class is a JUnit test for Interval.\n         MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis());\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getISO(), test.getChronology());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n     }\n \n     public void testConstructor_long_long2() throws Throwable {\n         MutableInterval test = new MutableInterval(dt1.getMillis(), dt1.getMillis());\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt1.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getISO(), test.getChronology());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n     }\n \n     public void testConstructor_long_long3() throws Throwable {\n     public void testConstructor_long_long_Chronology1() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), Chronology.getGJ());\n-        assertEquals(dt1.getMillis(), test.getStartMillis());\n-        assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getGJ(), test.getChronology());\n+        MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), GJChronology.getInstance());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(GJChronology.getInstance(), test.getChronology());\n     }\n \n     public void testConstructor_long_long_Chronology2() throws Throwable {\n         MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis(), null);\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getISO(), test.getChronology());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     public void testConstructor_RI_RI8() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getGJ());\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, GJChronology.getInstance());\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n         MutableInterval test = new MutableInterval(dt1, dt2);\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getGJ(), test.getChronology());\n+        assertEquals(GJChronology.getInstance(), test.getChronology());\n     }\n \n     public void testConstructor_RI_RI9() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getGJ());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, GJChronology.getInstance());\n         MutableInterval test = new MutableInterval(dt1, dt2);\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getISO(), test.getChronology());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n     }\n \n     //-----------------------------------------------------------------------\n         DateTime dt = new DateTime(TEST_TIME_NOW);\n         Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n         long result = TEST_TIME_NOW;\n-        result = Chronology.getISO().months().add(result, 6);\n-        result = Chronology.getISO().hours().add(result, 1);\n+        result = ISOChronology.getInstance().months().add(result, 6);\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n         \n         MutableInterval test = new MutableInterval(dt, dur);\n         assertEquals(dt.getMillis(), test.getStartMillis());\n         Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);\n         long result = TEST_TIME_NOW;\n-        result = Chronology.getISOUTC().months().add(result, 6);\n-        result = Chronology.getISOUTC().days().add(result, 3);\n-        result = Chronology.getISOUTC().hours().add(result, 1);\n+        result = ISOChronology.getInstanceUTC().months().add(result, 6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, 3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, 1);\n         \n         MutableInterval test = new MutableInterval(dt, dur);\n         assertEquals(dt.getMillis(), test.getStartMillis());\n     }\n \n     public void testConstructor_RI_RP3() throws Throwable {\n-        DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getISOUTC());\n+        DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC());\n         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());\n         long result = TEST_TIME_NOW;\n-        result = Chronology.getISOUTC().months().add(result, 6);\n-        result = Chronology.getISOUTC().days().add(result, 3);\n-        result = Chronology.getISOUTC().hours().add(result, 1);\n+        result = ISOChronology.getInstanceUTC().months().add(result, 6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, 3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, 1);\n         \n         MutableInterval test = new MutableInterval(dt, dur);\n         assertEquals(dt.getMillis(), test.getStartMillis());\n         DateTime dt = new DateTime(TEST_TIME_NOW);\n         Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n         long result = TEST_TIME_NOW;\n-        result = Chronology.getISO().months().add(result, -6);\n-        result = Chronology.getISO().hours().add(result, -1);\n+        result = ISOChronology.getInstance().months().add(result, -6);\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n         \n         MutableInterval test = new MutableInterval(dur, dt);\n         assertEquals(result, test.getStartMillis());\n         Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);\n         long result = TEST_TIME_NOW;\n-        result = Chronology.getISOUTC().months().add(result, -6);\n-        result = Chronology.getISOUTC().days().add(result, -3);\n-        result = Chronology.getISOUTC().hours().add(result, -1);\n+        result = ISOChronology.getInstanceUTC().months().add(result, -6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, -3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, -1);\n         \n         MutableInterval test = new MutableInterval(dur, dt);\n         assertEquals(result, test.getStartMillis());\n     }\n \n     public void testConstructor_RP_RI3() throws Throwable {\n-        DateTime dt = new DateTime(TEST_TIME_NOW, Chronology.getISOUTC());\n+        DateTime dt = new DateTime(TEST_TIME_NOW, ISOChronology.getInstanceUTC());\n         Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.standard());\n         long result = TEST_TIME_NOW;\n-        result = Chronology.getISOUTC().months().add(result, -6);\n-        result = Chronology.getISOUTC().days().add(result, -3);\n-        result = Chronology.getISOUTC().hours().add(result, -1);\n+        result = ISOChronology.getInstanceUTC().months().add(result, -6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, -3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, -1);\n         \n         MutableInterval test = new MutableInterval(dur, dt);\n         assertEquals(result, test.getStartMillis());\n \n     class MockInterval implements ReadableInterval {\n         public Chronology getChronology() {\n-            return Chronology.getISO();\n+            return ISOChronology.getInstance();\n         }\n         public long getStartMillis() {\n             return 1234L;\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n         Interval base = new Interval(dt1, dt2);\n         \n-        MutableInterval test = new MutableInterval(base, Chronology.getBuddhist());\n-        assertEquals(dt1.getMillis(), test.getStartMillis());\n-        assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getBuddhist(), test.getChronology());\n+        MutableInterval test = new MutableInterval(base, BuddhistChronology.getInstance());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertEquals(BuddhistChronology.getInstance(), test.getChronology());\n     }\n \n     public void testConstructor_Object_Chronology2() throws Throwable {\n         MutableInterval test = new MutableInterval(base, null);\n         assertEquals(dt1.getMillis(), test.getStartMillis());\n         assertEquals(dt2.getMillis(), test.getEndMillis());\n-        assertEquals(Chronology.getISO(), test.getChronology());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n     }\n \n }\n--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Updates.java\n import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInterval;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for Instant.\n     \n     class MockBadInterval extends AbstractInterval {\n         public Chronology getChronology() {\n-            return Chronology.getISO();\n+            return ISOChronology.getInstance();\n         }\n         public long getStartMillis() {\n             return TEST_TIME1 - 1;\n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a JUnit test for MutableDuration.\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        MutablePeriod test = new MutablePeriod(length, Chronology.getISO());\n+        MutablePeriod test = new MutablePeriod(length, ISOChronology.getInstance());\n         assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        MutablePeriod test = new MutablePeriod(length, Chronology.getISOUTC());\n+        MutablePeriod test = new MutablePeriod(length, ISOChronology.getInstanceUTC());\n         assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        MutablePeriod test = new MutablePeriod(length, PeriodType.time().withMillisRemoved(), Chronology.getISO());\n+        MutablePeriod test = new MutablePeriod(length, PeriodType.time().withMillisRemoved(), ISOChronology.getInstance());\n         assertEquals(PeriodType.time().withMillisRemoved(), test.getPeriodType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), Chronology.getISOUTC());\n+        MutablePeriod test = new MutablePeriod(length, PeriodType.standard(), ISOChronology.getInstanceUTC());\n         assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n \n     //-----------------------------------------------------------------------\n     public void testConstructor_long_long_Chronology1() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());\n-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());\n-        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), Chronology.getCoptic());\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance());\n         assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(1, test.getYears());\n         assertEquals(1, test.getMonths());\n \n     //-----------------------------------------------------------------------\n     public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());\n-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());\n-        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, Chronology.getCoptic());\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());\n+        MutablePeriod test = new MutablePeriod(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance());\n         assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(1, test.getYears());\n         assertEquals(1, test.getMonths());\n             5L * DateTimeConstants.MILLIS_PER_HOUR +\n             6L * DateTimeConstants.MILLIS_PER_MINUTE +\n             7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n-        MutablePeriod test = new MutablePeriod(new Duration(length), Chronology.getISO());\n+        MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstance());\n         assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n         assertEquals(0, test.getMonths());\n             5L * DateTimeConstants.MILLIS_PER_HOUR +\n             6L * DateTimeConstants.MILLIS_PER_MINUTE +\n             7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n-        MutablePeriod test = new MutablePeriod(new Duration(length), Chronology.getISOUTC());\n+        MutablePeriod test = new MutablePeriod(new Duration(length), ISOChronology.getInstanceUTC());\n         assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n         assertEquals(0, test.getMonths());\n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a JUnit test for MutableDuration.\n     //-----------------------------------------------------------------------\n     public void testAdd_long_Chronology1() {\n         MutablePeriod test = new MutablePeriod(100L);\n-        test.add(100L, Chronology.getISO());\n+        test.add(100L, ISOChronology.getInstance());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n             5L * DateTimeConstants.MILLIS_PER_HOUR +\n             6L * DateTimeConstants.MILLIS_PER_MINUTE +\n             7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n-        test.add(ms, Chronology.getISO());\n+        test.add(ms, ISOChronology.getInstance());\n         // only time fields are precise\n         assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450 days\n         assertEquals(0, test.getMonths());\n             5L * DateTimeConstants.MILLIS_PER_HOUR +\n             6L * DateTimeConstants.MILLIS_PER_MINUTE +\n             7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n-        test.add(ms, Chronology.getISOUTC());\n+        test.add(ms, ISOChronology.getInstanceUTC());\n         // UTC, so weeks and day also precise\n         assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450 days\n         assertEquals(0, test.getMonths());\n--- a/JodaTime/src/test/org/joda/time/TestPartial_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestPartial_Basics.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n \n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final int OFFSET = 1;\n-    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);\n-    private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);\n-    private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);\n-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();\n-    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);\n-    private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);\n-    private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);\n-    private static final Chronology ISO_UTC = Chronology.getISOUTC();\n-    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);\n-    private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);\n-    private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);\n-    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n     \n     private long TEST_TIME_NOW =\n             10L * DateTimeConstants.MILLIS_PER_HOUR\n \n     public void testGetField() {\n         Partial test = createHourMinPartial(COPTIC_PARIS);\n-        assertSame(Chronology.getCopticUTC().hourOfDay(), test.getField(0));\n-        assertSame(Chronology.getCopticUTC().minuteOfHour(), test.getField(1));\n+        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0));\n+        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1));\n         try {\n             test.getField(-1);\n         } catch (IndexOutOfBoundsException ex) {}\n         Partial test = createHourMinPartial(COPTIC_PARIS);\n         DateTimeField[] fields = test.getFields();\n         assertEquals(2, fields.length);\n-        assertSame(Chronology.getCopticUTC().hourOfDay(), fields[0]);\n-        assertSame(Chronology.getCopticUTC().minuteOfHour(), fields[1]);\n+        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), fields[0]);\n+        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), fields[1]);\n         assertNotSame(test.getFields(), test.getFields());\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestPartial_Match.java\n+++ b/JodaTime/src/test/org/joda/time/TestPartial_Match.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n /**\n  * This class is a Junit unit test for Partial.\n  *\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final int OFFSET = 1;\n-    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);\n-    private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);\n-    private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);\n-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();\n-    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);\n-    private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);\n-    private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);\n-    private static final Chronology ISO_UTC = Chronology.getISOUTC();\n-    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);\n-    private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);\n-    private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);\n-    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n     \n     private long TEST_TIME_NOW =\n             10L * DateTimeConstants.MILLIS_PER_HOUR\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a JUnit test for Duration.\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        Period test = new Period(length, Chronology.getISO());\n+        Period test = new Period(length, ISOChronology.getInstance());\n         assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        Period test = new Period(length, Chronology.getISOUTC());\n+        Period test = new Period(length, ISOChronology.getInstanceUTC());\n         assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        Period test = new Period(length, PeriodType.time().withMillisRemoved(), Chronology.getISO());\n+        Period test = new Period(length, PeriodType.time().withMillisRemoved(), ISOChronology.getInstance());\n         assertEquals(PeriodType.time().withMillisRemoved(), test.getPeriodType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        Period test = new Period(length, PeriodType.standard(), Chronology.getISOUTC());\n+        Period test = new Period(length, PeriodType.standard(), ISOChronology.getInstanceUTC());\n         assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n \n     //-----------------------------------------------------------------------\n     public void testConstructor_long_long_Chronology1() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());\n-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());\n-        Period test = new Period(dt1.getMillis(), dt2.getMillis(), Chronology.getCoptic());\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), CopticChronology.getInstance());\n         assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(1, test.getYears());\n         assertEquals(1, test.getMonths());\n \n     //-----------------------------------------------------------------------\n     public void testConstructor_long_long_PeriodType_Chronology1() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getCoptic());\n-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, Chronology.getCoptic());\n-        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, Chronology.getCoptic());\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0, CopticChronology.getInstance());\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1, CopticChronology.getInstance());\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), (PeriodType) null, CopticChronology.getInstance());\n         assertEquals(PeriodType.standard(), test.getPeriodType());\n         assertEquals(1, test.getYears());\n         assertEquals(1, test.getMonths());\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java\n import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n \n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final int OFFSET = 1;\n-    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);\n-    private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);\n-    private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);\n-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();\n-    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);\n-    private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);\n-    private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);\n-    private static final Chronology ISO_UTC = Chronology.getISOUTC();\n-    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);\n-    private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);\n-    private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);\n-    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n     \n     private long TEST_TIME_NOW =\n             10L * DateTimeConstants.MILLIS_PER_HOUR\n \n     public void testGetField() {\n         TimeOfDay test = new TimeOfDay(COPTIC_PARIS);\n-        assertSame(Chronology.getCopticUTC().hourOfDay(), test.getField(0));\n-        assertSame(Chronology.getCopticUTC().minuteOfHour(), test.getField(1));\n-        assertSame(Chronology.getCopticUTC().secondOfMinute(), test.getField(2));\n-        assertSame(Chronology.getCopticUTC().millisOfSecond(), test.getField(3));\n+        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), test.getField(0));\n+        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), test.getField(1));\n+        assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), test.getField(2));\n+        assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), test.getField(3));\n         try {\n             test.getField(-1);\n         } catch (IndexOutOfBoundsException ex) {}\n     public void testGetFields() {\n         TimeOfDay test = new TimeOfDay(COPTIC_PARIS);\n         DateTimeField[] fields = test.getFields();\n-        assertSame(Chronology.getCopticUTC().hourOfDay(), fields[0]);\n-        assertSame(Chronology.getCopticUTC().minuteOfHour(), fields[1]);\n-        assertSame(Chronology.getCopticUTC().secondOfMinute(), fields[2]);\n-        assertSame(Chronology.getCopticUTC().millisOfSecond(), fields[3]);\n+        assertSame(CopticChronology.getInstanceUTC().hourOfDay(), fields[0]);\n+        assertSame(CopticChronology.getInstanceUTC().minuteOfHour(), fields[1]);\n+        assertSame(CopticChronology.getInstanceUTC().secondOfMinute(), fields[2]);\n+        assertSame(CopticChronology.getInstanceUTC().millisOfSecond(), fields[3]);\n         assertNotSame(test.getFields(), test.getFields());\n     }\n \n \n     class MockInstant extends MockPartial {\n         public Chronology getChronology() {\n-            return Chronology.getCopticUTC();\n+            return CopticChronology.getInstanceUTC();\n         }\n         public DateTimeField[] getFields() {\n             return new DateTimeField[] {\n-                Chronology.getCopticUTC().hourOfDay(),\n-                Chronology.getCopticUTC().minuteOfHour(),\n-                Chronology.getCopticUTC().secondOfMinute(),\n-                Chronology.getCopticUTC().millisOfSecond(),\n+                CopticChronology.getInstanceUTC().hourOfDay(),\n+                CopticChronology.getInstanceUTC().minuteOfHour(),\n+                CopticChronology.getInstanceUTC().secondOfMinute(),\n+                CopticChronology.getInstanceUTC().millisOfSecond(),\n             };\n         }\n         public int[] getValues() {\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n      * Test constructor (Object)\n      */\n     public void testConstructor_todObject() throws Throwable {\n-        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, Chronology.getCoptic(PARIS));\n+        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, CopticChronology.getInstance(PARIS));\n         TimeOfDay test = new TimeOfDay(base);\n-        assertEquals(Chronology.getCopticUTC(), test.getChronology());\n+        assertEquals(CopticChronology.getInstanceUTC(), test.getChronology());\n         assertEquals(10, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n \n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final int OFFSET = 1;\n-    private static final Chronology COPTIC_PARIS = Chronology.getCoptic(PARIS);\n-    private static final Chronology COPTIC_LONDON = Chronology.getCoptic(LONDON);\n-    private static final Chronology COPTIC_TOKYO = Chronology.getCoptic(TOKYO);\n-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();\n-    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);\n-    private static final Chronology ISO_LONDON = Chronology.getISO(LONDON);\n-    private static final Chronology ISO_TOKYO = Chronology.getISO(TOKYO);\n-    private static final Chronology ISO_UTC = Chronology.getISOUTC();\n-    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);\n-    private static final Chronology BUDDHIST_LONDON = Chronology.getBuddhist(LONDON);\n-    private static final Chronology BUDDHIST_TOKYO = Chronology.getBuddhist(TOKYO);\n-    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n     \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n /**\n  * This class is a Junit unit test for YearMonthDay.\n  *\n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();\n-    private static final Chronology ISO_UTC = Chronology.getISOUTC();\n-    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();\n-    private static final Chronology GREGORIAN_UTC = Chronology.getGregorianUTC();\n-    private static final Chronology GREGORIAN_PARIS = Chronology.getGregorian(PARIS);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n     \n     private long TEST_TIME_NOW =\n             (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n--- a/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java\n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final Chronology BUDDHIST_UTC = Chronology.getBuddhistUTC();\n-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();\n-    private static final Chronology JULIAN_UTC = Chronology.getJulianUTC();\n-    private static final Chronology GJ_UTC = Chronology.getGJUTC();\n-    private static final Chronology ISO_UTC = Chronology.getISOUTC();\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    private static final Chronology GJ_UTC = GJChronology.getInstanceUTC();\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n-    private static final Chronology COPTIC_UTC = Chronology.getCopticUTC();\n-    private static final Chronology JULIAN_UTC = Chronology.getJulianUTC();\n-    private static final Chronology ISO_UTC = Chronology.getISOUTC();\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java\n     public void testMaximumValue() {\n         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n-        Chronology chrono = Chronology.getGregorian();\n+        Chronology chrono = GregorianChronology.getInstance();\n         assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1));\n         assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis()));\n     }\n--- a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java\n         GregorianCalendar cal = new GregorianCalendar();\n         cal.setTime(new Date(12345678L));\n         TimeOfDay tod = new TimeOfDay();\n-        int[] expected = Chronology.getISO().get(tod, 12345678L);\n-        int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, Chronology.getISO());\n+        int[] expected = ISOChronology.getInstance().get(tod, 12345678L);\n+        int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, ISOChronology.getInstance());\n         assertEquals(true, Arrays.equals(expected, actual));\n     }\n \n--- a/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java\n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n     //-----------------------------------------------------------------------\n     public void testGetPartialValues() throws Exception {\n         TimeOfDay tod = new TimeOfDay();\n-        int[] expected = Chronology.getCoptic().get(tod, 12345678L);\n-        int[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), Chronology.getCoptic());\n+        int[] expected = CopticChronology.getInstance().get(tod, 12345678L);\n+        int[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), CopticChronology.getInstance());\n         assertEquals(true, Arrays.equals(expected, actual));\n     }\n \n--- a/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n     //-----------------------------------------------------------------------\n     public void testGetPartialValues() throws Exception {\n         TimeOfDay tod = new TimeOfDay();\n-        int[] expected = Chronology.getISO().get(tod, 12345678L);\n-        int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), Chronology.getISO());\n+        int[] expected = ISOChronology.getInstance().get(tod, 12345678L);\n+        int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n         assertEquals(true, Arrays.equals(expected, actual));\n     }\n \n--- a/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n import org.joda.time.MutablePeriod;\n import org.joda.time.PeriodType;\n import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n     public void testGetPartialValues() throws Exception {\n         TimeOfDay tod = new TimeOfDay();\n         int[] expected = new int[] {10 + 1, 20, 30, 40}; // now\n-        int[] actual = NullConverter.INSTANCE.getPartialValues(tod, null, Chronology.getISO());\n+        int[] actual = NullConverter.INSTANCE.getPartialValues(tod, null, ISOChronology.getInstance());\n         assertEquals(true, Arrays.equals(expected, actual));\n     }\n \n     }\n \n     public void testSetInto_Object_Chronology1() throws Exception {\n-        MutableInterval m = new MutableInterval(1000L, 2000L, Chronology.getGJ());\n+        MutableInterval m = new MutableInterval(1000L, 2000L, GJChronology.getInstance());\n         NullConverter.INSTANCE.setInto(m, null, null);\n         assertEquals(TEST_TIME_NOW, m.getStartMillis());\n         assertEquals(TEST_TIME_NOW, m.getEndMillis());\n-        assertEquals(Chronology.getISO(), m.getChronology());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n     }\n \n     public void testSetInto_Object_Chronology2() throws Exception {\n-        MutableInterval m = new MutableInterval(1000L, 2000L, Chronology.getGJ());\n-        NullConverter.INSTANCE.setInto(m, null, Chronology.getCoptic());\n+        MutableInterval m = new MutableInterval(1000L, 2000L, GJChronology.getInstance());\n+        NullConverter.INSTANCE.setInto(m, null, CopticChronology.getInstance());\n         assertEquals(TEST_TIME_NOW, m.getStartMillis());\n         assertEquals(TEST_TIME_NOW, m.getEndMillis());\n-        assertEquals(Chronology.getCoptic(), m.getChronology());\n+        assertEquals(CopticChronology.getInstance(), m.getChronology());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n     //-----------------------------------------------------------------------\n     public void testGetPartialValues() throws Exception {\n         TimeOfDay tod = new TimeOfDay();\n-        int[] expected = Chronology.getISO().get(tod, 12345678L);\n-        int[] actual = ReadableInstantConverter.INSTANCE.getPartialValues(tod, new Instant(12345678L), Chronology.getISO());\n+        int[] expected = ISOChronology.getInstance().get(tod, 12345678L);\n+        int[] actual = ReadableInstantConverter.INSTANCE.getPartialValues(tod, new Instant(12345678L), ISOChronology.getInstance());\n         assertEquals(true, Arrays.equals(expected, actual));\n     }\n \n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.Interval;\n+import org.joda.time.MutableInterval;\n+import org.joda.time.MutablePeriod;\n import org.joda.time.PeriodType;\n-import org.joda.time.Interval;\n-import org.joda.time.MutablePeriod;\n-import org.joda.time.MutableInterval;\n import org.joda.time.ReadableInterval;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n     public void testSetIntoPeriod_Object2() throws Exception {\n         Interval i = new Interval(100L, 223L);\n         MutablePeriod m = new MutablePeriod(PeriodType.millis());\n-        ReadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getCoptic());\n+        ReadableIntervalConverter.INSTANCE.setInto(m, i, CopticChronology.getInstance());\n         assertEquals(0, m.getYears());\n         assertEquals(0, m.getMonths());\n         assertEquals(0, m.getWeeks());\n     }\n \n     public void testSetIntoInterval_Object1() throws Exception {\n-        Interval i = new Interval(0L, 123L, Chronology.getCoptic());\n-        MutableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());\n+        Interval i = new Interval(0L, 123L, CopticChronology.getInstance());\n+        MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());\n         ReadableIntervalConverter.INSTANCE.setInto(m, i, null);\n         assertEquals(0L, m.getStartMillis());\n         assertEquals(123L, m.getEndMillis());\n-        assertEquals(Chronology.getCoptic(), m.getChronology());\n+        assertEquals(CopticChronology.getInstance(), m.getChronology());\n     }\n \n     public void testSetIntoInterval_Object2() throws Exception {\n-        Interval i = new Interval(0L, 123L, Chronology.getCoptic());\n-        MutableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());\n-        ReadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getGJ());\n+        Interval i = new Interval(0L, 123L, CopticChronology.getInstance());\n+        MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());\n+        ReadableIntervalConverter.INSTANCE.setInto(m, i, GJChronology.getInstance());\n         assertEquals(0L, m.getStartMillis());\n         assertEquals(123L, m.getEndMillis());\n-        assertEquals(Chronology.getGJ(), m.getChronology());\n+        assertEquals(GJChronology.getInstance(), m.getChronology());\n     }\n \n     public void testSetIntoInterval_Object3() throws Exception {\n                 return null; // bad\n             }\n         };\n-        MutableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());\n-        ReadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getGJ());\n+        MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());\n+        ReadableIntervalConverter.INSTANCE.setInto(m, i, GJChronology.getInstance());\n         assertEquals(0L, m.getStartMillis());\n         assertEquals(123L, m.getEndMillis());\n-        assertEquals(Chronology.getGJ(), m.getChronology());\n+        assertEquals(GJChronology.getInstance(), m.getChronology());\n     }\n \n     public void testSetIntoInterval_Object4() throws Exception {\n                 return null; // bad\n             }\n         };\n-        MutableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());\n+        MutableInterval m = new MutableInterval(-1000L, 1000L, BuddhistChronology.getInstance());\n         ReadableIntervalConverter.INSTANCE.setInto(m, i, null);\n         assertEquals(0L, m.getStartMillis());\n         assertEquals(123L, m.getEndMillis());\n-        assertEquals(Chronology.getISO(), m.getChronology());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java\n     public void testGetPartialValues() throws Exception {\n         TimeOfDay tod = new TimeOfDay();\n         int[] expected = new int[] {1, 2, 3, 4};\n-        int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), Chronology.getISO(PARIS));\n+        int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n         assertEquals(true, Arrays.equals(expected, actual));\n         \n         try {\n--- a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n import org.joda.time.MutablePeriod;\n import org.joda.time.PeriodType;\n import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n     public void testGetPartialValues() throws Exception {\n         TimeOfDay tod = new TimeOfDay();\n         int[] expected = new int[] {3, 4, 5, 6};\n-        int[] actual = StringConverter.INSTANCE.getPartialValues(tod, \"T03:04:05.006\", Chronology.getISO());\n+        int[] actual = StringConverter.INSTANCE.getPartialValues(tod, \"T03:04:05.006\", ISOChronology.getInstance());\n         assertEquals(true, Arrays.equals(expected, actual));\n     }\n \n         StringConverter.INSTANCE.setInto(m, \"2004-06-09/P1Y2M\", null);\n         assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getStart());\n         assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0), m.getEnd());\n-        assertEquals(Chronology.getISO(), m.getChronology());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n     }\n \n     public void testSetIntoInterval_Object_Chronology2() throws Exception {\n         StringConverter.INSTANCE.setInto(m, \"P1Y2M/2004-06-09\", null);\n         assertEquals(new DateTime(2003, 4, 9, 0, 0, 0, 0), m.getStart());\n         assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getEnd());\n-        assertEquals(Chronology.getISO(), m.getChronology());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n     }\n \n     public void testSetIntoInterval_Object_Chronology3() throws Exception {\n         StringConverter.INSTANCE.setInto(m, \"2003-08-09/2004-06-09\", null);\n         assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0), m.getStart());\n         assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0), m.getEnd());\n-        assertEquals(Chronology.getISO(), m.getChronology());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n     }\n \n     public void testSetIntoInterval_Object_Chronology4() throws Exception {\n         StringConverter.INSTANCE.setInto(m, \"2004-06-09T+06:00/P1Y2M\", null);\n         assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart());\n         assertEquals(new DateTime(2005, 8, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getEnd());\n-        assertEquals(Chronology.getISO(), m.getChronology());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n     }\n \n     public void testSetIntoInterval_Object_Chronology5() throws Exception {\n         StringConverter.INSTANCE.setInto(m, \"P1Y2M/2004-06-09T+06:00\", null);\n         assertEquals(new DateTime(2003, 4, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart());\n         assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getEnd());\n-        assertEquals(Chronology.getISO(), m.getChronology());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n     }\n \n     public void testSetIntoInterval_Object_Chronology6() throws Exception {\n         StringConverter.INSTANCE.setInto(m, \"2003-08-09T+06:00/2004-06-09T+07:00\", null);\n         assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, SIX).withChronology(null), m.getStart());\n         assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, SEVEN).withChronology(null), m.getEnd());\n-        assertEquals(Chronology.getISO(), m.getChronology());\n+        assertEquals(ISOChronology.getInstance(), m.getChronology());\n     }\n \n     public void testSetIntoInterval_Object_Chronology7() throws Exception {\n         MutableInterval m = new MutableInterval(-1000L, 1000L);\n-        StringConverter.INSTANCE.setInto(m, \"2003-08-09/2004-06-09\", Chronology.getBuddhist());\n-        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, Chronology.getBuddhist()), m.getStart());\n-        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getBuddhist()), m.getEnd());\n-        assertEquals(Chronology.getBuddhist(), m.getChronology());\n+        StringConverter.INSTANCE.setInto(m, \"2003-08-09/2004-06-09\", BuddhistChronology.getInstance());\n+        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, BuddhistChronology.getInstance()), m.getStart());\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, BuddhistChronology.getInstance()), m.getEnd());\n+        assertEquals(BuddhistChronology.getInstance(), m.getChronology());\n     }\n \n     public void testSetIntoInterval_Object_Chronology8() throws Exception {\n         MutableInterval m = new MutableInterval(-1000L, 1000L);\n-        StringConverter.INSTANCE.setInto(m, \"2003-08-09T+06:00/2004-06-09T+07:00\", Chronology.getBuddhist(EIGHT));\n-        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, Chronology.getBuddhist(SIX)).withZone(EIGHT), m.getStart());\n-        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, Chronology.getBuddhist(SEVEN)).withZone(EIGHT), m.getEnd());\n-        assertEquals(Chronology.getBuddhist(EIGHT), m.getChronology());\n+        StringConverter.INSTANCE.setInto(m, \"2003-08-09T+06:00/2004-06-09T+07:00\", BuddhistChronology.getInstance(EIGHT));\n+        assertEquals(new DateTime(2003, 8, 9, 0, 0, 0, 0, BuddhistChronology.getInstance(SIX)).withZone(EIGHT), m.getStart());\n+        assertEquals(new DateTime(2004, 6, 9, 0, 0, 0, 0, BuddhistChronology.getInstance(SEVEN)).withZone(EIGHT), m.getEnd());\n+        assertEquals(BuddhistChronology.getInstance(EIGHT), m.getChronology());\n     }\n \n     public void testSetIntoIntervalEx_Object_Chronology1() throws Exception {\n--- a/JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java\n+++ b/JodaTime/src/test/org/joda/time/field/TestBaseDateTimeField.java\n import org.joda.time.DurationFieldType;\n import org.joda.time.TimeOfDay;\n import org.joda.time.base.BasePartial;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for BaseDateTimeField.\n             super();\n         }\n         public DurationField getDurationField() {\n-            return Chronology.getISOUTC().seconds();\n+            return ISOChronology.getInstanceUTC().seconds();\n         }\n         public DurationField getRangeDurationField() {\n-            return Chronology.getISOUTC().minutes();\n+            return ISOChronology.getInstanceUTC().minutes();\n         }\n     }\n \n     static class MockPartial extends BasePartial {\n         protected DateTimeField getField(int index, Chronology chrono) {\n             if (index == 0) {\n-                return Chronology.getISOUTC().minuteOfHour();\n+                return ISOChronology.getInstanceUTC().minuteOfHour();\n             }\n             if (index == 1) {\n-                return Chronology.getISOUTC().millisOfSecond();\n+                return ISOChronology.getInstanceUTC().millisOfSecond();\n             }\n             return null;\n         }\n--- a/JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java\n+++ b/JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n-import org.joda.time.Chronology;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for PeriodFormatterBuilder.\n     //-----------------------------------------------------------------------\n     public void test_compareTo() {\n         assertEquals(0, MillisDurationField.INSTANCE.compareTo(MillisDurationField.INSTANCE));\n-        assertEquals(-1, MillisDurationField.INSTANCE.compareTo(Chronology.getISO().seconds()));\n+        assertEquals(-1, MillisDurationField.INSTANCE.compareTo(ISOChronology.getInstance().seconds()));\n         DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);\n         assertEquals(1, MillisDurationField.INSTANCE.compareTo(dummy));\n         try {\n--- a/JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java\n+++ b/JodaTime/src/test/org/joda/time/field/TestOffsetDateTimeField.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n-import org.joda.time.Chronology;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for PreciseDateTimeField.\n     //-----------------------------------------------------------------------\n     public void test_constructor1() {\n         OffsetDateTimeField field = new OffsetDateTimeField(\n-            Chronology.getISO().secondOfMinute(), 3\n+            ISOChronology.getInstance().secondOfMinute(), 3\n         );\n         assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());\n         assertEquals(3, field.getOffset());\n         } catch (IllegalArgumentException ex) {}\n         \n         try {\n-            field = new OffsetDateTimeField(Chronology.getISO().secondOfMinute(), 0);\n+            field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), 0);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         \n \n     public void test_constructor2() {\n         OffsetDateTimeField field = new OffsetDateTimeField(\n-            Chronology.getISO().secondOfMinute(), DateTimeFieldType.secondOfDay(), 3\n+            ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 3\n         );\n         assertEquals(DateTimeFieldType.secondOfDay(), field.getType());\n         assertEquals(3, field.getOffset());\n         } catch (IllegalArgumentException ex) {}\n         \n         try {\n-            field = new OffsetDateTimeField(Chronology.getISO().secondOfMinute(), null, 3);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        \n-        try {\n-            field = new OffsetDateTimeField(Chronology.getISO().secondOfMinute(), DateTimeFieldType.secondOfDay(), 0);\n+            field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), null, 3);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            field = new OffsetDateTimeField(ISOChronology.getInstance().secondOfMinute(), DateTimeFieldType.secondOfDay(), 0);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n     public void test_getType() {\n         OffsetDateTimeField field = new OffsetDateTimeField(\n-            Chronology.getISO().secondOfMinute(), 3\n+            ISOChronology.getInstance().secondOfMinute(), 3\n         );\n         assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());\n     }\n \n     public void test_getName() {\n         OffsetDateTimeField field = new OffsetDateTimeField(\n-            Chronology.getISO().secondOfMinute(), 3\n+            ISOChronology.getInstance().secondOfMinute(), 3\n         );\n         assertEquals(\"secondOfMinute\", field.getName());\n     }\n \n     public void test_toString() {\n         OffsetDateTimeField field = new OffsetDateTimeField(\n-            Chronology.getISO().secondOfMinute(), 3\n+            ISOChronology.getInstance().secondOfMinute(), 3\n         );\n         assertEquals(\"DateTimeField[secondOfMinute]\", field.toString());\n     }\n \n     public void test_getOffset() {\n         OffsetDateTimeField field = new OffsetDateTimeField(\n-            Chronology.getISO().secondOfMinute(), 5\n+            ISOChronology.getInstance().secondOfMinute(), 5\n         );\n         assertEquals(5, field.getOffset());\n     }\n     //-----------------------------------------------------------------------\n     static class MockOffsetDateTimeField extends OffsetDateTimeField {\n         protected MockOffsetDateTimeField() {\n-            super(Chronology.getISO().secondOfMinute(), 3);\n+            super(ISOChronology.getInstance().secondOfMinute(), 3);\n         }\n     }\n \n             super();\n         }\n         public DurationField getDurationField() {\n-            return Chronology.getISOUTC().seconds();\n+            return ISOChronology.getInstanceUTC().seconds();\n         }\n         public DurationField getRangeDurationField() {\n-            return Chronology.getISOUTC().minutes();\n+            return ISOChronology.getInstanceUTC().minutes();\n         }\n     }\n \n--- a/JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java\n+++ b/JodaTime/src/test/org/joda/time/field/TestPreciseDateTimeField.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n-import org.joda.time.Chronology;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for PreciseDateTimeField.\n     public void test_constructor() {\n         BaseDateTimeField field = new PreciseDateTimeField(\n             DateTimeFieldType.secondOfMinute(),\n-            Chronology.getISOUTC().millis(),\n-            Chronology.getISOUTC().hours()\n+            ISOChronology.getInstanceUTC().millis(),\n+            ISOChronology.getInstanceUTC().hours()\n         );\n         assertEquals(DateTimeFieldType.secondOfMinute(), field.getType());\n         try {\n             field = new PreciseDateTimeField(\n                 DateTimeFieldType.minuteOfHour(),\n                 new MockImpreciseDurationField(DurationFieldType.minutes()),\n-                Chronology.getISOUTC().hours());\n+                ISOChronology.getInstanceUTC().hours());\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n             field = new PreciseDateTimeField(\n                 DateTimeFieldType.minuteOfHour(),\n-                Chronology.getISOUTC().hours(),\n+                ISOChronology.getInstanceUTC().hours(),\n                 new MockImpreciseDurationField(DurationFieldType.minutes()));\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n             field = new PreciseDateTimeField(\n                 DateTimeFieldType.minuteOfHour(),\n-                Chronology.getISOUTC().hours(),\n-                Chronology.getISOUTC().hours());\n+                ISOChronology.getInstanceUTC().hours(),\n+                ISOChronology.getInstanceUTC().hours());\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n             field = new PreciseDateTimeField(\n                 DateTimeFieldType.minuteOfHour(),\n                 new MockZeroDurationField(DurationFieldType.minutes()),\n-                Chronology.getISOUTC().hours());\n+                ISOChronology.getInstanceUTC().hours());\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n     public void test_getType() {\n         BaseDateTimeField field = new PreciseDateTimeField(\n             DateTimeFieldType.secondOfDay(),\n-            Chronology.getISOUTC().millis(),\n-            Chronology.getISOUTC().hours()\n+            ISOChronology.getInstanceUTC().millis(),\n+            ISOChronology.getInstanceUTC().hours()\n         );\n         assertEquals(DateTimeFieldType.secondOfDay(), field.getType());\n     }\n     public void test_getName() {\n         BaseDateTimeField field = new PreciseDateTimeField(\n             DateTimeFieldType.secondOfDay(),\n-            Chronology.getISOUTC().millis(),\n-            Chronology.getISOUTC().hours()\n+            ISOChronology.getInstanceUTC().millis(),\n+            ISOChronology.getInstanceUTC().hours()\n         );\n         assertEquals(\"secondOfDay\", field.getName());\n     }\n     public void test_toString() {\n         BaseDateTimeField field = new PreciseDateTimeField(\n             DateTimeFieldType.secondOfDay(),\n-            Chronology.getISOUTC().millis(),\n-            Chronology.getISOUTC().hours()\n+            ISOChronology.getInstanceUTC().millis(),\n+            ISOChronology.getInstanceUTC().hours()\n         );\n         assertEquals(\"DateTimeField[secondOfDay]\", field.toString());\n     }\n             super();\n         }\n         public DurationField getDurationField() {\n-            return Chronology.getISOUTC().seconds();\n+            return ISOChronology.getInstanceUTC().seconds();\n         }\n         public DurationField getRangeDurationField() {\n-            return Chronology.getISOUTC().minutes();\n+            return ISOChronology.getInstanceUTC().minutes();\n         }\n     }\n \n--- a/JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java\n+++ b/JodaTime/src/test/org/joda/time/field/TestPreciseDurationDateTimeField.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n-import org.joda.time.Chronology;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.TimeOfDay;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for PreciseDurationDateTimeField.\n             super();\n         }\n         public DurationField getDurationField() {\n-            return Chronology.getISOUTC().seconds();\n+            return ISOChronology.getInstanceUTC().seconds();\n         }\n         public DurationField getRangeDurationField() {\n-            return Chronology.getISOUTC().minutes();\n+            return ISOChronology.getInstanceUTC().minutes();\n         }\n     }\n \n--- a/JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java\n+++ b/JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n-import org.joda.time.Chronology;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for PreciseDurationField.\n     //-----------------------------------------------------------------------\n     public void test_equals() {\n         assertEquals(true, iField.equals(iField));\n-        assertEquals(false, iField.equals(Chronology.getISO().minutes()));\n+        assertEquals(false, iField.equals(ISOChronology.getInstance().minutes()));\n         DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);\n         assertEquals(false, iField.equals(dummy));\n         dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000);\n \n     public void test_hashCode() {\n         assertEquals(true, iField.hashCode() == iField.hashCode());\n-        assertEquals(false, iField.hashCode() == Chronology.getISO().minutes().hashCode());\n+        assertEquals(false, iField.hashCode() == ISOChronology.getInstance().minutes().hashCode());\n         DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);\n         assertEquals(false, iField.hashCode() == dummy.hashCode());\n         dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000);\n     //-----------------------------------------------------------------------\n     public void test_compareTo() {\n         assertEquals(0, iField.compareTo(iField));\n-        assertEquals(-1, iField.compareTo(Chronology.getISO().minutes()));\n+        assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes()));\n         DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);\n         assertEquals(1, iField.compareTo(dummy));\n         try {\n--- a/JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java\n+++ b/JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n-import org.joda.time.Chronology;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for PreciseDurationField.\n     //-----------------------------------------------------------------------\n     public void test_equals() {\n         assertEquals(true, iField.equals(iField));\n-        assertEquals(false, iField.equals(Chronology.getISO().minutes()));\n+        assertEquals(false, iField.equals(ISOChronology.getInstance().minutes()));\n         DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2);\n         assertEquals(false, iField.equals(dummy));\n         dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90);\n \n     public void test_hashCode() {\n         assertEquals(iField.hashCode(), iField.hashCode());\n-        assertEquals(false, iField.hashCode() == Chronology.getISO().minutes().hashCode());\n+        assertEquals(false, iField.hashCode() == ISOChronology.getInstance().minutes().hashCode());\n         DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2);\n         assertEquals(false, iField.hashCode() == dummy.hashCode());\n         dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90);\n     //-----------------------------------------------------------------------\n     public void test_compareTo() {\n         assertEquals(0, iField.compareTo(iField));\n-        assertEquals(-1, iField.compareTo(Chronology.getISO().minutes()));\n+        assertEquals(-1, iField.compareTo(ISOChronology.getInstance().minutes()));\n         DurationField dummy = new PreciseDurationField(DurationFieldType.minutes(), 0);\n         assertEquals(1, iField.compareTo(dummy));\n         try {\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.chrono.GJChronology;\n \n /**\n  * This class is a Junit unit test for DateTime Formating.\n     }\n \n     public void testFormat_yearOfEraParse() {\n-        Chronology chrono = Chronology.getGJUTC();\n+        Chronology chrono = GJChronology.getInstanceUTC();\n \n         DateTimeFormatter f = DateTimeFormat\n             .forPattern(\"YYYY-MM GG\")\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n import org.joda.time.DateTimeZone;\n import org.joda.time.MutableDateTime;\n import org.joda.time.ReadablePartial;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for DateTime Formating.\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n-    private static final Chronology ISO_UTC = Chronology.getISOUTC();\n-    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);\n-    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java\n //        dt = dt.withZone(LONDON);\n //        assertEquals(\"2004-06-09T12:20:30.040+02:00\", ISODateTimeFormat.dateTime().print(dt.getMillis(), PARIS));\n //        \n-//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, Chronology.getCoptic());\n+//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, CopticChronology.getInstance());\n //        assertEquals(\"2288-02-19T10:20:30.040Z\", ISODateTimeFormat.dateTime().print(dt));\n //        \n-//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, Chronology.getCoptic());\n-//        assertEquals(\"2004-06-09T10:20:30.040Z\", ISODateTimeFormat.getInstance(Chronology.getCoptic()).dateTime().print(dt));\n+//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, CopticChronology.getInstance());\n+//        assertEquals(\"2004-06-09T10:20:30.040Z\", ISODateTimeFormat.getInstance(CopticChronology.getInstance()).dateTime().print(dt));\n     }\n \n     public void testFormat_dateTimeNoMillis() {\n--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java\n import org.joda.time.MutablePeriod;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * This class is a Junit unit test for Period Formating.\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n-    private static final Chronology ISO_UTC = Chronology.getISOUTC();\n-    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);\n-    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n \n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n--- a/JodaTime/src/test/org/joda/time/format/TestTextFields.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestTextFields.java\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.MutableDateTime;\n+import org.joda.time.chrono.ISOChronology;\n \n /**\n  * Makes sure that text fields are correct for English.\n     public void testMonthNames_monthEnd() {\n         DateTimeFormatter printer = DateTimeFormat.forPattern(\"MMMM\");\n         for (int i=0; i<ZONES.length; i++) {\n-            Chronology chrono = Chronology.getISO(ZONES[i]);\n+            Chronology chrono = ISOChronology.getInstance(ZONES[i]);\n             for (int month=1; month<=12; month++) {\n                 DateTime dt = new DateTime(2004, month, 1, 23, 20, 30, 40, chrono);\n                 int lastDay = chrono.dayOfMonth().getMaximumValue(dt.getMillis());\n     public void testHalfdayNames() {\n         DateTimeFormatter printer = DateTimeFormat.forPattern(\"a\");\n         for (int i=0; i<ZONES.length; i++) {\n-            Chronology chrono = Chronology.getISO(ZONES[i]);\n+            Chronology chrono = ISOChronology.getInstance(ZONES[i]);\n             MutableDateTime mdt = new MutableDateTime(2004, 5, 30, 0, 20, 30, 40, chrono);\n             for (int hour=0; hour<24; hour++) {\n                 mdt.setHourOfDay(hour);", "timestamp": 1125864533, "metainfo": ""}