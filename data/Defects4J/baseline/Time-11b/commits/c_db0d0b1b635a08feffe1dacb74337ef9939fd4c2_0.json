{"sha": "db0d0b1b635a08feffe1dacb74337ef9939fd4c2", "log": "Removed isMatchingType method.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractPartialInstant.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractPartialInstant.java\n     public abstract DateTimeField getUpperLimit();\n \n     /**\n-     * Returns true if the given instant is a PartialDateTime that supports the\n-     * same exact set of fields. Implementations may simply do the following:\n-     * <pre>\n-     *     return instant instanceof &lt;this class&gt;;\n-     * </pre>\n-     *\n-     * @return true if instant is same type as this\n-     */\n-    public abstract boolean isMatchingType(ReadableInstant instant);\n-\n-    /**\n      * Returns the given instant, except with lower and upper limits\n      * applied. Field values are reset below the lower limit and at or above\n      * the upper limit.\n      *  not or the instant is null or of an incorrect type\n      */\n     public boolean equals(Object readableInstant) {\n-        return super.equals(readableInstant) && isMatchingType((ReadableInstant) readableInstant);\n+        if (this == readableInstant) {\n+            return true;\n+        }\n+        return super.equals(readableInstant) && isMatchingType(readableInstant);\n     }\n \n     private static boolean equals(Object a, Object b) {\n         return (a == b) || (a != null && a.equals(b));\n+    }\n+\n+    /**\n+     * Returns true if the given instant is a PartialInstant that supports the\n+     * same exact set of fields.\n+     *\n+     * @param instant  the instant to compare to\n+     * @return true if instant is same type as this\n+     */\n+    private boolean isMatchingType(Object instant) {\n+        if (instant instanceof PartialInstant) {\n+            PartialInstant partial = (PartialInstant)instant;\n+            return equals(getLowerLimit(), partial.getLowerLimit())\n+                && equals(getUpperLimit(), partial.getUpperLimit());\n+        }\n+        return false;\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/PartialInstant.java\n+++ b/JodaTime/src/java/org/joda/time/PartialInstant.java\n     DateTimeField getUpperLimit();\n \n     /**\n-     * Returns true if the given instant is a PartialDateTime that supports the\n-     * same exact set of fields. Implementations may simply do the following:\n-     * <pre>\n-     *     return instant instanceof &lt;this class&gt;;\n-     * </pre>\n-     *\n-     * @param instant  the instant to compare to\n-     * @return true if instant is same type as this\n-     */\n-    boolean isMatchingType(ReadableInstant instant);\n-\n-    /**\n      * Returns the given instant, except with lower and upper limits\n      * applied. Field values are reset below the lower limit and at or above\n      * the upper limit.", "timestamp": 1073096938, "metainfo": ""}