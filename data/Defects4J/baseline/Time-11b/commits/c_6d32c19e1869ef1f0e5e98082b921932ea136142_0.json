{"sha": "6d32c19e1869ef1f0e5e98082b921932ea136142", "log": "Restored formatting interfaces to provide same functionality as v0.95.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java\n+++ b/JodaTime/src/java/org/joda/time/format/BasePeriodFormatter.java\n  */\n public abstract class BasePeriodFormatter {\n     \n-    /**\n-     * Returns the exact number of characters produced for the given period.\n-     * \n-     * @param period  the period to use\n-     * @return the estimated length\n-     */\n-    protected int calculatePrintedLength(ReadablePeriod period) {\n-        throw new UnsupportedOperationException(\"Printing not supported\");\n-    }\n-\n-    /**\n-     * Returns the amount of fields from the given period that this printer\n-     * will print.\n-     * \n-     * @param period  the period to use\n-     * @return amount of fields printed\n-     */\n-    protected int countFieldsToPrint(ReadablePeriod period) {\n-        return countFieldsToPrint(period, Integer.MAX_VALUE);\n-    }\n-\n-    /**\n-     * Returns the amount of fields from the given period that this printer\n-     * will print.\n-     * \n-     * @param period  the period to use\n-     * @param stopAt stop counting at this value\n-     * @return amount of fields printed\n-     */\n-    protected int countFieldsToPrint(ReadablePeriod period, int stopAt) {\n-        throw new UnsupportedOperationException(\"Printing not supported\");\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void printTo(StringBuffer buf, ReadablePeriod period) {\n-        throw new UnsupportedOperationException(\"Printing not supported\");\n-    }\n-\n-    public void printTo(Writer out, ReadablePeriod period) throws IOException {\n-        throw new UnsupportedOperationException(\"Printing not supported\");\n+    public int countFieldsToPrint(ReadablePeriod period) {\n+        return ((PeriodPrinter) this).countFieldsToPrint(period, Integer.MAX_VALUE);\n     }\n \n     public String print(ReadablePeriod period) {\n-        StringBuffer buf = new StringBuffer(calculatePrintedLength(period));\n-        printTo(buf, period);\n+        PeriodPrinter printer = (PeriodPrinter) this;\n+        StringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period));\n+        printer.printTo(buf, period);\n         return buf.toString();\n     }\n \n     //-----------------------------------------------------------------------\n-    public int parseInto(ReadWritablePeriod period, String periodStr, int position) {\n-        throw new UnsupportedOperationException(\"Parsing not supported\");\n-    }\n-\n     public Period parsePeriod(PeriodType type, String text) {\n-        return parseMutablePeriod(type, text).toPeriod();\n+        return ((PeriodParser) this).parseMutablePeriod(type, text).toPeriod();\n     }\n \n     public MutablePeriod parseMutablePeriod(PeriodType type, String text) {\n-        PeriodParser p = (PeriodParser) this;\n+        PeriodParser parser = (PeriodParser) this;\n         MutablePeriod period = new MutablePeriod(0, type);\n \n-        int newPos = p.parseInto(period, text, 0);\n+        int newPos = parser.parseInto(period, text, 0);\n         if (newPos >= 0) {\n             if (newPos >= text.length()) {\n                 return period;\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatter.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatter.java\n  * Combined interface for printing and parsing.\n  * <p>\n  * See each extended interface for details of the methods.\n- * <p>\n- * Note: This interface represents a view onto {@link BasePeriodFormatter}.\n- * All implementations must extend <code>BasePeriodFormatter</code>.\n  *\n  * @author Brian S O'Neill\n  * @author Stephen Colebourne\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n         int size = formatters.size();\n         if (size >= 1 && formatters.get(0) instanceof Separator) {\n             Separator sep = (Separator) formatters.get(0);\n-            return sep.finish((BasePeriodFormatter) toFormatter(formatters.subList(1, size)));\n+            return sep.finish(toFormatter(formatters.subList(1, size)));\n         }\n         return (PeriodFormatter) createComposite(formatters);\n     }\n         if (formatter == null) {\n             throw new IllegalArgumentException(\"No formatter supplied\");\n         }\n-        if (formatter instanceof BasePeriodFormatter == false) {\n-            throw new IllegalArgumentException(\"Formatter must extend BasePeriodFormatter\");\n-        }\n         clearPrefix();\n         iFormatters.add(formatter);\n         return this;\n         if (lastSeparator != null && formatters.size() == 0) {\n             throw new IllegalStateException(\"Cannot have two adjacent separators\");\n         } else {\n-            BasePeriodFormatter composite = createComposite(formatters);\n+            PeriodFormatter composite = createComposite(formatters);\n             formatters.clear();\n             formatters.add\n                 (new Separator(text, finalText, variants, composite, useBefore, useAfter));\n         iPrefix = null;\n     }\n \n-    private static BasePeriodFormatter createComposite(List formatters) {\n+    private static PeriodFormatter createComposite(List formatters) {\n         switch (formatters.size()) {\n             case 0:\n                 return Literal.EMPTY;\n             case 1:\n-                return (BasePeriodFormatter) formatters.get(0);\n+                return (PeriodFormatter) formatters.get(0);\n             default:\n                 return new Composite(formatters);\n         }\n         private final boolean iUseBefore;\n         private final boolean iUseAfter;\n \n-        private BasePeriodFormatter iBefore;\n-        private BasePeriodFormatter iAfter;\n+        private PeriodFormatter iBefore;\n+        private PeriodFormatter iAfter;\n \n         Separator(String text, String finalText, String[] variants,\n-                  BasePeriodFormatter before, boolean useBefore, boolean useAfter) {\n+                  PeriodFormatter before, boolean useBefore, boolean useAfter) {\n             iText = text;\n             iFinalText = finalText;\n \n         }\n \n         public int calculatePrintedLength(ReadablePeriod period) {\n-            BasePeriodFormatter before = iBefore;\n-            BasePeriodFormatter after = iAfter;\n+            PeriodFormatter before = iBefore;\n+            PeriodFormatter after = iAfter;\n             \n             int sum = before.calculatePrintedLength(period)\n                     + after.calculatePrintedLength(period);\n         }\n \n         public void printTo(StringBuffer buf, ReadablePeriod period) {\n-            BasePeriodFormatter before = iBefore;\n-            BasePeriodFormatter after = iAfter;\n+            PeriodFormatter before = iBefore;\n+            PeriodFormatter after = iAfter;\n             \n             before.printTo(buf, period);\n             if (iUseBefore) {\n         }\n \n         public void printTo(Writer out, ReadablePeriod period) throws IOException {\n-            BasePeriodFormatter before = iBefore;\n-            BasePeriodFormatter after = iAfter;\n+            PeriodFormatter before = iBefore;\n+            PeriodFormatter after = iAfter;\n             \n             before.printTo(out, period);\n             if (iUseBefore) {\n             return position;\n         }\n \n-        Separator finish(BasePeriodFormatter after) {\n+        Separator finish(PeriodFormatter after) {\n             iAfter = after;\n             return this;\n         }\n             extends BasePeriodFormatter\n             implements PeriodFormatter {\n         \n-        private final BasePeriodFormatter[] iFormatters;\n+        private final PeriodFormatter[] iFormatters;\n \n         Composite(List formatters) {\n-            iFormatters = (BasePeriodFormatter[]) formatters.toArray(\n-                new BasePeriodFormatter[formatters.size()]);\n+            iFormatters = (PeriodFormatter[]) formatters.toArray(\n+                new PeriodFormatter[formatters.size()]);\n         }\n \n         public int countFieldsToPrint(ReadablePeriod period, int stopAt) {\n             int sum = 0;\n-            BasePeriodFormatter[] printers = iFormatters;\n+            PeriodFormatter[] printers = iFormatters;\n             for (int i=printers.length; sum < stopAt && --i>=0; ) {\n                 sum += printers[i].countFieldsToPrint(period);\n             }\n \n         public int calculatePrintedLength(ReadablePeriod period) {\n             int sum = 0;\n-            BasePeriodFormatter[] printers = iFormatters;\n+            PeriodFormatter[] printers = iFormatters;\n             for (int i=printers.length; --i>=0; ) {\n                 sum += printers[i].calculatePrintedLength(period);\n             }\n         }\n \n         public void printTo(StringBuffer buf, ReadablePeriod period) {\n-            BasePeriodFormatter[] printers = iFormatters;\n+            PeriodFormatter[] printers = iFormatters;\n             int len = printers.length;\n             for (int i=0; i<len; i++) {\n                 printers[i].printTo(buf, period);\n         }\n \n         public void printTo(Writer out, ReadablePeriod period) throws IOException {\n-            BasePeriodFormatter[] printers = iFormatters;\n+            PeriodFormatter[] printers = iFormatters;\n             int len = printers.length;\n             for (int i=0; i<len; i++) {\n                 printers[i].printTo(out, period);\n \n         public int parseInto(ReadWritablePeriod period,\n                              String periodStr, int position) {\n-            BasePeriodFormatter[] parsers = iFormatters;\n+            PeriodFormatter[] parsers = iFormatters;\n             if (parsers == null) {\n                 throw new UnsupportedOperationException();\n             }\n--- a/JodaTime/src/java/org/joda/time/format/PeriodParser.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodParser.java\n \n /**\n  * Defines an interface for parsing textual representations of time periods.\n- * <p>\n- * Note: This interface represents a view onto {@link BasePeriodFormatter}.\n- * All implementations must extend <code>BasePeriodFormatter</code>.\n  *\n  * @author Brian S O'Neill\n  * @since 1.0\n--- a/JodaTime/src/java/org/joda/time/format/PeriodPrinter.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodPrinter.java\n \n /**\n  * Defines an interface for creating textual representations of time periods.\n- * <p>\n- * Note: This interface represents a view onto {@link BasePeriodFormatter}.\n- * All implementations must extend <code>BasePeriodFormatter</code>.\n  *\n  * @author Brian S O'Neill\n  * @since 1.0\n  */\n public interface PeriodPrinter {\n \n+    /**\n+     * Returns the exact number of characters produced for the given period.\n+     * \n+     * @param period  the period to use\n+     * @return the estimated length\n+     */\n+    int calculatePrintedLength(ReadablePeriod period);\n+\n+    /**\n+     * Returns the amount of fields from the given period that this printer\n+     * will print.\n+     * \n+     * @param period  the period to use\n+     * @return amount of fields printed\n+     */\n+    int countFieldsToPrint(ReadablePeriod period);\n+\n+    /**\n+     * Returns the amount of fields from the given period that this printer\n+     * will print.\n+     * \n+     * @param period  the period to use\n+     * @param stopAt stop counting at this value\n+     * @return amount of fields printed\n+     */\n+    int countFieldsToPrint(ReadablePeriod period, int stopAt);\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Prints a ReadablePeriod to a StringBuffer.\n      *\n--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n     public void testFormatYears() {\n         PeriodFormatter f = builder.appendYears().toFormatter();\n         assertEquals(\"1\", f.print(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatMonths() {\n         PeriodFormatter f = builder.appendMonths().toFormatter();\n         assertEquals(\"2\", f.print(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatWeeks() {\n         PeriodFormatter f = builder.appendWeeks().toFormatter();\n         assertEquals(\"3\", f.print(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatDays() {\n         PeriodFormatter f = builder.appendDays().toFormatter();\n         assertEquals(\"4\", f.print(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatHours() {\n         PeriodFormatter f = builder.appendHours().toFormatter();\n         assertEquals(\"5\", f.print(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatMinutes() {\n         PeriodFormatter f = builder.appendMinutes().toFormatter();\n         assertEquals(\"6\", f.print(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatSeconds() {\n         PeriodFormatter f = builder.appendSeconds().toFormatter();\n         assertEquals(\"7\", f.print(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatSecondsWithMillis() {\n         PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter();\n         Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0);\n         assertEquals(\"7.000\", f.print(p));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 1);\n         assertEquals(\"7.001\", f.print(p));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 999);\n         assertEquals(\"7.999\", f.print(p));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 1000);\n         assertEquals(\"8.000\", f.print(p));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 1001);\n         assertEquals(\"8.001\", f.print(p));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, -1);\n         assertEquals(\"6.999\", f.print(p));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, -7, 1);\n         assertEquals(\"-6.999\", f.print(p));\n-        assertEquals(6, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(6, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, -7, -1);\n         assertEquals(\"-7.001\", f.print(p));\n-        assertEquals(6, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(6, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n     }\n \n     public void testFormatSecondsWithOptionalMillis() {\n         PeriodFormatter f = builder.appendSecondsWithOptionalMillis().toFormatter();\n         Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0);\n         assertEquals(\"7\", f.print(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(1, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 1);\n         assertEquals(\"7.001\", f.print(p));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 999);\n         assertEquals(\"7.999\", f.print(p));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 1000);\n         assertEquals(\"8\", f.print(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(1, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 1001);\n         assertEquals(\"8.001\", f.print(p));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, -1);\n         assertEquals(\"6.999\", f.print(p));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, -7, 1);\n         assertEquals(\"-6.999\", f.print(p));\n-        assertEquals(6, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(6, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, -7, -1);\n         assertEquals(\"-7.001\", f.print(p));\n-        assertEquals(6, ((BasePeriodFormatter) f).calculatePrintedLength(p));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(p));\n+        assertEquals(6, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n     }\n \n     public void testFormatMillis() {\n         PeriodFormatter f = builder.appendMillis().toFormatter();\n         assertEquals(\"8\", f.print(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatMillis3Digit() {\n         PeriodFormatter f = builder.appendMillis3Digit().toFormatter();\n         assertEquals(\"008\", f.print(PERIOD));\n-        assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testFormatPrefixSimple1() {\n         PeriodFormatter f = builder.appendPrefix(\"Years:\").appendYears().toFormatter();\n         assertEquals(\"Years:1\", f.print(PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatPrefixSimple2() {\n         PeriodFormatter f = builder.appendPrefix(\"Hours:\").appendHours().toFormatter();\n         assertEquals(\"Hours:5\", f.print(PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatPrefixSimple3() {\n     public void testFormatPrefixPlural1() {\n         PeriodFormatter f = builder.appendPrefix(\"Year:\", \"Years:\").appendYears().toFormatter();\n         assertEquals(\"Year:1\", f.print(PERIOD));\n-        assertEquals(6, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(6, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatPrefixPlural2() {\n         PeriodFormatter f = builder.appendPrefix(\"Hour:\", \"Hours:\").appendHours().toFormatter();\n         assertEquals(\"Hours:5\", f.print(PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatPrefixPlural3() {\n     public void testFormatSuffixSimple1() {\n         PeriodFormatter f = builder.appendYears().appendSuffix(\" years\").toFormatter();\n         assertEquals(\"1 years\", f.print(PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatSuffixSimple2() {\n         PeriodFormatter f = builder.appendHours().appendSuffix(\" hours\").toFormatter();\n         assertEquals(\"5 hours\", f.print(PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatSuffixSimple3() {\n     public void testFormatSuffixPlural1() {\n         PeriodFormatter f = builder.appendYears().appendSuffix(\" year\", \" years\").toFormatter();\n         assertEquals(\"1 year\", f.print(PERIOD));\n-        assertEquals(6, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(6, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatSuffixPlural2() {\n         PeriodFormatter f = builder.appendHours().appendSuffix(\" hour\", \" hours\").toFormatter();\n         assertEquals(\"5 hours\", f.print(PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatSuffixPlural3() {\n     public void testFormatPrefixSuffix() {\n         PeriodFormatter f = builder.appendPrefix(\"P\").appendYears().appendSuffix(\"Y\").toFormatter();\n         assertEquals(\"P1Y\", f.print(PERIOD));\n-        assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testFormatSeparatorSimple() {\n         PeriodFormatter f = builder.appendYears().appendSeparator(\"T\").appendHours().toFormatter();\n         assertEquals(\"1T5\", f.print(PERIOD));\n-        assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(PERIOD));\n         \n         assertEquals(\"5\", f.print(TIME_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(TIME_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(TIME_PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(TIME_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(TIME_PERIOD));\n         \n         assertEquals(\"1\", f.print(DATE_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(DATE_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(DATE_PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(DATE_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(DATE_PERIOD));\n     }\n \n     public void testFormatSeparatorComplex() {\n             .appendMinutes().appendSeparator(\", \", \" and \")\n             .toFormatter();\n         assertEquals(\"1, 5 and 6\", f.print(PERIOD));\n-        assertEquals(10, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(3, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(10, f.calculatePrintedLength(PERIOD));\n+        assertEquals(3, f.countFieldsToPrint(PERIOD));\n         \n         assertEquals(\"5 and 6\", f.print(TIME_PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(TIME_PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(TIME_PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(TIME_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(TIME_PERIOD));\n         \n         assertEquals(\"1\", f.print(DATE_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(DATE_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(DATE_PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(DATE_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(DATE_PERIOD));\n     }\n \n     public void testFormatSeparatorIfFieldsAfter() {\n         PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter(\"T\").appendHours().toFormatter();\n         assertEquals(\"1T5\", f.print(PERIOD));\n-        assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(PERIOD));\n         \n         assertEquals(\"T5\", f.print(TIME_PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).calculatePrintedLength(TIME_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(TIME_PERIOD));\n+        assertEquals(2, f.calculatePrintedLength(TIME_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(TIME_PERIOD));\n         \n         assertEquals(\"1\", f.print(DATE_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(DATE_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(DATE_PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(DATE_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(DATE_PERIOD));\n     }\n \n     public void testFormatSeparatorIfFieldsBefore() {\n         PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore(\"T\").appendHours().toFormatter();\n         assertEquals(\"1T5\", f.print(PERIOD));\n-        assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(PERIOD));\n         \n         assertEquals(\"5\", f.print(TIME_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).calculatePrintedLength(TIME_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(TIME_PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(TIME_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(TIME_PERIOD));\n         \n         assertEquals(\"1T\", f.print(DATE_PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).calculatePrintedLength(DATE_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(DATE_PERIOD));\n+        assertEquals(2, f.calculatePrintedLength(DATE_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(DATE_PERIOD));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testFormatLiteral() {\n         PeriodFormatter f = builder.appendLiteral(\"HELLO\").toFormatter();\n         assertEquals(\"HELLO\", f.print(PERIOD));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(0, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(PERIOD));\n+        assertEquals(0, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatAppendFormatter() {\n         PeriodFormatter base = builder.appendYears().appendLiteral(\"-\").toFormatter();\n         PeriodFormatter f = new PeriodFormatterBuilder().append(base).appendYears().toFormatter();\n         assertEquals(\"1-1\", f.print(PERIOD));\n-        assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(PERIOD));\n     }\n \n     public void testFormatMinDigits() {\n         PeriodFormatter f = new PeriodFormatterBuilder().minimumPrintedDigits(4).appendYears().toFormatter();\n         assertEquals(\"0001\", f.print(PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n     //-----------------------------------------------------------------------\n                 .appendWeeks().appendLiteral(\"-\")\n                 .appendDays().toFormatter();\n         assertEquals(\"1-2-3-4\", f.print(PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(PERIOD));\n         \n         assertEquals(\"---0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n         \n         assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(YEAR_DAY_PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n         \n         assertEquals(\"---0\", f.print(EMPTY_PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n         \n         // test only last instance of same field is output\n         f = new PeriodFormatterBuilder()\n                 .appendYears().appendLiteral(\"-\")\n                 .appendYears().toFormatter();\n         assertEquals(\"-0\", f.print(EMPTY_PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(2, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n     }\n \n     public void testFormatPrintZeroRarelyLast() {\n                 .appendWeeks().appendLiteral(\"-\")\n                 .appendDays().toFormatter();\n         assertEquals(\"1-2-3-4\", f.print(PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(PERIOD));\n         \n         assertEquals(\"---0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n         \n         assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(YEAR_DAY_PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n         \n         assertEquals(\"---0\", f.print(EMPTY_PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n     }\n \n     public void testFormatPrintZeroRarelyFirst() {\n                 .appendWeeks().appendLiteral(\"-\")\n                 .appendDays().toFormatter();\n         assertEquals(\"1-2-3-4\", f.print(PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(PERIOD));\n         \n         assertEquals(\"0---\", f.print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n         \n         assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(YEAR_DAY_PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n         \n         assertEquals(\"0---\", f.print(EMPTY_PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(1, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n     }\n \n     public void testFormatPrintZeroIfSupported() {\n                 .appendWeeks().appendLiteral(\"-\")\n                 .appendDays().toFormatter();\n         assertEquals(\"1-2-3-4\", f.print(PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(PERIOD));\n         \n         assertEquals(\"0---0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n         \n         assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(YEAR_DAY_PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n         \n         assertEquals(\"0-0-0-0\", f.print(EMPTY_PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(EMPTY_PERIOD));\n     }\n \n     public void testFormatPrintZeroAlways() {\n                 .appendWeeks().appendLiteral(\"-\")\n                 .appendDays().toFormatter();\n         assertEquals(\"1-2-3-4\", f.print(PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(PERIOD));\n         \n         assertEquals(\"0-0-0-0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n         \n         assertEquals(\"1-0-0-4\", f.print(YEAR_DAY_PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(YEAR_DAY_PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(YEAR_DAY_PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n         \n         assertEquals(\"0-0-0-0\", f.print(EMPTY_PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(EMPTY_PERIOD));\n     }\n \n     public void testFormatPrintZeroNever() {\n                 .appendWeeks().appendLiteral(\"-\")\n                 .appendDays().toFormatter();\n         assertEquals(\"1-2-3-4\", f.print(PERIOD));\n-        assertEquals(7, ((BasePeriodFormatter) f).calculatePrintedLength(PERIOD));\n-        assertEquals(4, ((BasePeriodFormatter) f).countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(PERIOD));\n         \n         assertEquals(\"---\", f.print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(0, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(0, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n         \n         assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n-        assertEquals(5, ((BasePeriodFormatter) f).calculatePrintedLength(YEAR_DAY_PERIOD));\n-        assertEquals(2, ((BasePeriodFormatter) f).countFieldsToPrint(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n         \n         assertEquals(\"---\", f.print(EMPTY_PERIOD));\n-        assertEquals(3, ((BasePeriodFormatter) f).calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(0, ((BasePeriodFormatter) f).countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(0, f.countFieldsToPrint(EMPTY_PERIOD));\n     }\n \n }", "timestamp": 1102914143, "metainfo": ""}