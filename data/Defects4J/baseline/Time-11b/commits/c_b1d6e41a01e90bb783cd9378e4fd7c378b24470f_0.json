{"sha": "b1d6e41a01e90bb783cd9378e4fd7c378b24470f", "log": "Test format subpackage   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/format/TestAll.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.format;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Entry point for all tests in this package.\n+ * \n+ * @version $Revision$ $Date$\n+ * \n+ * @author Stephen Colebourne\n+ */\n+public class TestAll extends TestCase {\n+\n+    public TestAll(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestPeriodFormatterBuilder.suite());\n+        \n+        return suite;\n+    }\n+\n+    public static void main(String args[]) {\n+        String[] testCaseName = {\n+            TestAll.class.getName()\n+        };\n+        junit.textui.TestRunner.main(testCaseName);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+\n+/**\n+ * This class is a Junit unit test for PeriodFormatterBuilder.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPeriodFormatterBuilder extends TestCase {\n+    \n+    private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+    private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+    private static final Period EMPTY_YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.getYearDayType());\n+    private static final Period YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.getYearDayType());\n+    private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n+    private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+    \n+    private PeriodFormatterBuilder builder;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPeriodFormatterBuilder.class);\n+    }\n+\n+    public TestPeriodFormatterBuilder(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+        \n+        builder = new PeriodFormatterBuilder();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatYears() {\n+        PeriodFormatter f = builder.appendYears().toFormatter();\n+        assertEquals(\"1\", f.print(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatMonths() {\n+        PeriodFormatter f = builder.appendMonths().toFormatter();\n+        assertEquals(\"2\", f.print(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatWeeks() {\n+        PeriodFormatter f = builder.appendWeeks().toFormatter();\n+        assertEquals(\"3\", f.print(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatDays() {\n+        PeriodFormatter f = builder.appendDays().toFormatter();\n+        assertEquals(\"4\", f.print(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatHours() {\n+        PeriodFormatter f = builder.appendHours().toFormatter();\n+        assertEquals(\"5\", f.print(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatMinutes() {\n+        PeriodFormatter f = builder.appendMinutes().toFormatter();\n+        assertEquals(\"6\", f.print(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatSeconds() {\n+        PeriodFormatter f = builder.appendSeconds().toFormatter();\n+        assertEquals(\"7\", f.print(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatMillis() {\n+        PeriodFormatter f = builder.appendMillis().toFormatter();\n+        assertEquals(\"8\", f.print(PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatMillis3Digit() {\n+        PeriodFormatter f = builder.appendMillis3Digit().toFormatter();\n+        assertEquals(\"008\", f.print(PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatPrefixSimple1() {\n+        PeriodFormatter f = builder.appendPrefix(\"Years:\").appendYears().toFormatter();\n+        assertEquals(\"Years:1\", f.print(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatPrefixSimple2() {\n+        PeriodFormatter f = builder.appendPrefix(\"Hours:\").appendHours().toFormatter();\n+        assertEquals(\"Hours:5\", f.print(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatPrefixSimple3() {\n+        try {\n+            builder.appendPrefix(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFormatPrefixPlural1() {\n+        PeriodFormatter f = builder.appendPrefix(\"Year:\", \"Years:\").appendYears().toFormatter();\n+        assertEquals(\"Year:1\", f.print(PERIOD));\n+        assertEquals(6, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatPrefixPlural2() {\n+        PeriodFormatter f = builder.appendPrefix(\"Hour:\", \"Hours:\").appendHours().toFormatter();\n+        assertEquals(\"Hours:5\", f.print(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatPrefixPlural3() {\n+        try {\n+            builder.appendPrefix(null, \"\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            builder.appendPrefix(\"\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            builder.appendPrefix(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatSuffixSimple1() {\n+        PeriodFormatter f = builder.appendYears().appendSuffix(\" years\").toFormatter();\n+        assertEquals(\"1 years\", f.print(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatSuffixSimple2() {\n+        PeriodFormatter f = builder.appendHours().appendSuffix(\" hours\").toFormatter();\n+        assertEquals(\"5 hours\", f.print(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatSuffixSimple3() {\n+        try {\n+            builder.appendSuffix(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFormatSuffixSimple4() {\n+        try {\n+            builder.appendSuffix(\" hours\");\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testFormatSuffixPlural1() {\n+        PeriodFormatter f = builder.appendYears().appendSuffix(\" year\", \" years\").toFormatter();\n+        assertEquals(\"1 year\", f.print(PERIOD));\n+        assertEquals(6, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatSuffixPlural2() {\n+        PeriodFormatter f = builder.appendHours().appendSuffix(\" hour\", \" hours\").toFormatter();\n+        assertEquals(\"5 hours\", f.print(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatSuffixPlural3() {\n+        try {\n+            builder.appendSuffix(null, \"\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            builder.appendSuffix(\"\", null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            builder.appendSuffix(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFormatSuffixPlural4() {\n+        try {\n+            builder.appendSuffix(\" hour\", \" hours\");\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatPrefixSuffix() {\n+        PeriodFormatter f = builder.appendPrefix(\"P\").appendYears().appendSuffix(\"Y\").toFormatter();\n+        assertEquals(\"P1Y\", f.print(PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatSeparatorSimple() {\n+        PeriodFormatter f = builder.appendYears().appendSeparator(\"T\").appendHours().toFormatter();\n+        assertEquals(\"1T5\", f.print(PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(PERIOD));\n+        \n+        assertEquals(\"5\", f.print(TIME_PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(TIME_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(TIME_PERIOD));\n+        \n+        assertEquals(\"1\", f.print(DATE_PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(DATE_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(DATE_PERIOD));\n+    }\n+\n+    public void testFormatSeparatorComplex() {\n+        PeriodFormatter f = builder\n+            .appendYears().appendSeparator(\", \", \" and \")\n+            .appendHours().appendSeparator(\", \", \" and \")\n+            .appendMinutes().appendSeparator(\", \", \" and \")\n+            .toFormatter();\n+        assertEquals(\"1, 5 and 6\", f.print(PERIOD));\n+        assertEquals(10, f.calculatePrintedLength(PERIOD));\n+        assertEquals(3, f.countFieldsToPrint(PERIOD));\n+        \n+        assertEquals(\"5 and 6\", f.print(TIME_PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(TIME_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(TIME_PERIOD));\n+        \n+        assertEquals(\"1\", f.print(DATE_PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(DATE_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(DATE_PERIOD));\n+    }\n+\n+    public void testFormatSeparatorIfFieldsAfter() {\n+        PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter(\"T\").appendHours().toFormatter();\n+        assertEquals(\"1T5\", f.print(PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(PERIOD));\n+        \n+        assertEquals(\"T5\", f.print(TIME_PERIOD));\n+        assertEquals(2, f.calculatePrintedLength(TIME_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(TIME_PERIOD));\n+        \n+        assertEquals(\"1\", f.print(DATE_PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(DATE_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(DATE_PERIOD));\n+    }\n+\n+    public void testFormatSeparatorIfFieldsBefore() {\n+        PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore(\"T\").appendHours().toFormatter();\n+        assertEquals(\"1T5\", f.print(PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(PERIOD));\n+        \n+        assertEquals(\"5\", f.print(TIME_PERIOD));\n+        assertEquals(1, f.calculatePrintedLength(TIME_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(TIME_PERIOD));\n+        \n+        assertEquals(\"1T\", f.print(DATE_PERIOD));\n+        assertEquals(2, f.calculatePrintedLength(DATE_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(DATE_PERIOD));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatLiteral() {\n+        PeriodFormatter f = builder.appendLiteral(\"HELLO\").toFormatter();\n+        assertEquals(\"HELLO\", f.print(PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(PERIOD));\n+        assertEquals(0, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatAppendFormatter() {\n+        PeriodFormatter base = builder.appendYears().appendLiteral(\"-\").toFormatter();\n+        PeriodFormatter f = new PeriodFormatterBuilder().append(base).appendYears().toFormatter();\n+        assertEquals(\"1-1\", f.print(PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    public void testFormatMinDigits() {\n+        PeriodFormatter f = new PeriodFormatterBuilder().minimumPrintedDigits(4).appendYears().toFormatter();\n+        assertEquals(\"0001\", f.print(PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormatPrintZeroDefault() {\n+        PeriodFormatter f =\n+            new PeriodFormatterBuilder()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendMonths().appendLiteral(\"-\")\n+                .appendWeeks().appendLiteral(\"-\")\n+                .appendDays().toFormatter();\n+        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(PERIOD));\n+        \n+        assertEquals(\"---0\", f.print(YEAR_DAY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"1---4\", f.print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"---0\", f.print(EMPTY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n+    }\n+\n+    public void testFormatPrintZeroRarely() {\n+        PeriodFormatter f =\n+            new PeriodFormatterBuilder()\n+                .printZeroRarely()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendMonths().appendLiteral(\"-\")\n+                .appendWeeks().appendLiteral(\"-\")\n+                .appendDays().toFormatter();\n+        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(PERIOD));\n+        \n+        assertEquals(\"---0\", f.print(YEAR_DAY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"1---4\", f.print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"---0\", f.print(EMPTY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n+    }\n+\n+    public void testFormatPrintZeroRarelyFavorFirst() {\n+        PeriodFormatter f =\n+            new PeriodFormatterBuilder()\n+                .printZeroRarely().favorFirstFieldForZero()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendMonths().appendLiteral(\"-\")\n+                .appendWeeks().appendLiteral(\"-\")\n+                .appendDays().toFormatter();\n+        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(PERIOD));\n+        \n+        assertEquals(\"0---\", f.print(YEAR_DAY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"1---4\", f.print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"0---\", f.print(EMPTY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n+    }\n+\n+    public void testFormatPrintZeroRarelyFavorLast() {\n+        PeriodFormatter f =\n+            new PeriodFormatterBuilder()\n+                .printZeroRarely().favorLastFieldForZero()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendMonths().appendLiteral(\"-\")\n+                .appendWeeks().appendLiteral(\"-\")\n+                .appendDays().toFormatter();\n+        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(PERIOD));\n+        \n+        assertEquals(\"---0\", f.print(YEAR_DAY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"1---4\", f.print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"---0\", f.print(EMPTY_PERIOD));\n+        assertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n+    }\n+\n+    public void testFormatPrintZeroIfSupported() {\n+        PeriodFormatter f =\n+            new PeriodFormatterBuilder()\n+                .printZeroIfSupported()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendMonths().appendLiteral(\"-\")\n+                .appendWeeks().appendLiteral(\"-\")\n+                .appendDays().toFormatter();\n+        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(PERIOD));\n+        \n+        assertEquals(\"0---0\", f.print(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"1---4\", f.print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"0-0-0-0\", f.print(EMPTY_PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(EMPTY_PERIOD));\n+    }\n+\n+    public void testFormatPrintZeroAlways() {\n+        PeriodFormatter f =\n+            new PeriodFormatterBuilder()\n+                .printZeroAlways()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendMonths().appendLiteral(\"-\")\n+                .appendWeeks().appendLiteral(\"-\")\n+                .appendDays().toFormatter();\n+        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(PERIOD));\n+        \n+        assertEquals(\"0-0-0-0\", f.print(YEAR_DAY_PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"1-0-0-4\", f.print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"0-0-0-0\", f.print(EMPTY_PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(EMPTY_PERIOD));\n+    }\n+\n+}", "timestamp": 1093460741, "metainfo": ""}