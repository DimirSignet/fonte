{"sha": "225ca55301809ebd8869cf4e7bcf11cee2a84c06", "log": "Range duration field of dayOfMonth was not consistent with monthOfYear. This bug manifested itself when adding/subtracting periods to partials.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n         // These fields just require basic cutover support.\n         {\n             fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);\n-            fields.dayOfMonth = new CutoverField(julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);\n         }\n \n         // DayOfYear and weekOfWeekyear require special handling since cutover\n                 julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis);\n             fields.weekyears = fields.weekyear.getDurationField();\n         }\n+\n+        // These fields require basic cutover support, except they must link to\n+        // imprecise durations.\n+        {\n+            CutoverField cf = new CutoverField\n+                (julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);\n+            cf.iRangeDurationField = fields.months;\n+            fields.dayOfMonth = cf;\n+        }\n     }\n \n     long julianToGregorianByYear(long instant) {\n         final boolean iConvertByWeekyear;\n \n         protected DurationField iDurationField;\n+        protected DurationField iRangeDurationField;\n \n         /**\n          * @param julianField field from the chronology used before the cutover instant\n             // Although average length of Julian and Gregorian years differ,\n             // use the Gregorian duration field because it is more accurate.\n             iDurationField = gregorianField.getDurationField();\n+\n+            DurationField rangeField = gregorianField.getRangeDurationField();\n+            if (rangeField == null) {\n+                rangeField = julianField.getRangeDurationField();\n+            }\n+            iRangeDurationField = rangeField;\n         }\n \n         public boolean isLenient() {\n         }\n \n         public DurationField getRangeDurationField() {\n-            DurationField rangeField = iGregorianField.getRangeDurationField();\n-            if (rangeField == null) {\n-                rangeField = iJulianField.getRangeDurationField();\n-            }\n-            return rangeField;\n+            return iRangeDurationField;\n         }\n \n         public boolean isLeap(long instant) {\n--- a/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.Instant;\n+import org.joda.time.Period;\n+import org.joda.time.YearMonthDay;\n \n /**\n  * This class is a Junit unit test for GJChronology.\n         testAdd(\"1582-10-15\", DurationFieldType.days(), 10, \"1582-10-25\");\n     }\n \n+    public void testSubtractDays() {\n+        // This is a test for a bug in version 1.0. The dayOfMonth range\n+        // duration field did not match the monthOfYear duration field. This\n+        // caused an exception to be thrown when subtracting days.\n+        DateTime dt = new DateTime\n+            (1112306400000L, GJChronology.getInstance(DateTimeZone.forID(\"Europe/Berlin\")));\n+        YearMonthDay ymd = dt.toYearMonthDay();\n+        while (ymd.toDateTimeAtMidnight().getDayOfWeek() != DateTimeConstants.MONDAY) { \n+            ymd = ymd.minus(Period.days(1));\n+        }\n+    }\n+\n     private void testAdd(String start, DurationFieldType type, int amt, String end) {\n         DateTime dtStart = new DateTime(start, GJChronology.getInstance(DateTimeZone.UTC));\n         DateTime dtEnd = new DateTime(end, GJChronology.getInstance(DateTimeZone.UTC));", "timestamp": 1117476099, "metainfo": ""}