{"sha": "1a3e1f54707620cb60a0fdb950c8c84f59f30fc2", "log": "Add more withXxx() methods to DateTime   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n import java.io.Serializable;\n import java.util.Locale;\n \n+import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISODateTimeFormat;\n import org.joda.time.property.AbstractReadableInstantFieldProperty;\n \n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a copy of this instant with different millis.\n+     * Gets a copy of this datetime with different millis.\n      * <p>\n      * The returned object will be a new instance of the same implementation type.\n      * Only the millis will change, the chronology and time zone are kept.\n      * The returned object will be either be a new instance or <code>this</code>.\n      *\n      * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n-     * @return a copy of this instant with different millis\n+     * @return a copy of this datetime with different millis\n      */\n     public final DateTime withMillis(long newMillis) {\n         return (newMillis == getMillis() ? this : new DateTime(newMillis, getChronology()));\n     }\n \n     /**\n-     * Gets a copy of this instant with a different chronology.\n+     * Gets a copy of this datetime with a different chronology.\n      * <p>\n      * The returned object will be a new instance of the same implementation type.\n      * Only the chronology will change, the millis are kept.\n      * The returned object will be either be a new instance or <code>this</code>.\n      *\n      * @param newChronology  the new chronology\n-     * @return a copy of this instant with a different chronology\n+     * @return a copy of this datetime with a different chronology\n      */\n     public final DateTime withChronology(Chronology newChronology) {\n         return (newChronology == getChronology() ? this : new DateTime(getMillis(), newChronology));\n     }\n \n-    /**\n-     * Gets a copy of this instant with a different time zone, preserving the\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets a copy of this datetime with a different time zone, preserving the\n      * millisecond instant.\n      * <p>\n      * This method is useful for finding the local time in another timezone.\n      * The returned object will be either be a new instance or <code>this</code>.\n      *\n      * @param newDateTimeZone  the new time zone\n-     * @return a copy of this instant with a different time zone\n+     * @return a copy of this datetime with a different time zone\n      * @see #withZoneRetainFields\n      */\n     public final DateTime withZone(DateTimeZone newDateTimeZone) {\n     }\n \n     /**\n-     * Gets a copy of this instant with a different time zone, preserving the\n+     * Gets a copy of this datetime with a different time zone, preserving the\n      * field values.\n      * <p>\n      * This method is useful for finding the millisecond time in another timezone.\n      * The returned object will be either be a new instance or <code>this</code>.\n      *\n      * @param newZone  the new time zone, null means default\n-     * @return a copy of this instant with a different time zone\n+     * @return a copy of this datetime with a different time zone\n      * @see #withZone\n      */\n     public final DateTime withZoneRetainFields(DateTimeZone newZone) {\n         \n         long millis = originalZone.getMillisKeepLocal(newZone, getMillis());\n         return new DateTime(millis, getChronology().withZone(newZone));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets a copy of this datetime with the specified date, retaining the time fields.\n+     * <p>\n+     * If the date is already the date passed in, then <code>this</code> is returned.\n+     * <p>\n+     * To set a single field use the properties, for example:\n+     * <pre>\n+     * DateTime set = monthOfYear().setCopy(6);\n+     * </pre>\n+     *\n+     * @param year  the new year value\n+     * @param monthOfYear  the new monthOfYear value\n+     * @param dayOfMonth  the new dayOfMonth value\n+     * @return a copy of this datetime with a different date\n+     * @throws IllegalArgumentException if any value if invalid\n+     */\n+    public final DateTime withDate(int year, int monthOfYear, int dayOfMonth) {\n+        Chronology chrono = getChronology();\n+        long instant = getMillis();\n+        instant = chrono.year().set(instant, year);\n+        instant = chrono.monthOfYear().set(instant, monthOfYear);\n+        instant = chrono.dayOfMonth().set(instant, dayOfMonth);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Gets a copy of this datetime with the specified time, retaining the date fields.\n+     * <p>\n+     * If the time is already the time passed in, then <code>this</code> is returned.\n+     * <p>\n+     * To set a single field use the properties, for example:\n+     * <pre>\n+     * DateTime set = dt.hourOfDay().setCopy(6);\n+     * </pre>\n+     *\n+     * @param hourOfDay  the hour of the day\n+     * @param minuteOfHour  the minute of the hour\n+     * @param secondOfMinute  the second of the minute\n+     * @param millisOfSecond  the millisecond of the second\n+     * @return a copy of this datetime with a different time\n+     * @throws IllegalArgumentException if any value if invalid\n+     */\n+    public final DateTime withTime(int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) {\n+        Chronology chrono = getChronology();\n+        long instant = getMillis();\n+        instant = chrono.hourOfDay().set(instant, hourOfDay);\n+        instant = chrono.minuteOfHour().set(instant, minuteOfHour);\n+        instant = chrono.secondOfMinute().set(instant, secondOfMinute);\n+        instant = chrono.millisOfSecond().set(instant, millisOfSecond);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Gets a copy of this datetime with the partial set of fields replacing those\n+     * from this instance.\n+     * <p>\n+     * For example, if the partial is a <code>TimeOfDay</code> then the time fields\n+     * would be changed in the returned instance.\n+     * If the partial is null, then <code>this</code> is returned.\n+     *\n+     * @param partial  the partial set of fields to apply to this datetime\n+     * @return a copy of this datetime with a different set of fields\n+     * @throws IllegalArgumentException if any value if invalid\n+     */\n+    public final DateTime withFields(ReadablePartial partial) {\n+        if (partial == null) {\n+            return this;\n+        }\n+        return partial.resolveDateTime(this);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets a copy of this datetime with the specified duration added.\n+     * <p>\n+     * If the addition is zero, then <code>this</code> is returned.\n+     * \n+     * @param durationToAdd  the duration to add to this one\n+     * @return a copy of this datetime with the duration added\n+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     */\n+    public final DateTime withDurationAdded(long durationToAdd) {\n+        return withDurationAdded(durationToAdd, 1);\n+    }\n+\n+    /**\n+     * Gets a copy of this datetime with the specified duration added.\n+     * <p>\n+     * If the addition is zero, then <code>this</code> is returned.\n+     * \n+     * @param durationToAdd  the duration to add to this one\n+     * @param scalar  the amount of times to add, such as -1 to subtract once\n+     * @return a copy of this datetime with the duration added\n+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     */\n+    public final DateTime withDurationAdded(long durationToAdd, int scalar) {\n+        if (durationToAdd == 0 || scalar == 0) {\n+            return this;\n+        }\n+        long add = FieldUtils.safeMultiply(durationToAdd, scalar);\n+        long instant = FieldUtils.safeAdd(getMillis(), add);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Gets a copy of this datetime with the specified duration added.\n+     * <p>\n+     * If the addition is zero, then <code>this</code> is returned.\n+     * \n+     * @param durationToAdd  the duration to add to this one, null means zero\n+     * @return a copy of this datetime with the duration added\n+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     */\n+    public final DateTime withDurationAdded(ReadableDuration durationToAdd) {\n+        if (durationToAdd == null) {\n+            return this;\n+        }\n+        return withDurationAdded(durationToAdd.getMillis(), 1);\n+    }\n+\n+    /**\n+     * Gets a copy of this datetime with the specified duration added.\n+     * <p>\n+     * If the addition is zero, then <code>this</code> is returned.\n+     * \n+     * @param durationToAdd  the duration to add to this one, null means zero\n+     * @param scalar  the amount of times to add, such as -1 to subtract once\n+     * @return a copy of this datetime with the duration added\n+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     */\n+    public final DateTime withDurationAdded(ReadableDuration durationToAdd, int scalar) {\n+        if (durationToAdd == null || scalar == 0) {\n+            return this;\n+        }\n+        return withDurationAdded(durationToAdd.getMillis(), scalar);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets a copy of this datetime with the specified period added.\n+     * <p>\n+     * If the addition is zero, then <code>this</code> is returned.\n+     * <p>\n+     * To add or subtract on a single field use the properties, for example:\n+     * <pre>\n+     * DateTime added = dt.hourOfDay().addToCopy(6);\n+     * </pre>\n+     * \n+     * @param periodToAdd  the duration to add to this one, null means zero\n+     * @return a copy of this datetime with the period added\n+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     */\n+    public final DateTime withPeriodAdded(ReadablePeriod periodToAdd) {\n+        return withPeriodAdded(periodToAdd, 1);\n+    }\n+\n+    /**\n+     * Gets a copy of this datetime with the specified period added.\n+     * <p>\n+     * If the addition is zero, then <code>this</code> is returned.\n+     * <p>\n+     * To add or subtract on a single field use the properties, for example:\n+     * <pre>\n+     * DateTime added = dt.hourOfDay().addToCopy(6);\n+     * </pre>\n+     * \n+     * @param durationToAdd  the duration to add to this one, null means zero\n+     * @param scalar  the amount of times to add, such as -1 to subtract once\n+     * @return a copy of this datetime with the period added\n+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     */\n+    public final DateTime withPeriodAdded(ReadablePeriod periodToAdd, int scalar) {\n+        if (periodToAdd == null || scalar == 0) {\n+            return this;\n+        }\n+        long instant = periodToAdd.addTo(getMillis(), scalar, getChronology());\n+        return withMillis(instant);\n     }\n \n     // Date properties\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n import junit.framework.TestSuite;\n \n import org.joda.time.chrono.AbstractChronology;\n+import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n \n         assertSame(test, result);\n     }\n     \n+    //-----------------------------------------------------------------------\n+    public void testWithDate_int_int_int() {\n+        DateTime test = new DateTime(2002, 4, 5, 1, 2, 3, 4, ISOChronology.getInstanceUTC());\n+        DateTime result = test.withDate(2003, 5, 6);\n+        DateTime expected = new DateTime(2003, 5, 6, 1, 2, 3, 4, ISOChronology.getInstanceUTC());\n+        assertEquals(expected, result);\n+        \n+        test = new DateTime(TEST_TIME1);\n+        try {\n+            test.withDate(2003, 13, 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testWithTime_int_int_int() {\n+        DateTime test = new DateTime(TEST_TIME1 - 12345L, BuddhistChronology.getInstanceUTC());\n+        DateTime result = test.withTime(12, 24, 0, 0);\n+        assertEquals(TEST_TIME1, result.getMillis());\n+        assertEquals(BuddhistChronology.getInstanceUTC(), result.getChronology());\n+        \n+        test = new DateTime(TEST_TIME1);\n+        try {\n+            test.withTime(25, 1, 1, 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testWithFields_RPartial() {\n+        DateTime test = new DateTime(2004, 5, 6, 7, 8, 9, 0);\n+        DateTime result = test.withFields(new YearMonthDay(2003, 4, 5));\n+        DateTime expected = new DateTime(2003, 4, 5, 7, 8, 9, 0);\n+        assertEquals(expected, result);\n+        \n+        test = new DateTime(TEST_TIME1);\n+        result = test.withFields(null);\n+        assertSame(test, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_long() {\n+        DateTime test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());\n+        DateTime result = test.withDurationAdded(123456789L);\n+        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+    }\n+    \n+    public void testWithDurationAdded_long_int() {\n+        DateTime test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());\n+        DateTime result = test.withDurationAdded(123456789L, 1);\n+        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(123456789L, 0);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(123456789L, 2);\n+        expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(123456789L, -3);\n+        expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_RD() {\n+        DateTime test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());\n+        DateTime result = test.withDurationAdded(new Duration(123456789L));\n+        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(null);\n+        assertSame(test, result);\n+    }\n+    \n+    public void testWithDurationAdded_RD_int() {\n+        DateTime test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());\n+        DateTime result = test.withDurationAdded(new Duration(123456789L), 1);\n+        DateTime expected = new DateTime(TEST_TIME1 + 123456789L, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(null, 1);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), 0);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), 2);\n+        expected = new DateTime(TEST_TIME1 + (2L * 123456789L), BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), -3);\n+        expected = new DateTime(TEST_TIME1 - (3L * 123456789L), BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithPeriodAdded_RP() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        DateTime expected = new DateTime(2003, 7, 28, 6, 8, 10, 12, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withPeriodAdded(null);\n+        assertSame(test, result);\n+    }\n+    \n+    public void testWithDurationAdded_RP_int() {\n+        DateTime test = new DateTime(2002, 5, 3, 1, 2, 3, 4, BuddhistChronology.getInstance());\n+        DateTime result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 1);\n+        DateTime expected = new DateTime(2003, 7, 28, 6, 8, 10, 12, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withPeriodAdded(null, 1);\n+        assertSame(test, result);\n+        \n+        result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 0);\n+        assertSame(test, result);\n+        \n+        result = test.withPeriodAdded(new Period(1, 2, 0, 4, 5, 6, 7, 8), 3);\n+        expected = new DateTime(2005, 11, 15, 16, 20, 24, 28, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withPeriodAdded(new Period(1, 2, 0, 1, 1, 2, 3, 4), -1);\n+        expected = new DateTime(2001, 3, 2, 0, 0, 0, 0, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     public void testImmutable() {\n         MockChangeDateTime test = new MockChangeDateTime(TEST_TIME_NOW);\n         assertEquals(TEST_TIME_NOW, test.getMillis());", "timestamp": 1092772850, "metainfo": ""}