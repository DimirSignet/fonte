{"sha": "69c3d758fa58a5abe835e1c7f61bd5e85bc0dc73", "log": "Fix ZonedChronology ReadablePartial getMax/Min Value methods   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationField;\n import org.joda.time.IllegalFieldValueException;\n+import org.joda.time.ReadablePartial;\n import org.joda.time.field.BaseDateTimeField;\n import org.joda.time.field.BaseDurationField;\n \n             return iField.getMinimumValue(instant + this.iZone.getOffset(instant));\n         }\n \n+        public int getMinimumValue(ReadablePartial instant) {\n+            return iField.getMinimumValue(instant);\n+        }\n+\n+        public int getMinimumValue(ReadablePartial instant, int[] values) {\n+            return iField.getMinimumValue(instant, values);\n+        }\n+\n         public int getMaximumValue() {\n             return iField.getMaximumValue();\n         }\n             return iField.getMaximumValue(instant + this.iZone.getOffset(instant));\n         }\n \n+        public int getMaximumValue(ReadablePartial instant) {\n+            return iField.getMaximumValue(instant);\n+        }\n+\n+        public int getMaximumValue(ReadablePartial instant, int[] values) {\n+            return iField.getMaximumValue(instant, values);\n+        }\n+\n         public int getMaximumTextLength(Locale locale) {\n             return iField.getMaximumTextLength(locale);\n         }\n--- a/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.Chronology;\n+import org.joda.time.DateMidnight;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.YearMonthDay;\n \n /**\n  * This class is a Junit unit test for GregorianChronology.\n         assertEquals(true, GregorianChronology.getInstance().millisOfSecond().isSupported());\n     }\n \n+    public void testMaximumValue() {\n+        YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n+        DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n+        Chronology chrono = Chronology.getGregorian();\n+        assertEquals(28, chrono.dayOfMonth().getMaximumValue(ymd1));\n+        assertEquals(28, chrono.dayOfMonth().getMaximumValue(dm1.getMillis()));\n+    }\n+\n }", "timestamp": 1124826990, "metainfo": ""}