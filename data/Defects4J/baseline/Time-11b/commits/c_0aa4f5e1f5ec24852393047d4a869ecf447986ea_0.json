{"sha": "0aa4f5e1f5ec24852393047d4a869ecf447986ea", "log": "Javadoc   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java\n+++ b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java\n  * @since 1.1\n  */\n public class IllegalFieldValueException extends IllegalArgumentException {\n+    \n+    /** Serialization lock. */\n+    private static final long serialVersionUID = 6305711765985447737L;\n+\n+    /**\n+     * Creates a message for the exception.\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value rejected\n+     * @param lowerBound  the lower bound allowed\n+     * @param upperBound  the uppe bound allowed\n+     * @return the message\n+     */\n     private static String createMessage(String fieldName, Number value,\n                                         Number lowerBound, Number upperBound) {\n         StringBuffer buf = new StringBuffer()\n         return buf.toString();\n     }\n \n+    /**\n+     * Creates a message for the exception.\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value rejected\n+     * @return the message\n+     */\n     private static String createMessage(String fieldName, String value) {\n         StringBuffer buf = new StringBuffer().append(\"Value \");\n \n         \n         return buf.toString();\n     }\n-    \n+\n     private final DateTimeFieldType iDateTimeFieldType;\n     private final DurationFieldType iDurationFieldType;\n     private final String iFieldName;\n     private final Number iUpperBound;\n \n     /**\n-     * @param fieldType type of field being set\n-     * @param value illegal value being set\n-     * @param lowerBound lower legal field value, or null if not applicable\n-     * @param upperBound upper legal field value, or null if not applicable\n+     * Constructor.\n+     * \n+     * @param fieldType  type of field being set\n+     * @param value  illegal value being set\n+     * @param lowerBound  lower legal field value, or null if not applicable\n+     * @param upperBound  upper legal field value, or null if not applicable\n      */\n     public IllegalFieldValueException(DateTimeFieldType fieldType,\n                                       Number value, Number lowerBound, Number upperBound) {\n     }\n \n     /**\n-     * @param fieldType type of field being set\n-     * @param value illegal value being set\n-     * @param lowerBound lower legal field value, or null if not applicable\n-     * @param upperBound upper legal field value, or null if not applicable\n+     * Constructor.\n+     * \n+     * @param fieldType  type of field being set\n+     * @param value  illegal value being set\n+     * @param lowerBound  lower legal field value, or null if not applicable\n+     * @param upperBound  upper legal field value, or null if not applicable\n      */\n     public IllegalFieldValueException(DurationFieldType fieldType,\n                                       Number value, Number lowerBound, Number upperBound) {\n     }\n \n     /**\n-     * @param fieldName name of field being set\n-     * @param value illegal value being set\n-     * @param lowerBound lower legal field value, or null if not applicable\n-     * @param upperBound upper legal field value, or null if not applicable\n+     * Constructor.\n+     * \n+     * @param fieldName  name of field being set\n+     * @param value  illegal value being set\n+     * @param lowerBound  lower legal field value, or null if not applicable\n+     * @param upperBound  upper legal field value, or null if not applicable\n      */\n     public IllegalFieldValueException(String fieldName,\n                                       Number value, Number lowerBound, Number upperBound) {\n     }\n \n     /**\n-     * @param fieldType type of field being set\n-     * @param value illegal value being set\n+     * Constructor.\n+     * \n+     * @param fieldType  type of field being set\n+     * @param value  illegal value being set\n      */\n     public IllegalFieldValueException(DateTimeFieldType fieldType, String value) {\n         super(createMessage(fieldType.getName(), value));\n     }\n \n     /**\n-     * @param fieldType type of field being set\n-     * @param value illegal value being set\n+     * Constructor.\n+     * \n+     * @param fieldType  type of field being set\n+     * @param value  illegal value being set\n      */\n     public IllegalFieldValueException(DurationFieldType fieldType, String value) {\n         super(createMessage(fieldType.getName(), value));\n     }\n \n     /**\n-     * @param fieldName name of field being set\n-     * @param value illegal value being set\n+     * Constructor.\n+     * \n+     * @param fieldName  name of field being set\n+     * @param value  illegal value being set\n      */\n     public IllegalFieldValueException(String fieldName, String value) {\n         super(createMessage(fieldName, value));\n         iUpperBound = null;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns the DateTimeFieldType whose value was invalid, or null if not applicable.\n+     * \n+     * @return the datetime field type\n      */\n     public DateTimeFieldType getDateTimeFieldType() {\n         return iDateTimeFieldType;\n \n     /**\n      * Returns the DurationFieldType whose value was invalid, or null if not applicable.\n+     * \n+     * @return the duration field type\n      */\n     public DurationFieldType getDurationFieldType() {\n         return iDurationFieldType;\n \n     /**\n      * Returns the name of the field whose value was invalid.\n+     * \n+     * @return the field name\n      */\n     public String getFieldName() {\n         return iFieldName;\n \n     /**\n      * Returns the illegal integer value assigned to the field, or null if not applicable.\n+     * \n+     * @return the value\n      */\n     public Number getIllegalNumberValue() {\n         return iNumberValue;\n \n     /**\n      * Returns the illegal string value assigned to the field, or null if not applicable.\n+     * \n+     * @return the value\n      */\n     public String getIllegalStringValue() {\n         return iStringValue;\n \n     /**\n      * Returns the illegal value assigned to the field as a non-null string.\n+     * \n+     * @return the value\n      */\n     public String getIllegalValueAsString() {\n         String value = iStringValue;\n \n     /**\n      * Returns the lower bound of the legal value range, or null if not applicable.\n+     * \n+     * @return the lower bound\n      */\n     public Number getLowerBound() {\n         return iLowerBound;\n \n     /**\n      * Returns the upper bound of the legal value range, or null if not applicable.\n+     * \n+     * @return the upper bound\n      */\n     public Number getUpperBound() {\n         return iUpperBound;\n     }\n+\n }", "timestamp": 1123106356, "metainfo": ""}