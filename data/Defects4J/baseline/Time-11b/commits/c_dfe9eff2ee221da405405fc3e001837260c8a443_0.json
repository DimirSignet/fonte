{"sha": "dfe9eff2ee221da405405fc3e001837260c8a443", "log": "Change toTrustedISODateTime() to toDateTimeISO()   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n import java.util.Locale;\n \n import org.joda.time.base.BaseDateTime;\n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.property.AbstractReadableInstantFieldProperty;\n \n     }\n \n     /**\n+     * Get this object as a DateTime using ISOChronology in the default zone,\n+     * returning <code>this</code> if possible.\n+     * \n+     * @return a DateTime using the same millis\n+     */\n+    public DateTime toDateTimeISO() {\n+        if (getChronology() == ISOChronology.getInstance()) {\n+            return this;\n+        }\n+        return super.toDateTimeISO();\n+    }\n+\n+    /**\n      * Get this object as a DateTime, returning <code>this</code> if possible.\n      * \n      * @param zone time zone to apply, or default if null\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n     }\n \n     /**\n-     * Get this object as a DateTime.\n+     * Get this object as a DateTime using ISOChronology in the default zone.\n+     * \n+     * @return a DateTime using the same millis with ISOChronology in the default zone.\n+     */\n+    public DateTime toDateTimeISO() {\n+        return new DateTime(getMillis(), ISOChronology.getInstance());\n+    }\n+\n+    /**\n+     * Get this object as a DateTime using the same chronology but a different zone.\n      * \n      * @param zone time zone to apply, or default if null\n      * @return a DateTime using the same millis\n         return new DateTime(getMillis(), chronology);\n     }\n \n-    /**\n-     * Get this object as a trusted ISO immutable DateTime. The purpose of\n-     * this method is to guarantee that an externally received DateTime\n-     * object does not have any backdoors that allow it to be modified.\n-     * <p>\n-     * If this object is already a DateTime, whose chronology is\n-     * {@link ISOChronology ISO}, and the time zone came from the default\n-     * {@link org.joda.time.tz.Provider provider}, then this object is cast to\n-     * a DateTime and returned. Otherwise, a new trusted DateTime is returned.\n-     * \n-     * @return a trusted ISO DateTime using the same millis\n-     * @throws IllegalArgumentException if the time zone is not trusted, and\n-     * no matching trusted time zone can be found.\n-     */\n-    public DateTime toTrustedISODateTime() {\n-        DateTimeZone zone = getZone();\n-        if (zone == null) {\n-            return new DateTime(this, (Chronology)null);\n-        }\n-\n-        DateTimeZone trusted = DateTimeZone.getInstance(zone.getID());\n-        \n-        if (zone == trusted &&\n-            getClass() == DateTime.class &&\n-            getChronology().getClass() == ISOChronology.class) {\n-            return (DateTime) this;\n-        }\n-        \n-        return new DateTime(this, ISOChronology.getInstance(trusted));\n-    }\n-\n     // NOTE: Although the toMutableDateTime methods could check to see if this\n     // is already a MutableDateTime and return this casted, it makes it too\n     // easy to mistakenly modify ReadableDateTime input parameters. Always\n     }\n \n     /**\n-     * Get this object as a MutableDateTime.\n+     * Get this object as a MutableDateTime using ISOChronology in the default zone.\n+     * \n+     * @return a MutableDateTime using the same millis with ISOChronology in the default zone.\n+     */\n+    public MutableDateTime toMutableDateTimeISO() {\n+        return new MutableDateTime(getMillis(), ISOChronology.getInstance());\n+    }\n+\n+    /**\n+     * Get this object as a MutableDateTime using the same chronology but a different zone.\n      * \n      * @param zone time zone to apply, or default if null\n      * @return a MutableDateTime using the same millis\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n         assertEquals(LONDON, result.getZone());\n     }\n \n+    public void testToDateTimeISO() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        DateTime result = test.toDateTimeISO();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n     public void testToDateTime_DateTimeZone() {\n         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n         DateTime result = test.toDateTime(LONDON);\n         assertEquals(ISOChronology.getInstance(), result.getChronology());\n     }\n \n-    public void testToTrustedISODateMidnight() {\n-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n-        DateTime result = test.toTrustedISODateTime();\n-        assertSame(DateTime.class, result.getClass());\n+    public void testToMutableDateTime() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        MutableDateTime result = test.toMutableDateTime();\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToMutableDateTimeISO() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n+        MutableDateTime result = test.toMutableDateTimeISO();\n+        assertSame(MutableDateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n-\n-//        test = new MockUntrustedDateMidnight(TEST_TIME1_UTC);\n-//        result = test.toTrustedISODateTime();\n-//        assertSame(DateTime.class, result.getClass());\n-//        assertSame(ISOChronology.class, result.getChronology().getClass());\n-//        assertEquals(test.getMillis(), result.getMillis());\n-//        assertEquals(ISOChronology.getInstance(), result.getChronology());\n-\n-        test = new DateMidnight(TEST_TIME1_UTC, new MockUntrustedZone(\"Europe/Paris\"));\n-        result = test.toTrustedISODateTime();\n-        assertSame(DateTime.class, result.getClass());\n-        assertSame(ISOChronology.class, result.getChronology().getClass());\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n-    }\n-\n-//    static class MockUntrustedDateMidnight extends DateMidnight {\n-//        MockUntrustedDateMidnight(long millis) {\n-//            super(millis);\n-//        }\n-//    }\n-\n-    static class MockUntrustedZone extends DateTimeZone {\n-        MockUntrustedZone(String id) {\n-            super(id);\n-        }\n-        public String getNameKey(long instant) {\n-            return null;\n-        }\n-        public int getOffset(long instant) {\n-            return 60 * 60 * 1000;\n-        }\n-        public int getStandardOffset(long instant) {\n-            return 60 * 60 * 1000;\n-        }\n-        public boolean isFixed() {\n-            return true;\n-        }\n-        public long nextTransition(long instant) {\n-            return 0;\n-        }\n-        public long previousTransition(long instant) {\n-            return 0;\n-        }\n-        public boolean equals(Object object) {\n-            return false;\n-        }\n-    }\n-\n-    public void testToMutableDateTime() {\n-        DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n-        MutableDateTime result = test.toMutableDateTime();\n         assertEquals(test.getMillis(), result.getMillis());\n         assertEquals(ISOChronology.getInstance(), result.getChronology());\n     }\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n         assertSame(test, result);\n     }\n \n+    public void testToDateTimeISO() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        DateTime result = test.toDateTimeISO();\n+        assertSame(test, result);\n+        \n+        test = new DateTime(TEST_TIME1, ISOChronology.getInstance(PARIS));\n+        result = test.toDateTimeISO();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertNotSame(test, result);\n+        \n+        test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());\n+        result = test.toDateTimeISO();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertNotSame(test, result);\n+        \n+        test = new DateTime(TEST_TIME1, new MockNullZoneChronology());\n+        result = test.toDateTimeISO();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertNotSame(test, result);\n+    }\n+\n     public void testToDateTime_DateTimeZone() {\n         DateTime test = new DateTime(TEST_TIME1);\n         DateTime result = test.toDateTime(LONDON);\n         assertSame(test, result);\n     }\n \n-    public void testToTrustedISODateTime() {\n-        DateTime test = new DateTime(TEST_TIME1);\n-        DateTime result = test.toTrustedISODateTime();\n-        assertSame(test, result);\n-        assertSame(DateTime.class, result.getClass());\n+    public void testToMutableDateTime() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime();\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToMutableDateTimeISO() {\n+        DateTime test = new DateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTimeISO();\n+        assertSame(MutableDateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n-\n-//        test = new MockUntrustedDateTime(TEST_TIME1);\n-//        result = test.toTrustedISODateTime();\n-//        assertSame(DateTime.class, result.getClass());\n-//        assertSame(ISOChronology.class, result.getChronology().getClass());\n-//        assertEquals(test.getMillis(), result.getMillis());\n-//        assertEquals(ISOChronology.getInstance(), result.getChronology());\n-\n-        test = new DateTime(TEST_TIME1, new MockUntrustedZone(\"Europe/Paris\"));\n-        result = test.toTrustedISODateTime();\n-        assertSame(DateTime.class, result.getClass());\n-        assertSame(ISOChronology.class, result.getChronology().getClass());\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n-    }\n-\n-//    static class MockUntrustedDateTime extends DateTime {\n-//        MockUntrustedDateTime(long millis) {\n-//            super(millis);\n-//        }\n-//    }\n-\n-    static class MockUntrustedZone extends DateTimeZone {\n-        MockUntrustedZone(String id) {\n-            super(id);\n-        }\n-        public String getNameKey(long instant) {\n-            return null;\n-        }\n-        public int getOffset(long instant) {\n-            return 60 * 60 * 1000;\n-        }\n-        public int getStandardOffset(long instant) {\n-            return 60 * 60 * 1000;\n-        }\n-        public boolean isFixed() {\n-            return true;\n-        }\n-        public long nextTransition(long instant) {\n-            return 0;\n-        }\n-        public long previousTransition(long instant) {\n-            return 0;\n-        }\n-        public boolean equals(Object object) {\n-            return false;\n-        }\n-    }\n-\n-    public void testToMutableDateTime() {\n-        DateTime test = new DateTime(TEST_TIME1);\n-        MutableDateTime result = test.toMutableDateTime();\n         assertEquals(test.getMillis(), result.getMillis());\n         assertEquals(ISOChronology.getInstance(), result.getChronology());\n     }\n         assertEquals(expected, result);\n     }\n     \n-//    //-----------------------------------------------------------------------\n-//    public void testImmutable() {\n-//        MockChangeDateTime test = new MockChangeDateTime(TEST_TIME_NOW);\n-//        assertEquals(TEST_TIME_NOW, test.getMillis());\n-//        try {\n-//            test.testSetMillis();\n-//            fail();\n-//        } catch (UnsupportedOperationException ex) {}\n-//        assertEquals(TEST_TIME_NOW, test.getMillis());\n-//        \n-//        test = new MockChangeDateTime(TEST_TIME_NOW);\n-//        assertEquals(ISOChronology.getInstance(), test.getChronology());\n-//        try {\n-//            test.testSetChronology();\n-//            fail();\n-//        } catch (UnsupportedOperationException ex) {}\n-//        assertEquals(ISOChronology.getInstance(), test.getChronology());\n-//    }\n-//    \n-//    static class MockChangeDateTime extends DateTime {\n-//        MockChangeDateTime(long instant) {\n-//            super(instant);\n-//        }\n-//        public void testSetMillis() {\n-//            setMillis(0L);\n-//        }\n-//        public void testSetChronology() {\n-//            setChronology(GregorianChronology.getInstance(PARIS));\n-//        }\n-//    }\n-\n }\n--- a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n         assertEquals(TEST_TIME1, result.getMillis());\n     }\n \n-    public void testToDateTime_DateTimeZone() {\n-        Instant test = new Instant(TEST_TIME1);\n-        DateTime result = test.toDateTime(LONDON);\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(LONDON), result.getChronology());\n-\n-        test = new Instant(TEST_TIME1);\n-        result = test.toDateTime(PARIS);\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n-\n-        test = new Instant(TEST_TIME1);\n-        result = test.toDateTime((DateTimeZone) null);\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n-    }\n-\n-    public void testToDateTime_Chronology() {\n-        Instant test = new Instant(TEST_TIME1);\n-        DateTime result = test.toDateTime(ISOChronology.getInstance());\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n-\n-        test = new Instant(TEST_TIME1);\n-        result = test.toDateTime(GregorianChronology.getInstance(PARIS));\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());\n-\n-        test = new Instant(TEST_TIME1);\n-        result = test.toDateTime((Chronology) null);\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n-    }\n-\n-    public void testToTrustedISODateTime() {\n-        Instant test = new Instant(TEST_TIME1);\n-        DateTime result = test.toTrustedISODateTime();\n+    public void testToDateTimeISO() {\n+        Instant test = new Instant(TEST_TIME1);\n+        DateTime result = test.toDateTimeISO();\n         assertSame(DateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n         assertEquals(ISOChronology.getInstance(), result.getChronology());\n     }\n \n+    public void testToDateTime_DateTimeZone() {\n+        Instant test = new Instant(TEST_TIME1);\n+        DateTime result = test.toDateTime(LONDON);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(LONDON), result.getChronology());\n+\n+        test = new Instant(TEST_TIME1);\n+        result = test.toDateTime(PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+\n+        test = new Instant(TEST_TIME1);\n+        result = test.toDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToDateTime_Chronology() {\n+        Instant test = new Instant(TEST_TIME1);\n+        DateTime result = test.toDateTime(ISOChronology.getInstance());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new Instant(TEST_TIME1);\n+        result = test.toDateTime(GregorianChronology.getInstance(PARIS));\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());\n+\n+        test = new Instant(TEST_TIME1);\n+        result = test.toDateTime((Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n     public void testToMutableDateTime() {\n         Instant test = new Instant(TEST_TIME1);\n         MutableDateTime result = test.toMutableDateTime();\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToMutableDateTimeISO() {\n+        Instant test = new Instant(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTimeISO();\n+        assertSame(MutableDateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n         assertEquals(ISOChronology.getInstance(), result.getChronology());\n     }\n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n         assertEquals(test.getChronology(), result.getChronology());\n     }\n \n+    public void testToDateTimeISO() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        DateTime result = test.toDateTimeISO();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n     public void testToDateTime_DateTimeZone() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME1);\n         MutableDateTime result = test.toMutableDateTime(LONDON);\n         assertEquals(ISOChronology.getInstance(), result.getChronology());\n     }\n \n-    public void testToTrustedISOMutableDateTime() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        DateTime result = test.toTrustedISODateTime();\n-        assertSame(DateTime.class, result.getClass());\n+    public void testToMutableDateTime() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime();\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToMutableDateTimeISO() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTimeISO();\n+        assertSame(MutableDateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n         assertEquals(ISOChronology.getInstance(), result.getChronology());\n-\n-        test = new MockUntrustedMutableDateTime(TEST_TIME1);\n-        result = test.toTrustedISODateTime();\n-        assertSame(DateTime.class, result.getClass());\n-        assertSame(ISOChronology.class, result.getChronology().getClass());\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n-\n-        test = new MutableDateTime(TEST_TIME1, new MockUntrustedZone(\"Europe/Paris\"));\n-        result = test.toTrustedISODateTime();\n-        assertSame(DateTime.class, result.getClass());\n-        assertSame(ISOChronology.class, result.getChronology().getClass());\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n-    }\n-\n-    static class MockUntrustedMutableDateTime extends MutableDateTime {\n-        MockUntrustedMutableDateTime(long millis) {\n-            super(millis);\n-        }\n-    }\n-\n-    static class MockUntrustedZone extends DateTimeZone {\n-        MockUntrustedZone(String id) {\n-            super(id);\n-        }\n-        public String getNameKey(long instant) {\n-            return null;\n-        }\n-        public int getOffset(long instant) {\n-            return 60 * 60 * 1000;\n-        }\n-        public int getStandardOffset(long instant) {\n-            return 60 * 60 * 1000;\n-        }\n-        public boolean isFixed() {\n-            return true;\n-        }\n-        public long nextTransition(long instant) {\n-            return 0;\n-        }\n-        public long previousTransition(long instant) {\n-            return 0;\n-        }\n-        public boolean equals(Object object) {\n-            return false;\n-        }\n-    }\n-\n-    public void testToMutableDateTime() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        MutableDateTime result = test.toMutableDateTime();\n-        assertTrue(test != result);\n-        assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertNotSame(test, result);\n     }\n \n     public void testToMutableDateTime_DateTimeZone() {", "timestamp": 1093131335, "metainfo": ""}