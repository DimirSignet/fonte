{"sha": "55284cec591f9fc927c99ced4c1dc991485d6a37", "log": "Add period constructors for duration   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/MutablePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/MutablePeriod.java\n     }\n \n     /**\n+     * Creates a period from the given start point and the duration.\n+     *\n+     * @param startInstant  the interval start, null means now\n+     * @param duration  the duration of the interval, null means zero-length\n+     */\n+    public MutablePeriod(ReadableInstant startInstant, ReadableDuration duration) {\n+        super(startInstant, duration, null);\n+    }\n+\n+    /**\n+     * Creates a period from the given start point and the duration.\n+     *\n+     * @param startInstant  the interval start, null means now\n+     * @param duration  the duration of the interval, null means zero-length\n+     * @param type  which set of fields this period supports, null means standard\n+     */\n+    public MutablePeriod(ReadableInstant startInstant, ReadableDuration duration, PeriodType type) {\n+        super(startInstant, duration, type);\n+    }\n+\n+    /**\n      * Creates a period from the specified object using the\n      * {@link org.joda.time.convert.ConverterManager ConverterManager}.\n      *\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n      *\n      * @param startInstant  interval start, null means now\n      * @param endInstant  interval end, null means now\n-     * @param type  which set of fields this period supports, null means AllType\n+     * @param type  which set of fields this period supports, null means standard\n      */\n     public Period(ReadableInstant startInstant, ReadableInstant endInstant, PeriodType type) {\n         super(startInstant, endInstant, type);\n+    }\n+\n+    /**\n+     * Creates a period from the given start point and the duration.\n+     *\n+     * @param startInstant  the interval start, null means now\n+     * @param duration  the duration of the interval, null means zero-length\n+     */\n+    public Period(ReadableInstant startInstant, ReadableDuration duration) {\n+        super(startInstant, duration, null);\n+    }\n+\n+    /**\n+     * Creates a period from the given start point and the duration.\n+     *\n+     * @param startInstant  the interval start, null means now\n+     * @param duration  the duration of the interval, null means zero-length\n+     * @param type  which set of fields this period supports, null means standard\n+     */\n+    public Period(ReadableInstant startInstant, ReadableDuration duration, PeriodType type) {\n+        super(startInstant, duration, type);\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n import org.joda.time.MutablePeriod;\n import org.joda.time.PeriodType;\n import org.joda.time.ReadWritablePeriod;\n+import org.joda.time.ReadableDuration;\n import org.joda.time.ReadableInstant;\n import org.joda.time.ReadablePeriod;\n import org.joda.time.convert.ConverterManager;\n             iType = type;\n             setPeriodInternal(start, end, chrono); // internal method\n         }\n+    }\n+\n+    /**\n+     * Creates a period from the given start point and duration.\n+     *\n+     * @param startInstant  the interval start, null means now\n+     * @param duration  the duration of the interval, null means zero-length\n+     * @param type  which set of fields this period supports, null means standard\n+     */\n+    protected BasePeriod(ReadableInstant startInstant, ReadableDuration duration, PeriodType type) {\n+        super();\n+        type = checkPeriodType(type);\n+        long startMillis = DateTimeUtils.getInstantMillis(startInstant);\n+        long durationMillis = DateTimeUtils.getDurationMillis(duration);\n+        long endMillis = FieldUtils.safeAdd(startMillis, durationMillis);\n+        Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);\n+        iType = type;\n+        setPeriodInternal(startMillis, endMillis, chrono); // internal method\n     }\n \n     /**\n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RD1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration dur = new Interval(dt1, dt2).getDuration();\n+        MutablePeriod test = new MutablePeriod(dt1, dur);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RD2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Duration dur = null;\n+        MutablePeriod test = new MutablePeriod(dt1, dur);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RD_PeriodType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration dur = new Interval(dt1, dt2).getDuration();\n+        MutablePeriod test = new MutablePeriod(dt1, dur, PeriodType.yearDayTime());\n+        assertEquals(PeriodType.yearDayTime(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RD_PeriodType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Duration dur = null;\n+        MutablePeriod test = new MutablePeriod(dt1, dur, (PeriodType) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Test constructor (Object)\n      */\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RD1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration dur = new Interval(dt1, dt2).getDuration();\n+        Period test = new Period(dt1, dur);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RD2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Duration dur = null;\n+        Period test = new Period(dt1, dur);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RD_PeriodType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration dur = new Interval(dt1, dt2).getDuration();\n+        Period test = new Period(dt1, dur, PeriodType.yearDayTime());\n+        assertEquals(PeriodType.yearDayTime(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RD_PeriodType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Duration dur = null;\n+        Period test = new Period(dt1, dur, (PeriodType) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Test constructor (Object)\n      */", "timestamp": 1094400182, "metainfo": ""}