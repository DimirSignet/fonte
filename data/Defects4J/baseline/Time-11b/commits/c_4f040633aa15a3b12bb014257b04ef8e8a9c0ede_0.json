{"sha": "4f040633aa15a3b12bb014257b04ef8e8a9c0ede", "log": "Add factory methods   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Chronology.java\n+++ b/JodaTime/src/java/org/joda/time/Chronology.java\n  */\n package org.joda.time;\n \n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n /**\n  * Chronology provides access to the individual date time fields for a\n- * chronological calendar system. Various chronologies are supported by\n- * subclasses including ISO and GregorianJulian.\n+ * chronological calendar system.\n  * <p>\n- * This interface defines a number of fields with names from the ISO8601\n- * standard. Chronology does not 'strongly' define these fields however, thus\n- * implementations are free to interpret the field names as they wish. For\n- * example, a week could be defined as 10 days and a month as 40 days in a\n+ * Various chronologies are supported by subclasses including ISO and GregorianJulian.\n+ * This class provides static factory methods to access these chronologies.\n+ * For example, to obtain the current time in the coptic calendar system:\n+ * <pre>\n+ * DateTime dt = new DateTime(Chronology.getCoptic());\n+ * </pre>\n+ * <p>\n+ * The provided chronology implementations are:\n+ * <ul>\n+ * <li>ISO - Based on the ISO8601 standard and suitable for use after about 1600\n+ * <li>GJ - Historically accurate calendar with Julian followed by Gregorian\n+ * <li>Gregorian - The Gregorian calendar system used for all time (proleptic)\n+ * <li>Julian - The Julian calendar system used for all time (proleptic)\n+ * <li>Buddhist - The Buddhist calendar system which is an offset in years from GJ\n+ * <li>Coptic - The Coptic calendar system which defines 30 day months\n+ * </ul>\n+ * Hopefully future releases will contain more chronologies.\n+ * <p>\n+ * This class defines a number of fields with names from the ISO8601 standard.\n+ * It does not 'strongly' define these fields however, thus implementations\n+ * are free to interpret the field names as they wish.\n+ * For example, a week could be defined as 10 days and a month as 40 days in a\n  * special WeirdChronology implementation. Clearly the GJ and ISO\n  * implementations provided use the field names as you would expect.\n  * \n public abstract class Chronology {\n \n     /**\n+     * Gets an instance of the ISOChronology in the default zone.\n+     * <p>\n+     * {@link ISOChronology} defines all fields in line with the ISO8601 standard.\n+     * This chronology is the default, and is suitable for all normal datetime processing.\n+     * It is <i>unsuitable</i> for historical datetimes before October 15, 1582\n+     * as it applies the modern Gregorian calendar rules before that date.\n+     *\n+     * @return the ISO chronology\n+     */\n+    public static Chronology getISO() {\n+        return ISOChronology.getInstance();\n+    }\n+\n+    /**\n+     * Gets an instance of the ISOChronology in the UTC zone.\n+     * <p>\n+     * {@link ISOChronology} defines all fields in line with the ISO8601 standard.\n+     * This chronology is the default, and is suitable for all normal datetime processing.\n+     * It is <i>unsuitable</i> for historical datetimes before October 15, 1582\n+     * as it applies the modern Gregorian calendar rules before that date.\n+     *\n+     * @return the ISO chronology\n+     */\n+    public static Chronology getISOUTC() {\n+        return ISOChronology.getInstanceUTC();\n+    }\n+\n+    /**\n+     * Gets an instance of the ISOChronology in the specified zone.\n+     * <p>\n+     * {@link ISOChronology} defines all fields in line with the ISO8601 standard.\n+     * This chronology is the default, and is suitable for all normal datetime processing.\n+     * It is <i>unsuitable</i> for historical datetimes before October 15, 1582\n+     * as it applies the modern Gregorian calendar rules before that date.\n+     *\n+     * @param zone  the zone to use, null means default zone\n+     * @return the ISO chronology\n+     */\n+    public static Chronology getISO(DateTimeZone zone) {\n+        return ISOChronology.getInstance(zone);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets an instance of the GJChronology in the default zone.\n+     * <p>\n+     * {@link GJChronology} defines all fields using standard meanings.\n+     * This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.\n+     * The Gregorian calendar system is used after October 15, 1582, while the\n+     * Julian calendar system is used before.\n+     * <p>\n+     * Unlike <code>GregorianCalendar</code>, this chronology returns a year of -1\n+     * for 1 BCE, -2 for 2 BCE and so on. Thus there is no year zero.\n+     * <p>\n+     * This method uses the standard Julian to Gregorian cutover date of\n+     * October 15th 1582. If you require a cutover on a different date, then use\n+     * the factories on <code>GJChronology</code> itself.\n+     * <p>\n+     * When dealing solely with dates in the modern era, from 1600 onwards,\n+     * we recommend using ISOChronology, which is the default.\n+     *\n+     * @return the GJ chronology\n+     */\n+    public static Chronology getGJ() {\n+        return GJChronology.getInstance();\n+    }\n+\n+    /**\n+     * Gets an instance of the GJChronology in the UTC zone.\n+     * <p>\n+     * {@link GJChronology} defines all fields using standard meanings.\n+     * This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.\n+     * The Gregorian calendar system is used after October 15, 1582, while the\n+     * Julian calendar system is used before.\n+     * <p>\n+     * Unlike <code>GregorianCalendar</code>, this chronology returns a year of -1\n+     * for 1 BCE, -2 for 2 BCE and so on. Thus there is no year zero.\n+     * <p>\n+     * This method uses the standard Julian to Gregorian cutover date of\n+     * October 15th 1582. If you require a cutover on a different date, then use\n+     * the factories on <code>GJChronology</code> itself.\n+     * <p>\n+     * When dealing solely with dates in the modern era, from 1600 onwards,\n+     * we recommend using ISOChronology, which is the default.\n+     *\n+     * @return the GJ chronology\n+     */\n+    public static Chronology getGJUTC() {\n+        return GJChronology.getInstanceUTC();\n+    }\n+\n+    /**\n+     * Gets an instance of the GJChronology in the specified zone.\n+     * <p>\n+     * {@link GJChronology} defines all fields using standard meanings.\n+     * This chronology is intended to be used as a replacement for <code>GregorianCalendar</code>.\n+     * The Gregorian calendar system is used after October 15, 1582, while the\n+     * Julian calendar system is used before.\n+     * <p>\n+     * Unlike <code>GregorianCalendar</code>, this chronology returns a year of -1\n+     * for 1 BCE, -2 for 2 BCE and so on. Thus there is no year zero.\n+     * <p>\n+     * This method uses the standard Julian to Gregorian cutover date of\n+     * October 15th 1582. If you require a cutover on a different date, then use\n+     * the factories on <code>GJChronology</code> itself.\n+     * <p>\n+     * When dealing solely with dates in the modern era, from 1600 onwards,\n+     * we recommend using ISOChronology, which is the default.\n+     *\n+     * @param zone  the zone to use, null means default zone\n+     * @return the GJ chronology\n+     */\n+    public static Chronology getGJ(DateTimeZone zone) {\n+        return GJChronology.getInstance(zone);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets an instance of the GregorianChronology in the default zone.\n+     * <p>\n+     * {@link GregorianChronology} defines all fields using standard meanings.\n+     * It uses the Gregorian calendar rules <i>for all time</i> (proleptic)\n+     * thus it is NOT a replacement for <code>GregorianCalendar</code>.\n+     * For that purpose, you should use {@link #getGJ()}.\n+     * <p>\n+     * The Gregorian calendar system defines a leap year every four years,\n+     * except that every 100 years is not leap, but every 400 is leap.\n+     * <p>\n+     * Technically, this chronology is almost identical to the ISO chronology,\n+     * thus we recommend using ISOChronology instead, which is the default.\n+     *\n+     * @return the Gregorian chronology\n+     */\n+    public static Chronology getGregorian() {\n+        return GregorianChronology.getInstance();\n+    }\n+\n+    /**\n+     * Gets an instance of the GregorianChronology in the UTC zone.\n+     * <p>\n+     * {@link GregorianChronology} defines all fields using standard meanings.\n+     * It uses the Gregorian calendar rules <i>for all time</i> (proleptic)\n+     * thus it is NOT a replacement for <code>GregorianCalendar</code>.\n+     * For that purpose, you should use {@link #getGJ()}.\n+     * <p>\n+     * The Gregorian calendar system defines a leap year every four years,\n+     * except that every 100 years is not leap, but every 400 is leap.\n+     * <p>\n+     * Technically, this chronology is almost identical to the ISO chronology,\n+     * thus we recommend using ISOChronology instead, which is the default.\n+     *\n+     * @return the Gregorian chronology\n+     */\n+    public static Chronology getGregorianUTC() {\n+        return GregorianChronology.getInstanceUTC();\n+    }\n+\n+    /**\n+     * Gets an instance of the GregorianChronology in the specified zone.\n+     * <p>\n+     * {@link GregorianChronology} defines all fields using standard meanings.\n+     * It uses the Gregorian calendar rules <i>for all time</i> (proleptic)\n+     * thus it is NOT a replacement for <code>GregorianCalendar</code>.\n+     * For that purpose, you should use {@link #getGJ()}.\n+     * <p>\n+     * The Gregorian calendar system defines a leap year every four years,\n+     * except that every 100 years is not leap, but every 400 is leap.\n+     * <p>\n+     * Technically, this chronology is almost identical to the ISO chronology,\n+     * thus we recommend using ISOChronology instead, which is the default.\n+     *\n+     * @param zone  the zone to use, null means default zone\n+     * @return the Gregorian chronology\n+     */\n+    public static Chronology getGregorian(DateTimeZone zone) {\n+        return GregorianChronology.getInstance(zone);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets an instance of the JulianChronology in the default zone.\n+     * <p>\n+     * {@link JulianChronology} defines all fields using standard meanings.\n+     * It uses the Julian calendar rules <i>for all time</i> (proleptic).\n+     * The Julian calendar system defines a leap year every four years.\n+     *\n+     * @return the Julian chronology\n+     */\n+    public static Chronology getJulian() {\n+        return JulianChronology.getInstance();\n+    }\n+\n+    /**\n+     * Gets an instance of the JulianChronology in the UTC zone.\n+     * <p>\n+     * {@link JulianChronology} defines all fields using standard meanings.\n+     * It uses the Julian calendar rules <i>for all time</i> (proleptic).\n+     * The Julian calendar system defines a leap year every four years.\n+     *\n+     * @return the Julian chronology\n+     */\n+    public static Chronology getJulianUTC() {\n+        return JulianChronology.getInstanceUTC();\n+    }\n+\n+    /**\n+     * Gets an instance of the JulianChronology in the specified zone.\n+     * <p>\n+     * {@link JulianChronology} defines all fields using standard meanings.\n+     * It uses the Julian calendar rules <i>for all time</i> (proleptic).\n+     * The Julian calendar system defines a leap year every four years.\n+     *\n+     * @param zone  the zone to use, null means default zone\n+     * @return the Julian chronology\n+     */\n+    public static Chronology getJulian(DateTimeZone zone) {\n+        return JulianChronology.getInstance(zone);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets an instance of the BuddhistChronology in the default zone.\n+     * <p>\n+     * {@link BuddhistChronology} defines all fields using standard meanings,\n+     * however the year is offset by 543. The chronology cannot be used before\n+     * year 1 in the Buddhist calendar.\n+     *\n+     * @return the Buddhist chronology\n+     */\n+    public static Chronology getBuddhist() {\n+        return BuddhistChronology.getInstance();\n+    }\n+\n+    /**\n+     * Gets an instance of the BuddhistChronology in the UTC zone.\n+     * <p>\n+     * {@link BuddhistChronology} defines all fields using standard meanings,\n+     * however the year is offset by 543. The chronology cannot be used before\n+     * year 1 in the Buddhist calendar.\n+     *\n+     * @return the Buddhist chronology\n+     */\n+    public static Chronology getBuddhistUTC() {\n+        return BuddhistChronology.getInstanceUTC();\n+    }\n+\n+    /**\n+     * Gets an instance of the BuddhistChronology in the specified zone.\n+     * <p>\n+     * {@link BuddhistChronology} defines all fields using standard meanings,\n+     * however the year is offset by 543. The chronology cannot be used before\n+     * year 1 in the Buddhist calendar.\n+     *\n+     * @param zone  the zone to use, null means default zone\n+     * @return the Buddhist chronology\n+     */\n+    public static Chronology getBuddhist(DateTimeZone zone) {\n+        return BuddhistChronology.getInstance(zone);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets an instance of the CopticChronology in the default zone.\n+     * <p>\n+     * {@link CopticChronology} defines fields sensibly for the Coptic calendar system.\n+     * The Coptic calendar system defines every fourth year as leap.\n+     * The year is broken down into 12 months, each 30 days in length.\n+     * An extra period at the end of the year is either 5 or 6 days in length\n+     * and is returned as a 13th month.\n+     * Year 1 in the Coptic calendar began on August 29, 284 CE (Julian).\n+     * The chronology cannot be used before the first Coptic year.\n+     *\n+     * @return the Coptic chronology\n+     */\n+    public static Chronology getCoptic() {\n+        return CopticChronology.getInstance();\n+    }\n+\n+    /**\n+     * Gets an instance of the CopticChronology in the UTC zone.\n+     * <p>\n+     * {@link CopticChronology} defines fields sensibly for the Coptic calendar system.\n+     * The Coptic calendar system defines every fourth year as leap.\n+     * The year is broken down into 12 months, each 30 days in length.\n+     * An extra period at the end of the year is either 5 or 6 days in length\n+     * and is returned as a 13th month.\n+     * Year 1 in the Coptic calendar began on August 29, 284 CE (Julian).\n+     * The chronology cannot be used before the first Coptic year.\n+     *\n+     * @return the Coptic chronology\n+     */\n+    public static Chronology getCopticUTC() {\n+        return CopticChronology.getInstanceUTC();\n+    }\n+\n+    /**\n+     * Gets an instance of the CopticChronology in the specified zone.\n+     * <p>\n+     * {@link CopticChronology} defines fields sensibly for the Coptic calendar system.\n+     * The Coptic calendar system defines every fourth year as leap.\n+     * The year is broken down into 12 months, each 30 days in length.\n+     * An extra period at the end of the year is either 5 or 6 days in length\n+     * and is returned as a 13th month.\n+     * Year 1 in the Coptic calendar began on August 29, 284 CE (Julian).\n+     * The chronology cannot be used before the first Coptic year.\n+     *\n+     * @param zone  the zone to use, null means default zone\n+     * @return the Coptic chronology\n+     */\n+    public static Chronology getCoptic(DateTimeZone zone) {\n+        return CopticChronology.getInstance(zone);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Returns the DateTimeZone that this Chronology operates in, or null if\n      * unspecified.\n      *", "timestamp": 1093907174, "metainfo": ""}