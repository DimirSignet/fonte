{"sha": "44b5d6cc832ddc1b08abb1c3aca42b4d84c43eef", "log": "Add Period.multipliedBy(int) and Period.negated()", "commit": "\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Returns a new instance with each element in this period multiplied\n+     * by the specified scalar.\n+     *\n+     * @param scalar  the scalar to multiply by, not null\n+     * @return a {@code Period} based on this period with the amounts multiplied by the scalar, never null\n+     * @throws ArithmeticException if the capacity of any field is exceeded\n+     */\n+    public Period multipliedBy(int scalar) {\n+        if (this == ZERO || scalar == 1) {\n+            return this;\n+        }\n+        int[] values = getValues();  // cloned\n+        for (int i = 0; i < values.length; i++) {\n+            values[i] = FieldUtils.safeMultiply(values[i], scalar);\n+        }\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    /**\n+     * Returns a new instance with each amount in this period negated.\n+     *\n+     * @return a {@code Period} based on this period with the amounts negated, never null\n+     * @throws ArithmeticException if any field has the minimum value\n+     */\n+    public Period negated() {\n+        return multipliedBy(-1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Converts this period to a period in weeks assuming a\n      * 7 day week, 24 hour day, 60 minute hour and 60 second minute.\n      * <p>\n--- a/src/test/java/org/joda/time/TestPeriod_Basics.java\n+++ b/src/test/java/org/joda/time/TestPeriod_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testMultipliedBy() {\n+        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        \n+        Period test = base.multipliedBy(1);\n+        assertSame(base, test);\n+        \n+        test = base.multipliedBy(0);\n+        assertEquals(Period.ZERO, test);\n+        \n+        test = base.multipliedBy(2);\n+        assertEquals(2, test.getYears());\n+        assertEquals(4, test.getMonths());\n+        assertEquals(6, test.getWeeks());\n+        assertEquals(8, test.getDays());\n+        assertEquals(10, test.getHours());\n+        assertEquals(12, test.getMinutes());\n+        assertEquals(14, test.getSeconds());\n+        assertEquals(16, test.getMillis());\n+        \n+        test = base.multipliedBy(3);\n+        assertEquals(3, test.getYears());\n+        assertEquals(6, test.getMonths());\n+        assertEquals(9, test.getWeeks());\n+        assertEquals(12, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(18, test.getMinutes());\n+        assertEquals(21, test.getSeconds());\n+        assertEquals(24, test.getMillis());\n+        \n+        test = base.multipliedBy(-4);\n+        assertEquals(-4, test.getYears());\n+        assertEquals(-8, test.getMonths());\n+        assertEquals(-12, test.getWeeks());\n+        assertEquals(-16, test.getDays());\n+        assertEquals(-20, test.getHours());\n+        assertEquals(-24, test.getMinutes());\n+        assertEquals(-28, test.getSeconds());\n+        assertEquals(-32, test.getMillis());\n+        \n+        try {\n+            Period.days(Integer.MAX_VALUE).multipliedBy(2);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            Period.days(Integer.MIN_VALUE).multipliedBy(2);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNegated() {\n+        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        \n+        Period test = Period.ZERO.negated();\n+        assertEquals(Period.ZERO, test);\n+        \n+        test = base.negated();\n+        assertEquals(-1, test.getYears());\n+        assertEquals(-2, test.getMonths());\n+        assertEquals(-3, test.getWeeks());\n+        assertEquals(-4, test.getDays());\n+        assertEquals(-5, test.getHours());\n+        assertEquals(-6, test.getMinutes());\n+        assertEquals(-7, test.getSeconds());\n+        assertEquals(-8, test.getMillis());\n+        \n+        test = Period.days(Integer.MAX_VALUE).negated();\n+        assertEquals(-Integer.MAX_VALUE, test.getDays());\n+        \n+        try {\n+            Period.days(Integer.MIN_VALUE).negated();\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToStandardWeeks() {\n         Period test = new Period(0, 0, 3, 4, 5, 6, 7, 8);\n         assertEquals(3, test.toStandardWeeks().getWeeks());", "timestamp": 1329840034, "metainfo": ""}