{"sha": "605dc5970c51fc12a5e07640dc7cb2d4035d0023", "log": "Tests for DateTimeFormat patterns   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/format/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestAll.java\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         \n+        suite.addTest(TestDateTimeFormat.suite());\n         suite.addTest(TestISODateTimeFormat.suite());\n         \n         suite.addTest(TestISOPeriodFormat.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ * This class is a Junit unit test for DateTime Formating.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateTimeFormat extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+    private static final DateTimeZone NEWYORK = DateTimeZone.getInstance(\"America/New_York\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeFormat.class);\n+    }\n+\n+    public TestDateTimeFormat(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_era() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"G\");\n+        assertEquals(dt.toString(), \"AD\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"AD\", f.print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(dt.toString(), \"AD\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_centuryOfEra() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"C\");\n+        assertEquals(dt.toString(), \"20\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"20\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"20\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_yearOfEra() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"Y\");\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_year() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"y\");\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_weekyear() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"x\");\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"2004\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_weekOfWeekyear() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"w\");\n+        assertEquals(dt.toString(), \"24\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"24\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"24\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_dayOfWeek() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"e\");\n+        assertEquals(dt.toString(), \"3\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"3\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"3\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_dayOfWeekShortText() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"E\");\n+        assertEquals(dt.toString(), \"Wed\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"Wed\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"Wed\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_dayOfWeekText() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"EEEE\");\n+        assertEquals(dt.toString(), \"Wednesday\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"Wednesday\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"Wednesday\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_dayOfYearText() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"D\");\n+        assertEquals(dt.toString(), \"161\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"161\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"161\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_monthOfYear() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"M\");\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_monthOfYearShortText() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"MMM\");\n+        assertEquals(dt.toString(), \"Jun\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"Jun\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"Jun\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_monthOfYearText() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"MMMM\");\n+        assertEquals(dt.toString(), \"June\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"June\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"June\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_dayOfMonth() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"d\");\n+        assertEquals(dt.toString(), \"9\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"9\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"9\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_halfdayOfDay() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"a\");\n+        assertEquals(dt.toString(), \"AM\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"AM\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"PM\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_hourOfHalfday() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"K\");\n+        assertEquals(dt.toString(), \"10\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"7\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_clockhourOfHalfday() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"h\");\n+        assertEquals(dt.toString(), \"10\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"7\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_hourOfDay() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"H\");\n+        assertEquals(dt.toString(), \"10\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"19\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_clockhourOfDay() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"k\");\n+        assertEquals(dt.toString(), \"10\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"6\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"19\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_minute() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"m\");\n+        assertEquals(dt.toString(), \"20\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"20\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"20\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_second() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"s\");\n+        assertEquals(dt.toString(), \"30\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"30\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"30\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_fractionOfSecond() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"SSS\");\n+        assertEquals(dt.toString(), \"040\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"040\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"040\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_zoneText() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"z\");\n+        assertEquals(dt.toString(), \"UTC\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"EDT\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"JST\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_zoneAmount() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"Z\");\n+        assertEquals(dt.toString(), \"+0000\", f.print(dt));\n+        \n+        dt = dt.withZone(NEWYORK);\n+        assertEquals(dt.toString(), \"-0400\", f.print(dt));\n+        \n+        dt = dt.withZone(TOKYO);\n+        assertEquals(dt.toString(), \"+0900\", f.print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_other() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        DateTimeFormatter f = DateTimeFormat.getInstance(Locale.UK).forPattern(\"'Hello' ''\");\n+        assertEquals(\"Hello '\", f.print(dt));\n+    }\n+\n+}", "timestamp": 1103823227, "metainfo": ""}