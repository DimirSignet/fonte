{"sha": "b8197b0ff8e97855a7cbbc6fcb9d520825a169fc", "log": "Removed redundant public keywords.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeField.java\n      * \n      * @return field name\n      */\n-    public String getName();\n+    String getName();\n \n     /**\n      * Returns true if this field is supported.\n      * \n      * @return true if this field is supported\n      */\n-    public boolean isSupported();\n+    boolean isSupported();\n \n     /**\n      * Returns true if the set method is lenient. If so, it accepts values that\n      * \n      * @return true if this field is lenient\n      */\n-    public boolean isLenient();\n+    boolean isLenient();\n \n     // Main access API\n     //------------------------------------------------------------------------\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to query\n      * @return the value of the field, in the units of the field\n      */\n-    public int get(long instant);\n+    int get(long instant);\n \n     /**\n      * Get the human-readable, text value of this field from the milliseconds.\n      * @param locale the locale to use for selecting a text symbol, null for default\n      * @return the text value of the field\n      */\n-    public String getAsText(long instant, Locale locale);\n+    String getAsText(long instant, Locale locale);\n \n     /**\n      * Get the human-readable, text value of this field from the milliseconds.\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to query\n      * @return the text value of the field\n      */\n-    public String getAsText(long instant);\n+    String getAsText(long instant);\n \n     /**\n      * Get the human-readable, short text value of this field from the\n      * @param locale the locale to use for selecting a text symbol, null for default\n      * @return the short text value of the field\n      */\n-    public String getAsShortText(long instant, Locale locale);\n+    String getAsShortText(long instant, Locale locale);\n \n     /**\n      * Get the human-readable, short text value of this field from the\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to query\n      * @return the short text value of the field\n      */\n-    public String getAsShortText(long instant);\n+    String getAsShortText(long instant);\n \n     /**\n      * Adds a value (which may be negative) to the millis value,\n      * @param value  the value to add, in the units of the field\n      * @return the updated milliseconds\n      */\n-    public long add(long instant, int value);\n+    long add(long instant, int value);\n \n     /**\n      * Adds a value (which may be negative) to the millis value,\n      * @throws IllegalArgumentException if value is too large\n      * @see #add(long,int)\n      */\n-    public long add(long instant, long value);\n+    long add(long instant, long value);\n \n     /**\n      * Adds a value (which may be negative) to the millis value,\n      * @param value  the value to add, in the units of the field\n      * @return the updated milliseconds\n      */\n-    public long addWrapped(long instant, int value) ;\n+    long addWrapped(long instant, int value) ;\n \n     /**\n      * Computes the difference between two instants, as measured in the units\n      * subtract off the minuend\n      * @return the difference in the units of this field\n      */\n-    public int getDifference(long minuendInstant, long subtrahendInstant);\n+    int getDifference(long minuendInstant, long subtrahendInstant);\n \n     /**\n      * Computes the difference between two instants, as measured in the units\n      * subtract off the minuend\n      * @return the difference in the units of this field\n      */\n-    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant);\n+    long getDifferenceAsLong(long minuendInstant, long subtrahendInstant);\n \n     /**\n      * Sets a value in the milliseconds supplied.\n      * @return the updated milliseconds\n      * @throws IllegalArgumentException if the value is invalid\n      */\n-    public long set(long instant, int value);\n+    long set(long instant, int value);\n \n     /**\n      * Sets a value in the milliseconds supplied from a human-readable, text\n      * @return the updated milliseconds\n      * @throws IllegalArgumentException if the text value is invalid\n      */\n-    public long set(long instant, String text, Locale locale);\n+    long set(long instant, String text, Locale locale);\n \n     /**\n      * Sets a value in the milliseconds supplied from a human-readable, text\n      * @return the updated milliseconds\n      * @throws IllegalArgumentException if the text value is invalid\n      */\n-    public long set(long instant, String text);\n+    long set(long instant, String text);\n \n     // Extra information API\n     //------------------------------------------------------------------------\n      * @return the duration of this field, or UnsupportedDurationField if field\n      * has no duration\n      */\n-    public DurationField getDurationField();\n+    DurationField getDurationField();\n \n     /**\n      * Returns the range duration of this field. For example, if this field\n      *\n      * @return the range duration of this field, or null if field has no range\n      */\n-    public DurationField getRangeDurationField();\n+    DurationField getRangeDurationField();\n \n     /**\n      * Returns whether this field is 'leap' for the specified instant.\n      * \n      * @return true if the field is 'leap'\n      */\n-    public boolean isLeap(long instant);\n+    boolean isLeap(long instant);\n \n     /**\n      * Gets the amount by which this field is 'leap' for the specified instant.\n      * For example, a leap year would return one, a non leap year would return\n      * zero.\n      */\n-    public int getLeapAmount(long instant);\n+    int getLeapAmount(long instant);\n \n     /**\n      * If this field were to leap, then it would be in units described by the\n      * returned duration. If this field doesn't ever leap, null is returned.\n      */\n-    public DurationField getLeapDurationField();\n+    DurationField getLeapDurationField();\n \n     /**\n      * Get the minimum allowable value for this field.\n      * @return the minimum valid value for this field, in the units of the\n      * field\n      */\n-    public int getMinimumValue();\n+    int getMinimumValue();\n \n     /**\n      * Get the minimum value for this field evaluated at the specified time.\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to query\n      * @return the minimum value for this field, in the units of the field\n      */\n-    public int getMinimumValue(long instant);\n+    int getMinimumValue(long instant);\n \n     /**\n      * Get the maximum allowable value for this field.\n      * @return the maximum valid value for this field, in the units of the\n      * field\n      */\n-    public int getMaximumValue();\n+    int getMaximumValue();\n \n     /**\n      * Get the maximum value for this field evaluated at the specified time.\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to query\n      * @return the maximum value for this field, in the units of the field\n      */\n-    public int getMaximumValue(long instant);\n+    int getMaximumValue(long instant);\n \n     /**\n      * Get the maximum text value for this field.\n      * @param locale  the locale to use for selecting a text symbol\n      * @return the maximum text length\n      */\n-    public int getMaximumTextLength(Locale locale);\n+    int getMaximumTextLength(Locale locale);\n \n     /**\n      * Get the maximum short text value for this field.\n      * @param locale  the locale to use for selecting a text symbol\n      * @return the maximum short text length\n      */\n-    public int getMaximumShortTextLength(Locale locale);\n+    int getMaximumShortTextLength(Locale locale);\n \n     // Calculation API\n     //------------------------------------------------------------------------\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to round\n      * @return rounded milliseconds\n      */\n-    public long roundFloor(long instant);\n+    long roundFloor(long instant);\n \n     /**\n      * Round to the highest whole unit of this field. The value of this field\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to round\n      * @return rounded milliseconds\n      */\n-    public long roundCeiling(long instant);\n+    long roundCeiling(long instant);\n \n     /**\n      * Round to the nearest whole unit of this field. If the given millisecond\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to round\n      * @return rounded milliseconds\n      */\n-    public long roundHalfFloor(long instant);\n+    long roundHalfFloor(long instant);\n \n     /**\n      * Round to the nearest whole unit of this field. If the given millisecond\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to round\n      * @return rounded milliseconds\n      */\n-    public long roundHalfCeiling(long instant);\n+    long roundHalfCeiling(long instant);\n \n     /**\n      * Round to the nearest whole unit of this field. If the given millisecond\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to round\n      * @return rounded milliseconds\n      */\n-    public long roundHalfEven(long instant);\n+    long roundHalfEven(long instant);\n \n     /**\n      * Returns the fractional duration milliseconds of this field. In other\n      * remainder\n      * @return remainder duration, in milliseconds\n      */\n-    public long remainder(long instant);\n+    long remainder(long instant);\n \n     /**\n      * Get a suitable debug string.\n      * \n      * @return debug string\n      */\n-    public String toString();\n+    String toString();\n     \n }\n--- a/JodaTime/src/java/org/joda/time/DurationField.java\n+++ b/JodaTime/src/java/org/joda/time/DurationField.java\n      * \n      * @return field name\n      */\n-    public String getName();\n+    String getName();\n \n     /**\n      * Returns true if this field is supported.\n      * \n      * @return true if this field is supported\n      */\n-    public boolean isSupported();\n+    boolean isSupported();\n \n     /**\n      * Is this field precise. A precise field can calculate its value from\n      * @return true if precise\n      * @see #getUnitMillis()\n      */\n-    public boolean isPrecise();\n+    boolean isPrecise();\n     \n     /**\n      * Returns the amount of milliseconds per unit value of this field. For\n      * @return the unit size of this field, in milliseconds\n      * @see #isPrecise()\n      */\n-    public long getUnitMillis();\n+    long getUnitMillis();\n \n     //------------------------------------------------------------------------\n     /**\n      * negative\n      * @throws ArithmeticException if the value is too large for an int\n      */\n-    public int getValue(long duration);\n+    int getValue(long duration);\n \n     /**\n      * Get the value of this field from the milliseconds, which is approximate\n      * @return the value of the field, in the units of the field, which may be\n      * negative\n      */\n-    public long getValueAsLong(long duration);\n+    long getValueAsLong(long duration);\n \n     /**\n      * Get the value of this field from the milliseconds relative to an\n      * negative\n      * @throws ArithmeticException if the value is too large for an int\n      */\n-    public int getValue(long duration, long instant);\n+    int getValue(long duration, long instant);\n \n     /**\n      * Get the value of this field from the milliseconds relative to an\n      * @return the value of the field, in the units of the field, which may be\n      * negative\n      */\n-    public long getValueAsLong(long duration, long instant);\n+    long getValueAsLong(long duration, long instant);\n \n     //------------------------------------------------------------------------\n     /**\n      * @return the milliseconds that the field represents, which may be\n      * negative\n      */\n-    public long getMillis(int value);\n+    long getMillis(int value);\n \n     /**\n      * Get the millisecond duration of this field from its value, which is\n      * @return the milliseconds that the field represents, which may be\n      * negative\n      */\n-    public long getMillis(long value);\n+    long getMillis(long value);\n \n     /**\n      * Get the millisecond duration of this field from its value relative to an\n      * @return the millisecond duration that the field represents, which may be\n      * negative\n      */\n-    public long getMillis(int value, long instant);\n+    long getMillis(int value, long instant);\n \n     /**\n      * Get the millisecond duration of this field from its value relative to an\n      * @return the millisecond duration that the field represents, which may be\n      * negative\n      */\n-    public long getMillis(long value, long instant);\n+    long getMillis(long value, long instant);\n \n     /**\n      * Adds a duration value (which may be negative) to the instant.\n      * @param value  the value to add, in the units of the field\n      * @return the updated milliseconds\n      */\n-    public long add(long instant, int value);\n+    long add(long instant, int value);\n \n     /**\n      * Adds a duration value (which may be negative) to the instant.\n      * @param value  the value to add, in the units of the field\n      * @return the updated milliseconds\n      */\n-    public long add(long instant, long value);\n+    long add(long instant, long value);\n \n     /**\n      * Computes the difference between two instants, as measured in the units\n      * subtract off the minuend\n      * @return the difference in the units of this field\n      */\n-    public int getDifference(long minuendInstant, long subtrahendInstant);\n+    int getDifference(long minuendInstant, long subtrahendInstant);\n \n     /**\n      * Computes the difference between two instants, as measured in the units\n      * subtract off the minuend\n      * @return the difference in the units of this field\n      */\n-    public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant);\n+    long getDifferenceAsLong(long minuendInstant, long subtrahendInstant);\n \n     /**\n      * Compares this duration field with another duration field for ascending\n      * @throws NullPointerException if the object is null\n      * @throws ClassCastException if the object type is not supported\n      */\n-    public int compareTo(Object durationField);\n+    int compareTo(Object durationField);\n \n     /**\n      * Returns a localized unit name of this field, using the given value as an\n      * @param value the duration value to use for selecting a unit name\n      * @param locale the locale to use for selecting a name, null for default\n      */\n-    //public String getUnitName(long value, Locale locale);\n+    //String getUnitName(long value, Locale locale);\n \n     /**\n      * Returns a localized unit name of this field, using the given value as an\n      *\n      * @param value the duration value to use for selecting a unit name\n      */\n-    //public String getUnitName(long value);\n+    //String getUnitName(long value);\n \n     /**\n      * Get the maximum length string returned by getUnitName.\n      * default\n      * @return the maximum name length\n      */\n-    //public int getMaximumUnitNameLength(Locale locale);\n+    //int getMaximumUnitNameLength(Locale locale);\n \n     //------------------------------------------------------------------------\n     /**\n      * \n      * @return debug string\n      */\n-    public String toString();\n+    String toString();\n     \n }", "timestamp": 1071988071, "metainfo": ""}