{"sha": "4ff49b3de99f36b4fabf9117fa2939eb5c5d4a6c", "log": "Add YearMonthDay   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/partial/YearMonthDay.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.partial;\n+\n+import java.io.Serializable;\n+import java.util.Locale;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeField;\n+\n+/**\n+ * YearMonthDay is an immutable partial instant supporting the year, monthOfYear\n+ * and dayOfMonth fields.\n+ * <p>\n+ * Calculations on YearMonthDay are performed using a {@link Chronology}.\n+ * This chronology is set to be in the UTC time zone for all calculations.\n+ * <p>\n+ * Each individual field can be queried in two ways:\n+ * <ul>\n+ * <li><code>getMonthOfYear()</code>\n+ * <li><code>monthOfYear().get()</code>\n+ * </ul>\n+ * The second technique also provides access to other useful methods on the\n+ * field:\n+ * <ul>\n+ * <li>numeric value - <code>monthOfYear().get()</code>\n+ * <li>text value - <code>monthOfYear().getAsText()</code>\n+ * <li>short text value - <code>monthOfYear().getAsShortText()</code>\n+ * <li>maximum/minimum values - <code>monthOfYear().getMaximumValue()</code>\n+ * <li>add/subtract - <code>monthOfYear().addToCopy()</code>\n+ * <li>set - <code>monthOfYear().setCopy()</code>\n+ * </ul>\n+ * <p>\n+ * YearMonthDay is thread-safe and immutable, provided that the Chronology is as well.\n+ * All standard Chronology classes supplied are thread-safe and immutable.\n+ *\n+ * @author Stephen Colebourne\n+ * @since 1.0\n+ */\n+public final class YearMonthDay extends AbstractPartialInstant implements PartialInstant, Serializable {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = 797544782896179L;\n+\n+    /** The index of the year field in the field array */\n+    public static final int YEAR = 0;\n+    /** The index of the monthOfYear field in the field array */\n+    public static final int MONTH_OF_YEAR = 1;\n+    /** The index of the dayOfMonth field in the field array */\n+    public static final int DAY_OF_MONTH = 2;\n+\n+    // Constructors\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructs a YearMonthDay with the current time, using ISOChronology in\n+     * the default zone to extract the fields.\n+     * <p>\n+     * The constructor uses the default time zone, resulting in the local time\n+     * being initialised. Once the constructor is complete, all further calculations\n+     * are performed without reference to a timezone (by switching to UTC).\n+     */\n+    public YearMonthDay() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a YearMonthDay with the current time, using the specified chronology\n+     * and zone to extract the fields.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param chronology  the chronology, null means ISOChronology in the default zone\n+     */\n+    public YearMonthDay(Chronology chronology) {\n+        super(chronology);\n+    }\n+\n+    /**\n+     * Constructs a YearMonthDay extracting the partial fields from the specified\n+     * milliseconds using the ISOChronology in the default zone.\n+     * <p>\n+     * The constructor uses the default time zone, resulting in the local time\n+     * being initialised. Once the constructor is complete, all further calculations\n+     * are performed without reference to a timezone (by switching to UTC).\n+     *\n+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n+     */\n+    public YearMonthDay(long instant) {\n+        super(instant);\n+    }\n+\n+    /**\n+     * Constructs a YearMonthDay extracting the partial fields from the specified\n+     * milliseconds using the chronology provided.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z\n+     * @param chronology  the chronology, null means ISOChronology in the default zone\n+     */\n+    public YearMonthDay(long instant, Chronology chronology) {\n+        super(instant, chronology);\n+    }\n+\n+    /**\n+     * Constructs a YearMonthDay from an Object that represents a time.\n+     * <p>\n+     * The recognised object types are defined in\n+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n+     * include ReadableInstant, String, Calendar and Date.\n+     *\n+     * @param instant  the datetime object, null means now\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public YearMonthDay(Object instant) {\n+        super(instant);\n+    }\n+\n+    /**\n+     * Constructs a YearMonthDay from an Object that represents a time, using the\n+     * specified chronology.\n+     * <p>\n+     * The recognised object types are defined in\n+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n+     * include ReadableInstant, String, Calendar and Date.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param instant  the datetime object, null means now\n+     * @param chronology  the chronology, null means ISOChronology\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public YearMonthDay(Object instant, Chronology chronology) {\n+        super(instant, chronology);\n+    }\n+\n+    /**\n+     * Constructs a YearMonthDay with specified time field values\n+     * using <code>ISOChronology</code> in the default zone.\n+     * <p>\n+     * The constructor uses the no time zone initialising the fields as provided.\n+     * Once the constructor is complete, all further calculations\n+     * are performed without reference to a timezone (by switching to UTC).\n+     *\n+     * @param year  the year\n+     * @param monthOfYear  the month of the year\n+     * @param dayOfMonth  the day of the month\n+     */\n+    public YearMonthDay(int year, int monthOfYear, int dayOfMonth) {\n+        this(year, monthOfYear, dayOfMonth, null);\n+    }\n+\n+    /**\n+     * Constructs a YearMonthDay with specified time field values.\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param year  the year\n+     * @param monthOfYear  the month of the year\n+     * @param dayOfMonth  the day of the month\n+     * @param chronology  the chronology, null means ISOChronology in the default zone\n+     */\n+    public YearMonthDay(int year, int monthOfYear, int dayOfMonth, Chronology chronology) {\n+        super(new int[] {year, monthOfYear, dayOfMonth}, chronology);\n+    }\n+\n+    /**\n+     * Constructs a YearMonthDay with specified fields, values and chronology.\n+     *\n+     * @param partial  the partial to base this new instance on\n+     * @param values  the new set of values\n+     */\n+    YearMonthDay(YearMonthDay partial, int[] values) {\n+        super();\n+        iChronology = partial.iChronology;\n+        iValues = values;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Initialize the array of fields.\n+     * \n+     * @param chrono  the chronology to use\n+     */\n+    protected DateTimeField[] initFields(Chronology chrono) {\n+        return new DateTimeField[] {\n+            chrono.year(),\n+            chrono.monthOfYear(),\n+            chrono.dayOfMonth(),\n+        };\n+    }\n+\n+    /**\n+     * Initialize the array of values.\n+     * \n+     * @param instant  the instant to use\n+     * @param chrono  the chronology to use\n+     */\n+    protected int[] initValues(long instant, Chronology chrono) {\n+        return new int[] {\n+            chrono.year().get(instant),\n+            chrono.monthOfYear().get(instant),\n+            chrono.dayOfMonth().get(instant),\n+        };\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get the year field value.\n+     *\n+     * @return the year\n+     */\n+    public int getYear() {\n+        return getValue(YEAR);\n+    }\n+\n+    /**\n+     * Get the month of year field value.\n+     *\n+     * @return the month of year\n+     */\n+    public int getMonthOfYear() {\n+        return getValue(MONTH_OF_YEAR);\n+    }\n+\n+    /**\n+     * Get the day of month field value.\n+     *\n+     * @return the day of month\n+     */\n+    public int getDayOfMonth() {\n+        return getValue(DAY_OF_MONTH);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get the year field property\n+     * \n+     * @return the year property\n+     */\n+    public Property year() {\n+        return new Property(this, YEAR);\n+    }\n+\n+    /**\n+     * Get the month of year field property\n+     * \n+     * @return the month of year property\n+     */\n+    public Property monthOfYear() {\n+        return new Property(this, MONTH_OF_YEAR);\n+    }\n+\n+    /**\n+     * Get the day of month field property\n+     * \n+     * @return the day of month property\n+     */\n+    public Property dayOfMonth() {\n+        return new Property(this, DAY_OF_MONTH);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * The property class for YearMonthDay.\n+     */\n+    public static class Property extends AbstractPartialFieldProperty {\n+\n+        /** The instant */\n+        private final YearMonthDay iInstant;\n+        /** The field index */\n+        private final int iFieldIndex;\n+\n+        /**\n+         * Constructs a property.\n+         * \n+         * @param instant  the partial instant\n+         * @param field  the field\n+         * @param fieldIndex  the index in the instant\n+         */\n+        Property(YearMonthDay instant, int fieldIndex) {\n+            super();\n+            iInstant = instant;\n+            iFieldIndex = fieldIndex;\n+        }\n+\n+        /**\n+         * Gets the field that this property uses.\n+         * \n+         * @return the field\n+         */\n+        public DateTimeField getField() {\n+            return iInstant.getField(iFieldIndex);\n+        }\n+\n+        /**\n+         * Gets the instant that this property belongs to.\n+         * \n+         * @return the partial instant\n+         */\n+        public PartialInstant getPartialInstant() {\n+            return iInstant;\n+        }\n+\n+        /**\n+         * Gets the instant that this property belongs to.\n+         * \n+         * @return the partial instant\n+         */\n+        public YearMonthDay getYearMonthDay() {\n+            return iInstant;\n+        }\n+\n+        /**\n+         * Gets the value of the field that the partial instant is set to.\n+         * \n+         * @return the field value\n+         */\n+        public int get() {\n+            return iInstant.getValue(iFieldIndex);\n+        }\n+\n+        //-----------------------------------------------------------------------\n+        /**\n+         * Adds to the value of this field in a copy of this YearMonthDay.\n+         * <p>\n+         * The value will be added to this field. If the value is too large to be\n+         * added solely to this field then it will affect larger fields.\n+         * Smaller fields are unaffected.\n+         * <p>\n+         * If the result would be too large, beyond the maximum year, then an\n+         * IllegalArgumentException is thrown.\n+         * <p>\n+         * The YearMonthDay attached to this property is unchanged by this call.\n+         * Instead, a new instance is returned.\n+         * \n+         * @param valueToAdd  the value to add to the field in the copy\n+         * @return a copy of the YearMonthDay with the field value changed\n+         * @throws IllegalArgumentException if the value isn't valid\n+         */\n+        public YearMonthDay addCopy(int valueToAdd) {\n+            int[] newValues = iInstant.getValues();\n+            getField().add(iInstant, iFieldIndex, newValues, valueToAdd);\n+            return new YearMonthDay(iInstant, newValues);\n+        }\n+\n+        /**\n+         * Adds to the value of this field in a copy of this YearMonthDay wrapping\n+         * within this field if the maximum value is reached.\n+         * <p>\n+         * The value will be added to this field. If the value is too large to be\n+         * added solely to this field then it wraps within this field.\n+         * Other fields are unaffected.\n+         * <p>\n+         * For example,\n+         * <code>2004-12-20</code> addInField one month returns <code>2004-01-20</code>.\n+         * <p>\n+         * The YearMonthDay attached to this property is unchanged by this call.\n+         * Instead, a new instance is returned.\n+         * \n+         * @param valueToAdd  the value to add to the field in the copy\n+         * @return a copy of the YearMonthDay with the field value changed\n+         * @throws IllegalArgumentException if the value isn't valid\n+         */\n+        public YearMonthDay addInFieldCopy(int valueToAdd) {\n+            int[] newValues = iInstant.getValues();\n+            getField().addInField(iInstant, iFieldIndex, newValues, valueToAdd);\n+            return new YearMonthDay(iInstant, newValues);\n+        }\n+\n+        //-----------------------------------------------------------------------\n+        /**\n+         * Sets this field in a copy of the YearMonthDay.\n+         * <p>\n+         * The YearMonthDay attached to this property is unchanged by this call.\n+         * Instead, a new instance is returned.\n+         * \n+         * @param value  the value to set the field in the copy to\n+         * @return a copy of the YearMonthDay with the field value changed\n+         * @throws IllegalArgumentException if the value isn't valid\n+         */\n+        public YearMonthDay setCopy(int value) {\n+            int[] newValues = iInstant.getValues();\n+            getField().set(iInstant, iFieldIndex, newValues, value);\n+            return new YearMonthDay(iInstant, newValues);\n+        }\n+\n+        /**\n+         * Sets this field in a copy of the YearMonthDay to a parsed text value.\n+         * <p>\n+         * The YearMonthDay attached to this property is unchanged by this call.\n+         * Instead, a new instance is returned.\n+         * \n+         * @param text  the text value to set\n+         * @param locale  optional locale to use for selecting a text symbol\n+         * @return a copy of the YearMonthDay with the field value changed\n+         * @throws IllegalArgumentException if the text value isn't valid\n+         */\n+        public YearMonthDay setCopy(String text, Locale locale) {\n+            int[] newValues = iInstant.getValues();\n+            getField().set(iInstant, iFieldIndex, newValues, text, locale);\n+            return new YearMonthDay(iInstant, newValues);\n+        }\n+\n+        /**\n+         * Sets this field in a copy of the YearMonthDay to a parsed text value.\n+         * <p>\n+         * The YearMonthDay attached to this property is unchanged by this call.\n+         * Instead, a new instance is returned.\n+         * \n+         * @param text  the text value to set\n+         * @return a copy of the YearMonthDay with the field value changed\n+         * @throws IllegalArgumentException if the text value isn't valid\n+         */\n+        public YearMonthDay setCopy(String text) {\n+            return setCopy(text, null);\n+        }\n+    }\n+\n+}\n--- a/JodaTime/src/test/org/joda/time/partial/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/partial/TestAll.java\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         suite.addTest(TestTimeOfDay.suite());\n+        suite.addTest(TestYearMonthDay.suite());\n         return suite;\n     }\n \n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.partial;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MutableDateTime;\n+import org.joda.time.ReadableInstant;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.MockZeroNullIntegerConverter;\n+\n+/**\n+ * This class is a Junit unit test for YearMonthDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestYearMonthDay extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    \n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestYearMonthDay.class);\n+    }\n+\n+    public TestYearMonthDay(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstructor() throws Throwable {\n+        YearMonthDay test = new YearMonthDay();\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology)\n+     */\n+    public void testConstructor_Chronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology=null)\n+     */\n+    public void testConstructor_nullChronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay((Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long1() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(TEST_TIME1);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long2() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(TEST_TIME2);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(TEST_TIME1, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(TEST_TIME2, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology=null)\n+     */\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(TEST_TIME1, null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        YearMonthDay test = new YearMonthDay(date);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_nullObject() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_badconverterObject() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            YearMonthDay test = new YearMonthDay(new Integer(0));\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(1970, test.getYear());\n+            assertEquals(1, test.getMonthOfYear());\n+            assertEquals(1, test.getDayOfMonth());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        YearMonthDay test = new YearMonthDay(date, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology)\n+     */\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay((Object) null, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology=null)\n+     */\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        YearMonthDay test = new YearMonthDay(date, null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology=null)\n+     */\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay((Object) null, null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_badconverterObject_Chronology() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            YearMonthDay test = new YearMonthDay(new Integer(0), GregorianChronology.getInstance());\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(1970, test.getYear());\n+            assertEquals(1, test.getMonthOfYear());\n+            assertEquals(1, test.getDayOfMonth());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (int, int, int)\n+     */\n+    public void testConstructor_int_int_int() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(1970, 6, 9);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        try {\n+            new YearMonthDay(Integer.MIN_VALUE, 6, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(Integer.MAX_VALUE, 6, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 0, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 13, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 6, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 6, 31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new YearMonthDay(1970, 7, 31);\n+        try {\n+            new YearMonthDay(1970, 7, 32);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_int_Chronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(1970, 6, 9, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        try {\n+            new YearMonthDay(Integer.MIN_VALUE, 6, 9, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(Integer.MAX_VALUE, 6, 9, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 0, 9, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 13, 9, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 6, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new YearMonthDay(1970, 6, 31, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new YearMonthDay(1970, 7, 31, GregorianChronology.getInstance());\n+        try {\n+            new YearMonthDay(1970, 7, 32, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_int_nullChronology() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(1970, 6, 9, null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet() {\n+        YearMonthDay test = new YearMonthDay();\n+        assertEquals(1970, test.get(ISOChronology.getInstance().year()));\n+        assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));\n+        assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));\n+        try {\n+            test.get(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.get(ISOChronology.getInstance().hourOfDay());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.get(ISOChronology.getInstance(PARIS).year());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        // TODO: Should this fail or suceed - by succeeding it exposes out implementation\n+//        try {\n+//            test.get(GregorianChronology.getInstance().year());\n+//            fail();\n+//        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetFieldSize() {\n+        YearMonthDay test = new YearMonthDay();\n+        assertEquals(3, test.getFieldSize());\n+    }\n+\n+    public void testGetField() {\n+        YearMonthDay test = new YearMonthDay();\n+        assertSame(ISOChronology.getInstance().year(), test.getField(0));\n+        assertSame(ISOChronology.getInstance().monthOfYear(), test.getField(1));\n+        assertSame(ISOChronology.getInstance().dayOfMonth(), test.getField(2));\n+        try {\n+            test.getField(-1);\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.getField(3);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetFields() {\n+        YearMonthDay test = new YearMonthDay();\n+        DateTimeField[] fields = test.getFields();\n+        assertSame(ISOChronology.getInstance().year(), fields[0]);\n+        assertSame(ISOChronology.getInstance().monthOfYear(), fields[1]);\n+        assertSame(ISOChronology.getInstance().dayOfMonth(), fields[2]);\n+    }\n+\n+    public void testGetValue() {\n+        YearMonthDay test = new YearMonthDay();\n+        assertEquals(1970, test.getValue(0));\n+        assertEquals(6, test.getValue(1));\n+        assertEquals(9, test.getValue(2));\n+        try {\n+            test.getValue(-1);\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.getValue(3);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetValues() {\n+        YearMonthDay test = new YearMonthDay();\n+        int[] values = test.getValues();\n+        assertEquals(1970, values[0]);\n+        assertEquals(6, values[1]);\n+        assertEquals(9, values[2]);\n+    }\n+\n+    public void testIsSupported() {\n+        YearMonthDay test = new YearMonthDay();\n+        assertEquals(true, test.isSupported(ISOChronology.getInstance().year()));\n+        assertEquals(true, test.isSupported(ISOChronology.getInstance().monthOfYear()));\n+        assertEquals(true, test.isSupported(ISOChronology.getInstance().dayOfMonth()));\n+        assertEquals(false, test.isSupported(ISOChronology.getInstance().hourOfDay()));\n+        assertEquals(false, test.isSupported(ISOChronology.getInstance(PARIS).year()));\n+    }\n+\n+    public void testEqualsHashCode() {\n+        YearMonthDay test1 = new YearMonthDay(1970, 6, 9);\n+        YearMonthDay test2 = new YearMonthDay(1970, 6, 9);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        YearMonthDay test3 = new YearMonthDay(1971, 6, 9);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInstant()));\n+        assertEquals(false, test1.equals(MockPartialInstant.EMPTY_INSTANCE));\n+    }\n+    \n+    class MockInstant extends MockPartialInstant {\n+        public DateTimeField[] getFields() {\n+            return new DateTimeField[] {\n+                ISOChronology.getInstance().year(),\n+                ISOChronology.getInstance().monthOfYear(),\n+                ISOChronology.getInstance().dayOfMonth(),\n+            };\n+        }\n+        public int[] getValues() {\n+            return new int[] {1970, 6, 9};\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testResolve_long() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        DateTime dt = new DateTime(TEST_TIME1);\n+        assertEquals(\"1970-04-06T12:24:00.000Z\", dt.toString());\n+        \n+        DateTime result = new DateTime(test.resolve(dt.getMillis(), DateTimeZone.UTC));\n+        check(test, 1972, 6, 9);\n+        assertEquals(\"1970-04-06T12:24:00.000Z\", dt.toString());\n+        assertEquals(\"1972-06-09T12:24:00.000Z\", result.toString());\n+    }\n+\n+    public void testResolveDateTime_RI() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        DateTime dt = new DateTime(TEST_TIME1);\n+        assertEquals(\"1970-04-06T12:24:00.000Z\", dt.toString());\n+        \n+        DateTime result = test.resolveDateTime(dt);\n+        check(test, 1972, 6, 9);\n+        assertEquals(\"1970-04-06T12:24:00.000Z\", dt.toString());\n+        assertEquals(\"1972-06-09T12:24:00.000Z\", result.toString());\n+    }\n+\n+    public void testResolveDateTime_nullRI() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);\n+        \n+        DateTime result = test.resolveDateTime(null);\n+        check(test, 1972, 6, 9);\n+        assertEquals(\"1972-06-09T12:24:00.000Z\", result.toString());\n+    }\n+\n+    public void testResolveInto_RWI() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        MutableDateTime mdt = new MutableDateTime(TEST_TIME1);\n+        assertEquals(\"1970-04-06T12:24:00.000Z\", mdt.toString());\n+        \n+        test.resolveInto(mdt);\n+        check(test, 1972, 6, 9);\n+        assertEquals(\"1972-06-09T12:24:00.000Z\", mdt.toString());\n+    }\n+\n+    public void testResolveInto_nullRWI() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        \n+        try {\n+            test.resolveInto(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        YearMonthDay result = (YearMonthDay) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n+        assertEquals(test.getChronology(), result.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        // TODO\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYear() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        assertSame(test.getChronology().year(), test.year().getField());\n+        assertEquals(\"year\", test.year().getName());\n+        assertEquals(\"Property[year]\", test.year().toString());\n+        assertSame(test, test.year().getPartialInstant());\n+        assertSame(test, test.year().getYearMonthDay());\n+        assertEquals(1972, test.year().get());\n+        assertEquals(\"1972\", test.year().getAsText());\n+        assertEquals(\"1972\", test.year().getAsText(Locale.FRENCH));\n+        assertEquals(\"1972\", test.year().getAsShortText());\n+        assertEquals(\"1972\", test.year().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.year().getDurationField());\n+        assertEquals(null, test.year().getRangeDurationField());\n+        assertEquals(9, test.year().getMaximumTextLength(null));\n+        assertEquals(9, test.year().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesYear() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        assertEquals(-292275054, test.year().getMinimumValue());\n+        assertEquals(-292275054, test.year().getMinimumValueOverall());\n+        assertEquals(292277023, test.year().getMaximumValue());\n+        assertEquals(292277023, test.year().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddYear() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.year().addCopy(9);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1981, 6, 9);\n+        \n+        copy = test.year().addCopy(0);\n+        check(copy, 1972, 6, 9);\n+        \n+        copy = test.year().addCopy(292277023 - 1972);\n+        check(copy, 292277023, 6, 9);\n+        \n+        try {\n+            test.year().addCopy(292277023 - 1972 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9);\n+        \n+        copy = test.year().addCopy(-1972);\n+        check(copy, 0, 6, 9);\n+        \n+        copy = test.year().addCopy(-1973);\n+        check(copy, -1, 6, 9);\n+        \n+        try {\n+            test.year().addCopy(-292275054 - 1972 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9);\n+    }\n+\n+    public void testPropertyAddInFieldYear() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.year().addInFieldCopy(9);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1981, 6, 9);\n+        \n+        copy = test.year().addInFieldCopy(0);\n+        check(copy, 1972, 6, 9);\n+        \n+        copy = test.year().addInFieldCopy(292277023 - 1972 + 1);\n+        check(copy, -292275054, 6, 9);\n+        \n+        copy = test.year().addInFieldCopy(-292275054 - 1972 - 1);\n+        check(copy, 292277023, 6, 9);\n+    }\n+\n+    public void testPropertySetYear() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.year().setCopy(12);\n+        check(test, 1972, 6, 9);\n+        check(copy, 12, 6, 9);\n+    }\n+\n+    public void testPropertySetTextYear() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.year().setCopy(\"12\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 12, 6, 9);\n+    }\n+\n+    public void testPropertyCompareToYear() {\n+        YearMonthDay test1 = new YearMonthDay(TEST_TIME1);\n+        YearMonthDay test2 = new YearMonthDay(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(test2) < 0);\n+        assertEquals(true, test2.year().compareTo(test1) > 0);\n+        assertEquals(true, test1.year().compareTo(test1) == 0);\n+        try {\n+            test1.year().compareTo((PartialInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.year().compareTo(dt2) < 0);\n+        assertEquals(true, test2.year().compareTo(dt1) > 0);\n+        assertEquals(true, test1.year().compareTo(dt1) == 0);\n+        try {\n+            test1.year().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n+        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n+        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n+        assertSame(test, test.monthOfYear().getPartialInstant());\n+        assertSame(test, test.monthOfYear().getYearMonthDay());\n+        assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"June\", test.monthOfYear().getAsText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n+        test = new YearMonthDay(1972, 7, 9);\n+        assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.monthOfYear().addCopy(6);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        copy = test.monthOfYear().addCopy(7);\n+        check(copy, 1973, 1, 9);\n+        \n+        copy = test.monthOfYear().addCopy(-5);\n+        check(copy, 1972, 1, 9);\n+        \n+        copy = test.monthOfYear().addCopy(-6);\n+        check(copy, 1971, 12, 9);\n+        \n+        test = new YearMonthDay(1972, 1, 31);\n+        copy = test.monthOfYear().addCopy(1);\n+        check(copy, 1972, 2, 29);\n+        \n+        copy = test.monthOfYear().addCopy(2);\n+        check(copy, 1972, 3, 31);\n+        \n+        copy = test.monthOfYear().addCopy(3);\n+        check(copy, 1972, 4, 30);\n+        \n+        test = new YearMonthDay(1971, 1, 31);\n+        copy = test.monthOfYear().addCopy(1);\n+        check(copy, 1971, 2, 28);\n+    }\n+\n+    public void testPropertyAddInFieldMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.monthOfYear().addInFieldCopy(4);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 10, 9);\n+        \n+        copy = test.monthOfYear().addInFieldCopy(8);\n+        check(copy, 1972, 2, 9);\n+        \n+        copy = test.monthOfYear().addInFieldCopy(-8);\n+        check(copy, 1972, 10, 9);\n+        \n+        test = new YearMonthDay(1972, 1, 31);\n+        copy = test.monthOfYear().addInFieldCopy(1);\n+        check(copy, 1972, 2, 29);\n+        \n+        copy = test.monthOfYear().addInFieldCopy(2);\n+        check(copy, 1972, 3, 31);\n+        \n+        copy = test.monthOfYear().addInFieldCopy(3);\n+        check(copy, 1972, 4, 30);\n+        \n+        test = new YearMonthDay(1971, 1, 31);\n+        copy = test.monthOfYear().addInFieldCopy(1);\n+        check(copy, 1971, 2, 28);\n+    }\n+\n+    public void testPropertySetMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.monthOfYear().setCopy(12);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        test = new YearMonthDay(1972, 1, 31);\n+        copy = test.monthOfYear().setCopy(2);\n+        check(copy, 1972, 2, 29);\n+        \n+        try {\n+            test.monthOfYear().setCopy(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.monthOfYear().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.monthOfYear().setCopy(\"12\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        copy = test.monthOfYear().setCopy(\"December\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+        \n+        copy = test.monthOfYear().setCopy(\"Dec\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 12, 9);\n+    }\n+\n+    public void testPropertyCompareToMonth() {\n+        YearMonthDay test1 = new YearMonthDay(TEST_TIME1);\n+        YearMonthDay test2 = new YearMonthDay(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(test1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(test1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((PartialInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.monthOfYear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.monthOfYear().compareTo(dt1) == 0);\n+        try {\n+            test1.monthOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDay() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n+        assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n+        assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n+        assertSame(test, test.dayOfMonth().getPartialInstant());\n+        assertSame(test, test.dayOfMonth().getYearMonthDay());\n+        assertEquals(9, test.dayOfMonth().get());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());\n+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());\n+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));\n+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesDay() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+        test = new YearMonthDay(1972, 7, 9);\n+        assertEquals(31, test.dayOfMonth().getMaximumValue());\n+        test = new YearMonthDay(1972, 2, 9);\n+        assertEquals(29, test.dayOfMonth().getMaximumValue());\n+        test = new YearMonthDay(1971, 2, 9);\n+        assertEquals(28, test.dayOfMonth().getMaximumValue());\n+    }\n+\n+    public void testPropertyAddDay() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.dayOfMonth().addCopy(9);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 18);\n+        \n+        copy = test.dayOfMonth().addCopy(21);\n+        check(copy, 1972, 6, 30);\n+        \n+        copy = test.dayOfMonth().addCopy(22);\n+        check(copy, 1972, 7, 1);\n+        \n+        copy = test.dayOfMonth().addCopy(22 + 30);\n+        check(copy, 1972, 7, 31);\n+        \n+        copy = test.dayOfMonth().addCopy(22 + 31);\n+        check(copy, 1972, 8, 1);\n+\n+        copy = test.dayOfMonth().addCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        check(copy, 1972, 12, 31);\n+        \n+        copy = test.dayOfMonth().addCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        check(copy, 1973, 1, 1);\n+        \n+        copy = test.dayOfMonth().addCopy(-8);\n+        check(copy, 1972, 6, 1);\n+        \n+        copy = test.dayOfMonth().addCopy(-9);\n+        check(copy, 1972, 5, 31);\n+        \n+        copy = test.dayOfMonth().addCopy(-8 - 31 - 30 - 31 - 29 - 31);\n+        check(copy, 1972, 1, 1);\n+        \n+        copy = test.dayOfMonth().addCopy(-9 - 31 - 30 - 31 - 29 - 31);\n+        check(copy, 1971, 12, 31);\n+    }\n+\n+    public void testPropertyAddInFieldDay() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.dayOfMonth().addInFieldCopy(21);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 30);\n+        \n+        copy = test.dayOfMonth().addInFieldCopy(22);\n+        check(copy, 1972, 6, 1);\n+        \n+        copy = test.dayOfMonth().addInFieldCopy(-12);\n+        check(copy, 1972, 6, 27);\n+        \n+        test = new YearMonthDay(1972, 7, 9);\n+        copy = test.dayOfMonth().addInFieldCopy(21);\n+        check(copy, 1972, 7, 30);\n+    \n+        copy = test.dayOfMonth().addInFieldCopy(22);\n+        check(copy, 1972, 7, 31);\n+    \n+        copy = test.dayOfMonth().addInFieldCopy(23);\n+        check(copy, 1972, 7, 1);\n+    \n+        copy = test.dayOfMonth().addInFieldCopy(-12);\n+        check(copy, 1972, 7, 28);\n+    }\n+\n+    public void testPropertySetDay() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.dayOfMonth().setCopy(12);\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 12);\n+        \n+        try {\n+            test.dayOfMonth().setCopy(31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfMonth().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextDay() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.dayOfMonth().setCopy(\"12\");\n+        check(test, 1972, 6, 9);\n+        check(copy, 1972, 6, 12);\n+    }\n+\n+    public void testPropertyCompareToDay() {\n+        YearMonthDay test1 = new YearMonthDay(TEST_TIME1);\n+        YearMonthDay test2 = new YearMonthDay(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(test1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(test1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((PartialInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt2) < 0);\n+        assertEquals(true, test2.dayOfMonth().compareTo(dt1) > 0);\n+        assertEquals(true, test1.dayOfMonth().compareTo(dt1) == 0);\n+        try {\n+            test1.dayOfMonth().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(YearMonthDay test, int hour, int min, int sec) {\n+        assertEquals(hour, test.getYear());\n+        assertEquals(min, test.getMonthOfYear());\n+        assertEquals(sec, test.getDayOfMonth());\n+    }\n+}", "timestamp": 1088292683, "metainfo": ""}