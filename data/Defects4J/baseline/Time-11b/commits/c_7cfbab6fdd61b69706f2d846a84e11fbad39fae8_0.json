{"sha": "7cfbab6fdd61b69706f2d846a84e11fbad39fae8", "log": "Clarify Javadoc [2862109] reported by hpwerner  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDate.java\n     //-----------------------------------------------------------------------\n     /**\n      * Constructs a LocalDate from a <code>java.util.Calendar</code>\n-     * using exactly the same field values avoiding any time zone effects.\n+     * using exactly the same field values.\n      * <p>\n      * Each field is queried from the Calendar and assigned to the LocalDate.\n      * This is useful if you have been using the Calendar as a local date,\n-     * ignoing the zone.\n+     * ignoring the zone.\n+     * <p>\n+     * One advantage of this method is that this method is unaffected if the\n+     * version of the time zone data differs between the JDK and Joda-Time.\n+     * That is because the local field values are transferred, calculated using\n+     * the JDK time zone data and without using the Joda-Time time zone data.\n      * <p>\n      * This factory method ignores the type of the calendar and always\n      * creates a LocalDate with ISO chronology. It is expected that you\n \n     /**\n      * Constructs a LocalDate from a <code>java.util.Date</code>\n-     * using exactly the same field values avoiding any time zone effects.\n+     * using exactly the same field values.\n      * <p>\n      * Each field is queried from the Date and assigned to the LocalDate.\n      * This is useful if you have been using the Date as a local date,\n-     * ignoing the zone.\n+     * ignoring the zone.\n+     * <p>\n+     * One advantage of this method is that this method is unaffected if the\n+     * version of the time zone data differs between the JDK and Joda-Time.\n+     * That is because the local field values are transferred, calculated using\n+     * the JDK time zone data and without using the Joda-Time time zone data.\n      * <p>\n      * This factory method always creates a LocalDate with ISO chronology.\n      *\n--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java\n     //-----------------------------------------------------------------------\n     /**\n      * Constructs a LocalDateTime from a <code>java.util.Calendar</code>\n-     * using exactly the same field values avoiding any time zone effects.\n+     * using exactly the same field values.\n      * <p>\n      * Each field is queried from the Calendar and assigned to the LocalDateTime.\n      * This is useful if you have been using the Calendar as a local date,\n-     * ignoing the zone.\n+     * ignoring the zone.\n+     * <p>\n+     * One advantage of this method is that this method is unaffected if the\n+     * version of the time zone data differs between the JDK and Joda-Time.\n+     * That is because the local field values are transferred, calculated using\n+     * the JDK time zone data and without using the Joda-Time time zone data.\n      * <p>\n      * This factory method ignores the type of the calendar and always\n      * creates a LocalDateTime with ISO chronology. It is expected that you\n \n     /**\n      * Constructs a LocalDateTime from a <code>java.util.Date</code>\n-     * using exactly the same field values avoiding any time zone effects.\n+     * using exactly the same field values.\n      * <p>\n      * Each field is queried from the Date and assigned to the LocalDateTime.\n      * This is useful if you have been using the Date as a local date,\n-     * ignoing the zone.\n+     * ignoring the zone.\n+     * <p>\n+     * One advantage of this method is that this method is unaffected if the\n+     * version of the time zone data differs between the JDK and Joda-Time.\n+     * That is because the local field values are transferred, calculated using\n+     * the JDK time zone data and without using the Joda-Time time zone data.\n      * <p>\n      * This factory method always creates a LocalDateTime with ISO chronology.\n      *\n--- a/JodaTime/src/java/org/joda/time/LocalTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalTime.java\n     //-----------------------------------------------------------------------\n     /**\n      * Constructs a LocalTime from a <code>java.util.Calendar</code>\n-     * using exactly the same field values avoiding any time zone effects.\n+     * using exactly the same field values.\n      * <p>\n      * Each field is queried from the Calendar and assigned to the LocalTime.\n      * This is useful if you have been using the Calendar as a local time,\n-     * ignoing the zone.\n+     * ignoring the zone.\n+     * <p>\n+     * One advantage of this method is that this method is unaffected if the\n+     * version of the time zone data differs between the JDK and Joda-Time.\n+     * That is because the local field values are transferred, calculated using\n+     * the JDK time zone data and without using the Joda-Time time zone data.\n      * <p>\n      * This factory method ignores the type of the calendar and always\n      * creates a LocalTime with ISO chronology. It is expected that you\n \n     /**\n      * Constructs a LocalTime from a <code>java.util.Date</code>\n-     * using exactly the same field values avoiding any time zone effects.\n+     * using exactly the same field values.\n      * <p>\n      * Each field is queried from the Date and assigned to the LocalTime.\n      * This is useful if you have been using the Date as a local time,\n-     * ignoing the zone.\n+     * ignoring the zone.\n+     * <p>\n+     * One advantage of this method is that this method is unaffected if the\n+     * version of the time zone data differs between the JDK and Joda-Time.\n+     * That is because the local field values are transferred, calculated using\n+     * the JDK time zone data and without using the Joda-Time time zone data.\n      * <p>\n      * This factory method always creates a LocalTime with ISO chronology.\n      *", "timestamp": 1253753007, "metainfo": ""}