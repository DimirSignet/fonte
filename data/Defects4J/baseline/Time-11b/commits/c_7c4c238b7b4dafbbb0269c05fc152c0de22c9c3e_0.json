{"sha": "7c4c238b7b4dafbbb0269c05fc152c0de22c9c3e", "log": "Add Period.toStandard*() methods - use UnsupportedOperationException  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n      * If the period contains years or months, an exception will be thrown.\n      * \n      * @return a period representing the number of standard weeks in this period\n-     * @throws IllegalStateException if the period contains years or months\n+     * @throws UnsupportedOperationException if the period contains years or months\n      * @throws ArithmeticException if the number of weeks is too large to be represented\n      * @since 1.5\n      */\n      * If the period contains years or months, an exception will be thrown.\n      * \n      * @return a period representing the number of standard days in this period\n-     * @throws IllegalStateException if the period contains years or months\n+     * @throws UnsupportedOperationException if the period contains years or months\n      * @throws ArithmeticException if the number of days is too large to be represented\n      * @since 1.5\n      */\n      * If the period contains years or months, an exception will be thrown.\n      * \n      * @return a period representing the number of standard hours in this period\n-     * @throws IllegalStateException if the period contains years or months\n+     * @throws UnsupportedOperationException if the period contains years or months\n      * @throws ArithmeticException if the number of hours is too large to be represented\n      * @since 1.5\n      */\n      * If the period contains years or months, an exception will be thrown.\n      * \n      * @return a period representing the number of standard minutes in this period\n-     * @throws IllegalStateException if the period contains years or months\n+     * @throws UnsupportedOperationException if the period contains years or months\n      * @throws ArithmeticException if the number of minutes is too large to be represented\n      * @since 1.5\n      */\n      * If the period contains years or months, an exception will be thrown.\n      * \n      * @return a period representing the number of standard seconds in this period\n-     * @throws IllegalStateException if the period contains years or months\n+     * @throws UnsupportedOperationException if the period contains years or months\n      * @throws ArithmeticException if the number of seconds is too large to be represented\n      * @since 1.5\n      */\n      * If the period contains years or months, an exception will be thrown.\n      * \n      * @return a duration equivalent to this period\n-     * @throws IllegalStateException if the period contains years or months\n+     * @throws UnsupportedOperationException if the period contains years or months\n      * @since 1.5\n      */\n     public Duration toStandardDuration() {\n      * Check that there are no years or months in the period.\n      * \n      * @param destintionType  the destination type, not null\n+     * @throws UnsupportedOperationException if the period contains years or months\n      */\n     private void checkYearsAndMonths(String destintionType) {\n         if (getMonths() != 0) {\n-            throw new IllegalStateException(\"Cannot convert to \" + destintionType + \" as this period contains months and months vary in length\");\n+            throw new UnsupportedOperationException(\"Cannot convert to \" + destintionType + \" as this period contains months and months vary in length\");\n         }\n         if (getYears() != 0) {\n-            throw new IllegalStateException(\"Cannot convert to \" + destintionType + \" as this period contains years and years vary in length\");\n+            throw new UnsupportedOperationException(\"Cannot convert to \" + destintionType + \" as this period contains years and years vary in length\");\n         }\n     }\n ", "timestamp": 1187952114, "metainfo": ""}