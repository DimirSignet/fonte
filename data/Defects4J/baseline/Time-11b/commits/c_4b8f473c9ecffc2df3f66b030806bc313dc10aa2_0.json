{"sha": "4b8f473c9ecffc2df3f66b030806bc313dc10aa2", "log": "Add DateTimeFormatter.withZoneUTC()  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Returns a new formatter that will use the UTC zone in preference\n+     * to the zone of the printed object, or default zone on a parse.\n+     * <p>\n+     * When printing, UTC will be used in preference to the zone\n+     * from the datetime that would otherwise be used.\n+     * <p>\n+     * When parsing, UTC will be set on the parsed datetime.\n+     * <p>\n+     * If both an override chronology and an override zone are set, the\n+     * override zone will take precedence over the zone in the chronology.\n+     * \n+     * @return the new formatter, never null\n+     * @since 2.0\n+     */\n+    public DateTimeFormatter withZoneUTC() {\n+        return withZone(DateTimeZone.UTC);\n+    }\n+\n+    /**\n      * Returns a new formatter that will use the specified zone in preference\n      * to the zone of the printed object, or default zone on a parse.\n      * <p>\n--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n import java.util.Set;\n \n import org.joda.time.DateTimeFieldType;\n-import org.joda.time.DateTimeZone;\n \n /**\n  * Factory that creates instances of DateTimeFormatter for the ISO8601 standard.\n      */\n     public static DateTimeFormatter localDateParser() {\n         if (ldp == null) {\n-            ldp = dateElementParser().withZone(DateTimeZone.UTC);\n+            ldp = dateElementParser().withZoneUTC();\n         }\n         return ldp;\n     }\n             ltp = new DateTimeFormatterBuilder()\n                 .appendOptional(literalTElement().getParser())\n                 .append(timeElementParser())\n-                .toFormatter().withZone(DateTimeZone.UTC);\n+                .toFormatter().withZoneUTC();\n         }\n         return ltp;\n     }\n             ldotp = new DateTimeFormatterBuilder()\n                 .append(dateElementParser())\n                 .appendOptional(time)\n-                .toFormatter().withZone(DateTimeZone.UTC);\n+                .toFormatter().withZoneUTC();\n         }\n         return ldotp;\n     }\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormat.java\n         assertEquals(dt.toString(), \"23\", f.print(dt));\n         \n         // current time set to 2002-06-09\n-        f = f.withZone(UTC);\n+        f = f.withZoneUTC();\n         DateTime expect = null;\n         expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC);\n         assertEquals(expect, f.parseDateTime(\"04\"));\n \n         // Added tests to ensure two digit parsing is lenient for DateTimeFormat\n         f = DateTimeFormat.forPattern(\"YY\").withLocale(Locale.UK);\n-        f = f.withZone(UTC);\n+        f = f.withZoneUTC();\n         f.parseDateTime(\"5\");\n         f.parseDateTime(\"005\");\n         f.parseDateTime(\"+50\");\n         assertEquals(dt.toString(), \"23\", f.print(dt));\n         \n         // current time set to 2002-06-09\n-        f = f.withZone(UTC);\n+        f = f.withZoneUTC();\n         DateTime expect = null;\n         expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC);\n         assertEquals(expect, f.parseDateTime(\"04\"));\n         // Added tests to ensure two digit parsing is strict by default for\n         // DateTimeFormatterBuilder\n         f = new DateTimeFormatterBuilder().appendTwoDigitYear(2000).toFormatter();\n-        f = f.withZone(UTC);\n+        f = f.withZoneUTC();\n         try {\n             f.parseDateTime(\"5\");\n             fail();\n \n         // Added tests to ensure two digit parsing is lenient for DateTimeFormat\n         f = DateTimeFormat.forPattern(\"yy\").withLocale(Locale.UK);\n-        f = f.withZone(UTC);\n+        f = f.withZoneUTC();\n         f.parseDateTime(\"5\");\n         f.parseDateTime(\"005\");\n         f.parseDateTime(\"+50\");\n \n         // Added tests for lenient two digit parsing\n         f = new DateTimeFormatterBuilder().appendTwoDigitYear(2000, true).toFormatter();\n-        f = f.withZone(UTC);\n+        f = f.withZoneUTC();\n         expect = new DateTime(2004, 1, 1, 0, 0, 0, 0, UTC);\n         assertEquals(expect, f.parseDateTime(\"04\"));\n \n         assertEquals(dt.toString(), \"23\", f.print(dt));\n         \n         // current time set to 2002-06-09\n-        f = f.withZone(UTC);\n+        f = f.withZoneUTC();\n         DateTime expect = null;\n         expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC);\n         assertEquals(expect, f.parseDateTime(\"04\"));\n         // Added tests to ensure two digit parsing is strict by default for\n         // DateTimeFormatterBuilder\n         f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000).toFormatter();\n-        f = f.withZone(UTC);\n+        f = f.withZoneUTC();\n         try {\n             f.parseDateTime(\"5\");\n             fail();\n \n         // Added tests to ensure two digit parsing is lenient for DateTimeFormat\n         f = DateTimeFormat.forPattern(\"xx\").withLocale(Locale.UK);\n-        f = f.withZone(UTC);\n+        f = f.withZoneUTC();\n         f.parseDateTime(\"5\");\n         f.parseDateTime(\"005\");\n         f.parseDateTime(\"+50\");\n \n         // Added tests for lenient two digit parsing\n         f = new DateTimeFormatterBuilder().appendTwoDigitWeekyear(2000, true).toFormatter();\n-        f = f.withZone(UTC);\n+        f = f.withZoneUTC();\n         expect = new DateTime(2003, 12, 29, 0, 0, 0, 0, UTC);\n         assertEquals(expect, f.parseDateTime(\"04\"));\n \n \n     //-----------------------------------------------------------------------\n     public void testParse_pivotYear() {\n-        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd.MM.yy\").withPivotYear(2050).withZone(DateTimeZone.UTC);\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd.MM.yy\").withPivotYear(2050).withZoneUTC();\n         \n         DateTime date = dateFormatter.parseDateTime(\"25.12.15\");\n         assertEquals(date.getYear(), 2015);\n     }\n \n     public void testParse_pivotYear_ignored4DigitYear() {\n-        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd.MM.yyyy\").withPivotYear(2050).withZone(DateTimeZone.UTC);\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd.MM.yyyy\").withPivotYear(2050).withZoneUTC();\n         \n         DateTime date = dateFormatter.parseDateTime(\"25.12.15\");\n         assertEquals(date.getYear(), 15);\n     //-----------------------------------------------------------------------\n     public void testFormatParse_textMonthJanShort_UK() {\n         DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n-            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.UK).withZoneUTC();\n         \n         String str = new DateTime(2007, 1, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(str, \"23 Jan 2007\");\n \n     public void testFormatParse_textMonthJanShortLowerCase_UK() {\n         DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n-            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.UK).withZoneUTC();\n         DateTime date = dateFormatter.parseDateTime(\"23 jan 2007\");\n         check(date, 2007, 1, 23);\n     }\n \n     public void testFormatParse_textMonthJanShortUpperCase_UK() {\n         DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n-            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.UK).withZoneUTC();\n         DateTime date = dateFormatter.parseDateTime(\"23 JAN 2007\");\n         check(date, 2007, 1, 23);\n     }\n \n     public void testParse_textMonthJanLong_UK() {\n         DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n-            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.UK).withZoneUTC();\n         \n         DateTime date = dateFormatter.parseDateTime(\"23 January 2007\");\n         check(date, 2007, 1, 23);\n \n     public void testFormatParse_textMonthJanLongLowerCase_UK() {\n         DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n-            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.UK).withZoneUTC();\n         DateTime date = dateFormatter.parseDateTime(\"23 january 2007\");\n         check(date, 2007, 1, 23);\n     }\n \n     public void testFormatParse_textMonthJanLongUpperCase_UK() {\n         DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n-            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.UK).withZoneUTC();\n         DateTime date = dateFormatter.parseDateTime(\"23 JANUARY 2007\");\n         check(date, 2007, 1, 23);\n     }\n \n     public void testFormatParse_textMonthJanShort_France() {\n         DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n-            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n         \n         String str = new DateTime(2007, 1, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"23 janv. 2007\", str);\n \n     public void testFormatParse_textMonthJanLong_France() {\n         DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n-            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n         \n         DateTime date = dateFormatter.parseDateTime(\"23 janvier 2007\");\n         check(date, 2007, 1, 23);\n \n     public void testFormatParse_textMonthApr_France() {\n         DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM yyyy\")\n-            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n         \n         String str = new DateTime(2007, 2, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"23 f\\u00E9vr. 2007\", str);  // e acute\n \n     public void testFormatParse_textMonthAtEnd_France() {\n         DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"dd MMM\")\n-            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n         \n         String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"23 juin\", str);\n \n     public void testFormatParse_textMonthApr_Korean() {\n         DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"EEEE, d MMMM yyyy HH:mm\")\n-            .withLocale(Locale.KOREAN).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.KOREAN).withZoneUTC();\n         \n         String str = new DateTime(2007, 3, 8, 22, 0, 0, 0, UTC).toString(dateFormatter);\n         DateTime date = dateFormatter.parseDateTime(str);\n             .appendLiteral('-')\n             .appendYear(4, 4)\n             .toFormatter()\n-            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.UK).withZoneUTC();\n         \n         String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"$06-PM-2007\", str);\n             .appendLiteral('-')\n             .appendYear(4, 4)\n             .toFormatter()\n-            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n         \n         String str = new DateTime(2007, 6, 23, 18, 0, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"$06-PM-2007\", str);\n             .appendEraText()\n             .appendYear(4, 4)\n             .toFormatter()\n-            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.UK).withZoneUTC();\n         \n         String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"$AD2007\", str);\n             .appendEraText()\n             .appendYear(4, 4)\n             .toFormatter()\n-            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n         \n         String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"$ap. J.-C.2007\", str);\n             .appendEraText()\n             .appendYear(4, 4)\n             .toFormatter()\n-            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n         \n         String str = new DateTime(-1, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"$BC-0001\", str);\n             .appendLiteral('$')\n             .appendText(DateTimeFieldType.year())\n             .toFormatter()\n-            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.UK).withZoneUTC();\n         \n         String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"$2007\", str);\n             .appendLiteral('$')\n             .appendText(DateTimeFieldType.year())\n             .toFormatter()\n-            .withLocale(Locale.FRANCE).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.FRANCE).withZoneUTC();\n         \n         String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"$2007\", str);\n             .appendMonthOfYearShortText()\n             .appendLiteral(\"HelloWorld\")\n             .toFormatter()\n-            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.UK).withZoneUTC();\n         \n         String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"$23JunHelloWorld\", str);\n             .appendMonthOfYearShortText()\n             .appendDayOfWeekShortText()\n             .toFormatter()\n-            .withLocale(Locale.UK).withZone(DateTimeZone.UTC);\n+            .withLocale(Locale.UK).withZoneUTC();\n         \n         String str = new DateTime(2007, 6, 23, 0, 0, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"$23JunSat\", str);\n \n     //-----------------------------------------------------------------------\n     public void testFormatParse_zoneId_noColon() {\n-        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"HH:mm Z\").withZone(UTC);\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"HH:mm Z\").withZoneUTC();\n         String str = new DateTime(2007, 6, 23, 1, 2, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"01:02 +0000\", str);\n         DateTime parsed = dateFormatter.parseDateTime(str);\n     }\n \n     public void testFormatParse_zoneId_noColon_parseZ() {\n-        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"HH:mm Z\").withZone(UTC);\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"HH:mm Z\").withZoneUTC();\n         DateTime parsed = dateFormatter.parseDateTime(\"01:02 Z\");\n         assertEquals(1, parsed.getHourOfDay());\n         assertEquals(2, parsed.getMinuteOfHour());\n     }\n \n     public void testFormatParse_zoneId_colon() {\n-        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"HH:mm ZZ\").withZone(UTC);\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"HH:mm ZZ\").withZoneUTC();\n         String str = new DateTime(2007, 6, 23, 1, 2, 0, 0, UTC).toString(dateFormatter);\n         assertEquals(\"01:02 +00:00\", str);\n         DateTime parsed = dateFormatter.parseDateTime(str);\n     }\n \n     public void testFormatParse_zoneId_colon_parseZ() {\n-        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"HH:mm ZZ\").withZone(UTC);\n+        DateTimeFormatter dateFormatter = DateTimeFormat.forPattern(\"HH:mm ZZ\").withZoneUTC();\n         DateTime parsed = dateFormatter.parseDateTime(\"01:02 Z\");\n         assertEquals(1, parsed.getHourOfDay());\n         assertEquals(2, parsed.getMinuteOfHour());\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n         dt = dt.withZone(NEWYORK);\n         assertEquals(\"Wed 2004-06-09T06:20:30-04:00\", f.withZone(NEWYORK).print(dt));\n         assertEquals(\"Wed 2004-06-09T12:20:30+02:00\", f.withZone(PARIS).print(dt));\n-        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.withZone(UTC).print(dt));\n+        assertEquals(\"Wed 2004-06-09T10:20:30Z\", f.withZoneUTC().print(dt));\n         assertEquals(\"Wed 2004-06-09T06:20:30-04:00\", f.withZone(null).print(dt));\n     }\n \n     public void testParseMillis_fractionOfSecondLong() {\n         DateTimeFormatter f = new DateTimeFormatterBuilder()\n             .appendSecondOfDay(2).appendLiteral('.').appendFractionOfSecond(1, 9)\n-                .toFormatter().withZone(DateTimeZone.UTC);\n+                .toFormatter().withZoneUTC();\n         assertEquals(10512, f.parseMillis(\"10.5123456\"));\n         assertEquals(10512, f.parseMillis(\"10.512999\"));\n     }", "timestamp": 1257618288, "metainfo": ""}