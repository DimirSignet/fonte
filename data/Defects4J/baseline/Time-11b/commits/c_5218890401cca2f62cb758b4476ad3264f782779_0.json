{"sha": "5218890401cca2f62cb758b4476ad3264f782779", "log": "Skip tests so coverage tools run in sensible amount of time   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/chrono/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestAll.java\n  */\n public class TestAll extends TestCase {\n \n+    public static boolean FAST = false;\n+\n     public TestAll(String testName) {\n         super(testName);\n     }\n \n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n+        FAST = true;\n         \n         suite.addTest(TestBuddhistChronology.suite());\n         suite.addTest(TestCopticChronology.suite());\n--- a/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java\n  */\n public class TestBuddhistChronology extends TestCase {\n \n+    private static int SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n+    \n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n     private Locale originalLocale = null;\n \n     public static void main(String[] args) {\n+        SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n         junit.textui.TestRunner.run(suite());\n     }\n \n     }\n \n     public void testCalendar() {\n+        if (TestAll.FAST) {\n+            return;\n+        }\n         System.out.println(\"\\nTestBuddhistChronology.testCalendar\");\n         DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, BUDDHIST_UTC);\n-        long oneDay = DateTimeConstants.MILLIS_PER_DAY;\n         long millis = epoch.getMillis();\n         long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis();\n         DateTimeField dayOfWeek = BUDDHIST_UTC.dayOfWeek();\n             yearValue += 543;\n             assertEquals(yearValue, year.get(millis));\n             assertEquals(yearValue, yearOfEra.get(millis));\n-            millis += oneDay;\n+            millis += SKIP;\n         }\n     }\n \n--- a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n  */\n public class TestCopticChronology extends TestCase {\n \n+    private static int SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n+\n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n     }\n \n     public static TestSuite suite() {\n+        SKIP = 1 * DateTimeConstants.MILLIS_PER_DAY;\n         return new TestSuite(TestCopticChronology.class);\n     }\n \n      * Tests era, year, monthOfYear, dayOfMonth and dayOfWeek.\n      */\n     public void testCalendar() {\n+        if (TestAll.FAST) {\n+            return;\n+        }\n         System.out.println(\"\\nTestCopticChronology.testCalendar\");\n         DateTime epoch = new DateTime(1, 1, 1, 0, 0, 0, 0, COPTIC_UTC);\n-        long oneDay = DateTimeConstants.MILLIS_PER_DAY;\n         long millis = epoch.getMillis();\n         long end = new DateTime(3000, 1, 1, 0, 0, 0, 0, ISO_UTC).getMillis();\n         DateTimeField dayOfWeek = COPTIC_UTC.dayOfWeek();\n                     expectedDOY = 1;\n                 }\n             }\n-            millis += oneDay;\n+            millis += SKIP;\n         }\n     }\n ", "timestamp": 1108241000, "metainfo": ""}