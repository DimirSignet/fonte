{"sha": "86c8fac47af66ebccdcfd81c88a9ee08a635f10c", "log": "Increase test coverage   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n import java.security.Permissions;\n import java.security.Policy;\n import java.security.ProtectionDomain;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.ISOChronology;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testGetInstantMillis_RI() {\n+        Instant i = new Instant(123L);\n+        assertEquals(123L, DateTimeUtils.getInstantMillis(i));\n+        try {\n+            DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+            assertEquals(TEST_TIME_NOW, DateTimeUtils.getInstantMillis(null));\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantChronology_RI() {\n+        DateTime dt = new DateTime(123L, BuddhistChronology.getInstance());\n+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt));\n+        \n+        Instant i = new Instant(123L);\n+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(i));\n+        \n+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getInstantChronology(null));\n+    }\n+\n+    public void testGetInstantChronology_RI_long() {\n+        DateTime dt = new DateTime(123L, BuddhistChronology.getInstance());\n+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt, CopticChronology.getInstance()));\n+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getInstantChronology(dt, null));\n+        \n+        Instant i = new Instant(123L);\n+        assertEquals(CopticChronology.getInstance(), DateTimeUtils.getInstantChronology(i, CopticChronology.getInstance()));\n+        assertEquals(null, DateTimeUtils.getInstantChronology(i, null));\n+        \n+        assertEquals(CopticChronology.getInstance(), DateTimeUtils.getInstantChronology(null, CopticChronology.getInstance()));\n+        assertEquals(null, DateTimeUtils.getInstantChronology(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Chronology() {\n+        assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getChronology(BuddhistChronology.getInstance()));\n+        assertEquals(ISOChronology.getInstance(), DateTimeUtils.getChronology(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationMillis_RI() {\n+        Duration dur = new Duration(123L);\n+        assertEquals(123L, DateTimeUtils.getDurationMillis(dur));\n+        assertEquals(0L, DateTimeUtils.getDurationMillis(null));\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n         assertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());\n     }\n \n-    public void testGetDuration() {\n+    public void testGetDuration1() {\n         Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n         assertEquals(TEST_TIME2 - TEST_TIME1, test.getDurationMillis());\n         assertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());\n+    }\n+\n+    public void testGetDuration2() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME1);\n+        assertSame(Duration.ZERO, test.getDuration());\n     }\n \n     public void testEqualsHashCode() {\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    public void testWithStartMillis_long3() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval result = test.withStartMillis(TEST_TIME1);\n+        assertSame(test, result);\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testWithStartInstant_RI1() {\n         Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    public void testWithEndMillis_long3() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval result = test.withEndMillis(TEST_TIME2);\n+        assertSame(test, result);\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testWithEndInstant_RI1() {\n         Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n--- a/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java\n         assertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());\n     }\n \n-    public void testGetDuration() {\n+    public void testGetDuration1() {\n         MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n         assertEquals(TEST_TIME2 - TEST_TIME1, test.getDurationMillis());\n         assertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());\n+    }\n+\n+    public void testGetDuration2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME1);\n+        assertSame(Duration.ZERO, test.getDuration());\n     }\n \n     public void testEqualsHashCode() {\n         assertEquals(\"2004-06-09T07:08:09.010/2005-08-13T12:14:16.018\", test.toString());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testCopy() {\n+        MutableInterval test = new MutableInterval(123L, 456L);\n+        MutableInterval cloned = test.copy();\n+        assertEquals(test, cloned);\n+        assertNotSame(test, cloned);\n+    }\n+    public void testClone() {\n+        MutableInterval test = new MutableInterval(123L, 456L);\n+        MutableInterval cloned = (MutableInterval) test.clone();\n+        assertEquals(test, cloned);\n+        assertNotSame(test, cloned);\n+    }\n+\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n         test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n         test.setYears(1);\n         assertEquals(1, test.getYears());\n+        \n+        test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.getMillisType());\n+        try {\n+            test.setYears(1);\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1092696872, "metainfo": ""}