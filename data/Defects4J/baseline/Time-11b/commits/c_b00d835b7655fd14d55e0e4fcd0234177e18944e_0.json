{"sha": "b00d835b7655fd14d55e0e4fcd0234177e18944e", "log": "Add comments about equals on periods   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/MutablePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/MutablePeriod.java\n /**\n  * Standard mutable time period implementation.\n  * <p>\n+ * A time period is divided into a number of fields, such as hours and seconds.\n+ * Which fields are supported is defined by the PeriodType class.\n+ * The default is the standard period type, which supports years, months, weeks, days,\n+ * hours, minutes, seconds and millis.\n+ * <p>\n+ * When this time period is added to an instant, the effect is of adding each field in turn.\n+ * As a result, this takes into account daylight savings time.\n+ * Adding a time period of 1 day to the day before daylight savings starts will only add\n+ * 23 hours rather than 24 to ensure that the time remains the same.\n+ * If this is not the behaviour you want, then see {@link Duration}.\n+ * <p>\n+ * The definition of a period also affects the equals method. A period of 1\n+ * day is not equal to a period of 24 hours, nor 1 hour equal to 60 minutes.\n+ * This is because periods represent an abstracted definition of a time period\n+ * (eg. a day may not actually be 24 hours, it might be 23 or 25 at daylight\n+ * savings boundary). To compare the actual duration of two periods, convert\n+ * both to durations using toDuration, an operation that emphasises that the\n+ * result may differ according to the date you choose.\n+ * <p>\n  * MutablePeriod is mutable and not thread-safe, unless concurrent threads\n  * are not invoking mutator methods.\n  *\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n  * 23 hours rather than 24 to ensure that the time remains the same.\n  * If this is not the behaviour you want, then see {@link Duration}.\n  * <p>\n+ * The definition of a period also affects the equals method. A period of 1\n+ * day is not equal to a period of 24 hours, nor 1 hour equal to 60 minutes.\n+ * This is because periods represent an abstracted definition of a time period\n+ * (eg. a day may not actually be 24 hours, it might be 23 or 25 at daylight\n+ * savings boundary). To compare the actual duration of two periods, convert\n+ * both to durations using toDuration, an operation that emphasises that the\n+ * result may differ according to the date you choose.\n+ * <p>\n  * Period is thread-safe and immutable, provided that the PeriodType is as well.\n  * All standard PeriodType classes supplied are thread-safe and immutable.\n  *\n--- a/JodaTime/src/java/org/joda/time/ReadablePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/ReadablePeriod.java\n      * Compares this object with the specified object for equality based\n      * on the value and type of each supported field.\n      * All ReadablePeriod instances are accepted.\n+     * <p>\n+     * Note that a period of 1 day is not equal to a period of 24 hours,\n+     * nor is 1 hour equal to 60 minutes. Only periods with the same amount\n+     * in each field are equal.\n+     * <p>\n+     * This is because periods represent an abstracted definition of a time\n+     * period (eg. a day may not actually be 24 hours, it might be 23 or 25\n+     * at daylight savings boundary).\n+     * <p>\n+     * To compare the actual duration of two periods, convert both to\n+     * {@link Duration}s, an operation that emphasises that the result may\n+     * differ according to the date you choose.\n      *\n      * @param readablePeriod  a readable period to check against\n      * @return true if all the field values and types are equal, false if\n--- a/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java\n     /**\n      * Compares this object with the specified object for equality based\n      * on the value of each field. All ReadablePeriod instances are accepted.\n+     * <p>\n+     * Note that a period of 1 day is not equal to a period of 24 hours,\n+     * nor is 1 hour equal to 60 minutes. Only periods with the same amount\n+     * in each field are equal.\n+     * <p>\n+     * This is because periods represent an abstracted definition of a time\n+     * period (eg. a day may not actually be 24 hours, it might be 23 or 25\n+     * at daylight savings boundary).\n+     * <p>\n+     * To compare the actual duration of two periods, convert both to\n+     * {@link org.joda.time.Duration Duration}s, an operation that emphasises\n+     * that the result may differ according to the date you choose.\n      *\n      * @param period  a readable period to check against\n      * @return true if all the field values are equal, false if", "timestamp": 1123109091, "metainfo": ""}