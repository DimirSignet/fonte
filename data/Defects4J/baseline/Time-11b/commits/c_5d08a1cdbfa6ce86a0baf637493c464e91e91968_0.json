{"sha": "5d08a1cdbfa6ce86a0baf637493c464e91e91968", "log": "Fix period formatter to correctly output values negative milliseconds [3564249]  Fix is between zero and -1 second", "commit": "\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n             int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);\n             if (iFieldType >= SECONDS_MILLIS) {\n                 // valueLong contains the seconds and millis fields\n-                // the minimum output is 0.000, which is 4 digits\n-                sum = Math.max(sum, 4);\n+                // the minimum output is 0.000, which is 4 or 5 digits with a negative\n+                sum = (valueLong < 0 ? Math.max(sum, 5) : Math.max(sum, 4));\n                 // plus one for the decimal point\n                 sum++;\n                 if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n             if (iPrefix != null) {\n                 iPrefix.printTo(buf, value);\n             }\n+            int bufLen = buf.length();\n             int minDigits = iMinPrintedDigits;\n             if (minDigits <= 1) {\n                 FormatUtils.appendUnpaddedInteger(buf, value);\n             if (iFieldType >= SECONDS_MILLIS) {\n                 int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n                 if (iFieldType == SECONDS_MILLIS || dp > 0) {\n+                    if (valueLong < 0 && valueLong > -DateTimeConstants.MILLIS_PER_SECOND) {\n+                        buf.insert(bufLen, '-');\n+                    }\n                     buf.append('.');\n                     FormatUtils.appendPaddedInteger(buf, dp, 3);\n                 }\n--- a/src/test/java/org/joda/time/format/TestISOPeriodFormat.java\n+++ b/src/test/java/org/joda/time/format/TestISOPeriodFormat.java\n \n     //-----------------------------------------------------------------------\n     public void testFormatStandard() {\n-        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n+        Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n         assertEquals(\"P1Y2M3W4DT5H6M7.008S\", ISOPeriodFormat.standard().print(p));\n         p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n         assertEquals(\"P1Y2M3W4DT5H6M7S\", ISOPeriodFormat.standard().print(p));\n         assertEquals(\"PT5H6M7.008S\", ISOPeriodFormat.standard().print(TIME_PERIOD));\n     }\n \n+    public void testFormatStandard_negative() {\n+        Period p = new Period(-1, -2, -3, -4, -5, -6, -7, -8);\n+        assertEquals(\"P-1Y-2M-3W-4DT-5H-6M-7.008S\", ISOPeriodFormat.standard().print(p));\n+        \n+        p = Period.years(-54);\n+        assertEquals(\"P-54Y\", ISOPeriodFormat.standard().print(p));\n+        \n+        p = Period.seconds(4).withMillis(-8);\n+        assertEquals(\"PT3.992S\", ISOPeriodFormat.standard().print(p));\n+        \n+        p = Period.seconds(-4).withMillis(8);\n+        assertEquals(\"PT-3.992S\", ISOPeriodFormat.standard().print(p));\n+        \n+        p = Period.seconds(-23);\n+        assertEquals(\"PT-23S\", ISOPeriodFormat.standard().print(p));\n+        \n+        p = Period.millis(-8);\n+        assertEquals(\"PT-0.008S\", ISOPeriodFormat.standard().print(p));\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testFormatAlternate() {\n         Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);", "timestamp": 1346670013, "metainfo": ""}