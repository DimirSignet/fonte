{"sha": "1c721be9ef307c1f096302e4e6034b22feff42cc", "log": "Fix time zone compiler to handle 24:00 [2804258]  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java\n+++ b/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.LocalDate;\n import org.joda.time.MutableDateTime;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.LenientChronology;\n         }\n     }\n \n-    private static class DateTimeOfYear {\n+    static class DateTimeOfYear {\n         public final int iMonthOfYear;\n         public final int iDayOfMonth;\n         public final int iDayOfWeek;\n                     if (st.hasMoreTokens()) {\n                         str = st.nextToken();\n                         zoneChar = parseZoneChar(str.charAt(str.length() - 1));\n-                        millis = parseTime(str);\n+                        if (str.equals(\"24:00\")) {\n+                            LocalDate date = (day == -1 ?\n+                                    new LocalDate(2001, month, 1).plusMonths(1) :\n+                                    new LocalDate(2001, month, day).plusDays(1));\n+                            advance = (day != -1);\n+                            month = date.getMonthOfYear();\n+                            day = date.getDayOfMonth();\n+                            dayOfWeek = ((dayOfWeek - 1 + 1) % 7) + 1;\n+                        } else {\n+                            millis = parseTime(str);\n+                        }\n                     }\n                 }\n             }\n--- a/JodaTime/src/test/org/joda/time/tz/TestCompiler.java\n+++ b/JodaTime/src/test/org/joda/time/tz/TestCompiler.java\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.StringTokenizer;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.tz.ZoneInfoCompiler.DateTimeOfYear;\n \n /**\n  * Test cases for ZoneInfoCompiler.\n             }\n         }\n     }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_2400_fromDay() {\n+        StringTokenizer st = new StringTokenizer(\"Apr Sun>=1  24:00\");\n+        DateTimeOfYear test = new DateTimeOfYear(st);\n+        assertEquals(4, test.iMonthOfYear);  // Apr\n+        assertEquals(2, test.iDayOfMonth);   // 2nd\n+        assertEquals(1, test.iDayOfWeek);    // Mon\n+        assertEquals(0, test.iMillisOfDay);  // 00:00\n+        assertEquals(true, test.iAdvanceDayOfWeek);\n+    }\n+\n+    public void test_2400_last() {\n+        StringTokenizer st = new StringTokenizer(\"Mar lastSun 24:00\");\n+        DateTimeOfYear test = new DateTimeOfYear(st);\n+        assertEquals(4, test.iMonthOfYear);  // Apr\n+        assertEquals(1, test.iDayOfMonth);   // 1st\n+        assertEquals(1, test.iDayOfWeek);    // Mon\n+        assertEquals(0, test.iMillisOfDay);  // 00:00\n+        assertEquals(false, test.iAdvanceDayOfWeek);\n+    }\n+\n+    public void test_Amman_2003() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Asia/Amman\");\n+        DateTime dt = new DateTime(2003, 3, 1, 0, 0, zone);\n+        long next = zone.nextTransition(dt.getMillis());\n+        assertEquals(next, new DateTime(2003, 3, 28, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());\n+    }\n+\n+    public void test_Amman_2004() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Asia/Amman\");\n+        DateTime dt = new DateTime(2004, 3, 1, 0, 0, zone);\n+        long next = zone.nextTransition(dt.getMillis());\n+        assertEquals(next, new DateTime(2004, 3, 26, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());\n+    }\n+\n+    public void test_Amman_2005() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Asia/Amman\");\n+        DateTime dt = new DateTime(2005, 3, 1, 0, 0, zone);\n+        long next = zone.nextTransition(dt.getMillis());\n+        assertEquals(next, new DateTime(2005, 4, 1, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());\n+    }\n+\n+    public void test_Amman_2006() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Asia/Amman\");\n+        DateTime dt = new DateTime(2006, 3, 1, 0, 0, zone);\n+        long next = zone.nextTransition(dt.getMillis());\n+        assertEquals(next, new DateTime(2006, 3, 31, 0, 0, DateTimeZone.forOffsetHours(2)).getMillis());\n+    }\n+\n }", "timestamp": 1272804556, "metainfo": ""}