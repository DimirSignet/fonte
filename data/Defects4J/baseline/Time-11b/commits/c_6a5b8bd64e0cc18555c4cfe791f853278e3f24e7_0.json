{"sha": "6a5b8bd64e0cc18555c4cfe791f853278e3f24e7", "log": "Increase test coverage   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n      * DateTime updated = dt.property(DateTimeFieldType.dayOfMonth()).setCopy(6);\n      * </pre>\n      *\n-     * @param fieldType  the field type to set, null ignored\n+     * @param fieldType  the field type to set, not null\n      * @param value  the value to set\n      * @return a copy of this datetime with the field set\n-     * @throws IllegalArgumentException if the value is invalid\n+     * @throws IllegalArgumentException if the value is null or invalid\n      */\n     public DateMidnight withField(DateTimeFieldType fieldType, int value) {\n         if (fieldType == null) {\n-            return this;\n+            throw new IllegalArgumentException(\"Field must not be null\");\n         }\n         long instant = fieldType.getField(getChronology()).set(getMillis(), value);\n         return withMillis(instant);\n      * DateTime added = dt.property(DateTimeFieldType.dayOfMonth()).addToCopy(6);\n      * </pre>\n      * \n-     * @param fieldType  the field type to add to, null ignored\n+     * @param fieldType  the field type to add to, not null\n      * @param amount  the amount to add\n      * @return a copy of this datetime with the field updated\n+     * @throws IllegalArgumentException if the value is null or invalid\n      * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n      */\n     public DateMidnight withFieldAdded(DurationFieldType fieldType, int amount) {\n-        if (fieldType == null || amount == 0) {\n+        if (fieldType == null) {\n+            throw new IllegalArgumentException(\"Field must not be null\");\n+        }\n+        if (amount == 0) {\n             return this;\n         }\n         long instant = fieldType.getField(getChronology()).add(getMillis(), amount);\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n      * DateTime updated = dt.property(DateTimeFieldType.dayOfMonth()).setCopy(6);\n      * </pre>\n      *\n-     * @param fieldType  the field type to set, null ignored\n+     * @param fieldType  the field type to set, not null\n      * @param value  the value to set\n      * @return a copy of this datetime with the field set\n-     * @throws IllegalArgumentException if the value is invalid\n+     * @throws IllegalArgumentException if the value is null or invalid\n      */\n     public DateTime withField(DateTimeFieldType fieldType, int value) {\n         if (fieldType == null) {\n-            return this;\n+            throw new IllegalArgumentException(\"Field must not be null\");\n         }\n         long instant = fieldType.getField(getChronology()).set(getMillis(), value);\n         return withMillis(instant);\n      * DateTime added = dt.property(DateTimeFieldType.dayOfMonth()).addToCopy(6);\n      * </pre>\n      * \n-     * @param fieldType  the field type to add to, null ignored\n+     * @param fieldType  the field type to add to, not null\n      * @param amount  the amount to add\n      * @return a copy of this datetime with the field updated\n+     * @throws IllegalArgumentException if the value is null or invalid\n      * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n      */\n     public DateTime withFieldAdded(DurationFieldType fieldType, int amount) {\n-        if (fieldType == null || amount == 0) {\n+        if (fieldType == null) {\n+            throw new IllegalArgumentException(\"Field must not be null\");\n+        }\n+        if (amount == 0) {\n             return this;\n         }\n         long instant = fieldType.getField(getChronology()).add(getMillis(), amount);\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n     /**\n      * Sets the value of one of the fields of the instant, such as hourOfDay.\n      *\n-     * @param type  a field type, usually obtained from DateTimeFieldType, null ignored\n+     * @param type  a field type, usually obtained from DateTimeFieldType, not null\n      * @param value  the value to set the field to\n-     * @throws IllegalArgumentException if the value is invalid\n+     * @throws IllegalArgumentException if the value is null or invalid\n      */\n     public void set(DateTimeFieldType type, int value) {\n-        if (type != null) {\n-            setMillis(type.getField(getChronology()).set(getMillis(), value));\n-        }\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"Field must not be null\");\n+        }\n+        setMillis(type.getField(getChronology()).set(getMillis(), value));\n     }\n \n     /**\n      * Adds to the instant specifying the duration and multiple to add.\n      *\n-     * @param type  a field type, usually obtained from DateTimeFieldType, null ignored\n+     * @param type  a field type, usually obtained from DateTimeFieldType, not null\n      * @param amount  the amount to add of this duration\n+     * @throws IllegalArgumentException if the value is null or invalid\n      * @throws ArithmeticException if the result exceeds the capacity of the instant\n      */\n     public void add(DurationFieldType type, int amount) {\n-        if (type != null) {\n-            setMillis(type.getField(getChronology()).add(getMillis(), amount));\n-        }\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"Field must not be null\");\n+        }\n+        setMillis(type.getField(getChronology()).add(getMillis(), amount));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/MutablePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/MutablePeriod.java\n      * <p>\n      * The field type specified must be one of those that is supported by the period.\n      *\n-     * @param field  a DurationFieldType instance that is supported by this period\n+     * @param field  a DurationFieldType instance that is supported by this period, not null\n      * @param value  the new value for the field\n      * @throws IllegalArgumentException if the field is null or not supported\n      */\n      * <p>\n      * The field type specified must be one of those that is supported by the period.\n      *\n-     * @param field  a DurationFieldType instance that is supported by this period\n+     * @param field  a DurationFieldType instance that is supported by this period, not null\n      * @param value  the value to add to the field\n      * @throws IllegalArgumentException if the field is null or not supported\n      */\n     public void add(DurationFieldType field, int value) {\n-        if (value != 0) {\n-            super.addField(field, value);\n-        }\n+        super.addField(field, value);\n     }\n \n     /**\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void add(ReadablePeriod period) {\n-        if (period != null) {\n-            super.addPeriod(period);\n-        }\n+        super.addPeriod(period);\n     }\n \n     /**\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Merges all the fields from the specified period into this one.\n+     * <p>\n+     * Fields that are not present in the specified period are left unaltered.\n+     * \n+     * @param period  the period to set, null ignored\n+     * @throws IllegalArgumentException if an unsupported field's value is non-zero\n+     */\n+    public void mergePeriod(ReadablePeriod period) {\n+        super.mergePeriod(period);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Gets the years field part of the period.\n      * \n      * @return the number of years in the period, zero if unsupported\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addYears(int years) {\n-        if (years != 0) {\n-            setYears(FieldUtils.safeAdd(getYears(), years));\n-        }\n+        super.addField(DurationFieldType.years(), years);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addMonths(int months) {\n-        if (months != 0) {\n-            setMonths(FieldUtils.safeAdd(getMonths(), months));\n-        }\n+        super.addField(DurationFieldType.months(), months);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addWeeks(int weeks) {\n-        if (weeks != 0) {\n-            setWeeks(FieldUtils.safeAdd(getWeeks(), weeks));\n-        }\n+        super.addField(DurationFieldType.weeks(), weeks);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addDays(int days) {\n-        if (days != 0) {\n-            setDays(FieldUtils.safeAdd(getDays(), days));\n-        }\n+        super.addField(DurationFieldType.days(), days);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addHours(int hours) {\n-        if (hours != 0) {\n-            setHours(FieldUtils.safeAdd(getHours(), hours));\n-        }\n+        super.addField(DurationFieldType.hours(), hours);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addMinutes(int minutes) {\n-        if (minutes != 0) {\n-            setMinutes(FieldUtils.safeAdd(getMinutes(), minutes));\n-        }\n+        super.addField(DurationFieldType.minutes(), minutes);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addSeconds(int seconds) {\n-        if (seconds != 0) {\n-            setSeconds(FieldUtils.safeAdd(getSeconds(), seconds));\n-        }\n+        super.addField(DurationFieldType.seconds(), seconds);\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addMillis(int millis) {\n-        if (millis != 0) {\n-            setMillis(FieldUtils.safeAdd(getMillis(), millis));\n-        }\n+        super.addField(DurationFieldType.millis(), millis);\n     }\n \n     // Misc\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n      * <p>\n      * This period instance is immutable and unaffected by this method call.\n      * \n-     * @param field  the field to set, null ignored\n+     * @param field  the field to set, not null\n      * @param value  the value to set to\n      * @return the new period instance\n-     * @throws IllegalArgumentException if the field type is unsupported\n+     * @throws IllegalArgumentException if the field type is null or unsupported\n      */\n     public Period withField(DurationFieldType field, int value) {\n         if (field == null) {\n-            return this;\n+            throw new IllegalArgumentException(\"Field must not be null\");\n         }\n         int[] newValues = getValues();  // cloned\n         super.setFieldInto(newValues, field, value);\n      * <p>\n      * This period instance is immutable and unaffected by this method call.\n      * \n-     * @param field  the field to set, null ignored\n+     * @param field  the field to set, not null\n      * @param value  the value to add\n      * @return the new period instance\n-     * @throws IllegalArgumentException if the field type is unsupported\n+     * @throws IllegalArgumentException if the field type is null or unsupported\n      */\n     public Period withFieldAdded(DurationFieldType field, int valueToAdd) {\n-        if (valueToAdd == 0 || field == null) {\n+        if (field == null) {\n+            throw new IllegalArgumentException(\"Field must not be null\");\n+        }\n+        if (valueToAdd == 0) {\n             return this;\n         }\n         int[] newValues = getValues();  // cloned\n--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n      * \n      * @param field  the field to set\n      * @param value  the value to set\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is is null or not supported.\n      */\n     protected void setField(DurationFieldType field, int value) {\n         setFieldInto(iValues, field, value);\n      * @param values  the array of values to update\n      * @param field  the field to set\n      * @param value  the value to set\n-     * @throws IllegalArgumentException if field is not supported.\n+     * @throws IllegalArgumentException if field is null or not supported.\n      */\n     protected void setFieldInto(int[] values, DurationFieldType field, int value) {\n         int index = indexOf(field);\n         if (index == -1) {\n-            if (value != 0) {\n+            if (value != 0 || field == null) {\n                 throw new IllegalArgumentException(\n-                    \"Period does not support field '\" + field.getName() + \"'\");\n+                    \"Period does not support field '\" + field + \"'\");\n             }\n         } else {\n             values[index] = value;\n      * \n      * @param field  the field to set\n      * @param value  the value to set\n-     * @throws IllegalArgumentException if field is not supported.\n+     * @throws IllegalArgumentException if field is is null or not supported.\n      */\n     protected void addField(DurationFieldType field, int value) {\n         addFieldInto(iValues, field, value);\n      * @param values  the array of values to update\n      * @param field  the field to set\n      * @param value  the value to set\n-     * @throws IllegalArgumentException if field is not supported.\n+     * @throws IllegalArgumentException if field is is null or not supported.\n      */\n     protected void addFieldInto(int[] values, DurationFieldType field, int value) {\n         int index = indexOf(field);\n         if (index == -1) {\n-            if (value != 0) {\n+            if (value != 0 || field == null) {\n                 throw new IllegalArgumentException(\n-                    \"Period does not support field '\" + field.getName() + \"'\");\n+                    \"Period does not support field '\" + field + \"'\");\n             }\n         } else {\n             values[index] = FieldUtils.safeAdd(values[index], value);\n      * @throws IllegalArgumentException if an unsupported field's value is non-zero\n      */\n     protected void mergePeriod(ReadablePeriod period) {\n-        iValues = mergePeriodInto(getValues(), period);\n+        if (period != null) {\n+            iValues = mergePeriodInto(getValues(), period);\n+        }\n     }\n \n     /**\n      * @throws IllegalArgumentException if an unsupported field's value is non-zero\n      */\n     protected void addPeriod(ReadablePeriod period) {\n-        iValues = addPeriodInto(getValues(), period);\n+        if (period != null) {\n+            iValues = addPeriodInto(getValues(), period);\n+        }\n     }\n \n     /**\n          for (int i = 0, isize = period.size(); i < isize; i++) {\n              DurationFieldType type = period.getFieldType(i);\n              int value = period.getValue(i);\n-             int index = indexOf(type);\n-             if (index == -1) {\n-                 if (value != 0) {\n+             if (value != 0) {\n+                 int index = indexOf(type);\n+                 if (index == -1) {\n                      throw new IllegalArgumentException(\n                          \"Period does not support field '\" + type.getName() + \"'\");\n+                 } else {\n+                     values[index] = FieldUtils.safeAdd(getValue(index), value);\n                  }\n-             } else {\n-                 values[index] = FieldUtils.safeAdd(getValue(index), value);\n              }\n          }\n          return values;\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n \n     public void testWithField2() {\n         DateMidnight test = new DateMidnight(2004, 6, 9);\n-        DateMidnight result = test.withField(null, 6);\n-        assertSame(test, result);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n \n     public void testWithFieldAdded2() {\n         DateMidnight test = new DateMidnight(2004, 6, 9);\n-        DateMidnight result = test.withFieldAdded(null, 6);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded3() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded4() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight result = test.withFieldAdded(DurationFieldType.years(), 0);\n         assertSame(test, result);\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n \n     public void testWithField2() {\n         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime result = test.withField(null, 6);\n-        assertSame(test, result);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n \n     public void testWithFieldAdded2() {\n         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime result = test.withFieldAdded(null, 6);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded3() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded4() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime result = test.withFieldAdded(DurationFieldType.years(), 0);\n         assertSame(test, result);\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java\n \n     public void testAdd_DurationFieldType_int2() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        test.add((DurationFieldType) null, 2010); // has no effect\n+        try {\n+            test.add((DurationFieldType) null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    public void testAdd_DurationFieldType_int3() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.add((DurationFieldType) null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n         assertEquals(TEST_TIME1, test.getMillis());\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testSet_DateTimeField_int1() {\n+    public void testSet_DateTimeFieldType_int1() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME1);\n         test.set(DateTimeFieldType.year(), 2010);\n         assertEquals(2010, test.getYear());\n     }\n \n-    public void testSet_DateTimeField_int2() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        test.set(null, 2010); // has no effect\n-        assertEquals(TEST_TIME1, test.getMillis());\n-    }\n-\n-    public void testSet_DateTimeField_int3() {\n+    public void testSet_DateTimeFieldType_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.set(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    public void testSet_DateTimeFieldType_int3() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME1);\n         try {\n             test.set(DateTimeFieldType.monthOfYear(), 13);\n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testSet_Field() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.set(DurationFieldType.years(), 10);\n+        assertEquals(10, test.getYears());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.set(null, 10);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_Field() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.add(DurationFieldType.years(), 10);\n+        assertEquals(11, test.getYears());\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.add(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.add(null, 10);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testSetPeriod_8ints1() {\n         MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n         test.setPeriod(11, 12, 13, 14, 15, 16, 17, 18);\n         assertEquals(1, test.getHours());\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetPeriod_RI_RI1() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt1, dt2);\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_RI_RI2() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        DateTime dt2 = new DateTime(2003, 7, 17, 14, 16, 18, 20);\n+        test.setPeriod(dt2, dt1);\n+        assertEquals(-1, test.getYears());\n+        assertEquals(-1, test.getMonths());\n+        assertEquals(-1, test.getWeeks());\n+        assertEquals(-1, test.getDays());\n+        assertEquals(-1, test.getHours());\n+        assertEquals(-1, test.getMinutes());\n+        assertEquals(-1, test.getSeconds());\n+        assertEquals(-1, test.getMillis());\n+    }\n+\n+    public void testSetPeriod_RI_RI3() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        DateTime dt1 = new DateTime(2002, 6, 9, 13, 15, 17, 19);\n+        test.setPeriod(dt1, dt1);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n         assertEquals(0, test.getMillis());\n     }\n \n         assertEquals(108, test.getMillis());\n     }\n \n-//    public void testAdd_long3() {\n-//        MutablePeriod test = new MutablePeriod(100L, PeriodType.getPreciseYearMonthType());\n-//        long ms =\n-//            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n-//            5L * DateTimeConstants.MILLIS_PER_HOUR +\n-//            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n-//            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n-//        test.add(ms);\n-//        assertEquals(1, test.getYears());\n-//        assertEquals(2, test.getMonths());\n-//        assertEquals(0, test.getWeeks());  // checks that YearMonth type is used in conversion\n-//        assertEquals(25, test.getDays());\n-//        assertEquals(5, test.getHours());\n-//        assertEquals(6, test.getMinutes());\n-//        assertEquals(7, test.getSeconds());\n-//        assertEquals(108, test.getMillis());\n-//    }\n-//\n-//    public void testAdd_long4() {\n-//        MutablePeriod test = new MutablePeriod(100L, PeriodType.getPreciseYearMonthType());\n-//        long ms =0L;\n-//        test.add(ms);\n-//        assertEquals(0, test.getYears());\n-//        assertEquals(0, test.getMonths());\n-//        assertEquals(0, test.getWeeks());\n-//        assertEquals(0, test.getDays());\n-//        assertEquals(0, test.getHours());\n-//        assertEquals(0, test.getMinutes());\n-//        assertEquals(0, test.getSeconds());\n-//        assertEquals(100, test.getMillis());\n-//    }\n-\n-    public void testAdd_long5() {\n+    public void testAdd_long3() {\n         MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n         test.add(2100L);\n         assertEquals(1, test.getYears());\n         assertEquals(5, test.getHours());\n         assertEquals(6, test.getMinutes());\n         assertEquals(9, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_long_Chronology1() {\n+        MutablePeriod test = new MutablePeriod(100L);\n+        test.add(100L, Chronology.getISO());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(200, test.getMillis());\n+    }\n+\n+    public void testAdd_long_Chronology2() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.standard());\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        test.add(ms, Chronology.getISO());\n+        // only time fields are precise\n+        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450 days\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((450 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(108, test.getMillis());\n+    }\n+\n+    public void testAdd_long_Chronology3() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.standard());\n+        long ms =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        test.add(ms, Chronology.getISOUTC());\n+        // UTC, so weeks and day also precise\n+        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450 days\n+        assertEquals(0, test.getMonths());\n+        assertEquals(64, test.getWeeks());\n+        assertEquals(2, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n         assertEquals(108, test.getMillis());\n     }\n \n         assertEquals(108, test.getMillis());\n     }\n \n-//    public void testAdd_RD3() {\n-//        MutablePeriod test = new MutablePeriod(100L, PeriodType.getPreciseYearMonthType());\n-//        long ms =0L;\n-//        test.add(new Duration(ms));\n-//        assertEquals(0, test.getYears());\n-//        assertEquals(0, test.getMonths());\n-//        assertEquals(0, test.getWeeks());\n-//        assertEquals(0, test.getDays());\n-//        assertEquals(0, test.getHours());\n-//        assertEquals(0, test.getMinutes());\n-//        assertEquals(0, test.getSeconds());\n-//        assertEquals(100, test.getMillis());\n-//        assertEquals(100L, test.toDurationMillis());\n-//    }\n-//\n-//    public void testAdd_RD4() {\n-//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-//        test.add(new Duration(2100L));\n-//        assertEquals(1, test.getYears());\n-//        assertEquals(2, test.getMonths());\n-//        assertEquals(3, test.getWeeks());\n-//        assertEquals(4, test.getDays());\n-//        assertEquals(5, test.getHours());\n-//        assertEquals(6, test.getMinutes());\n-//        assertEquals(9, test.getSeconds());\n-//        assertEquals(108, test.getMillis());\n-//    }\n-//\n-//    public void testAdd_RD5() {\n-//        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-//        test.add((ReadableDuration) null);\n-//        assertEquals(1, test.getYears());\n-//        assertEquals(2, test.getMonths());\n-//        assertEquals(3, test.getWeeks());\n-//        assertEquals(4, test.getDays());\n-//        assertEquals(5, test.getHours());\n-//        assertEquals(6, test.getMinutes());\n-//        assertEquals(7, test.getSeconds());\n-//        assertEquals(8, test.getMillis());\n-//    }\n+    public void testAdd_RD3() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.add((ReadableDuration) null);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n \n     //-----------------------------------------------------------------------\n     public void testAdd_RP1() {\n     }\n \n     public void testAdd_RP5() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.yearMonthDayTime());\n+        test.add(new Period(1, 2, 0, 4, 5, 6, 7, 8));  // can set weeks as zero\n+        assertEquals(2, test.getYears());\n+        assertEquals(4, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(8, test.getDays());\n+        assertEquals(10, test.getHours());\n+        assertEquals(12, test.getMinutes());\n+        assertEquals(14, test.getSeconds());\n+        assertEquals(16, test.getMillis());\n+    }\n+\n+    public void testAdd_RP6() {\n         MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n         test.add((ReadablePeriod) null);\n         assertEquals(1, test.getYears());\n         assertEquals(8, test.getMillis());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testMergePeriod_RP1() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.mergePeriod(new MutablePeriod(0, 0, 0, 14, 15, 16, 17, 18, PeriodType.dayTime()));\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testMergePeriod_RP2() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.millis());\n+        try {\n+            test.mergePeriod(new MutablePeriod(11, 12, 13, 14, 15, 16, 17, 18));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(100, test.getMillis());\n+    }\n+\n+    public void testMergePeriod_RP3() {\n+        MutablePeriod test = new MutablePeriod(100L, PeriodType.millis());\n+        test.mergePeriod(new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 18));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testMergePeriod_RP4() {\n+        MutablePeriod test = new MutablePeriod(0, 0, 0, 0, 5, 6, 7, 8);\n+        test.mergePeriod(new MutablePeriod(11, 12, 13, 14, 15, 16, 17, 18));\n+        assertEquals(11, test.getYears());\n+        assertEquals(12, test.getMonths());\n+        assertEquals(13, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(15, test.getHours());\n+        assertEquals(16, test.getMinutes());\n+        assertEquals(17, test.getSeconds());\n+        assertEquals(18, test.getMillis());\n+    }\n+\n+    public void testMergePeriod_RP5() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        test.mergePeriod((ReadablePeriod) null);\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n \n     public void testWithField2() {\n         Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n-        Period result = test.withField(null, 6);\n-        assertSame(test, result);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField3() {\n+        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time());\n+        try {\n+            test.withField(DurationFieldType.years(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField4() {\n+        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time());\n+        Period result = test.withField(DurationFieldType.years(), 0);\n+        assertEquals(test, result);\n     }\n \n     //-----------------------------------------------------------------------\n \n     public void testWithFieldAdded2() {\n         Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n-        Period result = test.withFieldAdded(null, 6);\n-        assertSame(test, result);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded3() {\n+        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time());\n+        try {\n+            test.withFieldAdded(DurationFieldType.years(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded4() {\n+        Period test = new Period(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.time());\n+        Period result = test.withFieldAdded(DurationFieldType.years(), 0);\n+        assertEquals(test, result);\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1095109018, "metainfo": ""}