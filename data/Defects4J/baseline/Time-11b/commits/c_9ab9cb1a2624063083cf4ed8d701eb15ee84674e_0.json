{"sha": "9ab9cb1a2624063083cf4ed8d701eb15ee84674e", "log": "Add isStandardOffset() to DateTimeZone  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n     public abstract int getStandardOffset(long instant);\n \n     /**\n+     * Checks whether, at a particular instant, the offset is standard or not.\n+     * <p>\n+     * This method can be used to determine whether Summer Time (DST) applies.\n+     * As a general rule, if the offset at the specified instant is standard,\n+     * then either Winter time applies, or there is no Summer Time. If the\n+     * instant is not standard, then Summer Time applies.\n+     * <p>\n+     * The implementation of the method is simply whether {@link #getOffset(long)}\n+     * equals {@link #getStandardOffset(long)} at the specified instant.\n+     * \n+     * @param instant  milliseconds from 1970-01-01T00:00:00Z to get the offset for\n+     * @return true if the offset at the given instant is the standard offset\n+     * @since 1.5\n+     */\n+    public boolean isStandardOffset(long instant) {\n+        return getOffset(instant) == getStandardOffset(instant);\n+    }\n+\n+    /**\n      * Gets the millisecond offset to subtract from local time to get UTC time.\n      * This offset can be used to undo adding the offset obtained by getOffset.\n      *\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testGetOffset() {\n+    public void testGetOffset_long() {\n         DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n         assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));\n         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));\n         \n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));\n+        \n+        assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));\n+        \n+        assertEquals(false, zone.isStandardOffset(TEST_TIME_SUMMER));\n+        assertEquals(true, zone.isStandardOffset(TEST_TIME_WINTER));\n+    }\n+\n+    public void testGetOffset_RI() {\n+        DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n         assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));\n         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));\n         \n         assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));\n-        \n-        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));\n-        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));\n-        \n-        assertEquals(2L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));\n-        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));\n     }\n \n     public void testGetOffsetFixed() {\n         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_SUMMER));\n         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(TEST_TIME_WINTER));\n         \n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));\n+        \n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));\n+        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));\n+        \n+        assertEquals(true, zone.isStandardOffset(TEST_TIME_SUMMER));\n+        assertEquals(true, zone.isStandardOffset(TEST_TIME_WINTER));\n+    }\n+\n+    public void testGetOffsetFixed_RI() {\n+        DateTimeZone zone = DateTimeZone.forID(\"+01:00\");\n         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_SUMMER)));\n         assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffset(new Instant(TEST_TIME_WINTER)));\n         \n         assertEquals(zone.getOffset(DateTimeUtils.currentTimeMillis()), zone.getOffset(null));\n-        \n-        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_SUMMER));\n-        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getStandardOffset(TEST_TIME_WINTER));\n-        \n-        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_SUMMER));\n-        assertEquals(1L * DateTimeConstants.MILLIS_PER_HOUR, zone.getOffsetFromLocal(TEST_TIME_WINTER));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1181599986, "metainfo": ""}