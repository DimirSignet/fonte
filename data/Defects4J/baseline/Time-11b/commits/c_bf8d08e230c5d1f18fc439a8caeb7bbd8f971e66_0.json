{"sha": "bf8d08e230c5d1f18fc439a8caeb7bbd8f971e66", "log": "Tighten interval specification wrt zero duration intervals Change a zero duration interval to contains() itself and an instant of the same value  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Interval.java\n+++ b/JodaTime/src/java/org/joda/time/Interval.java\n     /**\n      * Gets the overlap between this interval and another interval.\n      * <p>\n-     * Any two intervals can overlap, abut, or have a gap between them.\n      * This method returns the amount of the overlap, only if the\n      * intervals do overlap.\n      * If the intervals do not overlap, then null is returned.\n      * Gets the gap between this interval and another interval.\n      * The other interval can be either before or after this interval.\n      * <p>\n-     * Any two intervals can overlap, abut, or have a gap between them.\n      * This method returns the amount of the gap only if the\n      * intervals do actually have a gap between them.\n      * If the intervals overlap or abut, then null is returned.\n      */\n     public Interval gap(ReadableInterval interval) {\n         interval = DateTimeUtils.getReadableInterval(interval);\n-        if (overlaps(interval) || abuts(interval)) {\n-            return null;\n-        }\n         long otherStart = interval.getStartMillis();\n         long otherEnd = interval.getEndMillis();\n         long thisStart = getStartMillis();\n         long thisEnd = getEndMillis();\n-        if (thisStart >= otherEnd) {\n+        if (thisStart > otherEnd) {\n             return new Interval(otherEnd, thisStart, getChronology());\n+        } else if (otherStart > thisEnd) {\n+            return new Interval(thisEnd, otherStart, getChronology());\n         } else {\n-            return new Interval(thisEnd, otherStart, getChronology());\n+            return null;\n         }\n     }\n \n      * <p>\n      * An interval abuts if it starts immediately after, or\n      * ends immediately before this interval without overlap.\n+     * Thus this method returns true if\n+     * <code>thisStart == otherEnd || thisEnd == otherStart </code>.\n+     * <p>\n+     * A zero duration interval abuts with itself.\n+     * <p>\n+     * For example:\n+     * <pre>\n+     * [09:00 to 10:00) abuts [08:00 to 08:30)  = false (completely before)\n+     * [09:00 to 10:00) abuts [08:00 to 09:00)  = true\n+     * [09:00 to 10:00) abuts [08:00 to 09:01)  = false (overlaps)\n+     * \n+     * [09:00 to 10:00) abuts [09:00 to 09:00)  = true\n+     * [09:00 to 10:00) abuts [09:00 to 09:01)  = false (overlaps)\n+     * \n+     * [09:00 to 10:00) abuts [10:00 to 10:00)  = true\n+     * [09:00 to 10:00) abuts [10:00 to 10:30)  = true\n+     * \n+     * [09:00 to 10:00) abuts [10:30 to 11:00)  = false (completely after)\n+     * \n+     * [14:00 to 14:00) abuts [14:00 to 14:00)  = true\n+     * [14:00 to 14:00) abuts [14:00 to 15:00)  = true\n+     * [14:00 to 14:00) abuts [13:00 to 14:00)  = true\n+     * </pre>\n      *\n      * @param interval  the interval to examine, null means now\n      * @return true if the interval abuts\n--- a/JodaTime/src/java/org/joda/time/ReadableInterval.java\n+++ b/JodaTime/src/java/org/joda/time/ReadableInterval.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Does this time interval contain the specified instant.\n-     * <p>\n-     * Intervals are inclusive of the start instant and exclusive of the end.\n+     * Does this time interval contain or equal the specified instant.\n+     * <p>\n+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.\n+     * The instant is contained if it is at the start or middle of this interval\n+     * but not at the end.\n+     * <p>\n+     * A zero duration interval represents the smallest possible interval\n+     * and only contains the instant equal to its start and end.\n+     * <p>\n+     * For example:\n+     * <pre>\n+     * [09:00 to 10:00) contains 08:59  = false (before start)\n+     * [09:00 to 10:00) contains 09:00  = true\n+     * [09:00 to 10:00) contains 09:59  = true\n+     * [09:00 to 10:00) contains 10:00  = false (equals end)\n+     * [09:00 to 10:00) contains 10:01  = false (after end)\n+     * \n+     * [14:00 to 14:00) contains 14:00  = true (equal)\n+     * </pre>\n+     * Passng in a <code>null</code> parameter will have the same effect as\n+     * calling {@link #containsNow()}.\n      * \n      * @param instant  the instant, null means now\n      * @return true if this time interval contains the instant\n     boolean contains(ReadableInstant instant);\n     \n     /**\n-     * Does this time interval contain the specified time interval completely.\n-     * <p>\n-     * Intervals are inclusive of the start instant and exclusive of the end.\n-     * \n-     * @param interval  the time interval to compare to, null means now\n+     * Does this time interval contain or equal the specified time interval.\n+     * <p>\n+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.\n+     * The other interval is contained if this interval wholly contains, starts,\n+     * finishes or equals it.\n+     * <p>\n+     * A zero duration interval represents the smallest possible interval\n+     * and will contain itself (because it is equal to itself). It will also\n+     * be contained by a larger interval at the start, middle but not the end.\n+     * <p>\n+     * For example:\n+     * <pre>\n+     * [09:00 to 10:00) contains [09:00 to 10:00)  = true\n+     * [09:00 to 10:00) contains [09:00 to 09:30)  = true\n+     * [09:00 to 10:00) contains [09:30 to 10:00)  = true\n+     * [09:00 to 10:00) contains [09:15 to 09:45)  = true\n+     * [09:00 to 10:00) contains [09:00 to 09:00)  = true\n+     * \n+     * [09:00 to 10:00) contains [08:59 to 10:00)  = false (otherStart before thisStart)\n+     * [09:00 to 10:00) contains [09:00 to 10:01)  = false (otherEnd after thisEnd)\n+     * [09:00 to 10:00) contains [10:00 to 10:00)  = false (otherStart equals thisEnd)\n+     * \n+     * [14:00 to 14:00) contains [14:00 to 14:00)  = true (equal)\n+     * </pre>\n+     * Passng in a <code>null</code> parameter will have the same effect as\n+     * calling {@link #containsNow()}.\n+     * \n+     * @param interval  the time interval to compare to, null means a zero length interval now\n      * @return true if this time interval contains the time interval\n      */\n     boolean contains(ReadableInterval interval);\n     /**\n      * Does this time interval overlap the specified time interval.\n      * <p>\n+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.\n      * The intervals overlap if at least some of the time interval is in common.\n-     * Intervals are inclusive of the start instant and exclusive of the end.\n-     * \n-     * @param interval  the time interval to compare to, null means now\n+     * <p>\n+     * A zero duration interval represents the smallest possible interval\n+     * and will overlap itself and larger intervals. The size of the overlap will\n+     * be a zero duration interval equal to the original zero duration interval.\n+     * <p>\n+     * For example:\n+     * <pre>\n+     * [09:00 to 10:00) overlaps [08:00 to 08:30)  = false (completely before)\n+     * [09:00 to 10:00) overlaps [08:00 to 09:00)  = false (abuts before)\n+     * [09:00 to 10:00) overlaps [08:00 to 09:30)  = true\n+     * [09:00 to 10:00) overlaps [08:00 to 10:00)  = true\n+     * [09:00 to 10:00) overlaps [08:00 to 11:00)  = true\n+     * \n+     * [09:00 to 10:00) overlaps [09:00 to 09:00)  = true\n+     * [09:00 to 10:00) overlaps [09:00 to 09:30)  = true\n+     * [09:00 to 10:00) overlaps [09:00 to 10:00)  = true\n+     * [09:00 to 10:00) overlaps [09:00 to 11:00)  = true\n+     * \n+     * [09:00 to 10:00) overlaps [09:30 to 09:30)  = true\n+     * [09:00 to 10:00) overlaps [09:30 to 10:00)  = true\n+     * [09:00 to 10:00) overlaps [09:30 to 11:00)  = true\n+     * \n+     * [09:00 to 10:00) overlaps [10:00 to 10:00)  = false (abuts after)\n+     * [09:00 to 10:00) overlaps [10:00 to 11:00)  = false (abuts after)\n+     * \n+     * [09:00 to 10:00) overlaps [10:30 to 11:00)  = false (completely after)\n+     * \n+     * [14:00 to 14:00) overlaps [14:00 to 14:00)  = true\n+     * [14:00 to 14:00) overlaps [13:00 to 15:00)  = true\n+     * </pre>\n+     * \n+     * @param interval  the time interval to compare to, null means a zero length interval now\n      * @return true if the time intervals overlap\n      */\n     boolean overlaps(ReadableInterval interval);\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInterval.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInterval.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Does this time interval contain the specified millisecond instant.\n-     * <p>\n-     * Intervals are inclusive of the start instant and exclusive of the end.\n-     * \n+     * Does this time interval contain or equal the specified millisecond instant.\n+     * <p>\n+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.\n+     * A zero duration intervals only contains the instant equal to its start and end.\n+     * <p>\n+     * NOTE: From v1.3, comparing a zero duration interval to an instant\n+     * with the same value will return true because they are equal\n+     *\n      * @param millisInstant  the instant to compare to,\n      *  millisecond instant from 1970-01-01T00:00:00Z\n      * @return true if this time interval contains the millisecond\n     public boolean contains(long millisInstant) {\n         long thisStart = getStartMillis();\n         long thisEnd = getEndMillis();\n-        return (millisInstant >= thisStart && millisInstant < thisEnd);\n-    }\n-\n-    /**\n-     * Does this time interval contain the current instant.\n-     * <p>\n-     * Intervals are inclusive of the start instant and exclusive of the end.\n-     * \n+        return (millisInstant >= thisStart && millisInstant < thisEnd) ||\n+            (thisStart == millisInstant && thisEnd == millisInstant);\n+    }\n+\n+    /**\n+     * Does this time interval contain or equal the current instant.\n+     * <p>\n+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.\n+     * A zero duration intervals only contains the instant equal to its start and end.\n+     * <p>\n+     * NOTE: From v1.3, comparing a zero duration interval to an instant\n+     * with the same value will return true because they are equal\n+     *\n      * @return true if this time interval contains the current instant\n      */\n     public boolean containsNow() {\n     }\n \n     /**\n-     * Does this time interval contain the specified instant.\n-     * <p>\n-     * Intervals are inclusive of the start instant and exclusive of the end.\n-     * \n+     * Does this time interval contain or equal the specified instant.\n+     * <p>\n+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.\n+     * The instant is contained if it is at the start or middle of this interval\n+     * but not at the end.\n+     * <p>\n+     * A zero duration interval represents the smallest possible interval\n+     * and only contains the instant equal to its start and end.\n+     * <p>\n+     * For example:\n+     * <pre>\n+     * [09:00 to 10:00) contains 08:59  = false (before start)\n+     * [09:00 to 10:00) contains 09:00  = true\n+     * [09:00 to 10:00) contains 09:59  = true\n+     * [09:00 to 10:00) contains 10:00  = false (equals end)\n+     * [09:00 to 10:00) contains 10:01  = false (after end)\n+     * \n+     * [14:00 to 14:00) contains 14:00  = true (equal)\n+     * </pre>\n+     * Passng in a <code>null</code> parameter will have the same effect as\n+     * calling {@link #containsNow()}.\n+     * <p>\n+     * NOTE: From v1.3, comparing a zero duration interval to an instant\n+     * with the same value will return true because they are equal\n+     *\n      * @param instant  the instant, null means now\n      * @return true if this time interval contains the instant\n      */\n     }\n \n     /**\n-     * Does this time interval contain the specified time interval completely.\n-     * <p>\n-     * Intervals are inclusive of the start instant and exclusive of the end.\n-     * \n-     * @param interval  the time interval to compare to, null means now\n+     * Does this time interval contain or equal the specified time interval.\n+     * <p>\n+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.\n+     * The other interval is contained if this interval wholly contains, starts,\n+     * finishes or equals it.\n+     * <p>\n+     * A zero duration interval represents the smallest possible interval\n+     * and will contain itself (because it is equal to itself). It will also\n+     * be contained by a larger interval at the start, middle but not the end.\n+     * <p>\n+     * For example:\n+     * <pre>\n+     * [09:00 to 10:00) contains [09:00 to 10:00)  = true\n+     * [09:00 to 10:00) contains [09:00 to 09:30)  = true\n+     * [09:00 to 10:00) contains [09:30 to 10:00)  = true\n+     * [09:00 to 10:00) contains [09:15 to 09:45)  = true\n+     * [09:00 to 10:00) contains [09:00 to 09:00)  = true\n+     * \n+     * [09:00 to 10:00) contains [08:59 to 10:00)  = false (otherStart before thisStart)\n+     * [09:00 to 10:00) contains [09:00 to 10:01)  = false (otherEnd after thisEnd)\n+     * [09:00 to 10:00) contains [10:00 to 10:00)  = false (otherStart equals thisEnd)\n+     * \n+     * [14:00 to 14:00) contains [14:00 to 14:00)  = true (equal)\n+     * </pre>\n+     * Passng in a <code>null</code> parameter will have the same effect as\n+     * calling {@link #containsNow()}.\n+     * <p>\n+     * NOTE: From v1.3, comparing a zero duration interval to itself\n+     * will return true because they are equal\n+     *\n+     * @param interval  the time interval to compare to, null means a zero duration interval now\n      * @return true if this time interval contains the time interval\n      */\n     public boolean contains(ReadableInterval interval) {\n         long otherEnd = interval.getEndMillis();\n         long thisStart = getStartMillis();\n         long thisEnd = getEndMillis();\n-        return (otherStart >= thisStart && otherStart < thisEnd && otherEnd <= thisEnd);\n+        return (thisStart <= otherStart && otherStart < thisEnd && otherEnd <= thisEnd) ||\n+            (thisStart == otherStart && thisEnd == otherEnd);\n     }\n \n     /**\n      * Does this time interval overlap the specified time interval.\n      * <p>\n+     * Non-zero duration intervals are inclusive of the start instant and exclusive of the end.\n      * The intervals overlap if at least some of the time interval is in common.\n-     * Intervals are inclusive of the start instant and exclusive of the end.\n-     * \n-     * @param interval  the time interval to compare to, null means now\n+     * <p>\n+     * A zero duration interval represents the smallest possible interval\n+     * and will overlap itself and larger intervals. The size of the overlap will\n+     * be a zero duration interval equal to the original zero duration interval.\n+     * <p>\n+     * For example:\n+     * <pre>\n+     * [09:00 to 10:00) overlaps [08:00 to 08:30)  = false (completely before)\n+     * [09:00 to 10:00) overlaps [08:00 to 09:00)  = false (abuts before)\n+     * [09:00 to 10:00) overlaps [08:00 to 09:30)  = true\n+     * [09:00 to 10:00) overlaps [08:00 to 10:00)  = true\n+     * [09:00 to 10:00) overlaps [08:00 to 11:00)  = true\n+     * \n+     * [09:00 to 10:00) overlaps [09:00 to 09:00)  = true\n+     * [09:00 to 10:00) overlaps [09:00 to 09:30)  = true\n+     * [09:00 to 10:00) overlaps [09:00 to 10:00)  = true\n+     * [09:00 to 10:00) overlaps [09:00 to 11:00)  = true\n+     * \n+     * [09:00 to 10:00) overlaps [09:30 to 09:30)  = true\n+     * [09:00 to 10:00) overlaps [09:30 to 10:00)  = true\n+     * [09:00 to 10:00) overlaps [09:30 to 11:00)  = true\n+     * \n+     * [09:00 to 10:00) overlaps [10:00 to 10:00)  = false (abuts after)\n+     * [09:00 to 10:00) overlaps [10:00 to 11:00)  = false (abuts after)\n+     * \n+     * [09:00 to 10:00) overlaps [10:30 to 11:00)  = false (completely after)\n+     * \n+     * [14:00 to 14:00) overlaps [14:00 to 14:00)  = true\n+     * [14:00 to 14:00) overlaps [13:00 to 15:00)  = true\n+     * </pre>\n+     * NOTE: From v1.3, comparing a zero duration interval at the start of\n+     * another interval will now return true, and comparing a zero duration\n+     * interval to itself will return true\n+     * \n+     * @param interval  the time interval to compare to, null means a zero length interval now\n      * @return true if the time intervals overlap\n      */\n     public boolean overlaps(ReadableInterval interval) {\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n-    \n+    private Interval interval37;\n+    private Interval interval33;\n+\n     long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n                      366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n                      365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n         DateTimeZone.setDefault(PARIS);\n         TimeZone.setDefault(PARIS.toTimeZone());\n         Locale.setDefault(Locale.FRANCE);\n+        interval37 = new Interval(3, 7);\n+        interval33 = new Interval(3, 3);\n     }\n \n     protected void tearDown() throws Exception {\n     }\n \n     //-----------------------------------------------------------------------\n+    public void test_useCase_ContainsOverlapAbutGap() {\n+        // this is a simple test to ensure that the use case of these methods is OK\n+        // when comparing any two intervals they can be in one and only one of these states\n+        // (a) have a gap between them, (b) abut or (c) overlap\n+        // contains is a subset of overlap\n+        Interval test1020 = new Interval(10, 20);\n+        \n+        // [4,8) [10,20) - gap\n+        Interval interval = new Interval(4, 8);\n+        assertNotNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNotNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [6,10) [10,20) - abuts\n+        interval = new Interval(6, 10);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(true, test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(true, interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [8,12) [10,20) - overlaps\n+        interval = new Interval(8, 12);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(true, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(true, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,14) [10,20) - overlaps and contains-one-way\n+        interval = new Interval(10, 14);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(true, test1020.overlaps(interval));\n+        assertEquals(true, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(true, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,20) [10,20) - overlaps and contains-both-ways\n+        assertNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(test1020));\n+        assertEquals(true, test1020.overlaps(test1020));\n+        assertEquals(true, test1020.contains(test1020));\n+        \n+        // [10,20) [16,20) - overlaps and contains-one-way\n+        interval = new Interval(16, 20);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(true, test1020.overlaps(interval));\n+        assertEquals(true, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(true, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,20) [18,22) - overlaps\n+        interval = new Interval(18, 22);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(true, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(true, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,20) [20,24) - abuts\n+        interval = new Interval(20, 24);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(true, test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(true, interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,20) [22,26) - gap\n+        interval = new Interval(22, 26);\n+        assertNotNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNotNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_useCase_ContainsOverlapAbutGap_zeroDuration() {\n+        // this is a simple test to ensure that the use case of these methods\n+        // is OK when considering a zero duration inerval\n+        // when comparing any two intervals they can be in one and only one of these states\n+        // (a) have a gap between them, (b) abut or (c) overlap\n+        // contains is a subset of overlap\n+        Interval test1020 = new Interval(10, 20);\n+        \n+        // [8,8) [10,20) - gap\n+        Interval interval = new Interval(8, 8);\n+        assertNotNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNotNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,10) [10,20) - abuts and contains-one-way and overlaps\n+        interval = new Interval(10, 10);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(true,  test1020.abuts(interval));\n+        assertEquals(true,  test1020.overlaps(interval));\n+        assertEquals(true,  test1020.contains(interval));  // normal contains zero-duration\n+        assertNull(interval.gap(test1020));\n+        assertEquals(true,  interval.abuts(test1020));\n+        assertEquals(true,  interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));  // zero-duration does not contain normal\n+        \n+        // [12,12) [10,20) - contains-one-way and overlaps\n+        interval = new Interval(12, 12);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(true,  test1020.overlaps(interval));\n+        assertEquals(true,  test1020.contains(interval));  // normal contains zero-duration\n+        assertNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(true,  interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));  // zero-duration does not contain normal\n+        \n+        // [10,20) [20,20) - abuts\n+        interval = new Interval(20, 20);\n+        assertNull(test1020.gap(interval));\n+        assertEquals(true,  test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNull(interval.gap(test1020));\n+        assertEquals(true,  interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+        \n+        // [10,20) [22,22) - gap\n+        interval = new Interval(22, 22);\n+        assertNotNull(test1020.gap(interval));\n+        assertEquals(false, test1020.abuts(interval));\n+        assertEquals(false, test1020.overlaps(interval));\n+        assertEquals(false, test1020.contains(interval));\n+        assertNotNull(interval.gap(test1020));\n+        assertEquals(false, interval.abuts(test1020));\n+        assertEquals(false, interval.overlaps(test1020));\n+        assertEquals(false, interval.contains(test1020));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_useCase_ContainsOverlapAbutGap_bothZeroDuration() {\n+        // this is a simple test to ensure that the use case of these methods\n+        // is OK when considering two zero duration inervals\n+        // this is the simplest case, as the two intervals either have a gap or not\n+        // if not, then they are equal and abut\n+        Interval test0808 = new Interval(8, 8);\n+        Interval test1010 = new Interval(10, 10);\n+        \n+        // [8,8) [10,10) - gap\n+        assertNotNull(test1010.gap(test0808));\n+        assertEquals(false, test1010.abuts(test0808));\n+        assertEquals(false, test1010.overlaps(test0808));\n+        assertEquals(false, test1010.contains(test0808));\n+        assertNotNull(test0808.gap(test1010));\n+        assertEquals(false, test0808.abuts(test1010));\n+        assertEquals(false, test0808.overlaps(test1010));\n+        assertEquals(false, test0808.contains(test1010));\n+        \n+        // [10,10) [10,10) - abuts and overlaps\n+        assertNull(test1010.gap(test1010));\n+        assertEquals(true,  test1010.abuts(test1010));\n+        assertEquals(true,  test1010.overlaps(test1010));\n+        assertEquals(true,  test1010.contains(test1010));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testContains_long() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        assertEquals(true, test.contains(TEST_TIME1));\n-        assertEquals(false, test.contains(TEST_TIME1 - 1));\n-        assertEquals(true, test.contains(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2));\n-        assertEquals(false, test.contains(TEST_TIME2));\n-        assertEquals(true, test.contains(TEST_TIME2 - 1));\n-    }\n-\n+        assertEquals(false, interval37.contains(2));  // value before\n+        assertEquals(true,  interval37.contains(3));\n+        assertEquals(true,  interval37.contains(4));\n+        assertEquals(true,  interval37.contains(5));\n+        assertEquals(true,  interval37.contains(6));\n+        assertEquals(false, interval37.contains(7));  // value after\n+        assertEquals(false, interval37.contains(8));  // value after\n+    }\n+\n+    public void testContains_long_zeroDuration() {\n+        assertEquals(false, interval33.contains(2));  // value before\n+        assertEquals(true,  interval33.contains(3));\n+        assertEquals(false, interval33.contains(4));  // value after\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testContainsNow() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);\n-        assertEquals(true, test.containsNow());\n-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);\n-        assertEquals(false, test.containsNow());\n-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2);\n-        assertEquals(true, test.containsNow());\n-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);\n-        assertEquals(false, test.containsNow());\n-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);\n-        assertEquals(true, test.containsNow());\n-    }\n-\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.containsNow());  // value before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true,  interval37.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(true,  interval37.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(true,  interval37.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.containsNow());  // value after\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.containsNow());  // value after\n+        \n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval33.containsNow());  // value before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true,  interval33.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval33.containsNow());  // value after\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testContains_RI() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        assertEquals(true, test.contains(new Instant(TEST_TIME1)));\n-        assertEquals(false, test.contains(new Instant(TEST_TIME1 - 1)));\n-        assertEquals(true, test.contains(new Instant(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2)));\n-        assertEquals(false, test.contains(new Instant(TEST_TIME2)));\n-        assertEquals(true, test.contains(new Instant(TEST_TIME2 - 1)));\n-        assertEquals(true, test.contains((ReadableInstant) null));\n+        assertEquals(false, interval37.contains(new Instant(2)));  // value before\n+        assertEquals(true,  interval37.contains(new Instant(3)));\n+        assertEquals(true,  interval37.contains(new Instant(4)));\n+        assertEquals(true,  interval37.contains(new Instant(5)));\n+        assertEquals(true,  interval37.contains(new Instant(6)));\n+        assertEquals(false, interval37.contains(new Instant(7)));  // value after\n+        assertEquals(false, interval37.contains(new Instant(8)));  // value after\n+    }\n+\n+    public void testContains_RI_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.contains((ReadableInstant) null));  // value before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true,  interval37.contains((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(true,  interval37.contains((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(true,  interval37.contains((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.contains((ReadableInstant) null));  // value after\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.contains((ReadableInstant) null));  // value after\n+    }\n+\n+    public void testContains_RI_zeroDuration() {\n+        assertEquals(false, interval33.contains(new Instant(2)));  // value before\n+        assertEquals(true,  interval33.contains(new Instant(3)));\n+        assertEquals(false, interval33.contains(new Instant(4)));  // value after\n     }\n \n     //-----------------------------------------------------------------------\n     public void testContains_RInterval() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1)));\n-        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n-        \n-        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME1 + 1)));\n-        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n-        assertEquals(true, test.contains(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));\n-        \n-        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2)));\n-        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n-        assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n-        assertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2)));\n-        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2)));\n-        \n-        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2 - 1)));\n-        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 - 1)));\n-        assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 - 1)));\n-        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 - 1)));\n-        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 2, TEST_TIME2 - 1)));\n-        \n-        assertEquals(false, test.contains(new Interval(TEST_TIME1, TEST_TIME2 + 1)));\n-        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));\n-        assertEquals(false, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));\n-        assertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2 + 1)));\n-        assertEquals(false, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));\n-        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 2, TEST_TIME1 - 1)));\n-        \n-        assertEquals(true, test.contains((ReadableInterval) null));\n+        assertEquals(false, interval37.contains(new Interval(1, 2)));  // gap before\n+        assertEquals(false, interval37.contains(new Interval(2, 2)));  // gap before\n+        \n+        assertEquals(false, interval37.contains(new Interval(2, 3)));  // abuts before\n+        assertEquals(true,  interval37.contains(new Interval(3, 3)));\n+        \n+        assertEquals(false, interval37.contains(new Interval(2, 4)));  // starts before\n+        assertEquals(true,  interval37.contains(new Interval(3, 4)));\n+        assertEquals(true,  interval37.contains(new Interval(4, 4)));\n+        \n+        assertEquals(false, interval37.contains(new Interval(2, 6)));  // starts before\n+        assertEquals(true,  interval37.contains(new Interval(3, 6)));\n+        assertEquals(true,  interval37.contains(new Interval(4, 6)));\n+        assertEquals(true,  interval37.contains(new Interval(5, 6)));\n+        assertEquals(true,  interval37.contains(new Interval(6, 6)));\n+        \n+        assertEquals(false, interval37.contains(new Interval(2, 7)));  // starts before\n+        assertEquals(true,  interval37.contains(new Interval(3, 7)));\n+        assertEquals(true,  interval37.contains(new Interval(4, 7)));\n+        assertEquals(true,  interval37.contains(new Interval(5, 7)));\n+        assertEquals(true,  interval37.contains(new Interval(6, 7)));\n+        assertEquals(false, interval37.contains(new Interval(7, 7)));  // abuts after\n+        \n+        assertEquals(false, interval37.contains(new Interval(2, 8)));  // ends after\n+        assertEquals(false, interval37.contains(new Interval(3, 8)));  // ends after\n+        assertEquals(false, interval37.contains(new Interval(4, 8)));  // ends after\n+        assertEquals(false, interval37.contains(new Interval(5, 8)));  // ends after\n+        assertEquals(false, interval37.contains(new Interval(6, 8)));  // ends after\n+        assertEquals(false, interval37.contains(new Interval(7, 8)));  // abuts after\n+        assertEquals(false, interval37.contains(new Interval(8, 8)));  // gap after\n+        \n+        assertEquals(false, interval37.contains(new Interval(8, 9)));  // gap after\n+        assertEquals(false, interval37.contains(new Interval(9, 9)));  // gap after\n+    }\n+\n+    public void testContains_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.contains((ReadableInterval) null));  // gap before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true,  interval37.contains((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(true,  interval37.contains((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(true,  interval37.contains((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.contains((ReadableInterval) null));  // abuts after\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.contains((ReadableInterval) null));  // gap after\n+    }\n+\n+    public void testContains_RInterval_zeroDuration() {\n+        assertEquals(true,  interval33.contains(interval33));\n+        assertEquals(false, interval33.contains(interval37));  // zero-duration cannot contain anything\n+        assertEquals(true,  interval37.contains(interval33));\n+        assertEquals(false, interval33.contains(new Interval(1, 2)));  // zero-duration cannot contain anything\n+        assertEquals(false, interval33.contains(new Interval(8, 9)));  // zero-duration cannot contain anything\n+        assertEquals(false, interval33.contains(new Interval(1, 9)));  // zero-duration cannot contain anything\n+        \n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval33.contains((ReadableInterval) null));  // gap before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true,  interval33.contains((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval33.contains((ReadableInterval) null));  // gap after\n     }\n \n     //-----------------------------------------------------------------------\n     public void testOverlaps_RInterval() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1)));\n-        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n-        \n-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME1 + 1)));\n-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + 1, TEST_TIME1 + 1)));\n-        \n-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2)));\n-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n-        assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2)));\n-        assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2)));\n-        \n-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2 + 1)));\n-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));\n-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));\n-        assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2 + 1)));\n-        assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));\n-        \n-        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1)));\n-        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n-        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n-        \n-        assertEquals(true, test.overlaps((ReadableInterval) null));\n-        \n-        Interval empty = new Interval(TEST_TIME1, TEST_TIME1);\n-        assertEquals(true, empty.overlaps(empty));\n-        assertEquals(true, empty.overlaps(test));\n-        assertEquals(true, test.overlaps(empty));\n+        assertEquals(false, interval37.overlaps(new Interval(1, 2)));  // gap before\n+        assertEquals(false, interval37.overlaps(new Interval(2, 2)));  // gap before\n+        \n+        assertEquals(false, interval37.overlaps(new Interval(2, 3)));  // abuts before\n+        assertEquals(true,  interval37.overlaps(new Interval(3, 3)));\n+        \n+        assertEquals(true,  interval37.overlaps(new Interval(2, 4)));\n+        assertEquals(true,  interval37.overlaps(new Interval(3, 4)));\n+        assertEquals(true,  interval37.overlaps(new Interval(4, 4)));\n+        \n+        assertEquals(true,  interval37.overlaps(new Interval(2, 6)));\n+        assertEquals(true,  interval37.overlaps(new Interval(3, 6)));\n+        assertEquals(true,  interval37.overlaps(new Interval(4, 6)));\n+        assertEquals(true,  interval37.overlaps(new Interval(5, 6)));\n+        assertEquals(true,  interval37.overlaps(new Interval(6, 6)));\n+        \n+        assertEquals(true,  interval37.overlaps(new Interval(2, 7)));\n+        assertEquals(true,  interval37.overlaps(new Interval(3, 7)));\n+        assertEquals(true,  interval37.overlaps(new Interval(4, 7)));\n+        assertEquals(true,  interval37.overlaps(new Interval(5, 7)));\n+        assertEquals(true,  interval37.overlaps(new Interval(6, 7)));\n+        assertEquals(false, interval37.overlaps(new Interval(7, 7)));  // abuts after\n+        \n+        assertEquals(true,  interval37.overlaps(new Interval(2, 8)));\n+        assertEquals(true,  interval37.overlaps(new Interval(3, 8)));\n+        assertEquals(true,  interval37.overlaps(new Interval(4, 8)));\n+        assertEquals(true,  interval37.overlaps(new Interval(5, 8)));\n+        assertEquals(true,  interval37.overlaps(new Interval(6, 8)));\n+        assertEquals(false, interval37.overlaps(new Interval(7, 8)));  // abuts after\n+        assertEquals(false, interval37.overlaps(new Interval(8, 8)));  // gap after\n+        \n+        assertEquals(false, interval37.overlaps(new Interval(8, 9)));  // gap after\n+        assertEquals(false, interval37.overlaps(new Interval(9, 9)));  // gap after\n+    }\n+\n+    public void testOverlaps_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.overlaps((ReadableInterval) null));  // gap before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true,  interval37.overlaps((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(true,  interval37.overlaps((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(true,  interval37.overlaps((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.overlaps((ReadableInterval) null));  // abuts after\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.overlaps((ReadableInterval) null));  // gap after\n+        \n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true,  interval33.overlaps((ReadableInterval) null));\n+    }\n+\n+    public void testOverlaps_RInterval_zeroDuration() {\n+        assertEquals(true,  interval33.overlaps(interval33));\n+        assertEquals(true,  interval33.overlaps(interval37));\n+        assertEquals(true,  interval37.overlaps(interval33));\n+        assertEquals(false, interval33.overlaps(new Interval(1, 2)));\n+        assertEquals(false, interval33.overlaps(new Interval(8, 9)));\n+        assertEquals(true,  interval33.overlaps(new Interval(1, 9)));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testOverlap_RInterval() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        assertEquals(\n-                new Interval(TEST_TIME1, TEST_TIME1),\n-                test.overlap(new Interval(TEST_TIME1, TEST_TIME1)));\n-        assertEquals(\n-                new Interval(TEST_TIME1, TEST_TIME1),\n-                new Interval(TEST_TIME1, TEST_TIME1).overlap(test));\n-        \n-        assertEquals(\n-                new Interval(TEST_TIME1, TEST_TIME2),\n-                test.overlap(new Interval(TEST_TIME1, TEST_TIME2)));\n-        assertEquals(\n-                new Interval(TEST_TIME1, TEST_TIME2),\n-                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n-        assertEquals(\n-                new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2),\n-                test.overlap(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n-        assertEquals(\n-                null,\n-                test.overlap(new Interval(TEST_TIME2, TEST_TIME2)));\n-        assertEquals(\n-                new Interval(TEST_TIME2 - 1, TEST_TIME2),\n-                test.overlap(new Interval(TEST_TIME2 - 1, TEST_TIME2)));\n-        \n-        assertEquals(\n-                new Interval(TEST_TIME1, TEST_TIME2),\n-                test.overlap(new Interval(TEST_TIME1, TEST_TIME2 + 1)));\n-        assertEquals(\n-                new Interval(TEST_TIME1, TEST_TIME2),\n-                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));\n-        assertEquals(\n-                new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2),\n-                test.overlap(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));\n-        assertEquals(\n-                null,\n-                test.overlap(new Interval(TEST_TIME2, TEST_TIME2 + 1)));\n-        assertEquals(\n-                new Interval(TEST_TIME2 - 1, TEST_TIME2),\n-                test.overlap(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));\n-        \n-        assertEquals(\n-                null,\n-                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1)));\n-        assertEquals(\n-                null,\n-                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n-        assertEquals(\n-                new Interval(TEST_TIME1, TEST_TIME1 + 1),\n-                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n-        \n-        assertEquals(\n-                new Interval(TEST_TIME_NOW, TEST_TIME_NOW),\n-                test.overlap((ReadableInterval) null));\n+        assertEquals(null, interval37.overlap(new Interval(1, 2)));  // gap before\n+        assertEquals(null, interval37.overlap(new Interval(2, 2)));  // gap before\n+        \n+        assertEquals(null, interval37.overlap(new Interval(2, 3)));  // abuts before\n+        assertEquals(new Interval(3, 3), interval37.overlap(new Interval(3, 3)));\n+        \n+        assertEquals(new Interval(3, 4), interval37.overlap(new Interval(2, 4)));  // truncated start\n+        assertEquals(new Interval(3, 4), interval37.overlap(new Interval(3, 4)));\n+        assertEquals(new Interval(4, 4), interval37.overlap(new Interval(4, 4)));\n+        \n+        assertEquals(new Interval(3, 7), interval37.overlap(new Interval(2, 7)));  // truncated start\n+        assertEquals(new Interval(3, 7), interval37.overlap(new Interval(3, 7)));\n+        assertEquals(new Interval(4, 7), interval37.overlap(new Interval(4, 7)));\n+        assertEquals(new Interval(5, 7), interval37.overlap(new Interval(5, 7)));\n+        assertEquals(new Interval(6, 7), interval37.overlap(new Interval(6, 7)));\n+        assertEquals(null, interval37.overlap(new Interval(7, 7)));  // abuts after\n+        \n+        assertEquals(new Interval(3, 7), interval37.overlap(new Interval(2, 8)));  // truncated start and end\n+        assertEquals(new Interval(3, 7), interval37.overlap(new Interval(3, 8)));  // truncated end\n+        assertEquals(new Interval(4, 7), interval37.overlap(new Interval(4, 8)));  // truncated end\n+        assertEquals(new Interval(5, 7), interval37.overlap(new Interval(5, 8)));  // truncated end\n+        assertEquals(new Interval(6, 7), interval37.overlap(new Interval(6, 8)));  // truncated end\n+        assertEquals(null, interval37.overlap(new Interval(7, 8)));  // abuts after\n+        assertEquals(null, interval37.overlap(new Interval(8, 8)));  // gap after\n+    }\n+\n+    public void testOverlap_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(null, interval37.overlap((ReadableInterval) null));  // gap before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(new Interval(3, 3), interval37.overlap((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(new Interval(4, 4), interval37.overlap((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(new Interval(6, 6), interval37.overlap((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(null, interval37.overlap((ReadableInterval) null));  // abuts after\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(null, interval37.overlap((ReadableInterval) null));  // gap after\n+        \n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(new Interval(3, 3), interval33.overlap((ReadableInterval) null));\n     }\n \n     public void testOverlap_RInterval_zone() {\n-        Interval testA = new Interval(new DateTime(TEST_TIME1, LONDON), new DateTime(TEST_TIME2, LONDON));\n+        Interval testA = new Interval(new DateTime(3, LONDON), new DateTime(7, LONDON));\n         assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology());\n         \n-        Interval testB = new Interval(new DateTime(TEST_TIME1 + 1, MOSCOW), new DateTime(TEST_TIME2 + 1, MOSCOW));\n+        Interval testB = new Interval(new DateTime(4, MOSCOW), new DateTime(8, MOSCOW));\n         assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology());\n         \n         Interval resultAB = testA.overlap(testB);\n     }\n \n     public void testOverlap_RInterval_zoneUTC() {\n-        Interval testA = new Interval(new Instant(TEST_TIME1), new Instant(TEST_TIME2));\n+        Interval testA = new Interval(new Instant(3), new Instant(7));\n         assertEquals(ISOChronology.getInstanceUTC(), testA.getChronology());\n         \n-        Interval testB = new Interval(new Instant(TEST_TIME1 + 1), new Instant(TEST_TIME2 + 1));\n+        Interval testB = new Interval(new Instant(4), new Instant(8));\n         assertEquals(ISOChronology.getInstanceUTC(), testB.getChronology());\n         \n         Interval result = testA.overlap(testB);\n \n     //-----------------------------------------------------------------------\n     public void testGap_RInterval() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        assertEquals(\n-                new Interval(TEST_TIME2, TEST_TIME2 + 2),\n-                test.gap(new Interval(TEST_TIME2 + 2, TEST_TIME2 + 4)));\n-        assertEquals(\n-                null,\n-                test.gap(new Interval(TEST_TIME2, TEST_TIME2)));\n-\n-        assertEquals(\n-                new Interval(TEST_TIME1 - 2, TEST_TIME1),\n-                test.gap(new Interval(TEST_TIME1 - 4, TEST_TIME1 - 2)));\n-        assertEquals(\n-                null,\n-                test.gap(new Interval(TEST_TIME1 - 2, TEST_TIME1)));\n-\n-        assertEquals(\n-                null,\n-                test.gap(new Interval(TEST_TIME1, TEST_TIME2)));\n-        assertEquals(\n-                null,\n-                test.gap(new Interval(TEST_TIME1 + 1, TEST_TIME2 - 1)));\n+        assertEquals(new Interval(1, 3), interval37.gap(new Interval(0, 1)));\n+        assertEquals(new Interval(1, 3), interval37.gap(new Interval(1, 1)));\n+        \n+        assertEquals(null, interval37.gap(new Interval(2, 3)));  // abuts before\n+        assertEquals(null, interval37.gap(new Interval(3, 3)));  // abuts before\n+        \n+        assertEquals(null, interval37.gap(new Interval(4, 6)));  // overlaps\n+        \n+        assertEquals(null, interval37.gap(new Interval(3, 7)));  // overlaps\n+        assertEquals(null, interval37.gap(new Interval(6, 7)));  // overlaps\n+        assertEquals(null, interval37.gap(new Interval(7, 7)));  // abuts after\n+        \n+        assertEquals(null, interval37.gap(new Interval(6, 8)));  // overlaps\n+        assertEquals(null, interval37.gap(new Interval(7, 8)));  // abuts after\n+        assertEquals(new Interval(7, 8), interval37.gap(new Interval(8, 8)));\n+        \n+        assertEquals(null, interval37.gap(new Interval(6, 9)));  // overlaps\n+        assertEquals(null, interval37.gap(new Interval(7, 9)));  // abuts after\n+        assertEquals(new Interval(7, 8), interval37.gap(new Interval(8, 9)));\n+        assertEquals(new Interval(7, 9), interval37.gap(new Interval(9, 9)));\n+    }\n+\n+    public void testGap_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(new Interval(2, 3),  interval37.gap((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(null,  interval37.gap((ReadableInterval) null));  // abuts before\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(null,  interval37.gap((ReadableInterval) null));  // overlaps\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(null,  interval37.gap((ReadableInterval) null));  // overlaps\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(null,  interval37.gap((ReadableInterval) null));  // abuts after\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(new Interval(7, 8),  interval37.gap((ReadableInterval) null));\n     }\n \n     public void testGap_RInterval_zone() {\n-        Interval testA = new Interval(new DateTime(TEST_TIME1, LONDON), new DateTime(TEST_TIME2, LONDON));\n+        Interval testA = new Interval(new DateTime(3, LONDON), new DateTime(7, LONDON));\n         assertEquals(ISOChronology.getInstance(LONDON), testA.getChronology());\n         \n-        Interval testB = new Interval(new DateTime(TEST_TIME1 - 100, MOSCOW), new DateTime(TEST_TIME1 - 50, MOSCOW));\n+        Interval testB = new Interval(new DateTime(1, MOSCOW), new DateTime(2, MOSCOW));\n         assertEquals(ISOChronology.getInstance(MOSCOW), testB.getChronology());\n         \n         Interval resultAB = testA.gap(testB);\n     }\n \n     public void testGap_RInterval_zoneUTC() {\n-        Interval testA = new Interval(new Instant(TEST_TIME1), new Instant(TEST_TIME2));\n+        Interval testA = new Interval(new Instant(3), new Instant(7));\n         assertEquals(ISOChronology.getInstanceUTC(), testA.getChronology());\n         \n-        Interval testB = new Interval(new Instant(TEST_TIME1 - 100), new Instant(TEST_TIME1 - 50));\n+        Interval testB = new Interval(new Instant(1), new Instant(2));\n         assertEquals(ISOChronology.getInstanceUTC(), testB.getChronology());\n         \n         Interval result = testA.gap(testB);\n \n     //-----------------------------------------------------------------------\n     public void testAbuts_RInterval() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        assertEquals(\n-                false,\n-                test.abuts(new Interval(TEST_TIME2 + 2, TEST_TIME2 + 4)));\n-        assertEquals(\n-                true,\n-                test.abuts(new Interval(TEST_TIME2, TEST_TIME2)));\n-\n-        assertEquals(\n-                false,\n-                test.abuts(new Interval(TEST_TIME1 - 4, TEST_TIME1 - 2)));\n-        assertEquals(\n-                true,\n-                test.abuts(new Interval(TEST_TIME1 - 2, TEST_TIME1)));\n-\n-        assertEquals(\n-                false,\n-                test.abuts(new Interval(TEST_TIME1, TEST_TIME2)));\n-        assertEquals(\n-                false,\n-                test.abuts(new Interval(TEST_TIME1 + 1, TEST_TIME2 - 1)));\n-    }\n-\n-    //-----------------------------------------------------------------------\n+        assertEquals(false, interval37.abuts(new Interval(1, 2)));  // gap before\n+        assertEquals(false, interval37.abuts(new Interval(2, 2)));  // gap before\n+        \n+        assertEquals(true,  interval37.abuts(new Interval(2, 3)));\n+        assertEquals(true,  interval37.abuts(new Interval(3, 3)));\n+        \n+        assertEquals(false, interval37.abuts(new Interval(2, 4)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(3, 4)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(4, 4)));  // overlaps\n+        \n+        assertEquals(false, interval37.abuts(new Interval(2, 6)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(3, 6)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(4, 6)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(5, 6)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(6, 6)));  // overlaps\n+        \n+        assertEquals(false, interval37.abuts(new Interval(2, 7)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(3, 7)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(4, 7)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(5, 7)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(6, 7)));  // overlaps\n+        assertEquals(true,  interval37.abuts(new Interval(7, 7)));\n+        \n+        assertEquals(false, interval37.abuts(new Interval(2, 8)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(3, 8)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(4, 8)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(5, 8)));  // overlaps\n+        assertEquals(false, interval37.abuts(new Interval(6, 8)));  // overlaps\n+        assertEquals(true,  interval37.abuts(new Interval(7, 8)));\n+        assertEquals(false, interval37.abuts(new Interval(8, 8)));  // gap after\n+        \n+        assertEquals(false, interval37.abuts(new Interval(8, 9)));  // gap after\n+        assertEquals(false, interval37.abuts(new Interval(9, 9)));  // gap after\n+    }\n+\n+    public void testAbuts_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false,  interval37.abuts((ReadableInterval) null));  // gap before\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true,  interval37.abuts((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false,  interval37.abuts((ReadableInterval) null));  // overlaps\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false,  interval37.abuts((ReadableInterval) null));  // overlaps\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(true,  interval37.abuts((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false,  interval37.abuts((ReadableInterval) null));  // gap after\n+    }\n+\n+    // -----------------------------------------------------------------------\n     public void testIsBefore_long() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        assertEquals(false, test.isBefore(TEST_TIME1 - 1));\n-        assertEquals(false, test.isBefore(TEST_TIME1));\n-        assertEquals(false, test.isBefore(TEST_TIME1 + 1));\n-        \n-        assertEquals(false, test.isBefore(TEST_TIME2 - 1));\n-        assertEquals(true, test.isBefore(TEST_TIME2));\n-        assertEquals(true, test.isBefore(TEST_TIME2 + 1));\n+        assertEquals(false, interval37.isBefore(2));\n+        assertEquals(false, interval37.isBefore(3));\n+        assertEquals(false, interval37.isBefore(4));\n+        assertEquals(false, interval37.isBefore(5));\n+        assertEquals(false, interval37.isBefore(6));\n+        assertEquals(true,  interval37.isBefore(7));\n+        assertEquals(true,  interval37.isBefore(8));\n     }\n \n     public void testIsBeforeNow() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);\n-        assertEquals(false, test.isBeforeNow());\n-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);\n-        assertEquals(true, test.isBeforeNow());\n-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 + 1);\n-        assertEquals(true, test.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval37.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval37.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false, interval37.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(true, interval37.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(true, interval37.isBeforeNow());\n     }\n \n     public void testIsBefore_RI() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        assertEquals(false, test.isBefore(new Instant(TEST_TIME1 - 1)));\n-        assertEquals(false, test.isBefore(new Instant(TEST_TIME1)));\n-        assertEquals(false, test.isBefore(new Instant(TEST_TIME1 + 1)));\n-        \n-        assertEquals(false, test.isBefore(new Instant(TEST_TIME2 - 1)));\n-        assertEquals(true, test.isBefore(new Instant(TEST_TIME2)));\n-        assertEquals(true, test.isBefore(new Instant(TEST_TIME2 + 1)));\n-        \n-        assertEquals(false, test.isBefore((ReadableInstant) null));\n+        assertEquals(false, interval37.isBefore(new Instant(2)));\n+        assertEquals(false, interval37.isBefore(new Instant(3)));\n+        assertEquals(false, interval37.isBefore(new Instant(4)));\n+        assertEquals(false, interval37.isBefore(new Instant(5)));\n+        assertEquals(false, interval37.isBefore(new Instant(6)));\n+        assertEquals(true,  interval37.isBefore(new Instant(7)));\n+        assertEquals(true,  interval37.isBefore(new Instant(8)));\n+    }\n+\n+    public void testIsBefore_RI_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.isBefore((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval37.isBefore((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval37.isBefore((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false, interval37.isBefore((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(true, interval37.isBefore((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(true, interval37.isBefore((ReadableInstant) null));\n     }\n \n     public void testIsBefore_RInterval() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));\n-        assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1)));\n-        assertEquals(false, test.isBefore(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));\n-        \n-        assertEquals(false, test.isBefore(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));\n-        assertEquals(true, test.isBefore(new Interval(TEST_TIME2, Long.MAX_VALUE)));\n-        assertEquals(true, test.isBefore(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE)));\n-        \n-        assertEquals(false, test.isBefore((ReadableInterval) null));\n+        assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 2)));\n+        assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 3)));\n+        assertEquals(false, interval37.isBefore(new Interval(Long.MIN_VALUE, 4)));\n+        \n+        assertEquals(false, interval37.isBefore(new Interval(6, Long.MAX_VALUE)));\n+        assertEquals(true, interval37.isBefore(new Interval(7, Long.MAX_VALUE)));\n+        assertEquals(true, interval37.isBefore(new Interval(8, Long.MAX_VALUE)));\n+    }\n+\n+    public void testIsBefore_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(false, interval37.isBefore((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval37.isBefore((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval37.isBefore((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false, interval37.isBefore((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(true, interval37.isBefore((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(true, interval37.isBefore((ReadableInterval) null));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testIsAfter_long() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        assertEquals(true, test.isAfter(TEST_TIME1 - 1));\n-        assertEquals(false, test.isAfter(TEST_TIME1));\n-        assertEquals(false, test.isAfter(TEST_TIME1 + 1));\n-        \n-        assertEquals(false, test.isAfter(TEST_TIME2 - 1));\n-        assertEquals(false, test.isAfter(TEST_TIME2));\n-        assertEquals(false, test.isAfter(TEST_TIME2 + 1));\n+        assertEquals(true,  interval37.isAfter(2));\n+        assertEquals(false, interval37.isAfter(3));\n+        assertEquals(false, interval37.isAfter(4));\n+        assertEquals(false, interval37.isAfter(5));\n+        assertEquals(false, interval37.isAfter(6));\n+        assertEquals(false, interval37.isAfter(7));\n+        assertEquals(false, interval37.isAfter(8));\n     }\n \n     public void testIsAfterNow() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);\n-        assertEquals(true, test.isAfterNow());\n-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);\n-        assertEquals(false, test.isAfterNow());\n-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + 1);\n-        assertEquals(false, test.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(true, interval37.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval37.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval37.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false, interval37.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.isAfterNow());\n     }\n \n     public void testIsAfter_RI() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        assertEquals(true, test.isAfter(new Instant(TEST_TIME1 - 1)));\n-        assertEquals(false, test.isAfter(new Instant(TEST_TIME1)));\n-        assertEquals(false, test.isAfter(new Instant(TEST_TIME1 + 1)));\n-        \n-        assertEquals(false, test.isAfter(new Instant(TEST_TIME2 - 1)));\n-        assertEquals(false, test.isAfter(new Instant(TEST_TIME2)));\n-        assertEquals(false, test.isAfter(new Instant(TEST_TIME2 + 1)));\n-        \n-        assertEquals(false, test.isAfter((ReadableInstant) null));\n+        assertEquals(true,  interval37.isAfter(new Instant(2)));\n+        assertEquals(false, interval37.isAfter(new Instant(3)));\n+        assertEquals(false, interval37.isAfter(new Instant(4)));\n+        assertEquals(false, interval37.isAfter(new Instant(5)));\n+        assertEquals(false, interval37.isAfter(new Instant(6)));\n+        assertEquals(false, interval37.isAfter(new Instant(7)));\n+        assertEquals(false, interval37.isAfter(new Instant(8)));\n+    }\n+\n+    public void testIsAfter_RI_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(true, interval37.isAfter((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(false, interval37.isAfter((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval37.isAfter((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false, interval37.isAfter((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.isAfter((ReadableInstant) null));\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.isAfter((ReadableInstant) null));\n     }\n \n     public void testIsAfter_RInterval() {\n-        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n-        \n-        assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 - 1)));\n-        assertEquals(true, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1)));\n-        assertEquals(false, test.isAfter(new Interval(Long.MIN_VALUE, TEST_TIME1 + 1)));\n-        \n-        assertEquals(false, test.isAfter(new Interval(TEST_TIME2 - 1, Long.MAX_VALUE)));\n-        assertEquals(false, test.isAfter(new Interval(TEST_TIME2, Long.MAX_VALUE)));\n-        assertEquals(false, test.isAfter(new Interval(TEST_TIME2 + 1, Long.MAX_VALUE)));\n-        \n-        assertEquals(false, test.isAfter((ReadableInterval) null));\n+        assertEquals(true, interval37.isAfter(new Interval(Long.MIN_VALUE, 2)));\n+        assertEquals(true, interval37.isAfter(new Interval(Long.MIN_VALUE, 3)));\n+        assertEquals(false, interval37.isAfter(new Interval(Long.MIN_VALUE, 4)));\n+        \n+        assertEquals(false, interval37.isAfter(new Interval(6, Long.MAX_VALUE)));\n+        assertEquals(false, interval37.isAfter(new Interval(7, Long.MAX_VALUE)));\n+        assertEquals(false, interval37.isAfter(new Interval(8, Long.MAX_VALUE)));\n+    }\n+\n+    public void testIsAfter_RInterval_null() {\n+        DateTimeUtils.setCurrentMillisFixed(2);\n+        assertEquals(true, interval37.isAfter((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(3);\n+        assertEquals(true, interval37.isAfter((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(4);\n+        assertEquals(false, interval37.isAfter((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(6);\n+        assertEquals(false, interval37.isAfter((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(7);\n+        assertEquals(false, interval37.isAfter((ReadableInterval) null));\n+        DateTimeUtils.setCurrentMillisFixed(8);\n+        assertEquals(false, interval37.isAfter((ReadableInterval) null));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1153951798, "metainfo": ""}