{"sha": "96f76a3342f6fdaadd24638002574a35c6d24d80", "log": "Add Chronology.getType() method   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Chronology.java\n+++ b/JodaTime/src/java/org/joda/time/Chronology.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Returns the ChronologyType constant for this Chronology.\n+     * <p>\n+     * This method should ideally never return null. However ChronologyType\n+     * was only added in v1.2, and any chronology written before then\n+     * will not correctly override this method to return the type.\n+     *\n+     * @return the chronology type, correct implementations never return null\n+     * @since 1.2\n+     */\n+    public ChronologyType getType() {\n+        // all subclasses should override this method\n+        return null;\n+    }\n+\n+    /**\n      * Returns the DateTimeZone that this Chronology operates in, or null if\n      * unspecified.\n      *\n-     * @return DateTimeZone null if unspecified\n+     * @return the DateTimeZone, null if unspecified\n      */\n     public abstract DateTimeZone getZone();\n \n--- a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java\n import java.util.Map;\n \n import org.joda.time.Chronology;\n+import org.joda.time.ChronologyType;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeField;\n         return base == null ? getInstanceUTC() : getInstance(base.getZone());\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the ChronologyType constant for this Chronology.\n+     *\n+     * @return the chronology type\n+     * @since 1.2\n+     */\n+    public ChronologyType getType() {\n+        return ChronologyType.buddhist();\n+    }\n+\n     // Conversion\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n import java.util.Map;\n \n import org.joda.time.Chronology;\n+import org.joda.time.ChronologyType;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeField;\n         return base == null ? getInstanceUTC() : getInstance(base.getZone());\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the ChronologyType constant for this Chronology.\n+     *\n+     * @return the chronology type\n+     * @since 1.2\n+     */\n+    public ChronologyType getType() {\n+        return ChronologyType.coptic();\n+    }\n+\n     // Conversion\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n import java.util.Map;\n \n import org.joda.time.Chronology;\n+import org.joda.time.ChronologyType;\n import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n         return DateTimeZone.UTC;\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the ChronologyType constant for this Chronology.\n+     *\n+     * @return the chronology type\n+     * @since 1.2\n+     */\n+    public ChronologyType getType() {\n+        return ChronologyType.gj();\n+    }\n+\n     // Conversion\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GregorianChronology.java\n import java.util.Map;\n \n import org.joda.time.Chronology;\n+import org.joda.time.ChronologyType;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeZone;\n \n     private Object readResolve() {\n         Chronology base = getBase();\n         return base == null ? getInstanceUTC() : getInstance(base.getZone());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the ChronologyType constant for this Chronology.\n+     *\n+     * @return the chronology type\n+     * @since 1.2\n+     */\n+    public ChronologyType getType() {\n+        return ChronologyType.gregorian();\n     }\n \n     // Conversion\n--- a/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java\n import java.util.Map;\n \n import org.joda.time.Chronology;\n+import org.joda.time.ChronologyType;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeZone;\n import org.joda.time.field.DividedDateTimeField;\n         super(base, null);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the ChronologyType constant for this Chronology.\n+     *\n+     * @return the chronology type\n+     * @since 1.2\n+     */\n+    public ChronologyType getType() {\n+        return ChronologyType.iso();\n+    }\n+\n     // Conversion\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java\n import java.util.Map;\n \n import org.joda.time.Chronology;\n+import org.joda.time.ChronologyType;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeZone;\n         return base == null ? getInstanceUTC() : getInstance(base.getZone());\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the ChronologyType constant for this Chronology.\n+     *\n+     * @return the chronology type\n+     * @since 1.2\n+     */\n+    public ChronologyType getType() {\n+        return ChronologyType.julian();\n+    }\n+\n     // Conversion\n     //-----------------------------------------------------------------------\n     /**", "timestamp": 1125787558, "metainfo": ""}