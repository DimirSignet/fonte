{"sha": "9b298d5608250e0c72c452d0a2e8664491d9b9be", "log": "Add LocalDate.toLocalDateTime  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDate.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Converts this object to a LocalDateTime using a LocalTime to fill in\n+     * the missing fields.\n+     * <p>\n+     * The resulting chronology is determined by the chronology of this\n+     * LocalDate. The chronology of the time must also match.\n+     * If the time is null an exception is thrown.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     *\n+     * @param time  the time of day to use, must not be null\n+     * @return the LocalDateTime instance\n+     * @throws IllegalArgumentException if the time is null\n+     * @throws IllegalArgumentException if the chronology of the time does not match\n+     * @since 1.5\n+     */\n+    public LocalDateTime toLocalDateTime(LocalTime time) {\n+        if (time == null) {\n+            throw new IllegalArgumentException(\"The time must not be null\");\n+        }\n+        if (getChronology() != time.getChronology()) {\n+            throw new IllegalArgumentException(\"The chronology of the time does not match\");\n+        }\n+        long localMillis = getLocalMillis() + time.getLocalMillis();\n+        return new LocalDateTime(localMillis, getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Converts this object to a DateTime using a LocalTime to fill in the\n      * missing fields and using the default time zone.\n      * <p>\n--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testToLocalDateTime_LocalTime() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO);\n+        \n+        LocalDateTime test = base.toLocalDateTime(tod);\n+        check(base, 2005, 6, 9);\n+        LocalDateTime expected = new LocalDateTime(2005, 6, 9, 12, 13, 14, 15, COPTIC_UTC);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToLocalDateTime_nullLocalTime() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        \n+        try {\n+            base.toLocalDateTime((LocalTime) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testToLocalDateTime_wrongChronologyLocalTime() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        LocalTime tod = new LocalTime(12, 13, 14, 15, BUDDHIST_PARIS); // PARIS irrelevant\n+        \n+        try {\n+            base.toLocalDateTime(tod);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToDateTime_LocalTime() {\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n         LocalTime tod = new LocalTime(12, 13, 14, 15, COPTIC_TOKYO);", "timestamp": 1177857625, "metainfo": ""}