{"sha": "dba815751a0cd98b9bdfabbccb939c03bfd5c079", "log": "Tabs to spaces   ", "commit": "\n--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java\n+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/FormatSupport.java\n     }\n \n     if (var != null) {\n-      pageContext.setAttribute(var, formatted, scope);\t\n+      pageContext.setAttribute(var, formatted, scope);\n     } \n     else {\n       try {\n--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java\n+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/JodaTagLibraryValidator.java\n   //*********************************************************************\n   // Validation and configuration state (protected)\n \n-  private String uri;\t\t// our taglib's uri (as passed by JSP container on XML View)\n-  private String prefix;\t// our taglib's prefix\n-  private Vector messageVector;\t// temporary error messages\n-  private Map config;\t\t// configuration (Map of Sets)\n-  private boolean failed;\t// have we failed >0 times?\n-  private String lastElementId;\t// the last element we've seen\n+  private String uri;    // our taglib's uri (as passed by JSP container on XML View)\n+  private String prefix;  // our taglib's prefix\n+  private Vector messageVector;  // temporary error messages\n+  private Map config;    // configuration (Map of Sets)\n+  private boolean failed;  // have we failed >0 times?\n+  private String lastElementId;  // the last element we've seen\n \n   //*********************************************************************\n   // Constructor and lifecycle management\n     }\n \n     public void characters(char[] ch, int start, int length) {\n-      bodyNecessary = false;\t\t// body is no longer necessary!\n+      bodyNecessary = false;    // body is no longer necessary!\n \n       // ignore strings that are just whitespace\n       String s = new String(ch, start, length).trim();\n       if (bodyNecessary) {\n         fail(Resources.getMessage(\"TLV_MISSING_BODY\", lastElementName));\n       }\n-      bodyIllegal = false;\t// reset: we've left the tag\n+      bodyIllegal = false;  // reset: we've left the tag\n \n       // update our depth\n       depth--;\n--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java\n+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/ParseDateTimeSupport.java\n public abstract class ParseDateTimeSupport extends BodyTagSupport {\n \n   protected String value;                      // 'value' attribute\n-  protected boolean valueSpecified;\t       // status\n+  protected boolean valueSpecified;         // status\n   protected String pattern;                    // 'pattern' attribute\n   protected String style;                      // 'style' attribute\n   protected DateTimeZone dateTimeZone;         // 'dateTimeZone' attribute\n     }\n \n     if (var != null) {\n-      pageContext.setAttribute(var, parsed, scope);\t\n+      pageContext.setAttribute(var, parsed, scope);  \n     }\n     else {\n       try {\n--- a/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java\n+++ b/JodaTimeContrib/jsptags/src/java/org/joda/time/contrib/jsptag/Resources.java\n \n     /** The location of our resources. */\n     private static final String RESOURCE_LOCATION\n-\t= \"org.joda.time.contrib.jsptag.Resources\";\n+  = \"org.joda.time.contrib.jsptag.Resources\";\n \n     /** Our class-wide ResourceBundle. */\n     private static ResourceBundle rb =\n-\tResourceBundle.getBundle(RESOURCE_LOCATION);\n+  ResourceBundle.getBundle(RESOURCE_LOCATION);\n \n \n     //*********************************************************************\n \n     /** Retrieves a message with no arguments. */\n     public static String getMessage(String name)\n-\t    throws MissingResourceException {\n-\treturn rb.getString(name);\n+      throws MissingResourceException {\n+  return rb.getString(name);\n     }\n \n     /** Retrieves a message with arbitrarily many arguments. */\n     public static String getMessage(String name, Object[] a)\n-\t    throws MissingResourceException {\n-\tString res = rb.getString(name);\n-\treturn MessageFormat.format(res, a);\n+      throws MissingResourceException {\n+  String res = rb.getString(name);\n+  return MessageFormat.format(res, a);\n     }\n \n     /** Retrieves a message with one argument. */\n     public static String getMessage(String name, Object a1)\n-\t    throws MissingResourceException {\n-\treturn getMessage(name, new Object[] { a1 });\n+      throws MissingResourceException {\n+  return getMessage(name, new Object[] { a1 });\n     }\n \n     /** Retrieves a message with two arguments. */\n     public static String getMessage(String name, Object a1, Object a2)\n-\t    throws MissingResourceException {\n-\treturn getMessage(name, new Object[] { a1, a2 });\n+      throws MissingResourceException {\n+  return getMessage(name, new Object[] { a1, a2 });\n     }\n \n     /** Retrieves a message with three arguments. */\n     public static String getMessage(String name,\n-\t\t\t\t    Object a1,\n-\t\t\t\t    Object a2,\n-\t\t\t\t    Object a3)\n-\t    throws MissingResourceException {\n-\treturn getMessage(name, new Object[] { a1, a2, a3 });\n+            Object a1,\n+            Object a2,\n+            Object a3)\n+      throws MissingResourceException {\n+  return getMessage(name, new Object[] { a1, a2, a3 });\n     }\n \n     /** Retrieves a message with four arguments. */\n     public static String getMessage(String name,\n-\t\t\t \t    Object a1,\n-\t\t\t\t    Object a2,\n-\t\t\t\t    Object a3,\n-\t\t\t\t    Object a4)\n-\t    throws MissingResourceException {\n-\treturn getMessage(name, new Object[] { a1, a2, a3, a4 });\n+             Object a1,\n+            Object a2,\n+            Object a3,\n+            Object a4)\n+      throws MissingResourceException {\n+  return getMessage(name, new Object[] { a1, a2, a3, a4 });\n     }\n \n     /** Retrieves a message with five arguments. */\n     public static String getMessage(String name,\n-\t\t\t\t    Object a1,\n-\t\t\t\t    Object a2,\n-\t\t\t\t    Object a3,\n-\t\t\t\t    Object a4,\n-\t\t\t\t    Object a5)\n-\t    throws MissingResourceException {\n-\treturn getMessage(name, new Object[] { a1, a2, a3, a4, a5 });\n+            Object a1,\n+            Object a2,\n+            Object a3,\n+            Object a4,\n+            Object a5)\n+      throws MissingResourceException {\n+  return getMessage(name, new Object[] { a1, a2, a3, a4, a5 });\n     }\n \n     /** Retrieves a message with six arguments. */\n     public static String getMessage(String name,\n-\t\t\t\t    Object a1,\n-\t\t\t\t    Object a2,\n-\t\t\t\t    Object a3,\n-\t\t\t\t    Object a4,\n-\t\t\t\t    Object a5,\n-\t\t\t\t    Object a6)\n-\t    throws MissingResourceException {\n-\treturn getMessage(name, new Object[] { a1, a2, a3, a4, a5, a6 });\n+            Object a1,\n+            Object a2,\n+            Object a3,\n+            Object a4,\n+            Object a5,\n+            Object a6)\n+      throws MissingResourceException {\n+  return getMessage(name, new Object[] { a1, a2, a3, a4, a5, a6 });\n     }\n \n }", "timestamp": 1121902836, "metainfo": ""}