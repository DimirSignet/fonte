{"sha": "b5416a54ea0d39429dc86cf0703509559c70886e", "log": "Checkstyle   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfMonthField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfMonthField.java\n  */\n class TestGJDayOfMonthField extends TestGJDateTimeField {\n     public TestGJDayOfMonthField(TestGJChronology chrono) {\n-        super(DateTimeFieldType.dayOfMonth(), chrono.MILLIS_PER_DAY, chrono);\n+        super(DateTimeFieldType.dayOfMonth(), TestGJChronology.MILLIS_PER_DAY, chrono);\n     }\n \n     public int get(long millis) {\n     }\n \n     public long add(long millis, long value) {\n-        return millis + value * iChronology.MILLIS_PER_DAY;\n+        return millis + value * TestGJChronology.MILLIS_PER_DAY;\n     }\n \n     public DurationField getRangeDurationField() {\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfWeekField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfWeekField.java\n  */\n class TestGJDayOfWeekField extends TestGJDateTimeField {\n     public TestGJDayOfWeekField(TestGJChronology chrono) {\n-        super(DateTimeFieldType.dayOfWeek(), chrono.MILLIS_PER_DAY, chrono);\n+        super(DateTimeFieldType.dayOfWeek(), TestGJChronology.MILLIS_PER_DAY, chrono);\n     }\n \n     public int get(long millis) {\n-        int dayOfWeek = (int)iChronology.mod(iChronology.fixedFromMillis(millis), 7);\n+        int dayOfWeek = (int) TestGJChronology.mod(iChronology.fixedFromMillis(millis), 7);\n         if (dayOfWeek == 0) {\n             dayOfWeek = 7;\n         }\n     }\n \n     public long add(long millis, long value) {\n-        return millis + value * iChronology.MILLIS_PER_DAY;\n+        return millis + value * TestGJChronology.MILLIS_PER_DAY;\n     }\n \n     public DurationField getRangeDurationField() {\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfYearField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGJDayOfYearField.java\n  */\n class TestGJDayOfYearField extends TestGJDateTimeField {\n     public TestGJDayOfYearField(TestGJChronology chrono) {\n-        super(DateTimeFieldType.dayOfYear(), chrono.MILLIS_PER_DAY, chrono);\n+        super(DateTimeFieldType.dayOfYear(), TestGJChronology.MILLIS_PER_DAY, chrono);\n     }\n \n     public int get(long millis) {\n     }\n \n     public long add(long millis, long value) {\n-        return millis + value * iChronology.MILLIS_PER_DAY;\n+        return millis + value * TestGJChronology.MILLIS_PER_DAY;\n     }\n \n     public DurationField getRangeDurationField() {\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGJMonthOfYearField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGJMonthOfYearField.java\n \n     public long add(long millis, long value) {\n         int newYear = iChronology.year().get(millis)\n-            + (int)iChronology.div(value, 12);\n-        int newMonth = get(millis) + (int)iChronology.mod(value, 12);\n+            + (int)TestGJChronology.div(value, 12);\n+        int newMonth = get(millis) + (int)TestGJChronology.mod(value, 12);\n         if (newMonth > 12) {\n             newYear++;\n             newMonth -= 12;\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGJWeekOfWeekyearField.java\n class TestGJWeekOfWeekyearField extends TestGJDateTimeField {\n     public TestGJWeekOfWeekyearField(TestGJChronology chrono) {\n         super(DateTimeFieldType.weekOfWeekyear(),\n-              (long)(chrono.MILLIS_PER_DAY * 7), chrono);\n+              (long)(TestGJChronology.MILLIS_PER_DAY * 7), chrono);\n     }\n \n     public int get(long millis) {\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestGregorianChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestGregorianChronology.java\n  *  limitations under the License.\n  */\n package org.joda.time.chrono.gj;\n-\n-import org.joda.time.Chronology;\n-import org.joda.time.DateTimeField;\n-import org.joda.time.DateTimeZone;\n \n /**\n  * A reference Gregorian chronology implementation, intended for testing\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestJulianChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestJulianChronology.java\n  */\n package org.joda.time.chrono.gj;\n \n-import org.joda.time.Chronology;\n import org.joda.time.DateTimeField;\n-import org.joda.time.DateTimeZone;\n \n /**\n  * A reference Julian chronology implementation, intended for testing purposes\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestJulianMonthOfYearField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestJulianMonthOfYearField.java\n \n     public long add(long millis, long value) {\n         int year = iChronology.year().get(millis);\n-        int newYear = year + (int)iChronology.div(value, 12);\n+        int newYear = year + (int)TestGJChronology.div(value, 12);\n         if (year < 0) {\n             if (newYear >= 0) {\n                 newYear++;\n                 newYear--;\n             }\n         }\n-        int newMonth = get(millis) + (int)iChronology.mod(value, 12);\n+        int newMonth = get(millis) + (int)TestGJChronology.mod(value, 12);\n         if (newMonth > 12) {\n             if (newYear == -1) {\n                 newYear = 1;", "timestamp": 1108254493, "metainfo": ""}