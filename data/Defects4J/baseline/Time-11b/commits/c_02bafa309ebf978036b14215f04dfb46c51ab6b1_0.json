{"sha": "02bafa309ebf978036b14215f04dfb46c51ab6b1", "log": "Update validate to be more flexible   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Chronology.java\n+++ b/JodaTime/src/java/org/joda/time/Chronology.java\n         throws IllegalArgumentException;\n \n     /**\n-     * Validates whether the fields stored in a partial instant are valid.\n+     * Validates whether the values are valid for the fields of a partial instant.\n      *\n      * @param instant  the partial instant to validate\n+     * @param values  the values to validate, not null, match fields in partial\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n-    void validate(ReadablePartial instant);\n+    void validate(ReadablePartial instant, int[] values);\n \n     // Millis\n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java\n     /**\n      * Validates whether the fields stored in a partial instant are valid.\n      * <p>\n-     * This implementation uses {@link DateTimeField#getMinimumValue()} and\n-     * {@link DateTimeField#getMaximumValue()}.\n+     * This implementation uses {@link DateTimeField#getMinimumValue(ReadablePartial, int[])}\n+     * and {@link DateTimeField#getMaximumValue(ReadablePartial, int[])}.\n      *\n      * @param instant  the partial instant to validate\n+     * @param values  the values to validate, not null\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n-    public void validate(ReadablePartial instant) {\n+    public void validate(ReadablePartial instant, int[] values) {\n         DateTimeField[] fields = instant.getFields();\n-        int[] values = instant.getValues();\n+        // check values in standard range, catching really stupid cases like -1\n+        // this means that the second check will not hit trouble\n         for (int i = 0; i < fields.length; i++) {\n             if (values[i] < fields[i].getMinimumValue()) {\n                 throw new IllegalArgumentException(\"Value \" + values[i] +\n                         \" for \" + fields[i].getName() + \" is greater than maximum\");\n             }\n         }\n+        // check values in specific range, catching really cases like 30th Feb\n         for (int i = 0; i < fields.length; i++) {\n-            if (values[i] < fields[i].getMinimumValue(instant)) {\n+            if (values[i] < fields[i].getMinimumValue(instant, values)) {\n                 throw new IllegalArgumentException(\"Value \" + values[i] +\n                         \" for \" + fields[i].getName() + \" is less than minimum\");\n             }\n-            if (values[i] > fields[i].getMaximumValue(instant)) {\n+            if (values[i] > fields[i].getMaximumValue(instant, values)) {\n                 throw new IllegalArgumentException(\"Value \" + values[i] +\n                         \" for \" + fields[i].getName() + \" is greater than maximum\");\n             }", "timestamp": 1093185686, "metainfo": ""}