{"sha": "356cd0e1ce58b9f9e5aecd5b131a12754bb22877", "log": "Fixed bug in parsing periods that had fields which always printed zeros.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n      * @see #appendPrefix\n      */\n     public PeriodFormatterBuilder appendSuffix(String singularText,\n-                                                 String pluralText) {\n+                                               String pluralText) {\n         if (singularText == null || pluralText == null) {\n             throw new IllegalArgumentException();\n         }\n             } else {\n                 limit = Math.min(iMaxParsedDigits, text.length() - position);\n             }\n-            \n+\n             // validate input number\n             int length = 0;\n             int fractPos = -1;\n                 return ~position;\n             }\n \n-            if (position + length != suffixPos) {\n+            if (suffixPos >= 0 && position + length != suffixPos) {\n                 // If there are additional non-digit characters before the\n                 // suffix is reached, then assume that the suffix found belongs\n                 // to a field not yet reached. Return original position so that\n--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java\n         assertEquals(new Period(6, 3, 0, 2, 0, 0, 0, 0), p);\n     }\n \n+    public void testParseCustom1() {\n+        PeriodFormatter formatter = new PeriodFormatterBuilder()\n+            .printZeroAlways()\n+            .appendHours()\n+            .appendSuffix(\":\")\n+            .minimumPrintedDigits(2)\n+            .appendMinutes()\n+            .toFormatter();\n+\n+        Period p;\n+\n+        p = new Period(47, 55, 0, 0);\n+        assertEquals(\"47:55\", formatter.print(p));\n+        assertEquals(p, formatter.parsePeriod(\"47:55\"));\n+        assertEquals(p, formatter.parsePeriod(\"047:055\"));\n+\n+        p = new Period(7, 5, 0, 0);\n+        assertEquals(\"7:05\", formatter.print(p));\n+        assertEquals(p, formatter.parsePeriod(\"7:05\"));\n+        assertEquals(p, formatter.parsePeriod(\"7:5\"));\n+        assertEquals(p, formatter.parsePeriod(\"07:05\"));\n+\n+        p = new Period(0, 5, 0, 0);\n+        assertEquals(\"0:05\", formatter.print(p));\n+        assertEquals(p, formatter.parsePeriod(\"0:05\"));\n+        assertEquals(p, formatter.parsePeriod(\"0:5\"));\n+        assertEquals(p, formatter.parsePeriod(\"00:005\"));\n+        assertEquals(p, formatter.parsePeriod(\"0:005\"));\n+\n+        p = new Period(0, 0, 0, 0);\n+        assertEquals(\"0:00\", formatter.print(p));\n+        assertEquals(p, formatter.parsePeriod(\"0:00\"));\n+        assertEquals(p, formatter.parsePeriod(\"0:0\"));\n+        assertEquals(p, formatter.parsePeriod(\"00:00\"));\n+    }\n+\n }", "timestamp": 1118333009, "metainfo": ""}