{"sha": "621b83eafe8dcddf5c1b108c41051b5917efbbd9", "log": "Test LocalTime   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalTime.java\n     /** Serialization lock */\n     private static final long serialVersionUID = -12873158713873L;\n \n+    /** Constant for midnight. */\n+    public static final LocalTime MIDNIGHT = new LocalTime(0, 0, 0, 0);\n+\n     /** The index of the hourOfDay field in the field array */\n     private static final int HOUR_OF_DAY = 0;\n     /** The index of the minuteOfHour field in the field array */\n \n     /** The local millis from 1970-01-01T00:00:00 */\n     private long iLocalMillis;\n-    /** The chronology to use in UTC */\n+    /** The chronology to use, in UTC */\n     private Chronology iChronology;\n \n     //-----------------------------------------------------------------------\n      */\n     public static LocalTime now(Chronology chronology) {\n         return forInstant(DateTimeUtils.currentTimeMillis(), chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructs a LocalTime from the specified millis of day using the\n+     * ISO chronology.\n+     * <p>\n+     * The millisOfDay value may exceed the number of millis in one day,\n+     * but additional days will be ignored.\n+     * This method uses the UTC time zone internally.\n+     *\n+     * @param millisOfDay  the number of milliseconds into a day to convert\n+     */\n+    public static LocalTime fromMillisOfDay(long millisOfDay) {\n+        return fromMillisOfDay(millisOfDay, null);\n+    }\n+\n+    /**\n+     * Constructs a LocalTime from the specified millis of day using the\n+     * specified chronology.\n+     * <p>\n+     * The millisOfDay value may exceed the number of millis in one day,\n+     * but additional days will be ignored.\n+     * This method uses the UTC time zone internally.\n+     *\n+     * @param millisOfDay  the number of milliseconds into a day to convert\n+     * @param chrono  the chronology, null means ISO chronology\n+     */\n+    public static LocalTime fromMillisOfDay(long millisOfDay, Chronology chrono) {\n+        chrono = DateTimeUtils.getChronology(chrono).withUTC();\n+        return new LocalTime(millisOfDay, chrono);\n     }\n \n     //-----------------------------------------------------------------------\n         super();\n         chronology = DateTimeUtils.getChronology(chronology).withUTC();\n         long instant = chronology.getDateTimeMillis(\n-            hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            0L, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n         iChronology = chronology;\n         iLocalMillis = instant;\n     }\n      * interface. The supported fields are HourOfDay, MinuteOfHour,\n      * SecondOfMinute and MillisOfSecond.\n      *\n-     * @param index  the index, zero to two\n+     * @param index  the index, zero to three\n      * @return the value\n      * @throws IndexOutOfBoundsException if the index is invalid\n      */\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Get the hour of day field value.\n-     *\n-     * @param hour  the hour of day\n-     */\n-    public void withHourOfDay(int hour) {\n-        getChronology().hourOfDay().set(getLocalMillis(), hour);\n-    }\n-\n-    /**\n-     * Get the minute of hour field value.\n-     *\n-     * @param minute  the minute of hour\n-     */\n-    public void withMinuteOfHour(int minute) {\n-        getChronology().minuteOfHour().set(getLocalMillis(), minute);\n-    }\n-\n-    /**\n-     * Get the second of minute field value.\n-     *\n-     * @param second  the second of minute\n-     */\n-    public void withSecondOfMinute(int second) {\n-        getChronology().secondOfMinute().set(getLocalMillis(), second);\n-    }\n-\n-    /**\n-     * Get the millis of second field value.\n-     *\n-     * @param millis  the millis of second\n-     */\n-    public void withMillisOfSecond(int millis) {\n-        getChronology().millisOfSecond().set(getLocalMillis(), millis);\n+     * Sets the hour of day field in a copy of this LocalTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * hour of day changed.\n+     *\n+     * @param hour  the hour of day to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalTime withHourOfDay(int hour) {\n+        return withLocalMillis(getChronology().hourOfDay().set(getLocalMillis(), hour));\n+    }\n+\n+    /**\n+     * Sets the minute of hour field in a copy of this LocalTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * minute of hour changed.\n+     *\n+     * @param minute  the minute of hour to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalTime withMinuteOfHour(int minute) {\n+        return withLocalMillis(getChronology().minuteOfHour().set(getLocalMillis(), minute));\n+    }\n+\n+    /**\n+     * Sets the second of minute field in a copy of this LocalTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * second of minute changed.\n+     *\n+     * @param second  the second of minute to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalTime withSecondOfMinute(int second) {\n+        return withLocalMillis(getChronology().secondOfMinute().set(getLocalMillis(), second));\n+    }\n+\n+    /**\n+     * Sets the millis of second field in a copy of this LocalTime, leaving this\n+     * instance unchanged.\n+     * <p>\n+     * LocalTime is immutable, so there are no set methods.\n+     * Instead, this method returns a new instance with the value of\n+     * millis of second changed.\n+     *\n+     * @param millis  the millis of second to set\n+     * @return a copy of this object with the field set\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public LocalTime withMillisOfSecond(int millis) {\n+        return withLocalMillis(getChronology().millisOfSecond().set(getLocalMillis(), millis));\n     }\n \n     //-----------------------------------------------------------------------\n      */\n     public Property millisOfSecond() {\n         return new Property(this, getChronology().millisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Converts this LocalTime to a full datetime using the default time zone\n+     * setting the time fields from this instance and the date fields from\n+     * the current date.\n+     *\n+     * @return this time as a datetime using todays date\n+     */\n+    public DateTime toDateTimeTodayDefaultZone() {\n+        return toDateTimeToday(null);\n+    }\n+\n+    /**\n+     * Converts this LocalTime to a full datetime using the specified time zone\n+     * setting the time fields from this instance and the date fields from\n+     * the current time.\n+     * <p>\n+     * This method uses the chronology from this instance plus the time zone\n+     * specified.\n+     *\n+     * @param zone  the zone to use, null means default\n+     * @return this time as a datetime using todays date\n+     */\n+    public DateTime toDateTimeToday(DateTimeZone zone) {\n+        Chronology chrono = getChronology().withZone(zone);\n+        long instantMillis = DateTimeUtils.currentTimeMillis();\n+        long resolved = chrono.set(this, instantMillis);\n+        return new DateTime(resolved, chrono);\n     }\n \n     //-----------------------------------------------------------------------\n          *\n          * @param value  the value to add to the field in the copy\n          * @return a copy of the LocalTime with the field value changed\n-         * @throws IllegalArgumentException if the value isn't valid\n          */\n         public LocalTime plus(int value) {\n             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));\n          *\n          * @param value  the value to add to the field in the copy\n          * @return a copy of the LocalTime with the field value changed\n-         * @throws IllegalArgumentException if the value isn't valid\n          */\n         public LocalTime plus(long value) {\n-            // TODO\n             return iInstant.withLocalMillis(iField.add(iInstant.getLocalMillis(), value));\n+        }\n+        \n+        /**\n+         * Adds to this field in a copy of this LocalTime.\n+         * If the addition exceeds the maximum value (eg. 23:59) then\n+         * an exception will be thrown.\n+         * Contrast this behaviour to {@link #plus(int)}.\n+         * <p>\n+         * The LocalTime attached to this property is unchanged by this call.\n+         *\n+         * @param value  the value to add to the field in the copy\n+         * @return a copy of the LocalTime with the field value changed\n+         * @throws IllegalArgumentException if the result is invalid\n+         */\n+        public LocalTime plusNoWrap(int value) {\n+            long millis = iField.add(iInstant.getLocalMillis(), value);\n+            long rounded = iInstant.getChronology().millisOfDay().get(millis);\n+            if (rounded != millis) {\n+                throw new IllegalArgumentException(\"The addition exceeded the boundaries of LocalTime\");\n+            }\n+            return iInstant.withLocalMillis(millis);\n         }\n         \n         /**\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Basics.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormat;\n+import org.joda.time.format.DateTimeFormatter;\n+\n+/**\n+ * This class is a Junit unit test for LocalTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalTime_Basics extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final Chronology COPTIC_PARIS = CopticChronology.getInstance(PARIS);\n+    private static final Chronology COPTIC_LONDON = CopticChronology.getInstance(LONDON);\n+    private static final Chronology COPTIC_TOKYO = CopticChronology.getInstance(TOKYO);\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    private static final Chronology ISO_LONDON = ISOChronology.getInstance(LONDON);\n+    private static final Chronology ISO_TOKYO = ISOChronology.getInstance(TOKYO);\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_PARIS = BuddhistChronology.getInstance(PARIS);\n+    private static final Chronology BUDDHIST_LONDON = BuddhistChronology.getInstance(LONDON);\n+    private static final Chronology BUDDHIST_TOKYO = BuddhistChronology.getInstance(TOKYO);\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+\n+    private long TEST_TIME_NOW =\n+            10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+\n+    private long TEST_TIME1 =\n+        1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+\n+    private long TEST_TIME2 =\n+        1L * DateTimeConstants.MILLIS_PER_DAY\n+        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 8L;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalTime_Basics.class);\n+    }\n+\n+    public TestLocalTime_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet_DateTimeFieldType() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(10, test.get(DateTimeFieldType.hourOfDay()));\n+        assertEquals(20, test.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(30, test.get(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(40, test.get(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(TEST_TIME_NOW / 60000 , test.get(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(TEST_TIME_NOW / 1000 , test.get(DateTimeFieldType.secondOfDay()));\n+        assertEquals(TEST_TIME_NOW , test.get(DateTimeFieldType.millisOfDay()));\n+        assertEquals(10, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        test = new LocalTime(12, 30);\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        test = new LocalTime(14, 30);\n+        assertEquals(2, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(2, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(14, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(DateTimeConstants.PM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        test = new LocalTime(0, 30);\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(DateTimeConstants.AM, test.get(DateTimeFieldType.halfdayOfDay()));\n+        try {\n+            test.get(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.get(DateTimeFieldType.dayOfMonth());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testSize() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(4, test.size());\n+    }\n+\n+    public void testGetFieldType_int() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertSame(DateTimeFieldType.hourOfDay(), test.getFieldType(0));\n+        assertSame(DateTimeFieldType.minuteOfHour(), test.getFieldType(1));\n+        assertSame(DateTimeFieldType.secondOfMinute(), test.getFieldType(2));\n+        assertSame(DateTimeFieldType.millisOfSecond(), test.getFieldType(3));\n+        try {\n+            test.getFieldType(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getFieldType(5);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFieldTypes() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        DateTimeFieldType[] fields = test.getFieldTypes();\n+        assertSame(DateTimeFieldType.hourOfDay(), fields[0]);\n+        assertSame(DateTimeFieldType.minuteOfHour(), fields[1]);\n+        assertSame(DateTimeFieldType.secondOfMinute(), fields[2]);\n+        assertSame(DateTimeFieldType.millisOfSecond(), fields[3]);\n+        assertNotSame(test.getFieldTypes(), test.getFieldTypes());\n+    }\n+\n+    public void testGetField_int() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC);\n+        assertSame(COPTIC_UTC.hourOfDay(), test.getField(0));\n+        assertSame(COPTIC_UTC.minuteOfHour(), test.getField(1));\n+        assertSame(COPTIC_UTC.secondOfMinute(), test.getField(2));\n+        assertSame(COPTIC_UTC.millisOfSecond(), test.getField(3));\n+        try {\n+            test.getField(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getField(5);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetFields() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC);\n+        DateTimeField[] fields = test.getFields();\n+        assertSame(COPTIC_UTC.hourOfDay(), fields[0]);\n+        assertSame(COPTIC_UTC.minuteOfHour(), fields[1]);\n+        assertSame(COPTIC_UTC.secondOfMinute(), fields[2]);\n+        assertSame(COPTIC_UTC.millisOfSecond(), fields[3]);\n+        assertNotSame(test.getFields(), test.getFields());\n+    }\n+\n+    public void testGetValue_int() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n+        assertEquals(10, test.getValue(0));\n+        assertEquals(20, test.getValue(1));\n+        assertEquals(30, test.getValue(2));\n+        assertEquals(40, test.getValue(3));\n+        try {\n+            test.getValue(-1);\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            test.getValue(5);\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetValues() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_UTC);\n+        int[] values = test.getValues();\n+        assertEquals(10, values[0]);\n+        assertEquals(20, values[1]);\n+        assertEquals(30, values[2]);\n+        assertEquals(40, values[3]);\n+        assertNotSame(test.getValues(), test.getValues());\n+    }\n+\n+    public void testIsSupported_DateTimeFieldType() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay()));\n+        \n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay()));\n+        \n+        assertEquals(false, test.isSupported(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(false, test.isSupported((DateTimeFieldType) null));\n+    }\n+\n+    public void testIsSupported_DurationFieldType() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(true, test.isSupported(DurationFieldType.hours()));\n+        assertEquals(true, test.isSupported(DurationFieldType.minutes()));\n+        assertEquals(true, test.isSupported(DurationFieldType.seconds()));\n+        assertEquals(true, test.isSupported(DurationFieldType.millis()));\n+        assertEquals(true, test.isSupported(DurationFieldType.halfdays()));\n+        \n+        assertEquals(false, test.isSupported(DurationFieldType.days()));\n+        assertEquals(false, test.isSupported((DurationFieldType) null));\n+    }\n+\n+    public void testEqualsHashCode() {\n+        LocalTime test1 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n+        LocalTime test2 = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        LocalTime test3 = new LocalTime(15, 20, 30, 40);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new TimeOfDay(10, 20, 30, 40, COPTIC_UTC)));\n+        assertEquals(true, test1.equals(new MockInstant()));\n+        assertEquals(false, test1.equals(MockPartial.EMPTY_INSTANCE));\n+    }\n+\n+    class MockInstant extends MockPartial {\n+        public Chronology getChronology() {\n+            return COPTIC_UTC;\n+        }\n+        public DateTimeField[] getFields() {\n+            return new DateTimeField[] {\n+                COPTIC_UTC.hourOfDay(),\n+                COPTIC_UTC.minuteOfHour(),\n+                COPTIC_UTC.secondOfMinute(),\n+                COPTIC_UTC.millisOfSecond(),\n+            };\n+        }\n+        public int[] getValues() {\n+            return new int[] {10, 20, 30, 40};\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCompareTo() {\n+        LocalTime test1 = new LocalTime(10, 20, 30, 40);\n+        LocalTime test1a = new LocalTime(10, 20, 30, 40);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        LocalTime test2 = new LocalTime(10, 20, 35, 40);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.hourOfDay(),\n+            DateTimeFieldType.minuteOfHour(),\n+            DateTimeFieldType.secondOfMinute(),\n+            DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {10, 20, 30, 40};\n+        Partial p = new Partial(types, values);\n+        assertEquals(0, test1.compareTo(p));\n+        assertEquals(0, test1.compareTo(new TimeOfDay(10, 20, 30, 40)));\n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            test1.compareTo(new Date());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsEqual_LocalTime() {\n+        LocalTime test1 = new LocalTime(10, 20, 30, 40);\n+        LocalTime test1a = new LocalTime(10, 20, 30, 40);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        LocalTime test2 = new LocalTime(10, 20, 35, 40);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        try {\n+            new LocalTime(10, 20, 35, 40).isEqual(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_LocalTime() {\n+        LocalTime test1 = new LocalTime(10, 20, 30, 40);\n+        LocalTime test1a = new LocalTime(10, 20, 30, 40);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        LocalTime test2 = new LocalTime(10, 20, 35, 40);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        try {\n+            new LocalTime(10, 20, 35, 40).isBefore(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_LocalTime() {\n+        LocalTime test1 = new LocalTime(10, 20, 30, 40);\n+        LocalTime test1a = new LocalTime(10, 20, 30, 40);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        LocalTime test2 = new LocalTime(10, 20, 35, 40);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        LocalTime test3 = new LocalTime(10, 20, 35, 40, GregorianChronology.getInstanceUTC());\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        try {\n+            new LocalTime(10, 20, 35, 40).isAfter(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField_DateTimeFieldType_int_1() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime result = test.withField(DateTimeFieldType.hourOfDay(), 15);\n+        \n+        assertEquals(new LocalTime(10, 20, 30, 40), test);\n+        assertEquals(new LocalTime(15, 20, 30, 40), result);\n+    }\n+\n+    public void testWithField_DateTimeFieldType_int_2() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField_DateTimeFieldType_int_3() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        try {\n+            test.withField(DateTimeFieldType.dayOfMonth(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField_DateTimeFieldType_int_4() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime result = test.withField(DateTimeFieldType.hourOfDay(), 10);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded_DurationFieldType_int_1() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 6);\n+        \n+        assertEquals(new LocalTime(10, 20, 30, 40), test);\n+        assertEquals(new LocalTime(16, 20, 30, 40), result);\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_2() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_3() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_4() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_5() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(DurationFieldType.days(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_6() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime result = test.withFieldAdded(DurationFieldType.hours(), 16);\n+        \n+        assertEquals(new LocalTime(10, 20, 30, 40), test);\n+        assertEquals(new LocalTime(2, 20, 30, 40), result);\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_7() {\n+        LocalTime test = new LocalTime(23, 59, 59, 999);\n+        LocalTime result = test.withFieldAdded(DurationFieldType.millis(), 1);\n+        assertEquals(new LocalTime(0, 0, 0, 0), result);\n+        \n+        test = new LocalTime(23, 59, 59, 999);\n+        result = test.withFieldAdded(DurationFieldType.seconds(), 1);\n+        assertEquals(new LocalTime(0, 0, 0, 999), result);\n+        \n+        test = new LocalTime(23, 59, 59, 999);\n+        result = test.withFieldAdded(DurationFieldType.minutes(), 1);\n+        assertEquals(new LocalTime(0, 0, 59, 999), result);\n+        \n+        test = new LocalTime(23, 59, 59, 999);\n+        result = test.withFieldAdded(DurationFieldType.hours(), 1);\n+        assertEquals(new LocalTime(0, 59, 59, 999), result);\n+    }\n+\n+    public void testWithFieldAdded_DurationFieldType_int_8() {\n+        LocalTime test = new LocalTime(0, 0, 0, 0);\n+        LocalTime result = test.withFieldAdded(DurationFieldType.millis(), -1);\n+        assertEquals(new LocalTime(23, 59, 59, 999), result);\n+        \n+        test = new LocalTime(0, 0, 0, 0);\n+        result = test.withFieldAdded(DurationFieldType.seconds(), -1);\n+        assertEquals(new LocalTime(23, 59, 59, 0), result);\n+        \n+        test = new LocalTime(0, 0, 0, 0);\n+        result = test.withFieldAdded(DurationFieldType.minutes(), -1);\n+        assertEquals(new LocalTime(23, 59, 0, 0), result);\n+        \n+        test = new LocalTime(0, 0, 0, 0);\n+        result = test.withFieldAdded(DurationFieldType.hours(), -1);\n+        assertEquals(new LocalTime(23, 0, 0, 0), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlus_RP() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalTime result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        LocalTime expected = new LocalTime(15, 26, 37, 48, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusHours_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.plusHours(1);\n+        LocalTime expected = new LocalTime(2, 2, 3, 4, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMinutes_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.plusMinutes(1);\n+        LocalTime expected = new LocalTime(1, 3, 3, 4, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusSeconds_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.plusSeconds(1);\n+        LocalTime expected = new LocalTime(1, 2, 4, 4, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlusMillis_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.plusMillis(1);\n+        LocalTime expected = new LocalTime(1, 2, 3, 5, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.plusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinus_RP() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, BUDDHIST_LONDON);\n+        LocalTime result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        LocalTime expected = new LocalTime(9, 19, 29, 39, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusHours_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.minusHours(1);\n+        LocalTime expected = new LocalTime(0, 2, 3, 4, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusHours(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMinutes_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.minusMinutes(1);\n+        LocalTime expected = new LocalTime(1, 1, 3, 4, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMinutes(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusSeconds_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.minusSeconds(1);\n+        LocalTime expected = new LocalTime(1, 2, 2, 4, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusSeconds(0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinusMillis_int() {\n+        LocalTime test = new LocalTime(1, 2, 3, 4, BUDDHIST_LONDON);\n+        LocalTime result = test.minusMillis(1);\n+        LocalTime expected = new LocalTime(1, 2, 3, 3, BUDDHIST_LONDON);\n+        assertEquals(expected, result);\n+        \n+        result = test.minusMillis(0);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetters() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithers() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        check(test.withHourOfDay(6), 6, 20, 30, 40);\n+        check(test.withMinuteOfHour(6), 10, 6, 30, 40);\n+        check(test.withSecondOfMinute(6), 10, 20, 6, 40);\n+        check(test.withMillisOfSecond(6), 10, 20, 30, 6);\n+        try {\n+            test.withHourOfDay(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.withHourOfDay(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeTodayDefaultZone() {\n+        LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeTodayDefaultZone();\n+        check(base, 10, 20, 30, 40);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);\n+        expected = expected.hourOfDay().setCopy(10);\n+        expected = expected.minuteOfHour().setCopy(20);\n+        expected = expected.secondOfMinute().setCopy(30);\n+        expected = expected.millisOfSecond().setCopy(40);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTimeToday_Zone() {\n+        LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeToday(TOKYO);\n+        check(base, 10, 20, 30, 40);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_TOKYO);\n+        expected = expected.hourOfDay().setCopy(10);\n+        expected = expected.minuteOfHour().setCopy(20);\n+        expected = expected.secondOfMinute().setCopy(30);\n+        expected = expected.millisOfSecond().setCopy(40);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToDateTimeToday_nullZone() {\n+        LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS); // PARIS irrelevant\n+        DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        \n+        DateTime test = base.toDateTimeToday((DateTimeZone) null);\n+        check(base, 10, 20, 30, 40);\n+        DateTime expected = new DateTime(dt.getMillis(), COPTIC_LONDON);\n+        expected = expected.hourOfDay().setCopy(10);\n+        expected = expected.minuteOfHour().setCopy(20);\n+        expected = expected.secondOfMinute().setCopy(30);\n+        expected = expected.millisOfSecond().setCopy(40);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDateTime_RI() {\n+        LocalTime base = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n+        DateTime dt = new DateTime(0L); // LONDON zone\n+        assertEquals(\"1970-01-01T01:00:00.000+01:00\", dt.toString());\n+        \n+        DateTime test = base.toDateTime(dt);\n+        check(base, 10, 20, 30, 40);\n+        assertEquals(\"1970-01-01T01:00:00.000+01:00\", dt.toString());\n+        assertEquals(\"1970-01-01T10:20:30.040+01:00\", test.toString());\n+    }\n+\n+    public void testToDateTime_nullRI() {\n+        LocalTime base = new LocalTime(1, 2, 3, 4);\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);\n+        \n+        DateTime test = base.toDateTime((ReadableInstant) null);\n+        check(base, 1, 2, 3, 4);\n+        assertEquals(\"1970-01-02T01:02:03.004+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(test.hourOfDay(), test.property(DateTimeFieldType.hourOfDay()));\n+        assertEquals(test.minuteOfHour(), test.property(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));\n+        \n+        assertEquals(test, test.property(DateTimeFieldType.minuteOfDay()).getLocalTime());\n+        assertEquals(test, test.property(DateTimeFieldType.secondOfDay()).getLocalTime());\n+        assertEquals(test, test.property(DateTimeFieldType.millisOfDay()).getLocalTime());\n+        assertEquals(test, test.property(DateTimeFieldType.hourOfHalfday()).getLocalTime());\n+        assertEquals(test, test.property(DateTimeFieldType.halfdayOfDay()).getLocalTime());\n+        assertEquals(test, test.property(DateTimeFieldType.clockhourOfHalfday()).getLocalTime());\n+        assertEquals(test, test.property(DateTimeFieldType.clockhourOfDay()).getLocalTime());\n+        \n+        try {\n+            test.property(DateTimeFieldType.dayOfWeek());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, COPTIC_PARIS);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        LocalTime result = (LocalTime) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+        assertTrue(Arrays.equals(test.getValues(), result.getValues()));\n+        assertTrue(Arrays.equals(test.getFields(), result.getFields()));\n+        assertEquals(test.getChronology(), result.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(\"10:20:30.040\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(\"\\ufffd\\ufffd\\ufffd\\ufffd 10\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"10:20:30.040\", test.toString((String) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_String_Locale() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(\"10 20\", test.toString(\"H m\", Locale.ENGLISH));\n+        assertEquals(\"10:20:30.040\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"10 20\", test.toString(\"H m\", null));\n+        assertEquals(\"10:20:30.040\", test.toString(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString_DTFormatter() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(\"\\ufffd\\ufffd\\ufffd\\ufffd 10\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n+        assertEquals(\"10:20:30.040\", test.toString((DateTimeFormatter) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(LocalTime test, int hour, int min, int sec, int milli) {\n+        assertEquals(hour, test.getHourOfDay());\n+        assertEquals(min, test.getMinuteOfHour());\n+        assertEquals(sec, test.getSecondOfMinute());\n+        assertEquals(milli, test.getMillisOfSecond());\n+    }\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for LocalTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalTime_Constructors extends TestCase {\n+\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final ISOChronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final JulianChronology JULIAN = JulianChronology.getInstance();\n+    private static final JulianChronology JULIAN_PARIS = JulianChronology.getInstance(PARIS);\n+    private static final JulianChronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n+    private static final int OFFSET_LONDON = LONDON.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+    private static final int OFFSET_PARIS = PARIS.getOffset(0L) / DateTimeConstants.MILLIS_PER_HOUR;\n+\n+    private long TEST_TIME_NOW =\n+            10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+\n+    private long TEST_TIME1 =\n+        1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+\n+    private long TEST_TIME2 =\n+        1L * DateTimeConstants.MILLIS_PER_DAY\n+        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 8L;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalTime_Constructors.class);\n+    }\n+\n+    public TestLocalTime_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        java.util.TimeZone.setDefault(zone.toTimeZone());\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstantMidnight() throws Throwable {\n+        LocalTime test = LocalTime.MIDNIGHT;\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_ForFields_Calendar() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalTime expected = new LocalTime(4, 5, 6, 7);\n+        assertEquals(expected, LocalTime.forFields(cal));\n+        try {\n+            LocalTime.forFields((Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_ForFields_Date() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalTime expected = new LocalTime(4, 5, 6, 7);\n+        assertEquals(expected, LocalTime.forFields(cal.getTime()));\n+        try {\n+            LocalTime.forFields((Date) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryMillisOfDay_long() throws Throwable {\n+        LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryMillisOfDay_long_Chronology() throws Throwable {\n+        LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1, JULIAN);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testFactoryMillisOfDay_long_nullChronology() throws Throwable {\n+        LocalTime test = LocalTime.fromMillisOfDay(TEST_TIME1, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_nowDefaultZone() throws Throwable {\n+        LocalTime test = LocalTime.nowDefaultZone();\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_now_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        LocalTime test = LocalTime.now(LONDON);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(23, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        \n+        test = LocalTime.now(PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testFactory_now_nullDateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 30, 40, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        LocalTime test = LocalTime.now((DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(23, test.getHourOfDay());\n+        assertEquals(59, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_now_Chronology() throws Throwable {\n+        LocalTime test = LocalTime.now(JULIAN);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testFactory_now_nullChronology() throws Throwable {\n+        LocalTime test = LocalTime.now((Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_forInstantDefaultZone_long1() throws Throwable {\n+        LocalTime test = LocalTime.forInstantDefaultZone(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testFactory_forInstantDefaultZone_long2() throws Throwable {\n+        LocalTime test = LocalTime.forInstantDefaultZone(TEST_TIME2);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(6, test.getMinuteOfHour());\n+        assertEquals(7, test.getSecondOfMinute());\n+        assertEquals(8, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_forInstant_long_DateTimeZone() throws Throwable {\n+        LocalTime test = LocalTime.forInstant(TEST_TIME1, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testFactory_forInstant_long_nullDateTimeZone() throws Throwable {\n+        LocalTime test = LocalTime.forInstant(TEST_TIME1, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_forInstant_long1_Chronology() throws Throwable {\n+        LocalTime test = LocalTime.forInstant(TEST_TIME1, JULIAN_PARIS);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_PARIS, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testFactory_forInstant_long2_Chronology() throws Throwable {\n+        LocalTime test = LocalTime.forInstant(TEST_TIME2, JULIAN);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(5 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(6, test.getMinuteOfHour());\n+        assertEquals(7, test.getSecondOfMinute());\n+        assertEquals(8, test.getMillisOfSecond());\n+    }\n+\n+    public void testFactory_forInstant_long_nullChronology() throws Throwable {\n+        LocalTime test = LocalTime.forInstant(TEST_TIME1, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_forInstant_Object1() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalTime test = LocalTime.forInstant(date);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testFactory_forInstant_Object2() throws Throwable {\n+        Calendar cal = new GregorianCalendar();\n+        cal.setTime(new Date(TEST_TIME1));\n+        LocalTime test = LocalTime.forInstant(cal);\n+        assertEquals(GJChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testFactory_forInstant_nullObject() throws Throwable {\n+        LocalTime test = LocalTime.forInstant((Object) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+//    public void testFactory_forInstant_localTimeObject() throws Throwable {\n+//        LocalTime base = new LocalTime(10, 20, 30, 40, CopticChronology.getInstance(PARIS));\n+//        LocalTime test = LocalTime.forInstant(base);\n+//        assertEquals(CopticChronology.getInstanceUTC(), test.getChronology());\n+//        assertEquals(10, test.getHourOfDay());\n+//        assertEquals(20, test.getMinuteOfHour());\n+//        assertEquals(30, test.getSecondOfMinute());\n+//        assertEquals(40, test.getMillisOfSecond());\n+//    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_forInstant_Object1_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalTime test = LocalTime.forInstant(date, JULIAN);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testFactory_forInstant_Object2_Chronology() throws Throwable {\n+        LocalTime test = LocalTime.forInstant(\"T10:20\");\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        \n+        try {\n+            LocalTime.forInstant(\"T1020\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFactory_forInstant_nullObject_Chronology() throws Throwable {\n+        LocalTime test = LocalTime.forInstant((Object) null, JULIAN);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testFactory_forInstant_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalTime test = LocalTime.forInstant(date, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    public void testFactory_forInstant_nullObject_nullChronology() throws Throwable {\n+        LocalTime test = LocalTime.forInstant((Object) null, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET_LONDON, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_int_int() throws Throwable {\n+        LocalTime test = new LocalTime(10, 20);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        try {\n+            new LocalTime(-1, 20);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(24, 20);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int() throws Throwable {\n+        LocalTime test = new LocalTime(10, 20, 30);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+        try {\n+            new LocalTime(-1, 20, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(24, 20, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, -1, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 60, 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_int() throws Throwable {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        try {\n+            new LocalTime(-1, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(24, 20, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, -1, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 60, 30, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, -1, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 60, 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 30, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 30, 1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_int_Chronology() throws Throwable {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, JULIAN);\n+        assertEquals(JULIAN_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+        try {\n+            new LocalTime(-1, 20, 30, 40, JULIAN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(24, 20, 30, 40, JULIAN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, -1, 30, 40, JULIAN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 60, 30, 40, JULIAN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, -1, 40, JULIAN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 60, 40, JULIAN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 30, -1, JULIAN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalTime(10, 20, 30, 1000, JULIAN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_int_nullChronology() throws Throwable {\n+        LocalTime test = new LocalTime(10, 20, 30, 40, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Properties.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for TimeOfDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalTime_Properties extends TestCase {\n+\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+\n+    private long TEST_TIME_NOW =\n+            10L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 20L * DateTimeConstants.MILLIS_PER_MINUTE\n+            + 30L * DateTimeConstants.MILLIS_PER_SECOND\n+            + 40L;\n+\n+    private long TEST_TIME1 =\n+        1L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 2L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 3L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 4L;\n+\n+    private long TEST_TIME2 =\n+        1L * DateTimeConstants.MILLIS_PER_DAY\n+        + 5L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 6L * DateTimeConstants.MILLIS_PER_MINUTE\n+        + 7L * DateTimeConstants.MILLIS_PER_SECOND\n+        + 8L;\n+\n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalTime_Properties.class);\n+    }\n+\n+    public TestLocalTime_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());\n+        assertEquals(\"hourOfDay\", test.hourOfDay().getName());\n+        assertEquals(\"Property[hourOfDay]\", test.hourOfDay().toString());\n+        assertSame(test, test.hourOfDay().getLocalTime());\n+        assertEquals(10, test.hourOfDay().get());\n+        assertEquals(\"10\", test.hourOfDay().getAsString());\n+        assertEquals(\"10\", test.hourOfDay().getAsText());\n+        assertEquals(\"10\", test.hourOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"10\", test.hourOfDay().getAsShortText());\n+        assertEquals(\"10\", test.hourOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());\n+        assertEquals(2, test.hourOfDay().getMaximumTextLength(null));\n+        assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyRoundHour() {\n+        LocalTime test = new LocalTime(10, 20);\n+        check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedHalfCeiling(), 10, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedHalfFloor(), 10, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedHalfEven(), 10, 0, 0, 0);\n+        \n+        test = new LocalTime(10, 40);\n+        check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedHalfCeiling(), 11, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedHalfFloor(), 11, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedHalfEven(), 11, 0, 0, 0);\n+        \n+        test = new LocalTime(10, 30);\n+        check(test.hourOfDay().withRoundedCeiling(), 11, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedFloor(), 10, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedHalfCeiling(), 11, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedHalfFloor(), 10, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedHalfEven(), 10, 0, 0, 0);\n+        \n+        test = new LocalTime(11, 30);\n+        check(test.hourOfDay().withRoundedCeiling(), 12, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedFloor(), 11, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedHalfCeiling(), 12, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedHalfFloor(), 11, 0, 0, 0);\n+        check(test.hourOfDay().withRoundedHalfEven(), 12, 0, 0, 0);\n+    }\n+\n+    public void testPropertyGetMaxMinValuesHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(0, test.hourOfDay().getMinimumValue());\n+        assertEquals(0, test.hourOfDay().getMinimumValueOverall());\n+        assertEquals(23, test.hourOfDay().getMaximumValue());\n+        assertEquals(23, test.hourOfDay().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        check(test.hourOfDay().withMaximumValue(), 23, 20, 30, 40);\n+        check(test.hourOfDay().withMinimumValue(), 0, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().plus(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plus(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plus(13);\n+        check(copy, 23, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plus(14);\n+        check(copy, 0, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plus(-10);\n+        check(copy, 0, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plus(-11);\n+        check(copy, 23, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusNoWrapHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().plusNoWrap(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plusNoWrap(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plusNoWrap(13);\n+        check(copy, 23, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().plusNoWrap(14);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plusNoWrap(-10);\n+        check(copy, 0, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().plusNoWrap(-11);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().plusWrapField(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plusWrapField(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plusWrapField(18);\n+        check(copy, 4, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().plusWrapField(-15);\n+        check(copy, 19, 20, 30, 40);\n+    }\n+\n+    public void testPropertySetHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().withValue(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 12, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().withValue(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.hourOfDay().withValue(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().withValue(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 12, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMaximumValueHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().withMaximumValue();\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 23, 20, 30, 40);\n+    }\n+\n+    public void testPropertyWithMinimumValueHour() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.hourOfDay().withMinimumValue();\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 0, 20, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToHour() {\n+        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);\n+        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);\n+        assertEquals(true, test1.hourOfDay().compareTo(test2) < 0);\n+        assertEquals(true, test2.hourOfDay().compareTo(test1) > 0);\n+        assertEquals(true, test1.hourOfDay().compareTo(test1) == 0);\n+        try {\n+            test1.hourOfDay().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.hourOfDay().compareTo(dt2) < 0);\n+        assertEquals(true, test2.hourOfDay().compareTo(dt1) > 0);\n+        assertEquals(true, test1.hourOfDay().compareTo(dt1) == 0);\n+        try {\n+            test1.hourOfDay().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());\n+        assertEquals(\"minuteOfHour\", test.minuteOfHour().getName());\n+        assertEquals(\"Property[minuteOfHour]\", test.minuteOfHour().toString());\n+        assertSame(test, test.minuteOfHour().getLocalTime());\n+        assertEquals(20, test.minuteOfHour().get());\n+        assertEquals(\"20\", test.minuteOfHour().getAsString());\n+        assertEquals(\"20\", test.minuteOfHour().getAsText());\n+        assertEquals(\"20\", test.minuteOfHour().getAsText(Locale.FRENCH));\n+        assertEquals(\"20\", test.minuteOfHour().getAsShortText());\n+        assertEquals(\"20\", test.minuteOfHour().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());\n+        assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());\n+        assertEquals(2, test.minuteOfHour().getMaximumTextLength(null));\n+        assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(0, test.minuteOfHour().getMinimumValue());\n+        assertEquals(0, test.minuteOfHour().getMinimumValueOverall());\n+        assertEquals(59, test.minuteOfHour().getMaximumValue());\n+        assertEquals(59, test.minuteOfHour().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        check(test.minuteOfHour().withMaximumValue(), 10, 59, 30, 40);\n+        check(test.minuteOfHour().withMinimumValue(), 10, 0, 30, 40);\n+    }\n+\n+    public void testPropertyPlusMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.minuteOfHour().plus(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(39);\n+        check(copy, 10, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(40);\n+        check(copy, 11, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(1 * 60 + 45);\n+        check(copy, 12, 5, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(13 * 60 + 39);\n+        check(copy, 23, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(13 * 60 + 40);\n+        check(copy, 0, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(-9);\n+        check(copy, 10, 11, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(-19);\n+        check(copy, 10, 1, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(-20);\n+        check(copy, 10, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(-21);\n+        check(copy, 9, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(-(10 * 60 + 20));\n+        check(copy, 0, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().plus(-(10 * 60 + 21));\n+        check(copy, 23, 59, 30, 40);\n+    }\n+\n+    public void testPropertyPlusNoWrapMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.minuteOfHour().plusNoWrap(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().plusNoWrap(39);\n+        check(copy, 10, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().plusNoWrap(40);\n+        check(copy, 11, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().plusNoWrap(1 * 60 + 45);\n+        check(copy, 12, 5, 30, 40);\n+        \n+        copy = test.minuteOfHour().plusNoWrap(13 * 60 + 39);\n+        check(copy, 23, 59, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().plusNoWrap(13 * 60 + 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.minuteOfHour().plusNoWrap(-9);\n+        check(copy, 10, 11, 30, 40);\n+        \n+        copy = test.minuteOfHour().plusNoWrap(-19);\n+        check(copy, 10, 1, 30, 40);\n+        \n+        copy = test.minuteOfHour().plusNoWrap(-20);\n+        check(copy, 10, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().plusNoWrap(-21);\n+        check(copy, 9, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().plusNoWrap(-(10 * 60 + 20));\n+        check(copy, 0, 0, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().plusNoWrap(-(10 * 60 + 21));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.minuteOfHour().plusWrapField(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().plusWrapField(49);\n+        check(copy, 10, 9, 30, 40);\n+        \n+        copy = test.minuteOfHour().plusWrapField(-47);\n+        check(copy, 10, 33, 30, 40);\n+    }\n+\n+    public void testPropertySetMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.minuteOfHour().withValue(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 12, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().withValue(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.minuteOfHour().withValue(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMinute() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.minuteOfHour().withValue(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 12, 30, 40);\n+    }\n+\n+    public void testPropertyCompareToMinute() {\n+        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);\n+        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);\n+        assertEquals(true, test1.minuteOfHour().compareTo(test2) < 0);\n+        assertEquals(true, test2.minuteOfHour().compareTo(test1) > 0);\n+        assertEquals(true, test1.minuteOfHour().compareTo(test1) == 0);\n+        try {\n+            test1.minuteOfHour().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.minuteOfHour().compareTo(dt2) < 0);\n+        assertEquals(true, test2.minuteOfHour().compareTo(dt1) > 0);\n+        assertEquals(true, test1.minuteOfHour().compareTo(dt1) == 0);\n+        try {\n+            test1.minuteOfHour().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());\n+        assertEquals(\"secondOfMinute\", test.secondOfMinute().getName());\n+        assertEquals(\"Property[secondOfMinute]\", test.secondOfMinute().toString());\n+        assertSame(test, test.secondOfMinute().getLocalTime());\n+        assertEquals(30, test.secondOfMinute().get());\n+        assertEquals(\"30\", test.secondOfMinute().getAsString());\n+        assertEquals(\"30\", test.secondOfMinute().getAsText());\n+        assertEquals(\"30\", test.secondOfMinute().getAsText(Locale.FRENCH));\n+        assertEquals(\"30\", test.secondOfMinute().getAsShortText());\n+        assertEquals(\"30\", test.secondOfMinute().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());\n+        assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());\n+        assertEquals(2, test.secondOfMinute().getMaximumTextLength(null));\n+        assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(0, test.secondOfMinute().getMinimumValue());\n+        assertEquals(0, test.secondOfMinute().getMinimumValueOverall());\n+        assertEquals(59, test.secondOfMinute().getMaximumValue());\n+        assertEquals(59, test.secondOfMinute().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        check(test.secondOfMinute().withMaximumValue(), 10, 20, 59, 40);\n+        check(test.secondOfMinute().withMinimumValue(), 10, 20, 0, 40);\n+    }\n+\n+    public void testPropertyPlusSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.secondOfMinute().plus(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().plus(29);\n+        check(copy, 10, 20, 59, 40);\n+        \n+        copy = test.secondOfMinute().plus(30);\n+        check(copy, 10, 21, 0, 40);\n+        \n+        copy = test.secondOfMinute().plus(39 * 60 + 29);\n+        check(copy, 10, 59, 59, 40);\n+        \n+        copy = test.secondOfMinute().plus(39 * 60 + 30);\n+        check(copy, 11, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().plus(13 * 60 * 60 + 39 * 60 + 30);\n+        check(copy, 0, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().plus(-9);\n+        check(copy, 10, 20, 21, 40);\n+        \n+        copy = test.secondOfMinute().plus(-30);\n+        check(copy, 10, 20, 0, 40);\n+        \n+        copy = test.secondOfMinute().plus(-31);\n+        check(copy, 10, 19, 59, 40);\n+        \n+        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 30));\n+        check(copy, 0, 0, 0, 40);\n+        \n+        copy = test.secondOfMinute().plus(-(10 * 60 * 60 + 20 * 60 + 31));\n+        check(copy, 23, 59, 59, 40);\n+    }\n+\n+    public void testPropertyPlusNoWrapSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.secondOfMinute().plusNoWrap(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().plusNoWrap(29);\n+        check(copy, 10, 20, 59, 40);\n+        \n+        copy = test.secondOfMinute().plusNoWrap(30);\n+        check(copy, 10, 21, 0, 40);\n+        \n+        copy = test.secondOfMinute().plusNoWrap(39 * 60 + 29);\n+        check(copy, 10, 59, 59, 40);\n+        \n+        copy = test.secondOfMinute().plusNoWrap(39 * 60 + 30);\n+        check(copy, 11, 0, 0, 40);\n+        \n+        try {\n+            test.secondOfMinute().plusNoWrap(13 * 60 * 60 + 39 * 60 + 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.secondOfMinute().plusNoWrap(-9);\n+        check(copy, 10, 20, 21, 40);\n+        \n+        copy = test.secondOfMinute().plusNoWrap(-30);\n+        check(copy, 10, 20, 0, 40);\n+        \n+        copy = test.secondOfMinute().plusNoWrap(-31);\n+        check(copy, 10, 19, 59, 40);\n+        \n+        copy = test.secondOfMinute().plusNoWrap(-(10 * 60 * 60 + 20 * 60 + 30));\n+        check(copy, 0, 0, 0, 40);\n+        \n+        try {\n+            test.secondOfMinute().plusNoWrap(-(10 * 60 * 60 + 20 * 60 + 31));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.secondOfMinute().plusWrapField(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().plusWrapField(49);\n+        check(copy, 10, 20, 19, 40);\n+        \n+        copy = test.secondOfMinute().plusWrapField(-47);\n+        check(copy, 10, 20, 43, 40);\n+    }\n+\n+    public void testPropertySetSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.secondOfMinute().withValue(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 12, 40);\n+        \n+        try {\n+            test.secondOfMinute().withValue(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.secondOfMinute().withValue(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextSecond() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.secondOfMinute().withValue(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 12, 40);\n+    }\n+\n+    public void testPropertyCompareToSecond() {\n+        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);\n+        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);\n+        assertEquals(true, test1.secondOfMinute().compareTo(test2) < 0);\n+        assertEquals(true, test2.secondOfMinute().compareTo(test1) > 0);\n+        assertEquals(true, test1.secondOfMinute().compareTo(test1) == 0);\n+        try {\n+            test1.secondOfMinute().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.secondOfMinute().compareTo(dt2) < 0);\n+        assertEquals(true, test2.secondOfMinute().compareTo(dt1) > 0);\n+        assertEquals(true, test1.secondOfMinute().compareTo(dt1) == 0);\n+        try {\n+            test1.secondOfMinute().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());\n+        assertEquals(\"millisOfSecond\", test.millisOfSecond().getName());\n+        assertEquals(\"Property[millisOfSecond]\", test.millisOfSecond().toString());\n+        assertSame(test, test.millisOfSecond().getLocalTime());\n+        assertEquals(40, test.millisOfSecond().get());\n+        assertEquals(\"40\", test.millisOfSecond().getAsString());\n+        assertEquals(\"40\", test.millisOfSecond().getAsText());\n+        assertEquals(\"40\", test.millisOfSecond().getAsText(Locale.FRENCH));\n+        assertEquals(\"40\", test.millisOfSecond().getAsShortText());\n+        assertEquals(\"40\", test.millisOfSecond().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());\n+        assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());\n+        assertEquals(3, test.millisOfSecond().getMaximumTextLength(null));\n+        assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValuesMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        assertEquals(0, test.millisOfSecond().getMinimumValue());\n+        assertEquals(0, test.millisOfSecond().getMinimumValueOverall());\n+        assertEquals(999, test.millisOfSecond().getMaximumValue());\n+        assertEquals(999, test.millisOfSecond().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyWithMaxMinValueMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        check(test.millisOfSecond().withMaximumValue(), 10, 20, 30, 999);\n+        check(test.millisOfSecond().withMinimumValue(), 10, 20, 30, 0);\n+    }\n+\n+    public void testPropertyPlusMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.millisOfSecond().plus(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().plus(959);\n+        check(copy, 10, 20, 30, 999);\n+        \n+        copy = test.millisOfSecond().plus(960);\n+        check(copy, 10, 20, 31, 0);\n+        \n+        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        check(copy, 23, 59, 59, 999);\n+        \n+        copy = test.millisOfSecond().plus(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+        check(copy, 0, 0, 0, 0);\n+        \n+        copy = test.millisOfSecond().plus(-9);\n+        check(copy, 10, 20, 30, 31);\n+        \n+        copy = test.millisOfSecond().plus(-40);\n+        check(copy, 10, 20, 30, 0);\n+        \n+        copy = test.millisOfSecond().plus(-41);\n+        check(copy, 10, 20, 29, 999);\n+        \n+        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        check(copy, 0, 0, 0, 0);\n+        \n+        copy = test.millisOfSecond().plus(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+        check(copy, 23, 59, 59, 999);\n+    }\n+\n+    public void testPropertyPlusNoWrapMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.millisOfSecond().plusNoWrap(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().plusNoWrap(959);\n+        check(copy, 10, 20, 30, 999);\n+        \n+        copy = test.millisOfSecond().plusNoWrap(960);\n+        check(copy, 10, 20, 31, 0);\n+        \n+        copy = test.millisOfSecond().plusNoWrap(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        check(copy, 23, 59, 59, 999);\n+        \n+        try {\n+            test.millisOfSecond().plusNoWrap(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.millisOfSecond().plusNoWrap(-9);\n+        check(copy, 10, 20, 30, 31);\n+        \n+        copy = test.millisOfSecond().plusNoWrap(-40);\n+        check(copy, 10, 20, 30, 0);\n+        \n+        copy = test.millisOfSecond().plusNoWrap(-41);\n+        check(copy, 10, 20, 29, 999);\n+        \n+        copy = test.millisOfSecond().plusNoWrap(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        check(copy, 0, 0, 0, 0);\n+        \n+        try {\n+            test.millisOfSecond().plusNoWrap(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyPlusWrapFieldMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.millisOfSecond().plusWrapField(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().plusWrapField(995);\n+        check(copy, 10, 20, 30, 35);\n+        \n+        copy = test.millisOfSecond().plusWrapField(-47);\n+        check(copy, 10, 20, 30, 993);\n+    }\n+\n+    public void testPropertySetMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.millisOfSecond().withValue(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 12);\n+        \n+        try {\n+            test.millisOfSecond().withValue(1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.millisOfSecond().withValue(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextMilli() {\n+        LocalTime test = new LocalTime(10, 20, 30, 40);\n+        LocalTime copy = test.millisOfSecond().withValue(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 12);\n+    }\n+\n+    public void testPropertyCompareToMilli() {\n+        LocalTime test1 = LocalTime.forInstantDefaultZone(TEST_TIME1);\n+        LocalTime test2 = LocalTime.forInstantDefaultZone(TEST_TIME2);\n+        assertEquals(true, test1.millisOfSecond().compareTo(test2) < 0);\n+        assertEquals(true, test2.millisOfSecond().compareTo(test1) > 0);\n+        assertEquals(true, test1.millisOfSecond().compareTo(test1) == 0);\n+        try {\n+            test1.millisOfSecond().compareTo((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.millisOfSecond().compareTo(dt2) < 0);\n+        assertEquals(true, test2.millisOfSecond().compareTo(dt1) > 0);\n+        assertEquals(true, test1.millisOfSecond().compareTo(dt1) == 0);\n+        try {\n+            test1.millisOfSecond().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void check(LocalTime test, int hour, int min, int sec, int milli) {\n+        assertEquals(hour, test.getHourOfDay());\n+        assertEquals(min, test.getMinuteOfHour());\n+        assertEquals(sec, test.getSecondOfMinute());\n+        assertEquals(milli, test.getMillisOfSecond());\n+    }\n+}", "timestamp": 1138461114, "metainfo": ""}