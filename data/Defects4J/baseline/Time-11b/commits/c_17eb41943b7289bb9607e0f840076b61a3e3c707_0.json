{"sha": "17eb41943b7289bb9607e0f840076b61a3e3c707", "log": "Add ISODateTimeFormat.forFields to get a suitable format for a subset of datetime fields   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n  *  limitations under the License.\n  */\n package org.joda.time.format;\n+\n+import java.util.Collection;\n+\n+import org.joda.time.DateTimeFieldType;\n \n /**\n  * Factory that creates instances of DateTimeFormatter for the ISO8601 standard.\n  * DateTimeFormatter fmt = DateTimeFormat.getInstance().dateTime();\n  * String str = fmt.print(dt);\n  * </pre>\n+ * <p>\n+ * It is important to understand that these formatters are not linked to\n+ * the <code>ISOChronology</code>. These formatters may be used with any\n+ * chronology, however there may be certain side effects with more unusual\n+ * chronologies. For example, the ISO formatters rely on dayOfWeek being\n+ * single digit, dayOfMonth being two digit and dayOfYear being three digit.\n+ * A chronology with a ten day week would thus cause issues. However, in\n+ * general, it is safe to use these formatters with other chronologies.\n  * <p>\n  * ISODateTimeFormat is thread-safe and immutable, and the formatters it\n  * returns are as well.\n      * @param chrono  the chronology to use, must not be null\n      */\n     private ISODateTimeFormat() {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a formatter that outputs only those fields specified.\n+     * <p>\n+     * This method examines the fields provided and returns an ISO-style\n+     * formatter that best fits. This can be useful for outputting\n+     * less-common ISO styles, such as YearMonth (YYYY-MM) or MonthDay (--MM-DD).\n+     * <p>\n+     * The list provided may have overlapping fields, such as dayOfWeek and\n+     * dayOfMonth. In this case, the style is chosen based on the following\n+     * list, thus in the example, the calendar style is chosen as dayOfMonth\n+     * is higher in priority than dayOfWeek:\n+     * <ul>\n+     * <li>monthOfYear - calendar date style\n+     * <li>dayOfYear - ordinal date style\n+     * <li>weekOfWeekYear - week date style\n+     * <li>dayOfMonth - calendar date style\n+     * <li>dayOfWeek - week date style\n+     * <li>year\n+     * <li>weekyear\n+     * </ul>\n+     * The supported formats are:\n+     * <pre>\n+     * Extended      Basic       Fields\n+     * 2005-03-25    20050325    year/monthOfYear/dayOfMonth\n+     * 2005-03       2005-03     year/monthOfYear\n+     * 2005--25      2005--25    year/dayOfMonth *\n+     * 2005          2005        year\n+     * --03-25       --0325      monthOfYear/dayOfMonth\n+     * --03          --03        monthOfYear\n+     * ---03         ---03       dayOfMonth\n+     * 2005-084      2005084     year/dayOfYear\n+     * -084          -084        dayOfYear\n+     * 2005-W12-5    2005W125    weekyear/weekOfWeekyear/dayOfWeek\n+     * 2005-W-5      2005W-5     weekyear/dayOfWeek *\n+     * 2005-W12      2005W12     weekyear/weekOfWeekyear\n+     * -W12-5        -W125       weekOfWeekyear/dayOfWeek\n+     * -W12          -W12        weekOfWeekyear\n+     * -W-5          -W-5        dayOfWeek\n+     * 10:20:30.040  102030.040  hour/minute/second/milli\n+     * 10:20:30      102030      hour/minute/second\n+     * 10:20         1020        hour/minute\n+     * 10            10          hour\n+     * -20:30.040    -2030.040   minute/second/milli\n+     * -20:30        -2030       minute/second\n+     * -20           -20         minute\n+     * --30.040      --30.040    second/milli\n+     * --30          --30        second\n+     * ---.040       ---.040     milli *\n+     * 10-30.040     10-30.040   hour/second/milli *\n+     * 10:20-.040    1020-.040   hour/minute/milli *\n+     * 10-30         10-30       hour/second *\n+     * 10--.040      10--.040    hour/milli *\n+     * -20-.040      -20-.040    minute/milli *\n+     *   plus datetime formats like {date}T{time}\n+     * </pre>\n+     * * indiates that this is not an official ISO format and can be excluded\n+     * by passing in <code>strictISO</code> as <code>true</code>.\n+     *\n+     * @param fields  the fields to get a formatter for, not null,\n+     *  updated by the method call, which removes those fields built in the formatter\n+     * @param extended  true to use the extended format (with separators)\n+     * @param strictISO  true to stick exactly to ISO8601, false to include additional formats\n+     * @return a suitable formatter\n+     * @throws IllegalArgumentException if there is no format for the fields\n+     * @since 1.1\n+     */\n+    public static DateTimeFormatter forFields(\n+        Collection fields,\n+        boolean extended,\n+        boolean strictISO) {\n+        \n+        if (fields == null || fields.size() == 0) {\n+            throw new IllegalArgumentException(\"The fields must not be null or empty\");\n+        }\n+        int inputSize = fields.size();\n+        boolean reducedPrec = false;\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        // date\n+        if (fields.contains(DateTimeFieldType.monthOfYear())) {\n+            reducedPrec = dateByMonth(bld, fields, extended, strictISO);\n+        } else if (fields.contains(DateTimeFieldType.dayOfYear())) {\n+            reducedPrec = dateByOrdinal(bld, fields, extended, strictISO);\n+        } else if (fields.contains(DateTimeFieldType.weekOfWeekyear())) {\n+            reducedPrec = dateByWeek(bld, fields, extended, strictISO);\n+        } else if (fields.contains(DateTimeFieldType.dayOfMonth())) {\n+            reducedPrec = dateByMonth(bld, fields, extended, strictISO);\n+        } else if (fields.contains(DateTimeFieldType.dayOfWeek())) {\n+            reducedPrec = dateByWeek(bld, fields, extended, strictISO);\n+        } else if (fields.remove(DateTimeFieldType.year())) {\n+            bld.append(yearElement());\n+            reducedPrec = true;\n+        } else if (fields.remove(DateTimeFieldType.weekyear())) {\n+            bld.append(weekyearElement());\n+            reducedPrec = true;\n+        }\n+        boolean datePresent = (fields.size() < inputSize);\n+        \n+        // time\n+        time(bld, fields, extended, strictISO, reducedPrec, datePresent);\n+        \n+        // result\n+        if (bld.canBuildFormatter() == false) {\n+            throw new IllegalArgumentException(\"No valid format for fields: \" + fields);\n+        }\n+        return bld.toFormatter();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Creates a date using the calendar date format.\n+     * Specification reference: 5.2.1.\n+     *\n+     * @param bld  the builder\n+     * @param fields  the fields\n+     * @param extended  true to use extended format\n+     * @param strictISO  true to only allow ISO formats\n+     * @return true if reduced precision\n+     * @since 1.1\n+     */\n+    private static boolean dateByMonth(\n+        DateTimeFormatterBuilder bld,\n+        Collection fields,\n+        boolean extended,\n+        boolean strictISO) {\n+        \n+        boolean reducedPrec = false;\n+        if (fields.remove(DateTimeFieldType.year())) {\n+            bld.append(yearElement());\n+            if (fields.remove(DateTimeFieldType.monthOfYear())) {\n+                if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n+                    // YYYY-MM-DD/YYYYMMDD\n+                    appendSeparator(bld, extended);\n+                    bld.appendMonthOfYear(2);\n+                    appendSeparator(bld, extended);\n+                    bld.appendDayOfMonth(2);\n+                } else {\n+                    // YYYY-MM/YYYY-MM\n+                    bld.appendLiteral('-');\n+                    bld.appendMonthOfYear(2);\n+                    reducedPrec = true;\n+                }\n+            } else {\n+                if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n+                    // YYYY--DD/YYYY--DD (non-iso)\n+                    checkNotStrictISO(fields, strictISO);\n+                    bld.appendLiteral('-');\n+                    bld.appendLiteral('-');\n+                    bld.appendDayOfMonth(2);\n+                } else {\n+                    // YYYY/YYYY\n+                    reducedPrec = true;\n+                }\n+            }\n+            \n+        } else if (fields.remove(DateTimeFieldType.monthOfYear())) {\n+            bld.appendLiteral('-');\n+            bld.appendLiteral('-');\n+            bld.appendMonthOfYear(2);\n+            if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n+                // --MM-DD/--MMDD\n+                appendSeparator(bld, extended);\n+                bld.appendDayOfMonth(2);\n+            } else {\n+                // --MM/--MM\n+                reducedPrec = true;\n+            }\n+        } else if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n+            // ---DD/---DD\n+            bld.appendLiteral('-');\n+            bld.appendLiteral('-');\n+            bld.appendLiteral('-');\n+            bld.appendDayOfMonth(2);\n+        }\n+        return reducedPrec;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Creates a date using the ordinal date format.\n+     * Specification reference: 5.2.2.\n+     *\n+     * @param bld  the builder\n+     * @param fields  the fields\n+     * @param extended  true to use extended format\n+     * @param strictISO  true to only allow ISO formats\n+     * @since 1.1\n+     */\n+    private static boolean dateByOrdinal(\n+        DateTimeFormatterBuilder bld,\n+        Collection fields,\n+        boolean extended,\n+        boolean strictISO) {\n+        \n+        boolean reducedPrec = false;\n+        if (fields.remove(DateTimeFieldType.year())) {\n+            bld.append(yearElement());\n+            if (fields.remove(DateTimeFieldType.dayOfYear())) {\n+                // YYYY-DDD/YYYYDDD\n+                appendSeparator(bld, extended);\n+                bld.appendDayOfYear(3);\n+            } else {\n+                // YYYY/YYYY\n+                reducedPrec = true;\n+            }\n+            \n+        } else if (fields.remove(DateTimeFieldType.dayOfYear())) {\n+            // -DDD/-DDD\n+            bld.appendLiteral('-');\n+            bld.appendDayOfYear(3);\n+        }\n+        return reducedPrec;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Creates a date using the calendar date format.\n+     * Specification reference: 5.2.3.\n+     *\n+     * @param bld  the builder\n+     * @param fields  the fields\n+     * @param extended  true to use extended format\n+     * @param strictISO  true to only allow ISO formats\n+     * @since 1.1\n+     */\n+    private static boolean dateByWeek(\n+        DateTimeFormatterBuilder bld,\n+        Collection fields,\n+        boolean extended,\n+        boolean strictISO) {\n+        \n+        boolean reducedPrec = false;\n+        if (fields.remove(DateTimeFieldType.weekyear())) {\n+            bld.append(weekyearElement());\n+            if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {\n+                appendSeparator(bld, extended);\n+                bld.appendLiteral('W');\n+                bld.appendWeekOfWeekyear(2);\n+                if (fields.remove(DateTimeFieldType.dayOfWeek())) {\n+                    // YYYY-WWW-D/YYYYWWWD\n+                    appendSeparator(bld, extended);\n+                    bld.appendDayOfWeek(1);\n+                } else {\n+                    // YYYY-WWW/YYYY-WWW\n+                    reducedPrec = true;\n+                }\n+            } else {\n+                if (fields.remove(DateTimeFieldType.dayOfWeek())) {\n+                    // YYYY-W-D/YYYYW-D (non-iso)\n+                    checkNotStrictISO(fields, strictISO);\n+                    appendSeparator(bld, extended);\n+                    bld.appendLiteral('W');\n+                    bld.appendLiteral('-');\n+                    bld.appendDayOfWeek(1);\n+                } else {\n+                    // YYYY/YYYY\n+                    reducedPrec = true;\n+                }\n+            }\n+            \n+        } else if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {\n+            bld.appendLiteral('-');\n+            bld.appendLiteral('W');\n+            bld.appendWeekOfWeekyear(2);\n+            if (fields.remove(DateTimeFieldType.dayOfWeek())) {\n+                // -WWW-D/-WWWD\n+                appendSeparator(bld, extended);\n+                bld.appendDayOfWeek(1);\n+            } else {\n+                // -WWW/-WWW\n+                reducedPrec = true;\n+            }\n+        } else if (fields.remove(DateTimeFieldType.dayOfWeek())) {\n+            // -W-D/-W-D\n+            bld.appendLiteral('-');\n+            bld.appendLiteral('W');\n+            bld.appendLiteral('-');\n+            bld.appendDayOfWeek(1);\n+        }\n+        return reducedPrec;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds the time fields to the builder.\n+     * Specification reference: 5.3.1.\n+     * \n+     * @param bld  the builder\n+     * @param fields  the fields\n+     * @param extended  whether to use the extended format\n+     * @param strictISO  whether to be strict\n+     * @param reducedPrec  whether the date was reduced precision\n+     * @param datePresent  whether there was a date\n+     * @since 1.1\n+     */\n+    private static void time(\n+        DateTimeFormatterBuilder bld,\n+        Collection fields,\n+        boolean extended,\n+        boolean strictISO,\n+        boolean reducedPrec,\n+        boolean datePresent) {\n+        \n+        boolean hour = fields.remove(DateTimeFieldType.hourOfDay());\n+        boolean minute = fields.remove(DateTimeFieldType.minuteOfHour());\n+        boolean second = fields.remove(DateTimeFieldType.secondOfMinute());\n+        boolean milli = fields.remove(DateTimeFieldType.millisOfSecond());\n+        if (!hour && !minute && !second && !milli) {\n+            return;\n+        }\n+        if (hour || minute || second || milli) {\n+            if (strictISO && reducedPrec) {\n+                throw new IllegalArgumentException(\"No valid ISO8601 format for fields because Date was reduced precision: \" + fields);\n+            }\n+            if (datePresent) {\n+                bld.appendLiteral('T');\n+            }\n+        }\n+        if (hour && minute && second || (hour && !second && !milli)) {\n+            // OK - HMSm/HMS/HM/H - valid in combination with date\n+        } else {\n+            if (strictISO && datePresent) {\n+                throw new IllegalArgumentException(\"No valid ISO8601 format for fields because Time was truncated: \" + fields);\n+            }\n+            if (!hour && (minute && second || (minute && !milli) || second)) {\n+                // OK - MSm/MS/M/Sm/S - valid ISO formats\n+            } else {\n+                if (strictISO) {\n+                    throw new IllegalArgumentException(\"No valid ISO8601 format for fields: \" + fields);\n+                }\n+            }\n+        }\n+        if (hour) {\n+            bld.appendHourOfDay(2);\n+        } else if (minute || second || milli) {\n+            bld.appendLiteral('-');\n+        }\n+        if (extended && hour && minute) {\n+            bld.appendLiteral(':');\n+        }\n+        if (minute) {\n+            bld.appendMinuteOfHour(2);\n+        } else if (second || milli) {\n+            bld.appendLiteral('-');\n+        }\n+        if (extended && minute && second) {\n+            bld.appendLiteral(':');\n+        }\n+        if (second) {\n+            bld.appendSecondOfMinute(2);\n+        } else if (milli) {\n+            bld.appendLiteral('-');\n+        }\n+        if (milli) {\n+            bld.appendLiteral('.');\n+            bld.appendMillisOfSecond(3);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Checks that the iso only flag is not set, throwing an exception if it is.\n+     * \n+     * @param fields  the fields\n+     * @param strictISO  true if only ISO formats allowed\n+     * @since 1.1\n+     */\n+    private static void checkNotStrictISO(Collection fields, boolean strictISO) {\n+        if (strictISO) {\n+            throw new IllegalArgumentException(\"No valid ISO8601 format for fields: \" + fields);\n+        }\n+    }\n+\n+    /**\n+     * Appends the separator if necessary.\n+     *\n+     * @param bld  the builder\n+     * @param extended  whether to append the separator\n+     * @param sep  the separator\n+     * @since 1.1\n+     */\n+    private static void appendSeparator(DateTimeFormatterBuilder bld, boolean extended) {\n+        if (extended) {\n+            bld.appendLiteral('-');\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/format/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestAll.java\n         suite.addTest(TestDateTimeFormat.suite());\n         suite.addTest(TestDateTimeFormatStyle.suite());\n         suite.addTest(TestISODateTimeFormat.suite());\n+        suite.addTest(TestISODateTimeFormat_Fields.suite());\n         \n         suite.addTest(TestPeriodFormatter.suite());\n         suite.addTest(TestISOPeriodFormat.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat_Fields.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeFieldType;\n+import org.joda.time.Partial;\n+\n+/**\n+ * This class is a Junit unit test for ISODateTimeFormat.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestISODateTimeFormat_Fields extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestISODateTimeFormat_Fields.class);\n+    }\n+\n+    public TestISODateTimeFormat_Fields(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_null() {\n+        try {\n+            ISODateTimeFormat.forFields((Collection) null, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_empty() {\n+        try {\n+            ISODateTimeFormat.forFields(new ArrayList(), true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_YMD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.monthOfYear(),\n+                DateTimeFieldType.dayOfMonth(),\n+        };\n+        int[] values = new int[] {2005, 6, 25};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-06-25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-06-25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"20050625\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"20050625\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_Y() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+        };\n+        int[] values = new int[] {2005};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_M() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.monthOfYear(),\n+        };\n+        int[] values = new int[] {6};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"--06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"--06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"--06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"--06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_D() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.dayOfMonth(),\n+        };\n+        int[] values = new int[] {25};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"---25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"---25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"---25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"---25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_YM() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.monthOfYear(),\n+        };\n+        int[] values = new int[] {2005, 6};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005-06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005-06\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_MD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.monthOfYear(),\n+                DateTimeFieldType.dayOfMonth(),\n+        };\n+        int[] values = new int[] {6, 25};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"--06-25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"--06-25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"--0625\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"--0625\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_calBased_YD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.dayOfMonth(),\n+        };\n+        int[] values = new int[] {2005, 25};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005--25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005--25\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_YWD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.weekyear(),\n+                DateTimeFieldType.weekOfWeekyear(),\n+                DateTimeFieldType.dayOfWeek(),\n+        };\n+        int[] values = new int[] {2005, 8, 5};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-W08-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-W08-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005W085\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005W085\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_Y() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.weekyear(),\n+        };\n+        int[] values = new int[] {2005};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_W() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.weekOfWeekyear(),\n+        };\n+        int[] values = new int[] {8};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_D() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.dayOfWeek(),\n+        };\n+        int[] values = new int[] {5};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-W-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-W-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-W-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-W-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_YW() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.weekyear(),\n+                DateTimeFieldType.weekOfWeekyear(),\n+        };\n+        int[] values = new int[] {2005, 8};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005W08\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_WD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.weekOfWeekyear(),\n+                DateTimeFieldType.dayOfWeek(),\n+        };\n+        int[] values = new int[] {8, 5};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-W08-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-W08-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-W085\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-W085\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_weekBased_YD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.weekyear(),\n+                DateTimeFieldType.dayOfWeek(),\n+        };\n+        int[] values = new int[] {2005, 5};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-W-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005W-5\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testForFields_ordinalBased_YD() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.dayOfYear(),\n+        };\n+        int[] values = new int[] {2005, 177};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_ordinalBased_Y() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+        };\n+        int[] values = new int[] {2005};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_ordinalBased_D() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.dayOfYear(),\n+        };\n+        int[] values = new int[] {177};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-177\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_HMSm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.minuteOfHour(),\n+                DateTimeFieldType.secondOfMinute(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {10, 20, 30, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"10:20:30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10:20:30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"102030.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"102030.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_HMS() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.minuteOfHour(),\n+                DateTimeFieldType.secondOfMinute(),\n+        };\n+        int[] values = new int[] {10, 20, 30};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"10:20:30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10:20:30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"102030\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"102030\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_HM() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.minuteOfHour(),\n+        };\n+        int[] values = new int[] {10, 20};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"10:20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10:20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"1020\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"1020\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_H() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+        };\n+        int[] values = new int[] {10};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"10\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"10\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"10\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_MSm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.minuteOfHour(),\n+                DateTimeFieldType.secondOfMinute(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {20, 30, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-20:30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-20:30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-2030.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-2030.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_MS() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.minuteOfHour(),\n+                DateTimeFieldType.secondOfMinute(),\n+        };\n+        int[] values = new int[] {20, 30};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-20:30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-20:30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-2030\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-2030\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_M() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.minuteOfHour(),\n+        };\n+        int[] values = new int[] {20};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"-20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"-20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_Sm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.secondOfMinute(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {30, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"--30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"--30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"--30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"--30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_S() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.secondOfMinute(),\n+        };\n+        int[] values = new int[] {30};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"--30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"--30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"--30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"--30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_m() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"---.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"---.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_Hm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {10, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10--.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"10--.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_HS() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.secondOfMinute(),\n+        };\n+        int[] values = new int[] {10, 30};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10-30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"10-30\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_Mm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.minuteOfHour(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {20, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"-20-.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"-20-.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_HSm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.secondOfMinute(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {10, 30, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10-30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"10-30.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_time_HMm() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.hourOfDay(),\n+                DateTimeFieldType.minuteOfHour(),\n+                DateTimeFieldType.millisOfSecond(),\n+        };\n+        int[] values = new int[] {10, 20, 40};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"10:20-.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"1020-.040\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testForFields_datetime_YMDH() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.monthOfYear(),\n+                DateTimeFieldType.dayOfMonth(),\n+                DateTimeFieldType.hourOfDay(),\n+        };\n+        int[] values = new int[] {2005, 6, 25, 12};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"2005-06-25T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005-06-25T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"20050625T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"20050625T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_datetime_DH() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.dayOfMonth(),\n+                DateTimeFieldType.hourOfDay(),\n+        };\n+        int[] values = new int[] {25, 12};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, true);\n+        assertEquals(\"---25T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"---25T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, true);\n+        assertEquals(\"---25T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"---25T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_datetime_YH() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.year(),\n+                DateTimeFieldType.hourOfDay(),\n+        };\n+        int[] values = new int[] {2005, 12};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"2005T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"2005T12\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testForFields_datetime_DM() {\n+        DateTimeFieldType[] fields = new DateTimeFieldType[] {\n+                DateTimeFieldType.dayOfMonth(),\n+                DateTimeFieldType.minuteOfHour(),\n+        };\n+        int[] values = new int[] {25, 20};\n+        List types = new ArrayList(Arrays.asList(fields));\n+        DateTimeFormatter f = ISODateTimeFormat.forFields(types, true, false);\n+        assertEquals(\"---25T-20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        f = ISODateTimeFormat.forFields(types, false, false);\n+        assertEquals(\"---25T-20\", f.print(new Partial(fields, values)));\n+        assertEquals(0, types.size());\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        types = new ArrayList(Arrays.asList(fields));\n+        try {\n+            ISODateTimeFormat.forFields(types, false, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}", "timestamp": 1119826956, "metainfo": ""}