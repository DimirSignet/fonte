{"sha": "787255cddc1f6ad36d5e62dcb787e68cb4d2ca83", "log": "Improve support for setting partial instant values   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeField.java\n      * \n      * @param instant  the partial instant\n      * @param fieldIndex  the index of this field in the instant\n-     * @param value  the value to set, in the units of the field\n-     * @return the updated milliseconds\n+     * @param values  the values of the partial instant which should be updated\n+     * @param newValue  the value to set, in the units of the field\n+     * @return the passed in values\n      * @throws IllegalArgumentException if the value is invalid\n      */\n-    public abstract int[] set(PartialInstant instant, int fieldIndex, int value);\n-\n-    /**\n-     * Sets a value in the milliseconds supplied from a human-readable, text\n-     * value. If the specified locale is null, the default locale is used.\n+    public abstract int[] set(PartialInstant instant, int fieldIndex, int[] values, int newValue);\n+\n+    /**\n+     * Sets a value in the milliseconds supplied from a human-readable, text value.\n+     * If the specified locale is null, the default locale is used.\n+     * <p>\n+     * If setting this field would make other fields invalid, then those fields\n+     * may be changed. For example if the current date is the 31st January, and\n+     * the month is set to February, the day would be invalid. Instead, the day\n+     * would be changed to the closest value - the 28th/29th February as appropriate.\n      *\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in\n      * @param text  the text value to set\n-     * @param locale the locale to use for selecting a text symbol, null for\n-     * default\n+     * @param locale the locale to use for selecting a text symbol, null for default\n      * @return the updated milliseconds\n      * @throws IllegalArgumentException if the text value is invalid\n      */\n     public abstract long set(long instant, String text, Locale locale);\n \n     /**\n-     * Sets a value in the milliseconds supplied from a human-readable, text\n-     * value.\n+     * Sets a value in the milliseconds supplied from a human-readable, text value.\n+     * If the specified locale is null, the default locale is used.\n+     * <p>\n+     * If setting this field would make other fields invalid, then those fields\n+     * may be changed. For example if the current date is the 31st January, and\n+     * the month is set to February, the day would be invalid. Instead, the day\n+     * would be changed to the closest value - the 28th/29th February as appropriate.\n+     *\n+     * @param instant  the partial instant\n+     * @param fieldIndex  the index of this field in the instant\n+     * @param values  the values of the partial instant which should be updated\n+     * @param text  the text value to set\n+     * @param locale the locale to use for selecting a text symbol, null for default\n+     * @return the passed in values\n+     * @throws IllegalArgumentException if the text value is invalid\n+     */\n+    public abstract int[] set(PartialInstant instant, int fieldIndex, int[] values, String text, Locale locale);\n+\n+    /**\n+     * Sets a value in the milliseconds supplied from a human-readable, text value.\n+     * <p>\n+     * If setting this field would make other fields invalid, then those fields\n+     * may be changed. For example if the current date is the 31st January, and\n+     * the month is set to February, the day would be invalid. Instead, the day\n+     * would be changed to the closest value - the 28th/29th February as appropriate.\n      * \n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in\n      * @param text  the text value to set\n--- a/JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJDayOfWeekDateTimeField.java\n     }\n \n     /**\n-     * Set the value of the specified time instant from text.\n+     * Convert the specified text and locale into a value.\n      * \n-     * @param instant  the time instant in millis to update\n-     * @param text  the text to set from\n-     * @param locale  the locale to use\n-     * @return the updated millis\n+     * @param text  the text to convert\n+     * @param locale  the locale to convert using\n+     * @return the value extracted from the text\n+     * @throws IllegalArgumentException if the text is invalid\n      */\n-    public long set(long instant, String text, Locale locale) {\n-        return set(instant, GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text));\n+    protected int convertText(String text, Locale locale) {\n+        return GJLocaleSymbols.forLocale(locale).dayOfWeekTextToValue(text);\n     }\n \n     public DurationField getRangeDurationField() {\n--- a/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java\n             iChronology.getMillisOfDay(instant);\n     }\n \n-    public long set(long instant, String text, Locale locale) {\n-        return set(instant, GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text));\n+    /**\n+     * Convert the specified text and locale into a value.\n+     * \n+     * @param text  the text to convert\n+     * @param locale  the locale to convert using\n+     * @return the value extracted from the text\n+     * @throws IllegalArgumentException if the text is invalid\n+     */\n+    protected int convertText(String text, Locale locale) {\n+        return GJLocaleSymbols.forLocale(locale).monthOfYearTextToValue(text);\n     }\n \n     public DurationField getRangeDurationField() {\n--- a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n      * \n      * @param instant  the partial instant\n      * @param fieldIndex  the index of this field in the instant\n-     * @param value  the value to set, in the units of the field\n-     * @return the updated milliseconds\n+     * @param values  the values to update\n+     * @param newValue  the value to set, in the units of the field\n+     * @return the updated values\n      * @throws IllegalArgumentException if the value is invalid\n      */\n-    public int[] set(PartialInstant instant, int fieldIndex, int value) {\n-        FieldUtils.verifyValueBounds(this, value, getMinimumValue(instant), getMaximumValue(instant));\n-        int[] array = instant.getValues();\n-        array[fieldIndex] = value;\n-        return array;\n-    }\n-\n-    /**\n-     * Sets a value in the milliseconds supplied from a human-readable, text\n-     * value. If the specified locale is null, the default locale is used.\n-     * <p>\n-     * The default implementation returns set(instant,\n-     * Integer.parseInt(instant)).\n+    public int[] set(PartialInstant instant, int fieldIndex, int[] values, int newValue) {\n+        FieldUtils.verifyValueBounds(this, newValue, getMinimumValue(instant), getMaximumValue(instant));\n+        values[fieldIndex] = newValue;\n+        return values;\n+    }\n+\n+    /**\n+     * Sets a value in the milliseconds supplied from a human-readable, text value.\n+     * If the specified locale is null, the default locale is used.\n+     * <p>\n+     * This implementation uses {@link #convertText(String, Locale)} and\n+     * {@link #set(long, int)}.\n      * <p>\n      * Note: subclasses that override this method should also override\n      * getAsText.\n      *\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in\n      * @param text  the text value to set\n-     * @param locale the locale to use for selecting a text symbol, null for\n-     * default\n+     * @param locale the locale to use for selecting a text symbol, null for default\n      * @return the updated milliseconds\n      * @throws IllegalArgumentException if the text value is invalid\n      */\n     public long set(long instant, String text, Locale locale) {\n+        int value = convertText(text, locale);\n+        return set(instant, value);\n+    }\n+\n+    /**\n+     * Sets a value in the milliseconds supplied from a human-readable, text value.\n+     * If the specified locale is null, the default locale is used.\n+     * <p>\n+     * This implementation uses {@link #convertText(String, Locale)} and\n+     * {@link #set(PartialInstant, int, int[], int)}.\n+     *\n+     * @param instant  the partial instant\n+     * @param fieldIndex  the index of this field in the instant\n+     * @param values  the values of the partial instant which should be updated\n+     * @param text  the text value to set\n+     * @param locale the locale to use for selecting a text symbol, null for default\n+     * @return the passed in values\n+     * @throws IllegalArgumentException if the text value is invalid\n+     */\n+    public int[] set(PartialInstant instant, int fieldIndex, int[] values, String text, Locale locale) {\n+        int value = convertText(text, locale);\n+        return set(instant, fieldIndex, values, value);\n+    }\n+\n+    /**\n+     * Convert the specified text and locale into a value.\n+     * \n+     * @param text  the text to convert\n+     * @param locale  the locale to convert using\n+     * @return the value extracted from the text\n+     * @throws IllegalArgumentException if the text is invalid\n+     */\n+    protected int convertText(String text, Locale locale) {\n         try {\n-            return set(instant, Integer.parseInt(text));\n+            return Integer.parseInt(text);\n         } catch (NumberFormatException ex) {\n             throw new IllegalArgumentException(\"Invalid \" + getName() + \" text: \" + text);\n         }\n--- a/JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java\n         return iField.set(instant, text);\n     }\n \n-    public int[] set(PartialInstant instant, int fieldIndex, int value) {\n-        return iField.set(instant, fieldIndex, value);\n+    public int[] set(PartialInstant instant, int fieldIndex, int[] values, int newValue) {\n+        return iField.set(instant, fieldIndex, values, newValue);\n+    }\n+\n+    public int[] set(PartialInstant instant, int fieldIndex, int[] values, String text, Locale locale) {\n+        return iField.set(instant, fieldIndex, values, text, locale);\n     }\n \n     public DurationField getDurationField() {\n--- a/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n      *\n      * @throws UnsupportedOperationException\n      */\n-    public int[] set(PartialInstant instant, int fieldIndex, int value) {\n+    public int[] set(PartialInstant instant, int fieldIndex, int[] values, int newValue) {\n         throw unsupported();\n     }\n \n      * @throws UnsupportedOperationException\n      */\n     public long set(long instant, String text, Locale locale) {\n+        throw unsupported();\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException\n+     *\n+     * @throws UnsupportedOperationException\n+     */\n+    public int[] set(PartialInstant instant, int fieldIndex, int[] values, String text, Locale locale) {\n         throw unsupported();\n     }\n \n--- a/JodaTime/src/java/org/joda/time/partial/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/partial/TimeOfDay.java\n \n import java.io.Serializable;\n import java.util.Arrays;\n+import java.util.Locale;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n         public TimeOfDay setCopy(int value) {\n-            int[] newValues = getField().set(iInstant, iFieldIndex, value);\n+            int[] newValues = iInstant.getValues();\n+            getField().set(iInstant, iFieldIndex, newValues, value);\n             return new TimeOfDay(iInstant, newValues);\n         }\n \n-//        /**\n-//         * Sets this field in a copy of the TimeOfDay to a parsed text value.\n-//         * <p>\n-//         * The TimeOfDay attached to this property is unchanged by this call.\n-//         * \n-//         * @param text  the text value to set\n-//         * @param locale  optional locale to use for selecting a text symbol\n-//         * @return a copy of the TimeOfDay with the field value changed\n-//         * @throws IllegalArgumentException if the text value isn't valid\n-//         */\n-//        public TimeOfDay setCopy(String text, Locale locale) {\n-//            int[] newValues = getField().set(getInstant(), text, locale);\n-//            return new TimeOfDay(getInstant(), newValues);\n-//        }\n-//\n-//        /**\n-//         * Sets this field in a copy of the TimeOfDay to a parsed text value.\n-//         * <p>\n-//         * The TimeOfDay attached to this property is unchanged by this call.\n-//         * This operation is faster than converting a TimeOfDay to a MutableTimeOfDay\n-//         * and back again when setting one field. When setting multiple fields,\n-//         * it is generally quicker to make the conversion to MutableTimeOfDay.\n-//         * \n-//         * @param text  the text value to set\n-//         * @return a copy of the TimeOfDay with the field value changed\n-//         * @throws IllegalArgumentException if the text value isn't valid\n-//         */\n-//        public final TimeOfDay setCopy(String text) {\n-//            return setCopy(text, null);\n-//        }\n-\n+        /**\n+         * Sets this field in a copy of the TimeOfDay to a parsed text value.\n+         * <p>\n+         * The TimeOfDay attached to this property is unchanged by this call.\n+         * \n+         * @param text  the text value to set\n+         * @param locale  optional locale to use for selecting a text symbol\n+         * @return a copy of the TimeOfDay with the field value changed\n+         * @throws IllegalArgumentException if the text value isn't valid\n+         */\n+        public TimeOfDay setCopy(String text, Locale locale) {\n+            int[] newValues = iInstant.getValues();\n+            getField().set(iInstant, iFieldIndex, newValues, text, locale);\n+            return new TimeOfDay(iInstant, newValues);\n+        }\n+\n+        /**\n+         * Sets this field in a copy of the TimeOfDay to a parsed text value.\n+         * <p>\n+         * The TimeOfDay attached to this property is unchanged by this call.\n+         * \n+         * @param text  the text value to set\n+         * @return a copy of the TimeOfDay with the field value changed\n+         * @throws IllegalArgumentException if the text value isn't valid\n+         */\n+        public TimeOfDay setCopy(String text) {\n+            return setCopy(text, null);\n+        }\n+\n+// TODO\n //        //-----------------------------------------------------------------------\n //        /**\n //         * Rounds to the lowest whole unit of this field on a copy of this TimeOfDay.\n--- a/JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java\n+++ b/JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java\n         assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());\n         assertEquals(2, test.hourOfDay().getMaximumTextLength(null));\n         assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyGetMaxMinValues() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n         assertEquals(0, test.hourOfDay().getMinimumValue());\n         assertEquals(0, test.hourOfDay().getMinimumValueOverall());\n         assertEquals(23, test.hourOfDay().getMaximumValue());\n         assertEquals(40, set.getMillisOfSecond());\n     }\n \n+    public void testPropertySetText() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay set = test.hourOfDay().setCopy(\"12\");\n+        assertEquals(12, set.getHourOfDay());\n+        assertEquals(20, set.getMinuteOfHour());\n+        assertEquals(30, set.getSecondOfMinute());\n+        assertEquals(40, set.getMillisOfSecond());\n+    }\n+\n }", "timestamp": 1086004716, "metainfo": ""}