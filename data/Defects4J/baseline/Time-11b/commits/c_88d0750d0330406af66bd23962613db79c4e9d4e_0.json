{"sha": "88d0750d0330406af66bd23962613db79c4e9d4e", "log": "Add MutableDateTime.property method   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n  * @author Guy Allard\n  * @author Brian S O'Neill\n  * @author Stephen Colebourne\n+ * @author Mike Schrag\n  * @since 1.0\n  * @see DateTime\n  */\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets the property object for the specified type, which contains many useful methods.\n+     *\n+     * @param type  the field type to get the chronology for\n+     * @return the property object\n+     * @throws IllegalArgumentException if the field is null or unsupported\n+     * @since 1.2\n+     */\n+    public Property property(DateTimeFieldType type) {\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"The DateTimeFieldType must not be null\");\n+        }\n+        DateTimeField field = type.getField(getChronology());\n+        if (field.isSupported() == false) {\n+            throw new IllegalArgumentException(\"Field '\" + type + \"' is not supported\");\n+        }\n+        return new Property(this, field);\n+    }\n+\n+    /**\n      * Get the era property.\n      * \n      * @return the era property\n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n import org.joda.time.chrono.BaseChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.field.UnsupportedDateTimeField;\n+import org.joda.time.field.UnsupportedDurationField;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n \n         assertEquals(null, test.getRoundingField());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        MutableDateTime test = new MutableDateTime();\n+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));\n+        assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));\n+        DateTimeFieldType bad = new DateTimeFieldType(\"bad\") {\n+            public DurationFieldType getDurationType() {\n+                return DurationFieldType.weeks();\n+            }\n+            public DurationFieldType getRangeDurationType() {\n+                return null;\n+            }\n+            public DateTimeField getField(Chronology chronology) {\n+                return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType()));\n+            }\n+        };\n+        try {\n+            test.property(bad);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n }", "timestamp": 1125860287, "metainfo": ""}