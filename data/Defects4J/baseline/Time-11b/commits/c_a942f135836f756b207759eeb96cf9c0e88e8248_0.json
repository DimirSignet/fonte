{"sha": "a942f135836f756b207759eeb96cf9c0e88e8248", "log": "Add methods to simplify formatting a datetime   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n import org.joda.time.MutableDateTime;\n import org.joda.time.ReadableInstant;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.ISODateTimeFormat;\n \n /**\n         return ISODateTimeFormat.dateTime().print(this);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Uses the specified formatter to convert this partial to a String.\n+     *\n+     * @param formatter  the formatter to use, null means use <code>toString()</code>.\n+     * @return the formatted string\n+     */\n+    public String toString(DateTimeFormatter formatter) {\n+        if (formatter == null) {\n+            return toString();\n+        }\n+        return formatter.print(this);\n+    }\n+\n }\n--- a/JodaTime/src/java/org/joda/time/base/AbstractPartial.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractPartial.java\n import org.joda.time.DurationFieldType;\n import org.joda.time.ReadableInstant;\n import org.joda.time.ReadablePartial;\n+import org.joda.time.format.DateTimeFormatter;\n \n /**\n  * AbstractPartial provides a standard base implementation of most methods\n  * Calculations on are performed using a {@link Chronology}.\n  * This chronology is set to be in the UTC time zone for all calculations.\n  * <p>\n- * The methods on this class uses {@link ReadablePartial#size()},\n- * {@link ReadablePartial#getField(int)} and {@link ReadablePartial#getValue(int)}\n- * to calculate their results. Subclasses may have a better implementation.\n+ * The methods on this class use {@link ReadablePartial#size()},\n+ * {@link AbstractPartial#getField(int, Chronology)} and\n+ * {@link ReadablePartial#getValue(int)} to calculate their results.\n+ * Subclasses may have a better implementation.\n  * <p>\n  * AbstractPartial allows subclasses may be mutable and not thread-safe.\n  *\n         return total;\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Uses the specified formatter to convert this partial to a String.\n+     *\n+     * @param formatter  the formatter to use, null means use <code>toString()</code>.\n+     * @return the formatted string\n+     */\n+    public String toString(DateTimeFormatter formatter) {\n+        if (formatter == null) {\n+            return toString();\n+        }\n+        return formatter.print(this);\n+    }\n+\n }", "timestamp": 1118185381, "metainfo": ""}