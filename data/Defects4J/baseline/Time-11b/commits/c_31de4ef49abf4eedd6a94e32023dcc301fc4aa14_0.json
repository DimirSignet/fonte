{"sha": "31de4ef49abf4eedd6a94e32023dcc301fc4aa14", "log": "Add Period normalizedStandard(), normalizedStandard(PeriodType) Fix Period withXxx() to throw UnsupportedOperationException  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n import java.io.Serializable;\n \n import org.joda.time.base.BasePeriod;\n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.FieldUtils;\n \n /**\n      * <p>\n      * Each field of the period is added separately. Thus a period of\n      * 2 hours 30 minutes plus 3 hours 40 minutes will produce a result\n-     * of 5 hours 70 minutes.\n+     * of 5 hours 70 minutes - see {@link #normalizedStandard()}.\n      * <p>\n      * If the period being added contains a non-zero amount for a field that\n      * is not supported in this period then an exception is thrown.\n      * <p>\n      * Each field of the period is subtracted separately. Thus a period of\n      * 3 hours 30 minutes minus 2 hours 40 minutes will produce a result\n-     * of 1 hour and -10 minutes.\n+     * of 1 hour and -10 minutes - see {@link #normalizedStandard()}.\n      * <p>\n      * If the period being added contains a non-zero amount for a field that\n      * is not supported in this period then an exception is thrown.\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Normalizes this period using standard rules, assuming a 12 month year,\n+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute.\n+     * <p>\n+     * This method allows you to normalize a period.\n+     * However to achieve this it makes the assumption that all years are\n+     * 12 months, all weeks are 7 days, all days are 24 hours,\n+     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n+     * true when daylight savings time is considered, and may also not be true\n+     * for some chronologies. However, it is included as it is a useful operation\n+     * for many applications and business rules.\n+     * <p>\n+     * If the period contains years or months, then the months will be\n+     * normalized to be between 0 and 11. The days field and below will be\n+     * normalized as necessary, however this will not overflow into the months\n+     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n+     * But a period of 1 month 40 days will remain as 1 month 40 days.\n+     * <p>\n+     * The result will always have a <code>PeriodType</code> of standard, thus\n+     * days will be grouped into weeks.\n+     * \n+     * @return a normalized period equivalent to this period\n+     * @throws ArithmeticException if any field is too large to be represented\n+     * @since 1.5\n+     */\n+    public Period normalizedStandard() {\n+        return normalizedStandard(PeriodType.standard());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Normalizes this period using standard rules, assuming a 12 month year,\n+     * 7 day week, 24 hour day, 60 minute hour and 60 second minute,\n+     * providing control over how the result is split into fields.\n+     * <p>\n+     * This method allows you to normalize a period.\n+     * However to achieve this it makes the assumption that all years are\n+     * 12 months, all weeks are 7 days, all days are 24 hours,\n+     * all hours are 60 minutes and all minutes are 60 seconds. This is not\n+     * true when daylight savings time is considered, and may also not be true\n+     * for some chronologies. However, it is included as it is a useful operation\n+     * for many applications and business rules.\n+     * <p>\n+     * If the period contains years or months, then the months will be\n+     * normalized to be between 0 and 11. The days field and below will be\n+     * normalized as necessary, however this will not overflow into the months\n+     * field. Thus a period of 1 year 15 months will normalize to 2 years 3 months.\n+     * But a period of 1 month 40 days will remain as 1 month 40 days.\n+     * <p>\n+     * The PeriodType parameter controls how the result is created. It allows\n+     * you to omit certain fields from the result if desired. For example,\n+     * you may not want the result to include weeks, in which case you pass\n+     * in <code>PeriodType.yearMonthDayTime()</code>.\n+     * \n+     * @param type  the period type of the new period, null means standard type\n+     * @return a normalized period equivalent to this period\n+     * @throws ArithmeticException if any field is too large to be represented\n+     * @throws UnsupportedOperationException if this period contains non-zero\n+     *  years or months but the specified period type does not support them\n+     * @since 1.5\n+     */\n+    public Period normalizedStandard(PeriodType type) {\n+        long millis = getMillis();  // no overflow can happen, even with Integer.MAX_VALUEs\n+        millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));\n+        millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));\n+        millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));\n+        millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));\n+        millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));\n+        Period result = new Period(millis, DateTimeUtils.getPeriodType(type), ISOChronology.getInstanceUTC());\n+        int years = getYears();\n+        int months = getMonths();\n+        if (years != 0 || months != 0) {\n+            years = FieldUtils.safeAdd(years, months / 12);\n+            months = months % 12;\n+            if (years != 0) {\n+                result = result.withYears(years);\n+            }\n+            if (months != 0) {\n+                result = result.withMonths(months);\n+            }\n+        }\n+        return result;\n+    }\n+\n }\n--- a/JodaTime/src/java/org/joda/time/PeriodType.java\n+++ b/JodaTime/src/java/org/joda/time/PeriodType.java\n      * @param index  the index to use\n      * @param values  the array to populate\n      * @param newValue  the value to set\n-     * @throws IllegalArgumentException if not supported\n+     * @throws UnsupportedOperationException if not supported\n      */\n     boolean setIndexedField(ReadablePeriod period, int index, int[] values, int newValue) {\n         int realIndex = iIndices[index];\n         if (realIndex == -1) {\n-            throw new IllegalArgumentException(\"Field is not supported\");\n+            throw new UnsupportedOperationException(\"Field is not supported\");\n         }\n         values[realIndex] = newValue;\n         return true;\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n         try {\n             test.withYears(1);\n             fail();\n-        } catch (IllegalArgumentException ex) {}\n+        } catch (UnsupportedOperationException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(0, test.toStandardDuration().getMillis());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testNormalizedStandard_yearMonth1() {\n+        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard();\n+        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n+        assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_yearMonth2() {\n+        Period test = new Period(Integer.MAX_VALUE, 15, 0, 0, 0, 0, 0, 0);\n+        try {\n+            test.normalizedStandard();\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testNormalizedStandard_weekDay1() {\n+        Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard();\n+        assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test);\n+        assertEquals(new Period(0, 0, 2, 5, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_weekDay2() {\n+        Period test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0);\n+        try {\n+            test.normalizedStandard();\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testNormalizedStandard_yearMonthWeekDay() {\n+        Period test = new Period(1, 15, 1, 12, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard();\n+        assertEquals(new Period(1, 15, 1, 12, 0, 0, 0, 0), test);\n+        assertEquals(new Period(2, 3, 2, 5, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_yearMonthDay() {\n+        Period test = new Period(1, 15, 0, 36, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard();\n+        assertEquals(new Period(1, 15, 0, 36, 0, 0, 0, 0), test);\n+        assertEquals(new Period(2, 3, 5, 1, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_negative() {\n+        Period test = new Period(0, 0, 0, 0, 2, -10, 0, 0);\n+        Period result = test.normalizedStandard();\n+        assertEquals(new Period(0, 0, 0, 0, 2, -10, 0, 0), test);\n+        assertEquals(new Period(0, 0, 0, 0, 1, 50, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_fullNegative() {\n+        Period test = new Period(0, 0, 0, 0, 1, -70, 0, 0);\n+        Period result = test.normalizedStandard();\n+        assertEquals(new Period(0, 0, 0, 0, 1, -70, 0, 0), test);\n+        assertEquals(new Period(0, 0, 0, 0, 0, -10, 0, 0), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNormalizedStandard_periodType_yearMonth1() {\n+        Period test = new Period(1, 15, 0, 0, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard((PeriodType) null);\n+        assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);\n+        assertEquals(new Period(2, 3, 0, 0, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_periodType_yearMonth2() {\n+        Period test = new Period(Integer.MAX_VALUE, 15, 0, 0, 0, 0, 0, 0);\n+        try {\n+            test.normalizedStandard((PeriodType) null);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testNormalizedStandard_periodType_yearMonth3() {\n+        Period test = new Period(1, 15, 3, 4, 0, 0, 0, 0);\n+        try {\n+            test.normalizedStandard(PeriodType.dayTime());\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+    }\n+\n+    public void testNormalizedStandard_periodType_weekDay1() {\n+        Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard((PeriodType) null);\n+        assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test);\n+        assertEquals(new Period(0, 0, 2, 5, 0, 0, 0, 0), result);\n+    }\n+\n+    public void testNormalizedStandard_periodType_weekDay2() {\n+        Period test = new Period(0, 0, Integer.MAX_VALUE, 7, 0, 0, 0, 0);\n+        try {\n+            test.normalizedStandard((PeriodType) null);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testNormalizedStandard_periodType_weekDay3() {\n+        Period test = new Period(0, 0, 1, 12, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard(PeriodType.dayTime());\n+        assertEquals(new Period(0, 0, 1, 12, 0, 0, 0, 0), test);\n+        assertEquals(new Period(0, 0, 0, 19, 0, 0, 0, 0, PeriodType.dayTime()), result);\n+    }\n+\n+    public void testNormalizedStandard_periodType_yearMonthWeekDay() {\n+        Period test = new Period(1, 15, 1, 12, 0, 0, 0, 0);\n+        Period result = test.normalizedStandard(PeriodType.yearMonthDayTime());\n+        assertEquals(new Period(1, 15, 1, 12, 0, 0, 0, 0), test);\n+        assertEquals(new Period(2, 3, 0, 19, 0, 0, 0, 0, PeriodType.yearMonthDayTime()), result);\n+    }\n+\n+    public void testNormalizedStandard_periodType_yearMonthDay() {\n+        Period test = new Period(1, 15, 0, 36, 27, 0, 0, 0);\n+        Period result = test.normalizedStandard(PeriodType.yearMonthDayTime());\n+        assertEquals(new Period(1, 15, 0, 36, 27, 0, 0, 0), test);\n+        assertEquals(new Period(2, 3, 0, 37, 3, 0, 0, 0, PeriodType.yearMonthDayTime()), result);\n+    }\n+\n }", "timestamp": 1187957080, "metainfo": ""}