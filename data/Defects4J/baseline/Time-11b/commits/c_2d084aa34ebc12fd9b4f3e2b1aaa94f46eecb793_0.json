{"sha": "2d084aa34ebc12fd9b4f3e2b1aaa94f46eecb793", "log": "Refine instant API and test   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Sets the value of the specified field.\n-     * It is permitted to use a field from another Chronology.\n-     * For example:\n-     * <pre>\n-     * MutableDateTime dt = new MutableDateTime();\n-     * dt.set(GJChronology.getInstance().year(), 2002);\n-     * </pre>\n-     * \n-     * @param field  the DateTimeField to use\n-     * @param value the value\n-     * @throws IllegalArgumentException if the field is null\n-     * @throws IllegalArgumentException if the value is invalid\n-     */\n-    public void set(final DateTimeField field, final int value) {\n-        if (field == null) {\n-            throw new IllegalArgumentException(\"The DateTimeField must not be null\");\n-        }\n-        setMillis(field.set(getMillis(), value));\n-    }\n-\n-    /**\n-     * Adds the to the datetime the amount represented by the duration multiplied by the value.\n-     * It is permitted to use a field from another Chronology.\n-     * For example:\n-     * <pre>\n-     * MutableDateTime dt = new MutableDateTime();\n-     * dt.add(GJChronology.getInstance().years(), 2);\n-     * </pre>\n-     * \n-     * @param field  the DurationField to use\n-     * @param value the value\n-     * @throws IllegalArgumentException if the field is null\n-     * @throws IllegalArgumentException if the value is invalid\n-     */\n-    public void add(final DurationField field, final int value) {\n-        if (field == null) {\n-            throw new IllegalArgumentException(\"The DurationField must not be null\");\n-        }\n-        setMillis(field.add(getMillis(), value));\n+     * Sets the value of one of the fields of the instant, such as hourOfDay.\n+     *\n+     * @param type  a field type, usually obtained from DateTimeFieldType, null ignored\n+     * @param value  the value to set the field to\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public void set(DateTimeFieldType type, int value) {\n+        if (type != null) {\n+            setMillis(type.getField(getChronology()).set(getMillis(), value));\n+        }\n+    }\n+\n+    /**\n+     * Adds to the instant specifying the duration and multiple to add.\n+     *\n+     * @param type  a field type, usually obtained from DateTimeFieldType, null ignored\n+     * @param amount  the amount to add of this duration\n+     * @throws ArithmeticException if the result exceeds the capacity of the instant\n+     */\n+    public void add(DurationFieldType type, int amount) {\n+        if (type != null) {\n+            setMillis(type.getField(getChronology()).add(getMillis(), amount));\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n+++ b/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Sets the value of one of the fields of a datetime.\n-     * <p>\n-     * DateTimeField instances are generally obtained from a {@link Chronology} subclass.\n-     * However, an application can create its own DateTimeField to manipulate the\n-     * date time millis in new ways.\n+     * Sets the value of one of the fields of the instant, such as hourOfDay.\n      *\n-     * @param field  a DateTimeField instance, usually obtained from a Chronology\n-     * @param value  the value of that field for the millis set in the implementation\n-     * @throws IllegalArgumentException if the field is null\n+     * @param type  a field type, usually obtained from DateTimeFieldType, null ignored\n+     * @param value  the value to set the field to\n      * @throws IllegalArgumentException if the value is invalid\n      */\n-    void set(DateTimeField field, int value);\n+    void set(DateTimeFieldType type, int value);\n \n     /**\n-     * Adds to the instant specifying the duration and multiple.\n-     * <p>\n-     * DurationField instances are generally obtained from a {@link Chronology} subclass.\n-     * However, an application can create its own DurationField to manipulate the\n-     * date time millis in new ways.\n+     * Adds to the instant specifying the duration and multiple to add.\n      *\n-     * @param field  a DurationField instance, usually obtained from a Chronology\n-     * @param value  the number of times to add the duration\n-     * @throws IllegalArgumentException if the field is null\n+     * @param type  a field type, usually obtained from DateTimeFieldType, null ignored\n+     * @param amount  the amount to add of this duration\n      * @throws ArithmeticException if the result exceeds the capacity of the instant\n      */\n-    void add(DurationField field, int value);\n+    void add(DurationFieldType type, int amount);\n \n }\n--- a/JodaTime/src/java/org/joda/time/ReadableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/ReadableDateTime.java\n public interface ReadableDateTime extends ReadableInstant {\n \n     /**\n-     * Get the value of one of the fields of a datetime.\n-     * <p>\n-     * This method uses the chronology of the datetime to obtain the value.\n-     * It is essentially a generic way of calling one of the get methods.\n-     *\n-     * @param type  a field type, usually obtained from DateTimeFieldType\n-     * @return the value of that field\n-     * @throws IllegalArgumentException if the field is null\n-     */\n-    int get(DateTimeFieldType type);\n-\n-    /**\n      * Get the day of week field value.\n      * <p>\n      * The values for the day of week are defined in {@link DateTimeConstants}.\n     DateTime toDateTime();\n \n     /**\n-     * Get this object as a DateTime.\n-     * <p>\n-     * If the implementation of the interface is a DateTime in the correct zone,\n-     * it is returned directly.\n-     * \n-     * @param zone  time zone to apply\n-     * @return a DateTime using the same millis\n-     * @throws IllegalArgumentException if the time zone is null\n-     */\n-    DateTime toDateTime(DateTimeZone zone);\n-\n-    /**\n-     * Get this object as a DateTime.\n-     * <p>\n-     * If the implementation of the interface is a DateTime in the correct chronology,\n-     * it is returned directly.\n-     * \n-     * @param chronology  chronology to apply\n-     * @return a DateTime using the same millis\n-     * @throws IllegalArgumentException if the chronology is null\n-     */\n-    DateTime toDateTime(Chronology chronology);\n-\n-    /**\n      * Get this object as a MutableDateTime, always returning a new instance.\n      * \n      * @return a MutableDateTime using the same millis\n      */\n     MutableDateTime toMutableDateTime();\n-\n-    /**\n-     * Get this object as a MutableDateTime, always returning a new instance.\n-     * \n-     * @param zone  time zone to apply\n-     * @return a MutableDateTime using the same millis\n-     * @throws IllegalArgumentException if the time zone is null\n-     */\n-    MutableDateTime toMutableDateTime(DateTimeZone zone);\n-\n-    /**\n-     * Get this object as a MutableDateTime, always returning a new instance.\n-     * \n-     * @param chronology  chronology to apply\n-     * @return a MutableDateTime using the same millis\n-     * @throws IllegalArgumentException if the chronology is null\n-     */\n-    MutableDateTime toMutableDateTime(Chronology chronology);\n \n     /**\n      * Output the instant using the specified format pattern.\n--- a/JodaTime/src/java/org/joda/time/ReadableInstant.java\n+++ b/JodaTime/src/java/org/joda/time/ReadableInstant.java\n     DateTimeZone getZone();\n \n     /**\n-     * Gets a value of the specified field, which is obtained from a Chronology.\n-     * <p>\n-     * Field instances are generally obtained from a {@link Chronology}.\n-     * However, an application can create its own fields to manipulate the\n-     * datetime millis in new ways.\n-     *\n-     * @param field  a field, usually obtained from a Chronology\n-     * @return the value of that field for the millis set in the implementation\n-     * @throws IllegalArgumentException if the field is null\n-     */\n-    int get(DateTimeField field);\n+     * Get the value of one of the fields of a datetime.\n+     * <p>\n+     * This method uses the chronology of the instant to obtain the value.\n+     *\n+     * @param type  a field type, usually obtained from DateTimeFieldType, not null\n+     * @return the value of that field\n+     * @throws IllegalArgumentException if the field type is null\n+     */\n+    int get(DateTimeFieldType type);\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Instant;\n     }\n \n     /**\n-     * Get the value of the specified field.\n+     * Get the value of one of the fields of a datetime using the chronology of the instant.\n+     * <p>\n+     * This method uses the chronology of the instant to obtain the value.\n+     * For example:\n+     * <pre>\n+     * DateTime dt = new DateTime();\n+     * int year = dt.get(DateTimeFieldType.year());\n+     * </pre>\n+     *\n+     * @param type  a field type, usually obtained from DateTimeFieldType, not null\n+     * @return the value of that field\n+     * @throws IllegalArgumentException if the field type is null\n+     */\n+    public int get(DateTimeFieldType type) {\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"The DateTimeFieldType must not be null\");\n+        }\n+        return type.getField(getChronology()).get(getMillis());\n+    }\n+\n+    /**\n+     * Get the value of one of the fields of a datetime.\n      * <p>\n      * This could be used to get a field using a different Chronology.\n      * For example:\n      * <pre>\n      * Instant dt = new Instant();\n-     * int gjYear = dt.get(GJChronology.getInstance().year());\n+     * int gjYear = dt.get(Chronology.getCoptic().year());\n      * </pre>\n      * \n-     * @param field  the DateTimeField subclass to use\n+     * @param field  the DateTimeField to use, not null\n      * @return the value\n      * @throws IllegalArgumentException if the field is null\n      */\n--- a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testGet() {\n-        Instant test = new Instant();\n+    public void testGet_DateTimeFieldType() {\n+        Instant test = new Instant();  // 2002-06-09\n+        assertEquals(1, test.get(DateTimeFieldType.era()));\n+        assertEquals(20, test.get(DateTimeFieldType.centuryOfEra()));\n+        assertEquals(2, test.get(DateTimeFieldType.yearOfCentury()));\n+        assertEquals(2002, test.get(DateTimeFieldType.yearOfEra()));\n+        assertEquals(2002, test.get(DateTimeFieldType.year()));\n+        assertEquals(6, test.get(DateTimeFieldType.monthOfYear()));\n+        assertEquals(9, test.get(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(2002, test.get(DateTimeFieldType.weekyear()));\n+        assertEquals(23, test.get(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(7, test.get(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(160, test.get(DateTimeFieldType.dayOfYear()));\n+        assertEquals(0, test.get(DateTimeFieldType.halfdayOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfHalfday()));  // UTC zone\n+        assertEquals(24, test.get(DateTimeFieldType.clockhourOfDay()));  // UTC zone\n+        assertEquals(12, test.get(DateTimeFieldType.clockhourOfHalfday()));  // UTC zone\n+        assertEquals(0, test.get(DateTimeFieldType.hourOfDay()));  // UTC zone\n+        assertEquals(0, test.get(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(0, test.get(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(0, test.get(DateTimeFieldType.secondOfDay()));\n+        assertEquals(0, test.get(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(0, test.get(DateTimeFieldType.millisOfDay()));\n+        try {\n+            test.get((DateTimeFieldType) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGet_DateTimeField() {\n+        Instant test = new Instant();  // 2002-06-09\n         assertEquals(1, test.get(ISOChronology.getInstance().era()));\n         assertEquals(20, test.get(ISOChronology.getInstance().centuryOfEra()));\n         assertEquals(2, test.get(ISOChronology.getInstance().yearOfCentury()));\n         assertEquals(0, test.get(ISOChronology.getInstance().millisOfSecond()));\n         assertEquals(60 * 60 * 1000, test.get(ISOChronology.getInstance().millisOfDay()));\n         try {\n-            test.get(null);\n+            test.get((DateTimeField) null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testAdd_DurationField_int1() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        test.add(ISOChronology.getInstance().years(), 8);\n+    public void testAdd_DurationFieldType_int1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add(DurationFieldType.years(), 8);\n         assertEquals(2010, test.getYear());\n     }\n \n-    public void testAdd_DurationField_int2() {\n-        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        try {\n-            test.add((DurationField) null, 2010);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+    public void testAdd_DurationFieldType_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add((DurationFieldType) null, 2010); // has no effect\n         assertEquals(TEST_TIME1, test.getMillis());\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java\n     //-----------------------------------------------------------------------\n     public void testSet_DateTimeField_int1() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        test.set(ISOChronology.getInstance().year(), 2010);\n+        test.set(DateTimeFieldType.year(), 2010);\n         assertEquals(2010, test.getYear());\n     }\n \n     public void testSet_DateTimeField_int2() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME1);\n-        try {\n-            test.set(null, 2010);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        test.set(null, 2010); // has no effect\n         assertEquals(TEST_TIME1, test.getMillis());\n     }\n \n     public void testSet_DateTimeField_int3() {\n         MutableDateTime test = new MutableDateTime(TEST_TIME1);\n         try {\n-            test.set(ISOChronology.getInstance().monthOfYear(), 13);\n+            test.set(DateTimeFieldType.monthOfYear(), 13);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         assertEquals(TEST_TIME1, test.getMillis());\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n         ReadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getGJ());\n         assertEquals(0L, m.getStartMillis());\n         assertEquals(123L, m.getEndMillis());\n+        assertEquals(Chronology.getGJ(), m.getChronology());\n+    }\n+\n+    public void testSetIntoInterval_Object4() throws Exception {\n+        MutableInterval i = new MutableInterval(0L, 123L) {\n+            public Chronology getChronology() {\n+                return null; // bad\n+            }\n+        };\n+        MutableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());\n+        ReadableIntervalConverter.INSTANCE.setInto(m, i, null);\n+        assertEquals(0L, m.getStartMillis());\n+        assertEquals(123L, m.getEndMillis());\n         assertEquals(Chronology.getISO(), m.getChronology());\n     }\n ", "timestamp": 1094923649, "metainfo": ""}