{"sha": "65727d7eb64c29db1f8f063b57f837da3f4ab98b", "log": "Handle broken serialization in other tools [3117678] Some tools can't handle the joda-time stub serialization, kludge a fix for them Also add final to some variables  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/main/java/org/joda/time/LocalDate.java\n     }\n \n     /** The local millis from 1970-01-01T00:00:00 */\n-    private long iLocalMillis;\n+    private final long iLocalMillis;\n     /** The chronology to use in UTC. */\n-    private Chronology iChronology;\n+    private final Chronology iChronology;\n     /** The cached hash code. */\n     private transient volatile int iHash;\n \n         long instant = chronology.getDateTimeMillis(year, monthOfYear, dayOfMonth, 0);\n         iChronology = chronology;\n         iLocalMillis = instant;\n+    }\n+\n+    /**\n+     * Handle broken serialization from other tools.\n+     * @return the resolved object, not null\n+     */\n+    private Object readResolve() {\n+        if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {\n+            return new LocalDate(iLocalMillis, iChronology.withUTC());\n+        }\n+        return this;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/main/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/main/java/org/joda/time/LocalDateTime.java\n     private static final int MILLIS_OF_DAY = 3;\n \n     /** The local millis from 1970-01-01T00:00:00 */\n-    private long iLocalMillis;\n+    private final long iLocalMillis;\n     /** The chronology to use in UTC */\n-    private Chronology iChronology;\n+    private final Chronology iChronology;\n \n     //-----------------------------------------------------------------------\n     /**\n             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n         iChronology = chronology;\n         iLocalMillis = instant;\n+    }\n+\n+    /**\n+     * Handle broken serialization from other tools.\n+     * @return the resolved object, not null\n+     */\n+    private Object readResolve() {\n+        if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {\n+            return new LocalDateTime(iLocalMillis, iChronology.withUTC());\n+        }\n+        return this;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/main/java/org/joda/time/LocalTime.java\n+++ b/JodaTime/src/main/java/org/joda/time/LocalTime.java\n     }\n \n     /** The local millis from 1970-01-01T00:00:00 */\n-    private long iLocalMillis;\n+    private final long iLocalMillis;\n     /** The chronology to use, in UTC */\n-    private Chronology iChronology;\n+    private final Chronology iChronology;\n \n     //-----------------------------------------------------------------------\n     /**\n         iLocalMillis = instant;\n     }\n \n+    /**\n+     * Handle broken serialization from other tools.\n+     * @return the resolved object, not null\n+     */\n+    private Object readResolve() {\n+        if (DateTimeZone.UTC.equals(iChronology.getZone()) == false) {\n+            return new LocalTime(iLocalMillis, iChronology.withUTC());\n+        }\n+        return this;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the number of fields in this partial, which is four.\n--- a/JodaTime/src/main/java/org/joda/time/MonthDay.java\n+++ b/JodaTime/src/main/java/org/joda/time/MonthDay.java\n         super(partial, chrono);\n     }\n \n+    /**\n+     * Handle broken serialization from other tools.\n+     * @return the resolved object, not null\n+     */\n+    private Object readResolve() {\n+        if (DateTimeZone.UTC.equals(getChronology().getZone()) == false) {\n+            return new MonthDay(this, getChronology().withUTC());\n+        }\n+        return this;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the number of fields in this partial, which is two.\n--- a/JodaTime/src/main/java/org/joda/time/YearMonth.java\n+++ b/JodaTime/src/main/java/org/joda/time/YearMonth.java\n         super(partial, chrono);\n     }\n \n+    /**\n+     * Handle broken serialization from other tools.\n+     * @return the resolved object, not null\n+     */\n+    private Object readResolve() {\n+        if (DateTimeZone.UTC.equals(getChronology().getZone()) == false) {\n+            return new YearMonth(this, getChronology().withUTC());\n+        }\n+        return this;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Gets the number of fields in this partial, which is two.\n--- a/JodaTime/src/test/java/org/joda/time/TestSerialization.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestSerialization.java\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n         } else {\n             assertEquals(test, obj);\n         }\n-        \n-        try {\n-            fis = new FileInputStream(\"src/test/resources/\" + filename + \"2.dat\");\n-            ois = new ObjectInputStream(fis);\n-            obj = ois.readObject();\n-            ois.close();\n-            if (same) {\n-                assertSame(test, obj);\n-            } else {\n-                assertEquals(test, obj);\n-            }\n-        } catch (FileNotFoundException ex) {\n-            // ignore\n-        }\n+//        try {\n+//            fis = new FileInputStream(\"src/test/resources/\" + filename + \"2.dat\");\n+//            ois = new ObjectInputStream(fis);\n+//            obj = ois.readObject();\n+//            ois.close();\n+//            if (same) {\n+//                assertSame(test, obj);\n+//            } else {\n+//                assertEquals(test, obj);\n+//            }\n+//        } catch (FileNotFoundException ex) {\n+//            // ignore\n+//        }\n     }\n \n     public void inlineCompare(Serializable test, boolean same) throws Exception {", "timestamp": 1292837054, "metainfo": ""}