{"sha": "69d9533d7d152a8aa8e401d567131fe7da25013d", "log": "Automated g4 rollback.  *** Reason for rollback ***  <enter reason for rollback>  *** Original change description ***  Simplify the lattice operations a lot by collapsing them into the base JSType implementation. These were becoming really hard to reason about because of all the virtual method dispatch.  R=ankit DELTA=200  (199 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=323   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/AllType.java\n+++ b/src/com/google/javascript/rhino/jstype/AllType.java\n   }\n \n   @Override\n+  public JSType getLeastSupertype(JSType that) {\n+    if (that.isUnknownType()) {\n+      return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+    }\n+    return this;\n+  }\n+\n+  @Override\n+  public JSType getGreatestSubtype(JSType that) {\n+    return that;\n+  }\n+\n+  @Override\n   public String toString() {\n     return \"*\";\n   }\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n    * getLeastSupertype implementations.\n    */\n   static JSType getLeastSupertype(JSType thisType, JSType thatType) {\n+    if (thatType.isEmptyType() || thatType.isAllType()) {\n+      // Defer to the implementations of the end lattice elements when\n+      // possible.\n+      return thatType.getLeastSupertype(thisType);\n+    }\n+\n     return thisType.registry.createUnionType(thisType, thatType);\n   }\n \n    * getGreatestSubtype implementations.\n    */\n   static JSType getGreatestSubtype(JSType thisType, JSType thatType) {\n-    if (thisType.isUnknownType() || thatType.isUnknownType()) {\n+    if (thatType.isEmptyType() || thatType.isAllType()) {\n+      // Defer to the implementations of the end lattice elements when\n+      // possible.\n+      return thatType.getGreatestSubtype(thisType);\n+    } else if (thisType.isUnknownType() || thatType.isUnknownType()) {\n       // The greatest subtype with any unknown type is the universal\n       // unknown type, unless the two types are equal.\n       return thisType.isEquivalentTo(thatType) ? thisType :\n--- a/src/com/google/javascript/rhino/jstype/NoObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/NoObjectType.java\n import com.google.javascript.rhino.ErrorReporter;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n+\n+import java.io.Serializable;\n \n /**\n  * The bottom Object type, representing the subclass of all objects.\n public class NoObjectType extends FunctionType {\n   private static final long serialVersionUID = 1L;\n \n+  /**\n+   * Visitor for {@link NoObjectType#getLeastSupertype(JSType)}.\n+   */\n+  private final Visitor<JSType> leastSupertypeVisitor =\n+      new LeastSupertypeVisitor();\n+\n+  private class LeastSupertypeVisitor implements Visitor<JSType>, Serializable {\n+    private static final long serialVersionUID = 1L;\n+\n+    public JSType caseNoObjectType() {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    }\n+\n+    public JSType caseUnknownType() {\n+      return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+    }\n+\n+    public JSType caseNoType() {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    }\n+\n+    public JSType caseBooleanType() {\n+      return registry.createUnionType(JSTypeNative.NO_OBJECT_TYPE,\n+          JSTypeNative.BOOLEAN_TYPE);\n+    }\n+\n+    public JSType caseFunctionType(FunctionType type) {\n+      return type;\n+    }\n+\n+    public JSType caseNullType() {\n+      return registry.createUnionType(JSTypeNative.NO_OBJECT_TYPE,\n+          JSTypeNative.NULL_TYPE);\n+    }\n+\n+    public JSType caseNumberType() {\n+      return registry.createUnionType(JSTypeNative.NO_OBJECT_TYPE,\n+          JSTypeNative.NUMBER_TYPE);\n+    }\n+\n+    public JSType caseObjectType(ObjectType type) {\n+      return type;\n+    }\n+\n+    public JSType caseStringType() {\n+      return registry.createUnionType(JSTypeNative.NO_OBJECT_TYPE,\n+          JSTypeNative.STRING_TYPE);\n+    }\n+\n+    public JSType caseUnionType(UnionType type) {\n+      return registry.createUnionType(\n+          getNativeType(JSTypeNative.NO_OBJECT_TYPE), type);\n+    }\n+\n+    public JSType caseAllType() {\n+      return getNativeType(JSTypeNative.ALL_TYPE);\n+    }\n+\n+    public JSType caseVoidType() {\n+      return registry.createUnionType(JSTypeNative.NO_OBJECT_TYPE,\n+          JSTypeNative.VOID_TYPE);\n+    }\n+\n+    public JSType caseEnumElementType(EnumElementType type) {\n+      JSType primitive = type.getPrimitiveType();\n+      return primitive.isObject() ? primitive :\n+          registry.createUnionType(\n+              getNativeType(JSTypeNative.NO_OBJECT_TYPE), type);\n+    }\n+  }\n+\n+  /**\n+   * Visitor for {@link NoObjectType#getGreatestSubtype(JSType)}.\n+   */\n+  private final Visitor<JSType> greatestSubtypeVisitor =\n+      new GreatestSupertypeVisitor();\n+\n+  private class GreatestSupertypeVisitor\n+      implements Visitor<JSType>, Serializable {\n+    private static final long serialVersionUID = 1L;\n+\n+    public JSType caseNoObjectType() {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    }\n+\n+    public JSType caseUnknownType() {\n+      return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+    }\n+\n+    public JSType caseNoType() {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+\n+    public JSType caseBooleanType() {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+\n+    public JSType caseFunctionType(FunctionType type) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    }\n+\n+    public JSType caseNullType() {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+\n+    public JSType caseNumberType() {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+\n+    public JSType caseObjectType(ObjectType type) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    }\n+\n+    public JSType caseStringType() {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+\n+    public JSType caseUnionType(UnionType that) {\n+      JSType anyObjectType = getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+      if (anyObjectType.isSubtype(that)) {\n+        return anyObjectType;\n+      } else if (that.isSubtype(anyObjectType)) {\n+        return that;\n+      } else {\n+        return getNativeType(JSTypeNative.NO_TYPE);\n+      }\n+    }\n+\n+    public JSType caseAllType() {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    }\n+\n+    public JSType caseVoidType() {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    }\n+\n+    public JSType caseEnumElementType(EnumElementType type) {\n+      return type.getPrimitiveType().visit(this);\n+    }\n+  }\n+\n   NoObjectType(JSTypeRegistry registry) {\n     super(registry, null, null,\n           registry.createArrowType(null, null),\n   }\n \n   @Override\n+  public JSType getLeastSupertype(JSType that) {\n+    return that.visit(leastSupertypeVisitor);\n+  }\n+\n+  @Override\n+  public JSType getGreatestSubtype(JSType that) {\n+    return that.visit(greatestSubtypeVisitor);\n+  }\n+\n+  @Override\n   public ObjectType getImplicitPrototype() {\n     return null;\n   }\n--- a/src/com/google/javascript/rhino/jstype/NoType.java\n+++ b/src/com/google/javascript/rhino/jstype/NoType.java\n   }\n \n   @Override\n+  public JSType getLeastSupertype(JSType that) {\n+    return that;\n+  }\n+\n+  @Override\n+  public JSType getGreatestSubtype(JSType that) {\n+    if (that.isUnknownType()) {\n+      return registry.getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+    }\n+    return this;\n+  }\n+\n+  @Override\n   public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n     return BooleanLiteralSet.EMPTY;\n   }\n--- a/src/com/google/javascript/rhino/jstype/UnknownType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnknownType.java\n   }\n \n   @Override\n+  public JSType getLeastSupertype(JSType that) {\n+    return this;\n+  }\n+\n+  @Override\n+  public JSType getGreatestSubtype(JSType that) {\n+    return this;\n+  }\n+\n+  @Override\n   public <T> T visit(Visitor<T> visitor) {\n     return visitor.caseUnknownType();\n   }", "timestamp": 1295563226, "metainfo": ""}