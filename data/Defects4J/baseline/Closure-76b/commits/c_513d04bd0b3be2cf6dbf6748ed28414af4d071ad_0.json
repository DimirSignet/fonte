{"sha": "513d04bd0b3be2cf6dbf6748ed28414af4d071ad", "log": "Remove useless cases in switch statements.  R=acleung DELTA=126  (125 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=103005   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n+++ b/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n         return tryFoldHookExpr(subtree);\n       case Token.HOOK:\n         return tryFoldHook(subtree);\n+      case Token.SWITCH:\n+        return tryOptimizeSwitch(subtree);\n       case Token.IF:\n         return tryFoldIf(subtree);\n       case Token.WHILE:\n         default:\n           return subtree;\n     }\n+  }\n+\n+  /**\n+   * Remove useless switches and cases.\n+   */\n+  private Node tryOptimizeSwitch(Node n) {\n+    Preconditions.checkState(n.getType() == Token.SWITCH);\n+\n+    Node defaultCase = findDefaultCase(n);\n+    if (defaultCase != null && isUselessCase(defaultCase)) {\n+      NodeUtil.redeclareVarsInsideBranch(defaultCase);\n+      n.removeChild(defaultCase);\n+      reportCodeChange();\n+      defaultCase = null;\n+    }\n+\n+    // Removing cases when there exists a default case is not safe.\n+    // TODO(johnlenz): Allow this if the same code is executed.\n+    if (defaultCase == null) {\n+      Node next = null;\n+      // The first child is the switch conditions skip it.\n+      for (Node c = n.getFirstChild().getNext(); c != null; c = next) {\n+        next = c.getNext();\n+        if (!mayHaveSideEffects(c.getFirstChild()) && isUselessCase(c)) {\n+          NodeUtil.redeclareVarsInsideBranch(c);\n+          n.removeChild(c);\n+          reportCodeChange();\n+        }\n+      }\n+    }\n+\n+    if (n.hasOneChild()) {\n+      Node condition = n.removeFirstChild();\n+      Node parent = n.getParent();\n+      Node replacement = new Node(Token.EXPR_RESULT, condition)\n+                            .copyInformationFrom(n);\n+      parent.replaceChild(n, replacement);\n+      reportCodeChange();\n+      return replacement;\n+    }\n+\n+    return null;\n+  }\n+\n+  /**\n+   * @return the default case node or null.\n+   */\n+  private Node findDefaultCase(Node n) {\n+    for (Node c : n.children()) {\n+      if (c.getType() == Token.DEFAULT) {\n+        return c;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * @return Whether the CASE or DEFAULT block does anything useful.\n+   */\n+  private boolean isUselessCase(Node caseNode) {\n+    Node executingCase = caseNode;\n+    while (executingCase != null) {\n+      Preconditions.checkState(executingCase.getType() == Token.DEFAULT\n+          || executingCase.getType() == Token.CASE);\n+      // We only expect a DEFAULT case if the case we are checking is the\n+      // DEFAULT case.  Otherwise we assume the DEFAULT case has already\n+      // been removed.\n+      Preconditions.checkState(caseNode == executingCase\n+          || executingCase.getType() != Token.DEFAULT);\n+      Node block = executingCase.getLastChild();\n+      Preconditions.checkState(block.getType() == Token.BLOCK);\n+      if (block.hasChildren()) {\n+        for (Node blockChild : block.children()) {\n+          int type = blockChild.getType();\n+          // If this is a block with a labelless break, it is useless.\n+          switch (blockChild.getType()) {\n+            case Token.BREAK:\n+              // A break to a different control structure isn't useless.\n+              return blockChild.getFirstChild() == null;\n+            case Token.VAR:\n+              if (blockChild.hasOneChild()\n+                  && blockChild.getFirstChild().getFirstChild() == null) {\n+                // Variable declarations without initializations are ok.\n+                continue;\n+              }\n+              return false;\n+            default:\n+              return false;\n+          }\n+        }\n+      } else {\n+        // Look at the fallthrough case\n+        executingCase = executingCase.getNext();\n+      }\n+    }\n+    return true;\n   }\n \n   private Node tryFoldComma(Node n) {\n--- a/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n \n   /** Check that removing blocks with 1 child works */\n   public void testFoldOneChildBlocksIntegration() {\n+     fold(\"function(){switch(foo()){default:{break}}}\",\n+          \"function(){foo()}\");\n+\n      fold(\"function(){switch(x){default:{break}}}\",\n-          \"function(){switch(x){default:break}}\");\n+          \"function(){}\");\n \n      fold(\"function(){switch(x){default:x;case 1:return 2}}\",\n           \"function(){switch(x){default:case 1:return 2}}\");\n--- a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java\n     fold(\"foo(), true\", \"foo();\");\n     fold(\"function x(){foo(), true}\", \"function x(){foo();}\");\n   }\n+\n+  public void testOptimizeSwitch() {\n+    fold(\"switch(a){}\", \"\");\n+    fold(\"switch(foo()){}\", \"foo()\");\n+    fold(\"switch(a){default:}\", \"\");\n+    fold(\"switch(a){default:break;}\", \"\");\n+    fold(\"switch(a){default:var b;break;}\", \"var b\");\n+    fold(\"switch(a){case 1: default:}\", \"\");\n+    fold(\"switch(a){default: case 1:}\", \"\");\n+    fold(\"switch(a){default: break; case 1:break;}\", \"\");\n+    fold(\"switch(a){default: var b; break; case 1: var c; break;}\",\n+        \"var c; var b;\");\n+    // Can't remove cases if a default exists.\n+    foldSame(\"function f() {switch(a){default: return; case 1: break;}}\");\n+    foldSame(\"function f() {switch(a){case 1: foo();}}\");\n+    foldSame(\"function f() {switch(a){case 3: case 2: case 1: foo();}}\");\n+    // TODO(johnlenz): remove useless cases before \"default\"\n+    foldSame(\"function f() {switch(a){case 2: case 1: default: foo();}}\");\n+    \n+    // Can't remove cases if something useful is done.\n+    foldSame(\"switch(a){case 1: var c =2; break;}\");\n+    foldSame(\"function f() {switch(a){case 1: return;}}\");\n+    foldSame(\"x:switch(a){case 1: break x;}\");\n+  }\n }", "timestamp": 1281652183, "metainfo": ""}