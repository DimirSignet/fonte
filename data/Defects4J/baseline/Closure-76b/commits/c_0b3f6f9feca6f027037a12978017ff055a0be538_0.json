{"sha": "0b3f6f9feca6f027037a12978017ff055a0be538", "log": "Restructure how a JSModule's depth is stored.  R=nicksantos DELTA=49  (18 added, 13 deleted, 18 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=69001   ", "commit": "\n--- a/src/com/google/javascript/jscomp/JSModule.java\n+++ b/src/com/google/javascript/jscomp/JSModule.java\n   /** Modules that this module depends on */\n   private final List<JSModule> deps = new ArrayList<JSModule>();\n \n+  private int depth;\n   /**\n    * Creates an instance.\n    *\n    */\n   public JSModule(String name) {\n     this.name = name;\n+    this.depth = -1;\n   }\n \n   /** Gets the module name. */\n             Lists.newArrayList(modules))).getSortedList();\n     return sortedList.toArray(new JSModule[sortedList.size()]);\n   }\n+\n+  /**\n+   * @param dep the depth to set\n+   */\n+  public void setDepth(int dep) {\n+    this.depth = dep;\n+  }\n+\n+  /**\n+   * @return the depth\n+   */\n+  public int getDepth() {\n+    return depth;\n+  }\n }\n--- a/src/com/google/javascript/jscomp/JSModuleGraph.java\n+++ b/src/com/google/javascript/jscomp/JSModuleGraph.java\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Multimap;\n+import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.deps.SortedDependencies;\n import com.google.javascript.jscomp.deps.SortedDependencies.CircularDependencyException;\n \n  */\n public class JSModuleGraph {\n \n-  /**\n-   * Map from a module to its depth.\n-   */\n-  private Map<JSModule, Integer> moduleDepths;\n+  private Set<JSModule> modules;\n \n   /**\n    * Lists of modules at each depth. <code>modulesByDepth.get(3)</code> is a\n    * Creates a module graph from a list of modules in dependency order.\n    */\n   public JSModuleGraph(List<JSModule> modulesInDepOrder) {\n-    moduleDepths = Maps.newHashMapWithExpectedSize(modulesInDepOrder.size());\n+    modules = Sets.newHashSetWithExpectedSize(modulesInDepOrder.size());\n     modulesByDepth = Lists.newArrayList();\n \n     for (JSModule module : modulesInDepOrder) {\n       int depth = 0;\n       for (JSModule dep : module.getDependencies()) {\n-        Integer depDepth = moduleDepths.get(dep);\n-        if (depDepth == null) {\n+        int depDepth = dep.getDepth();\n+        if (depDepth < 0) {\n           throw new ModuleDependenceException(String.format(\n               \"Modules not in dependency order: %s preceded %s\",\n               module.getName(), dep.getName()),\n         depth = Math.max(depth, depDepth + 1);\n       }\n \n-      moduleDepths.put(module, depth);\n+      module.setDepth(depth);\n+      modules.add(module);\n       if (depth == modulesByDepth.size()) {\n         modulesByDepth.add(new ArrayList<JSModule>());\n       }\n    * Gets an iterable over all modules.\n    */\n   Iterable<JSModule> getAllModules() {\n-    return moduleDepths.keySet();\n+    return modules;\n   }\n \n   /**\n    * Gets the total number of modules.\n    */\n   int getModuleCount() {\n-    return moduleDepths.size();\n+    return modules.size();\n   }\n \n   /**\n    */\n   JSModule getRootModule() {\n     return Iterables.getOnlyElement(modulesByDepth.get(0));\n-  }\n-\n-  /**\n-   * Gets the depth of a module.\n-   *\n-   * @param module A module in this graph\n-   * @return The depth of the module\n-   */\n-  int getDepth(JSModule module) {\n-    return moduleDepths.get(module);\n   }\n \n   /**\n    *     they have no common dependencies\n    */\n   JSModule getDeepestCommonDependency(JSModule m1, JSModule m2) {\n-    int m1Depth = getDepth(m1);\n-    int m2Depth = getDepth(m2);\n+    int m1Depth = m1.getDepth();\n+    int m2Depth = m2.getDepth();\n     // According our definition of depth, the result must have a strictly\n     // smaller depth than either m1 or m2.\n     for (int depth = Math.min(m1Depth, m2Depth) - 1; depth >= 0; depth--) {\n    */\n   public void coalesceDuplicateFiles() {\n     Multimap<String, JSModule> fileRefs = LinkedHashMultimap.create();\n-    for (JSModule module : moduleDepths.keySet()) {\n+    for (JSModule module : modules) {\n       for (CompilerInput jsFile : module.getInputs()) {\n         fileRefs.put(jsFile.getName(), module);\n       }\n     if (m1 == m2) {\n       return 0;\n     }\n-    int d1 = getDepth(m1);\n-    int d2 = getDepth(m2);\n+    int d1 = m1.getDepth();\n+    int d2 = m2.getDepth();\n     return d1 < d2 ? -1 : d2 == d1 ? m1.getName().compareTo(m2.getName()) : 1;\n   }\n \n--- a/test/com/google/javascript/jscomp/JSModuleGraphTest.java\n+++ b/test/com/google/javascript/jscomp/JSModuleGraphTest.java\n   }\n \n   public void testModuleDepth() {\n-    assertEquals(\"A should have depth 0\", 0, graph.getDepth(A));\n-    assertEquals(\"B should have depth 1\", 1, graph.getDepth(B));\n-    assertEquals(\"C should have depth 1\", 1, graph.getDepth(C));\n-    assertEquals(\"D should have depth 2\", 2, graph.getDepth(D));\n-    assertEquals(\"E should have depth 2\", 2, graph.getDepth(E));\n-    assertEquals(\"F should have depth 3\", 3, graph.getDepth(F));\n+    assertEquals(\"A should have depth 0\", 0, A.getDepth());\n+    assertEquals(\"B should have depth 1\", 1, B.getDepth());\n+    assertEquals(\"C should have depth 1\", 1, C.getDepth());\n+    assertEquals(\"D should have depth 2\", 2, D.getDepth());\n+    assertEquals(\"E should have depth 2\", 2, E.getDepth());\n+    assertEquals(\"F should have depth 3\", 3, F.getDepth());\n   }\n \n   public void testDeepestCommonDep() {", "timestamp": 1280196808, "metainfo": ""}