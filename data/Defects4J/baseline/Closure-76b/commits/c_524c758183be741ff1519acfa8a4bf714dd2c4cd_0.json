{"sha": "524c758183be741ff1519acfa8a4bf714dd2c4cd", "log": "Introduce EcmaScript 5 Strict mode output  R=acleung DELTA=98  (60 added, 0 deleted, 38 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=820   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n     if (config.languageIn.length() > 0) {\n       if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") ||\n           config.languageIn.equals(\"ES5_STRICT\")) {\n-        options.languageIn = CompilerOptions.LanguageMode.ECMASCRIPT5;\n+        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n       } else if (config.languageIn.equals(\"ECMASCRIPT5\") ||\n           config.languageIn.equals(\"ES5\")) {\n-        options.languageIn = CompilerOptions.LanguageMode.ECMASCRIPT5;\n+        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n       } else if (config.languageIn.equals(\"ECMASCRIPT3\") ||\n                  config.languageIn.equals(\"ES3\")) {\n-        options.languageIn = CompilerOptions.LanguageMode.ECMASCRIPT3;\n+        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n       } else {\n         throw new FlagUsageException(\"Unknown language `\" + config.languageIn +\n                                      \"' specified.\");\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n \n   CodeGenerator(CodeConsumer consumer) {\n     this(consumer, null);\n+  }\n+\n+  /**\n+   * Insert a ECMASCRIPT 5 strict annotation.\n+   */\n+  public void tagAsStrict() {\n+    add(\"'use strict';\");\n   }\n \n   void add(String str) {\n--- a/src/com/google/javascript/jscomp/CodePrinter.java\n+++ b/src/com/google/javascript/jscomp/CodePrinter.java\n     // Specify a charset to use when outputting source code.  If null,\n     // then just output ASCII.\n     private Charset outputCharset = null;\n+    private boolean tagAsStrict;\n \n     /**\n      * Sets the root node from which to generate the source code.\n      */\n     Builder setOutputCharset(Charset outCharset) {\n       this.outputCharset = outCharset;\n+      return this;\n+    }\n+\n+    /**\n+     * Set whether the output should be tags as ECMASCRIPT 5 Strict.\n+     */\n+    Builder setTagAsStrict(boolean tagAsStrict) {\n+      this.tagAsStrict = tagAsStrict;\n       return this;\n     }\n \n               : Format.COMPACT;\n \n       return toSource(root, outputFormat, lineBreak, lineLengthThreshold,\n-          sourceMap, sourceMapDetailLevel, outputCharset);\n+          sourceMap, sourceMapDetailLevel, outputCharset, tagAsStrict);\n     }\n   }\n \n                                  boolean lineBreak,  int lineLengthThreshold,\n                                  SourceMap sourceMap,\n                                  SourceMap.DetailLevel sourceMapDetailLevel,\n-                                 Charset outputCharset) {\n+                                 Charset outputCharset,\n+                                 boolean tagAsStrict) {\n     Preconditions.checkState(sourceMapDetailLevel != null);\n \n     boolean createSourceMap = (sourceMap != null);\n         outputFormat == Format.TYPED\n         ? new TypedCodeGenerator(mcp, outputCharset)\n         : new CodeGenerator(mcp, outputCharset);\n+\n+    if (tagAsStrict) {\n+      cg.tagAsStrict();\n+    }\n+\n     cg.add(root);\n     mcp.endFile();\n \n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n     builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n+    builder.setTagAsStrict(\n+        options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);\n \n     Charset charset = options.outputCharset != null ?\n         Charset.forName(options.outputCharset) : null;\n \n   @Override\n   public boolean acceptEcmaScript5() {\n-    return options.languageIn == LanguageMode.ECMASCRIPT5;\n-  }\n-\n-  public LanguageMode LanguageMode() {\n-    return options.languageIn;\n+    return options.getLanguageIn() == LanguageMode.ECMASCRIPT5;\n+  }\n+\n+  public LanguageMode languageMode() {\n+    return options.getLanguageIn();\n   }\n \n   @Override\n   Config getParserConfig() {\n     if (parserConfig == null) {\n       Config.LanguageMode mode;\n-      switch (options.languageIn) {\n+      switch (options.getLanguageIn()) {\n         case ECMASCRIPT3:\n           mode = Config.LanguageMode.ECMASCRIPT3;\n           break;\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n   /**\n    * The JavaScript language version accepted.\n    */\n-  LanguageMode languageIn;\n-\n+  private LanguageMode languageIn;\n+\n+  /**\n+   * The JavaScript language version accepted.\n+   */\n+  private LanguageMode languageOut;\n \n   /**\n    * Whether the compiler handles `const' keyword or not.\n   }\n \n   /**\n+   * Sets how goog.tweak calls are processed.\n+   */\n+  public void setLanguageIn(LanguageMode languageIn) {\n+    this.languageIn = languageIn;\n+    this.languageOut = languageIn;\n+  }\n+\n+  public LanguageMode getLanguageIn() {\n+    return languageIn;\n+  }\n+\n+  public LanguageMode getLanguageOut() {\n+    return languageOut;\n+  }\n+\n+  /**\n    * Whether to include \"undefined\" in the default types.\n    *   For example:\n    *     \"{Object}\" is normally \"Object|null\" becomes \"Object|null|undefined\"\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       checks.add(checkSuspiciousProperties);\n     }\n \n-    if (options.languageIn == LanguageMode.ECMASCRIPT5_STRICT\n+    if (options.getLanguageIn() == LanguageMode.ECMASCRIPT5_STRICT\n         || options.checkCaja\n         || options.checkEs5Strict) {\n       checks.add(checkStrictMode);\n--- a/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java\n   protected CompilerOptions getOptions() {\n     // no missing properties check\n     CompilerOptions options = new CompilerOptions();\n-    options.languageIn = LanguageMode.ECMASCRIPT5;\n+    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n     return options;\n   }\n \n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n   static Node parse(String js, boolean checkTypes) {\n     Compiler compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n-    options.languageIn = LanguageMode.ECMASCRIPT5; // Allow getters and setters.\n+    // Allow getters and setters.\n+    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n     compiler.initOptions(options);\n     Node n = compiler.parseTestCode(js);\n \n       int lineThreshold, boolean outputTypes) {\n     return new CodePrinter.Builder(parse(js, true)).setPrettyPrint(prettyprint)\n         .setOutputTypes(outputTypes)\n-        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak).build();\n-  }\n+        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak)\n+        .build();\n+  }\n+\n+  String parsePrint(String js, boolean prettyprint, boolean lineBreak,\n+                    int lineThreshold, boolean outputTypes,\n+                    boolean tagAsStrict) {\n+    return new CodePrinter.Builder(parse(js, true)).setPrettyPrint(prettyprint)\n+        .setOutputTypes(outputTypes)\n+        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak)\n+        .setTagAsStrict(tagAsStrict)\n+        .build();\n+  }\n+\n \n   String printNode(Node n) {\n     return new CodePrinter.Builder(n).setLineLengthThreshold(\n     assertPrint(\"var x = - (2);\", \"var x=-2\");\n   }\n \n-\n+  public void testStrict() {\n+    String result = parsePrint(\"var x\", false, false, 0, false, true);\n+    assertEquals(\"'use strict';var x\", result);\n+  }\n }\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n     CompilerOptions options = new CompilerOptions();\n \n     if (this.acceptES5) {\n-      options.languageIn = LanguageMode.ECMASCRIPT5;\n+      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n     }\n \n     // This doesn't affect whether checkSymbols is run--it just affects\n     CompilerOptions options = getOptions();\n \n     if (this.acceptES5) {\n-      options.languageIn = LanguageMode.ECMASCRIPT5;\n+      options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n     }\n     // Note that in this context, turning on the checkTypes option won't\n     // actually cause the type check to run.\n--- a/test/com/google/javascript/jscomp/CompilerTypeTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTypeTestCase.java\n \n   protected CompilerOptions getOptions() {\n     CompilerOptions options = new CompilerOptions();\n-    options.languageIn = LanguageMode.ECMASCRIPT5;\n+    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n     options.setWarningLevel(\n         DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);\n     options.setCodingConvention(getCodingConvention());\n--- a/test/com/google/javascript/jscomp/ExpressionDecomposerTest.java\n+++ b/test/com/google/javascript/jscomp/ExpressionDecomposerTest.java\n   private static Compiler getCompiler() {\n     Compiler compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n-    options.languageIn = LanguageMode.ECMASCRIPT5;\n+    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n     options.setCodingConvention(new GoogleCodingConvention());\n     compiler.initOptions(options);\n     return compiler;\n--- a/test/com/google/javascript/jscomp/NodeUtilTest.java\n+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java\n   private static Node parse(String js) {\n     Compiler compiler = new Compiler();\n     compiler.initCompilerOptionsIfTesting();\n-    compiler.getOptions().languageIn = LanguageMode.ECMASCRIPT5;\n+    compiler.getOptions().setLanguageIn(LanguageMode.ECMASCRIPT5);\n     Node n = compiler.parseTestCode(js);\n     assertEquals(0, compiler.getErrorCount());\n     return n;\n   private Node parseExpr(String js) {\n     Compiler compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n-    options.languageIn = LanguageMode.ECMASCRIPT5;\n+    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n     compiler.initOptions(options);\n     Node root = compiler.parseTestCode(js);\n     return root.getFirstChild().getFirstChild();\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n   public void setUp() {\n     compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n-    options.languageIn = LanguageMode.ECMASCRIPT5;\n+    options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n     compiler.initOptions(options);\n     registry = compiler.getTypeRegistry();\n     assumptions = Maps.newHashMap();", "timestamp": 1299786506, "metainfo": ""}