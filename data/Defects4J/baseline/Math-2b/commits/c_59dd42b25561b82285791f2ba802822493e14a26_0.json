{"sha": "59dd42b25561b82285791f2ba802822493e14a26", "log": "MATH-1011 Delegate method \"nextInt\" in \"RandomDataGenerator\" to method \"sample\" in \"UniformIntegerDistribution\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java\n+++ b/src/main/java/org/apache/commons/math3/random/RandomDataGenerator.java\n import org.apache.commons.math3.distribution.TDistribution;\n import org.apache.commons.math3.distribution.WeibullDistribution;\n import org.apache.commons.math3.distribution.ZipfDistribution;\n+import org.apache.commons.math3.distribution.UniformIntegerDistribution;\n import org.apache.commons.math3.exception.MathInternalError;\n import org.apache.commons.math3.exception.NotANumberException;\n import org.apache.commons.math3.exception.NotFiniteNumberException;\n \n     /** {@inheritDoc} */\n     public int nextInt(final int lower, final int upper) throws NumberIsTooLargeException {\n-        if (lower >= upper) {\n-            throw new NumberIsTooLargeException(LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND,\n-                                                lower, upper, false);\n-        }\n-        final int max = (upper - lower) + 1;\n-        if (max <= 0) {\n-            // the range is too wide to fit in a positive int (larger than 2^31); as it covers\n-            // more than half the integer range, we use directly a simple rejection method\n-            final RandomGenerator rng = getRandomGenerator();\n-            while (true) {\n-                final int r = rng.nextInt();\n-                if (r >= lower && r <= upper) {\n-                    return r;\n-                }\n-            }\n-        } else {\n-            // we can shift the range and generate directly a positive int\n-            return lower + getRandomGenerator().nextInt(max);\n-        }\n+        return new UniformIntegerDistribution(getRandomGenerator(), lower, upper).sample();\n     }\n \n     /** {@inheritDoc} */", "timestamp": 1375279250, "metainfo": ""}