{"sha": "c11dee306d190276ad812511a8f4b6e75dbf5a39", "log": "Improved checking of null vector elements.  The suggestions by S\u00e9bastien have been added and the second implementation of FieldVector (SparseFieldVector) has been adapted accordingly, despite it is deprecated.  JIRA: MATH-861  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/ArrayFieldVector.java\n import org.apache.commons.math3.exception.ZeroException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.util.MathArrays;\n+import org.apache.commons.math3.util.MathUtils;\n \n /**\n  * This class implements the {@link FieldVector} interface with a {@link FieldElement} array.\n      */\n     public ArrayFieldVector(T[] d)\n             throws NullArgumentException, ZeroException {\n-        if (d == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(d);\n         try {\n             field = d[0].getField();\n             data = d.clone();\n      */\n     public ArrayFieldVector(Field<T> field, T[] d)\n             throws NullArgumentException {\n-        if (d == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(d);\n         this.field = field;\n         data = d.clone();\n     }\n      */\n     public ArrayFieldVector(T[] d, boolean copyArray)\n             throws NullArgumentException, ZeroException {\n-        if (d == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(d);\n         if (d.length == 0) {\n             throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n         }\n      */\n     public ArrayFieldVector(Field<T> field, T[] d, boolean copyArray)\n             throws NullArgumentException {\n-        if (d == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(d);\n         this.field = field;\n         data = copyArray ? d.clone() :  d;\n     }\n      */\n     public ArrayFieldVector(T[] d, int pos, int size)\n             throws NullArgumentException, NumberIsTooLargeException {\n-        if (d == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(d);\n         if (d.length < pos + size) {\n             throw new NumberIsTooLargeException(pos + size, d.length, true);\n         }\n      */\n     public ArrayFieldVector(Field<T> field, T[] d, int pos, int size)\n             throws NullArgumentException, NumberIsTooLargeException {\n-        if (d == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(d);\n         if (d.length < pos + size) {\n             throw new NumberIsTooLargeException(pos + size, d.length, true);\n         }\n      */\n     public ArrayFieldVector(FieldVector<T> v)\n             throws NullArgumentException {\n-        if (v == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(v);\n         field = v.getField();\n         data = MathArrays.buildArray(field, v.getDimension());\n         for (int i = 0; i < data.length; ++i) {\n      */\n     public ArrayFieldVector(ArrayFieldVector<T> v)\n             throws NullArgumentException {\n-        if (v == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(v);\n         field = v.getField();\n         data = v.data.clone();\n     }\n      */\n     public ArrayFieldVector(ArrayFieldVector<T> v, boolean deep)\n             throws NullArgumentException {\n-        if (v == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(v);\n         field = v.getField();\n         data = deep ? v.data.clone() : v.data;\n     }\n      */\n     public ArrayFieldVector(ArrayFieldVector<T> v1, ArrayFieldVector<T> v2)\n             throws NullArgumentException {\n-        if (v1 == null || v2 == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(v1);\n+        MathUtils.checkNotNull(v2);\n         field = v1.getField();\n         data = MathArrays.buildArray(field, v1.data.length + v2.data.length);\n         System.arraycopy(v1.data, 0, data, 0, v1.data.length);\n      */\n     public ArrayFieldVector(ArrayFieldVector<T> v1, T[] v2)\n             throws NullArgumentException {\n-        if (v1 == null || v2 == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(v1);\n+        MathUtils.checkNotNull(v2);\n         field = v1.getField();\n         data = MathArrays.buildArray(field, v1.data.length + v2.length);\n         System.arraycopy(v1.data, 0, data, 0, v1.data.length);\n      */\n     public ArrayFieldVector(T[] v1, ArrayFieldVector<T> v2)\n             throws NullArgumentException {\n-        if (v1 == null || v2 == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(v1);\n+        MathUtils.checkNotNull(v2);\n         field = v2.getField();\n         data = MathArrays.buildArray(field, v1.length + v2.data.length);\n         System.arraycopy(v1, 0, data, 0, v1.length);\n      */\n     public ArrayFieldVector(T[] v1, T[] v2)\n             throws NullArgumentException, ZeroException {\n-        if (v1 == null || v2 == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(v1);\n+        MathUtils.checkNotNull(v2);\n         if (v1.length + v2.length == 0) {\n             throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n         }\n      */\n     public ArrayFieldVector(Field<T> field, T[] v1, T[] v2)\n             throws NullArgumentException, ZeroException {\n-        if (v1 == null || v2 == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(v1);\n+        MathUtils.checkNotNull(v2);\n         if (v1.length + v2.length == 0) {\n             throw new ZeroException(LocalizedFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);\n         }\n     /** {@inheritDoc} */\n     public FieldVector<T> mapDivide(T d)\n         throws NullArgumentException, MathArithmeticException {\n-        if (d == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(d);\n         T[] out = MathArrays.buildArray(field, data.length);\n         for (int i = 0; i < data.length; i++) {\n             out[i] = data[i].divide(d);\n     /** {@inheritDoc} */\n     public FieldVector<T> mapDivideToSelf(T d)\n         throws NullArgumentException, MathArithmeticException {\n-        if (d == null) {\n-            throw new NullArgumentException();\n-        }\n+        MathUtils.checkNotNull(d);\n         for (int i = 0; i < data.length; i++) {\n             data[i] = data[i].divide(d);\n         }\n--- a/src/main/java/org/apache/commons/math3/linear/FieldVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/FieldVector.java\n  * <pre>\n  *   RealVector result = v.mapAddToSelf(3.0).mapTanToSelf().mapSquareToSelf();\n  * </pre>\n+ * <p>\n+ * Note that as almost all operations on {@link FieldElement} throw {@link\n+ * NullArgumentException} when operating on a null element, it is the responsibility\n+ * of <code>FieldVector</code> implementations to make sure no null elements\n+ * are inserted into the vector. This must be done in all constructors and\n+ * all setters.\n+ * <p>\n  *\n  * @param <T> the type of the field elements\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java\n+++ b/src/main/java/org/apache/commons/math3/linear/SparseFieldVector.java\n import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.util.MathArrays;\n+import org.apache.commons.math3.util.MathUtils;\n import org.apache.commons.math3.util.OpenIntToFieldHashMap;\n \n /**\n      *\n      * @param field Field to which the elements belong.\n      * @param values Set of values to create from.\n-     */\n-    public SparseFieldVector(Field<T> field, T[] values) {\n+     * @exception NullArgumentException if values is null\n+     */\n+    public SparseFieldVector(Field<T> field, T[] values) throws NullArgumentException {\n+        MathUtils.checkNotNull(values);\n         this.field = field;\n         virtualSize = values.length;\n         entries = new OpenIntToFieldHashMap<T>(field);\n         }\n     }\n \n-    /** {@inheritDoc} */\n-    public FieldVector<T> append(T d) {\n+    /** {@inheritDoc}\n+     * @exception NullArgumentException if d is null\n+     */\n+    public FieldVector<T> append(T d) throws NullArgumentException {\n+        MathUtils.checkNotNull(d);\n         FieldVector<T> res = new SparseFieldVector<T>(this, 1);\n         res.setEntry(virtualSize, d);\n         return res;\n         return v.mapMultiply(dotProduct(v).divide(v.dotProduct(v)));\n     }\n \n-    /** {@inheritDoc} */\n+    /** {@inheritDoc}\n+     * @exception NullArgumentException if value is null\n+     */\n     public void set(T value) {\n+        MathUtils.checkNotNull(value);\n         for (int i = 0; i < virtualSize; i++) {\n             setEntry(i, value);\n         }\n     }\n \n-    /** {@inheritDoc} */\n-    public void setEntry(int index, T value) throws OutOfRangeException {\n+    /** {@inheritDoc}\n+     * @exception NullArgumentException if value is null\n+     */\n+    public void setEntry(int index, T value) throws NullArgumentException, OutOfRangeException {\n+        MathUtils.checkNotNull(value);\n         checkIndex(index);\n         entries.put(index, value);\n     }", "timestamp": 1363021241, "metainfo": ""}