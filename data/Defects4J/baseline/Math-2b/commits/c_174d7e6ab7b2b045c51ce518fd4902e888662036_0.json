{"sha": "174d7e6ab7b2b045c51ce518fd4902e888662036", "log": "MATH-975 Throw \"SingularMatrixException\" instead of computing a meaningless value.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/MatrixUtils.java\n+++ b/src/main/java/org/apache/commons/math3/linear/MatrixUtils.java\n         final RealMatrix d = m.getSubMatrix(splitIndex1, n - 1, splitIndex1, n - 1);\n \n         final SingularValueDecomposition aDec = new SingularValueDecomposition(a);\n-        final RealMatrix aInv = aDec.getSolver().getInverse();\n+        final DecompositionSolver aSolver = aDec.getSolver();\n+        if (!aSolver.isNonSingular()) {\n+            throw new SingularMatrixException();\n+        }\n+        final RealMatrix aInv = aSolver.getInverse();\n \n         final SingularValueDecomposition dDec = new SingularValueDecomposition(d);\n-        final RealMatrix dInv = dDec.getSolver().getInverse();\n+        final DecompositionSolver dSolver = dDec.getSolver();\n+        if (!dSolver.isNonSingular()) {\n+            throw new SingularMatrixException();\n+        }\n+        final RealMatrix dInv = dSolver.getInverse();\n \n         final RealMatrix tmp1 = a.subtract(b.multiply(dInv).multiply(c));\n         final SingularValueDecomposition tmp1Dec = new SingularValueDecomposition(tmp1);\n-        final RealMatrix result00 = tmp1Dec.getSolver().getInverse();\n+        final DecompositionSolver tmp1Solver = tmp1Dec.getSolver();\n+        if (!tmp1Solver.isNonSingular()) {\n+            throw new SingularMatrixException();\n+        }\n+        final RealMatrix result00 = tmp1Solver.getInverse();\n \n         final RealMatrix tmp2 = d.subtract(c.multiply(aInv).multiply(b));\n         final SingularValueDecomposition tmp2Dec = new SingularValueDecomposition(tmp2);\n-        final RealMatrix result11 = tmp2Dec.getSolver().getInverse();\n+        final DecompositionSolver tmp2Solver = tmp2Dec.getSolver();\n+        if (!tmp2Solver.isNonSingular()) {\n+            throw new SingularMatrixException();\n+        }\n+        final RealMatrix result11 = tmp2Solver.getInverse();\n \n         final RealMatrix result01 = aInv.multiply(b).multiply(result11).scalarMultiply(-1);\n         final RealMatrix result10 = dInv.multiply(c).multiply(result00).scalarMultiply(-1);\n--- a/src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java\n+++ b/src/test/java/org/apache/commons/math3/linear/MatrixUtilsTest.java\n         }\n     }\n \n+    @Test(expected=SingularMatrixException.class)\n+    public void testBlockInverseNonInvertible() {\n+        final double[][] data = {\n+            { -1, 0, 123, 4 },\n+            { -56, 78.9, -0.1, -23.4 },\n+            { 5.67, 8, -9, 1011 },\n+            { 5.67, 8, -9, 1011 },\n+        };\n+\n+        MatrixUtils.blockInverse(new Array2DRowRealMatrix(data), 2);\n+    }\n+\n     @Test\n     public void testIsSymmetric() {\n         final double eps = Math.ulp(1d);", "timestamp": 1368707377, "metainfo": ""}