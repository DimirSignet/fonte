{"sha": "89fbaf69cb78fdaab0bf72502916116f0701ccef", "log": "Fixed checkstyle warnings.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/exception/MathIllegalNumberException.java\n+++ b/src/main/java/org/apache/commons/math3/exception/MathIllegalNumberException.java\n  * @version $Id$\n  */\n public class MathIllegalNumberException extends MathIllegalArgumentException {\n-    /** Serializable version Id. */\n-    private static final long serialVersionUID = -7447085893598031110L;\n \n     /** Helper to avoid boxing warnings. @since 3.3 */\n     protected static final Integer INTEGER_ZERO = Integer.valueOf(0);\n+\n+    /** Serializable version Id. */\n+    private static final long serialVersionUID = -7447085893598031110L;\n \n     /** Requested. */\n     private final Number argument;\n--- a/src/main/java/org/apache/commons/math3/stat/StatUtils.java\n+++ b/src/main/java/org/apache/commons/math3/stat/StatUtils.java\n      * length 0, an empty array is returned.</p>\n      *\n      * @param sample input data\n-     * @return array of array of the most frequently occuring element(s) sorted in ascending order.\n+     * @return array of array of the most frequently occurring element(s) sorted in ascending order.\n      * @throws MathIllegalArgumentException if the indices are invalid or the array is null\n      * @since 3.3\n-     */    \n+     */\n     public static double[] mode(double[] sample) throws MathIllegalArgumentException {\n         if (sample == null) {\n             throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n      * @param begin index (0-based) of the first array element to include\n      * @param length the number of elements to include\n      *\n-     * @return array of array of the most frequently occuring element(s) sorted in ascending order.\n+     * @return array of array of the most frequently occurring element(s) sorted in ascending order.\n      * @throws MathIllegalArgumentException if the indices are invalid or the array is null\n      * @since 3.3\n-     */    \n+     */\n     public static double[] mode(double[] sample, final int begin, final int length) {\n         if (sample == null) {\n             throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);\n         return getMode(sample, begin, length);\n     }\n \n-    /*\n+    /**\n      * Private helper method.\n      * Assumes parameters have been validated.\n+     * @param values input data\n+     * @param begin index (0-based) of the first array element to include\n+     * @param length the number of elements to include\n+     * @return array of array of the most frequently occurring element(s) sorted in ascending order.\n      */\n     private static double[] getMode(double[] values, final int begin, final int length) {\n         // Add the values to the frequency table", "timestamp": 1374568659, "metainfo": ""}