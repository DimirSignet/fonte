{"sha": "a61407827e065cc9454efadbdbd39646d5c99677", "log": "MATH-1011 Replaced implementation (with a more robust one, copied from \"o.a.c.m.random.RandomDataGenerator\").   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/UniformIntegerDistribution.java\n     /** {@inheritDoc} */\n     @Override\n     public int sample() {\n-        final double r = random.nextDouble();\n-        final double scaled = r * upper + (1 - r) * lower + r;\n-        return (int) FastMath.floor(scaled);\n+        final int max = (upper - lower) + 1;\n+        if (max <= 0) {\n+            // The range is too wide to fit in a positive int (larger\n+            // than 2^31); as it covers more than half the integer range,\n+            // we use a simple rejection method.\n+            while (true) {\n+                final int r = random.nextInt();\n+                if (r >= lower &&\n+                    r <= upper) {\n+                    return r;\n+                }\n+            }\n+        } else {\n+            // We can shift the range and directly generate a positive int.\n+            return lower + random.nextInt(max);\n+        }\n     }\n }", "timestamp": 1375273040, "metainfo": ""}