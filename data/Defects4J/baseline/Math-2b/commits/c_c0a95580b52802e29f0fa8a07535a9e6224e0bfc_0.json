{"sha": "c0a95580b52802e29f0fa8a07535a9e6224e0bfc", "log": "[MATH-977] Added implementation of a HaltonSequence.  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/random/HaltonSequenceGenerator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.random;\n+\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NotPositiveException;\n+import org.apache.commons.math3.exception.NullArgumentException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n+import org.apache.commons.math3.util.MathUtils;\n+\n+/**\n+ * Implementation of a Halton sequence.\n+ * <p>\n+ * A Halton sequence is a low-discrepancy sequence generating points in the interval [0, 1] according to\n+ * <pre>\n+ *   H(n) = d_0 / b + d_1 / b^2 .... d_j / b^j+1\n+ *\n+ *   with\n+ *\n+ *   n = d_j * b^j-1 + ... d_1 * b + d_0 * b^0\n+ * </pre>\n+ * For higher dimensions, subsequent prime numbers are used as base, e.g. { 2, 3, 5 } for a Halton sequence in R^3.\n+ * <p>\n+ * Halton sequences are known to suffer from linear correlation for larger prime numbers, thus the individual digits\n+ * are usually scrambled. This implementation already comes with support for up to 40 dimensions with optimal weight\n+ * numbers from <a href=\"http://etd.lib.fsu.edu/theses/available/etd-07062004-140409/unrestricted/dissertation1.pdf\">\n+ * H. Chi: Scrambled quasirandom sequences and their applications</a>.\n+ * <p>\n+ * The generator supports two modes:\n+ * <ul>\n+ *   <li>sequential generation of points: {@link #nextVector()}</li>\n+ *   <li>random access to the i-th point in the sequence: {@link #skipTo(int)}</li>\n+ * </ul>\n+ *\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Halton_sequence\">Halton sequence (Wikipedia)</a>\n+ * @see <a href=\"https://lirias.kuleuven.be/bitstream/123456789/131168/1/mcm2005_bartv.pdf\">\n+ * On the Halton sequence and its scramblings</a>\n+ * @version $Id$\n+ * @since 4.0\n+ */\n+public class HaltonSequenceGenerator implements RandomVectorGenerator {\n+\n+    /** The first 40 primes. */\n+    private static final int[] PRIMES = new int[] {\n+        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n+        71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139,\n+        149, 151, 157, 163, 167, 173\n+    };\n+\n+    /** The optimal weights used for scrambling of the first 40 dimension. */\n+    private static final int[] WEIGHTS = new int[] {\n+        1, 2, 3, 3, 8, 11, 12, 14, 7, 18, 12, 13, 17, 18, 29, 14, 18, 43, 41,\n+        44, 40, 30, 47, 65, 71, 28, 40, 60, 79, 89, 56, 50, 52, 61, 108, 56,\n+        66, 63, 60, 66\n+    };\n+\n+    /** Space dimension. */\n+    private final int dimension;\n+\n+    /** The current index in the sequence. */\n+    private int count = 0;\n+\n+    /** The base numbers for each component. */\n+    private final int[] base;\n+\n+    /** The scrambling weights for each component. */\n+    private final int[] weight;\n+\n+    /**\n+     * Construct a new Halton sequence generator for the given space dimension.\n+     *\n+     * @param dimension the space dimension\n+     * @throws OutOfRangeException if the space dimension is outside the allowed range of [1, 40]\n+     */\n+    public HaltonSequenceGenerator(final int dimension) throws OutOfRangeException {\n+        this(dimension, PRIMES, WEIGHTS);\n+    }\n+\n+    /**\n+     * Construct a new Halton sequence generator with the given base numbers and weights for each dimension.\n+     * The length of the bases array defines the space dimension and is required to be &gt; 0.\n+     *\n+     * @param dimension the space dimension\n+     * @param bases the base number for each dimension, entries should be (pairwise) prime, may not be null\n+     * @param weights the weights used during scrambling, may be null in which case no scrambling will be performed\n+     * @throws NullArgumentException if base is null\n+     * @throws OutOfRangeException if the space dimension is outside the range [1, len], where\n+     *   len refers to the length of the bases array\n+     * @throws DimensionMismatchException if weights is non-null and the length of the input arrays differ\n+     */\n+    public HaltonSequenceGenerator(final int dimension, final int[] bases, final int[] weights)\n+            throws NullArgumentException, OutOfRangeException, DimensionMismatchException {\n+\n+        MathUtils.checkNotNull(bases);\n+\n+        if (dimension < 1 || dimension > bases.length) {\n+            throw new OutOfRangeException(dimension, 1, PRIMES.length);\n+        }\n+\n+        if (weights != null && weights.length != bases.length) {\n+            throw new DimensionMismatchException(weights.length, bases.length);\n+        }\n+\n+        this.dimension = dimension;\n+        this.base = bases.clone();\n+        this.weight = weights == null ? null : weights.clone();\n+        count = 0;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public double[] nextVector() {\n+        final double[] v = new double[dimension];\n+        for (int i = 0; i < dimension; i++) {\n+            int index = count;\n+            double f = 1.0 / base[i];\n+\n+            int j = 0;\n+            while (index > 0) {\n+                final int digit = scramble(i, j, base[i], index % base[i]);\n+                v[i] += f * digit;\n+                index /= base[i]; // floor( index / base )\n+                f /= base[i];\n+            }\n+        }\n+        count++;\n+        return v;\n+    }\n+\n+    /**\n+     * Performs scrambling of digit {@code d_j} according to the formula:\n+     * <pre>\n+     *   ( weight_i * d_j ) mod base\n+     * </pre>\n+     * Implementations can override this method to do a different scrambling.\n+     *\n+     * @param i the dimension index\n+     * @param j the digit index\n+     * @param b the base for this dimension\n+     * @param digit the j-th digit\n+     * @return the scrambled digit\n+     */\n+    protected int scramble(final int i, final int j, final int b, final int digit) {\n+        return weight != null ? (weight[i] * digit) % b : digit;\n+    }\n+\n+    /**\n+     * Skip to the i-th point in the Halton sequence.\n+     * <p>\n+     * This operation can be performed in O(1).\n+     *\n+     * @param index the index in the sequence to skip to\n+     * @return the i-th point in the Halton sequence\n+     * @throws NotPositiveException if index &lt; 0\n+     */\n+    public double[] skipTo(final int index) throws NotPositiveException {\n+        count = index;\n+        return nextVector();\n+    }\n+\n+    /**\n+     * Returns the index i of the next point in the Halton sequence that will be returned\n+     * by calling {@link #nextVector()}.\n+     *\n+     * @return the index of the next point\n+     */\n+    public int getNextIndex() {\n+        return count;\n+    }\n+\n+}", "timestamp": 1369249941, "metainfo": ""}