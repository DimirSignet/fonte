{"sha": "a67fb141593cdf1682d76f6117ef38ae2a5e191f", "log": "Replace wildcard imports, add final declarations.  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClustererTest.java\n+++ b/src/test/java/org/apache/commons/math3/ml/clustering/FuzzyKMeansClustererTest.java\n  */\n package org.apache.commons.math3.ml.clustering;\n \n-import static org.hamcrest.CoreMatchers.*;\n-import static org.junit.Assert.*;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n \n     @Test\n     public void testCluster() {\n-        List<DoublePoint> points = new ArrayList<DoublePoint>();\n-        \n+        final List<DoublePoint> points = new ArrayList<DoublePoint>();\n+\n         // create 10 data points: [1], ... [10]\n         for (int i = 1; i <= 10; i++) {\n-            DoublePoint p = new DoublePoint(new double[] { i } );\n+            final DoublePoint p = new DoublePoint(new double[] { i } );\n             points.add(p);\n         }\n \n \n     @Test(expected = NullArgumentException.class)\n     public void testNullDataset() {\n-        FuzzyKMeansClusterer<DoublePoint> clusterer = new FuzzyKMeansClusterer<DoublePoint>(3, 2.0);\n+        final FuzzyKMeansClusterer<DoublePoint> clusterer = new FuzzyKMeansClusterer<DoublePoint>(3, 2.0);\n         clusterer.cluster(null);\n     }\n-    \n+\n     @Test\n     public void testGetters() {\n-        DistanceMeasure measure = new CanberraDistance();\n-        RandomGenerator random = new JDKRandomGenerator();\n-        FuzzyKMeansClusterer<DoublePoint> clusterer =\n+        final DistanceMeasure measure = new CanberraDistance();\n+        final RandomGenerator random = new JDKRandomGenerator();\n+        final FuzzyKMeansClusterer<DoublePoint> clusterer =\n                 new FuzzyKMeansClusterer<DoublePoint>(3, 2.0, 100, measure, 1e-6, random);\n-        \n+\n         assertEquals(3, clusterer.getK());\n         assertEquals(2.0, clusterer.getFuzziness(), 1e-6);\n         assertEquals(100, clusterer.getMaxIterations());", "timestamp": 1370106570, "metainfo": ""}