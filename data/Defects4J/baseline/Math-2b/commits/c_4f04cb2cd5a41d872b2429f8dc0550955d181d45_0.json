{"sha": "4f04cb2cd5a41d872b2429f8dc0550955d181d45", "log": "Fixed tests so they do not use equals on top level classes.  Patch submitted by Jared Becksfort.  JIRA: MATH-817  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/distribution/fitting/MultivariateNormalMixtureExpectationMaximizationTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/fitting/MultivariateNormalMixtureExpectationMaximizationTest.java\n package org.apache.commons.math3.distribution.fitting;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n \n import org.apache.commons.math3.distribution.MixtureMultivariateNormalDistribution;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n import org.apache.commons.math3.exception.NumberIsTooSmallException;\n+import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n+import org.apache.commons.math3.linear.RealMatrix;\n import org.apache.commons.math3.util.Pair;\n import org.junit.Assert;\n import org.junit.Test;\n-import org.junit.Ignore;\n \n /**\n  * Test that demonstrates the use of\n  * {@link MultivariateNormalMixtureExpectationMaximization}.\n  */\n public class MultivariateNormalMixtureExpectationMaximizationTest {\n-\n-    // TODO reject initial mixes where means/covMats not computable with data\n-    // numCols\n \n     @Test(expected = NotStrictlyPositiveException.class)\n     public void testNonEmptyData() {\n         fitter.fit(badInitialMix);\n     }\n \n-    @Ignore@Test\n+    @Test\n     public void testInitialMixture() {\n         // Testing initial mixture estimated from data\n-        double[] correctWeights = new double[] { 0.5, 0.5 };\n-\n-        MultivariateNormalDistribution[] correctMVNs = new MultivariateNormalDistribution[2];\n-\n-        correctMVNs[0] = new MultivariateNormalDistribution(new double[] {\n-                        -0.0021722935000328823, 3.5432892936887908 },\n-                        new double[][] {\n-                                { 4.537422569229048, 3.5266152281729304 },\n-                                { 3.5266152281729304, 6.175448814169779 } });\n-        correctMVNs[1] = new MultivariateNormalDistribution(new double[] {\n-                        5.090902706507635, 8.68540656355283 }, new double[][] {\n-                        { 2.886778573963039, 1.5257474543463154 },\n-                        { 1.5257474543463154, 3.3794567673616918 } });\n+        final double[] correctWeights = new double[] { 0.5, 0.5 };\n+\n+        final double[][] correctMeans = new double[][] {\n+            {-0.0021722935000328823, 3.5432892936887908},\n+            {5.090902706507635, 8.68540656355283},\n+        };\n+\n+        final RealMatrix[] correctCovMats = new Array2DRowRealMatrix[2];\n+\n+        correctCovMats[0] = new Array2DRowRealMatrix(new double[][] {\n+                { 4.537422569229048, 3.5266152281729304 },\n+                { 3.5266152281729304, 6.175448814169779 } });\n+\n+        correctCovMats[1] = new Array2DRowRealMatrix( new double[][] {\n+                { 2.886778573963039, 1.5257474543463154 },\n+                { 1.5257474543463154, 3.3794567673616918 } });\n+\n+        final MultivariateNormalDistribution[] correctMVNs = new\n+                MultivariateNormalDistribution[2];\n+\n+        correctMVNs[0] = new MultivariateNormalDistribution(correctMeans[0],\n+                correctCovMats[0].getData());\n+\n+        correctMVNs[1] = new MultivariateNormalDistribution(correctMeans[1],\n+                correctCovMats[1].getData());\n \n         final MixtureMultivariateNormalDistribution initialMix\n             = MultivariateNormalMixtureExpectationMaximization.estimate(getTestSamples(), 2);\n                 .getComponents()) {\n             Assert.assertEquals(correctWeights[i], component.getFirst(),\n                     Math.ulp(1d));\n-            Assert.assertEquals(correctMVNs[i], component.getSecond());\n+            \n+            final double[] means = component.getValue().getMeans();\n+            Assert.assertTrue(Arrays.equals(correctMeans[i], means));\n+            \n+            final RealMatrix covMat = component.getValue().getCovariances();\n+            Assert.assertEquals(correctCovMats[i], covMat);\n             i++;\n         }\n     }\n \n-    @Ignore@Test\n+    @Test\n     public void testFit() {\n         // Test that the loglikelihood, weights, and models are determined and\n         // fitted correctly\n-        double[][] data = getTestSamples();\n-        double correctLogLikelihood = -4.292431006791994;\n-        double[] correctWeights = new double[] { 0.2962324189652912, 0.7037675810347089 };\n-        MultivariateNormalDistribution[] correctMVNs = new MultivariateNormalDistribution[2];\n-        correctMVNs[0] = new MultivariateNormalDistribution(new double[] {\n-                        -1.4213112715121132, 1.6924690505757753 },\n-                        new double[][] {\n-                                { 1.739356907285747, -0.5867644251487614 },\n-                                { -0.5867644251487614, 1.0232932029324642 } });\n-\n-        correctMVNs[1] = new MultivariateNormalDistribution(new double[] {\n-                        4.213612224374709, 7.975621325853645 },\n-                        new double[][] {\n-                                { 4.245384898007161, 2.5797798966382155 },\n-                                { 2.5797798966382155, 3.9200272522448367 } });\n+        final double[][] data = getTestSamples();\n+        final double correctLogLikelihood = -4.292431006791994;\n+        final double[] correctWeights = new double[] { 0.2962324189652912, 0.7037675810347089 };\n+        \n+        final double[][] correctMeans = new double[][]{\n+            {-1.4213112715121132, 1.6924690505757753},\n+            {4.213612224374709, 7.975621325853645}\n+        };\n+        \n+        final RealMatrix[] correctCovMats = new Array2DRowRealMatrix[2];\n+        correctCovMats[0] = new Array2DRowRealMatrix(new double[][] {\n+            { 1.739356907285747, -0.5867644251487614 },\n+            { -0.5867644251487614, 1.0232932029324642 } }\n+                );\n+        correctCovMats[1] = new Array2DRowRealMatrix(new double[][] {\n+            { 4.245384898007161, 2.5797798966382155 },\n+            { 2.5797798966382155, 3.9200272522448367 } });\n+        \n+        final MultivariateNormalDistribution[] correctMVNs = new MultivariateNormalDistribution[2];\n+        correctMVNs[0] = new MultivariateNormalDistribution(correctMeans[0], correctCovMats[0].getData());\n+        correctMVNs[1] = new MultivariateNormalDistribution(correctMeans[1], correctCovMats[1].getData());\n \n         MultivariateNormalMixtureExpectationMaximization fitter\n             = new MultivariateNormalMixtureExpectationMaximization(data);\n \n         int i = 0;\n         for (Pair<Double, MultivariateNormalDistribution> component : components) {\n-            double weight = component.getFirst();\n-            MultivariateNormalDistribution mvn = component.getSecond();\n+            final double weight = component.getFirst();\n+            final MultivariateNormalDistribution mvn = component.getSecond();\n+            final double[] mean = mvn.getMeans();\n+            final RealMatrix covMat = mvn.getCovariances();\n             Assert.assertEquals(correctWeights[i], weight, Math.ulp(1d));\n-            Assert.assertEquals(correctMVNs[i], mvn);\n+            Assert.assertTrue(Arrays.equals(correctMeans[i], mean));\n+            Assert.assertEquals(correctCovMats[i], covMat);\n             i++;\n         }\n     }", "timestamp": 1364226451, "metainfo": ""}