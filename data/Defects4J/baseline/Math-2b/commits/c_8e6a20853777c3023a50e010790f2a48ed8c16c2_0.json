{"sha": "8e6a20853777c3023a50e010790f2a48ed8c16c2", "log": "MATH-1010 Added utility to shuffle an array (based on the method \"shuffle\" located in \"o.a.c.m.random.RandomDataGenerator\"). See also MATH-1019.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java\n+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java\n import java.util.List;\n \n import org.apache.commons.math3.Field;\n+import org.apache.commons.math3.random.RandomGenerator;\n+import org.apache.commons.math3.random.Well19937c;\n+import org.apache.commons.math3.distribution.UniformIntegerDistribution;\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n \n          return y;\n      }\n+\n+    /**\n+     * Specification for indicating that some operation applies\n+     * before or after a given index.\n+     */\n+    public static enum Position {\n+        /** Designates the beginning of the array (near index 0). */\n+        HEAD,\n+        /** Designates the end of the array. */\n+        TAIL\n+    }\n+\n+    /**\n+     * Shuffle the entries of the given array.\n+     * The {@code start} and {@code pos} parameters select which portion\n+     * of the array is randomized and which is left untouched.\n+     *\n+     * @param list Array whose entries will be shuffled (in-place).\n+     * @param start Index at which shuffling begins.\n+     * @param pos Shuffling is performed for index positions between\n+     * {@code start} and either the end (if {@link Position#TAIL})\n+     * or the beginning (if {@link Position#HEAD}) of the array.\n+     */\n+    public static void shuffle(int[] list,\n+                               int start,\n+                               Position pos) {\n+        shuffle(list, start, pos, new Well19937c());\n+    }\n+\n+    /**\n+     * Shuffle the entries of the given array.\n+     * The {@code start} and {@code pos} parameters select which portion\n+     * of the array is randomized and which is left untouched.\n+     *\n+     * @param list Array whose entries will be shuffled (in-place).\n+     * @param start Index at which shuffling begins.\n+     * @param pos Shuffling is performed for index positions between\n+     * {@code start} and either the end (if {@link Position#TAIL})\n+     * or the beginning (if {@link Position#HEAD}) of the array.\n+     * @param rng Random number generator.\n+     */\n+    public static void shuffle(int[] list,\n+                               int start,\n+                               Position pos,\n+                               RandomGenerator rng) {\n+        switch (pos) {\n+        case TAIL: {\n+            for (int i = list.length - 1; i >= start; i--) {\n+                final int target;\n+                if (i == start) {\n+                    target = start;\n+                } else {\n+                    // NumberIsTooLargeException cannot occur.\n+                    target = new UniformIntegerDistribution(start, i).sample();\n+                }\n+                final int temp = list[target];\n+                list[target] = list[i];\n+                list[i] = temp;\n+            }\n+        }\n+            break;\n+        case HEAD: {\n+            for (int i = 0; i <= start; i++) {\n+                final int target;\n+                if (i == start) {\n+                    target = start;\n+                } else {\n+                    // NumberIsTooLargeException cannot occur.\n+                    target = new UniformIntegerDistribution(i, start).sample();\n+                }\n+                final int temp = list[target];\n+                list[target] = list[i];\n+                list[i] = temp;\n+            }\n+        }\n+            break;\n+        default:\n+            throw new MathInternalError(); // Should never happen.\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/math3/util/MathArraysTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/MathArraysTest.java\n             // expected behavior\n         }\n     }\n+\n+    @Test\n+    public void testShuffleTail() {\n+        final int[] orig = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+        final int[] list = orig.clone();\n+        final int start = 4;\n+        MathArrays.shuffle(list, start, MathArrays.Position.TAIL, new Well1024a(7654321L));\n+\n+        // Ensure that all entries below index \"start\" did not move.\n+        for (int i = 0; i < start; i++) {\n+            Assert.assertEquals(orig[i], list[i]);\n+        }\n+\n+        // Ensure that at least one entry has moved.\n+        boolean ok = false;\n+        for (int i = start; i < orig.length - 1; i++) {\n+            if (orig[i] != list[i]) {\n+                ok = true;\n+                break;\n+            }\n+        }\n+        Assert.assertTrue(ok);\n+    }\n+\n+    @Test\n+    public void testShuffleHead() {\n+        final int[] orig = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n+        final int[] list = orig.clone();\n+        final int start = 4;\n+        MathArrays.shuffle(list, start, MathArrays.Position.HEAD, new Well1024a(1234567L));\n+\n+        // Ensure that all entries above index \"start\" did not move.\n+        for (int i = start + 1; i < orig.length; i++) {\n+            Assert.assertEquals(orig[i], list[i]);\n+        }\n+\n+        // Ensure that at least one entry has moved.\n+        boolean ok = false;\n+        for (int i = 0; i <= start; i++) {\n+            if (orig[i] != list[i]) {\n+                ok = true;\n+                break;\n+            }\n+        }\n+        Assert.assertTrue(ok);\n+    }\n }", "timestamp": 1376003939, "metainfo": ""}