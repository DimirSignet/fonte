{"sha": "3e273994adf02cf31f6a44057c14396835af7fe6", "log": "Boxing OK here  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/PerfTestUtils.java\n+++ b/src/test/java/org/apache/commons/math3/PerfTestUtils.java\n                     // Timed block.\n                     final long start = System.nanoTime();\n                     for (int i = 0; i < repeatChunk; i++) {\n-                        result[i] = r.call();\n+                        result[i] = r.call().doubleValue();\n                     }\n                     final long stop = System.nanoTime();\n \n      * {@code call} method (i.e. the time taken by each timed block divided\n      * by {@code repeatChunk}).\n      */\n+    @SuppressWarnings(\"boxing\")\n     public static StatisticalSummary[] timeAndReport(String title,\n                                                      int repeatChunk,\n                                                      int repeatStat,\n--- a/src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/integration/gauss/HermiteParametricTest.java\n      *\n      * @return the collection of parameters for this parameterized test.\n      */\n+    @SuppressWarnings(\"boxing\") // OK here\n     @Parameters\n     public static Collection<Object[]> getParameters() {\n         final ArrayList<Object[]> parameters = new ArrayList<Object[]>();\n--- a/src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionParametricTest.java\n      *\n      * @return the collection of parameters for this parameterized test.\n      */\n+    @SuppressWarnings(\"boxing\") // OK here\n     @Parameters\n     public static Collection<Object[]> getParameters() {\n         final ArrayList<Object[]> parameters = new ArrayList<Object[]>();\n--- a/src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java\n+++ b/src/test/java/org/apache/commons/math3/analysis/integration/gauss/LegendreParametricTest.java\n      *\n      * @return the collection of parameters for this parameterized test.\n      */\n+    @SuppressWarnings(\"boxing\") // OK here\n     @Parameters\n     public static Collection<Object[]> getParameters() {\n         final ArrayList<Object[]> parameters = new ArrayList<Object[]>();\n--- a/src/test/java/org/apache/commons/math3/complex/RootsOfUnityTest.java\n+++ b/src/test/java/org/apache/commons/math3/complex/RootsOfUnityTest.java\n         final double tol = 10 * Math.ulp(1.0);\n         for (int k = 0; k < n; k++) {\n             final double t = 2.0 * FastMath.PI * k / n;\n+            @SuppressWarnings(\"boxing\")\n             final String msg = String.format(\"n = %d, k = %d\", n, k);\n             Assert.assertEquals(msg, FastMath.cos(t), roots.getReal(k), tol);\n             Assert.assertEquals(msg, FastMath.sin(t), roots.getImaginary(k), tol);\n--- a/src/test/java/org/apache/commons/math3/distribution/BetaDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/BetaDistributionTest.java\n \n     }\n \n+    @SuppressWarnings(\"boxing\")\n     private void checkDensity(double alpha, double beta, double[] x, double[] expected) {\n         BetaDistribution d = new BetaDistribution(alpha, beta);\n         for (int i = 0; i < x.length; i++) {\n--- a/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/MultivariateNormalMixtureModelDistributionTest.java\n \n         final List<Pair<Double, MultivariateNormalDistribution>> comp = d.getComponents();\n \n-        Assert.assertEquals(1d / 3, comp.get(0).getFirst(), Math.ulp(1d));\n-        Assert.assertEquals(2d / 3, comp.get(1).getFirst(), Math.ulp(1d));\n+        Assert.assertEquals(1d / 3, comp.get(0).getFirst().doubleValue(), Math.ulp(1d));\n+        Assert.assertEquals(2d / 3, comp.get(1).getFirst().doubleValue(), Math.ulp(1d));\n     }\n \n     @Test(expected=MathArithmeticException.class)\n--- a/src/test/java/org/apache/commons/math3/genetics/RandomKeyTest.java\n+++ b/src/test/java/org/apache/commons/math3/genetics/RandomKeyTest.java\n import org.junit.Assert;\n import org.junit.Test;\n \n+@SuppressWarnings(\"boxing\")\n public class RandomKeyTest {\n \n     @Test(expected=IllegalArgumentException.class)\n--- a/src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java\n+++ b/src/test/java/org/apache/commons/math3/genetics/UniformCrossoverTest.java\n     private static final List<Integer> p1 = new ArrayList<Integer>(LEN);\n     private static final List<Integer> p2 = new ArrayList<Integer>(LEN);\n \n+    @SuppressWarnings(\"boxing\")\n     @BeforeClass\n     public static void setUpBeforeClass() {\n         for (int i = 0; i < LEN; i++) {\n                 }\n             }\n \n-            Assert.assertEquals(1.0 - ratio, Double.valueOf((double) from1 / LEN), 0.1);\n-            Assert.assertEquals(ratio, Double.valueOf((double) from2 / LEN), 0.1);\n+            Assert.assertEquals(1.0 - ratio, (double) from1 / LEN, 0.1);\n+            Assert.assertEquals(ratio, (double) from2 / LEN, 0.1);\n \n             from1 = 0;\n             from2 = 0;\n                 }\n             }\n \n-            Assert.assertEquals(ratio, Double.valueOf((double) from1 / LEN), 0.1);\n-            Assert.assertEquals(1.0 - ratio, Double.valueOf((double) from2 / LEN), 0.1);\n+            Assert.assertEquals(ratio, (double) from1 / LEN, 0.1);\n+            Assert.assertEquals(1.0 - ratio, (double) from2 / LEN, 0.1);\n         }\n     }\n     \n     @Test(expected = DimensionMismatchException.class)\n     public void testCrossoverDimensionMismatchException(){\n+        @SuppressWarnings(\"boxing\")\n         final Integer[] p1 = new Integer[] {1,0,1,0,0,1,0,1,1};\n+        @SuppressWarnings(\"boxing\")\n         final Integer[] p2 = new Integer[] {0,1,1,0,1};\n \n         final BinaryChromosome p1c = new DummyBinaryChromosome(p1);\n     \n     @Test(expected = MathIllegalArgumentException.class)\n     public void testCrossoverInvalidFixedLengthChromosomeFirst() {\n+        @SuppressWarnings(\"boxing\")\n         final Integer[] p1 = new Integer[] {1,0,1,0,0,1,0,1,1};\n         final BinaryChromosome p1c = new DummyBinaryChromosome(p1);\n         final Chromosome p2c = new Chromosome() {\n     \n     @Test(expected = MathIllegalArgumentException.class)\n     public void testCrossoverInvalidFixedLengthChromosomeSecond() {\n+        @SuppressWarnings(\"boxing\")\n         final Integer[] p1 = new Integer[] {1,0,1,0,0,1,0,1,1};\n         final BinaryChromosome p2c = new DummyBinaryChromosome(p1);\n         final Chromosome p1c = new Chromosome() {\n--- a/src/test/java/org/apache/commons/math3/util/MultidimensionalCounterTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/MultidimensionalCounterTest.java\n             if (!iter.hasNext()) {\n                 Assert.fail(\"Too short\");\n             }\n-            final int uniDimIndex = iter.next();\n+            final int uniDimIndex = iter.next().intValue();\n             Assert.assertEquals(\"Wrong iteration at \" + i, i, uniDimIndex);\n \n             for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {\n--- a/src/test/java/org/apache/commons/math3/util/OpenIntToDoubleHashMapTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/OpenIntToDoubleHashMapTest.java\n /**\n  * Test cases for the {@link OpenIntToDoubleHashMap}.\n  */\n+@SuppressWarnings(\"boxing\")\n public class OpenIntToDoubleHashMapTest {\n \n     private Map<Integer, Double> javaMap = new HashMap<Integer, Double>();\n--- a/src/test/java/org/apache/commons/math3/util/PairTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/PairTest.java\n         final Pair<Integer, Double> p\n             = new Pair<Integer, Double>(new Integer(1), new Double(2));\n         Assert.assertEquals(new Integer(1), p.getKey());\n-        Assert.assertEquals(new Double(2), p.getValue(), Math.ulp(1d));\n+        Assert.assertEquals(2, p.getValue().doubleValue(), Math.ulp(1d));\n     }\n \n     @Test", "timestamp": 1374190862, "metainfo": ""}