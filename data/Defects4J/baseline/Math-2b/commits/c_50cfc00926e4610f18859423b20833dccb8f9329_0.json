{"sha": "50cfc00926e4610f18859423b20833dccb8f9329", "log": "Made static fields static.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java\n  */\n public class MultivariateNormalMixtureExpectationMaximization {\n     /**\n+     * Default maximum number of iterations allowed per fitting process.\n+     */\n+    private static final int DEFAULT_MAX_ITERATIONS = 1000;\n+    /**\n+     * Default convergence threshold for fitting.\n+     */\n+    private static final double DEFAULT_THRESHOLD = 1E-5;\n+    /**\n      * The data to fit.\n      */\n     private final double[][] data;\n      * The log likelihood of the data given the fitted model.\n      */\n     private double logLikelihood = 0d;\n-    /**\n-     * Default maximum number of iterations allowed per fitting process.\n-     */\n-    private final int defaultMaxIterations = 1000;\n-    /**\n-     * Default convergence threshold for fitting.\n-     */\n-    private final double defaultThreshold = 1E-5;\n \n     /**\n      * Creates an object to fit a multivariate normal mixture model to data.\n     public void fit(MixtureMultivariateNormalDistribution initialMixture)\n         throws SingularMatrixException,\n                NotStrictlyPositiveException {\n-        fit(initialMixture, defaultMaxIterations, defaultThreshold);\n+        fit(initialMixture, DEFAULT_MAX_ITERATIONS, DEFAULT_THRESHOLD);\n     }\n \n     /**", "timestamp": 1364531196, "metainfo": ""}