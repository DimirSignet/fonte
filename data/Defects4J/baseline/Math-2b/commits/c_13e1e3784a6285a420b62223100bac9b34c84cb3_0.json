{"sha": "13e1e3784a6285a420b62223100bac9b34c84cb3", "log": "Extended ranges for FastMath performance tests.  JIRA: MATH-580  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/util/FastMathTestPerformance.java\n+++ b/src/test/java/org/apache/commons/math3/util/FastMathTestPerformance.java\n     public void testLog() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.log(Math.PI + i/* 1.0 + i/1e9 */);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.log(0.01 + i);\n+        }\n         long strictMath = System.nanoTime() - time;\n \n         x = 0;\n         time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.log(Math.PI + i/* 1.0 + i/1e9 */);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.log(Math.PI + i/* 1.0 + i/1e9 */);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.log(0.01 + i);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.log(0.01 + i);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"log\",strictMath,fastTime,mathTime);\n     public void testLog10() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.log10(Math.PI + i/* 1.0 + i/1e9 */);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.log10(0.01 + i);\n+        }\n         long strictMath = System.nanoTime() - time;\n \n         x = 0;\n         time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.log10(Math.PI + i/* 1.0 + i/1e9 */);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.log10(Math.PI + i/* 1.0 + i/1e9 */);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.log10(0.01 + i);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.log10(0.01 + i);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"log10\",strictMath,fastTime,mathTime);\n     public void testLog1p() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.log1p(Math.PI + i/* 1.0 + i/1e9 */);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.log1p(-0.9 + i);\n+        }\n         long strictMath = System.nanoTime() - time;\n \n         x = 0;\n         time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.log1p(Math.PI + i/* 1.0 + i/1e9 */);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.log1p(Math.PI + i/* 1.0 + i/1e9 */);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.log1p(-0.9 + i);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.log1p(-0.9 + i);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"log1p\",strictMath,fastTime,mathTime);\n     public void testPow() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.pow(Math.PI + i * F1, i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.pow(Math.PI + i * F1, i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.pow(Math.PI + i * F1, i * F1);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.pow(0.01 + i * F1, i * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.pow(0.01 + i * F1, i * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.pow(0.01 + i * F1, i * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n         report(\"pow\",strictTime,fastTime,mathTime);\n         Assert.assertTrue(!Double.isNaN(x));\n     public void testExp() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.exp(i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.exp(i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.exp(i * F1);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.exp(100 * i * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.exp(100 * i * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.exp(100 * i * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"exp\",strictTime,fastTime,mathTime);\n     public void testSin() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.sin(i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.sin(i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.sin(i * F1);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.sin(100 * (i - RUNS/2) * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.sin(100 * (i - RUNS/2) * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.sin(100 * (i - RUNS/2) * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"sin\",strictTime,fastTime,mathTime);\n     public void testAsin() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.asin(i / (double) RUNS);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.asin(i / (double) RUNS);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.asin(i / (double) RUNS);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.asin(0.999 * (i - RUNS/2) * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.asin(0.999 * (i - RUNS/2) * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.asin(0.999 * (i - RUNS/2) * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"asin\",strictTime,fastTime,mathTime);\n     public void testCos() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.cos(i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.cos(i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.cos(i * F1);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.cos(100 * (i - RUNS/2) * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.cos(100 * (i - RUNS/2) * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.cos(100 * (i - RUNS/2) * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"cos\",strictTime,fastTime,mathTime);\n     public void testAcos() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.acos(i / (double) RUNS);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.acos(i / (double) RUNS);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.acos(i / (double) RUNS);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.acos(0.999 * (i - RUNS/2) * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.acos(0.999 * (i - RUNS/2) * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.acos(0.999 * (i - RUNS/2) * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n         report(\"acos\",strictTime,fastTime,mathTime);\n         Assert.assertTrue(!Double.isNaN(x));\n     public void testTan() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.tan(i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.tan(i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.tan(i * F1);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.tan(100 * (i - RUNS/2) * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.tan(100 * (i - RUNS/2) * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.tan(100 * (i - RUNS/2) * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"tan\",strictTime,fastTime,mathTime);\n     public void testAtan() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.atan(i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.atan(i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.atan(i * F1);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.atan(100 * (i - RUNS/2) * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.atan(100 * (i - RUNS/2) * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.atan(100 * (i - RUNS/2) * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"atan\",strictTime,fastTime,mathTime);\n     public void testAtan2() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.atan2(i * F1, i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.atan2(i * F1, i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.atan2(i * F1, i * F1);\n+        int max   = (int) FastMath.floor(FastMath.sqrt(RUNS));\n+        for (int i = 0; i < max; i++) {\n+            for (int j = 0; j < max; j++) {\n+                x += StrictMath.atan2((i - max/2) * (100.0 / max), (j - max/2) * (100.0 / max));\n+            }\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < max; i++) {\n+            for (int j = 0; j < max; j++) {\n+                x += FastMath.atan2((i - max/2) * (100.0 / max), (j - max/2) * (100.0 / max));\n+            }\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < max; i++) {\n+            for (int j = 0; j < max; j++) {\n+                x += Math.atan2((i - max/2) * (100.0 / max), (j - max/2) * (100.0 / max));\n+            }\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"atan2\",strictTime,fastTime,mathTime);\n     public void testHypot() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.hypot(i * F1, i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.hypot(i * F1, i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.hypot(i * F1, i * F1);\n+        int max   = (int) FastMath.floor(FastMath.sqrt(RUNS));\n+        for (int i = 0; i < max; i++) {\n+            for (int j = 0; j < max; j++) {\n+                x += StrictMath.atan2((i - max/2) * (100.0 / max), (j - max/2) * (100.0 / max));\n+            }\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < max; i++) {\n+            for (int j = 0; j < max; j++) {\n+                x += FastMath.atan2((i - max/2) * (100.0 / max), (j - max/2) * (100.0 / max));\n+            }\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < max; i++) {\n+            for (int j = 0; j < max; j++) {\n+                x += Math.atan2((i - max/2) * (100.0 / max), (j - max/2) * (100.0 / max));\n+            }\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"hypot\",strictTime,fastTime,mathTime);\n     public void testCbrt() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.cbrt(i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.cbrt(i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.cbrt(i * F1);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.cbrt(100 * i * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.cbrt(100 * i * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.cbrt(100 * i * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"cbrt\",strictTime,fastTime,mathTime);\n     public void testSqrt() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.sqrt(i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.sqrt(i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.sqrt(i * F1);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.sqrt(100 * i * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.sqrt(100 * i * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.sqrt(100 * i * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"sqrt\",strictTime,fastTime,mathTime);\n     public void testCosh() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.cosh(i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.cosh(i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.cosh(i * F1);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.cosh(100 * (i - RUNS/2) * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.cosh(100 * (i - RUNS/2) * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.cosh(100 * (i - RUNS/2) * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"cosh\",strictTime,fastTime,mathTime);\n     public void testSinh() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.sinh(i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.sinh(i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.sinh(i * F1);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.sinh(100 * (i - RUNS/2) * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.sinh(100 * (i - RUNS/2) * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.sinh(100 * (i - RUNS/2) * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"sinh\",strictTime,fastTime,mathTime);\n     public void testTanh() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.tanh(i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.tanh(i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.tanh(i * F1);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.tanh(100 * (i - RUNS/2) * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.tanh(100 * (i - RUNS/2) * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.tanh(100 * (i - RUNS/2) * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"tanh\",strictTime,fastTime,mathTime);\n     public void testExpm1() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += StrictMath.expm1(-i * F1);\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += FastMath.expm1(-i * F1);\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n-            x += Math.expm1(-i * F1);\n+        for (int i = 0; i < RUNS; i++) {\n+            x += StrictMath.expm1(100 * (i - RUNS/2) * F1);\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += FastMath.expm1(100 * (i - RUNS/2) * F1);\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n+            x += Math.expm1(100 * (i - RUNS/2) * F1);\n+        }\n         long mathTime = System.nanoTime() - time;\n         report(\"expm1\",strictTime,fastTime,mathTime);\n         Assert.assertTrue(!Double.isNaN(x));\n     public void testAbs() {\n         double x = 0;\n         long time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n+        for (int i = 0; i < RUNS; i++) {\n             x += StrictMath.abs(i * (1 - 0.5 * RUNS));\n-        long strictTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n+        }\n+        long strictTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n             x += FastMath.abs(i * (1 - 0.5 * RUNS));\n-        long fastTime = System.nanoTime() - time;\n-\n-        x = 0;\n-        time = System.nanoTime();\n-        for (int i = 0; i < RUNS; i++)\n+        }\n+        long fastTime = System.nanoTime() - time;\n+\n+        x = 0;\n+        time = System.nanoTime();\n+        for (int i = 0; i < RUNS; i++) {\n             x += Math.abs(i * (1 - 0.5 * RUNS));\n+        }\n         long mathTime = System.nanoTime() - time;\n \n         report(\"abs\",strictTime,fastTime,mathTime);", "timestamp": 1363179346, "metainfo": ""}