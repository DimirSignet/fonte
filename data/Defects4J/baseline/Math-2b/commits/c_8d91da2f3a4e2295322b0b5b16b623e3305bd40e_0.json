{"sha": "8d91da2f3a4e2295322b0b5b16b623e3305bd40e", "log": "Missing @Deprecated tags  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/DifferentiableUnivariateMatrixFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/DifferentiableUnivariateMatrixFunction.java\n  * @since 2.0\n  * @deprecated as of 3.1 replaced by  {@link org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableMatrixFunction}\n  */\n+@Deprecated\n public interface DifferentiableUnivariateMatrixFunction\n     extends UnivariateMatrixFunction {\n \n--- a/src/main/java/org/apache/commons/math3/analysis/DifferentiableUnivariateVectorFunction.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/DifferentiableUnivariateVectorFunction.java\n  * @since 2.0\n  * @deprecated as of 3.1 replaced by {@link org.apache.commons.math3.analysis.differentiation.UnivariateDifferentiableVectorFunction}\n  */\n+@Deprecated\n public interface DifferentiableUnivariateVectorFunction\n     extends UnivariateVectorFunction {\n \n--- a/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java\n      * @return the composite function.\n      * @deprecated as of 3.1 replaced by {@link #compose(UnivariateDifferentiableFunction...)}\n      */\n+    @Deprecated\n     public static DifferentiableUnivariateFunction compose(final DifferentiableUnivariateFunction ... f) {\n         return new DifferentiableUnivariateFunction() {\n             /** {@inheritDoc} */\n      * @return a function that computes the product of the functions.\n      * @deprecated as of 3.1 replaced by {@link #multiply(UnivariateDifferentiableFunction...)}\n      */\n+    @Deprecated\n     public static DifferentiableUnivariateFunction multiply(final DifferentiableUnivariateFunction ... f) {\n         return new DifferentiableUnivariateFunction() {\n             /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/math3/analysis/solvers/DifferentiableUnivariateSolver.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/solvers/DifferentiableUnivariateSolver.java\n  * @version $Id$\n  * @deprecated as of 3.1, replaced by {@link UnivariateDifferentiableSolver}\n  */\n+@Deprecated\n public interface DifferentiableUnivariateSolver\n     extends BaseUnivariateSolver<DifferentiableUnivariateFunction> {}\n--- a/src/main/java/org/apache/commons/math3/distribution/RealDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/RealDistribution.java\n      * function returns a non-NaN, non-infinite value there\n      * @deprecated to be removed in 4.0\n      */\n+    @Deprecated\n     boolean isSupportLowerBoundInclusive();\n \n     /**\n      * function returns a non-NaN, non-infinite value there\n      * @deprecated to be removed in 4.0\n      */\n+    @Deprecated\n     boolean isSupportUpperBoundInclusive();\n \n     /**\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/BaseAbstractMultivariateVectorOptimizer.java\n     /** Weight for the least squares cost computation.\n      * @deprecated\n      */\n+    @Deprecated\n     private double[] weight;\n     /** Initial guess. */\n     private double[] start;\n--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java\n      * passed with the call to {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])\n      * optimize} (whereas in the current code it is set to an undocumented value).\n      */\n+    @Deprecated\n     public CMAESOptimizer() {\n         this(0);\n     }\n      * passed with the call to {@link #optimize(int,MultivariateFunction,GoalType,OptimizationData[])\n      * optimize} (whereas in the current code it is set to an undocumented value)..\n      */\n+    @Deprecated\n     public CMAESOptimizer(int lambda) {\n         this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,\n              DEFAULT_ISACTIVECMA, DEFAULT_DIAGONALONLY,\n--- a/src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/fitting/CurveFitter.java\n      * @param optimizer optimizer to use for the fitting\n      * @deprecated as of 3.1 replaced by {@link #CurveFitter(MultivariateDifferentiableVectorOptimizer)}\n      */\n+    @Deprecated\n     public CurveFitter(final DifferentiableMultivariateVectorOptimizer optimizer) {\n         this.oldOptimizer = optimizer;\n         this.optimizer    = null;\n--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexTableau.java\n  * @deprecated As of 3.1 (to be removed in 4.0).\n  * @since 2.0\n  */\n+@Deprecated\n class SimplexTableau implements Serializable {\n \n     /** Column label for negative vars. */\n--- a/src/main/java/org/apache/commons/math3/random/RandomData.java\n+++ b/src/main/java/org/apache/commons/math3/random/RandomData.java\n  * @deprecated to be removed in 4.0.  Use {@link RandomDataGenerator} directly\n  * @version $Id$\n  */\n+@Deprecated\n public interface RandomData {\n     /**\n      * Generates a random string of hex characters of length {@code len}.\n--- a/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java\n+++ b/src/main/java/org/apache/commons/math3/random/RandomDataImpl.java\n      * @since 2.2\n      * @deprecated use the distribution's sample() method\n      */\n+    @Deprecated\n     public double nextInversionDeviate(RealDistribution distribution)\n         throws MathIllegalArgumentException {\n         return distribution.inverseCumulativeProbability(nextUniform(0, 1));\n      * @since 2.2\n      * @deprecated use the distribution's sample() method\n      */\n+    @Deprecated\n     public int nextInversionDeviate(IntegerDistribution distribution)\n         throws MathIllegalArgumentException {\n         return distribution.inverseCumulativeProbability(nextUniform(0, 1));\n--- a/src/main/java/org/apache/commons/math3/random/ValueServer.java\n+++ b/src/main/java/org/apache/commons/math3/random/ValueServer.java\n      * @since 3.0\n      * @deprecated use {@link #ValueServer(RandomGenerator)}\n      */\n+    @Deprecated\n     public ValueServer(RandomDataImpl randomData) {\n         this.randomData = randomData;\n     }\n--- a/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n+++ b/src/main/java/org/apache/commons/math3/util/ResizableDoubleArray.java\n      * {@link #ResizableDoubleArray(int,double,double,ExpansionMode,double[])}\n      * instead.\n      */\n+    @Deprecated\n     public ResizableDoubleArray(int initialCapacity, float expansionFactor,\n             float contractionCriteria, int expansionMode) throws MathIllegalArgumentException {\n         this(initialCapacity,\n      * @deprecated As of 3.1. Please use\n      * {@link #checkContractExpand(double,double)} instead.\n      */\n+    @Deprecated\n     protected void checkContractExpand(float contraction, float expansion)\n         throws MathIllegalArgumentException {\n         checkContractExpand((double) contraction,\n      * @deprecated As of 3.1. Return value to be changed to\n      * {@link ExpansionMode} in 4.0.\n      */\n+    @Deprecated\n     public int getExpansionMode() {\n         switch (expansionMode) {\n         case MULTIPLICATIVE:", "timestamp": 1372957242, "metainfo": ""}