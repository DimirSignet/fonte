{"sha": "5e2b0fb06f18d6a7a14898e0f33a2c237b9ad851", "log": "Add some tests of NaNs  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/stat/FrequencyTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/FrequencyTest.java\n \n \n import org.apache.commons.math3.TestUtils;\n+import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n         Assert.assertEquals(\"2\", mode.get(0));\n         Assert.assertFalse(mode.contains(\"1\"));\n         Assert.assertTrue(mode.contains(\"2\"));\n-    }\n+\n+        try {\n+            f.addValue(Double.valueOf(Double.NaN));\n+            Assert.fail(\"Expected MathIllegalArgumentException\");\n+        } catch (MathIllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void testModeDoubleNan() {\n+        List<Comparable<?>> mode;\n+        f.addValue(Double.valueOf(Double.NaN));\n+        f.addValue(Double.valueOf(Double.NaN));\n+        f.addValue(Double.valueOf(Double.NaN));\n+        f.addValue(Double.valueOf(Double.NEGATIVE_INFINITY));\n+        f.addValue(Double.valueOf(Double.POSITIVE_INFINITY));\n+        f.addValue(Double.valueOf(Double.NEGATIVE_INFINITY));\n+        f.addValue(Double.valueOf(Double.POSITIVE_INFINITY));\n+        f.addValue(Double.valueOf(Double.NEGATIVE_INFINITY));\n+        f.addValue(Double.valueOf(Double.POSITIVE_INFINITY));\n+        mode = f.getMode();\n+        Assert.assertEquals(3, mode.size());\n+        Assert.assertEquals(Double.valueOf(Double.NEGATIVE_INFINITY), mode.get(0));\n+        Assert.assertEquals(Double.valueOf(Double.POSITIVE_INFINITY), mode.get(1));\n+        Assert.assertEquals(Double.valueOf(Double.NaN), mode.get(2));\n+        try {\n+            f.addValue(Float.valueOf(Float.NaN));\n+            Assert.fail(\"Expected MathIllegalArgumentException\");\n+        } catch (MathIllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void testModeFloatNan() {\n+        List<Comparable<?>> mode;\n+        f.addValue(Float.valueOf(Float.NaN));\n+        f.addValue(Float.valueOf(Float.NaN));\n+        f.addValue(Float.valueOf(Float.NaN));\n+        f.addValue(Float.valueOf(Float.NEGATIVE_INFINITY));\n+        f.addValue(Float.valueOf(Float.POSITIVE_INFINITY));\n+        f.addValue(Float.valueOf(Float.NEGATIVE_INFINITY));\n+        f.addValue(Float.valueOf(Float.POSITIVE_INFINITY));\n+        f.addValue(Float.valueOf(Float.NEGATIVE_INFINITY));\n+        f.addValue(Float.valueOf(Float.POSITIVE_INFINITY));\n+        mode = f.getMode();\n+        Assert.assertEquals(3, mode.size());\n+        Assert.assertEquals(Float.valueOf(Float.NEGATIVE_INFINITY), mode.get(0));\n+        Assert.assertEquals(Float.valueOf(Float.POSITIVE_INFINITY), mode.get(1));\n+        Assert.assertEquals(Float.valueOf(Float.NaN), mode.get(2));\n+        try {\n+            f.addValue(Double.valueOf(Double.NaN));\n+            Assert.fail(\"Expected MathIllegalArgumentException\");\n+        } catch (MathIllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+\n }", "timestamp": 1373966132, "metainfo": ""}