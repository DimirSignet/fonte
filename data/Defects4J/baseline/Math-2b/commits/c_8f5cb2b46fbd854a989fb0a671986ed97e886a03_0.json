{"sha": "8f5cb2b46fbd854a989fb0a671986ed97e886a03", "log": "MATH-1012 Factory class.   ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/math3/random/RandomGeneratorFactory.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.random;\n+\n+import java.util.Random;\n+import org.apache.commons.math3.exception.NotStrictlyPositiveException;\n+\n+/**\n+ * Utilities for creating {@link RandomGenerator} instances.\n+ *\n+ * @since 3.3\n+ * @version $Id$\n+ */\n+public class RandomGeneratorFactory {\n+    /**\n+     * Class contains only static methods.\n+     */\n+    private RandomGeneratorFactory() {}\n+\n+    /**\n+     * Creates a {@link RandomDataGenerator} instance that wraps a\n+     * {@link Random} instance.\n+     *\n+     * @param rng JDK {@link Random} instance that will generate the\n+     * the random data.\n+     */\n+    public static RandomGenerator createRandomGenerator(final Random rng) {\n+        return new RandomGenerator() {\n+            /** {@inheritDoc} */\n+            public void setSeed(int seed) {\n+                rng.setSeed((long) seed);\n+            }\n+\n+            /** {@inheritDoc} */\n+            public void setSeed(int[] seed) {\n+                rng.setSeed(convertToLong(seed));\n+            }\n+\n+            /** {@inheritDoc} */\n+            public void setSeed(long seed) {\n+                rng.setSeed(seed);\n+            }\n+\n+            /** {@inheritDoc} */\n+            public void nextBytes(byte[] bytes) {\n+                rng.nextBytes(bytes);\n+            }\n+\n+            /** {@inheritDoc} */\n+            public int nextInt() {\n+                return rng.nextInt();\n+            }\n+\n+            /** {@inheritDoc} */\n+            public int nextInt(int n) {\n+                if (n <= 0) {\n+                    throw new NotStrictlyPositiveException(n);\n+                }\n+                return rng.nextInt(n);\n+            }\n+\n+            /** {@inheritDoc} */\n+            public long nextLong() {\n+                return rng.nextLong();\n+            }\n+\n+            /** {@inheritDoc} */\n+            public boolean nextBoolean() {\n+                return rng.nextBoolean();\n+            }\n+\n+            /** {@inheritDoc} */\n+            public float nextFloat() {\n+                return rng.nextFloat();\n+            }\n+\n+            /** {@inheritDoc} */\n+            public double nextDouble() {\n+                return rng.nextDouble();\n+            }\n+\n+            /** {@inheritDoc} */\n+            public double nextGaussian() {\n+                return rng.nextGaussian();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Converts seed from one representation to another.\n+     *\n+     * @param seed Original seed.\n+     * @return the converted seed.\n+     */\n+    public static long convertToLong(int[] seed) {\n+        // The following number is the largest prime that fits\n+        // in 32 bits (i.e. 2^32 - 5).\n+        final long prime = 4294967291l;\n+\n+        long combined = 0l;\n+        for (int s : seed) {\n+            combined = combined * prime + s;\n+        }\n+\n+        return combined;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/random/RandomGeneratorFactoryTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.random;\n+\n+import java.util.Random;\n+\n+/**\n+ * Test cases for the {@link RandomGeneratorFactory} class.\n+ *\n+ * @version $Id$\n+ */\n+public class RandomGeneratorFactoryTest extends RandomGeneratorAbstractTest {\n+\n+    @Override\n+    protected RandomGenerator makeGenerator() {\n+        RandomGenerator generator = RandomGeneratorFactory.createRandomGenerator(new Random());\n+        generator.setSeed(1001);\n+        return generator;\n+    }\n+}", "timestamp": 1375362726, "metainfo": ""}