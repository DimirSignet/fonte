{"sha": "196e63174afdb3df1529c1b97bb8437b16831cc3", "log": "Fixed creation of generic array.  Thanks to Piotr Wydrych.  JIRA: MATH-942  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java\n  */\n package org.apache.commons.math3.distribution;\n \n-import java.lang.reflect.Array;\n import java.util.ArrayList;\n import java.util.List;\n+\n import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NotPositiveException;\n      * @throws NotStrictlyPositiveException if {@code sampleSize} is not\n      * positive.\n      */\n-    public T[] sample(int sampleSize) throws NotStrictlyPositiveException {\n+    public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {\n         if (sampleSize <= 0) {\n             throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,\n                     sampleSize);\n         }\n-        @SuppressWarnings(\"unchecked\")\n-        final T[]out = (T[]) Array.newInstance(singletons.get(0).getClass(), sampleSize);\n+\n+        final Object[] out = new Object[sampleSize];\n \n         for (int i = 0; i < sampleSize; i++) {\n             out[i] = sample();\n--- a/src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java\n+++ b/src/test/java/org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java\n  */\n package org.apache.commons.math3.distribution;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n import org.apache.commons.math3.exception.DimensionMismatchException;\n import org.apache.commons.math3.exception.MathArithmeticException;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NotPositiveException;\n import org.apache.commons.math3.util.FastMath;\n+import org.apache.commons.math3.util.Pair;\n import org.junit.Assert;\n import org.junit.Test;\n \n         Assert.assertEquals(testDistribution.getNumericalVariance(),\n                 sumOfSquares / n - FastMath.pow(sum / n, 2), 1e-2);\n     }\n+\n+    @Test\n+    public void testIssue942() {\n+        List<Pair<Object,Double>> list = new ArrayList<Pair<Object, Double>>();\n+        list.add(new Pair<Object, Double>(new Object() {}, new Double(0)));\n+        list.add(new Pair<Object, Double>(new Object() {}, new Double(1)));\n+        Assert.assertEquals(1, new DiscreteDistribution<Object>(list).sample(1).length);\n+    }\n+\n }", "timestamp": 1362916860, "metainfo": ""}