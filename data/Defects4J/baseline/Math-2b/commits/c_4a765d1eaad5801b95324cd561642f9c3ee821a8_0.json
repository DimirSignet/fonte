{"sha": "4a765d1eaad5801b95324cd561642f9c3ee821a8", "log": "Improved speed of FastMath copysign methods.  JIRA: MATH-951  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math3/util/FastMath.java\n      * @return the magnitude with the same sign as the {@code sign} argument\n      */\n     public static double copySign(double magnitude, double sign){\n-        long m = Double.doubleToLongBits(magnitude);\n-        long s = Double.doubleToLongBits(sign);\n-        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n+        // The highest order bit is going to be zero if the\n+        // highest order bit of m and s is the same and one otherwise.\n+        // So (m^s) will be positive if both m and s have the same sign\n+        // and negative otherwise.\n+        final long m = Double.doubleToLongBits(magnitude);\n+        final long s = Double.doubleToLongBits(sign);\n+        if ((m^s) >= 0) {\n             return magnitude;\n         }\n         return -magnitude; // flip sign\n      * @return the magnitude with the same sign as the {@code sign} argument\n      */\n     public static float copySign(float magnitude, float sign){\n-        int m = Float.floatToIntBits(magnitude);\n-        int s = Float.floatToIntBits(sign);\n-        if ((m >= 0 && s >= 0) || (m < 0 && s < 0)) { // Sign is currently OK\n+        // The highest order bit is going to be zero if the\n+        // highest order bit of m and s is the same and one otherwise.\n+        // So (m^s) will be positive if both m and s have the same sign\n+        // and negative otherwise.\n+        final int m = Float.floatToIntBits(magnitude);\n+        final int s = Float.floatToIntBits(sign);\n+        if ((m^s) >= 0) {\n             return magnitude;\n         }\n         return -magnitude; // flip sign\n--- a/src/test/java/org/apache/commons/math3/util/FastMathTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/FastMathTest.java\n         double delta = 0.0;\n         Assert.assertEquals(1.0, FastMath.copySign(1d, 2.0), delta);\n         Assert.assertEquals(1.0, FastMath.copySign(1d, 0.0), delta);\n+        Assert.assertEquals(-1.0, FastMath.copySign(1d, -0.0), delta);\n+        Assert.assertEquals(1.0, FastMath.copySign(1d, Double.POSITIVE_INFINITY), delta);\n+        Assert.assertEquals(-1.0, FastMath.copySign(1d, Double.NEGATIVE_INFINITY), delta);\n+        Assert.assertEquals(1.0, FastMath.copySign(1d, Double.NaN), delta);\n         Assert.assertEquals(-1.0, FastMath.copySign(1d, -2.0), delta);\n     }\n \n         float delta = 0.0F;\n         Assert.assertEquals(1.0F, FastMath.copySign(1d, 2.0F), delta);\n         Assert.assertEquals(1.0F, FastMath.copySign(1d, 0.0F), delta);\n+        Assert.assertEquals(-1.0F, FastMath.copySign(1d, -0.0F), delta);\n+        Assert.assertEquals(1.0F, FastMath.copySign(1d, Float.POSITIVE_INFINITY), delta);\n+        Assert.assertEquals(-1.0F, FastMath.copySign(1d, Float.NEGATIVE_INFINITY), delta);\n+        Assert.assertEquals(1.0F, FastMath.copySign(1d, Float.NaN), delta);\n         Assert.assertEquals(-1.0F, FastMath.copySign(1d, -2.0F), delta);\n     }\n ", "timestamp": 1363969517, "metainfo": ""}