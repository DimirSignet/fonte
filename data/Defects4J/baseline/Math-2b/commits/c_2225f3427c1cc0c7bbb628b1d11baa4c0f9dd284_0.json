{"sha": "2225f3427c1cc0c7bbb628b1d11baa4c0f9dd284", "log": "Improved speed of FastMath.abs methods, by removing branching.  JIRA: MATH-954  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math3/util/FastMath.java\n      * @return abs(x)\n      */\n     public static int abs(final int x) {\n-        return (x < 0) ? -x : x;\n+        final int i = x >>> 31;\n+        return (x ^ (~i + 1)) + i;\n     }\n \n     /**\n      * @return abs(x)\n      */\n     public static long abs(final long x) {\n-        return (x < 0l) ? -x : x;\n+        final long l = x >>> 63;\n+        // l is one if x negative zero else\n+        // ~l+1 is zero if x is positive, -1 if x is negative\n+        // x^(~l+1) is x is x is positive, ~x if x is negative\n+        // add around\n+        return (x ^ (~l + 1)) + l;\n     }\n \n     /**\n      * @return abs(x)\n      */\n     public static float abs(final float x) {\n-        return (x < 0.0f) ? -x : (x == 0.0f) ? 0.0f : x; // -0.0 => +0.0\n+        if ((Float.floatToRawIntBits(x) & Integer.MIN_VALUE) == 0) {\n+            return x;\n+        }\n+        return -x;\n     }\n \n     /**\n      * @return abs(x)\n      */\n     public static double abs(double x) {\n-        return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0\n+        if ((Double.doubleToRawLongBits(x) & Long.MIN_VALUE) == 0) {\n+            return x;\n+        }\n+        return -x;\n     }\n \n     /**", "timestamp": 1364208402, "metainfo": ""}