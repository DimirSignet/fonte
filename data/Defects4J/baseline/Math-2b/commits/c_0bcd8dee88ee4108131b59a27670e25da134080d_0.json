{"sha": "0bcd8dee88ee4108131b59a27670e25da134080d", "log": "Fixed javadoc errors.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java\n+++ b/src/main/java/org/apache/commons/math3/distribution/fitting/MultivariateNormalMixtureExpectationMaximization.java\n      *             or threshold is less than Double.MIN_VALUE\n      * @throws DimensionMismatchException if initialMixture mean vector and data\n      *             number of columns are not equal\n-     * @see #estimateMultivariateNormalMixtureModelDistribution\n      */\n     public void fit(final MixtureMultivariateNormalDistribution initialMixture,\n                     final int maxIterations,\n      *             singular during fitting\n      * @throws NotStrictlyPositiveException if numComponents is less than one or\n      *             threshold is less than Double.MIN_VALUE\n-     * @see #estimateMultivariateNormalMixtureModelDistribution\n      */\n     public void fit(MixtureMultivariateNormalDistribution initialMixture)\n         throws SingularMatrixException,\n \n     /**\n      * Helper method to create a multivariate normal mixture model which can be\n-     * used to initialize {@link #fit(MixtureMultivariateRealDistribution)}.\n+     * used to initialize {@link #fit(MixtureMultivariateNormalDistribution)}.\n      *\n      * This method uses the data supplied to the constructor to try to determine\n      * a good mixture model at which to start the fit, but it is not guaranteed\n      * @param data Data to estimate distribution\n      * @param numComponents Number of components for estimated mixture\n      * @return Multivariate normal mixture model estimated from the data\n-     * @throws NumberIsTooLargeException if {@code numComponents\\ is greater\n+     * @throws NumberIsTooLargeException if {@code numComponents} is greater\n      * than the number of data rows.\n      * @throws NumberIsTooSmallException if {@code numComponents < 2}.\n      * @throws NotStrictlyPositiveException if data has less than 2 rows\n      * @throws DimensionMismatchException if rows of data have different numbers\n      *             of columns\n-     * @see #fit\n      */\n     public static MixtureMultivariateNormalDistribution estimate(final double[][] data,\n                                                                  final int numComponents)\n--- a/src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java\n+++ b/src/main/java/org/apache/commons/math3/ml/clustering/MultiKMeansPlusPlusClusterer.java\n      * @throws MathIllegalArgumentException if the data points are null or the number\n      *   of clusters is larger than the number of data points\n      * @throws ConvergenceException if an empty cluster is encountered and the\n-     *   {@link #emptyStrategy} is set to {@code ERROR}\n+     *   underlying {@link KMeansPlusPlusClusterer} has its\n+     *   {@link KMeansPlusPlusClusterer.EmptyClusterStrategy} is set to {@code ERROR}.\n      */\n     public List<CentroidCluster<T>> cluster(final Collection<T> points)\n         throws MathIllegalArgumentException, ConvergenceException {", "timestamp": 1364521362, "metainfo": ""}