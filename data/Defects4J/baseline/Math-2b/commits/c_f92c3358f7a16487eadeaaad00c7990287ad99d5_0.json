{"sha": "f92c3358f7a16487eadeaaad00c7990287ad99d5", "log": "Turn fixed values into constants  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/stat/FrequencyTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/FrequencyTest.java\n  */\n \n public final class FrequencyTest {\n-    private long oneL = 1;\n-    private long twoL = 2;\n-    private long threeL = 3;\n-    private int oneI = 1;\n-    private int twoI = 2;\n-    private int threeI=3;\n-    private double tolerance = 10E-15;\n+    private static final long ONE_LONG = 1L;\n+    private static final long TWO_LONG = 2L;\n+    private static final long THREE_LONG = 3L;\n+    private static final int ONE = 1;\n+    private static final int TWO = 2;\n+    private static final int THREEE = 3 ;\n+    private static final double TOLERANCE = 10E-15d;\n+\n     private Frequency f = null;\n \n     @Before\n     @Test\n     public void testCounts() {\n         Assert.assertEquals(\"total count\",0,f.getSumFreq());\n-        f.addValue(oneL);\n-        f.addValue(twoL);\n+        f.addValue(ONE_LONG);\n+        f.addValue(TWO_LONG);\n         f.addValue(1);\n-        f.addValue(oneI);\n+        f.addValue(ONE);\n         Assert.assertEquals(\"one frequency count\",3,f.getCount(1));\n         Assert.assertEquals(\"two frequency count\",1,f.getCount(2));\n         Assert.assertEquals(\"three frequency count\",0,f.getCount(3));\n         f.addValue(\"oNe\");\n         f.addValue(\"Z\");\n         Assert.assertEquals(\"one cumulative frequency\", 1 ,  f.getCount(\"one\"));\n-        Assert.assertEquals(\"Z cumulative pct\", 0.5,  f.getCumPct(\"Z\"), tolerance);\n-        Assert.assertEquals(\"z cumulative pct\", 1.0,  f.getCumPct(\"z\"), tolerance);\n-        Assert.assertEquals(\"Ot cumulative pct\", 0.25,  f.getCumPct(\"Ot\"), tolerance);\n+        Assert.assertEquals(\"Z cumulative pct\", 0.5,  f.getCumPct(\"Z\"), TOLERANCE);\n+        Assert.assertEquals(\"z cumulative pct\", 1.0,  f.getCumPct(\"z\"), TOLERANCE);\n+        Assert.assertEquals(\"Ot cumulative pct\", 0.25,  f.getCumPct(\"Ot\"), TOLERANCE);\n         f.clear();\n \n         f = null;\n         f.addValue(Integer.valueOf(-1));\n         Assert.assertEquals(\"1 count\", 3, f.getCount(1));\n         Assert.assertEquals(\"1 count\", 3, f.getCount(Integer.valueOf(1)));\n-        Assert.assertEquals(\"0 cum pct\", 0.2, f.getCumPct(0), tolerance);\n-        Assert.assertEquals(\"1 pct\", 0.6, f.getPct(Integer.valueOf(1)), tolerance);\n-        Assert.assertEquals(\"-2 cum pct\", 0, f.getCumPct(-2), tolerance);\n-        Assert.assertEquals(\"10 cum pct\", 1, f.getCumPct(10), tolerance);\n+        Assert.assertEquals(\"0 cum pct\", 0.2, f.getCumPct(0), TOLERANCE);\n+        Assert.assertEquals(\"1 pct\", 0.6, f.getPct(Integer.valueOf(1)), TOLERANCE);\n+        Assert.assertEquals(\"-2 cum pct\", 0, f.getCumPct(-2), TOLERANCE);\n+        Assert.assertEquals(\"10 cum pct\", 1, f.getCumPct(10), TOLERANCE);\n \n         f = null;\n         f = new Frequency(String.CASE_INSENSITIVE_ORDER);\n         f.addValue(\"oNe\");\n         f.addValue(\"Z\");\n         Assert.assertEquals(\"one count\", 3 ,  f.getCount(\"one\"));\n-        Assert.assertEquals(\"Z cumulative pct -- case insensitive\", 1 ,  f.getCumPct(\"Z\"), tolerance);\n-        Assert.assertEquals(\"z cumulative pct -- case insensitive\", 1 ,  f.getCumPct(\"z\"), tolerance);\n+        Assert.assertEquals(\"Z cumulative pct -- case insensitive\", 1 ,  f.getCumPct(\"Z\"), TOLERANCE);\n+        Assert.assertEquals(\"z cumulative pct -- case insensitive\", 1 ,  f.getCumPct(\"z\"), TOLERANCE);\n \n         f = null;\n         f = new Frequency();\n     /** test pcts */\n     @Test\n     public void testPcts() {\n-        f.addValue(oneL);\n-        f.addValue(twoL);\n-        f.addValue(oneI);\n-        f.addValue(twoI);\n-        f.addValue(threeL);\n-        f.addValue(threeL);\n+        f.addValue(ONE_LONG);\n+        f.addValue(TWO_LONG);\n+        f.addValue(ONE);\n+        f.addValue(TWO);\n+        f.addValue(THREE_LONG);\n+        f.addValue(THREE_LONG);\n         f.addValue(3);\n-        f.addValue(threeI);\n-        Assert.assertEquals(\"one pct\",0.25,f.getPct(1),tolerance);\n-        Assert.assertEquals(\"two pct\",0.25,f.getPct(Long.valueOf(2)),tolerance);\n-        Assert.assertEquals(\"three pct\",0.5,f.getPct(threeL),tolerance);\n-        Assert.assertEquals(\"five pct\",0,f.getPct(5),tolerance);\n-        Assert.assertEquals(\"foo pct\",0,f.getPct(\"foo\"),tolerance);\n-        Assert.assertEquals(\"one cum pct\",0.25,f.getCumPct(1),tolerance);\n-        Assert.assertEquals(\"two cum pct\",0.50,f.getCumPct(Long.valueOf(2)),tolerance);\n-        Assert.assertEquals(\"Integer argument\",0.50,f.getCumPct(Integer.valueOf(2)),tolerance);\n-        Assert.assertEquals(\"three cum pct\",1.0,f.getCumPct(threeL),tolerance);\n-        Assert.assertEquals(\"five cum pct\",1.0,f.getCumPct(5),tolerance);\n-        Assert.assertEquals(\"zero cum pct\",0.0,f.getCumPct(0),tolerance);\n-        Assert.assertEquals(\"foo cum pct\",0,f.getCumPct(\"foo\"),tolerance);\n+        f.addValue(THREEE);\n+        Assert.assertEquals(\"one pct\",0.25,f.getPct(1),TOLERANCE);\n+        Assert.assertEquals(\"two pct\",0.25,f.getPct(Long.valueOf(2)),TOLERANCE);\n+        Assert.assertEquals(\"three pct\",0.5,f.getPct(THREE_LONG),TOLERANCE);\n+        Assert.assertEquals(\"five pct\",0,f.getPct(5),TOLERANCE);\n+        Assert.assertEquals(\"foo pct\",0,f.getPct(\"foo\"),TOLERANCE);\n+        Assert.assertEquals(\"one cum pct\",0.25,f.getCumPct(1),TOLERANCE);\n+        Assert.assertEquals(\"two cum pct\",0.50,f.getCumPct(Long.valueOf(2)),TOLERANCE);\n+        Assert.assertEquals(\"Integer argument\",0.50,f.getCumPct(Integer.valueOf(2)),TOLERANCE);\n+        Assert.assertEquals(\"three cum pct\",1.0,f.getCumPct(THREE_LONG),TOLERANCE);\n+        Assert.assertEquals(\"five cum pct\",1.0,f.getCumPct(5),TOLERANCE);\n+        Assert.assertEquals(\"zero cum pct\",0.0,f.getCumPct(0),TOLERANCE);\n+        Assert.assertEquals(\"foo cum pct\",0,f.getCumPct(\"foo\"),TOLERANCE);\n     }\n \n     /** test adding incomparable values */\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n-        Assert.assertEquals(\"a pct\",0.5,f.getPct(aChar),tolerance);\n-        Assert.assertEquals(\"b cum pct\",1.0,f.getCumPct(bChar),tolerance);\n-        Assert.assertEquals(\"a string pct\",0.0,f.getPct(aString),tolerance);\n-        Assert.assertEquals(\"a string cum pct\",0.0,f.getCumPct(aString),tolerance);\n+        Assert.assertEquals(\"a pct\",0.5,f.getPct(aChar),TOLERANCE);\n+        Assert.assertEquals(\"b cum pct\",1.0,f.getCumPct(bChar),TOLERANCE);\n+        Assert.assertEquals(\"a string pct\",0.0,f.getPct(aString),TOLERANCE);\n+        Assert.assertEquals(\"a string cum pct\",0.0,f.getCumPct(aString),TOLERANCE);\n \n         f = new Frequency();\n         f.addValue(\"One\");\n      */\n     @Test\n     public void testToString() throws Exception {\n-        f.addValue(oneL);\n-        f.addValue(twoL);\n-        f.addValue(oneI);\n-        f.addValue(twoI);\n+        f.addValue(ONE_LONG);\n+        f.addValue(TWO_LONG);\n+        f.addValue(ONE);\n+        f.addValue(TWO);\n \n         String s = f.toString();\n         //System.out.println(s);\n         Assert.assertEquals(\"Integer 1 count\", 2, f.getCount(1));\n         Assert.assertEquals(\"Integer 1 count\", 2, f.getCount(Integer.valueOf(1)));\n         Assert.assertEquals(\"Integer 1 count\", 2, f.getCount(Long.valueOf(1)));\n-        Assert.assertEquals(\"Integer 1 cumPct\", 0.5, f.getCumPct(1), tolerance);\n-        Assert.assertEquals(\"Integer 1 cumPct\", 0.5, f.getCumPct(Long.valueOf(1)), tolerance);\n-        Assert.assertEquals(\"Integer 1 cumPct\", 0.5, f.getCumPct(Integer.valueOf(1)), tolerance);\n+        Assert.assertEquals(\"Integer 1 cumPct\", 0.5, f.getCumPct(1), TOLERANCE);\n+        Assert.assertEquals(\"Integer 1 cumPct\", 0.5, f.getCumPct(Long.valueOf(1)), TOLERANCE);\n+        Assert.assertEquals(\"Integer 1 cumPct\", 0.5, f.getCumPct(Integer.valueOf(1)), TOLERANCE);\n         Iterator<?> it = f.valuesIterator();\n         while (it.hasNext()) {\n             Assert.assertTrue(it.next() instanceof Long);\n \n     @Test\n     public void testSerial() {\n-        f.addValue(oneL);\n-        f.addValue(twoL);\n-        f.addValue(oneI);\n-        f.addValue(twoI);\n+        f.addValue(ONE_LONG);\n+        f.addValue(TWO_LONG);\n+        f.addValue(ONE);\n+        f.addValue(TWO);\n         Assert.assertEquals(f, TestUtils.serializeAndRecover(f));\n     }\n     \n     @Test\n     public void testGetUniqueCount() {\n         Assert.assertEquals(0, f.getUniqueCount());\n-        f.addValue(oneL);\n+        f.addValue(ONE_LONG);\n         Assert.assertEquals(1, f.getUniqueCount());\n-        f.addValue(oneL);\n+        f.addValue(ONE_LONG);\n         Assert.assertEquals(1, f.getUniqueCount());\n-        f.addValue(twoI);\n+        f.addValue(TWO);\n         Assert.assertEquals(2, f.getUniqueCount());\n     }\n     \n     @Test\n     public void testIncrement() {\n         Assert.assertEquals(0, f.getUniqueCount());\n-        f.incrementValue(oneL, 1);\n-        Assert.assertEquals(1, f.getCount(oneL));\n-\n-        f.incrementValue(oneL, 4);\n-        Assert.assertEquals(5, f.getCount(oneL));\n-        \n-        f.incrementValue(oneL, -5);\n-        Assert.assertEquals(0, f.getCount(oneL));\n+        f.incrementValue(ONE_LONG, 1);\n+        Assert.assertEquals(1, f.getCount(ONE_LONG));\n+\n+        f.incrementValue(ONE_LONG, 4);\n+        Assert.assertEquals(5, f.getCount(ONE_LONG));\n+        \n+        f.incrementValue(ONE_LONG, -5);\n+        Assert.assertEquals(0, f.getCount(ONE_LONG));\n     }\n     \n     @Test\n     public void testMerge() {\n         Assert.assertEquals(0, f.getUniqueCount());\n-        f.addValue(oneL);\n-        f.addValue(twoL);\n-        f.addValue(oneI);\n-        f.addValue(twoI);\n+        f.addValue(ONE_LONG);\n+        f.addValue(TWO_LONG);\n+        f.addValue(ONE);\n+        f.addValue(TWO);\n         \n         Assert.assertEquals(2, f.getUniqueCount());\n-        Assert.assertEquals(2, f.getCount(oneI));\n-        Assert.assertEquals(2, f.getCount(twoI));\n+        Assert.assertEquals(2, f.getCount(ONE));\n+        Assert.assertEquals(2, f.getCount(TWO));\n \n         Frequency g = new Frequency();\n-        g.addValue(oneL);\n-        g.addValue(threeL);\n-        g.addValue(threeI);\n+        g.addValue(ONE_LONG);\n+        g.addValue(THREE_LONG);\n+        g.addValue(THREEE);\n \n         Assert.assertEquals(2, g.getUniqueCount());\n-        Assert.assertEquals(1, g.getCount(oneI));\n-        Assert.assertEquals(2, g.getCount(threeI));\n+        Assert.assertEquals(1, g.getCount(ONE));\n+        Assert.assertEquals(2, g.getCount(THREEE));\n \n         f.merge(g);\n         \n         Assert.assertEquals(3, f.getUniqueCount());\n-        Assert.assertEquals(3, f.getCount(oneI));\n-        Assert.assertEquals(2, f.getCount(twoI));\n-        Assert.assertEquals(2, f.getCount(threeI));        \n+        Assert.assertEquals(3, f.getCount(ONE));\n+        Assert.assertEquals(2, f.getCount(TWO));\n+        Assert.assertEquals(2, f.getCount(THREEE));        \n     }\n     \n     @Test\n     public void testMergeCollection() {\n         Assert.assertEquals(0, f.getUniqueCount());\n-        f.addValue(oneL);\n+        f.addValue(ONE_LONG);\n         \n         Assert.assertEquals(1, f.getUniqueCount());\n-        Assert.assertEquals(1, f.getCount(oneI));\n-        Assert.assertEquals(0, f.getCount(twoI));\n+        Assert.assertEquals(1, f.getCount(ONE));\n+        Assert.assertEquals(0, f.getCount(TWO));\n \n         Frequency g = new Frequency();\n-        g.addValue(twoL);\n+        g.addValue(TWO_LONG);\n \n         Frequency h = new Frequency();\n-        h.addValue(threeL);\n+        h.addValue(THREE_LONG);\n         \n         List<Frequency> coll = new ArrayList<Frequency>();\n         coll.add(g);\n         f.merge(coll);\n         \n         Assert.assertEquals(3, f.getUniqueCount());\n-        Assert.assertEquals(1, f.getCount(oneI));\n-        Assert.assertEquals(1, f.getCount(twoI));\n-        Assert.assertEquals(1, f.getCount(threeI));        \n+        Assert.assertEquals(1, f.getCount(ONE));\n+        Assert.assertEquals(1, f.getCount(TWO));\n+        Assert.assertEquals(1, f.getCount(THREEE));        \n     }\n     \n //    @Test", "timestamp": 1373220400, "metainfo": ""}