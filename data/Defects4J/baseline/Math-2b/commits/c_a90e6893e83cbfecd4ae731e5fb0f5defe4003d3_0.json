{"sha": "a90e6893e83cbfecd4ae731e5fb0f5defe4003d3", "log": "Added array-scaling methods to MathArrays. Patch provided by Jared Becksfort. JIRA: MATH-877  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java\n+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java\n         double evaluate(double[] array,\n                         int startIndex,\n                         int numElements);\n+    }\n+\n+    /**\n+     * Create a copy of an array scaled by a value.\n+     *\n+     * @param arr Array to scale.\n+     * @param val Scalar.\n+     * @return scaled copy of array with each entry multiplied by val.\n+     */\n+    public static double[] scale(double val, final double[] arr) {\n+        double[] newArr = new double[arr.length];\n+        for (int i = 0; i < arr.length; i++) {\n+            newArr[i] = arr[i] * val;\n+        }\n+        return newArr;\n+    }\n+\n+    /**\n+     * <p>Multiply each element of an array by a value.</p>\n+     *\n+     * <p>The array is modified in place (no copy is created).</p>\n+     *\n+     * @param arr Array to scale\n+     * @param val Scalar\n+     */\n+    public static void scaleInPlace(double val, final double[] arr) {\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] *= val;\n+        }\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/util/MathArraysTest.java\n+++ b/src/test/java/org/apache/commons/math3/util/MathArraysTest.java\n  * @version $Id$\n  */\n public class MathArraysTest {\n+    \n+    @Test\n+    public void testScale() {\n+        final double[] test = new double[] { -2.5, -1, 0, 1, 2.5 };\n+        final double[] correctTest = MathArrays.copyOf(test);\n+        final double[] correctScaled = new double[]{5.25, 2.1, 0, -2.1, -5.25};\n+        \n+        final double[] scaled = MathArrays.scale(-2.1, test);\n+\n+        // Make sure test has not changed\n+        for (int i = 0; i < test.length; i++) {\n+            Assert.assertEquals(correctTest[i], test[i], 0);\n+        }\n+\n+        // Test scaled values\n+        for (int i = 0; i < scaled.length; i++) {\n+            Assert.assertEquals(correctScaled[i], scaled[i], 0);\n+        }\n+    }\n+    \n+    @Test\n+    public void testScaleInPlace() {\n+        final double[] test = new double[] { -2.5, -1, 0, 1, 2.5 };\n+        final double[] correctScaled = new double[]{5.25, 2.1, 0, -2.1, -5.25};\n+        MathArrays.scaleInPlace(-2.1, test);\n+\n+        // Make sure test has changed\n+        for (int i = 0; i < test.length; i++) {\n+            Assert.assertEquals(correctScaled[i], test[i], 0);\n+        }\n+    }\n+    \n     @Test(expected=DimensionMismatchException.class)\n     public void testEbeAddPrecondition() {\n         MathArrays.ebeAdd(new double[3], new double[4]);", "timestamp": 1363383041, "metainfo": ""}