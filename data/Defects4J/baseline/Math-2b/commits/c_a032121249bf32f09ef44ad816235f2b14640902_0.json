{"sha": "a032121249bf32f09ef44ad816235f2b14640902", "log": "[MATH-977] Completed HaltonSequence generator, adding test.  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/math3/random/HaltonSequenceGeneratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.math3.random;\n+\n+import static org.junit.Assert.*;\n+\n+import org.apache.commons.math3.exception.DimensionMismatchException;\n+import org.apache.commons.math3.exception.NullArgumentException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class HaltonSequenceGeneratorTest {\n+\n+    private double[][] referenceValues = {\n+            { 0.0,    0.0,    0.0  },\n+            { 0.5,    0.6667, 0.6  },\n+            { 0.25,   0.3333, 0.2  },\n+            { 0.75,   0.2223, 0.8  },\n+            { 0.125,  0.8888, 0.4  },\n+            { 0.625,  0.5555, 0.12 },\n+            { 0.375,  0.1111, 0.72 },\n+            { 0.875,  0.7777, 0.32 },\n+            { 0.0625, 0.4444, 0.92 },\n+            { 0.5625, 0.0740, 0.52 }\n+    };\n+\n+    private double[][] referenceValuesUnscrambled = {\n+            { 0.0,    0.0    },\n+            { 0.5,    0.3333 },\n+            { 0.25,   0.6666 },\n+            { 0.75,   0.1111 },\n+            { 0.125,  0.4444 },\n+            { 0.625,  0.7777 },\n+            { 0.375,  0.2222 },\n+            { 0.875,  0.5555 },\n+            { 0.0625, 0.8888 },\n+            { 0.5625, 0.0370 }\n+    };\n+\n+    private HaltonSequenceGenerator generator;\n+\n+    @Before\n+    public void setUp() {\n+        generator = new HaltonSequenceGenerator(3);\n+    }\n+\n+    @Test\n+    public void test3DReference() {\n+        for (int i = 0; i < referenceValues.length; i++) {\n+            double[] result = generator.nextVector();\n+            assertArrayEquals(referenceValues[i], result, 1e-3);\n+            assertEquals(i + 1, generator.getNextIndex());\n+        }\n+    }\n+\n+    @Test\n+    public void test2DUnscrambledReference() {\n+        generator = new HaltonSequenceGenerator(2, new int[] {2, 3}, null);\n+        for (int i = 0; i < referenceValuesUnscrambled.length; i++) {\n+            double[] result = generator.nextVector();\n+            assertArrayEquals(referenceValuesUnscrambled[i], result, 1e-3);\n+            assertEquals(i + 1, generator.getNextIndex());\n+        }\n+    }\n+\n+    @Test\n+    public void testConstructor() {\n+        try {\n+            new HaltonSequenceGenerator(0);\n+            fail();\n+        } catch (OutOfRangeException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            new HaltonSequenceGenerator(41);\n+            fail();\n+        } catch (OutOfRangeException e) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void testConstructor2() throws Exception{\n+        try {\n+            new HaltonSequenceGenerator(2, new int[] { 1 }, null);\n+            fail();\n+        } catch (OutOfRangeException e) {\n+            // expected\n+        }\n+\n+        try {\n+            new HaltonSequenceGenerator(2, null, null);\n+            fail();\n+        } catch (NullArgumentException e) {\n+            // expected\n+        }\n+\n+        try {\n+            new HaltonSequenceGenerator(2, new int[] { 1, 1 }, new int[] { 1 });\n+            fail();\n+        } catch (DimensionMismatchException e) {\n+            // expected\n+        }\n+    }\n+\n+    @Test\n+    public void testSkip() {\n+        double[] result = generator.skipTo(5);\n+        assertArrayEquals(referenceValues[5], result, 1e-3);\n+        assertEquals(6, generator.getNextIndex());\n+        \n+        for (int i = 6; i < referenceValues.length; i++) {\n+            result = generator.nextVector();\n+            assertArrayEquals(referenceValues[i], result, 1e-3);\n+            assertEquals(i + 1, generator.getNextIndex());\n+        }\n+    }\n+\n+}", "timestamp": 1369583943, "metainfo": ""}