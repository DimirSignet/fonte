{"sha": "808691b59317544daefa982b979d3a5d7668cd08", "log": "MATH-956 Replaced hard-coded numbers with constants from class \"Precision\".   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java\n+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java\n  */\n public class LevenbergMarquardtOptimizer\n     extends AbstractLeastSquaresOptimizer {\n+    /** Twice the \"epsilon machine\". */\n+    private static final double TWO_EPS = 2 * Precision.EPSILON;\n     /** Number of solved point. */\n     private int solvedCols;\n     /** Diagonal elements of the R matrix in the Q.R. decomposition. */\n                 }\n \n                 // tests for termination and stringent tolerances\n-                // (2.2204e-16 is the machine epsilon for IEEE754)\n-                if ((FastMath.abs(actRed) <= 2.2204e-16) && (preRed <= 2.2204e-16) && (ratio <= 2.0)) {\n+                if (FastMath.abs(actRed) <= TWO_EPS &&\n+                    preRed <= TWO_EPS &&\n+                    ratio <= 2.0) {\n                     throw new ConvergenceException(LocalizedFormats.TOO_SMALL_COST_RELATIVE_TOLERANCE,\n                                                    costRelativeTolerance);\n-                } else if (delta <= 2.2204e-16 * xNorm) {\n+                } else if (delta <= TWO_EPS * xNorm) {\n                     throw new ConvergenceException(LocalizedFormats.TOO_SMALL_PARAMETERS_RELATIVE_TOLERANCE,\n                                                    parRelativeTolerance);\n-                } else if (maxCosine <= 2.2204e-16)  {\n+                } else if (maxCosine <= TWO_EPS) {\n                     throw new ConvergenceException(LocalizedFormats.TOO_SMALL_ORTHOGONALITY_TOLERANCE,\n                                                    orthoTolerance);\n                 }\n         double gNorm = FastMath.sqrt(sum2);\n         double paru = gNorm / delta;\n         if (paru == 0) {\n-            // 2.2251e-308 is the smallest positive real for IEE754\n-            paru = 2.2251e-308 / FastMath.min(delta, 0.1);\n+            paru = Precision.SAFE_MIN / FastMath.min(delta, 0.1);\n         }\n \n         // if the input par lies outside of the interval (parl,paru),\n \n             // evaluate the function at the current value of lmPar\n             if (lmPar == 0) {\n-                lmPar = FastMath.max(2.2251e-308, 0.001 * paru);\n+                lmPar = FastMath.max(Precision.SAFE_MIN, 0.001 * paru);\n             }\n             double sPar = FastMath.sqrt(lmPar);\n             for (int j = 0; j < solvedCols; ++j) {", "timestamp": 1364313669, "metainfo": ""}