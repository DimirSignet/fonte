{"sha": "d609e65f7bfb38c66e2a8670242e72108b3d0e98", "log": "Added append method to SimpleRegression, making this class map/reducible. JIRA: MATH-987 Contributed by Ajo Fod  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/regression/SimpleRegression.java\n+++ b/src/main/java/org/apache/commons/math3/stat/regression/SimpleRegression.java\n package org.apache.commons.math3.stat.regression;\n import java.io.Serializable;\n \n-import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.distribution.TDistribution;\n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.NoDataException;\n+import org.apache.commons.math3.exception.OutOfRangeException;\n import org.apache.commons.math3.exception.util.LocalizedFormats;\n import org.apache.commons.math3.util.FastMath;\n import org.apache.commons.math3.util.Precision;\n         n++;\n     }\n \n+    /**\n+     * Appends data from another regression calculation to this one.\n+     *\n+     * <p>The mean update formulae are based on a paper written by Philippe\n+     * P&eacute;bay:\n+     * <a\n+     * href=\"http://prod.sandia.gov/techlib/access-control.cgi/2008/086212.pdf\">\n+     * Formulas for Robust, One-Pass Parallel Computation of Covariances and\n+     * Arbitrary-Order Statistical Moments</a>, 2008, Technical Report\n+     * SAND2008-6212, Sandia National Laboratories.</p>\n+     *\n+     * @param reg model to append data from\n+     */\n+    public void append(SimpleRegression reg) {\n+        if (n == 0) {\n+            xbar = reg.xbar;\n+            ybar = reg.ybar;\n+            sumXX = reg.sumXX;\n+            sumYY = reg.sumYY;\n+            sumXY = reg.sumXY;\n+        } else {\n+            if (hasIntercept) {\n+                final double fact1 = reg.n / (double) (reg.n + n);\n+                final double fact2 = n * reg.n / (double) (reg.n + n);\n+                final double dx = reg.xbar - xbar;\n+                final double dy = reg.ybar - ybar;\n+                sumXX += reg.sumXX + dx * dx * fact2;\n+                sumYY += reg.sumYY + dy * dy * fact2;\n+                sumXY += reg.sumXY + dx * dy * fact2;\n+                xbar += dx * fact1;\n+                ybar += dy * fact1;\n+            }else{\n+                sumXX += reg.sumXX;\n+                sumYY += reg.sumYY;\n+                sumXY += reg.sumXY;\n+            }\n+        }\n+        sumX += reg.sumX;\n+        sumY += reg.sumY;\n+        n += reg.n;\n+    }\n \n     /**\n      * Removes the observation (x,y) from the regression data set.\n--- a/src/test/java/org/apache/commons/math3/stat/regression/SimpleRegressionTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/regression/SimpleRegressionTest.java\n \n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n import org.apache.commons.math3.exception.OutOfRangeException;\n+import org.apache.commons.math3.random.ISAACRandom;\n import org.junit.Assert;\n import org.junit.Test;\n \n         {4,6}\n     };\n \n+\n+    /**\n+     * Test that the SimpleRegression objects generated from combining two\n+     * SimpleRegression objects created from subsets of data are identical to\n+     * SimpleRegression objects created from the combined data.\n+     */\n+    @Test\n+    public void testAppend() {\n+        check(false);\n+        check(true);\n+    }\n+\n+    /**\n+     * Checks that adding data to a single model gives the same result\n+     * as adding \"parts\" of the dataset to smaller models and using append\n+     * to aggregate the smaller models.\n+     *\n+     * @param includeIntercept\n+     */\n+    private void check(boolean includeIntercept) {\n+        final int sets = 2;\n+        final ISAACRandom rand = new ISAACRandom(10L);// Seed can be changed\n+        final SimpleRegression whole = new SimpleRegression(includeIntercept);// regression of the whole set\n+        final SimpleRegression parts = new SimpleRegression(includeIntercept);// regression with parts.\n+\n+        for (int s = 0; s < sets; s++) {// loop through each subset of data.\n+            final double coef = rand.nextDouble();\n+            final SimpleRegression sub = new SimpleRegression(includeIntercept);// sub regression\n+            for (int i = 0; i < 5; i++) { // loop through individual samlpes.\n+                final double x = rand.nextDouble();\n+                final double y = x * coef + rand.nextDouble();// some noise\n+                sub.addData(x, y);\n+                whole.addData(x, y);\n+            }\n+            parts.append(sub);\n+            Assert.assertTrue(equals(parts, whole, 1E-6));\n+        }\n+    }\n+\n+    /**\n+     * Returns true iff the statistics reported by model1 are all within tol of\n+     * those reported by model2.\n+     *\n+     * @param model1 first model\n+     * @param model2 second model\n+     * @param tol tolerance\n+     * @return true if the two models report the same regression stats\n+     */\n+    private boolean equals(SimpleRegression model1, SimpleRegression model2, double tol) {\n+        if (model1.getN() != model2.getN()) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getIntercept() - model2.getIntercept()) > tol) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getInterceptStdErr() - model2.getInterceptStdErr()) > tol) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getMeanSquareError() - model2.getMeanSquareError()) > tol) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getR() - model2.getR()) > tol) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getRegressionSumSquares() - model2.getRegressionSumSquares()) > tol) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getRSquare() - model2.getRSquare()) > tol) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getSignificance() - model2.getSignificance()) > tol) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getSlope() - model2.getSlope()) > tol) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getSlopeConfidenceInterval() - model2.getSlopeConfidenceInterval()) > tol) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getSlopeStdErr() - model2.getSlopeStdErr()) > tol) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getSumOfCrossProducts() - model2.getSumOfCrossProducts()) > tol) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getSumSquaredErrors() - model2.getSumSquaredErrors()) > tol) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getTotalSumSquares() - model2.getTotalSumSquares()) > tol) {\n+            return false;\n+        }\n+        if (Math.abs(model1.getXSumSquares() - model2.getXSumSquares()) > tol) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n     @Test\n     public void testRegressIfaceMethod(){\n         final SimpleRegression regression = new SimpleRegression(true);\n         Assert.assertEquals(\"MSE\", regressionIntOnly.getMeanSquareError(), onlyInt.getMeanSquareError() ,1.0E-8);\n \n     }\n-    \n+\n     /**\n      * Verify that regress generates exceptions as advertised for bad model specifications.\n      */\n         } catch (OutOfRangeException ex) {\n             // Expected\n         }\n-        \n+\n         // With intercept\n         final SimpleRegression regression = new SimpleRegression(true);\n         regression.addData(noint2[0][1], noint2[0][0]);", "timestamp": 1370237833, "metainfo": ""}