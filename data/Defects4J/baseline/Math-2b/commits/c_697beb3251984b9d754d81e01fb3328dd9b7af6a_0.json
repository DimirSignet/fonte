{"sha": "697beb3251984b9d754d81e01fb3328dd9b7af6a", "log": "Typos.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/linear/IterativeLinearSolverEvent.java\n+++ b/src/main/java/org/apache/commons/math3/linear/IterativeLinearSolverEvent.java\n import org.apache.commons.math3.exception.MathUnsupportedOperationException;\n \n /**\n- * This is the base class for all events occuring during the iterations of a\n+ * This is the base class for all events occurring during the iterations of a\n  * {@link IterativeLinearSolver}.\n  *\n  * @version $Id$\n--- a/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java\n \n             // search for next events that may occur during the step\n             final int orderingSign = interpolator.isForward() ? +1 : -1;\n-            SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n+            SortedSet<EventState> occurringEvents = new TreeSet<EventState>(new Comparator<EventState>() {\n \n                 /** {@inheritDoc} */\n                 public int compare(EventState es0, EventState es1) {\n             for (final EventState state : eventsStates) {\n                 if (state.evaluateStep(interpolator)) {\n                     // the event occurs during the current step\n-                    occuringEvents.add(state);\n-                }\n-            }\n-\n-            while (!occuringEvents.isEmpty()) {\n+                    occurringEvents.add(state);\n+                }\n+            }\n+\n+            while (!occurringEvents.isEmpty()) {\n \n                 // handle the chronologically first event\n-                final Iterator<EventState> iterator = occuringEvents.iterator();\n+                final Iterator<EventState> iterator = occurringEvents.iterator();\n                 final EventState currentEvent = iterator.next();\n                 iterator.remove();\n \n                 // check if the same event occurs again in the remaining part of the step\n                 if (currentEvent.evaluateStep(interpolator)) {\n                     // the event occurs during the current step\n-                    occuringEvents.add(currentEvent);\n+                    occurringEvents.add(currentEvent);\n                 }\n \n             }", "timestamp": 1374568683, "metainfo": ""}