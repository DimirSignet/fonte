{"sha": "4e2c1ea70a35acd022ed3efb221dfc8d685f0657", "log": "Explicit boxing and unboxing  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/exception/DimensionMismatchException.java\n+++ b/src/main/java/org/apache/commons/math3/exception/DimensionMismatchException.java\n     public DimensionMismatchException(Localizable specific,\n                                       int wrong,\n                                       int expected) {\n-        super(specific, wrong, expected);\n+        super(specific, Integer.valueOf(wrong), Integer.valueOf(expected));\n         dimension = expected;\n     }\n \n--- a/src/main/java/org/apache/commons/math3/exception/MathIllegalNumberException.java\n+++ b/src/main/java/org/apache/commons/math3/exception/MathIllegalNumberException.java\n public class MathIllegalNumberException extends MathIllegalArgumentException {\n     /** Serializable version Id. */\n     private static final long serialVersionUID = -7447085893598031110L;\n+\n+    /** Helper to avoid boxing warnings. @since 3.3 */\n+    protected static final Integer INTEGER_ZERO = Integer.valueOf(0);\n+\n     /** Requested. */\n     private final Number argument;\n \n--- a/src/main/java/org/apache/commons/math3/exception/MultiDimensionMismatchException.java\n+++ b/src/main/java/org/apache/commons/math3/exception/MultiDimensionMismatchException.java\n      * @return the wrong dimension stored at {@code index}.\n      */\n     public int getWrongDimension(int index) {\n-        return wrong[index];\n+        return wrong[index].intValue();\n     }\n     /**\n      * @param index Dimension index.\n      * @return the expected dimension stored at {@code index}.\n      */\n     public int getExpectedDimension(int index) {\n-        return expected[index];\n+        return expected[index].intValue();\n     }\n }\n--- a/src/main/java/org/apache/commons/math3/exception/NonMonotonicSequenceException.java\n+++ b/src/main/java/org/apache/commons/math3/exception/NonMonotonicSequenceException.java\n               (strict ?\n                LocalizedFormats.NOT_STRICTLY_DECREASING_SEQUENCE :\n                LocalizedFormats.NOT_DECREASING_SEQUENCE),\n-              wrong, previous, index, index - 1);\n+              wrong, previous, Integer.valueOf(index), Integer.valueOf(index - 1));\n \n         this.direction = direction;\n         this.strict = strict;\n--- a/src/main/java/org/apache/commons/math3/exception/NotANumberException.java\n+++ b/src/main/java/org/apache/commons/math3/exception/NotANumberException.java\n      * Construct the exception.\n      */\n     public NotANumberException() {\n-        super(LocalizedFormats.NAN_NOT_ALLOWED, Double.NaN);\n+        super(LocalizedFormats.NAN_NOT_ALLOWED, Double.valueOf(Double.NaN));\n     }\n \n }\n--- a/src/main/java/org/apache/commons/math3/exception/NotPositiveException.java\n+++ b/src/main/java/org/apache/commons/math3/exception/NotPositiveException.java\n      * @param value Argument.\n      */\n     public NotPositiveException(Number value) {\n-        super(value, 0, true);\n+        super(value, INTEGER_ZERO, true);\n     }\n     /**\n      * Construct the exception with a specific context.\n      */\n     public NotPositiveException(Localizable specific,\n                                 Number value) {\n-        super(specific, value, 0, true);\n+        super(specific, value, INTEGER_ZERO, true);\n     }\n }\n--- a/src/main/java/org/apache/commons/math3/exception/NotStrictlyPositiveException.java\n+++ b/src/main/java/org/apache/commons/math3/exception/NotStrictlyPositiveException.java\n      * @param value Argument.\n      */\n     public NotStrictlyPositiveException(Number value) {\n-        super(value, 0, false);\n+        super(value, INTEGER_ZERO, false);\n     }\n     /**\n      * Construct the exception with a specific context.\n      */\n     public NotStrictlyPositiveException(Localizable specific,\n                                         Number value) {\n-        super(specific, value, 0, false);\n+        super(specific, value, INTEGER_ZERO, false);\n     }\n }\n--- a/src/main/java/org/apache/commons/math3/exception/ZeroException.java\n+++ b/src/main/java/org/apache/commons/math3/exception/ZeroException.java\n      * @param arguments Arguments.\n      */\n     public ZeroException(Localizable specific, Object ... arguments) {\n-        super(specific, 0, arguments);\n+        super(specific, INTEGER_ZERO, arguments);\n     }\n }", "timestamp": 1374191692, "metainfo": ""}