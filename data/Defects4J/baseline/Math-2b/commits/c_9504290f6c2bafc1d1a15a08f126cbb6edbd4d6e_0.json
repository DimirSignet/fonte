{"sha": "9504290f6c2bafc1d1a15a08f126cbb6edbd4d6e", "log": "Javadoc. Variable names.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java\n+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java\n      }\n \n      /**\n-      * Calculates the convolution between two sequences.\n-      * <p>\n-      * The solution is obtained via straightforward computation of the convolution sum (and not via FFT;\n-      * for longer sequences, the performance of this method might be inferior to an FFT-based implementation).\n+      * Calculates the <a href=\"http://en.wikipedia.org/wiki/Convolution\">\n+      * convolution</a> between two sequences.\n+      * The solution is obtained via straightforward computation of the\n+      * convolution sum (and not via FFT).\n+      * Whenever the computation needs an element that would be located\n+      * at an index outside the input arrays, the value is assumed to be\n+      * zero.\n       *\n-      * @param x the first sequence (double array of length {@code N});\n-      *   the sequence is assumed to be zero elsewhere (i.e. {x[i]}=0 for i<0 and i>={@code N}).\n-      *   Typically, this sequence will represent an input signal to a system.\n-      * @param h the second sequence (double array of length {@code M});\n-      *   the sequence is assumed to be zero elsewhere (i.e. {h[i]}=0 for i<0 and i>={@code M}).\n-      *   Typically, this sequence will represent the impulse response of the system.\n-      * @return the convolution of {@code x} and {@code h} (double array of length {@code N} + {@code M} -1)\n-      * @throws NullArgumentException if either {@code x} or {@code h} is null\n-      * @throws NoDataException if either {@code x} or {@code h} is empty\n+      * @param x First sequence.\n+      * Typically, this sequence will represent an input signal to a system.\n+      * @param h Second sequence.\n+      * Typically, this sequence will represent the impulse response of the\n+      * system.\n+      * @return the convolution of {@code x} and {@code h}.\n+      * This array's length will be {@code x.length + h.length - 1}.\n+      * @throws NullArgumentException if either {@code x} or {@code h} is\n+      * {@code null}.\n+      * @throws NoDataException if either {@code x} or {@code h} is empty.\n       *\n-      * @see <a href=\"http://en.wikipedia.org/wiki/Convolution\">Convolution (Wikipedia)</a>\n       * @since 3.3\n       */\n-     public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException {\n+     public static double[] convolve(double[] x, double[] h)\n+         throws NullArgumentException,\n+                NoDataException {\n          MathUtils.checkNotNull(x);\n          MathUtils.checkNotNull(h);\n \n-         final int lenX = x.length;\n-         final int lenH = h.length;\n-\n-         if (lenX == 0 || lenH == 0) {\n+         final int xLen = x.length;\n+         final int hLen = h.length;\n+\n+         if (xLen == 0 || hLen == 0) {\n              throw new NoDataException();\n          }\n \n          // initialize the output array\n-         final int totalLength = lenX + lenH - 1;\n+         final int totalLength = xLen + hLen - 1;\n          final double[] y = new double[totalLength];\n \n          // straightforward implementation of the convolution sum\n          for (int n = 0; n < totalLength; n++) {\n              double yn = 0;\n-             int k = FastMath.max(0, n + 1 - lenX);\n+             int k = FastMath.max(0, n + 1 - xLen);\n              int j = n - k;\n-             while (k < lenH && j >= 0) {\n+             while (k < hLen && j >= 0) {\n                  yn += x[j--] * h[k++];\n              }\n              y[n] = yn;\n \n          return y;\n      }\n-\n }", "timestamp": 1370432556, "metainfo": ""}