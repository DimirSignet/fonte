{"sha": "e74f252a86d20d4493dbb8d9654397042a692cfe", "log": "Avoid unnecessary instance variable.   ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/analysis/integration/MidPointIntegrator.java\n+++ b/src/main/java/org/apache/commons/math3/analysis/integration/MidPointIntegrator.java\n  * <p>\n  * The function should be integrable.</p>\n  *\n+ * Class is immutable.\n+ *\n  * @version $Id$\n  * @since 3.3\n  */\n \n     /** Maximum number of iterations for midpoint. */\n     public static final int MIDPOINT_MAX_ITERATIONS_COUNT = 64;\n-\n-    /** Intermediate result. */\n-    private double s;\n \n     /**\n      * Build a midpoint integrator with given accuracies and iterations counts.\n      * already computed values.</p>\n      *\n      * @param n the stage of 1/2 refinement, n = 0 is no refinement\n+     * @param previousStageResult Result from the previous call to the {@code stage}\n+     * method. It is unused in the first stage (when {@code n} is equal to 0).\n      * @return the value of n-th stage integral\n      * @throws TooManyEvaluationsException if the maximal number of evaluations\n      * is exceeded.\n      */\n-    private double stage(final int n)\n+    private double stage(final int n,\n+                         double previousStageResult)\n         throws TooManyEvaluationsException {\n \n         final double max = getMax();\n \n         if (n == 0) {\n             final double midPoint = 0.5 * (max - min);\n-            s = (max - min) * computeObjectiveValue(midPoint);\n-            return s;\n+            return (max - min) * computeObjectiveValue(midPoint);\n         } else {\n             final long np = 1L << (n - 1);           // number of new points in this stage\n             double sum = 0;\n                 x += spacing;\n             }\n             // add the new sum to previously calculated result\n-            s = 0.5 * (s + sum * spacing);\n-            return s;\n+            return 0.5 * (previousStageResult + sum * spacing);\n         }\n     }\n \n     protected double doIntegrate()\n         throws MathIllegalArgumentException, TooManyEvaluationsException, MaxCountExceededException {\n \n-        double oldt = stage(0);\n+        double oldt = stage(0, 0d);\n         iterations.incrementCount();\n         while (true) {\n             final int i = iterations.getCount();\n-            final double t = stage(i);\n+            final double t = stage(i, oldt);\n             if (i >= getMinimalIterationCount()) {\n                 final double delta = FastMath.abs(t - oldt);\n                 final double rLimit =", "timestamp": 1370252019, "metainfo": ""}