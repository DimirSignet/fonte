{"sha": "21baa9688c0936748f0086ce0adea984924ed76f", "log": "MATH-1000 Add mode function to Frequency class  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/Frequency.java\n+++ b/src/main/java/org/apache/commons/math3/stat/Frequency.java\n \n import java.io.Serializable;\n import java.text.NumberFormat;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.Comparator;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.TreeMap;\n \n import org.apache.commons.math3.exception.MathIllegalArgumentException;\n         return getCumPct(Character.valueOf(v));\n     }\n \n+    /**\n+     * Returns the mode value(s) in comparator order.\n+     * \n+     * @return a list containing the value(s) which appear most often.\n+     * @since 3.3\n+     */\n+    public List<Comparable<?>> getMode() {\n+        long mostPopular = 0; // frequencies are always positive\n+        \n+        // Get the max count first, so we avoid having to recreate the List each time\n+        for(Long l : freqTable.values()) {\n+            long frequency = l.longValue();\n+            if (frequency > mostPopular) {\n+                mostPopular = frequency;\n+            }\n+        }\n+\n+        List<Comparable<?>> modeList = new ArrayList<Comparable<?>>();\n+        for (Entry<Comparable<?>, Long> ent : freqTable.entrySet()) {\n+            long frequency = ent.getValue().longValue();\n+            if (frequency == mostPopular) {\n+               modeList.add(ent.getKey());\n+// Alternatively, to avoid scanning the entries twice, keep recreating the set\n+// To use this approach, comment out the values() scan loop above and uncomment below              \n+//            } else if (frequency > mostPopular) {\n+//                modeList.clear(); // the previous List is obsolete\n+//                modeList.add(ent.getKey());\n+//                mostPopular = frequency;\n+            }\n+        }\n+        return modeList;\n+    }\n+\n     //----------------------------------------------------------------------------------------------\n \n     /**\n--- a/src/test/java/org/apache/commons/math3/stat/FrequencyTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/FrequencyTest.java\n         Assert.assertEquals(1, f.getCount(THREEE));        \n     }\n     \n-//    @Test\n-//    public void testMode() {\n-//        Assert.assertEquals(0, f.getMode().size());\n-//        f.addValue(\"1\");\n-//        Assert.assertEquals(1, f.getMode().size());\n-//        f.addValue(\"2\");\n-//        Assert.assertEquals(2, f.getMode().size());\n-//        Assert.assertTrue(f.getMode().contains(\"1\"));\n-//        Assert.assertTrue(f.getMode().contains(\"2\"));\n-//        f.addValue(\"2\");\n-//        Assert.assertEquals(1, f.getMode().size());\n-//        Assert.assertFalse(f.getMode().contains(\"1\"));\n-//        Assert.assertTrue(f.getMode().contains(\"2\"));\n-//    }\n+    @Test\n+    public void testMode() {\n+        List<Comparable<?>> mode;\n+        mode = f.getMode();\n+        Assert.assertEquals(0, mode.size());\n+\n+        f.addValue(\"3\");\n+        mode = f.getMode();\n+        Assert.assertEquals(1, mode.size());\n+        Assert.assertEquals(\"3\", mode.get(0));\n+\n+        f.addValue(\"2\");\n+        mode = f.getMode();\n+        Assert.assertEquals(2, mode.size());\n+        Assert.assertEquals(\"2\", mode.get(0));\n+        Assert.assertEquals(\"3\",mode.get(1));\n+\n+        f.addValue(\"2\");\n+        mode = f.getMode();\n+        Assert.assertEquals(1, mode.size());\n+        Assert.assertEquals(\"2\", mode.get(0));\n+        Assert.assertFalse(mode.contains(\"1\"));\n+        Assert.assertTrue(mode.contains(\"2\"));\n+    }\n }", "timestamp": 1373900741, "metainfo": ""}