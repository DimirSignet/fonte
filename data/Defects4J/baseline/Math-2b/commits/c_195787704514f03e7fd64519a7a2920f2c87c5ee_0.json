{"sha": "195787704514f03e7fd64519a7a2920f2c87c5ee", "log": "Fixed checkstyle warnings.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/ode/events/EventFilter.java\n+++ b/src/main/java/org/apache/commons/math3/ode/events/EventFilter.java\n package org.apache.commons.math3.ode.events;\n \n import java.util.Arrays;\n-\n-import org.apache.commons.math3.ode.FirstOrderIntegrator;\n-\n \n /** Wrapper used to detect only increasing or decreasing events.\n  *\n  *\n  * <p>Users can wrap a regular {@link EventHandler event handler} in\n  * an instance of this class and provide this wrapping instance to\n- * the {@link FirstOrderIntegrator ODE solver} in order to avoid wasting\n- * time looking for uninteresting events. The wrapper will intercept\n- * the calls to the {@link EventHandler#g(double, double[]) g function}\n- * and to the {@link EventHandler#eventOccurred(double, double[], boolean)\n+ * the {@link org.apache.commons.math3.ode.FirstOrderIntegrator ODE solver}\n+ * in order to avoid wasting time looking for uninteresting events.\n+ * The wrapper will intercept the calls to the {@link\n+ * EventHandler#g(double, double[]) g function} and to the {@link\n+ * EventHandler#eventOccurred(double, double[], boolean)\n  * eventOccurred} method in order to ignore uninteresting events. The\n  * wrapped regular {@link EventHandler event handler} will the see only\n  * the interesting events, i.e. either only {@code increasing} events or\n--- a/src/main/java/org/apache/commons/math3/ode/events/FilterType.java\n+++ b/src/main/java/org/apache/commons/math3/ode/events/FilterType.java\n package org.apache.commons.math3.ode.events;\n \n import org.apache.commons.math3.exception.MathInternalError;\n-import org.apache.commons.math3.util.Precision;\n-\n \n /** Enumerate for {@link EventFilter filtering events}.\n  *\n          *       \\_/         \\                         /         \\_/         \\\n          *  ------ ---------- 0 ----------_---------- 0 --------------------- 0 ---\n          *                     \\         / \\         /                         \\\n-         *   h=max(+s,-g,+g)    \\       /   \\       /       h=max(+s,-g,+g)     \\    \n+         *   h=max(+s,-g,+g)    \\       /   \\       /       h=max(+s,-g,+g)     \\\n          *                       \\     /     \\     / h=-g                        \\     /\n          *                        \\___/       \\___/                               \\___/\n          * </pre>\n          *   <li>h = min(-s,-g,+g)</li>\n          *   <li>h = -g</li>\n          * </ul>\n-         * where s is a tiny positive value: {@link Precision#SAFE_MIN}.\n+         * where s is a tiny positive value: {@link org.apache.commons.math3.util.Precision#SAFE_MIN}.\n          * </p>\n          */\n         protected  Transformer selectTransformer(final Transformer previous,\n          *   <li>h = min(-s,-g,+g)</li>\n          *   <li>h = -g</li>\n          * </ul>\n-         * where s is a tiny positive value: {@link Precision#SAFE_MIN}.\n+         * where s is a tiny positive value: {@link org.apache.commons.math3.util.Precision#SAFE_MIN}.\n          * </p>\n          */\n         protected  Transformer selectTransformer(final Transformer previous,", "timestamp": 1363723991, "metainfo": ""}