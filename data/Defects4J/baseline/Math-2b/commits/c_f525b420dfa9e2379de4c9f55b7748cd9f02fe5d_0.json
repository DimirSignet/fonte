{"sha": "f525b420dfa9e2379de4c9f55b7748cd9f02fe5d", "log": "Unnecessary casts  ", "commit": "\n--- a/src/test/java/org/apache/commons/math3/transform/FastSineTransformerTest.java\n+++ b/src/test/java/org/apache/commons/math3/transform/FastSineTransformerTest.java\n         final double[] y = new double[n];\n         final double[] sin = new double[2 * n];\n         for (int i = 0; i < sin.length; i++) {\n-            sin[i] = FastMath.sin(FastMath.PI * i / (double) n);\n+            sin[i] = FastMath.sin(FastMath.PI * i / n);\n         }\n         for (int j = 0; j < n; j++) {\n             double yj = 0.0;\n             if (normalization == DstNormalization.STANDARD_DST_I) {\n                 s = 1.0;\n             } else if (normalization == DstNormalization.ORTHOGONAL_DST_I) {\n-                s = FastMath.sqrt(2.0 / (double) n);\n+                s = FastMath.sqrt(2.0 / n);\n             } else {\n                 throw new MathIllegalStateException();\n             }\n             if (normalization == DstNormalization.STANDARD_DST_I) {\n                 s = 2.0 / n;\n             } else if (normalization == DstNormalization.ORTHOGONAL_DST_I) {\n-                s = FastMath.sqrt(2.0 / (double) n);\n+                s = FastMath.sqrt(2.0 / n);\n             } else {\n                 throw new MathIllegalStateException();\n             }", "timestamp": 1374187279, "metainfo": ""}