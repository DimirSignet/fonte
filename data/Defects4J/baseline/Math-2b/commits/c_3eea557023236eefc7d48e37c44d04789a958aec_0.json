{"sha": "3eea557023236eefc7d48e37c44d04789a958aec", "log": "[MATH-851] Fix formatting, code style, improve loops.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/MathArrays.java\n+++ b/src/main/java/org/apache/commons/math3/util/MathArrays.java\n      /**\n       * Calculates the convolution between two sequences.\n       * <p>\n-      * The solution is obtained via straightforward computation of the convolution sum (and not via FFT; for longer sequences,\n-      * the performance of this method might be inferior to an FFT-based implementation).\n+      * The solution is obtained via straightforward computation of the convolution sum (and not via FFT;\n+      * for longer sequences, the performance of this method might be inferior to an FFT-based implementation).\n       *\n-      * @param x the first sequence (double array of length {@code N}); the sequence is assumed to be zero elsewhere\n-      *   (i.e. {x[i]}=0 for i<0 and i>={@code N}). Typically, this sequence will represent an input signal to a system.\n-      * @param h the second sequence (double array of length {@code M}); the sequence is assumed to be zero elsewhere\n-      *   (i.e. {h[i]}=0 for i<0 and i>={@code M}). Typically, this sequence will represent the impulse response of the system.\n+      * @param x the first sequence (double array of length {@code N});\n+      *   the sequence is assumed to be zero elsewhere (i.e. {x[i]}=0 for i<0 and i>={@code N}).\n+      *   Typically, this sequence will represent an input signal to a system.\n+      * @param h the second sequence (double array of length {@code M});\n+      *   the sequence is assumed to be zero elsewhere (i.e. {h[i]}=0 for i<0 and i>={@code M}).\n+      *   Typically, this sequence will represent the impulse response of the system.\n       * @return the convolution of {@code x} and {@code h} (double array of length {@code N} + {@code M} -1)\n       * @throws NullArgumentException if either {@code x} or {@code h} is null\n       * @throws NoDataException if either {@code x} or {@code h} is empty\n       *\n       * @see <a href=\"http://en.wikipedia.org/wiki/Convolution\">Convolution (Wikipedia)</a>\n-      * @since 4.0\n+      * @since 3.3\n       */\n      public static double[] convolve(double[] x, double[] h) throws NullArgumentException, NoDataException {\n          MathUtils.checkNotNull(x);\n          MathUtils.checkNotNull(h);\n \n-         final int N = x.length;\n-         final int M = h.length;\n-\n-         if (N == 0 || M == 0) {\n+         final int lenX = x.length;\n+         final int lenH = h.length;\n+\n+         if (lenX == 0 || lenH == 0) {\n              throw new NoDataException();\n          }\n \n          // initialize the output array\n-         final int totalLength = N + M - 1;\n+         final int totalLength = lenX + lenH - 1;\n          final double[] y = new double[totalLength];\n \n          // straightforward implementation of the convolution sum\n          for (int n = 0; n < totalLength; n++) {\n              double yn = 0;\n-             for (int k = 0; k < M; k++) {\n-                 final int j = n - k;\n-                 if ((j > -1) && (j < N) ) {\n-                     yn = yn + x[j] * h[k];\n-                 }\n+             int k = FastMath.max(0, n + 1 - lenX);\n+             int j = n - k;\n+             while (k < lenH && j >= 0) {\n+                 yn += x[j--] * h[k++];\n              }\n              y[n] = yn;\n          }", "timestamp": 1370286031, "metainfo": ""}