{"sha": "13061415c2fb098b5f8e8abbff58d79e86b76b09", "log": "Replaced mask constant by explicit local constants.  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/util/FastMath.java\n+++ b/src/main/java/org/apache/commons/math3/util/FastMath.java\n     /** Mask used to clear low order 30 bits */\n     private static final long MASK_30BITS = -1L - (HEX_40000000 -1); // 0xFFFFFFFFC0000000L;\n \n+    /** Mask used to clear the non-sign part of an int. */\n+    private static final int MASK_NON_SIGN_INT = 0x7fffffff;\n+\n+    /** Mask used to clear the non-sign part of a long. */\n+    private static final long MASK_NON_SIGN_LONG = 0x7fffffffffffffffl;\n+\n     /** 2^52 - double numbers this large must be integral (no fraction) or NaN or Infinite */\n     private static final double TWO_POWER_52 = 4503599627370496.0;\n     /** 2^53 - double numbers this large must be even. */\n      * @return abs(x)\n      */\n     public static float abs(final float x) {\n-        return Float.intBitsToFloat(Integer.MAX_VALUE & Float.floatToRawIntBits(x));\n+        return Float.intBitsToFloat(MASK_NON_SIGN_INT & Float.floatToRawIntBits(x));\n     }\n \n     /**\n      * @return abs(x)\n      */\n     public static double abs(double x) {\n-        return Double.longBitsToDouble(Long.MAX_VALUE & Double.doubleToRawLongBits(x));\n+        return Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));\n     }\n \n     /**", "timestamp": 1364327288, "metainfo": ""}