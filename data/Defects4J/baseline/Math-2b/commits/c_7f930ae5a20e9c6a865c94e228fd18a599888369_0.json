{"sha": "7f930ae5a20e9c6a865c94e228fd18a599888369", "log": "Added append method to StorelessCovariance, making this class map/reducible. JIRA: MATH-978 Contributed by Ajo Fod  ", "commit": "\n--- a/src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java\n+++ b/src/main/java/org/apache/commons/math3/stat/correlation/StorelessBivariateCovariance.java\n     }\n \n     /**\n+     * Appends another bivariate covariance calculation to this.\n+     * After this operation, statistics returned should be close to what would\n+     * have been obtained by by performing all of the {@link #increment(double, double)}\n+     * operations in {@code cov} directly on this.\n+     *\n+     * @param cov StorelessBivariateCovariance instance to append.\n+     */\n+    public void append(StorelessBivariateCovariance cov) {\n+        double oldN = n;\n+        n += cov.n;\n+        final double deltaX = cov.meanX - meanX;\n+        final double deltaY = cov.meanY - meanY;\n+        meanX += deltaX * cov.n / n;\n+        meanY += deltaY * cov.n / n;\n+        covarianceNumerator += cov.covarianceNumerator + oldN * cov.n / n * deltaX * deltaY;\n+    }\n+\n+    /**\n      * Returns the number of observations.\n      *\n      * @return number of observations\n--- a/src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java\n+++ b/src/main/java/org/apache/commons/math3/stat/correlation/StorelessCovariance.java\n     }\n \n     /**\n+     * Appends {@code sc} to this, effectively aggregating the computations in {@code sc}\n+     * with this.  After invoking this method, covariances returned should be close\n+     * to what would have been obtained by performing all of the {@link #increment(double[])}\n+     * operations in {@code sc} directly on this.\n+     *\n+     * @param sc externally computed StorelessCovariance to add to this\n+     * @throws DimensionMismatchException if the dimension of sc does not match this\n+     */\n+    public void append(StorelessCovariance sc) throws DimensionMismatchException {\n+        if (sc.dimension != dimension) {\n+            throw new DimensionMismatchException(sc.dimension, dimension);\n+        }\n+\n+        // only update the upper triangular part of the covariance matrix\n+        // as only these parts are actually stored\n+        for (int i = 0; i < dimension; i++) {\n+            for (int j = i; j < dimension; j++) {\n+                getElement(i, j).append(sc.getElement(i, j));\n+            }\n+        }\n+    }\n+\n+    /**\n      * {@inheritDoc}\n      * @throws NumberIsTooSmallException if the number of observations\n      * in a cell is &lt; 2\n--- a/src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java\n+++ b/src/test/java/org/apache/commons/math3/stat/correlation/StorelessCovarianceTest.java\n import org.apache.commons.math3.TestUtils;\n import org.apache.commons.math3.linear.Array2DRowRealMatrix;\n import org.apache.commons.math3.linear.RealMatrix;\n+import org.apache.commons.math3.random.ISAACRandom;\n import org.junit.Assert;\n import org.junit.Test;\n \n         }\n     }\n     \n+    /**\n+     * Test equality of covariance. chk: covariance of two\n+     * samples separately and adds them together. cov: computes\n+     * covariance of the combined sample showing both are equal.\n+     */\n+    @Test\n+    public void testEquivalence() {\n+        int num_sets = 2;\n+        StorelessBivariateCovariance cov = new StorelessBivariateCovariance();// covariance of the superset\n+        StorelessBivariateCovariance chk = new StorelessBivariateCovariance();// check covariance made by appending covariance of subsets\n+        \n+        ISAACRandom rand = new ISAACRandom(10L);// Seed can be changed\n+        for (int s = 0; s < num_sets; s++) {// loop through sets of samlpes\n+            StorelessBivariateCovariance covs = new StorelessBivariateCovariance();\n+            for (int i = 0; i < 5; i++) { // loop through individual samlpes.\n+                double x = rand.nextDouble();\n+                double y = rand.nextDouble();\n+                covs.increment(x, y);// add sample to the subset \n+                cov.increment(x, y);// add sample to the superset\n+            }\n+           chk.append(covs);\n+        }\n+        \n+        TestUtils.assertEquals(\"covariance subset test\", chk.getResult(), cov.getResult(), 10E-7);\n+    }\n+  \n     protected RealMatrix createRealMatrix(double[] data, int nRows, int nCols) {\n         double[][] matrixData = new double[nRows][nCols];\n         int ptr = 0;", "timestamp": 1370022473, "metainfo": ""}