{"sha": "c5e143f7df0c3d73f6634488cac8ad8e7054fe05", "log": "Coerce null and undefined out of the @this type when we resolve lazily. We already do this when we resolve @this blocks immediately. There's some question about whether we should be coercing to the global object instead, but i'm going to just punt on this for now. Fixes issue 274  R=johnlenz DELTA=36  (33 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1035097   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n       // create interfaces JSType, ObjectType, FunctionType etc and have\n       // separate implementation instead of the class hierarchy, so that\n       // union types can also be object types, etc.\n-      if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {\n+      if (!type.restrictByNotNullOrUndefined().isSubtype(\n+              typeRegistry.getNativeType(OBJECT_TYPE))) {\n         reportWarning(THIS_TYPE_NON_OBJECT, type.toString());\n         return false;\n       }\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n \n     // Warning about typeOfThis if it doesn't resolve to an ObjectType\n     // is handled further upstream.\n+    //\n     // TODO(nicksantos): Handle this correctly if we have a UnionType.\n+    //\n+    // TODO(nicksantos): In ES3, the runtime coerces \"null\" to the global\n+    // activation object. In ES5, it leaves it as null. Just punt on this\n+    // issue for now by coercing out null. This is complicated by the\n+    // fact that when most people write @this {Foo}, they really don't\n+    // mean \"nullable Foo\". For certain tags (like @extends) we de-nullify\n+    // the name for them.\n     JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);\n+    if (maybeTypeOfThis != null) {\n+      maybeTypeOfThis = maybeTypeOfThis.restrictByNotNullOrUndefined();\n+    }\n     if (maybeTypeOfThis instanceof ObjectType) {\n       typeOfThis = (ObjectType) maybeTypeOfThis;\n     }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n   public void testBackwardsTypedefUse3() throws Exception {\n     testTypes(\n         \"/** @this {MyTypedef} */ function f() {}\" +\n-        \"/** @typedef {(Date|Array)} */ var MyTypedef;\",\n+        \"/** @typedef {(Date|string)} */ var MyTypedef;\",\n         \"@this type of a function must be an object\\n\" +\n-        \"Actual type: (Array|Date|null)\");\n+        \"Actual type: (Date|null|string)\");\n   }\n \n   public void testBackwardsTypedefUse4() throws Exception {\n         \"/** @return {goog.MyTypedef} */ function f() { return null; }\" +\n         \"var goog = {};\" +\n         \"/** @typedef {Object} */ goog.MyTypedef;\");\n+  }\n+\n+  public void testBackwardsTypedefUse8() throws Exception {\n+    // Tehnically, this isn't quite right, because the JS runtime\n+    // will coerce null -> the global object. But we'll punt on that for now.\n+    testTypes(\n+        \"/** @param {!Array} x */ function g(x) {}\" +\n+        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n+        \"var goog = {};\" +\n+        \"/** @typedef {(Array|null|undefined)} */ goog.MyTypedef;\");\n+  }\n+\n+  public void testBackwardsTypedefUse9() throws Exception {\n+    testTypes(\n+        \"/** @param {!Array} x */ function g(x) {}\" +\n+        \"/** @this {goog.MyTypedef} */ function f() { g(this); }\" +\n+        \"var goog = {};\" +\n+        \"/** @typedef {(Error|null|undefined)} */ goog.MyTypedef;\",\n+        \"actual parameter 1 of g does not match formal parameter\\n\" +\n+        \"found   : Error\\n\" +\n+        \"required: Array\");\n   }\n \n   public void testBackwardsConstructor1() throws Exception {", "timestamp": 1288627227, "metainfo": ""}