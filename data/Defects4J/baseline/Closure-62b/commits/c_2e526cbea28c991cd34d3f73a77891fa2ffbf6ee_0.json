{"sha": "2e526cbea28c991cd34d3f73a77891fa2ffbf6ee", "log": "Annotate FUNCTION nodes with their original names, so we can fully map stack traces via the source map.  R=johnlenz DELTA=127  (117 added, 0 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=260445   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n         return name != null && name.length() != 0 ? name : null;\n     }\n   }\n+\n+  /**\n+   * Gets the function's name. This method recognizes the forms:\n+   * <ul>\n+   * <li>{@code {'name': function() ...}}</li>\n+   * <li>{@code {name: function() ...}}</li>\n+   * <li>{@code function name() ...}</li>\n+   * <li>{@code var name = function() ...}</li>\n+   * <li>{@code qualified.name = function() ...}</li>\n+   * <li>{@code var name2 = function name1() ...}</li>\n+   * <li>{@code qualified.name2 = function name1() ...}</li>\n+   * </ul>\n+   *\n+   * @param n a node whose type is {@link Token#FUNCTION}\n+   * @return the function's name, or {@code null} if it has no name\n+   */\n+  static String getNearestFunctionName(Node n) {\n+    String name = getFunctionName(n);\n+    if (name != null) {\n+      return name;\n+    }\n+\n+    // Check for the form { 'x' : function() { } }\n+    Node parent = n.getParent();\n+    switch (parent.getType()) {\n+      case Token.OBJECTLIT:\n+        // Return the name of the literal's key.\n+        return getStringValue(parent.getFirstChild());\n+    }\n+\n+    return null;\n+  }\n+\n \n   /**\n    * Returns true if this is an immutable value.\n--- a/src/com/google/javascript/jscomp/SourceInformationAnnotator.java\n+++ b/src/com/google/javascript/jscomp/SourceInformationAnnotator.java\n  * - Annotates all OBJECT_LITERAL unquoted string key nodes with an\n  *   ORIGINALNAME_PROP.\n  *\n+ * - Annotates all FUNCTION nodes with an ORIGINALNAME_PROP indicating its\n+ *   nearest original name.\n+ *\n  */\n class SourceInformationAnnotator extends\n   NodeTraversal.AbstractPostOrderCallback {\n         if (propNode.getType() == Token.STRING) {\n           n.putProp(Node.ORIGINALNAME_PROP, propNode.getString());\n         }\n+        break;\n \n+      case Token.FUNCTION:\n+        String functionName = NodeUtil.getNearestFunctionName(n);\n+        if (functionName != null) {\n+          n.putProp(Node.ORIGINALNAME_PROP, functionName);\n+        }\n         break;\n \n       case Token.NAME:\n         break;\n \n       case Token.OBJECTLIT:\n-         for (Node key = n.getFirstChild(); key != null;\n-              key = key.getNext().getNext()) {\n+        for (Node key = n.getFirstChild(); key != null;\n+             key = key.getNext().getNext()) {\n            // We only want keys that are strings (not numbers), and only keys\n            // that were unquoted.\n            if (key.getType() == Token.STRING) {\n--- a/test/com/google/javascript/jscomp/SourceMap2Test.java\n+++ b/test/com/google/javascript/jscomp/SourceMap2Test.java\n                    \"\\\"lineCount\\\":1,\\n\" +\n                    \"\\\"lineMaps\\\":[\\\"cAkBEBEB\\\"],\\n\" +\n                    \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n-                   \"\\\"mappings\\\":[[0,1,9],\\n\" +\n+                   \"\\\"mappings\\\":[[0,1,9,\\\"__BASIC__\\\"],\\n\" +\n                    \"[0,1,9,\\\"__BASIC__\\\"],\\n\" +\n                    \"[0,1,18],\\n\" +\n                    \"[0,1,21],\\n\" +\n                    \"\\\"lineCount\\\":1,\\n\" +\n                    \"\\\"lineMaps\\\":[\\\"cAkBABkBA/kCA+ADMBcBgBA9\\\"],\\n\" +\n                    \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n-                   \"\\\"mappings\\\":[[0,1,9],\\n\" +\n+                   \"\\\"mappings\\\":[[0,1,9,\\\"__BASIC__\\\"],\\n\" +\n                    \"[0,1,9,\\\"__BASIC__\\\"],\\n\" +\n                    \"[0,1,18],\\n\" +\n                    \"[0,1,19,\\\"__PARAM1__\\\"],\\n\" +\n                    \"\\\"lineMaps\\\":\" +\n                        \"[\\\"cAEBABIBA/ICA+ADICA/ICA+IDA9AEYBMBA5\\\"],\\n\" +\n                    \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n-                   \"\\\"mappings\\\":[[0,1,9],\\n\" +\n+                   \"\\\"mappings\\\":[[0,1,9,\\\"f\\\"],\\n\" +\n                    \"[0,1,9,\\\"f\\\"],\\n\" +\n                    \"[0,1,10],\\n\" +\n                    \"[0,1,11,\\\"foo\\\"],\\n\" +\n                    \"\\\"lineCount\\\":1,\\n\" +\n                    \"\\\"lineMaps\\\":[\\\"cAEBA/ICA+IDE9IEA8IFA7IGg6MHA5\\\"],\\n\" +\n                    \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n-                   \"\\\"mappings\\\":[[0,1,9],\\n\" +\n+                   \"\\\"mappings\\\":[[0,1,9,\\\"f\\\"],\\n\" +\n                    \"[0,1,9,\\\"f\\\"],\\n\" +\n                    \"[0,1,11,\\\"foo\\\"],\\n\" +\n                    \"[0,1,16,\\\"bar\\\"],\\n\" +\n                    \"\\\"lineMaps\\\":\" +\n                        \"[\\\"cAEBABIBA/ICA+ADICA/ICA+IDA9IEYBMBA5\\\"],\\n\" +\n                    \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n-                   \"\\\"mappings\\\":[[0,1,9],\\n\" +\n+                   \"\\\"mappings\\\":[[0,1,9,\\\"f\\\"],\\n\" +\n                    \"[0,1,9,\\\"f\\\"],\\n\" +\n                    \"[0,1,10],\\n\" +\n                    \"[0,1,11,\\\"foo\\\"],\\n\" +\n--- a/test/com/google/javascript/jscomp/SourceMapTest.java\n+++ b/test/com/google/javascript/jscomp/SourceMapTest.java\n                    \"/** Begin mapping definitions. **/\\n\");\n   }\n \n+  public void testFunctionNameOutput1() throws Exception {\n+    checkSourceMap(\"function f() {}\",\n+                   \"/** Begin line maps. **/{ \\\"file\\\" : \\\"testcode\\\", \" +\n+                   \"\\\"count\\\": 1 }\\n\" +\n+\n+                   \"[0,0,0,0,0,0,0,0,1,1,2,2,3,3]\\n\" +\n+\n+                   \"/** Begin file information. **/\\n\" +\n+                   \"[]\\n\" +\n+\n+                   \"/** Begin mapping definitions. **/\\n\" +\n+                   \"[\\\"testcode\\\",1,9,\\\"f\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,9,\\\"f\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,10]\\n\" +\n+                   \"[\\\"testcode\\\",1,13]\\n\");\n+  }\n+\n+  public void testFunctionNameOutput2() throws Exception {\n+    checkSourceMap(\"a.b.c = function () {};\",\n+\n+                   \"/** Begin line maps. **/{ \\\"file\\\" : \\\"testcode\\\", \" +\n+                   \"\\\"count\\\": 1 }\\n\" +\n+\n+                   \"[3,2,2,1,1,0,4,4,4,4,4,4,4,4,5,5,6,6]\\n\" +\n+\n+                   \"/** Begin file information. **/\\n\" +\n+                   \"[]\\n\" +\n+\n+                   \"/** Begin mapping definitions. **/\\n\" +\n+                   \"[\\\"testcode\\\",1,0]\\n\" +\n+                   \"[\\\"testcode\\\",1,0,\\\"c\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,0,\\\"b\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,0,\\\"a\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,17,\\\"a.b.c\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,17]\\n\" +\n+                   \"[\\\"testcode\\\",1,20]\\n\");\n+  }\n+\n+  public void testFunctionNameOutput3() throws Exception {\n+    checkSourceMap(\"var q = function () {};\",\n+\n+                   \"/** Begin line maps. **/{ \\\"file\\\" : \\\"testcode\\\", \" +\n+                   \"\\\"count\\\": 1 }\\n\" +\n+\n+                   \"[0,0,0,0,1,1,2,2,2,2,2,2,2,2,3,3,4,4]\\n\" +\n+\n+                   \"/** Begin file information. **/\\n\" +\n+                   \"[]\\n\" +\n+\n+                   \"/** Begin mapping definitions. **/\\n\" +\n+                   \"[\\\"testcode\\\",1,0]\\n\" +\n+                   \"[\\\"testcode\\\",1,4,\\\"q\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,17,\\\"q\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,17]\\n\" +\n+                   \"[\\\"testcode\\\",1,20]\\n\");\n+  }\n+\n+  public void testFunctionNameOutput4() throws Exception {\n+    checkSourceMap(\"({ 'q' : function () {} })\",\n+\n+                   \"/** Begin line maps. **/{ \\\"file\\\" : \\\"testcode\\\", \" +\n+                   \"\\\"count\\\": 1 }\\n\" +\n+\n+                   \"[0,0,0,0,1,1,1,1,1,1,1,1,2,2,3,3,0,0]\\n\" +\n+\n+                   \"/** Begin file information. **/\\n\" +\n+                   \"[]\\n\" +\n+\n+                   \"/** Begin mapping definitions. **/\\n\" +\n+                   \"[\\\"testcode\\\",1,1]\\n\" +\n+                   \"[\\\"testcode\\\",1,18,\\\"q\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,18]\\n\" +\n+                   \"[\\\"testcode\\\",1,21]\\n\");\n+  }\n+\n   public void testGoldenOutput1() throws Exception {\n     detailLevel = SourceMap.DetailLevel.ALL;\n \n                    \"[]\\n\" +\n \n                    \"/** Begin mapping definitions. **/\\n\" +\n-                   \"[\\\"testcode\\\",1,9]\\n\" +\n+                   \"[\\\"testcode\\\",1,9,\\\"f\\\"]\\n\" +\n                    \"[\\\"testcode\\\",1,9,\\\"f\\\"]\\n\" +\n                    \"[\\\"testcode\\\",1,10]\\n\" +\n                    \"[\\\"testcode\\\",1,11,\\\"foo\\\"]\\n\" +\n                    \"[]\\n\" +\n \n                    \"/** Begin mapping definitions. **/\\n\" +\n-                   \"[\\\"testcode\\\",1,9]\\n\" +\n+                   \"[\\\"testcode\\\",1,9,\\\"f\\\"]\\n\" +\n                    \"[\\\"testcode\\\",1,9,\\\"f\\\"]\\n\" +\n                    \"[\\\"testcode\\\",1,11,\\\"foo\\\"]\\n\" +\n                    \"[\\\"testcode\\\",1,16,\\\"bar\\\"]\\n\" +\n                    \"/** Begin file information. **/\\n\" +\n                    \"[]\\n\" +\n                    \"/** Begin mapping definitions. **/\\n\" +\n-                   \"[\\\"testcode\\\",1,9]\\n\" +\n+                   \"[\\\"testcode\\\",1,9,\\\"f\\\"]\\n\" +\n                    \"[\\\"testcode\\\",1,9,\\\"f\\\"]\\n\" +\n                    \"[\\\"testcode\\\",1,10]\\n\" +\n                    \"[\\\"testcode\\\",1,11,\\\"foo\\\"]\\n\" +", "timestamp": 1285377609, "metainfo": ""}