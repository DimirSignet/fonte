{"sha": "d329b2e5c911f61f534f3d997cbd615cec91d03b", "log": "Alias \"void 0\" when aliasing keywords.  Fixes issue 195.  R=acleung DELTA=64  (61 added, 1 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=496   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AliasKeywords.java\n+++ b/src/com/google/javascript/jscomp/AliasKeywords.java\n     }\n   }\n \n+  /** Aliases literal keywords (e.g., null) with variable names. */\n+  private class VoidKeywordAliasSpecification extends AliasSpecification {\n+    VoidKeywordAliasSpecification(String aliasName, int tokenId) {\n+      super(aliasName, tokenId);\n+    }\n+\n+    @Override\n+    public void visit(Node n, Node parent) {\n+      Node value = n.getFirstChild();\n+      if (value.getType() == Token.NUMBER && value.getDouble() == 0) {\n+        super.visit(n, parent);\n+      }\n+    }\n+\n+    @Override\n+    protected int minOccurrencesRequiredToAlias() {\n+      return MIN_OCCURRENCES_REQUIRED_TO_ALIAS_LITERAL;\n+    }\n+\n+    @Override\n+    protected void aliasNode(Node n, Node parent) {\n+      Node aliasNode = NodeUtil.newName(\n+          compiler.getCodingConvention(), getAliasName(), n, getAliasName());\n+      parent.replaceChild(n, aliasNode);\n+    }\n+\n+    @Override\n+    /**\n+     * Create the alias declaration (e.g. var $$ALIAS_VOID=void 0;).\n+     */\n+    protected void insertAliasDeclaration(Node codeRoot) {\n+      Node varNode = new Node(Token.VAR);\n+      Node value = new Node(Token.VOID, Node.newNumber(0));\n+      Node name = NodeUtil.newName(\n+          compiler.getCodingConvention(), getAliasName(),\n+          varNode, getAliasName());\n+      name.addChildToBack(value);\n+      varNode.addChildToBack(name);\n+      codeRoot.addChildrenToFront(varNode);\n+    }\n+  }\n+\n+\n   static final String ALIAS_NULL = \"JSCompiler_alias_NULL\";\n   static final String ALIAS_TRUE = \"JSCompiler_alias_TRUE\";\n   static final String ALIAS_FALSE = \"JSCompiler_alias_FALSE\";\n   static final String ALIAS_THROW = \"JSCompiler_alias_THROW\";\n+  static final String ALIAS_VOID = \"JSCompiler_alias_VOID\";\n \n   /**\n    * Don't alias a keyword unless it's referenced at least\n     l.add(new KeywordAliasSpecification(ALIAS_FALSE, Token.FALSE));\n     l.add(new KeywordAliasSpecification(ALIAS_NULL, Token.NULL));\n     l.add(new KeywordAliasSpecification(ALIAS_TRUE, Token.TRUE));\n+    l.add(new VoidKeywordAliasSpecification(ALIAS_VOID, Token.VOID));\n     // Process throw nodes after literal keyword nodes. This is important when\n     // a literal keyword is thrown (e.g., throw true;).\n     // KeywordAliasSpecification needs to know what the parent of the node being\n--- a/test/com/google/javascript/jscomp/AliasKeywordsTest.java\n+++ b/test/com/google/javascript/jscomp/AliasKeywordsTest.java\n       = ENOUGH_TO_ALIAS_LITERAL - 1;\n \n   private static final int ENOUGH_TO_ALIAS_THROW\n-    = AliasKeywords.MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW;\n+      = AliasKeywords.MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW;\n   private static final int TOO_FEW_TO_ALIAS_THROW\n-    = ENOUGH_TO_ALIAS_THROW - 1;\n+      = ENOUGH_TO_ALIAS_THROW - 1;\n \n   @Override\n   public void setUp() {\n     testSame(generateCode(\"true\", TOO_FEW_TO_ALIAS_LITERAL));\n     testSame(generateCode(\"false\", TOO_FEW_TO_ALIAS_LITERAL));\n     testSame(generateCode(\"null\", TOO_FEW_TO_ALIAS_LITERAL));\n+    testSame(generateCode(\"void 0\", TOO_FEW_TO_ALIAS_LITERAL));\n     testSame(generatePreProcessThrowCode(TOO_FEW_TO_ALIAS_THROW, \"1\"));\n+\n+    // Don't alias void nodes other than \"void 0\".\n+    testSame(generateCode(\"void 1\", ENOUGH_TO_ALIAS_LITERAL));\n+    testSame(generateCode(\"void x\", ENOUGH_TO_ALIAS_LITERAL));\n+    testSame(generateCode(\"void f()\", ENOUGH_TO_ALIAS_LITERAL));\n   }\n \n   /**\n     test(generateCode(\"null\", ENOUGH_TO_ALIAS_LITERAL),\n          generateCode(AliasKeywords.ALIAS_NULL, ENOUGH_TO_ALIAS_LITERAL,\n                       \"var JSCompiler_alias_NULL=null;\"));\n+\n+    test(generateCode(\"void 0\", ENOUGH_TO_ALIAS_LITERAL),\n+         generateCode(AliasKeywords.ALIAS_VOID, ENOUGH_TO_ALIAS_LITERAL,\n+                     \"var JSCompiler_alias_VOID=void 0;\"));\n+\n     test(generatePreProcessThrowCode(ENOUGH_TO_ALIAS_THROW, \"1\"),\n          generatePostProcessThrowCode(ENOUGH_TO_ALIAS_THROW, \"\", \"1\"));\n   }\n     actual.append(generateCode(\"true\", ENOUGH_TO_ALIAS_LITERAL));\n     actual.append(generateCode(\"false\", ENOUGH_TO_ALIAS_LITERAL));\n     actual.append(generateCode(\"null\", ENOUGH_TO_ALIAS_LITERAL));\n+    actual.append(generateCode(\"void 0\", ENOUGH_TO_ALIAS_LITERAL));\n \n     StringBuilder expected = new StringBuilder();\n     expected.append(\n+        \"var JSCompiler_alias_VOID=void 0;\" +\n         \"var JSCompiler_alias_TRUE=true;\" +\n         \"var JSCompiler_alias_NULL=null;\" +\n         \"var JSCompiler_alias_FALSE=false;\");\n         generateCode(AliasKeywords.ALIAS_FALSE, ENOUGH_TO_ALIAS_LITERAL));\n     expected.append(\n         generateCode(AliasKeywords.ALIAS_NULL, ENOUGH_TO_ALIAS_LITERAL));\n+    expected.append(\n+        generateCode(AliasKeywords.ALIAS_VOID, ENOUGH_TO_ALIAS_LITERAL));\n \n     test(actual.toString(), expected.toString());\n   }\n       testSame(\"var JSCompiler_alias_TRUE='foo';\");\n       fail();\n     } catch (RuntimeException expected) {\n+      // expected exception\n       assertTrue(-1 != expected.getMessage().indexOf(\n               \"Existing alias definition\"));\n-      // expected\n     }\n   }\n ", "timestamp": 1297297003, "metainfo": ""}