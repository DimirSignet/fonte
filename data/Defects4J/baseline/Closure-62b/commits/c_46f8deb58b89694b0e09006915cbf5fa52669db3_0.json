{"sha": "46f8deb58b89694b0e09006915cbf5fa52669db3", "log": "Make RemoveUnusedVars a bit less aggressive.  R=johnlenz DELTA=21  (16 added, 0 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=174017   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n     static Assign maybeCreateAssign(Node assignNode) {\n       Preconditions.checkState(NodeUtil.isAssignmentOp(assignNode));\n \n-      // Skip any GETPROPs or GETELEMs\n+      // Skip one level of GETPROPs or GETELEMs.\n+      //\n+      // Don't skip more than one level, because then we get into\n+      // situations where assigns to properties of properties will always\n+      // trigger side-effects, and the variable they're on cannot be removed.\n       boolean isPropAssign = false;\n       Node current = assignNode.getFirstChild();\n-      while (NodeUtil.isGet(current)) {\n+      if (NodeUtil.isGet(current)) {\n         current = current.getFirstChild();\n         isPropAssign = true;\n+\n+        if (current.getType() == Token.GETPROP &&\n+            current.getLastChild().getString().equals(\"prototype\")) {\n+          // Prototype properties sets should be considered like normal\n+          // property sets.\n+          current = current.getFirstChild();\n+        }\n       }\n \n       if (current.getType() == Token.NAME) {\n--- a/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n   }\n \n   public void testUnusedPropAssign3() {\n-    test(\"var x = {}; x['foo'] = {}; x['foo'].baz['bar'] = 3\", \"\");\n+    test(\"var x = {}; x['foo'] = {}; x['bar'] = 3\", \"\");\n   }\n \n   public void testUnusedPropAssign3b() {\n-    test(\"var x = {}; x[alert()] = alert(); x[alert()].baz[alert()] = alert()\",\n-         \"alert(),alert();alert(),(alert(),alert())\");\n+    test(\"var x = {}; x[alert()] = alert(); x[alert() + alert()] = alert()\",\n+         \"alert(),alert();(alert() + alert()),alert()\");\n   }\n \n   public void testUnusedPropAssign4() {\n     testSame(\"for (var x in alert()) { x.foo = 3; }\");\n   }\n \n+  public void testUsedPropAssign9() {\n+    testSame(\n+        \"var x = {}; x.foo = newNodeInDom(doc); x.foo.innerHTML = 'new test';\");\n+  }\n+\n   public void testDependencies1() {\n     test(\"var a = 3; var b = function() { alert(a); };\", \"\");\n   }", "timestamp": 1282236009, "metainfo": ""}