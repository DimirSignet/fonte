{"sha": "145faa871db6b60f468ebee99b3551c6c18a8459", "log": "Fixup the JSonML AST factory to comply with the AstValidator.  R=acleung DELTA=34  (21 added, 0 deleted, 13 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1370   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n    * implementations should not perform expensive operations in the mutator\n    * methods.\n    *\n+   * @author tylerg@google.com (Tyler Goodwin)\n    */\n   public interface AliasTransformationHandler {\n \n--- a/src/com/google/javascript/jscomp/jsonml/JsonMLAst.java\n+++ b/src/com/google/javascript/jscomp/jsonml/JsonMLAst.java\n \n import com.google.common.base.Preconditions;\n import com.google.javascript.jscomp.AbstractCompiler;\n+import com.google.javascript.jscomp.AstValidator;\n import com.google.javascript.jscomp.SourceAst;\n import com.google.javascript.jscomp.SourceFile;\n import com.google.javascript.rhino.Node;\n     translator.setRootElement(jsonml);\n     try {\n       root = translator.parse(compiler);\n+      new AstValidator().validateScript(root);\n     } catch (JsonMLException e) {\n       // compiler should already have JSErrors\n     }\n--- a/src/com/google/javascript/jscomp/jsonml/Reader.java\n+++ b/src/com/google/javascript/jscomp/jsonml/Reader.java\n     Node root = new Node(Token.BLOCK);\n     nodeIndex = -1;\n \n+    Preconditions.checkState(rootElement.getType() == TagType.Program);\n     transformElement(rootElement, root);\n-    return root;\n+    return root.removeFirstChild();\n   }\n \n   /**\n \n     // always insert an extra BLOCK node\n     Node block = new Node(Token.BLOCK);\n+    block.setIsSyntheticBlock(true);\n     node.addChildToBack(block);\n \n     transformAllChildrenFromIndex(element, block, 1, true);\n \n     // the first child represent body\n     Node block = new Node(Token.BLOCK);\n+    block.setIsSyntheticBlock(true);\n     node.addChildToBack(block);\n \n     transformAllChildren(element, block, true);\n--- a/src/com/google/javascript/jscomp/jsonml/Writer.java\n+++ b/src/com/google/javascript/jscomp/jsonml/Writer.java\n    */\n   public JsonML processAst(Node root) {\n     Preconditions.checkNotNull(root);\n-    Preconditions.checkArgument(root.getType() == Token.BLOCK);\n+    Preconditions.checkArgument(\n+      root.getType() == Token.BLOCK || root.getType() == Token.SCRIPT);\n \n     JsonML rootElement = new JsonML(TagType.BlockStmt);\n-    Node child = root.getFirstChild();\n-    while (child != null) {\n-      processNode(child, rootElement);\n-      child = child.getNext();\n-    }\n-\n-    return rootElement.getChild(0);\n+    if (root.getType() == Token.SCRIPT) {\n+      processNode(root, rootElement);\n+      return rootElement.getChild(0);\n+    } else {\n+      Node child = root.getFirstChild();\n+      while (child != null) {\n+        processNode(child, rootElement);\n+        child = child.getNext();\n+      }\n+      // TODO(johnlenz): Add support for multiple scripts.\n+      return rootElement.getChild(0);\n+    }\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java\n+++ b/test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java\n \n package com.google.javascript.jscomp.jsonml;\n \n+import com.google.common.base.Preconditions;\n import com.google.javascript.jscomp.Compiler;\n import com.google.javascript.jscomp.CompilerPass;\n import com.google.javascript.jscomp.CompilerTestCase;\n-\n+import com.google.javascript.rhino.Token;\n import com.google.javascript.jscomp.jsonml.Writer;\n import com.google.javascript.jscomp.jsonml.JsonML;\n import com.google.javascript.jscomp.jsonml.JsonMLAst;\n \n   private void testConversion(String js, String jsonml) throws Exception {\n     JsonML jsonMLRoot = JsonMLUtil.parseString(jsonml);\n-    Node astRoot = parseExpectedJs(js);\n+    Node root = parseExpectedJs(js);\n+    Node astRoot = root.getFirstChild();\n+    Preconditions.checkState(astRoot.getType() == Token.SCRIPT);\n+\n \n     // test JsonML -> AST conversion\n     JsonMLAst ast = new JsonMLAst(jsonMLRoot);\n \n   private void testJsonMLToAstConversion(String js) throws Exception {\n     JsonML jsonml = JsonMLParser.parse(js);\n-    Node ast = parseExpectedJs(js);\n+    Node root = parseExpectedJs(js);\n+    Node ast = root.getFirstChild();\n+    Preconditions.checkState(ast.getType() == Token.SCRIPT);\n+\n     testJsonMLToAstConversion(ast, jsonml, js);\n   }\n \n \n   private void testConversion(String js) throws Exception {\n     JsonML jsonml = JsonMLParser.parse(js);\n-    Node ast = parseExpectedJs(js);\n+    Node root = parseExpectedJs(js);\n+    Node ast = root.getFirstChild();\n+    Preconditions.checkState(ast.getType() == Token.SCRIPT);\n+\n     testJsonMLToAstConversion(ast, jsonml, js);\n \n     jsonml = JsonMLParser.parse(js);", "timestamp": 1302631678, "metainfo": ""}