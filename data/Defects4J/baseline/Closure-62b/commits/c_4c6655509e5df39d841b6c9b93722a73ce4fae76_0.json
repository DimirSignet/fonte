{"sha": "4c6655509e5df39d841b6c9b93722a73ce4fae76", "log": "Avoid creating temporary datastructures by adding a getEdge method in Graph.  R=nicksantos DELTA=65  (65 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=999   ", "commit": "\n--- a/src/com/google/javascript/jscomp/graph/Graph.java\n+++ b/src/com/google/javascript/jscomp/graph/Graph.java\n   public abstract List<GraphEdge<N, E>> getEdges(N n1, N n2);\n \n   /**\n+   * Retrieves any edge from the graph.\n+   *\n+   * @param n1 Node one.\n+   * @param n2 Node two.\n+   * @return The first edges between those two values in the graph. null if\n+   *    there are none.\n+   */\n+  public abstract GraphEdge<N, E> getFirstEdge(N n1, N n2);\n+\n+  /**\n    * Checks whether the node exists in the graph ({@link #createNode(Object)}\n    * has been called with that value).\n    *\n--- a/src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java\n+++ b/src/com/google/javascript/jscomp/graph/LinkedDirectedGraph.java\n import com.google.common.base.Predicates;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n+import com.google.javascript.jscomp.graph.Graph.GraphEdge;\n \n import java.util.Collection;\n import java.util.Collections;\n   }\n \n   @Override\n+  public GraphEdge<N, E> getFirstEdge(N n1, N n2) {\n+    DiGraphNode<N, E> dNode1 = getNodeOrFail(n1);\n+    DiGraphNode<N, E> dNode2 = getNodeOrFail(n2);\n+    for (DiGraphEdge<N, E> outEdge : dNode1.getOutEdges()) {\n+      if (outEdge.getDestination() == dNode2) {\n+        return outEdge;\n+      }\n+    }\n+    for (DiGraphEdge<N, E> outEdge : dNode2.getOutEdges()) {\n+      if (outEdge.getDestination() == dNode1) {\n+        return outEdge;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  @Override\n   public GraphNode<N, E> createNode(N value) {\n     return createDirectedGraphNode(value);\n   }\n--- a/src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java\n+++ b/src/com/google/javascript/jscomp/graph/LinkedUndirectedGraph.java\n import com.google.common.base.Predicates;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n+import com.google.javascript.jscomp.graph.Graph.GraphEdge;\n \n import java.util.Collection;\n import java.util.Collections;\n   }\n \n   @Override\n+  public GraphEdge<N, E> getFirstEdge(N n1, N n2) {\n+    UndiGraphNode<N, E> dNode1 = getNodeOrFail(n1);\n+    UndiGraphNode<N, E> dNode2 = getNodeOrFail(n2);\n+    for (UndiGraphEdge<N, E> outEdge : dNode1.getNeighborEdges()) {\n+      if (outEdge.getNodeA() == dNode2 || outEdge.getNodeB() == dNode2) {\n+        return outEdge;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  @Override\n   public GraphNode<N, E> getNode(N value) {\n     return getUndirectedGraphNode(value);\n   }\n--- a/test/com/google/javascript/jscomp/graph/GraphTest.java\n+++ b/test/com/google/javascript/jscomp/graph/GraphTest.java\n     assertFalse(graph.isConnected(\"a\", \"b\"));\n   }\n \n+  public void testDirectedGetFirstEdge() {\n+    DiGraph<String, String> graph =\n+      LinkedDirectedGraph.create();\n+    graph.createNode(\"a\");\n+    graph.createNode(\"b\");\n+    graph.createNode(\"c\");\n+    graph.connect(\"a\", \"-\", \"b\");\n+    assertEquals(graph.getFirstEdge(\"a\", \"b\").getValue(), \"-\");\n+    assertEquals(graph.getFirstEdge(\"b\", \"a\").getValue(), \"-\");\n+    assertNull(graph.getFirstEdge(\"a\", \"c\"));\n+  }\n+\n+  public void testUndirectedGetFirstEdge() {\n+    UndiGraph<String, String> graph =\n+      LinkedUndirectedGraph.create();\n+    graph.createNode(\"a\");\n+    graph.createNode(\"b\");\n+    graph.createNode(\"c\");\n+    graph.connect(\"a\", \"-\", \"b\");\n+    assertEquals(graph.getFirstEdge(\"a\", \"b\").getValue(), \"-\");\n+    assertEquals(graph.getFirstEdge(\"b\", \"a\").getValue(), \"-\");\n+    assertNull(graph.getFirstEdge(\"a\", \"c\"));\n+  }\n+\n   public void testNodeAnnotations() {\n     Graph<String, String> graph = LinkedUndirectedGraph.create();\n     GraphNode<String, String> a = graph.createNode(\"a\");", "timestamp": 1300814190, "metainfo": ""}