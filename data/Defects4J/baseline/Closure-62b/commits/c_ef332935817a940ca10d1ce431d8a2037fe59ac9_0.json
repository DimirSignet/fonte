{"sha": "ef332935817a940ca10d1ce431d8a2037fe59ac9", "log": "Assume \"toString\" and \"valueOf\" are side-effect free and \"toString\" returns a string.  R=nicksantos DELTA=39  (36 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=17   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n   private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =\n       ImmutableSet.of(\n           \"Object\", \"Array\", \"String\", \"Number\", \"Boolean\", \"RegExp\", \"Error\");\n+  private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =\n+      ImmutableSet.of(\"toString\", \"valueOf\");\n   private static final Set<String> REGEXP_METHODS =\n       ImmutableSet.of(\"test\", \"exec\");\n   private static final Set<String> STRING_REGEXP_METHODS =\n         return false;\n       }\n     } else if (nameNode.getType() == Token.GETPROP) {\n+      if (callNode.hasOneChild()\n+          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n+                nameNode.getLastChild().getString())) {\n+        return false;\n+      }\n+\n       if (callNode.isOnlyModifiesThisCall()\n           && evaluatesToLocalValue(nameNode.getFirstChild())) {\n         return false;\n         // There is no information about the locality of object properties.\n         return locals.apply(value);\n       case Token.CALL:\n-        return callHasLocalResult(value) || locals.apply(value);\n+        return callHasLocalResult(value)\n+            || isToStringMethodCall(value)\n+            || locals.apply(value);\n       case Token.NEW:\n         return true;\n       case Token.FUNCTION:\n     return getNthSibling(\n       call.getFirstChild().getNext(), index);\n   }\n+\n+  private static boolean isToStringMethodCall(Node call) {\n+    Node getNode = call.getFirstChild();\n+    if (isGet(getNode)) {\n+      Node propNode = getNode.getLastChild();\n+      return isString(propNode) && \"toString\".equals(propNode.getString());\n+    }\n+    return false;\n+  }\n }\n--- a/test/com/google/javascript/jscomp/NodeUtilTest.java\n+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java\n     assertSideEffect(false, \"({}||[]).foo = 2;\");\n     assertSideEffect(false, \"(true ? {} : []).foo = 2;\");\n     assertSideEffect(false, \"({},[]).foo = 2;\");\n+  }\n+\n+  public void testObjectMethodSideEffects() {\n+    // \"toString\" and \"valueOf\" are assumed to be side-effect free\n+    assertSideEffect(false, \"o.toString()\");\n+    assertSideEffect(false, \"o.valueOf()\");\n+\n+    // other methods depend on the extern definitions\n+    assertSideEffect(true, \"o.watch()\");\n   }\n \n   public void testRegExpSideEffect() {\n \n     assertTrue(testLocalValue(\"void x\"));\n     assertTrue(testLocalValue(\"void 0\"));\n-    \n+\n     assertFalse(testLocalValue(\"{}.x\"));\n+\n+    assertTrue(testLocalValue(\"{}.toString()\"));\n+    assertTrue(testLocalValue(\"o.toString()\"));\n+\n+    assertFalse(testLocalValue(\"o.valueOf()\"));\n   }\n \n   private boolean testLocalValue(String js) {\n \n     return NodeUtil.evaluatesToLocalValue(value);\n   }\n-  \n+\n   public void testValidDefine() {\n     assertTrue(testValidDefineValue(\"1\"));\n     assertTrue(testValidDefineValue(\"-3\"));\n     assertTrue(testValidDefineValue(\"true\"));\n     assertTrue(testValidDefineValue(\"false\"));\n     assertTrue(testValidDefineValue(\"'foo'\"));\n-    \n+\n     assertFalse(testValidDefineValue(\"x\"));\n     assertFalse(testValidDefineValue(\"null\"));\n     assertFalse(testValidDefineValue(\"undefined\"));\n     assertFalse(testValidDefineValue(\"NaN\"));\n-    \n+\n     assertTrue(testValidDefineValue(\"!true\"));\n     assertTrue(testValidDefineValue(\"-true\"));\n     assertTrue(testValidDefineValue(\"1 & 8\"));\n \n     assertFalse(testValidDefineValue(\"1 & foo\"));\n   }\n-  \n+\n   private boolean testValidDefineValue(String js) {\n     Node script = parse(\"var test = \" + js +\";\");\n     Node var = script.getFirstChild();\n     Node value = name.getFirstChild();\n \n     ImmutableSet<String> defines = ImmutableSet.of();\n-    return NodeUtil.isValidDefineValue(value, defines);   \n+    return NodeUtil.isValidDefineValue(value, defines);\n   }\n }", "timestamp": 1291066967, "metainfo": ""}