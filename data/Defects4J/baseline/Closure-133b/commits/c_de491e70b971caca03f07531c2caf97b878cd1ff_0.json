{"sha": "de491e70b971caca03f07531c2caf97b878cd1ff", "log": "validation for @this annotation. looks about the same as the @extends validation. Fixes issue 268  R=johnlenz DELTA=63  (55 added, 6 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=804007   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n \n import static com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE;\n+import static com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE;\n \n       \"JSC_TEMPLATE_TYPE_EXPECTED\",\n       \"The template type must be a parameter type\");\n \n+  static final DiagnosticType THIS_TYPE_NON_OBJECT =\n+      DiagnosticType.warning(\n+          \"JSC_THIS_TYPE_NON_OBJECT\",\n+          \"@this type of a function must be an object\\n\" +\n+          \"Actual type: {0}\");\n+\n   private class ExtendedTypeValidator implements Predicate<JSType> {\n     @Override\n     public boolean apply(JSType type) {\n         return true;\n       }\n       return false;\n+    }\n+  };\n+\n+  private class ThisTypeValidator implements Predicate<JSType> {\n+    @Override\n+    public boolean apply(JSType type) {\n+      // TODO(user): Doing an instanceof check here is too\n+      // restrictive as (Date,Error) is, for instance, an object type\n+      // even though its implementation is a UnionType. Would need to\n+      // create interfaces JSType, ObjectType, FunctionType etc and have\n+      // separate implementation instead of the class hierarchy, so that\n+      // union types can also be object types, etc.\n+      if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE))) {\n+        reportWarning(THIS_TYPE_NON_OBJECT, type.toString());\n+        return false;\n+      }\n+      return true;\n     }\n   };\n \n           info.getThisType().evaluate(scope, typeRegistry));\n     }\n     if (maybeThisType != null) {\n-      // TODO(user): Doing an instanceof check here is too\n-      // restrictive as (Date,Error) is, for instance, an object type\n-      // even though its implementation is a UnionType. Would need to\n-      // create interfaces JSType, ObjectType, FunctionType etc and have\n-      // separate implementation instead of the class hierarchy, so that\n-      // union types can also be object types, etc.\n       thisType = maybeThisType;\n+      thisType.setValidator(new ThisTypeValidator());\n     } else if (owner != null &&\n                (info == null || !info.hasType())) {\n       // If the function is of the form:\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n       WRONG_ARGUMENT_COUNT,\n       ILLEGAL_IMPLICIT_CAST,\n       TypedScopeCreator.UNKNOWN_LENDS,\n-      TypedScopeCreator.LENDS_ON_NON_OBJECT);\n+      TypedScopeCreator.LENDS_ON_NON_OBJECT,\n+      FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);\n \n   private final AbstractCompiler compiler;\n   private final TypeValidator validator;\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n \n     call = (ArrowType) safeResolve(call, t, scope);\n     prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);\n-    typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);\n+\n+    // Warning about typeOfThis if it doesn't resolve to an ObjectType\n+    // is handled further upstream.\n+    // TODO(nicksantos): Handle this correctly if we have a UnionType.\n+    JSType maybeTypeOfThis = safeResolve(typeOfThis, t, scope);\n+    if (maybeTypeOfThis instanceof ObjectType) {\n+      typeOfThis = (ObjectType) maybeTypeOfThis;\n+    }\n \n     boolean changed = false;\n     ImmutableList.Builder<ObjectType> resolvedInterfaces =\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"/** @enum {string} */ var YourEnum = {FOO: 'x'};\" +\n         \"/** @enum {string} */ var MyEnum = YourEnum;\",\n         \"element BAR does not exist on this enum\");\n+  }\n+\n+  public void testBackwardsTypedefUse1() throws Exception {\n+    testTypes(\n+        \"/** @this {MyTypedef} */ function f() {}\" +\n+        \"/** @typedef {string} */ var MyTypedef;\",\n+        \"@this type of a function must be an object\\n\" +\n+        \"Actual type: string\");\n+  }\n+\n+  public void testBackwardsTypedefUse2() throws Exception {\n+    testTypes(\n+        \"/** @this {MyTypedef} */ function f() {}\" +\n+        \"/** @typedef {!(Date|Array)} */ var MyTypedef;\");\n+  }\n+\n+  public void testBackwardsTypedefUse3() throws Exception {\n+    testTypes(\n+        \"/** @this {MyTypedef} */ function f() {}\" +\n+        \"/** @typedef {(Date|Array)} */ var MyTypedef;\",\n+        \"@this type of a function must be an object\\n\" +\n+        \"Actual type: (Array|Date|null)\");\n   }\n \n   public void testBackwardsConstructor1() throws Exception {", "timestamp": 1288231411, "metainfo": ""}