{"sha": "51b1e6ea99b59e4e7fb593679502f567a7364379", "log": "Bugfix for object literals that are structs or dicts.  R=nicksantos   Revision created by MOE tool push_codebase. MOE_MIGRATION=6027   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n       DiagnosticType.warning(\"JSC_ILLEGAL_PROPERTY_CREATION\",\n                              \"Cannot add a property to a struct instance \" +\n                              \"after it is constructed.\");\n+\n+  static final DiagnosticType ILLEGAL_OBJLIT_KEY =\n+      DiagnosticType.warning(\n+          \"ILLEGAL_OBJLIT_KEY\",\n+          \"Illegal key, the object literal is a {0}\");\n \n   static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n       DETERMINISTIC_TEST,\n       EXPECTED_THIS_TYPE,\n       IN_USED_WITH_STRUCT,\n       ILLEGAL_PROPERTY_CREATION,\n+      ILLEGAL_OBJLIT_KEY,\n       RhinoErrorReporter.TYPE_PARSE_ERROR,\n       TypedScopeCreator.UNKNOWN_LENDS,\n       TypedScopeCreator.LENDS_ON_NON_OBJECT,\n           }\n         }\n         if (n.isObjectLit()) {\n+          JSType typ = getJSType(n);\n           for (Node key : n.children()) {\n-            visitObjLitKey(t, key, n);\n+            visitObjLitKey(t, key, n, typ);\n           }\n         }\n         break;\n    * @param t the traversal\n    * @param key the assign node\n    */\n-  private void visitObjLitKey(NodeTraversal t, Node key, Node objlit) {\n+  private void visitObjLitKey(\n+      NodeTraversal t, Node key, Node objlit, JSType litType) {\n     // Do not validate object lit value types in externs. We don't really care,\n     // and it makes it easier to generate externs.\n     if (objlit.isFromExterns()) {\n       ensureTyped(t, key);\n       return;\n+    }\n+\n+    // Structs must have unquoted keys and dicts must have quoted keys\n+    if (litType.isStruct() && key.isQuotedString()) {\n+      report(t, key, ILLEGAL_OBJLIT_KEY, \"struct\");\n+    } else if (litType.isDict() && !key.isQuotedString()) {\n+      report(t, key, ILLEGAL_OBJLIT_KEY, \"dict\");\n     }\n \n     // TODO(johnlenz): Validate get and set function declarations are valid\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"required: function (): number\");\n   }\n \n+  public void testObjLitDef6() throws Exception {\n+    testTypes(\"var lit = /** @struct */ { 'x': 1 };\",\n+        \"Illegal key, the object literal is a struct\");\n+  }\n+\n+  public void testObjLitDef7() throws Exception {\n+    testTypes(\"var lit = /** @dict */ { x: 1 };\",\n+        \"Illegal key, the object literal is a dict\");\n+  }\n \n   public void testInstanceOfReduction1() throws Exception {\n     testTypes(\"/** @constructor */ var T = function() {};\\n\" +\n   }\n \n   public void testGetpropDict7() throws Exception {\n-    testTypes(\"(/** @dict */ {x: 123}).x = 321;\",\n+    testTypes(\"(/** @dict */ {'x': 123}).x = 321;\",\n               \"Cannot do '.' access on a dict\");\n   }\n ", "timestamp": 1355942620, "metainfo": ""}