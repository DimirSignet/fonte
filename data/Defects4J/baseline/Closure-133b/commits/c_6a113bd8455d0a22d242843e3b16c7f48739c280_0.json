{"sha": "6a113bd8455d0a22d242843e3b16c7f48739c280", "log": "Use better APIs for Rhino, to make upgrading easier.  R=johnlenz DELTA=19  (1 added, 9 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3764   ", "commit": "\n--- a/lib/rhino/src/mozilla/js/rhino/src/org/mozilla/javascript/Token.java\n+++ b/lib/rhino/src/mozilla/js/rhino/src/org/mozilla/javascript/Token.java\n public class Token\n {\n     public static enum CommentType {\n-        LINE, BLOCK, JSDOC, HTML\n+        LINE, BLOCK_COMMENT, JSDOC, HTML\n     }\n \n     // debug flags\n--- a/lib/rhino/src/mozilla/js/rhino/src/org/mozilla/javascript/TokenStream.java\n+++ b/lib/rhino/src/mozilla/js/rhino/src/org/mozilla/javascript/TokenStream.java\n                         lookForSlash = true;\n                         commentType = Token.CommentType.JSDOC;\n                     } else {\n-                        commentType = Token.CommentType.BLOCK;\n+                        commentType = Token.CommentType.BLOCK_COMMENT;\n                     }\n                     for (;;) {\n                         c = getChar();\n--- a/lib/rhino/src/mozilla/js/rhino/src/org/mozilla/javascript/ast/Comment.java\n+++ b/lib/rhino/src/mozilla/js/rhino/src/org/mozilla/javascript/ast/Comment.java\n \n     private String value;\n     private Token.CommentType commentType;\n-    private boolean parsed = false;\n \n     {\n         type = Token.COMMENT;\n     public void visit(NodeVisitor v) {\n         v.visit(this);\n     }\n-\n-    public boolean isParsed() {\n-        return parsed;\n-    }\n-\n-    public void setParsed(boolean parsed) {\n-        this.parsed = parsed;\n-    }\n }\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n           \"public\", \"static\", \"yield\");\n \n   private final Set<String> reservedKeywords;\n+  private final Set<Comment> parsedComments = Sets.newHashSet();\n \n   // @license text gets appended onto the fileLevelJsDocBuilder as found,\n   // and stored in JSDocInfo for placeholder node.\n     if (node.getComments() != null) {\n       for (Comment comment : node.getComments()) {\n         if (comment.getCommentType() == CommentType.JSDOC &&\n-            !comment.isParsed()) {\n+            !irFactory.parsedComments.contains(comment)) {\n           irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);\n-        } else if (comment.getCommentType() == CommentType.BLOCK) {\n+        } else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {\n           irFactory.handleBlockComment(comment);\n         }\n       }\n \n   private void handlePossibleFileOverviewJsDoc(Comment comment, Node irNode) {\n     JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);\n-    comment.setParsed(true);\n+    parsedComments.add(comment);\n     handlePossibleFileOverviewJsDoc(jsDocParser);\n   }\n \n     Comment comment = node.getJsDocNode();\n     if (comment != null) {\n       JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);\n-      comment.setParsed(true);\n+      parsedComments.add(comment);\n       if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {\n         return jsDocParser.retrieveAndResetParsedJSDocInfo();\n       }", "timestamp": 1321549972, "metainfo": ""}