{"sha": "02b68944372c37ff896034c803bdbce9460da893", "log": "Mix references from ReferenceCollector into the symbol table  R=acleung DELTA=29  (28 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2764   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     return (DefaultPassConfig) passes;\n   }\n \n-  SymbolTable buildKnownSymbolTable() {\n+  public SymbolTable buildKnownSymbolTable() {\n     SymbolTable symbolTable = new SymbolTable();\n \n     MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();\n     if (globalNamespace != null) {\n       symbolTable.addSymbolsFrom(globalNamespace);\n     }\n+\n+    ReferenceCollectingCallback refCollector =\n+        new ReferenceCollectingCallback(\n+            this, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);\n+    NodeTraversal.traverse(this, getRoot(), refCollector);\n+    symbolTable.addSymbolsFrom(refCollector);\n \n     return symbolTable;\n   }\n--- a/test/com/google/javascript/jscomp/SymbolTableTest.java\n+++ b/test/com/google/javascript/jscomp/SymbolTableTest.java\n     assertEquals(Token.ASSIGN, refs.get(1).getNode().getParent().getType());\n   }\n \n+  public void testLocalVarReferences() throws Exception {\n+    SymbolTable table = createSymbolTable(\n+        \"function f(x) { return x; }\");\n+    Symbol x = getLocalVar(table, \"x\");\n+    List<Reference> refs = Lists.newArrayList(table.getReferences(x));\n+\n+    assertEquals(2, refs.size());\n+    assertEquals(x.getDeclaration(), refs.get(0));\n+    assertEquals(Token.LP, refs.get(0).getNode().getParent().getType());\n+    assertEquals(Token.RETURN, refs.get(1).getNode().getParent().getType());\n+  }\n+\n   private Symbol getGlobalVar(SymbolTable table, String name) {\n     for (Symbol symbol : table.getAllSymbols()) {\n       if (symbol.getName().equals(name) &&\n           table.getScope(symbol).getParentScope() == null) {\n+        return symbol;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  private Symbol getLocalVar(SymbolTable table, String name) {\n+    for (Symbol symbol : table.getAllSymbols()) {\n+      if (symbol.getName().equals(name) &&\n+          table.getScope(symbol).getParentScope() != null) {\n         return symbol;\n       }\n     }", "timestamp": 1311803036, "metainfo": ""}