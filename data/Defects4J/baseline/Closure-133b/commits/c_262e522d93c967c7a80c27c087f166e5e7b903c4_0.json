{"sha": "262e522d93c967c7a80c27c087f166e5e7b903c4", "log": "add an @expose annotation  R=johnlenz DELTA=50  (50 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4350   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/Annotation.java\n+++ b/src/com/google/javascript/jscomp/parsing/Annotation.java\n   EXTENDS,\n   EXTERNS,\n   EXPORT,\n+  EXPOSE,\n   FILE_OVERVIEW,\n   HIDDEN,\n   IDGENERATOR,\n       put(\"desc\", Annotation.DESC).\n       put(\"enum\", Annotation.ENUM).\n       put(\"export\", Annotation.EXPORT).\n+      put(\"expose\", Annotation.EXPOSE).\n       put(\"extends\", Annotation.EXTENDS).\n       put(\"externs\", Annotation.EXTERNS).\n       put(\"fileoverview\", Annotation.FILE_OVERVIEW).\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n                 case EXPORT:\n                   if (!jsdocBuilder.recordExport()) {\n                     parser.addParserWarning(\"msg.jsdoc.export\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token = eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case EXPOSE:\n+                  if (!jsdocBuilder.recordExpose()) {\n+                    parser.addParserWarning(\"msg.jsdoc.expose\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token = eatTokensUntilEOL();\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n   private static final int MASK_CONSISTIDGEN  = 0x00040000;\n   // @idGenerator\n   private static final int MASK_IDGEN         = 0x00080000;\n+  private static final int MASK_EXPOSE        = 0x00100000; // @expose\n \n   // 3 bit type field stored in the top 3 bits of the most significant\n   // nibble.\n     setFlag(value, MASK_EXPORT);\n   }\n \n+  void setExpose(boolean value) {\n+    setFlag(value, MASK_EXPOSE);\n+  }\n+\n   void setNoShadow(boolean value) {\n     setFlag(value, MASK_NOSHADOW);\n   }\n    */\n   public boolean isExport() {\n     return getFlag(MASK_EXPORT);\n+  }\n+\n+  /**\n+   * Returns whether the {@code @expose} annotation is present on this\n+   * {@link JSDocInfo}.\n+   */\n+  public boolean isExpose() {\n+    return getFlag(MASK_EXPOSE);\n   }\n \n   /**\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n \n   /**\n    * Records that the {@link JSDocInfo} being built should have its\n+   * {@link JSDocInfo#isExpose()} flag set to {@code true}.\n+   */\n+  public boolean recordExpose() {\n+    if (!currentInfo.isExpose()) {\n+      currentInfo.setExpose(true);\n+      populated = true;\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  /**\n+   * Records that the {@link JSDocInfo} being built should have its\n    * {@link JSDocInfo#isNoShadow()} flag set to {@code true}.\n    */\n   public boolean recordNoShadow() {\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n \n   public void testParseExport2() throws Exception {\n     parse(\"@export\\n@export*/\", \"extra @export tag\");\n+  }\n+\n+  public void testParseExpose1() throws Exception {\n+    assertTrue(parse(\"@expose*/\").isExpose());\n+  }\n+\n+  public void testParseExpose2() throws Exception {\n+    parse(\"@expose\\n@expose*/\", \"extra @expose tag\");\n   }\n \n   public void testParseExterns1() throws Exception {", "timestamp": 1331338987, "metainfo": ""}