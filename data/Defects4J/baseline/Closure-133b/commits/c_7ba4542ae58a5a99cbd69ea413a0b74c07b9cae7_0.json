{"sha": "7ba4542ae58a5a99cbd69ea413a0b74c07b9cae7", "log": "Remove logic for checking for escaped characters in JS indentifiers (which was broken), checking for escaped characters is approriate in a raw token stream but not appropriate once those characters have been normalized.  R=nicksantos DELTA=60  (10 added, 39 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3953   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\n+++ b/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\n         if (NodeUtil.isObjectLitKey(n, parent) &&\n             NodeUtil.isValidPropertyName(n.getString())) {\n           n.putBooleanProp(Node.QUOTED_PROP, false);\n+          compiler.reportCodeChange();\n         }\n         break;\n \n--- a/src/com/google/javascript/rhino/TokenStream.java\n+++ b/src/com/google/javascript/rhino/TokenStream.java\n     }\n \n     public static boolean isJSIdentifier(String s) {\n-        int length = s.length();\n-\n-        if (length == 0 || !Character.isJavaIdentifierStart(s.charAt(0)))\n-            return false;\n-\n-        for (int i=1; i<length; i++) {\n-            char c = s.charAt(i);\n-            if (!Character.isJavaIdentifierPart(c)) {\n-                if (c == '\\\\') {\n-                    if (! ((i + 5) < length)\n-                        && (s.charAt(i + 1) == 'u')\n-                        && 0 <= xDigitToInt(s.charAt(i + 2), 0)\n-                        && 0 <= xDigitToInt(s.charAt(i + 3), 0)\n-                        && 0 <= xDigitToInt(s.charAt(i + 4), 0)\n-                        && 0 <= xDigitToInt(s.charAt(i + 5), 0)) {\n-                        return true;\n-                     }\n-                }\n-\n-                return false;\n-            }\n+      int length = s.length();\n+\n+      if (length == 0 || !Character.isJavaIdentifierStart(s.charAt(0)))\n+        return false;\n+\n+      for (int i = 1; i < length; i++) {\n+        if (!Character.isJavaIdentifierPart(s.charAt(i))) {\n+          return false;\n         }\n-\n-        return true;\n-    }\n-\n-    /**\n-     * If character <tt>c</tt> is a hexadecimal digit, return\n-     * <tt>accumulator</tt> * 16 plus corresponding\n-     * number. Otherise return -1.\n-     */\n-    private static int xDigitToInt(int c, int accumulator) {\n-        check: {\n-            // Use 0..9 < A..Z < a..z\n-            if (c <= '9') {\n-                c -= '0';\n-                if (0 <= c) { break check; }\n-            } else if (c <= 'F') {\n-                if ('A' <= c) {\n-                    c -= ('A' - 10);\n-                    break check;\n-                }\n-            } else if (c <= 'f') {\n-                if ('a' <= c) {\n-                    c -= ('a' - 10);\n-                    break check;\n-                }\n-            }\n-            return -1;\n-        }\n-        return (accumulator << 4) | c;\n+      }\n+\n+      return true;\n     }\n }\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n     assertPrint(\"'\\\\u000B' == '\\\\v'\", \"\\\"\\\\x0B\\\"==\\\"\\\\v\\\"\");\n     assertPrint(\"'\\\\x0B' == '\\\\v'\", \"\\\"\\\\x0B\\\"==\\\"\\\\v\\\"\");\n   }\n+\n+  public void testIssue5746867() {\n+    assertPrint(\"var a = { '$\\\\\\\\' : 5 };\", \"var a={\\\"$\\\\\\\\\\\":5}\");\n+  }\n }\n--- a/test/com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java\n     testSame(\"({'1.0':0})\");\n     testSame(\"({'\\u1d17A':0})\");\n   }\n+\n+  public void test5746867() {\n+    testSame(\"var a = { '$\\\\\\\\' : 5 };\");\n+    testSame(\"var a = { 'x\\\\\\\\u0041$\\\\\\\\' : 5 };\");\n+  }\n }", "timestamp": 1323722797, "metainfo": ""}