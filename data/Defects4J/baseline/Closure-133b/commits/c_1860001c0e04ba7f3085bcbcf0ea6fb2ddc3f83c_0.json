{"sha": "1860001c0e04ba7f3085bcbcf0ea6fb2ddc3f83c", "log": "Fix bleeding-function shadowing bug  R=johnlenz DELTA=40  (36 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=477   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RenameVars.java\n+++ b/src/com/google/javascript/jscomp/RenameVars.java\n       }\n \n       // Is this local or Global?\n+      // Bleeding functions should be treated as part of their outer\n+      // scope, because IE has bugs in how it handles bleeding\n+      // functions.\n       Scope.Var var = t.getScope().getVar(name);\n-      boolean local = (var != null) && var.isLocal();\n+      boolean local = (var != null) && var.isLocal() &&\n+          (!var.scope.getParent().isGlobal() ||\n+           !var.isBleedingFunction());\n \n       // Are we renaming global variables?\n       if (!local && localRenamingOnly) {\n--- a/src/com/google/javascript/jscomp/Scope.java\n+++ b/src/com/google/javascript/jscomp/Scope.java\n     }\n \n     /**\n+     * Whether this is a bleeding function (an anonymous named function\n+     * that bleeds into the inner scope.\n+     */\n+    public boolean isBleedingFunction() {\n+      return NodeUtil.isFunctionExpression(getParentNode());\n+    }\n+\n+    /**\n      * Gets the scope where this variable is declared.\n      */\n     Scope getScope() {\n--- a/test/com/google/javascript/jscomp/RenameVarsTest.java\n+++ b/test/com/google/javascript/jscomp/RenameVarsTest.java\n     test(\"var walk = function walk(node, aFunction) {\" +\n          \"  walk(node, aFunction);\" +\n          \"};\",\n-         \"var d = function a(b, c) {\" +\n+         \"var a = function a(b, c) {\" +\n          \"  a(b, c);\" +\n          \"};\");\n \n     test(\"var walk = function walk(node, aFunction) {\" +\n          \"  walk(node, aFunction);\" +\n          \"};\",\n-         \"var walk = function a(b, c) {\" +\n-         \"  a(b, c);\" +\n+         \"var walk = function walk(a, b) {\" +\n+         \"  walk(a, b);\" +\n          \"};\");\n   }\n \n          \"function a(b, c) { (function(d, e) {}) }\");\n     test(\"function f1(v1, v2) { function f2(v3, v4) {} }\",\n          \"function a(b, c) { function d(e, f) {} }\");\n+  }\n+\n+  public void testBleedingRecursiveFunctions1() {\n+    // On IE, bleeding functions will interfere with each other if\n+    // they are in the same scope. In the below example, we want to be\n+    // sure that a and b get separate names.\n+    test(\"var x = function a(x) { return x ? 1 : a(1); };\" +\n+         \"var y = function b(x) { return x ? 2 : b(2); };\",\n+         \"var c = function b(a) { return a ? 1 : b(1); };\" +\n+         \"var e = function d(a) { return a ? 2 : d(2); };\");\n+  }\n+\n+  public void testBleedingRecursiveFunctions2() {\n+    // TODO(nicksantos): Ensure a and b get separate names. Will fix this\n+    // in the CL that handles 2nd-level scopes.\n+    test(\"function f() {\" +\n+         \"  var x = function a(x) { return x ? 1 : a(1); };\" +\n+         \"  var y = function b(x) { return x ? 2 : b(2); };\" +\n+         \"}\",\n+         \"function c() {\" +\n+         \"  var d = function a(b) { return b ? 1 : a(1); };\" +\n+         \"  var e = function a(b) { return b ? 2 : a(2); };\" +\n+         \"}\");\n   }\n \n   public void testRenameWithExterns1() {", "timestamp": 1297210625, "metainfo": ""}