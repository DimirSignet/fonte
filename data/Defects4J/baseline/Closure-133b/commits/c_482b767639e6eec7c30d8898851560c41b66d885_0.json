{"sha": "482b767639e6eec7c30d8898851560c41b66d885", "log": "fix a bogus 'if' branch. I have no idea what this was doing. Fixes issue 810  R=dimvar DELTA=76  (37 added, 22 deleted, 17 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5495   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n     Node objNode = n.getFirstChild();\n     JSType childType = getJSType(objNode);\n \n-    // Do this first b/c we want to check even when the getprop is an lvalue\n     if (childType.isDict()) {\n       report(t, property, TypeValidator.ILLEGAL_PROPERTY_ACCESS, \"'.'\", \"dict\");\n-    } else if (n.getJSType() != null && parent.isAssign()) {\n-      // GETPROP nodes have an assigned type on their node by the scope creator\n-      // if this is an enum declaration. The only namespaced enum declarations\n-      // that we allow are of the form object.name = ...;\n-      return;\n     } else if (validator.expectNotNullOrUndefined(t, n, childType,\n         \"No properties on this expression\", getNativeType(OBJECT_TYPE))) {\n       checkPropertyAccess(childType, property.getString(), t, n);\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n   }\n \n   public void testAnonymousType1() throws Exception {\n-    testTypes(\"function f() {}\" +\n+    testTypes(\"function f() { return {}; }\" +\n         \"/** @constructor */\\n\" +\n         \"f().bar = function() {};\");\n   }\n \n   public void testAnonymousType2() throws Exception {\n-    testTypes(\"function f() {}\" +\n+    testTypes(\"function f() { return {}; }\" +\n         \"/** @interface */\\n\" +\n         \"f().bar = function() {};\");\n   }\n \n   public void testAnonymousType3() throws Exception {\n-    testTypes(\"function f() {}\" +\n+    testTypes(\"function f() { return {}; }\" +\n         \"/** @enum */\\n\" +\n         \"f().bar = {FOO: 1};\");\n   }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"Foo.prototype.bar = function() {\" +\n         \"  if (this.x == null) { this.initX(); alert(this.x.foo); }\" +\n         \"};\");\n+  }\n+\n+  public void testGetprop4() throws Exception {\n+    testTypes(\"var x = null; x.prop = 3;\",\n+        \"No properties on this expression\\n\" +\n+        \"found   : null\\n\" +\n+        \"required: Object\");\n   }\n \n   public void testGetpropDict1() throws Exception {\n         \"Property unknownProp never defined on Type\");\n   }\n \n+  public void testIssue810() throws Exception {\n+    testTypes(\n+        \"/** @constructor */\" +\n+        \"var Type = function () {\" +\n+        \"};\" +\n+        \"Type.prototype.doIt = function(obj) {\" +\n+        \"  this.prop = obj.unknownProp;\" +\n+        \"};\",\n+        \"Property unknownProp never defined on obj\");\n+  }\n+\n   /**\n    * Tests that the || operator is type checked correctly, that is of\n    * the type of the first argument or of the second argument. See\n   }\n \n   public void testAnonymousType1() throws Exception {\n-    testTypes(\"function f() {}\" +\n+    testTypes(\"function f() { return {}; }\" +\n         \"/** @constructor */\\n\" +\n         \"f().bar = function() {};\");\n   }\n \n   public void testAnonymousType2() throws Exception {\n-    testTypes(\"function f() {}\" +\n+    testTypes(\"function f() { return {}; }\" +\n         \"/** @interface */\\n\" +\n         \"f().bar = function() {};\");\n   }\n \n   public void testAnonymousType3() throws Exception {\n-    testTypes(\"function f() {}\" +\n+    testTypes(\"function f() { return {}; }\" +\n         \"/** @enum */\\n\" +\n         \"f().bar = {FOO: 1};\");\n   }", "timestamp": 1347488163, "metainfo": ""}