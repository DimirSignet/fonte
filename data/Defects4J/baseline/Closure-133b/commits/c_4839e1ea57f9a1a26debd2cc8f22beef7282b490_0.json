{"sha": "4839e1ea57f9a1a26debd2cc8f22beef7282b490", "log": "Don't let invalid LHS assignments to slip through. Fixes issue 215. Fixes issue 214.  R=nicksantos DELTA=98  (82 added, 1 deleted, 15 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=248   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n \n     @Override\n     Node processAssignment(Assignment assignmentNode) {\n-      return processInfixExpression(assignmentNode);\n+      Node assign = processInfixExpression(assignmentNode);\n+      Node target = assign.getFirstChild();\n+      if (!validAssignmentTarget(target)) {\n+        errorReporter.error(\n+          \"invalid assignment target\",\n+          sourceName,\n+          target.getLineno(), \"\", 0);\n+      }\n+      return assign;\n     }\n \n     @Override\n         operand.setDouble(-operand.getDouble());\n         return operand;\n       } else {\n+        if (type == Token.INC || type == Token.DEC) {\n+          if (!validAssignmentTarget(operand)) {\n+            String msg = (type == Token.INC)\n+                ? \"invalid increment target\"\n+                : \"invalid decrement target\";\n+            errorReporter.error(\n+              msg,\n+              sourceName,\n+              operand.getLineno(), \"\", 0);\n+          }\n+        }\n+\n         Node node = newNode(type, operand);\n         if (exprNode.isPostfix()) {\n           node.putBooleanProp(Node.INCRDECR_PROP, true);\n         }\n         return node;\n       }\n+    }\n+\n+    private boolean validAssignmentTarget(Node target) {\n+      switch (target.getType()) {\n+        case Token.NAME:\n+        case Token.GETPROP:\n+        case Token.GETELEM:\n+          return true;\n+      }\n+      return false;\n     }\n \n     @Override\n--- a/test/com/google/javascript/jscomp/CheckGlobalThisTest.java\n+++ b/test/com/google/javascript/jscomp/CheckGlobalThisTest.java\n   }\n \n   public void testStaticFunction6() {\n-    testSame(\"function a() { return function() { this = 8; } }\");\n+    testSame(\"function a() { return function() { this.x = 8; } }\");\n   }\n \n   public void testStaticFunction7() {\n-    testSame(\"var a = function() { return function() { this = 8; } }\");\n+    testSame(\"var a = function() { return function() { this.x = 8; } }\");\n   }\n \n   public void testStaticFunction8() {\n--- a/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java\n+++ b/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java\n     inFunction(\"var x; if(x=1==4&&1){}\", \"var x; if(1==4&&1) {}\");\n     inFunction(\"var x; if(0&&(x=1)){}\", \"var x; if(0&&1){}\");\n     inFunction(\"var x; if((x=2)&&(x=1)){}\", \"var x; if(2&&1){}\");\n-    inFunction(\"var x; x=2; if(0&&x=1){}; x\");\n+    inFunction(\"var x; x=2; if(0&&(x=1)){}; x\");\n \n     inFunction(\"var x,y; if( (x=1)+(y=2) > 3){}\",\n         \"var x,y; if( 1+2 > 3){}\");\n--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n   }\n \n   public void testMultiDefinitionsInSameCfgNode() {\n-    noInline(\"var x; x = 1 || x = 2; print(x)\");\n-    noInline(\"var x; x = 1 && x = 2; print(x)\");\n+    noInline(\"var x; (x = 1) || (x = 2); print(x)\");\n+    noInline(\"var x; x = (1 || (x = 2)); print(x)\");\n+    noInline(\"var x;(x = 1) && (x = 2); print(x)\");\n+    noInline(\"var x;x = (1 && (x = 2)); print(x)\");\n     noInline(\"var x; x = 1 , x = 2; print(x)\");\n   }\n \n     inline(\"var x = 1; x = (x = x + 1)\", \"var x; x = (x = 1 + 1)\");\n \n     noInline(\"var x = 1; x = (x = (x = 10) + x)\");\n-    noInline(\"var x = 1; x = (f(x) = (x = 10) + x);\");\n+    noInline(\"var x = 1; x = (f(x) + (x = 10) + x);\");\n     noInline(\"var x = 1; x=-1,foo(x)\");\n     noInline(\"var x = 1; x-=1,foo(x)\");\n   }\n--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n   }\n \n   public void testComplexInlineInExpresssions3() {\n-    test(\"function f(){a()}c=f()=z\",\n+    test(\"function f(){a()}c=z=f()\",\n         \"{var JSCompiler_inline_result$$0;a();}\" +\n-        \"c=JSCompiler_inline_result$$0=z\");\n+        \"c=z=JSCompiler_inline_result$$0\");\n   }\n \n   public void testComplexInlineInExpresssions4() {\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n   }\n \n   public void testTypeCheck2() throws Exception {\n-    testTypes(\"/**@return {void}*/function foo(){ foo()--; }\",\n+    testTypes(\"/**@return {void}*/function foo(){ var x=foo(); x--; }\",\n         \"increment/decrement\\n\" +\n         \"found   : undefined\\n\" +\n         \"required: number\");\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n   }\n \n   public void testTypeCheck2() throws Exception {\n-    testTypes(\"/**@return {void}*/function foo(){ foo()--; }\",\n+    testTypes(\"/**@return {void}*/function foo(){ var x=foo(); x--; }\",\n         \"increment/decrement\\n\" +\n         \"found   : undefined\\n\" +\n         \"required: number\");\n--- a/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n     assertNodePosition(2, 0, bName);\n     assertNodePosition(3, 8, fnNode);\n     assertNodePosition(3, 8, fnName);\n-   }\n+  }\n+\n+  final String INVALID_ASSIGNMENT_TARGET = \"invalid assignment target\";\n+  final String INVALID_INCREMENT_TARGET = \"invalid increment target\";\n+  final String INVALID_DECREMENT_TARGET = \"invalid decrement target\";\n+\n+  final String INVALID_INC_OPERAND = \"Invalid increment operand\";\n+  final String INVALID_DEC_OPERAND = \"Invalid decrement operand\";\n+\n+  public void testAssignmentValidation() {\n+    testNoParseError(\"x=1\");\n+    testNoParseError(\"x.y=1\");\n+    testNoParseError(\"f().y=1\");\n+    testParseError(\"(x||y)=1\", INVALID_ASSIGNMENT_TARGET);\n+    testParseError(\"(x?y:z)=1\", INVALID_ASSIGNMENT_TARGET);\n+    testParseError(\"f()=1\", INVALID_ASSIGNMENT_TARGET);\n+\n+    testNoParseError(\"x+=1\");\n+    testNoParseError(\"x.y+=1\");\n+    testNoParseError(\"f().y+=1\");\n+    testParseError(\"(x||y)+=1\", INVALID_ASSIGNMENT_TARGET);\n+    testParseError(\"(x?y:z)+=1\", INVALID_ASSIGNMENT_TARGET);\n+    testParseError(\"f()+=1\", INVALID_ASSIGNMENT_TARGET);\n+\n+    testParseError(\"f()++\", INVALID_INCREMENT_TARGET);\n+    testParseError(\"f()--\", INVALID_DECREMENT_TARGET);\n+    testParseError(\"++f()\", INVALID_INCREMENT_TARGET);\n+    testParseError(\"--f()\", INVALID_DECREMENT_TARGET);\n+  }\n+\n+  private void testNoParseError(String string) {\n+    testParseError(string, (String)null);\n+  }\n+  \n+  private void testParseError(String string, String error) {\n+    testParseError(string, error == null ? null : new String[] { error });\n+  }\n+  \n+  private void testParseError(String string, String[] errors) {\n+    Node root = newParse(string, new TestErrorReporter(errors, null));\n+    assertTrue(\"unexpected warnings reported\",\n+        errorReporter.hasEncounteredAllWarnings());\n+    assertTrue(\"expected error were not reported\",\n+        errorReporter.hasEncounteredAllErrors());\n+  }\n \n   private void assertMarkerPosition(Node n, int lineno, int charno) {\n     int count = 0;\n   }\n \n   private Node newParse(String string) {\n+    return newParse(string, new TestErrorReporter(null, null));\n+  }\n+\n+  private Node newParse(String string, TestErrorReporter errorReporter) {\n     CompilerEnvirons environment = new CompilerEnvirons();\n \n     environment.setRecordingComments(true);\n     AstRoot script = p.parse(string, null, 0);\n \n     Config config = ParserRunner.createConfig(true, es5mode);\n-    Node root = IRFactory.transformTree(script, string, config,\n-        new TestErrorReporter(null, null));\n+    Node root = IRFactory.transformTree(script, string, config, errorReporter);\n \n     return root;\n   }\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n   }\n \n   public void testDestructuringAssignForbidden4() {\n-    parseError(\"[x, y] = foo();\", \"destructuring assignment forbidden\");\n+    parseError(\"[x, y] = foo();\",\n+        \"destructuring assignment forbidden\",\n+        \"invalid assignment target\");\n   }\n \n   public void testLetForbidden() {", "timestamp": 1294774135, "metainfo": ""}