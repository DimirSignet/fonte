{"sha": "c9262165386f6c4fa5713f618bb4083c91710420", "log": "When a parameter is inferred, it's OK to set it to something else.  R=johnlenz DELTA=27  (24 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5334   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n             iArgumentType.isFunctionType() &&\n             iArgument.getJSDocInfo() == null) {\n           iArgument.setJSType(restrictedParameter);\n+          iArgument.putBooleanProp(Node.INFERRED_FUNCTION, true);\n         }\n       }\n       i++;\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n         newVar = validator.expectUndeclaredVariable(\n             sourceName, input, n, parent, oldVar, variableName, type);\n       } else {\n-        if (!inferred) {\n+        if (type != null) {\n           setDeferredType(n, type);\n         }\n \n     private void declareArguments(Node functionNode) {\n       Node astParameters = functionNode.getFirstChild().getNext();\n       Node body = astParameters.getNext();\n+      boolean isFnTypeInferred = functionNode.getBooleanProp(\n+          Node.INFERRED_FUNCTION);\n       FunctionType functionType =\n           JSType.toMaybeFunctionType(functionNode.getJSType());\n       if (functionType != null) {\n           for (Node astParameter : astParameters.children()) {\n             if (jsDocParameter != null) {\n               defineSlot(astParameter, functionNode,\n-                  jsDocParameter.getJSType(), false);\n+                  jsDocParameter.getJSType(), isFnTypeInferred);\n               jsDocParameter = jsDocParameter.getNext();\n             } else {\n               defineSlot(astParameter, functionNode, null, true);\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n       SLASH_V            = 54,    // Whether a STRING node contains a \\v\n                                   // vertical tab escape. This is a total hack.\n                                   // See comments in IRFactory about this.\n-      LAST_PROP          = 54;\n+      INFERRED_FUNCTION  = 55,    // Marks a function whose parameter types\n+                                  // have been inferred.\n+      LAST_PROP          = 55;\n \n   public static final int   // flags for INCRDECR_PROP\n       DECR_FLAG = 0x1,\n         case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n         case SLASH_V:   return \"slash_v\";\n+        case INFERRED_FUNCTION:   return \"inferred\";\n         default:\n           throw new IllegalStateException(\"unexpect prop id \" + propType);\n       }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"f(0, function() {});\");\n   }\n \n+  public void testTemplateType3() throws Exception {\n+    testTypes(\n+        \"/**\" +\n+        \" * @param {T} v\\n\" +\n+        \" * @param {function(T)} f\\n\" +\n+        \" * @template T\\n\" +\n+        \" */\\n\" +\n+        \"function call(v, f) { f.call(null, v); }\" +\n+        \"/** @type {string} */ var s;\" +\n+        \"call(3, function(x) {\" +\n+        \" x = true;\" +\n+        \" s = x;\" +\n+        \"});\",\n+        \"assignment\\n\" +\n+        \"found   : boolean\\n\" +\n+        \"required: string\");\n+  }\n+\n   public void disable_testBadTemplateType4() throws Exception {\n     // TODO(johnlenz): Add a check for useless of template types.\n     // Unless there are at least two references to a Template type in", "timestamp": 1344535994, "metainfo": ""}