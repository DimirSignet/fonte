{"sha": "c7d0809d53222d3e2fd49bdf0688f762966ee5ec", "log": "Create NodeUtil methods for making decisions about tokens  R=johnlenz DELTA=62  (58 added, 1 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3306   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n   }\n \n   /**\n-   * Determines whether the given name can appear on the right side of\n-   * the dot operator. Many properties (like reserved words) cannot.\n-   */\n-  static boolean isValidPropertyName(String name) {\n+   * Determines whether the given name is a valid variable name.\n+   */\n+  public static boolean isValidSimpleName(String name) {\n     return TokenStream.isJSIdentifier(name) &&\n         !TokenStream.isKeyword(name) &&\n         // no Unicode escaped characters - some browsers are less tolerant\n         // to UTF-16 characters, so we're only searching for character\n         // values, not escapes.\n         isLatin(name);\n+  }\n+\n+  /**\n+   * Determines whether the given name is a valid qualified name.\n+   */\n+  // TODO(nicksantos): This should be moved into a \"Language\" API,\n+  // so that the results are different for es5 and es3.\n+  public static boolean isValidQualifiedName(String name) {\n+    if (name.endsWith(\".\") || name.startsWith(\".\")) {\n+      return false;\n+    }\n+    String[] parts = name.split(\"\\\\.\");\n+    for (String part : parts) {\n+      if (!isValidSimpleName(part)) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Determines whether the given name can appear on the right side of\n+   * the dot operator. Many properties (like reserved words) cannot.\n+   */\n+  static boolean isValidPropertyName(String name) {\n+    return isValidSimpleName(name);\n   }\n \n   private static class VarCollector implements Visitor {\n--- a/test/com/google/javascript/jscomp/NodeUtilTest.java\n+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java\n     assertTrue(NodeUtil.mayBeString(getNode(\"(1+[])\")));\n   }\n \n+  public void testValidNames() {\n+    assertTrue(NodeUtil.isValidPropertyName(\"a\"));\n+    assertTrue(NodeUtil.isValidPropertyName(\"a3\"));\n+    assertFalse(NodeUtil.isValidPropertyName(\"3a\"));\n+    assertFalse(NodeUtil.isValidPropertyName(\"a.\"));\n+    assertFalse(NodeUtil.isValidPropertyName(\".a\"));\n+    assertFalse(NodeUtil.isValidPropertyName(\"a.b\"));\n+    assertFalse(NodeUtil.isValidPropertyName(\"true\"));\n+    assertFalse(NodeUtil.isValidPropertyName(\"a.true\"));\n+    assertFalse(NodeUtil.isValidPropertyName(\"a..b\"));\n+\n+    assertTrue(NodeUtil.isValidSimpleName(\"a\"));\n+    assertTrue(NodeUtil.isValidSimpleName(\"a3\"));\n+    assertFalse(NodeUtil.isValidSimpleName(\"3a\"));\n+    assertFalse(NodeUtil.isValidSimpleName(\"a.\"));\n+    assertFalse(NodeUtil.isValidSimpleName(\".a\"));\n+    assertFalse(NodeUtil.isValidSimpleName(\"a.b\"));\n+    assertFalse(NodeUtil.isValidSimpleName(\"true\"));\n+    assertFalse(NodeUtil.isValidSimpleName(\"a.true\"));\n+    assertFalse(NodeUtil.isValidSimpleName(\"a..b\"));\n+\n+    assertTrue(NodeUtil.isValidQualifiedName(\"a\"));\n+    assertTrue(NodeUtil.isValidQualifiedName(\"a3\"));\n+    assertFalse(NodeUtil.isValidQualifiedName(\"3a\"));\n+    assertFalse(NodeUtil.isValidQualifiedName(\"a.\"));\n+    assertFalse(NodeUtil.isValidQualifiedName(\".a\"));\n+    assertTrue(NodeUtil.isValidQualifiedName(\"a.b\"));\n+    assertFalse(NodeUtil.isValidQualifiedName(\"true\"));\n+    assertFalse(NodeUtil.isValidQualifiedName(\"a.true\"));\n+    assertFalse(NodeUtil.isValidQualifiedName(\"a..b\"));\n+  }\n+\n   public void testGetNearestFunctionName() {\n     testFunctionName(\"function a() {}\", \"a\");\n     testFunctionName(\"(function a() {})\", \"a\");", "timestamp": 1316566271, "metainfo": ""}