{"sha": "bd59bbcf79648c23e86f3625efc98ff646c23495", "log": "Fixes issue 133  R=johnlenz,nicksantos DELTA=148  (145 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=565   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.HashMultimap;\n \n /**\n  * A compiler pass that checks that the programmer has obeyed all the access\n           \"JSC_VISIBILITY_MISMATCH\",\n           \"Overriding {0} property of {1} with {2} property.\");\n \n+  static final DiagnosticType CONST_PROPERTY_REASSIGNED_VALUE =\n+      DiagnosticType.disabled(\n+        \"JSC_CONSTANT_PROPERTY_REASSIGNED_VALUE\",\n+        \"constant property {0} assigned a value more than once\");\n+\n   private final AbstractCompiler compiler;\n   private final TypeValidator validator;\n \n   private int methodDepth = 0;\n   private JSType currentClass = null;\n \n+  private final Multimap<String, String> initializedConstantProperties;\n+\n   CheckAccessControls(AbstractCompiler compiler) {\n     this.compiler = compiler;\n     this.validator = compiler.getTypeValidator();\n+    this.initializedConstantProperties = HashMultimap.create();\n   }\n \n   public void process(Node externs, Node root) {\n       case Token.GETPROP:\n         checkPropertyDeprecation(t, n, parent);\n         checkPropertyVisibility(t, n, parent);\n+        checkConstantProperty(t, n);\n         break;\n       case Token.NEW:\n         checkConstructorDeprecation(t, n, parent);\n           compiler.report(\n               t.makeError(name, BAD_PRIVATE_GLOBAL_ACCESS,\n                   name.getString(), docInfo.getSourceName()));\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Determines whether the given property with @const tag got reassigned\n+   * @param t The current traversal.\n+   * @param getprop The getprop node.\n+   */\n+  private void checkConstantProperty(NodeTraversal t,\n+      Node getprop) {\n+    // Check whether the property is modified\n+    Node parent = getprop.getParent();\n+    if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop)\n+        && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)) {\n+      return;\n+    }\n+\n+    ObjectType objectType =\n+      ObjectType.cast(dereference(getprop.getFirstChild().getJSType()));\n+    String propertyName = getprop.getLastChild().getString();\n+\n+    // Check whether constant properties are reassigned\n+    if (objectType != null) {\n+      ObjectType oType = objectType;\n+      while (oType != null) {\n+        if (oType.hasReferenceName()) {\n+          if (initializedConstantProperties.containsEntry(\n+                  oType.getReferenceName(), propertyName)) {\n+            compiler.report(\n+                t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE,\n+                    propertyName));\n+            break;\n+          }\n+        }\n+        oType = oType.getImplicitPrototype();\n+      }\n+\n+      JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName);\n+      if (info != null && info.isConstant()\n+          && objectType.hasReferenceName()) {\n+        initializedConstantProperties.put(objectType.getReferenceName(),\n+            propertyName);\n+      }\n+\n+      // Add the prototype when we're looking at an instance object\n+      if (objectType.isInstanceType()) {\n+        ObjectType prototype = objectType.getImplicitPrototype();\n+        if (prototype != null) {\n+          JSDocInfo prototypeInfo\n+            = prototype.getOwnPropertyJSDocInfo(propertyName);\n+          if (prototypeInfo != null && prototypeInfo.isConstant()\n+              && prototype.hasReferenceName()) {\n+            initializedConstantProperties.put(prototype.getReferenceName(),\n+                propertyName);\n+          }\n         }\n       }\n     }\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n       \"externsValidation, fileoverviewTags, internetExplorerChecks, \" +\n       \"invalidCasts, missingProperties, nonStandardJsDocs, \" +\n       \"strictModuleDepCheck, undefinedVars, unknownDefines, uselessCode, \" +\n-      \"visibility\";\n+      \"visibility\" +\n+      \"constantProperty\";\n \n   public static DiagnosticGroup DEPRECATED = DiagnosticGroups\n       .registerGroup(\"deprecated\",\n               CheckAccessControls.BAD_PROTECTED_PROPERTY_ACCESS,\n               CheckAccessControls.PRIVATE_OVERRIDE,\n               CheckAccessControls.VISIBILITY_MISMATCH));\n+\n+  public static DiagnosticGroup CONSTANT_PROPERTY = DiagnosticGroups\n+      .registerGroup(\"constantProperty\",\n+          new DiagnosticGroup(\n+              CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE));\n \n   public static DiagnosticGroup NON_STANDARD_JSDOC =\n     DiagnosticGroups.registerGroup(\"nonStandardJsDocs\",\n--- a/test/com/google/javascript/jscomp/CheckAccessControlsTest.java\n+++ b/test/com/google/javascript/jscomp/CheckAccessControlsTest.java\n import static com.google.javascript.jscomp.CheckAccessControls.DEPRECATED_PROP_REASON;\n import static com.google.javascript.jscomp.CheckAccessControls.PRIVATE_OVERRIDE;\n import static com.google.javascript.jscomp.CheckAccessControls.VISIBILITY_MISMATCH;\n+import static com.google.javascript.jscomp.CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE;\n \n import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.jscomp.CompilerOptions;\n   protected CompilerOptions getOptions() {\n     CompilerOptions options = super.getOptions();\n     options.setWarningLevel(DiagnosticGroups.ACCESS_CONTROLS, CheckLevel.ERROR);\n+    options.setWarningLevel(DiagnosticGroups.CONSTANT_PROPERTY,\n+        CheckLevel.ERROR);\n     return options;\n   }\n \n     testSame(\"/** @constructor */ function Foo() {}\" +\n              \"Foo.prototype.bar = function() {};\" +\n              \"/** @constructor \\n * @extends {Foo} */ function SubFoo() {}\" +\n-             \"/** @deprecated \\n * @override */ SubFoo.prototype.bar = function() {};\" +\n+             \"/** @deprecated \\n * @override */ SubFoo.prototype.bar = \" +\n+             \"function() {};\" +\n              \"function f() { (new Foo()).bar(); };\");\n   }\n \n       \"/** @private */ Foo.prototype.bar_ = function() {};\" +\n       \"/** @constructor \\n * @extends {Foo} */ \" +\n       \"function SubFoo() {};\" +\n-      \"/** @const */ SubFoo.prototype.bar_ = function() {};\",\n+      \"SubFoo.prototype.bar_ = function() {};\",\n       \"SubFoo.prototype.baz = function() { this.bar_(); }\"\n     }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n   }\n         \"/** @param {?Foo} x */ function f(x) { return x.length; }\"\n     }, null, BAD_PRIVATE_PROPERTY_ACCESS);\n   }\n+\n+  public void testConstantProperty1() {\n+    test(\"/** @constructor */ function A() {\" +\n+        \"/** @const */ this.bar = 3;}\" +\n+        \"/** @constructor */ function B() {\" +\n+        \"/** @const */ this.bar = 3;this.bar += 4;}\",\n+        null, CONST_PROPERTY_REASSIGNED_VALUE);\n+  }\n+\n+  public void testConstantProperty2() {\n+    test(\"/** @constructor */ function Foo() {}\" +\n+        \"/** @const */ Foo.prototype.prop = 2;\" +\n+        \"var foo = new Foo();\" +\n+        \"foo.prop = 3;\",\n+        null , CONST_PROPERTY_REASSIGNED_VALUE);\n+  }\n+\n+  public void testConstantProperty3() {\n+    testSame(\"var o = { /** @const */ x: 1 };\" +\n+        \"o.x = 2;\");\n+  }\n+\n+  public void testConstantProperty4() {\n+    test(\"/** @constructor */ function cat(name) {}\" +\n+        \"/** @const */ cat.test = 1;\" +\n+        \"cat.test *= 2;\",\n+        null, CONST_PROPERTY_REASSIGNED_VALUE);\n+  }\n+\n+  public void testConstantProperty5() {\n+    test(\"/** @constructor */ function Foo() { this.prop = 1;}\" +\n+        \"/** @const */ Foo.prototype.prop;\" +\n+        \"Foo.prototype.prop = 2\",\n+        null , CONST_PROPERTY_REASSIGNED_VALUE);\n+  }\n+\n+  public void testConstantProperty6() {\n+    test(\"/** @constructor */ function Foo() { this.prop = 1;}\" +\n+        \"/** @const */ Foo.prototype.prop = 2;\",\n+        null , CONST_PROPERTY_REASSIGNED_VALUE);\n+  }\n+\n+  public void testConstantProperty7() {\n+    testSame(\"/** @constructor */ function Foo() {} \" +\n+      \"Foo.prototype.bar_ = function() {};\" +\n+      \"/** @constructor \\n * @extends {Foo} */ \" +\n+      \"function SubFoo() {};\" +\n+      \"/** @const */ /** @override */ SubFoo.prototype.bar_ = function() {};\" +\n+      \"SubFoo.prototype.baz = function() { this.bar_(); }\");\n+  }\n+\n+  public void testConstantProperty8() {\n+    testSame(\"var o = { /** @const */ x: 1 };\" +\n+        \"var y = o.x;\");\n+  }\n+\n+  public void testConstantProperty9() {\n+    testSame(\"/** @constructor */ function A() {\" +\n+        \"/** @const */ this.bar = 3;}\" +\n+        \"/** @constructor */ function B() {\" +\n+        \"this.bar = 4;}\");\n+  }\n+\n+  public void testConstantProperty10() {\n+    testSame(\"/** @constructor */ function Foo() { this.prop = 1;}\" +\n+        \"/** @const */ Foo.prototype.prop;\");\n+  }\n }", "timestamp": 1298068407, "metainfo": ""}