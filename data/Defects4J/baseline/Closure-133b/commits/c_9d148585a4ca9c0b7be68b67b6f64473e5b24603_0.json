{"sha": "9d148585a4ca9c0b7be68b67b6f64473e5b24603", "log": "Add a couple of tests to document the existing behavior with regard to instanceof and goog.asserts.assertInstanceof  R=nicksantos DELTA=35  (32 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4890   ", "commit": "\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n     assuming(\"x\", startType);\n     inFunction(\"out1 = x; goog.asserts.assertInstanceof(x); out2 = x;\");\n     verify(\"out1\", startType);\n-    verifySubtypeOf(\"out2\", OBJECT_TYPE);\n+    verify(\"out2\", OBJECT_TYPE);\n   }\n \n   public void testAssertInstanceof2() {\n     assuming(\"x\", startType);\n     inFunction(\"out1 = x; goog.asserts.assertInstanceof(x, String); out2 = x;\");\n     verify(\"out1\", startType);\n-    verifySubtypeOf(\"out2\", STRING_OBJECT_TYPE);\n+    verify(\"out2\", STRING_OBJECT_TYPE);\n   }\n \n   public void testAssertInstanceof3() {\n     assuming(\"x\", startType);\n     inFunction(\"out1 = x; goog.asserts.assertInstanceof(x, String); out2 = x;\");\n     verify(\"out1\", startType);\n-    verifySubtypeOf(\"out2\", STRING_OBJECT_TYPE);\n+    verify(\"out2\", UNKNOWN_TYPE);\n+  }\n+\n+  public void testAssertInstanceof4() {\n+    JSType startType = registry.getNativeType(STRING_OBJECT_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\"out1 = x; goog.asserts.assertInstanceof(x, Object); out2 = x;\");\n+    verify(\"out1\", startType);\n+    verify(\"out2\", STRING_OBJECT_TYPE);\n+  }\n+\n+  public void testAssertInstanceof5() {\n+    JSType startType = registry.getNativeType(ALL_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\n+        \"out1 = x; goog.asserts.assertInstanceof(x, String); var r = x;\");\n+    verify(\"out1\", startType);\n+    verify(\"x\", STRING_OBJECT_TYPE);\n   }\n \n   public void testAssertWithIsDef() {\n     assuming(\"x\", OBJECT_TYPE);\n     inFunction(\"var y = null; if (x instanceof String); else y = x;\");\n     verify(\"y\", createNullableType(OBJECT_TYPE));\n+  }\n+\n+  public void testInstanceOf6() {\n+    // Here we are using \"instanceof\" to restrict the unknown type to\n+    // the type of the instance.  This has the following problems:\n+    //   1) The type may actually be any sub-type\n+    //   2) The type may implement any interface\n+    // After the instanceof we will require casts for methods that require\n+    // sub-type or unrelated interfaces which would not have been required\n+    // before.\n+    JSType startType = registry.getNativeType(UNKNOWN_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\"out1 = x; if (x instanceof String) out2 = x;\");\n+    verify(\"out1\", startType);\n+    verify(\"out2\", STRING_OBJECT_TYPE);\n   }\n \n   public void testFlattening() {", "timestamp": 1338315522, "metainfo": ""}