{"sha": "4606edd925f6057709e2fe35cd02155fdd457339", "log": "Automated g4 rollback  *** Reason for rollback ***  breaks some tests  *** Original change description ***  Calculate X.prototype.constructor so that subtyping works properly  DELTA=38  (6 added, 28 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4928   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n       childCtor.defineDeclaredProperty(\"superClass_\",\n           parentCtor.getPrototype(), childCtor.getSource());\n       childCtor.getPrototype().defineDeclaredProperty(\"constructor\",\n-          // Notice that constructor functions do not need to be covariant\n-          // on the superclass.\n-          // So if G extends F, new G() and new F() can accept completely\n-          // different argument types, but G.prototype.constructor needs\n-          // to be covariant on F.prototype.constructor.\n-          // To get around this, we just turn off type-checking on arguments\n-          // and return types of G.prototype.constructor.\n-          childCtor.cloneWithoutArrowType(),\n-          childCtor.getSource());\n+          childCtor, childCtor.getSource());\n     }\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n       return type.toDebugHashCodeString();\n     }\n   }\n-\n-  /** Create a new constructor with the parameters and return type stripped. */\n-  public FunctionType cloneWithoutArrowType() {\n-    FunctionType result = new FunctionType(registry, getReferenceName(), source,\n-        registry.createArrowType(null, null), getInstanceType(),\n-        null, true, false);\n-    result.setPrototypeBasedOn(getInstanceType());\n-    return result;\n-  }\n }\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n         \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n         \"derived.inherits(base);\",\n         \"(new derived).constructor\",\n-        \"function (new:derived, ...[?]): ?\");\n+        \"function (new:derived): undefined\");\n   }\n \n   public void testGoodExtends8() throws Exception {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n         \"derived.inherits(base);\",\n         \"(new derived).constructor\",\n-        \"function (new:derived, ...[?]): ?\");\n+        \"function (new:derived): undefined\");\n   }\n \n   public void testGoodExtends8() throws Exception {\n         \"  goog.inherits(f, NewType);\" +\n         \"  (new NewType());\" +\n         \"}\");\n-  }\n-\n-  public void testGoodExtends17() throws Exception {\n-    testFunctionType(\n-        \"Function.prototype.inherits = function(x) {};\" +\n-        \"/** @constructor */function base() {}\\n\" +\n-        \"/** @param {number} x */ base.prototype.bar = function(x) {};\\n\" +\n-        \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n-        \"derived.inherits(base);\",\n-        \"(new derived).constructor.prototype.bar\",\n-        \"function (this:base, number): undefined\");\n   }\n \n   public void testBadExtends1() throws Exception {", "timestamp": 1338677287, "metainfo": ""}