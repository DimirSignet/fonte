{"sha": "2665037fa174f1fc17928a27c7bd6d90c8e9e559", "log": "Flag for variable name shadowing.  R=nicksantos DELTA=27  (26 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=680   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n   /** Reserve property names on the global this object. */\n   public boolean reserveRawExports;\n+\n+  /** Should shadow variable names in outer scope. */\n+  boolean shadowVariables;\n \n   /**\n    * Generate pseudo names for variables and properties for debugging purposes.\n     propertyRenaming = PropertyRenamingPolicy.OFF;\n     labelRenaming = false;\n     generatePseudoNames = false;\n+    shadowVariables = false;\n     renamePrefix = null;\n     aliasKeywords = false;\n     collapseProperties = false;\n     this.propertyRenaming = newPropertyPolicy;\n   }\n \n+\n+  /** Should shadow outer scope variable name during renaming. */\n+  public void setShadowVariables(boolean shadow) {\n+    this.shadowVariables = shadow;\n+  }\n+\n   /**\n    * If true, flattens multi-level property names on extern types\n    * (e.g. String$f = x). This should only be used with the typed version of\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n         options.variableRenaming == VariableRenamingPolicy.LOCAL,\n         preserveAnonymousFunctionNames,\n         options.generatePseudoNames,\n-        /** Shadowing */ false,\n+        options.shadowVariables,\n         prevVariableMap,\n         reservedChars,\n         exportedNames);", "timestamp": 1298671731, "metainfo": ""}