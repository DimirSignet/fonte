{"sha": "64f70b437c1e2f3336c8715299b95ed0435d51bd", "log": "Some clean-up of how we handle unrecognized annotation - add a flag extra_annotation_name - tie unknown annotation warnings to --warning_level rather than --compilation_level - add annotations from jsdoc3 to the default set. fixes issue 901  R=blickly DELTA=77 (63 added, 12 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6185   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n             \"<file-name>:<line-number>?  <warning-description>\")\n     private String warnings_whitelist_file = \"\";\n \n+    @Option(name = \"--extra_annotation_name\",\n+        usage = \"A whitelist of tag names in JSDoc. You may specify multiple\")\n+    private List<String> extra_annotation_name = Lists.newArrayList();\n+\n     @Argument\n     private List<String> arguments = Lists.newArrayList();\n \n       options.setCodingConvention(new ClosureCodingConvention());\n     }\n \n+    options.setExtraAnnotationNames(flags.extra_annotation_name);\n+\n     CompilationLevel level = flags.compilation_level;\n     level.setOptionsForCompilationLevel(options);\n \n--- a/src/com/google/javascript/jscomp/CompilationLevel.java\n+++ b/src/com/google/javascript/jscomp/CompilationLevel.java\n    */\n   private static void applyBasicCompilationOptions(CompilerOptions options) {\n     options.skipAllCompilerPasses();\n-\n-    // Allows annotations that are not standard.\n-    options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n-        CheckLevel.OFF);\n   }\n \n   /**\n     options.setRemoveUnusedVariables(Reach.LOCAL_ONLY);\n     options.collapseObjectLiterals = true;\n     options.protectHiddenSideEffects = true;\n-\n-    // Allows annotations that are not standard.\n-    options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n-        CheckLevel.OFF);\n   }\n \n   /**\n     options.optimizeParameters = true;\n     options.optimizeReturns = true;\n     options.optimizeCalls = true;\n-\n-    // Kindly tell the user that they have JsDocs that we don't understand.\n-    options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n-        CheckLevel.WARNING);\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n package com.google.javascript.jscomp;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Multimap;\n     this.externExports = enabled;\n   }\n \n-  public void setExtraAnnotationNames(Set<String> extraAnnotationNames) {\n-    this.extraAnnotationNames = Sets.newHashSet(extraAnnotationNames);\n+  public void setExtraAnnotationNames(Iterable<String> extraAnnotationNames) {\n+    this.extraAnnotationNames = ImmutableSet.copyOf(extraAnnotationNames);\n   }\n \n   public boolean isExternExportsEnabled() {\n--- a/src/com/google/javascript/jscomp/WarningLevel.java\n+++ b/src/com/google/javascript/jscomp/WarningLevel.java\n     options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);\n     options.setWarningLevel(DiagnosticGroups.ES5_STRICT, CheckLevel.OFF);\n     options.checkCaja = false;\n+\n+    // Allows annotations that are not standard.\n+    options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n+        CheckLevel.OFF);\n   }\n \n   /**\n     options.checkSuspiciousCode = true;\n     options.checkUnreachableCode = CheckLevel.WARNING;\n     options.checkControlStructures = true;\n+\n+    // Allows annotations that are not standard.\n+    options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n+        CheckLevel.OFF);\n   }\n \n   /**\n         DiagnosticGroups.DEPRECATED, CheckLevel.WARNING);\n     options.setWarningLevel(\n         DiagnosticGroups.ES5_STRICT, CheckLevel.WARNING);\n+\n+    // Kindly tell the user that they have JsDocs that we don't understand.\n+    options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n+        CheckLevel.WARNING);\n   }\n }\n--- a/src/com/google/javascript/jscomp/parsing/Annotation.java\n+++ b/src/com/google/javascript/jscomp/parsing/Annotation.java\n       put(\"const\", Annotation.CONSTANT).\n       put(\"constant\", Annotation.CONSTANT).\n       put(\"constructor\", Annotation.CONSTRUCTOR).\n+      put(\"copyright\", Annotation.LICENSE).\n       put(\"define\", Annotation.DEFINE).\n       put(\"deprecated\", Annotation.DEPRECATED).\n       put(\"desc\", Annotation.DESC).\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n     super.tearDown();\n   }\n \n+  public void testUnknownAnnotation() {\n+    args.add(\"--warning_level=VERBOSE\");\n+    test(\"/** @unknownTag */ function f() {}\",\n+         RhinoErrorReporter.BAD_JSDOC_ANNOTATION);\n+\n+    args.add(\"--extra_annotation_name=unknownTag\");\n+    testSame(\"/** @unknownTag */ function f() {}\");\n+  }\n+\n   public void testWarningGuardOrdering1() {\n     args.add(\"--jscomp_error=globalThis\");\n     args.add(\"--jscomp_off=globalThis\");", "timestamp": 1358990691, "metainfo": ""}