{"sha": "0f672330ef417b35894f909298c350bb68a41fad", "log": "Enable more specific type inferrence with goog.asserts.assertInstanceof.  R=nicksantos DELTA=76  (59 added, 9 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4862   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n import com.google.common.collect.Lists;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.jstype.FunctionType;\n+import com.google.javascript.rhino.jstype.JSType;\n import com.google.javascript.rhino.jstype.JSTypeNative;\n+import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.ObjectType;\n \n import java.util.Collection;\n             JSTypeNative.OBJECT_TYPE),\n         new AssertionFunctionSpec(\"goog.asserts.assertArray\",\n             JSTypeNative.ARRAY_TYPE),\n-        // TODO(agrieve): It would be better if this could make the first\n-        // parameter the type of the second parameter.\n-        new AssertionFunctionSpec(\"goog.asserts.assertInstanceof\",\n-            JSTypeNative.OBJECT_TYPE)\n+        new AssertInstanceofSpec(\"goog.asserts.assertInstanceof\")\n     );\n   }\n \n     }\n     return null;\n   }\n+\n+  /**\n+   * A function that will throw an exception when if the value is not\n+   * an instanceof a specific type.\n+   */\n+  public static class AssertInstanceofSpec extends AssertionFunctionSpec {\n+    public AssertInstanceofSpec(String functionName) {\n+      super(functionName, JSTypeNative.OBJECT_TYPE);\n+    }\n+\n+    /**\n+     * Returns the type for a type assertion, or null if the function asserts\n+     * that the node must not be null or undefined.\n+     */\n+    @Override\n+    public JSType getAssertedType(Node call, JSTypeRegistry registry) {\n+      if (call.getChildCount() > 2) {\n+        Node constructor = call.getFirstChild().getNext().getNext();\n+        if (constructor != null) {\n+          JSType ownerType = constructor.getJSType();\n+          if (ownerType != null\n+              && ownerType.isFunctionType()\n+              && ownerType.isConstructor()) {\n+            FunctionType functionType = ((FunctionType) ownerType);\n+            return functionType.getInstanceType();\n+          }\n+        }\n+      }\n+      return super.getAssertedType(call, registry);\n+    }\n+  }\n+\n+\n }\n--- a/src/com/google/javascript/jscomp/CodingConvention.java\n+++ b/src/com/google/javascript/jscomp/CodingConvention.java\n    *   -One or more of its parameters are not of a certain type.\n    */\n   public class AssertionFunctionSpec {\n-    private final String functionName;\n-    private final JSTypeNative assertedType;\n+    protected final String functionName;\n+    protected final JSTypeNative assertedType;\n \n     public AssertionFunctionSpec(String functionName) {\n       this(functionName, null);\n      * Returns the type for a type assertion, or null if the function asserts\n      * that the node must not be null or undefined.\n      */\n-    public JSTypeNative getAssertedType() {\n-      return assertedType;\n+    public JSType getAssertedType(Node call, JSTypeRegistry registry) {\n+      return assertedType != null ? registry.getNativeType(assertedType) : null;\n     }\n   }\n }\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n     if (assertedNode == null) {\n       return scope;\n     }\n-    JSTypeNative assertedType = assertionFunctionSpec.getAssertedType();\n+    JSType assertedType = assertionFunctionSpec.getAssertedType(\n+        callNode, registry);\n     String assertedNodeName = assertedNode.getQualifiedName();\n \n     JSType narrowed;\n     } else {\n       // Handle assertions that enforce expressions are of a certain type.\n       JSType type = getJSType(assertedNode);\n-      narrowed = type.getGreatestSubtype(getNativeType(assertedType));\n+      narrowed = type.getGreatestSubtype(assertedType);\n       if (assertedNodeName != null && type.differsFrom(narrowed)) {\n         scope = narrowScope(scope, assertedNode, narrowed);\n       }\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n     verifySubtypeOf(\"out2\", ARRAY_TYPE);\n   }\n \n-  public void testAssertInstanceof() {\n+  public void testAssertInstanceof1() {\n     JSType startType = createNullableType(ALL_TYPE);\n     assuming(\"x\", startType);\n     inFunction(\"out1 = x; goog.asserts.assertInstanceof(x); out2 = x;\");\n     verify(\"out1\", startType);\n     verifySubtypeOf(\"out2\", OBJECT_TYPE);\n+  }\n+\n+  public void testAssertInstanceof2() {\n+    JSType startType = createNullableType(ALL_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\"out1 = x; goog.asserts.assertInstanceof(x, String); out2 = x;\");\n+    verify(\"out1\", startType);\n+    verifySubtypeOf(\"out2\", STRING_OBJECT_TYPE);\n+  }\n+\n+  public void testAssertInstanceof3() {\n+    JSType startType = registry.getNativeType(UNKNOWN_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\"out1 = x; goog.asserts.assertInstanceof(x, String); out2 = x;\");\n+    verify(\"out1\", startType);\n+    verifySubtypeOf(\"out2\", STRING_OBJECT_TYPE);\n   }\n \n   public void testAssertWithIsDef() {", "timestamp": 1337882861, "metainfo": ""}