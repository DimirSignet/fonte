{"sha": "134e26bb8334c23140cd76faf6ebb1c0e022624c", "log": "Proposing adding a new flag called --strict_only_for, which is used like --strict, but applies only for a comma separated list of partials names (similar to --show_warnings_only_for).  R=nicksantos,anatol DELTA=216  (196 added, 11 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4789   ", "commit": "\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/ByPathWarningsGuard.java\n+/*\n+ * Copyright 2008 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.base.Preconditions;\n+\n+import java.util.List;\n+\n+/**\n+ * An implementation of a {@link WarningsGuard} that can modify the\n+ * {@link CheckLevel} based on the file that caused the warning, and whether\n+ * this file matches a set of paths (specified either as include or exclude\n+ * of path name parts).\n+ *\n+ * <p>For example:\n+ * <pre>\n+ * List<String> paths = new ArrayList<String>();\n+ * paths.add(\"foo\");\n+ * WarningsGuard guard =\n+ *     ByPathWarningsGuard.forPath(paths, CheckLevel.ERROR, 1);\n+ * </pre>\n+ *\n+ * This guard will convert any warning that came from a file that contains \"foo\"\n+ * in its path to an error.\n+ *\n+ */\n+public class ByPathWarningsGuard extends WarningsGuard {\n+  private static final long serialVersionUID = 1L;\n+\n+  private final List<String> paths;\n+  private final boolean include;\n+  private final int priority;\n+  private CheckLevel level;\n+\n+  /**\n+   * Constructs a new instance. The priority is determined by the\n+   * {@link CheckLevel}: ERROR have Priority.STRICT, and OFF have priority\n+   * FILTER_BY_PATH.\n+   *\n+   * Use {@link #forPath} or {@link #exceptPath} to actually create a new\n+   * instance.\n+   */\n+  private ByPathWarningsGuard(\n+      List<String> paths, boolean include, CheckLevel level) {\n+    Preconditions.checkArgument(paths != null);\n+    Preconditions.checkArgument(\n+        level == CheckLevel.OFF || level == CheckLevel.ERROR);\n+    this.paths = paths;\n+    this.include = include;\n+    this.level = level;\n+    this.priority = level == CheckLevel.ERROR ?\n+        WarningsGuard.Priority.STRICT.value :\n+        WarningsGuard.Priority.FILTER_BY_PATH.value;\n+  }\n+\n+  /**\n+   * @param paths Paths for matching.\n+   * @param level The {@link CheckLevel} to apply on affected files.\n+   * @return a new {@link ByPathWarningsGuard} that would affect any file in the\n+   *     given set of paths.\n+   */\n+  public static ByPathWarningsGuard forPath(\n+      List<String> paths, CheckLevel level) {\n+    return new ByPathWarningsGuard(paths, true, level);\n+  }\n+\n+  /**\n+   * @param paths Paths for matching.\n+   * @param level The {@link CheckLevel} to apply on affected files.\n+   * @return a new {@link ByPathWarningsGuard} that would affect any file not\n+   *     in the given set of paths.\n+   */\n+  public static ByPathWarningsGuard exceptPath(\n+      List<String> paths, CheckLevel level) {\n+    return new ByPathWarningsGuard(paths, false, level);\n+  }\n+\n+  @Override\n+  public CheckLevel level(JSError error) {\n+    final String errorPath = error.sourceName;\n+    CheckLevel defaultLevel = error.getDefaultLevel();\n+    if (defaultLevel != CheckLevel.ERROR && errorPath != null) {\n+      boolean inPath = false;\n+      for (String path : paths) {\n+        inPath |= errorPath.contains(path);\n+      }\n+      if (inPath == include) {\n+        return level;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  protected int getPriority() {\n+    return priority;\n+  }\n+}\n--- a/src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java\n package com.google.javascript.jscomp;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.collect.Lists;\n+\n+import java.util.List;\n \n /**\n  * Control whether warnings should be restricted or suppressed for specified\n     EXCLUDE;  // Suppress warnings within the path.\n   }\n \n-  private final String[] paths;\n-  private final ShowType showType;\n+  private final ByPathWarningsGuard warningsGuard;\n \n   public ShowByPathWarningsGuard(String checkWarningsOnlyForPath) {\n     this(checkWarningsOnlyForPath, ShowType.INCLUDE);\n   public ShowByPathWarningsGuard(String[] paths, ShowType showType) {\n     Preconditions.checkArgument(paths != null);\n     Preconditions.checkArgument(showType != null);\n-    this.paths = paths;\n-    this.showType = showType;\n+    List<String> pathList = Lists.newArrayList(paths);\n+    if (showType == ShowType.INCLUDE) {\n+      warningsGuard = ByPathWarningsGuard.exceptPath(pathList, CheckLevel.OFF);\n+    } else {\n+      warningsGuard = ByPathWarningsGuard.forPath(pathList, CheckLevel.OFF);\n+    }\n   }\n \n   @Override\n   public CheckLevel level(JSError error) {\n-    final String errorPath = error.sourceName;\n-    if (error.getDefaultLevel() != CheckLevel.ERROR && errorPath != null) {\n-      boolean inPath = false;\n-      for (String path : paths) {\n-        inPath |= errorPath.contains(path);\n-      }\n-      if (inPath ^ (showType == ShowType.INCLUDE)) {\n-        return CheckLevel.OFF;\n-      }\n-    }\n-    return null;\n+    return warningsGuard.level(error);\n   }\n \n   @Override\n   protected int getPriority() {\n-    return WarningsGuard.Priority.FILTER_BY_PATH.value; // applied first\n+    return warningsGuard.getPriority();\n   }\n }", "timestamp": 1337183051, "metainfo": ""}