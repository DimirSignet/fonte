{"sha": "3a66fb6214c255548b0f0b12346f7b08d65285ba", "log": "Add a compiler options for \"remove unused class properties\" and turn it off by default in the open source compiler's ADVANCE mode.  R=nicksantos DELTA=79  (78 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4825   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilationLevel.java\n+++ b/src/com/google/javascript/jscomp/CompilationLevel.java\n         options.disambiguateProperties = true;\n         options.ambiguateProperties = true;\n         options.inlineProperties = true;\n+        // TODO(johnlenz) :removeUnusedClassProperties isn't strictly a \n+        // type based pass, but add it here for now because I may have to \n+        // make it into one.\n+        options.removeUnusedClassProperties = true;\n         break;\n       case SIMPLE_OPTIMIZATIONS:\n         // TODO(johnlenz): enable peephole type based optimization.\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n   /** Tells AnalyzePrototypeProperties it can remove externed props. */\n   public boolean removeUnusedPrototypePropertiesInExterns;\n+\n+  /** Removes unused member properties */\n+  public boolean removeUnusedClassProperties;\n \n   /** Removes unused variables */\n   public boolean removeUnusedVars;\n     extractPrototypeMemberDeclarations = false;\n     removeUnusedPrototypeProperties = false;\n     removeUnusedPrototypePropertiesInExterns = false;\n+    removeUnusedClassProperties = false;\n     removeUnusedVars = false;\n     removeUnusedLocalVars = false;\n     aliasExternals = false;\n   }\n \n   /**\n+   * @return Whether to attempt to remove unused class properties\n+   */\n+  public boolean isRemoveUnusedClassProperties() {\n+    return removeUnusedClassProperties;\n+  }\n+\n+  /**\n+   * @param removeUnusedClassProperties Whether to attempt to remove\n+   *      unused class properties\n+   */\n+  public void setRemoveUnusedClassProperties(boolean removeUnusedClassProperties) {\n+    this.removeUnusedClassProperties = removeUnusedClassProperties;\n+  }\n+\n+  /**\n    * Returns the map of define replacements.\n    */\n   public Map<String, Node> getDefineReplacements() {\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n \n     if (options.removeUnusedPrototypeProperties) {\n       passes.add(removeUnusedPrototypeProperties);\n+    }\n+\n+    if (options.removeUnusedClassProperties) {\n       passes.add(removeUnusedClassProperties);\n     }\n \n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     test(options, code, result);\n   }\n \n+  public void testIssue730() {\n+    CompilerOptions options = createCompilerOptions();\n+    CompilationLevel.ADVANCED_OPTIMIZATIONS\n+        .setOptionsForCompilationLevel(options);\n+\n+    String code =\n+        \"/** @constructor */function A() {this.foo = 0; Object.seal(this);}\\n\" +\n+        \"/** @constructor */function B() {this.a = new A();}\\n\" +\n+        \"B.prototype.dostuff = function() {this.a.foo++;alert('hi');}\\n\" +\n+        \"new B().dostuff();\\n\";\n+\n+    test(options,\n+        code,\n+        \"function a(){this.b=0;Object.seal(this)}\" +\n+        \"(new function(){this.a=new a}).a.b++;\" +\n+        \"alert(\\\"hi\\\")\");\n+\n+    options.removeUnusedClassProperties = true;\n+\n+    // This is still a problem when removeUnusedClassProperties are enabled.\n+    test(options,\n+        code,\n+        \"function a(){Object.seal(this)}\" +\n+        \"(new function(){this.a=new a}).a.b++;\" +\n+        \"alert(\\\"hi\\\")\");\n+  }\n+\n   public void testCoaleseVariables() {\n     CompilerOptions options = createCompilerOptions();\n \n--- a/test/com/google/javascript/jscomp/IntegrationTestCase.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTestCase.java\n         + \"/** @constructor\\n * @nosideeffects */ function Widget() {}\\n\"\n         + \"/** @modifies {this} */ Widget.prototype.go = function() {};\\n\"\n         + \"/** @return {string} */ var widgetToken = function() {};\\n\"\n-        + \"function alert(x) {}\"));\n+        + \"function alert(x) {}\"\n+        + \"function Object() {}\"\n+        + \"Object.seal;\"));\n \n   protected List<SourceFile> externs = DEFAULT_EXTERNS;\n \n--- a/test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedClassPropertiesTest.java\n     test(\"this.y = 1;alert(Object.keys(this))\",\n          \"1;alert(Object.keys(this))\");\n   }\n+\n+  public void testIssue730() {\n+    // Partial removal of properties can causes problems if the object is\n+    // sealed.\n+    // TODO(johnlenz): should we not allow partial removals?\n+    test(\n+        \"function A() {this.foo = 0;}\\n\" +\n+        \"function B() {this.a = new A();}\\n\" +\n+        \"B.prototype.dostuff = function() {this.a.foo++;alert('hi');}\\n\" +\n+        \"new B().dostuff();\\n\",\n+        \"function A(){0}\" +\n+        \"function B(){this.a=new A}\" +\n+        \"B.prototype.dostuff=function(){this.a.foo++;alert(\\\"hi\\\")};\" +\n+        \"new B().dostuff();\");\n+  }\n }", "timestamp": 1337292050, "metainfo": ""}