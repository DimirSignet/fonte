{"sha": "6aa71f116df0102a98c463f471ad8ddd4dba01f8", "log": "Don't remove assignments to variables whose values have escaped and are later modified. Fixes issue 618.  R=nicksantos DELTA=32  (27 added, 0 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3952   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n    * y.foo = 3; // is a reference.\n    * </code>\n    *\n-   * Interpreting assigments could mark a variable as referenced that\n+   * Interpreting assignments could mark a variable as referenced that\n    * wasn't referenced before, in order to keep it alive. Because we find\n    * references by lazily traversing subtrees, marking a variable as\n    * referenced could trigger new traversals of new subtrees, which could\n             assignedToUnknownValue = true;\n           }\n \n+          boolean maybeEscaped = false;\n           for (Assign assign : assignsByVar.get(var)) {\n             if (assign.isPropertyAssign) {\n               hasPropertyAssign = true;\n                 assign.assignNode.getLastChild(), true)) {\n               assignedToUnknownValue = true;\n             }\n-          }\n-\n-          if (assignedToUnknownValue && hasPropertyAssign) {\n+            if (assign.maybeAliased) {\n+              maybeEscaped = true;\n+            }\n+          }\n+\n+          if ((assignedToUnknownValue || maybeEscaped) && hasPropertyAssign) {\n             changes = markReferencedVar(var) || changes;\n             maybeUnreferenced.remove(current);\n             current--;\n     // way.\n     final boolean mayHaveSecondarySideEffects;\n \n+    // If true, the value may have escaped and any modification is a use.\n+    final boolean maybeAliased;\n+\n     Assign(Node assignNode, Node nameNode, boolean isPropertyAssign) {\n       Preconditions.checkState(NodeUtil.isAssignmentOp(assignNode));\n       this.assignNode = assignNode;\n       this.nameNode = nameNode;\n       this.isPropertyAssign = isPropertyAssign;\n \n+      this.maybeAliased = NodeUtil.isExpressionResultUsed(assignNode);\n       this.mayHaveSecondarySideEffects =\n-          !assignNode.getParent().isExprResult() ||\n+          maybeAliased ||\n           NodeUtil.mayHaveSideEffects(assignNode.getFirstChild()) ||\n           NodeUtil.mayHaveSideEffects(assignNode.getLastChild());\n     }\n--- a/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n         \"for (var i in x) { x[i].call(x); }\" +\n         \"window['Foo'] = Foo;\");\n   }\n+\n+  public void testIssue618_1() {\n+    this.removeGlobal = false;\n+    testSame(\n+        \"function f() {\\n\" +\n+        \"  var a = [], b;\\n\" +\n+        \"  a.push(b = []);\\n\" +\n+        \"  b[0] = 1;\\n\" +\n+        \"  return a;\\n\" +\n+        \"}\");\n+  }\n+\n+  public void testIssue618_2() {\n+    this.removeGlobal = false;\n+    testSame(\n+        \"var b;\\n\" +\n+        \"a.push(b = []);\\n\" +\n+        \"b[0] = 1;\\n\");\n+  }\n }", "timestamp": 1323712450, "metainfo": ""}