{"sha": "caa80b44a19c854951bff480cc156ab1dace25a4", "log": "More concise representation of some numbers Contributed by Robert Gust-Bardon fixes issue 748  R=johnlenz DELTA=17  (11 added, 0 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4965   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeConsumer.java\n+++ b/src/com/google/javascript/jscomp/CodeConsumer.java\n       add(\" \");\n     }\n \n-    if ((long) x == x && !negativeZero) {\n+    if (negativeZero) {\n+      addConstant(\"-0\");\n+    } else if ((long) x == x) {\n       long value = (long) x;\n       long mantissa = value;\n       int exp = 0;\n       if (exp > 2) {\n         addConstant(Long.toString(mantissa) + \"E\" + Integer.toString(exp));\n       } else {\n-        addConstant(Long.toString(value));\n+        long valueAbs = Math.abs(value);\n+        if (Long.toHexString(valueAbs).length() + 2 <\n+            Long.toString(valueAbs).length()) {\n+          addConstant((value < 0 ? \"-\" : \"\") + \"0x\" +\n+              Long.toHexString(valueAbs));\n+        } else {\n+          addConstant(Long.toString(value));\n+        }\n       }\n     } else {\n-      addConstant(String.valueOf(x));\n+      addConstant(String.valueOf(x).replace(\".0E\", \"E\"));\n     }\n   }\n \n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n     assertPrintNumber(\"1E5\", 100000.0);\n     assertPrintNumber(\"100000.1\", 100000.1);\n \n-    assertPrintNumber(\"1.0E-6\", 0.000001);\n+    assertPrintNumber(\"1E-6\", 0.000001);\n+    assertPrintNumber(\"-0x38d7ea4c68001\", -0x38d7ea4c68001L);\n+    assertPrintNumber(\"0x38d7ea4c68001\", 0x38d7ea4c68001L);\n   }\n \n   // Make sure to test as both a String and a Node, because\n   }\n \n   public void testIssue582() {\n-    assertPrint(\"var x = -0.0;\", \"var x=-0.0\");\n+    assertPrint(\"var x = -0.0;\", \"var x=-0\");\n   }\n \n   public void testIssue601() {\n   public void testMinusNegativeZero() {\n     // Negative zero is weird, because we have to be able to distinguish\n     // it from positive zero (there are some subtle differences in behavior).\n-    assertPrint(\"x- -0\", \"x- -0.0\");\n+    assertPrint(\"x- -0\", \"x- -0\");\n   }\n \n   public void testStringEscapeSequences() {", "timestamp": 1339084684, "metainfo": ""}