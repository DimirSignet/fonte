{"sha": "026c346555bbcc9d25fdeedbc85a6d68f0307775", "log": "Use ImmutableMap.Builder instead of ImmutableMapBuilder.  Generate jsdoc for generated protocol buffers.    ", "commit": "\n--- a/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java\n import static com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE;\n \n import com.google.common.base.Function;\n-import com.google.common.collect.ImmutableMapBuilder;\n+import com.google.common.collect.ImmutableMap;\n import com.google.javascript.rhino.jstype.JSType;\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.FunctionType;\n       final JSTypeRegistry typeRegistry) {\n     super(convention, typeRegistry);\n     this.restricters =\n-      new ImmutableMapBuilder<String, Function<TypeRestriction, JSType>>()\n+      new ImmutableMap.Builder<String, Function<TypeRestriction, JSType>>()\n       .put(\"isDef\", new Function<TypeRestriction, JSType>() {\n         public JSType apply(TypeRestriction p) {\n           if (p.outcome) {\n           return p.type == null ? null : p.type.visit(visitor);\n         }\n       })\n-      .getMap();\n+      .build();\n   }\n \n   public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition,\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n package com.google.javascript.jscomp.parsing;\n \n import com.google.common.base.Preconditions;\n-import com.google.common.collect.ImmutableMapBuilder;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;\n import com.google.javascript.rhino.JSDocInfo;\n   private State state;\n \n   private static final Map<String, Annotation> recognizedAnnotations =\n-      new ImmutableMapBuilder<String, Annotation>().\n+      new ImmutableMap.Builder<String, Annotation>().\n       put(\"argument\", Annotation.PARAM).\n       put(\"author\", Annotation.AUTHOR).\n       put(\"const\", Annotation.CONSTANT).\n       put(\"type\", Annotation.TYPE).\n       put(\"typedef\", Annotation.TYPEDEF).\n       put(\"version\", Annotation.VERSION).\n-      getMap();\n+      build();\n \n   private final Map<String, Annotation> annotationNames;\n \n \n   /** Create the annotation names from the user-specified config. */\n   private static Map<String, Annotation> buildAnnotationNames(Config config) {\n-    ImmutableMapBuilder<String, Annotation> annotationBuilder =\n-        ImmutableMapBuilder.fromMap(recognizedAnnotations);\n+    ImmutableMap.Builder<String, Annotation> annotationBuilder =\n+        ImmutableMap.builder();\n+    annotationBuilder.putAll(recognizedAnnotations);\n     for (String unrecognizedAnnotation : config.annotationWhitelist) {\n       if (!recognizedAnnotations.containsKey(unrecognizedAnnotation)) {\n         annotationBuilder.put(\n             unrecognizedAnnotation, Annotation.NOT_IMPLEMENTED);\n       }\n     }\n-    return annotationBuilder.getMap();\n+    return annotationBuilder.build();\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/ReplaceCssNamesTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceCssNamesTest.java\n import static com.google.javascript.jscomp.ReplaceCssNames.UNEXPECTED_STRING_LITERAL_ERROR;\n import static com.google.javascript.jscomp.ReplaceCssNames.UNKNOWN_SYMBOL_WARNING;\n \n-import com.google.common.collect.ImmutableMapBuilder;\n+import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Maps;\n import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.rhino.Node;\n   boolean useReplacementMap;\n \n   /** Map of replacements to use during the test. */\n-  Map<String, String> replacementMap = new ImmutableMapBuilder<String, String>()\n+  Map<String, String> replacementMap =\n+      new ImmutableMap.Builder<String, String>()\n       .put(\"active\", \"a\")\n       .put(\"buttonbar\", \"b\")\n       .put(\"colorswatch\", \"c\")\n       .put(\"elephant\", \"e\")\n       .put(\"footer\", \"f\")\n       .put(\"goog\", \"g\")\n-      .getMap();\n+      .build();\n \n   Map<String, Integer> cssNames;\n \n          \"el.className = 'goog-colorswatch-disabled'\");\n     test(\"setClass(goog.getCssName('active-buttonbar'))\",\n          \"setClass('active-buttonbar')\");\n-    Map<String, Integer> expected = new ImmutableMapBuilder<String, Integer>()\n+    Map<String, Integer> expected =\n+        new ImmutableMap.Builder<String, Integer>()\n         .put(\"goog\", 2)\n         .put(\"footer\", 1)\n         .put(\"active\", 2)\n         .put(\"colorswatch\", 1)\n         .put(\"disabled\", 1)\n         .put(\"buttonbar\", 1)\n-        .getMap();\n+        .build();\n     assertEquals(expected, cssNames);\n   }\n \n          \"el.className = 'c'\");\n     test(\"setClass(goog.getCssName('elephant'))\",\n          \"setClass('e')\");\n-    Map<String, Integer> expected = new ImmutableMapBuilder<String, Integer>()\n+    Map<String, Integer> expected =\n+        new ImmutableMap.Builder<String, Integer>()\n         .put(\"buttonbar\", 1)\n         .put(\"colorswatch\", 1)\n         .put(\"elephant\", 1)\n-        .getMap();\n+        .build();\n     assertEquals(expected, cssNames);\n   }\n \n          \"el.className = 'g-c-d'\");\n     test(\"setClass(goog.getCssName('active-buttonbar'))\",\n          \"setClass('a-b')\");\n-    Map<String, Integer> expected = new ImmutableMapBuilder<String, Integer>()\n+    Map<String, Integer> expected =\n+        new ImmutableMap.Builder<String, Integer>()\n         .put(\"goog\", 2)\n         .put(\"footer\", 1)\n         .put(\"active\", 2)\n         .put(\"colorswatch\", 1)\n         .put(\"disabled\", 1)\n         .put(\"buttonbar\", 1)\n-        .getMap();\n+        .build();\n     assertEquals(expected, cssNames);\n   }\n ", "timestamp": 1263915008, "metainfo": ""}