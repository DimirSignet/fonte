{"sha": "8b47d9fb24d8a82c26f993b59cb5236329d9fd04", "log": "open-source some of the webservice utility classes  R=acleung DELTA=165  (122 added, 18 deleted, 25 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5511   ", "commit": "\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/webservice/common/AbstractWebServiceException.java\n+/*\n+ * Copyright 2009 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.webservice.common;\n+\n+/**\n+ * All the exceptions that can be returned as error to the client of the API.\n+ *\n+ */\n+public abstract class AbstractWebServiceException extends Exception {\n+  public abstract ErrorCode getErrorCode();\n+  public abstract String getFormattedError();\n+\n+  @Override\n+  public String toString() {\n+    return String.format(\"Error(%d): %s\", getErrorCode().getCode(),\n+        getFormattedError());\n+  }\n+}\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/webservice/common/ErrorCode.java\n+/*\n+ * Copyright 2009 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.webservice.common;\n+\n+/**\n+ * Enum of all the possible error described in the Web Service protocol.\n+ *\n+ */\n+public enum ErrorCode {\n+  UNKNOWN_OUTPUT_MODE(2),\n+  UNKNOWN_API_KEY(3),\n+  UNKNOWN_COMPILATION_LEVEL(4),\n+  UNKNOWN_CHARSET(5),\n+  POST_DATA_TOO_LARGE(8),\n+  FILE_TOO_LARGE(9),\n+  UNREACHABLE_URL(10),\n+  MALFORMED_URL(12),\n+  NO_OUTPUT_INFO(13),\n+  UNKNOWN_OUTPUT_INFO(14),\n+  MISSING_API_KEY(15),\n+  UNKNOWN_WARNING_LEVEL(16),\n+  UNKNOWN_FORMATTING_OPTION(17),\n+  UNKNOWN_PARAMETER(18),\n+  ILLEGAL_OUTPUT_FILE_NAME(19),\n+  HASH_MISMATCH(20),\n+  NO_CODE_FOUND_IN_CACHE(21),\n+  ACCOUNT_OVER_QUOTA(22),\n+  COMPILER_EXCEPTION(23),\n+  UNSUPPORTED_INPUT_RESOURCE_TYPE(24),\n+  DOWNLOAD_OVER_QUOTA(25),\n+  ;\n+\n+  private final int code;\n+  ErrorCode(int code) {\n+    this.code = code;\n+  }\n+\n+  public int getCode() {\n+    return code;\n+  }\n+}\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/webservice/common/Protocol.java\n+/*\n+ * Copyright 2009 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.webservice.common;\n+\n+import com.google.common.collect.Sets;\n+\n+import java.util.Set;\n+\n+/**\n+ * All the strings used by the webservice protocol.\n+ *\n+ */\n+public class Protocol {\n+\n+  private Protocol() {}\n+\n+  /**\n+   * All enums that need to be shared between the Java and JS code should\n+   * implement this interface.\n+   */\n+  public static interface ProtocolEnum {\n+    /**\n+     * @return A string representing the key or value specified by the\n+     * protocol.\n+     */\n+    public String getValue();\n+  }\n+\n+  /**\n+   * All the keys that can be part of the http request.\n+   */\n+  public static enum RequestKey implements ProtocolEnum {\n+    CODE_URL(\"code_url\"),\n+    JS_CODE(\"js_code\"),\n+    EXCLUDE_DEFAULT_EXTERNS(\"exclude_default_externs\"),\n+    EXTERNS_URL(\"externs_url\"),\n+    EXTERNS_CODE(\"js_externs\"),\n+    COMPILATION_LEVEL(\"compilation_level\"),\n+    OUTPUT_FORMAT(\"output_format\"),\n+    OUTPUT_INFO(\"output_info\"),\n+    OUTPUT_FILE_NAME(\"output_file_name\"),\n+    OUTPUT_WRAPPER(\"output_wrapper\"),\n+    API_KEY(\"api_key\"),\n+    FORMATTING(\"formatting\"),\n+    WARNING_LEVEL(\"warning_level\"),\n+    USER_ID(\"uid\"),\n+    USE_CLOSURE(\"use_closure_library\"),\n+    BUILD_DEBUG(\"debug\"),\n+    CHARSET(\"charset\"),\n+    LANGUAGE(\"language\"),\n+\n+    // Old ROBOCOMP urls.\n+    RAWJS(\"rawjs\"),\n+    BASE(\"base\"),\n+    MODE(\"mode\"),\n+    SCRIPT(\"script\"),\n+    NOCACHE(\"nocache\") // Ignored.\n+    ;\n+\n+    private static final Set<String> permittedKeys = getPermittedKeys();\n+\n+    private static Set<String> getPermittedKeys() {\n+      Set<String> keys = Sets.newHashSet();\n+\n+      for (RequestKey key : RequestKey.values()) {\n+        keys.add(key.asGetParameter());\n+      }\n+      return keys;\n+    }\n+\n+    private final String asGetParameter;\n+\n+    private RequestKey(String asGetParameter) {\n+      this.asGetParameter = asGetParameter;\n+    }\n+\n+    public String asGetParameter() {\n+      return asGetParameter;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return asGetParameter;\n+    }\n+\n+    public static boolean isKeyValid(String key) {\n+      return permittedKeys.contains(key.toLowerCase());\n+    }\n+\n+    @Override\n+    public String getValue() {\n+      return asGetParameter;\n+    }\n+  }\n+\n+  /**\n+   * All the possible values for the OUTPUT_INFO key.\n+   */\n+  public static enum OutputInfoKey implements ProtocolEnum {\n+    VARIABLE_MAP(\"variable_map\"),\n+    COMPILED_CODE(\"compiled_code\"),\n+    WARNINGS(\"warnings\"),\n+    ERRORS(\"errors\"),\n+    STATISTICS(\"statistics\"),\n+    ;\n+\n+    private final String value;\n+\n+    private OutputInfoKey(String value) {\n+      this.value = value;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+      return value;\n+    }\n+  }\n+\n+  /**\n+   * All the possible values for the FORMATTING key.\n+   */\n+  public static enum FormattingKey implements ProtocolEnum {\n+    PRETTY_PRINT(\"pretty_print\"),\n+    PRINT_INPUT_DELIMITER(\"print_input_delimiter\"),\n+    ;\n+\n+    private final String value;\n+\n+    private FormattingKey(String value) {\n+      this.value = value;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+      return value;\n+    }\n+  }\n+\n+  public static enum CompilationLevelKey implements ProtocolEnum {\n+    WHITESPACE_ONLY(\"whitespace_only\"),\n+    SIMPLE_OPTIMIZATIONS(\"simple_optimizations\"),\n+    ADVANCED_OPTIMIZATIONS(\"advanced_optimizations\"),\n+    ;\n+\n+    private final String value;\n+\n+    CompilationLevelKey(String value) {\n+      this.value = value;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+      return value;\n+    }\n+  }\n+\n+  public static enum WarningLevelKey implements ProtocolEnum {\n+    QUIET(\"quiet\"),\n+    DEFAULT(\"default\"),\n+    VERBOSE(\"verbose\"),\n+    ;\n+\n+    private final String value;\n+\n+    private WarningLevelKey(String value) {\n+      this.value = value;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+      return value;\n+    }\n+  }\n+\n+  public static enum OutputFormatKey implements ProtocolEnum {\n+    TEXT(\"text\"),\n+    XML(\"xml\"),\n+    JSON(\"json\"),\n+    ;\n+\n+    private final String value;\n+\n+    private OutputFormatKey(String value) {\n+      this.value = value;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+      return value;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return getValue();\n+    }\n+  }\n+\n+  /**\n+   * Fields in the JSON response from the ApiKeyGenerationServlet.\n+   */\n+  public static enum ApiKeyResponse implements ProtocolEnum {\n+    API_KEY(\"api_key\"),\n+    ;\n+\n+    private final String responseParam;\n+\n+    ApiKeyResponse(String responseParam) {\n+      this.responseParam = responseParam;\n+    }\n+\n+    /**\n+     * Name of the key as it appears in the JSON.\n+     */\n+    public String getResponseParam() {\n+      return responseParam;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return getResponseParam();\n+    }\n+\n+    @Override\n+    public String getValue() {\n+      return getResponseParam();\n+    }\n+  }\n+\n+  /**\n+   * All the xml/json tags that can be returned by the backend if xml or json is\n+   * selected as the output mode.\n+   */\n+  public static enum ResponseTag implements ProtocolEnum {\n+    ROOT_TAG(\"compilationResult\"),\n+    COMPILED_CODE_TAG(\"compiledCode\"),\n+    WARNINGS_TAG(\"warnings\"),\n+    WARNING_TAG(\"warning\"),\n+    ERRORS_TAG(\"errors\"),\n+    ERROR_TAG(\"error\"),\n+    ERROR_LINE_NO_ATTR(\"lineno\"),\n+    ERROR_LINE_ATTR(\"line\"),\n+    // Charno is negative if error occurred outside range of columns that\n+    // JSCompiler records.  Change the sign of the value to find the\n+    // maximum column represented.\n+    // Note that JSCompiler uses -1 as an \"I don't know\" state, and it can\n+    // also turn up occasionally.\n+    ERROR_CHAR_ATTR(\"charno\"),\n+    ERROR_FILE_ATTR(\"file\"),\n+    ERROR_TYPE_ATTR(\"type\"),\n+    STATS_TAG(\"statistics\"),\n+    ORIGINAL_SIZE_TAG(\"originalSize\"),\n+    ORIGINAL_GZIP_SIZE_TAG(\"originalGzipSize\"),\n+    COMPRESSED_SIZE_TAG(\"compressedSize\"),\n+    COMPRESSED_GZIP_SIZE_TAG(\"compressedGzipSize\"),\n+    COMPILE_TIME_TAG(\"compileTime\"),\n+    SERVER_ERRORS_TAG(\"serverErrors\"),\n+    SERVER_ERROR_TAG(\"error\"),\n+    SERVER_ERROR_CODE_ATTR(\"code\"),\n+    VARIABLE_MAP(\"variableMap\"),\n+    VARIABLE_MAP_ENTRY(\"variableMapEntry\"),\n+    ORIGINAL_NAME_ATTR(\"originalName\"),\n+    NEW_NAME_ATTR(\"newName\"),\n+    OUTPUT_FILE_PATH(\"outputFilePath\"),\n+    ;\n+\n+    private final String responseTag;\n+\n+    private ResponseTag(String responseTag) {\n+      this.responseTag = responseTag;\n+    }\n+\n+    public String getResponseTag() {\n+      return responseTag;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return getResponseTag();\n+    }\n+\n+    @Override\n+    public String getValue() {\n+      return getResponseTag();\n+    }\n+  }\n+\n+  /**\n+   * Properties key for getting the maximum input file size that may be\n+   * compiled by the service.  This is parameterized so we can have different\n+   * values for inside and outside Google.\n+   * The value should be a string representation of an integer representing\n+   * the maximum input size in bytes.\n+   */\n+  public static final String MAX_INPUT_SIZE_KEY =\n+      \"com.google.javascript.jscomp.webservice.maximumInputSize\";\n+\n+  /**\n+   * Fallback value in case no setting is provided.\n+   */\n+  public static final int FALLBACK_MAX_INPUT_SIZE =\n+      500 * 1024;\n+\n+  /**\n+   * Hard limit on input size set at execution time from the MAX_INPUT_SIZE_KEY\n+   * property.\n+   */\n+  private static int maxInputSize;\n+\n+  /**\n+   * Initialize maxInputSize to the value from the MAX_INPUT_SIZE_KEY property\n+   * at startup.\n+   */\n+  static {\n+    resetMaximumInputSize();\n+  }\n+\n+  /**\n+   * Find the maximum input size that this configuration of the web service\n+   * allows.\n+   * @return maximum input size permitted (in bytes)\n+   */\n+  public static final int maximumInputSize() {\n+    // Limit the number of files downloaded if they are too big to compile.\n+    return maxInputSize;\n+  }\n+\n+  /**\n+   * Reset the maximum input size so that the property key is rechecked.\n+   * This is needed for testing code because we are caching the maximum\n+   * input size value.\n+   */\n+  public static final void resetMaximumInputSize() {\n+    String maxInputSizeStr = System.getProperty(Protocol.MAX_INPUT_SIZE_KEY);\n+\n+    if (maxInputSizeStr == null) {\n+      maxInputSize = Protocol.FALLBACK_MAX_INPUT_SIZE;\n+    } else {\n+      maxInputSize = Integer.parseInt(maxInputSizeStr);\n+    }\n+  }\n+}", "timestamp": 1348026829, "metainfo": ""}