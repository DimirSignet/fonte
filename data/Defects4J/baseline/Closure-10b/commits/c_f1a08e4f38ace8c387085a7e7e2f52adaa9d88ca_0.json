{"sha": "f1a08e4f38ace8c387085a7e7e2f52adaa9d88ca", "log": "type inference on the object part of a for..in  R=johnlenz DELTA=80  (76 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=147   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n           if (NodeUtil.isForIn(source)) {\n             // item is assigned a property name, so its type should be string.\n             Node item = source.getFirstChild();\n+            Node obj = item.getNext();\n+\n+            FlowScope informed = traverse(obj, output.createChildFlowScope());\n+\n             if (item.getType() == Token.VAR) {\n               item = item.getFirstChild();\n             }\n             if (item.getType() == Token.NAME) {\n-              FlowScope informed = output.createChildFlowScope();\n-              redeclare(informed, item.getString(),\n-                  getNativeType(STRING_TYPE));\n-              newScope = informed;\n+              JSType iterKeyType = getNativeType(STRING_TYPE);\n+              ObjectType objType = getJSType(obj).dereference();\n+              JSType objIndexType = objType == null ?\n+                  null : objType.getIndexType();\n+              if (objIndexType != null && !objIndexType.isUnknownType()) {\n+                JSType narrowedKeyType =\n+                    iterKeyType.getGreatestSubtype(objIndexType);\n+                if (!narrowedKeyType.isEmptyType()) {\n+                  iterKeyType = narrowedKeyType;\n+                }\n+              }\n+              redeclare(informed, item.getString(), iterKeyType);\n             }\n+            newScope = informed;\n             break;\n           }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"actual parameter 1 of g does not match formal parameter\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n+  }\n+\n+  public void testForIn1() throws Exception {\n+    testTypes(\n+        \"/** @param {boolean} x */ function f(x) {}\" +\n+        \"for (var k in {}) {\" +\n+        \"  f(k);\" +\n+        \"}\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n+        \"found   : string\\n\" +\n+        \"required: boolean\");\n+  }\n+\n+  public void testForIn2() throws Exception {\n+    testTypes(\n+        \"/** @param {boolean} x */ function f(x) {}\" +\n+        \"/** @enum {string} */ var E = {FOO: 'bar'};\" +\n+        \"/** @type {Object.<E, string>} */ var obj = {};\" +\n+        \"var k = null;\" +\n+        \"for (k in obj) {\" +\n+        \"  f(k);\" +\n+        \"}\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n+        \"found   : E.<string>\\n\" +\n+        \"required: boolean\");\n+  }\n+\n+  public void testForIn3() throws Exception {\n+    testTypes(\n+        \"/** @param {boolean} x */ function f(x) {}\" +\n+        \"/** @type {Object.<number>} */ var obj = {};\" +\n+        \"for (var k in obj) {\" +\n+        \"  f(obj[k]);\" +\n+        \"}\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n+        \"found   : number\\n\" +\n+        \"required: boolean\");\n+  }\n+\n+  public void testForIn4() throws Exception {\n+    testTypes(\n+        \"/** @param {boolean} x */ function f(x) {}\" +\n+        \"/** @enum {string} */ var E = {FOO: 'bar'};\" +\n+        \"/** @type {Object.<E, Array>} */ var obj = {};\" +\n+        \"for (var k in obj) {\" +\n+        \"  f(obj[k]);\" +\n+        \"}\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n+        \"found   : (Array|null)\\n\" +\n+        \"required: boolean\");\n+  }\n+\n+  public void testForIn5() throws Exception {\n+    testTypes(\n+        \"/** @param {boolean} x */ function f(x) {}\" +\n+        \"/** @constructor */ var E = function(){};\" +\n+        \"/** @type {Object.<E, number>} */ var obj = {};\" +\n+        \"for (var k in obj) {\" +\n+        \"  f(k);\" +\n+        \"}\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n+        \"found   : string\\n\" +\n+        \"required: boolean\");\n   }\n \n   // TODO(nicksantos): change this to something that makes sense.", "timestamp": 1292452634, "metainfo": ""}