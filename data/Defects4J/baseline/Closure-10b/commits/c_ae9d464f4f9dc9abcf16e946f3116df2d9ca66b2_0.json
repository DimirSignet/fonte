{"sha": "ae9d464f4f9dc9abcf16e946f3116df2d9ca66b2", "log": "Loosen up interface checks  R=johnlenz DELTA=28  (25 added, 2 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4219   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n \n     String abstractMethodName =\n         compiler.getCodingConvention().getAbstractMethodName();\n-    if (!rvalueType.isOrdinaryFunction() &&\n-        !(rvalue.isQualifiedName() &&\n-          rvalue.getQualifiedName().equals(abstractMethodName))) {\n+    if (!rvalueType.isFunctionType()) {\n       // This is bad i18n style but we don't localize our compiler errors.\n       String abstractMethodMessage = (abstractMethodName != null)\n          ? \", or \" + abstractMethodName\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"goog.SubDisposable = function() {};\" +\n         \"/** @inheritDoc */ \" +\n         \"goog.SubDisposable.prototype.dispose = function() {};\");\n+  }\n+\n+  public void testGoodImplements5() throws Exception {\n+    testTypes(\n+        \"/** @interface */\\n\" +\n+        \"goog.Disposable = function() {};\" +\n+        \"/** @type {Function} */\" +\n+        \"goog.Disposable.prototype.dispose = function() {};\" +\n+        \"/** @implements {goog.Disposable}\\n * @constructor */\" +\n+        \"goog.SubDisposable = function() {};\" +\n+        \"/** @param {number} key \\n @override */ \" +\n+        \"goog.SubDisposable.prototype.dispose = function(key) {};\");\n+  }\n+\n+  public void testGoodImplements6() throws Exception {\n+    testTypes(\n+        \"var myNullFunction = function() {};\" +\n+        \"/** @interface */\\n\" +\n+        \"goog.Disposable = function() {};\" +\n+        \"/** @return {number} */\" +\n+        \"goog.Disposable.prototype.dispose = myNullFunction;\" +\n+        \"/** @implements {goog.Disposable}\\n * @constructor */\" +\n+        \"goog.SubDisposable = function() {};\" +\n+        \"/** @return {number} \\n @override */ \" +\n+        \"goog.SubDisposable.prototype.dispose = function() { return 0; };\");\n   }\n \n   public void testBadImplements1() throws Exception {", "timestamp": 1329262989, "metainfo": ""}