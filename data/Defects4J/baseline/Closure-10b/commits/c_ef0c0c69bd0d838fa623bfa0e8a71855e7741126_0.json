{"sha": "ef0c0c69bd0d838fa623bfa0e8a71855e7741126", "log": "Interface data members part 2:  Allow type checks on implementing class declarations without \"@override\".   R=pupius,nicksantos DELTA=95  (59 added, 32 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=855001   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n               HIDDEN_INTERFACE_PROPERTY, propertyName,\n               interfaceType.getTopMostDefiningType(propertyName).toString()));\n         }\n-        if (!declaredOverride) {\n-          continue;\n-        }\n-        // @override is present and we have to check that it is ok\n+        // Check that it is ok\n         if (interfaceHasProperty) {\n           JSType interfacePropType =\n               interfaceType.getPrototype().getPropertyType(propertyName);\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n \n   private CheckLevel reportMissingOverrides = CheckLevel.WARNING;\n \n+  @Override\n   public void setUp() throws Exception {\n     super.setUp();\n     reportMissingOverrides = CheckLevel.WARNING;\n   //      \"interface members can only be plain functions\");\n   //}\n \n-  public void testDataPropertyOnInterface2() throws Exception {\n+  public void testDataPropertyOnInterface1() throws Exception {\n     testTypes(\"/** @interface */ function T() {};\\n\" +\n         \"/** @type {number} */T.prototype.x;\");\n+  }\n+\n+  public void testDataPropertyOnInterface2() throws Exception {\n+    reportMissingOverrides = CheckLevel.OFF;\n+    testTypes(\"/** @interface */ function T() {};\\n\" +\n+        \"/** @type {number} */T.prototype.x;\\n\" +\n+        \"/** @constructor \\n\" +\n+        \" *  @implements {T} \\n\" +\n+        \" */\\n\" +\n+        \"function C() {}\\n\" +\n+        \"C.prototype.x = 'foo';\",\n+        \"mismatch of the x property type and the type of the property it \" +\n+        \"overrides from interface T\\n\" +\n+        \"original: number\\n\" +\n+        \"override: string\");\n+  }\n+\n+  public void testDataPropertyOnInterface3() throws Exception {\n+    testTypes(\"/** @interface */ function T() {};\\n\" +\n+        \"/** @type {number} */T.prototype.x;\\n\" +\n+        \"/** @constructor \\n\" +\n+        \" *  @implements {T} \\n\" +\n+        \" */\\n\" +\n+        \"function C() {}\\n\" +\n+        \"/** @override */\\n\" +\n+        \"C.prototype.x = 'foo';\",\n+        \"mismatch of the x property type and the type of the property it \" +\n+        \"overrides from interface T\\n\" +\n+        \"original: number\\n\" +\n+        \"override: string\");\n   }\n \n   public void testWarnDataPropertyOnInterface3() throws Exception {", "timestamp": 1288303912, "metainfo": ""}