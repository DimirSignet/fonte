{"sha": "0c3fdb92840718de9f9da085b818efb419cfb927", "log": "Change on 2010/04/20 by john          Move Normalize from the end of \"check\" to the beginning of \"optimize\",         which is more consistent with how we are using it.          R=nick         DELTA=14  (7 added, 7 deleted, 0 changed)  Change on 2010/04/20 by john          When pretty printing, output empty blocks instead of semicolons for if, for, etc so that         reparsing doesn't generate empty block warnings.          R=robert         DELTA=12  (8 added, 0 deleted, 4 changed)    Revision created by MOE tool push_codebase. MOE_MIGRATION=ivhzkq   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n     if (n.getType() == Token.BLOCK ) {\n       int count = getNonEmptyChildCount(n);\n       if (count == 0) {\n-        cc.endStatement(true);\n+        if (cc.shouldPreserveExtraBlocks()) {\n+          cc.beginBlock();\n+          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n+        } else {\n+          cc.endStatement(true);\n+        }\n         return;\n       }\n \n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     }\n \n     runCustomPasses(CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);\n-\n-    // Ideally, this pass should be the first pass run, however:\n-    // 1) VariableReferenceCheck reports unexpected warnings if Normalize\n-    // is done first.\n-    // 2) ReplaceMessages, stripCode, and potentially custom passes rely on\n-    // unmodified local names.\n-    normalize();\n   }\n \n   private void externExports() {\n   //------------------------------------------------------------------------\n \n   public void optimize() {\n+    // Ideally, this pass should be the first pass run, however:\n+    // 1) VariableReferenceCheck reports unexpected warnings if Normalize\n+    // is done first.    \n+    // 2) ReplaceMessages, stripCode, and potentially custom passes rely on\n+    // unmodified local names.\n+    normalize();    \n+    \n     PhaseOptimizer phaseOptimizer = new PhaseOptimizer(this, tracker);\n     if (options.devMode == DevMode.EVERY_PASS) {\n       phaseOptimizer.setSanityCheck(sanityCheck);\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n     // Check we correctly handle putting brackets around all if clauses so\n     // we can put breakpoints inside statements.\n     assertPrettyPrint(\"if (1) {}\",\n-        \"if(1);\");\n+        \"if(1) {\\n\" +\n+        \"}\\n\");\n     assertPrettyPrint(\"if (1) {alert(\\\"\\\");}\",\n         \"if(1) {\\n\" +\n         \"  alert(\\\"\\\")\\n\" +\n \n     // Do we put else clauses in blocks?\n     assertPrettyPrint(\"if (1) {} else {alert(a);}\",\n-        \"if(1);else {\\n  alert(a)\\n}\\n\");\n+        \"if(1) {\\n\" +\n+        \"}else {\\n  alert(a)\\n}\\n\");\n \n     // Do we add blocks to else clauses?\n     assertPrettyPrint(\"if (1) alert(a); else alert(b);\",\n          \"  alert()\\n\" +\n          \"}\\n\");\n     assertPrettyPrint(\"for(;;) {}\",\n-        \"for(;;);\");\n+        \"for(;;) {\\n\" +\n+        \"}\\n\");\n     assertPrettyPrint(\"for(;;) { alert(); alert(); }\",\n         \"for(;;) {\\n\" +\n         \"  alert();\\n\" +", "timestamp": 1271799552, "metainfo": ""}