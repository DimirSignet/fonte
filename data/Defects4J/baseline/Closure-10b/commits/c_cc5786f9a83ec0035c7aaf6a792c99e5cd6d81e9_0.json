{"sha": "cc5786f9a83ec0035c7aaf6a792c99e5cd6d81e9", "log": "fix a regression in marker placement  R=jschorr DELTA=21  (3 added, 15 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2229   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n                   } else {\n                     skipEOLs();\n                     token = next();\n-                    typeNode = parseAndRecordTypeNode(token, lineno, charno);\n+                    typeNode = parseAndRecordTypeNode(token);\n                   }\n \n                   if (annotation == Annotation.THIS) {\n   private Node parseAndRecordTypeNode(JsDocToken token, boolean matchingLC) {\n     return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(),\n         matchingLC, false);\n-  }\n-\n-  /**\n-   * Looks for a type expression at the current token and if found,\n-   * returns it. Note that this method consumes input.\n-   *\n-   * @param token The current token.\n-   * @param lineno The line of the type expression.\n-   * @param startCharno The starting character position of the type expression.\n-   * @return The type expression found or null if none.\n-   */\n-  private Node parseAndRecordTypeNode(JsDocToken token, int lineno,\n-      int startCharno) {\n-    return parseAndRecordTypeNode(token, lineno, startCharno,\n-        token == JsDocToken.LC, false);\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n         parse(\"@return {Foo} some long \\n * multiline\" +\n               \" \\n * description */\", true);\n \n-    assertDocumentationInMarker(\n-        assertAnnotationMarker(jsdoc, \"return\", 0, 0),\n+    JSDocInfo.Marker returnDoc =\n+        assertAnnotationMarker(jsdoc, \"return\", 0, 0);\n+    assertDocumentationInMarker(returnDoc,\n         \"some long multiline description\", 13, 2, 15);\n+    assertEquals(8, returnDoc.type.getPositionOnStartLine());\n+    assertEquals(12, returnDoc.type.getPositionOnEndLine());\n   }\n \n   public void testParseWithMarkers4() throws Exception {", "timestamp": 1307632713, "metainfo": ""}