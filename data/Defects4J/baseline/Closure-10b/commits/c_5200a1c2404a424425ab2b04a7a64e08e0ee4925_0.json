{"sha": "5200a1c2404a424425ab2b04a7a64e08e0ee4925", "log": "Cleanup rhino_ast warnings.  R=acleung DELTA=52  (30 added, 2 deleted, 20 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2828   ", "commit": "\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n       this.next = next;\n     }\n \n+    @Override\n     public int getType() {\n       return propType;\n     }\n \n+    @Override\n     public PropListItem getNext() {\n       return next;\n     }\n \n+    @Override\n     public abstract PropListItem chain(PropListItem next);\n   }\n \n       boolean printSource,\n       boolean printAnnotations,\n       boolean printType) {\n-    if (Token.printTrees) {\n+    if (Token.shouldPrintTrees()) {\n         StringBuilder sb = new StringBuilder();\n         toString(sb, printSource, printAnnotations, printType);\n         return sb.toString();\n       this.used = false;\n     }\n \n+    @Override\n     public Iterator<Node> iterator() {\n       if (!used) {\n         used = true;\n       }\n     }\n \n+    @Override\n     public boolean hasNext() {\n       return current != null;\n     }\n \n+    @Override\n     public Node next() {\n       if (current == null) {\n         throw new NoSuchElementException();\n       }\n     }\n \n+    @Override\n     public void remove() {\n       throw new UnsupportedOperationException();\n     }\n       this.cur = cur;\n     }\n \n+    @Override\n     public Iterator<Node> iterator() {\n       return new Iterator<Node>() {\n+        @Override\n         public boolean hasNext() {\n           return cur != null;\n         }\n \n+        @Override\n         public Node next() {\n           if (!hasNext()) throw new NoSuchElementException();\n           Node n = cur;\n           return n;\n         }\n \n+        @Override\n         public void remove() {\n           throw new UnsupportedOperationException();\n         }\n    * Helper function to ignore differences in Node subclasses that are no longer\n    * used.\n    */\n-  @SuppressWarnings(\"unchecked\")\n+  @SuppressWarnings(\"rawtypes\")\n   static private Class getNodeClass(Node n) {\n     Class c = n.getClass();\n     if (c == FunctionNode.class || c == ScriptOrFnNode.class) {\n--- a/src/com/google/javascript/rhino/ObjToIntMap.java\n+++ b/src/com/google/javascript/rhino/ObjToIntMap.java\n         int i;\n         for (i = 2; (1 << i) < minimalCapacity; ++i) { }\n         power = i;\n-        if (check && power < 2) Kit.codeBug();\n+        assert power >= 2;\n     }\n \n     public boolean isEmpty() {\n // Insert key that is not present to table without deleted entries\n // and enough free space\n     private int insertNewKey(Object key, int hash) {\n-        if (check && occupiedCount != keyCount) Kit.codeBug();\n-        if (check && keyCount == 1 << power) Kit.codeBug();\n+        assert occupiedCount == keyCount;\n+        assert keyCount != 1 << power;\n         int fraction = hash * A;\n         int index = fraction >>> (32 - power);\n         int N = 1 << power;\n             int step = tableLookupStep(fraction, mask, power);\n             int firstIndex = index;\n             do {\n-                if (check && keys[index] == DELETED) Kit.codeBug();\n+                assert keys[index] != DELETED;\n                 index = (index + step) & mask;\n-                if (check && firstIndex == index) Kit.codeBug();\n+                assert firstIndex != index;\n             } while (keys[index] != null);\n         }\n         keys[index] = key;\n \n     private void rehashTable() {\n         if (keys == null) {\n-            if (check && keyCount != 0) Kit.codeBug();\n-            if (check && occupiedCount != 0) Kit.codeBug();\n+            assert keyCount == 0;\n+            assert occupiedCount == 0;\n             int N = 1 << power;\n             keys = new Object[N];\n             values = new int[2 * N];\n             }\n         }\n         // Inserting of new key\n-        if (check && keys != null && keys[index] != null)\n-            Kit.codeBug();\n+        assert keys == null || keys[index] == null;\n         if (firstDeleted >= 0) {\n             index = firstDeleted;\n         }\n--- a/src/com/google/javascript/rhino/RhinoException.java\n+++ b/src/com/google/javascript/rhino/RhinoException.java\n     public String getScriptStackTrace()\n     {\n         return getScriptStackTrace(new FilenameFilter() {\n+            @Override\n             public boolean accept(File dir, String name) {\n                 return name.endsWith(\".js\");\n             }\n--- a/src/com/google/javascript/rhino/SimpleErrorReporter.java\n+++ b/src/com/google/javascript/rhino/SimpleErrorReporter.java\n     private List<String> warnings = null;\n     private List<String> errors = null;\n \n+    @Override\n     public void warning(String message, String sourceName, int line,\n                         String lineSource, int lineOffset)\n     {\n             message, sourceName, line, lineSource, lineOffset));\n     }\n \n+    @Override\n     public void error(String message, String sourceName, int line,\n                       String lineSource, int lineOffset)\n     {\n             message, sourceName, line, lineSource, lineOffset));\n     }\n \n+    @Override\n     public EvaluatorException runtimeError(\n         String message, String sourceName, int line, String lineSource,\n         int lineOffset)\n--- a/src/com/google/javascript/rhino/Token.java\n+++ b/src/com/google/javascript/rhino/Token.java\n \n     // debug flags\n     public static final boolean printTrees = true;\n-    static final boolean printICode = false;\n-    static final boolean printNames = printTrees || printICode;\n+    public static boolean shouldPrintTrees() {\n+      return printTrees;\n+    }\n+    static final boolean printNames = printTrees;\n+\n \n     /**\n      * Token types.  These values correspond to JSTokenType values in\n--- a/src/com/google/javascript/rhino/TokenStream.java\n+++ b/src/com/google/javascript/rhino/TokenStream.java\n      */\n     String tokenToString(int token)\n     {\n-        if (Token.printTrees) {\n+        if (Token.shouldPrintTrees()) {\n             String name = Token.name(token);\n \n             switch (token) {\n--- a/src/com/google/javascript/rhino/UintMap.java\n+++ b/src/com/google/javascript/rhino/UintMap.java\n         int i;\n         for (i = 2; (1 << i) < minimalCapacity; ++i) { }\n         power = i;\n-        if (check && power < 2) Kit.codeBug();\n+        assert !(power < 2);\n     }\n \n     public boolean isEmpty() {\n // Insert key that is not present to table without deleted entries\n // and enough free space\n     private int insertNewKey(int key) {\n-        if (check && occupiedCount != keyCount) Kit.codeBug();\n-        if (check && keyCount == 1 << power) Kit.codeBug();\n+        assert occupiedCount == keyCount;\n+        assert keyCount != 1 << power;\n         int[] keys = this.keys;\n         int fraction = key * A;\n         int index = fraction >>> (32 - power);\n             int step = tableLookupStep(fraction, mask, power);\n             int firstIndex = index;\n             do {\n-                if (check && keys[index] == DELETED) Kit.codeBug();\n+                assert keys[index] != DELETED;\n                 index = (index + step) & mask;\n-                if (check && firstIndex == index) Kit.codeBug();\n+                assert firstIndex != index;\n             } while (keys[index] != EMPTY);\n         }\n         keys[index] = key;\n             }\n         }\n         // Inserting of new key\n-        if (check && keys != null && keys[index] != EMPTY)\n-            Kit.codeBug();\n+        assert (keys == null || keys[index] == EMPTY);\n         if (firstDeleted >= 0) {\n             index = firstDeleted;\n         }\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n    * method of the union type since this output is used in tests.\n    */\n   static final Comparator<JSType> ALPHA = new Comparator<JSType>() {\n+    @Override\n     public int compare(JSType t1, JSType t2) {\n       return t1.toString().compareTo(t2.toString());\n     }\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n     return false;\n   }\n \n-  /** @see #createFromTypeNodes(Node, String, StaticScope, boolean) */\n+  /** @see #createFromTypeNodes(Node, String, StaticScope) */\n   private JSType createFromTypeNodesInternal(Node n, String sourceName,\n       StaticScope<JSType> scope) {\n     switch (n.getType()) {\n--- a/src/com/google/javascript/rhino/jstype/SimpleSlot.java\n+++ b/src/com/google/javascript/rhino/jstype/SimpleSlot.java\n     this.inferred = inferred;\n   }\n \n+  @Override\n   public String getName() {\n     return name;\n   }\n \n+  @Override\n   public JSType getType() {\n     return type;\n   }\n \n+  @Override\n   public boolean isTypeInferred() {\n     return inferred;\n   }\n \n+  @Override\n   public StaticReference<JSType> getDeclaration() {\n     return null;\n   }\n--- a/src/com/google/javascript/rhino/testing/AbstractStaticScope.java\n+++ b/src/com/google/javascript/rhino/testing/AbstractStaticScope.java\n     return null;\n   }\n \n+  @Override\n   public abstract StaticSlot<T> getSlot(String name);\n \n   @Override\n--- a/src/com/google/javascript/rhino/testing/TestErrorReporter.java\n+++ b/src/com/google/javascript/rhino/testing/TestErrorReporter.java\n     warningsIndex = 0;\n   }\n \n+  @Override\n   public void error(String message, String sourceName, int line,\n       String lineSource, int lineOffset) {\n     if (errors != null && errorsIndex < errors.length) {\n     }\n   }\n \n+  @Override\n   public void warning(String message, String sourceName, int line,\n       String lineSource, int lineOffset) {\n     if (warnings != null && warningsIndex < warnings.length) {\n     }\n   }\n \n+  @Override\n   public EvaluatorException runtimeError(String message, String sourceName,\n       int line, String lineSource, int lineOffset) {\n     throw new UnsupportedOperationException();\n--- a/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java\n     final JSTypeRegistry typeRegistry = new JSTypeRegistry(reporter);\n \n     StaticScope<JSType> scope = new AbstractStaticScope<JSType>() {\n+          @Override\n           public StaticSlot<JSType> getSlot(final String name) {\n             return new SimpleSlot(\n                 name,\n     final JSTypeRegistry typeRegistry = new JSTypeRegistry(reporter);\n \n     StaticScope<JSType> scope = new AbstractStaticScope<JSType>() {\n+          @Override\n           public StaticSlot<JSType> getSlot(final String name) {\n             return new SimpleSlot(\n                 name,\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n     googObject.defineDeclaredProperty(\"Bar\", googBar, null);\n \n     namedGoogBar.resolve(null, new AbstractStaticScope<JSType>() {\n+          @Override\n           public StaticSlot<JSType> getSlot(String name) {\n             if (\"goog\".equals(name)) {\n               return new SimpleSlot(\"goog\", googObject, false);", "timestamp": 1311888241, "metainfo": ""}