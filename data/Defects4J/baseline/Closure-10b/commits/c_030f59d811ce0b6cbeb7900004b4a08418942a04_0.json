{"sha": "030f59d811ce0b6cbeb7900004b4a08418942a04", "log": "a much cleaner way to do message formatting. (Nick) r=robert  Revision created by MOE tool push_codebase. MOE_MIGRATION=   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ErrorFormat.java\n+++ b/src/com/google/javascript/jscomp/ErrorFormat.java\n     @Override\n     public MessageFormatter toFormatter(\n         SourceExcerptProvider source, boolean colorize) {\n-      return new SourcelessMessageFormatter();\n+      LightweightMessageFormatter formatter =\n+          LightweightMessageFormatter.withoutSource();\n+      formatter.setColorize(colorize);\n+      return formatter;\n     }\n   };\n \n    */\n   public abstract MessageFormatter toFormatter(\n       SourceExcerptProvider source, boolean colorize);\n-\n-  // A message formatter that does not know how to get source information.\n-  private static class SourcelessMessageFormatter\n-      extends AbstractMessageFormatter {\n-\n-    private SourcelessMessageFormatter() {\n-      super(null);\n-    }\n-\n-    @Override\n-    public String formatError(JSError error) {\n-      return format(error, false);\n-    }\n-\n-    @Override\n-    public String formatWarning(JSError warning) {\n-      return format(warning, true);\n-    }\n-\n-    private String format(JSError error, boolean warning) {\n-      // formatting the message\n-      StringBuilder b = new StringBuilder();\n-      if (error.sourceName != null) {\n-        b.append(error.sourceName);\n-        if (error.lineNumber > 0) {\n-          b.append(':');\n-          b.append(error.lineNumber);\n-        }\n-        b.append(\": \");\n-      }\n-\n-      b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n-      b.append(\" - \");\n-\n-      b.append(error.description);\n-      b.append('\\n');\n-      return b.toString();\n-    }\n-  }\n }\n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n \n import static com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE;\n \n+import com.google.common.base.Preconditions;\n import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.jscomp.SourceExcerptProvider.ExcerptFormatter;\n import com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt;\n   private static final ExcerptFormatter excerptFormatter =\n       new LineNumberingFormatter();\n \n+  /**\n+   * A constructor for when the client doesn't care about source information.\n+   */\n+  private LightweightMessageFormatter() {\n+    super(null);\n+    this.excerpt = LINE;\n+  }\n+\n   public LightweightMessageFormatter(SourceExcerptProvider source) {\n     this(source, LINE);\n   }\n   public LightweightMessageFormatter(SourceExcerptProvider source,\n       SourceExcerpt excerpt) {\n     super(source);\n+    Preconditions.checkNotNull(source);\n     this.excerpt = excerpt;\n+  }\n+\n+  static LightweightMessageFormatter withoutSource() {\n+    return new LightweightMessageFormatter();\n   }\n \n   public String formatError(JSError error) {\n   private String format(JSError error, boolean warning) {\n     // extract source excerpt\n     SourceExcerptProvider source = getSource();\n-    String sourceExcerpt = excerpt.get(\n-        source, error.sourceName, error.lineNumber, excerptFormatter);\n+    String sourceExcerpt = source == null ? null :\n+        excerpt.get(\n+            source, error.sourceName, error.lineNumber, excerptFormatter);\n \n     // formatting the message\n     StringBuilder b = new StringBuilder();", "timestamp": 1269017488, "metainfo": ""}