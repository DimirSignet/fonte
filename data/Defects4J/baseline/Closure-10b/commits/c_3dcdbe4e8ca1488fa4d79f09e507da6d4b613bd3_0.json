{"sha": "3dcdbe4e8ca1488fa4d79f09e507da6d4b613bd3", "log": "Fix for-in handling in NodeUtil.isExpressionUnconditionallyExecuted and add a unit test.  R=nicksantos DELTA=92  (86 added, 0 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4713   ", "commit": "\n--- a/src/com/google/javascript/jscomp/InlineProperties.java\n+++ b/src/com/google/javascript/jscomp/InlineProperties.java\n       if (!props.containsKey(propName)\n           && !isInvalidatingType(type)\n           && NodeUtil.isImmutableValue(value)\n-          && NodeUtil.isExpressionUnconditionallyExecuted(value)) {\n+          && NodeUtil.isExecutedExactlyOnce(value)) {\n         props.put(propName, new PropertyInfo(type, value));\n         return true;\n       }\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n \n   /**\n    * @param n The expression to check.\n-   * @return Whether the expression is unconditionally executed in the\n+   * @return Whether the expression is unconditionally executed only once in the\n    *     containing execution scope.\n    */\n-  static boolean isExpressionUnconditionallyExecuted(Node n) {\n+  static boolean isExecutedExactlyOnce(Node n) {\n     inspect: do {\n       Node parent = n.getParent();\n       switch (parent.getType()) {\n           // other ancestors may be conditional\n           continue inspect;\n         case Token.FOR:\n-          if (parent.getFirstChild() != n) {\n-            return false;\n+          if (NodeUtil.isForIn(parent)) {\n+            if (parent.getChildAtIndex(1) != n) {\n+              return false;\n+            }\n+          } else {\n+            if (parent.getFirstChild() != n) {\n+              return false;\n+            }\n           }\n           // other ancestors may be conditional\n           continue inspect;\n           return false;\n         case Token.TRY:\n           // Consider all code under a try/catch to be conditionally executed.\n-          return false;\n+          if (!hasFinally(parent) || parent.getLastChild() != n) {\n+            return false;\n+          }\n+          continue inspect;\n         case Token.CASE:\n         case Token.DEFAULT_CASE:\n           return false;\n--- a/test/com/google/javascript/jscomp/NodeUtilTest.java\n+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java\n     assertEquals(\"x\", getFunctionLValue(\"var x = (y, function() {});\"));\n   }\n \n+  public void testIsExecutedExactlyOnce() {\n+    assertEquals(true, executedOnceTestCase(\"x;\"));\n+\n+    assertEquals(true, executedOnceTestCase(\"x && 1;\"));\n+    assertEquals(false, executedOnceTestCase(\"1 && x;\"));\n+\n+    assertEquals(false, executedOnceTestCase(\"1 && (x && 1);\"));\n+\n+    assertEquals(true, executedOnceTestCase(\"x || 1;\"));\n+    assertEquals(false, executedOnceTestCase(\"1 || x;\"));\n+\n+    assertEquals(false, executedOnceTestCase(\"1 && (x || 1);\"));\n+\n+    assertEquals(true, executedOnceTestCase(\"x ? 1 : 2;\"));\n+    assertEquals(false, executedOnceTestCase(\"1 ? 1 : x;\"));\n+    assertEquals(false, executedOnceTestCase(\"1 ? x : 2;\"));\n+\n+    assertEquals(false, executedOnceTestCase(\"1 && (x ? 1 : 2);\"));\n+\n+    assertEquals(true, executedOnceTestCase(\"if (x) {}\"));\n+    assertEquals(false, executedOnceTestCase(\"if (true) {x;}\"));\n+    assertEquals(false, executedOnceTestCase(\"if (true) {} else {x;}\"));\n+\n+    assertEquals(false, executedOnceTestCase(\"if (1) { if (x) {} }\"));\n+\n+    assertEquals(true, executedOnceTestCase(\"for(x;;){}\"));\n+    assertEquals(false, executedOnceTestCase(\"for(;x;){}\"));\n+    assertEquals(false, executedOnceTestCase(\"for(;;x){}\"));\n+    assertEquals(false, executedOnceTestCase(\"for(;;){x;}\"));\n+\n+    assertEquals(false, executedOnceTestCase(\"if (1) { for(x;;){} }\"));\n+\n+    assertEquals(false, executedOnceTestCase(\"for(x in {}){}\"));\n+    assertEquals(true, executedOnceTestCase(\"for({}.a in x){}\"));\n+    assertEquals(false, executedOnceTestCase(\"for({}.a in {}){x}\"));\n+\n+    assertEquals(false, executedOnceTestCase(\"if (1) { for(x in {}){} }\"));\n+\n+    assertEquals(true, executedOnceTestCase(\"switch (x) {}\"));\n+    assertEquals(false, executedOnceTestCase(\"switch (1) {case x:}\"));\n+    assertEquals(false, executedOnceTestCase(\"switch (1) {case 1: x}\"));\n+    assertEquals(false, executedOnceTestCase(\"switch (1) {default: x}\"));\n+\n+    assertEquals(false, executedOnceTestCase(\"if (1) { switch (x) {} }\"));\n+\n+    assertEquals(false, executedOnceTestCase(\"while (x) {}\"));\n+    assertEquals(false, executedOnceTestCase(\"while (1) {x}\"));\n+\n+    assertEquals(false, executedOnceTestCase(\"do {} while (x)\"));\n+    assertEquals(false, executedOnceTestCase(\"do {x} while (1)\"));\n+\n+    assertEquals(false, executedOnceTestCase(\"try {x} catch (e) {}\"));\n+    assertEquals(false, executedOnceTestCase(\"try {} catch (e) {x}\"));\n+    assertEquals(true, executedOnceTestCase(\"try {} finally {x}\"));\n+\n+    assertEquals(false, executedOnceTestCase(\"if (1) { try {} finally {x} }\"));\n+  }\n+\n+  private boolean executedOnceTestCase(String code) {\n+    Node ast = parse(code);\n+    Node nameNode = getNameNode(ast, \"x\");\n+    return NodeUtil.isExecutedExactlyOnce(nameNode);\n+  }\n+\n   private String getFunctionLValue(String js) {\n     Node lVal = NodeUtil.getBestLValue(getFunctionNode(js));\n     return lVal == null ? null : lVal.getString();\n     }\n     return null;\n   }\n+\n+  static Node getNameNode(Node n, String name) {\n+    if (n.isName() && n.getString().equals(name)) {\n+      return n;\n+    }\n+    for (Node c : n.children()) {\n+      Node result = getNameNode(c, name);\n+      if (result != null) {\n+        return result;\n+      }\n+    }\n+    return null;\n+  }\n }", "timestamp": 1336512487, "metainfo": ""}