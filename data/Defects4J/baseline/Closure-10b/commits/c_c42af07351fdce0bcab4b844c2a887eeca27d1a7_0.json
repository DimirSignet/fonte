{"sha": "c42af07351fdce0bcab4b844c2a887eeca27d1a7", "log": "fix a compiler crash in a rare case  R=acleung DELTA=34  (21 added, 7 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3422   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n             FunctionType superClassCtor = fnType.getSuperClassConstructor();\n             StaticSlot<JSType> prototypeSlot = fnType.getSlot(\"prototype\");\n \n-            // It's not really important what node we declare the prototype\n-            // at. It's more important that the Var node is consistent with\n-            // the node that the type system uses internally.\n-            Node prototypeNode = n;\n-            if (prototypeSlot.getDeclaration() != null) {\n-              prototypeNode = prototypeSlot.getDeclaration().getNode();\n+            String prototypeName = variableName + \".prototype\";\n+\n+            // There are some rare cases where the prototype will already\n+            // be declared. See TypedScopeCreatorTest#testBogusPrototypeInit.\n+            // Fortunately, other warnings will complain if this happens.\n+            if (scopeToDeclareIn.getOwnSlot(prototypeName) == null) {\n+              // It's not really important what node we declare the prototype\n+              // at. It's more important that the Var node is consistent with\n+              // the node that the type system uses internally.\n+              Node prototypeNode = n;\n+              if (prototypeSlot.getDeclaration() != null) {\n+                prototypeNode = prototypeSlot.getDeclaration().getNode();\n+              }\n+\n+              scopeToDeclareIn.declare(prototypeName,\n+                  prototypeNode, prototypeSlot.getType(), input,\n+                  /* declared iff there's an explicit supertype */\n+                  superClassCtor == null ||\n+                  superClassCtor.getInstanceType().equals(\n+                      getNativeType(OBJECT_TYPE)));\n             }\n-\n-            scopeToDeclareIn.declare(variableName + \".prototype\",\n-                prototypeNode, prototypeSlot.getType(), input,\n-                /* declared iff there's an explicit supertype */\n-                superClassCtor == null ||\n-                superClassCtor.getInstanceType().equals(\n-                    getNativeType(OBJECT_TYPE)));\n \n             // Make sure the variable is initialized to something if\n             // it constructs itself.\n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n     assertTrue(foo.isPropertyTypeInferred(\"bar\"));\n   }\n \n+  public void testBogusPrototypeInit() {\n+    // This used to cause a compiler crash.\n+    testSame(\"/** @const */ var goog = {}; \" +\n+        \"goog.F = {}; /** @const */ goog.F.prototype = {};\" +\n+        \"/** @constructor */ goog.F = function() {};\");\n+  }\n+\n   public void testInferredPrototypeProperty1() {\n     testSame(\"/** @constructor */ var Foo = function() {};\" +\n         \"Foo.prototype.bar = 1; var x = new Foo();\");", "timestamp": 1317933933, "metainfo": ""}