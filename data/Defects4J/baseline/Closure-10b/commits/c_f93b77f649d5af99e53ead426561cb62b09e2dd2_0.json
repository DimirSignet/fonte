{"sha": "f93b77f649d5af99e53ead426561cb62b09e2dd2", "log": "Changes to the JSDoc parser for struct and dict annotations.  R=nicksantos DELTA=155  (145 added, 1 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5462   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/Annotation.java\n+++ b/src/com/google/javascript/jscomp/parsing/Annotation.java\n   DEFINE,\n   DEPRECATED,\n   DESC,\n+  DICT,\n   ENUM,\n   EXTENDS,\n   EXTERNS,\n   RETURN,\n   SEE,\n   SUPPRESS,\n+  STRUCT,\n   TEMPLATE,\n   THIS,\n   THROWS,\n       put(\"define\", Annotation.DEFINE).\n       put(\"deprecated\", Annotation.DEPRECATED).\n       put(\"desc\", Annotation.DESC).\n+      put(\"dict\", Annotation.DICT).\n       put(\"enum\", Annotation.ENUM).\n       put(\"export\", Annotation.EXPORT).\n       put(\"expose\", Annotation.EXPOSE).\n       put(\"return\", Annotation.RETURN).\n       put(\"returns\", Annotation.RETURN).\n       put(\"see\", Annotation.SEE).\n+      put(\"struct\", Annotation.STRUCT).\n       put(\"suppress\", Annotation.SUPPRESS).\n       put(\"template\", Annotation.TEMPLATE).\n       put(\"this\", Annotation.THIS).\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n                   if (!jsdocBuilder.recordConstancy()) {\n                     parser.addParserWarning(\"msg.jsdoc.const\",\n                         stream.getLineno(), stream.getCharno());\n+                  }\n+                  token = eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case STRUCT:\n+                  if (!jsdocBuilder.recordStruct()) {\n+                    parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n+                                          stream.getLineno(),\n+                                          stream.getCharno());\n+                  }\n+                  token = eatTokensUntilEOL();\n+                  continue retry;\n+\n+                case DICT:\n+                  if (!jsdocBuilder.recordDict()) {\n+                    parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n+                                          stream.getLineno(),\n+                                          stream.getCharno());\n                   }\n                   token = eatTokensUntilEOL();\n                   continue retry;\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n   private static final int MASK_IDGEN         = 0x00080000;\n   private static final int MASK_EXPOSE        = 0x00100000; // @expose\n \n+  private static final int MASK_STRUCT        = 0x00200000;\n+  private static final int MASK_DICT          = 0x00400000;\n+\n   // 3 bit type field stored in the top 3 bits of the most significant\n   // nibble.\n   private static final int MASK_TYPEFIELD    = 0xE0000000; // 1110...\n     setFlag(value, MASK_CONSTRUCTOR);\n   }\n \n+  void setStruct() {\n+    setFlag(true, MASK_STRUCT);\n+  }\n+\n+  void setDict() {\n+    setFlag(true, MASK_DICT);\n+  }\n+\n   void setDefine(boolean value) {\n     setFlag(value, MASK_DEFINE);\n   }\n    */\n   public boolean isConstructor() {\n     return getFlag(MASK_CONSTRUCTOR);\n+  }\n+\n+  /**\n+   * Returns whether the {@code @struct} annotation is present on this\n+   * {@link JSDocInfo}.\n+   */\n+  public boolean makesStructs() {\n+    return getFlag(MASK_STRUCT);\n+  }\n+\n+  /**\n+   * Returns whether the {@code @dict} annotation is present on this\n+   * {@link JSDocInfo}.\n+   */\n+  public boolean makesDicts() {\n+    return getFlag(MASK_DICT);\n   }\n \n   /**\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n \n   /**\n    * Records that the {@link JSDocInfo} being built should have its\n+   * {@link JSDocInfo#isStruct()} flag set to {@code true}.\n+   *\n+   * @return {@code true} if the struct was recorded and {@code false}\n+   * if it was already defined or it was incompatible with the existing flags\n+   */\n+  public boolean recordStruct() {\n+    if (hasAnySingletonTypeTags() || currentInfo.isInterface() ||\n+        currentInfo.makesDicts() || currentInfo.makesStructs()) {\n+      return false;\n+    }\n+    currentInfo.setStruct();\n+    populated = true;\n+    return true;\n+  }\n+\n+  /**\n+   * Records that the {@link JSDocInfo} being built should have its\n+   * {@link JSDocInfo#isDict()} flag set to {@code true}.\n+   *\n+   * @return {@code true} if the dict was recorded and {@code false}\n+   * if it was already defined or it was incompatible with the existing flags\n+   */\n+  public boolean recordDict() {\n+    if (hasAnySingletonTypeTags() || currentInfo.isInterface() ||\n+        currentInfo.makesDicts() || currentInfo.makesStructs()) {\n+      return false;\n+    }\n+    currentInfo.setDict();\n+    populated = true;\n+    return true;\n+  }\n+\n+  /**\n+   * Records that the {@link JSDocInfo} being built should have its\n    * {@link JSDocInfo#isJavaDispatch()} flag set to {@code true}.\n    *\n    * @return {@code true} if the javadispatch was recorded and {@code false}\n    * {@link JSDocInfo#isInterface()} flag set to {@code true}.\n    *\n    * @return {@code true} if the flag was recorded and {@code false}\n-   *     if it was already defined or it was incompatible with the existing\n-   *     flags\n+   * if it was already defined or it was incompatible with the existing flags\n    */\n   public boolean recordInterface() {\n-    if (!hasAnySingletonTypeTags() &&\n-        !currentInfo.isConstructor() && !currentInfo.isInterface()) {\n-      currentInfo.setInterface(true);\n-      populated = true;\n-      return true;\n-    } else {\n-      return false;\n-    }\n+    if (hasAnySingletonTypeTags() ||\n+        currentInfo.makesStructs() || currentInfo.makesDicts() ||\n+        currentInfo.isConstructor() || currentInfo.isInterface()) {\n+      return false;\n+    }\n+    currentInfo.setInterface(true);\n+    populated = true;\n+    return true;\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n     parse(\"@return x \\n * @return y */\",\n         \"Bad type annotation. \" +\n         \"type annotation incompatible with other annotations\");\n+  }\n+\n+  public void testTypeTagConflict15() throws Exception {\n+    parse(\"/**\\n\" +\n+          \" * @struct\\n\" +\n+          \" * @struct\\n\" +\n+          \" */\\n\" +\n+          \"function StrStr() {}\",\n+          \"Bad type annotation. \" +\n+          \"type annotation incompatible with other annotations\");\n+  }\n+\n+  public void testTypeTagConflict16() throws Exception {\n+    parse(\"/**\\n\" +\n+          \" * @struct\\n\" +\n+          \" * @interface\\n\" +\n+          \" */\\n\" +\n+          \"function StrIntf() {}\",\n+          \"Bad type annotation. \" +\n+          \"type annotation incompatible with other annotations\");\n+  }\n+\n+  public void testTypeTagConflict17() throws Exception {\n+    parse(\"/**\\n\" +\n+          \" * @interface\\n\" +\n+          \" * @struct\\n\" +\n+          \" */\\n\" +\n+          \"function StrIntf() {}\",\n+          \"Bad type annotation. \" +\n+          \"type annotation incompatible with other annotations\");\n+  }\n+\n+  public void testTypeTagConflict18() throws Exception {\n+    parse(\"/**\\n\" +\n+          \" * @dict\\n\" +\n+          \" * @dict\\n\" +\n+          \" */\\n\" +\n+          \"function DictDict() {}\",\n+          \"Bad type annotation. \" +\n+          \"type annotation incompatible with other annotations\");\n+  }\n+\n+  public void testTypeTagConflict19() throws Exception {\n+    parse(\"/**\\n\" +\n+          \" * @dict\\n\" +\n+          \" * @interface\\n\" +\n+          \" */\\n\" +\n+          \"function DictDict() {}\",\n+          \"Bad type annotation. \" +\n+          \"type annotation incompatible with other annotations\");\n+  }\n+\n+  public void testTypeTagConflict20() throws Exception {\n+    parse(\"/**\\n\" +\n+          \" * @interface\\n\" +\n+          \" * @dict\\n\" +\n+          \" */\\n\" +\n+          \"function DictDict() {}\",\n+          \"Bad type annotation. \" +\n+          \"type annotation incompatible with other annotations\");\n   }\n \n   public void testParserWithTemplateTypeNameMissing() {", "timestamp": 1346807464, "metainfo": ""}