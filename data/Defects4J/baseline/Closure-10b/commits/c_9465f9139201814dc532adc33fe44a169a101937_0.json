{"sha": "9465f9139201814dc532adc33fe44a169a101937", "log": "Fix for maps crashes (hopefully).  R=nicksantos DELTA=73  (73 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2279   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n       for (UseSite site : useSites) {\n         Node parent = site.node.getParent();\n \n+        // This was a use site removed by something else before we run.\n+        // 1. By another pass before us which means the definition graph is\n+        //    no updated properly.\n+        // 2. By the continuations algorithm above.\n+        if (parent == null) {\n+          continue; // Ignore it.\n+        }\n+\n         // Ignore references within goog.inherits calls.\n         if (NodeUtil.isCall(parent) &&\n             convention.getClassesDefinedByCall(parent) != null) {\n--- /dev/null\n+++ b/test/com/google/javascript/jscomp/OptimizeCallsTest.java\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.javascript.rhino.Node;\n+\n+/**\n+ * Unit tests for {#link {@link OptimizeCalls}\n+ *\n+ */\n+public class OptimizeCallsTest extends CompilerTestCase {\n+\n+  @Override\n+  protected CompilerPass getProcessor(final Compiler compiler) {\n+    final OptimizeCalls passes = new OptimizeCalls(compiler);\n+    passes.addPass(new OptimizeReturns(compiler));\n+    passes.addPass(new OptimizeParameters(compiler));\n+    passes.addPass(new RemoveUnusedVars(compiler, true, false, true));\n+    return new CompilerPass() {\n+\n+      @Override\n+      public void process(Node externs, Node root) {\n+        new PureFunctionIdentifier(compiler,\n+          new SimpleDefinitionFinder(compiler)).process(externs, root);\n+        passes.process(externs, root);\n+      }\n+    };\n+  }\n+\n+  public void testRemovingReturnCallToFunctionWithUnusedParams() {\n+    test(\"function foo() {var x; return x = bar(1)} foo(); function bar(x) {}\",\n+         \"function foo() {          bar(); return;} foo(); function bar()  {}\");\n+  }\n+\n+  public void testNestingFunctionCallWithUnsedParams() {\n+    test(\"function f1(x) { } function f2(x) { }\" +\n+         \"function f3(x) { } function f4(x) { }\" +\n+         \"f3(f1(f2()));\",\n+         \"function f1() {f2()} function f2() { }\" +\n+         \"function f3() {f1()} \" +\n+         \"f3();\"\n+    );\n+  }\n+\n+  public void testUnusedAssignOnFunctionWithUnusedParams() {\n+    test(\"var foo = function(a){}; function bar(){var x;x = foo} bar(); foo(1)\",\n+         \"var foo = function( ){}; function bar(){             } bar(); foo()\");\n+  }\n+}", "timestamp": 1308096387, "metainfo": ""}