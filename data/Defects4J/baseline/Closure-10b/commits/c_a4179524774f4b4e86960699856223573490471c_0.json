{"sha": "a4179524774f4b4e86960699856223573490471c", "log": "Hoist string aliases to the top of the module to prevent conflicts with calls to hoisted functions that depend on it..  R=acleung DELTA=98  (53 added, 35 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1003   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AliasStrings.java\n+++ b/src/com/google/javascript/jscomp/AliasStrings.java\n           info.numOccurrencesInfrequentlyExecuted++;\n         }\n \n-        if (info.numOccurrences == 1) {\n-\n-          info.moduleToContainDecl = t.getModule();\n-\n-          // Take note of the optimal place to insert the var declaration.\n-          // We'll insert it as the previous sibling of our first ancestor\n-          // in global scope that has a SCRIPT parent.\n-          Node prev = n;\n-          for (Node ancestor : n.getAncestors()) {\n-            if (ancestor.getType() == Token.SCRIPT) {\n-              info.parentForNewVarDecl = ancestor;\n-              info.siblingToInsertVarDeclBefore = prev;\n-              break;\n-            }\n-            prev = ancestor;\n-          }\n-        } else {\n-\n+        // The current module.\n+        JSModule module = t.getModule();\n+        if (info.numOccurrences != 1) {\n           // Check whether the current module depends on the module containing\n           // the declaration.\n-          JSModule module = t.getModule();\n           if (module != null &&\n               info.moduleToContainDecl != null &&\n               module != info.moduleToContainDecl &&\n             // module dependency graph that both of these modules depend on.\n             module = moduleGraph.getDeepestCommonDependency(\n                 module, info.moduleToContainDecl);\n-            Node varParent = moduleVarParentMap.get(module);\n-            if (varParent == null) {\n-              varParent = compiler.getNodeForCodeInsertion(module);\n-              moduleVarParentMap.put(module, varParent);\n-            }\n-            info.moduleToContainDecl = module;\n-            info.parentForNewVarDecl = varParent;\n-            info.siblingToInsertVarDeclBefore = varParent.getFirstChild();\n+          } else {\n+            // use the previously saved insertion location.\n+            return;\n           }\n         }\n+        Node varParent = moduleVarParentMap.get(module);\n+        if (varParent == null) {\n+          varParent = compiler.getNodeForCodeInsertion(module);\n+          moduleVarParentMap.put(module, varParent);\n+        }\n+        info.moduleToContainDecl = module;\n+        info.parentForNewVarDecl = varParent;\n+        info.siblingToInsertVarDeclBefore = varParent.getFirstChild();\n       }\n     }\n   }\n--- a/test/com/google/javascript/jscomp/AliasStringsTest.java\n+++ b/test/com/google/javascript/jscomp/AliasStringsTest.java\n \n          \"var $$S_Antidisestablishment_0=\"     +\n          \"  'Antidisestablishmentarianism';\"   +\n+         \"var $$S_Antidisestablishment_0_1=\"   +\n+         \"  'Antidisestablishmentarianismo';\"  +\n+\n          \"f($$S_Antidisestablishment_0);\"      +\n          \"f($$S_Antidisestablishment_0);\"      +\n-\n-         \"var $$S_Antidisestablishment_0_1=\"   +\n-         \"  'Antidisestablishmentarianismo';\"  +\n          \"f($$S_Antidisestablishment_0_1);\"    +\n          \"f($$S_Antidisestablishment_0_1);\");\n   }\n     // Same string is in a global object literal (as key) and local in a\n     // function\n     test(\"var foo={'foo': 'bar'};function bar() {return 'foo';}\",\n-        \"var foo={'foo': 'bar'};\" +\n-        \"var $$S_foo='foo';function bar() {return $$S_foo;}\");\n+        \"var $$S_foo='foo';var foo={'foo': 'bar'};\" +\n+        \"function bar() {return $$S_foo;}\");\n \n     // Same string is in a global object literal (as value) and local in a\n     // function\n     // common parent module m1\n \n     JSModule[] modules =\n-        createModules(\n+        createModuleBush(\n             // m0\n             \"function f(a) { alert('f:' + a); }\" +\n             \"function g() { alert('ciao'); }\",\n             \"f('-------hi-------'); alert('------adios------');\" +\n             \"h('-----peaches-----'); h('-----peaches-----');\");\n \n-    modules[1].addDependency(modules[0]);\n-    modules[2].addDependency(modules[1]);\n-    modules[3].addDependency(modules[1]);\n-\n     moduleGraph = new JSModuleGraph(modules);\n \n     test(modules,\n          new String[] {\n              // m1\n+             \"var $$S_ciao = 'ciao';\" +\n              \"var $$S_f$3a = 'f:';\" +\n              \"function f(a) { alert($$S_f$3a + a); }\" +\n-             \"var $$S_ciao = 'ciao';\" +\n              \"function g() { alert($$S_ciao); }\",\n              // m2\n              \"var $$S_$2d$2d$2d$2d$2d$2d$2dhi$2d$2d$2d$2d$2d$2d$2d\" +\n              \" = '-------hi-------';\" +\n              \"var $$S_$2d$2d$2d$2d$2d$2d_adios$2d$2d$2d$2d$2d$2d\" +\n              \" = '------adios------'; \" +\n+             \"var $$S_h$3a = 'h:';\" +\n              \"f($$S_$2d$2d$2d$2d$2d$2d$2dhi$2d$2d$2d$2d$2d$2d$2d);\" +\n              \"f('bye');\" +\n-             \"var $$S_h$3a = 'h:';\" +\n              \"function h(a) { alert($$S_h$3a + a); }\",\n              // m3\n+             \"var $$S_zzz = 'zzz';\" +\n              \"f($$S_$2d$2d$2d$2d$2d$2d$2dhi$2d$2d$2d$2d$2d$2d$2d);\" +\n              \"h($$S_ciao + $$S_$2d$2d$2d$2d$2d$2d_adios$2d$2d$2d$2d$2d$2d);\" +\n-             \"var $$S_zzz = 'zzz';\" +\n              \"(function() { alert($$S_zzz) })();\",\n              // m4\n+             \"var $$S_$2d$2d$2d$2d$2dpeaches$2d$2d$2d$2d$2d\" +\n+             \" = '-----peaches-----';\" +\n              \"f($$S_$2d$2d$2d$2d$2d$2d$2dhi$2d$2d$2d$2d$2d$2d$2d);\" +\n              \"alert($$S_$2d$2d$2d$2d$2d$2d_adios$2d$2d$2d$2d$2d$2d);\" +\n-             \"var $$S_$2d$2d$2d$2d$2dpeaches$2d$2d$2d$2d$2d\" +\n-             \" = '-----peaches-----';\" +\n              \"h($$S_$2d$2d$2d$2d$2dpeaches$2d$2d$2d$2d$2d);\" +\n              \"h($$S_$2d$2d$2d$2d$2dpeaches$2d$2d$2d$2d$2d);\",\n          });\n     moduleGraph = null;\n   }\n \n+  public void testStringsInModules2() {\n+    strings = ALL_STRINGS;\n+\n+    // Aliases must be placed in the correct module. The alias for\n+    // '------adios------' must be lifted from m2 and m3 and go in the\n+    // common parent module m1\n+\n+    JSModule[] modules =\n+        createModuleBush(\n+            // m0\n+            \"function g() { alert('ciao'); }\",\n+            // m1\n+            \"function h(a) { alert('h:' + a); }\",\n+            // m2\n+            \"h('ciao' + 'adios');\",\n+            // m3\n+            \"g();\");\n+\n+    moduleGraph = new JSModuleGraph(modules);\n+\n+    test(modules,\n+         new String[] {\n+             // m1\n+             \"var $$S_ciao = 'ciao';\" +\n+             \"function g() { alert($$S_ciao); }\",\n+             // m2\n+             \"var $$S_h$3a = 'h:';\" +\n+             \"function h(a) { alert($$S_h$3a + a); }\",\n+             // m3\n+             \"h($$S_ciao + 'adios');\",\n+             // m4\n+             \"g();\",\n+         });\n+    moduleGraph = null;\n+  }\n+\n+\n   public void testEmptyModules() {\n     JSModule[] modules =\n-      createModules(\n+      createModuleStar(\n           // m0\n           \"\",\n           // m1\n           \"function foo() { f('good') }\",\n           // m2\n           \"function foo() { f('good') }\");\n-    modules[1].addDependency(modules[0]);\n-    modules[2].addDependency(modules[0]);\n \n     moduleGraph = new JSModuleGraph(modules);\n     test(modules,", "timestamp": 1300821623, "metainfo": ""}