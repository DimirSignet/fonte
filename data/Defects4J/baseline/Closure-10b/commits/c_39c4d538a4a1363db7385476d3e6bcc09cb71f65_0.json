{"sha": "39c4d538a4a1363db7385476d3e6bcc09cb71f65", "log": "Hide \"dev_mode\" from the commond-line usage message. Fixes issue 348.  R=nicksantos DELTA=3  (2 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=664   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n         + \" and exits\")\n     private boolean print_pass_graph = false;\n \n+    // Turn on (very slow) extra sanity checks for use when modifying the\n+    // compiler.\n     @Option(name = \"--jscomp_dev_mode\",\n-        usage = \"Turns on extra sanity checks\",\n+        // hidden, no usage\n         aliases = {\"--dev_mode\"})\n     private CompilerOptions.DevMode jscomp_dev_mode =\n         CompilerOptions.DevMode.OFF;\n         handler = BooleanOptionHandler.class,\n         usage = \"Prints the compiler version to stderr.\")\n     private boolean version = false;\n-    \n+\n     @Option(name = \"--flagfile\",\n         usage = \"A file containing additional command-line options.\")\n-    private String flag_file = \"\";    \n+    private String flag_file = \"\";\n \n     // Our own option parser to be backwards-compatible.\n     // It needs to be public because of the crazy reflection that args4j does.\n     Pattern argPattern = Pattern.compile(\"(--[a-zA-Z_]+)=(.*)\");\n     Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");\n     List<String> processedArgs = Lists.newArrayList();\n-    \n+\n     for (String arg : args) {\n       Matcher matcher = argPattern.matcher(arg);\n       if (matcher.matches()) {\n         processedArgs.add(arg);\n       }\n     }\n-    \n+\n     return processedArgs;\n   }\n-  \n-  private void processFlagFile(PrintStream err) \n+\n+  private void processFlagFile(PrintStream err)\n             throws CmdLineException, IOException {\n     List<String> argsInFile = Lists.newArrayList();\n     File flagFileInput = new File(flags.flag_file);\n     while (tokenizer.hasMoreTokens()) {\n         argsInFile.add(tokenizer.nextToken());\n     }\n-    \n+\n     flags.flag_file = \"\";\n-    List<String> processedFileArgs \n+    List<String> processedFileArgs\n         = processArgs(argsInFile.toArray(new String[] {}));\n     CmdLineParser parserFileArgs = new CmdLineParser(flags);\n     parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n-    \n+\n     // Currently we are not supporting this (prevent direct/indirect loops)\n     if (!flags.flag_file.equals(\"\")) {\n       err.println(\"ERROR - Arguments in the file cannot contain \"\n       isConfigValid = false;\n     }\n   }\n-  \n+\n   private void initConfigFromFlags(String[] args, PrintStream err) {\n \n     List<String> processedArgs = processArgs(args);\n-    \n+\n     CmdLineParser parser = new CmdLineParser(flags);\n     isConfigValid = true;\n     try {", "timestamp": 1298571260, "metainfo": ""}