{"sha": "a83c4868dbc0f3229d31af5ff1b8554c44908459", "log": "Warn if a ctor or iface is not initialized  R=johnlenz DELTA=120  (101 added, 1 deleted, 18 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=38   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Scope.java\n+++ b/src/com/google/javascript/jscomp/Scope.java\n \n     public Node getInitialValue() {\n       Node parent = getParentNode();\n-      return parent.getType() == Token.FUNCTION ?\n-          parent : nameNode.getFirstChild();\n+      int pType = parent.getType();\n+      if (pType == Token.FUNCTION) {\n+        return parent;\n+      } else if (pType == Token.ASSIGN) {\n+        return parent.getLastChild();\n+      } else if (pType == Token.VAR) {\n+        return nameNode.getFirstChild();\n+      } else {\n+        return null;\n+      }\n     }\n \n     /**\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n       ILLEGAL_IMPLICIT_CAST,\n       TypedScopeCreator.UNKNOWN_LENDS,\n       TypedScopeCreator.LENDS_ON_NON_OBJECT,\n+      TypedScopeCreator.CTOR_INITIALIZER,\n+      TypedScopeCreator.IFACE_INITIALIZER,\n       FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);\n \n   private final AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n           \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n           \"enum initializer must be an object literal or an enum\");\n \n+  static final DiagnosticType CTOR_INITIALIZER =\n+      DiagnosticType.warning(\n+          \"JSC_CTOR_INITIALIZER_NOT_CTOR\",\n+          \"Constructor {0} must be initialized at declaration\");\n+\n+  static final DiagnosticType IFACE_INITIALIZER =\n+      DiagnosticType.warning(\n+          \"JSC_IFACE_INITIALIZER_NOT_IFACE\",\n+          \"Interface {0} must be initialized at declaration\");\n+\n   static final DiagnosticType CONSTRUCTOR_EXPECTED =\n       DiagnosticType.warning(\n           \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n         Var var = scope.getVar(rValue.getQualifiedName());\n         if (var != null && var.getType() instanceof FunctionType) {\n           functionType = (FunctionType) var.getType();\n-          if (functionType != null && functionType.isConstructor()) {\n+          if (functionType != null &&\n+              (functionType.isConstructor() || functionType.isInterface())) {\n             typeRegistry.declareType(name, functionType.getInstanceType());\n           }\n         }\n           setDeferredType(n, type);\n         }\n         CompilerInput input = compiler.getInput(sourceName);\n-        scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n+        boolean isExtern = input.isExtern();\n+        Var newVar =\n+            scopeToDeclareIn.declare(variableName, n, type, input, inferred);\n \n         if (shouldDeclareOnGlobalThis) {\n           ObjectType globalThis =\n               typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);\n-          boolean isExtern = input.isExtern();\n           if (inferred) {\n             globalThis.defineInferredProperty(variableName,\n                 type == null ?\n           }\n         }\n \n-        // If we're in the global scope, also declare var.prototype\n-        // in the scope chain.\n-        if (scopeToDeclareIn.isGlobal() && type instanceof FunctionType) {\n+        // We need to do some additional work for constructors and interfaces.\n+        if (type instanceof FunctionType &&\n+            // We don't want to look at empty function types.\n+            !type.isEmptyType()) {\n           FunctionType fnType = (FunctionType) type;\n-          if (fnType.isConstructor() || fnType.isInterface()) {\n+          if ((fnType.isConstructor() || fnType.isInterface()) &&\n+              !fnType.equals(getNativeType(U2U_CONSTRUCTOR_TYPE))) {\n+            // Declare var.prototype in the scope chain.\n             FunctionType superClassCtor = fnType.getSuperClassConstructor();\n             scopeToDeclareIn.declare(variableName + \".prototype\", n,\n-                fnType.getPrototype(), compiler.getInput(sourceName),\n+                fnType.getPrototype(), input,\n                 /* declared iff there's an explicit supertype */\n                 superClassCtor == null ||\n                 superClassCtor.getInstanceType().equals(\n                     getNativeType(OBJECT_TYPE)));\n+\n+            // Make sure the variable is initialized to something.\n+            if (newVar.getInitialValue() == null && !isExtern) {\n+              compiler.report(\n+                  JSError.make(sourceName, n,\n+                      fnType.isConstructor() ?\n+                          CTOR_INITIALIZER : IFACE_INITIALIZER,\n+                      variableName));\n+            }\n           }\n         }\n       }\n       }\n \n       // Precedence of type information on GETPROPs:\n-      // 1) @type annotation / @enum annotation\n+      // 1) @type annnotation / @enum annotation\n       // 2) ASSIGN to FUNCTION literal\n       // 3) @param/@return annotation (with no function literal)\n       // 4) ASSIGN to anything else\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n   }\n \n   public void testStubFunctionDeclaration2() throws Exception {\n-    testFunctionType(\n+    testExternFunctionType(\n+        // externs\n         \"/** @constructor */ function f() {};\" +\n         \"/** @constructor \\n * @extends {f} */ f.subclass;\",\n         \"f.subclass\",\n         \"initializing variable\\n\" +\n         \"found   : \" + functionType + \"\\n\" +\n         \"required: number\");\n+  }\n+\n+  /**\n+   * Tests the type of a function definition in externs.\n+   * The function defined by {@code functionDef} should be\n+   * named {@code functionName}.\n+   */\n+  private void testExternFunctionType(String functionDef, String functionName,\n+      String functionType) throws Exception {\n+    testTypes(\n+        functionDef,\n+        \"/** @type number */var a=\" + functionName + \";\",\n+        \"initializing variable\\n\" +\n+        \"found   : \" + functionType + \"\\n\" +\n+        \"required: number\", false);\n   }\n \n   public void testTypeRedefinition() throws Exception {\n   public void testStubConstructorImplementingInterface() throws Exception {\n     // This does not throw a warning for unimplemented property because Foo is\n     // just a stub.\n-    testTypes(\"/** @interface */ function Int() {}\\n\" +\n+    testTypes(\n+        // externs\n+        \"/** @interface */ function Int() {}\\n\" +\n         \"/** @desc description */Int.prototype.foo = function() {};\" +\n-        \"/** @constructor \\n @implements {Int} */ var Foo;\\n\");\n+        \"/** @constructor \\n @implements {Int} */ var Foo;\\n\",\n+        \"\", null, false);\n   }\n \n   public void testObjectLiteral() throws Exception {\n   }\n \n   public void testInterfaceInstantiation() throws Exception {\n-    testTypes(\"/** @interface */var f; new f\",\n+    testTypes(\"/** @interface */var f = function(){}; new f\",\n               \"cannot instantiate non-constructor\");\n   }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n   }\n \n   public void testStubFunctionDeclaration2() throws Exception {\n-    testFunctionType(\n+    testExternFunctionType(\n+        // externs\n         \"/** @constructor */ function f() {};\" +\n         \"/** @constructor \\n * @extends {f} */ f.subclass;\",\n         \"f.subclass\",\n         \"initializing variable\\n\" +\n         \"found   : \" + functionType + \"\\n\" +\n         \"required: number\");\n+  }\n+\n+  /**\n+   * Tests the type of a function definition in externs.\n+   * The function defined by {@code functionDef} should be\n+   * named {@code functionName}.\n+   */\n+  private void testExternFunctionType(String functionDef, String functionName,\n+      String functionType) throws Exception {\n+    testTypes(\n+        functionDef,\n+        \"/** @type number */var a=\" + functionName + \";\",\n+        \"initializing variable\\n\" +\n+        \"found   : \" + functionType + \"\\n\" +\n+        \"required: number\", false);\n   }\n \n   public void testTypeRedefinition() throws Exception {\n     testTypes(\"/** @interface */function Disposable() {}\\n\" +\n         \"/** @implements {Disposable}\\n */function f() {}\",\n         \"@implements used without @constructor or @interface for f\");\n+  }\n+\n+  public void testBadImplements3() throws Exception {\n+    testTypes(\n+        \"var goog = {};\" +\n+        \"/** @type {!Function} */ goog.abstractMethod = function(){};\" +\n+        \"/** @interface */ var Disposable = goog.abstractMethod;\" +\n+        \"Disposable.prototype.method = goog.abstractMethod;\" +\n+        \"/** @implements {Disposable}\\n * @constructor */function f() {}\",\n+        \"property method on interface Disposable is not implemented by type f\");\n   }\n \n   public void testInterfaceExtends() throws Exception {\n   public void testStubConstructorImplementingInterface() throws Exception {\n     // This does not throw a warning for unimplemented property because Foo is\n     // just a stub.\n-    testTypes(\"/** @interface */ function Int() {}\\n\" +\n+    testTypes(\n+        // externs\n+        \"/** @interface */ function Int() {}\\n\" +\n         \"/** @desc description */Int.prototype.foo = function() {};\" +\n-        \"/** @constructor \\n @implements {Int} */ var Foo;\\n\");\n+        \"/** @constructor \\n @implements {Int} */ var Foo;\\n\",\n+        \"\", null, false);\n   }\n \n   public void testObjectLiteral() throws Exception {\n   }\n \n   public void testInterfaceInstantiation() throws Exception {\n-    testTypes(\"/** @interface */var f; new f\",\n+    testTypes(\"/** @interface */var f = function(){}; new f\",\n               \"cannot instantiate non-constructor\");\n   }\n \n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n \n package com.google.javascript.jscomp;\n \n+import static com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER;\n+import static com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER;\n import static com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE;\n import static com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE;\n         globalScope.getVar(\"ns.foo\").getType().toString());\n   }\n \n+  public void testBadCtorInit1() throws Exception {\n+    testSame(\"/** @constructor */ var f;\", CTOR_INITIALIZER);\n+  }\n+\n+  public void testBadCtorInit2() throws Exception {\n+    testSame(\"var x = {}; /** @constructor */ x.f;\", CTOR_INITIALIZER);\n+  }\n+\n+  public void testBadIfaceInit1() throws Exception {\n+    testSame(\"/** @interface */ var f;\", IFACE_INITIALIZER);\n+  }\n+\n+  public void testBadIfaceInit2() throws Exception {\n+    testSame(\"var x = {}; /** @interface */ x.f;\", IFACE_INITIALIZER);\n+  }\n+\n   private JSType findNameType(final String name, Scope scope) {\n     return findTypeOnMatchedNode(new Predicate<Node>() {\n       @Override public boolean apply(Node n) {", "timestamp": 1291320259, "metainfo": ""}