{"sha": "9d72612f028076aa43a9b259c29b2a940398465f", "log": "Add parsing logic for the lends annotation.  R=johnlenz DELTA=100  (99 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=283472   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/Annotation.java\n+++ b/src/com/google/javascript/jscomp/parsing/Annotation.java\n   INHERIT_DOC,\n   INTERFACE,\n   JAVA_DISPATCH,\n+  LENDS,\n   LICENSE, // same as preserve\n   MEANING,\n   MODIFIES,\n       put(\"inheritDoc\", Annotation.INHERIT_DOC).\n       put(\"interface\", Annotation.INTERFACE).\n       put(\"javadispatch\", Annotation.JAVA_DISPATCH).\n+      put(\"lends\", Annotation.LENDS).\n       put(\"license\", Annotation.LICENSE).\n       put(\"meaning\", Annotation.MEANING).\n       put(\"modifies\", Annotation.MODIFIES).\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n                   token = eatTokensUntilEOL();\n                   continue retry;\n \n+                case LENDS:\n+                  skipEOLs();\n+\n+                  matchingRc = false;\n+                  if (match(JsDocToken.LC)) {\n+                    token = next();\n+                    matchingRc = true;\n+                  }\n+\n+                  if (match(JsDocToken.STRING)) {\n+                    token = next();\n+                    if (!jsdocBuilder.recordLends(stream.getString())) {\n+                      parser.addWarning(\"msg.jsdoc.lends.incompatible\",\n+                          stream.getLineno(), stream.getCharno());\n+                    }\n+                  } else {\n+                    parser.addWarning(\"msg.jsdoc.lends.missing\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+\n+                  if (matchingRc && !match(JsDocToken.RC)) {\n+                    parser.addWarning(\"msg.jsdoc.missing.rc\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  token = eatTokensUntilEOL();\n+                  continue retry;\n+\n                 case MEANING:\n                   ExtractionInfo meaningInfo =\n                       extractMultilineTextualBlock(token);\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n     String license = null;\n     Set<String> suppressions = null;\n     Set<String> modifies = null;\n+    String lendsName = null;\n   }\n \n   private static final class LazilyInitializedDocumentation {\n   }\n \n   /**\n+   * Gets the name we're lending to in a {@code @lends} annotation.\n+   *\n+   * In many reflection APIs, you pass an anonymous object to a function,\n+   * and that function mixes the anonymous object into another object.\n+   * The {@code @lends} annotation allows the type system to track\n+   * those property assignments.\n+   */\n+  public String getLendsName() {\n+    return (info == null) ? null : info.lendsName;\n+  }\n+\n+  void setLendsName(String name) {\n+    lazyInitInfo();\n+    info.lendsName = name;\n+  }\n+\n+  /**\n    * Gets the description specified by the {@code @license} annotation.\n    */\n   public String getLicense() {\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n   }\n \n   /**\n+   * Records that we're lending to another name.\n+   */\n+  public boolean recordLends(String name) {\n+    if (!hasAnyTypeRelatedTags()) {\n+      currentInfo.setLendsName(name);\n+      populated = true;\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  /**\n    * Whether the current doc info has other type tags, like\n    * {@code @param} or {@code @return} or {@code @type} or etc.\n    */\n         currentInfo.getParameterCount() > 0 ||\n         currentInfo.hasReturnType() ||\n         currentInfo.hasBaseType() ||\n+        currentInfo.getLendsName() != null ||\n         currentInfo.hasThisType() ||\n         hasAnySingletonTypeTags();\n   }\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n   public void testParseMeaning4() throws Exception {\n     parse(\"@meaning  tigers\\n * @meaning and lions  */\",\n         \"extra @meaning tag\");\n+  }\n+\n+  public void testParseLends1() throws Exception {\n+    JSDocInfo info = parse(\"@lends {name} */\");\n+    assertEquals(\"name\", info.getLendsName());\n+  }\n+\n+  public void testParseLends2() throws Exception {\n+    JSDocInfo info = parse(\"@lends   foo.bar  */\");\n+    assertEquals(\"foo.bar\", info.getLendsName());\n+  }\n+\n+  public void testParseLends3() throws Exception {\n+    parse(\"@lends {name */\", \"expected closing }\");\n+  }\n+\n+  public void testParseLends4() throws Exception {\n+    parse(\"@lends {} */\", \"missing object name in @lends tag\");\n+  }\n+\n+  public void testParseLends5() throws Exception {\n+    parse(\"@lends } */\", \"missing object name in @lends tag\");\n+  }\n+\n+  public void testParseLends6() throws Exception {\n+    parse(\"@lends {string} \\n * @lends {string} */\",\n+        \"@lends tag incompatible with other annotations\");\n+  }\n+\n+  public void testParseLends7() throws Exception {\n+    parse(\"@type {string} \\n * @lends {string} */\",\n+        \"@lends tag incompatible with other annotations\");\n   }\n \n   public void testParsePreserve() throws Exception {\n       \"* @id \\n\" +\n       \"* @ignore \\n\" +\n       \"* @inner \\n\" +\n-      \"* @lends \\n\" +\n+      \"* @lends {string} \\n\" +\n       \"* @link \\n\" +\n       \"* @member \\n\" +\n       \"* @memberOf \\n\" +", "timestamp": 1285965703, "metainfo": ""}