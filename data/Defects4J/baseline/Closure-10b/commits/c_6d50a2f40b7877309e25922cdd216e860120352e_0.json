{"sha": "6d50a2f40b7877309e25922cdd216e860120352e", "log": "MOE re-sync. modifies the file encoding to unix-style.  Revision created by MOE tool push_codebase.  R=acleung,johnlenz   Revision created by MOE tool push_codebase. MOE_MIGRATION=3938   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodingConvention.java\n+++ b/src/com/google/javascript/jscomp/CodingConvention.java\n    * Whether this CALL function is testing for the existence of a property.\n    */\n   public boolean isPropertyTestFunction(Node call);\n-  \n+\n   /**\n    * Whether this GETPROP node is an alias for an object prototype.\n    */\n--- a/src/com/google/javascript/jscomp/CodingConventions.java\n+++ b/src/com/google/javascript/jscomp/CodingConventions.java\n     public boolean isPropertyTestFunction(Node call) {\n       return nextConvention.isPropertyTestFunction(call);\n     }\n-    \n+\n     @Override\n     public boolean isPrototypeAlias(Node getProp) {\n       return false;\n     public boolean isPropertyTestFunction(Node call) {\n       return false;\n     }\n-    \n+\n     @Override\n     public boolean isPrototypeAlias(Node getProp) {\n       return false;\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n         + \"manage_closure_dependencies option will be set to true and \"\n         + \"all files will be sorted in dependency order.\")\n     private List<String> closure_entry_point = Lists.newArrayList();\n-    \n+\n     @Option(name = \"--process_jquery_primitives\",\n         handler = BooleanOptionHandler.class,\n         usage = \"Processes built-ins from the Jquery library, such as \"\n     }\n \n     options.closurePass = flags.process_closure_primitives;\n-    \n+\n     options.jqueryPass = flags.process_jquery_primitives &&\n         CompilationLevel.ADVANCED_OPTIMIZATIONS == level;\n \n     if (flags.process_jquery_primitives) {\n       options.setCodingConvention(new JqueryCodingConvention());\n     }\n-    \n+\n     if (!flags.translationsFile.isEmpty()) {\n       try {\n         options.messageBundle = new XtbMessageBundle(\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n   /** Processes goog.provide() and goog.require() calls */\n   public boolean closurePass;\n-  \n+\n   /** Processes jQuery aliases */\n   public boolean jqueryPass;\n \n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n     if (options.closurePass) {\n       checks.add(closurePrimitives.makeOneTimePass());\n     }\n-    \n+\n     if (options.jqueryPass) {\n       checks.add(jqueryAliases.makeOneTimePass());\n     }\n       };\n     }\n   };\n-  \n+\n   /** Expand jQuery Primitives and Aliases pass. */\n   final PassFactory jqueryAliases =\n       new PassFactory(\"jqueryAliases\", true) {\n       return new ExpandJqueryAliases(compiler);\n     }\n   };\n-  \n+\n   /**\n    * The default i18n pass.\n    * A lot of the options are not configurable, because ReplaceMessages\n--- a/src/com/google/javascript/jscomp/ExpandJqueryAliases.java\n+++ b/src/com/google/javascript/jscomp/ExpandJqueryAliases.java\n-/*\n- * Copyright 2011 The Closure Compiler Authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.javascript.jscomp;\n-\n-import java.util.Set;\n-import java.util.logging.Logger;\n-\n-import com.google.common.collect.ImmutableSet;\n-import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n-import com.google.javascript.rhino.IR;\n-import com.google.javascript.rhino.Node;\n-import com.google.javascript.rhino.Token;\n-\n-/**\n- * Replace known jQuery aliases and methods with standard\n- * conventions so that the compiler recognizes them. Expected\n- * replacements include:\n- *  - jQuery.fn -> jQuery.prototype\n- *  - jQuery.extend -> expanded into direct object assignments\n- *\n- * @author chadkillingsworth@missouristate.edu (Chad Killingsworth)\n- */\n-class ExpandJqueryAliases extends AbstractPostOrderCallback\n-    implements CompilerPass {\n-  private final AbstractCompiler compiler;\n-  private static final Logger logger =\n-      Logger.getLogger(ExpandJqueryAliases.class.getName());\n-  private static final Set<String> JqueryExtendNames = ImmutableSet.of(\n-              \"jQuery.extend\", \"jQuery.fn.extend\", \"jQuery.prototype.extend\");\n-\n-  ExpandJqueryAliases(AbstractCompiler compiler) {\n-    this.compiler = compiler;\n-  }\n-  \n-  public static boolean isJqueryExtendReference(Node n, String qname) {\n-    if (JqueryExtendNames.contains(qname)) {\n-      Node firstArgument = n.getNext();\n-      if (firstArgument == null) {\n-        return false;\n-      }\n-      \n-      Node secondArgument = firstArgument.getNext();\n-      if ((firstArgument.isObjectLit() && secondArgument == null) ||\n-          (firstArgument.isName() && secondArgument != null &&\n-          secondArgument.isObjectLit())) {\n-        return true;\n-      }\n-    }\n-    return false;\n-  }\n-\n-  @Override\n-  public void visit(NodeTraversal t, Node n, Node parent) {\n-    if (compiler.getCodingConvention().isPrototypeAlias(n)) {\n-      replaceJqueryPrototypeAlias(n);     \n-    } else if (n.isCall()) {\n-      Node callTarget = n.getFirstChild();\n-      String qName = callTarget.getQualifiedName();\n-      \n-      if (isJqueryExtendReference(callTarget, qName)) {\n-        replaceJqueryExtendCall(n);\n-      }\n-    }\n-  }\n-\n-  @Override\n-  public void process(Node externs, Node root) {\n-    logger.info(\"Expanding Jquery Aliases\");\n-\n-    // Traverse the tree and collect strings\n-    NodeTraversal.traverse(compiler, root, this);\n-  }\n-\n-  private void replaceJqueryPrototypeAlias(Node n) {\n-    Node fn = n.getLastChild();\n-    if (fn != null) {\n-      n.replaceChild(fn, IR.string(\"prototype\"));\n-      compiler.reportCodeChange();\n-    }\n-  }\n-  \n-  private void replaceJqueryExtendCall(Node n) {\n-    Node callTarget = n.getFirstChild();\n-    Node objectToExtend = callTarget.getNext(); //first argument\n-    Node extendArg = objectToExtend.getNext(); //second argument\n-    \n-    if (extendArg == null) {\n-      //Only one argument was specified, so extend jQuery namespace\n-      extendArg = objectToExtend;\n-      objectToExtend = callTarget.getFirstChild();\n-    }\n-    \n-    //Check for an empty object literal\n-    if (!extendArg.hasChildren())\n-      return;\n-\n-    /* Since we are expanding jQuery.extend calls into multiple statements,\n-     * encapsulate the new statements in an immediately executed anonymous\n-     * function that returns the extended object.\n-     */\n-    Node fncBlock = IR.block().srcref(n);\n-    \n-    while (extendArg.hasChildren()) {\n-      Node currentProp = extendArg.removeFirstChild();\n-      Node propValue = currentProp.removeFirstChild();\n-\n-      Node newProp;\n-      if(currentProp.isQuotedString()) {\n-        newProp = IR.getelem(objectToExtend.cloneTree(),\n-            currentProp).srcref(currentProp);\n-      } else {\n-        newProp = IR.getprop(objectToExtend.cloneTree(),\n-            currentProp).srcref(currentProp);\n-      }\n-\n-      Node assignNode = IR.assign(newProp, propValue).srcref(currentProp);      \n-      fncBlock.addChildToBack(IR.exprResult(assignNode).srcref(currentProp));\n-    }\n-    \n-    Node targetVal;\n-    if (\"jQuery.prototype\".equals(objectToExtend.getQualifiedName())) {\n-      /* When extending the jQuery prototype, return the jQuery namespace.\n-       * No known uses of the return value exist for this case.\n-       * TODO(Chad Killingsworth): Check jQuery plugins\n-       */\n-      targetVal = objectToExtend.getFirstChild().cloneTree();\n-    } else {\n-      targetVal = objectToExtend.cloneTree();\n-    }\n-    fncBlock.addChildToBack(IR.returnNode(targetVal).srcref(targetVal));\n-    \n-    Node fnc = IR.function(IR.name(\"\").srcref(n),\n-        IR.paramList().srcref(n),\n-        fncBlock);\n-    n.replaceChild(callTarget, fnc);\n-    \n-    //remove any other pre-existing call arguments\n-    while(fnc.getNext() != null) {\n-      n.removeChildAfter(fnc);\n-    }\n-    \n-    compiler.reportCodeChange();\n-  }\n-}\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import java.util.Set;\n+import java.util.logging.Logger;\n+\n+import com.google.common.collect.ImmutableSet;\n+import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n+import com.google.javascript.rhino.IR;\n+import com.google.javascript.rhino.Node;\n+\n+/**\n+ * Replace known jQuery aliases and methods with standard\n+ * conventions so that the compiler recognizes them. Expected\n+ * replacements include:\n+ *  - jQuery.fn -> jQuery.prototype\n+ *  - jQuery.extend -> expanded into direct object assignments\n+ *\n+ */\n+class ExpandJqueryAliases extends AbstractPostOrderCallback\n+    implements CompilerPass {\n+  private final AbstractCompiler compiler;\n+  private static final Logger logger =\n+      Logger.getLogger(ExpandJqueryAliases.class.getName());\n+  private static final Set<String> JqueryExtendNames = ImmutableSet.of(\n+              \"jQuery.extend\", \"jQuery.fn.extend\", \"jQuery.prototype.extend\");\n+\n+  ExpandJqueryAliases(AbstractCompiler compiler) {\n+    this.compiler = compiler;\n+  }\n+\n+  public static boolean isJqueryExtendReference(Node n, String qname) {\n+    if (JqueryExtendNames.contains(qname)) {\n+      Node firstArgument = n.getNext();\n+      if (firstArgument == null) {\n+        return false;\n+      }\n+\n+      Node secondArgument = firstArgument.getNext();\n+      if ((firstArgument.isObjectLit() && secondArgument == null) ||\n+          (firstArgument.isName() && secondArgument != null &&\n+          secondArgument.isObjectLit())) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (compiler.getCodingConvention().isPrototypeAlias(n)) {\n+      replaceJqueryPrototypeAlias(n);\n+    } else if (n.isCall()) {\n+      Node callTarget = n.getFirstChild();\n+      String qName = callTarget.getQualifiedName();\n+\n+      if (isJqueryExtendReference(callTarget, qName)) {\n+        replaceJqueryExtendCall(n);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void process(Node externs, Node root) {\n+    logger.info(\"Expanding Jquery Aliases\");\n+\n+    // Traverse the tree and collect strings\n+    NodeTraversal.traverse(compiler, root, this);\n+  }\n+\n+  private void replaceJqueryPrototypeAlias(Node n) {\n+    Node fn = n.getLastChild();\n+    if (fn != null) {\n+      n.replaceChild(fn, IR.string(\"prototype\"));\n+      compiler.reportCodeChange();\n+    }\n+  }\n+\n+  private void replaceJqueryExtendCall(Node n) {\n+    Node callTarget = n.getFirstChild();\n+    Node objectToExtend = callTarget.getNext(); //first argument\n+    Node extendArg = objectToExtend.getNext(); //second argument\n+\n+    if (extendArg == null) {\n+      //Only one argument was specified, so extend jQuery namespace\n+      extendArg = objectToExtend;\n+      objectToExtend = callTarget.getFirstChild();\n+    }\n+\n+    //Check for an empty object literal\n+    if (!extendArg.hasChildren())\n+      return;\n+\n+    /* Since we are expanding jQuery.extend calls into multiple statements,\n+     * encapsulate the new statements in an immediately executed anonymous\n+     * function that returns the extended object.\n+     */\n+    Node fncBlock = IR.block().srcref(n);\n+\n+    while (extendArg.hasChildren()) {\n+      Node currentProp = extendArg.removeFirstChild();\n+      Node propValue = currentProp.removeFirstChild();\n+\n+      Node newProp;\n+      if(currentProp.isQuotedString()) {\n+        newProp = IR.getelem(objectToExtend.cloneTree(),\n+            currentProp).srcref(currentProp);\n+      } else {\n+        newProp = IR.getprop(objectToExtend.cloneTree(),\n+            currentProp).srcref(currentProp);\n+      }\n+\n+      Node assignNode = IR.assign(newProp, propValue).srcref(currentProp);\n+      fncBlock.addChildToBack(IR.exprResult(assignNode).srcref(currentProp));\n+    }\n+\n+    Node targetVal;\n+    if (\"jQuery.prototype\".equals(objectToExtend.getQualifiedName())) {\n+      /* When extending the jQuery prototype, return the jQuery namespace.\n+       * No known uses of the return value exist for this case.\n+       * TODO(Chad Killingsworth): Check jQuery plugins\n+       */\n+      targetVal = objectToExtend.getFirstChild().cloneTree();\n+    } else {\n+      targetVal = objectToExtend.cloneTree();\n+    }\n+    fncBlock.addChildToBack(IR.returnNode(targetVal).srcref(targetVal));\n+\n+    Node fnc = IR.function(IR.name(\"\").srcref(n),\n+        IR.paramList().srcref(n),\n+        fncBlock);\n+    n.replaceChild(callTarget, fnc);\n+\n+    //remove any other pre-existing call arguments\n+    while(fnc.getNext() != null) {\n+      n.removeChildAfter(fnc);\n+    }\n+\n+    compiler.reportCodeChange();\n+  }\n+}\n--- a/src/com/google/javascript/jscomp/JqueryCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/JqueryCodingConvention.java\n-/*\n- * Copyright 2011 The Closure Compiler Authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.javascript.jscomp;\n-\n-import java.util.Set;\n-import com.google.common.base.Preconditions;\n-import com.google.common.collect.ImmutableSet;\n-import com.google.javascript.rhino.Node;\n-\n-/**\n- * This describes the jQuery specific JavaScript coding conventions.\n- */\n-public class JqueryCodingConvention extends CodingConventions.Proxy {\n-  private static final long serialVersionUID = 1L;\n-\n-  public JqueryCodingConvention() {\n-    this(CodingConventions.getDefault());\n-  }\n-\n-  public JqueryCodingConvention(CodingConvention wrapped) {\n-    super(wrapped);\n-  }\n-  \n-  @Override\n-  public String getGlobalObject() {\n-    return \"window\";\n-  }\n-  \n-  private final Set<String> propertyTestFunctions = ImmutableSet.of(\n-      \"jQuery.isPlainObject\", \"jQuery.isFunction\", \"jQuery.isNumeric\",\n-      \"jQuery.isEmptyObject\");\n-\n-  @Override\n-  public boolean isPropertyTestFunction(Node call) {\n-    Preconditions.checkArgument(call.isCall());\n-    return propertyTestFunctions.contains(\n-        call.getFirstChild().getQualifiedName());\n-  }\n-  \n-  private final Set<String> prototypeAliases = ImmutableSet.of(\n-      \"jQuery.fn\", \"jQuerySub.fn\");\n-  \n-  @Override\n-  public boolean isPrototypeAlias(Node n) {\n-    if (n.isGetProp()) {\n-      if (n.isName() || n.isGetProp() || n.isGetElem()) {\n-        return !NodeUtil.isLValue(n) &&\n-            prototypeAliases.contains(n.getQualifiedName());\n-      } else {\n-        return prototypeAliases.contains(n.getQualifiedName());\n-      }\n-    }\n-    return false;\n-  }\n-}\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import java.util.Set;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.javascript.rhino.Node;\n+\n+/**\n+ * This describes the jQuery specific JavaScript coding conventions.\n+ */\n+public class JqueryCodingConvention extends CodingConventions.Proxy {\n+  private static final long serialVersionUID = 1L;\n+\n+  public JqueryCodingConvention() {\n+    this(CodingConventions.getDefault());\n+  }\n+\n+  public JqueryCodingConvention(CodingConvention wrapped) {\n+    super(wrapped);\n+  }\n+\n+  @Override\n+  public String getGlobalObject() {\n+    return \"window\";\n+  }\n+\n+  private final Set<String> propertyTestFunctions = ImmutableSet.of(\n+      \"jQuery.isPlainObject\", \"jQuery.isFunction\", \"jQuery.isNumeric\",\n+      \"jQuery.isEmptyObject\");\n+\n+  @Override\n+  public boolean isPropertyTestFunction(Node call) {\n+    Preconditions.checkArgument(call.isCall());\n+    return propertyTestFunctions.contains(\n+        call.getFirstChild().getQualifiedName());\n+  }\n+\n+  private final Set<String> prototypeAliases = ImmutableSet.of(\n+      \"jQuery.fn\", \"jQuerySub.fn\");\n+\n+  @Override\n+  public boolean isPrototypeAlias(Node n) {\n+    if (n.isGetProp()) {\n+      if (n.isName() || n.isGetProp() || n.isGetElem()) {\n+        return !NodeUtil.isLValue(n) &&\n+            prototypeAliases.contains(n.getQualifiedName());\n+      } else {\n+        return prototypeAliases.contains(n.getQualifiedName());\n+      }\n+    }\n+    return false;\n+  }\n+}\n--- a/test/com/google/javascript/jscomp/ExpandJqueryAliasesTest.java\n+++ b/test/com/google/javascript/jscomp/ExpandJqueryAliasesTest.java\n-/*\n- * Copyright 2011 The Closure Compiler Authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.google.javascript.jscomp;\n-\n-/**\n- * Tests for {@link ExpandJqueryAliases}\n- */\n-public class ExpandJqueryAliasesTest extends CompilerTestCase {\n-  private JqueryCodingConvention conv = new JqueryCodingConvention();\n-  \n-  public ExpandJqueryAliasesTest() {}\n-\n-  @Override\n-  protected CompilerPass getProcessor(Compiler compiler) {\n-    compiler.options.setCodingConvention(conv);\n-    return new ExpandJqueryAliases(compiler);\n-  }\n-\n-  public void testJqueryFnAliasExpansion() {\n-    String setupCode = \"var jQuery={};jQuery.fn=jQuery.prototype;\";\n-    \n-    testSame(setupCode);\n-    \n-    test(setupCode + \"jQuery.fn.foo='bar';\",\n-        setupCode + \"jQuery.prototype.foo='bar';\");\n-    \n-    test(setupCode + \"jQuerySub.fn.foo='bar';\",\n-        setupCode + \"jQuerySub.prototype.foo='bar';\");\n-  }\n-  \n-  public void testJqueryExtendAliasExpansion() {\n-    String setupCode = \"var jQuery={},obj2={};\";\n-    \n-    //test invalid extend call\n-    testSame(setupCode + \"jQuery.extend();\");\n-    \n-    //test empty extend call\n-    testSame(setupCode + \"jQuery.extend({});\");\n-    \n-    /*\n-     * TODO(Chad Killingsworth) fix the following unit tests...\n-     */\n-    /*//Extend the jQuery namespace\n-    test(setupCode + \"jQuery.extend({a:'test', b:'test2'});\",\n-        setupCode + \"(function(){\" +\n-        \"jQuery.a='test';jQuery.b='test2';return jQuery;})();\");\n-    \n-    //Extend the jQuery prototype\n-    test(setupCode + \"jQuery.fn=jQuery.prototype;\" +\n-        \"jQuery.fn.extend({a:'test', b:'test2';return jQuery;});\",\n-        setupCode + \"jQuery.fn=jQuery.prototype;(function(){\" +\n-        \"jQuery.prototype.a='test';jQuery.prototype.b='test2';\" +\n-        \"return jQuery;})();\");\n-    \n-    //Extend obj2\n-    test(setupCode + \"jQuery.extend(obj2, {a:'test', b:'test2'});\",\n-        setupCode + \"(function(){\" +\n-        \"obj2.a='test';obj2.b='test2';return obj2;})();\");\n-    \n-    //Extend the jQuery namespace - 2 argument call\n-    test(setupCode + \"jQuery.extend(jQuery,{a:'test', b:'test2'});\",\n-        setupCode + \"(function(){\" +\n-        \"jQuery.a='test';jQuery.b='test2';return jQuery;})();\");\n-    */\n-  }\n-}\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+/**\n+ * Tests for {@link ExpandJqueryAliases}\n+ */\n+public class ExpandJqueryAliasesTest extends CompilerTestCase {\n+  private JqueryCodingConvention conv = new JqueryCodingConvention();\n+\n+  public ExpandJqueryAliasesTest() {}\n+\n+  @Override\n+  protected CompilerPass getProcessor(Compiler compiler) {\n+    compiler.options.setCodingConvention(conv);\n+    return new ExpandJqueryAliases(compiler);\n+  }\n+\n+  public void testJqueryFnAliasExpansion() {\n+    String setupCode = \"var jQuery={};jQuery.fn=jQuery.prototype;\";\n+\n+    testSame(setupCode);\n+\n+    test(setupCode + \"jQuery.fn.foo='bar';\",\n+        setupCode + \"jQuery.prototype.foo='bar';\");\n+\n+    test(setupCode + \"jQuerySub.fn.foo='bar';\",\n+        setupCode + \"jQuerySub.prototype.foo='bar';\");\n+  }\n+\n+  public void testJqueryExtendAliasExpansion() {\n+    String setupCode = \"var jQuery={},obj2={};\";\n+\n+    //test invalid extend call\n+    testSame(setupCode + \"jQuery.extend();\");\n+\n+    //test empty extend call\n+    testSame(setupCode + \"jQuery.extend({});\");\n+\n+    /*\n+     * TODO(Chad Killingsworth) fix the following unit tests...\n+     */\n+    /*//Extend the jQuery namespace\n+    test(setupCode + \"jQuery.extend({a:'test', b:'test2'});\",\n+        setupCode + \"(function(){\" +\n+        \"jQuery.a='test';jQuery.b='test2';return jQuery;})();\");\n+\n+    //Extend the jQuery prototype\n+    test(setupCode + \"jQuery.fn=jQuery.prototype;\" +\n+        \"jQuery.fn.extend({a:'test', b:'test2';return jQuery;});\",\n+        setupCode + \"jQuery.fn=jQuery.prototype;(function(){\" +\n+        \"jQuery.prototype.a='test';jQuery.prototype.b='test2';\" +\n+        \"return jQuery;})();\");\n+\n+    //Extend obj2\n+    test(setupCode + \"jQuery.extend(obj2, {a:'test', b:'test2'});\",\n+        setupCode + \"(function(){\" +\n+        \"obj2.a='test';obj2.b='test2';return obj2;})();\");\n+\n+    //Extend the jQuery namespace - 2 argument call\n+    test(setupCode + \"jQuery.extend(jQuery,{a:'test', b:'test2'});\",\n+        setupCode + \"(function(){\" +\n+        \"jQuery.a='test';jQuery.b='test2';return jQuery;})();\");\n+    */\n+  }\n+}", "timestamp": 1323441473, "metainfo": ""}