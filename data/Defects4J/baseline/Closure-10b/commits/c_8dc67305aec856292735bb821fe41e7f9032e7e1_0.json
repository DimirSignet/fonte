{"sha": "8dc67305aec856292735bb821fe41e7f9032e7e1", "log": "Make ObjectType implement StaticScope. This is part of a long-term plan to write a general symbol table with a unified API across many different types of data structures. I accidentally fixed a bug in interfaces when doing this, so added tests for the bugs i fixed.  R=acleung DELTA=177  (101 added, 49 deleted, 27 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2282   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/EnumElementType.java\n+++ b/src/com/google/javascript/rhino/jstype/EnumElementType.java\n   }\n \n   @Override\n+  public StaticSlot<JSType> getSlot(String name) {\n+    if (primitiveObjectType != null) {\n+      return primitiveObjectType.getSlot(name);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n   public boolean isEnumElementType() {\n     return true;\n   }\n    *\n    * @return true for everything but Number and Boolean types.\n    */\n-  @Override public boolean isNullable() {\n+  @Override\n+  public boolean isNullable() {\n     return primitiveType.isNullable();\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n   /**\n    * Gets the type of {@code this} in this function.\n    */\n+  @Override\n   public ObjectType getTypeOfThis() {\n     return typeOfThis.isNoObjectType() ?\n         registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;\n--- a/src/com/google/javascript/rhino/jstype/ObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java\n  * declared or inferred.\n  *\n  */\n-public abstract class ObjectType extends JSType {\n+public abstract class ObjectType extends JSType implements StaticScope<JSType> {\n   private boolean visited;\n   private JSDocInfo docInfo = null;\n   private boolean unknown = true;\n     super(registry);\n   }\n \n+  @Override\n+  public StaticScope<JSType> getParentScope() {\n+    return getImplicitPrototype();\n+  }\n+\n+  @Override\n+  public abstract StaticSlot<JSType> getSlot(String name);\n+\n+  @Override\n+  public StaticSlot<JSType> getOwnSlot(String name) {\n+    if (hasOwnProperty(name)) {\n+      return getSlot(name);\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public ObjectType getTypeOfThis() {\n+    return null;\n+  }\n+\n   /**\n    * Gets the declared default element type.\n    * @see ParameterizedType\n   /**\n    * Gets the docInfo for this type.\n    */\n-  @Override public JSDocInfo getJSDocInfo() {\n+  @Override\n+  public JSDocInfo getJSDocInfo() {\n     if (docInfo != null) {\n       return docInfo;\n     } else if (getImplicitPrototype() != null) {\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n     }\n   }\n \n+  @Override\n+  public StaticSlot<JSType> getSlot(String name) {\n+    if (properties.containsKey(name)) {\n+      return properties.get(name);\n+    }\n+    ObjectType implicitPrototype = getImplicitPrototype();\n+    if (implicitPrototype != null) {\n+      StaticSlot<JSType> prop = implicitPrototype.getSlot(name);\n+      if (prop != null) {\n+        return prop;\n+      }\n+    }\n+    for (ObjectType interfaceType : getCtorExtendedInterfaces()) {\n+      StaticSlot<JSType> prop = interfaceType.getSlot(name);\n+      if (prop != null) {\n+        return prop;\n+      }\n+    }\n+    return null;\n+  }\n+\n   /**\n    * Gets the number of properties of this object.\n    */\n \n   @Override\n   public boolean hasProperty(String propertyName) {\n-    if (properties.get(propertyName) != null) {\n-      return true;\n-    }\n-    ObjectType implicitPrototype = getImplicitPrototype();\n-    if (implicitPrototype != null) {\n-      if (implicitPrototype.hasProperty(propertyName)) {\n-        return true;\n-      }\n-    }\n-    for (ObjectType interfaceType : getCtorExtendedInterfaces()) {\n-      if (interfaceType.hasProperty(propertyName)) {\n-        return true;\n-      }\n-    }\n-    return false;\n+    // Unknown types have all properties.\n+    return isUnknownType() || getSlot(propertyName) != null;\n   }\n \n   @Override\n \n   @Override\n   public boolean isPropertyTypeDeclared(String property) {\n-    Property p = properties.get(property);\n-    if (p == null) {\n-      ObjectType implicitPrototype = getImplicitPrototype();\n-      if (implicitPrototype != null) {\n-        return implicitPrototype.isPropertyTypeDeclared(property);\n-      }\n-      // property does not exist\n+    StaticSlot<JSType> slot = getSlot(property);\n+    if (slot == null) {\n       return false;\n     }\n-    return !p.inferred;\n+    return !slot.isTypeInferred();\n   }\n \n   @Override\n \n   @Override\n   public boolean isPropertyTypeInferred(String property) {\n-    Property p = properties.get(property);\n-    if (p == null) {\n-      ObjectType implicitPrototype = getImplicitPrototype();\n-      if (implicitPrototype != null) {\n-        return implicitPrototype.isPropertyTypeInferred(property);\n-      }\n-      // property does not exist\n+    StaticSlot<JSType> slot = getSlot(property);\n+    if (slot == null) {\n       return false;\n     }\n-    return p.inferred;\n-  }\n-\n-  @Override\n-  public JSType getPropertyType(String propertyName) {\n-    Property p = properties.get(propertyName);\n-    if (p != null) {\n-      return p.type;\n-    }\n-    ObjectType implicitPrototype = getImplicitPrototype();\n-    if (implicitPrototype != null) {\n-      return implicitPrototype.getPropertyType(propertyName);\n-    }\n-    return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+    return slot.isTypeInferred();\n+  }\n+\n+  @Override\n+  public JSType getPropertyType(String property) {\n+    StaticSlot<JSType> slot = getSlot(property);\n+    if (slot == null) {\n+      return getNativeType(JSTypeNative.UNKNOWN_TYPE);\n+    }\n+    return slot.getType();\n   }\n \n   @Override\n     if (hasOwnDeclaredProperty(name)) {\n       return false;\n     }\n-    Property newProp = new Property(type, inferred, inExterns, propertyNode);\n+    Property newProp = new Property(\n+        name, type, inferred, inExterns, propertyNode);\n     Property oldProp = properties.get(name);\n     if (oldProp != null) {\n       // This is to keep previously inferred jsdoc info, e.g., in a\n     return false;\n   }\n \n-  private static final class Property implements Serializable {\n+  private static final class Property\n+      implements Serializable, StaticSlot<JSType> {\n     private static final long serialVersionUID = 1L;\n+\n+    /**\n+     * Property's name.\n+     */\n+    private String name;\n \n     /**\n      * Property's type.\n     /**  The JSDocInfo for this property. */\n     private JSDocInfo docInfo = null;\n \n-    private Property(JSType type, boolean inferred, boolean inExterns,\n-        Node propertyNode) {\n+    private Property(String name, JSType type, boolean inferred,\n+        boolean inExterns, Node propertyNode) {\n+      this.name = name;\n       this.type = type;\n       this.inferred = inferred;\n       this.inExterns = inExterns;\n       this.propertyNode = propertyNode;\n     }\n+\n+    @Override\n+    public String getName() {\n+      return name;\n+    }\n+\n+    @Override\n+    public JSType getType() {\n+      return type;\n+    }\n+\n+    @Override\n+    public boolean isTypeInferred() {\n+      return inferred;\n+    }\n   }\n \n   @Override\n--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n     setReferencedType(referencedType);\n   }\n \n+  @Override\n+  public StaticSlot<JSType> getSlot(String name) {\n+    if (referencedObjType != null) {\n+      return referencedObjType.getSlot(name);\n+    }\n+    return null;\n+  }\n+\n   JSType getReferencedTypeInternal() {\n     return referencedType;\n   }\n         null : referencedObjType.hasReferenceName();\n   }\n \n-  @Override public boolean matchesNumberContext() {\n+  @Override\n+  public boolean matchesNumberContext() {\n     return referencedType.matchesNumberContext();\n   }\n \n     return referencedType.matchesStringContext();\n   }\n \n-  @Override public boolean matchesObjectContext() {\n+  @Override\n+  public boolean matchesObjectContext() {\n     return referencedType.matchesObjectContext();\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/UnknownType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnknownType.java\n   UnknownType(JSTypeRegistry registry, boolean isChecked) {\n     super(registry);\n     this.isChecked = isChecked;\n+  }\n+\n+  @Override\n+  public StaticSlot<JSType> getSlot(String name) {\n+    return null;\n   }\n \n   @Override\n--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n \n   public void testInterfacePrototypeChain2() {\n     FunctionType iface = registry.createInterfaceType(\"I\", null);\n+    iface.getPrototype().defineDeclaredProperty(\n+        \"numberProp\", NUMBER_TYPE, false, null);\n+\n     FunctionType subIface = registry.createInterfaceType(\"SubI\", null);\n-    subIface.setExtendedInterfaces(Lists.<ObjectType>newArrayList(iface));\n+    subIface.setExtendedInterfaces(\n+        Lists.<ObjectType>newArrayList(iface.getInstanceType()));\n     assertTypeEquals(\n         subIface.getPrototype(),\n         subIface.getInstanceType().getImplicitPrototype());\n     assertTypeEquals(\n         OBJECT_TYPE,\n         subIface.getPrototype().getImplicitPrototype());\n+\n+    ObjectType subIfaceInst = subIface.getInstanceType();\n+    assertTrue(subIfaceInst.hasProperty(\"numberProp\"));\n+    assertTrue(subIfaceInst.isPropertyTypeDeclared(\"numberProp\"));\n+    assertFalse(subIfaceInst.isPropertyTypeInferred(\"numberProp\"));\n   }\n \n   private void assertLeastSupertype(String s, JSType t1, JSType t2) {", "timestamp": 1308169219, "metainfo": ""}