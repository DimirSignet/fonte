{"sha": "fa45534251c33bc8ab890dd58a8ff51dd75ed02d", "log": "Make disambiguate property invalidation warnings configurable.  R=moedinger DELTA=22  (9 added, 0 deleted, 13 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=677   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n     return groupsByName.get(name);\n   }\n \n-  // A bit a hack to display the available groups on the command-line.\n+  // A bit of a hack to display the available groups on the command-line.\n   // New groups should be added to this list if they are public and should\n   // be listed on the command-line as an available option.\n   static final String DIAGNOSTIC_GROUP_NAMES =\n       \"accessControls, ambiguousFunctionDecl, checkRegExp,\" +\n-      \"checkTypes, checkVars, deprecated, \" +\n+      \"checkTypes, checkVars, constantProperty, deprecated, \" +\n       \"externsValidation, fileoverviewTags, internetExplorerChecks, \" +\n       \"invalidCasts, missingProperties, nonStandardJsDocs, \" +\n-      \"strictModuleDepCheck, undefinedVars, unknownDefines, uselessCode, \" +\n-      \"visibility, constantProperty\";\n+      \"strictModuleDepCheck, typeInvalidation, \" +\n+      \"undefinedVars, unknownDefines, uselessCode, \" +\n+      \"visibility\";\n \n   public static DiagnosticGroup DEPRECATED = DiagnosticGroups\n       .registerGroup(\"deprecated\",\n               CheckSideEffects.USELESS_CODE_ERROR,\n               CheckUnreachableCode.UNREACHABLE_CODE));\n \n+  public static DiagnosticGroup TYPE_INVALIDATION =\n+    DiagnosticGroups.registerGroup(\"typeInvalidation\",\n+        new DiagnosticGroup(\n+            DisambiguateProperties.Warnings.INVALIDATION));\n+\n   /**\n    * Adds warning levels by name.\n    */\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n   private static final Logger logger = Logger.getLogger(\n       DisambiguateProperties.class.getName());\n \n-  // TODO(user): add a flag to allow enabling of this once apps start\n-  // using it.\n-  static final DiagnosticType INVALIDATION = DiagnosticType.warning(\n-      \"JSC_INVALIDATION\",\n-      \"Property disambiguator skipping all instances of property {0} \"\n-      + \"because of type {1} node {2}\");\n-  private final boolean showInvalidationWarnings = false;\n+  static class Warnings {\n+    static final DiagnosticType INVALIDATION = DiagnosticType.disabled(\n+        \"JSC_INVALIDATION\",\n+        \"Property disambiguator skipping all instances of property {0} \"\n+        + \"because of type {1} node {2}\");\n+  }\n+\n+  private final boolean showInvalidationWarnings;\n \n   private final AbstractCompiler compiler;\n   private final TypeSystem<T> typeSystem;\n                                  TypeSystem<T> typeSystem) {\n     this.compiler = compiler;\n     this.typeSystem = typeSystem;\n+    this.showInvalidationWarnings = compiler.getErrorLevel(\n+        JSError.make(\"\", 0, 0, Warnings.INVALIDATION)) != CheckLevel.OFF;\n   }\n \n   public void process(Node externs, Node root) {\n                                  processProperty(t, prop, type, null))) {\n         if (showInvalidationWarnings) {\n           compiler.report(JSError.make(\n-              t.getSourceName(), n, INVALIDATION, name,\n+              t.getSourceName(), n, Warnings.INVALIDATION, name,\n               (type == null ? \"null\" : type.toString()), n.toString()));\n         }\n       }\n                                      processProperty(t, prop, type, null))) {\n             if (showInvalidationWarnings) {\n               compiler.report(JSError.make(\n-                  t.getSourceName(), child, INVALIDATION, name,\n+                  t.getSourceName(), child, Warnings.INVALIDATION, name,\n                   (type == null ? \"null\" : type.toString()), n.toString()));\n             }\n           }", "timestamp": 1298662019, "metainfo": ""}