{"sha": "b31b4de025de3beefcd5bf164bb64e13f2ce0691", "log": "widen the RAI API a bit more. fixes issue 696  R=acleung DELTA=3  (0 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4483   ", "commit": "\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n    * name whose type is capable of being refined.\n    * @return The current type of the node if it can be refined, null otherwise.\n    */\n-  JSType getTypeIfRefinable(Node node, FlowScope scope) {\n+  protected JSType getTypeIfRefinable(Node node, FlowScope scope) {\n     switch (node.getType()) {\n       case Token.NAME:\n         StaticSlot<JSType> nameVar = scope.getSlot(node.getString());\n   /**\n    * Returns a version of type where undefined is not present.\n    */\n-  final JSType getRestrictedWithoutUndefined(JSType type) {\n+  protected final JSType getRestrictedWithoutUndefined(JSType type) {\n     return type == null ? null : type.visit(restrictUndefinedVisitor);\n   }\n \n   /**\n    * Returns a version of type where null is not present.\n    */\n-  final JSType getRestrictedWithoutNull(JSType type) {\n+  protected final JSType getRestrictedWithoutNull(JSType type) {\n     return type == null ? null : type.visit(restrictNullVisitor);\n   }\n ", "timestamp": 1333663101, "metainfo": ""}