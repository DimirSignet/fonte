{"sha": "fe46a1c34dc37a7b48b3af7a49087e3441ef4f32", "log": "Read the tc_project flag (if present) when the ReplaceMessagesWithChromeI18n pass is used. This is needed so that the message IDs generated by the GoogleJsMessageIdGenerator will match those extracted by whichever message extraction tool is used.  R=nicksantos DELTA=16  (13 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5518   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n    * Used by Chrome extensions/apps.\n    */\n   boolean replaceMessagesWithChromeI18n;\n+  String tcProjectId;\n \n   public void setReplaceMessagesWithChromeI18n(\n-      boolean replaceMessagesWithChromeI18n) {\n+      boolean replaceMessagesWithChromeI18n,\n+      String tcProjectId) {\n     if (replaceMessagesWithChromeI18n &&\n         messageBundle != null &&\n         !(messageBundle instanceof EmptyMessageBundle)) {\n     }\n \n     this.replaceMessagesWithChromeI18n = replaceMessagesWithChromeI18n;\n+    this.tcProjectId = tcProjectId;\n+  }\n+\n+  /**\n+   * @deprecated Use {@link #setReplaceMessagesWithChromeI18n(boolean, String)}.\n+   */\n+  @Deprecated\n+  public void setReplaceMessagesWithChromeI18n(\n+      boolean replaceMessagesWithChromeI18n) {\n+    setReplaceMessagesWithChromeI18n(replaceMessagesWithChromeI18n, null);\n   }\n \n   /** Inserts run-time type assertions for debugging. */\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n       return new ReplaceMessagesForChrome(compiler,\n-          new GoogleJsMessageIdGenerator(null),\n+          new GoogleJsMessageIdGenerator(options.tcProjectId),\n           /* warn about message dupes */\n           true,\n           /* allow messages with goog.getMsg */", "timestamp": 1348158997, "metainfo": ""}