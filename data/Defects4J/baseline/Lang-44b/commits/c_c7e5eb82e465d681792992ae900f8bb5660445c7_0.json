{"sha": "c7e5eb82e465d681792992ae900f8bb5660445c7", "log": "Javadoc patch for java example. Submitted by:\tChristopher M. Judd <cjudd@columbus.rr.com>   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n  *   int age;\n  *   boolean isSmoker;\n  *   ...\n- * \n+ *\n  *   public int hashCode() {\n  *     // you pick a hard-coded, randomly chosen, non-zero, odd number\n  *     // ideally different for each class\n  *   }\n  * }\n  * </pre>\n- * \n+ *\n  * <p>If required, the superclass hashCode can be added using {@link #appendSuper}.</p>\n  *\n  * <p>Alternatively, there is a method that uses reflection to determine\n- * the fields to test. Because these fields are usually private, the method, \n+ * the fields to test. Because these fields are usually private, the method,\n  * <code>reflectionHashCode</code>, uses <code>Field.setAccessible</code> to\n- * change the visibility of the fields. This will fail under a security manager, \n+ * change the visibility of the fields. This will fail under a security manager,\n  * unless the appropriate permissions are set up correctly. It is also slower\n  * than testing explicitly.</p>\n  *\n  * <p>A typical invocation for this method would look like:</p>\n  * <pre>\n- * public boolean hashCode(Object o) {\n+ * public int hashCode() {\n  *   return HashCodeBuilder.reflectionHashCode(this);\n  * }\n  * </pre>\n- * \n+ *\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: HashCodeBuilder.java,v 1.7 2002/12/23 00:20:31 scolebourne Exp $\n+ * @version $Id: HashCodeBuilder.java,v 1.8 2003/01/15 20:51:57 bayard Exp $\n  */\n public class HashCodeBuilder {\n-    \n+\n     /**\n      * Constant to use in building the hashCode\n      */\n      * Running total of the hashCode\n      */\n     private int iTotal = 0;\n-    \n+\n     /**\n      * <p>Constructor for HashCodeBuilder.</p>\n      *\n         iConstant = 37;\n         iTotal = 17;\n     }\n-    \n+\n     /**\n      * <p>Constructor for <code>HashCodeBuilder</code>.</p>\n      *\n      * not vital.</p>\n      *\n      * <p>Prime numbers are preferred, especially for the multiplier.</p>\n-     * \n+     *\n      * @param initialNonZeroOddNumber  a non-zero, odd number used as the initial value\n      * @param multiplierNonZeroOddNumber  a non-zero, odd number used as the multiplier\n      * @throws IllegalArgumentException if the number is zero or even\n     }\n \n     //-------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>This method uses reflection to build a valid hash code.</p>\n      *\n     public static int reflectionHashCode(Object object, boolean testTransients) {\n         return reflectionHashCode(17, 37, object, testTransients);\n     }\n-        \n+\n     /**\n      * <p>This method uses reflection to build a valid hash code.</p>\n      *\n      * <p>Two randomly chosen, non-zero, odd numbers must be passed in. Ideally\n      * these should be different for each class, however this is not vital.\n      * Prime numbers are preferred, especially for the multiplier.</p>\n-     * \n+     *\n      * @param initialNonZeroOddNumber  a non-zero, odd number used as the initial value\n      * @param multiplierNonZeroOddNumber  a non-zero, odd number used as the multiplier\n      * @param object  the Object to create a <code>hashCode</code> for\n      * @throws IllegalArgumentException if the number is zero or even\n      */\n     public static int reflectionHashCode(\n-            int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, \n+            int initialNonZeroOddNumber, int multiplierNonZeroOddNumber,\n             Object object) {\n         return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false);\n     }\n-    \n+\n     /**\n      * <p>This method uses reflection to build a valid hash code.</p>\n      *\n      * <p>Two randomly chosen, non-zero, odd numbers must be passed in. Ideally\n      * these should be different for each class, however this is not vital.\n      * Prime numbers are preferred, especially for the multiplier.</p>\n-     * \n+     *\n      * @param initialNonZeroOddNumber\n      * @param multiplierNonZeroOddNumber\n      * @param object  the Object to create a <code>hashCode</code> for\n     public static int reflectionHashCode(\n             int initialNonZeroOddNumber, int multiplierNonZeroOddNumber,\n             Object object, boolean testTransients) {\n-                \n+\n         if (object == null) {\n             throw new IllegalArgumentException(\"The object to build a hash code for must not be null\");\n         }\n     }\n \n     //-------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Adds the result of super.hashCode() to this builder.</p>\n      *\n         iTotal = iTotal * iConstant + superHashCode;\n         return this;\n     }\n-    \n+\n     //-------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append a <code>hashCode</code> for an <code>Object</code>.</p>\n      *\n     public HashCodeBuilder append(Object object) {\n         if (object == null) {\n             iTotal = iTotal * iConstant;\n-            \n+\n         } else {\n             if (object.getClass().isArray() == false) {\n-                //the simple case, not an array, just the element \n+                //the simple case, not an array, just the element\n                 iTotal = iTotal * iConstant + object.hashCode();\n-                \n+\n             } else {\n                 //'Switch' on type of array, to dispatch to the correct handler\n                 // This handles multi dimensional arrays\n                     append((float[]) object);\n                 } else if (object instanceof boolean[]) {\n                     append((boolean[]) object);\n-                } else { \n+                } else {\n                     // Not an array of primitives\n                     append((Object[]) object);\n                 }\n \n     /**\n      * <p>Return the computed <code>hashCode</code>.</p>\n-     * \n+     *\n      * @return <code>hashCode</code> based on the fields appended\n-     */    \n+     */\n     public int toHashCode() {\n         return iTotal;\n     }", "timestamp": 1042663917, "metainfo": ""}