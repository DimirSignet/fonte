{"sha": "0fa987c44d2216125e1f4e99a86eff872c8c826e", "log": "Move remove code to relevant position in source file   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  *      - substring extraction relative to other strings</li>\n  *  <li><b>Split/Join</b>\n  *      - splits a String into an array of substrings and vice versa</li>\n- *  <li><b>Replace/Delete/Overlay</b>\n+ *  <li><b>Remove/Delete</b>\n+ *      - removes part of a String</li>\n+ *  <li><b>Replace/Overlay</b>\n  *      - Searches a String and replaces one String with another</li>\n  *  <li><b>Chomp/Chop</b>\n  *      - removes the last part of a String</li>\n  * @author Gary Gregory\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.114 2003/10/29 02:16:15 ggregory Exp $\n+ * @version $Id: StringUtils.java,v 1.115 2003/11/01 19:20:35 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n             return str;\n         }\n         return new String(chs, 0, count);\n+    }\n+\n+    // Remove\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Removes a substring only if it is at the begining of a source string,\n+     * otherwise returns the source string.</p>\n+     * \n+     * <p>A <code>null</code> source string will return <code>null</code>.\n+     * An empty (\"\") source string will return the empty string.\n+     * A <code>null</code> search string will return the source string.</p>\n+     * \n+     * <pre>\n+     * StringUtils.removeStart(null, *)      = null\n+     * StringUtils.removeStart(\"\", *)        = \"\"\n+     * StringUtils.removeStart(*, null)      = *\n+     * StringUtils.removeStart(\"www.domain.com\", \"www.\")   = \"domain.com\"\n+     * StringUtils.removeStart(\"domain.com\", \"www.\")       = \"domain.com\"\n+     * StringUtils.removeStart(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n+     * StringUtils.removeStart(\"abc\", \"\")    = \"abc\"\n+     * </pre>\n+     *\n+     * @param str  the source String to search, may be null\n+     * @param remove  the String to search for and remove, may be null\n+     * @return the substring with the string removed if found,\n+     *  <code>null</code> if null String input\n+     * @since 2.1\n+     */\n+    public static String removeStart(String str, String remove) {\n+        if (str == null || str.length() == 0 || remove == null || remove.length() == 0) {\n+            return str;\n+        }\n+        if (str.startsWith(remove)){\n+            return str.substring(remove.length());\n+        }\n+        return str;\n+    }\n+\n+    /**\n+     * <p>Removes a substring only if it is at the end of a source string,\n+     * otherwise returns the source string.</p>\n+     *\n+     * <p>A <code>null</code> source string will return <code>null</code>.\n+     * An empty (\"\") source string will return the empty string.\n+     * A <code>null</code> search string will return the source string.</p>\n+     * \n+     * <pre>\n+     * StringUtils.removeEnd(null, *)      = null\n+     * StringUtils.removeEnd(\"\", *)        = \"\"\n+     * StringUtils.removeEnd(*, null)      = *\n+     * StringUtils.removeEnd(\"www.domain.com\", \".com.\")  = \"www,domain\"\n+     * StringUtils.removeEnd(\"www.domain.com\", \".com\")   = \"www.domain\"\n+     * StringUtils.removeEnd(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n+     * StringUtils.removeEnd(\"abc\", \"\")    = \"abc\"\n+     * </pre>\n+     *\n+     * @param str  the source String to search, may be null\n+     * @param remove  the String to search for and remove, may be null\n+     * @return the substring with the string removed if found,\n+     *  <code>null</code> if null String input\n+     * @since 2.1\n+     */\n+    public static String removeEnd(String str, String remove) {\n+        if (str == null || str.length() == 0 || remove == null || remove.length() == 0) {\n+            return str;\n+        }\n+        if (str.endsWith(remove)) {\n+            return str.substring(0, str.length() - remove.length());\n+        }\n+        return str;\n     }\n \n     // Replacing\n         return a;\n     }\n \n-    /**\n-     * <p>Removes a substring only if it is at the begining of a source string, otherwise returns the source string.\n-     *\n-     * <p>A <code>null</code> source string will return <code>null</code>.\n-     * An empty (\"\") source string will return the empty string.\n-     * A <code>null</code> search string will return the source string.</p>\n-     * \n-     * <pre>\n-     * StringUtils.removeStart(null, *)      = null\n-     * StringUtils.removeStart(\"\", *)        = \"\"\n-     * StringUtils.removeStart(*, null)      = *\n-     * StringUtils.removeStart(\"www.domain.com\", \"www.\")   = \"domain.com\"\n-     * StringUtils.removeStart(\"domain.com\", \"www.\")   = \"domain.com\"\n-     * StringUtils.removeStart(\"abc\", \"\")    = \"abc\"\n-     * </pre>\n-     *\n-     * @param string  the source String to search, may be null\n-     * @param remove  the String to search for, may be null\n-     * @return the substring after the optional occurrence of the separator,\n-     *  <code>null</code> if null String input\n-     */\n-    public static String removeStart(String str, String remove) {\n-        if (str == null || str.length() == 0) {\n-            return str;\n-        }\n-        if (remove == null || remove.length() == 0) {\n-            return str;\n-        }\n-        if (str.startsWith(remove)){\n-            return str.substring(remove.length());\n-        }\n-        return str;\n-    }\n-\n-    /**\n-     * <p>Removes a substring only if it is at the end of a source string, otherwise returns the source string.\n-     *\n-     * <p>A <code>null</code> source string will return <code>null</code>.\n-     * An empty (\"\") source string will return the empty string.\n-     * A <code>null</code> search string will return the source string.</p>\n-     * \n-     * <pre>\n-     * StringUtils.removeEnd(null, *)      = null\n-     * StringUtils.removeEnd(\"\", *)        = \"\"\n-     * StringUtils.removeEnd(*, null)      = *\n-     * StringUtils.removeEnd(\"www.domain.com\", \".com.\")   = \"www,domain\"\n-     * StringUtils.removeEnd(\"www.domain.com\", \".com\")   = \"www.domain\"\n-     * StringUtils.removeEnd(\"abc\", \"\")    = \"abc\"\n-     * </pre>\n-     *\n-     * @param string  the source String to search, may be null\n-     * @param remove  the String to search for, may be null\n-     * @return the substring after the optional occurrence of the separator,\n-     *  <code>null</code> if null String input\n-     */\n-    public static String removeEnd(String str, String remove) {\n-        if (str == null || str.length() == 0) {\n-            return str;\n-        }\n-        if (remove == null || remove.length() == 0) {\n-            return str;\n-        }\n-        if (str.endsWith(remove)) {\n-            return str.substring(0, str.length() - remove.length());\n-        }\n-        return str;\n-    }\n-\n }\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: StringUtilsTest.java,v 1.54 2003/10/29 02:16:30 ggregory Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.55 2003/11/01 19:20:35 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         assertEquals(StringUtils.removeStart(\"www.domain.com\", \"www.\"), \"domain.com\");\n         assertEquals(StringUtils.removeStart(\"domain.com\", \"www.\"), \"domain.com\");\n         assertEquals(StringUtils.removeStart(\"domain.com\", \"\"), \"domain.com\");        \n+        assertEquals(StringUtils.removeStart(\"domain.com\", null), \"domain.com\");        \n     }\n \n     public void testRemoveEnd() {\n         assertEquals(StringUtils.removeEnd(\"www.domain.com\", \".com\"), \"www.domain\");\n         assertEquals(StringUtils.removeEnd(\"www.domain\", \".com\"), \"www.domain\");\n         assertEquals(StringUtils.removeEnd(\"domain.com\", \"\"), \"domain.com\");   \n+        assertEquals(StringUtils.removeEnd(\"domain.com\", null), \"domain.com\");   \n     }\n }\n ", "timestamp": 1067714435, "metainfo": ""}