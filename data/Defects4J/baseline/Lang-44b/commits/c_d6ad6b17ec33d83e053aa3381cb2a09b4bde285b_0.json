{"sha": "d6ad6b17ec33d83e053aa3381cb2a09b4bde285b", "log": "Missing '.' caused the Javadoc warning:   [javadoc] Generating C:\\cvs-store\\apache.org\\jakarta\\commons\\lang\\dist\\docs\\api\\index-all.html...   [javadoc] \"<p>Append to the <code>toString</code> a <code>Date</code>   [javadoc]  value, using the optional <code>DateFormat</code>\"   [javadoc] C:\\cvs-store\\apache.org\\jakarta\\commons\\lang\\src\\java\\org\\apache\\commons\\lang\\builder\\ToStringStyle.java:476: warning - The first sentence is interp reted to be:   [javadoc] This sentence is different from what will be interpreted as the first sentence in the   [javadoc] next major release (when that interpretation will be internationalized), which is:   [javadoc] \"<p>Append to the <code>toString</code> a <code>Date</code>   [javadoc]  value, using the optional <code>DateFormat</code></p>\"   [javadoc] To avoid this note, change the doc comment to make this a proper first sentence, then   [javadoc] use -breakiterator from that point forward, which will output this new sentence.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n \n import java.io.Serializable;\n import java.lang.reflect.Array;\n+import java.text.DateFormat;\n import java.util.Collection;\n+import java.util.Date;\n import java.util.Map;\n \n import org.apache.commons.lang.ObjectUtils;\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: ToStringStyle.java,v 1.17 2003/07/20 15:49:58 scolebourne Exp $\n+ * @version $Id: ToStringStyle.java,v 1.18 2003/07/21 19:34:10 ggregory Exp $\n  */\n public abstract class ToStringStyle implements Serializable {\n-    \n+\n     /**\n      * The default toString style.\n      */\n      * Whether to use the identity hash code, the default is <code>true</code>.\n      */\n     private boolean useIdentityHashCode = true;\n-    \n+\n     /**\n      * The content start <code>'['</code>.\n      */\n      * The summary object text start <code>'&gt;'</code>.\n      */\n     private String summaryObjectEndText = \">\";\n-    \n-    //----------------------------------------------------------------------------\n-    \n+\n+    /**\n+     * An optional <code>DateFormat</code>.\n+     */\n+    private DateFormat dateFormat = null;\n+\n+    /**\n+     * Gets the <code>DateFormat</code>, which may be <code>null</code>.\n+     */\n+    protected DateFormat getDateFormat() {\n+        return this.dateFormat;\n+    }\n+\n+    /**\n+     * Sets the <code>DateFormat</code>, which may be <code>null</code>.\n+     */\n+    protected void setDateFormat(DateFormat dateFormat) {\n+        this.dateFormat = dateFormat;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n     /**\n      * <p>Constructor.</p>\n      */\n     protected ToStringStyle() {\n         super();\n     }\n-    \n-    //----------------------------------------------------------------------------\n-    \n+\n+    //----------------------------------------------------------------------------\n+\n     /**\n      * <p>Append the superclass toString.</p>\n      * \n     public void appendSuper(StringBuffer buffer, String superToString) {\n         appendToString(buffer, superToString);\n     }\n-    \n+\n     /**\n      * <p>Append a toString.</p>\n      * \n             }\n         }\n     }\n-    \n-    //----------------------------------------------------------------------------\n-    \n+\n+    //----------------------------------------------------------------------------\n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>Object</code>\n      * value, printing the full <code>toString</code> of the\n      */\n     public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n-        \n+\n         if (value == null) {\n             appendNullText(buffer, fieldName);\n-            \n+\n         } else {\n             appendInternal(buffer, fieldName, value, isFullDetail(fullDetail));\n         }\n-        \n+\n         appendFieldEnd(buffer, fieldName);\n     }\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>Object</code>,\n      * correctly interpretting its type.</p>\n      * @param detail  output detail or not\n      */\n     protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {\n-        if (ReflectionToStringBuilder.isRegistered(value) \n-                && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\n-                ObjectUtils.appendIdentityToString(buffer, value);\n-            \n+        if (ReflectionToStringBuilder.isRegistered(value)\n+            && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) {\n+            ObjectUtils.appendIdentityToString(buffer, value);\n+\n         } else if (value instanceof Collection) {\n             if (detail) {\n                 appendDetail(buffer, fieldName, (Collection) value);\n             } else {\n                 appendSummarySize(buffer, fieldName, ((Collection) value).size());\n             }\n-            \n+\n         } else if (value instanceof Map) {\n             if (detail) {\n                 appendDetail(buffer, fieldName, (Map) value);\n             } else {\n                 appendSummarySize(buffer, fieldName, ((Map) value).size());\n             }\n-            \n+\n         } else if (value instanceof long[]) {\n             if (detail) {\n                 appendDetail(buffer, fieldName, (long[]) value);\n             } else {\n                 appendSummary(buffer, fieldName, (long[]) value);\n             }\n-            \n+\n         } else if (value instanceof int[]) {\n             if (detail) {\n                 appendDetail(buffer, fieldName, (int[]) value);\n             } else {\n                 appendSummary(buffer, fieldName, (int[]) value);\n             }\n-            \n+\n         } else if (value instanceof short[]) {\n             if (detail) {\n                 appendDetail(buffer, fieldName, (short[]) value);\n             } else {\n                 appendSummary(buffer, fieldName, (short[]) value);\n             }\n-            \n+\n         } else if (value instanceof byte[]) {\n             if (detail) {\n                 appendDetail(buffer, fieldName, (byte[]) value);\n             } else {\n                 appendSummary(buffer, fieldName, (byte[]) value);\n             }\n-            \n+\n         } else if (value instanceof char[]) {\n             if (detail) {\n                 appendDetail(buffer, fieldName, (char[]) value);\n             } else {\n                 appendSummary(buffer, fieldName, (char[]) value);\n             }\n-            \n+\n         } else if (value instanceof double[]) {\n             if (detail) {\n                 appendDetail(buffer, fieldName, (double[]) value);\n             } else {\n                 appendSummary(buffer, fieldName, (double[]) value);\n             }\n-            \n+\n         } else if (value instanceof float[]) {\n             if (detail) {\n                 appendDetail(buffer, fieldName, (float[]) value);\n             } else {\n                 appendSummary(buffer, fieldName, (float[]) value);\n             }\n-            \n+\n         } else if (value instanceof boolean[]) {\n             if (detail) {\n                 appendDetail(buffer, fieldName, (boolean[]) value);\n             } else {\n                 appendSummary(buffer, fieldName, (boolean[]) value);\n             }\n-        \n-        } else if (value.getClass().isArray()) {\n-            if (detail) {\n-                appendDetail(buffer, fieldName, (Object[]) value);\n-            } else {\n-                appendSummary(buffer, fieldName, (Object[]) value);\n-            }\n-            \n+\n+            } else if (value.getClass().isArray()) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (Object[]) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (Object[]) value);\n+                }\n+\n+            } else if (value instanceof Date) {\n+                if (detail) {\n+                    appendDetail(buffer, fieldName, (Date) value);\n+                } else {\n+                    appendSummary(buffer, fieldName, (Object) value);\n+                }\n+\n         } else {\n             if (detail) {\n                 appendDetail(buffer, fieldName, (Object) value);\n             }\n         }\n     }\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>Object</code>\n      * value, printing the full detail of the <code>Object</code>.</p>\n     protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n         buffer.append(value);\n     }\n-    \n+\n+    /**\n+     * <p>Append to the <code>toString</code> a <code>Date</code>\n+     * value, using the optional <code>DateFormat</code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the <code>Date</code> to add to the <code>toString</code>,\n+     *  not <code>null</code>\n+     */\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Date value) {\n+        buffer.append(this.getDateFormat() != null ? this.getDateFormat().format(value) : (Object) value);\n+    }\n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>Collection</code>.</p>\n      *\n     protected void appendDetail(StringBuffer buffer, String fieldName, Collection coll) {\n         buffer.append(coll);\n     }\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>Map<code>.</p>\n      *\n     protected void appendDetail(StringBuffer buffer, String fieldName, Map map) {\n         buffer.append(map);\n     }\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>Object</code>\n      * value, printing a summary of the <code>Object</code>.</P>\n         buffer.append(getShortClassName(value.getClass()));\n         buffer.append(summaryObjectEndText);\n     }\n-    \n-    //----------------------------------------------------------------------------\n-    \n+\n+    //----------------------------------------------------------------------------\n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>long</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>int</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>short</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>byte</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>char</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>double</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>float</code>\n      * value.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>boolean</code>\n      * value.</p>\n      */\n     public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n-        \n+\n         if (array == null) {\n             appendNullText(buffer, fieldName);\n-            \n+\n         } else if (isFullDetail(fullDetail)) {\n             appendDetail(buffer, fieldName, array);\n-            \n+\n         } else {\n             appendSummary(buffer, fieldName, array);\n         }\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> the detail of an\n      * <code>Object</code> array.</p>\n             }\n             if (item == null) {\n                 appendNullText(buffer, fieldName);\n-                \n+\n             } else {\n                 appendInternal(buffer, fieldName, item, arrayContentDetail);\n             }\n             }\n             if (item == null) {\n                 appendNullText(buffer, fieldName);\n-                \n+\n             } else {\n                 appendInternal(buffer, fieldName, item, arrayContentDetail);\n             }\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>long</code>\n      * array.</p>\n      */\n     public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n-        \n+\n         if (array == null) {\n             appendNullText(buffer, fieldName);\n-            \n+\n         } else if (isFullDetail(fullDetail)) {\n             appendDetail(buffer, fieldName, array);\n-            \n+\n         } else {\n             appendSummary(buffer, fieldName, array);\n         }\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> an <code>int</code>\n      * array.</p>\n      */\n     public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n-        \n+\n         if (array == null) {\n             appendNullText(buffer, fieldName);\n-            \n+\n         } else if (isFullDetail(fullDetail)) {\n             appendDetail(buffer, fieldName, array);\n-            \n+\n         } else {\n             appendSummary(buffer, fieldName, array);\n         }\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>short</code>\n      * array.</p>\n      */\n     public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n-        \n+\n         if (array == null) {\n             appendNullText(buffer, fieldName);\n-            \n+\n         } else if (isFullDetail(fullDetail)) {\n             appendDetail(buffer, fieldName, array);\n-            \n+\n         } else {\n             appendSummary(buffer, fieldName, array);\n         }\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>byte</code>\n      * array.</p>\n      */\n     public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n-        \n+\n         if (array == null) {\n             appendNullText(buffer, fieldName);\n-            \n+\n         } else if (isFullDetail(fullDetail)) {\n             appendDetail(buffer, fieldName, array);\n-            \n+\n         } else {\n             appendSummary(buffer, fieldName, array);\n         }\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>char</code>\n      * array.</p>\n      */\n     public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n-        \n+\n         if (array == null) {\n             appendNullText(buffer, fieldName);\n-            \n+\n         } else if (isFullDetail(fullDetail)) {\n             appendDetail(buffer, fieldName, array);\n-            \n+\n         } else {\n             appendSummary(buffer, fieldName, array);\n         }\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>double</code>\n      * array.</p>\n      */\n     public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n-        \n+\n         if (array == null) {\n             appendNullText(buffer, fieldName);\n-            \n+\n         } else if (isFullDetail(fullDetail)) {\n             appendDetail(buffer, fieldName, array);\n-            \n+\n         } else {\n             appendSummary(buffer, fieldName, array);\n         }\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>float</code>\n      * array.</p>\n      */\n     public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n-        \n+\n         if (array == null) {\n             appendNullText(buffer, fieldName);\n-            \n+\n         } else if (isFullDetail(fullDetail)) {\n             appendDetail(buffer, fieldName, array);\n-            \n+\n         } else {\n             appendSummary(buffer, fieldName, array);\n         }\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a <code>boolean</code>\n      * array.</p>\n      */\n     public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n-        \n+\n         if (array == null) {\n             appendNullText(buffer, fieldName);\n-            \n+\n         } else if (isFullDetail(fullDetail)) {\n             appendDetail(buffer, fieldName, array);\n-            \n+\n         } else {\n             appendSummary(buffer, fieldName, array);\n         }\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Append the class name.</p>\n      * \n     protected void appendContentStart(StringBuffer buffer) {\n         buffer.append(contentStart);\n     }\n-    \n+\n     /**\n      * <p>Append the content end to the buffer.</p>\n      * \n     protected void appendContentEnd(StringBuffer buffer) {\n         buffer.append(contentEnd);\n     }\n-    \n+\n     /**\n      * <p>Append an indicator for <code>null</code> to the buffer.</p>\n      *\n     protected void appendNullText(StringBuffer buffer, String fieldName) {\n         buffer.append(nullText);\n     }\n-    \n+\n     /**\n      * <p>Append the field separator to the buffer.</p>\n      * \n     protected void appendFieldSeparator(StringBuffer buffer) {\n         buffer.append(fieldSeparator);\n     }\n-    \n+\n     /**\n      * <p>Append the field start to the buffer.</p>\n      * \n             buffer.append(fieldNameValueSeparator);\n         }\n     }\n-    \n+\n     /**\n      * <p>Append the field end to the buffer.</p>\n      * \n     protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\n         appendFieldSeparator(buffer);\n     }\n-    \n+\n     /**\n      * <p>Append to the <code>toString</code> a size summary.</p>\n      *\n         }\n         return fullDetailRequest.booleanValue();\n     }\n-    \n+\n     /**\n      * <p>Gets the short class name for a class.</p>\n      *\n     // These methods are not expected to be overridden, except to make public\n     // (They are not public so that immutable subclasses can be written)\n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets whether to use the class name.</p>\n      *\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets whether to output short or long class names.</p>\n      *\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets whether to use the identity hash code.</p>\n      *\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets whether to use the field names passed in.</p>\n      *\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets whether to use full detail when the caller doesn't\n      * specify.</p>\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets whether to output array content detail.</p>\n      *\n     protected boolean isArrayContentDetail() {\n         return arrayContentDetail;\n     }\n-    \n+\n     /**\n      * <p>Sets whether to output array content detail.</p>\n      *\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets the array start text.</p>\n      *\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets the array end text.</p>\n      *\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets the array separator text.</p>\n      *\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets the content start text.</p>\n      *\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets the content end text.</p>\n      *\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets the field name value separator text.</p>\n      *\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets the field separator text.</p>\n      *\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets whether the field separator should be added at the start \n      * of each buffer.</p>\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets whether the field separator should be added at the end \n      * of each buffer.</p>\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets the text to output when <code>null</code> found.</p>\n      *\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets the text to output when a <code>Collection</code>,\n      * <code>Map</code> or array size is output.</p>\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets the text to output when a <code>Collection</code>,\n      * <code>Map</code> or array size is output.</p>\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets the text to output when an <code>Object</code> is\n      * output in summary mode.</p>\n     }\n \n     //---------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Gets the text to output when an <code>Object</code> is\n      * output in summary mode.</p>\n     }\n \n     //----------------------------------------------------------------------------\n-    \n+\n     /**\n      * <p>Default <code>ToStringStyle</code>.</p>\n      *\n      * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n      */\n     private static final class DefaultToStringStyle extends ToStringStyle {\n-        \n+\n         /**\n          * <p>Constructor.</p>\n          *\n         private DefaultToStringStyle() {\n             super();\n         }\n-        \n+\n         /**\n          * <p>Ensure <code>Singleton</code> after serialization.</p>\n          *\n         private Object readResolve() {\n             return ToStringStyle.DEFAULT_STYLE;\n         }\n-        \n-    }\n-    \n-    //----------------------------------------------------------------------------\n-    \n+\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n     /**\n      * <p><code>ToStringStyle</code> that does not print out\n      * the field names.</p>\n      * <code>StandardToStringStyle</code> to ensure its immutability.\n      */\n     private static final class NoFieldNameToStringStyle extends ToStringStyle {\n-        \n+\n         /**\n          * <p>Constructor.</p>\n          *\n             super();\n             this.setUseFieldNames(false);\n         }\n-        \n+\n         /**\n          * <p>Ensure <code>Singleton</code> after serialization.</p>\n          *\n         private Object readResolve() {\n             return ToStringStyle.NO_FIELD_NAMES_STYLE;\n         }\n-        \n-    }\n-    \n-    //----------------------------------------------------------------------------\n-    \n+\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n     /**\n      * <p><code>ToStringStyle</code> that does not print out the\n      * classname, identity hashcode, content start or field name.</p>\n      * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n      */\n     private static final class SimpleToStringStyle extends ToStringStyle {\n-        \n+\n         /**\n          * <p>Constructor.</p>\n          *\n             this.setContentStart(\"\");\n             this.setContentEnd(\"\");\n         }\n-        \n+\n         /**\n          * <p>Ensure <code>Singleton</ode> after serialization.</p>\n          * @return the singleton\n         private Object readResolve() {\n             return ToStringStyle.SIMPLE_STYLE;\n         }\n-        \n-    }\n-    \n-    //----------------------------------------------------------------------------\n-    \n+\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n     /**\n      * <p><code>ToStringStyle</code> that outputs on multiple lines.</p>\n      *\n             this.setFieldSeparatorAtStart(true);\n             this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\");\n         }\n-        \n+\n         /**\n          * <p>Ensure <code>Singleton</code> after serialization.</p>\n          *\n         private Object readResolve() {\n             return ToStringStyle.MULTI_LINE_STYLE;\n         }\n-        \n-    }\n-    \n-    //----------------------------------------------------------------------------\n-    \n+\n+    }\n+\n+    //----------------------------------------------------------------------------\n+\n     // Removed, as the XML style needs more work for escaping characters, arrays,\n     // collections, maps and embedded beans.\n-//    /**\n-//     * ToStringStyle that outputs in XML style\n-//     */\n-//    private static class XMLToStringStyle extends ToStringStyle {\n-//        \n-//        /**\n-//         * Constructor - use the static constant rather than instantiating.\n-//         */\n-//        private XMLToStringStyle() {\n-//            super();\n-//            nullText = \"null\";\n-//            sizeStartText = \"size=\";\n-//            sizeEndText = \"\";\n-//        }\n-//        \n-//        /**\n-//         * @see ToStringStyle#appendStart(StringBuffer, Object)\n-//         */\n-//        public void appendStart(StringBuffer buffer, Object object) {\n-//            buffer.append('<');\n-//            buffer.append(getShortClassName(object.getClass()));\n-//            buffer.append(\" class=\\\"\");\n-//            appendClassName(buffer, object);\n-//            buffer.append(\"\\\" hashCode=\\\"\");\n-//            appendIdentityHashCode(buffer, object);\n-//            buffer.append(\"\\\">\");\n-//            buffer.append(SystemUtils.LINE_SEPARATOR);\n-//            buffer.append(\"  \");\n-//        }\n-//\n-//        /**\n-//         * @see ToStringStyle#appendFieldStart(StringBuffer, String)\n-//         */\n-//        protected void appendFieldStart(StringBuffer buffer, String fieldName) {\n-//            buffer.append('<');\n-//            buffer.append(fieldName);\n-//            buffer.append('>');\n-//        }\n-//\n-//        /**\n-//         * @see ToStringStyle#appendFieldEnd(StringBuffer, String)\n-//         */\n-//        protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\n-//            buffer.append(\"</\");\n-//            buffer.append(fieldName);\n-//            buffer.append('>');\n-//            buffer.append(SystemUtils.LINE_SEPARATOR);\n-//            buffer.append(\"  \");\n-//        }\n-//\n-//        /**\n-//         * @see ToStringStyle#appendEnd(StringBuffer, Object)\n-//         */\n-//        public void appendEnd(StringBuffer buffer, Object object) {\n-//            int len = buffer.length();\n-//            if (len > 2 && buffer.charAt(len - 1) == ' ' && buffer.charAt(len - 2) == ' ') {\n-//                buffer.setLength(len - 2);\n-//            }\n-//            buffer.append(\"</\");\n-//            buffer.append(getShortClassName(object.getClass()));\n-//            buffer.append(\"\\\">\");\n-//        }\n-//\n-//    }\n-    \n+    //    /**\n+    //     * ToStringStyle that outputs in XML style\n+    //     */\n+    //    private static class XMLToStringStyle extends ToStringStyle {\n+    //        \n+    //        /**\n+    //         * Constructor - use the static constant rather than instantiating.\n+    //         */\n+    //        private XMLToStringStyle() {\n+    //            super();\n+    //            nullText = \"null\";\n+    //            sizeStartText = \"size=\";\n+    //            sizeEndText = \"\";\n+    //        }\n+    //        \n+    //        /**\n+    //         * @see ToStringStyle#appendStart(StringBuffer, Object)\n+    //         */\n+    //        public void appendStart(StringBuffer buffer, Object object) {\n+    //            buffer.append('<');\n+    //            buffer.append(getShortClassName(object.getClass()));\n+    //            buffer.append(\" class=\\\"\");\n+    //            appendClassName(buffer, object);\n+    //            buffer.append(\"\\\" hashCode=\\\"\");\n+    //            appendIdentityHashCode(buffer, object);\n+    //            buffer.append(\"\\\">\");\n+    //            buffer.append(SystemUtils.LINE_SEPARATOR);\n+    //            buffer.append(\"  \");\n+    //        }\n+    //\n+    //        /**\n+    //         * @see ToStringStyle#appendFieldStart(StringBuffer, String)\n+    //         */\n+    //        protected void appendFieldStart(StringBuffer buffer, String fieldName) {\n+    //            buffer.append('<');\n+    //            buffer.append(fieldName);\n+    //            buffer.append('>');\n+    //        }\n+    //\n+    //        /**\n+    //         * @see ToStringStyle#appendFieldEnd(StringBuffer, String)\n+    //         */\n+    //        protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\n+    //            buffer.append(\"</\");\n+    //            buffer.append(fieldName);\n+    //            buffer.append('>');\n+    //            buffer.append(SystemUtils.LINE_SEPARATOR);\n+    //            buffer.append(\"  \");\n+    //        }\n+    //\n+    //        /**\n+    //         * @see ToStringStyle#appendEnd(StringBuffer, Object)\n+    //         */\n+    //        public void appendEnd(StringBuffer buffer, Object object) {\n+    //            int len = buffer.length();\n+    //            if (len > 2 && buffer.charAt(len - 1) == ' ' && buffer.charAt(len - 2) == ' ') {\n+    //                buffer.setLength(len - 2);\n+    //            }\n+    //            buffer.append(\"</\");\n+    //            buffer.append(getShortClassName(object.getClass()));\n+    //            buffer.append(\"\\\">\");\n+    //        }\n+    //\n+    //    }\n+\n }", "timestamp": 1058816050, "metainfo": ""}