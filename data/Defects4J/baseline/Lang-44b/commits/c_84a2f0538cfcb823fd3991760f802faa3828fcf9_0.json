{"sha": "84a2f0538cfcb823fd3991760f802faa3828fcf9", "log": "Remove convenience toStringWithStatics APIs.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n  * @author Stephen Colebourne\n  * @author Pete Gieser\n  * @since 2.0\n- * @version $Id: ReflectionToStringBuilder.java,v 1.13 2003/10/23 22:27:45 ggregory Exp $\n+ * @version $Id: ReflectionToStringBuilder.java,v 1.14 2003/11/03 00:21:19 ggregory Exp $\n  */\n public class ReflectionToStringBuilder extends ToStringBuilder {\n \n      */\n     public static String toString(Object object, ToStringStyle style, boolean outputTransients, Class reflectUpToClass) {\n         return new ReflectionToStringBuilder(object, style, null, reflectUpToClass, outputTransients).toString();\n-    }\n-\n-    /**\n-     * TODO: Is this convenience API really needed?\n-     * \n-     * <p>This method uses reflection to build a suitable\n-     * <code>toString</code> value which includes static fields.</p>\n-     *\n-     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n-     * fields. This means that it will throw a security exception if run\n-     * under a security manager, if the permissions are not set up correctly.\n-     * It is also not as efficient as testing explicitly. </p>\n-     *\n-     * <p>Transient fields are not output.</p>\n-     *\n-     * <p>Superclass fields will be appended up to and including \n-     * <code>java.lang.Object</code>.</p>\n-     *\n-     * <p>The default <code>ToStringStyle</code> is used.</p>\n-     * \n-     * @param object  the Object to be output\n-     * @return the String result\n-     * @throws IllegalArgumentException if the Object is <code>null</code>\n-     */\n-    public static Object toStringWithStatics(Object object) {\n-        return toString(object, null, false, true, null);\n-    }\n-\n-    /**\n-     * TODO: Is this convenience API really needed?\n-     * \n-     * <p>This method uses reflection to build a suitable\n-     * <code>toString</code> value which includes static fields.</p>\n-     *\n-     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n-     * fields. This means that it will throw a security exception if run\n-     * under a security manager, if the permissions are not set up correctly.\n-     * It is also not as efficient as testing explicitly. </p>\n-     *\n-     * <p>Transient fields are not output.</p>\n-     *\n-     * <p>Superclass fields will be appended up to and including the specified superclass. \n-     * A null superclass is treated as <code>java.lang.Object</code>.</p>\n-     *\n-     * <p>The default <code>ToStringStyle</code> is used.</p>\n-     * \n-     * @param object  the Object to be output\n-     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n-     *  may be <code>null</code>\n-     * @return the String result\n-     * @throws IllegalArgumentException if the Object is <code>null</code>\n-     */\n-    public static Object toStringWithStatics(Object object, Class reflectUpToClass) {\n-        return toString(object, null, false, true, reflectUpToClass);\n-    }\n-\n-    /**\n-     * TODO: Is this convenience API really needed?\n-     * \n-     * <p>This method uses reflection to build a suitable\n-     * <code>toString</code> value which includes static fields.</p>\n-     *\n-     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n-     * fields. This means that it will throw a security exception if run\n-     * under a security manager, if the permissions are not set up correctly.\n-     * It is also not as efficient as testing explicitly. </p>\n-     *\n-     * <p>Transient fields are not output.</p>\n-     *\n-     * <p>Superclass fields will be appended up to and including the specified superclass. \n-     * A null superclass is treated as <code>java.lang.Object</code>.</p>\n-     *\n-     * <p>If the style is <code>null</code>, the default\n-     * <code>ToStringStyle</code> is used.</p>\n-     * \n-     * @param object  the Object to be output\n-     * @param style  the style of the <code>toString</code> to create,\n-     *  may be <code>null</code>\n-     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n-     *  may be <code>null</code>\n-     * @return the String result\n-     * @throws IllegalArgumentException if the Object is <code>null</code>\n-     */\n-    public static Object toStringWithStatics(Object object, ToStringStyle style, Class reflectUpToClass) {\n-        return toString(object, style, false, true, reflectUpToClass);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author <a href=\"mailto:alex@apache.org\">Alex Chaffee</a>\n- * @version $Id: ToStringBuilderTest.java,v 1.11 2003/10/23 22:26:00 ggregory Exp $\n+ * @version $Id: ToStringBuilderTest.java,v 1.12 2003/11/03 00:20:55 ggregory Exp $\n  */\n public class ToStringBuilderTest extends TestCase {\n \n             ReflectionToStringBuilder.toString(instance1, null, true, true, SimpleReflectionStaticFieldsFixture.class));\n         assertEquals(\n             this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n-            ReflectionToStringBuilder.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n+            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n         assertEquals(\n             this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345]\",\n-            ReflectionToStringBuilder.toStringWithStatics(instance1, SimpleReflectionStaticFieldsFixture.class));\n+            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n     }\n \n     /**\n             ReflectionToStringBuilder.toString(instance1, null, true, true, ReflectionStaticFieldsFixture.class));\n         assertEquals(\n             this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]\",\n-            ReflectionToStringBuilder.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));\n+            this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));\n         assertEquals(\n             this.toBaseString(instance1) + \"[staticString=staticString,staticInt=12345,instanceString=instanceString,instanceInt=67890]\",\n-            ReflectionToStringBuilder.toStringWithStatics(instance1, ReflectionStaticFieldsFixture.class));\n+            this.toStringWithStatics(instance1, null, ReflectionStaticFieldsFixture.class));\n     }\n \n     /**\n             ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class));\n         assertEquals(\n             this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]\",\n-            ReflectionToStringBuilder.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n+            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n         assertEquals(\n             this.toBaseString(instance1) + \"[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]\",\n-            ReflectionToStringBuilder.toStringWithStatics(instance1, SimpleReflectionStaticFieldsFixture.class));\n+            this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class));\n+    }\n+\n+    /**\n+     * <p>This method uses reflection to build a suitable\n+     * <code>toString</code> value which includes static fields.</p>\n+     *\n+     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run\n+     * under a security manager, if the permissions are not set up correctly.\n+     * It is also not as efficient as testing explicitly. </p>\n+     *\n+     * <p>Transient fields are not output.</p>\n+     *\n+     * <p>Superclass fields will be appended up to and including the specified superclass. \n+     * A null superclass is treated as <code>java.lang.Object</code>.</p>\n+     *\n+     * <p>If the style is <code>null</code>, the default\n+     * <code>ToStringStyle</code> is used.</p>\n+     * \n+     * @param object  the Object to be output\n+     * @param style  the style of the <code>toString</code> to create,\n+     *  may be <code>null</code>\n+     * @param reflectUpToClass  the superclass to reflect up to (inclusive),\n+     *  may be <code>null</code>\n+     * @return the String result\n+     * @throws IllegalArgumentException if the Object is <code>null</code>\n+     */\n+    public Object toStringWithStatics(Object object, ToStringStyle style, Class reflectUpToClass) {\n+        return ReflectionToStringBuilder.toString(object, style, false, true, reflectUpToClass);\n     }\n \n     /**", "timestamp": 1067818879, "metainfo": ""}