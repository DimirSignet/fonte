{"sha": "c40846ec9c5972012e998890f9b82f7d521f3244", "log": "ExceptionUtils.getThrowables(Throwable): Switched from concrete ArrayList local reference to List.  ExceptionUtils.getStackTrace(Throwable): New method for extracting the text of a stack trace.  ExceptionUtils.getStackFrames(Throwable): Splits an exception's stace trace into frames.  ExceptionUtils.getStackFrames(String): Splits a stace trace into frames.  NestableDelegate printStackTrace(): Delegate to printStackTrace(PrintStream) using System.err rather than duplicating its impl.  NestableDelegate printStackTrace(PrintWriter): Used new name getStackFrames() method name.  NestableDelegate getStackFrames(Throwable): Renamed decompose() to this and delegated to ExceptionUtils.getStackFrames(String) for half of impl.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n import java.sql.SQLException;\n import java.util.ArrayList;\n-\n-/*\n-TODO: Refactor code from NestableDelegate to ExceptionUtils.\n-\n-printStackTrace(Throwable, PrintWriter)\n-*/\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.StringTokenizer;\n \n /**\n  * Utility routines for manipulating <code>Throwable</code> objects.\n      */\n     public static Throwable[] getThrowables(Throwable t)\n     {\n-        ArrayList list = new ArrayList();\n+        List list = new ArrayList();\n         while (t != null)\n         {\n             list.add(t);\n         }\n         return -1;\n     }\n+\n+    /**\n+     * A convenient way of extracting the stack trace from an\n+     * exception.\n+     *\n+     * @param t The <code>Throwable</code>.\n+     * @return The stack trace as generated by the exception's\n+     * <code>printStackTrace(PrintWriter)</code> method.\n+     */\n+    public static String getStackTrace(Throwable t)\n+    {\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw, true);\n+        t.printStackTrace(pw);\n+        return sw.getBuffer().toString();\n+    }\n+\n+    /**\n+     * Captures the stack trace associated with the specified\n+     * <code>Throwable</code> object, decomposing it into a list of\n+     * stack frames.\n+     *\n+     * @param t The <code>Throwable</code>.\n+     * @return  An array of strings describing each stack frame.\n+     */\n+    public static String[] getStackFrames(Throwable t)\n+    {\n+        return getStackFrames(getStackTrace(t));\n+    }\n+\n+    /**\n+     * Functionality shared between the\n+     * <code>getStackFrames(Throwable)</code> methods of this and the\n+     * {@link org.apache.commons.lang.exception.NestableDelegate}\n+     * classes.\n+     */\n+    static String[] getStackFrames(String stackTrace)\n+    {\n+        // TODO: Use constant from org.apache.commons.lang.SystemUtils.\n+        String linebreak = System.getProperty(\"line.separator\");\n+        StringTokenizer frames = new StringTokenizer(stackTrace, linebreak);\n+        List list = new LinkedList();\n+        while (frames.hasMoreTokens())\n+        {\n+            list.add(frames.nextToken());\n+        }\n+        return (String []) list.toArray(new String[] {});\n+    }\n }\n--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.io.Writer;\n-import java.util.LinkedList;\n-import java.util.StringTokenizer;\n \n /**\n  * @author <a href=\"mailto:Rafal.Krzewski@e-point.pl\">Rafal Krzewski</a>\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableDelegate.java,v 1.5 2002/08/21 23:52:02 dlr Exp $\n+ * @version $Id: NestableDelegate.java,v 1.6 2002/08/24 19:18:50 dlr Exp $\n  */\n public class NestableDelegate\n {\n      */\n     public void printStackTrace()\n     {\n-        synchronized (System.err)\n-        {\n-            printStackTrace(System.err);\n-        }\n-    }\n-\n-    /**\n-     * Prints the stack trace of this exception to the specified print stream.\n+        printStackTrace(System.err);\n+    }\n+\n+    /**\n+     * Prints the stack trace of this exception to the specified\n+     * stream.\n      *\n      * @param out <code>PrintStream</code> to use for output.\n+     * @see #printStackTrace(PrintWriter)\n      */\n     public void printStackTrace(PrintStream out)\n     {\n     }\n \n     /**\n-     * Prints the stack trace of this exception to the specified print writer.\n+     * Prints the stack trace of this exception to the specified\n+     * writer.\n      *\n      * @param out <code>PrintWriter</code> to use for output.\n      */\n     {\n         synchronized (out)\n         {\n-            String[] st = decompose(this.cause);\n+            String[] st = getStackFrames(this.cause);\n             Throwable nestedCause = ExceptionUtils.getCause(this.cause);\n             if (nestedCause != null)\n             {\n                 }\n                 else\n                 {\n-                    String[] nst = decompose(nestedCause);\n+                    String[] nst = getStackFrames(nestedCause);\n                     for (int i = 0; i < nst.length; i++)\n                     {\n                         out.println(nst[i]);\n     }\n \n     /**\n-     * Captures the stack trace associated with a <code>Throwable</code>\n-     * object, decomposing it into a list of stack frames.\n+     * Captures the stack trace associated with the specified\n+     * <code>Throwable</code> object, decomposing it into a list of\n+     * stack frames.\n      *\n      * @param t The <code>Throwable</code>.\n      * @return  An array of strings describing each stack frame.\n      */\n-    private String[] decompose(Throwable t)\n+    private String[] getStackFrames(Throwable t)\n     {\n         StringWriter sw = new StringWriter();\n         PrintWriter pw = new PrintWriter(sw, true);\n         {\n             t.printStackTrace(pw);\n         }\n-\n-        String linebreak = System.getProperty(\"line.separator\");\n-        StringTokenizer st = new StringTokenizer(sw.getBuffer().toString(),\n-                                                 linebreak);\n-        LinkedList list = new LinkedList();\n-        while (st.hasMoreTokens())\n-        {\n-            list.add(st.nextToken());\n-        }\n-        return (String []) list.toArray(new String[] {});\n+        return ExceptionUtils.getStackFrames(sw.getBuffer().toString());\n     }\n }", "timestamp": 1030216730, "metainfo": ""}