{"sha": "32957d0223f201b908fff403dbb875151027b80e", "log": "continuing performance improvements-- now uses a binary lookup   ", "commit": "\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: Entities.java,v 1.6 2003/05/24 13:29:44 alex Exp $\n+ * @version $Id: Entities.java,v 1.7 2003/05/24 15:11:36 alex Exp $\n  */\n class Entities {\n \n     }\n \n     static class ArrayIntMap implements IntMap {\n-        int growBy = 100;\n-        private int size = 0;\n-        private String[] names = new String[growBy];\n-        private int[] values = new int[growBy];\n+        protected int growBy = 100;\n+        protected int size = 0;\n+        protected String[] names;\n+        protected int[] values;\n+\n+        public ArrayIntMap() {\n+            names = new String[growBy];\n+            values = new int[growBy];\n+        }\n+\n+        public ArrayIntMap(int growBy) {\n+            this.growBy = growBy;\n+            names = new String[growBy];\n+            values = new int[growBy];\n+        }\n \n         public void add(String name, int value) {\n             ensureCapacity(size + 1);\n             size++;\n         }\n \n-        private void ensureCapacity(int capacity) {\n+        protected void ensureCapacity(int capacity) {\n             if (capacity > names.length) {\n                 int newSize = Math.max(capacity, size + growBy);\n                 String[] newNames = new String[newSize];\n         }\n     }\n \n-    IntMap map = new HashIntMap();\n+    static class BinaryIntMap extends ArrayIntMap {\n+\n+        public BinaryIntMap() {\n+        }\n+\n+        public BinaryIntMap(int growBy) {\n+            super(growBy);\n+        }\n+\n+        // based on code in java.util.Arrays\n+        private int binarySearch(int key) {\n+            int low = 0;\n+            int high = size - 1;\n+\n+            while (low <= high) {\n+                int mid = (low + high) >> 1;\n+                int midVal = values[mid];\n+\n+                if (midVal < key)\n+                    low = mid + 1;\n+                else if (midVal > key)\n+                    high = mid - 1;\n+                else\n+                    return mid; // key found\n+            }\n+            return -(low + 1);  // key not found.\n+        }\n+\n+        public void add(String name, int value) {\n+            ensureCapacity(size + 1);\n+            int insertAt = binarySearch(value);\n+            if (insertAt > 0) return;    // note: this means you can't insert the same value twice\n+            insertAt = -(insertAt + 1);  // binarySearch returns it negative and off-by-one\n+            System.arraycopy(values, insertAt, values, insertAt + 1, size - insertAt);\n+            values[insertAt] = value;\n+            System.arraycopy(names, insertAt, names, insertAt + 1, size - insertAt);\n+            names[insertAt] = name;\n+            size++;\n+        }\n+\n+        public String name(int value) {\n+            int index = binarySearch(value);\n+            if (index < 0) return null;\n+            return names[index];\n+        }\n+    }\n+\n+    IntMap map = new BinaryIntMap();\n \n     public void addEntities(String[][] entityArray) {\n         for (int i = 0; i < entityArray.length; ++i) {\n--- a/src/test/org/apache/commons/lang/EntitiesPerformanceTest.java\n+++ b/src/test/org/apache/commons/lang/EntitiesPerformanceTest.java\n  */\n package org.apache.commons.lang;\n \n-import java.io.IOException;\n-\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n-import junit.extensions.RepeatedTest;\n \n public class EntitiesPerformanceTest extends TestCase {\n-    private int COUNT = 200;\n+    private int COUNT = 10000;\n     private int STRING_LENGTH = 1000;\n \n     private static String stringWithUnicode;\n     private static Entities treeEntities;\n     private static Entities hashEntities;\n     private static Entities arrayEntities;\n+    private static Entities binaryEntities;\n \n     public EntitiesPerformanceTest(String name) {\n         super(name);\n \n     public static Test suite() {\n         TestSuite suite = new TestSuite(EntitiesPerformanceTest.class);\n-//        suite.setName(\"Entities Performance Tests\");\n-//        return new RepeatedTest(suite, 1000);\n         return suite;\n     }\n \n             StringBuffer buf = new StringBuffer(STRING_LENGTH);\n             for (int i = 0; i < STRING_LENGTH/5; ++i) {\n                 buf.append(\"xxxx\");\n-                String entityValue = Entities.html40[i % Entities.html40.length][1];\n-                char ch = (char) Integer.parseInt(entityValue);\n+                char ch = html40value(i);\n                 buf.append(ch);\n             }\n             stringWithUnicode = buf.toString();\n             stringWithEntities = Entities.HTML40.unescape(stringWithUnicode);\n         }\n-\n+    }\n+\n+    private char html40value(int i) {\n+        String entityValue = Entities.html40[i % Entities.html40.length][1];\n+        char ch = (char) Integer.parseInt(entityValue);\n+        return ch;\n     }\n \n     public void testBuildHash() throws Exception {\n         }\n     }\n \n+    public void testBuildBinary() throws Exception {\n+        for (int i = 0; i < COUNT; ++i) {\n+            binaryEntities = new Entities();\n+            binaryEntities.map = new Entities.BinaryIntMap();\n+            Entities.fillWithHtml40Entities(binaryEntities);\n+        }\n+    }\n+\n+    public void testLookupHash() throws Exception {\n+        lookup(hashEntities);\n+    }\n+\n+    public void testLookupTree() throws Exception {\n+        lookup(treeEntities);\n+    }\n+\n+    public void testLookupArray() throws Exception {\n+        lookup(arrayEntities);\n+    }\n+\n+    public void testLookupBinary() throws Exception {\n+        lookup(binaryEntities);\n+    }\n+\n     public void testEscapeHash() throws Exception {\n         escapeIt(hashEntities);\n     }\n         escapeIt(arrayEntities);\n     }\n \n+    public void testEscapeBinary() throws Exception {\n+        escapeIt(binaryEntities);\n+    }\n+\n     public void testUnscapeHash() throws Exception {\n         unescapeIt(hashEntities);\n     }\n         unescapeIt(arrayEntities);\n     }\n \n+    public void testUnescapeBinary() throws Exception {\n+        unescapeIt(binaryEntities);\n+    }\n+\n+    private void lookup(Entities entities) {\n+        for (int i = 0; i < COUNT*1000; ++i) {\n+            entities.entityName(html40value(i));\n+        }\n+    }\n+\n     private void escapeIt(Entities entities) {\n         for (int i = 0; i < COUNT; ++i) {\n             String escaped  = entities.escape(stringWithUnicode);\n             assertEquals(\"xxxx\\u0192\", unescaped.substring(0,5));\n         }\n     }\n-\n-\n-\n }\n \n--- a/src/test/org/apache/commons/lang/EntitiesTest.java\n+++ b/src/test/org/apache/commons/lang/EntitiesTest.java\n  *\n  * @author of original StringUtilsTest.testEscape = ?\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n- * @version $Id: EntitiesTest.java,v 1.3 2003/05/24 13:29:44 alex Exp $\n+ * @version $Id: EntitiesTest.java,v 1.4 2003/05/24 15:11:36 alex Exp $\n  */\n public class EntitiesTest extends TestCase\n {\n \n     public void testArrayIntMap() throws Exception\n     {\n-        Entities.ArrayIntMap map = new Entities.ArrayIntMap();\n-        map.growBy = 2;\n+        Entities.ArrayIntMap map = new Entities.ArrayIntMap(2);\n+        checkSomeIntMap(map);\n+    }\n+\n+    public void testTreeIntMap() throws Exception\n+    {\n+        Entities.IntMap map = new Entities.TreeIntMap();\n+        checkSomeIntMap(map);\n+    }\n+\n+    public void testHashIntMap() throws Exception\n+    {\n+        Entities.IntMap map = new Entities.HashIntMap();\n+        checkSomeIntMap(map);\n+    }\n+\n+    public void testBinaryIntMap() throws Exception\n+    {\n+        Entities.BinaryIntMap map = new Entities.BinaryIntMap(2);\n+        checkSomeIntMap(map);\n+    }\n+\n+    private void checkSomeIntMap(Entities.IntMap map) {\n         map.add(\"foo\", 1);\n         assertEquals(1, map.value(\"foo\"));\n         assertEquals(\"foo\", map.name(1));", "timestamp": 1053789096, "metainfo": ""}