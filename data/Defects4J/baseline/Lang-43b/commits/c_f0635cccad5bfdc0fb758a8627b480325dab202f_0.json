{"sha": "f0635cccad5bfdc0fb758a8627b480325dab202f", "log": "Implement changes to StringUtils.isEmpty and friends This is an incompatible change for isEmpty and isNotEmpty from 1.0   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.14 2003/07/16 00:39:05 scolebourne Exp $\n+ * @version $Id: ClassUtils.java,v 1.15 2003/07/16 21:19:22 scolebourne Exp $\n  */\n public class ClassUtils {\n \n      *\n      * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n      * \n-     * @param className  the className to get the short name for, must not be empty\n+     * @param className  the className to get the short name for,\n+     *  must not be empty or <code>null</code>\n      * @return the class name of the class without the package name\n      * @throws IllegalArgumentException if the className is empty\n      */\n     public static String getShortClassName(String className) {\n-        if (StringUtils.isEmpty(className)) {\n+        if (StringUtils.isEmptyOrNull(className)) {\n             throw new IllegalArgumentException(\"The class name must not be empty\");\n         }\n         char[] chars = className.toCharArray();\n     /**\n      * <p>Gets the package name of a <code>Class</code>.</p>\n      * \n-     * @param cls  the class to get the package name for, must not be\n-     *  <code>null</code>\n+     * @param cls  the class to get the package name for,\n+     *  must not be <code>null</code>\n      * @return the package name\n      * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n      *\n      * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n      * \n-     * @param className  the className to get the package name for, must not be empty\n+     * @param className  the className to get the package name for,\n+     *  must not be empty or <code>null</code>\n      * @return the package name\n      * @throws IllegalArgumentException if the className is empty\n      */\n     public static String getPackageName(String className) {\n-        if (StringUtils.isEmpty(className)) {\n+        if (StringUtils.isEmptyOrNull(className)) {\n             throw new IllegalArgumentException(\"The class name must not be empty\");\n         }\n         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.57 2003/07/16 20:19:24 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.58 2003/07/16 21:19:22 scolebourne Exp $\n  */\n public class StringUtils {\n \n     //--------------------------------------------------------------------------\n \n     /**\n-     * <p>Removes control characters, including whitespace, from both\n+     * <p>Removes control characters (char &lt;= 32) from both\n      * ends of this String, handling <code>null</code> by returning\n      * an empty String (\"\").</p>\n      * \n      * <pre>\n+     * StringUtils.clean(null)          = \"\"\n      * StringUtils.clean(\"abc\")         = \"abc\"\n      * StringUtils.clean(\"    abc    \") = \"abc\"\n      * StringUtils.clean(\"     \")       = \"\"\n      * StringUtils.clean(\"\")            = \"\"\n-     * StringUtils.clean(null)          = \"\"\n      * </pre>\n      *\n      * @see java.lang.String#trim()\n     }\n \n     /**\n-     * <p>Removes control characters, including whitespace, from both\n+     * <p>Removes control characters (char &lt;= 32) from both\n      * ends of this String, handling <code>null</code> by returning\n      * <code>null</code>.</p>\n      * \n-     * <p>The string is trimmed using {@link String#trim()}.</p>\n-     * \n-     * <pre>\n+     * <p>The string is trimmed using {@link String#trim()}.\n+     * Trim removes start and end characters &lt;= 32.</p>\n+     * \n+     * <pre>\n+     * StringUtils.trim(null)          = null\n      * StringUtils.trim(\"abc\")         = \"abc\"\n      * StringUtils.trim(\"    abc    \") = \"abc\"\n      * StringUtils.trim(\"     \")       = \"\"\n      * StringUtils.trim(\"\")            = \"\"\n-     * StringUtils.trim(null)          = null\n      * </pre>\n      *\n      * @see java.lang.String#trim()\n     }\n \n     /** \n-     * <p>Removes control characters, including whitespace, from both  \n+     * <p>Removes control characters (char &lt;= 32) from both  \n      * ends of this string returning <code>null</code> if the string is \n      * empty (\"\") after the trim or if it is <code>null</code>.\n      * \n-     * <p>The string is trimmed using {@link String#trim()}.</p>\n-     * \n-     * <pre>\n+     * <p>The string is trimmed using {@link String#trim()}.\n+     * Trim removes start and end characters &lt;= 32.</p>\n+     * \n+     * <pre>\n+     * StringUtils.trimToNull(null)          = null\n      * StringUtils.trimToNull(\"abc\")         = \"abc\"\n      * StringUtils.trimToNull(\"    abc    \") = \"abc\"\n      * StringUtils.trimToNull(\"     \")       = null\n      * StringUtils.trimToNull(\"\")            = null\n-     * StringUtils.trimToNull(null)          = null\n      * </pre>\n      *  \n      * @see java.lang.String#trim()\n     }\n \n     /** \n-     * <p>Removes control characters, including whitespace, from both \n+     * <p>Removes control characters (char &lt;= 32) from both \n      * ends of this string returning an empty string (\"\") if the string\n      * is empty (\"\") after the trim or if it is <code>null</code>.\n      * \n-     * <p>The string is trimmed using {@link String#trim()}.</p>\n-     * \n-     * <pre>\n+     * <p>The string is trimmed using {@link String#trim()}.\n+     * Trim removes start and end characters &lt;= 32.</p>\n+     * \n+     * <pre>\n+     * StringUtils.trimToEmpty(null)          = \"\"\n      * StringUtils.trimToEmpty(\"abc\")         = \"abc\"\n      * StringUtils.trimToEmpty(\"    abc    \") = \"abc\"\n      * StringUtils.trimToEmpty(\"     \")       = \"\"\n      * StringUtils.trimToEmpty(\"\")            = \"\"\n-     * StringUtils.trimToEmpty(null)          = \"\"\n      * </pre>\n      *  \n      * @see java.lang.String#trim()\n      * <p>Deletes all 'space' characters from a String as defined by\n      * {@link Character#isSpace(char)}.</p>\n      *\n+     * <pre>\n+     * StringUtils.deleteSpaces(null)           = null\n+     * StringUtils.deleteSpaces(\"abc\")          = \"abc\"\n+     * StringUtils.deleteSpaces(\" \\t  abc \\n \") = \"abc\"\n+     * StringUtils.deleteSpaces(\"ab  c\")        = \"abc\"\n+     * StringUtils.deleteSpaces(\"a\\nb\\tc     \") = \"abc\"\n+     * </pre>\n+     *  \n      * <p>Spaces are defined as <code>{' ', '\\t', '\\r', '\\n', '\\b'}</code>\n      * in line with the deprecated <code>isSpace</code> method.</p>\n      *\n      * <p>Deletes all whitespaces from a String as defined by\n      * {@link Character#isWhitespace(char)}.</p>\n      *\n+     * <pre>\n+     * StringUtils.deleteWhitespace(null)        = null\n+     * StringUtils.deleteWhitespace(\"abc\")       = \"abc\"\n+     * StringUtils.deleteWhitespace(\"   abc  \")  = \"abc\"\n+     * </pre>\n+     *  \n      * @param str  the String to delete whitespace from, may be null\n      * @return the String without whitespaces, <code>null</code> if null string input\n      */\n     //--------------------------------------------------------------------------\n \n     /**\n-     * <p>Checks if a String is <code>null</code> or empty (\"\").</p>\n-     * \n-     * <pre>\n-     * StringUtils.isEmpty(null)      = true\n+     * <p>Checks if a String is empty (\"\").\n+     * <code>null</code> returns <code>false</code></p>\n+     * \n+     * <pre>\n+     * StringUtils.isEmpty(null)      = false\n      * StringUtils.isEmpty(\"\")        = true\n      * StringUtils.isEmpty(\" \")       = false\n      * StringUtils.isEmpty(\"bob\")     = false\n      * </pre>\n      *\n      * <p>NOTE: This method changed in version 2.0.\n-     * It no longer trims the String.\n-     * That functionality is available in isEmptyTrimmed().</p>\n+     * It no longer trims the String, and null is no longer true.\n+     * That functionality is available in isEmptyTrimmedOrNull().</p>\n      * \n      * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is <code>null</code> or empty\n+     * @return <code>true</code> if the String is empty\n      */\n     public static boolean isEmpty(String str) {\n-        return (str == null || str.length() == 0);\n-    }\n-\n-    /**\n-     * <p>Checks if a String is not <code>null</code> and not empty (\"\").</p>\n-     * \n-     * <pre>\n-     * StringUtils.isNotEmpty(null)      = false\n+        return (str != null && str.length() == 0);\n+    }\n+\n+    /**\n+     * <p>Checks if a String is not empty (\"\").\n+     * <code>null</code> returns <code>true</code></p>\n+     * \n+     * <pre>\n+     * StringUtils.isNotEmpty(null)      = true\n      * StringUtils.isNotEmpty(\"\")        = false\n      * StringUtils.isNotEmpty(\" \")       = true\n      * StringUtils.isNotEmpty(\"bob\")     = true\n      * StringUtils.isNotEmpty(\"  bob  \") = true\n      * </pre>\n      *\n+     * <p>NOTE: This method changed in version 2.0.\n+     * It no longer returns false for null.\n+     * That functionality is available in isNotEmptyOrNull().</p>\n+     * \n      * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is not <code>null</code> and not empty\n+     * @return <code>true</code> if the String is not empty\n      */\n     public static boolean isNotEmpty(String str) {\n+        return (str == null || str.length() > 0);\n+    }\n+\n+    /**\n+     * <p>Checks if a String is empty (\"\") or <code>null</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.isEmptyOrNull(null)      = true\n+     * StringUtils.isEmptyOrNull(\"\")        = true\n+     * StringUtils.isEmptyOrNull(\" \")       = false\n+     * StringUtils.isEmptyOrNull(\"bob\")     = false\n+     * StringUtils.isEmptyOrNull(\"  bob  \") = false\n+     * </pre>\n+     *\n+     * @param str  the String to check, may be null\n+     * @return <code>true</code> if the String is empty or null\n+     */\n+    public static boolean isEmptyOrNull(String str) {\n+        return (str == null || str.length() == 0);\n+    }\n+\n+    /**\n+     * <p>Checks if a String is not not empty (\"\") and not <code>null</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.isNotEmptyOrNull(null)      = false\n+     * StringUtils.isNotEmptyOrNull(\"\")        = false\n+     * StringUtils.isNotEmptyOrNull(\" \")       = true\n+     * StringUtils.isNotEmptyOrNull(\"bob\")     = true\n+     * StringUtils.isNotEmptyOrNull(\"  bob  \") = true\n+     * </pre>\n+     *\n+     * @param str  the String to check, may be null\n+     * @return <code>true</code> if the String is neither empty nor null\n+     */\n+    public static boolean isNotEmptyOrNull(String str) {\n         return (str != null && str.length() > 0);\n     }\n \n     /**\n-     * <p>Checks if a trimmed String is <code>null</code> or empty (\"\").</p>\n-     *\n-     * <pre>\n-     * StringUtils.isNotEmpty(null)      = true\n-     * StringUtils.isNotEmpty(\"\")        = true\n-     * StringUtils.isNotEmpty(\" \")       = true\n-     * StringUtils.isNotEmpty(\"bob\")     = false\n-     * StringUtils.isNotEmpty(\"  bob  \") = false\n+     * <p>Checks if a trimmed String is empty (\"\").\n+     * <code>null</code> returns <code>false</code></p>\n+     * \n+     * <p>The string is trimmed using {@link String#trim()}.\n+     * Trim removes start and end characters &lt;= 32.</p>\n+     *\n+     * <pre>\n+     * StringUtils.isEmptyTrimmed(null)      = false\n+     * StringUtils.isEmptyTrimmed(\"\")        = true\n+     * StringUtils.isEmptyTrimmed(\" \")       = true\n+     * StringUtils.isEmptyTrimmed(\"bob\")     = false\n+     * StringUtils.isEmptyTrimmed(\"  bob  \") = false\n+     * </pre>\n+     *\n+     * @see java.lang.String#trim()\n+     * @param str  the String to check, may be null\n+     * @return <code>true</code> if the String is empty after trim()\n+     */\n+    public static boolean isEmptyTrimmed(String str) {\n+        return (str != null && str.trim().length() == 0);\n+    }\n+\n+    /**\n+     * <p>Checks if a trimmed String is not empty (\"\").</p>\n+     * <code>null</code> returns <code>true</code></p>\n+     * \n+     * <p>The string is trimmed using {@link String#trim()}.\n+     * Trim removes start and end characters &lt;= 32.</p>\n+     *\n+     * <pre>\n+     * StringUtils.isNotEmptyTrimmed(null)      = true\n+     * StringUtils.isNotEmptyTrimmed(\"\")        = false\n+     * StringUtils.isNotEmptyTrimmed(\" \")       = false\n+     * StringUtils.isNotEmptyTrimmed(\"bob\")     = true\n+     * StringUtils.isNotEmptyTrimmed(\"  bob  \") = true\n+     * </pre>\n+     *\n+     * @see java.lang.String#trim()\n+     * @param str  the String to check, may be null\n+     * @return <code>true</code> if the String is not empty after trim()\n+     */\n+    public static boolean isNotEmptyTrimmed(String str) {\n+        return (str == null || str.trim().length() > 0);\n+    }\n+\n+    /**\n+     * <p>Checks if a trimmed String is empty (\"\") or <code>null</code>.</p>\n+     * \n+     * <p>The string is trimmed using {@link String#trim()}.\n+     * Trim removes start and end characters &lt;= 32.</p>\n+     *\n+     * <pre>\n+     * StringUtils.isEmptyTrimmedOrNull(null)      = true\n+     * StringUtils.isEmptyTrimmedOrNull(\"\")        = true\n+     * StringUtils.isEmptyTrimmedOrNull(\" \")       = true\n+     * StringUtils.isEmptyTrimmedOrNull(\"bob\")     = false\n+     * StringUtils.isEmptyTrimmedOrNull(\"  bob  \") = false\n      * </pre>\n      *\n      * @see java.lang.String#trim()\n      * @return <code>true</code> if the String is <code>null</code>\n      *  or empty after trim()\n      */\n-    public static boolean isEmptyTrimmed(String str) {\n+    public static boolean isEmptyTrimmedOrNull(String str) {\n         return (str == null || str.trim().length() == 0);\n     }\n \n     /**\n-     * <p>Checks if a trimmed String is not <code>null</code> and not empty (\"\").</p>\n-     *\n-     * <pre>\n-     * StringUtils.isNotEmpty(null)      = false\n-     * StringUtils.isNotEmpty(\"\")        = false\n-     * StringUtils.isNotEmpty(\" \")       = false\n-     * StringUtils.isNotEmpty(\"bob\")     = true\n-     * StringUtils.isNotEmpty(\"  bob  \") = true\n+     * <p>Checks if a trimmed String is not empty (\"\") and not <code>null</code>.</p>\n+     * \n+     * <p>The string is trimmed using {@link String#trim()}.\n+     * Trim removes start and end characters &lt;= 32.</p>\n+     *\n+     * <pre>\n+     * StringUtils.isNotEmptyTrimmedOrNull(null)      = false\n+     * StringUtils.isNotEmptyTrimmedOrNull(\"\")        = false\n+     * StringUtils.isNotEmptyTrimmedOrNull(\" \")       = false\n+     * StringUtils.isNotEmptyTrimmedOrNull(\"bob\")     = true\n+     * StringUtils.isNotEmptyTrimmedOrNull(\"  bob  \") = true\n      * </pre>\n      *\n      * @see java.lang.String#trim()\n      * @return <code>true</code> if the String is not <code>null</code>\n      *  and not empty after trim()\n      */\n-    public static boolean isNotEmptyTrimmed(String str) {\n+    public static boolean isNotEmptyTrimmedOrNull(String str) {\n         return (str != null && str.trim().length() > 0);\n     }\n \n      * <p>Compares two Strings, returning <code>true</code> if they are equal ignoring\n      * the case.</p>\n      *\n-     * <p><code>Nulls</code> are handled without exceptions. Two <code>null</code>\n+     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n      * references are considered equal. Comparison is case insensitive.</p>\n      *\n      * <pre>\n      *\n      * <p><code>null</code> String will return <code>-1</code>.</p>\n      * \n+     * <pre>\n+     * StringUtils.indexOfAny(null, null)                = -1\n+     * StringUtils.indexOfAny(null, [\"ab\",\"cd\"])         = -1\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", null)        = -1\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [])          = -1\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"]) = 2\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"]) = 2\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n+     * </pre>\n+     * \n      * @param str  the String to check, may be null\n      * @param searchStrs  the Strings to search for, may be null\n      * @return the first index of any of the searchStrs in str, -1 if no match\n      * <p>Find the latest index of any of a set of potential substrings.</p>\n      *\n      * <p><code>null</code> string will return <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.lastIndexOfAny(null, null)                = -1\n+     * StringUtils.lastIndexOfAny(null, [\"ab\",\"cd\"])         = -1\n+     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", null)        = -1\n+     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [])          = -1\n+     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"]) = 6\n+     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"]) = 6\n+     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n+     * </pre>\n      * \n      * @param str  the String to check, may be null\n      * @param searchStrs  the Strings to search for, may be null\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n  * @author Chris Webb\n  * @author Mike Bowler\n  * @since 1.0\n- * @version $Id: Enum.java,v 1.12 2003/07/14 22:58:31 scolebourne Exp $\n+ * @version $Id: Enum.java,v 1.13 2003/07/16 21:19:21 scolebourne Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n     // After discussion, the default size for HashMaps is used, as the\n     /**\n      * <p>Constructor to add a new named item to the enumeration.</p>\n      *\n-     * @param name  the name of the enum object\n+     * @param name  the name of the enum object,\n+     *  must not be empty or <code>null</code>\n      * @throws IllegalArgumentException if the name is <code>null</code>\n-     *  or a blank string\n+     *  or an empty string\n      */\n     protected Enum(String name) {\n         super();\n \n-        if (StringUtils.isEmpty(name)) {\n+        if (StringUtils.isEmptyOrNull(name)) {\n             throw new IllegalArgumentException(\"The Enum name must not be empty or null\");\n         }\n         iName = name;\n--- a/src/java/org/apache/commons/lang/reflect/ReflectionUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/ReflectionUtils.java\n  * reflection.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n- * @version $Id: ReflectionUtils.java,v 1.7 2003/07/14 22:28:48 bayard Exp $\n+ * @version $Id: ReflectionUtils.java,v 1.8 2003/07/16 21:19:22 scolebourne Exp $\n  */\n public class ReflectionUtils {\n     \n     /**\n      * <p>Gets a class object for the specified string.</p>\n      *\n-     * @param className  fully qualified class name to find, must not be empty\n+     * @param className  fully qualified class name to find,\n+     *  must not be empty or <code>null</code>\n      * @return Class object for class\n      * @throws ReflectionException if an error occurs during reflection\n      * @throws IllegalArgumentException if the class name is empty\n      */\n     public static Class getClass(String className) throws ReflectionException {\n-        if (StringUtils.isEmpty(className)) {\n+        if (StringUtils.isEmptyOrNull(className)) {\n             throw new IllegalArgumentException(\"The class name must not be null\");\n         }\n         try {\n--- a/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: StringUtilsTrimEmptyTest.java,v 1.8 2003/07/14 22:26:22 scolebourne Exp $\n+ * @version $Id: StringUtilsTrimEmptyTest.java,v 1.9 2003/07/16 21:19:22 scolebourne Exp $\n  */\n public class StringUtilsTrimEmptyTest extends TestCase {\n     private static final String FOO = \"foo\";\n         assertEquals(false, StringUtils.isEmpty(\"  foo  \"));\n         assertEquals(false, StringUtils.isEmpty(\" \"));\n         assertEquals(true, StringUtils.isEmpty(\"\"));\n-        assertEquals(true, StringUtils.isEmpty(null));\n+        assertEquals(false, StringUtils.isEmpty(null));\n     }\n \n     public void testIsNotEmpty() {\n         assertEquals(true, StringUtils.isNotEmpty(\"  foo  \"));\n         assertEquals(true, StringUtils.isNotEmpty(\" \"));\n         assertEquals(false, StringUtils.isNotEmpty(\"\"));\n-        assertEquals(false, StringUtils.isNotEmpty(null));\n+        assertEquals(true, StringUtils.isNotEmpty(null));\n+    }\n+\n+    public void testIsEmptyOrNull() {\n+        assertEquals(false, StringUtils.isEmptyOrNull(\"foo\"));\n+        assertEquals(false, StringUtils.isEmptyOrNull(\"  foo  \"));\n+        assertEquals(false, StringUtils.isEmptyOrNull(\" \"));\n+        assertEquals(true, StringUtils.isEmptyOrNull(\"\"));\n+        assertEquals(true, StringUtils.isEmptyOrNull(null));\n+    }\n+\n+    public void testIsNotEmptyOrNull() {\n+        assertEquals(true, StringUtils.isNotEmptyOrNull(\"foo\"));\n+        assertEquals(true, StringUtils.isNotEmptyOrNull(\"  foo  \"));\n+        assertEquals(true, StringUtils.isNotEmptyOrNull(\" \"));\n+        assertEquals(false, StringUtils.isNotEmptyOrNull(\"\"));\n+        assertEquals(false, StringUtils.isNotEmptyOrNull(null));\n     }\n \n     public void testIsEmptyTrimmed() {\n         assertEquals(false, StringUtils.isEmptyTrimmed(\"  foo  \"));\n         assertEquals(true, StringUtils.isEmptyTrimmed(\" \"));\n         assertEquals(true, StringUtils.isEmptyTrimmed(\"\"));\n-        assertEquals(true, StringUtils.isEmptyTrimmed(null));\n+        assertEquals(false, StringUtils.isEmptyTrimmed(null));\n     }\n \n     public void testIsNotEmptyTrimmed() {\n         assertEquals(true, StringUtils.isNotEmptyTrimmed(\"  foo  \"));\n         assertEquals(false, StringUtils.isNotEmptyTrimmed(\" \"));\n         assertEquals(false, StringUtils.isNotEmptyTrimmed(\"\"));\n-        assertEquals(false, StringUtils.isNotEmptyTrimmed(null));\n+        assertEquals(true, StringUtils.isNotEmptyTrimmed(null));\n+    }\n+\n+    public void testIsEmptyTrimmedOrNull() {\n+        assertEquals(false, StringUtils.isEmptyTrimmedOrNull(\"foo\"));\n+        assertEquals(false, StringUtils.isEmptyTrimmedOrNull(\"  foo  \"));\n+        assertEquals(true, StringUtils.isEmptyTrimmedOrNull(\" \"));\n+        assertEquals(true, StringUtils.isEmptyTrimmedOrNull(\"\"));\n+        assertEquals(true, StringUtils.isEmptyTrimmedOrNull(null));\n+    }\n+\n+    public void testIsNotEmptyTrimmedOrNull() {\n+        assertEquals(true, StringUtils.isNotEmptyTrimmedOrNull(\"foo\"));\n+        assertEquals(true, StringUtils.isNotEmptyTrimmedOrNull(\"  foo  \"));\n+        assertEquals(false, StringUtils.isNotEmptyTrimmedOrNull(\" \"));\n+        assertEquals(false, StringUtils.isNotEmptyTrimmedOrNull(\"\"));\n+        assertEquals(false, StringUtils.isNotEmptyTrimmedOrNull(null));\n     }\n \n     public void testDeleteSpace() {", "timestamp": 1058390362, "metainfo": ""}