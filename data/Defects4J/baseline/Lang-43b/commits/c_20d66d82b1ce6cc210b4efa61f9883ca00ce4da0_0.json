{"sha": "20d66d82b1ce6cc210b4efa61f9883ca00ce4da0", "log": "Javadoc style fix, from Fredrik Westermarck   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n \n import org.apache.commons.lang.NumberUtils;\n /** \n- * <code>CompareTo</code> generation routines.\n- * <p>\n- * This class provides methods to build a good <comde>compareTo()</code> method for any class.\n- * It is consistent with the <code>equals</code> and <code>hashcode</code> built\n- * with EqualsBuilder and HashCodeBuilder.\n- * <p>\n- * Two object that compare equal using equals should compare equals using\n- * compareTo.\n- * <p>\n- * All relevant fields should be included in the calculation of the comparison. Derived\n- * fields may be ignored. The same fields, in the same order, should be used in\n- * both <code>compareTo</code> and <code>equals</code>.\n- * <p>\n- * Typical use for the code is as follows:\n- *\n+ * <p><code>CompareTo</code> generation routines.</p>\n+ *\n+ * <p>This class provides methods to build a good <comde>compareTo()</code>\n+ * method for any class. It is consistent with the <code>equals</code> and\n+ * <code>hashcode</code> built with {@link EqualsBuilder} and\n+ * {@link HashCodeBuilder}.</p>\n+ *\n+ * <p>Two object that compare equal using equals should compare equals using\n+ * compareTo</p>.\n+ *\n+ * <p>All relevant fields should be included in the calculation of the\n+ * comparison. Derived fields may be ignored. The same fields, in the same\n+ * order, should be used in both <code>compareTo</code> and\n+ * <code>equals</code>.</p>\n+ *\n+ * <p>Typical use for the code is as follows:</p>\n  * <pre>\n  *  public int comapareTo(Object o) {\n  *    MyClass rhs = (MyClass) o;\n  *                 .toComparison();\n  *  }\n  * </pre>\n- * <p>\n- * Alternatively, there is a method that uses reflection to determine\n+ *\n+ * <p>Alternatively, there is a method that uses reflection to determine\n  * the fields to test. Because these fields are usually private, the method,\n  * <code>reflectionCompare</code>, uses <code>Field.setAccessible</code> to change\n  * the visibility of the fields. This will fail under a security manager,\n  * unless the appropriate permissions are set. It is also slower than testing\n- * explicitly.\n- * <p>\n- * A typical invocation for this method would look like:\n+ * explicitly.</p>\n+ *\n+ * <p>A typical invocation for this method would look like:</p>\n  * <pre>\n  * public int compareTo(Object o) {\n  *   return CompareToBuilder.reflectionCompare(this, obj);\n  * }\n  * </pre>\n+ *\n  * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: CompareToBuilder.java,v 1.4 2002/09/28 10:44:51 scolebourne Exp $\n+ * @version $Id: CompareToBuilder.java,v 1.5 2002/11/17 21:46:42 scolebourne Exp $\n  */\n public class CompareToBuilder {\n     /**\n     private int comparison;\n \n     /**\n-     * Constructor for CompareToBuilder.\n-     * Starts off assuming that the objects are equal.\n+     * <p>Constructor for CompareToBuilder.</p>\n+     *\n+     * <p>Starts off assuming that the objects are equal.</p>\n+     *\n      * @see java.lang.Object#Object()\n      */\n     public CompareToBuilder() {\n     //-------------------------------------------------------------------------\n     \n     /** \n-     * This method uses reflection to determine the ordering between two objects.\n-     * <p>\n-     * It uses Field.setAccessible to gain access to private fields. This means\n-     * that it will throw a security exception if run under a security manger, if\n-     * the permissions are not set up.\n-     * It is also not as efficient as testing explicitly.\n-     * Transient members will be not be tested, as they are likely derived\n-     * fields, and not part of the value of the object.\n-     * Static fields will not be tested.\n+     * <p>This method uses reflection to determine the ordering between two\n+     * Objects.</p>\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run under\n+     * a security manger, if the permissions are not set up correctly. It is\n+     * also not as efficient as testing explicitly.</p>\n+     *\n+     * <p>Transient members will be not be tested, as they are likely derived\n+     * fields, and not part of the value of the object.</p>\n+     *\n+     * <p>Static fields will not be tested.</p>\n+     *\n      * @param lhs  Left Hand Side\n      * @param rhs  Right Hand Side\n      * @return a negative integer, zero, or a positive integer as this \n-     * object is less than, equal to, or greater than the specified object.\n-     * @throws NullPointerException  if either (but not both) parameter is null\n-     * @throws ClassCastException  if the specified object's type prevents it \n-     * from being compared to this Object.\n+     *  Object is less than, equal to, or greater than the specified Object.\n+     * @throws NullPointerException  if either (but not both) parameter is\n+     *  <code>null</code>\n+     * @throws ClassCastException  if the specified Object's type prevents it\n+     *  from being compared to this Object.\n      */\n     public static int reflectionCompare(Object lhs, Object rhs) {\n         return reflectionCompare(lhs, rhs, false);\n     }\n \n     /**\n-     * This method uses reflection to determine if the two object are equal. \n-     * <p>\n-     * It uses Field.setAccessible to gain access to private fields. This means\n-     * that it will throw a security exception if run under a security manger, if\n-     * the permissions are not set up.\n-     * It is also not as efficient as testing explicitly. \n-     * If the TestTransients parameter is set to true, transient members will be\n-     * tested, otherwise they are ignored, as they are likely derived fields, and\n-     * not part of the value of the object. \n-     * Static fields will not be tested.\n+     * <p>This method uses reflection to determine if the two Objects are\n+     * equal.</p>\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run under\n+     * a security manger, if  the permissions are not set up correctly. It is\n+     * also not as efficient as testing explicitly.</p>\n+     *\n+     * <p>If the <code>testTransients</code> is set to <code>true</code>,\n+     * transient members will be tested, otherwise they are ignored, as they\n+     * are likely derived fields, and not part of the value of the object.</p>\n+     *\n+     * <p>Static fields will not be tested.</p>\n      * \n      * @param lhs  Left Hand Side\n      * @param rhs  Right Hand Side\n      * @param testTransients  whether to include transient fields\n      * @return a negative integer, zero, or a positive integer as this \n-     * object is less than, equal to, or greater than the specified object.\n-     * @throws NullPointerException  if either (but not both) parameter is null\n-     * @throws ClassCastException  if the specified object's type prevents it \n-     * from being compared to this Object.\n+     *  Object is less than, equal to, or greater than the specified Object.\n+     * @throws NullPointerException  if either (but not both) parameter is\n+     *  <code>null</code>\n+     * @throws ClassCastException  if the specified Object's type prevents it\n+     *  from being compared to this Object.\n      */\n     public static int reflectionCompare(Object lhs, Object rhs, \n             boolean testTransients) {\n \n     //-------------------------------------------------------------------------\n     \n-    /** Test if two <code>Object</code>s are equal using either the\n+    /**\n+     * <p>Test if two <code>Object</code>s are equal using either the\n      * <code>compareTo</code> method, or native comparison if the Objects are\n-     * actually arrays.\n-     * <p>\n-     * The objects must be <code>Comparable</code>. If they are not, the method\n-     * will throw a <code>ClassCastException</code>.\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws NullPointerException  if either (but not both) parameter is null\n-     * @throws ClassCastException if the specified object's type prevents it\n+     * actually arrays.</p>\n+     *\n+     * <p>The objects must be <code>Comparable</code>. If they are not, the\n+     * method will throw a <code>ClassCastException</code>.</p>\n+     *\n+     * @param lhs - Left Hand Side\n+     * @param rhs - Right Hand Side\n+     * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is\n+     *  <code>null</code>\n+     * @throws ClassCastException if the specified Object's type prevents it\n      * from being compared to this Object.\n      */\n     public CompareToBuilder append(Object lhs, Object rhs) {\n     }\n \n     /**\n-     * Test if two <code>long</code>s are <, > or ==.\n+     * <p>Test if two <code>long</code>s are <, > or ==.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>int</code>s are <, > or ==.\n+     * <p>Test if two <code>int</code>s are <, > or ==.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>short</code>s are <, > or ==.\n+     * <p>Test if two <code>short</code>s are <, > or ==.</p>\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>char</code>s are <, > or ==.\n+     * <p>Test if two <code>char</code>s are <, > or ==.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>byte</code>s are <, > or ==.\n+     * <p>Test if two <code>byte</code>s are <, > or ==.</p>\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>double</code>s are <, > or ==. This handles NaNs, \n-     * Infinties, and -0.0. It is compatible with the hash code generated by \n-     * <code>HashCodeBuilder</code>.\n+     * <p>Test if two <code>double</code>s are <, > or ==.</p>\n+     *\n+     * <p>This handles NaNs, Infinties, and <code>-0.0</code>.</p>\n+     *\n+     * <p>It is compatible with the hash code generated by\n+     * <code>HashCodeBuilder</code>.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>double</code>s are <, > or ==. This handles NaNs, \n-     * Infinties, and -0.0. It is compatible with the hash code generated by \n-     * <code>HashCodeBuilder</code>.\n+     * <p>Test if two <code>double</code>s are <, > or ==.</p>\n+     *\n+     * <p>This handles NaNs, Infinties, and <code>-0.0</code>.</p>\n+     *\n+     * <p>It is compatible with the hash code generated by\n+     * <code>HashCodeBuilder</code>.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>booleans</code>s are <, > or ==.\n+     * <p>Test if two <code>booleans</code>s are <, > or ==.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return CompareToBuilder - used to chain calls.\n     }\n \n     /**\n-     * Performs a deep comparison of two object arrays. This also will be\n-     * called for the top level of multi-dimensional, ragged, and multi-typed\n-     * arrays. If two arrays are of different lengths, and all elements of the\n+     * <p>Performs a deep comparison of two Object arrays.</p>\n+     *\n+     * <p>This also will be called for the top level of multi-dimensional,\n+     * ragged, and multi-typed arrays.</p>\n+     *\n+     * <p>If two arrays are of different lengths, and all elements of the\n      * shorter array are equal to the elements in the longer array, the longer\n-     * array is the greater. This is dictionary, or lexical, ordering.\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws NullPointerException  if either (but not both) parameter is null\n-     * @throws ClassCastException  if the specified object's type prevents it \n-     * from being compared to this Object.\n+     * array is the greater. This is dictionary, or lexical, ordering.</p>\n+     *\n+     * @param lhs - Left Hand Side\n+     * @param rhs - Right Hand Side\n+     * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is\n+     *  <code>null</code>\n+     * @throws ClassCastException  if the specified Object's type prevents it\n+     *  from being compared to this Object.\n      */\n     public CompareToBuilder append(Object[] lhs, Object[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * Deep comparison of array of <code>long</code> Length and all values\n-     *  are compared. The method append(long, long) is used.\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws NullPointerException  if either (but not both) parameter is null\n+     * <p>Deep comparison of array of <code>long</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(long, long)} is used.</p>\n+     *\n+     * @param lhs - Left Hand Side\n+     * @param rhs - Right Hand Side\n+     * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is\n+     *  <code>null</code>\n      */\n     public CompareToBuilder append(long[] lhs, long[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * Deep comparison of array of <code>int</code> Length and all values\n-     *  are compared. The method append(int, int) is used.\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws NullPointerException  if either (but not both) parameter is null\n+     * <p>Deep comparison of array of <code>int</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(int, int)} is used.</p>\n+     *\n+     * @param lhs - Left Hand Side\n+     * @param rhs - Right Hand Side\n+     * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is\n+     *  <code>null</code>\n      */\n     public CompareToBuilder append(int[] lhs, int[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * Deep comparison of array of <code>short</code> Length and all values\n-     *  are compared. The method append(short, short) is used.\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws NullPointerException  if either (but not both) parameter is null\n+     * <p>Deep comparison of array of <code>short</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(short, short)} is used.</p>\n+     *\n+     * @param lhs - Left Hand Side\n+     * @param rhs - Right Hand Side\n+     * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is\n+     *  <code>null<code>\n      */\n     public CompareToBuilder append(short[] lhs, short[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * Deep comparison of array of <code>char</code> Length and all values\n-     *  are compared. The method append(char, char) is used.\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws NullPointerException  if either (but not both) parameter is null\n+     * <p>Deep comparison of array of <code>char</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(char, char)} is used.</p>\n+     *\n+     * @param lhs - Left Hand Side\n+     * @param rhs - Right Hand Side\n+     * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is\n+     *  <code>null</code>\n      */\n     public CompareToBuilder append(char[] lhs, char[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * Deep comparison of array of <code>byte</code> Length and all values\n-     *  are compared. The method append(byte, byte) is used.\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws NullPointerException  if either (but not both) parameter is null\n+     * <p>Deep comparison of array of <code>byte</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(byte, byte)} is used.</p>\n+     *\n+     * @param lhs - Left Hand Side\n+     * @param rhs - Right Hand Side\n+     * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is\n+     *  <code>null</code>\n      */\n     public CompareToBuilder append(byte[] lhs, byte[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * Deep comparison of array of <code>double</code> Length and all values\n-     *  are compared. The method append(double, double) is used.\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws NullPointerException  if either (but not both) parameter is null\n+     * <p>Deep comparison of array of <code>double</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(double, double)} is used.</p>\n+     *\n+     * @param lhs - Left Hand Side\n+     * @param rhs - Right Hand Side\n+     * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is\n+     *  <code>null</code>\n      */\n     public CompareToBuilder append(double[] lhs, double[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * Deep comparison of array of <code>float</code> Length and all values\n-     *  are compared. The method append(float, float) is used.\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws NullPointerException  if either (but not both) parameter is null\n+     * <p>Deep comparison of array of <code>float</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(float, float)} is used.</p>\n+     *\n+     * @param lhs - Left Hand Side\n+     * @param rhs - Right Hand Side\n+     * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is\n+     *  <code>null</code>\n      */\n     public CompareToBuilder append(float[] lhs, float[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * Deep comparison of array of <code>boolean</code> Length and all values\n-     *  are compared. The method append(boolean, boolean) is used.\n-     * @param lhs - Left Hand Side\n-     * @param rhs - Right Hand Side\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws NullPointerException  if either (but not both) parameter is null\n+     * <p>Deep comparison of array of <code>boolean</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(boolean, boolean)} is used.</p>\n+     *\n+     * @param lhs - Left Hand Side\n+     * @param rhs - Right Hand Side\n+     * @return CompareToBuilder - used to chain calls.\n+     * @throws NullPointerException  if either (but not both) parameter is\n+     *  <code>null</code>\n      */\n     public CompareToBuilder append(boolean[] lhs, boolean[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * Return a negative integer if the object is less than, a positive \n-     * integer if the object is greater than, or 0 if the object is equal.\n+     * <p>Return a negative integer if the Object is less than, a positive\n+     * integer if the Object is greater than, or <code>0</code> if the\n+     * Object is equal.\n      * \n      * @return int - a negative integer, zero, or a positive integer as this \n-     * object is less than, equal to, or greater than the specified object.\n+     *  Object is less than, equal to, or greater than the specified Object.\n      */\n     public int toComparison() {\n         return comparison;\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n /**\n- * <code>Equals</code> generation routines. \n- * <p>\n- * This class provides methods to build a good equals method for any class.  \n- * It follows rules laid out in Effective Java, by Joshua Bloch. In particular\n- * the rule for comparing <code>doubles </code>, <code>floats</code>, and \n- * arrays can be tricky. Also, making  sure that <code>equals()</code>\n- * and <code>hashCode()</code> are consistent can be difficult.\n- * <p>\n- * Two object that compare as equals must generate the same hash code. But two\n- * objects with the same hash code do not have to be equal.\n- * <p>\n- * All relevant fields should be included in the calculation of equals. Derived\n- * fields may be ignored. In particular, any field used in generating a hash \n- * code must be used in the equals method, and vice versa.\n- * <p>\n- * Typical use for the code is as follows:\n+ * <p><code>Equals</code> generation routines.</p>\n+ *\n+ * <p> This class provides methods to build a good equals method for any\n+ * class. It follows rules laid out in\n+ * <a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java</a>\n+ * , by Joshua Bloch. In particular the rule for comparing <code>doubles</code>,\n+ * <code>floats</code>, and arrays can be tricky. Also, making sure that\n+ * <code>equals()</code> and <code>hashCode()</code> are consistent can be\n+ * difficult.</p>\n+ *\n+ * <p>Two Object that compare as equals must generate the same hash code.\n+ * But two Objects with the same hash code do not have to be equal.</p>\n+ *\n+ * <p>All relevant fields should be included in the calculation of equals.\n+ * Derived fields may be ignored. In particular, any field used in\n+ * generating a hash code must be used in the equals method, and vice\n+ * versa.</p>\n+ *\n+ * <p>Typical use for the code is as follows:</p>\n  * <pre>\n  * public boolean equals(Object o) {\n  *   if ( !(o instanceof MyClass) ) {\n  *                 .isEquals();\n  *  }\n  * </pre>\n- * <p>\n- * Alternatively, there is a method that uses reflection to determine\n- * the fields to test. Because these fields are usually private, the method, \n- * <code>reflectionEquals</code>, uses <code>Field.setAccessible</code> to change\n- * the visibility of the fields. This will fail under a security manager, \n- * unless the appropriate permissions are set. It is also slower than testing \n- * explicitly.\n- * <p>\n- * A typical invocation for this method would look like:\n+ *\n+ * <p> Alternatively, there is a method that uses reflection to determine\n+ * the fields to test. Because these fields are usually private, the method,\n+ * <code>reflectionEquals</code>, uses <code>Field.setAccessible</code> to\n+ * change the visibility of the fields. This will fail under a security\n+ * manager, unless the appropriate permissions are set up correctly. It is\n+ * also slower than testing explicitly.</p>\n+ *\n+ * <p> A typical invocation for this method would look like:</p>\n  * <pre>\n  * public boolean equals(Object o) {\n  *   return EqualsBuilder.reflectionEquals(this, obj);\n  * \n  * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: EqualsBuilder.java,v 1.5 2002/11/01 16:40:41 bayard Exp $\n+ * @version $Id: EqualsBuilder.java,v 1.6 2002/11/17 21:46:42 scolebourne Exp $\n  */\n public class EqualsBuilder {\n     /**\n     private boolean isEquals;\n \n     /**\n-     * Constructor for EqualsBuilder.\n-     * Starts off assuming that equals is true.\n+     * <p>Constructor for EqualsBuilder.</p>\n+     *\n+     * <p>Starts off assuming that equals is <code>true</code>.</p>\n      * @see java.lang.Object#Object()\n      */\n     public EqualsBuilder() {\n     //-------------------------------------------------------------------------\n     \n     /**\n-     * This method uses reflection to determine if the two object are equal. \n-     * <p>\n-     * It uses Field.setAccessible to gain access to private fields. This means\n-     * that it will throw a security exception if run under a security manger, if\n-     * the permissions are not set up.\n-     * It is also not as efficient as testing explicitly. \n-     * Transient members will be not be tested, as they are likely derived\n-     * fields, and not part of the value of the object.\n-     * Static fields will not be tested.\n+     * <p>This method uses reflection to determine if the two Object are equal.</p>\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run under\n+     * a security manger, if the permissions are not set up correctly. It is also\n+     * not as efficient as testing explicitly.</p>\n+     *\n+     * <p>Transient members will be not be tested, as they are likely derived\n+     * fields, and not part of the value of the Object.</p>\n+     *\n+     * <p>Static fields will not be tested.</p>\n      * \n      * @param lhs  Left Hand Side\n      * @param rhs  Right Hand Side\n-     * @return boolean - if the two objects have tested equals.\n+     * @return <code>true</code> if the two Objects have tested equals.\n      */\n     public static boolean reflectionEquals(Object lhs, Object rhs) {\n         return reflectionEquals(lhs, rhs, false);\n     }\n \n     /**\n-     * This method uses reflection to determine if the two object are equal. \n-     * <p>\n-     * It uses Field.setAccessible to gain access to private fields. This means\n-     * that it will throw a security exception if run under a security manger, if\n-     * the permissions are not set up.\n-     * It is also not as efficient as testing explicitly. \n-     * If the TestTransients parameter is set to true, transient members will be\n-     * tested, otherwise they are ignored, as they are likely derived fields, and\n-     * not part of the value of the object. \n-     * Static fields will not be tested.\n+     * <p>This method uses reflection to determine if the two Object are equal.</p>\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run under\n+     * a security manger, if the permissions are not set up correctly. It is also\n+     * not as efficient as testing explicitly.</p>\n+     *\n+     * <p>If the TestTransients parameter is set to <code>true</code>, transient\n+     * members will be tested, otherwise they are ignored, as they are likely\n+     * derived fields, and not part of the value of the Object.</p>\n+     *\n+     * <p>Static fields will not be tested.</p>\n      * \n      * @param lhs  Left Hand Side\n      * @param rhs  Right Hand Side\n      * @param testTransients  whether to include transient fields\n-     * @return boolean - if the two objects have tested equals.\n+     * @return <code>true</code> if the two Objects have tested equals.\n      */\n     public static boolean reflectionEquals(Object lhs, Object rhs, \n             boolean testTransients) {\n     //-------------------------------------------------------------------------\n     \n     /**\n-     * Test if two <code>Object</code>s are equal using their <code>equals</code>\n-     *  method.\n+     * <p>Test if two <code>Object</code>s are equal using their\n+     * <code>equals</code> method.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>long</code>s are equal using ==.\n+     * <p>Test if two <code>long</code>s are equal using ==.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>int</code>s are equal using ==.\n+     * <p>Test if two <code>int</code>s are equal using ==.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>short</code>s are equal using ==.\n+     * <p>Test if two <code>short</code>s are equal using ==.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>char</code>s are equal using ==.\n+     * <p>Test if two <code>char</code>s are equal using ==.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>byte</code>s are equal using ==.\n+     * <p>Test if two <code>byte</code>s are equal using ==.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>double</code>s are equal by testing that the \n-     * pattern of bits returned by doubleToLong are equal. This handles NaNs, \n-     * Infinties, and -0.0. It is compatible with the hash code generated by \n-     * <code>HashCodeBuilder</code>.\n+     * <p>Test if two <code>double</code>s are equal by testing that the\n+     * pattern of bits returned by <code>doubleToLong</code> are equal.</p>\n+     *\n+     * <p>This handles NaNs, Infinties, and <code>-0.0</code>.</p>\n+     *\n+     * <p>It is compatible with the hash code generated by\n+     * <code>HashCodeBuilder</code>.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>float</code>s are equal byt testing that the \n-     * pattern of bits returned by doubleToLong are equal. This handles NaNs, \n-     * Infinties, and -0.0. It is compatible with the hash code generated by \n-     * <code>HashCodeBuilder</code>.\n+     * <p>Test if two <code>float</code>s are equal byt testing that the\n+     * pattern of bits returned by doubleToLong are equal.</p>\n+     *\n+     * <p>This handles NaNs, Infinties, and <code>-0.0</code>.</p>\n+     *\n+     * <p>It is compatible with the hash code generated by\n+     * <code>HashCodeBuilder</code>.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Test if two <code>booleans</code>s are equal using ==.\n+     * <p>Test if two <code>booleans</code>s are equal using ==.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Performs a deep comparison of two object arrays. This also will be\n-     * called for the top level of multi-dimensional, ragged, and multi-typed\n-     * arrays. \n+     * <p>Performs a deep comparison of two Object arrays.</p>\n+     *\n+     * <p>This also will be called for the top level of\n+     * multi-dimensional, ragged, and multi-typed arrays.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Deep comparison of array of <code>long</code> Length and all values\n-     *  are compared. The method append(long, long) is used.\n+     * <p>Deep comparison of array of <code>long</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(long, long)} is used.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Deep comparison of array of <code>int</code> Length and all values\n-     *  are compared. The method append(int, int) is used.\n+     * <p>Deep comparison of array of <code>int</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(int, int)} is used.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Deep comparison of array of <code>short</code> Length and all values\n-     *  are compared. The method append(short, short) is used.\n+     * <p>Deep comparison of array of <code>short</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(short, short)} is used.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Deep comparison of array of <code>char</code> Length and all values\n-     *  are compared. The method append(char, char) is used.\n+     * <p>Deep comparison of array of <code>char</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(char, char)} is used.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Deep comparison of array of <code>byte</code> Length and all values\n-     *  are compared. The method append(byte, byte) is used.\n+     * <p>Deep comparison of array of <code>byte</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(byte, byte)} is used.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Deep comparison of array of <code>double</code> Length and all values\n-     *  are compared. The method append(double, double) is used.\n+     * <p>Deep comparison of array of <code>double</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(double, double)} is used.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Deep comparison of array of <code>float</code> Length and all values\n-     *  are compared. The method append(float, float) is used.\n+     * <p>Deep comparison of array of <code>float</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(float, float)} is used.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Deep comparison of array of <code>boolean</code> Length and all values\n-     *  are compared. The method append(boolean, boolean) is used.\n+     * <p>Deep comparison of array of <code>boolean</code> Length and all values\n+     * are compared.</p>\n+     *\n+     * <p>The method {@link #append(boolean, boolean)} is used.</p>\n+     *\n      * @param lhs - Left Hand Side\n      * @param rhs - Right Hand Side\n      * @return EqualsBuilder - used to chain calls.\n     }\n \n     /**\n-     * Return true if the fields that have been checked are all equal.\n+     * <p>Return <code>true</code> if the fields that have been checked\n+     * are all equal.</p>\n+     *\n      * @return boolean\n      */\n     public boolean isEquals() {\n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n /**\n- * <code>HashCode</code> generation routines.\n- * <p>\n- * This class enables a good hashcode to be built for any class. It follows\n- * the rules laid out in the book Effective Java, by Joshua Bloch. Writing a \n- * good hashCode is actually quite difficult. This class aims to simplify the \n- * process.\n- * <p>\n- * All relevant fields from the object should be included in the hashCode. Derived\n- * fields may be excluded. In general, any field used in the equals method must be\n- * used in the hashCode method. \n- * <p>\n- * To use this class write code as follows:\n+ * <p><code>HashCode</code> generation routines.</p>\n+ *\n+ * <p> This class enables a good hashcode to be built for any class. It\n+ * follows the rules laid out in the book\n+ * <a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java</a>\n+ * , by Joshua Bloch. Writing a good <code>hashCode</code> is actually quite\n+ * difficult. This class aims to simplify the process.</p>\n+ *\n+ * <p> All relevant fields from the object should be included in the\n+ * <code>hashCode</code>. Derived fields may be excluded. In general, any\n+ * field used in the equals method must be used in the <code>hashCode</code>\n+ * method.</p>\n+ *\n+ * <p>To use this class write code as follows:</p>\n  * <pre>\n  * public class Person {\n  *   String name;\n  *   }\n  * }\n  * </pre>\n- * <p>\n- * Alternatively, there is a method that uses reflection to determine\n+ *\n+ * <p>Alternatively, there is a method that uses reflection to determine\n  * the fields to test. Because these fields are usually private, the method, \n  * <code>reflectionHashCode</code>, uses <code>Field.setAccessible</code> to\n  * change the visibility of the fields. This will fail under a security manager, \n- * unless the appropriate permissions are set. It is also slower than testing \n- * explicitly.\n- * <p>\n- * A typical invocation for this method would look like:\n+ * unless the appropriate permissions are set up correctly. It is also slower\n+ * than testing explicitly.</p>\n+ *\n+ * <p>A typical invocation for this method would look like:</p>\n  * <pre>\n  * public boolean hashCode(Object o) {\n  *   return HashCodeBuilder.reflectionHashCode(this);\n  * </pre>\n  * \n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: HashCodeBuilder.java,v 1.4 2002/10/01 20:02:08 stevencaswell Exp $\n+ * @version $Id: HashCodeBuilder.java,v 1.5 2002/11/17 21:46:42 scolebourne Exp $\n  */\n public class HashCodeBuilder {\n     \n     private int iTotal = 0;\n     \n     /**\n-     * Constructor for HashCodeBuilder.\n-     * This constructor uses two hard coded choices for the constants needed\n-     * to build a hashCode.\n+     * <p>Constructor for HashCodeBuilder.</p>\n+     *\n+     * <p>This constructor uses two hard coded choices for the constants\n+     * needed to build a <code>hashCode</code>.</p>\n      */\n     public HashCodeBuilder() {\n         super();\n     }\n     \n     /**\n-     * Constructor for HashCodeBuilder.\n-     * Two randomly chosen, non-zero, odd numbers must be passed in. Ideally\n-     * these should be different for each class, however this is not vital.\n-     * Prime numbers are preferred, especially for the multiplier.\n+     * <p>Constructor for <code>HashCodeBuilder</code>.</p>\n+     *\n+     * <p>Two randomly chosen, non-zero, odd numbers must be passed in.\n+     * Ideally these should be different for each class, however this is\n+     * not vital.</p>\n+     *\n+     * <p>Prime numbers are preferred, especially for the multiplier.</p>\n      * \n      * @param initialNonZeroOddNumber  a non-zero, odd number used as the initial value\n      * @param multiplierNonZeroOddNumber  a non-zero, odd number used as the multiplier\n     //-------------------------------------------------------------------------\n     \n     /**\n-     * This method uses reflection to build a valid hash code. \n-     * <p>\n-     * It uses Field.setAccessible to gain access to private fields. This means\n-     * that it will throw a security exception if run under a security manger, if\n-     * the permissions are not set up.\n-     * It is also not as efficient as testing explicitly. \n-     * Transient members will be not be used, as they are likely derived \n-     * fields, and not part of the value of the object. \n-     * Static fields will not be tested.\n-     * This constructor uses two hard coded choices for the constants needed\n-     * to build a hash code.\n-     * \n-     * @param object  the object to create a hash code for\n+     * <p>This method uses reflection to build a valid hash code.</p>\n+     *\n+     * <p>This constructor uses two hard coded choices for the constants\n+     * needed to build a hash code.</p>\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run under\n+     * a security manger, if the permissions are not set up correctly. It is\n+     * also not as efficient as testing explicitly.</p>\n+     *\n+     * <p>Transient members will be not be used, as they are likely derived\n+     * fields, and not part of the value of the Object.</p>\n+     *\n+     * <p>Static fields will not be tested.</p>\n+     *\n+     * @param object  the Object to create a <code>hashCode</code> for\n      * @return int hash code\n-     * @throws IllegalArgumentException if the object is null\n+     * @throws IllegalArgumentException if the object is <code>null</code>\n      */\n     public static int reflectionHashCode(Object object) {\n         return reflectionHashCode(object, false);\n     }\n \n     /**\n-     * This method uses reflection to build a valid hash code. \n-     * <p>\n-     * It uses Field.setAccessible to gain access to private fields. This means\n-     * that it will throw a security exception if run under a security manger, if\n-     * the permissions are not set up.\n-     * It is also not as efficient as testing explicitly. \n-     * If the TestTransients parameter is set to true, transient members will be\n-     * tested, otherwise they are ignored, as they are likely derived fields, and\n-     * not part of the value of the object. \n-     * Static fields will not be tested.\n-     * This constructor uses two hard coded choices for the constants needed\n-     * to build a hash code.\n-     * \n-     * @param object  the object to create a hash code for\n+     * <p>This method uses reflection to build a valid hash code.</p>\n+     *\n+     * <p>This constructor uses two hard coded choices for the constants needed\n+     * to build a hash code.</p>\n+     *\n+     * <p> It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run under\n+     * a security manger, if the permissions are not set up correctly. It is\n+     * also not as efficient as testing explicitly.</p>\n+     *\n+     * <P>If the TestTransients parameter is set to <code>true</code>, transient\n+     * members will be tested, otherwise they are ignored, as they are likely\n+     * derived fields, and not part of the value of the Object.</p>\n+     *\n+     * <p>Static fields will not be tested.</p>\n+     *\n+     * @param object  the Object to create a <code>hashCode</code> for\n      * @param testTransients  whether to include transient fields\n      * @return int hash code\n-     * @throws IllegalArgumentException if the object is null\n+     * @throws IllegalArgumentException if the object is <code>null</code>\n      */\n     public static int reflectionHashCode(Object object, boolean testTransients) {\n         return reflectionHashCode(17, 37, object, testTransients);\n     }\n         \n     /**\n-     * This method uses reflection to build a valid hash code. \n-     * <p>\n-     * It uses Field.setAccessible to gain access to private fields. This means\n-     * that it will throw a security exception if run under a security manger, if\n-     * the permissions are not set up.\n-     * It is also not as efficient as testing explicitly. \n-     * Transient members will be not be used, as they are likely derived \n-     * fields, and not part of the value of the object. \n-     * Static fields will not be tested.\n-     * <p>\n-     * Two randomly chosen, non-zero, odd numbers must be passed in. Ideally\n+     * <p>This method uses reflection to build a valid hash code.</p>\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run under\n+     * a security manger, if the permissions are not set up correctly. It is\n+     * also not as efficient as testing explicitly.</p>\n+     *\n+     * <p>Transient members will be not be used, as they are likely derived\n+     * fields, and not part of the value of the Object.</p>\n+     *\n+     * <p>Static fields will not be tested.</p>\n+     *\n+     * <p>Two randomly chosen, non-zero, odd numbers must be passed in. Ideally\n      * these should be different for each class, however this is not vital.\n-     * Prime numbers are preferred, especially for the multiplier.\n+     * Prime numbers are preferred, especially for the multiplier.</p>\n      * \n      * @param initialNonZeroOddNumber  a non-zero, odd number used as the initial value\n      * @param multiplierNonZeroOddNumber  a non-zero, odd number used as the multiplier\n-     * @param object  the object to create a hash code for\n+     * @param object  the Object to create a <code>hashCode</code> for\n      * @return int hash code\n-     * @throws IllegalArgumentException if the object is null\n+     * @throws IllegalArgumentException if the Object is <code>null</code>\n      * @throws IllegalArgumentException if the number is zero or even\n      */\n     public static int reflectionHashCode(\n     }\n     \n     /**\n-     * This method uses reflection to build a valid hash code. \n-     * <p>\n-     * It uses Field.setAccessible to gain access to private fields. This means\n-     * that it will throw a security exception if run under a security manger, if\n-     * the permissions are not set up.\n-     * It is also not as efficient as testing explicitly. \n-     * If the TestTransients parameter is set to true, transient members will be\n-     * tested, otherwise they are ignored, as they are likely derived fields, and\n-     * not part of the value of the object. \n-     * Static fields will not be tested.\n-     * <p>\n-     * Two randomly chosen, non-zero, odd numbers must be passed in. Ideally\n+     * <p>This method uses reflection to build a valid hash code.</p>\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run under\n+     * a security manger, if the permissions are not set up correctly. It is also\n+     * not as efficient as testing explicitly.</p>\n+     *\n+     * <p>If the TestTransients parameter is set to <code>true</code>, transient\n+     * members will be tested, otherwise they are ignored, as they are likely\n+     * derived fields, and not part of the value of the Object.</p>\n+     *\n+     * <p>Static fields will not be tested.</p>\n+     *\n+     * <p>Two randomly chosen, non-zero, odd numbers must be passed in. Ideally\n      * these should be different for each class, however this is not vital.\n-     * Prime numbers are preferred, especially for the multiplier.\n+     * Prime numbers are preferred, especially for the multiplier.</p>\n      * \n      * @param initialNonZeroOddNumber\n      * @param multiplierNonZeroOddNumber\n-     * @param object  the object to create a hash code for\n+     * @param object  the Object to create a <code>hashCode</code> for\n      * @param testTransients  whether to include transient fields\n      * @return int hash code\n-     * @throws IllegalArgumentException if the object is null\n+     * @throws IllegalArgumentException if the Object is <code>null</code>\n      * @throws IllegalArgumentException if the number is zero or even\n      */\n     public static int reflectionHashCode(\n     //-------------------------------------------------------------------------\n     \n     /**\n-     * Append a hashCode for an Object.\n-     *\n-     * @param object  the object to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for an <code>Object</code>.</p>\n+     *\n+     * @param object  the Object to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(Object object) {\n     }\n \n     /**\n-     * Append a hashCode for a long.\n-     *\n-     * @param value  the long to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>long</code>.</p>\n+     *\n+     * @param value  the long to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(long value) {\n     }\n \n     /**\n-     * Append a hashCode for an int.\n-     *\n-     * @param value  the int to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for an <code>int</code>.</p>\n+     *\n+     * @param value  the int to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(int value) {\n     }\n \n     /**\n-     * Append a hashCode for a short.\n-     *\n-     * @param value  the short to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>short</code>.</p>\n+     *\n+     * @param value  the short to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(short value) {\n     }\n \n     /**\n-     * Append a hashCode for a char.\n-     *\n-     * @param value  the char to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>char</code>.</p>\n+     *\n+     * @param value  the char to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(char value) {\n     }\n \n     /**\n-     * Append a hashCode for a byte.\n-     *\n-     * @param value  the byte to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>byte</code>.</p>\n+     *\n+     * @param value  the byte to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(byte value) {\n     }\n \n     /**\n-     * Append a hashCode for a double.\n-     *\n-     * @param value  the double to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>double</code>.</p>\n+     *\n+     * @param value  the double to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(double value) {\n     }\n \n     /**\n-     * Append a hashCode for a float.\n-     *\n-     * @param value  the float to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>float</code>.</p>\n+     *\n+     * @param value  the float to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(float value) {\n     }\n \n     /**\n-     * Append a hashCode for a long.\n-     *\n-     * @param value  the long to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>long</code>.</p>\n+     *\n+     * @param value  the long to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(boolean value) {\n     }\n \n     /**\n-     * Append a hashCode for an Object array.\n-     *\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for an <code>Object</code> array.</p>\n+     *\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(Object[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a long array.\n-     *\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>long</code> array.</p>\n+     *\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(long[] array) {\n     }\n \n     /**\n-     * Append a hashCode for an int array.\n-     *\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for an <code>int</code> array.</p>\n+     *\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(int[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a short array.\n-     *\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>short</code> array.</p>\n+     *\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(short[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a char array.\n-     *\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>char</code> array.</p>\n+     *\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(char[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a byte array.\n-     *\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>byte</code> array.</p>\n+     *\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(byte[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a double array.\n-     *\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>double</code> array.</p>\n+     *\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(double[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a float array.\n-     *\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>float</code> array.</p>\n+     *\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(float[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a boolean array.\n-     *\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>boolean</code> array.</p>\n+     *\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public HashCodeBuilder append(boolean[] array) {\n     }\n \n     /**\n-     * Return the computed hashCode\n+     * <p>Return the computed <code>hashCode</code>.</p>\n      * \n-     * @return int hashCode based on the fields appended\n+     * @return <code>hashCode</code> based on the fields appended\n      */    \n     public int toHashCode() {\n         return iTotal;\n--- a/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n package org.apache.commons.lang.builder;\n \n /**\n- * <code>StandardToStringStyle</code> works with ToStringBuilder to create a\n- * toString.\n- * <p>\n- * This class is intended to be used as a singleton. There is no need \n- * to instantiate a new style each time. Your code should instantiate the class\n- * once, customize the values as required, and then store the result in a \n- * public static final variable for the rest of the program to access.\n+ * <p><code>StandardToStringStyle</code> works with {@link ToStringBuilder}\n+ * to create a <code>toString</code>.</p>\n+ *\n+ * <p>This class is intended to be used as a <code>Singleton</code>. There\n+ * is no need * to instantiate a new style each time. Your code should\n+ * instantiate the class once, customize the values as required, and then\n+ * store the result in a public static final variable for the rest of the\n+ * program to access.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: StandardToStringStyle.java,v 1.4 2002/09/22 09:18:32 scolebourne Exp $\n+ * @version $Id: StandardToStringStyle.java,v 1.5 2002/11/17 21:46:42 scolebourne Exp $\n  */\n public class StandardToStringStyle extends ToStringStyle {\n     \n     /**\n-     * Constructor.\n+     * <p>Constructor.</p>\n      */\n     public StandardToStringStyle() {\n         super();\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets whether to use the class name.\n+     * <p>Gets whether to use the class name.</p>\n+     *\n      * @return the current useClassName flag\n      */\n     public boolean isUseClassName() {\n     }\n \n     /**\n-     * Sets whether to use the class name.\n+     * <p>Sets whether to use the class name.</p>\n+     *\n      * @param useClassName  the new useClassName flag\n      */\n     public void setUseClassName(boolean useClassName) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets whether to output short or long class names.\n+     * <p>Gets whether to output short or long class names.</p>\n+     *\n      * @return the current shortClassName flag\n      */\n     public boolean isShortClassName() {\n     }\n \n     /**\n-     * Sets whether to output short or long class names.\n+     * <p>Sets whether to output short or long class names.</p>\n+     *\n      * @param shortClassName  the new shortClassName flag\n      */\n     public void setShortClassName(boolean shortClassName) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets whether to use the identity hash code.\n+     * <p>Gets whether to use the identity hash code.</p>\n      * @return the current useIdentityHashCode flag\n      */\n     public boolean isUseIdentityHashCode() {\n     }\n \n     /**\n-     * Sets whether to use the identity hash code.\n+     * <p>Sets whether to use the identity hash code.</p>\n+     *\n      * @param useIdentityHashCode  the new useIdentityHashCode flag\n      */\n     public void setUseIdentityHashCode(boolean useIdentityHashCode) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets whether to use the field names passed in.\n+     * <p>Gets whether to use the field names passed in.</p>\n+     *\n      * @return the current useFieldNames flag\n      */\n     public boolean isUseFieldNames() {\n     }\n \n     /**\n-     * Sets whether to use the field names passed in.\n+     * <p>Sets whether to use the field names passed in.</p>\n+     *\n      * @param useFieldNames  the new useFieldNames flag\n      */\n     public void setUseFieldNames(boolean useFieldNames) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets whether to use full detail when the caller doesn't specify.\n+     * <p>Gets whether to use full detail when the caller doesn't\n+     * specify.</p>\n+     *\n      * @return the current defaultFullDetail flag\n      */\n     public boolean isDefaultFullDetail() {\n     }\n \n     /**\n-     * Sets whether to use full detail when the caller doesn't specify.\n+     * <p>Sets whether to use full detail when the caller doesn't\n+     * specify.</p>\n+     *\n      * @param defaultFullDetail  the new defaultFullDetail flag\n      */\n     public void setDefaultFullDetail(boolean defaultFullDetail) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets whether to output array content detail.\n+     * <p>Gets whether to output array content detail.</p>\n+     *\n      * @return the current array content detail setting\n      */\n     public boolean isArrayContentDetail() {\n     }\n     \n     /**\n-     * Sets whether to output array content detail.\n+     * <p>Sets whether to output array content detail.</p>\n+     *\n      * @param arrayContentDetail  the new arrayContentDetail flag\n      */\n     public void setArrayContentDetail(boolean arrayContentDetail) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the array start text.\n+     * <p>Gets the array start text.</p>\n+     *\n      * @return the current array start text\n      */\n     public String getArrayStart() {\n     }\n \n     /**\n-     * Sets the array start text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the array start text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted\n+     * to a empry String.</p>\n+     *\n      * @param arrayStart  the new array start text\n      */\n     public void setArrayStart(String arrayStart) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the array end text.\n+     * <p>Gets the array end text.</p>\n+     *\n      * @return the current array end text\n      */\n     public String getArrayEnd() {\n     }\n \n     /**\n-     * Sets the array end text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the array end text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted\n+     * to a empty String.</p>\n+     *\n      * @param arrayEnd  the new array end text\n      */\n     public void setArrayEnd(String arrayEnd) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the array separator text.\n+     * <p>Gets the array separator text.</p>\n+     *\n      * @return the current array separator text\n      */\n     public String getArraySeparator() {\n     }\n \n     /**\n-     * Sets the array separator text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the array separator text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted\n+     * to a empty String.</p>\n+     *\n      * @param arraySeparator  the new array separator text\n      */\n     public void setArraySeparator(String arraySeparator) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the content start text.\n+     * <p>Gets the content start text.</p>\n+     *\n      * @return the current content start text\n      */\n     public String getContentStart() {\n     }\n \n     /**\n-     * Sets the content start text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the content start text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted\n+     * to a empty String.</p>\n+     *\n      * @param contentStart  the new content start text\n      */\n     public void setContentStart(String contentStart) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the content end text.\n+     * <p>Gets the content end text.</p>\n+     *\n      * @return the current content end text\n      */\n     public String getContentEnd() {\n     }\n \n     /**\n-     * Sets the content end text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the content end text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted\n+     * to a empty String.</p>\n+     *\n      * @param contentEnd  the new content end text\n      */\n     public void setContentEnd(String contentEnd) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the field name value separator text.\n+     * <p>Gets the field name value separator text.</p>\n+     *\n      * @return the current field name value separator text\n      */\n     public String getFieldNameValueSeparator() {\n     }\n \n     /**\n-     * Sets the field name value separator text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the field name value separator text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted\n+     * to a empty String.</p>\n+     *\n      * @param fieldNameValueSeparator  the new field name value separator text\n      */\n     public void setFieldNameValueSeparator(String fieldNameValueSeparator) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the field separator text.\n+     * <p>Gets the field separator text.</p>\n+     *\n      * @return the current field separator text\n      */\n     public String getFieldSeparator() {\n     }\n \n     /**\n-     * Sets the field separator text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the field separator text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted\n+     * to a empty String.</p>\n+     *\n      * @param fieldSeparator  the new field separator text\n      */\n     public void setFieldSeparator(String fieldSeparator) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the text to output when null found.\n-     * @return the current text to output when null found\n+     * <p>Gets the text to output when <code>null</code> found.</p>\n+     *\n+     * @return the current text to output when <code>null</code> found\n      */\n     public String getNullText() {\n         return super.getNullText();\n     }\n \n     /**\n-     * Sets the text to output when null found.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the text to output when <code>null</code> found.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted\n+     * to a empty String.</p>\n+     *\n      * @param nullText  the new text to output when null found\n      */\n     public void setNullText(String nullText) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the text to output when a Collection, Map or Array size is output.\n-     * This is output before the size value.\n+     * <p>Gets the text to output when a <code>Collection</code>,\n+     * <code>Map</code> or <code>Array</code> size is output.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n      * @return the current start of size text\n      */\n     public String getSizeStartText() {\n     }\n \n     /**\n-     * Sets the text to output when a Collection, Map or Array size is output.\n-     * This is output before the size value.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the text to output when a <code>Collection</code>,\n+     * <code>Map</code> or <code>Array</code> size is output.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param sizeStartText  the new start of size text\n      */\n     public void setSizeStartText(String sizeStartText) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the text to output when a Collection, Map or Array size is output.\n-     * This is output after the size value.\n+     * Gets the text to output when a <code>Collection</code>,\n+     * <code>Map</code> or <code>Array</code> size is output.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n      * @return the current end of size text\n      */\n     public String getSizeEndText() {\n     }\n \n     /**\n-     * Sets the text to output when a Collection, Map or Array size is output.\n-     * This is output after the size value.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the text to output when a <code>Collection</code>,\n+     * <code>Map</code> or <code>Array</code> size is output.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted\n+     * to a Empty String.</p>\n+     *\n      * @param sizeEndText  the new end of size text\n      */\n     public void setSizeEndText(String sizeEndText) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the text to output when an Object is output in summary mode.\n-     * This is output before the size value.\n+     * <p>Gets the text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <P>This is output before the size value.</p>\n+     *\n      * @return the current start of summary text\n      */\n     public String getSummaryObjectStartText() {\n     }\n \n     /**\n-     * Sets the text to output when an Object is output in summary mode.\n-     * This is output before the size value.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param summaryObjectStartText  the new start of summary text\n      */\n     public void setSummaryObjectStartText(String summaryObjectStartText) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the text to output when an Object is output in summary mode.\n-     * This is output after the size value.\n+     * <p>Gets the text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n      * @return the current end of summary text\n      */\n     public String getSummaryObjectEndText() {\n     }\n \n     /**\n-     * Sets the text to output when an Object is output in summary mode.\n-     * This is output after the size value.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param summaryObjectEndText  the new end of summary text\n      */\n     public void setSummaryObjectEndText(String summaryObjectEndText) {\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n /**\n- * <code>ToString</code> generation routine.\n- * <p>\n- * This class enables a good toString to be built for any class. This class aims \n- * to simplify the process by:\n+ * <p><code>ToString</code> generation routine.</p>\n+ *\n+ * <p>This class enables a good <code>toString</code> to be built for any\n+ * class. This class aims to simplify the process by:</p>\n  * <ul>\n  * <li>allowing field names\n  * <li>handling all types consistently\n  * <li>handling nulls consistently\n  * <li>outputting arrays and multi-dimensional arrays\n- * <li>enabling the detail level to be controlled for objects and collections\n+ * <li>enabling the detail level to be controlled for Objects and Collections\n  * </ul>\n- * <p>\n- * To use this class write code as follows:\n+ *\n+ * <p>To use this class write code as follows:\n  * <pre>\n  * public class Person {\n  *   String name;\n  *   }\n  * }\n  * </pre>\n- * This will produce a toString of the format:\n- * <code>Person@7f54[name=Stephen,age=29,smoker=false]</code>\n- * <p>\n- * Alternatively, there is a method that uses reflection to determine\n+ * <p>This will produce a toString of the format:\n+ * <code>Person@7f54[name=Stephen,age=29,smoker=false]</code></p>\n+ *\n+ * <p>Alternatively, there is a method that uses reflection to determine\n  * the fields to test. Because these fields are usually private, the method, \n- * <code>reflectionToString</code>, uses <code>Field.setAccessible</code> to change\n- * the visibility of the fields. This will fail under a security manager, \n- * unless the appropriate permissions are set. It is also slower than testing \n- * explicitly.\n- * <p>\n- * A typical invocation for this method would look like:\n+ * <code>reflectionToString</code>, uses <code>Field.setAccessible</code> to\n+ * change the visibility of the fields. This will fail under a security manager,\n+ * unless the appropriate permissions are set up correctly. It is also\n+ * slower than testing explicitly.</p>\n+ *\n+ * <p>A typical invocation for this method would look like:</p>\n  * <pre>\n  * public String toString() {\n  *   return ToStringBuilder.reflectionToString(this);\n  * }\n  * </pre>\n- * <p>\n- * The exact format of the toString is determined by the {@link ToStringStyle}\n- * passed into the constructor.\n+ *\n+ * <p>The exact format of the <code>toString</code> is determined by\n+ * the {@link ToStringStyle} passed into the constructor.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ToStringBuilder.java,v 1.7 2002/10/30 21:31:13 scolebourne Exp $\n+ * @version $Id: ToStringBuilder.java,v 1.8 2002/11/17 21:46:42 scolebourne Exp $\n  */\n public class ToStringBuilder {\n     \n     private final Object object;\n     \n     /**\n-     * Constructor for ToStringBuilder.\n-     * This constructor outputs using the default style set with \n-     * <code>setDefaultStyle</code>.\n+     * <p>Constructor for <code>ToStringBuilder</code>.</p>\n+     *\n+     * <p>This constructor outputs using the default style set with\n+     * <code>setDefaultStyle</code>.</p>\n      * \n-     * @param object  the object to build a toString for, must not be null\n-     * @throws IllegalArgumentException  if the object passed in is null\n+     * @param object  the Object to build a <code>toString</code> for,\n+     *  must not be <code>null</code>\n+     * @throws IllegalArgumentException  if the Object passed in is\n+     *  <code>null</code>\n      */\n     public ToStringBuilder(Object object) {\n         this(object, getDefaultStyle(), null);\n     }\n     \n     /**\n-     * Constructor for ToStringBuilder specifying the output style.\n-     * <p>\n-     * If the style is null, the default style is used.\n+     * <p>Constructor for <code>ToStringBuilder</code> specifying the\n+     * output style.</p>\n+     *\n+     * <p>If the style is <code>null</code>, the default style is used.</p>\n      * \n-     * @param object  the object to build a toString for, must not be null\n-     * @param style  the style of the toString to create, may be null\n-     * @throws IllegalArgumentException  if the object passed in is null\n+     * @param object  the Object to build a <code>toString</code> for,\n+     *  must not be <code>null</code>\n+     * @param style  the style of the <code>toString</code> to create,\n+     *  may be <code>null</code>\n+     * @throws IllegalArgumentException  if the Object passed in is\n+     *  <code>null</code>\n      */\n     public ToStringBuilder(Object object, ToStringStyle style) {\n         this(object, style, null);\n     }\n     \n     /**\n-     * Constructor for ToStringBuilder.\n-     * <p>\n-     * If the style is null, the default style is used.\n-     * If the buffer is null, a new one is created.\n+     * <p>Constructor for <code>ToStringBuilder</code>.</p>\n+     *\n+     * <p>If the style is <code>null</code>, the default style is used.</p>\n+     *\n+     * <p>If the buffer is <code>null</code>, a new one is created.</p>\n      * \n-     * @param object  the object to build a toString for, must not be null\n-     * @param style  the style of the toString to create, may be null\n-     * @param buffer  the string buffer to populate, may be null\n-     * @throws IllegalArgumentException  if the object passed in is null\n+     * @param object  the Object to build a <code>toString</code> for,\n+     *  must not be <code>null</code>\n+     * @param style  the style of the <code>toString</code> to create,\n+     *  may be <code>null</code>\n+     * @param buffer  the <code>StringBuffer</code> to populate, may be\n+     *  <code>null</code>\n+     * @throws IllegalArgumentException  if the Object passed in is\n+     *  <code>null</code>\n      */\n     public ToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer) {\n         super();\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Gets the default style to use.\n-     * <p>\n-     * This could allow the toString style to be controlled for an entire\n-     * application with one call. This might be used to have a verbose toString\n-     * during development and a compact toString in production.\n+     * <p>Gets the default <code>ToStringStyle</code> to use.</p>\n+     *\n+     * <p>This could allow the <code>ToStringStyle</code> to be\n+     * controlled for an entire application with one call.</p>\n+     *\n+     * <p>This might be used to have a verbose\n+     * <code>ToStringStyle</code> during development and a compact\n+     * <code>ToStringStyle</code> in production.</p>\n      * \n-     * @return the default toString style\n+     * @return the default <code>ToStringStyle</code>\n      */\n     public static ToStringStyle getDefaultStyle() {\n         return defaultStyle;\n     }\n     \n     /**\n-     * Sets the default style to use.\n+     * <p>Sets the default <code>ToStringStyle</code> to use.</p>\n      * \n-     * @param style  the default toString style\n-     * @throws IllegalArgumentException if the style is null\n+     * @param style  the default <code>ToStringStyle</code>\n+     * @throws IllegalArgumentException if the style is <code>null</code>\n      */\n     public static void setDefaultStyle(ToStringStyle style) {\n         if (style == null) {\n     //-------------------------------------------------------------------------\n     \n     /**\n-     * This method uses reflection to build a suitable toString using the default style.\n-     * <p>\n-     * It uses Field.setAccessible to gain access to private fields. This means\n-     * that it will throw a security exception if run under a security manger, if\n-     * the permissions are not set up.\n-     * It is also not as efficient as testing explicitly. \n-     * Transient members will be not be included, as they are likely derived.\n-     * Static fields will be not be included.\n-     * fields, and not part of the value of the object. \n-     * \n-     * @param object  the object to be output\n+     * <p>This method uses reflection to build a suitable\n+     * <code>toString<code> using the default <code>ToStringStyle</code>.\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run\n+     * under a security manger, if the permissions are not set up correctly.\n+     * It is also not as efficient as testing explicitly.</p>\n+     *\n+     * <p>Transient members will be not be included, as they are likely derived.</p>\n+     *\n+     * <p>Static fields will be not be included.</p>\n+     *\n+     * @param object  the Object to be output\n      * @return the String result\n-     * @throws IllegalArgumentException if the object is null\n+     * @throws IllegalArgumentException if the Object is <code>null</code>\n      */\n     public static String reflectionToString(Object object) {\n         return reflectionToString(object, null, false);\n     }\n \n     /**\n-     * This method uses reflection to build a suitable toString.\n-     * <p>\n-     * It uses Field.setAccessible to gain access to private fields. This means\n-     * that it will throw a security exception if run under a security manger, if\n-     * the permissions are not set up.\n-     * It is also not as efficient as testing explicitly. \n-     * Transient members will be not be included, as they are likely derived.\n-     * Static fields will be not be included.\n-     * fields, and not part of the value of the object. \n-     * <p>\n-     * If the style is null, the default style is used.\n+     * <p>This method uses reflection to build a suitable\n+     * <code>toString</code>.</p>\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run\n+     * under a security manger, if the permissions are not set up correctly.\n+     * It is also not as efficient as testing explicitly.</p>\n+     *\n+     * <p>Transient members will be not be included, as they are likely\n+     * derived.</p>\n+     *\n+     * <p>Static fields will be not be included.</p>\n+     *\n+     * <p>If the style is <code>null</code>, the default\n+     * <code>ToStringStyle</code> is used.</p>\n      * \n-     * @param object  the object to be output\n-     * @param style  the style of the toString to create, may be null\n+     * @param object  the Object to be output\n+     * @param style  the style of the <code>toString</code> to create,\n+     *  may be <code>null</code>\n      * @return the String result\n-     * @throws IllegalArgumentException if the object or style is null\n+     * @throws IllegalArgumentException if the Object or\n+     *  <code>ToStringStyle</code> is <code>null</code>\n      */\n     public static String reflectionToString(Object object, ToStringStyle style) {\n         return reflectionToString(object, style, false);\n     }\n \n     /**\n-     * This method uses reflection to build a suitable toString.\n+     * <p>This method uses reflection to build a suitable\n+     * <code>toString</code>.</p>\n+     *\n+     * <p>It uses <code>Field.setAccessible</code> to gain access to private\n+     * fields. This means that it will throw a security exception if run\n+     * under a security manger, if the permissions are not set up correctly.\n+     * It is also not as efficient as testing explicitly. </p>\n+     *\n+     * <p>If the <code>outputTransients</code> is <code>true</code>,\n+     * transient members will be output, otherwise they are ignored,\n+     * as they are likely derived fields, and not part of the value of the\n+     * Object.</p>\n+     *\n+     * <p>Static fields will not be tested.</p>\n+     *\n      * <p>\n-     * It uses Field.setAccessible to gain access to private fields. This means\n-     * that it will throw a security exception if run under a security manger, if\n-     * the permissions are not set up.\n-     * It is also not as efficient as testing explicitly. \n-     * If the outputTransients parameter is set to true, transient members will be\n-     * output, otherwise they are ignored, as they are likely derived fields, and\n-     * not part of the value of the object. \n-     * Static fields will not be tested.\n-     * <p>\n-     * If the style is null, the default style is used.\n+     * If the style is <code>null</code>, the default\n+     * <code>ToStringStyle</code> is used.</p>\n      * \n-     * @param object  the object to be output\n-     * @param style  the style of the toString to create, may be null\n+     * @param object  the Object to be output\n+     * @param style  the style of the <code>toString</code> to create,\n+     *  may be <code>null</code>\n      * @param outputTransients  whether to include transient fields\n      * @return the String result\n-     * @throws IllegalArgumentException if the object is null\n+     * @throws IllegalArgumentException if the Object is <code>null</code>\n      */\n     public static String reflectionToString(Object object, ToStringStyle style, \n             boolean outputTransients) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString an Object value.\n-     *\n-     * @param object  the value to add to the toString\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value.</p>\n+     *\n+     * @param object  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(Object object) {\n     }\n \n     /**\n-     * Append to the toString an Object value.\n-     *\n-     * @param object  the value to add to the toString\n-     * @param fieldName  the field name\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param object  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, Object object) {\n     }\n \n     /**\n-     * Append to the toString an Object value.\n-     *\n-     * @param object  the value to add to the toString\n-     * @param fieldName  the field name\n-     * @param fullDetail  true for detail, false for summary info\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param object  the value to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail,\n+     *  <code>false</code> for summary info\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, Object object, boolean fullDetail) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a long value.\n-     *\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(long value) {\n     }\n \n     /**\n-     * Append to the toString a long value.\n-     *\n-     * @param value  the value to add to the toString\n-     * @param fieldName  the field name\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, long value) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString an int value.\n-     *\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(int value) {\n     }\n \n     /**\n-     * Append to the toString an int value.\n-     *\n-     * @param value  the value to add to the toString\n-     * @param fieldName  the field name\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, int value) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a short value.\n-     *\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> an <code>short</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(short value) {\n     }\n \n     /**\n-     * Append to the toString a short value.\n-     *\n-     * @param value  the value to add to the toString\n-     * @param fieldName  the field name\n+     * <p>Append to the <code>toString</code> an <code>short</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, short value) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a char value.\n-     *\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> an <code>char</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(char value) {\n     }\n \n     /**\n-     * Append to the toString a char value.\n-     *\n-     * @param value  the value to add to the toString\n-     * @param fieldName  the field name\n+     * <p>Append to the <code>toString</code> an <code>char</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, char value) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a byte value.\n-     *\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> an <code>byte</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(byte value) {\n     }\n \n     /**\n-     * Append to the toString a byte value.\n-     *\n-     * @param value  the value to add to the toString\n-     * @param fieldName  the field name\n+     * <p>Append to the <code>toString</code> an <code>byte</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, byte value) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a double value.\n-     *\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> an <code>double</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(double value) {\n     }\n \n     /**\n-     * Append to the toString a double value.\n-     *\n-     * @param value  the value to add to the toString\n-     * @param fieldName  the field name\n+     * <p>Append to the <code>toString</code> an <code>double</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, double value) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a float value.\n-     *\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> an <code>float</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(float value) {\n     }\n \n     /**\n-     * Append to the toString a float value.\n-     *\n-     * @param value  the value to add to the toString\n-     * @param fieldName  the field name\n+     * <p>Append to the <code>toString</code> an <code>float</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, float value) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a boolean value.\n-     *\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> an <code>boolean</code>\n+     * value.</p>\n+     *\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(boolean value) {\n     }\n \n     /**\n-     * Append to the toString a boolean value.\n-     *\n-     * @param value  the value to add to the toString\n-     * @param fieldName  the field name\n+     * <p>Append to the <code>toString</code> an <code>boolean</code>\n+     * value.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, boolean value) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString an Object array.\n-     *\n-     * @param array  the array to add to the toString\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(Object[] array) {\n     }\n \n     /**\n-     * Append to the toString an Object array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, Object[] array) {\n     }\n \n     /**\n-     * Append to the toString an Object array.\n-     * <p>\n-     * A boolean parameter controls the level of detail to show. Setting true\n-     * will output the array in full. Setting false will output a summary,\n-     * typically the size of the array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, Object[] array, boolean fullDetail) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a long array.\n-     *\n-     * @param array  the array to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(long[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a long array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>long</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, long[] array) {\n     }\n \n     /**\n-     * Append to the toString a long array.\n-     * <p>\n-     * A boolean parameter controls the level of detail to show. Setting true\n-     * will output the array in full. Setting false will output a summary,\n-     * typically the size of the array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, long[] array, boolean fullDetail) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a int array.\n-     *\n-     * @param array  the array to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>int</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(int[] array) {\n     }\n \n     /**\n-     * Append a hashCode for an int array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for an <code>int</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, int[] array) {\n     }\n \n     /**\n-     * Append to the toString an int array.\n-     * <p>\n-     * A boolean parameter controls the level of detail to show. Setting true\n-     * will output the array in full. Setting false will output a summary,\n-     * typically the size of the array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, int[] array, boolean fullDetail) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a short array.\n-     *\n-     * @param array  the array to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(short[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a short array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>short</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, short[] array) {\n     }\n \n     /**\n-     * Append to the toString a short array.\n-     * <p>\n-     * A boolean parameter controls the level of detail to show. Setting true\n-     * will output the array in full. Setting false will output a summary,\n-     * typically the size of the array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, short[] array, boolean fullDetail) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a char array.\n-     *\n-     * @param array  the array to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(char[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a char array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>char</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, char[] array) {\n     }\n \n     /**\n-     * Append to the toString a char array.\n-     * <p>\n-     * A boolean parameter controls the level of detail to show. Setting true\n-     * will output the array in full. Setting false will output a summary,\n-     * typically the size of the array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, char[] array, boolean fullDetail) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a byte array.\n-     *\n-     * @param array  the array to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(byte[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a byte array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>byte</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, byte[] array) {\n     }\n \n     /**\n-     * Append to the toString a byte array.\n-     * <p>\n-     * A boolean parameter controls the level of detail to show. Setting true\n-     * will output the array in full. Setting false will output a summary,\n-     * typically the size of the array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, byte[] array, boolean fullDetail) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a double array.\n-     *\n-     * @param array  the array to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(double[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a double array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>double</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, double[] array) {\n     }\n \n     /**\n-     * Append to the toString a double array.\n-     * <p>\n-     * A boolean parameter controls the level of detail to show. Setting true\n-     * will output the array in full. Setting false will output a summary,\n-     * typically the size of the array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, double[] array, boolean fullDetail) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a float array.\n-     *\n-     * @param array  the array to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(float[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a float array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>float</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, float[] array) {\n     }\n \n     /**\n-     * Append to the toString a float array.\n-     * <p>\n-     * A boolean parameter controls the level of detail to show. Setting true\n-     * will output the array in full. Setting false will output a summary,\n-     * typically the size of the array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, float[] array, boolean fullDetail) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a boolean array.\n-     *\n-     * @param array  the array to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n+     * array.</p>\n+     *\n+     * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n     public ToStringBuilder append(boolean[] array) {\n     }\n \n     /**\n-     * Append a hashCode for a boolean array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the hashCode\n+     * <p>Append a <code>hashCode</code> for a <code>boolean</code>\n+     * array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, boolean[] array) {\n     }\n \n     /**\n-     * Append to the toString a boolean array.\n-     * <p>\n-     * A boolean parameter controls the level of detail to show. Setting true\n-     * will output the array in full. Setting false will output a summary,\n-     * typically the size of the array.\n-     *\n-     * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n+     * array.</p>\n+     *\n+     * <p>A boolean parameter controls the level of detail to show.\n+     * Setting <code>true</code> will output the array in full. Setting\n+     * <code>false</code> will output a summary, typically the size of\n+     * the array.</p>\n+     *\n+     * @param fieldName  the field name\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info\n      * @return this\n      */\n     public ToStringBuilder append(String fieldName, boolean[] array, boolean fullDetail) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Gets the buffer being populated\n+     * <p>Gets the <code>StringBuffer</code> being populated.</p>\n      * \n-     * @return the StringBuffer being populated\n+     * @return the <code>StringBuffer</code> being populated\n      */    \n     public StringBuffer getStringBuffer() {\n         return buffer;\n     }\n \n     /**\n-     * Returns the built toString\n+     * <p>Returns the built <code>toString</code>.</p>\n      * \n-     * @return the String toString\n+     * @return the String <code>toString</code>\n      */    \n     public String toString() {\n         style.appendEnd(buffer, object);\n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n \n import org.apache.commons.lang.SystemUtils;\n /**\n- * <code>ToStringStyle</code> works with ToStringBuilder to create a\n- * toString. The main public interface is always via ToStringBuilder.\n- * <p>\n- * These classes are intended to be used as singletons. There is no need \n- * to instantiate a new style each time. A program will generally use one\n- * of the predefined constants on this class. Alternatively, the \n- * {@link StandardToStringStyle} class can be used to set the individual\n- * settings. Thus most styles can be achieved without subclassing.\n- * <p>\n- * If required, a subclass can override as many or as few of the methods as \n- * it requires.Each object type (from boolean to long to Object to int[]) has \n- * its own methods to output it. Most have two versions, detail and summary. For\n- * example, the detail version of the array based methods will output the\n- * whole array, whereas the summary method will just output the array length.\n+ * <p><code>ToStringStyle</code> works with <code>ToStringBuilder</code>\n+ * to create a <code>toString</code>. The main public interface is always\n+ * via <code>ToStringBuilder</code>.</p>\n+ *\n+ * <p>These classes are intended to be used as <code>Singletons</code>.\n+ * There is no need to instantiate a new style each time. A program\n+ * will generally use one of the predefined constants on this class.\n+ * Alternatively, the {@link StandardToStringStyle} class can be used\n+ * to set the individual settings. Thus most styles can be achieved\n+ * without subclassing.</p>\n+ *\n+ * <p>If required, a subclass can override as many or as few of the\n+ * methods as it requires. Each object type (from <code>boolean</code>\n+ * to <code>long</code> to <code>Object</code> to <code>int[]</code>) has\n+ * its own methods to output it. Most have two versions, detail and summary.\n+ *\n+ * <p>For example, the detail version of the array based methods will\n+ * output the whole array, whereas the summary method will just output\n+ * the array length.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ToStringStyle.java,v 1.4 2002/09/22 09:18:32 scolebourne Exp $\n+ * @version $Id: ToStringStyle.java,v 1.5 2002/11/17 21:46:42 scolebourne Exp $\n  */\n public abstract class ToStringStyle implements Serializable {\n     \n     public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle();\n \n     /**\n-     * Whether to use the field names 'true'\n+     * Whether to use the field names, the default is <code>true</code>.\n      */\n     private boolean useFieldNames = true;\n     /**\n-     * Whether to use the class name 'true'\n+     * Whether to use the class name, the default is <code>true</code>.\n      */\n     private boolean useClassName = true;\n     /**\n-     * Whether to use short class names 'false'\n+     * Whether to use short class names, the default is <code>false</code>.\n      */\n     private boolean useShortClassName = false;\n     /**\n-     * Whether to use the identity hash code 'true'\n+     * Whether to use the identity hash code, the default is <code>true</code>.\n      */\n     private boolean useIdentityHashCode = true;\n     \n     /**\n-     * The content start '['\n+     * The content start <code>'['</code>.\n      */\n     private String contentStart = \"[\";\n     /**\n-     * The content end ']'\n+     * The content end <code>']'</code>.\n      */\n     private String contentEnd = \"]\";\n     /**\n-     * The field name value separator '='\n+     * The field name value separator <code>'='</code>.\n      */\n     private String fieldNameValueSeparator = \"=\";\n     /**\n-     * The field separator ','\n+     * The field separator <code>','</code>.\n      */\n     private String fieldSeparator = \",\";\n     /**\n-     * The array start '{'\n+     * The array start <code>'{'</code>.\n      */\n     private String arrayStart = \"{\";\n     /**\n-     * The array separator ','\n+     * The array separator <code>','</code>.\n      */\n     private String arraySeparator = \",\";\n     /**\n      */\n     private boolean arrayContentDetail = true;\n     /**\n-     * The array end '}'\n+     * The array end <code>'}'</code>.\n      */\n     private String arrayEnd = \"}\";\n     /**\n-     * The value to use when fullDetail is null 'true'\n+     * The value to use when fullDetail is <code>null</code>,\n+     * the default value is <code>true</code>.\n      */\n     private boolean defaultFullDetail = true;\n     /**\n-     * The null text '<null>'\n+     * The <code>null</code> text <code>'&lt;null&gt;'</code>.\n      */\n     private String nullText = \"<null>\";\n     /**\n-     * The summary size text start '<size'\n+     * The summary size text start <code>'<size'</code>.\n      */\n     private String sizeStartText = \"<size=\";\n     /**\n-     * The summary size text start '>'\n+     * The summary size text start <code>'>'</code>.\n      */\n     private String sizeEndText = \">\";\n     /**\n-     * The summary object text start '<'\n+     * The summary object text start <code>'<'</code>.\n      */\n     private String summaryObjectStartText = \"<\";\n     /**\n-     * The summary object text start '>'\n+     * The summary object text start <code>'>'</code>.\n      */\n     private String summaryObjectEndText = \">\";\n     \n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Constructor.\n+     * <p>Constructor.</p>\n      */\n     protected ToStringStyle() {\n         super();\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append the start of data indicator.\n+     * <p>Append the start of data indicator.</p>\n      * \n-     * @param buffer  the StringBuffer to populate\n-     * @param object  the object to build a toString for, must not be null\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param object  the <code>Object</code> to build a\n+     *  <code>toString</code> for, must not be <code>null</code>\n      */\n     public void appendStart(StringBuffer buffer, Object object) {\n         appendClassName(buffer, object);\n     }\n \n     /**\n-     * Append the end of data indicator.\n+     * <p>Append the end of data indicator.</p>\n      * \n-     * @param buffer  the StringBuffer to populate\n-     * @param object  the object to build a toString for, must not be null\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param object  the <code>Object</code> to build a\n+     *  <code>toString</code> for, must not be <code>null</code>\n      */\n     public void appendEnd(StringBuffer buffer, Object object) {\n         appendContentEnd(buffer);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString an Object value, printing the full \n-     * toString of the object passed in.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value, printing the full <code>toString</code> of the\n+     * <code>Object</code> passed in.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param value  the value to add to the toString\n-     * @param fullDetail  true for detail, false for summary info, null for style decides\n+     * @param value  the value to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n      */\n     public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n     }\n     \n     /**\n-     * Append to the toString an Object, correctly interpretting its type.\n-     * <p>\n-     * This method performs the main lookup by Class type to correctly route\n-     * arrays, collections, maps and objects to the appropriate method. Either\n-     * detail or summary views can be specified.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param value  the value to add to the toString, not null\n+     * <p>Append to the <code>toString</code> an <code>Object</code>,\n+     * correctly interpretting its type.</p>\n+     *\n+     * <p>This method performs the main lookup by Class type to correctly\n+     * route arrays, <code>Collections</code>, <code>Maps</code> and\n+     * <code>Objects</code> to the appropriate method.</p>\n+     *\n+     * <p>Either detail or summary views can be specified.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      * @param detail  output detail or not\n      */\n     protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) {\n     }\n     \n     /**\n-     * Append to the toString an Object value, printing the full detail of the object.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param value  the value to add to the toString, not null\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value, printing the full detail of the <code>Object</code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, Object value) {\n         buffer.append(value);\n     }\n     \n     /**\n-     * Append to the toString a Collection.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param coll  the collection to add to the toString, not null\n+     * <p>Append to the <code>toString</code> a <code>Collection</code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param coll  the <code>Collection</code> to add to the\n+     *  <code>toString</code>, not <code>null</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, Collection coll) {\n         buffer.append(coll);\n     }\n     \n     /**\n-     * Append to the toString a Map.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param map  the maps to add to the toString, not null\n+     * <p>Append to the <code>toString</code> a <code>Map<code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param map  the <code>Map</code> to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, Map map) {\n         buffer.append(map);\n     }\n     \n     /**\n-     * Append to the toString an Object value, printing a summary of the object.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param value  the value to add to the toString, not null\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * value, printing a summary of the Object.</P>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendSummary(StringBuffer buffer, String fieldName, Object value) {\n         buffer.append(summaryObjectStartText);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a long value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param value  the value to add to the toString\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     public void append(StringBuffer buffer, String fieldName, long value) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString a long value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, long value) {\n         buffer.append(value);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString an int value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param value  the value to add to the toString\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     public void append(StringBuffer buffer, String fieldName, int value) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString an int value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, int value) {\n         buffer.append(value);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a short value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param value  the value to add to the toString\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     public void append(StringBuffer buffer, String fieldName, short value) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString a short value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, short value) {\n         buffer.append(value);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a byte value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param value  the value to add to the toString\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     public void append(StringBuffer buffer, String fieldName, byte value) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString a byte value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, byte value) {\n         buffer.append(value);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a char value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param value  the value to add to the toString\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     public void append(StringBuffer buffer, String fieldName, char value) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString a char value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, char value) {\n         buffer.append(value);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a double value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param value  the value to add to the toString\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     public void append(StringBuffer buffer, String fieldName, double value) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString a double value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, double value) {\n         buffer.append(value);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a float value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param value  the value to add to the toString\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     public void append(StringBuffer buffer, String fieldName, float value) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString a float value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, float value) {\n         buffer.append(value);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a boolean value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param value  the value to add to the toString\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     public void append(StringBuffer buffer, String fieldName, boolean value) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString a boolean value.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param value  the value to add to the toString\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n+     * value.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param value  the value to add to the <code>toString</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) {\n         buffer.append(value);\n     }\n \n     /**\n-     * Append to the toString an Object array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> an <code>Object</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n      * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info, null for style decides\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n      */\n     public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString the detail of an Object array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> the detail of an\n+     * <code>Object</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) {\n         buffer.append(arrayStart);\n     }\n \n     /**\n-     * Append to the toString a summary of an Object array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> a summary of an\n+     * <code>Object</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) {\n         appendSummarySize(buffer, fieldName, array.length);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a long array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>long</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info, null for style decides\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n      */\n     public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString the detail of a long array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>long</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) {\n         buffer.append(arrayStart);\n     }\n \n     /**\n-     * Append to the toString a summary of a long array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>long</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) {\n         appendSummarySize(buffer, fieldName, array.length);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString an int array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> an <code>int</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info, null for style decides\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n      */\n     public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString the detail of an int array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> the detail of an\n+     * <code>int</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) {\n         buffer.append(arrayStart);\n     }\n \n     /**\n-     * Append to the toString a summary of an int array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> a summary of an\n+     * <code>int</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) {\n         appendSummarySize(buffer, fieldName, array.length);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a short array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>short</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info, null for style decides\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n      */\n     public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString the detail of a short array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>short</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) {\n         buffer.append(arrayStart);\n     }\n \n     /**\n-     * Append to the toString a summary of a short array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>short</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) {\n         appendSummarySize(buffer, fieldName, array.length);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a byte array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>byte</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info, null for style decides\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n      */\n     public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString the detail of a byte array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>byte</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) {\n         buffer.append(arrayStart);\n     }\n \n     /**\n-     * Append to the toString a summary of a byte array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>byte</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) {\n         appendSummarySize(buffer, fieldName, array.length);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a char array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>char</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n-     * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info, null for style decides\n+     * @param array  the array to add to the <code>toString</code>\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n      */\n     public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString the detail of a char array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>char</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) {\n         buffer.append(arrayStart);\n     }\n \n     /**\n-     * Append to the toString a summary of a char array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>char</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) {\n         appendSummarySize(buffer, fieldName, array.length);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a double array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>double</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n      * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info, null for style decides\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n      */\n     public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString the detail of a double array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>double</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) {\n         buffer.append(arrayStart);\n     }\n \n     /**\n-     * Append to the toString a summary of a double array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>double</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) {\n         appendSummarySize(buffer, fieldName, array.length);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a float array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>float</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n      * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info, null for style decides\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n      */\n     public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString the detail of a float array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>float</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) {\n         buffer.append(arrayStart);\n     }\n \n     /**\n-     * Append to the toString a summary of a float array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>float</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) {\n         appendSummarySize(buffer, fieldName, array.length);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append to the toString a boolean array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a <code>boolean</code>\n+     * array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n      * @param array  the array to add to the toString\n-     * @param fullDetail  true for detail, false for summary info, null for style decides\n+     * @param fullDetail  <code>true</code> for detail, <code>false</code>\n+     *  for summary info, <code>null</code> for style decides\n      */\n     public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) {\n         appendFieldStart(buffer, fieldName);\n     }\n \n     /**\n-     * Append to the toString the detail of a boolean array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> the detail of a\n+     * <code>boolean</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) {\n         buffer.append(arrayStart);\n     }\n \n     /**\n-     * Append to the toString a summary of a boolean array.\n-     *\n-     * @param buffer  the StringBuffer to populate\n-     * @param fieldName  the field name, typically not used as already appended\n-     * @param array  the array to add to the toString, not null\n+     * <p>Append to the <code>toString</code> a summary of a\n+     * <code>boolean</code> array.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param fieldName  the field name, typically not used as already appended\n+     * @param array  the array to add to the <code>toString</code>,\n+     *  not <code>null</code>\n      */\n     protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) {\n         appendSummarySize(buffer, fieldName, array.length);\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Append the class name.\n+     * <p>Append the class name.</p>\n      * \n-     * @param buffer  the StringBuffer to populate\n-     * @param object  the object whose name to output\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param object  the <code>Object</code> whose name to output\n      */\n     protected void appendClassName(StringBuffer buffer, Object object) {\n         if (useClassName) {\n     }\n \n     /**\n-     * Append the IdentityHashCode.\n+     * <p>Append the {@link System#identityHashCode(java.lang.Object)}.</p>\n      * \n-     * @param buffer  the StringBuffer to populate\n-     * @param object  the object whose id to output\n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param object  the <code>Object</code> whose id to output\n      */\n     protected void appendIdentityHashCode(StringBuffer buffer, Object object) {\n         if (useIdentityHashCode) {\n     }\n \n     /**\n-     * Append the content start to the buffer.\n+     * <p>Append the content start to the buffer.</p>\n      * \n-     * @param buffer  the StringBuffer to populate\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      */\n     protected void appendContentStart(StringBuffer buffer) {\n         buffer.append(contentStart);\n     }\n     \n     /**\n-     * Append the content end to the buffer.\n+     * <p>Append the content end to the buffer.</p>\n      * \n-     * @param buffer  the StringBuffer to populate\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      */\n     protected void appendContentEnd(StringBuffer buffer) {\n         int len = buffer.length();\n     }\n     \n     /**\n-     * Append an indicator for null to the buffer.\n-     * Default output is '<null>'.\n+     * <p>Append an indicator for <code>null</code> to the buffer.</p>\n+     *\n+     * <p>The default indicator is <code>'&lt;null&gt;'</code>.</p>\n      * \n-     * @param buffer  the StringBuffer to populate\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name, typically not used as already appended\n      */\n     protected void appendNullText(StringBuffer buffer, String fieldName) {\n     }\n     \n     /**\n-     * Append the field separator to the buffer.\n+     * <p>Append the field separator to the buffer.</p>\n      * \n-     * @param buffer  the StringBuffer to populate\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      */\n     protected void appendFieldSeparator(StringBuffer buffer) {\n         buffer.append(fieldSeparator);\n     }\n     \n     /**\n-     * Append the field start to the buffer.\n+     * <p>Append the field start to the buffer.</p>\n      * \n-     * @param buffer  the StringBuffer to populate\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name\n      */\n     protected void appendFieldStart(StringBuffer buffer, String fieldName) {\n     }\n     \n     /**\n-     * Append the field end to the buffer.\n+     * <p>Append the field end to the buffer.</p>\n      * \n-     * @param buffer  the StringBuffer to populate\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name, typically not used as already appended\n      */\n     protected void appendFieldEnd(StringBuffer buffer, String fieldName) {\n     }\n     \n     /**\n-     * Append to the toString a size summary.\n-     * <p>\n-     * The size summary is used to summarize the contents of collections, maps \n-     * and arrays. The text output is a prefix, the size (passed in) and a suffix.\n-     * The default format is '&lt;size=n&gt;'.\n-     *\n-     * @param buffer  the StringBuffer to populate\n+     * <p>Append to the <code>toString</code> a size summary.</p>\n+     *\n+     * <p>The size summary is used to summarize the contents of\n+     * <code>Collections</code>, <code>Maps</code> and arrays.</p>\n+     *\n+     * <p>The output consists of a prefix, the passed in size\n+     * and a suffix.</p>\n+     *\n+     * <p>The default format is <code>'&lt;size=n&gt;'<code>.</p>\n+     *\n+     * @param buffer  the <code>StringBuffer</code> to populate\n      * @param fieldName  the field name, typically not used as already appended\n      * @param size  the size to append\n      */\n     }\n \n     /**\n-     * Is this field to be output in full detail.\n-     * <p>\n-     * This method converts a detail request into a detail level. The calling code\n-     * may request full detail (true), but a subclass might ignore that and always \n-     * return false. The calling code may pass in null indicating that it doesn't\n-     * care about the detail level. In this case the default detail level is used.\n+     * <p>Is this field to be output in full detail.</p>\n+     *\n+     * <p>This method converts a detail request into a detail level.\n+     * The calling code may request full detail (<code>true</code>),\n+     * but a subclass might ignore that and always return\n+     * <code>false</code>. The calling code may pass in\n+     * <code>null</code> indicating that it doesn't care about\n+     * the detail level. In this case the default detail level is\n+     * used.</p>\n      * \n      * @param fullDetailRequest  the detail level requested\n      * @return whether full detail is to be shown\n     }\n     \n     /**\n-     * Gets the short class name for a class.\n-     * <p>\n-     * The short class name is the name excluding the package name.\n-     *\n-     * @param cls  the class to get the short name of\n+     * <p>Gets the short class name for a class.</p>\n+     *\n+     * <p>The short class name is the classname excluding\n+     * the package name.</p>\n+     *\n+     * @param cls  the <code>Class</code> to get the short name of\n      * @return the short name\n      */\n     protected String getShortClassName(Class cls) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets whether to use the class name.\n+     * <p>Gets whether to use the class name.</p>\n+     *\n      * @return the current useClassName flag\n      */\n     protected boolean isUseClassName() {\n     }\n \n     /**\n-     * Sets whether to use the class name.\n+     * <p>Sets whether to use the class name.</p>\n+     *\n      * @param useClassName  the new useClassName flag\n      */\n     protected void setUseClassName(boolean useClassName) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets whether to output short or long class names.\n+     * <p>Gets whether to output short or long class names.</p>\n+     *\n      * @return the current shortClassName flag\n      */\n     protected boolean isShortClassName() {\n     }\n \n     /**\n-     * Sets whether to output short or long class names.\n+     * <p>Sets whether to output short or long class names.</p>\n+     *\n      * @param shortClassName  the new shortClassName flag\n      */\n     protected void setShortClassName(boolean shortClassName) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets whether to use the identity hash code.\n+     * <p>Gets whether to use the identity hash code.</p>\n+     *\n      * @return the current useIdentityHashCode flag\n      */\n     protected boolean isUseIdentityHashCode() {\n     }\n \n     /**\n-     * Sets whether to use the identity hash code.\n+     * <p>Sets whether to use the identity hash code.</p>\n+     *\n      * @param useIdentityHashCode  the new useIdentityHashCode flag\n      */\n     protected void setUseIdentityHashCode(boolean useIdentityHashCode) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets whether to use the field names passed in.\n+     * <p>Gets whether to use the field names passed in.</p>\n+     *\n      * @return the current useFieldNames flag\n      */\n     protected boolean isUseFieldNames() {\n     }\n \n     /**\n-     * Sets whether to use the field names passed in.\n+     * <p>Sets whether to use the field names passed in.</p>\n+     *\n      * @param useFieldNames  the new useFieldNames flag\n      */\n     protected void setUseFieldNames(boolean useFieldNames) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets whether to use full detail when the caller doesn't specify.\n+     * <p>Gets whether to use full detail when the caller doesn't\n+     * specify.</p>\n+     *\n      * @return the current defaultFullDetail flag\n      */\n     protected boolean isDefaultFullDetail() {\n     }\n \n     /**\n-     * Sets whether to use full detail when the caller doesn't specify.\n+     * <p>Sets whether to use full detail when the caller doesn't\n+     * specify.</p>\n+     *\n      * @param defaultFullDetail  the new defaultFullDetail flag\n      */\n     protected void setDefaultFullDetail(boolean defaultFullDetail) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets whether to output array content detail.\n+     * <p>Gets whether to output array content detail.</p>\n+     *\n      * @return the current array content detail setting\n      */\n     protected boolean isArrayContentDetail() {\n     }\n     \n     /**\n-     * Sets whether to output array content detail.\n+     * <p>Sets whether to output array content detail.</p>\n+     *\n      * @param arrayContentDetail  the new arrayContentDetail flag\n      */\n     protected void setArrayContentDetail(boolean arrayContentDetail) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the array start text.\n+     * <p>Gets the array start text.</p>\n+     *\n      * @return the current array start text\n      */\n     protected String getArrayStart() {\n     }\n \n     /**\n-     * Sets the array start text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the array start text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a emptry String.</p>\n+     *\n      * @param arrayStart  the new array start text\n      */\n     protected void setArrayStart(String arrayStart) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the array end text.\n+     * <p>Gets the array end text.</p>\n+     *\n      * @return the current array end text\n      */\n     protected String getArrayEnd() {\n     }\n \n     /**\n-     * Sets the array end text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the array end text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param arrayEnd  the new array end text\n      */\n     protected void setArrayEnd(String arrayEnd) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the array separator text.\n+     * <p>Gets the array separator text.</p>\n+     *\n      * @return the current array separator text\n      */\n     protected String getArraySeparator() {\n     }\n \n     /**\n-     * Sets the array separator text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the array separator text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param arraySeparator  the new array separator text\n      */\n     protected void setArraySeparator(String arraySeparator) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the content start text.\n+     * <p>Gets the content start text.</p>\n+     *\n      * @return the current content start text\n      */\n     protected String getContentStart() {\n     }\n \n     /**\n-     * Sets the content start text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the content start text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param contentStart  the new content start text\n      */\n     protected void setContentStart(String contentStart) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the content end text.\n+     * <p>Gets the content end text.</p>\n+     *\n      * @return the current content end text\n      */\n     protected String getContentEnd() {\n     }\n \n     /**\n-     * Sets the content end text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the content end text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param contentEnd  the new content end text\n      */\n     protected void setContentEnd(String contentEnd) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the field name value separator text.\n+     * <p>Gets the field name value separator text.</p>\n+     *\n      * @return the current field name value separator text\n      */\n     protected String getFieldNameValueSeparator() {\n     }\n \n     /**\n-     * Sets the field name value separator text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the field name value separator text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param fieldNameValueSeparator  the new field name value separator text\n      */\n     protected void setFieldNameValueSeparator(String fieldNameValueSeparator) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the field separator text.\n+     * <p>Gets the field separator text.</p>\n+     *\n      * @return the current field separator text\n      */\n     protected String getFieldSeparator() {\n     }\n \n     /**\n-     * Sets the field separator text.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the field separator text.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param fieldSeparator  the new field separator text\n      */\n     protected void setFieldSeparator(String fieldSeparator) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the text to output when null found.\n+     * <p>Gets the text to output when <code>null</code> found.</p>\n+     *\n      * @return the current text to output when null found\n      */\n     protected String getNullText() {\n     }\n \n     /**\n-     * Sets the text to output when null found.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the text to output when <code>null</code> found.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param nullText  the new text to output when null found\n      */\n     protected void setNullText(String nullText) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the text to output when a Collection, Map or Array size is output.\n-     * This is output before the size value.\n+     * <p>Gets the text to output when a <code>Collection</code>,\n+     * <code>Map</code> or array size is output.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n      * @return the current start of size text\n      */\n     protected String getSizeStartText() {\n     }\n \n     /**\n-     * Sets the text to output when a Collection, Map or Array size is output.\n-     * This is output before the size value.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the text to output when a <code>Collection</code>,\n+     * <code>Map</code> or array size is output.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param sizeStartText  the new start of size text\n      */\n     protected void setSizeStartText(String sizeStartText) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the text to output when a Collection, Map or Array size is output.\n-     * This is output after the size value.\n+     * <p>Gets the text to output when a <code>Collection</code>,\n+     * <code>Map</code> or array size is output.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n      * @return the current end of size text\n      */\n     protected String getSizeEndText() {\n     }\n \n     /**\n-     * Sets the text to output when a Collection, Map or Array size is output.\n-     * This is output after the size value.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the text to output when a <code>Collection</code>,\n+     * <code>Map</code> or array size is output.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param sizeEndText  the new end of size text\n      */\n     protected void setSizeEndText(String sizeEndText) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the text to output when an Object is output in summary mode.\n-     * This is output before the size value.\n+     * <p>Gets the text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n      * @return the current start of summary text\n      */\n     protected String getSummaryObjectStartText() {\n     }\n \n     /**\n-     * Sets the text to output when an Object is output in summary mode.\n-     * This is output before the size value.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output before the size value.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param summaryObjectStartText  the new start of summary text\n      */\n     protected void setSummaryObjectStartText(String summaryObjectStartText) {\n     //---------------------------------------------------------------------\n     \n     /**\n-     * Gets the text to output when an Object is output in summary mode.\n-     * This is output after the size value.\n+     * <p>Gets the text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n      * @return the current end of summary text\n      */\n     protected String getSummaryObjectEndText() {\n     }\n \n     /**\n-     * Sets the text to output when an Object is output in summary mode.\n-     * This is output after the size value.\n-     * Null is accepted, but will be converted to a blank string.\n+     * <p>Sets the text to output when an <code>Object</code> is\n+     * output in summary mode.</p>\n+     *\n+     * <p>This is output after the size value.</p>\n+     *\n+     * <p><code>Null</code> is accepted, but will be converted to\n+     * a empty String.</p>\n+     *\n      * @param summaryObjectEndText  the new end of summary text\n      */\n     protected void setSummaryObjectEndText(String summaryObjectEndText) {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * Default ToStringStyle.\n-     * This is an inner class rather than using StandardToStringStyle to\n-     * ensure its immutability.\n+     * <p>Default <code>ToStringStyle</code>.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n      */\n     private static final class DefaultToStringStyle extends ToStringStyle {\n         \n         /**\n-         * Constructor - use the static constant rather than instantiating.\n+         * <p>Constructor</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n          */\n         private DefaultToStringStyle() {\n             super();\n         }\n         \n         /**\n-         * Ensure singleton after serialization.\n+         * <p>Ensure <code>Singleton</code> after serialization.</p>\n+         *\n          * @return the singleton\n          */\n         private Object readResolve() {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * ToStringStyle that does not print out the field names.\n-     * This is an inner class rather than using StandardToStringStyle to\n-     * ensure its immutability.\n+     * <p><code>ToStringStyle</code> that does not print out\n+     * the field names.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.\n      */\n     private static final class NoFieldNameToStringStyle extends ToStringStyle {\n         \n         /**\n-         * Constructor - use the static constant rather than instantiating.\n+         * <p>Constructor</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n          */\n         private NoFieldNameToStringStyle() {\n             super();\n         }\n         \n         /**\n-         * Ensure singleton after serialization.\n+         * <p>Ensure <code>Singleton</code> after serialization.</p>\n+         *\n          * @return the singleton\n          */\n         private Object readResolve() {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * ToStringStyle that does not print out the classname, identity hashcode,\n-     * content start or field name.\n-     * This is an inner class rather than using StandardToStringStyle to\n-     * ensure its immutability.\n+     * <p><code>ToStringStyle</code> that does not print out the\n+     * classname, identity hashcode, content start or field name.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n      */\n     private static final class SimpleToStringStyle extends ToStringStyle {\n         \n         /**\n-         * Constructor - use the static constant rather than instantiating.\n+         * <p>Constructor</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n          */\n         private SimpleToStringStyle() {\n             super();\n         }\n         \n         /**\n-         * Ensure singleton after serialization.\n+         * <p>Ensure <code>Singleton</ode> after serialization.</p>\n          * @return the singleton\n          */\n         private Object readResolve() {\n     //----------------------------------------------------------------------------\n     \n     /**\n-     * ToStringStyle that outputs on multiple lines.\n-     * This is an inner class rather than using StandardToStringStyle to\n-     * ensure its immutability.\n+     * <p><code>ToStringStyle</code> that outputs on multiple lines.</p>\n+     *\n+     * <p>This is an inner class rather than using\n+     * <code>StandardToStringStyle</code> to ensure its immutability.</p>\n      */\n     private static final class MultiLineToStringStyle extends ToStringStyle {\n \n         /**\n-         * Constructor - use the static constant rather than instantiating.\n+         * <p>Constructor</p>\n+         *\n+         * <p>Use the static constant rather than instantiating.</p>\n          */\n         private MultiLineToStringStyle() {\n             super();\n         }\n         \n         /**\n-         * Ensure singleton after serialization.\n+         * <p>Ensure <code>Singleton</code> after serialization.</p>\n+         *\n          * @return the singleton\n          */\n         private Object readResolve() {", "timestamp": 1037569602, "metainfo": ""}