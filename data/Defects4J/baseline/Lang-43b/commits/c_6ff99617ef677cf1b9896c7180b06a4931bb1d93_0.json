{"sha": "6ff99617ef677cf1b9896c7180b06a4931bb1d93", "log": "Adding a test and a fix for LANG-100. This is a bug in which the randomly created String can sometimes be illegal unicode; because the code does not consider when relationships exist between characters. High and low surrogates are now dealt with, but I'm skipping private high surrogates because I can't find out what to do. Need to go plod very slowly through the spec. This site was very useful: http://www.alanwood.net/unicode/private_use_high_surrogates.html  ", "commit": "\n--- a/src/java/org/apache/commons/lang/RandomStringUtils.java\n+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java\n import java.util.Random;\n /**\n  * <p>Operations for random <code>String</code>s.</p>\n+ * <p>Currently <em>private high surrogate</em> characters are ignored. \n+ * These are unicode characters that fall between the values 56192 (db80)\n+ * and 56319 (dbff) as we don't know how to handle them. \n+ * High and low surrogates are correctly dealt with - that is if a \n+ * high surrogate is randomly chosen, 55296 (d800) to 56191 (db7f) \n+ * then it is followed by a low surrogate. If a low surrogate is chosen, \n+ * 56320 (dc00) to 57343 (dfff) then it is placed after a randomly \n+ * chosen high surrogate. </p>\n  *\n  * @author GenerationJava Core library\n  * @author <a href=\"mailto:bayard@generationjava.com\">Henri Yandell</a>\n             }\n             if ((letters && Character.isLetter(ch))\n                 || (numbers && Character.isDigit(ch))\n-                || (!letters && !numbers)) {\n-                buffer[count] = ch;\n+                || (!letters && !numbers)) \n+            {\n+                if(ch >= 56320 && ch <= 57343) {\n+                    if(count == 0) {\n+                        count++;\n+                    } else {\n+                        // low surrogate, insert high surrogate after putting it in\n+                        buffer[count] = ch;\n+                        count--;\n+                        buffer[count] = (char) (55296 + random.nextInt(128));\n+                    }\n+                } else if(ch >= 55296 && ch <= 56191) {\n+                    if(count == 0) {\n+                        count++;\n+                    } else {\n+                        // high surrogate, insert low surrogate before putting it in\n+                        buffer[count] = (char) (56320 + random.nextInt(128));\n+                        count--;\n+                        buffer[count] = ch;\n+                    }\n+                } else if(ch >= 56192 && ch <= 56319) {\n+                    // private high surrogate, no effing clue, so skip it\n+                    count++;\n+                } else {\n+                    buffer[count] = ch;\n+                }\n             } else {\n                 count++;\n             }\n--- a/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n         }\n         return sumSq;\n     }           \n-        \n+\n+    /**\n+     * Checks if the string got by {@link RandomStringUtils#random(int)}\n+     * can be converted to UTF-8 and back without loss.\n+     *\n+     * @author stefanhoehne@fastmail.fm\n+     * @throws Exception\n+     */\n+    public void testLang100() throws Exception {\n+        int size = 5000;\n+        String encoding = \"UTF-8\";\n+        String orig = RandomStringUtils.random(size);\n+        byte[] bytes = orig.getBytes(encoding);\n+        String copy = new String(bytes, encoding);\n+\n+        // for a verbose compare:\n+        for (int i=0; i < orig.length() && i < copy.length(); i++) {\n+            char o = orig.charAt(i);\n+            char c = copy.charAt(i);\n+            assertEquals(\"differs at \" + i + \"(\" + Integer.toHexString((new Character(o)).hashCode()) + \",\" +\n+            Integer.toHexString((new Character(c)).hashCode()) + \")\", o, c);\n+        }\n+        // compare length also\n+        assertEquals(orig.length(), copy.length());\n+        // just to be complete\n+        assertEquals(orig, copy);\n+    }\n \n     public static void main(String args[]) {\n         TestRunner.run(suite());", "timestamp": 1151368123, "metainfo": ""}