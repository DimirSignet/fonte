{"sha": "d98f05a4019720d72bab3ed4194a61312b0185e1", "log": "Added various tests to the NumberRangeTest class, including tests for null parameters to overlap, include*, and constructors.  Tests for hashCode, and tests for equals.   ", "commit": "\n--- a/src/test/org/apache/commons/lang/NumberRangeTest.java\n+++ b/src/test/org/apache/commons/lang/NumberRangeTest.java\n  */\n package org.apache.commons.lang;\n \n+import java.math.BigDecimal;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n  *\n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Revision: 1.5 $ $Date: 2003/08/18 02:22:25 $\n+ * @author Tim O'Brien\n+ * @version $Revision: 1.6 $ $Date: 2003/10/11 20:35:11 $\n  */\n \n public final class NumberRangeTest extends TestCase {\n \n \n     private NumberRange tenToTwenty;\n+    private NumberRange fifteenToTwentyFive;\n+    private NumberRange fiveToNine;\n     private Number five;\n+    private Number nine;\n     private Number ten;\n     private Number fifteen;\n     private Number twenty;\n     private Number twentyFive;\n \n-\n     public NumberRangeTest(String name) {\n         super(name);\n     }\n \n-\n     public void setUp() {\n         five       = new Integer(5);\n+        nine      = new Double(9.0);\n         ten        = new Integer(10);\n         fifteen    = new Integer(15);\n         twenty     = new Integer(20);\n         twentyFive = new Integer(25);\n \n         tenToTwenty = new NumberRange(ten, twenty);\n+        fifteenToTwentyFive = new NumberRange( fifteen, twentyFive);\n+        fiveToNine = new NumberRange( five, nine );\n     }\n \n \n         result = tenToTwenty.equals(new NumberRange(fifteen, twenty));\n         assertEquals(expected, result);\n     }\n-\n+    \n+    public void testEqualsWithOtherObject() {\n+        assertEquals( \"A NumberRange should not equals a String object\", false, fiveToNine.equals(\"TEST\"));\n+    }\n+\n+    public void testEqualsWithSameReference() {\n+        assertEquals( \"A NumberRange should equal itself\", true, fiveToNine.equals(fiveToNine));\n+    }\n+\n+    public void testEqualsNull() {\n+        assertEquals( \"A NumberRange should not equal null\", false, fiveToNine.equals(null));\n+    }\n+\n+    public void testHashCode() {\n+        NumberRange nr = new NumberRange( new Integer(5), new Double(9.0));\n+        assertEquals( \"The hashCode of 5-9 should equals the hashcode of another NumberRange of the same min/max\",\n+                                fiveToNine.hashCode(), nr.hashCode());\n+        assertTrue( \"The hashCode of 10-20 should not equal the hashCode of 5-9\", \n+                            fiveToNine.hashCode() != tenToTwenty.hashCode());                        \n+    }\n \n     public void testIncludesNumber() {\n         boolean expected = false;\n         assertEquals(expected, result);\n     }\n \n+    public void testIncludesNumberNull() {\n+        boolean result = tenToTwenty.includesNumber(null);\n+        assertEquals(\"Includes number should return false for null values\", false, result);\n+    }\n \n     public void testIncludesRange() {\n         boolean expected = false;\n         assertEquals(expected, result);\n     }\n \n-\tpublic void testConstructorNullParameters()\n-\t{\n-\t\ttry\n-\t\t{\n+    public void testIncludesRangeNull() {\n+        boolean result = tenToTwenty.includesRange(null);\n+        assertEquals(\"Includes range should return false for null values\", false, result);\n+    }\n+\n+    public void testConstructor() {\n+        NumberRange nr = new NumberRange( new Double(2.0));\n+        assertEquals(\"Unexpected min on NumberRange\", 2.0, nr.getMinimum().doubleValue(), Double.MIN_VALUE);\n+        assertEquals(\"Unexpected max on NumberRange\", 2.0, nr.getMaximum().doubleValue(), Double.MIN_VALUE);\n+    }\n+\n+\tpublic void testConstructorNullParameters() {\n+\t\ttry {\n \t\t\tNumberRange nr = new NumberRange(null);\n \t\t\tfail(\"NumberRange(null) did not throw an exception.\");\n+\t\t} catch (Exception e) {\n+\t\t\tassertTrue(\t\"NumberRange(null)\", e instanceof NullPointerException);\n \t\t}\n-\t\tcatch (Exception e)\n-\t\t{\n-\t\t\tassertTrue(\n-\t\t\t\t\"NumberRange(null)\",\n-\t\t\t\te instanceof NullPointerException);\n-\t\t}\n-\n-\t\ttry\n-\t\t{\n+\n+\t\ttry {\n \t\t\tNumberRange nr = new NumberRange(five, null);\n \t\t\tfail(\"NumberRange(five, null) did not throw an exception.\");\n+\t\t} catch (Exception e) {\n+\t\t\tassertTrue(\"NumberRange(five, null)\", e instanceof NullPointerException);\n \t\t}\n-\t\tcatch (Exception e)\n-\t\t{\n-\t\t\tassertTrue(\n-\t\t\t\t\"NumberRange(five, null)\",\n-\t\t\t\te instanceof NullPointerException);\n-\t\t}\n-\n-\t\ttry\n-\t\t{\n+\n+\t\ttry {\n \t\t\tNumberRange nr = new NumberRange(null, five);\n \t\t\tfail(\"NumberRange(null, five) did not throw an exception.\");\n+\t\t} catch (Exception e) {\n+\t\t\tassertTrue(\"NumberRange(null, five)\", e instanceof NullPointerException);\n \t\t}\n-\t\tcatch (Exception e)\n-\t\t{\n-\t\t\tassertTrue(\n-\t\t\t\t\"NumberRange(null, five)\",\n-\t\t\t\te instanceof NullPointerException);\n-\t\t}\n-\n \t}\n+\n+    public void testConstructorWithMaxLessThanMin() {\n+        NumberRange nr = new NumberRange( new Double(2.0), new Double(1.0));\n+        assertEquals(\"Unexpected min on NumberRange\", 2.0, nr.getMinimum().doubleValue(), Double.MIN_VALUE);\n+        assertEquals(\"Unexpected max on NumberRange\", 2.0, nr.getMaximum().doubleValue(), Double.MIN_VALUE);\n+    }\n+\n+    public void testOverlap() {\n+        assertEquals( \"5-9 should not overlap 10-20\", false, fiveToNine.overlaps( tenToTwenty ));\n+        assertEquals( \"10-20 should overlap 15-25\", true, tenToTwenty.overlaps( fifteenToTwentyFive ));\n+    }\n+\n+    public void testOverlapNull() {\n+        assertEquals( \"5-9 should not overlap null\", false, fiveToNine.overlaps( null ));\n+    }\n \n     public void testToString() {\n         String expected = \"10-20\";\n         assertEquals(expected, result);\n     }\n \n+    public void testToStringWithNegatives() {\n+        String expected = \"(-20)-(-10)\";\n+        NumberRange nr = new NumberRange( new Integer(-20), new Integer(-10));\n+        String result = nr.toString();\n+        assertEquals(expected, result);\n+\n+        expected = \"(-20)-10\";\n+        nr = new NumberRange( new Integer(-20), new Integer(10));\n+        result = nr.toString();\n+        assertEquals(expected, result);\n+    }\n+\n \n }\n ", "timestamp": 1065904511, "metainfo": ""}