{"sha": "0268232db1a6663d12f82ae2f5f83e921e53358e", "log": "[LANG-192] addSplitByCharacterType and camelCase variant  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n         return (String[]) list.toArray(new String[list.size()]);\n     }\n \n+    /**\n+     * <p>Splits a String by Character type as returned by\n+     * <code>java.lang.Character.getType(char)</code>. Groups of contiguous\n+     * characters of the same type are returned as complete tokens. \n+     * <pre>\n+     * StringUtils.splitByCamelCase(null)         = null\n+     * StringUtils.splitByCamelCase(\"\")           = []\n+     * StringUtils.splitByCamelCase(\"ab de fg\")   = [\"ab\", \" \", \"de\", \" \", \"fg\"]\n+     * StringUtils.splitByCamelCase(\"ab   de fg\") = [\"ab\", \"   \", \"de\", \" \", \"fg\"]\n+     * StringUtils.splitByCamelCase(\"ab:cd:ef\")   = [\"ab\", \":\", \"cd\", \":\", \"ef\"]\n+     * StringUtils.splitByCamelCase(\"fooBar\")     = [\"foo\", \"B\", \"ar\"]\n+     * StringUtils.splitByCamelCase(\"foo200Bar\")  = [\"foo\", \"200\", \"B\", \"ar\"]\n+     * StringUtils.splitByCamelCase(\"ASFRules\")   = [\"ASFR\", \"ules\"]\n+     * </pre>\n+     * @param str the String to split, may be <code>null</code>\n+     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @since 2.4\n+     */\n+    public static String[] splitByCharacterType(String str) {\n+        return splitByCharacterType(str, false);\n+    }\n+\n+    /**\n+     * <p>Splits a String by Character type as returned by\n+     * <code>java.lang.Character.getType(char)</code>. Groups of contiguous\n+     * characters of the same type are returned as complete tokens, with the\n+     * following exception: if <code>camelCase</code> is <code>true</code>,\n+     * the character of type <code>Character.UPPERCASE_LETTER</code>, if any,\n+     * immediately preceding a token of type <code>Character.LOWERCASE_LETTER</code>\n+     * will belong to the following token rather than to the preceding, if any,\n+     * <code>Character.UPPERCASE_LETTER</code> token. \n+     * <pre>\n+     * StringUtils.splitByCamelCase(null)         = null\n+     * StringUtils.splitByCamelCase(\"\")           = []\n+     * StringUtils.splitByCamelCase(\"ab de fg\")   = [\"ab\", \" \", \"de\", \" \", \"fg\"]\n+     * StringUtils.splitByCamelCase(\"ab   de fg\") = [\"ab\", \"   \", \"de\", \" \", \"fg\"]\n+     * StringUtils.splitByCamelCase(\"ab:cd:ef\")   = [\"ab\", \":\", \"cd\", \":\", \"ef\"]\n+     * StringUtils.splitByCamelCase(\"fooBar\")     = [\"foo\", \"Bar\"]\n+     * StringUtils.splitByCamelCase(\"foo200Bar\")  = [\"foo\", \"200\", \"Bar\"]\n+     * StringUtils.splitByCamelCase(\"ASFRules\")   = [\"ASF\", \"Rules\"]\n+     * </pre>\n+     * @param str the String to split, may be <code>null</code>\n+     * @param camelCase whether to use so-called \"camel-case\" for letter types\n+     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @since 2.4\n+     */\n+    public static String[] splitByCharacterType(String str, boolean camelCase) {\n+        if (str == null) {\n+            return null;\n+        }\n+        if (str.length() == 0) {\n+            return ArrayUtils.EMPTY_STRING_ARRAY;\n+        }\n+        char[] c = str.toCharArray();\n+        List list = new ArrayList();\n+        int tokenStart = 0;\n+        int currentType = Character.getType(c[tokenStart]);\n+        for (int pos = tokenStart + 1; pos < c.length; pos++) {\n+            int type = Character.getType(c[pos]);\n+            if (type == currentType) {\n+                continue;\n+            }\n+            if (camelCase && type == Character.LOWERCASE_LETTER\n+                    && currentType == Character.UPPERCASE_LETTER) {\n+                int newTokenStart = pos - 1;\n+                if (newTokenStart != tokenStart) {\n+                    list.add(new String(c, tokenStart, newTokenStart - tokenStart));\n+                    tokenStart = newTokenStart;\n+                }\n+            } else {\n+                list.add(new String(c, tokenStart, pos - tokenStart));\n+                tokenStart = pos;\n+            }\n+            currentType = type;\n+        }\n+        list.add(new String(c, tokenStart, c.length - tokenStart));\n+        return (String[]) list.toArray(new String[list.size()]);\n+    }\n+\n     // Joining\n     //-----------------------------------------------------------------------\n     /**\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n         assertEquals(msg, \"a\", res[0]);\n         assertEquals(msg, str.substring(2), res[1]);\n     }\n-    \n+\n+    public void testSplitByCharacterType() {\n+        assertNull(StringUtils.splitByCharacterType(null));\n+        assertEquals(0, StringUtils.splitByCharacterType(\"\").length);\n+        assertNull(StringUtils.splitByCharacterType(null, true));\n+        assertEquals(0, StringUtils.splitByCharacterType(\"\", true).length);\n+\n+        final boolean camelCase = true;\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n+                \"fg\" }, StringUtils.splitByCharacterType(\"ab de fg\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n+                \"fg\" }, StringUtils.splitByCharacterType(\"ab de fg\", camelCase)));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n+                \"fg\" }, StringUtils.splitByCharacterType(\"ab   de fg\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n+                \"fg\" }, StringUtils.splitByCharacterType(\"ab   de fg\", camelCase)));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n+                \"ef\" }, StringUtils.splitByCharacterType(\"ab:cd:ef\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n+                \"ef\" }, StringUtils.splitByCharacterType(\"ab:cd:ef\", camelCase)));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"B\", \"ar\" },\n+                StringUtils.splitByCharacterType(\"fooBar\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"Bar\" },\n+                StringUtils.splitByCharacterType(\"fooBar\", camelCase)));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"B\", \"ar\" },\n+                StringUtils.splitByCharacterType(\"foo200Bar\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"Bar\" },\n+                StringUtils.splitByCharacterType(\"foo200Bar\", camelCase)));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ASFR\", \"ules\" },\n+                StringUtils.splitByCharacterType(\"ASFRules\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ASF\", \"Rules\" },\n+                StringUtils.splitByCharacterType(\"ASFRules\", camelCase)));\n+\n+    }\n+\n     public void testDeprecatedDeleteSpace_String() {\n         assertEquals(null, StringUtils.deleteSpaces(null));\n         assertEquals(\"\", StringUtils.deleteSpaces(\"\"));", "timestamp": 1200082382, "metainfo": ""}