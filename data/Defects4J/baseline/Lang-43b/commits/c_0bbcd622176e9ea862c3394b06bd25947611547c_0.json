{"sha": "0bbcd622176e9ea862c3394b06bd25947611547c", "log": "corrected style issues (mostly empty blocks and missing javadocs)  ", "commit": "\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n          * <p>Restrictive constructor.</p>\n          */\n         private Entry() {\n+          ; // empty constructor\n         }\n     }\n \n--- a/src/java/org/apache/commons/lang/enum/EnumUtils.java\n+++ b/src/java/org/apache/commons/lang/enum/EnumUtils.java\n      * @since 2.0\n      */\n     public EnumUtils() {\n+      ; // empty constructor\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/enums/Enum.java\n+++ b/src/java/org/apache/commons/lang/enums/Enum.java\n          * <p>Restrictive constructor.</p>\n          */\n         private Entry() {\n+          ; // empty constructor\n         }\n     }\n \n--- a/src/java/org/apache/commons/lang/enums/EnumUtils.java\n+++ b/src/java/org/apache/commons/lang/enums/EnumUtils.java\n      * @since 2.0\n      */\n     public EnumUtils() {\n+      ; // empty constructor\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n      * to be created, although that is not normally necessary.</p>\n      */\n     public ExceptionUtils() {\n+      ; // empty constructor\n     }\n \n     //-----------------------------------------------------------------------\n         try {\n             method = throwable.getClass().getMethod(methodName, null);\n         } catch (NoSuchMethodException ignored) {\n+          ; // exception ignored\n         } catch (SecurityException ignored) {\n+          ; // exception ignored\n         }\n \n         if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {\n             try {\n                 return (Throwable) method.invoke(throwable, ArrayUtils.EMPTY_OBJECT_ARRAY);\n             } catch (IllegalAccessException ignored) {\n+              ; // exception ignored\n             } catch (IllegalArgumentException ignored) {\n+              ; // exception ignored\n             } catch (InvocationTargetException ignored) {\n+              ; // exception ignored\n             }\n         }\n         return null;\n         try {\n             field = throwable.getClass().getField(fieldName);\n         } catch (NoSuchFieldException ignored) {\n+          ; // exception ignored\n         } catch (SecurityException ignored) {\n+          ; // exception ignored\n         }\n \n         if (field != null && Throwable.class.isAssignableFrom(field.getType())) {\n             try {\n                 return (Throwable) field.get(throwable);\n             } catch (IllegalAccessException ignored) {\n+              ; // exception ignored\n             } catch (IllegalArgumentException ignored) {\n+              ; // exception ignored\n             }\n         }\n         return null;\n                     return true;\n                 }\n             } catch (NoSuchMethodException ignored) {\n+              ; // exception ignored\n             } catch (SecurityException ignored) {\n+              ; // exception ignored\n             }\n         }\n \n                 return true;\n             }\n         } catch (NoSuchFieldException ignored) {\n+          ; // exception ignored\n         } catch (SecurityException ignored) {\n+          ; // exception ignored\n         }\n \n         return false;\n         return indexOf(throwable, type, fromIndex, true);\n     }\n \n+    /**\n+     * <p>Worker method for the <code>indexOfType</code> methods.</p>\n+     * \n+     * @param throwable  the throwable to inspect, may be null\n+     * @param type  the type to search for, subclasses match, null returns -1\n+     * @param fromIndex  the (zero based) index of the starting position,\n+     *  negative treated as zero, larger than chain size returns -1\n+     * @param subclass if <code>true</code>, compares with {@link Class.isAssignableFrom(Class)}, otherwise compares\n+     * using references\n+     * @return index of the <code>type</code> within throwables nested withing the specified <code>throwable</code>\n+     */\n     private static int indexOf(Throwable throwable, Class type, int fromIndex, boolean subclass) {\n         if (throwable == null || type == null) {\n             return -1;\n--- a/src/java/org/apache/commons/lang/exception/NestableError.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableError.java\n         this.cause = cause;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Throwable getCause() {\n         return cause;\n     }\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public String getMessage(int index) {\n         if (index == 0) {\n             return super.getMessage();\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public String[] getMessages() {\n         return delegate.getMessages();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Throwable getThrowable(int index) {\n         return delegate.getThrowable(index);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int getThrowableCount() {\n         return delegate.getThrowableCount();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Throwable[] getThrowables() {\n         return delegate.getThrowables();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int indexOfThrowable(Class type) {\n         return delegate.indexOfThrowable(type, 0);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int indexOfThrowable(Class type, int fromIndex) {\n         return delegate.indexOfThrowable(type, fromIndex);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public void printStackTrace() {\n         delegate.printStackTrace();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public void printStackTrace(PrintStream out) {\n         delegate.printStackTrace(out);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public void printStackTrace(PrintWriter out) {\n         delegate.printStackTrace(out);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public final void printPartialStackTrace(PrintWriter out) {\n         super.printStackTrace(out);\n     }\n--- a/src/java/org/apache/commons/lang/exception/NestableException.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableException.java\n         this.cause = cause;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Throwable getCause() {\n         return cause;\n     }\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public String getMessage(int index) {\n         if (index == 0) {\n             return super.getMessage();\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public String[] getMessages() {\n         return delegate.getMessages();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Throwable getThrowable(int index) {\n         return delegate.getThrowable(index);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int getThrowableCount() {\n         return delegate.getThrowableCount();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Throwable[] getThrowables() {\n         return delegate.getThrowables();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int indexOfThrowable(Class type) {\n         return delegate.indexOfThrowable(type, 0);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int indexOfThrowable(Class type, int fromIndex) {\n         return delegate.indexOfThrowable(type, fromIndex);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public void printStackTrace() {\n         delegate.printStackTrace();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public void printStackTrace(PrintStream out) {\n         delegate.printStackTrace(out);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public void printStackTrace(PrintWriter out) {\n         delegate.printStackTrace(out);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public final void printPartialStackTrace(PrintWriter out) {\n         super.printStackTrace(out);\n     }\n--- a/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java\n         this.cause = cause;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Throwable getCause() {\n         return cause;\n     }\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public String getMessage(int index) {\n         if (index == 0) {\n             return super.getMessage();\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public String[] getMessages() {\n         return delegate.getMessages();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Throwable getThrowable(int index) {\n         return delegate.getThrowable(index);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int getThrowableCount() {\n         return delegate.getThrowableCount();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public Throwable[] getThrowables() {\n         return delegate.getThrowables();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int indexOfThrowable(Class type) {\n         return delegate.indexOfThrowable(type, 0);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public int indexOfThrowable(Class type, int fromIndex) {\n         return delegate.indexOfThrowable(type, fromIndex);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public void printStackTrace() {\n         delegate.printStackTrace();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public void printStackTrace(PrintStream out) {\n         delegate.printStackTrace(out);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public void printStackTrace(PrintWriter out) {\n         delegate.printStackTrace(out);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n     public final void printPartialStackTrace(PrintWriter out) {\n         super.printStackTrace(out);\n     }\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n      * to operate.</p>\n      */\n     public NumberUtils() {\n+      ; // empty constructor\n     }\n \n     //-----------------------------------------------------------------------\n                         }\n \n                     } catch (NumberFormatException nfe) {\n+                      ; // empty catch\n                     }\n                     //Fall through\n                 case 'd' :\n                             return d;\n                         }\n                     } catch (NumberFormatException nfe) {\n+                      ; // empty constructor\n                     }\n                     try {\n                         return createBigDecimal(numeric);\n                     } catch (NumberFormatException e) {\n+                      ; // empty constructor\n                     }\n                     //Fall through\n                 default :\n                 try {\n                     return createInteger(str);\n                 } catch (NumberFormatException nfe) {\n+                  ; // empty contructor\n                 }\n                 try {\n                     return createLong(str);\n                 } catch (NumberFormatException nfe) {\n+                  ; // empty constructor\n                 }\n                 return createBigInteger(str);\n \n                         return f;\n                     }\n                 } catch (NumberFormatException nfe) {\n+                  ; // empty constructor\n                 }\n                 try {\n                     Double d = createDouble(str);\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) {\n+                  ; // empty constructor\n                 }\n \n                 return createBigDecimal(str);", "timestamp": 1119807954, "metainfo": ""}