{"sha": "2736e62d139a82e57dc4bf054c83befe0cd95723", "log": "increase SerializationUtils test coverage as reported by clover  ", "commit": "\n--- a/src/test/org/apache/commons/lang/SerializationUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/SerializationUtilsTest.java\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n import java.io.InputStream;\n+import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.HashMap;\n  * @version $Id$\n  */\n public class SerializationUtilsTest extends TestCase {\n+\n+  static final String CLASS_NOT_FOUND_MESSAGE = \"ClassNotFoundSerializationTest.readObject fake exception\";\n+    protected static final String SERIALIZE_IO_EXCEPTION_MESSAGE = \"Anonymous OutputStream I/O exception\";\n+  \n     private String iString;\n     private Integer iInteger;\n     private HashMap iMap;\n         }\n         fail();\n     }\n+    \n+    public void testSerializeIOException() throws Exception {\n+        // forces an IOException when the ObjectOutputStream is created, to test not closing the stream\n+        // in the finally block\n+        OutputStream streamTest = new OutputStream() {\n+            public void write(int arg0) throws IOException {\n+                throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);\n+            }\n+        };\n+        try {\n+            SerializationUtils.serialize(iMap, streamTest);\n+        }\n+        catch(SerializationException e) {\n+            assertEquals(\"java.io.IOException: \" + SERIALIZE_IO_EXCEPTION_MESSAGE, e.getMessage());\n+        }\n+    }\n \n     //-----------------------------------------------------------------------\n \n         fail();\n     }\n \n+    public void testDeserializeStreamClassNotFound() throws Exception {\n+        ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n+        oos.writeObject(new ClassNotFoundSerializationTest());\n+        oos.flush();\n+        oos.close();\n+\n+        ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray());\n+        try {\n+            Object test = SerializationUtils.deserialize(inTest);\n+        } catch(SerializationException se) {\n+            assertEquals(\"java.lang.ClassNotFoundException: \" + CLASS_NOT_FOUND_MESSAGE, se.getMessage());\n+        }\n+    }\n+    \n     //-----------------------------------------------------------------------\n \n     public void testSerializeBytes() throws Exception {\n     }\n \n }\n+\n+class ClassNotFoundSerializationTest implements Serializable\n+{\n+\n+    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException    {\n+        throw new ClassNotFoundException(SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE);\n+    }\n+}", "timestamp": 1124672067, "metainfo": ""}