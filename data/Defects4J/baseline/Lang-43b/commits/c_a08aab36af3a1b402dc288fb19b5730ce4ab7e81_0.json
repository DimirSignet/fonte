{"sha": "a08aab36af3a1b402dc288fb19b5730ce4ab7e81", "log": "Additional testing, especially in the area of whitespace   ", "commit": "\n--- a/src/test/org/apache/commons/lang/StringUtilsIsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsIsTest.java\n  * Unit tests {@link org.apache.commons.lang.StringUtils} - Substring methods\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: StringUtilsIsTest.java,v 1.5 2003/03/23 21:51:51 scolebourne Exp $\n+ * @version $Id: StringUtilsIsTest.java,v 1.6 2003/07/19 18:10:30 scolebourne Exp $\n  */\n public class StringUtilsIsTest extends TestCase {\n \n         assertEquals(false, StringUtils.isWhitespace(\"a  \"));\n         assertEquals(false, StringUtils.isWhitespace(\"  a\"));\n         assertEquals(false, StringUtils.isWhitespace(\"aba\"));\n+        assertEquals(true, StringUtils.isWhitespace(StringUtilsTest.WHITESPACE));\n+        assertEquals(false, StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));\n     }\n \n     public void testIsAlphaspace() {\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n import java.util.Arrays;\n import java.util.Iterator;\n \n+import junit.framework.AssertionFailedError;\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n- * @version $Id: StringUtilsTest.java,v 1.28 2003/07/19 00:22:50 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.29 2003/07/19 18:10:30 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n+    \n+    static final String WHITESPACE;\n+    static final String NON_WHITESPACE;\n+    static final String TRIMMABLE;\n+    static final String NON_TRIMMABLE;\n+    static {\n+        String ws = \"\";\n+        String nws = \"\";\n+        String tr = \"\";\n+        String ntr = \"\";\n+        for (int i = 0; i < Character.MAX_VALUE; i++) {\n+            if (Character.isWhitespace((char) i)) {\n+                ws += String.valueOf((char) i);\n+                if (i > 32) {\n+                    ntr += String.valueOf((char) i);\n+                }\n+            } else if (i < 40) {\n+                nws += String.valueOf((char) i);\n+            }\n+        }\n+        for (int i = 0; i <= 32; i++) {\n+            tr += String.valueOf((char) i);\n+        }\n+        WHITESPACE = ws;\n+        NON_WHITESPACE = nws;\n+        TRIMMABLE = tr;\n+        NON_TRIMMABLE = ntr;\n+    }\n \n     private static final String[] ARRAY_LIST = { \"foo\", \"bar\", \"baz\" };\n     private static final String[] EMPTY_ARRAY_LIST = {};\n                                       null));\n     }\n \n+    public void testSplit_String() {\n+        assertEquals(null, StringUtils.split(null));\n+        assertEquals(0, StringUtils.split(\"\").length);\n+\n+        String str = \"a b  .c\";\n+        String[] res = StringUtils.split(str);\n+        assertEquals(3, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\".c\", res[2]);\n+            \n+        str = \" a \";\n+        res = StringUtils.split(str);\n+        assertEquals(1, res.length);\n+        assertEquals(\"a\", res[0]);\n+        \n+        str = \"a\" + WHITESPACE + \"b\" + NON_WHITESPACE + \"c\";\n+        res = StringUtils.split(str);\n+        assertEquals(2, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[1]);\n+    }\n+    \n+    public void testSplit_StringChar() {\n+        assertEquals(null, StringUtils.split(null, '.'));\n+        assertEquals(0, StringUtils.split(\"\", '.').length);\n+\n+        String str = \"a.b.. c\";\n+        String[] res = StringUtils.split(str, '.');\n+        assertEquals(3, res.length);\n+        assertEquals(\"a\", res[0]);\n+        assertEquals(\"b\", res[1]);\n+        assertEquals(\" c\", res[2]);\n+            \n+        str = \".a.\";\n+        res = StringUtils.split(str, '.');\n+        assertEquals(1, res.length);\n+        assertEquals(\"a\", res[0]);\n+    }\n+    \n     public void testSplit() {\n-        assertEquals(null, StringUtils.split(null));\n-        assertEquals(null, StringUtils.split(null, '.'));\n         assertEquals(null, StringUtils.split(null, \".\"));\n         assertEquals(null, StringUtils.split(null, \".\", 3));\n         \n-        String[] res = StringUtils.split(\"a..b.c\", '.');\n-        assertEquals(4, res.length);\n-        assertEquals(\"a\", res[0]);\n-        assertEquals(\"\", res[1]);\n-        assertEquals(\"b\", res[2]);\n-        assertEquals(\"c\", res[3]);\n-\n-        String[] result = StringUtils.split(TEXT_LIST, SEPARATOR, 2);\n-        String[] expected = { \"foo\", \"bar,baz\" };\n-        assertEquals(\"split(Object[], String, int) yielded unexpected length\",\n-                     expected.length, result.length);\n-        for (int i = 0; i < result.length; i++)\n-        {\n-            assertEquals(\"split(Object[], String, int) failed\", expected[i],\n-                         result[i]);\n-        }\n-\n-        result = StringUtils.split(TEXT_LIST, SEPARATOR, 0);\n-        expected = ARRAY_LIST;\n-        assertEquals(\"split(Object[], String, int) yielded unexpected length\",\n-                     expected.length, result.length);\n-        for (int i = 0; i < result.length; i++)\n-        {\n-            assertEquals(\"split(Object[], String, int) failed\", expected[i],\n-                         result[i]);\n-        }\n-\n-        result = StringUtils.split(TEXT_LIST, SEPARATOR, -1);\n-        expected = ARRAY_LIST;\n-        assertEquals(\"split(Object[], String, int) yielded unexpected length\",\n-                     expected.length, result.length);\n-        for (int i = 0; i < result.length; i++)\n-        {\n-            assertEquals(\"split(Object[], String, int) failed\", expected[i],\n-                         result[i]);\n-        }\n-\n-        result = StringUtils.split(\"one two three four five six\", null, 3);\n-        assertEquals(\"split(Object[], null, int)[0] failed\", \"one\", result[0]);\n-        assertEquals(\"split(Object[], null, int)[1] failed\", \"two\", result[1]);\n-        assertEquals(\"split(Object[], null, int)[2] failed\", \"three four five six\", result[2]);\n+        assertEquals(0, StringUtils.split(\"\", \".\").length);\n+        assertEquals(0, StringUtils.split(\"\", \".\", 3).length);\n+        \n+        innerTestSplit('.', \".\", ' ');\n+        innerTestSplit('.', \".\", ',');\n+        innerTestSplit('.', \".,\", 'x');\n+        for (int i = 0; i < WHITESPACE.length(); i++) {\n+            for (int j = 0; j < NON_WHITESPACE.length(); j++) {\n+                innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j));\n+                innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j));\n+            }\n+        }\n+    }\n+    \n+    private void innerTestSplit(char separator, String sepStr, char noMatch) {\n+        try {\n+            final String str = \"a\" + separator + \"b\" + separator + separator + noMatch + \"c\";\n+            String[] res;\n+            // (str, sepStr)\n+            res = StringUtils.split(str, sepStr);\n+            assertEquals(3, res.length);\n+            assertEquals(\"a\", res[0]);\n+            assertEquals(\"b\", res[1]);\n+            assertEquals(noMatch + \"c\", res[2]);\n+            \n+            final String str2 = separator + \"a\" + separator;\n+            res = StringUtils.split(str2, sepStr);\n+            assertEquals(1, res.length);\n+            assertEquals(\"a\", res[0]);\n+\n+            res = StringUtils.split(str, sepStr, -1);\n+            assertEquals(3, res.length);\n+            assertEquals(\"a\", res[0]);\n+            assertEquals(\"b\", res[1]);\n+            assertEquals(noMatch + \"c\", res[2]);\n+            \n+            res = StringUtils.split(str, sepStr, 0);\n+            assertEquals(3, res.length);\n+            assertEquals(\"a\", res[0]);\n+            assertEquals(\"b\", res[1]);\n+            assertEquals(noMatch + \"c\", res[2]);\n+            \n+            res = StringUtils.split(str, sepStr, 1);\n+            assertEquals(1, res.length);\n+            assertEquals(str, res[0]);\n+            \n+            res = StringUtils.split(str, sepStr, 2);\n+            assertEquals(2, res.length);\n+            assertEquals(\"a\", res[0]);\n+            assertEquals(str.substring(2), res[1]);\n+            \n+        } catch (AssertionFailedError ex) {\n+            System.out.println(\"Failed on separator hex(\" + Integer.toHexString(separator) +\n+                 \"), noMatch hex(\" + Integer.toHexString(noMatch) + \"), sepStr(\" + sepStr + \")\");\n+            throw ex;\n+        }\n     }\n \n     public void testReplaceFunctions() {\n--- a/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: StringUtilsTrimEmptyTest.java,v 1.10 2003/07/18 02:06:23 scolebourne Exp $\n+ * @version $Id: StringUtilsTrimEmptyTest.java,v 1.11 2003/07/19 18:10:30 scolebourne Exp $\n  */\n public class StringUtilsTrimEmptyTest extends TestCase {\n     private static final String FOO = \"foo\";\n         assertEquals(FOO, StringUtils.trim(\" \" + FOO));\n         assertEquals(FOO, StringUtils.trim(FOO + \"\"));\n         assertEquals(\"\", StringUtils.trim(\" \\t\\r\\n\\b \"));\n+        assertEquals(\"\", StringUtils.trim(StringUtilsTest.TRIMMABLE));\n+        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE));\n         assertEquals(\"\", StringUtils.trim(\"\"));\n         assertEquals(null, StringUtils.trim(null));\n     }\n         assertEquals(FOO, StringUtils.trimToNull(\" \" + FOO));\n         assertEquals(FOO, StringUtils.trimToNull(FOO + \"\"));\n         assertEquals(null, StringUtils.trimToNull(\" \\t\\r\\n\\b \"));\n+        assertEquals(null, StringUtils.trimToNull(StringUtilsTest.TRIMMABLE));\n+        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToNull(StringUtilsTest.NON_TRIMMABLE));\n         assertEquals(null, StringUtils.trimToNull(\"\"));\n         assertEquals(null, StringUtils.trimToNull(null));\n     }\n         assertEquals(FOO, StringUtils.trimToEmpty(\" \" + FOO));\n         assertEquals(FOO, StringUtils.trimToEmpty(FOO + \"\"));\n         assertEquals(\"\", StringUtils.trimToEmpty(\" \\t\\r\\n\\b \"));\n+        assertEquals(\"\", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE));\n+        assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE));\n         assertEquals(\"\", StringUtils.trimToEmpty(\"\"));\n         assertEquals(\"\", StringUtils.trimToEmpty(null));\n     }\n     }\n \n     public void testDeleteSpace() {\n-        assertEquals(\"deleteWhitespace(String) failed\",\n-                     \"\", StringUtils.deleteWhitespace(\"\"));\n-        assertEquals(\"deleteWhitespace(String) failed\",\n-                     \"\", StringUtils.deleteWhitespace(\"  \\u000C  \\t\\t\\u001F\\n\\n \\u000B  \"));\n+        assertEquals(null, StringUtils.deleteSpaces(null));\n+        assertEquals(\"\", StringUtils.deleteSpaces(\"\"));\n+        assertEquals(\"\", StringUtils.deleteSpaces(\"    \\t\\t\\n\\n   \"));\n+        assertEquals(\"test\", StringUtils.deleteSpaces(\"t  \\t\\ne\\rs\\n\\n   \\tt\"));\n+    }\n+    \n+    public void testDeleteWhitespace() {\n+        assertEquals(null, StringUtils.deleteWhitespace(null));\n+        assertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\n+        assertEquals(\"\", StringUtils.deleteWhitespace(\"  \\u000C  \\t\\t\\u001F\\n\\n \\u000B  \"));\n+        assertEquals(\"\", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));\n+        assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));\n         // Note: u-2007 and u-000A both cause problems in the source code\n         // it should ignore 2007 but delete 000A\n-        assertEquals(\"deleteWhitespace(String) failed\",\n-                     \"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"  \\u00A0  \\t\\t\\n\\n \\u202F  \"));\n-        assertEquals(\"deleteWhitespace(String) failed\",\n-                     \"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"\\u00A0\\u202F\"));\n-        assertEquals(\"deleteWhitespace(String) failed\",\n-                     \"test\", StringUtils.deleteWhitespace(\"\\u000Bt  \\t\\n\\u0009e\\rs\\n\\n   \\tt\"));\n-\n-        assertEquals(\"deleteSpaces(String) failed\",\n-                     \"\", StringUtils.deleteSpaces(\"\"));\n-        assertEquals(\"deleteSpaces(String) failed\",\n-                     \"\", StringUtils.deleteSpaces(\"    \\t\\t\\n\\n   \"));\n-        assertEquals(\"deleteSpaces(String) failed\",\n-                     \"test\", StringUtils.deleteSpaces(\"t  \\t\\ne\\rs\\n\\n   \\tt\"));\n-    }\n-\n-    public void testStrip() {\n-        // it's important that foo2Space is fooLeftSpace and fooRightSpace \n-        // merged together. So same number of spaces to left as fLS and same \n-        // to right as fLS. Same applies for foo2Dots.\n-        String foo2Space = \"    \"+FOO+\"    \";\n-        String foo2Dots = \"......\"+FOO+\".........\";\n-        String fooLeftSpace = \"    \"+FOO;\n-        String fooLeftDots = \"......\"+FOO;\n-        String fooRightSpace = FOO+\"    \";\n-        String fooRightDots = FOO+\".........\";\n-\n+        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"  \\u00A0  \\t\\t\\n\\n \\u202F  \"));\n+        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"\\u00A0\\u202F\"));\n+        assertEquals(\"test\", StringUtils.deleteWhitespace(\"\\u000Bt  \\t\\n\\u0009e\\rs\\n\\n   \\tt\"));\n+    }\n+\n+    public void testStrip_String() {\n         assertEquals(null, StringUtils.strip(null));\n         assertEquals(\"\", StringUtils.strip(\"\"));\n         assertEquals(\"\", StringUtils.strip(\"        \"));\n-        assertEquals(FOO, StringUtils.strip(foo2Space));\n-        \n-        assertEquals(FOO, StringUtils.strip(foo2Space, null));\n-        assertEquals(FOO, StringUtils.strip(foo2Dots, \".\"));\n-        assertEquals(FOO, StringUtils.strip(fooRightSpace));\n-        assertEquals(FOO, StringUtils.strip(fooRightDots, \".\"));\n-        assertEquals(FOO, StringUtils.strip(fooLeftSpace));\n-        assertEquals(FOO, StringUtils.strip(fooLeftDots, \".\"));\n-\n+        assertEquals(\"abc\", StringUtils.strip(\"  abc  \"));\n+        assertEquals(StringUtilsTest.NON_WHITESPACE, \n+            StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE));\n+    }\n+    \n+    public void testStrip_StringString() {\n+        // null strip\n+        assertEquals(null, StringUtils.strip(null, null));\n+        assertEquals(\"\", StringUtils.strip(\"\", null));\n+        assertEquals(\"\", StringUtils.strip(\"        \", null));\n+        assertEquals(\"abc\", StringUtils.strip(\"  abc  \", null));\n+        assertEquals(StringUtilsTest.NON_WHITESPACE, \n+            StringUtils.strip(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\n+\n+        // \"\" strip\n+        assertEquals(null, StringUtils.strip(null, \"\"));\n+        assertEquals(\"\", StringUtils.strip(\"\", \"\"));\n+        assertEquals(\"        \", StringUtils.strip(\"        \", \"\"));\n+        assertEquals(\"  abc  \", StringUtils.strip(\"  abc  \", \"\"));\n+        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, \"\"));\n+        \n+        // \" \" strip\n+        assertEquals(null, StringUtils.strip(null, \" \"));\n+        assertEquals(\"\", StringUtils.strip(\"\", \" \"));\n+        assertEquals(\"\", StringUtils.strip(\"        \", \" \"));\n+        assertEquals(\"abc\", StringUtils.strip(\"  abc  \", \" \"));\n+        \n+        // \"ab\" strip\n+        assertEquals(null, StringUtils.strip(null, \"ab\"));\n+        assertEquals(\"\", StringUtils.strip(\"\", \"ab\"));\n+        assertEquals(\"        \", StringUtils.strip(\"        \", \"ab\"));\n+        assertEquals(\"  abc  \", StringUtils.strip(\"  abc  \", \"ab\"));\n+        assertEquals(\"c\", StringUtils.strip(\"abcabab\", \"ab\"));\n+        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.strip(StringUtilsTest.WHITESPACE, \"\"));\n+    }\n+    \n+    public void testStripStart_StringString() {\n+        // null stripStart\n         assertEquals(null, StringUtils.stripStart(null, null));\n+        assertEquals(\"\", StringUtils.stripStart(\"\", null));\n+        assertEquals(\"\", StringUtils.stripStart(\"        \", null));\n+        assertEquals(\"abc  \", StringUtils.stripStart(\"  abc  \", null));\n+        assertEquals(StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, \n+            StringUtils.stripStart(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\n+\n+        // \"\" stripStart\n+        assertEquals(null, StringUtils.stripStart(null, \"\"));\n+        assertEquals(\"\", StringUtils.stripStart(\"\", \"\"));\n+        assertEquals(\"        \", StringUtils.stripStart(\"        \", \"\"));\n+        assertEquals(\"  abc  \", StringUtils.stripStart(\"  abc  \", \"\"));\n+        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, \"\"));\n+        \n+        // \" \" stripStart\n+        assertEquals(null, StringUtils.stripStart(null, \" \"));\n         assertEquals(\"\", StringUtils.stripStart(\"\", \" \"));\n-        assertEquals(fooRightSpace, StringUtils.stripStart(foo2Space, null));\n-        assertEquals(fooRightSpace, StringUtils.stripStart(foo2Space, \" \"));\n-        assertEquals(fooRightDots, StringUtils.stripStart(foo2Dots, \".\"));\n-        assertEquals(fooRightSpace, StringUtils.stripStart(fooRightSpace, \" \"));\n-        assertEquals(fooRightDots, StringUtils.stripStart(fooRightDots, \".\"));\n-        assertEquals(FOO, StringUtils.stripStart(fooLeftSpace, \" \"));\n-        assertEquals(FOO, StringUtils.stripStart(fooLeftDots, \".\"));\n-\n+        assertEquals(\"\", StringUtils.stripStart(\"        \", \" \"));\n+        assertEquals(\"abc  \", StringUtils.stripStart(\"  abc  \", \" \"));\n+        \n+        // \"ab\" stripStart\n+        assertEquals(null, StringUtils.stripStart(null, \"ab\"));\n+        assertEquals(\"\", StringUtils.stripStart(\"\", \"ab\"));\n+        assertEquals(\"        \", StringUtils.stripStart(\"        \", \"ab\"));\n+        assertEquals(\"  abc  \", StringUtils.stripStart(\"  abc  \", \"ab\"));\n+        assertEquals(\"cabab\", StringUtils.stripStart(\"abcabab\", \"ab\"));\n+        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripStart(StringUtilsTest.WHITESPACE, \"\"));\n+    }\n+    \n+    public void testStripEnd_StringString() {\n+        // null stripEnd\n         assertEquals(null, StringUtils.stripEnd(null, null));\n+        assertEquals(\"\", StringUtils.stripEnd(\"\", null));\n+        assertEquals(\"\", StringUtils.stripEnd(\"        \", null));\n+        assertEquals(\"  abc\", StringUtils.stripEnd(\"  abc  \", null));\n+        assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE, \n+            StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null));\n+\n+        // \"\" stripEnd\n+        assertEquals(null, StringUtils.stripEnd(null, \"\"));\n+        assertEquals(\"\", StringUtils.stripEnd(\"\", \"\"));\n+        assertEquals(\"        \", StringUtils.stripEnd(\"        \", \"\"));\n+        assertEquals(\"  abc  \", StringUtils.stripEnd(\"  abc  \", \"\"));\n+        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, \"\"));\n+        \n+        // \" \" stripEnd\n+        assertEquals(null, StringUtils.stripEnd(null, \" \"));\n         assertEquals(\"\", StringUtils.stripEnd(\"\", \" \"));\n-        assertEquals(fooLeftSpace, StringUtils.stripEnd(foo2Space, null));\n-        assertEquals(fooLeftSpace, StringUtils.stripEnd(foo2Space, \" \"));\n-        assertEquals(fooLeftDots, StringUtils.stripEnd(foo2Dots, \".\"));\n-        assertEquals(FOO, StringUtils.stripEnd(fooRightSpace, \" \"));\n-        assertEquals(FOO, StringUtils.stripEnd(fooRightDots, \".\"));\n-        assertEquals(fooLeftSpace, StringUtils.stripEnd(fooLeftSpace, \" \"));\n-        assertEquals(fooLeftDots, StringUtils.stripEnd(fooLeftDots, \".\"));\n-\n-        assertEquals(FOO, StringUtils.strip(\". . . . .\"+FOO+\". . \", \" .\"));\n-        assertEquals(\"-.\"+FOO, StringUtils.strip(\". . . . -.\"+FOO+\". . \", \" .\"));\n-        assertEquals(FOO, StringUtils.strip(\"..  ..\"+FOO+\".. \", \" .\"));\n-        assertEquals(FOO, StringUtils.strip(\"..  ..\"+FOO+\".. \", \"+= .\"));\n-\n+        assertEquals(\"\", StringUtils.stripEnd(\"        \", \" \"));\n+        assertEquals(\"  abc\", StringUtils.stripEnd(\"  abc  \", \" \"));\n+        \n+        // \"ab\" stripEnd\n+        assertEquals(null, StringUtils.stripEnd(null, \"ab\"));\n+        assertEquals(\"\", StringUtils.stripEnd(\"\", \"ab\"));\n+        assertEquals(\"        \", StringUtils.stripEnd(\"        \", \"ab\"));\n+        assertEquals(\"  abc  \", StringUtils.stripEnd(\"  abc  \", \"ab\"));\n+        assertEquals(\"abc\", StringUtils.stripEnd(\"abcabab\", \"ab\"));\n+        assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, \"\"));\n+    }\n+\n+    public void testStripAll() {\n         // test stripAll method, merely an array version of the above strip\n         String[] empty = new String[0];\n-        String[] fooSpace = new String[] { foo2Space, fooLeftSpace, fooRightSpace };\n-        String[] fooDots = new String[] { foo2Dots, fooLeftDots, fooRightDots };\n+        String[] fooSpace = new String[] { \"  \"+FOO+\"  \", \"  \"+FOO, FOO+\"  \" };\n+        String[] fooDots = new String[] { \"..\"+FOO+\"..\", \"..\"+FOO, FOO+\"..\" };\n         String[] foo = new String[] { FOO, FOO, FOO };\n \n         assertEquals(null, StringUtils.stripAll(null));", "timestamp": 1058638230, "metainfo": ""}