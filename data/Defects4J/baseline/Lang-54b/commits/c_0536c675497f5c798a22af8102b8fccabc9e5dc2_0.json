{"sha": "0536c675497f5c798a22af8102b8fccabc9e5dc2", "log": "Rename  includeXxx()  to  containsXxx() for consistency with rest of [lang] and Java   ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/DoubleRange.java\n+++ b/src/java/org/apache/commons/lang/math/DoubleRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: DoubleRange.java,v 1.3 2003/07/14 22:25:04 bayard Exp $\n+ * @version $Id: DoubleRange.java,v 1.4 2003/08/04 01:14:02 scolebourne Exp $\n  */\n public final class DoubleRange extends Range implements Serializable {\n     \n      * @param number  the number to test, may be <code>null</code>\n      * @return <code>true</code> if the specified number occurs within this range\n      */\n-    public boolean includesNumber(Number number) {\n+    public boolean containsNumber(Number number) {\n         if (number == null) {\n             return false;\n         }\n-        return includesDouble(number.doubleValue());\n+        return containsDouble(number.doubleValue());\n     }\n \n     /**\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>double</code> comparison\n      */\n-    public boolean includesDouble(double value) {\n+    public boolean containsDouble(double value) {\n         return (value >= min && value <= max);\n     }\n \n      * @return <code>true</code> if the specified range occurs entirely within this range\n      * @throws IllegalArgumentException if the range is not of this type\n      */\n-    public boolean includesRange(Range range) {\n+    public boolean containsRange(Range range) {\n         if (range == null) {\n             return false;\n         }\n-        return includesDouble(range.getMinimumDouble()) &&\n-               includesDouble(range.getMaximumDouble());\n+        return containsDouble(range.getMinimumDouble())\n+            && containsDouble(range.getMaximumDouble());\n     }\n \n     /**\n         if (range == null) {\n             return false;\n         }\n-        return range.includesDouble(min) ||\n-               range.includesDouble(max) || \n-               includesDouble(range.getMinimumDouble());\n+        return range.containsDouble(min)\n+            || range.containsDouble(max)\n+            || containsDouble(range.getMinimumDouble());\n     }\n \n     // Basics\n--- a/src/java/org/apache/commons/lang/math/FloatRange.java\n+++ b/src/java/org/apache/commons/lang/math/FloatRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: FloatRange.java,v 1.3 2003/07/14 22:25:04 bayard Exp $\n+ * @version $Id: FloatRange.java,v 1.4 2003/08/04 01:14:01 scolebourne Exp $\n  */\n public final class FloatRange extends Range implements Serializable {\n     \n      * @param number  the number to test, may be <code>null</code>\n      * @return <code>true</code> if the specified number occurs within this range\n      */\n-    public boolean includesNumber(Number number) {\n+    public boolean containsNumber(Number number) {\n         if (number == null) {\n             return false;\n         }\n-        return includesFloat(number.floatValue());\n+        return containsFloat(number.floatValue());\n     }\n \n     /**\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>float</code> comparison\n      */\n-    public boolean includesFloat(float value) {\n+    public boolean containsFloat(float value) {\n         return (value >= min && value <= max);\n     }\n \n      * @return <code>true</code> if the specified range occurs entirely within this range\n      * @throws IllegalArgumentException if the range is not of this type\n      */\n-    public boolean includesRange(Range range) {\n+    public boolean containsRange(Range range) {\n         if (range == null) {\n             return false;\n         }\n-        return includesFloat(range.getMinimumFloat()) &&\n-               includesFloat(range.getMaximumFloat());\n+        return containsFloat(range.getMinimumFloat()) &&\n+               containsFloat(range.getMaximumFloat());\n     }\n \n     /**\n         if (range == null) {\n             return false;\n         }\n-        return range.includesFloat(min) ||\n-               range.includesFloat(max) || \n-               includesFloat(range.getMinimumFloat());\n+        return range.containsFloat(min) ||\n+               range.containsFloat(max) || \n+               containsFloat(range.getMinimumFloat());\n     }\n \n     // Basics\n--- a/src/java/org/apache/commons/lang/math/IntRange.java\n+++ b/src/java/org/apache/commons/lang/math/IntRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: IntRange.java,v 1.3 2003/07/14 22:25:05 bayard Exp $\n+ * @version $Id: IntRange.java,v 1.4 2003/08/04 01:14:01 scolebourne Exp $\n  */\n public final class IntRange extends Range implements Serializable {\n     \n      * @param number  the number to test, may be <code>null</code>\n      * @return <code>true</code> if the specified number occurs within this range\n      */\n-    public boolean includesNumber(Number number) {\n+    public boolean containsNumber(Number number) {\n         if (number == null) {\n             return false;\n         }\n-        return includesInteger(number.intValue());\n+        return containsInteger(number.intValue());\n     }\n \n     /**\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>int</code> comparison\n      */\n-    public boolean includesInteger(int value) {\n+    public boolean containsInteger(int value) {\n         return (value >= min && value <= max);\n     }\n \n      * @return <code>true</code> if the specified range occurs entirely within this range\n      * @throws IllegalArgumentException if the range is not of this type\n      */\n-    public boolean includesRange(Range range) {\n+    public boolean containsRange(Range range) {\n         if (range == null) {\n             return false;\n         }\n-        return includesInteger(range.getMinimumInteger()) &&\n-               includesInteger(range.getMaximumInteger());\n+        return containsInteger(range.getMinimumInteger()) &&\n+               containsInteger(range.getMaximumInteger());\n     }\n \n     /**\n         if (range == null) {\n             return false;\n         }\n-        return range.includesInteger(min) ||\n-               range.includesInteger(max) || \n-               includesInteger(range.getMinimumInteger());\n+        return range.containsInteger(min) ||\n+               range.containsInteger(max) || \n+               containsInteger(range.getMinimumInteger());\n     }\n \n     // Basics\n--- a/src/java/org/apache/commons/lang/math/LongRange.java\n+++ b/src/java/org/apache/commons/lang/math/LongRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: LongRange.java,v 1.3 2003/07/14 22:25:05 bayard Exp $\n+ * @version $Id: LongRange.java,v 1.4 2003/08/04 01:14:02 scolebourne Exp $\n  */\n public final class LongRange extends Range implements Serializable {\n     \n      * @param number  the number to test, may be <code>null</code>\n      * @return <code>true</code> if the specified number occurs within this range\n      */\n-    public boolean includesNumber(Number number) {\n+    public boolean containsNumber(Number number) {\n         if (number == null) {\n             return false;\n         }\n-        return includesLong(number.longValue());\n+        return containsLong(number.longValue());\n     }\n \n     /**\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>long</code> comparison\n      */\n-    public boolean includesLong(long value) {\n+    public boolean containsLong(long value) {\n         return (value >= min && value <= max);\n     }\n \n      * @return <code>true</code> if the specified range occurs entirely within this range\n      * @throws IllegalArgumentException if the range is not of this type\n      */\n-    public boolean includesRange(Range range) {\n+    public boolean containsRange(Range range) {\n         if (range == null) {\n             return false;\n         }\n-        return includesLong(range.getMinimumLong()) &&\n-               includesLong(range.getMaximumLong());\n+        return containsLong(range.getMinimumLong()) &&\n+               containsLong(range.getMaximumLong());\n     }\n \n     /**\n         if (range == null) {\n             return false;\n         }\n-        return range.includesLong(min) ||\n-               range.includesLong(max) || \n-               includesLong(range.getMinimumLong());\n+        return range.containsLong(min) ||\n+               range.containsLong(max) || \n+               containsLong(range.getMinimumLong());\n     }\n \n     // Basics\n--- a/src/java/org/apache/commons/lang/math/NumberRange.java\n+++ b/src/java/org/apache/commons/lang/math/NumberRange.java\n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n  * @author Stephen Colebourne\n  * @since 2.0 (previously in org.apache.commons.lang)\n- * @version $Id: NumberRange.java,v 1.4 2003/07/14 22:25:05 bayard Exp $\n+ * @version $Id: NumberRange.java,v 1.5 2003/08/04 01:14:01 scolebourne Exp $\n  */\n public final class NumberRange extends Range implements Serializable {\n     \n      * @return <code>true</code> if the specified number occurs within this range\n      * @throws IllegalArgumentException if the number is of a different type to the range\n      */\n-    public boolean includesNumber(Number number) {\n+    public boolean containsNumber(Number number) {\n         if (number == null) {\n             return false;\n         }\n--- a/src/java/org/apache/commons/lang/math/Range.java\n+++ b/src/java/org/apache/commons/lang/math/Range.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: Range.java,v 1.3 2003/06/24 21:14:50 scolebourne Exp $\n+ * @version $Id: Range.java,v 1.4 2003/08/04 01:14:01 scolebourne Exp $\n  */\n public abstract class Range {\n \n      * @return <code>true</code> if the specified number occurs within this range\n      * @throws IllegalArgumentException if the <code>Number</code> cannot be compared\n      */\n-    public abstract boolean includesNumber(Number number);\n+    public abstract boolean containsNumber(Number number);\n \n     /**\n      * <p>Tests whether the specified <code>Number</code> occurs within\n      * \n      * <p><code>null</code> is handled and returns <code>false</code>.</p>\n      * \n-     * <p>This implementation forwards to the {@link #includesLong(long)} method.</p>\n+     * <p>This implementation forwards to the {@link #containsLong(long)} method.</p>\n      *\n      * @param value  the long to test, may be <code>null</code>\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>long</code> comparison\n      */\n-    public boolean includesLong(Number value) {\n+    public boolean containsLong(Number value) {\n         if (value == null) {\n             return false;\n         }\n-        return includesLong(value.longValue());\n+        return containsLong(value.longValue());\n     }\n \n     /**\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>long</code> comparison\n      */\n-    public boolean includesLong(long value) {\n+    public boolean containsLong(long value) {\n         return (value >= getMinimumLong() && value <= getMaximumLong());\n     }\n \n      * \n      * <p><code>null</code> is handled and returns <code>false</code>.</p>\n      * \n-     * <p>This implementation forwards to the {@link #includesInteger(int)} method.</p>\n+     * <p>This implementation forwards to the {@link #containsInteger(int)} method.</p>\n      *\n      * @param value  the integer to test, may be <code>null</code>\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>int</code> comparison\n      */\n-    public boolean includesInteger(Number value) {\n+    public boolean containsInteger(Number value) {\n         if (value == null) {\n             return false;\n         }\n-        return includesInteger(value.intValue());\n+        return containsInteger(value.intValue());\n     }\n \n     /**\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>int</code> comparison\n      */\n-    public boolean includesInteger(int value) {\n+    public boolean containsInteger(int value) {\n         return (value >= getMinimumInteger() && value <= getMaximumInteger());\n     }\n \n      * \n      * <p><code>null</code> is handled and returns <code>false</code>.</p>\n      * \n-     * <p>This implementation forwards to the {@link #includesDouble(double)} method.</p>\n+     * <p>This implementation forwards to the {@link #containsDouble(double)} method.</p>\n      *\n      * @param value  the double to test, may be <code>null</code>\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>double</code> comparison\n      */\n-    public boolean includesDouble(Number value) {\n+    public boolean containsDouble(Number value) {\n         if (value == null) {\n             return false;\n         }\n-        return includesDouble(value.doubleValue());\n+        return containsDouble(value.doubleValue());\n     }\n \n     /**\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>double</code> comparison\n      */\n-    public boolean includesDouble(double value) {\n+    public boolean containsDouble(double value) {\n         int compareMin = NumberUtils.compare(getMinimumDouble(), value);\n         int compareMax = NumberUtils.compare(getMaximumDouble(), value);\n         return (compareMin <= 0 && compareMax >= 0);\n      * \n      * <p><code>null</code> is handled and returns <code>false</code>.</p>\n      * \n-     * <p>This implementation forwards to the {@link #includesFloat(float)} method.</p>\n+     * <p>This implementation forwards to the {@link #containsFloat(float)} method.</p>\n      *\n      * @param value  the float to test, may be <code>null</code>\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>float</code> comparison\n      */\n-    public boolean includesFloat(Number value) {\n+    public boolean containsFloat(Number value) {\n         if (value == null) {\n             return false;\n         }\n-        return includesFloat(value.floatValue());\n+        return containsFloat(value.floatValue());\n     }\n \n     /**\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>float</code> comparison\n      */\n-    public boolean includesFloat(float value) {\n+    public boolean containsFloat(float value) {\n         int compareMin = NumberUtils.compare(getMinimumFloat(), value);\n         int compareMax = NumberUtils.compare(getMaximumFloat(), value);\n         return (compareMin <= 0 && compareMax >= 0);\n      * \n      * <p><code>null</code> is handled and returns <code>false</code>.</p>\n      * \n-     * <p>This implementation uses the {@link #includesNumber(Number)} method.\n+     * <p>This implementation uses the {@link #containsNumber(Number)} method.\n      * Subclasses may be able to optimise this.</p>\n      *\n      * @param range  the range to test, may be <code>null</code>\n      *  this range; otherwise, <code>false</code>\n      * @throws IllegalArgumentException if the <code>Range</code> cannot be compared\n      */\n-    public boolean includesRange(Range range) {\n+    public boolean containsRange(Range range) {\n         if (range == null) {\n             return false;\n         }\n-        return includesNumber(range.getMinimumNumber()) &&\n-               includesNumber(range.getMaximumNumber());\n+        return containsNumber(range.getMinimumNumber()) \n+            && containsNumber(range.getMaximumNumber());\n     }\n \n     /**\n      * \n      * <p><code>null</code> is handled and returns <code>false</code>.</p>\n      * \n-     * <p>This implementation uses the {@link #includesNumber(Number)} and\n-     * {@link #includesRange(Range)} methods.\n+     * <p>This implementation uses the {@link #containsNumber(Number)} and\n+     * {@link #containsRange(Range)} methods.\n      * Subclasses may be able to optimise this.</p>\n      *\n      * @param range  the range to test, may be <code>null</code>\n         if (range == null) {\n             return false;\n         }\n-        return range.includesNumber(getMinimumNumber()) ||\n-               range.includesNumber(getMaximumNumber()) || \n-               includesNumber(range.getMinimumNumber());\n+        return range.containsNumber(getMinimumNumber())\n+            || range.containsNumber(getMaximumNumber())\n+            || containsNumber(range.getMinimumNumber());\n     }\n \n     // Basics\n--- a/src/test/org/apache/commons/lang/math/AbstractRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/AbstractRangeTest.java\n  * Test cases for the {@link Range} classes.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: AbstractRangeTest.java,v 1.2 2003/06/08 14:19:43 scolebourne Exp $\n+ * @version $Id: AbstractRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $\n  */\n public abstract class AbstractRangeTest extends TestCase {\n \n \n     //--------------------------------------------------------------------------\n \n-    public void testIncludesLong() {\n-        assertEquals(false, tenToTwenty.includesLong(null));\n-        assertEquals(true, tenToTwenty.includesLong(nonComparable));\n-        \n-        assertEquals(false, tenToTwenty.includesLong(five));\n-        assertEquals(true, tenToTwenty.includesLong(ten));\n-        assertEquals(true, tenToTwenty.includesLong(fifteen));\n-        assertEquals(true, tenToTwenty.includesLong(twenty));\n-        assertEquals(false, tenToTwenty.includesLong(twentyFive));\n-        \n-        assertEquals(false, tenToTwenty.includesLong(long8));\n-        assertEquals(true, tenToTwenty.includesLong(long10));\n-        assertEquals(true, tenToTwenty.includesLong(long12));\n-        assertEquals(true, tenToTwenty.includesLong(long20));\n-        assertEquals(false, tenToTwenty.includesLong(long21));\n-        \n-        assertEquals(false, tenToTwenty.includesLong(double8));\n-        assertEquals(true, tenToTwenty.includesLong(double10));\n-        assertEquals(true, tenToTwenty.includesLong(double12));\n-        assertEquals(true, tenToTwenty.includesLong(double20));\n-        assertEquals(false, tenToTwenty.includesLong(double21));\n-        \n-        assertEquals(false, tenToTwenty.includesLong(float8));\n-        assertEquals(true, tenToTwenty.includesLong(float10));\n-        assertEquals(true, tenToTwenty.includesLong(float12));\n-        assertEquals(true, tenToTwenty.includesLong(float20));\n-        assertEquals(false, tenToTwenty.includesLong(float21));\n-        \n-        assertEquals(false, tenToTwenty.includesLong(9L));\n-        assertEquals(true, tenToTwenty.includesLong(10L));\n-        assertEquals(true, tenToTwenty.includesLong(15L));\n-        assertEquals(true, tenToTwenty.includesLong(20L));\n-        assertEquals(false, tenToTwenty.includesLong(21L));\n-    }\n-        \n-    public void testIncludesInteger() {\n-        assertEquals(false, tenToTwenty.includesInteger(null));\n-        assertEquals(true, tenToTwenty.includesInteger(nonComparable));\n-        \n-        assertEquals(false, tenToTwenty.includesInteger(five));\n-        assertEquals(true, tenToTwenty.includesInteger(ten));\n-        assertEquals(true, tenToTwenty.includesInteger(fifteen));\n-        assertEquals(true, tenToTwenty.includesInteger(twenty));\n-        assertEquals(false, tenToTwenty.includesInteger(twentyFive));\n-        \n-        assertEquals(false, tenToTwenty.includesInteger(long8));\n-        assertEquals(true, tenToTwenty.includesInteger(long10));\n-        assertEquals(true, tenToTwenty.includesInteger(long12));\n-        assertEquals(true, tenToTwenty.includesInteger(long20));\n-        assertEquals(false, tenToTwenty.includesInteger(long21));\n-        \n-        assertEquals(false, tenToTwenty.includesInteger(double8));\n-        assertEquals(true, tenToTwenty.includesInteger(double10));\n-        assertEquals(true, tenToTwenty.includesInteger(double12));\n-        assertEquals(true, tenToTwenty.includesInteger(double20));\n-        assertEquals(false, tenToTwenty.includesInteger(double21));\n-        \n-        assertEquals(false, tenToTwenty.includesInteger(float8));\n-        assertEquals(true, tenToTwenty.includesInteger(float10));\n-        assertEquals(true, tenToTwenty.includesInteger(float12));\n-        assertEquals(true, tenToTwenty.includesInteger(float20));\n-        assertEquals(false, tenToTwenty.includesInteger(float21));\n-        \n-        assertEquals(false, tenToTwenty.includesInteger(9));\n-        assertEquals(true, tenToTwenty.includesInteger(10));\n-        assertEquals(true, tenToTwenty.includesInteger(15));\n-        assertEquals(true, tenToTwenty.includesInteger(20));\n-        assertEquals(false, tenToTwenty.includesInteger(21));\n-    }\n-\n-    public void testIncludesDouble() {\n-        assertEquals(false, tenToTwenty.includesDouble(null));\n-        assertEquals(true, tenToTwenty.includesDouble(nonComparable));\n-        \n-        assertEquals(false, tenToTwenty.includesDouble(five));\n-        assertEquals(true, tenToTwenty.includesDouble(ten));\n-        assertEquals(true, tenToTwenty.includesDouble(fifteen));\n-        assertEquals(true, tenToTwenty.includesDouble(twenty));\n-        assertEquals(false, tenToTwenty.includesDouble(twentyFive));\n-        \n-        assertEquals(false, tenToTwenty.includesDouble(long8));\n-        assertEquals(true, tenToTwenty.includesDouble(long10));\n-        assertEquals(true, tenToTwenty.includesDouble(long12));\n-        assertEquals(true, tenToTwenty.includesDouble(long20));\n-        assertEquals(false, tenToTwenty.includesDouble(long21));\n-        \n-        assertEquals(false, tenToTwenty.includesDouble(double8));\n-        assertEquals(true, tenToTwenty.includesDouble(double10));\n-        assertEquals(true, tenToTwenty.includesDouble(double12));\n-        assertEquals(true, tenToTwenty.includesDouble(double20));\n-        assertEquals(false, tenToTwenty.includesDouble(double21));\n-        \n-        assertEquals(false, tenToTwenty.includesDouble(float8));\n-        assertEquals(true, tenToTwenty.includesDouble(float10));\n-        assertEquals(true, tenToTwenty.includesDouble(float12));\n-        assertEquals(true, tenToTwenty.includesDouble(float20));\n-        assertEquals(false, tenToTwenty.includesDouble(float21));\n-        \n-        assertEquals(false, tenToTwenty.includesDouble(9d));\n-        assertEquals(true, tenToTwenty.includesDouble(10d));\n-        assertEquals(true, tenToTwenty.includesDouble(15d));\n-        assertEquals(true, tenToTwenty.includesDouble(20d));\n-        assertEquals(false, tenToTwenty.includesDouble(21d));\n-    }\n-\n-    public void testIncludesFloat() {\n-        assertEquals(false, tenToTwenty.includesFloat(null));\n-        assertEquals(true, tenToTwenty.includesFloat(nonComparable));\n-        \n-        assertEquals(false, tenToTwenty.includesFloat(five));\n-        assertEquals(true, tenToTwenty.includesFloat(ten));\n-        assertEquals(true, tenToTwenty.includesFloat(fifteen));\n-        assertEquals(true, tenToTwenty.includesFloat(twenty));\n-        assertEquals(false, tenToTwenty.includesFloat(twentyFive));\n-        \n-        assertEquals(false, tenToTwenty.includesFloat(long8));\n-        assertEquals(true, tenToTwenty.includesFloat(long10));\n-        assertEquals(true, tenToTwenty.includesFloat(long12));\n-        assertEquals(true, tenToTwenty.includesFloat(long20));\n-        assertEquals(false, tenToTwenty.includesFloat(long21));\n-        \n-        assertEquals(false, tenToTwenty.includesFloat(double8));\n-        assertEquals(true, tenToTwenty.includesFloat(double10));\n-        assertEquals(true, tenToTwenty.includesFloat(double12));\n-        assertEquals(true, tenToTwenty.includesFloat(double20));\n-        assertEquals(false, tenToTwenty.includesFloat(double21));\n-        \n-        assertEquals(false, tenToTwenty.includesFloat(float8));\n-        assertEquals(true, tenToTwenty.includesFloat(float10));\n-        assertEquals(true, tenToTwenty.includesFloat(float12));\n-        assertEquals(true, tenToTwenty.includesFloat(float20));\n-        assertEquals(false, tenToTwenty.includesFloat(float21));\n-        \n-        assertEquals(false, tenToTwenty.includesFloat(9f));\n-        assertEquals(true, tenToTwenty.includesFloat(10f));\n-        assertEquals(true, tenToTwenty.includesFloat(15f));\n-        assertEquals(true, tenToTwenty.includesFloat(20f));\n-        assertEquals(false, tenToTwenty.includesFloat(21f));\n+    public void testContainsLong() {\n+        assertEquals(false, tenToTwenty.containsLong(null));\n+        assertEquals(true, tenToTwenty.containsLong(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.containsLong(five));\n+        assertEquals(true, tenToTwenty.containsLong(ten));\n+        assertEquals(true, tenToTwenty.containsLong(fifteen));\n+        assertEquals(true, tenToTwenty.containsLong(twenty));\n+        assertEquals(false, tenToTwenty.containsLong(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.containsLong(long8));\n+        assertEquals(true, tenToTwenty.containsLong(long10));\n+        assertEquals(true, tenToTwenty.containsLong(long12));\n+        assertEquals(true, tenToTwenty.containsLong(long20));\n+        assertEquals(false, tenToTwenty.containsLong(long21));\n+        \n+        assertEquals(false, tenToTwenty.containsLong(double8));\n+        assertEquals(true, tenToTwenty.containsLong(double10));\n+        assertEquals(true, tenToTwenty.containsLong(double12));\n+        assertEquals(true, tenToTwenty.containsLong(double20));\n+        assertEquals(false, tenToTwenty.containsLong(double21));\n+        \n+        assertEquals(false, tenToTwenty.containsLong(float8));\n+        assertEquals(true, tenToTwenty.containsLong(float10));\n+        assertEquals(true, tenToTwenty.containsLong(float12));\n+        assertEquals(true, tenToTwenty.containsLong(float20));\n+        assertEquals(false, tenToTwenty.containsLong(float21));\n+        \n+        assertEquals(false, tenToTwenty.containsLong(9L));\n+        assertEquals(true, tenToTwenty.containsLong(10L));\n+        assertEquals(true, tenToTwenty.containsLong(15L));\n+        assertEquals(true, tenToTwenty.containsLong(20L));\n+        assertEquals(false, tenToTwenty.containsLong(21L));\n+    }\n+        \n+    public void testContainsInteger() {\n+        assertEquals(false, tenToTwenty.containsInteger(null));\n+        assertEquals(true, tenToTwenty.containsInteger(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.containsInteger(five));\n+        assertEquals(true, tenToTwenty.containsInteger(ten));\n+        assertEquals(true, tenToTwenty.containsInteger(fifteen));\n+        assertEquals(true, tenToTwenty.containsInteger(twenty));\n+        assertEquals(false, tenToTwenty.containsInteger(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.containsInteger(long8));\n+        assertEquals(true, tenToTwenty.containsInteger(long10));\n+        assertEquals(true, tenToTwenty.containsInteger(long12));\n+        assertEquals(true, tenToTwenty.containsInteger(long20));\n+        assertEquals(false, tenToTwenty.containsInteger(long21));\n+        \n+        assertEquals(false, tenToTwenty.containsInteger(double8));\n+        assertEquals(true, tenToTwenty.containsInteger(double10));\n+        assertEquals(true, tenToTwenty.containsInteger(double12));\n+        assertEquals(true, tenToTwenty.containsInteger(double20));\n+        assertEquals(false, tenToTwenty.containsInteger(double21));\n+        \n+        assertEquals(false, tenToTwenty.containsInteger(float8));\n+        assertEquals(true, tenToTwenty.containsInteger(float10));\n+        assertEquals(true, tenToTwenty.containsInteger(float12));\n+        assertEquals(true, tenToTwenty.containsInteger(float20));\n+        assertEquals(false, tenToTwenty.containsInteger(float21));\n+        \n+        assertEquals(false, tenToTwenty.containsInteger(9));\n+        assertEquals(true, tenToTwenty.containsInteger(10));\n+        assertEquals(true, tenToTwenty.containsInteger(15));\n+        assertEquals(true, tenToTwenty.containsInteger(20));\n+        assertEquals(false, tenToTwenty.containsInteger(21));\n+    }\n+\n+    public void testContainsDouble() {\n+        assertEquals(false, tenToTwenty.containsDouble(null));\n+        assertEquals(true, tenToTwenty.containsDouble(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.containsDouble(five));\n+        assertEquals(true, tenToTwenty.containsDouble(ten));\n+        assertEquals(true, tenToTwenty.containsDouble(fifteen));\n+        assertEquals(true, tenToTwenty.containsDouble(twenty));\n+        assertEquals(false, tenToTwenty.containsDouble(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.containsDouble(long8));\n+        assertEquals(true, tenToTwenty.containsDouble(long10));\n+        assertEquals(true, tenToTwenty.containsDouble(long12));\n+        assertEquals(true, tenToTwenty.containsDouble(long20));\n+        assertEquals(false, tenToTwenty.containsDouble(long21));\n+        \n+        assertEquals(false, tenToTwenty.containsDouble(double8));\n+        assertEquals(true, tenToTwenty.containsDouble(double10));\n+        assertEquals(true, tenToTwenty.containsDouble(double12));\n+        assertEquals(true, tenToTwenty.containsDouble(double20));\n+        assertEquals(false, tenToTwenty.containsDouble(double21));\n+        \n+        assertEquals(false, tenToTwenty.containsDouble(float8));\n+        assertEquals(true, tenToTwenty.containsDouble(float10));\n+        assertEquals(true, tenToTwenty.containsDouble(float12));\n+        assertEquals(true, tenToTwenty.containsDouble(float20));\n+        assertEquals(false, tenToTwenty.containsDouble(float21));\n+        \n+        assertEquals(false, tenToTwenty.containsDouble(9d));\n+        assertEquals(true, tenToTwenty.containsDouble(10d));\n+        assertEquals(true, tenToTwenty.containsDouble(15d));\n+        assertEquals(true, tenToTwenty.containsDouble(20d));\n+        assertEquals(false, tenToTwenty.containsDouble(21d));\n+    }\n+\n+    public void testContainsFloat() {\n+        assertEquals(false, tenToTwenty.containsFloat(null));\n+        assertEquals(true, tenToTwenty.containsFloat(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.containsFloat(five));\n+        assertEquals(true, tenToTwenty.containsFloat(ten));\n+        assertEquals(true, tenToTwenty.containsFloat(fifteen));\n+        assertEquals(true, tenToTwenty.containsFloat(twenty));\n+        assertEquals(false, tenToTwenty.containsFloat(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.containsFloat(long8));\n+        assertEquals(true, tenToTwenty.containsFloat(long10));\n+        assertEquals(true, tenToTwenty.containsFloat(long12));\n+        assertEquals(true, tenToTwenty.containsFloat(long20));\n+        assertEquals(false, tenToTwenty.containsFloat(long21));\n+        \n+        assertEquals(false, tenToTwenty.containsFloat(double8));\n+        assertEquals(true, tenToTwenty.containsFloat(double10));\n+        assertEquals(true, tenToTwenty.containsFloat(double12));\n+        assertEquals(true, tenToTwenty.containsFloat(double20));\n+        assertEquals(false, tenToTwenty.containsFloat(double21));\n+        \n+        assertEquals(false, tenToTwenty.containsFloat(float8));\n+        assertEquals(true, tenToTwenty.containsFloat(float10));\n+        assertEquals(true, tenToTwenty.containsFloat(float12));\n+        assertEquals(true, tenToTwenty.containsFloat(float20));\n+        assertEquals(false, tenToTwenty.containsFloat(float21));\n+        \n+        assertEquals(false, tenToTwenty.containsFloat(9f));\n+        assertEquals(true, tenToTwenty.containsFloat(10f));\n+        assertEquals(true, tenToTwenty.containsFloat(15f));\n+        assertEquals(true, tenToTwenty.containsFloat(20f));\n+        assertEquals(false, tenToTwenty.containsFloat(21f));\n     }\n \n     //--------------------------------------------------------------------------\n \n-    public void testIncludesRange() {\n-        assertEquals(false, tenToTwenty.includesRange(createRange(five, five)));\n-        assertEquals(false, tenToTwenty.includesRange(createRange(five, ten)));\n-        assertEquals(false, tenToTwenty.includesRange(createRange(five, twelve)));\n-        assertEquals(false, tenToTwenty.includesRange(createRange(five, fifteen)));\n-        assertEquals(false, tenToTwenty.includesRange(createRange(five, twenty)));\n-        assertEquals(false, tenToTwenty.includesRange(createRange(five, twentyFive)));\n-        \n-        assertEquals(true, tenToTwenty.includesRange(createRange(ten, ten)));\n-        assertEquals(true, tenToTwenty.includesRange(createRange(ten, twelve)));\n-        assertEquals(true, tenToTwenty.includesRange(createRange(ten, fifteen)));\n-        assertEquals(true, tenToTwenty.includesRange(createRange(ten, twenty)));\n-        assertEquals(false, tenToTwenty.includesRange(createRange(ten, twentyFive)));\n-        \n-        assertEquals(true, tenToTwenty.includesRange(createRange(twelve, twelve)));\n-        assertEquals(true, tenToTwenty.includesRange(createRange(twelve, fifteen)));\n-        assertEquals(true, tenToTwenty.includesRange(createRange(twelve, twenty)));\n-        assertEquals(false, tenToTwenty.includesRange(createRange(twelve, twentyFive)));\n-        \n-        assertEquals(true, tenToTwenty.includesRange(createRange(fifteen, fifteen)));\n-        assertEquals(true, tenToTwenty.includesRange(createRange(fifteen, twenty)));\n-        assertEquals(false, tenToTwenty.includesRange(createRange(fifteen, twentyFive)));\n-        \n-        assertEquals(true, tenToTwenty.includesRange(createRange(twenty, twenty)));\n-        assertEquals(false, tenToTwenty.includesRange(createRange(twenty, twentyFive)));\n-        \n-        assertEquals(false, tenToTwenty.includesRange(createRange(twentyFive, twentyFive)));\n+    public void testContainsRange() {\n+        assertEquals(false, tenToTwenty.containsRange(createRange(five, five)));\n+        assertEquals(false, tenToTwenty.containsRange(createRange(five, ten)));\n+        assertEquals(false, tenToTwenty.containsRange(createRange(five, twelve)));\n+        assertEquals(false, tenToTwenty.containsRange(createRange(five, fifteen)));\n+        assertEquals(false, tenToTwenty.containsRange(createRange(five, twenty)));\n+        assertEquals(false, tenToTwenty.containsRange(createRange(five, twentyFive)));\n+        \n+        assertEquals(true, tenToTwenty.containsRange(createRange(ten, ten)));\n+        assertEquals(true, tenToTwenty.containsRange(createRange(ten, twelve)));\n+        assertEquals(true, tenToTwenty.containsRange(createRange(ten, fifteen)));\n+        assertEquals(true, tenToTwenty.containsRange(createRange(ten, twenty)));\n+        assertEquals(false, tenToTwenty.containsRange(createRange(ten, twentyFive)));\n+        \n+        assertEquals(true, tenToTwenty.containsRange(createRange(twelve, twelve)));\n+        assertEquals(true, tenToTwenty.containsRange(createRange(twelve, fifteen)));\n+        assertEquals(true, tenToTwenty.containsRange(createRange(twelve, twenty)));\n+        assertEquals(false, tenToTwenty.containsRange(createRange(twelve, twentyFive)));\n+        \n+        assertEquals(true, tenToTwenty.containsRange(createRange(fifteen, fifteen)));\n+        assertEquals(true, tenToTwenty.containsRange(createRange(fifteen, twenty)));\n+        assertEquals(false, tenToTwenty.containsRange(createRange(fifteen, twentyFive)));\n+        \n+        assertEquals(true, tenToTwenty.containsRange(createRange(twenty, twenty)));\n+        assertEquals(false, tenToTwenty.containsRange(createRange(twenty, twentyFive)));\n+        \n+        assertEquals(false, tenToTwenty.containsRange(createRange(twentyFive, twentyFive)));\n     }\n \n     public void testOverlapsRange() {\n--- a/src/test/org/apache/commons/lang/math/DoubleRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/DoubleRangeTest.java\n  * Test cases for the {@link DoubleRange} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: DoubleRangeTest.java,v 1.2 2003/06/08 14:19:43 scolebourne Exp $\n+ * @version $Id: DoubleRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $\n  */\n public final class DoubleRangeTest extends AbstractRangeTest {\n \n \n     //--------------------------------------------------------------------------\n \n-    public void testIncludesNumber() {\n-        assertEquals(false, tenToTwenty.includesNumber(null));\n-        assertEquals(true, tenToTwenty.includesNumber(nonComparable));\n-        \n-        assertEquals(false, tenToTwenty.includesNumber(five));\n-        assertEquals(true, tenToTwenty.includesNumber(ten));\n-        assertEquals(true, tenToTwenty.includesNumber(fifteen));\n-        assertEquals(true, tenToTwenty.includesNumber(twenty));\n-        assertEquals(false, tenToTwenty.includesNumber(twentyFive));\n-        \n-        assertEquals(false, tenToTwenty.includesNumber(long8));\n-        assertEquals(true, tenToTwenty.includesNumber(long10));\n-        assertEquals(true, tenToTwenty.includesNumber(long12));\n-        assertEquals(true, tenToTwenty.includesNumber(long20));\n-        assertEquals(false, tenToTwenty.includesNumber(long21));\n-        \n-        assertEquals(false, tenToTwenty.includesNumber(double8));\n-        assertEquals(true, tenToTwenty.includesNumber(double10));\n-        assertEquals(true, tenToTwenty.includesNumber(double12));\n-        assertEquals(true, tenToTwenty.includesNumber(double20));\n-        assertEquals(false, tenToTwenty.includesNumber(double21));\n-        \n-        assertEquals(false, tenToTwenty.includesNumber(float8));\n-        assertEquals(true, tenToTwenty.includesNumber(float10));\n-        assertEquals(true, tenToTwenty.includesNumber(float12));\n-        assertEquals(true, tenToTwenty.includesNumber(float20));\n-        assertEquals(false, tenToTwenty.includesNumber(float21));\n+    public void testContainsNumber() {\n+        assertEquals(false, tenToTwenty.containsNumber(null));\n+        assertEquals(true, tenToTwenty.containsNumber(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.containsNumber(five));\n+        assertEquals(true, tenToTwenty.containsNumber(ten));\n+        assertEquals(true, tenToTwenty.containsNumber(fifteen));\n+        assertEquals(true, tenToTwenty.containsNumber(twenty));\n+        assertEquals(false, tenToTwenty.containsNumber(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.containsNumber(long8));\n+        assertEquals(true, tenToTwenty.containsNumber(long10));\n+        assertEquals(true, tenToTwenty.containsNumber(long12));\n+        assertEquals(true, tenToTwenty.containsNumber(long20));\n+        assertEquals(false, tenToTwenty.containsNumber(long21));\n+        \n+        assertEquals(false, tenToTwenty.containsNumber(double8));\n+        assertEquals(true, tenToTwenty.containsNumber(double10));\n+        assertEquals(true, tenToTwenty.containsNumber(double12));\n+        assertEquals(true, tenToTwenty.containsNumber(double20));\n+        assertEquals(false, tenToTwenty.containsNumber(double21));\n+        \n+        assertEquals(false, tenToTwenty.containsNumber(float8));\n+        assertEquals(true, tenToTwenty.containsNumber(float10));\n+        assertEquals(true, tenToTwenty.containsNumber(float12));\n+        assertEquals(true, tenToTwenty.containsNumber(float20));\n+        assertEquals(false, tenToTwenty.containsNumber(float21));\n     }\n \n     public void testToString() {\n--- a/src/test/org/apache/commons/lang/math/FloatRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/FloatRangeTest.java\n  * Test cases for the {@link FloatRange} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: FloatRangeTest.java,v 1.2 2003/06/08 14:19:43 scolebourne Exp $\n+ * @version $Id: FloatRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $\n  */\n public final class FloatRangeTest extends AbstractRangeTest {\n \n \n     //--------------------------------------------------------------------------\n \n-    public void testIncludesNumber() {\n-        assertEquals(false, tenToTwenty.includesNumber(null));\n-        assertEquals(true, tenToTwenty.includesNumber(nonComparable));\n-        \n-        assertEquals(false, tenToTwenty.includesNumber(five));\n-        assertEquals(true, tenToTwenty.includesNumber(ten));\n-        assertEquals(true, tenToTwenty.includesNumber(fifteen));\n-        assertEquals(true, tenToTwenty.includesNumber(twenty));\n-        assertEquals(false, tenToTwenty.includesNumber(twentyFive));\n-        \n-        assertEquals(false, tenToTwenty.includesNumber(long8));\n-        assertEquals(true, tenToTwenty.includesNumber(long10));\n-        assertEquals(true, tenToTwenty.includesNumber(long12));\n-        assertEquals(true, tenToTwenty.includesNumber(long20));\n-        assertEquals(false, tenToTwenty.includesNumber(long21));\n-        \n-        assertEquals(false, tenToTwenty.includesNumber(double8));\n-        assertEquals(true, tenToTwenty.includesNumber(double10));\n-        assertEquals(true, tenToTwenty.includesNumber(double12));\n-        assertEquals(true, tenToTwenty.includesNumber(double20));\n-        assertEquals(false, tenToTwenty.includesNumber(double21));\n-        \n-        assertEquals(false, tenToTwenty.includesNumber(float8));\n-        assertEquals(true, tenToTwenty.includesNumber(float10));\n-        assertEquals(true, tenToTwenty.includesNumber(float12));\n-        assertEquals(true, tenToTwenty.includesNumber(float20));\n-        assertEquals(false, tenToTwenty.includesNumber(float21));\n+    public void testContainsNumber() {\n+        assertEquals(false, tenToTwenty.containsNumber(null));\n+        assertEquals(true, tenToTwenty.containsNumber(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.containsNumber(five));\n+        assertEquals(true, tenToTwenty.containsNumber(ten));\n+        assertEquals(true, tenToTwenty.containsNumber(fifteen));\n+        assertEquals(true, tenToTwenty.containsNumber(twenty));\n+        assertEquals(false, tenToTwenty.containsNumber(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.containsNumber(long8));\n+        assertEquals(true, tenToTwenty.containsNumber(long10));\n+        assertEquals(true, tenToTwenty.containsNumber(long12));\n+        assertEquals(true, tenToTwenty.containsNumber(long20));\n+        assertEquals(false, tenToTwenty.containsNumber(long21));\n+        \n+        assertEquals(false, tenToTwenty.containsNumber(double8));\n+        assertEquals(true, tenToTwenty.containsNumber(double10));\n+        assertEquals(true, tenToTwenty.containsNumber(double12));\n+        assertEquals(true, tenToTwenty.containsNumber(double20));\n+        assertEquals(false, tenToTwenty.containsNumber(double21));\n+        \n+        assertEquals(false, tenToTwenty.containsNumber(float8));\n+        assertEquals(true, tenToTwenty.containsNumber(float10));\n+        assertEquals(true, tenToTwenty.containsNumber(float12));\n+        assertEquals(true, tenToTwenty.containsNumber(float20));\n+        assertEquals(false, tenToTwenty.containsNumber(float21));\n     }\n \n     public void testToString() {\n--- a/src/test/org/apache/commons/lang/math/IntRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/IntRangeTest.java\n  * Test cases for the {@link IntRange} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: IntRangeTest.java,v 1.2 2003/06/08 14:19:43 scolebourne Exp $\n+ * @version $Id: IntRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $\n  */\n public final class IntRangeTest extends AbstractRangeTest {\n \n \n     //--------------------------------------------------------------------------\n \n-    public void testIncludesNumber() {\n-        assertEquals(false, tenToTwenty.includesNumber(null));\n-        assertEquals(true, tenToTwenty.includesNumber(nonComparable));\n+    public void testContainsNumber() {\n+        assertEquals(false, tenToTwenty.containsNumber(null));\n+        assertEquals(true, tenToTwenty.containsNumber(nonComparable));\n         \n-        assertEquals(false, tenToTwenty.includesNumber(five));\n-        assertEquals(true, tenToTwenty.includesNumber(ten));\n-        assertEquals(true, tenToTwenty.includesNumber(fifteen));\n-        assertEquals(true, tenToTwenty.includesNumber(twenty));\n-        assertEquals(false, tenToTwenty.includesNumber(twentyFive));\n+        assertEquals(false, tenToTwenty.containsNumber(five));\n+        assertEquals(true, tenToTwenty.containsNumber(ten));\n+        assertEquals(true, tenToTwenty.containsNumber(fifteen));\n+        assertEquals(true, tenToTwenty.containsNumber(twenty));\n+        assertEquals(false, tenToTwenty.containsNumber(twentyFive));\n         \n-        assertEquals(false, tenToTwenty.includesNumber(long8));\n-        assertEquals(true, tenToTwenty.includesNumber(long10));\n-        assertEquals(true, tenToTwenty.includesNumber(long12));\n-        assertEquals(true, tenToTwenty.includesNumber(long20));\n-        assertEquals(false, tenToTwenty.includesNumber(long21));\n+        assertEquals(false, tenToTwenty.containsNumber(long8));\n+        assertEquals(true, tenToTwenty.containsNumber(long10));\n+        assertEquals(true, tenToTwenty.containsNumber(long12));\n+        assertEquals(true, tenToTwenty.containsNumber(long20));\n+        assertEquals(false, tenToTwenty.containsNumber(long21));\n         \n-        assertEquals(false, tenToTwenty.includesNumber(double8));\n-        assertEquals(true, tenToTwenty.includesNumber(double10));\n-        assertEquals(true, tenToTwenty.includesNumber(double12));\n-        assertEquals(true, tenToTwenty.includesNumber(double20));\n-        assertEquals(false, tenToTwenty.includesNumber(double21));\n+        assertEquals(false, tenToTwenty.containsNumber(double8));\n+        assertEquals(true, tenToTwenty.containsNumber(double10));\n+        assertEquals(true, tenToTwenty.containsNumber(double12));\n+        assertEquals(true, tenToTwenty.containsNumber(double20));\n+        assertEquals(false, tenToTwenty.containsNumber(double21));\n         \n-        assertEquals(false, tenToTwenty.includesNumber(float8));\n-        assertEquals(true, tenToTwenty.includesNumber(float10));\n-        assertEquals(true, tenToTwenty.includesNumber(float12));\n-        assertEquals(true, tenToTwenty.includesNumber(float20));\n-        assertEquals(false, tenToTwenty.includesNumber(float21));\n+        assertEquals(false, tenToTwenty.containsNumber(float8));\n+        assertEquals(true, tenToTwenty.containsNumber(float10));\n+        assertEquals(true, tenToTwenty.containsNumber(float12));\n+        assertEquals(true, tenToTwenty.containsNumber(float20));\n+        assertEquals(false, tenToTwenty.containsNumber(float21));\n     }\n \n-    public void testIncludesIntegerBig() {\n+    public void testContainsIntegerBig() {\n         IntRange big = new IntRange(Integer.MAX_VALUE, Integer.MAX_VALUE- 2);\n-        assertEquals(true, big.includesInteger(Integer.MAX_VALUE - 1));\n-        assertEquals(false, big.includesInteger(Integer.MAX_VALUE - 3));\n+        assertEquals(true, big.containsInteger(Integer.MAX_VALUE - 1));\n+        assertEquals(false, big.containsInteger(Integer.MAX_VALUE - 3));\n     }\n \n     //--------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/math/LongRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/LongRangeTest.java\n  * Test cases for the {@link LongRange} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: LongRangeTest.java,v 1.2 2003/06/08 14:19:43 scolebourne Exp $\n+ * @version $Id: LongRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $\n  */\n public final class LongRangeTest extends AbstractRangeTest {\n \n \n     //--------------------------------------------------------------------------\n \n-    public void testIncludesNumber() {\n-        assertEquals(false, tenToTwenty.includesNumber(null));\n-        assertEquals(true, tenToTwenty.includesNumber(nonComparable));\n+    public void testContainsNumber() {\n+        assertEquals(false, tenToTwenty.containsNumber(null));\n+        assertEquals(true, tenToTwenty.containsNumber(nonComparable));\n         \n-        assertEquals(false, tenToTwenty.includesNumber(five));\n-        assertEquals(true, tenToTwenty.includesNumber(ten));\n-        assertEquals(true, tenToTwenty.includesNumber(fifteen));\n-        assertEquals(true, tenToTwenty.includesNumber(twenty));\n-        assertEquals(false, tenToTwenty.includesNumber(twentyFive));\n+        assertEquals(false, tenToTwenty.containsNumber(five));\n+        assertEquals(true, tenToTwenty.containsNumber(ten));\n+        assertEquals(true, tenToTwenty.containsNumber(fifteen));\n+        assertEquals(true, tenToTwenty.containsNumber(twenty));\n+        assertEquals(false, tenToTwenty.containsNumber(twentyFive));\n         \n-        assertEquals(false, tenToTwenty.includesNumber(long8));\n-        assertEquals(true, tenToTwenty.includesNumber(long10));\n-        assertEquals(true, tenToTwenty.includesNumber(long12));\n-        assertEquals(true, tenToTwenty.includesNumber(long20));\n-        assertEquals(false, tenToTwenty.includesNumber(long21));\n+        assertEquals(false, tenToTwenty.containsNumber(long8));\n+        assertEquals(true, tenToTwenty.containsNumber(long10));\n+        assertEquals(true, tenToTwenty.containsNumber(long12));\n+        assertEquals(true, tenToTwenty.containsNumber(long20));\n+        assertEquals(false, tenToTwenty.containsNumber(long21));\n         \n-        assertEquals(false, tenToTwenty.includesNumber(double8));\n-        assertEquals(true, tenToTwenty.includesNumber(double10));\n-        assertEquals(true, tenToTwenty.includesNumber(double12));\n-        assertEquals(true, tenToTwenty.includesNumber(double20));\n-        assertEquals(false, tenToTwenty.includesNumber(double21));\n+        assertEquals(false, tenToTwenty.containsNumber(double8));\n+        assertEquals(true, tenToTwenty.containsNumber(double10));\n+        assertEquals(true, tenToTwenty.containsNumber(double12));\n+        assertEquals(true, tenToTwenty.containsNumber(double20));\n+        assertEquals(false, tenToTwenty.containsNumber(double21));\n         \n-        assertEquals(false, tenToTwenty.includesNumber(float8));\n-        assertEquals(true, tenToTwenty.includesNumber(float10));\n-        assertEquals(true, tenToTwenty.includesNumber(float12));\n-        assertEquals(true, tenToTwenty.includesNumber(float20));\n-        assertEquals(false, tenToTwenty.includesNumber(float21));\n+        assertEquals(false, tenToTwenty.containsNumber(float8));\n+        assertEquals(true, tenToTwenty.containsNumber(float10));\n+        assertEquals(true, tenToTwenty.containsNumber(float12));\n+        assertEquals(true, tenToTwenty.containsNumber(float20));\n+        assertEquals(false, tenToTwenty.containsNumber(float21));\n     }\n \n-    public void testIncludesLongBig() {\n+    public void testContainsLongBig() {\n         LongRange big = new LongRange(Long.MAX_VALUE, Long.MAX_VALUE- 2);\n-        assertEquals(true, big.includesLong(Long.MAX_VALUE - 1));\n-        assertEquals(false, big.includesLong(Long.MAX_VALUE - 3));\n+        assertEquals(true, big.containsLong(Long.MAX_VALUE - 1));\n+        assertEquals(false, big.containsLong(Long.MAX_VALUE - 3));\n     }\n \n     //--------------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/math/NumberRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberRangeTest.java\n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Stephen Colebourne\n- * @version $Id: NumberRangeTest.java,v 1.2 2003/06/08 14:19:43 scolebourne Exp $\n+ * @version $Id: NumberRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $\n  */\n public final class NumberRangeTest extends AbstractRangeTest {\n \n \n     //--------------------------------------------------------------------------\n \n-    public void testIncludesNumber() {\n-        assertEquals(false, tenToTwenty.includesNumber(null));\n-        assertEquals(false, tenToTwenty.includesNumber(five));\n-        assertEquals(true, tenToTwenty.includesNumber(ten));\n-        assertEquals(true, tenToTwenty.includesNumber(fifteen));\n-        assertEquals(true, tenToTwenty.includesNumber(twenty));\n-        assertEquals(false, tenToTwenty.includesNumber(twentyFive));\n+    public void testContainsNumber() {\n+        assertEquals(false, tenToTwenty.containsNumber(null));\n+        assertEquals(false, tenToTwenty.containsNumber(five));\n+        assertEquals(true, tenToTwenty.containsNumber(ten));\n+        assertEquals(true, tenToTwenty.containsNumber(fifteen));\n+        assertEquals(true, tenToTwenty.containsNumber(twenty));\n+        assertEquals(false, tenToTwenty.containsNumber(twentyFive));\n         \n         try {\n-            tenToTwenty.includesNumber(long21);\n+            tenToTwenty.containsNumber(long21);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n-    public void testIncludesLongBig() {\n+    public void testContainsLongBig() {\n         // original NumberRange class failed this test\n         NumberRange big = new NumberRange(new Long(Long.MAX_VALUE), new Long(Long.MAX_VALUE- 2));\n-        assertEquals(true, big.includesLong(Long.MAX_VALUE - 1));\n-        assertEquals(false, big.includesLong(Long.MAX_VALUE - 3));\n+        assertEquals(true, big.containsLong(Long.MAX_VALUE - 1));\n+        assertEquals(false, big.containsLong(Long.MAX_VALUE - 3));\n     }\n \n     //--------------------------------------------------------------------------", "timestamp": 1059959642, "metainfo": ""}