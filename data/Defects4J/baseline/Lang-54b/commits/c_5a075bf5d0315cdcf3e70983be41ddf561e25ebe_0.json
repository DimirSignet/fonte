{"sha": "5a075bf5d0315cdcf3e70983be41ddf561e25ebe", "log": "Extra tests suggested by Clover   ", "commit": "\n--- a/src/test/org/apache/commons/lang/util/IdentifierUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/util/IdentifierUtilsTest.java\n  */\n package org.apache.commons.lang.util;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.AssertionFailedError;\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n  * Tests the org.apache.commons.lang.util.IdentifierUtils class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: IdentifierUtilsTest.java,v 1.2 2003/05/16 22:07:38 scolebourne Exp $\n+ * @version $Id: IdentifierUtilsTest.java,v 1.3 2003/07/31 23:03:46 scolebourne Exp $\n  */\n public class IdentifierUtilsTest extends junit.framework.TestCase {\n \n         return suite;\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new IdentifierUtils());\n+        Constructor[] cons = IdentifierUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(IdentifierUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(IdentifierUtils.class.getModifiers()));\n+    }\n+    \n     //--------------------------------------------------------------------------\n \n     public void testLongIncrementing() {\n     }\n \n     public void testLongIncrementingWrap() {\n-        LongIdentifierFactory f = IdentifierUtils.longIdentifierFactory(true, Long.MAX_VALUE);\n+        LongIdentifierFactory f = IdentifierUtils.longIdentifierFactory(true, Long.MAX_VALUE - 1);\n+        assertEquals(new Long(Long.MAX_VALUE - 1), f.nextLongIdentifier());\n         assertEquals(new Long(Long.MAX_VALUE), f.nextLongIdentifier());\n         assertEquals(new Long(Long.MIN_VALUE), f.nextLongIdentifier());\n     }\n     }\n \n     public void testStringNumericWrap() {\n-        StringIdentifierFactory f = IdentifierUtils.stringNumericIdentifierFactory(true, Long.MAX_VALUE);\n+        StringIdentifierFactory f = IdentifierUtils.stringNumericIdentifierFactory(true, Long.MAX_VALUE - 1);\n+        assertEquals(Long.toString(Long.MAX_VALUE - 1), f.nextStringIdentifier());\n         assertEquals(Long.toString(Long.MAX_VALUE), f.nextStringIdentifier());\n         assertEquals(Long.toString(Long.MIN_VALUE), f.nextStringIdentifier());\n     }\n     public void testStringAlphanumeric() {\n         StringIdentifierFactory f = IdentifierUtils.STRING_ALPHANUMERIC_IDENTIFIER_FACTORY;\n         assertEquals(\"000000000000001\", f.nextStringIdentifier());\n-        assertEquals(\"000000000000002\", f.nextStringIdentifier());\n+        assertEquals(\"000000000000002\", f.nextIdentifier());\n         assertEquals(\"000000000000003\", f.nextStringIdentifier());\n         assertEquals(\"000000000000004\", f.nextStringIdentifier());\n         assertEquals(\"000000000000005\", f.nextStringIdentifier());\n     }\n \n     public void testStringAlphanumericWrap() {\n+        try {\n+            IdentifierUtils.stringAlphanumericIdentifierFactory(true, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n         StringIdentifierFactory f = IdentifierUtils.stringAlphanumericIdentifierFactory(true, 1);\n         assertEquals(\"1\", f.nextStringIdentifier());\n         assertEquals(\"2\", f.nextStringIdentifier());\n     }\n \n     public void testStringAlphanumericNoWrap() {\n+        try {\n+            IdentifierUtils.stringAlphanumericIdentifierFactory(false, -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n         StringIdentifierFactory f = IdentifierUtils.stringAlphanumericIdentifierFactory(false, 1);\n         assertEquals(\"1\", f.nextStringIdentifier());\n         assertEquals(\"2\", f.nextStringIdentifier());\n         \n         String a = (String) f.nextStringIdentifier();\n         String b = (String) IdentifierUtils.nextStringSessionIdentifier();\n+        String c = (String) f.nextIdentifier();\n         assertTrue(a.length() >= 10);\n         assertTrue(b.length() >= 10);\n-        // could fail, but unlikely\n-        assertTrue(a.substring(6, 9) != b.substring(6, 9));\n+        assertTrue(c.length() >= 10);\n+        try {\n+            // could fail, but unlikely\n+            assertTrue(a.substring(6, 9).equals(b.substring(6, 9)));\n+            assertTrue(a.substring(6, 9).equals(c.substring(6, 9)));\n+        } catch (AssertionFailedError ex) {\n+            // try again to make test more robust\n+            a = (String) f.nextStringIdentifier();\n+            b = (String) IdentifierUtils.nextStringSessionIdentifier();\n+            c = (String) f.nextIdentifier();\n+            assertTrue(a.substring(6, 9).equals(b.substring(6, 9)));\n+            assertTrue(a.substring(6, 9).equals(c.substring(6, 9)));\n+        }\n         assertEquals(\"0\", a.substring(9));\n         assertEquals(\"1\", b.substring(9));\n+        assertEquals(\"2\", c.substring(9));\n     }\n \n     //--------------------------------------------------------------------------", "timestamp": 1059692626, "metainfo": ""}