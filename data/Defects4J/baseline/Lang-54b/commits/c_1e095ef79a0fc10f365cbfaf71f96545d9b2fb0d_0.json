{"sha": "1e095ef79a0fc10f365cbfaf71f96545d9b2fb0d", "log": "Add StrMatcher and update StrBuilder and test cases to use it, plus fix other bugs  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n     /**\n      * Gets the character at the specified index.\n      *\n+     * @see #setCharAt(int, char)\n+     * @see #deleteCharAt(int)\n      * @param index  the index to retrieve, must be valid\n      * @return the character at the index\n      * @throws IndexOutOfBoundsException if the index is invalid\n     /**\n      * Sets the character at the specified index.\n      *\n+     * @see #charAt(int)\n+     * @see #deleteCharAt(int)\n      * @param index  the index to set\n      * @param ch  the new character\n      * @throws IndexOutOfBoundsException if the index is invalid\n             throw new StringIndexOutOfBoundsException(index);\n         }\n         buffer[index] = ch;\n+    }\n+\n+    /**\n+     * Deletes the character at the specified index.\n+     *\n+     * @see #charAt(int)\n+     * @see #setCharAt(int, char)\n+     * @param index  the index to delete\n+     * @return this, to enable chaining\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     */\n+    public StrBuilder deleteCharAt(int index) {\n+        if (index < 0 || index >= size) {\n+            throw new StringIndexOutOfBoundsException(index);\n+        }\n+        deleteImpl(index, index + 1, 1);\n+        return this;\n     }\n \n     //-----------------------------------------------------------------------\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Internal method to delete a range without validation.\n+     *\n+     * @param startIndex  the start index, must be valid\n+     * @param endIndex  the end index (exclusive), must be valid\n+     * @param len  the length, must be valid\n+     * @throws IndexOutOfBoundsException if any index is invalid\n+     */\n+    private void deleteImpl(int startIndex, int endIndex, int len) {\n+        System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\n+        size -= len;\n+    }\n+\n+    /**\n      * Deletes the characters between the two specified indices.\n      *\n      * @param startIndex  the start index, inclusive, must be valid\n         endIndex = validateRange(startIndex, endIndex);\n         int len = endIndex - startIndex;\n         if (len > 0) {\n-            System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);\n-            size -= len;\n-        }\n-        return this;\n-    }\n-\n-    /**\n-     * Deletes the character at the specified index.\n-     *\n-     * @param index  the index to delete\n-     * @return this, to enable chaining\n-     * @throws IndexOutOfBoundsException if the index is invalid\n-     */\n-    public StrBuilder deleteCharAt(int index) {\n-        if (index < 0 || index >= size) {\n-            throw new StringIndexOutOfBoundsException(index);\n-        }\n-        System.arraycopy(buffer, index + 1, buffer, index, size - index - 1);\n-        size--;\n-        return this;\n-    }\n-\n+            deleteImpl(startIndex, endIndex, len);\n+        }\n+        return this;\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Deletes the character wherever it occurs in the builder.\n-     * \n+     *\n      * @param ch  the character to delete\n      * @return this, to enable chaining\n      */\n-    public StrBuilder delete(char ch) {\n+    public StrBuilder deleteAll(char ch) {\n         for (int i = 0; i < size; i++) {\n             if (buffer[i] == ch) {\n                 int start = i;\n                         break;\n                     }\n                 }\n-                System.arraycopy(buffer, i, buffer, start, size - i);\n-                size -= (i - start);\n-            }\n-        }\n-        return this;\n-    }\n-\n+                int len = i - start;\n+                deleteImpl(start, i, len);\n+                i -= len;\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Deletes the character wherever it occurs in the builder.\n+     *\n+     * @param ch  the character to delete\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder deleteFirst(char ch) {\n+        for (int i = 0; i < size; i++) {\n+            if (buffer[i] == ch) {\n+                deleteImpl(i, i + 1, 1);\n+                break;\n+            }\n+        }\n+        return this;\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Deletes the string wherever it occurs in the builder.\n-     * \n+     *\n      * @param str  the string to delete, null causes no action\n      * @return this, to enable chaining\n      */\n-    public StrBuilder delete(String str) {\n+    public StrBuilder deleteAll(String str) {\n         int len = (str == null ? 0 : str.length());\n         if (len > 0) {\n             int index = indexOf(str, 0);\n             while (index >= 0) {\n-                delete(index, index + len);\n+                deleteImpl(index, index + len, len);\n                 index = indexOf(str, index);\n             }\n         }\n         return this;\n     }\n \n-    //-----------------------------------------------------------------------\n+    /**\n+     * Deletes the string wherever it occurs in the builder.\n+     *\n+     * @param str  the string to delete, null causes no action\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder deleteFirst(String str) {\n+        int len = (str == null ? 0 : str.length());\n+        if (len > 0) {\n+            int index = indexOf(str, 0);\n+            if (index >= 0) {\n+                deleteImpl(index, index + len, len);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Deletes all parts of the builder that the matcher matches.\n+     * <p>\n+     * Matchers can be used to perform advanced deletion behaviour.\n+     * For example you could write a matcher to delete all occurances\n+     * where the character 'a' is followed by a number.\n+     *\n+     * @param matcher  the matcher to use to find the deletion, null causes no action\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder deleteAll(StrMatcher matcher) {\n+        return replace(matcher, null, 0, size, -1);\n+    }\n+\n+    /**\n+     * Deletes the first match within the builder using the specified matcher.\n+     * <p>\n+     * Matchers can be used to perform advanced deletion behaviour.\n+     * For example you could write a matcher to delete\n+     * where the character 'a' is followed by a number.\n+     *\n+     * @param matcher  the matcher to use to find the deletion, null causes no action\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder deleteFirst(StrMatcher matcher) {\n+        return replace(matcher, null, 0, size, 1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Internal method to delete a range without validation.\n+     *\n+     * @param startIndex  the start index, must be valid\n+     * @param endIndex  the end index (exclusive), must be valid\n+     * @param removeLen  the length to remove (endIndex - startIndex), must be valid\n+     * @param insertStr  the string to replace with, null means delete range\n+     * @param insertLen  the length of the insert string, must be valid\n+     * @param len  the length, must be valid\n+     * @throws IndexOutOfBoundsException if any index is invalid\n+     */\n+    private void replaceImpl(int startIndex, int endIndex, int removeLen, String insertStr, int insertLen) {\n+        int newSize = size - removeLen + insertLen;\n+        if (insertLen != removeLen) {\n+            ensureCapacity(newSize);\n+            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);\n+            size = newSize;\n+        }\n+        if (insertLen > 0) {\n+            insertStr.getChars(0, insertLen, buffer, startIndex);\n+        }\n+    }\n+\n     /**\n      * Replaces a portion of the string builder with another string.\n      * The length of the inserted string does not have to match the removed length.\n-     * \n+     *\n      * @param startIndex  the start index, inclusive, must be valid\n      * @param endIndex  the end index, exclusive, must be valid except\n      *  that if too large it is treated as end of string\n-     * @param str  the string to replace with\n+     * @param replaceStr  the string to replace with, null means delete range\n      * @return this, to enable chaining\n      * @throws IndexOutOfBoundsException if the index is invalid\n      */\n-    public StrBuilder replace(int startIndex, int endIndex, String str) {\n+    public StrBuilder replace(int startIndex, int endIndex, String replaceStr) {\n         endIndex = validateRange(startIndex, endIndex);\n-        int insertLen = str.length();\n-        int removeLen = endIndex - startIndex;\n-        int newSize = size - removeLen + insertLen;\n-        if (insertLen > removeLen) {\n-            ensureCapacity(newSize);\n-        }\n-        if (insertLen != removeLen) {\n-            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);\n-            size = newSize;\n-        }\n-        str.getChars(0, insertLen, buffer, startIndex);\n-        return this;\n-    }\n-\n-    /**\n-     * Replaces a portion of the string builder with another string builder.\n-     * The length of the inserted string does not have to match the removed length.\n-     * \n-     * @param startIndex  the start index, inclusive, must be valid\n-     * @param endIndex  the end index, exclusive, must be valid except\n-     *  that if too large it is treated as end of string\n-     * @param builder  the string builder to replace with\n-     * @return this, to enable chaining\n-     * @throws IndexOutOfBoundsException if the index is invalid\n-     */\n-    public StrBuilder replace(int startIndex, int endIndex, StrBuilder builder) {\n-        endIndex = validateRange(startIndex, endIndex);\n-        int insertLen = builder.length();\n-        int removeLen = endIndex - startIndex;\n-        if (insertLen > removeLen) {\n-            ensureCapacity(size - removeLen + insertLen);\n-        }\n-        if (insertLen != removeLen) {\n-            //shift the current characters to the right\n-            System.arraycopy(buffer, endIndex, buffer, startIndex + insertLen, size - endIndex);\n-            //adjust the size accordingly\n-            size += (insertLen - removeLen);\n-        }\n-        builder.getChars(0, insertLen, buffer, startIndex);\n-        return this;\n-    }\n-\n-    /**\n-     * Replaces the search character with the replace character throughout the builder.\n-     * \n-     * @param search  the search string, null causes no action to occur\n-     * @param replace  the replace string, null is equivalent to an empty string\n-     * @return this, to enable chaining\n-     */\n-    public StrBuilder replace(char search, char replace) {\n+        int insertLen = (replaceStr == null ? 0 : replaceStr.length());\n+        replaceImpl(startIndex, endIndex, endIndex - startIndex, replaceStr, insertLen);\n+        return this;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Replaces the search character with the replace character\n+     * throughout the builder.\n+     *\n+     * @param search  the search character\n+     * @param replace  the replace character\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder replaceAll(char search, char replace) {\n         if (search != replace) {\n             for (int i = 0; i < size; i++) {\n                 if (buffer[i] == search) {\n     }\n \n     /**\n+     * Replaces the first instance of the search character with the\n+     * replace character in the builder.\n+     *\n+     * @param search  the search character\n+     * @param replace  the replace character\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder replaceFirst(char search, char replace) {\n+        if (search != replace) {\n+            for (int i = 0; i < size; i++) {\n+                if (buffer[i] == search) {\n+                    buffer[i] = replace;\n+                    break;\n+                }\n+            }\n+        }\n+        return this;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Replaces the search string with the replace string throughout the builder.\n-     * \n+     *\n      * @param searchStr  the search string, null causes no action to occur\n      * @param replaceStr  the replace string, null is equivalent to an empty string\n      * @return this, to enable chaining\n      */\n-    public StrBuilder replace(String searchStr, String replaceStr) {\n+    public StrBuilder replaceAll(String searchStr, String replaceStr) {\n         int searchLen = (searchStr == null ? 0 : searchStr.length());\n         if (searchLen > 0) {\n-            replaceStr = (replaceStr == null ? \"\" : replaceStr);\n+            int replaceLen = (replaceStr == null ? 0 : replaceStr.length());\n             int index = indexOf(searchStr, 0);\n             while (index >= 0) {\n-                replace(index, index + searchLen, replaceStr);\n-                index = indexOf(searchStr, index);\n+                replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);\n+                index = indexOf(searchStr, index + replaceLen);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Replaces the first instance of the search string with the replace string.\n+     *\n+     * @param searchStr  the search string, null causes no action to occur\n+     * @param replaceStr  the replace string, null is equivalent to an empty string\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder replaceFirst(String searchStr, String replaceStr) {\n+        int searchLen = (searchStr == null ? 0 : searchStr.length());\n+        if (searchLen > 0) {\n+            int index = indexOf(searchStr, 0);\n+            if (index >= 0) {\n+                int replaceLen = (replaceStr == null ? 0 : replaceStr.length());\n+                replaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Replaces all matches within the builder with the replace string.\n+     * <p>\n+     * Matchers can be used to perform advanced replace behaviour.\n+     * For example you could write a matcher to replace all occurances\n+     * where the character 'a' is followed by a number.\n+     *\n+     * @param matcher  the matcher to use to find the deletion, null causes no action\n+     * @param replaceStr  the replace string, null is equivalent to an empty string\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder replaceAll(StrMatcher matcher, String replaceStr) {\n+        return replace(matcher, replaceStr, 0, size, -1);\n+    }\n+\n+    /**\n+     * Replaces the first match within the builder with the replace string.\n+     * <p>\n+     * Matchers can be used to perform advanced replace behaviour.\n+     * For example you could write a matcher to replace\n+     * where the character 'a' is followed by a number.\n+     *\n+     * @param matcher  the matcher to use to find the deletion, null causes no action\n+     * @param replaceStr  the replace string, null is equivalent to an empty string\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder replaceFirst(StrMatcher matcher, String replaceStr) {\n+        return replace(matcher, replaceStr, 0, size, 1);\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    /**\n+     * Advanced search and replaces within the builder using a matcher.\n+     * <p>\n+     * Matchers can be used to perform advanced behaviour.\n+     * For example you could write a matcher to delete all occurances\n+     * where the character 'a' is followed by a number.\n+     *\n+     * @param matcher  the matcher to use to find the deletion, null causes no action\n+     * @param replaceStr  the string to replace the match with, null is a delete\n+     * @param startIndex  the start index, inclusive, must be valid\n+     * @param endIndex  the end index, exclusive, must be valid except\n+     *  that if too large it is treated as end of string\n+     * @param replaceCount  the number of times to replace, -1 for replace all\n+     * @return this, to enable chaining\n+     * @throws IndexOutOfBoundsException if start index is invalid\n+     */\n+    public StrBuilder replace(\n+            StrMatcher matcher, String replaceStr,\n+            int startIndex, int endIndex, int replaceCount) {\n+        endIndex = validateRange(startIndex, endIndex);\n+        return replaceImpl(matcher, replaceStr, startIndex, endIndex, replaceCount);\n+    }\n+\n+    /**\n+     * Replaces within the builder using a matcher.\n+     * <p>\n+     * Matchers can be used to perform advanced behaviour.\n+     * For example you could write a matcher to delete all occurances\n+     * where the character 'a' is followed by a number.\n+     *\n+     * @param matcher  the matcher to use to find the deletion, null causes no action\n+     * @param replaceStr  the string to replace the match with, null is a delete\n+     * @param from  the start index, must be valid\n+     * @param to  the end index (exclusive), must be valid\n+     * @param replaceCount  the number of times to replace, -1 for replace all\n+     * @return this, to enable chaining\n+     * @throws IndexOutOfBoundsException if any index is invalid\n+     */\n+    private StrBuilder replaceImpl(\n+            StrMatcher matcher, String replaceStr,\n+            int from, int to, int replaceCount) {\n+        if (matcher == null || size == 0) {\n+            return this;\n+        }\n+        int replaceLen = (replaceStr == null ? 0 : replaceStr.length());\n+        char[] buf = buffer;\n+        for (int i = from; i < to && replaceCount != 0; i++) {\n+            int removeLen = matcher.isMatch(buf, i, from, to);\n+            if (removeLen > 0) {\n+                replaceImpl(i, i + removeLen, removeLen, replaceStr, replaceLen);\n+                to = to - removeLen + replaceLen;\n+                i = i + replaceLen - 1;\n+                if (replaceCount > 0) {\n+                    replaceCount--;\n+                }\n             }\n         }\n         return this;\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Checks of the string builder contains the specified char.\n-     * \n+     * Checks if the string builder contains the specified char.\n+     *\n      * @param ch  the character to find\n      * @return true if the builder contains the character\n      */\n     }\n \n     /**\n-     * Checks of the string builder contains the specified string.\n-     * \n+     * Checks if the string builder contains the specified string.\n+     *\n      * @param str  the string to find\n      * @return true if the builder contains the string\n      */\n         return indexOf(str, 0) >= 0;\n     }\n \n+    /**\n+     * Checks if the string builder contains a string matched using the\n+     * specified matcher.\n+     * <p>\n+     * Matchers can be used to perform advanced searching behaviour.\n+     * For example you could write a matcher to search for the character\n+     * 'a' followed by a number.\n+     *\n+     * @param matcher  the matcher to use, null returns -1\n+     * @return true if the matcher finds a match in the builder\n+     */\n+    public boolean contains(StrMatcher matcher) {\n+        return indexOf(matcher, 0) >= 0;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Searches the string builder to find the first reference to the specified char.\n      * Searches the string builder to find the first reference to the specified char.\n      * \n      * @param ch  the character to find\n-     * @param startIndex  the index to start at, must be valid\n+     * @param startIndex  the index to start at, invalid index rounded to edge\n      * @return the first index of the character, or -1 if not found\n      */\n     public int indexOf(char ch, int startIndex) {\n      * Note that a null input string will return -1, whereas the JDK throws an exception.\n      * \n      * @param str  the string to find, null returns -1\n-     * @param startIndex  the index to start at, must be valid\n+     * @param startIndex  the index to start at, invalid index rounded to edge\n      * @return the first index of the string, or -1 if not found\n      */\n     public int indexOf(String str, int startIndex) {\n         return -1;\n     }\n \n+    /**\n+     * Searches the string builder using the matcher to find the first match.\n+     * <p>\n+     * Matchers can be used to perform advanced searching behaviour.\n+     * For example you could write a matcher to find the character 'a'\n+     * followed by a number.\n+     *\n+     * @param matcher  the matcher to use, null returns -1\n+     * @return the first index matched, or -1 if not found\n+     */\n+    public int indexOf(StrMatcher matcher) {\n+        return indexOf(matcher, 0);\n+    }\n+\n+    /**\n+     * Searches the string builder using the matcher to find the first\n+     * match searching from the given index.\n+     * <p>\n+     * Matchers can be used to perform advanced searching behaviour.\n+     * For example you could write a matcher to find the character 'a'\n+     * followed by a number.\n+     *\n+     * @param matcher  the matcher to use, null returns -1\n+     * @param startIndex  the index to start at, invalid index rounded to edge\n+     * @return the first index matched, or -1 if not found\n+     */\n+    public int indexOf(StrMatcher matcher, int startIndex) {\n+        startIndex = (startIndex < 0 ? 0 : startIndex);\n+        if (matcher == null || startIndex >= size) {\n+            return -1;\n+        }\n+        int len = size;\n+        if (len > 0) {\n+            char[] buf = buffer;\n+            for (int i = startIndex; i < len; i++) {\n+                if (matcher.isMatch(buf, i, startIndex, len) > 0) {\n+                    return i;\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Searches the string builder to find the last reference to the specified char.\n             \n         } else if (strLen == 0) {\n             return startIndex;\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * Searches the string builder using the matcher to find the last match.\n+     * <p>\n+     * Matchers can be used to perform advanced searching behaviour.\n+     * For example you could write a matcher to find the character 'a'\n+     * followed by a number.\n+     *\n+     * @param matcher  the matcher to use, null returns -1\n+     * @return the last index matched, or -1 if not found\n+     */\n+    public int lastIndexOf(StrMatcher matcher) {\n+        return lastIndexOf(matcher, size);\n+    }\n+\n+    /**\n+     * Searches the string builder using the matcher to find the last\n+     * match searching from the given index.\n+     * <p>\n+     * Matchers can be used to perform advanced searching behaviour.\n+     * For example you could write a matcher to find the character 'a'\n+     * followed by a number.\n+     *\n+     * @param matcher  the matcher to use, null returns -1\n+     * @param startIndex  the index to start at, invalid index rounded to edge\n+     * @return the last index matched, or -1 if not found\n+     */\n+    public int lastIndexOf(StrMatcher matcher, int startIndex) {\n+        startIndex = (startIndex >= size ? size - 1 : startIndex);\n+        if (matcher == null || startIndex < 0) {\n+            return -1;\n+        }\n+        int len = size;\n+        if (len > 0) {\n+            char[] buf = buffer;\n+            int endIndex = startIndex + 1;\n+            for (int i = startIndex; i >= 0; i--) {\n+                if (matcher.isMatch(buf, i, 0, endIndex) > 0) {\n+                    return i;\n+                }\n+            }\n         }\n         return -1;\n     }\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/text/StrMatcher.java\n+/*\n+ * Copyright 2003-2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.text;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * A matcher class that can be queried to determine if a character array\n+ * portion matches.\n+ * <p>\n+ * This class comes complete with various constants and factory methods.\n+ * If these do not suffice, you can subclass and implement your own matcher.\n+ *\n+ * @author Stephen Colebourne\n+ * @since 2.2\n+ * @version $Id$\n+ */\n+public abstract class StrMatcher {\n+\n+    /**\n+     * Matches the comma character.\n+     */\n+    private static final StrMatcher COMMA_MATCHER = new CharMatcher(',');\n+    /**\n+     * Matches the tab character.\n+     */\n+    private static final StrMatcher TAB_MATCHER = new CharMatcher('\\t');\n+    /**\n+     * Matches the space character.\n+     */\n+    private static final StrMatcher SPACE_MATCHER = new CharMatcher(' ');\n+    /**\n+     * Matches the same characters as StringTokenizer,\n+     * namely space, tab, newline, formfeed.\n+     */\n+    private static final StrMatcher SPLIT_MATCHER = new CharSetMatcher(\" \\t\\n\\r\\f\".toCharArray());\n+    /**\n+     * Matches the String trim() whitespace characters.\n+     */\n+    private static final StrMatcher TRIM_MATCHER = new TrimMatcher();\n+    /**\n+     * Matches the double quote character.\n+     */\n+    private static final StrMatcher SINGLE_QUOTE_MATCHER = new CharMatcher('\\'');\n+    /**\n+     * Matches the double quote character.\n+     */\n+    private static final StrMatcher DOUBLE_QUOTE_MATCHER = new CharMatcher('\"');\n+    /**\n+     * Matches the single or double quote character.\n+     */\n+    private static final StrMatcher QUOTE_MATCHER = new CharSetMatcher(\"'\\\"\".toCharArray());\n+    /**\n+     * Matches no characters.\n+     */\n+    private static final StrMatcher NONE_MATCHER = new NoMatcher();\n+\n+    // -----------------------------------------------------------------------\n+\n+    /**\n+     * Returns a matcher which matches the comma character.\n+     *\n+     * @return a matcher for a comma\n+     */\n+    public static StrMatcher commaMatcher() {\n+        return COMMA_MATCHER;\n+    }\n+\n+    /**\n+     * Returns a matcher which matches the tab character.\n+     *\n+     * @return a matcher for a tab\n+     */\n+    public static StrMatcher tabMatcher() {\n+        return TAB_MATCHER;\n+    }\n+\n+    /**\n+     * Returns a matcher which matches the space character.\n+     *\n+     * @return a matcher for a space\n+     */\n+    public static StrMatcher spaceMatcher() {\n+        return SPACE_MATCHER;\n+    }\n+\n+    /**\n+     * Matches the same characters as StringTokenizer,\n+     * namely space, tab, newline and formfeed.\n+     *\n+     * @return the split matcher\n+     */\n+    public static StrMatcher splitMatcher() {\n+        return SPLIT_MATCHER;\n+    }\n+\n+    /**\n+     * Matches the String trim() whitespace characters.\n+     *\n+     * @return the trim matcher\n+     */\n+    public static StrMatcher trimMatcher() {\n+        return TRIM_MATCHER;\n+    }\n+\n+    /**\n+     * Returns a matcher which matches the single quote character.\n+     *\n+     * @return a matcher for a single quote\n+     */\n+    public static StrMatcher singleQuoteMatcher() {\n+        return SINGLE_QUOTE_MATCHER;\n+    }\n+\n+    /**\n+     * Returns a matcher which matches the double quote character.\n+     *\n+     * @return a matcher for a double quote\n+     */\n+    public static StrMatcher doubleQuoteMatcher() {\n+        return DOUBLE_QUOTE_MATCHER;\n+    }\n+\n+    /**\n+     * Returns a matcher which matches the single or double quote character.\n+     *\n+     * @return a matcher for a single or double quote\n+     */\n+    public static StrMatcher quoteMatcher() {\n+        return QUOTE_MATCHER;\n+    }\n+\n+    /**\n+     * Matches no characters.\n+     *\n+     * @return a matcher that matches nothing\n+     */\n+    public static StrMatcher noneMatcher() {\n+        return NONE_MATCHER;\n+    }\n+\n+    /**\n+     * Constructor that creates a matcher from a character.\n+     *\n+     * @param ch  the character to match, must not be null\n+     * @return a new Matcher for the given char\n+     */\n+    public static StrMatcher charMatcher(char ch) {\n+        return new CharMatcher(ch);\n+    }\n+\n+    /**\n+     * Constructor that creates a matcher from a set of characters.\n+     *\n+     * @param chars  the characters to match, null or empty matches nothing\n+     * @return a new matcher for the given char[]\n+     */\n+    public static StrMatcher charSetMatcher(char[] chars) {\n+        if (chars == null || chars.length == 0) {\n+            return NONE_MATCHER;\n+        }\n+        if (chars.length == 1) {\n+            return new CharMatcher(chars[0]);\n+        }\n+        return new CharSetMatcher(chars);\n+    }\n+\n+    /**\n+     * Constructor that creates a matcher from a string representing a set of characters.\n+     *\n+     * @param chars  the characters to match, null or empty matches nothing\n+     * @return a new Matcher for the given characters\n+     */\n+    public static StrMatcher charSetMatcher(String chars) {\n+        if (chars == null || chars.length() == 0) {\n+            return NONE_MATCHER;\n+        }\n+        if (chars.length() == 1) {\n+            return new CharMatcher(chars.charAt(0));\n+        }\n+        return new CharSetMatcher(chars.toCharArray());\n+    }\n+\n+    /**\n+     * Constructor that creates a matcher from a string.\n+     *\n+     * @param str  the string to match, null or empty matches nothing\n+     * @return a new Matcher for the given String\n+     */\n+    public static StrMatcher stringMatcher(String str) {\n+        if (str == null || str.length() == 0) {\n+            return NONE_MATCHER;\n+        }\n+        return new StringMatcher(str);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor.\n+     */\n+    protected StrMatcher() {\n+        super();\n+    }\n+\n+    /**\n+     * Returns the number of matching characters, zero for no match.\n+     * <p>\n+     * This method is called to check for a match.\n+     * The parameter <code>pos</code> represents the current position to be\n+     * checked in the string <code>buffer</code> (a character array which must\n+     * not be changed).\n+     * The API guarantees that <code>pos</code> is a valid index for <code>buffer</code>.\n+     * <p>\n+     * The character array may be larger than the active area to be matched.\n+     * Only values in the buffer between the specifed indices may be accessed.\n+     * <p>\n+     * The matching code may check one character or many.\n+     * It may check characters preceeding <code>pos</code> as well as those\n+     * after, so long as no checks exceed the bounds specified.\n+     * <p>\n+     * It must return zero for no match, or a positive number if a match was found.\n+     * The number indicates the number of characters that matched.\n+     *\n+     * @param buffer  the text content to match against, do not change\n+     * @param pos  the starting position for the match, valid for buffer\n+     * @param bufferStart  the first active index in the buffer, valid for buffer\n+     * @param bufferEnd  the end index (exclusive) of the active buffer, valid for buffer\n+     * @return the number of matching characters, zero for no match\n+     */\n+    public abstract int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd);\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Class used to define a set of characters for matching purposes.\n+     */\n+    static final class CharSetMatcher extends StrMatcher {\n+        /** The set of characters to match. */\n+        private char[] chars;\n+\n+        /**\n+         * Constructor that creates a matcher from a character array.\n+         *\n+         * @param chars  the characters to match, must not be null\n+         */\n+        CharSetMatcher(char chars[]) {\n+            super();\n+            this.chars = (char[]) chars.clone();\n+            Arrays.sort(this.chars);\n+        }\n+\n+        /**\n+         * Returns whether or not the given charatcer matches.\n+         *\n+         * @param buffer  the text content to match against, do not change\n+         * @param pos  the starting position for the match, valid for buffer\n+         * @param bufferStart  the first active index in the buffer, valid for buffer\n+         * @param bufferEnd  the end index of the active buffer, valid for buffer\n+         * @return the number of matching characters, zero for no match\n+         */\n+        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n+            return Arrays.binarySearch(chars, buffer[pos]) >= 0 ? 1 : 0;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Class used to define a character for matching purposes.\n+     */\n+    static final class CharMatcher extends StrMatcher {\n+        /** The character to match. */\n+        private char ch;\n+\n+        /**\n+         * Constructor that creates a matcher that matches a single character.\n+         *\n+         * @param ch  the character to match\n+         */\n+        CharMatcher(char ch) {\n+            super();\n+            this.ch = ch;\n+        }\n+\n+        /**\n+         * Returns whether or not the given character matches.\n+         *\n+         * @param buffer  the text content to match against, do not change\n+         * @param pos  the starting position for the match, valid for buffer\n+         * @param bufferStart  the first active index in the buffer, valid for buffer\n+         * @param bufferEnd  the end index of the active buffer, valid for buffer\n+         * @return the number of matching characters, zero for no match\n+         */\n+        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n+            return ch == buffer[pos] ? 1 : 0;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Class used to define a set of characters for matching purposes.\n+     */\n+    static final class StringMatcher extends StrMatcher {\n+        /** The string to match, as a character array. */\n+        private char[] chars;\n+\n+        /**\n+         * Constructor that creates a matcher from a String.\n+         *\n+         * @param str  the string to match, must not be null\n+         */\n+        StringMatcher(String str) {\n+            super();\n+            chars = str.toCharArray();\n+        }\n+\n+        /**\n+         * Returns whether or not the given text matches the stored string.\n+         *\n+         * @param buffer  the text content to match against, do not change\n+         * @param pos  the starting position for the match, valid for buffer\n+         * @param bufferStart  the first active index in the buffer, valid for buffer\n+         * @param bufferEnd  the end index of the active buffer, valid for buffer\n+         * @return the number of matching characters, zero for no match\n+         */\n+        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n+            int len = chars.length;\n+            if (pos + len > bufferEnd) {\n+                return 0;\n+            }\n+            for (int i = 0; i < chars.length; i++, pos++) {\n+                if (chars[i] != buffer[pos]) {\n+                    return 0;\n+                }\n+            }\n+            return len;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Class used to match no characters.\n+     */\n+    static final class NoMatcher extends StrMatcher {\n+\n+        /**\n+         * Constructs a new instance of <code>NoMatcher</code>.\n+         */\n+        NoMatcher() {\n+            super();\n+        }\n+\n+        /**\n+         * Always returns <code>false</code>.\n+         *\n+         * @param buffer  the text content to match against, do not change\n+         * @param pos  the starting position for the match, valid for buffer\n+         * @param bufferStart  the first active index in the buffer, valid for buffer\n+         * @param bufferEnd  the end index of the active buffer, valid for buffer\n+         * @return the number of matching characters, zero for no match\n+         */\n+        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n+            return 0;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Class used to match whitespace as per trim().\n+     */\n+    static final class TrimMatcher extends StrMatcher {\n+\n+        /**\n+         * Constructs a new instance of <code>TrimMatcher</code>.\n+         */\n+        TrimMatcher() {\n+            super();\n+        }\n+\n+        /**\n+         * Returns whether or not the given charatcer matches.\n+         *\n+         * @param buffer  the text content to match against, do not change\n+         * @param pos  the starting position for the match, valid for buffer\n+         * @param bufferStart  the first active index in the buffer, valid for buffer\n+         * @param bufferEnd  the end index of the active buffer, valid for buffer\n+         * @return the number of matching characters, zero for no match\n+         */\n+        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n+            return buffer[pos] <= 32 ? 1 : 0;\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang.text;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Iterator;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang.text.StrBuilder}.\n+ *\n+ * @version $Id$\n+ */\n+public class StrBuilderAppendInsertTest extends TestCase {\n+\n+    /** Test subclass of Object, with a toString method. */\n+    private static Object FOO = new Object() {\n+        public String toString() {\n+            return \"foo\";\n+        }\n+    };\n+\n+    /**\n+     * Main method.\n+     * \n+     * @param args  command line arguments, ignored\n+     */\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Return a new test suite containing this test case.\n+     * \n+     * @return a new test suite containing this test case\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StrBuilderAppendInsertTest.class);\n+        suite.setName(\"StrBuilder Tests\");\n+        return suite;\n+    }\n+\n+    /**\n+     * Create a new test case with the specified name.\n+     * \n+     * @param name  the name\n+     */\n+    public StrBuilderAppendInsertTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendWithNullText() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"NULL\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendNull();\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb.append((Object) null);\n+        assertEquals(\"NULLNULL\", sb.toString());\n+\n+        sb.append(FOO);\n+        assertEquals(\"NULLNULLfoo\", sb.toString());\n+\n+        sb.append((String) null);\n+        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n+\n+        sb.append(\"\");\n+        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n+\n+        sb.append(\"bar\");\n+        assertEquals(\"NULLNULLfooNULLbar\", sb.toString());\n+\n+        sb.append((StringBuffer) null);\n+        assertEquals(\"NULLNULLfooNULLbarNULL\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"baz\"));\n+        assertEquals(\"NULLNULLfooNULLbarNULLbaz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_Object() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendNull();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append((Object) null);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append(FOO);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((StringBuffer) null);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"baz\"));\n+        assertEquals(\"foobaz\", sb.toString());\n+\n+        sb.append(new StrBuilder(\"yes\"));\n+        assertEquals(\"foobazyes\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_String() {\n+        StrBuilder sb = new StrBuilder();\n+\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((String) null);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(\"\");\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(\"bar\");\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_String_int_int() {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        sb.append(\"foo\", 0, 3);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((String) null, 0, 1);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(\"bar\", -1, 1);\n+            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", 3, 1);\n+            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", 1, -1);\n+            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", 1, 3);\n+            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", -1, 3);\n+            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(\"bar\", 4, 0);\n+            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(\"bar\", 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(\"abcbardef\", 3, 3);\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_StringBuffer() {\n+        StrBuilder sb = new StrBuilder();\n+\n+        sb.append(new StringBuffer(\"foo\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((StringBuffer) null);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"bar\"));\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_StringBuffer_int_int() {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        sb.append(new StringBuffer(\"foo\"), 0, 3);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((StringBuffer) null, 0, 1);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), -1, 1);\n+            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), 3, 1);\n+            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), 1, -1);\n+            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), 1, 3);\n+            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), -1, 3);\n+            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), 4, 0);\n+            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(new StringBuffer(\"bar\"), 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"abcbardef\"), 3, 3);\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_StrBuilder() {\n+        StrBuilder sb = new StrBuilder();\n+\n+        sb.append(new StrBuilder(\"foo\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((StrBuilder) null);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StrBuilder(\"\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StrBuilder(\"bar\"));\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_StrBuilder_int_int() {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        sb.append(new StrBuilder(\"foo\"), 0, 3);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((StrBuilder) null, 0, 1);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), -1, 1);\n+            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), 3, 1);\n+            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), 1, -1);\n+            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), 1, 3);\n+            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), -1, 3);\n+            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), 4, 0);\n+            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(new StrBuilder(\"bar\"), 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StrBuilder(\"abcbardef\"), 3, 3);\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_CharArray() {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        sb.append((char[]) null);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append(new char[0]);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append(new char[]{'f', 'o', 'o'});\n+        assertEquals(\"foo\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_CharArray_int_int() {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        sb.append(new char[]{'f', 'o', 'o'}, 0, 3);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((char[]) null, 0, 1);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, -1, 1);\n+            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 3, 1);\n+            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 1, -1);\n+            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 1, 3);\n+            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, -1, 3);\n+            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 4, 0);\n+            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(new char[]{'b', 'a', 'r'}, 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new char[]{'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f'}, 3, 3);\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_Primitive() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(true);\n+        assertEquals(\"true\", sb.toString());\n+\n+        sb.append(false);\n+        assertEquals(\"truefalse\", sb.toString());\n+\n+        sb.append('!');\n+        assertEquals(\"truefalse!\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_PrimitiveNumber() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(0);\n+        assertEquals(\"0\", sb.toString());\n+\n+        sb.append(1L);\n+        assertEquals(\"01\", sb.toString());\n+\n+        sb.append(2.3f);\n+        assertEquals(\"012.3\", sb.toString());\n+\n+        sb.append(4.5d);\n+        assertEquals(\"012.34.5\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendPadding() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.appendPadding(-1, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.appendPadding(0, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.appendPadding(1, '-');\n+        assertEquals(\"foo-\", sb.toString());\n+\n+        sb.appendPadding(16, '-');\n+        assertEquals(20, sb.length());\n+        //            12345678901234567890\n+        assertEquals(\"foo-----------------\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendFixedWidthPadLeft() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadLeft(\"foo\", -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 1, '-');\n+        assertEquals(\"o\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 2, '-');\n+        assertEquals(\"oo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 3, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 4, '-');\n+        assertEquals(\"-foo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 10, '-');\n+        assertEquals(10, sb.length());\n+        //            1234567890\n+        assertEquals(\"-------foo\", sb.toString());\n+\n+        sb.clear();\n+        sb.setNullText(\"null\");\n+        sb.appendFixedWidthPadLeft(null, 5, '-');\n+        assertEquals(\"-null\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendFixedWidthPadLeft_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadLeft(123, -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 1, '-');\n+        assertEquals(\"3\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 2, '-');\n+        assertEquals(\"23\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 3, '-');\n+        assertEquals(\"123\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 4, '-');\n+        assertEquals(\"-123\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 10, '-');\n+        assertEquals(10, sb.length());\n+        //            1234567890\n+        assertEquals(\"-------123\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendFixedWidthPadRight() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadRight(\"foo\", -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 1, '-');\n+        assertEquals(\"f\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 2, '-');\n+        assertEquals(\"fo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 3, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 4, '-');\n+        assertEquals(\"foo-\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 10, '-');\n+        assertEquals(10, sb.length());\n+        //            1234567890\n+        assertEquals(\"foo-------\", sb.toString());\n+\n+        sb.clear();\n+        sb.setNullText(\"null\");\n+        sb.appendFixedWidthPadRight(null, 5, '-');\n+        assertEquals(\"null-\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendFixedWidthPadRight_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadRight(123, -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 1, '-');\n+        assertEquals(\"1\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 2, '-');\n+        assertEquals(\"12\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 3, '-');\n+        assertEquals(\"123\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 4, '-');\n+        assertEquals(\"123-\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 10, '-');\n+        assertEquals(10, sb.length());\n+        //            1234567890\n+        assertEquals(\"123-------\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendWithSeparators_Array() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendWithSeparators((Object[]) null, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(new Object[0], \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, \",\");\n+        assertEquals(\"foo,bar,baz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, null);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n+        assertEquals(\"foo,,baz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendWithSeparators_Collection() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendWithSeparators((Collection) null, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Collections.EMPTY_LIST, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), \",\");\n+        assertEquals(\"foo,bar,baz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), null);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n+        assertEquals(\"foo,,baz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendWithSeparators_Iterator() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendWithSeparators((Iterator) null, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), \",\");\n+        assertEquals(\"foo,bar,baz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), null);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}).iterator(), \",\");\n+        assertEquals(\"foo,,baz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendWithSeparatorsWithNullText() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"null\");\n+        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n+        assertEquals(\"foo,null,baz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n+        assertEquals(\"foo,null,baz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testInsert() {\n+\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, FOO);\n+            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, FOO);\n+            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (Object) null);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, FOO);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, \"foo\");\n+            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, \"foo\");\n+            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (String) null);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, \"foo\");\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, new char[]{'f', 'o', 'o'});\n+            fail(\"insert(-1, char[]) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, new char[]{'f', 'o', 'o'});\n+            fail(\"insert(7, char[]) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (char[]) null);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, new char[0]);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, new char[]{'f', 'o', 'o'});\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n+            fail(\"insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n+            fail(\"insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (char[]) null, 0, 0);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, new char[0], 0, 0);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3);\n+            fail(\"insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3);\n+            fail(\"insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1);\n+            fail(\"insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10);\n+            fail(\"insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, true);\n+            fail(\"insert(-1, boolean) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, true);\n+            fail(\"insert(7, boolean) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, true);\n+        assertEquals(\"truebarbaz\", sb.toString());\n+\n+        sb.insert(0, false);\n+        assertEquals(\"falsetruebarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, '!');\n+            fail(\"insert(-1, char) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, '!');\n+            fail(\"insert(7, char) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, '!');\n+        assertEquals(\"!barbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, 0);\n+            fail(\"insert(-1, int) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, 0);\n+            fail(\"insert(7, int) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, '0');\n+        assertEquals(\"0barbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, 1L);\n+            fail(\"insert(-1, long) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, 1L);\n+            fail(\"insert(7, long) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, 1L);\n+        assertEquals(\"1barbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, 2.3F);\n+            fail(\"insert(-1, float) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, 2.3F);\n+            fail(\"insert(7, float) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, 2.3F);\n+        assertEquals(\"2.3barbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, 4.5D);\n+            fail(\"insert(-1, double) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, 4.5D);\n+            fail(\"insert(7, double) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, 4.5D);\n+        assertEquals(\"4.5barbaz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testInsertWithNullText() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"null\");\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, FOO);\n+            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, FOO);\n+            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (Object) null);\n+        assertEquals(\"nullbarbaz\", sb.toString());\n+\n+        sb.insert(0, FOO);\n+        assertEquals(\"foonullbarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, \"foo\");\n+            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, \"foo\");\n+            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (String) null);\n+        assertEquals(\"nullbarbaz\", sb.toString());\n+\n+        sb.insert(0, \"foo\");\n+        assertEquals(\"foonullbarbaz\", sb.toString());\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n import java.io.Reader;\n import java.io.Writer;\n import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Iterator;\n-\n-import org.apache.commons.lang.ArrayUtils;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n+\n+import org.apache.commons.lang.ArrayUtils;\n \n /**\n  * Unit tests for {@link org.apache.commons.lang.text.StrBuilder}.\n  * @version $Id$\n  */\n public class StrBuilderTest extends TestCase {\n-\n-    /** Test subclass of Object, with a toString method. */\n-    private static Object FOO = new Object() {\n-        public String toString() {\n-            return \"foo\";\n-        }\n-    };\n \n     /**\n      * Main method.\n         assertEquals(3, sb7.size());\n     }\n \n-    public void testDeleteChar() {\n-        StrBuilder sb = new StrBuilder(\"abc\");\n-        sb.delete('X');\n-        assertEquals(\"abc\",sb.toString()); \n-        sb.delete('a');\n-        assertEquals(\"bc\",sb.toString()); \n-        sb.delete('c');\n-        assertEquals(\"b\",sb.toString()); \n-        sb.delete('b');\n-        assertEquals(\"\",sb.toString()); \n-    }\n-    \n-    public void testDeleteIntInt() {\n-        StrBuilder sb = new StrBuilder(\"abc\");\n-        sb.delete(0, 1);\n-        assertEquals(\"bc\",sb.toString()); \n-        sb.delete(1, 2);\n-        assertEquals(\"b\",sb.toString());\n-        sb.delete(0, 1);\n-        assertEquals(\"\",sb.toString()); \n-        sb.delete(0, 1);\n-        assertEquals(\"\",sb.toString()); \n-    }\n-    \n-    public void testDeleteString() {\n-        StrBuilder sb = new StrBuilder(\"abc\");\n-        sb.delete(null);\n-        assertEquals(\"abc\",sb.toString()); \n-        sb.delete(\"\");\n-        assertEquals(\"abc\",sb.toString()); \n-        sb.delete(\"X\");\n-        assertEquals(\"abc\",sb.toString()); \n-        sb.delete(\"a\");\n-        assertEquals(\"bc\",sb.toString()); \n-        sb.delete(\"c\");\n-        assertEquals(\"b\",sb.toString()); \n-        sb.delete(\"b\");\n-        assertEquals(\"\",sb.toString()); \n-    }\n-    \n-    public void testDeleteCharAt() {\n-        StrBuilder sb = new StrBuilder(\"abc\");\n-        sb.deleteCharAt(0);\n-        assertEquals(\"bc\",sb.toString()); \n-    }\n-    \n-    public void testDeleteCharAtExceptions() {\n-        StrBuilder sb = new StrBuilder(\"abc\");\n-        try {\n-            sb.deleteCharAt(1000);\n-            fail(\"Expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // Expected\n-        }\n-    }\n-    \n     //-----------------------------------------------------------------------\n     public void testCapacityAndLength() {\n         StrBuilder sb = new StrBuilder();\n         }\n     }\n \n-    /**\n-     * Tests {@link StrBuilder#replace(char, char)}.\n-     */\n-    public void testReplaceCharChar() {\n-        StrBuilder sb = new StrBuilder(\"abc\");\n-        sb.replace('a', 'd');\n-        assertEquals(\"dbc\", sb.toString());\n-        sb.replace('a', 'd');\n-        assertEquals(\"dbc\", sb.toString());\n-        \n-        sb = new StrBuilder(\"aabbcc\");\n-        sb.replace('a', 'd');\n-        assertEquals(\"ddbbcc\", sb.toString());\n-        sb.replace('a', 'd');\n-        assertEquals(\"ddbbcc\", sb.toString());\n-        sb.replace('d', 'd');\n-        assertEquals(\"ddbbcc\", sb.toString());\n-    }\n-    \n-    /**\n-     * Tests {@link StrBuilder#replace(String, String)}.\n-     */\n-    public void testReplaceStringString() {\n-        StrBuilder sb = new StrBuilder(\"abc\");\n-        sb.replace(\"a\", \"d\");\n-        assertEquals(\"dbc\", sb.toString());\n-        sb.replace(\"a\", \"d\");\n-        assertEquals(\"dbc\", sb.toString());\n-        \n-        sb = new StrBuilder(\"aabbcc\");\n-        sb.replace(\"a\", \"d\");\n-        assertEquals(\"ddbbcc\", sb.toString());\n-        sb.replace(\"a\", \"d\");\n-        assertEquals(\"ddbbcc\", sb.toString());\n-    }\n-    \n-    public void testReplaceIntIntStrBuilder() {\n-        StrBuilder sb = new StrBuilder(\"abc\");\n-        sb.replace(0, 1, new StrBuilder (\"d\"));\n-        assertEquals(\"dbc\", sb.toString());\n-        sb.replace(0, 1, new StrBuilder (\"aaa\"));\n-        assertEquals(\"aaabc\", sb.toString());\n-        \n-        sb = new StrBuilder(\"aabbcc\");\n-        sb.replace(0, 2, new StrBuilder(\"d\"));\n-        assertEquals(\"dbbcc\", sb.toString());\n-    }\n-    \n+    //-----------------------------------------------------------------------\n     public void testSetCharAt() {\n         StrBuilder sb = new StrBuilder();\n         try {\n         assertEquals(\"bar\", sb.toString());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testDeleteCharAt() {\n+        StrBuilder sb = new StrBuilder(\"abc\");\n+        sb.deleteCharAt(0);\n+        assertEquals(\"bc\", sb.toString()); \n+        \n+        try {\n+            sb.deleteCharAt(1000);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToCharArray() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray());\n+\n+        char[] a = sb.toCharArray();\n+        assertNotNull(\"toCharArray() result is null\", a);\n+        assertEquals(\"toCharArray() result is too large\", 0, a.length);\n+\n+        sb.append(\"junit\");\n+        a = sb.toCharArray();\n+        assertEquals(\"toCharArray() result incorrect length\", 5, a.length);\n+        assertTrue(\"toCharArray() result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n+    }\n+\n+    public void testToCharArrayIntInt() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0));\n+\n+        sb.append(\"junit\");\n+        char[] a = sb.toCharArray(0, 20); // too large test\n+        assertEquals(\"toCharArray(int,int) result incorrect length\", 5, a.length);\n+        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"junit\".toCharArray(), a));\n+\n+        a = sb.toCharArray(0, 4);\n+        assertEquals(\"toCharArray(int,int) result incorrect length\", 4, a.length);\n+        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"juni\".toCharArray(), a));\n+\n+        a = sb.toCharArray(0, 4);\n+        assertEquals(\"toCharArray(int,int) result incorrect length\", 4, a.length);\n+        assertTrue(\"toCharArray(int,int) result does not match\", Arrays.equals(\"juni\".toCharArray(), a));\n+\n+        a = sb.toCharArray(0, 1);\n+        assertNotNull(\"toCharArray(int,int) result is null\", a);\n+\n+        try {\n+            sb.toCharArray(-1, 5);\n+            fail(\"no string index out of bound on -1\");\n+        } catch (IndexOutOfBoundsException e) {\n+        }\n+\n+        try {\n+            sb.toCharArray(6, 5);\n+            fail(\"no string index out of bound on -1\");\n+        } catch (IndexOutOfBoundsException e) {\n+        }\n+    }\n+\n+    public void testGetChars ( ) {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        char[] input = new char[10];\n+        char[] a = sb.getChars(input);\n+        assertSame (input, a);\n+        assertTrue(Arrays.equals(new char[10], a));\n+        \n+        sb.append(\"junit\");\n+        a = sb.getChars(input);\n+        assertSame(input, a);\n+        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a));\n+        \n+        a = sb.getChars(null);\n+        assertNotSame(input,a);\n+        assertEquals(5,a.length);\n+        assertTrue(Arrays.equals(\"junit\".toCharArray(),a));\n+        \n+        input = new char[5];\n+        a = sb.getChars(input);\n+        assertSame(input, a);\n+        \n+        input = new char[4];\n+        a = sb.getChars(input);\n+        assertNotSame(input, a);\n+    }\n+\n+    public void testGetCharsIntIntCharArrayInt( ) {\n+        StrBuilder sb = new StrBuilder();\n+               \n+        sb.append(\"junit\");\n+        char[] a = new char[5];\n+        sb.getChars(0,5,a,0);\n+        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a));\n+        \n+        a = new char[5];\n+        sb.getChars(0,2,a,3);\n+        assertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a));\n+        \n+        try {\n+            sb.getChars(-1,0,a,0);\n+            fail(\"no exception\");\n+        }\n+        catch (IndexOutOfBoundsException e) {\n+        }\n+        \n+        try {\n+            sb.getChars(0,-1,a,0);\n+            fail(\"no exception\");\n+        }\n+        catch (IndexOutOfBoundsException e) {\n+        }\n+        \n+        try {\n+            sb.getChars(0,20,a,0);\n+            fail(\"no exception\");\n+        }\n+        catch (IndexOutOfBoundsException e) {\n+        }\n+        \n+        try {\n+            sb.getChars(4,2,a,0);\n+            fail(\"no exception\");\n+        }\n+        catch (IndexOutOfBoundsException e) {\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNullText() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(null, sb.getNullText());\n+\n+        sb.setNullText(\"null\");\n+        assertEquals(\"null\", sb.getNullText());\n+\n+        sb.setNullText(\"\");\n+        assertEquals(null, sb.getNullText());\n+\n+        sb.setNullText(\"NULL\");\n+        assertEquals(\"NULL\", sb.getNullText());\n+\n+        sb.setNullText((String) null);\n+        assertEquals(null, sb.getNullText());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDeleteIntInt() {\n+        StrBuilder sb = new StrBuilder(\"abc\");\n+        sb.delete(0, 1);\n+        assertEquals(\"bc\", sb.toString()); \n+        sb.delete(1, 2);\n+        assertEquals(\"b\", sb.toString());\n+        sb.delete(0, 1);\n+        assertEquals(\"\", sb.toString()); \n+        sb.delete(0, 1000);\n+        assertEquals(\"\", sb.toString()); \n+        \n+        try {\n+            sb.delete(1, 2);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            sb.delete(-1, 1);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        \n+        sb = new StrBuilder(\"anything\");\n+        try {\n+            sb.delete(2, 1);\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDeleteAll_char() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.deleteAll('X');\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.deleteAll('a');\n+        assertEquals(\"bcbccb\", sb.toString());\n+        sb.deleteAll('c');\n+        assertEquals(\"bbb\", sb.toString());\n+        sb.deleteAll('b');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb = new StrBuilder(\"\");\n+        sb.deleteAll('b');\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    public void testDeleteFirst_char() {\n+        StrBuilder sb = new StrBuilder(\"abcba\");\n+        sb.deleteFirst('X');\n+        assertEquals(\"abcba\", sb.toString());\n+        sb.deleteFirst('a');\n+        assertEquals(\"bcba\", sb.toString());\n+        sb.deleteFirst('c');\n+        assertEquals(\"bba\", sb.toString());\n+        sb.deleteFirst('b');\n+        assertEquals(\"ba\", sb.toString());\n+\n+        sb = new StrBuilder(\"\");\n+        sb.deleteFirst('b');\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testDeleteAll_String() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.deleteAll((String) null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.deleteAll(\"\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb.deleteAll(\"X\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.deleteAll(\"a\");\n+        assertEquals(\"bcbccb\", sb.toString());\n+        sb.deleteAll(\"c\");\n+        assertEquals(\"bbb\", sb.toString());\n+        sb.deleteAll(\"b\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb = new StrBuilder(\"abcbccba\");\n+        sb.deleteAll(\"bc\");\n+        assertEquals(\"acba\", sb.toString());\n+\n+        sb = new StrBuilder(\"\");\n+        sb.deleteAll(\"bc\");\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    public void testDeleteFirst_String() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.deleteFirst((String) null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.deleteFirst(\"\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+\n+        sb.deleteFirst(\"X\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.deleteFirst(\"a\");\n+        assertEquals(\"bcbccba\", sb.toString());\n+        sb.deleteFirst(\"c\");\n+        assertEquals(\"bbccba\", sb.toString());\n+        sb.deleteFirst(\"b\");\n+        assertEquals(\"bccba\", sb.toString());\n+\n+        sb = new StrBuilder(\"abcbccba\");\n+        sb.deleteFirst(\"bc\");\n+        assertEquals(\"abccba\", sb.toString());\n+\n+        sb = new StrBuilder(\"\");\n+        sb.deleteFirst(\"bc\");\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testDeleteAll_StrMatcher() {\n+        StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\n+        sb.deleteAll((StrMatcher) null);\n+        assertEquals(\"A0xA1A2yA3\", sb.toString());\n+        sb.deleteAll(A_NUMBER_MATCHER);\n+        assertEquals(\"xy\", sb.toString());\n+\n+        sb = new StrBuilder(\"Ax1\");\n+        sb.deleteAll(A_NUMBER_MATCHER);\n+        assertEquals(\"Ax1\", sb.toString());\n+\n+        sb = new StrBuilder(\"\");\n+        sb.deleteAll(A_NUMBER_MATCHER);\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    public void testDeleteFirst_StrMatcher() {\n+        StrBuilder sb = new StrBuilder(\"A0xA1A2yA3\");\n+        sb.deleteFirst((StrMatcher) null);\n+        assertEquals(\"A0xA1A2yA3\", sb.toString());\n+        sb.deleteFirst(A_NUMBER_MATCHER);\n+        assertEquals(\"xA1A2yA3\", sb.toString());\n+\n+        sb = new StrBuilder(\"Ax1\");\n+        sb.deleteFirst(A_NUMBER_MATCHER);\n+        assertEquals(\"Ax1\", sb.toString());\n+\n+        sb = new StrBuilder(\"\");\n+        sb.deleteFirst(A_NUMBER_MATCHER);\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testReplace_int_int_String() {\n+        StrBuilder sb = new StrBuilder(\"abc\");\n+        sb.replace(0, 1, \"d\");\n+        assertEquals(\"dbc\", sb.toString());\n+        sb.replace(0, 1, \"aaa\");\n+        assertEquals(\"aaabc\", sb.toString());\n+        sb.replace(0, 3, \"\");\n+        assertEquals(\"bc\", sb.toString());\n+        sb.replace(1, 2, (String) null);\n+        assertEquals(\"b\", sb.toString());\n+        sb.replace(1, 1000, \"text\");\n+        assertEquals(\"btext\", sb.toString());\n+        sb.replace(0, 1000, \"text\");\n+        assertEquals(\"text\", sb.toString());\n+        \n+        sb = new StrBuilder(\"atext\");\n+        sb.replace(1, 1, \"ny\");\n+        assertEquals(\"anytext\", sb.toString());\n+        try {\n+            sb.replace(2, 1, \"anything\");\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        \n+        sb = new StrBuilder();\n+        try {\n+            sb.replace(1, 2, \"anything\");\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+        try {\n+            sb.replace(-1, 1, \"anything\");\n+            fail(\"Expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReplaceAll_char_char() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replaceAll('x', 'y');\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll('a', 'd');\n+        assertEquals(\"dbcbccbd\", sb.toString());\n+        sb.replaceAll('b', 'e');\n+        assertEquals(\"dececced\", sb.toString());\n+        sb.replaceAll('c', 'f');\n+        assertEquals(\"defeffed\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReplaceFirst_char_char() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replaceFirst('x', 'y');\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst('a', 'd');\n+        assertEquals(\"dbcbccba\", sb.toString());\n+        sb.replaceFirst('b', 'e');\n+        assertEquals(\"decbccba\", sb.toString());\n+        sb.replaceFirst('c', 'f');\n+        assertEquals(\"defbccba\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReplaceAll_String_String() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replaceAll((String) null, null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll((String) null, \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll(\"\", null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll(\"\", \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb.replaceAll(\"x\", \"y\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll(\"a\", \"d\");\n+        assertEquals(\"dbcbccbd\", sb.toString());\n+        sb.replaceAll(\"d\", null);\n+        assertEquals(\"bcbccb\", sb.toString());\n+        sb.replaceAll(\"cb\", \"-\");\n+        assertEquals(\"b-c-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcba\");\n+        sb.replaceAll(\"b\", \"xbx\");\n+        assertEquals(\"axbxcxbxa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"bb\");\n+        sb.replaceAll(\"b\", \"xbx\");\n+        assertEquals(\"xbxxbx\", sb.toString());\n+    }\n+\n+    public void testReplaceFirst_String_String() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replaceFirst((String) null, null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst((String) null, \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst(\"\", null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst(\"\", \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb.replaceFirst(\"x\", \"y\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst(\"a\", \"d\");\n+        assertEquals(\"dbcbccba\", sb.toString());\n+        sb.replaceFirst(\"d\", null);\n+        assertEquals(\"bcbccba\", sb.toString());\n+        sb.replaceFirst(\"cb\", \"-\");\n+        assertEquals(\"b-ccba\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcba\");\n+        sb.replaceFirst(\"b\", \"xbx\");\n+        assertEquals(\"axbxcba\", sb.toString());\n+        \n+        sb = new StrBuilder(\"bb\");\n+        sb.replaceFirst(\"b\", \"xbx\");\n+        assertEquals(\"xbxb\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReplaceAll_StrMatcher_String() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replaceAll((StrMatcher) null, null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll((StrMatcher) null, \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll(StrMatcher.noneMatcher(), null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll(StrMatcher.noneMatcher(), \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb.replaceAll(StrMatcher.charMatcher('x'), \"y\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceAll(StrMatcher.charMatcher('a'), \"d\");\n+        assertEquals(\"dbcbccbd\", sb.toString());\n+        sb.replaceAll(StrMatcher.charMatcher('d'), null);\n+        assertEquals(\"bcbccb\", sb.toString());\n+        sb.replaceAll(StrMatcher.stringMatcher(\"cb\"), \"-\");\n+        assertEquals(\"b-c-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcba\");\n+        sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\n+        assertEquals(\"axbxcxbxa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"bb\");\n+        sb.replaceAll(StrMatcher.charMatcher('b'), \"xbx\");\n+        assertEquals(\"xbxxbx\", sb.toString());\n+        \n+        sb = new StrBuilder(\"A1-A2A3-A4\");\n+        sb.replaceAll(A_NUMBER_MATCHER, \"***\");\n+        assertEquals(\"***-******-***\", sb.toString());\n+    }\n+\n+    public void testReplaceFirst_StrMatcher_String() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replaceFirst((StrMatcher) null, null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst((StrMatcher) null, \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst(StrMatcher.noneMatcher(), null);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst(StrMatcher.noneMatcher(), \"anything\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb.replaceFirst(StrMatcher.charMatcher('x'), \"y\");\n+        assertEquals(\"abcbccba\", sb.toString());\n+        sb.replaceFirst(StrMatcher.charMatcher('a'), \"d\");\n+        assertEquals(\"dbcbccba\", sb.toString());\n+        sb.replaceFirst(StrMatcher.charMatcher('d'), null);\n+        assertEquals(\"bcbccba\", sb.toString());\n+        sb.replaceFirst(StrMatcher.stringMatcher(\"cb\"), \"-\");\n+        assertEquals(\"b-ccba\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcba\");\n+        sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\n+        assertEquals(\"axbxcba\", sb.toString());\n+        \n+        sb = new StrBuilder(\"bb\");\n+        sb.replaceFirst(StrMatcher.charMatcher('b'), \"xbx\");\n+        assertEquals(\"xbxb\", sb.toString());\n+        \n+        sb = new StrBuilder(\"A1-A2A3-A4\");\n+        sb.replaceFirst(A_NUMBER_MATCHER, \"***\");\n+        assertEquals(\"***-A2A3-A4\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReplace_StrMatcher_String_int_int_int_VaryMatcher() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replace((StrMatcher) null, \"x\", 0, sb.length(), -1);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb.replace(StrMatcher.charMatcher('a'), \"x\", 0, sb.length(), -1);\n+        assertEquals(\"xbcbccbx\", sb.toString());\n+        \n+        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"x\", 0, sb.length(), -1);\n+        assertEquals(\"xbxcxx\", sb.toString());\n+        \n+        sb = new StrBuilder(\"A1-A2A3-A4\");\n+        sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\n+        assertEquals(\"***-******-***\", sb.toString());\n+        \n+        sb = new StrBuilder();\n+        sb.replace(A_NUMBER_MATCHER, \"***\", 0, sb.length(), -1);\n+        assertEquals(\"\", sb.toString());\n+    }\n+\n+    public void testReplace_StrMatcher_String_int_int_int_VaryReplace() {\n+        StrBuilder sb = new StrBuilder(\"abcbccba\");\n+        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"cb\", 0, sb.length(), -1);\n+        assertEquals(\"abcbccba\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcbccba\");\n+        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"-\", 0, sb.length(), -1);\n+        assertEquals(\"ab-c-a\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcbccba\");\n+        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"+++\", 0, sb.length(), -1);\n+        assertEquals(\"ab+++c+++a\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcbccba\");\n+        sb.replace(StrMatcher.stringMatcher(\"cb\"), \"\", 0, sb.length(), -1);\n+        assertEquals(\"abca\", sb.toString());\n+        \n+        sb = new StrBuilder(\"abcbccba\");\n+        sb.replace(StrMatcher.stringMatcher(\"cb\"), null, 0, sb.length(), -1);\n+        assertEquals(\"abca\", sb.toString());\n+    }\n+\n+    public void testReplace_StrMatcher_String_int_int_int_VaryStartIndex() {\n+        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, sb.length(), -1);\n+        assertEquals(\"-x--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 1, sb.length(), -1);\n+        assertEquals(\"aax--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, sb.length(), -1);\n+        assertEquals(\"aax--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 3, sb.length(), -1);\n+        assertEquals(\"aax--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 4, sb.length(), -1);\n+        assertEquals(\"aaxa-ay-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 5, sb.length(), -1);\n+        assertEquals(\"aaxaa-y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 6, sb.length(), -1);\n+        assertEquals(\"aaxaaaay-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 7, sb.length(), -1);\n+        assertEquals(\"aaxaaaay-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 8, sb.length(), -1);\n+        assertEquals(\"aaxaaaay-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 9, sb.length(), -1);\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 10, sb.length(), -1);\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        try {\n+            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 11, sb.length(), -1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        try {\n+            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", -1, sb.length(), -1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+    }\n+\n+    public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex() {\n+        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 0, -1);\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 2, -1);\n+        assertEquals(\"-xaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 3, -1);\n+        assertEquals(\"-xaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 4, -1);\n+        assertEquals(\"-xaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 5, -1);\n+        assertEquals(\"-x-aayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 6, -1);\n+        assertEquals(\"-x-aayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 7, -1);\n+        assertEquals(\"-x--yaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 8, -1);\n+        assertEquals(\"-x--yaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 9, -1);\n+        assertEquals(\"-x--yaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\n+        assertEquals(\"-x--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 1000, -1);\n+        assertEquals(\"-x--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        try {\n+            sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 2, 1, -1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+    }\n+\n+    public void testReplace_StrMatcher_String_int_int_int_VaryCount() {\n+        StrBuilder sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, -1);\n+        assertEquals(\"-x--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 0);\n+        assertEquals(\"aaxaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 1);\n+        assertEquals(\"-xaaaayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 2);\n+        assertEquals(\"-x-aayaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 3);\n+        assertEquals(\"-x--yaa\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 4);\n+        assertEquals(\"-x--y-\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aaxaaaayaa\");\n+        sb.replace(StrMatcher.stringMatcher(\"aa\"), \"-\", 0, 10, 5);\n+        assertEquals(\"-x--y-\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReverse() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(\"\", sb.reverse().toString());\n+        sb.append(true);\n+        assertEquals(\"eurt\", sb.reverse().toString());\n+        assertEquals(\"true\", sb.reverse().toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testStartsWith() {\n-        this.testStartsWith(new StrBuilder());\n-        this.testStartsWith(new StrBuilder(\"\"));\n-        this.testStartsWith(new StrBuilder(null));\n-    }\n-    \n-    void testStartsWith(StrBuilder sb ) {\n+        StrBuilder sb = new StrBuilder();\n         assertFalse(sb.startsWith(\"a\"));\n         assertFalse(sb.startsWith(null));\n         assertTrue(sb.startsWith(\"\"));\n         assertTrue(sb.startsWith(\"abc\"));\n         assertFalse(sb.startsWith(\"cba\"));\n     }\n-    \n+\n     public void testEndsWith() {\n-        this.testEndsWith(new StrBuilder());\n-        this.testEndsWith(new StrBuilder(\"\"));\n-        this.testEndsWith(new StrBuilder(null));\n-    }\n-    \n-    void testEndsWith(StrBuilder sb) {\n+        StrBuilder sb = new StrBuilder();\n         assertFalse(sb.endsWith(\"a\"));\n         assertFalse(sb.endsWith(\"c\"));\n         assertTrue(sb.endsWith(\"\"));\n         assertFalse(sb.endsWith(\" abc\"));\n         assertFalse(sb.endsWith(\"abc \"));\n     }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testNullText() {\n-        StrBuilder sb = new StrBuilder();\n-        assertEquals(null, sb.getNullText());\n-\n-        sb.setNullText(\"null\");\n-        assertEquals(\"null\", sb.getNullText());\n-\n-        sb.setNullText(\"\");\n-        assertEquals(null, sb.getNullText());\n-\n-        sb.setNullText(\"NULL\");\n-        assertEquals(\"NULL\", sb.getNullText());\n-\n-        sb.setNullText((String) null);\n-        assertEquals(null, sb.getNullText());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testAppendWithNullText() {\n-        StrBuilder sb = new StrBuilder();\n-        sb.setNullText(\"NULL\");\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendNull();\n-        assertEquals(\"NULL\", sb.toString());\n-\n-        sb.append((Object) null);\n-        assertEquals(\"NULLNULL\", sb.toString());\n-\n-        sb.append(FOO);\n-        assertEquals(\"NULLNULLfoo\", sb.toString());\n-\n-        sb.append((String) null);\n-        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n-\n-        sb.append(\"\");\n-        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n-\n-        sb.append(\"bar\");\n-        assertEquals(\"NULLNULLfooNULLbar\", sb.toString());\n-\n-        sb.append((StringBuffer) null);\n-        assertEquals(\"NULLNULLfooNULLbarNULL\", sb.toString());\n-\n-        sb.append(new StringBuffer(\"baz\"));\n-        assertEquals(\"NULLNULLfooNULLbarNULLbaz\", sb.toString());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testAppend_Object() {\n-        StrBuilder sb = new StrBuilder();\n-        sb.appendNull();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.append((Object) null);\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.append(FOO);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((StringBuffer) null);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(new StringBuffer(\"baz\"));\n-        assertEquals(\"foobaz\", sb.toString());\n-\n-        sb.append(new StrBuilder(\"yes\"));\n-        assertEquals(\"foobazyes\", sb.toString());\n-    }\n-\n-    public void testAppend_String() {\n-        StrBuilder sb = new StrBuilder();\n-\n-        sb.append(\"foo\");\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((String) null);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(\"\");\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(\"bar\");\n-        assertEquals(\"foobar\", sb.toString());\n-    }\n-\n-    public void testAppend_String_int_int() {\n-        StrBuilder sb = new StrBuilder();\n-        \n-        sb.append(\"foo\", 0, 3);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((String) null, 0, 1);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        try {\n-            sb.append(\"bar\", -1, 1);\n-            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(\"bar\", 3, 1);\n-            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(\"bar\", 1, -1);\n-            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(\"bar\", 1, 3);\n-            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(\"bar\", -1, 3);\n-            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(\"bar\", 4, 0);\n-            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.append(\"bar\", 3, 0);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(\"abcbardef\", 3, 3);\n-        assertEquals(\"foobar\", sb.toString());\n-    }\n-\n-    public void testAppend_StringBuffer() {\n-        StrBuilder sb = new StrBuilder();\n-\n-        sb.append(new StringBuffer(\"foo\"));\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((StringBuffer) null);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(new StringBuffer(\"\"));\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(new StringBuffer(\"bar\"));\n-        assertEquals(\"foobar\", sb.toString());\n-    }\n-\n-    public void testAppend_StringBuffer_int_int() {\n-        StrBuilder sb = new StrBuilder();\n-        \n-        sb.append(new StringBuffer(\"foo\"), 0, 3);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((StringBuffer) null, 0, 1);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        try {\n-            sb.append(new StringBuffer(\"bar\"), -1, 1);\n-            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new StringBuffer(\"bar\"), 3, 1);\n-            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new StringBuffer(\"bar\"), 1, -1);\n-            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new StringBuffer(\"bar\"), 1, 3);\n-            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new StringBuffer(\"bar\"), -1, 3);\n-            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new StringBuffer(\"bar\"), 4, 0);\n-            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.append(new StringBuffer(\"bar\"), 3, 0);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(new StringBuffer(\"abcbardef\"), 3, 3);\n-        assertEquals(\"foobar\", sb.toString());\n-    }\n-\n-    public void testAppend_StrBuilder() {\n-        StrBuilder sb = new StrBuilder();\n-\n-        sb.append(new StrBuilder(\"foo\"));\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((StrBuilder) null);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(new StrBuilder(\"\"));\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(new StrBuilder(\"bar\"));\n-        assertEquals(\"foobar\", sb.toString());\n-    }\n-\n-    public void testAppend_StrBuilder_int_int() {\n-        StrBuilder sb = new StrBuilder();\n-        \n-        sb.append(new StrBuilder(\"foo\"), 0, 3);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((StrBuilder) null, 0, 1);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        try {\n-            sb.append(new StrBuilder(\"bar\"), -1, 1);\n-            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new StrBuilder(\"bar\"), 3, 1);\n-            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new StrBuilder(\"bar\"), 1, -1);\n-            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new StrBuilder(\"bar\"), 1, 3);\n-            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new StrBuilder(\"bar\"), -1, 3);\n-            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new StrBuilder(\"bar\"), 4, 0);\n-            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.append(new StrBuilder(\"bar\"), 3, 0);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(new StrBuilder(\"abcbardef\"), 3, 3);\n-        assertEquals(\"foobar\", sb.toString());\n-    }\n-\n-    public void testAppend_CharArray() {\n-        StrBuilder sb = new StrBuilder();\n-        \n-        sb.append((char[]) null);\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.append(new char[0]);\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.append(new char[]{'f', 'o', 'o'});\n-        assertEquals(\"foo\", sb.toString());\n-    }\n-\n-    public void testAppend_CharArray_int_int() {\n-        StrBuilder sb = new StrBuilder();\n-        \n-        sb.append(new char[]{'f', 'o', 'o'}, 0, 3);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((char[]) null, 0, 1);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        try {\n-            sb.append(new char[]{'b', 'a', 'r'}, -1, 1);\n-            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new char[]{'b', 'a', 'r'}, 3, 1);\n-            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new char[]{'b', 'a', 'r'}, 1, -1);\n-            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new char[]{'b', 'a', 'r'}, 1, 3);\n-            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new char[]{'b', 'a', 'r'}, -1, 3);\n-            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new char[]{'b', 'a', 'r'}, 4, 0);\n-            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.append(new char[]{'b', 'a', 'r'}, 3, 0);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(new char[]{'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f'}, 3, 3);\n-        assertEquals(\"foobar\", sb.toString());\n-    }\n-\n-    public void testAppend_Primitive() {\n-        StrBuilder sb = new StrBuilder();\n-        sb.append(true);\n-        assertEquals(\"true\", sb.toString());\n-\n-        sb.append(false);\n-        assertEquals(\"truefalse\", sb.toString());\n-\n-        sb.append('!');\n-        assertEquals(\"truefalse!\", sb.toString());\n-    }\n-\n-    public void testAppend_PrimitiveNumber() {\n-        StrBuilder sb = new StrBuilder();\n-        sb.append(0);\n-        assertEquals(\"0\", sb.toString());\n-\n-        sb.append(1L);\n-        assertEquals(\"01\", sb.toString());\n-\n-        sb.append(2.3f);\n-        assertEquals(\"012.3\", sb.toString());\n-\n-        sb.append(4.5d);\n-        assertEquals(\"012.34.5\", sb.toString());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testAppendPadding() {\n-        StrBuilder sb = new StrBuilder();\n-        sb.append(\"foo\");\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.appendPadding(-1, '-');\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.appendPadding(0, '-');\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.appendPadding(1, '-');\n-        assertEquals(\"foo-\", sb.toString());\n-\n-        sb.appendPadding(16, '-');\n-        assertEquals(20, sb.length());\n-        //            12345678901234567890\n-        assertEquals(\"foo-----------------\", sb.toString());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testAppendFixedWidthPadLeft() {\n-        StrBuilder sb = new StrBuilder();\n-        sb.appendFixedWidthPadLeft(\"foo\", -1, '-');\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadLeft(\"foo\", 0, '-');\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadLeft(\"foo\", 1, '-');\n-        assertEquals(\"o\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadLeft(\"foo\", 2, '-');\n-        assertEquals(\"oo\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadLeft(\"foo\", 3, '-');\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadLeft(\"foo\", 4, '-');\n-        assertEquals(\"-foo\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadLeft(\"foo\", 10, '-');\n-        assertEquals(10, sb.length());\n-        //            1234567890\n-        assertEquals(\"-------foo\", sb.toString());\n-\n-        sb.clear();\n-        sb.setNullText(\"null\");\n-        sb.appendFixedWidthPadLeft(null, 5, '-');\n-        assertEquals(\"-null\", sb.toString());\n-    }\n-\n-    public void testAppendFixedWidthPadLeft_int() {\n-        StrBuilder sb = new StrBuilder();\n-        sb.appendFixedWidthPadLeft(123, -1, '-');\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadLeft(123, 0, '-');\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadLeft(123, 1, '-');\n-        assertEquals(\"3\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadLeft(123, 2, '-');\n-        assertEquals(\"23\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadLeft(123, 3, '-');\n-        assertEquals(\"123\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadLeft(123, 4, '-');\n-        assertEquals(\"-123\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadLeft(123, 10, '-');\n-        assertEquals(10, sb.length());\n-        //            1234567890\n-        assertEquals(\"-------123\", sb.toString());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testAppendFixedWidthPadRight() {\n-        StrBuilder sb = new StrBuilder();\n-        sb.appendFixedWidthPadRight(\"foo\", -1, '-');\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadRight(\"foo\", 0, '-');\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadRight(\"foo\", 1, '-');\n-        assertEquals(\"f\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadRight(\"foo\", 2, '-');\n-        assertEquals(\"fo\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadRight(\"foo\", 3, '-');\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadRight(\"foo\", 4, '-');\n-        assertEquals(\"foo-\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadRight(\"foo\", 10, '-');\n-        assertEquals(10, sb.length());\n-        //            1234567890\n-        assertEquals(\"foo-------\", sb.toString());\n-\n-        sb.clear();\n-        sb.setNullText(\"null\");\n-        sb.appendFixedWidthPadRight(null, 5, '-');\n-        assertEquals(\"null-\", sb.toString());\n-    }\n-\n-    public void testAppendFixedWidthPadRight_int() {\n-        StrBuilder sb = new StrBuilder();\n-        sb.appendFixedWidthPadRight(123, -1, '-');\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadRight(123, 0, '-');\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadRight(123, 1, '-');\n-        assertEquals(\"1\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadRight(123, 2, '-');\n-        assertEquals(\"12\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadRight(123, 3, '-');\n-        assertEquals(\"123\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadRight(123, 4, '-');\n-        assertEquals(\"123-\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendFixedWidthPadRight(123, 10, '-');\n-        assertEquals(10, sb.length());\n-        //            1234567890\n-        assertEquals(\"123-------\", sb.toString());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testAppendWithSeparators_Array() {\n-        StrBuilder sb = new StrBuilder();\n-        sb.appendWithSeparators((Object[]) null, \",\");\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendWithSeparators(new Object[0], \",\");\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, \",\");\n-        assertEquals(\"foo,bar,baz\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, null);\n-        assertEquals(\"foobarbaz\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n-        assertEquals(\"foo,,baz\", sb.toString());\n-    }\n-\n-    public void testAppendWithSeparators_Collection() {\n-        StrBuilder sb = new StrBuilder();\n-        sb.appendWithSeparators((Collection) null, \",\");\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendWithSeparators(Collections.EMPTY_LIST, \",\");\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), \",\");\n-        assertEquals(\"foo,bar,baz\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), null);\n-        assertEquals(\"foobarbaz\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n-        assertEquals(\"foo,,baz\", sb.toString());\n-    }\n-\n-    public void testAppendWithSeparators_Iterator() {\n-        StrBuilder sb = new StrBuilder();\n-        sb.appendWithSeparators((Iterator) null, \",\");\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), \",\");\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), \",\");\n-        assertEquals(\"foo,bar,baz\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), null);\n-        assertEquals(\"foobarbaz\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}).iterator(), \",\");\n-        assertEquals(\"foo,,baz\", sb.toString());\n-    }\n-\n-    public void testAppendWithSeparatorsWithNullText() {\n-        StrBuilder sb = new StrBuilder();\n-        sb.setNullText(\"null\");\n-        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n-        assertEquals(\"foo,null,baz\", sb.toString());\n-\n-        sb.clear();\n-        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n-        assertEquals(\"foo,null,baz\", sb.toString());\n-    }\n-\n-    public void testInsert() {\n-\n-        StrBuilder sb = new StrBuilder();\n-        sb.append(\"barbaz\");\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        try {\n-            sb.insert(-1, FOO);\n-            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(7, FOO);\n-            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.insert(0, (Object) null);\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        sb.insert(0, FOO);\n-        assertEquals(\"foobarbaz\", sb.toString());\n-\n-        sb.clear();\n-        sb.append(\"barbaz\");\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        try {\n-            sb.insert(-1, \"foo\");\n-            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(7, \"foo\");\n-            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.insert(0, (String) null);\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        sb.insert(0, \"foo\");\n-        assertEquals(\"foobarbaz\", sb.toString());\n-\n-        sb.clear();\n-        sb.append(\"barbaz\");\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        try {\n-            sb.insert(-1, new char[]{'f', 'o', 'o'});\n-            fail(\"insert(-1, char[]) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(7, new char[]{'f', 'o', 'o'});\n-            fail(\"insert(7, char[]) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.insert(0, (char[]) null);\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        sb.insert(0, new char[0]);\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        sb.insert(0, new char[]{'f', 'o', 'o'});\n-        assertEquals(\"foobarbaz\", sb.toString());\n-\n-        sb.clear();\n-        sb.append(\"barbaz\");\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        try {\n-            sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n-            fail(\"insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n-            fail(\"insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.insert(0, (char[]) null, 0, 0);\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        sb.insert(0, new char[0], 0, 0);\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        try {\n-            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3);\n-            fail(\"insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3);\n-            fail(\"insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1);\n-            fail(\"insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10);\n-            fail(\"insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0);\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n-        assertEquals(\"foobarbaz\", sb.toString());\n-\n-        sb.clear();\n-        sb.append(\"barbaz\");\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        try {\n-            sb.insert(-1, true);\n-            fail(\"insert(-1, boolean) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(7, true);\n-            fail(\"insert(7, boolean) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.insert(0, true);\n-        assertEquals(\"truebarbaz\", sb.toString());\n-\n-        sb.insert(0, false);\n-        assertEquals(\"falsetruebarbaz\", sb.toString());\n-\n-        sb.clear();\n-        sb.append(\"barbaz\");\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        try {\n-            sb.insert(-1, '!');\n-            fail(\"insert(-1, char) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(7, '!');\n-            fail(\"insert(7, char) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.insert(0, '!');\n-        assertEquals(\"!barbaz\", sb.toString());\n-\n-        sb.clear();\n-        sb.append(\"barbaz\");\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        try {\n-            sb.insert(-1, 0);\n-            fail(\"insert(-1, int) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(7, 0);\n-            fail(\"insert(7, int) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.insert(0, '0');\n-        assertEquals(\"0barbaz\", sb.toString());\n-\n-        sb.clear();\n-        sb.append(\"barbaz\");\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        try {\n-            sb.insert(-1, 1L);\n-            fail(\"insert(-1, long) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(7, 1L);\n-            fail(\"insert(7, long) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.insert(0, 1L);\n-        assertEquals(\"1barbaz\", sb.toString());\n-\n-        sb.clear();\n-        sb.append(\"barbaz\");\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        try {\n-            sb.insert(-1, 2.3F);\n-            fail(\"insert(-1, float) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(7, 2.3F);\n-            fail(\"insert(7, float) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.insert(0, 2.3F);\n-        assertEquals(\"2.3barbaz\", sb.toString());\n-\n-        sb.clear();\n-        sb.append(\"barbaz\");\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        try {\n-            sb.insert(-1, 4.5D);\n-            fail(\"insert(-1, double) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(7, 4.5D);\n-            fail(\"insert(7, double) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.insert(0, 4.5D);\n-        assertEquals(\"4.5barbaz\", sb.toString());\n-    }\n-\n-    public void testInsertWithNullText() {\n-\n-        StrBuilder sb = new StrBuilder();\n-        sb.setNullText(\"null\");\n-        sb.append(\"barbaz\");\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        try {\n-            sb.insert(-1, FOO);\n-            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(7, FOO);\n-            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.insert(0, (Object) null);\n-        assertEquals(\"nullbarbaz\", sb.toString());\n-\n-        sb.insert(0, FOO);\n-        assertEquals(\"foonullbarbaz\", sb.toString());\n-\n-        sb.clear();\n-        sb.append(\"barbaz\");\n-        assertEquals(\"barbaz\", sb.toString());\n-\n-        try {\n-            sb.insert(-1, \"foo\");\n-            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.insert(7, \"foo\");\n-            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        sb.insert(0, (String) null);\n-        assertEquals(\"nullbarbaz\", sb.toString());\n-\n-        sb.insert(0, \"foo\");\n-        assertEquals(\"foonullbarbaz\", sb.toString());\n-    }\n-    \n-    public void testToCharArray ( ) {\n-        \n-        StrBuilder sb = new StrBuilder();        \n-        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray());\n-        \n-        char[] a = sb.toCharArray();\n-        assertNotNull (\"toCharArray() result is null\", a);\n-        assertEquals (\"toCharArray() result is too large\", 0, a.length);\n-        \n-        sb.append(\"junit\");\n-        a = sb.toCharArray();\n-        assertEquals (\"toCharArray() result incorrect length\",5, a.length);\n-        assertTrue (\"toCharArray() result does not match\",Arrays.equals(\"junit\".toCharArray(), a));\n-    }\n-    \n-    public void testToCharArrayIntInt() {\n-        StrBuilder sb = new StrBuilder();\n-        assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray(0, 0));\n-\n-        sb.append(\"junit\");\n-        char[] a = sb.toCharArray(0, 20); //too large test\n-        assertEquals (\"toCharArray(int,int) result incorrect length\",5, a.length);\n-        assertTrue (\"toCharArray(int,int) result does not match\",Arrays.equals(\"junit\".toCharArray(), a));\n-        \n-        a = sb.toCharArray(0, 4);\n-        assertEquals (\"toCharArray(int,int) result incorrect length\",4, a.length);\n-        assertTrue (\"toCharArray(int,int) result does not match\",Arrays.equals(\"juni\".toCharArray(), a));\n-        \n-        a = sb.toCharArray(0, 4);\n-        assertEquals (\"toCharArray(int,int) result incorrect length\",4, a.length);\n-        assertTrue (\"toCharArray(int,int) result does not match\",Arrays.equals(\"juni\".toCharArray(), a));\n-        \n-        a = sb.toCharArray(0,1);\n-        assertNotNull (\"toCharArray(int,int) result is null\", a);\n-        \n-        try {\n-            sb.toCharArray(-1, 5);\n-            fail (\"no string index out of bound on -1\");\n-        }\n-        catch (IndexOutOfBoundsException e) {}\n-\n-        try {\n-            sb.toCharArray(6, 5);\n-            fail (\"no string index out of bound on -1\");\n-        }\n-        catch (IndexOutOfBoundsException e) {}\n-    }\n-    \n-    public void testGetChars ( ) {\n-        \n-        StrBuilder sb = new StrBuilder();\n-        \n-        char[] input = new char[10];\n-        char[] a = sb.getChars(input);\n-        assertSame (input, a);\n-        assertTrue(Arrays.equals(new char[10], a));\n-        \n-        sb.append(\"junit\");\n-        a = sb.getChars(input);\n-        assertSame(input, a);\n-        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a));\n-        \n-        a = sb.getChars(null);\n-        assertNotSame(input,a);\n-        assertEquals(5,a.length);\n-        assertTrue(Arrays.equals(\"junit\".toCharArray(),a));\n-        \n-        input = new char[5];\n-        a = sb.getChars(input);\n-        assertSame(input, a);\n-        \n-        input = new char[4];\n-        a = sb.getChars(input);\n-        assertNotSame(input, a);\n-    }\n-    \n-    public void testGetCharsIntIntCharArrayInt( ) {\n-        \n-        StrBuilder sb = new StrBuilder();\n-               \n-        sb.append(\"junit\");\n-        char[] a = new char[5];\n-        sb.getChars(0,5,a,0);\n-        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a));\n-        \n-        a = new char[5];\n-        sb.getChars(0,2,a,3);\n-        assertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a));\n-        \n-        try {\n-            sb.getChars(-1,0,a,0);\n-            fail(\"no exception\");\n-        }\n-        catch (IndexOutOfBoundsException e) {\n-        }\n-        \n-        try {\n-            sb.getChars(0,-1,a,0);\n-            fail(\"no exception\");\n-        }\n-        catch (IndexOutOfBoundsException e) {\n-        }\n-        \n-        try {\n-            sb.getChars(0,20,a,0);\n-            fail(\"no exception\");\n-        }\n-        catch (IndexOutOfBoundsException e) {\n-        }\n-        \n-        try {\n-            sb.getChars(4,2,a,0);\n-            fail(\"no exception\");\n-        }\n-        catch (IndexOutOfBoundsException e) {\n-        }\n-    }\n-    \n-    public void testAppendStringBuffer() {\n-        StrBuilder sb = new StrBuilder();\n-        \n-        sb = sb.append(new StringBuffer());\n-        assertNotNull(sb);\n-        \n-        sb = sb.append(new StringBuffer(\"junit\"));\n-        \n-        assertEquals (\"junit\", sb.toString());\n-    }\n-    \n-    public void testAppendStrBuilder() {\n-        StrBuilder sb = new StrBuilder();\n-        \n-        sb = sb.append((StrBuilder)null);\n-        assertNotNull(sb);\n-        \n-        sb = sb.append(new StrBuilder());\n-        assertNotNull(sb);\n-        assertEquals(\"\", sb.toString());\n-    }\n-    \n-    public void testStringBuffer() {\n-        StrBuilder sb = new StrBuilder();\n-        assertEquals (new StringBuffer().toString(), sb.toStringBuffer().toString());\n-        \n-        sb.append(\"junit\");\n-        assertEquals(new StringBuffer(\"junit\").toString(), sb.toStringBuffer().toString());\n-    }\n-    \n-    public void testReverse() {\n-        StrBuilder sb = new StrBuilder();\n-        \n-        String actual = sb.reverse().toString();\n-        assertEquals (\"\", actual);\n-        \n-        sb.append(true);\n-        actual = sb.reverse().toString();\n-        assertEquals(\"eurt\", actual);\n-        \n-        actual = sb.reverse().toString();\n-        assertEquals(\"true\", actual);\n-    }\n-    \n-    public void testIndexOfChar() {\n-        StrBuilder sb = new StrBuilder(\"abab\");\n-        \n-        assertEquals (0, sb.indexOf('a'));\n-        //should work like String#indexOf\n-        assertEquals (\"abab\".indexOf('a'), sb.indexOf('a'));\n-        \n-        assertEquals(1, sb.indexOf('b'));\n-        assertEquals (\"abab\".indexOf('b'), sb.indexOf('b'));\n-        \n-        assertEquals (-1, sb.indexOf('z'));\n-    }\n-    \n-    public void testLastIndexOfChar() {\n-        StrBuilder sb = new StrBuilder(\"abab\");\n-        \n-        assertEquals (2, sb.lastIndexOf('a'));\n-        //should work like String#lastIndexOf\n-        assertEquals (\"abab\".lastIndexOf('a'), sb.lastIndexOf('a'));\n-        \n-        assertEquals(3, sb.lastIndexOf('b'));\n-        assertEquals (\"abab\".lastIndexOf('b'), sb.lastIndexOf('b'));\n-        \n-        assertEquals (-1, sb.lastIndexOf('z'));\n-    }\n-    \n-    public void testIndexOfCharInt() {\n-        StrBuilder sb = new StrBuilder(\"abab\");\n-        \n-        assertEquals (2, sb.indexOf('a', 1));\n-        //should work like String#indexOf\n-        assertEquals (\"abab\".indexOf('a', 1), sb.indexOf('a', 1));\n-        \n-        assertEquals(3, sb.indexOf('b', 2));\n-        assertEquals (\"abab\".indexOf('b', 2), sb.indexOf('b', 2));\n-        \n-        assertEquals (-1, sb.indexOf('z', 2));\n-        \n-        sb = new StrBuilder(\"xyzabc\");\n-        assertEquals (2, sb.indexOf('z', 0));\n-        assertEquals (-1, sb.indexOf('z', 3));\n-    }\n-    \n-    public void testLastIndexOfCharInt() {\n-        StrBuilder sb = new StrBuilder(\"abab\");\n-        \n-        assertEquals (0, sb.lastIndexOf('a', 1));\n-        //should work like String#lastIndexOf\n-        assertEquals (\"abab\".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));\n-        \n-        assertEquals(1, sb.lastIndexOf('b', 2));\n-        assertEquals (\"abab\".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));\n-        \n-        assertEquals (-1, sb.lastIndexOf('z', 2));\n-        \n-        sb = new StrBuilder(\"xyzabc\");\n-        assertEquals (2, sb.lastIndexOf('z', sb.length()));\n-        assertEquals (-1, sb.lastIndexOf('z', 1));\n-    }\n-    \n-    public void testIndexOfString() {\n-        StrBuilder sb = new StrBuilder(\"abab\");\n-        \n-        assertEquals(0, sb.indexOf(\"a\"));\n-        //should work like String#indexOf\n-        assertEquals(\"abab\".indexOf(\"a\"), sb.indexOf(\"a\"));\n-        \n-        assertEquals(0, sb.indexOf(\"ab\"));\n-        //should work like String#indexOf\n-        assertEquals(\"abab\".indexOf(\"ab\"), sb.indexOf(\"ab\"));\n-        \n-        assertEquals(1, sb.indexOf(\"b\"));\n-        assertEquals(\"abab\".indexOf(\"b\"), sb.indexOf(\"b\"));\n-        \n-        assertEquals(1, sb.indexOf(\"ba\"));\n-        assertEquals(\"abab\".indexOf(\"ba\"), sb.indexOf(\"ba\"));\n-        \n-        assertEquals(-1, sb.indexOf(\"z\"));\n-        \n-        assertEquals(-1, sb.indexOf((String) null));\n-    }\n-    \n-    public void testLastIndexOfString() {\n-        StrBuilder sb = new StrBuilder(\"abab\");\n-        \n-        assertEquals(2, sb.lastIndexOf(\"a\"));\n-        //should work like String#lastIndexOf\n-        assertEquals(\"abab\".lastIndexOf(\"a\"), sb.lastIndexOf(\"a\"));\n-        \n-        assertEquals(2, sb.lastIndexOf(\"ab\"));\n-        //should work like String#lastIndexOf\n-        assertEquals(\"abab\".lastIndexOf(\"ab\"), sb.lastIndexOf(\"ab\"));\n-        \n-        assertEquals(3, sb.lastIndexOf(\"b\"));\n-        assertEquals(\"abab\".lastIndexOf(\"b\"), sb.lastIndexOf(\"b\"));\n-        \n-        assertEquals(1, sb.lastIndexOf(\"ba\"));\n-        assertEquals(\"abab\".lastIndexOf(\"ba\"), sb.lastIndexOf(\"ba\"));\n-        \n-        assertEquals(-1, sb.lastIndexOf(\"z\"));\n-        \n-        assertEquals(-1, sb.lastIndexOf((String) null));\n-    }\n-    \n-    public void testIndexOfStringInt() {\n-        StrBuilder sb = new StrBuilder(\"abab\");\n-        \n-        assertEquals(2, sb.indexOf(\"a\", 1));\n-        //should work like String#indexOf\n-        assertEquals (\"abab\".indexOf(\"a\", 1), sb.indexOf(\"a\", 1));\n-        \n-        assertEquals(2, sb.indexOf(\"ab\", 1));\n-        //should work like String#indexOf\n-        assertEquals(\"abab\".indexOf(\"ab\", 1), sb.indexOf(\"ab\", 1));\n-        \n-        assertEquals(3, sb.indexOf(\"b\", 2));\n-        assertEquals(\"abab\".indexOf(\"b\", 2), sb.indexOf(\"b\", 2));\n-        \n-        assertEquals(1, sb.indexOf(\"ba\", 1));\n-        assertEquals(\"abab\".indexOf(\"ba\", 2), sb.indexOf(\"ba\", 2));\n-        \n-        assertEquals(-1, sb.indexOf(\"z\", 2));\n-        \n-        sb = new StrBuilder(\"xyzabc\");\n-        assertEquals(2, sb.indexOf(\"za\", 0));\n-        assertEquals(-1, sb.indexOf(\"za\", 3));\n-        \n-        assertEquals(-1, sb.indexOf((String) null, 2));\n-    }\n-    \n-    public void testLastIndexOfStringInt() {\n-        StrBuilder sb = new StrBuilder(\"abab\");\n-        \n-        assertEquals(0, sb.lastIndexOf(\"a\", 1));\n-        //should work like String#lastIndexOf\n-        assertEquals(\"abab\".lastIndexOf(\"a\", 1), sb.lastIndexOf(\"a\", 1));\n-        \n-        assertEquals(0, sb.lastIndexOf(\"ab\", 1));\n-        //should work like String#lastIndexOf\n-        assertEquals(\"abab\".lastIndexOf(\"ab\", 1), sb.lastIndexOf(\"ab\", 1));\n-        \n-        assertEquals(1, sb.lastIndexOf(\"b\", 2));\n-        assertEquals(\"abab\".lastIndexOf(\"b\", 2), sb.lastIndexOf(\"b\", 2));\n-        \n-        assertEquals(1, sb.lastIndexOf(\"ba\", 2));\n-        assertEquals(\"abab\".lastIndexOf(\"ba\", 2), sb.lastIndexOf(\"ba\", 2));\n-        \n-        assertEquals(-1, sb.lastIndexOf(\"z\", 2));\n-        \n-        sb = new StrBuilder(\"xyzabc\");\n-        assertEquals(2, sb.lastIndexOf(\"za\", sb.length()));\n-        assertEquals(-1, sb.lastIndexOf(\"za\", 1));\n-        \n-        assertEquals(-1, sb.lastIndexOf((String) null, 2));\n-    }\n-    \n-    public void testContainsChar() {\n-        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n-        assertTrue (sb.contains('a'));\n-        assertTrue (sb.contains('o'));\n-        assertTrue (sb.contains('z'));\n-        assertFalse (sb.contains('1'));\n-    }\n-    \n-    public void testContainsString() {\n-        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n-        assertTrue (sb.contains(\"a\"));\n-        assertTrue (sb.contains(\"pq\"));\n-        assertTrue (sb.contains(\"z\"));\n-        assertFalse (sb.contains(\"zyx\"));\n-    }\n-    \n-    public void testMidString() {\n-        StrBuilder sb = new StrBuilder(\"hello goodbye hello\");\n-        assertEquals (\"goodbye\", sb.midString(6, 7));\n-        assertEquals (\"hello\", sb.midString(0, 5));\n-        assertEquals (\"hello\", sb.midString(-5, 5));\n-        assertEquals (\"\", sb.midString(0, -1));\n-        assertEquals (\"\", sb.midString(20, 2));\n-    }\n-    \n-    public void testRightString() {\n-        StrBuilder sb = new StrBuilder(\"left right\");\n-        assertEquals (\"right\", sb.rightString(5));\n-        assertEquals (\"\", sb.rightString(0));\n-        assertEquals (\"\", sb.rightString(-5));\n-        assertEquals (\"left right\", sb.rightString(15));\n-    }\n-    \n-    public void testLeftString() {\n-        StrBuilder sb = new StrBuilder(\"left right\");\n-        assertEquals (\"left\", sb.leftString(4));\n-        assertEquals (\"\", sb.leftString(0));\n-        assertEquals (\"\", sb.leftString(-5));\n-        assertEquals (\"left right\", sb.leftString(15));\n-    }\n-    \n+\n+    //-----------------------------------------------------------------------\n     public void testSubstringInt() {\n         StrBuilder sb = new StrBuilder (\"hello goodbye\");\n         assertEquals (\"goodbye\", sb.substring(6));\n         } catch (IndexOutOfBoundsException e) {}\n     }\n \n-    //-----------------------------------------------------------------------\n+    // -----------------------------------------------------------------------\n+    public void testMidString() {\n+        StrBuilder sb = new StrBuilder(\"hello goodbye hello\");\n+        assertEquals(\"goodbye\", sb.midString(6, 7));\n+        assertEquals(\"hello\", sb.midString(0, 5));\n+        assertEquals(\"hello\", sb.midString(-5, 5));\n+        assertEquals(\"\", sb.midString(0, -1));\n+        assertEquals(\"\", sb.midString(20, 2));\n+    }\n+\n+    public void testRightString() {\n+        StrBuilder sb = new StrBuilder(\"left right\");\n+        assertEquals(\"right\", sb.rightString(5));\n+        assertEquals(\"\", sb.rightString(0));\n+        assertEquals(\"\", sb.rightString(-5));\n+        assertEquals(\"left right\", sb.rightString(15));\n+    }\n+\n+    public void testLeftString() {\n+        StrBuilder sb = new StrBuilder(\"left right\");\n+        assertEquals(\"left\", sb.leftString(4));\n+        assertEquals(\"\", sb.leftString(0));\n+        assertEquals(\"\", sb.leftString(-5));\n+        assertEquals(\"left right\", sb.leftString(15));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testContains_char() {\n+        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n+        assertEquals(true, sb.contains('a'));\n+        assertEquals(true, sb.contains('o'));\n+        assertEquals(true, sb.contains('z'));\n+        assertEquals(false, sb.contains('1'));\n+    }\n+\n+    public void testContains_String() {\n+        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n+        assertEquals(true, sb.contains(\"a\"));\n+        assertEquals(true, sb.contains(\"pq\"));\n+        assertEquals(true, sb.contains(\"z\"));\n+        assertEquals(false, sb.contains(\"zyx\"));\n+        assertEquals(false, sb.contains((String) null));\n+    }\n+\n+    public void testContains_StrMatcher() {\n+        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n+        assertEquals(true, sb.contains(StrMatcher.charMatcher('a')));\n+        assertEquals(true, sb.contains(StrMatcher.stringMatcher(\"pq\")));\n+        assertEquals(true, sb.contains(StrMatcher.charMatcher('z')));\n+        assertEquals(false, sb.contains(StrMatcher.stringMatcher(\"zy\")));\n+        assertEquals(false, sb.contains((StrMatcher) null));\n+\n+        sb = new StrBuilder();\n+        assertEquals(false, sb.contains(A_NUMBER_MATCHER));\n+        sb.append(\"B A1 C\");\n+        assertEquals(true, sb.contains(A_NUMBER_MATCHER));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testIndexOf_char() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals (0, sb.indexOf('a'));\n+        //should work like String#indexOf\n+        assertEquals (\"abab\".indexOf('a'), sb.indexOf('a'));\n+        \n+        assertEquals(1, sb.indexOf('b'));\n+        assertEquals (\"abab\".indexOf('b'), sb.indexOf('b'));\n+        \n+        assertEquals (-1, sb.indexOf('z'));\n+    }\n+\n+    public void testIndexOf_char_int() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals (2, sb.indexOf('a', 1));\n+        //should work like String#indexOf\n+        assertEquals (\"abab\".indexOf('a', 1), sb.indexOf('a', 1));\n+        \n+        assertEquals(3, sb.indexOf('b', 2));\n+        assertEquals (\"abab\".indexOf('b', 2), sb.indexOf('b', 2));\n+        \n+        assertEquals (-1, sb.indexOf('z', 2));\n+        \n+        sb = new StrBuilder(\"xyzabc\");\n+        assertEquals (2, sb.indexOf('z', 0));\n+        assertEquals (-1, sb.indexOf('z', 3));\n+    }\n+\n+    public void testLastIndexOf_char() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals (2, sb.lastIndexOf('a'));\n+        //should work like String#lastIndexOf\n+        assertEquals (\"abab\".lastIndexOf('a'), sb.lastIndexOf('a'));\n+        \n+        assertEquals(3, sb.lastIndexOf('b'));\n+        assertEquals (\"abab\".lastIndexOf('b'), sb.lastIndexOf('b'));\n+        \n+        assertEquals (-1, sb.lastIndexOf('z'));\n+    }\n+\n+    public void testLastIndexOf_char_int() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals (0, sb.lastIndexOf('a', 1));\n+        //should work like String#lastIndexOf\n+        assertEquals (\"abab\".lastIndexOf('a', 1), sb.lastIndexOf('a', 1));\n+        \n+        assertEquals(1, sb.lastIndexOf('b', 2));\n+        assertEquals (\"abab\".lastIndexOf('b', 2), sb.lastIndexOf('b', 2));\n+        \n+        assertEquals (-1, sb.lastIndexOf('z', 2));\n+        \n+        sb = new StrBuilder(\"xyzabc\");\n+        assertEquals (2, sb.lastIndexOf('z', sb.length()));\n+        assertEquals (-1, sb.lastIndexOf('z', 1));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIndexOf_String() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals(0, sb.indexOf(\"a\"));\n+        //should work like String#indexOf\n+        assertEquals(\"abab\".indexOf(\"a\"), sb.indexOf(\"a\"));\n+        \n+        assertEquals(0, sb.indexOf(\"ab\"));\n+        //should work like String#indexOf\n+        assertEquals(\"abab\".indexOf(\"ab\"), sb.indexOf(\"ab\"));\n+        \n+        assertEquals(1, sb.indexOf(\"b\"));\n+        assertEquals(\"abab\".indexOf(\"b\"), sb.indexOf(\"b\"));\n+        \n+        assertEquals(1, sb.indexOf(\"ba\"));\n+        assertEquals(\"abab\".indexOf(\"ba\"), sb.indexOf(\"ba\"));\n+        \n+        assertEquals(-1, sb.indexOf(\"z\"));\n+        \n+        assertEquals(-1, sb.indexOf((String) null));\n+    }\n+\n+    public void testIndexOf_String_int() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals(2, sb.indexOf(\"a\", 1));\n+        //should work like String#indexOf\n+        assertEquals (\"abab\".indexOf(\"a\", 1), sb.indexOf(\"a\", 1));\n+        \n+        assertEquals(2, sb.indexOf(\"ab\", 1));\n+        //should work like String#indexOf\n+        assertEquals(\"abab\".indexOf(\"ab\", 1), sb.indexOf(\"ab\", 1));\n+        \n+        assertEquals(3, sb.indexOf(\"b\", 2));\n+        assertEquals(\"abab\".indexOf(\"b\", 2), sb.indexOf(\"b\", 2));\n+        \n+        assertEquals(1, sb.indexOf(\"ba\", 1));\n+        assertEquals(\"abab\".indexOf(\"ba\", 2), sb.indexOf(\"ba\", 2));\n+        \n+        assertEquals(-1, sb.indexOf(\"z\", 2));\n+        \n+        sb = new StrBuilder(\"xyzabc\");\n+        assertEquals(2, sb.indexOf(\"za\", 0));\n+        assertEquals(-1, sb.indexOf(\"za\", 3));\n+        \n+        assertEquals(-1, sb.indexOf((String) null, 2));\n+    }\n+\n+    public void testLastIndexOf_String() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals(2, sb.lastIndexOf(\"a\"));\n+        //should work like String#lastIndexOf\n+        assertEquals(\"abab\".lastIndexOf(\"a\"), sb.lastIndexOf(\"a\"));\n+        \n+        assertEquals(2, sb.lastIndexOf(\"ab\"));\n+        //should work like String#lastIndexOf\n+        assertEquals(\"abab\".lastIndexOf(\"ab\"), sb.lastIndexOf(\"ab\"));\n+        \n+        assertEquals(3, sb.lastIndexOf(\"b\"));\n+        assertEquals(\"abab\".lastIndexOf(\"b\"), sb.lastIndexOf(\"b\"));\n+        \n+        assertEquals(1, sb.lastIndexOf(\"ba\"));\n+        assertEquals(\"abab\".lastIndexOf(\"ba\"), sb.lastIndexOf(\"ba\"));\n+        \n+        assertEquals(-1, sb.lastIndexOf(\"z\"));\n+        \n+        assertEquals(-1, sb.lastIndexOf((String) null));\n+    }\n+\n+    public void testLastIndexOf_String_int() {\n+        StrBuilder sb = new StrBuilder(\"abab\");\n+        \n+        assertEquals(0, sb.lastIndexOf(\"a\", 1));\n+        //should work like String#lastIndexOf\n+        assertEquals(\"abab\".lastIndexOf(\"a\", 1), sb.lastIndexOf(\"a\", 1));\n+        \n+        assertEquals(0, sb.lastIndexOf(\"ab\", 1));\n+        //should work like String#lastIndexOf\n+        assertEquals(\"abab\".lastIndexOf(\"ab\", 1), sb.lastIndexOf(\"ab\", 1));\n+        \n+        assertEquals(1, sb.lastIndexOf(\"b\", 2));\n+        assertEquals(\"abab\".lastIndexOf(\"b\", 2), sb.lastIndexOf(\"b\", 2));\n+        \n+        assertEquals(1, sb.lastIndexOf(\"ba\", 2));\n+        assertEquals(\"abab\".lastIndexOf(\"ba\", 2), sb.lastIndexOf(\"ba\", 2));\n+        \n+        assertEquals(-1, sb.lastIndexOf(\"z\", 2));\n+        \n+        sb = new StrBuilder(\"xyzabc\");\n+        assertEquals(2, sb.lastIndexOf(\"za\", sb.length()));\n+        assertEquals(-1, sb.lastIndexOf(\"za\", 1));\n+        \n+        assertEquals(-1, sb.lastIndexOf((String) null, 2));\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    public void testIndexOf_StrMatcher() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(-1, sb.indexOf((StrMatcher) null));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a')));\n+        \n+        sb.append(\"ab bd\");\n+        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a')));\n+        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b')));\n+        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher()));\n+        assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d')));\n+        assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher()));\n+        assertEquals(-1, sb.indexOf((StrMatcher) null));\n+        \n+        sb.append(\" A1 junction\");\n+        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER));\n+    }\n+\n+    public void testIndexOf_StrMatcher_int() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(-1, sb.indexOf((StrMatcher) null, 2));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\n+        \n+        sb.append(\"ab bd\");\n+        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), -2));\n+        assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'), 0));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 2));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'), 20));\n+        \n+        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), -1));\n+        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 0));\n+        assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'), 1));\n+        assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 2));\n+        assertEquals(3, sb.indexOf(StrMatcher.charMatcher('b'), 3));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 4));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 5));\n+        assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('b'), 6));\n+        \n+        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), -2));\n+        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 0));\n+        assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher(), 2));\n+        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 4));\n+        assertEquals(-1, sb.indexOf(StrMatcher.spaceMatcher(), 20));\n+        \n+        assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher(), 0));\n+        assertEquals(-1, sb.indexOf((StrMatcher) null, 0));\n+        \n+        sb.append(\" A1 junction with A2\");\n+        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 5));\n+        assertEquals(6, sb.indexOf(A_NUMBER_MATCHER, 6));\n+        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 7));\n+        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 22));\n+        assertEquals(23, sb.indexOf(A_NUMBER_MATCHER, 23));\n+        assertEquals(-1, sb.indexOf(A_NUMBER_MATCHER, 24));\n+    }\n+\n+    public void testLastIndexOf_StrMatcher() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a')));\n+        \n+        sb.append(\"ab bd\");\n+        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a')));\n+        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b')));\n+        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher()));\n+        assertEquals(4, sb.lastIndexOf(StrMatcher.charMatcher('d')));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher()));\n+        assertEquals(-1, sb.lastIndexOf((StrMatcher) null));\n+        \n+        sb.append(\" A1 junction\");\n+        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER));\n+    }\n+\n+    public void testLastIndexOf_StrMatcher_int() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\n+        \n+        sb.append(\"ab bd\");\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2));\n+        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0));\n+        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2));\n+        assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20));\n+        \n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0));\n+        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1));\n+        assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2));\n+        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3));\n+        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4));\n+        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5));\n+        assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6));\n+        \n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2));\n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0));\n+        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2));\n+        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4));\n+        assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20));\n+        \n+        assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0));\n+        assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0));\n+        \n+        sb.append(\" A1 junction with A2\");\n+        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5));\n+        assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); // A matches, 1 is outside bounds\n+        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7));\n+        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22));\n+        assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23)); // A matches, 2 is outside bounds\n+        assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24));\n+    }\n+\n+    static final StrMatcher A_NUMBER_MATCHER = new StrMatcher() {\n+        public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n+            if (buffer[pos] == 'A') {\n+                pos++;\n+                if (pos < bufferEnd && buffer[pos] >= '0' && buffer[pos] <= '9') {\n+                    return 2;\n+                }\n+            }\n+            return 0;\n+        }\n+    };\n+\n+    // -----------------------------------------------------------------------\n     public void testAsReader() throws Exception {\n         StrBuilder sb = new StrBuilder (\"some text\");\n         Reader reader = sb.asReader();\n         assertEquals(\"based\", sb.toString());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        StrBuilder sb = new StrBuilder(\"abc\");\n+        assertEquals(\"abc\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToStringBuffer() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString());\n+        \n+        sb.append(\"junit\");\n+        assertEquals(new StringBuffer(\"junit\").toString(), sb.toStringBuffer().toString());\n+    }\n+\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/text/StrMatcherTest.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang.text;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang.text.StrMatcher}.\n+ *\n+ * @version $Id$\n+ */\n+public class StrMatcherTest extends TestCase {\n+\n+    private static final char[] BUFFER1 = \"0,1\\t2 3\\n\\r\\f\\u0000'\\\"\".toCharArray();\n+\n+    private static final char[] BUFFER2 = \"abcdef\".toCharArray();\n+\n+    /**\n+     * Main method.\n+     * \n+     * @param args  command line arguments, ignored\n+     */\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Return a new test suite containing this test case.\n+     * \n+     * @return a new test suite containing this test case\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StrMatcherTest.class);\n+        suite.setName(\"StrMatcher Tests\");\n+        return suite;\n+    }\n+\n+    /**\n+     * Create a new test case with the specified name.\n+     * \n+     * @param name  the name\n+     */\n+    public StrMatcherTest(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCommaMatcher() {\n+        StrMatcher matcher = StrMatcher.commaMatcher();\n+        assertSame(matcher, StrMatcher.commaMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 0, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 1, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 2, 0, BUFFER1.length));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTabMatcher() {\n+        StrMatcher matcher = StrMatcher.tabMatcher();\n+        assertSame(matcher, StrMatcher.tabMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 2, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 3, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 4, 0, BUFFER1.length));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSpaceMatcher() {\n+        StrMatcher matcher = StrMatcher.spaceMatcher();\n+        assertSame(matcher, StrMatcher.spaceMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 4, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 5, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 6, 0, BUFFER1.length));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSplitMatcher() {\n+        StrMatcher matcher = StrMatcher.splitMatcher();\n+        assertSame(matcher, StrMatcher.splitMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 2, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 3, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 4, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 5, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 6, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 7, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 8, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 9, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 10, 0, BUFFER1.length));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTrimMatcher() {\n+        StrMatcher matcher = StrMatcher.trimMatcher();\n+        assertSame(matcher, StrMatcher.trimMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 2, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 3, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 4, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 5, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 6, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 7, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 8, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 9, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 10, 0, BUFFER1.length));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleQuoteMatcher() {\n+        StrMatcher matcher = StrMatcher.singleQuoteMatcher();\n+        assertSame(matcher, StrMatcher.singleQuoteMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 10, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 11, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 12, 0, BUFFER1.length));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDoubleQuoteMatcher() {\n+        StrMatcher matcher = StrMatcher.doubleQuoteMatcher();\n+        assertSame(matcher, StrMatcher.doubleQuoteMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 11, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 12, 0, BUFFER1.length));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testQuoteMatcher() {\n+        StrMatcher matcher = StrMatcher.quoteMatcher();\n+        assertSame(matcher, StrMatcher.quoteMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 10, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 11, 0, BUFFER1.length));\n+        assertEquals(1, matcher.isMatch(BUFFER1, 12, 0, BUFFER1.length));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNoneMatcher() {\n+        StrMatcher matcher = StrMatcher.noneMatcher();\n+        assertSame(matcher, StrMatcher.noneMatcher());\n+        assertEquals(0, matcher.isMatch(BUFFER1, 0, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 1, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 2, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 3, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 4, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 5, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 6, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 7, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 8, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 9, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 10, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 11, 0, BUFFER1.length));\n+        assertEquals(0, matcher.isMatch(BUFFER1, 12, 0, BUFFER1.length));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCharMatcher_char() {\n+        StrMatcher matcher = StrMatcher.charMatcher('c');\n+        assertEquals(0, matcher.isMatch(BUFFER2, 0, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, BUFFER2.length));\n+        assertEquals(1, matcher.isMatch(BUFFER2, 2, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 3, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 4, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 5, 0, BUFFER2.length));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCharSetMatcher_String() {\n+        StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\");\n+        assertEquals(1, matcher.isMatch(BUFFER2, 0, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, BUFFER2.length));\n+        assertEquals(1, matcher.isMatch(BUFFER2, 2, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 3, 0, BUFFER2.length));\n+        assertEquals(1, matcher.isMatch(BUFFER2, 4, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 5, 0, BUFFER2.length));\n+        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(\"\"));\n+        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCharSetMatcher_charArray() {\n+        StrMatcher matcher = StrMatcher.charSetMatcher(\"ace\".toCharArray());\n+        assertEquals(1, matcher.isMatch(BUFFER2, 0, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, BUFFER2.length));\n+        assertEquals(1, matcher.isMatch(BUFFER2, 2, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 3, 0, BUFFER2.length));\n+        assertEquals(1, matcher.isMatch(BUFFER2, 4, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 5, 0, BUFFER2.length));\n+        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher(new char[0]));\n+        assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((char[]) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testStringMatcher_String() {\n+        StrMatcher matcher = StrMatcher.stringMatcher(\"bc\");\n+        assertEquals(0, matcher.isMatch(BUFFER2, 0, 0, BUFFER2.length));\n+        assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 2, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 3, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 4, 0, BUFFER2.length));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 5, 0, BUFFER2.length));\n+        assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher(\"\"));\n+        assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher((String) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMatcherIndices() {\n+        // remember that the API contract is tight for the isMatch() method\n+        // all the onus is on the caller, so invalid inputs are not\n+        // the concern of StrMatcher, and are not bugs\n+        StrMatcher matcher = StrMatcher.stringMatcher(\"bc\");\n+        assertEquals(2, matcher.isMatch(BUFFER2, 1, 1, BUFFER2.length));\n+        assertEquals(2, matcher.isMatch(BUFFER2, 1, 0, 3));\n+        assertEquals(0, matcher.isMatch(BUFFER2, 1, 0, 2));\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/text/TextTestSuite.java\n+++ b/src/test/org/apache/commons/lang/text/TextTestSuite.java\n         TestSuite suite = new TestSuite();\n         suite.setName(\"Commons-Lang-Text Tests\");\n         suite.addTest(StrBuilderTest.suite());\n+        suite.addTest(StrBuilderAppendInsertTest.suite());\n+        suite.addTest(StrMatcherTest.suite());\n         suite.addTest(StrTokenizerTest.suite());\n         suite.addTestSuite(VariableFormatterTest.class);\n         return suite;", "timestamp": 1124055947, "metainfo": ""}