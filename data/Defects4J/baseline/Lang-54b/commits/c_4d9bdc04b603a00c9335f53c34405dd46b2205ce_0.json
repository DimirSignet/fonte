{"sha": "4d9bdc04b603a00c9335f53c34405dd46b2205ce", "log": "Unify exception handling re IAE   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author Nikolay Metchev\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.19 2003/07/19 20:17:12 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.20 2003/07/31 23:45:28 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n      */    \n     public static boolean isSameType(final Object array1, final Object array2) {\n         if (array1 == null || array2 == null) {\n-            throw new NullArgumentException(\"Array\");\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n         }\n         return array1.getClass().getName().equals(array2.getClass().getName());\n     }\n--- a/src/java/org/apache/commons/lang/SerializationUtils.java\n+++ b/src/java/org/apache/commons/lang/SerializationUtils.java\n  * @author Stephen Colebourne\n  * @author Jeff Varszegi\n  * @since 1.0\n- * @version $Id: SerializationUtils.java,v 1.7 2003/07/19 20:22:36 scolebourne Exp $\n+ * @version $Id: SerializationUtils.java,v 1.8 2003/07/31 23:45:28 scolebourne Exp $\n  */\n public class SerializationUtils {\n     \n      */\n     public static void serialize(Serializable obj, OutputStream outputStream) {\n         if (outputStream == null) {\n-            throw new NullArgumentException(\"OutputStream\");\n+            throw new IllegalArgumentException(\"The OutputStream must not be null\");\n         }\n         ObjectOutputStream out = null;\n         try {\n      */\n     public static Object deserialize(InputStream inputStream) {\n         if (inputStream == null) {\n-            throw new NullArgumentException(\"InputStream\");\n+            throw new IllegalArgumentException(\"The InputStream must not be null\");\n         }\n         ObjectInputStream in = null;\n         try {\n      */\n     public static Object deserialize(byte[] objectData) {\n         if (objectData == null) {\n-            throw new NullArgumentException(\"byte[]\");\n+            throw new IllegalArgumentException(\"The byte[] must not be null\");\n         }\n         ByteArrayInputStream bais = new ByteArrayInputStream(objectData);\n         return deserialize(bais);\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 2.0\n- * @version $Id: StringEscapeUtils.java,v 1.21 2003/07/28 16:17:57 ggregory Exp $\n+ * @version $Id: StringEscapeUtils.java,v 1.22 2003/07/31 23:45:28 scolebourne Exp $\n  */\n public class StringEscapeUtils {\n \n \n     private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n         if (out == null) {\n-            throw new NullArgumentException(\"Writer\");\n+            throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n         if (str == null) {\n             return;\n      */\n     public static void unescapeJava(Writer out, String str) throws IOException {\n         if (out == null) {\n-            throw new NullArgumentException(\"Writer\");\n+            throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n         if (str == null) {\n             return;\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n import java.util.StringTokenizer;\n \n import org.apache.commons.lang.ArrayUtils;\n-import org.apache.commons.lang.NullArgumentException;\n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.SystemUtils;\n \n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: ExceptionUtils.java,v 1.30 2003/07/26 14:22:21 scolebourne Exp $\n+ * @version $Id: ExceptionUtils.java,v 1.31 2003/07/31 23:45:28 scolebourne Exp $\n  */\n public class ExceptionUtils {\n     \n             return;\n         }\n         if (stream == null) {\n-            throw new NullArgumentException(\"PrintStream\");\n+            throw new IllegalArgumentException(\"The PrintStream must not be null\");\n         }\n         String trace[] = getRootCauseStackTrace(throwable);\n         for (int i = 0; i < trace.length; i++) {\n             return;\n         }\n         if (writer == null) {\n-            throw new NullArgumentException(\"PrintWriter\");\n+            throw new IllegalArgumentException(\"The PrintWriter must not be null\");\n         }\n         String trace[] = getRootCauseStackTrace(throwable);\n         for (int i = 0; i < trace.length; i++) {\n      */\n     public static void removeCommonFrames(List causeFrames, List wrapperFrames) {\n         if (causeFrames == null || wrapperFrames == null) {\n-            throw new NullArgumentException(\"List\");\n+            throw new IllegalArgumentException(\"The List must not be null\");\n         }\n         int causeFrameIndex = causeFrames.size() - 1;\n         int wrapperFrameIndex = wrapperFrames.size() - 1;\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n-import org.apache.commons.lang.NullArgumentException;\n import org.apache.commons.lang.StringUtils;\n \n /**\n  * @author Matthew Hawthorne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: NumberUtils.java,v 1.8 2003/07/28 21:37:32 scolebourne Exp $\n+ * @version $Id: NumberUtils.java,v 1.9 2003/07/31 23:45:28 scolebourne Exp $\n  */\n public class NumberUtils {\n     \n      * \n      * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n-     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n      */\n     public static long min(long[] array) {\n         // Validates input\n         if (array == null) {\n-            throw new NullArgumentException(\"Array\");\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n         } else if (array.length == 0) {\n             throw new IllegalArgumentException(\"Array cannot be empty.\");\n         }\n      * \n      * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n-     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n      */\n     public static int min(int[] array) {\n         // Validates input\n         if (array == null) {\n-            throw new NullArgumentException(\"Array\");\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n         } else if (array.length == 0) {\n             throw new IllegalArgumentException(\"Array cannot be empty.\");\n         }\n      * \n      * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n-     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n      */\n     public static short min(short[] array) {\n         // Validates input\n         if (array == null) {\n-            throw new NullArgumentException(\"Array\");\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n         } else if (array.length == 0) {\n             throw new IllegalArgumentException(\"Array cannot be empty.\");\n         }\n      * \n      * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n-     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n      */\n     public static double min(double[] array) {\n         // Validates input\n         if (array == null) {\n-            throw new NullArgumentException(\"Array\");\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n         } else if (array.length == 0) {\n             throw new IllegalArgumentException(\"Array cannot be empty.\");\n         }\n      * \n      * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n-     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n      */\n     public static float min(float[] array) {\n         // Validates input\n         if (array == null) {\n-            throw new NullArgumentException(\"Array\");\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n         } else if (array.length == 0) {\n             throw new IllegalArgumentException(\"Array cannot be empty.\");\n         }\n      * \n      * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n-     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n      */\n     public static long max(long[] array) {\n         // Validates input\n         if (array == null) {\n-            throw new NullArgumentException(\"Array\");\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n         } else if (array.length == 0) {\n             throw new IllegalArgumentException(\"Array cannot be empty.\");\n         }\n      * \n      * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n-     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n      */\n     public static int max(int[] array) {\n         // Validates input\n         if (array == null) {\n-            throw new NullArgumentException(\"Array\");\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n         } else if (array.length == 0) {\n             throw new IllegalArgumentException(\"Array cannot be empty.\");\n         }\n      * \n      * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n-     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n      */\n     public static short max(short[] array) {\n         // Validates input\n         if (array == null) {\n-            throw new NullArgumentException(\"Array\");\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n         } else if (array.length == 0) {\n             throw new IllegalArgumentException(\"Array cannot be empty.\");\n         }\n      * \n      * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n-     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n      */\n     public static double max(double[] array) {\n         // Validates input\n         if (array== null) {\n-            throw new NullArgumentException(\"Array\");\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n         } else if (array.length == 0) {\n             throw new IllegalArgumentException(\"Array cannot be empty.\");\n         }\n      * \n      * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n-     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n      */\n     public static float max(float[] array) {\n         // Validates input\n         if (array == null) {\n-            throw new NullArgumentException(\"Array\");\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n         } else if (array.length == 0) {\n             throw new IllegalArgumentException(\"Array cannot be empty.\");\n         }", "timestamp": 1059695128, "metainfo": ""}