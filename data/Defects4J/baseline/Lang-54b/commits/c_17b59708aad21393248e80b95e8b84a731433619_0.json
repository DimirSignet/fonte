{"sha": "17b59708aad21393248e80b95e8b84a731433619", "log": "Fixes and better unit test code coverage from Nathan Beyer [nbeyer@kc.rr.com].   ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n     public StrBuilder replace(int startIndex, int endIndex, StrBuilder builder) {\n         endIndex = validateRange(startIndex, endIndex);\n         int insertLen = builder.length();\n-        int removeLen = endIndex = startIndex;\n+        int removeLen = endIndex - startIndex;\n         if (insertLen > removeLen) {\n             ensureCapacity(size - removeLen + insertLen);\n         }\n         if (insertLen != removeLen) {\n+            //shift the current characters to the right\n             System.arraycopy(buf, endIndex, buf, startIndex + insertLen, size - endIndex);\n+            //adjust the size accordingly\n+            size += (insertLen - removeLen);\n         }\n         builder.getChars(0, insertLen, buf, startIndex);\n         return this;\n         } else if (length >= size) {\n             return new String(buf, 0, size);\n         } else {\n-            return new String(buf, size - length, size);\n+            return new String(buf, size - length, length);\n         }\n     }\n \n--- a/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n         assertEquals(\"ddbbcc\", sb.toString());\n         sb.replace('a', 'd');\n         assertEquals(\"ddbbcc\", sb.toString());\n+        sb.replace('d', 'd');\n+        assertEquals(\"ddbbcc\", sb.toString());\n     }\n     \n     /**\n         assertEquals(\"ddbbcc\", sb.toString());\n     }\n     \n+    public void testReplaceIntIntStrBuilder() {\n+        StrBuilder sb = new StrBuilder(\"abc\");\n+        sb.replace(0, 1, new StrBuilder (\"d\"));\n+        assertEquals(\"dbc\", sb.toString());\n+        sb.replace(0, 1, new StrBuilder (\"aaa\"));\n+        assertEquals(\"aaabc\", sb.toString());\n+        \n+        sb = new StrBuilder(\"aabbcc\");\n+        sb.replace(0, 2, new StrBuilder(\"d\"));\n+        assertEquals(\"dbbcc\", sb.toString());\n+    }\n+    \n     public void testSetCharAt() {\n         StrBuilder sb = new StrBuilder();\n         try {\n         assertTrue(sb.startsWith(\"a\"));\n         assertTrue(sb.startsWith(\"ab\"));\n         assertTrue(sb.startsWith(\"abc\"));\n+        assertFalse(sb.startsWith(\"cba\"));\n     }\n     \n     public void testEndsWith() {\n         assertTrue(sb.endsWith(\"c\"));\n         assertTrue(sb.endsWith(\"bc\"));\n         assertTrue(sb.endsWith(\"abc\"));\n+        assertFalse(sb.endsWith(\"cba\"));\n         assertFalse(sb.endsWith(\"abcd\"));\n         assertFalse(sb.endsWith(\" abc\"));\n         assertFalse(sb.endsWith(\"abc \"));\n         assertEquals (2, sb.lastIndexOf(\"za\", sb.length()));\n         assertEquals (-1, sb.lastIndexOf(\"za\", 1));\n     }\n+    \n+    public void testContainsChar() {\n+        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n+        assertTrue (sb.contains('a'));\n+        assertTrue (sb.contains('o'));\n+        assertTrue (sb.contains('z'));\n+        assertFalse (sb.contains('1'));\n+    }\n+    \n+    public void testContainsString() {\n+        StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n+        assertTrue (sb.contains(\"a\"));\n+        assertTrue (sb.contains(\"pq\"));\n+        assertTrue (sb.contains(\"z\"));\n+        assertFalse (sb.contains(\"zyx\"));\n+    }\n+    \n+    public void testMidString() {\n+        StrBuilder sb = new StrBuilder(\"hello goodbye hello\");\n+        assertEquals (\"goodbye\", sb.midString(6, 7));\n+        assertEquals (\"hello\", sb.midString(0, 5));\n+        assertEquals (\"hello\", sb.midString(-5, 5));\n+        assertEquals (\"\", sb.midString(0, -1));\n+        assertEquals (\"\", sb.midString(20, 2));\n+    }\n+    \n+    public void testRightString() {\n+        StrBuilder sb = new StrBuilder(\"left right\");\n+        assertEquals (\"right\", sb.rightString(5));\n+        assertEquals (\"\", sb.rightString(0));\n+        assertEquals (\"\", sb.rightString(-5));\n+        assertEquals (\"left right\", sb.rightString(15));\n+    }\n+    \n+    public void testLeftString() {\n+        StrBuilder sb = new StrBuilder(\"left right\");\n+        assertEquals (\"left\", sb.leftString(4));\n+        assertEquals (\"\", sb.leftString(0));\n+        assertEquals (\"\", sb.leftString(-5));\n+        assertEquals (\"left right\", sb.leftString(15));\n+    }\n+    \n+    public void testSubstringInt() {\n+        StrBuilder sb = new StrBuilder (\"hello goodbye\");\n+        assertEquals (\"goodbye\", sb.substring(6));\n+        assertEquals (\"hello goodbye\".substring(6), sb.substring(6));\n+        assertEquals (\"hello goodbye\", sb.substring(0));\n+        assertEquals (\"hello goodbye\".substring(0), sb.substring(0));\n+        try {\n+            sb.substring(-1);\n+            fail ();\n+        } catch (StringIndexOutOfBoundsException e) {}\n+        \n+        try {\n+            sb.substring(15);\n+            fail ();\n+        } catch (StringIndexOutOfBoundsException e) {}\n+    \n+    }\n+    \n+    public void testSubstringIntInt() {\n+        StrBuilder sb = new StrBuilder (\"hello goodbye\");\n+        assertEquals (\"hello\", sb.substring(0, 5));\n+        assertEquals (\"hello goodbye\".substring(0, 6), sb.substring(0, 6));\n+        \n+        assertEquals (\"goodbye\", sb.substring(6, 13));\n+        assertEquals (\"hello goodbye\".substring(6,13), sb.substring(6, 13));\n+        \n+        assertEquals (\"goodbye\", sb.substring(6, 20));\n+        \n+        try {\n+            sb.substring(-1, 5);\n+            fail();\n+        } catch (StringIndexOutOfBoundsException e) {}\n+        \n+        try {\n+            sb.substring(15, 20);\n+            fail();\n+        } catch (StringIndexOutOfBoundsException e) {}\n+    }\n }", "timestamp": 1123037453, "metainfo": ""}