{"sha": "52938c9eb315e0974c1717ea5e8fcbc89accb693", "log": "Javadoc changes bug 22480, from Pete Gieser   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n /** \n  * <p><code>CompareTo</code> generation routines.</p>\n  *\n- * <p>This class provides methods to build a good <code>compareTo</code>\n- * method for any class. It is consistent with the <code>equals()</code> and\n+ * <p>This class provides methods to assist in building a quality\n+ * <code>compareTo(Object)</code>.  It is consistent with <code>equals(Object)</code> and\n  * <code>hashcode()</code> built with {@link EqualsBuilder} and\n  * {@link HashCodeBuilder}.</p>\n  *\n- * <p>Two Objects that compare equal using <code>equals()</code> should normally\n- * also compare equal using <code>compareTo()</code></p>.\n+ * <p>Two Objects that compare equal using <code>equals(Object)</code> should normally\n+ * also compare equal using <code>compareTo(Object)</code>.</p>\n  *\n  * <p>All relevant fields should be included in the calculation of the\n  * comparison. Derived fields may be ignored. The same fields, in the same\n- * order, should be used in both <code>compareTo()</code> and\n- * <code>equals()</code>.</p>\n- *\n- * <p>Typical use for the code is as follows:</p>\n+ * order, should be used in both <code>compareTo(Object)</code> and\n+ * <code>equals(Object)</code>.</p>\n+ *\n+ * <p>To use this class write code as follows:</p>\n  *\n  * <pre>\n- *  public int compareTo(Object o) {\n- *    MyClass rhs = (MyClass) o;\n- *    return new CompareToBuilder()\n- *                 .appendSuper(super.compareTo(o)\n- *                 .append(field1, rhs.field1)\n- *                 .append(field2, rhs.field2)\n- *                 .append(field3, rhs.field3)\n- *                 .toComparison();\n- *  }\n+ * public class MyClass {\n+ *   String field1;\n+ *   int field2;\n+ *   boolean field3;\n+ *\n+ *   ...\n+ *\n+ *   public int compareTo(Object o) {\n+ *     MyClass myClass = (MyClass) o;\n+ *     return new CompareToBuilder()\n+ *       .appendSuper(super.compareTo(o)\n+ *       .append(this.field1, myClass.field1)\n+ *       .append(this.field2, myClass.field2)\n+ *       .append(this.field3, myClass.field3)\n+ *       .toComparison();\n+ *   }\n+ * }\n  * </pre>\n  *\n- * <p>Alternatively, there is a method that uses reflection to determine\n- * the fields to test. Because these fields are usually private, the method,\n- * <code>reflectionCompare</code>, uses <code>AccessibleObject.setAccessible</code> to change\n- * the visibility of the fields. This will fail under a security manager,\n- * unless the appropriate permissions are set. It is also slower than testing\n- * explicitly.</p>\n- *\n- * <p>A typical invocation for this method would look like:</p>\n+ * <p>Alternatively, there is a method {@link #reflectionCompare reflectionCompare} that uses\n+ * reflection to determine the fields to append. Because fields can be private,\n+ * <code>reflectionCompare</code> uses <code>AccessibleObject.setAccessible</code> to\n+ * bypass normal access control checks. This will fail under a security manager,\n+ * unless the appropriate permissions are set up correctly. It is also\n+ * slower than appending explicitly.</p>\n+ *\n+ * <p>A typical implementation of <code>compareTo(Object)</code> using\n+ * <code>reflectionCompare</code> looks like:</p>\n+\n  * <pre>\n  * public int compareTo(Object o) {\n- *   return CompareToBuilder.reflectionCompare(this, obj);\n+ *   return CompareToBuilder.reflectionCompare(this, o);\n  * }\n  * </pre>\n  *\n  * @author Gary Gregory\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: CompareToBuilder.java,v 1.19 2003/07/21 23:32:41 scolebourne Exp $\n+ * @version $Id: CompareToBuilder.java,v 1.20 2003/08/16 12:40:31 scolebourne Exp $\n  */\n public class CompareToBuilder {\n     \n     /**\n-     * If the fields tested are equals.\n+     * Current state of the comparison as appended fields are checked.\n      */\n     private int comparison;\n \n         comparison = 0;\n     }\n \n-    //-------------------------------------------------------------------------\n-    \n+    //-----------------------------------------------------------------------\n     /** \n-     * <p>This method uses reflection to determine the ordering between two\n-     * Objects.</p>\n-     *\n-     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n-     * fields. This means that it will throw a security exception if run under\n-     * a security manager, if the permissions are not set up correctly. It is\n-     * also not as efficient as testing explicitly.</p>\n-     *\n-     * <p>Transient members will be not be tested, as they are likely derived\n-     * fields, and not part of the value of the object.</p>\n-     *\n-     * <p>Static fields will not be tested. Superclass fields will be included.</p>\n-     *\n-     * @param lhs  <code>this</code> object\n-     * @param rhs  the other object\n-     * @return a negative integer, zero, or a positive integer as this \n-     *  Object is less than, equal to, or greater than the specified Object.\n-     * @throws NullPointerException  if either (but not both) parameter is\n+     * <p>Compares two <code>Object</code>s via reflection.</p>\n+     *\n+     * <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code>\n+     * is used to bypass normal access control checks. This will fail under a \n+     * security manager unless the appropriate permissions are set.</p>\n+     *\n+     * <ul>\n+     * <li>Static fields will not be compared</li>\n+     * <li>Transient members will be not be compared, as they are likely derived\n+     *     fields</li>\n+     * <li>Superclass fields will be compared</li>\n+     * </ul>\n+     *\n+     * <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>,\n+     * they are considered equal.</p>\n+     *\n+     * @param lhs  left-hand object\n+     * @param rhs  right-hand object\n+     * @return a negative integer, zero, or a positive integer as <code>lhs</code>\n+     *  is less than, equal to, or greater than <code>rhs</code>\n+     * @throws NullPointerException  if either (but not both) parameters are\n      *  <code>null</code>\n-     * @throws ClassCastException  if the specified Object's type prevents it\n-     *  from being compared to this Object.\n+     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n+     *  with <code>lhs</code>\n      */\n     public static int reflectionCompare(Object lhs, Object rhs) {\n         return reflectionCompare(lhs, rhs, false, null);\n     }\n \n     /**\n-     * <p>This method uses reflection to determine if the two Objects are\n-     * equal.</p>\n-     *\n-     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n-     * fields. This means that it will throw a security exception if run under\n-     * a security manager, if  the permissions are not set up correctly. It is\n-     * also not as efficient as testing explicitly.</p>\n-     *\n-     * <p>If the <code>testTransients</code> is set to <code>true</code>,\n-     * transient members will be tested, otherwise they are ignored, as they\n-     * are likely derived fields, and not part of the value of the object.</p>\n-     *\n-     * <p>Static fields will not be tested. Superclass fields will be included.</p>\n-     * \n-     * @param lhs  <code>this</code> object\n-     * @param rhs  the other object\n-     * @param testTransients  whether to include transient fields\n-     * @return a negative integer, zero, or a positive integer as this \n-     *  Object is less than, equal to, or greater than the specified Object.\n-     * @throws NullPointerException  if either (but not both) parameter is\n-     *  <code>null</code>\n-     * @throws ClassCastException  if the specified Object's type prevents it\n-     *  from being compared to this Object.\n-     */\n-    public static int reflectionCompare(Object lhs, Object rhs, boolean testTransients) {\n-        return reflectionCompare(lhs, rhs, testTransients, null);\n-    }\n-\n-    /**\n-     * <p>This method uses reflection to determine if the two Objects are\n-     * equal.</p>\n-     *\n-     * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private\n-     * fields. This means that it will throw a security exception if run under\n-     * a security manager, if  the permissions are not set up correctly. It is\n-     * also not as efficient as testing explicitly.</p>\n-     *\n-     * <p>If the <code>testTransients</code> is set to <code>true</code>,\n-     * transient members will be tested, otherwise they are ignored, as they\n-     * are likely derived fields, and not part of the value of the object.</p>\n-     *\n-     * <p>Static fields will not be included. Superclass fields will be appended\n-     * up to and including the specified superclass. A null superclass is treated\n-     * as java.lang.Object.</p>\n-     * \n-     * @param lhs  <code>this</code> object\n-     * @param rhs  the other object\n-     * @param testTransients  whether to include transient fields\n-     * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null\n-     * @return a negative integer, zero, or a positive integer as this \n-     *  Object is less than, equal to, or greater than the specified Object.\n-     * @throws NullPointerException  if either (but not both) parameter is\n-     *  <code>null</code>\n-     * @throws ClassCastException  if the specified Object's type prevents it\n-     *  from being compared to this Object.\n-     */\n-    public static int reflectionCompare(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass) {\n+     * <p>Compares two <code>Object</code>s via reflection.</p>\n+     *\n+     * <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code>\n+     * is used to bypass normal access control checks. This will fail under a \n+     * security manager unless the appropriate permissions are set.</p>\n+     *\n+     * <ul>\n+     * <li>Static fields will not be compared</li>\n+     * <li>If <code>compareTransients</code> is <code>true</code>,\n+     *     compares transient members.  Otherwise ignores them, as they\n+     *     are likely derived fields.</li>\n+     * <li>Superclass fields will be compared</li>\n+     * </ul>\n+     *\n+     * <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>,\n+     * they are considered equal.</p>\n+     *\n+     * @param lhs  left-hand object\n+     * @param rhs  right-hand object\n+     * @param compareTransients  whether to compare transient fields\n+     * @return a negative integer, zero, or a positive integer as <code>lhs</code>\n+     *  is less than, equal to, or greater than <code>rhs</code>\n+     * @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>\n+     *  (but not both) is <code>null</code>\n+     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n+     *  with <code>lhs</code>\n+     */\n+    public static int reflectionCompare(Object lhs, Object rhs, boolean compareTransients) {\n+        return reflectionCompare(lhs, rhs, compareTransients, null);\n+    }\n+\n+    /**\n+     * <p>Compares two <code>Object</code>s via reflection.</p>\n+     *\n+     * <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code>\n+     * is used to bypass normal access control checks. This will fail under a \n+     * security manager unless the appropriate permissions are set.</p>\n+     *\n+     * <ul>\n+     * <li>Static fields will not be compared</li>\n+     * <li>If the <code>compareTransients</code> is <code>true</code>,\n+     *     compares transient members.  Otherwise ignores them, as they\n+     *     are likely derived fields.</li>\n+     * <li>Compares superclass fields up to and including <code>reflectUpToClass</code>.\n+     *     If <code>reflectUpToClass</code> is <code>null</code>, compares all superclass fields.</li>\n+     * </ul>\n+     *\n+     * <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>,\n+     * they are considered equal.</p>\n+     *\n+     * @param lhs  left-hand object\n+     * @param rhs  right-hand object\n+     * @param compareTransients  whether to compare transient fields\n+     * @param reflectUpToClass  last superclass for which fields are compared\n+     * @return a negative integer, zero, or a positive integer as <code>lhs</code>\n+     *  is less than, equal to, or greater than <code>rhs</code>\n+     * @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>\n+     *  (but not both) is <code>null</code>\n+     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n+     *  with <code>lhs</code>\n+     */\n+    public static int reflectionCompare(Object lhs, Object rhs, boolean compareTransients, Class reflectUpToClass) {\n         if (lhs == rhs) {\n             return 0;\n         }\n         if (lhs == null || rhs == null) {\n             throw new NullPointerException();\n         }\n-        Class c1 = lhs.getClass();\n-        if (!c1.isInstance(rhs)) {\n+        Class lhsClazz = lhs.getClass();\n+        if (!lhsClazz.isInstance(rhs)) {\n             throw new ClassCastException();\n         }\n         CompareToBuilder compareToBuilder = new CompareToBuilder();\n-        reflectionAppend(lhs, rhs, c1, compareToBuilder, testTransients);\n-        while (c1.getSuperclass() != null && c1 != reflectUpToClass) {\n-            c1 = c1.getSuperclass();\n-            reflectionAppend(lhs, rhs, c1, compareToBuilder, testTransients);\n+        reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients);\n+        while (lhsClazz.getSuperclass() != null && lhsClazz != reflectUpToClass) {\n+            lhsClazz = lhsClazz.getSuperclass();\n+            reflectionAppend(lhs, rhs, lhsClazz, compareToBuilder, compareTransients);\n         }\n         return compareToBuilder.toComparison();\n     }\n \n     /**\n-     * <p>Appends the fields and values defined by the given object of the\n-     * given Class.</p>\n+     * <p>Appends to <code>builder</code> the comparison of <code>lhs</code>\n+     * to <code>rhs</code> using the fields defined in <code>clazz</code>.</p>\n      * \n-     * @param lhs  the left hand object\n-     * @param rhs  the right hand object\n-     * @param clazz  the class to append details of\n-     * @param builder  the builder to append to\n-     * @param useTransients  whether to test transient fields\n+     * @param lhs  left-hand object\n+     * @param rhs  right-hand object\n+     * @param clazz  <code>Class</code> that defines fields to be compared\n+     * @param builder  <code>CompareToBuilder</code> to append to\n+     * @param useTransients  whether to compare transient fields\n      */\n     private static void reflectionAppend(\n         Object lhs,\n         Class clazz,\n         CompareToBuilder builder,\n         boolean useTransients) {\n+        \n         Field[] fields = clazz.getDeclaredFields();\n         AccessibleObject.setAccessible(fields, true);\n         for (int i = 0; i < fields.length && builder.comparison == 0; i++) {\n                 try {\n                     builder.append(f.get(lhs), f.get(rhs));\n                 } catch (IllegalAccessException e) {\n-                    //this can't happen. Would get a Security exception instead\n-                    //throw a runtime exception in case the impossible happens.\n+                    // This can't happen. Would get a Security exception instead.\n+                    // Throw a runtime exception in case the impossible happens.\n                     throw new InternalError(\"Unexpected IllegalAccessException\");\n                 }\n             }\n         }\n     }\n \n-    //-------------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Appends to the <code>builder</code> the <code>compareTo(Object)</code>\n+     * result of the superclass.</p>\n+     *\n+     * @param superCompareTo  result of calling <code>super.compareTo(Object)</code>\n+     * @return this - used to chain append calls\n+     */\n+    public CompareToBuilder appendSuper(int superCompareTo) {\n+        if (comparison != 0) {\n+            return this;\n+        }\n+        comparison = superCompareTo;\n+        return this;\n+    }\n     \n-    /**\n-     * <p>Adds the result of super.hashCode() to this builder.</p>\n-     *\n-     * @param superCompareTo  the result of calling <code>super.compareTo()</code>\n-     * @return CompareToBuilder - used to chain calls.\n-     */\n-    public CompareToBuilder appendSuper(int superCompareTo) {\n-        if (comparison != 0) {\n-            return this;\n-        }\n-        comparison = superCompareTo;\n-        return this;\n-    }\n-    \n-    //-------------------------------------------------------------------------\n-    \n-    /**\n-     * <p>Comparison of two Object references.</p>\n-     *\n-     * <ol>\n-     *  <li>Check if Objects are same using <code>==</code></li>\n-     *  <li>Check if either is null, a null object is less than a non-null</li>\n-     *  <li>Check the object contents</li>\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Appends to the <code>builder</code> the comparison of\n+     * two <code>Object</code>s.</p>\n+     *\n+     * <ol>\n+     * <li>Check if <code>lhs == rhs</code></li>\n+     * <li>Check if either <code>lhs</code> or <code>rhs</code> is <code>null</code>,\n+     *     a <code>null</code> object is less than a non-<code>null</code> object</li>\n+     * <li>Check the object contents</li>\n      * </ol>\n      * \n-     * <p>The first parameter to be compared must either be an array or implement\n-     * <code>Comparable</code>.</p>\n-     *\n-     * @param lhs  the Object from <code>this</code> object\n-     * @param rhs  the Object from the other object\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws ClassCastException if the specified Object's type prevents it\n-     * from being compared to this Object.\n+     * <p><code>lhs</code> must either be an array or implement {@link Comparable}.</p>\n+     *\n+     * @param lhs  left-hand object\n+     * @param rhs  right-hand object\n+     * @return this - used to chain append calls\n+     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n+     *  with <code>lhs</code>\n      */\n     public CompareToBuilder append(Object lhs, Object rhs) {\n         return append(lhs, rhs, null);\n     }\n \n     /**\n-     * <p>Comparison of two Object references.</p>\n-     * <ol>\n-     *  <li>Check if Objects are same using <code>==</code></li>\n-     *  <li>Check if either is null, a null object is less than a non-null</li>\n-     *  <li>Check the object contents</li>\n-     * </ol>\n-     * \n-     * <p>If the first parameter to be compared is an array, the array methods will\n-     * be used. Otherwise the comparator will be used. If the comparator is null, \n-     * the <code>lhs</code> will be cast to <code>Comparable</code>.</p>\n-     *\n-     * @param lhs  the Object from <code>this</code> object\n-     * @param rhs  the Object from the other object\n-     * @param comparator  the comparator to use to compare the objects,\n-     *  <code>null</code> means to treat the <code>lhs</code> as <code>Comparable</code>.\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws ClassCastException if the specified Object's type prevents it\n-     * from being compared to this Object.\n+     * <p>Appends to the <code>builder</code> the comparison of\n+     * two <code>Object</code>s.</p>\n+     *\n+     * <ol>\n+     * <li>Check if <code>lhs == rhs</code></li>\n+     * <li>Check if either <code>lhs</code> or <code>rhs</code> is <code>null</code>,\n+     *     a <code>null</code> object is less than a non-<code>null</code> object</li>\n+     * <li>Check the object contents</li>\n+     * </ol>\n+     *\n+     * <p>If <code>lhs</code> is an array, array comparison methods will be used.\n+     * Otherwise <code>comparator</code> will be used to compare the objects.\n+     * If <code>comparator</code> is <code>null</code>, <code>lhs</code> must\n+     * implement {@link Comparable} instead.</p>\n+     *\n+     * @param lhs  left-hand object\n+     * @param rhs  right-hand object\n+     * @param comparator  <code>Comparator</code> used to compare the objects,\n+     *  <code>null</code> means treat lhs as <code>Comparable</code>\n+     * @return this - used to chain append calls\n+     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n+     *  with <code>lhs</code>\n      */\n     public CompareToBuilder append(Object lhs, Object rhs, Comparator comparator) {\n         if (comparison != 0) {\n             comparison = +1;\n             return this;\n         }\n-        Class lhsClass = lhs.getClass();\n-        if (lhsClass.isArray()) {\n-            // 'Switch' on type of array, to dispatch to the correct handler\n-            // This handles multi dimensional arrays\n-            // this could throw a ClassCastException is rhs is not the correct array type\n+        if (lhs.getClass().isArray()) {\n+            // switch on type of array, to dispatch to the correct handler\n+            // handles multi dimensional arrays\n+            // throws a ClassCastException if rhs is not the correct array type\n             if (lhs instanceof long[]) {\n                 append((long[]) lhs, (long[]) rhs);\n             } else if (lhs instanceof int[]) {\n             } else if (lhs instanceof boolean[]) {\n                 append((boolean[]) lhs, (boolean[]) rhs);\n             } else {\n-                // Not an array of primitives\n-                // this could throw a ClassCastException is rhs is not an array\n+                // not an array of primitives\n+                // throws a ClassCastException if rhs is not an array\n                 append((Object[]) lhs, (Object[]) rhs, comparator);\n             }\n         } else {\n         return this;\n     }\n \n-    /**\n-     * <p>Test if two <code>long</code>s are &lt;, &gt; or ==.</p>\n-     *\n-     * @param lhs  the <code>long</code> from <code>this</code> object\n-     * @param rhs  the <code>long</code> from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+    //-------------------------------------------------------------------------\n+    /**\n+     * Appends to the <code>builder</code> the comparison of\n+     * two <code>long</code>s.\n+     *\n+     * @param lhs  left-hand value\n+     * @param rhs  right-hand value\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(long lhs, long rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Test if two <code>int</code>s are &lt;, &gt; or ==.</p>\n-     *\n-     * @param lhs  the <code>int</code> from <code>this</code> object\n-     * @param rhs  the <code>int</code> from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * Appends to the <code>builder</code> the comparison of\n+     * two <code>int</code>s.\n+     *\n+     * @param lhs  left-hand value\n+     * @param rhs  right-hand value\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(int lhs, int rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Test if two <code>short</code>s are &lt;, &gt; or ==.</p>\n+     * Appends to the <code>builder</code> the comparison of\n+     * two <code>short</code>s.\n      * \n-     * @param lhs  the <code>short</code> from <code>this</code> object\n-     * @param rhs  the <code>short</code> from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * @param lhs  left-hand value\n+     * @param rhs  right-hand value\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(short lhs, short rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Test if two <code>char</code>s are &lt;, &gt; or ==.</p>\n-     *\n-     * @param lhs  the <code>char</code> from <code>this</code> object\n-     * @param rhs  the <code>char</code> from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * Appends to the <code>builder</code> the comparison of\n+     * two <code>char</code>s.\n+     *\n+     * @param lhs  left-hand value\n+     * @param rhs  right-hand value\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(char lhs, char rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Test if two <code>byte</code>s are &lt, &gt; or ==.</p>\n+     * Appends to the <code>builder</code> the comparison of\n+     * two <code>byte</code>s.\n      * \n-     * @param lhs  the <code>byte</code> from <code>this</code> object\n-     * @param rhs  the <code>byte</code> from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * @param lhs  left-hand value\n+     * @param rhs  right-hand value\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(byte lhs, byte rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Test if two <code>double</code>s are &lt;, &gt; or ==.</p>\n+     * <p>Appends to the <code>builder</code> the comparison of\n+     * two <code>double</code>s.</p>\n      *\n      * <p>This handles NaNs, Infinties, and <code>-0.0</code>.</p>\n      *\n      * <p>It is compatible with the hash code generated by\n      * <code>HashCodeBuilder</code>.</p>\n      *\n-     * @param lhs  the <code>double</code> from <code>this</code> object\n-     * @param rhs  the <code>double</code> from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * @param lhs  left-hand value\n+     * @param rhs  right-hand value\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(double lhs, double rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Test if two <code>float</code>s are &lt;, &gt; or ==.</p>\n+     * <p>Appends to the <code>builder</code> the comparison of\n+     * two <code>float</code>s.</p>\n      *\n      * <p>This handles NaNs, Infinties, and <code>-0.0</code>.</p>\n      *\n      * <p>It is compatible with the hash code generated by\n      * <code>HashCodeBuilder</code>.</p>\n      *\n-     * @param lhs  the <code>float</code> from <code>this</code> object\n-     * @param rhs  the <code>float</code> from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * @param lhs  left-hand value\n+     * @param rhs  right-hand value\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(float lhs, float rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Test if two <code>booleans</code>s are &lt;, &gt; or ==.</p>\n-     *\n-     * @param lhs  the <code>boolean</code> from <code>this</code> object\n-     * @param rhs  the <code>boolean</code> from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * Appends to the <code>builder</code> the comparison of\n+     * two <code>booleans</code>s.\n+     *\n+     * @param lhs  left-hand value\n+     * @param rhs  right-hand value\n+     * @return this - used to chain append calls\n       */\n     public CompareToBuilder append(boolean lhs, boolean rhs) {\n         if (comparison != 0) {\n         return this;\n     }\n \n-    /**\n-     * <p>Deep comparison of an <code>Object</code> array.</p>\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Appends to the <code>builder</code> the deep comparison of\n+     * two <code>Object</code> arrays.</p>\n      *\n      * <ol>\n      *  <li>Check if arrays are the same using <code>==</code></li>\n-     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n      *  <li>Check array length, a short length array is less than a long length array</li>\n-     *  <li>Check array contents element by element using {@link #append(long, long)}</li>\n+     *  <li>Check array contents element by element using {@link #append(Object, Object, Comparator)}</li>\n      * </ol>\n      *\n      * <p>This method will also will be called for the top level of multi-dimensional,\n      * ragged, and multi-typed arrays.</p>\n      *\n-     * @param lhs  array from <code>this</code> object\n-     * @param rhs  array from the other object\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws ClassCastException  if the specified Object's type prevents it\n-     *  from being compared to this Object.\n+     * @param lhs  left-hand array\n+     * @param rhs  right-hand array\n+     * @return this - used to chain append calls\n+     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n+     *  with <code>lhs</code>\n      */\n     public CompareToBuilder append(Object[] lhs, Object[] rhs) {\n         return append(lhs, rhs, null);\n     }\n     \n     /**\n-     * <p>Deep comparison of an <code>Object</code> array.</p>\n+     * <p>Appends to the <code>builder</code> the deep comparison of\n+     * two <code>Object</code> arrays.</p>\n      *\n      * <ol>\n      *  <li>Check if arrays are the same using <code>==</code></li>\n-     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n-     *  <li>Check array length, a shorter length array is less than a longer length array</li>\n+     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n+     *  <li>Check array length, a short length array is less than a long length array</li>\n      *  <li>Check array contents element by element using {@link #append(Object, Object, Comparator)}</li>\n      * </ol>\n      *\n      * <p>This method will also will be called for the top level of multi-dimensional,\n      * ragged, and multi-typed arrays.</p>\n      *\n-     * @param lhs  array from <code>this</code> object\n-     * @param rhs  array from the other object\n-     * @param comparator  the comparator to use to compare the objects,\n-     *  <code>null</code> means to treat the <code>lhs</code> as <code>Comparable</code>.\n-     * @return CompareToBuilder - used to chain calls.\n-     * @throws ClassCastException  if the specified Object's type prevents it\n-     *  from being compared to this Object.\n-     */\n+     * @param lhs  left-hand array\n+     * @param rhs  right-hand array\n+     * @param comparator  <code>Comparator</code> to use to compare the array elements,\n+     *  <code>null</code> means to treat <code>lhs</code> elements as <code>Comparable</code>.\n+     * @return this - used to chain append calls\n+     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n+       *  with <code>lhs</code>\n+       */\n     public CompareToBuilder append(Object[] lhs, Object[] rhs, Comparator comparator) {\n         if (comparison != 0) {\n             return this;\n     }\n \n     /**\n-     * <p>Deep comparison of a <code>long</code> array.</p>\n+     * <p>Appends to the <code>builder</code> the deep comparison of\n+     * two <code>long</code> arrays.</p>\n      *\n      * <ol>\n      *  <li>Check if arrays are the same using <code>==</code></li>\n-     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(long, long)}</li>\n      * </ol>\n      *\n-     * @param lhs  array from <code>this</code> object\n-     * @param rhs  array from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * @param lhs  left-hand array\n+     * @param rhs  right-hand array\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(long[] lhs, long[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Deep comparison of an <code>int</code> array.</p>\n+     * <p>Appends to the <code>builder</code> the deep comparison of\n+     * two <code>int</code> arrays.</p>\n      *\n      * <ol>\n      *  <li>Check if arrays are the same using <code>==</code></li>\n-     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(int, int)}</li>\n      * </ol>\n      *\n-     * @param lhs  array from <code>this</code> object\n-     * @param rhs  array from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * @param lhs  left-hand array\n+     * @param rhs  right-hand array\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(int[] lhs, int[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Deep comparison of a <code>short</code> array.</p>\n+     * <p>Appends to the <code>builder</code> the deep comparison of\n+     * two <code>short</code> arrays.</p>\n      *\n      * <ol>\n      *  <li>Check if arrays are the same using <code>==</code></li>\n-     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(short, short)}</li>\n      * </ol>\n      *\n-     * @param lhs  array from <code>this</code> object\n-     * @param rhs  array from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * @param lhs  left-hand array\n+     * @param rhs  right-hand array\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(short[] lhs, short[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Deep comparison of a <code>char</code> array.</p>\n+     * <p>Appends to the <code>builder</code> the deep comparison of\n+     * two <code>char</code> arrays.</p>\n      *\n      * <ol>\n      *  <li>Check if arrays are the same using <code>==</code></li>\n-     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(char, char)}</li>\n      * </ol>\n      *\n-     * @param lhs  array from <code>this</code> object\n-     * @param rhs  array from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * @param lhs  left-hand array\n+     * @param rhs  right-hand array\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(char[] lhs, char[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Deep comparison of a <code>byte</code> array.</p>\n+     * <p>Appends to the <code>builder</code> the deep comparison of\n+     * two <code>byte</code> arrays.</p>\n      *\n      * <ol>\n      *  <li>Check if arrays are the same using <code>==</code></li>\n-     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(byte, byte)}</li>\n      * </ol>\n      *\n-     * @param lhs  array from <code>this</code> object\n-     * @param rhs  array from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * @param lhs  left-hand array\n+     * @param rhs  right-hand array\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(byte[] lhs, byte[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Deep comparison of a <code>double</code> array.</p>\n+     * <p>Appends to the <code>builder</code> the deep comparison of\n+     * two <code>double</code> arrays.</p>\n      *\n      * <ol>\n      *  <li>Check if arrays are the same using <code>==</code></li>\n-     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(double, double)}</li>\n      * </ol>\n      *\n-     * @param lhs  array from <code>this</code> object\n-     * @param rhs  array from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * @param lhs  left-hand array\n+     * @param rhs  right-hand array\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(double[] lhs, double[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Deep comparison of a <code>float</code> array.</p>\n+     * <p>Appends to the <code>builder</code> the deep comparison of\n+     * two <code>float</code> arrays.</p>\n      *\n      * <ol>\n      *  <li>Check if arrays are the same using <code>==</code></li>\n-     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n-     *  <li>Check array contents element by element using {@link #append(float, float)}\n-     * </ol>\n-     *\n-     * @param lhs  array from <code>this</code> object\n-     * @param rhs  array from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     *  <li>Check array contents element by element using {@link #append(float, float)}</li>\n+     * </ol>\n+     *\n+     * @param lhs  left-hand array\n+     * @param rhs  right-hand array\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(float[] lhs, float[] rhs) {\n         if (comparison != 0) {\n     }\n \n     /**\n-     * <p>Deep comparison of a <code>boolean/code> array.</p>\n+     * <p>Appends to the <code>builder</code> the deep comparison of\n+     * two <code>boolean</code> arrays.</p>\n      *\n      * <ol>\n      *  <li>Check if arrays are the same using <code>==</code></li>\n-     *  <li>Check if either is <code>null</code>, a null array is less than a non-null</li>\n+     *  <li>Check if for <code>null</code>, <code>null</code> is less than non-<code>null</code></li>\n      *  <li>Check array length, a shorter length array is less than a longer length array</li>\n      *  <li>Check array contents element by element using {@link #append(boolean, boolean)}</li>\n      * </ol>\n      *\n-     * @param lhs  array from <code>this</code> object\n-     * @param rhs  array from the other object\n-     * @return CompareToBuilder - used to chain calls.\n+     * @param lhs  left-hand array\n+     * @param rhs  right-hand array\n+     * @return this - used to chain append calls\n      */\n     public CompareToBuilder append(boolean[] lhs, boolean[] rhs) {\n         if (comparison != 0) {\n         return this;\n     }\n \n-    /**\n-     * <p>Return a negative integer if this <code>Object</code> is less\n-     * than, a positive integer if this <code>Object</code> is greater than,\n-     * or <code>0</code> if this <code>Object</code> is equal to the specified\n-     * Object.</p>\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a negative integer, a positive integer, or zero as\n+     * the <code>builder</code> has judged the \"left-hand\" side\n+     * as less than, greater than, or equal to the \"right-hand\"\n+     * side.\n      * \n-     * @return int - a negative integer, zero, or a positive integer as this \n-     *  Object is less than, equal to, or greater than the specified Object.\n+     * @return final comparison result\n      */\n     public int toComparison() {\n         return comparison;\n--- a/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n  * <p><code>StandardToStringStyle</code> works with {@link ToStringBuilder}\n  * to create a <code>toString</code>.</p>\n  *\n- * <p>This class is intended to be used as a <code>Singleton</code>. There\n- * is no need to instantiate a new style each time. Your code should\n- * instantiate the class once, customize the values as required, and then\n+ * <p>This class is intended to be used as a singleton.\n+ * There is no need to instantiate a new style each time.\n+ * Simply instantiate the class once, customize the values as required, and\n  * store the result in a public static final variable for the rest of the\n  * program to access.</p>\n  *\n  * @author Stephen Colebourne\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: StandardToStringStyle.java,v 1.10 2003/07/21 23:30:42 scolebourne Exp $\n+ * @version $Id: StandardToStringStyle.java,v 1.11 2003/08/16 12:41:23 scolebourne Exp $\n  */\n public class StandardToStringStyle extends ToStringStyle {\n     ", "timestamp": 1061037683, "metainfo": ""}