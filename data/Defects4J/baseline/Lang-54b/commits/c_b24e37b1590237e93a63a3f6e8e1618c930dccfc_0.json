{"sha": "b24e37b1590237e93a63a3f6e8e1618c930dccfc", "log": "Add trimToNull Add trimToEmpty   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Holger Krauth\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n+ * @author Arun Mammen Thomas\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.37 2003/03/23 21:52:31 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.38 2003/03/24 00:47:02 scolebourne Exp $\n  */\n public class StringUtils {\n \n      * <p>Removes control characters, including whitespace, from both\n      * ends of this String, handling <code>null</code> by returning\n      * an empty String.</p>\n+     * \n+     * <pre>\n+     * StringUtils.clean(\"abc\")         = \"abc\"\n+     * StringUtils.clean(\"    abc    \") = \"abc\"\n+     * StringUtils.clean(\"     \")       = \"\"\n+     * StringUtils.clean(\"\")            = \"\"\n+     * StringUtils.clean(null)          = \"\"\n+     * </pre>\n      *\n      * @see java.lang.String#trim()\n      * @param str the String to check\n      * <p>Removes control characters, including whitespace, from both\n      * ends of this String, handling <code>null</code> by returning\n      * <code>null</code>.</p>\n+     * \n+     * <p>The string is trimmed using {@link String#trim()}.</p>\n+     * \n+     * <pre>\n+     * StringUtils.trim(\"abc\")         = \"abc\"\n+     * StringUtils.trim(\"    abc    \") = \"abc\"\n+     * StringUtils.trim(\"     \")       = \"\"\n+     * StringUtils.trim(\"\")            = \"\"\n+     * StringUtils.trim(null)          = null\n+     * </pre>\n      *\n      * @see java.lang.String#trim()\n-     * @param str the String to check\n+     * @param str the String to be trimmed\n      * @return the trimmed text (or <code>null</code>)\n      */\n     public static String trim(String str) {\n         return (str == null ? null : str.trim());\n+    }\n+\n+    /** \n+     * <p>Removes control characters, including whitespace, from both  \n+     * ends of this string returning <code>null</code> if the string is \n+     * empty after the trim or if it is <code>null</code>.\n+     * \n+     * <p>The string is trimmed using {@link String#trim()}.</p>\n+     * \n+     * <pre>\n+     * StringUtils.trimToNull(\"abc\")         = \"abc\"\n+     * StringUtils.trimToNull(\"    abc    \") = \"abc\"\n+     * StringUtils.trimToNull(\"     \")       = null\n+     * StringUtils.trimToNull(\"\")            = null\n+     * StringUtils.trimToNull(null)          = null\n+     * </pre>\n+     *  \n+     * @see java.lang.String#trim()\n+     * @param str the String to be trimmed.\n+     * @return the trimmed string, or null if it's empty or null\n+     */\n+    public static String trimToNull(String str) {\n+        String ts = trim(str);\n+        return (ts == null || ts.length() == 0 ? null : ts);\n+    }\n+\n+    /** \n+     * <p>Removes control characters, including whitespace, from both \n+     * ends of this string returning an empty string if the string is\n+     * empty after the trim or if it is <code>null</code>.\n+     * \n+     * <p>The string is trimmed using {@link String#trim()}.</p>\n+     * \n+     * <pre>\n+     * StringUtils.trimToEmpty(\"abc\")         = \"abc\"\n+     * StringUtils.trimToEmpty(\"    abc    \") = \"abc\"\n+     * StringUtils.trimToEmpty(\"     \")       = \"\"\n+     * StringUtils.trimToEmpty(\"\")            = \"\"\n+     * StringUtils.trimToEmpty(null)          = \"\"\n+     * </pre>\n+     *  \n+     * @see java.lang.String#trim()\n+     * @param str the String to be trimmed\n+     * @return the trimmed string, or an empty string if it's empty or null\n+     */\n+    public static String trimToEmpty(String str) {\n+        return (str == null ? \"\" : str.trim());\n     }\n \n     /**\n     /**\n      * <p>Checks if the String contains only certain chars.</p>\n      *\n-     * @param str  the string to check\n-     * @param validChars  a string of valid chars\n+     * @param str the String to check\n+     * @param validChars a string of valid chars\n      * @return true if it only contains valid chars and is non-null\n      */\n     public static boolean containsOnly(String str, String validChars) {\n     /**\n      * <p>Checks if the String contains only certain chars.</p>\n      *\n-     * @param str  the string to check\n-     * @param validChars  an array of valid chars\n+     * @param str the String to check\n+     * @param validChars an array of valid chars\n      * @return true if it only contains valid chars and is non-null\n      */\n     public static boolean containsOnly(String str, char[] validChars) {\n     /**\n      * <p>Checks that the String does not contain certain chars.</p>\n      *\n-     * @param str  the string to check\n-     * @param invalidChars  a string of invalid chars\n+     * @param str the String to check\n+     * @param invalidChars a string of invalid chars\n      * @return true if it contains none of the invalid chars, or is null\n      */\n     public static boolean containsNone(String str, String invalidChars) {\n     /**\n      * <p>Checks that the String does not contain certain chars.</p>\n      *\n-     * @param str  the string to check\n-     * @param invalidChars  an array of invalid chars\n+     * @param str the String to check\n+     * @param invalidChars an array of invalid chars\n      * @return true if it contains none of the invalid chars, or is null\n      */\n     public static boolean containsNone(String str, char[] invalidChars) {\n--- a/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: StringUtilsTrimEmptyTest.java,v 1.6 2003/03/23 21:51:19 scolebourne Exp $\n+ * @version $Id: StringUtilsTrimEmptyTest.java,v 1.7 2003/03/24 00:47:02 scolebourne Exp $\n  */\n public class StringUtilsTrimEmptyTest extends TestCase {\n     private static final String FOO = \"foo\";\n         assertEquals(FOO, StringUtils.clean(\" \" + FOO + \"  \"));\n         assertEquals(FOO, StringUtils.clean(\" \" + FOO));\n         assertEquals(FOO, StringUtils.clean(FOO + \"\"));\n+        assertEquals(\"\", StringUtils.clean(\" \\t\\r\\n\\b \"));\n+        assertEquals(\"\", StringUtils.clean(\"\"));\n         assertEquals(\"\", StringUtils.clean(null));\n     }\n \n         assertEquals(FOO, StringUtils.trim(\" \" + FOO + \"  \"));\n         assertEquals(FOO, StringUtils.trim(\" \" + FOO));\n         assertEquals(FOO, StringUtils.trim(FOO + \"\"));\n+        assertEquals(\"\", StringUtils.trim(\" \\t\\r\\n\\b \"));\n+        assertEquals(\"\", StringUtils.trim(\"\"));\n         assertEquals(null, StringUtils.trim(null));\n+    }\n+\n+    public void testTrimToNull() {\n+        assertEquals(FOO, StringUtils.trimToNull(FOO + \"  \"));\n+        assertEquals(FOO, StringUtils.trimToNull(\" \" + FOO + \"  \"));\n+        assertEquals(FOO, StringUtils.trimToNull(\" \" + FOO));\n+        assertEquals(FOO, StringUtils.trimToNull(FOO + \"\"));\n+        assertEquals(null, StringUtils.trimToNull(\" \\t\\r\\n\\b \"));\n+        assertEquals(null, StringUtils.trimToNull(\"\"));\n+        assertEquals(null, StringUtils.trimToNull(null));\n+    }\n+\n+    public void testTrimToEmpty() {\n+        assertEquals(FOO, StringUtils.trimToEmpty(FOO + \"  \"));\n+        assertEquals(FOO, StringUtils.trimToEmpty(\" \" + FOO + \"  \"));\n+        assertEquals(FOO, StringUtils.trimToEmpty(\" \" + FOO));\n+        assertEquals(FOO, StringUtils.trimToEmpty(FOO + \"\"));\n+        assertEquals(\"\", StringUtils.trimToEmpty(\" \\t\\r\\n\\b \"));\n+        assertEquals(\"\", StringUtils.trimToEmpty(\"\"));\n+        assertEquals(\"\", StringUtils.trimToEmpty(null));\n     }\n \n     public void testIsNotEmpty() {", "timestamp": 1048466822, "metainfo": ""}