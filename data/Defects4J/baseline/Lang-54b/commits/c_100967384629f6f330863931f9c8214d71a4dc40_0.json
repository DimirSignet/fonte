{"sha": "100967384629f6f330863931f9c8214d71a4dc40", "log": "Corrected speiling mistake spotted by Jeff Varszegi.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/reflect/MethodUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/MethodUtils.java\n  * @author Gregor Raman\n  * @author Jan Sorensen\n  * @author Robert Burrell Donkin\n- * @version $Id: MethodUtils.java,v 1.5 2002/11/20 21:45:47 rdonkin Exp $\n+ * @version $Id: MethodUtils.java,v 1.6 2002/11/20 22:31:40 rdonkin Exp $\n  */\n public class MethodUtils {\n     \n                     Method[] methods = acls.getDeclaredMethods();\n                     for (int i = 0; i < methods.length; i++) {\n                         if (methods[i].getName().equals(methodName) &&\n-                            ReflectionUtils.isCompatable(paramTypes, methods[i].getParameterTypes())) {\n+                            ReflectionUtils.isCompatible(paramTypes, methods[i].getParameterTypes())) {\n                             if (Modifier.isPublic(methods[i].getModifiers())) {\n                                 methods[i].setAccessible(true);\n                             }\n                             log(\"Param=\" + parameterTypes[n].getName());\n                             log(\"Method=\" + methodsParams[n].getName());\n                         }\n-                        if (!ReflectionUtils.isCompatable(parameterTypes[n], methodsParams[n])) {\n+                        if (!ReflectionUtils.isCompatible(parameterTypes[n], methodsParams[n])) {\n                             if (debug) {\n                                 log(methodsParams[n] + \" is not assignable from \" \n                                             + parameterTypes[n]);\n--- a/src/java/org/apache/commons/lang/reflect/ReflectionUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/ReflectionUtils.java\n  * reflection.\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n- * @version $Id: ReflectionUtils.java,v 1.3 2002/11/20 21:45:47 rdonkin Exp $\n+ * @version $Id: ReflectionUtils.java,v 1.4 2002/11/20 22:31:40 rdonkin Exp $\n  */\n public class ReflectionUtils {\n     \n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Checks if the requested Class array is compatable with the specified\n+     * Checks if the requested Class array is compatible with the specified\n      * parameter array.\n      * Primitive classes are handled correctly .\n      * <p>\n      *\n      * @param requestedTypes  the class array requested\n      * @param paramTypes  the actual class array for the method\n-     * @return true if the parameters are compatable\n-     */\n-    public static boolean isCompatable(Class[] requestedTypes, Class[] paramTypes) {\n+     * @return true if the parameters are compatible\n+     */\n+    public static boolean isCompatible(Class[] requestedTypes, Class[] paramTypes) {\n         if (ArrayUtils.isSameLength(requestedTypes, paramTypes) == false) {\n             return false;\n         }\n             paramTypes = ArrayUtils.EMPTY_CLASS_ARRAY;\n         }\n         for (int i = 0; i < requestedTypes.length; i++) {\n-            if (isCompatable(requestedTypes[i], paramTypes[i]) == false) {\n+            if (isCompatible(requestedTypes[i], paramTypes[i]) == false) {\n                 return false;\n             }\n         }\n      *\n      * @return true if the assignement is compatible.\n      */\n-    public static boolean isCompatable(Class requestedType, Class parameterType) {\n+    public static boolean isCompatible(Class requestedType, Class parameterType) {\n         // try plain assignment\n         if (ClassUtils.isAssignable(requestedType, parameterType)) {\n             return true;\n--- a/src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java\n+++ b/src/test/org/apache/commons/lang/reflect/ReflectionUtilsTestCase.java\n     public void testWidening() throws Exception\n     {\n         // test byte conversions\n-        assertEquals(\"byte -> char\", ReflectionUtils.isCompatable(Byte.class, char.class), false);\n-        assertEquals(\"byte -> byte\", ReflectionUtils.isCompatable(Byte.class, byte.class), true);\n-        assertEquals(\"byte -> short\", ReflectionUtils.isCompatable(Byte.class, short.class), true);\n-        assertEquals(\"byte -> int\", ReflectionUtils.isCompatable(Byte.class, int.class), true);\n-        assertEquals(\"byte -> long\", ReflectionUtils.isCompatable(Byte.class, long.class), true);\n-        assertEquals(\"byte -> float\", ReflectionUtils.isCompatable(Byte.class, float.class), true);\n-        assertEquals(\"byte -> double\", ReflectionUtils.isCompatable(Byte.class, double.class), true);\n-        assertEquals(\"byte -> boolean\", ReflectionUtils.isCompatable(Byte.class, boolean.class), false);\n+        assertEquals(\"byte -> char\", ReflectionUtils.isCompatible(Byte.class, char.class), false);\n+        assertEquals(\"byte -> byte\", ReflectionUtils.isCompatible(Byte.class, byte.class), true);\n+        assertEquals(\"byte -> short\", ReflectionUtils.isCompatible(Byte.class, short.class), true);\n+        assertEquals(\"byte -> int\", ReflectionUtils.isCompatible(Byte.class, int.class), true);\n+        assertEquals(\"byte -> long\", ReflectionUtils.isCompatible(Byte.class, long.class), true);\n+        assertEquals(\"byte -> float\", ReflectionUtils.isCompatible(Byte.class, float.class), true);\n+        assertEquals(\"byte -> double\", ReflectionUtils.isCompatible(Byte.class, double.class), true);\n+        assertEquals(\"byte -> boolean\", ReflectionUtils.isCompatible(Byte.class, boolean.class), false);\n         \n         // test short conversions\n-        assertEquals(\"short -> char\", ReflectionUtils.isCompatable(Short.class, char.class), false);\n-        assertEquals(\"short -> byte\", ReflectionUtils.isCompatable(Short.class, byte.class), false);\n-        assertEquals(\"short -> short\", ReflectionUtils.isCompatable(Short.class, short.class), true);\n-        assertEquals(\"short -> int\", ReflectionUtils.isCompatable(Short.class, int.class), true);\n-        assertEquals(\"short -> long\", ReflectionUtils.isCompatable(Short.class, long.class), true);\n-        assertEquals(\"short -> float\", ReflectionUtils.isCompatable(Short.class, float.class), true);\n-        assertEquals(\"short -> double\", ReflectionUtils.isCompatable(Short.class, double.class), true);\n-        assertEquals(\"short -> boolean\", ReflectionUtils.isCompatable(Short.class, boolean.class), false);\n+        assertEquals(\"short -> char\", ReflectionUtils.isCompatible(Short.class, char.class), false);\n+        assertEquals(\"short -> byte\", ReflectionUtils.isCompatible(Short.class, byte.class), false);\n+        assertEquals(\"short -> short\", ReflectionUtils.isCompatible(Short.class, short.class), true);\n+        assertEquals(\"short -> int\", ReflectionUtils.isCompatible(Short.class, int.class), true);\n+        assertEquals(\"short -> long\", ReflectionUtils.isCompatible(Short.class, long.class), true);\n+        assertEquals(\"short -> float\", ReflectionUtils.isCompatible(Short.class, float.class), true);\n+        assertEquals(\"short -> double\", ReflectionUtils.isCompatible(Short.class, double.class), true);\n+        assertEquals(\"short -> boolean\", ReflectionUtils.isCompatible(Short.class, boolean.class), false);\n         \n         // test char conversions\n-        assertEquals(\"char -> char\", ReflectionUtils.isCompatable(Character.class, char.class), true);\n-        assertEquals(\"char -> byte\", ReflectionUtils.isCompatable(Character.class, byte.class), false);\n-        assertEquals(\"char -> short\", ReflectionUtils.isCompatable(Character.class, short.class), false);\n-        assertEquals(\"char -> int\", ReflectionUtils.isCompatable(Character.class, int.class), true);\n-        assertEquals(\"char -> long\", ReflectionUtils.isCompatable(Character.class, long.class), true);\n-        assertEquals(\"char -> float\", ReflectionUtils.isCompatable(Character.class, float.class), true);\n-        assertEquals(\"char -> double\", ReflectionUtils.isCompatable(Character.class, double.class), true);\n-        assertEquals(\"char -> boolean\", ReflectionUtils.isCompatable(Character.class, boolean.class), false);\n+        assertEquals(\"char -> char\", ReflectionUtils.isCompatible(Character.class, char.class), true);\n+        assertEquals(\"char -> byte\", ReflectionUtils.isCompatible(Character.class, byte.class), false);\n+        assertEquals(\"char -> short\", ReflectionUtils.isCompatible(Character.class, short.class), false);\n+        assertEquals(\"char -> int\", ReflectionUtils.isCompatible(Character.class, int.class), true);\n+        assertEquals(\"char -> long\", ReflectionUtils.isCompatible(Character.class, long.class), true);\n+        assertEquals(\"char -> float\", ReflectionUtils.isCompatible(Character.class, float.class), true);\n+        assertEquals(\"char -> double\", ReflectionUtils.isCompatible(Character.class, double.class), true);\n+        assertEquals(\"char -> boolean\", ReflectionUtils.isCompatible(Character.class, boolean.class), false);\n         \n         // test int conversions\n-        assertEquals(\"int -> char\", ReflectionUtils.isCompatable(Integer.class, char.class), false);\n-        assertEquals(\"int -> byte\", ReflectionUtils.isCompatable(Integer.class, byte.class), false);\n-        assertEquals(\"int -> short\", ReflectionUtils.isCompatable(Integer.class, short.class), false);\n-        assertEquals(\"int -> int\", ReflectionUtils.isCompatable(Integer.class, int.class), true);\n-        assertEquals(\"int -> long\", ReflectionUtils.isCompatable(Integer.class, long.class), true);\n-        assertEquals(\"int -> float\", ReflectionUtils.isCompatable(Integer.class, float.class), true);\n-        assertEquals(\"int -> double\", ReflectionUtils.isCompatable(Integer.class, double.class), true);\n-        assertEquals(\"int -> boolean\", ReflectionUtils.isCompatable(Integer.class, boolean.class), false);\n+        assertEquals(\"int -> char\", ReflectionUtils.isCompatible(Integer.class, char.class), false);\n+        assertEquals(\"int -> byte\", ReflectionUtils.isCompatible(Integer.class, byte.class), false);\n+        assertEquals(\"int -> short\", ReflectionUtils.isCompatible(Integer.class, short.class), false);\n+        assertEquals(\"int -> int\", ReflectionUtils.isCompatible(Integer.class, int.class), true);\n+        assertEquals(\"int -> long\", ReflectionUtils.isCompatible(Integer.class, long.class), true);\n+        assertEquals(\"int -> float\", ReflectionUtils.isCompatible(Integer.class, float.class), true);\n+        assertEquals(\"int -> double\", ReflectionUtils.isCompatible(Integer.class, double.class), true);\n+        assertEquals(\"int -> boolean\", ReflectionUtils.isCompatible(Integer.class, boolean.class), false);\n  \n         // test long conversions\n-        assertEquals(\"long -> char\", ReflectionUtils.isCompatable(Long.class, char.class), false);\n-        assertEquals(\"long -> byte\", ReflectionUtils.isCompatable(Long.class, byte.class), false);\n-        assertEquals(\"long -> short\", ReflectionUtils.isCompatable(Long.class, short.class), false);\n-        assertEquals(\"long -> int\", ReflectionUtils.isCompatable(Long.class, int.class), false);\n-        assertEquals(\"long -> long\", ReflectionUtils.isCompatable(Long.class, long.class), true);\n-        assertEquals(\"long -> float\", ReflectionUtils.isCompatable(Long.class, float.class), true);\n-        assertEquals(\"long -> double\", ReflectionUtils.isCompatable(Long.class, double.class), true);\n-        assertEquals(\"long -> boolean\", ReflectionUtils.isCompatable(Long.class, boolean.class), false);\n+        assertEquals(\"long -> char\", ReflectionUtils.isCompatible(Long.class, char.class), false);\n+        assertEquals(\"long -> byte\", ReflectionUtils.isCompatible(Long.class, byte.class), false);\n+        assertEquals(\"long -> short\", ReflectionUtils.isCompatible(Long.class, short.class), false);\n+        assertEquals(\"long -> int\", ReflectionUtils.isCompatible(Long.class, int.class), false);\n+        assertEquals(\"long -> long\", ReflectionUtils.isCompatible(Long.class, long.class), true);\n+        assertEquals(\"long -> float\", ReflectionUtils.isCompatible(Long.class, float.class), true);\n+        assertEquals(\"long -> double\", ReflectionUtils.isCompatible(Long.class, double.class), true);\n+        assertEquals(\"long -> boolean\", ReflectionUtils.isCompatible(Long.class, boolean.class), false);\n  \n         // test float conversions\n-        assertEquals(\"float -> char\", ReflectionUtils.isCompatable(Float.class, char.class), false);\n-        assertEquals(\"float -> byte\", ReflectionUtils.isCompatable(Float.class, byte.class), false);\n-        assertEquals(\"float -> short\", ReflectionUtils.isCompatable(Float.class, short.class), false);\n-        assertEquals(\"float -> int\", ReflectionUtils.isCompatable(Float.class, int.class), false);\n-        assertEquals(\"float -> long\", ReflectionUtils.isCompatable(Float.class, long.class), false);\n-        assertEquals(\"float -> float\", ReflectionUtils.isCompatable(Float.class, float.class), true);\n-        assertEquals(\"float -> double\", ReflectionUtils.isCompatable(Float.class, double.class), true);\n-        assertEquals(\"float -> boolean\", ReflectionUtils.isCompatable(Float.class, boolean.class), false);\n+        assertEquals(\"float -> char\", ReflectionUtils.isCompatible(Float.class, char.class), false);\n+        assertEquals(\"float -> byte\", ReflectionUtils.isCompatible(Float.class, byte.class), false);\n+        assertEquals(\"float -> short\", ReflectionUtils.isCompatible(Float.class, short.class), false);\n+        assertEquals(\"float -> int\", ReflectionUtils.isCompatible(Float.class, int.class), false);\n+        assertEquals(\"float -> long\", ReflectionUtils.isCompatible(Float.class, long.class), false);\n+        assertEquals(\"float -> float\", ReflectionUtils.isCompatible(Float.class, float.class), true);\n+        assertEquals(\"float -> double\", ReflectionUtils.isCompatible(Float.class, double.class), true);\n+        assertEquals(\"float -> boolean\", ReflectionUtils.isCompatible(Float.class, boolean.class), false);\n         \n         // test float conversions\n-        assertEquals(\"double -> char\", ReflectionUtils.isCompatable(Double.class, char.class), false);\n-        assertEquals(\"double -> byte\", ReflectionUtils.isCompatable(Double.class, byte.class), false);\n-        assertEquals(\"double -> short\", ReflectionUtils.isCompatable(Double.class, short.class), false);\n-        assertEquals(\"double -> int\", ReflectionUtils.isCompatable(Double.class, int.class), false);\n-        assertEquals(\"double -> long\", ReflectionUtils.isCompatable(Double.class, long.class), false);\n-        assertEquals(\"double -> float\", ReflectionUtils.isCompatable(Double.class, float.class), false);\n-        assertEquals(\"double -> double\", ReflectionUtils.isCompatable(Double.class, double.class), true);\n-        assertEquals(\"double -> boolean\", ReflectionUtils.isCompatable(Double.class, boolean.class), false);\n+        assertEquals(\"double -> char\", ReflectionUtils.isCompatible(Double.class, char.class), false);\n+        assertEquals(\"double -> byte\", ReflectionUtils.isCompatible(Double.class, byte.class), false);\n+        assertEquals(\"double -> short\", ReflectionUtils.isCompatible(Double.class, short.class), false);\n+        assertEquals(\"double -> int\", ReflectionUtils.isCompatible(Double.class, int.class), false);\n+        assertEquals(\"double -> long\", ReflectionUtils.isCompatible(Double.class, long.class), false);\n+        assertEquals(\"double -> float\", ReflectionUtils.isCompatible(Double.class, float.class), false);\n+        assertEquals(\"double -> double\", ReflectionUtils.isCompatible(Double.class, double.class), true);\n+        assertEquals(\"double -> boolean\", ReflectionUtils.isCompatible(Double.class, boolean.class), false);\n         \n         // test float conversions\n-        assertEquals(\"boolean -> char\", ReflectionUtils.isCompatable(Boolean.class, char.class), false);\n-        assertEquals(\"boolean -> byte\", ReflectionUtils.isCompatable(Boolean.class, byte.class), false);\n-        assertEquals(\"boolean -> short\", ReflectionUtils.isCompatable(Boolean.class, short.class), false);\n-        assertEquals(\"boolean -> int\", ReflectionUtils.isCompatable(Boolean.class, int.class), false);\n-        assertEquals(\"boolean -> long\", ReflectionUtils.isCompatable(Boolean.class, long.class), false);\n-        assertEquals(\"boolean -> float\", ReflectionUtils.isCompatable(Boolean.class, float.class), false);\n-        assertEquals(\"boolean -> double\", ReflectionUtils.isCompatable(Boolean.class, double.class), false);\n-        assertEquals(\"boolean -> boolean\", ReflectionUtils.isCompatable(Boolean.class, boolean.class), true);\n+        assertEquals(\"boolean -> char\", ReflectionUtils.isCompatible(Boolean.class, char.class), false);\n+        assertEquals(\"boolean -> byte\", ReflectionUtils.isCompatible(Boolean.class, byte.class), false);\n+        assertEquals(\"boolean -> short\", ReflectionUtils.isCompatible(Boolean.class, short.class), false);\n+        assertEquals(\"boolean -> int\", ReflectionUtils.isCompatible(Boolean.class, int.class), false);\n+        assertEquals(\"boolean -> long\", ReflectionUtils.isCompatible(Boolean.class, long.class), false);\n+        assertEquals(\"boolean -> float\", ReflectionUtils.isCompatible(Boolean.class, float.class), false);\n+        assertEquals(\"boolean -> double\", ReflectionUtils.isCompatible(Boolean.class, double.class), false);\n+        assertEquals(\"boolean -> boolean\", ReflectionUtils.isCompatible(Boolean.class, boolean.class), true);\n     }\n }", "timestamp": 1037831500, "metainfo": ""}