{"sha": "cbf7a76a60aa2d1738319e0dc326bc66610b6eb1", "log": "Rollback of sort of members   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author Gary Gregory\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.37 2004/01/30 02:12:22 ggregory Exp $\n+ * @version $Id: ArrayUtils.java,v 1.38 2004/01/31 09:57:39 scolebourne Exp $\n  */\n public class ArrayUtils {\n+\n+    /**\n+     * An empty immutable <code>Object</code> array.\n+     */\n+    public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];\n+    /**\n+     * An empty immutable <code>Class</code> array.\n+     */\n+    public static final Class[] EMPTY_CLASS_ARRAY = new Class[0];\n+    /**\n+     * An empty immutable <code>String</code> array.\n+     */\n+    public static final String[] EMPTY_STRING_ARRAY = new String[0];\n+    /**\n+     * An empty immutable <code>long</code> array.\n+     */\n+    public static final long[] EMPTY_LONG_ARRAY = new long[0];\n+    /**\n+     * An empty immutable <code>Long</code> array.\n+     */\n+    public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];\n+    /**\n+     * An empty immutable <code>int</code> array.\n+     */\n+    public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    /**\n+     * An empty immutable <code>Integer</code> array.\n+     */\n+    public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];\n+    /**\n+     * An empty immutable <code>short</code> array.\n+     */\n+    public static final short[] EMPTY_SHORT_ARRAY = new short[0];\n+    /**\n+     * An empty immutable <code>Short</code> array.\n+     */\n+    public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];\n+    /**\n+     * An empty immutable <code>byte</code> array.\n+     */\n+    public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n+    /**\n+     * An empty immutable <code>Byte</code> array.\n+     */\n+    public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];\n+    /**\n+     * An empty immutable <code>double</code> array.\n+     */\n+    public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];\n+    /**\n+     * An empty immutable <code>Double</code> array.\n+     */\n+    public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];\n+    /**\n+     * An empty immutable <code>float</code> array.\n+     */\n+    public static final float[] EMPTY_FLOAT_ARRAY = new float[0];\n+    /**\n+     * An empty immutable <code>Float</code> array.\n+     */\n+    public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];\n     /**\n      * An empty immutable <code>boolean</code> array.\n      */\n      */\n     public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];\n     /**\n-     * An empty immutable <code>byte</code> array.\n-     */\n-    public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n-    /**\n-     * An empty immutable <code>Byte</code> array.\n-     */\n-    public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];\n-    /**\n      * An empty immutable <code>char</code> array.\n      */\n     public static final char[] EMPTY_CHAR_ARRAY = new char[0];\n      * An empty immutable <code>Character</code> array.\n      */\n     public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];\n-    /**\n-     * An empty immutable <code>Class</code> array.\n-     */\n-    public static final Class[] EMPTY_CLASS_ARRAY = new Class[0];\n-    /**\n-     * An empty immutable <code>double</code> array.\n-     */\n-    public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];\n-    /**\n-     * An empty immutable <code>Double</code> array.\n-     */\n-    public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];\n-    /**\n-     * An empty immutable <code>float</code> array.\n-     */\n-    public static final float[] EMPTY_FLOAT_ARRAY = new float[0];\n-    /**\n-     * An empty immutable <code>Float</code> array.\n-     */\n-    public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];\n-    /**\n-     * An empty immutable <code>int</code> array.\n-     */\n-    public static final int[] EMPTY_INT_ARRAY = new int[0];\n-    /**\n-     * An empty immutable <code>Integer</code> array.\n-     */\n-    public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];\n-    /**\n-     * An empty immutable <code>long</code> array.\n-     */\n-    public static final long[] EMPTY_LONG_ARRAY = new long[0];\n-    /**\n-     * An empty immutable <code>Long</code> array.\n-     */\n-    public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];\n-\n-    /**\n-     * An empty immutable <code>Object</code> array.\n-     */\n-    public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];\n-    /**\n-     * An empty immutable <code>short</code> array.\n-     */\n-    public static final short[] EMPTY_SHORT_ARRAY = new short[0];\n-    /**\n-     * An empty immutable <code>Short</code> array.\n-     */\n-    public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];\n-    /**\n-     * An empty immutable <code>String</code> array.\n-     */\n-    public static final String[] EMPTY_STRING_ARRAY = new String[0];\n-\n-    /**\n-     * <p>Inserts the specified element at the specified position in the array. \n-     * Shifts the element currently at that position (if any) and any subsequent\n-     * elements to the right (adds one to their indices).</p>\n-     *\n-     * <p>This method returns a new array with the same elements of the input\n-     * array plus the given element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n-     * array.</p>\n-     *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n-     *  whose component type is the same as the element.</p>\n-     * \n-     * <pre>\n-     * ArrayUtils.add(null, 0, null)      = [null]\n-     * ArrayUtils.add(null, 0, \"a\")       = [\"a\"]\n-     * ArrayUtils.add([\"a\"], 1, null)     = [\"a\", null]\n-     * ArrayUtils.add([\"a\"], 1, \"b\")      = [\"a\", \"b\"]\n-     * ArrayUtils.add([\"a\", \"b\"], 3, \"c\") = [\"a\", \"b\", \"c\"]\n-     * </pre>\n-     * \n-     * @param array  the array to add the element to, may be <code>null</code>\n-     * @param index  the position of the new object\n-     * @param element  the object to add\n-     * @return A new array containing the existing elements and the new element\n-     * @throws IndexOutOfBoundsException if the index is out of range \n-     * (index < 0 || index > array.length).\n-     */\n-    public static Object[] add(final Object[] array, final int index, final Object element) {\n-        if (array == null) {\n-            if (index != 0) {\n-                throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: 0\");\n-            }\n-            Object joinedArray = Array.newInstance(element != null ? element.getClass() : Object.class, 1);\n-            Array.set(joinedArray, 0, element);\n-            return (Object[]) joinedArray;\n-        }\n-        int length = array.length;\n-        if (index > length || index < 0) {\n-            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n-        }\n-        Object result = Array.newInstance(array.getClass().getComponentType(), length + 1);\n-        System.arraycopy(array, 0, result, 0, index);\n-        Array.set(result, index, element);\n-        if (index < length) {\n-            System.arraycopy(array, index, result, index + 1, length - index);\n-        }\n-        return (Object[]) result;\n-    }\n-\n-    /**\n-     * <p>Adds the element to the end of the array.</p>\n-     *\n-     * <p>The new array contains the same elements of the input\n-     * array plus the given element in the last position. The component type of \n-     * the new array is  the same as that of the input array.</p>\n-     *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n-     *  whose component type is the same as the element.</p>\n-     * \n-     * <pre>\n-     * ArrayUtils.add(null, null)      = [null]\n-     * ArrayUtils.add(null, \"a\")       = [\"a\"]\n-     * ArrayUtils.add([\"a\"], null)     = [\"a\", null]\n-     * ArrayUtils.add([\"a\"], \"b\")      = [\"a\", \"b\"]\n-     * ArrayUtils.add([\"a\", \"b\"], \"c\") = [\"a\", \"b\", \"c\"]\n-     * </pre>\n-     * \n-     * @param array  the array to \"add\" the element to, may be <code>null</code>\n-     * @param element  the object to add\n-     * @return A new array containing the existing elements and the new element\n-     * @since 2.1\n-     */\n-    public static Object[] add(Object[] array, Object element) {\n-        Object joinedArray;\n-        int elementPos;\n-        if (array != null) {\n-            joinedArray = Array.newInstance(array.getClass().getComponentType(), array.length + 1);\n-            System.arraycopy(array, 0, joinedArray, 0, array.length);\n-            elementPos = array.length;\n-        } else {\n-            // null input array, use the element type\n-            joinedArray = Array.newInstance(element != null ? element.getClass() : Object.class, 1);\n-            elementPos = 0;\n-        }\n-        Array.set(joinedArray, elementPos, element);\n-        return (Object[]) joinedArray;\n-    }\n-\n-    /**\n-     * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n-     */\n-    public static boolean[] clone(final boolean[] array) {\n-        if (array == null) {\n-            return null;\n-        }\n-        return (boolean[]) array.clone();\n-    }\n-\n-    /**\n-     * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n-     */\n-    public static byte[] clone(final byte[] array) {\n-        if (array == null) {\n-            return null;\n-        }\n-        return (byte[]) array.clone();\n-    }\n-\n-    /**\n-     * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n-     */\n-    public static char[] clone(final char[] array) {\n-        if (array == null) {\n-            return null;\n-        }\n-        return (char[]) array.clone();\n-    }\n-\n-    /**\n-     * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n-     */\n-    public static double[] clone(final double[] array) {\n-        if (array == null) {\n-            return null;\n-        }\n-        return (double[]) array.clone();\n-    }\n-\n-    /**\n-     * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n-     */\n-    public static float[] clone(final float[] array) {\n-        if (array == null) {\n-            return null;\n-        }\n-        return (float[]) array.clone();\n-    }\n-\n-    /**\n-     * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n-     */\n-    public static int[] clone(int[] array) {\n-        if (array == null) {\n-            return null;\n-        }\n-        return (int[]) array.clone();\n-    }\n-\n-    /**\n-     * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n-     */\n-    public static long[] clone(final long[] array) {\n-        if (array == null) {\n-            return null;\n-        }\n-        return (long[]) array.clone();\n-    }\n-\n-    // Clone\n+\n+    /**\n+     * <p>ArrayUtils instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as <code>ArrayUtils.clone(new int[] {2})</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n+     */\n+    public ArrayUtils() {\n+    }\n+    \n+    // Basic methods handling multi-dimensional arrays\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Shallow clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>The objects in the array are not cloned, thus there is no special\n-     * handling for multi-dimensional arrays.</p>\n-     * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to shallow clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n-     */\n-    public static Object[] clone(final Object[] array) {\n-        if (array == null) {\n-            return null;\n-        }\n-        return (Object[]) array.clone();\n-    }\n-\n-    /**\n-     * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n-     */\n-    public static short[] clone(final short[] array) {\n-        if (array == null) {\n-            return null;\n-        }\n-        return (short[]) array.clone();\n-    }\n-\n-    /**\n-     * <p>Checks if the value is in the given array.</p>\n-     *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n-     * @param array  the array to search through\n-     * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n-     */\n-    public static boolean contains(final boolean[] array, final boolean valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n-    }\n-\n-    /**\n-     * <p>Checks if the value is in the given array.</p>\n-     *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n-     * @param array  the array to search through\n-     * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n-     */\n-    public static boolean contains(final byte[] array, final byte valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n-    }\n-\n-    /**\n-     * <p>Checks if the value is in the given array.</p>\n-     *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n-     * @param array  the array to search through\n-     * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n-     */\n-    public static boolean contains(final double[] array, final double valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n-    }\n-\n-    /**\n-     * <p>Checks if a value falling within the given tolerance is in the\n-     * given array.  If the array contains a value within the inclusive range \n-     * defined by (value - tolerance) to (value + tolerance).</p>\n-     *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array\n-     * is passed in.</p>\n-     *\n-     * @param array  the array to search\n-     * @param valueToFind  the value to find\n-     * @param tolerance  the array contains the tolerance of the search\n-     * @return true if value falling within tolerance is in array\n-     */\n-    public static boolean contains(final double[] array, final double valueToFind, final double tolerance) {\n-        return (indexOf(array, valueToFind, 0, tolerance) != -1);\n-    }\n-\n-    /**\n-     * <p>Checks if the value is in the given array.</p>\n-     *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n-     * @param array  the array to search through\n-     * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n-     */\n-    public static boolean contains(final float[] array, final float valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n-    }\n-\n-    /**\n-     * <p>Checks if the value is in the given array.</p>\n-     *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n-     * @param array  the array to search through\n-     * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n-     */\n-    public static boolean contains(final int[] array, final int valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n-    }\n-\n-    /**\n-     * <p>Checks if the value is in the given array.</p>\n-     *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n-     * @param array  the array to search through\n-     * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n-     */\n-    public static boolean contains(final long[] array, final long valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n-    }\n-\n-    /**\n-     * <p>Checks if the object is in the given array.</p>\n-     *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n-     * @param array  the array to search through\n-     * @param objectToFind  the object to find\n-     * @return <code>true</code> if the array contains the object\n-     */\n-    public static boolean contains(final Object[] array, final Object objectToFind) {\n-        return (indexOf(array, objectToFind) != -1);\n-    }\n-\n-    /**\n-     * <p>Checks if the value is in the given array.</p>\n-     *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n-     * @param array  the array to search through\n-     * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n-     */\n-    public static boolean contains(final short[] array, final short valueToFind) {\n-        return (indexOf(array, valueToFind) != -1);\n+     * <p>Outputs an array as a String, treating <code>null</code> as an empty array.</p>\n+     *\n+     * <p>Multi-dimensional arrays are handled correctly, including\n+     * multi-dimensional primitive arrays.</p>\n+     *\n+     * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>\n+     * \n+     * @param array  the array to get a toString for, may be <code>null</code>\n+     * @return a String representation of the array, '{}' if null array input\n+     */\n+    public static String toString(final Object array) {\n+        return toString(array, \"{}\");\n+    }\n+\n+    /**\n+     * <p>Outputs an array as a String handling <code>null</code>s.</p>\n+     *\n+     * <p>Multi-dimensional arrays are handled correctly, including\n+     * multi-dimensional primitive arrays.</p>\n+     *\n+     * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>\n+     * \n+     * @param array  the array to get a toString for, may be <code>null</code>\n+     * @param stringIfNull  the String to return if the array is <code>null</code>\n+     * @return a String representation of the array\n+     */    \n+    public static String toString(final Object array, final String stringIfNull) {\n+        if (array == null) {\n+            return stringIfNull;\n+        }\n+        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n     }\n \n     /**\n      */\n     public static int hashCode(final Object array) {\n         return new HashCodeBuilder().append(array).toHashCode();\n-    }\n-\n-    // boolean IndexOf\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final boolean[] array, final boolean valueToFind) {\n-        return indexOf(array, valueToFind, 0);\n-    }\n-\n-    /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n-        if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            startIndex = 0;\n-        }\n-        for (int i = startIndex; i < array.length; i++) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    // byte IndexOf\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final byte[] array, final byte valueToFind) {\n-        return indexOf(array, valueToFind, 0);\n-    }\n-\n-    /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final byte[] array, final byte valueToFind, int startIndex) {\n-        if (array == null) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            startIndex = 0;\n-        }\n-        for (int i = startIndex; i < array.length; i++) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    // double IndexOf\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final double[] array, final double valueToFind) {\n-        return indexOf(array, valueToFind, 0);\n-    }\n-\n-    /**\n-     * <p>Find the index of the given value within a given tolerance in the array.\n-     * This method will return the index of the first value which falls between the region\n-     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param tolerance tolerance of the search\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final double[] array, final double valueToFind, final double tolerance) {\n-        return indexOf(array, valueToFind, 0, tolerance);\n-    }\n-\n-    /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final double[] array, final double valueToFind, int startIndex) {\n-        if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            startIndex = 0;\n-        }\n-        for (int i = startIndex; i < array.length; i++) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the index of the given value in the array starting at the given index.\n-     * This method will return the index of the first value which falls between the region\n-     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the index to start searching at\n-     * @param tolerance tolerance of the search\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {\n-        if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            startIndex = 0;\n-        }\n-        double min = valueToFind - tolerance;\n-        double max = valueToFind + tolerance;\n-        for (int i = startIndex; i < array.length; i++) {\n-            if (array[i] >= min && array[i] <= max) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    // float IndexOf\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final float[] array, final float valueToFind) {\n-        return indexOf(array, valueToFind, 0);\n-    }\n-\n-    /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final float[] array, final float valueToFind, int startIndex) {\n-        if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            startIndex = 0;\n-        }\n-        for (int i = startIndex; i < array.length; i++) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    // int IndexOf\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final int[] array, final int valueToFind) {\n-        return indexOf(array, valueToFind, 0);\n-    }\n-\n-    /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final int[] array, final int valueToFind, int startIndex) {\n-        if (array == null) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            startIndex = 0;\n-        }\n-        for (int i = startIndex; i < array.length; i++) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    // long IndexOf\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final long[] array, final long valueToFind) {\n-        return indexOf(array, valueToFind, 0);\n-    }\n-\n-    /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final long[] array, final long valueToFind, int startIndex) {\n-        if (array == null) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            startIndex = 0;\n-        }\n-        for (int i = startIndex; i < array.length; i++) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    // IndexOf search\n-    // ----------------------------------------------------------------------\n-    \n-    // Object IndexOf\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Find the index of the given object in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param objectToFind  the object to find, may be <code>null</code>\n-     * @return the index of the object within the array, \n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final Object[] array, final Object objectToFind) {\n-        return indexOf(array, objectToFind, 0);\n-    }\n-\n-    /**\n-     * <p>Find the index of the given object in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return <code>-1</code>.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param objectToFind  the object to find, may be <code>null</code>\n-     * @param startIndex  the index to start searching at\n-     * @return the index of the object within the array starting at the index,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final Object[] array, final Object objectToFind, int startIndex) {\n-        if (array == null) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            startIndex = 0;\n-        }\n-        if (objectToFind == null) {\n-            for (int i = startIndex; i < array.length; i++) {\n-                if (array[i] == null) {\n-                    return i;\n-                }\n-            }\n-        } else {\n-            for (int i = startIndex; i < array.length; i++) {\n-                if (objectToFind.equals(array[i])) {\n-                    return i;\n-                }\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    // short IndexOf\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Find the index of the given value in the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final short[] array, final short valueToFind) {\n-        return indexOf(array, valueToFind, 0);\n-    }\n-\n-    /**\n-     * <p>Find the index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the index to start searching at\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int indexOf(final short[] array, final short valueToFind, int startIndex) {\n-        if (array == null) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            startIndex = 0;\n-        }\n-        for (int i = startIndex; i < array.length; i++) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Checks if an array of primitive booleans is empty or <code>null</code>.</p>\n-     *\n-     * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n-     * @since 2.1\n-     */\n-    public static boolean isEmpty(final boolean[] array) {\n-        if (array == null || array.length == 0) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * <p>Checks if an array of primitive bytes is empty or <code>null</code>.</p>\n-     *\n-     * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n-     * @since 2.1\n-     */\n-    public static boolean isEmpty(final byte[] array) {\n-        if (array == null || array.length == 0) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * <p>Checks if an array of primitive chars is empty or <code>null</code>.</p>\n-     *\n-     * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n-     * @since 2.1\n-     */\n-    public static boolean isEmpty(final char[] array) {\n-        if (array == null || array.length == 0) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>\n-     *\n-     * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n-     * @since 2.1\n-     */\n-    public static boolean isEmpty(final double[] array) {\n-        if (array == null || array.length == 0) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * <p>Checks if an array of primitive floats is empty or <code>null</code>.</p>\n-     *\n-     * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n-     * @since 2.1\n-     */\n-    public static boolean isEmpty(final float[] array) {\n-        if (array == null || array.length == 0) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * <p>Checks if an array of primitive ints is empty or <code>null</code>.</p>\n-     *\n-     * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n-     * @since 2.1\n-     */\n-    public static boolean isEmpty(final int[] array) {\n-        if (array == null || array.length == 0) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * <p>Checks if an array of primitive longs is empty or <code>null</code>.</p>\n-     *\n-     * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n-     * @since 2.1\n-     */\n-    public static boolean isEmpty(final long[] array) {\n-        if (array == null || array.length == 0) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    // ----------------------------------------------------------------------\n-    /**\n-     * <p>Checks if an array of Objects is empty or <code>null</code>.</p>\n-     *\n-     * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n-     * @since 2.1\n-     */\n-    public static boolean isEmpty(final Object[] array) {\n-        if (array == null || array.length == 0) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * <p>Checks if an array of primitive shorts is empty or <code>null</code>.</p>\n-     *\n-     * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n-     * @since 2.1\n-     */\n-    public static boolean isEmpty(final short[] array) {\n-        if (array == null || array.length == 0) {\n-            return true;\n-        }\n-        return false;\n     }\n \n     /**\n      */\n     public static boolean isEquals(final Object array1, final Object array2) {\n         return new EqualsBuilder().append(array1, array2).isEquals();\n-    }\n-\n-    /**\n-     * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n-     */\n-    public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {\n-        if ((array1 == null && array2 != null && array2.length > 0) ||\n-            (array2 == null && array1 != null && array1.length > 0) ||\n-            (array1 != null && array2 != null && array1.length != array2.length)) {\n-                return false;\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n-     */\n-    public static boolean isSameLength(final byte[] array1, final byte[] array2) {\n-        if ((array1 == null && array2 != null && array2.length > 0) ||\n-            (array2 == null && array1 != null && array1.length > 0) ||\n-            (array1 != null && array2 != null && array1.length != array2.length)) {\n-                return false;\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n-     */\n-    public static boolean isSameLength(final char[] array1, final char[] array2) {\n-        if ((array1 == null && array2 != null && array2.length > 0) ||\n-            (array2 == null && array1 != null && array1.length > 0) ||\n-            (array1 != null && array2 != null && array1.length != array2.length)) {\n-                return false;\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n-     */\n-    public static boolean isSameLength(final double[] array1, final double[] array2) {\n-        if ((array1 == null && array2 != null && array2.length > 0) ||\n-            (array2 == null && array1 != null && array1.length > 0) ||\n-            (array1 != null && array2 != null && array1.length != array2.length)) {\n-                return false;\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n-     */\n-    public static boolean isSameLength(final float[] array1, final float[] array2) {\n-        if ((array1 == null && array2 != null && array2.length > 0) ||\n-            (array2 == null && array1 != null && array1.length > 0) ||\n-            (array1 != null && array2 != null && array1.length != array2.length)) {\n-                return false;\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n-     */\n-    public static boolean isSameLength(final int[] array1, final int[] array2) {\n-        if ((array1 == null && array2 != null && array2.length > 0) ||\n-            (array2 == null && array1 != null && array1.length > 0) ||\n-            (array1 != null && array2 != null && array1.length != array2.length)) {\n-                return false;\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n-     */\n-    public static boolean isSameLength(final long[] array1, final long[] array2) {\n-        if ((array1 == null && array2 != null && array2.length > 0) ||\n-            (array2 == null && array1 != null && array1.length > 0) ||\n-            (array1 != null && array2 != null && array1.length != array2.length)) {\n-                return false;\n-        }\n-        return true;\n-    }\n-\n-    // Is same length\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.\n-     *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n-     * \n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n-     */    \n-    public static boolean isSameLength(final Object[] array1, final Object[] array2) {\n-        if ((array1 == null && array2 != null && array2.length > 0) ||\n-            (array2 == null && array1 != null && array1.length > 0) ||\n-            (array1 != null && array2 != null && array1.length != array2.length)) {\n-                return false;\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n-     */\n-    public static boolean isSameLength(final short[] array1, final short[] array2) {\n-        if ((array1 == null && array2 != null && array2.length > 0) ||\n-            (array2 == null && array1 != null && array1.length > 0) ||\n-            (array1 != null && array2 != null && array1.length != array2.length)) {\n-                return false;\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Checks whether two arrays are the same type taking into account\n-     * multi-dimensional arrays.</p>\n-     * \n-     * @param array1 the first array, must not be <code>null</code>\n-     * @param array2 the second array, must not be <code>null</code>\n-     * @return <code>true</code> if type of arrays matches\n-     * @throws IllegalArgumentException if either array is <code>null</code>\n-     */    \n-    public static boolean isSameType(final Object array1, final Object array2) {\n-        if (array1 == null || array2 == null) {\n-            throw new IllegalArgumentException(\"The Array must not be null\");\n-        }\n-        return array1.getClass().getName().equals(array2.getClass().getName());\n-    }\n-\n-    /**\n-     * <p>Joins the elements of the provided arrays into a single new array.</p>\n-     * <p>The new array contains all of the element of the first array followed\n-     * by all of the elements from the second array.</p>\n-     *\n-     * <pre>\n-     * ArrayUtils.join(null, null)     = null\n-     * ArrayUtils.join(array1, null)   = array1\n-     * ArrayUtils.join(null, array2)   = array2\n-     * ArrayUtils.join([], [])         = []\n-     * ArrayUtils.join([null], [null]) = [null, null]\n-     * ArrayUtils.join([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n-     * </pre>\n-     *\n-     * @param array1  the first array of values to join together, may be null\n-     * @param array2  the second array of values to join together, may be null\n-     * @return The new joined array, <code>null</code> if null array inputs. \n-     *      The type of the joined array is the type of the first array.\n-     * @since 2.1\n-     */\n-    public static Object[] join(Object[] array1, Object[] array2) {\n-        if (array1 == null) {\n-            return array2;\n-        } else if (array2 == null) {\n-            return array1;\n-        } else {\n-            Object[] joinedArray = (Object[]) Array.newInstance(array1.getClass().getComponentType(), array1.length\n-                + array2.length);\n-            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n-            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n-            return joinedArray;\n-        }\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n-     * @param valueToFind  the object to find\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final boolean[] array, final boolean valueToFind) {\n-        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n-     * \n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n-        if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            return -1;\n-        } else if (startIndex >= array.length) {\n-            startIndex = array.length - 1;\n-        }\n-        for (int i = startIndex; i >= 0; i--) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n-     * @param valueToFind  the object to find\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final byte[] array, final byte valueToFind) {\n-        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n-     * \n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {\n-        if (array == null) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            return -1;\n-        } else if (startIndex >= array.length) {\n-            startIndex = array.length - 1;\n-        }\n-        for (int i = startIndex; i >= 0; i--) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n-     * @param valueToFind  the object to find\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final double[] array, final double valueToFind) {\n-        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within a given tolerance in the array.\n-     * This method will return the index of the last value which falls between the region\n-     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param tolerance tolerance of the search\n-     * @return the index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final double[] array, final double valueToFind, final double tolerance) {\n-        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n-     * \n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {\n-        if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            return -1;\n-        } else if (startIndex >= array.length) {\n-            startIndex = array.length - 1;\n-        }\n-        for (int i = startIndex; i >= 0; i--) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value in the array starting at the given index.\n-     * This method will return the index of the last value which falls between the region\n-     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n-     * \n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the start index to travers backwards from\n-     * @param tolerance  search for value within plus/minus this amount\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {\n-        if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            return -1;\n-        } else if (startIndex >= array.length) {\n-            startIndex = array.length - 1;\n-        }\n-        double min = valueToFind - tolerance;\n-        double max = valueToFind + tolerance;\n-        for (int i = startIndex; i >= 0; i--) {\n-            if (array[i] >= min && array[i] <= max) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n-     * @param valueToFind  the object to find\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final float[] array, final float valueToFind) {\n-        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n-     * \n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) {\n-        if (ArrayUtils.isEmpty(array)) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            return -1;\n-        } else if (startIndex >= array.length) {\n-            startIndex = array.length - 1;\n-        }\n-        for (int i = startIndex; i >= 0; i--) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n-     * @param valueToFind  the object to find\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final int[] array, final int valueToFind) {\n-        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n-     * \n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final int[] array, final int valueToFind, int startIndex) {\n-        if (array == null) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            return -1;\n-        } else if (startIndex >= array.length) {\n-            startIndex = array.length - 1;\n-        }\n-        for (int i = startIndex; i >= 0; i--) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n-     * @param valueToFind  the object to find\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final long[] array, final long valueToFind) {\n-        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n-     * \n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {\n-        if (array == null) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            return -1;\n-        } else if (startIndex >= array.length) {\n-            startIndex = array.length - 1;\n-        }\n-        for (int i = startIndex; i >= 0; i--) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given object within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n-     * @param objectToFind  the object to find, may be <code>null</code>\n-     * @return the last index of the object within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final Object[] array, final Object objectToFind) {\n-        return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given object in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return <code>-1</code>. A startIndex larger than\n-     * the array length will search from the end of the array.</p>\n-     * \n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n-     * @param objectToFind  the object to find, may be <code>null</code>\n-     * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the object within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final Object[] array, final Object objectToFind, int startIndex) {\n-        if (array == null) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            return -1;\n-        } else if (startIndex >= array.length) {\n-            startIndex = array.length - 1;\n-        }\n-        if (objectToFind == null) {\n-            for (int i = startIndex; i >= 0; i--) {\n-                if (array[i] == null) {\n-                    return i;\n-                }\n-            }\n-        } else {\n-            for (int i = startIndex; i >= 0; i--) {\n-                if (objectToFind.equals(array[i])) {\n-                    return i;\n-                }\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value within the array.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n-     * @param valueToFind  the object to find\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final short[] array, final short valueToFind) {\n-        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n-    }\n-\n-    /**\n-     * <p>Find the last index of the given value in the array starting at the given index.</p>\n-     *\n-     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n-     *\n-     * <p>A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.</p>\n-     * \n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n-     * @param valueToFind  the value to find\n-     * @param startIndex  the start index to travers backwards from\n-     * @return the last index of the value within the array,\n-     *  <code>-1</code> if not found or <code>null</code> array input\n-     */\n-    public static int lastIndexOf(final short[] array, final short valueToFind, int startIndex) {\n-        if (array == null) {\n-            return -1;\n-        }\n-        if (startIndex < 0) {\n-            return -1;\n-        } else if (startIndex >= array.length) {\n-            startIndex = array.length - 1;\n-        }\n-        for (int i = startIndex; i >= 0; i--) {\n-            if (valueToFind == array[i]) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n-    /**\n-     * <p>Reverses the order of the given array.</p>\n-     * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to reverse, may be <code>null</code>\n-     */\n-    public static void reverse(final boolean[] array) {\n-        if (array == null) {\n-            return;\n-        }\n-        int i = 0;\n-        int j = array.length - 1;\n-        boolean tmp;\n-        while (j > i) {\n-            tmp = array[j];\n-            array[j] = array[i];\n-            array[i] = tmp;\n-            j--;\n-            i++;\n-        }\n-    }\n-\n-    /**\n-     * <p>Reverses the order of the given array.</p>\n-     * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to reverse, may be <code>null</code>\n-     */\n-    public static void reverse(final byte[] array) {\n-        if (array == null) {\n-            return;\n-        }\n-        int i = 0;\n-        int j = array.length - 1;\n-        byte tmp;\n-        while (j > i) {\n-            tmp = array[j];\n-            array[j] = array[i];\n-            array[i] = tmp;\n-            j--;\n-            i++;\n-        }\n-    }\n-\n-    /**\n-     * <p>Reverses the order of the given array.</p>\n-     * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to reverse, may be <code>null</code>\n-     */\n-    public static void reverse(final char[] array) {\n-        if (array == null) {\n-            return;\n-        }\n-        int i = 0;\n-        int j = array.length - 1;\n-        char tmp;\n-        while (j > i) {\n-            tmp = array[j];\n-            array[j] = array[i];\n-            array[i] = tmp;\n-            j--;\n-            i++;\n-        }\n-    }\n-\n-    /**\n-     * <p>Reverses the order of the given array.</p>\n-     * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to reverse, may be <code>null</code>\n-     */\n-    public static void reverse(final double[] array) {\n-        if (array == null) {\n-            return;\n-        }\n-        int i = 0;\n-        int j = array.length - 1;\n-        double tmp;\n-        while (j > i) {\n-            tmp = array[j];\n-            array[j] = array[i];\n-            array[i] = tmp;\n-            j--;\n-            i++;\n-        }\n-    }\n-\n-    /**\n-     * <p>Reverses the order of the given array.</p>\n-     * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to reverse, may be <code>null</code>\n-     */\n-    public static void reverse(final float[] array) {\n-        if (array == null) {\n-            return;\n-        }\n-        int i = 0;\n-        int j = array.length - 1;\n-        float tmp;\n-        while (j > i) {\n-            tmp = array[j];\n-            array[j] = array[i];\n-            array[i] = tmp;\n-            j--;\n-            i++;\n-        }\n-    }\n-\n-    /**\n-     * <p>Reverses the order of the given array.</p>\n-     * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to reverse, may be <code>null</code>\n-     */\n-    public static void reverse(final int[] array) {\n-        if (array == null) {\n-            return;\n-        }\n-        int i = 0;\n-        int j = array.length - 1;\n-        int tmp;\n-        while (j > i) {\n-            tmp = array[j];\n-            array[j] = array[i];\n-            array[i] = tmp;\n-            j--;\n-            i++;\n-        }\n-    }\n-\n-    /**\n-     * <p>Reverses the order of the given array.</p>\n-     * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to reverse, may be <code>null</code>\n-     */\n-    public static void reverse(final long[] array) {\n-        if (array == null) {\n-            return;\n-        }\n-        int i = 0;\n-        int j = array.length - 1;\n-        long tmp;\n-        while (j > i) {\n-            tmp = array[j];\n-            array[j] = array[i];\n-            array[i] = tmp;\n-            j--;\n-            i++;\n-        }\n-    }\n-\n-    // Reverse\n-    //-----------------------------------------------------------------------\n-    /** \n-     * <p>Reverses the order of the given array.</p>\n-     *\n-     * <p>There is no special handling for multi-dimensional arrays.</p>\n-     *\n-     * <p>This method does nothing if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to reverse, may be <code>null</code>\n-     */\n-    public static void reverse(final Object[] array) {\n-        if (array == null) {\n-            return;\n-        }\n-        int i = 0;\n-        int j = array.length - 1;\n-        Object tmp;\n-        while (j > i) {\n-            tmp = array[j];\n-            array[j] = array[i];\n-            array[i] = tmp;\n-            j--;\n-            i++;\n-        }\n-    }\n-\n-    /**\n-     * <p>Reverses the order of the given array.</p>\n-     * \n-     * <p>This method does nothing if <code>null</code> array input.</p>\n-     * \n-     * @param array  the array to reverse, may be <code>null</code>\n-     */\n-    public static void reverse(final short[] array) {\n-        if (array == null) {\n-            return;\n-        }\n-        int i = 0;\n-        int j = array.length - 1;\n-        short tmp;\n-        while (j > i) {\n-            tmp = array[j];\n-            array[j] = array[i];\n-            array[i] = tmp;\n-            j--;\n-            i++;\n-        }\n-    }\n-\n-    /**\n-     * <p>Produces a new <code>boolean</code> array containing the elements\n-     * between the start and end indices.</p>\n-     *\n-     * <p>The start index is inclusive, the end index exclusive.\n-     * Null array input produces null output.</p>\n-     *\n-     * @param array  the array\n-     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n-     *      is promoted to 0, overvalue (&gt;array.length) results\n-     *      in an empty array.\n-     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n-     *      returned subarray. Undervalue (&lt; startIndex) produces\n-     *      empty array, overvalue (&gt;array.length) is demoted to\n-     *      array length.\n-     * @return a new array containing the elements between\n-     *      the start and end indices.\n-     */\n-    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {\n-        if (array == null) {\n-            return null;\n-        }\n-        if (startIndexInclusive < 0) {\n-            startIndexInclusive = 0;\n-        }\n-        if (endIndexExclusive > array.length) {\n-            endIndexExclusive = array.length;\n-        }\n-        int newSize = endIndexExclusive - startIndexInclusive;\n-        if (newSize <= 0) {\n-            return EMPTY_BOOLEAN_ARRAY;\n-        }\n-\n-        boolean[] subarray = new boolean[newSize];\n-        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n-        return subarray;\n-    }\n-\n-    /**\n-     * <p>Produces a new <code>byte</code> array containing the elements\n-     * between the start and end indices.</p>\n-     *\n-     * <p>The start index is inclusive, the end index exclusive.\n-     * Null array input produces null output.</p>\n-     *\n-     * @param array  the array\n-     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n-     *      is promoted to 0, overvalue (&gt;array.length) results\n-     *      in an empty array.\n-     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n-     *      returned subarray. Undervalue (&lt; startIndex) produces\n-     *      empty array, overvalue (&gt;array.length) is demoted to\n-     *      array length.\n-     * @return a new array containing the elements between\n-     *      the start and end indices.\n-     */\n-    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {\n-        if (array == null) {\n-            return null;\n-        }\n-        if (startIndexInclusive < 0) {\n-            startIndexInclusive = 0;\n-        }\n-        if (endIndexExclusive > array.length) {\n-            endIndexExclusive = array.length;\n-        }\n-        int newSize = endIndexExclusive - startIndexInclusive;\n-        if (newSize <= 0) {\n-            return EMPTY_BYTE_ARRAY;\n-        }\n-\n-        byte[] subarray = new byte[newSize];\n-        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n-        return subarray;\n-    }\n-\n-    /**\n-     * <p>Produces a new <code>char</code> array containing the elements\n-     * between the start and end indices.</p>\n-     *\n-     * <p>The start index is inclusive, the end index exclusive.\n-     * Null array input produces null output.</p>\n-     *\n-     * @param array  the array\n-     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n-     *      is promoted to 0, overvalue (&gt;array.length) results\n-     *      in an empty array.\n-     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n-     *      returned subarray. Undervalue (&lt; startIndex) produces\n-     *      empty array, overvalue (&gt;array.length) is demoted to\n-     *      array length.\n-     * @return a new array containing the elements between\n-     *      the start and end indices.\n-     */\n-    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {\n-        if (array == null) {\n-            return null;\n-        }\n-        if (startIndexInclusive < 0) {\n-            startIndexInclusive = 0;\n-        }\n-        if (endIndexExclusive > array.length) {\n-            endIndexExclusive = array.length;\n-        }\n-        int newSize = endIndexExclusive - startIndexInclusive;\n-        if (newSize <= 0) {\n-            return EMPTY_CHAR_ARRAY;\n-        }\n-\n-        char[] subarray = new char[newSize];\n-        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n-        return subarray;\n-    }\n-\n-    /**\n-     * <p>Produces a new <code>double</code> array containing the elements\n-     * between the start and end indices.</p>\n-     *\n-     * <p>The start index is inclusive, the end index exclusive.\n-     * Null array input produces null output.</p>\n-     *\n-     * @param array  the array\n-     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n-     *      is promoted to 0, overvalue (&gt;array.length) results\n-     *      in an empty array.\n-     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n-     *      returned subarray. Undervalue (&lt; startIndex) produces\n-     *      empty array, overvalue (&gt;array.length) is demoted to\n-     *      array length.\n-     * @return a new array containing the elements between\n-     *      the start and end indices.\n-     */\n-    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {\n-        if (array == null) {\n-            return null;\n-        }\n-        if (startIndexInclusive < 0) {\n-            startIndexInclusive = 0;\n-        }\n-        if (endIndexExclusive > array.length) {\n-            endIndexExclusive = array.length;\n-        }\n-        int newSize = endIndexExclusive - startIndexInclusive;\n-        if (newSize <= 0) {\n-            return EMPTY_DOUBLE_ARRAY;\n-        }\n-\n-        double[] subarray = new double[newSize];\n-        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n-        return subarray;\n-    }\n-\n-    /**\n-     * <p>Produces a new <code>float</code> array containing the elements\n-     * between the start and end indices.</p>\n-     *\n-     * <p>The start index is inclusive, the end index exclusive.\n-     * Null array input produces null output.</p>\n-     *\n-     * @param array  the array\n-     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n-     *      is promoted to 0, overvalue (&gt;array.length) results\n-     *      in an empty array.\n-     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n-     *      returned subarray. Undervalue (&lt; startIndex) produces\n-     *      empty array, overvalue (&gt;array.length) is demoted to\n-     *      array length.\n-     * @return a new array containing the elements between\n-     *      the start and end indices.\n-     */\n-    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {\n-        if (array == null) {\n-            return null;\n-        }\n-        if (startIndexInclusive < 0) {\n-            startIndexInclusive = 0;\n-        }\n-        if (endIndexExclusive > array.length) {\n-            endIndexExclusive = array.length;\n-        }\n-        int newSize = endIndexExclusive - startIndexInclusive;\n-        if (newSize <= 0) {\n-            return EMPTY_FLOAT_ARRAY;\n-        }\n-\n-        float[] subarray = new float[newSize];\n-        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n-        return subarray;\n-    }\n-\n-    /**\n-     * <p>Produces a new <code>int</code> array containing the elements\n-     * between the start and end indices.</p>\n-     *\n-     * <p>The start index is inclusive, the end index exclusive.\n-     * Null array input produces null output.</p>\n-     *\n-     * @param array  the array\n-     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n-     *      is promoted to 0, overvalue (&gt;array.length) results\n-     *      in an empty array.\n-     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n-     *      returned subarray. Undervalue (&lt; startIndex) produces\n-     *      empty array, overvalue (&gt;array.length) is demoted to\n-     *      array length.\n-     * @return a new array containing the elements between\n-     *      the start and end indices.\n-     */\n-    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {\n-        if (array == null) {\n-            return null;\n-        }\n-        if (startIndexInclusive < 0) {\n-            startIndexInclusive = 0;\n-        }\n-        if (endIndexExclusive > array.length) {\n-            endIndexExclusive = array.length;\n-        }\n-        int newSize = endIndexExclusive - startIndexInclusive;\n-        if (newSize <= 0) {\n-            return EMPTY_INT_ARRAY;\n-        }\n-\n-        int[] subarray = new int[newSize];\n-        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n-        return subarray;\n-    }\n-\n-    /**\n-     * <p>Produces a new <code>long</code> array containing the elements\n-     * between the start and end indices.</p>\n-     *\n-     * <p>The start index is inclusive, the end index exclusive.\n-     * Null array input produces null output.</p>\n-     *\n-     * @param array  the array\n-     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n-     *      is promoted to 0, overvalue (&gt;array.length) results\n-     *      in an empty array.\n-     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n-     *      returned subarray. Undervalue (&lt; startIndex) produces\n-     *      empty array, overvalue (&gt;array.length) is demoted to\n-     *      array length.\n-     * @return a new array containing the elements between\n-     *      the start and end indices.\n-     */\n-    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {\n-        if (array == null) {\n-            return null;\n-        }\n-        if (startIndexInclusive < 0) {\n-            startIndexInclusive = 0;\n-        }\n-        if (endIndexExclusive > array.length) {\n-            endIndexExclusive = array.length;\n-        }\n-        int newSize = endIndexExclusive - startIndexInclusive;\n-        if (newSize <= 0) {\n-            return EMPTY_LONG_ARRAY;\n-        }\n-\n-        long[] subarray = new long[newSize];\n-        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n-        return subarray;\n-    }\n-\n-    // Subarrays\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Produces a new array containing the elements between\n-     * the start and end indices.</p>\n-     *\n-     * <p>The start index is inclusive, the end index exclusive.\n-     * Null array input produces null output.</p>\n-     *\n-     * <p>The component type of the subarray is always the same as\n-     * that of the input array. Thus, if the input is an array of type\n-     * <code>Date</code>, the following usage is envisaged:</p>\n-     *\n-     * <pre>\n-     * Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);\n-     * </pre>\n-     *\n-     * @param array  the array\n-     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n-     *      is promoted to 0, overvalue (&gt;array.length) results\n-     *      in an empty array.\n-     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n-     *      returned subarray. Undervalue (&lt; startIndex) produces\n-     *      empty array, overvalue (&gt;array.length) is demoted to\n-     *      array length.\n-     * @return a new array containing the elements between\n-     *      the start and end indices.\n-     */\n-    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {\n-        if (array == null) {\n-            return null;\n-        }\n-        if (startIndexInclusive < 0) {\n-            startIndexInclusive = 0;\n-        }\n-        if (endIndexExclusive > array.length) {\n-            endIndexExclusive = array.length;\n-        }\n-        int newSize = endIndexExclusive - startIndexInclusive;\n-        Class type = array.getClass().getComponentType();\n-        if (newSize <= 0) {\n-            return (Object[]) Array.newInstance(type, 0);\n-        }\n-        Object[] subarray = (Object[]) Array.newInstance(type, newSize);\n-        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n-        return subarray;\n-    }\n-\n-    /**\n-     * <p>Produces a new <code>short</code> array containing the elements\n-     * between the start and end indices.</p>\n-     *\n-     * <p>The start index is inclusive, the end index exclusive.\n-     * Null array input produces null output.</p>\n-     *\n-     * @param array  the array\n-     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n-     *      is promoted to 0, overvalue (&gt;array.length) results\n-     *      in an empty array.\n-     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n-     *      returned subarray. Undervalue (&lt; startIndex) produces\n-     *      empty array, overvalue (&gt;array.length) is demoted to\n-     *      array length.\n-     * @return a new array containing the elements between\n-     *      the start and end indices.\n-     */\n-    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {\n-        if (array == null) {\n-            return null;\n-        }\n-        if (startIndexInclusive < 0) {\n-            startIndexInclusive = 0;\n-        }\n-        if (endIndexExclusive > array.length) {\n-            endIndexExclusive = array.length;\n-        }\n-        int newSize = endIndexExclusive - startIndexInclusive;\n-        if (newSize <= 0) {\n-            return EMPTY_SHORT_ARRAY;\n-        }\n-\n-        short[] subarray = new short[newSize];\n-        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n-        return subarray;\n     }\n \n     // To map\n         return map;\n     }\n \n-    /**\n-     * <p>Converts an array of primitive booleans to objects.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>boolean</code> array\n-     * @return a <code>Boolean</code> array, <code>null</code> if null array input\n-     */\n-    public static Boolean[] toObject(final boolean[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n-        }\n-        final Boolean[] result = new Boolean[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of primitive bytes to objects.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>byte</code> array\n-     * @return a <code>Byte</code> array, <code>null</code> if null array input\n-     */\n-    public static Byte[] toObject(final byte[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_BYTE_OBJECT_ARRAY;\n-        }\n-        final Byte[] result = new Byte[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = new Byte(array[i]);\n-        }\n-        return result;\n-    }  \n-\n-    /**\n-     * <p>Converts an array of primitive doubles to objects.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>double</code> array\n-     * @return a <code>Double</code> array, <code>null</code> if null array input\n-     */\n-    public static Double[] toObject(final double[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_DOUBLE_OBJECT_ARRAY;\n-        }\n-        final Double[] result = new Double[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = new Double(array[i]);\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of primitive floats to objects.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>float</code> array\n-     * @return a <code>Float</code> array, <code>null</code> if null array input\n-     */\n-    public static Float[] toObject(final float[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_FLOAT_OBJECT_ARRAY;\n-        }\n-        final Float[] result = new Float[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = new Float(array[i]);\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of primitive ints to objects.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  an <code>int</code> array\n-     * @return an <code>Integer</code> array, <code>null</code> if null array input\n-     */\n-    public static Integer[] toObject(final int[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_INTEGER_OBJECT_ARRAY;\n-        }\n-        final Integer[] result = new Integer[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = new Integer(array[i]);\n-        }\n-        return result;\n-    }\n+    // Clone\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Shallow clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     *\n+     * <p>The objects in the array are not cloned, thus there is no special\n+     * handling for multi-dimensional arrays.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to shallow clone, may be <code>null</code>\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     */\n+    public static Object[] clone(final Object[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (Object[]) array.clone();\n+    }\n+\n+    /**\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     */\n+    public static long[] clone(final long[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (long[]) array.clone();\n+    }\n+\n+    /**\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     */\n+    public static int[] clone(int[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (int[]) array.clone();\n+    }\n+\n+    /**\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     */\n+    public static short[] clone(final short[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (short[]) array.clone();\n+    }\n+\n+    /**\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     */\n+    public static char[] clone(final char[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (char[]) array.clone();\n+    }\n+\n+    /**\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     */\n+    public static byte[] clone(final byte[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (byte[]) array.clone();\n+    }\n+\n+    /**\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     */\n+    public static double[] clone(final double[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (double[]) array.clone();\n+    }\n+\n+    /**\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     */\n+    public static float[] clone(final float[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (float[]) array.clone();\n+    }\n+\n+    /**\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to clone, may be <code>null</code>\n+     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     */\n+    public static boolean[] clone(final boolean[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        return (boolean[]) array.clone();\n+    }\n+\n+    // Subarrays\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Produces a new array containing the elements between\n+     * the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * <p>The component type of the subarray is always the same as\n+     * that of the input array. Thus, if the input is an array of type\n+     * <code>Date</code>, the following usage is envisaged:</p>\n+     *\n+     * <pre>\n+     * Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);\n+     * </pre>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     * @return a new array containing the elements between\n+     *      the start and end indices.\n+     */\n+    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        Class type = array.getClass().getComponentType();\n+        if (newSize <= 0) {\n+            return (Object[]) Array.newInstance(type, 0);\n+        }\n+        Object[] subarray = (Object[]) Array.newInstance(type, newSize);\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>long</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     * @return a new array containing the elements between\n+     *      the start and end indices.\n+     */\n+    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_LONG_ARRAY;\n+        }\n+\n+        long[] subarray = new long[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>int</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     * @return a new array containing the elements between\n+     *      the start and end indices.\n+     */\n+    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_INT_ARRAY;\n+        }\n+\n+        int[] subarray = new int[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>short</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     * @return a new array containing the elements between\n+     *      the start and end indices.\n+     */\n+    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_SHORT_ARRAY;\n+        }\n+\n+        short[] subarray = new short[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>char</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     * @return a new array containing the elements between\n+     *      the start and end indices.\n+     */\n+    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_CHAR_ARRAY;\n+        }\n+\n+        char[] subarray = new char[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>byte</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     * @return a new array containing the elements between\n+     *      the start and end indices.\n+     */\n+    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+\n+        byte[] subarray = new byte[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>double</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     * @return a new array containing the elements between\n+     *      the start and end indices.\n+     */\n+    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_DOUBLE_ARRAY;\n+        }\n+\n+        double[] subarray = new double[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>float</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     * @return a new array containing the elements between\n+     *      the start and end indices.\n+     */\n+    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_FLOAT_ARRAY;\n+        }\n+\n+        float[] subarray = new float[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>boolean</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     * @return a new array containing the elements between\n+     *      the start and end indices.\n+     */\n+    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_BOOLEAN_ARRAY;\n+        }\n+\n+        boolean[] subarray = new boolean[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    // Is same length\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @return <code>true</code> if length of arrays matches, treating\n+     *  <code>null</code> as an empty array\n+     */    \n+    public static boolean isSameLength(final Object[] array1, final Object[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @return <code>true</code> if length of arrays matches, treating\n+     *  <code>null</code> as an empty array\n+     */\n+    public static boolean isSameLength(final long[] array1, final long[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @return <code>true</code> if length of arrays matches, treating\n+     *  <code>null</code> as an empty array\n+     */\n+    public static boolean isSameLength(final int[] array1, final int[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @return <code>true</code> if length of arrays matches, treating\n+     *  <code>null</code> as an empty array\n+     */\n+    public static boolean isSameLength(final short[] array1, final short[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @return <code>true</code> if length of arrays matches, treating\n+     *  <code>null</code> as an empty array\n+     */\n+    public static boolean isSameLength(final char[] array1, final char[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @return <code>true</code> if length of arrays matches, treating\n+     *  <code>null</code> as an empty array\n+     */\n+    public static boolean isSameLength(final byte[] array1, final byte[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @return <code>true</code> if length of arrays matches, treating\n+     *  <code>null</code> as an empty array\n+     */\n+    public static boolean isSameLength(final double[] array1, final double[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @return <code>true</code> if length of arrays matches, treating\n+     *  <code>null</code> as an empty array\n+     */\n+    public static boolean isSameLength(final float[] array1, final float[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @return <code>true</code> if length of arrays matches, treating\n+     *  <code>null</code> as an empty array\n+     */\n+    public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {\n+        if ((array1 == null && array2 != null && array2.length > 0) ||\n+            (array2 == null && array1 != null && array1.length > 0) ||\n+            (array1 != null && array2 != null && array1.length != array2.length)) {\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks whether two arrays are the same type taking into account\n+     * multi-dimensional arrays.</p>\n+     * \n+     * @param array1 the first array, must not be <code>null</code>\n+     * @param array2 the second array, must not be <code>null</code>\n+     * @return <code>true</code> if type of arrays matches\n+     * @throws IllegalArgumentException if either array is <code>null</code>\n+     */    \n+    public static boolean isSameType(final Object array1, final Object array2) {\n+        if (array1 == null || array2 == null) {\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n+        }\n+        return array1.getClass().getName().equals(array2.getClass().getName());\n+    }\n+\n+    // Reverse\n+    //-----------------------------------------------------------------------\n+    /** \n+     * <p>Reverses the order of the given array.</p>\n+     *\n+     * <p>There is no special handling for multi-dimensional arrays.</p>\n+     *\n+     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to reverse, may be <code>null</code>\n+     */\n+    public static void reverse(final Object[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        Object tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to reverse, may be <code>null</code>\n+     */\n+    public static void reverse(final long[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        long tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to reverse, may be <code>null</code>\n+     */\n+    public static void reverse(final int[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        int tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to reverse, may be <code>null</code>\n+     */\n+    public static void reverse(final short[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        short tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to reverse, may be <code>null</code>\n+     */\n+    public static void reverse(final char[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        char tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to reverse, may be <code>null</code>\n+     */\n+    public static void reverse(final byte[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        byte tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to reverse, may be <code>null</code>\n+     */\n+    public static void reverse(final double[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        double tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to reverse, may be <code>null</code>\n+     */\n+    public static void reverse(final float[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        float tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method does nothing if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to reverse, may be <code>null</code>\n+     */\n+    public static void reverse(final boolean[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        boolean tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    // IndexOf search\n+    // ----------------------------------------------------------------------\n     \n-    /**\n-     * <p>Converts an array of primitive longs to objects.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>long</code> array\n-     * @return a <code>Long</code> array, <code>null</code> if null array input\n-     */\n-    public static Long[] toObject(final long[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_LONG_OBJECT_ARRAY;\n-        }\n-        final Long[] result = new Long[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = new Long(array[i]);\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of primitive shorts to objects.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>short</code> array\n-     * @return a <code>Short</code> array, <code>null</code> if null array input\n-     */\n-    public static Short[] toObject(final short[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_SHORT_OBJECT_ARRAY;\n-        }\n-        final Short[] result = new Short[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = new Short(array[i]);\n-        }\n-        return result;\n-    }    \n-\n-    // Boolean array converters\n-    // ----------------------------------------------------------------------\n-    /**\n-     * <p>Converts an array of object Booleans to primitives.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Boolean</code> array, may be <code>null</code>\n-     * @return a <code>boolean</code> array, <code>null</code> if null array input\n-     * @throws NullPointerException if array content is <code>null</code>\n-     */\n-    public static boolean[] toPrimitive(final Boolean[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_BOOLEAN_ARRAY;\n-        }\n-        final boolean[] result = new boolean[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = array[i].booleanValue();\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of object Booleans to primitives handling <code>null</code>.</p>\n-     * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Boolean</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>boolean</code> array, <code>null</code> if null array input\n-     */\n-    public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_BOOLEAN_ARRAY;\n-        }\n-        final boolean[] result = new boolean[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            Boolean b = array[i];\n-            result[i] = (b == null ? valueForNull : b.booleanValue());\n-        }\n-        return result;\n-    }\n-\n-    // Byte array converters\n-    // ----------------------------------------------------------------------\n-    /**\n-     * <p>Converts an array of object Bytes to primitives.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Byte</code> array, may be <code>null</code>\n-     * @return a <code>byte</code> array, <code>null</code> if null array input\n-     * @throws NullPointerException if array content is <code>null</code>\n-     */\n-    public static byte[] toPrimitive(final Byte[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_BYTE_ARRAY;\n-        }\n-        final byte[] result = new byte[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = array[i].byteValue();\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p>\n-     * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Byte</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>byte</code> array, <code>null</code> if null array input\n-     */\n-    public static byte[] toPrimitive(final Byte[] array, final byte valueForNull) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_BYTE_ARRAY;\n-        }\n-        final byte[] result = new byte[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            Byte b = array[i];\n-            result[i] = (b == null ? valueForNull : b.byteValue());\n-        }\n-        return result;\n-    }\n-    \n-    // Double array converters\n-    // ----------------------------------------------------------------------\n-    /**\n-     * <p>Converts an array of object Doubles to primitives.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Double</code> array, may be <code>null</code>\n-     * @return a <code>double</code> array, <code>null</code> if null array input\n-     * @throws NullPointerException if array content is <code>null</code>\n-     */\n-    public static double[] toPrimitive(final Double[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_DOUBLE_ARRAY;\n-        }\n-        final double[] result = new double[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = array[i].doubleValue();\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of object Doubles to primitives handling <code>null</code>.</p>\n-     * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Double</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>double</code> array, <code>null</code> if null array input\n-     */\n-    public static double[] toPrimitive(final Double[] array, final double valueForNull) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_DOUBLE_ARRAY;\n-        }\n-        final double[] result = new double[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            Double b = array[i];\n-            result[i] = (b == null ? valueForNull : b.doubleValue());\n-        }\n-        return result;\n-    }\n-\n-    //   Float array converters\n-    // ----------------------------------------------------------------------\n-    /**\n-     * <p>Converts an array of object Floats to primitives.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Float</code> array, may be <code>null</code>\n-     * @return a <code>float</code> array, <code>null</code> if null array input\n-     * @throws NullPointerException if array content is <code>null</code>\n-     */\n-    public static float[] toPrimitive(final Float[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_FLOAT_ARRAY;\n-        }\n-        final float[] result = new float[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = array[i].floatValue();\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of object Floats to primitives handling <code>null</code>.</p>\n-     * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Float</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>float</code> array, <code>null</code> if null array input\n-     */\n-    public static float[] toPrimitive(final Float[] array, final float valueForNull) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_FLOAT_ARRAY;\n-        }\n-        final float[] result = new float[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            Float b = array[i];\n-            result[i] = (b == null ? valueForNull : b.floatValue());\n-        }\n-        return result;\n-    }\n-\n-    // Int array converters\n-    // ----------------------------------------------------------------------\n-    /**\n-     * <p>Converts an array of object Integers to primitives.</p>\n-     *\n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Integer</code> array, may be <code>null</code>\n-     * @return an <code>int</code> array, <code>null</code> if null array input\n-     * @throws NullPointerException if array content is <code>null</code>\n-     */\n-    public static int[] toPrimitive(final Integer[] array) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_INT_ARRAY;\n-        }\n-        final int[] result = new int[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            result[i] = array[i].intValue();\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * <p>Converts an array of object Integer to primitives handling <code>null</code>.</p>\n-     * \n-     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n-     * \n-     * @param array  a <code>Integer</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return an <code>int</code> array, <code>null</code> if null array input\n-     */\n-    public static int[] toPrimitive(final Integer[] array, final int valueForNull) {\n-        if (array == null) {\n-            return null;\n-        } else if (array.length == 0) {\n-            return EMPTY_INT_ARRAY;\n-        }\n-        final int[] result = new int[array.length];\n-        for (int i = 0; i < array.length; i++) {\n-            Integer b = array[i];\n-            result[i] = (b == null ? valueForNull : b.intValue());\n-        }\n-        return result;\n+    // Object IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given object in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param objectToFind  the object to find, may be <code>null</code>\n+     * @return the index of the object within the array, \n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final Object[] array, final Object objectToFind) {\n+        return indexOf(array, objectToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given object in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return <code>-1</code>.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param objectToFind  the object to find, may be <code>null</code>\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the object within the array starting at the index,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final Object[] array, final Object objectToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        if (objectToFind == null) {\n+            for (int i = startIndex; i < array.length; i++) {\n+                if (array[i] == null) {\n+                    return i;\n+                }\n+            }\n+        } else {\n+            for (int i = startIndex; i < array.length; i++) {\n+                if (objectToFind.equals(array[i])) {\n+                    return i;\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given object within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param objectToFind  the object to find, may be <code>null</code>\n+     * @return the last index of the object within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final Object[] array, final Object objectToFind) {\n+        return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given object in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return <code>-1</code>. A startIndex larger than\n+     * the array length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param objectToFind  the object to find, may be <code>null</code>\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the object within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final Object[] array, final Object objectToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        if (objectToFind == null) {\n+            for (int i = startIndex; i >= 0; i--) {\n+                if (array[i] == null) {\n+                    return i;\n+                }\n+            }\n+        } else {\n+            for (int i = startIndex; i >= 0; i--) {\n+                if (objectToFind.equals(array[i])) {\n+                    return i;\n+                }\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the object is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param objectToFind  the object to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final Object[] array, final Object objectToFind) {\n+        return (indexOf(array, objectToFind) != -1);\n+    }\n+\n+    // long IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final long[] array, final long valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final long[] array, final long valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final long[] array, final long valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final long[] array, final long valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n+    }\n+\n+    // int IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final int[] array, final int valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final int[] array, final int valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final int[] array, final int valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final int[] array, final int valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final int[] array, final int valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n+    }\n+\n+    // short IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final short[] array, final short valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final short[] array, final short valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final short[] array, final short valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final short[] array, final short valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final short[] array, final short valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n+    }\n+\n+    // byte IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final byte[] array, final byte valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final byte[] array, final byte valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final byte[] array, final byte valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {\n+        if (array == null) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final byte[] array, final byte valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n+    }\n+\n+    // double IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final double[] array, final double valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value within a given tolerance in the array.\n+     * This method will return the index of the first value which falls between the region\n+     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param tolerance tolerance of the search\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final double[] array, final double valueToFind, final double tolerance) {\n+        return indexOf(array, valueToFind, 0, tolerance);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final double[] array, final double valueToFind, int startIndex) {\n+        if (ArrayUtils.isEmpty(array)) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.\n+     * This method will return the index of the first value which falls between the region\n+     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @param tolerance tolerance of the search\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {\n+        if (ArrayUtils.isEmpty(array)) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        double min = valueToFind - tolerance;\n+        double max = valueToFind + tolerance;\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (array[i] >= min && array[i] <= max) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final double[] array, final double valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within a given tolerance in the array.\n+     * This method will return the index of the last value which falls between the region\n+     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param tolerance tolerance of the search\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final double[] array, final double valueToFind, final double tolerance) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {\n+        if (ArrayUtils.isEmpty(array)) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.\n+     * This method will return the index of the last value which falls between the region\n+     * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @param tolerance  search for value within plus/minus this amount\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {\n+        if (ArrayUtils.isEmpty(array)) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        double min = valueToFind - tolerance;\n+        double max = valueToFind + tolerance;\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (array[i] >= min && array[i] <= max) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final double[] array, final double valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n+    }\n+\n+    /**\n+     * <p>Checks if a value falling within the given tolerance is in the\n+     * given array.  If the array contains a value within the inclusive range \n+     * defined by (value - tolerance) to (value + tolerance).</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array\n+     * is passed in.</p>\n+     *\n+     * @param array  the array to search\n+     * @param valueToFind  the value to find\n+     * @param tolerance  the array contains the tolerance of the search\n+     * @return true if value falling within tolerance is in array\n+     */\n+    public static boolean contains(final double[] array, final double valueToFind, final double tolerance) {\n+        return (indexOf(array, valueToFind, 0, tolerance) != -1);\n+    }\n+\n+    // float IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final float[] array, final float valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final float[] array, final float valueToFind, int startIndex) {\n+        if (ArrayUtils.isEmpty(array)) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final float[] array, final float valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) {\n+        if (ArrayUtils.isEmpty(array)) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final float[] array, final float valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n+    }\n+\n+    // boolean IndexOf\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Find the index of the given value in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final boolean[] array, final boolean valueToFind) {\n+        return indexOf(array, valueToFind, 0);\n+    }\n+\n+    /**\n+     * <p>Find the index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n+     * \n+     * @param array  the array to search through for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the index to start searching at\n+     * @return the index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n+        if (ArrayUtils.isEmpty(array)) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            startIndex = 0;\n+        }\n+        for (int i = startIndex; i < array.length; i++) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * @param valueToFind  the object to find\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final boolean[] array, final boolean valueToFind) {\n+        return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>Find the last index of the given value in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> array input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n+     * \n+     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param valueToFind  the value to find\n+     * @param startIndex  the start index to travers backwards from\n+     * @return the last index of the value within the array,\n+     *  <code>-1</code> if not found or <code>null</code> array input\n+     */\n+    public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n+        if (ArrayUtils.isEmpty(array)) {\n+            return -1;\n+        }\n+        if (startIndex < 0) {\n+            return -1;\n+        } else if (startIndex >= array.length) {\n+            startIndex = array.length - 1;\n+        }\n+        for (int i = startIndex; i >= 0; i--) {\n+            if (valueToFind == array[i]) {\n+                return i;\n+            }\n+        }\n+        return -1;\n+    }\n+\n+    /**\n+     * <p>Checks if the value is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * \n+     * @param array  the array to search through\n+     * @param valueToFind  the value to find\n+     * @return <code>true</code> if the array contains the object\n+     */\n+    public static boolean contains(final boolean[] array, final boolean valueToFind) {\n+        return (indexOf(array, valueToFind) != -1);\n     }\n \n     // Primitive/Object array converters\n         return result;\n     }\n     \n+    /**\n+     * <p>Converts an array of primitive longs to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>long</code> array\n+     * @return a <code>Long</code> array, <code>null</code> if null array input\n+     */\n+    public static Long[] toObject(final long[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_LONG_OBJECT_ARRAY;\n+        }\n+        final Long[] result = new Long[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Long(array[i]);\n+        }\n+        return result;\n+    }\n+\n+    // Int array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Integers to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Integer</code> array, may be <code>null</code>\n+     * @return an <code>int</code> array, <code>null</code> if null array input\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static int[] toPrimitive(final Integer[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_INT_ARRAY;\n+        }\n+        final int[] result = new int[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].intValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Integer to primitives handling <code>null</code>.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Integer</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return an <code>int</code> array, <code>null</code> if null array input\n+     */\n+    public static int[] toPrimitive(final Integer[] array, final int valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_INT_ARRAY;\n+        }\n+        final int[] result = new int[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Integer b = array[i];\n+            result[i] = (b == null ? valueForNull : b.intValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive ints to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  an <code>int</code> array\n+     * @return an <code>Integer</code> array, <code>null</code> if null array input\n+     */\n+    public static Integer[] toObject(final int[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_INTEGER_OBJECT_ARRAY;\n+        }\n+        final Integer[] result = new Integer[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Integer(array[i]);\n+        }\n+        return result;\n+    }\n+    \n     // Short array converters\n     // ----------------------------------------------------------------------\n     /**\n         }\n         return result;\n     }\n+\n+    /**\n+     * <p>Converts an array of primitive shorts to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>short</code> array\n+     * @return a <code>Short</code> array, <code>null</code> if null array input\n+     */\n+    public static Short[] toObject(final short[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_SHORT_OBJECT_ARRAY;\n+        }\n+        final Short[] result = new Short[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Short(array[i]);\n+        }\n+        return result;\n+    }    \n+\n+    // Byte array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Bytes to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Byte</code> array, may be <code>null</code>\n+     * @return a <code>byte</code> array, <code>null</code> if null array input\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static byte[] toPrimitive(final Byte[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+        final byte[] result = new byte[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].byteValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Byte</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>byte</code> array, <code>null</code> if null array input\n+     */\n+    public static byte[] toPrimitive(final Byte[] array, final byte valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+        final byte[] result = new byte[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Byte b = array[i];\n+            result[i] = (b == null ? valueForNull : b.byteValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive bytes to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>byte</code> array\n+     * @return a <code>Byte</code> array, <code>null</code> if null array input\n+     */\n+    public static Byte[] toObject(final byte[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_BYTE_OBJECT_ARRAY;\n+        }\n+        final Byte[] result = new Byte[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Byte(array[i]);\n+        }\n+        return result;\n+    }  \n     \n-    // Basic methods handling multi-dimensional arrays\n-    //-----------------------------------------------------------------------\n-    /**\n-     * <p>Outputs an array as a String, treating <code>null</code> as an empty array.</p>\n-     *\n-     * <p>Multi-dimensional arrays are handled correctly, including\n-     * multi-dimensional primitive arrays.</p>\n-     *\n-     * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>\n-     * \n-     * @param array  the array to get a toString for, may be <code>null</code>\n-     * @return a String representation of the array, '{}' if null array input\n-     */\n-    public static String toString(final Object array) {\n-        return toString(array, \"{}\");\n-    }\n-\n-    /**\n-     * <p>Outputs an array as a String handling <code>null</code>s.</p>\n-     *\n-     * <p>Multi-dimensional arrays are handled correctly, including\n-     * multi-dimensional primitive arrays.</p>\n-     *\n-     * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>\n-     * \n-     * @param array  the array to get a toString for, may be <code>null</code>\n-     * @param stringIfNull  the String to return if the array is <code>null</code>\n-     * @return a String representation of the array\n-     */    \n-    public static String toString(final Object array, final String stringIfNull) {\n-        if (array == null) {\n-            return stringIfNull;\n-        }\n-        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n-    }\n-\n-    /**\n-     * <p>ArrayUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>ArrayUtils.clone(new int[] {2})</code>.</p>\n-     *\n-     * <p>This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.</p>\n-     */\n-    public ArrayUtils() {\n+    // Double array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Doubles to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Double</code> array, may be <code>null</code>\n+     * @return a <code>double</code> array, <code>null</code> if null array input\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static double[] toPrimitive(final Double[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_DOUBLE_ARRAY;\n+        }\n+        final double[] result = new double[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].doubleValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Doubles to primitives handling <code>null</code>.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Double</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>double</code> array, <code>null</code> if null array input\n+     */\n+    public static double[] toPrimitive(final Double[] array, final double valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_DOUBLE_ARRAY;\n+        }\n+        final double[] result = new double[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Double b = array[i];\n+            result[i] = (b == null ? valueForNull : b.doubleValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive doubles to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>double</code> array\n+     * @return a <code>Double</code> array, <code>null</code> if null array input\n+     */\n+    public static Double[] toObject(final double[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_DOUBLE_OBJECT_ARRAY;\n+        }\n+        final Double[] result = new Double[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Double(array[i]);\n+        }\n+        return result;\n+    }\n+\n+    //   Float array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Floats to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Float</code> array, may be <code>null</code>\n+     * @return a <code>float</code> array, <code>null</code> if null array input\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static float[] toPrimitive(final Float[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_FLOAT_ARRAY;\n+        }\n+        final float[] result = new float[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].floatValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Floats to primitives handling <code>null</code>.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Float</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>float</code> array, <code>null</code> if null array input\n+     */\n+    public static float[] toPrimitive(final Float[] array, final float valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_FLOAT_ARRAY;\n+        }\n+        final float[] result = new float[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Float b = array[i];\n+            result[i] = (b == null ? valueForNull : b.floatValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive floats to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>float</code> array\n+     * @return a <code>Float</code> array, <code>null</code> if null array input\n+     */\n+    public static Float[] toObject(final float[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_FLOAT_OBJECT_ARRAY;\n+        }\n+        final Float[] result = new Float[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Float(array[i]);\n+        }\n+        return result;\n+    }\n+\n+    // Boolean array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Booleans to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Boolean</code> array, may be <code>null</code>\n+     * @return a <code>boolean</code> array, <code>null</code> if null array input\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static boolean[] toPrimitive(final Boolean[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_BOOLEAN_ARRAY;\n+        }\n+        final boolean[] result = new boolean[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].booleanValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Booleans to primitives handling <code>null</code>.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>Boolean</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>boolean</code> array, <code>null</code> if null array input\n+     */\n+    public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_BOOLEAN_ARRAY;\n+        }\n+        final boolean[] result = new boolean[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Boolean b = array[i];\n+            result[i] = (b == null ? valueForNull : b.booleanValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive booleans to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n+     * \n+     * @param array  a <code>boolean</code> array\n+     * @return a <code>Boolean</code> array, <code>null</code> if null array input\n+     */\n+    public static Boolean[] toObject(final boolean[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_BOOLEAN_OBJECT_ARRAY;\n+        }\n+        final Boolean[] result = new Boolean[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE);\n+        }\n+        return result;\n+    }\n+\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Checks if an array of Objects is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final Object[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive longs is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final long[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive ints is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final int[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive shorts is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final short[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive chars is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final char[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive bytes is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final byte[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final double[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive floats is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final float[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Checks if an array of primitive booleans is empty or <code>null</code>.</p>\n+     *\n+     * @param array  the array to test\n+     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @since 2.1\n+     */\n+    public static boolean isEmpty(final boolean[] array) {\n+        if (array == null || array.length == 0) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * <p>Joins the elements of the provided arrays into a single new array.</p>\n+     * <p>The new array contains all of the element of the first array followed\n+     * by all of the elements from the second array.</p>\n+     *\n+     * <pre>\n+     * ArrayUtils.join(null, null)     = null\n+     * ArrayUtils.join(array1, null)   = array1\n+     * ArrayUtils.join(null, array2)   = array2\n+     * ArrayUtils.join([], [])         = []\n+     * ArrayUtils.join([null], [null]) = [null, null]\n+     * ArrayUtils.join([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n+     * </pre>\n+     *\n+     * @param array1  the first array of values to join together, may be null\n+     * @param array2  the second array of values to join together, may be null\n+     * @return The new joined array, <code>null</code> if null array inputs. \n+     *      The type of the joined array is the type of the first array.\n+     * @since 2.1\n+     */\n+    public static Object[] join(Object[] array1, Object[] array2) {\n+        if (array1 == null) {\n+            return array2;\n+        } else if (array2 == null) {\n+            return array1;\n+        } else {\n+            Object[] joinedArray = (Object[]) Array.newInstance(array1.getClass().getComponentType(), array1.length\n+                + array2.length);\n+            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+            return joinedArray;\n+        }\n+    }\n+\n+    /**\n+     * <p>Adds the element to the end of the array.</p>\n+     *\n+     * <p>The new array contains the same elements of the input\n+     * array plus the given element in the last position. The component type of \n+     * the new array is  the same as that of the input array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, null)      = [null]\n+     * ArrayUtils.add(null, \"a\")       = [\"a\"]\n+     * ArrayUtils.add([\"a\"], null)     = [\"a\", null]\n+     * ArrayUtils.add([\"a\"], \"b\")      = [\"a\", \"b\"]\n+     * ArrayUtils.add([\"a\", \"b\"], \"c\") = [\"a\", \"b\", \"c\"]\n+     * </pre>\n+     * \n+     * @param array  the array to \"add\" the element to, may be <code>null</code>\n+     * @param element  the object to add\n+     * @return A new array containing the existing elements and the new element\n+     * @since 2.1\n+     */\n+    public static Object[] add(Object[] array, Object element) {\n+        Object joinedArray;\n+        int elementPos;\n+        if (array != null) {\n+            joinedArray = Array.newInstance(array.getClass().getComponentType(), array.length + 1);\n+            System.arraycopy(array, 0, joinedArray, 0, array.length);\n+            elementPos = array.length;\n+        } else {\n+            // null input array, use the element type\n+            joinedArray = Array.newInstance(element != null ? element.getClass() : Object.class, 1);\n+            elementPos = 0;\n+        }\n+        Array.set(joinedArray, elementPos, element);\n+        return (Object[]) joinedArray;\n+    }\n+\n+    /**\n+     * <p>Inserts the specified element at the specified position in the array. \n+     * Shifts the element currently at that position (if any) and any subsequent\n+     * elements to the right (adds one to their indices).</p>\n+     *\n+     * <p>This method returns a new array with the same elements of the input\n+     * array plus the given element on the specified position. The component \n+     * type of the returned array is always the same as that of the input \n+     * array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, 0, null)      = [null]\n+     * ArrayUtils.add(null, 0, \"a\")       = [\"a\"]\n+     * ArrayUtils.add([\"a\"], 1, null)     = [\"a\", null]\n+     * ArrayUtils.add([\"a\"], 1, \"b\")      = [\"a\", \"b\"]\n+     * ArrayUtils.add([\"a\", \"b\"], 3, \"c\") = [\"a\", \"b\", \"c\"]\n+     * </pre>\n+     * \n+     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param index  the position of the new object\n+     * @param element  the object to add\n+     * @return A new array containing the existing elements and the new element\n+     * @throws IndexOutOfBoundsException if the index is out of range \n+     * (index < 0 || index > array.length).\n+     */\n+    public static Object[] add(final Object[] array, final int index, final Object element) {\n+        if (array == null) {\n+            if (index != 0) {\n+                throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: 0\");\n+            }\n+            Object joinedArray = Array.newInstance(element != null ? element.getClass() : Object.class, 1);\n+            Array.set(joinedArray, 0, element);\n+            return (Object[]) joinedArray;\n+        }\n+        int length = array.length;\n+        if (index > length || index < 0) {\n+            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n+        }\n+        Object result = Array.newInstance(array.getClass().getComponentType(), length + 1);\n+        System.arraycopy(array, 0, result, 0, index);\n+        Array.set(result, index, element);\n+        if (index < length) {\n+            System.arraycopy(array, index, result, index + 1, length - index);\n+        }\n+        return (Object[]) result;\n     }\n }", "timestamp": 1075543059, "metainfo": ""}