{"sha": "f37a1950913feb0c2136224ab31fddfaca881896", "log": "Add append(StringBuffer,int,int) and append(StrBuilder,int,int)  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Appends the text representing <code>null</code> to the string builder.\n+     * Appends the text representing <code>null</code> to this string builder.\n      *\n      * @return this, to enable chaining\n      */\n     }\n \n     /**\n-     * Appends an object to the string builder.\n+     * Appends an object to this string builder.\n      * Appending null will call {@link #appendNull()}.\n      *\n      * @param obj  the object to append\n     }\n \n     /**\n-     * Appends a string to the string builder.\n+     * Appends a string to this string builder.\n      * Appending null will call {@link #appendNull()}.\n      *\n      * @param str  the string to append\n     }\n \n     /**\n-     * Appends a string to the string builder.\n+     * Appends part of a string to this string builder.\n      * Appending null will call {@link #appendNull()}.\n      *\n      * @param str  the string to append\n     }\n \n     /**\n-     * Appends a string buffer to the string builder.\n+     * Appends a string buffer to this string builder.\n      * Appending null will call {@link #appendNull()}.\n      *\n      * @param str  the string buffer to append\n     }\n \n     /**\n-     * Appends another string builder to the string builder.\n+     * Appends part of a string buffer to this string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param str  the string to append\n+     * @param startIndex  the start index, inclusive, must be valid\n+     * @param length  the length to append, must be valid\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder append(StringBuffer str, int startIndex, int length) {\n+        if (str == null) {\n+            return appendNull();\n+        }\n+        if (startIndex < 0 || startIndex > str.length()) {\n+            throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n+        }\n+        if (length < 0 || (startIndex + length) > str.length()) {\n+            throw new StringIndexOutOfBoundsException(\"length must be valid\");\n+        }\n+        if (length > 0) {\n+            int len = length();\n+            ensureCapacity(len + length);\n+            str.getChars(startIndex, startIndex + length, buffer, len);\n+            size += length;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Appends another string builder to this string builder.\n      * Appending null will call {@link #appendNull()}.\n      *\n      * @param str  the string builder to append\n             ensureCapacity(len + strLen);\n             System.arraycopy(str.buffer, 0, buffer, len, strLen);\n             size += strLen;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Appends part of a string builder to this string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param str  the string to append\n+     * @param startIndex  the start index, inclusive, must be valid\n+     * @param length  the length to append, must be valid\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder append(StrBuilder str, int startIndex, int length) {\n+        if (str == null) {\n+            return appendNull();\n+        }\n+        if (startIndex < 0 || startIndex > str.length()) {\n+            throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n+        }\n+        if (length < 0 || (startIndex + length) > str.length()) {\n+            throw new StringIndexOutOfBoundsException(\"length must be valid\");\n+        }\n+        if (length > 0) {\n+            int len = length();\n+            ensureCapacity(len + length);\n+            str.getChars(startIndex, startIndex + length, buffer, len);\n+            size += length;\n         }\n         return this;\n     }\n--- a/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n         assertEquals(\"foobar\", sb.toString());\n     }\n \n+    public void testAppend_StringBuffer() {\n+        StrBuilder sb = new StrBuilder();\n+\n+        sb.append(new StringBuffer(\"foo\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((StringBuffer) null);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"bar\"));\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    public void testAppend_StringBuffer_int_int() {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        sb.append(new StringBuffer(\"foo\"), 0, 3);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((StringBuffer) null, 0, 1);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), -1, 1);\n+            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), 3, 1);\n+            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), 1, -1);\n+            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), 1, 3);\n+            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), -1, 3);\n+            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuffer(\"bar\"), 4, 0);\n+            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(new StringBuffer(\"bar\"), 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"abcbardef\"), 3, 3);\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    public void testAppend_StrBuilder() {\n+        StrBuilder sb = new StrBuilder();\n+\n+        sb.append(new StrBuilder(\"foo\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((StrBuilder) null);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StrBuilder(\"\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StrBuilder(\"bar\"));\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    public void testAppend_StrBuilder_int_int() {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        sb.append(new StrBuilder(\"foo\"), 0, 3);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((StrBuilder) null, 0, 1);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), -1, 1);\n+            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), 3, 1);\n+            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), 1, -1);\n+            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), 1, 3);\n+            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), -1, 3);\n+            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StrBuilder(\"bar\"), 4, 0);\n+            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(new StrBuilder(\"bar\"), 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StrBuilder(\"abcbardef\"), 3, 3);\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n     public void testAppend_CharArray() {\n         StrBuilder sb = new StrBuilder();\n         ", "timestamp": 1123538611, "metainfo": ""}