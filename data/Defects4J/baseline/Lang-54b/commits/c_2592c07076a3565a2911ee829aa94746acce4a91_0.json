{"sha": "2592c07076a3565a2911ee829aa94746acce4a91", "log": "Address Checkstyle report issues as reported by Henri (http://www.generationjava.com/maven/jakarta-commons/lang/)   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: CompareToBuilder.java,v 1.13 2003/03/23 17:54:16 scolebourne Exp $\n+ * @version $Id: CompareToBuilder.java,v 1.14 2003/04/18 09:12:16 ggregory Exp $\n  */\n public class CompareToBuilder {\n     \n      * @param builder  the builder to append to\n      * @param useTransients  whether to test transient fields\n      */\n-    private static void reflectionAppend(Object lhs, Object rhs, Class clazz, CompareToBuilder builder, boolean useTransients) {\n+    private static void reflectionAppend(\n+        Object lhs,\n+        Object rhs,\n+        Class clazz,\n+        CompareToBuilder builder,\n+        boolean useTransients) {\n         Field[] fields = clazz.getDeclaredFields();\n         Field.setAccessible(fields, true);\n         for (int i = 0; i < fields.length && builder.comparison == 0; i++) {\n             Field f = fields[i];\n-            if ((f.getName().indexOf('$') == -1) &&\n-                (useTransients || !Modifier.isTransient(f.getModifiers())) &&\n-                (!Modifier.isStatic(f.getModifiers()))) {\n+            if ((f.getName().indexOf('$') == -1)\n+                && (useTransients || !Modifier.isTransient(f.getModifiers()))\n+                && (!Modifier.isStatic(f.getModifiers()))) {\n                 try {\n                     builder.append(f.get(lhs), f.get(rhs));\n                 } catch (IllegalAccessException e) {\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: EqualsBuilder.java,v 1.12 2003/03/23 17:54:16 scolebourne Exp $\n+ * @version $Id: EqualsBuilder.java,v 1.13 2003/04/18 09:12:16 ggregory Exp $\n  */\n public class EqualsBuilder {\n     /**\n      * @param builder  the builder to append to\n      * @param useTransients  whether to test transient fields\n      */\n-    private static void reflectionAppend(Object lhs, Object rhs, Class clazz, EqualsBuilder builder, boolean useTransients) {\n+    private static void reflectionAppend(\n+        Object lhs,\n+        Object rhs,\n+        Class clazz,\n+        EqualsBuilder builder,\n+        boolean useTransients) {\n         Field[] fields = clazz.getDeclaredFields();\n         Field.setAccessible(fields, true);\n         for (int i = 0; i < fields.length && builder.isEquals; i++) {\n             Field f = fields[i];\n-            if ((f.getName().indexOf('$') == -1) &&\n-                (useTransients || !Modifier.isTransient(f.getModifiers())) &&\n-                (!Modifier.isStatic(f.getModifiers()))) {\n+            if ((f.getName().indexOf('$') == -1)\n+                && (useTransients || !Modifier.isTransient(f.getModifiers()))\n+                && (!Modifier.isStatic(f.getModifiers()))) {\n                 try {\n                     builder.append(f.get(lhs), f.get(rhs));\n                 } catch (IllegalAccessException e) {\n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 1.0\n- * @version $Id: HashCodeBuilder.java,v 1.11 2003/03/23 17:54:16 scolebourne Exp $\n+ * @version $Id: HashCodeBuilder.java,v 1.12 2003/04/18 09:12:16 ggregory Exp $\n  */\n public class HashCodeBuilder {\n \n      * these should be different for each class, however this is not vital.\n      * Prime numbers are preferred, especially for the multiplier.</p>\n      *\n-     * @param initialNonZeroOddNumber\n-     * @param multiplierNonZeroOddNumber\n+     * @param initialNonZeroOddNumber  a non-zero, odd number used as the initial value\n+     * @param multiplierNonZeroOddNumber  a non-zero, odd number used as the multiplier\n      * @param object  the Object to create a <code>hashCode</code> for\n      * @param testTransients  whether to include transient fields\n      * @return int hash code\n      * these should be different for each class, however this is not vital.\n      * Prime numbers are preferred, especially for the multiplier.</p>\n      *\n-     * @param initialNonZeroOddNumber\n-     * @param multiplierNonZeroOddNumber\n+     * @param initialNonZeroOddNumber  a non-zero, odd number used as the initial value\n+     * @param multiplierNonZeroOddNumber  a non-zero, odd number used as the multiplier\n      * @param object  the Object to create a <code>hashCode</code> for\n      * @param testTransients  whether to include transient fields\n      * @param reflectUpToClass  the superclass to reflect up to (inclusive), may be null\n      * @throws IllegalArgumentException if the number is zero or even\n      */\n     public static int reflectionHashCode(\n-            int initialNonZeroOddNumber, int multiplierNonZeroOddNumber,\n-            Object object, boolean testTransients, Class reflectUpToClass) {\n+        int initialNonZeroOddNumber,\n+        int multiplierNonZeroOddNumber,\n+        Object object,\n+        boolean testTransients,\n+        Class reflectUpToClass) {\n \n         if (object == null) {\n             throw new IllegalArgumentException(\"The object to build a hash code for must not be null\");\n         Field.setAccessible(fields, true);\n         for (int i = 0; i < fields.length; i++) {\n             Field f = fields[i];\n-            if ((f.getName().indexOf('$') == -1) &&\n-                (useTransients || !Modifier.isTransient(f.getModifiers())) &&\n-                (!Modifier.isStatic(f.getModifiers()))) {\n+            if ((f.getName().indexOf('$') == -1)\n+                && (useTransients || !Modifier.isTransient(f.getModifiers()))\n+                && (!Modifier.isStatic(f.getModifiers()))) {\n                 try {\n                     builder.append(f.get(object));\n                 } catch (IllegalAccessException e) {\n                 }\n             }\n         }\n-     }\n+    }\n \n     //-------------------------------------------------------------------------\n ", "timestamp": 1050657136, "metainfo": ""}