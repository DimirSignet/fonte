{"sha": "1cd1cee677b5a82222044978dfb51b424a94c7a1", "log": "Make MethodUtils depend on ReflectionUtils parameter set comparasons   ", "commit": "\n--- a/src/java/org/apache/commons/lang/reflect/MethodUtils.java\n+++ b/src/java/org/apache/commons/lang/reflect/MethodUtils.java\n  * @author Gregor Raman\n  * @author Jan Sorensen\n  * @author Robert Burrell Donkin\n- * @version $Id: MethodUtils.java,v 1.7 2002/11/21 18:53:32 rdonkin Exp $\n+ * @version $Id: MethodUtils.java,v 1.8 2002/11/21 19:38:51 rdonkin Exp $\n  */\n public class MethodUtils {\n     \n                 \n                 // compare parameters\n                 Class[] methodsParams = methods[i].getParameterTypes();\n-                int methodParamSize = methodsParams.length;\n-                if (methodParamSize == paramSize) {          \n-                    boolean match = true;\n-                    for (int n = 0 ; n < methodParamSize; n++) {\n+                if (ReflectionUtils.isCompatible(parameterTypes, methodsParams)) {\n+                    // get accessible version of method\n+                    Method method = getAccessibleMethod(methods[i]);\n+                    if (method != null) {\n                         if (debug) {\n-                            log(\"Param=\" + parameterTypes[n].getName());\n-                            log(\"Method=\" + methodsParams[n].getName());\n+                            log(method + \" accessible version of \" \n+                                        + methods[i]);\n                         }\n-                        if (!ReflectionUtils.isCompatible(parameterTypes[n], methodsParams[n])) {\n-                            if (debug) {\n-                                log(methodsParams[n] + \" is not assignable from \" \n-                                            + parameterTypes[n]);\n-                            }    \n-                            match = false;\n-                            break;\n+                        try {\n+                            //\n+                            // XXX Default access superclass workaround\n+                            // (See above for more details.)\n+                            //\n+                            method.setAccessible(true);\n+                            \n+                        } catch (SecurityException se) {\n+                            // log but continue just in case the method.invoke works anyway\n+                            log(\n+                            \"Cannot setAccessible on method. Therefore cannot use jvm access bug workaround.\", \n+                            se);\n                         }\n+                        return method;\n                     }\n                     \n-                    if (match) {\n-                        // get accessible version of method\n-                        Method method = getAccessibleMethod(methods[i]);\n-                        if (method != null) {\n-                            if (debug) {\n-                                log(method + \" accessible version of \" \n-                                            + methods[i]);\n-                            }\n-                            try {\n-                                //\n-                                // XXX Default access superclass workaround\n-                                // (See above for more details.)\n-                                //\n-                                method.setAccessible(true);\n-                                \n-                            } catch (SecurityException se) {\n-                                // log but continue just in case the method.invoke works anyway\n-                                log(\n-                                \"Cannot setAccessible on method. Therefore cannot use jvm access bug workaround.\", \n-                                se);\n-                            }\n-                            return method;\n-                        }\n-                        \n-                        log(\"Couldn't find accessible method.\");\n-                    }\n+                    log(\"Couldn't find accessible method.\");\n                 }\n             }\n         }", "timestamp": 1037907531, "metainfo": ""}