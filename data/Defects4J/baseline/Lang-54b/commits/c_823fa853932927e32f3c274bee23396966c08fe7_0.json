{"sha": "823fa853932927e32f3c274bee23396966c08fe7", "log": "changed modify method to calculate the field offset and use the set method, rather than adding the offset and letting Calendar perform the calculation - this fixes http://issues.apache.org/bugzilla/show_bug.cgi?id=25560; updated javadocs on round method to explain how rounding across daylight saving time is handled   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 2.0\n- * @version $Id: DateUtils.java,v 1.19 2004/06/27 06:29:29 bayard Exp $\n+ * @version $Id: DateUtils.java,v 1.20 2004/07/05 17:54:48 stevencaswell Exp $\n  */\n public class DateUtils {\n     \n      * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n      * would return 1 April 2002 0:00:00.000.</p>\n      * \n+     * <p>For a date in a timezone that handles the change to daylight\n+     * saving time, roudning to Calendar.HOUR_OF_DAY will behave as follows.\n+     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n+     * date that crosses this time would produce the following values:\n+     * <ul>\n+     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n+     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n+     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n+     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n+     * </ul>\n+     * </p>\n+     * \n      * @param date  the date to work with\n      * @param field  the field from <code>Calendar</code>\n      *  or <code>SEMI_MONTH</code>\n      * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n      * would return 1 April 2002 0:00:00.000.</p>\n      * \n+     * <p>For a date in a timezone that handles the change to daylight\n+     * saving time, roudning to Calendar.HOUR_OF_DAY will behave as follows.\n+     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n+     * date that crosses this time would produce the following values:\n+     * <ul>\n+     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n+     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n+     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n+     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n+     * </ul>\n+     * </p>\n+     * \n      * @param date  the date to work with\n      * @param field  the field from <code>Calendar</code>\n      *  or <code>SEMI_MONTH</code>\n      * 13:45:01.231, if this was passed with HOUR, it would return\n      * 28 Mar 2002 14:00:00.000. If this was passed with MONTH, it\n      * would return 1 April 2002 0:00:00.000.</p>\n+     * \n+     * <p>For a date in a timezone that handles the change to daylight\n+     * saving time, roudning to Calendar.HOUR_OF_DAY will behave as follows.\n+     * Suppose daylight saving time begins at 02:00 on March 30. Rounding a \n+     * date that crosses this time would produce the following values:\n+     * <ul>\n+     * <li>March 30, 2003 01:10 rounds to March 30, 2003 01:00</li>\n+     * <li>March 30, 2003 01:40 rounds to March 30, 2003 03:00</li>\n+     * <li>March 30, 2003 02:10 rounds to March 30, 2003 03:00</li>\n+     * <li>March 30, 2003 02:40 rounds to March 30, 2003 04:00</li>\n+     * </ul>\n+     * </p>\n      * \n      * @param date  the date to work with, either Date or Calendar\n      * @param field  the field from <code>Calendar</code>\n                 roundUp = offset > ((max - min) / 2);\n             }\n             //We need to remove this field\n-            val.add(fields[i][0], -offset);\n+            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n         }\n         throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n ", "timestamp": 1089050088, "metainfo": ""}