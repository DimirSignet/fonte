{"sha": "458047448497319460650a6e7d5f0d2120c107c5", "log": "created by refactoring NestableException revision 1.3   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java\n+\n+package org.apache.commons.lang.exception;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n+import junit.framework.TestCase;\n+import junit.textui.TestRunner;\n+/**\n+ * Tests implementations of the org.apache.commons.lang.exception.Nestable\n+ * interface.\n+ *\n+ * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n+ * @version $Id: AbstractNestableTestCase.java,v 1.1 2002/09/11 18:16:10 stevencaswell Exp $\n+ */\n+public abstract class AbstractNestableTestCase extends TestCase\n+{\n+\n+    /**\n+     * Constructs an instance of\n+     * <code>AbstractNestableTestCase</code>.\n+     *\n+     * @param name the test name\n+     */\n+    public AbstractNestableTestCase(String name)\n+    {\n+        super(name);\n+    }\n+    \n+    /**\n+     * Tests the getCause() operation.\n+     */\n+    public void testGetCause()\n+    {\n+        Nestable ne1 = getNestable();\n+        assertNull(\"nestable exception() cause is null\", ne1.getCause()); \n+        \n+        Nestable ne2 = getNestable(\"ne2\");\n+        assertNull(\"nestable exception(\\\"ne2\\\") cause is null\", ne2.getCause());\n+        \n+        Nestable ne3 = getNestable(getThrowable(\"ne3 exception\"));\n+        assertNotNull(\"nestable exception(Throwable(\\\"ne3 exception\\\") cause is not null\",\n+            ne3.getCause()); \n+        assertTrue(\"nestable exception(Throwable(\\\"ne3 exception\\\") cause message == ne3 exception\",\n+            ne3.getCause().getMessage().equals(\"ne3 exception\")); \n+        \n+        Nestable ne4 = getNestable(\"ne4\", getThrowable(\"ne4 exception\"));\n+        assertNotNull(\"nestable exception(\\\"ne4\\\", Throwable(\\\"ne4 exception\\\") cause is not null\", \n+            ne4.getCause()); \n+        \n+        Nestable ne5 = getNestable(\"ne5\", (Throwable) null);\n+        assertNull(\"nestable exception(\\\"ne5\\\", null) cause is null\", \n+            ne5.getCause()); \n+        \n+        Nestable ne6 = getNestable(null, getThrowable(\"ne6 exception\"));\n+        assertNotNull(\"nestable exception(null, Throwable(\\\"ne6 exception\\\") cause is not null\", \n+            ne6.getCause()); \n+    }\n+\n+    /**\n+     * Tests the getThrowableCount() operation.\n+     */\n+    public void testGetThrowableCount()\n+    {\n+        Nestable ne1 = getNestable();\n+        assertEquals(\"ne1 throwable count\", 1, ne1.getThrowableCount());\n+\n+        Nestable ne2 = getNestable(\"ne2\");\n+        assertEquals(\"ne2 throwable count\", 1, ne2.getThrowableCount());\n+        \n+        Nestable ne3 = getNestable(getThrowable(\"ne3 exception\"));\n+        assertEquals(\"ne3 throwable count\", 2, ne3.getThrowableCount());\n+        \n+        Nestable ne4 = getNestable(\"ne4\", getThrowable(\"ne4 exception\"));\n+        assertEquals(\"ne4 throwable count\", 2, ne4.getThrowableCount());\n+        \n+        Nestable ne5 = getNestable(\"ne5\", (Throwable) null);\n+        assertEquals(\"ne 5 throwable count\", 1, ne5.getThrowableCount());\n+        \n+        Nestable ne6 = getNestable(null, getThrowable(\"ne6 exception\"));\n+        assertEquals(\"ne 6 throwable count\", 2, ne6.getThrowableCount());\n+        \n+        Nestable ne7 = getNestable(\"ne7o\", getNestable(\"ne7i\", getThrowable(\"ne7 exception\")));\n+        assertEquals(\"ne 7 throwable count\", 3, ne7.getThrowableCount());\n+\n+        Nestable ne8 = getNestable(\"level 1\", getNestable(\"level 2\", getNestable(getNestable(\"level 4\", getThrowable(\"level 5\")))));\n+        assertEquals(\"ne 8 throwable count\", 5, ne8.getThrowableCount());\n+    }\n+    \n+    /**\n+     * Tests the getMessage() operation.\n+     */\n+    public void testGetMessage()\n+    {\n+        Nestable ne1 = getNestable();\n+        assertNull(\"nestable exception() message is null\", ne1.getMessage()); \n+\n+        Nestable ne2 = getNestable(\"ne2\");\n+        assertNotNull(\"nestable exception(\\\"ne2\\\") message is not null\", ne2.getMessage());\n+        assertTrue(\"nestable exception(\\\"ne2\\\") message == ne2\", ne2.getMessage().equals(\"ne2\"));\n+        \n+        Nestable ne3 = getNestable(getThrowable(\"ne3 exception\"));\n+        assertNotNull(\"nestable exception(Throwable(\\\"ne3 exception\\\") message is not null\",\n+            ne3.getMessage()); \n+        assertTrue(\"nestable exception(Throwable(\\\"ne3 exception\\\") message == cause message\",\n+            ne3.getMessage().equals(ne3.getCause().getMessage())); \n+        \n+        Nestable ne4 = getNestable(\"ne4\", getThrowable(\"ne4 exception\"));\n+        assertNotNull(\"nestable exception(\\\"ne4\\\", Throwable(\\\"ne4 exception\\\") message is not null\", \n+            ne4.getMessage()); \n+        assertTrue(\"nestable exception(\\\"ne4\\\", Throwable(\\\"ne4 exception\\\") message == ne4: ne4 exception\", \n+            ne4.getMessage().equals(\"ne4: ne4 exception\")); \n+        \n+        Nestable ne5 = getNestable(\"ne5\", (Throwable) null);\n+        assertNotNull(\"nestable exception(\\\"ne5\\\", null) message is not null\", \n+            ne5.getMessage()); \n+        assertTrue(\"nestable exception(\\\"ne5\\\", null) message == ne5\", \n+            ne5.getMessage().equals(\"ne5\")); \n+        \n+        Nestable ne6 = getNestable(null, getThrowable(\"ne6 exception\"));\n+        assertTrue(\"nestable exception(null, Throwable(\\\"ne6 exception\\\") cause == ne6 exception\", \n+            ne6.getMessage().equals(\"ne6 exception\")); \n+        \n+        Nestable ne7 = getNestable(\"ne7o\", getNestable(\"ne7i\", getThrowable(\"ne7 exception\")));\n+        assertTrue(\"nextable exception(\\\"ne7o\\\", getNestable(\\\"ne7i\\\", Throwable(\\\"ne7 exception\\\"))) message is ne7o: ne7i: ne7 exception\",\n+            ne7.getMessage().equals(\"ne7o: ne7i: ne7 exception\"));\n+\n+    }\n+\n+    /**\n+     * Tests the getMessage(int) operation.\n+     */\n+    public void testGetMessageI()\n+    {\n+        String[] msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        Nestable ne = getNestable(msgs[0], getNestable(msgs[1], getNestable(getNestable(msgs[3], getThrowable(msgs[4])))));\n+        for(int i = 0; i < msgs.length; i++)\n+        {\n+            assertEquals(\"message \" + i, msgs[i], ne.getMessage(i));\n+        }\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            String msg = ne.getMessage(-1);\n+            fail(\"getMessage(-1) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioode)\n+        {\n+        }\n+        try\n+        {\n+            String msg = ne.getMessage(msgs.length + 100);\n+            fail(\"getMessage(999) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioode)\n+        {\n+        }\n+    }\n+\n+    /**\n+     * Tests the getMessages() operation.\n+     */\n+    public void testGetMessages()\n+    {\n+        String[] msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        Nestable ne = getNestable(msgs[0], getNestable(msgs[1], getNestable(getNestable(msgs[3], getThrowable(msgs[4])))));\n+        String[] nMsgs = ne.getMessages();\n+        assertEquals(\"messages length\", msgs.length, nMsgs.length);\n+        for(int i = 0; i < nMsgs.length; i++)\n+        {\n+            assertEquals(\"message \" + i, msgs[i], nMsgs[i]);\n+        }\n+    }\n+\n+    /**\n+     * Tests the getThrowable(int) operation.\n+     */\n+    public void testGetThrowableI()\n+    {\n+        Nestable n = null;\n+        String msgs[] = null;\n+        Class[] throwables = null;\n+        \n+        msgs = new String[2];\n+        msgs[0] = null;\n+        msgs[1] = \"level 2\";\n+        throwables = new Class[2];\n+        throwables[0] = getTester1Class();\n+        throwables[1] = getThrowableClass();\n+        n = new NestableExceptionTester1(getThrowable(msgs[1]));\n+        doNestableExceptionGetThrowableI(n, throwables, msgs);\n+ \n+        msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        throwables = new Class[5];\n+        throwables[0] = getTester1Class();\n+        throwables[1] = getTester2Class();\n+        throwables[2] = getTester1Class();\n+        throwables[3] = getTester2Class();\n+        throwables[4] = getThrowableClass();        \n+        n = getTester1(msgs[0], getTester2(msgs[1], getTester1(getTester2(msgs[3], getThrowable(msgs[4])))));\n+        doNestableExceptionGetThrowableI(n, throwables, msgs);\n+    }\n+    \n+    private void doNestableExceptionGetThrowableI(Nestable n, Class[] classes, String[] msgs)\n+    {\n+        Throwable t = null;\n+        String msg = null;\n+\n+        for(int i = 0; i < classes.length; i++)\n+        {\n+            t = n.getThrowable(i);\n+            assertEquals(\"throwable class\", classes[i], t.getClass());\n+            if(Nestable.class.isInstance(t))\n+            {\n+                msg = ((Nestable) t).getMessage(0);\n+            }\n+            else\n+            {\n+                msg = t.getMessage();\n+            }\n+            assertEquals(\"throwable message\", msgs[i], msg);\n+        }\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            t = n.getThrowable(-1);\n+            fail(\"getThrowable(-1) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioobe)\n+        {\n+        }\n+        try\n+        {\n+            t = n.getThrowable(999);\n+            fail(\"getThrowable(999) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioobe)\n+        {\n+        }\n+    }\n+\n+    /**\n+     * Tests the getThrowables() operation.\n+     */\n+    public void testGetThrowables()\n+    {\n+        Nestable n = null;\n+        String msgs[] = null;\n+        Class[] throwables = null;\n+        \n+        msgs = new String[2];\n+        msgs[0] = null;\n+        msgs[1] = \"level 2\";\n+        throwables = new Class[2];\n+//        throwables[0] = NestableExceptionTester1.class;\n+        throwables[0] = getTester1Class();\n+        throwables[1] = getThrowableClass();\n+        n = getTester1(getThrowable(msgs[1]));\n+        doNestableExceptionGetThrowables(n, throwables, msgs);\n+ \n+        msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        throwables = new Class[5];\n+        throwables[0] = getTester1Class();\n+        throwables[1] = getTester2Class();\n+        throwables[2] = getTester1Class();\n+        throwables[3] = getTester2Class();\n+        throwables[4] = getThrowableClass();\n+        n = getTester1(msgs[0], getTester2(msgs[1], getTester1(getTester2(msgs[3], getThrowable(msgs[4])))));\n+        doNestableExceptionGetThrowables(n, throwables, msgs);\n+    }\n+    \n+    private void doNestableExceptionGetThrowables(Nestable n, Class[] classes, String[] msgs)\n+    {\n+        String msg = null;\n+\n+        Throwable throwables[] = n.getThrowables();\n+        assertEquals(\"throwables length\", classes.length, throwables.length);\n+        for(int i = 0; i < classes.length; i++)\n+        {\n+            assertEquals(\"throwable class\", classes[i], throwables[i].getClass());\n+            Throwable t = throwables[i];\n+            if(Nestable.class.isInstance(t))\n+            {\n+                msg = ((Nestable) t).getMessage(0);\n+            }\n+            else\n+            {\n+                msg = t.getMessage();\n+            }\n+            assertEquals(\"throwable message\", msgs[i], msg);\n+        }\n+    }\n+\n+    /**\n+     * Tests the indexOfThrowable() operation.\n+     */\n+    public void testIndexOfThrowable()\n+    {\n+        Nestable n = null;\n+        String msgs[] = null;\n+        Class[] throwables = null;\n+        \n+        msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        throwables = new Class[5];\n+        throwables[0] = getTester1Class();\n+        throwables[1] = getTester2Class();\n+        throwables[2] = getTester1Class();\n+        throwables[3] = getTester2Class();\n+        throwables[4] = getThrowableClass();\n+        int[] indexes = {0, 1, 0, 1, 4};\n+        n = getTester1(msgs[0], getTester2(msgs[1], getTester1(getTester2(msgs[3], getThrowable(msgs[4])))));\n+        for(int i = 0; i < throwables.length; i++)\n+        {\n+            doNestableExceptionIndexOfThrowable(n, throwables[i], indexes[i], msgs[indexes[i]]);\n+        }\n+        doNestableExceptionIndexOfThrowable(n, java.util.Date.class, -1, null);\n+    }\n+    \n+    private void doNestableExceptionIndexOfThrowable(Nestable n, Class type, int expectedIndex, String expectedMsg)\n+    {\n+        Throwable t = null;\n+        \n+        int index = n.indexOfThrowable(type);\n+        assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n+        if(expectedIndex > -1)\n+        {\n+            t = n.getThrowable(index);\n+            if(expectedMsg != null)\n+            {\n+                String msg = null;\n+                if(Nestable.class.isInstance(t))\n+                {\n+                    msg = ((Nestable) t).getMessage(0);\n+                }\n+                else\n+                {\n+                    msg = t.getMessage();\n+                }\n+                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Tests the indexOfThrowable(int) operation.\n+     */\n+    public void testIndexOfThrowableI()\n+    {\n+        Nestable n = null;\n+        String msgs[] = null;\n+        Class[] throwables = null;\n+        \n+        msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        throwables = new Class[5];\n+        throwables[0] = getTester1Class();\n+        throwables[1] = getTester2Class();\n+        throwables[2] = getTester1Class();\n+        throwables[3] = getTester2Class();\n+        throwables[4] = getThrowableClass();\n+        int[] indexes = {0, 1, 0, 1, 4};\n+        n = getTester1(msgs[0], getTester2(msgs[1], getTester1(getTester2(msgs[3], getThrowable(msgs[4])))));\n+        for(int i = 0; i < throwables.length; i++)\n+        {\n+            doNestableExceptionIndexOfThrowableI(n, throwables[i], 0, indexes[i], msgs[indexes[i]]);\n+        }\n+        doNestableExceptionIndexOfThrowableI(n, getTester2Class(), 2, 3, msgs[3]);\n+        doNestableExceptionIndexOfThrowableI(n, getTester1Class(), 1, 2, msgs[2]);\n+        doNestableExceptionIndexOfThrowableI(n, getTester1Class(), 3, -1, null);\n+        doNestableExceptionIndexOfThrowableI(n, getTester1Class(), 4, -1, null);\n+        doNestableExceptionIndexOfThrowableI(n, getThrowableClass(), 2, 4, msgs[4]);\n+        doNestableExceptionIndexOfThrowableI(n, java.util.Date.class, 0, -1, null);\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            int index = n.indexOfThrowable(getTester1Class(), -1);\n+            fail(\"method should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException iooob)\n+        {\n+        }\n+        try\n+        {\n+            int index = n.indexOfThrowable(getTester1Class(), 5);\n+            fail(\"method should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException iooob)\n+        {\n+        }\n+        \n+    }\n+\n+    private void doNestableExceptionIndexOfThrowableI(Nestable n, Class type, int fromIndex, int expectedIndex, String expectedMsg)\n+    {\n+        Throwable t = null;\n+        \n+        int index = n.indexOfThrowable(type, fromIndex);\n+        assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n+        if(expectedIndex > -1)\n+        {\n+            t = n.getThrowable(index);\n+            if(expectedMsg != null)\n+            {\n+                String msg = null;\n+                if(Nestable.class.isInstance(t))\n+                {\n+                    msg = ((Nestable) t).getMessage(0);\n+                }\n+                else\n+                {\n+                    msg = t.getMessage();\n+                }\n+                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n+            }\n+        }\n+        \n+    }\n+\n+    /**\n+     * Tests the printPartialStackTrace() operation.\n+     */\n+    public void testPrintPartialStackTrace()\n+    {\n+        Nestable ne9 = getNestable(\"ne9\", getThrowable(\"ne9 exception\"));\n+        ByteArrayOutputStream baos2 = new ByteArrayOutputStream();\n+        PrintStream ps2 = new PrintStream(baos2);\n+        PrintWriter pw2 = new PrintWriter(ps2, true);\n+        ne9.printPartialStackTrace(pw2);\n+        String stack2 = baos2.toString();\n+        assertTrue(\"stack trace startsWith == org.apache.commons.lang.exception.NestableException: ne9: ne9 exception\",\n+            stack2.startsWith(\"org.apache.commons.lang.exception.NestableException: ne9: ne9 exception\"));\n+        assertEquals(\"stack trace indexOf rethrown == -1\",\n+            stack2.indexOf(\"rethrown\"), -1);\n+    }\n+\n+    /**\n+     * Tests the printStackTrace() operation.\n+     */\n+    public void testPrintStackTrace()\n+    {\n+        Nestable ne8 = getNestable(\"ne8\", getThrowable(\"ne8 exception\"));\n+        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();\n+        PrintStream ps1 = new PrintStream(baos1);\n+        PrintWriter pw1 = new PrintWriter(ps1, true);\n+        ne8.printStackTrace(ps1);\n+        String stack1 = baos1.toString();\n+        assertTrue(\"stack trace startsWith == java.lang.Exception: ne8 exception\",\n+            stack1.startsWith(\"java.lang.Exception: ne8 exception\")); \n+        assertTrue(\"stack trace indexOf org.apache.commons.lang.exception.NestableException: ne8: ne8 exception > -1\",\n+            stack1.indexOf(\"org.apache.commons.lang.exception.NestableException: ne8: ne8 exception\") > -1); \n+    }\n+\n+    /**\n+     * Returns an instance of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @return the instance\n+     */\n+    public abstract Nestable getNestable();\n+    \n+    /**\n+     * Returns an instance of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @param n <code>Nestable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getNestable(Nestable n);\n+    \n+    /**\n+     * Returns an instance of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getNestable(String msg);\n+    \n+    /**\n+     * Returns an instance of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @param n <code>Nestable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getNestable(String msg, Nestable n);\n+    \n+    /**\n+     * Returns an instance of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @param t <code>Throwable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getNestable(String msg, Throwable t);\n+    \n+    /**\n+     * Returns an instance of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @param t <code>Throwable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getNestable(Throwable t);\n+    \n+    /**\n+     * Returns an instance of a <code>Throwable</code> to be used in\n+     * constructing instances of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Throwable getThrowable(String msg);\n+\n+    /**\n+     * Returns an instance of one tester <code>Nestable</code> implementation.\n+     *\n+     * @param n <code>Nestable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getTester1(Nestable n);\n+    \n+    /**\n+     * Returns an instance of one tester <code>Nestable</code> implementation.\n+     *\n+     * @param t <code>Throwable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getTester1(Throwable t);\n+    \n+    /**\n+     * Returns an instance of one tester <code>Nestable</code> implementation.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @param n <code>Nestable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getTester1(String msg, Nestable n);\n+    \n+    /**\n+     * Returns an instance of one tester <code>Nestable</code> implementation.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @param t <code>Throwable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getTester1(String msg, Throwable t);\n+    \n+    /**\n+     * Returns an instance of a second tester <code>Nestable</code>\n+     * implementation.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @param n <code>Nestable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getTester2(String msg, Nestable n);\n+    \n+    /**\n+     * Returns an instance of a second tester <code>Nestable</code>\n+     * implementation.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @param t <code>Throwable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getTester2(String msg, Throwable t);\n+\n+    /**\n+     * Returns the class of the first tester <code>Nestable</code>\n+     * implementation.\n+     *\n+     * @return the class\n+     */\n+    public abstract Class getTester1Class();\n+    \n+    /**\n+     * Returns the class of the second tester <code>Nestable</code>\n+     * implementation.\n+     *\n+     * @return the class\n+     */\n+    public abstract Class getTester2Class();\n+\n+    /**\n+     * Returns the class of the <code>Throwable</code> used in constructing\n+     * instances of the <code>Nestable</code> implementation being tested.\n+     *\n+     * @return the class\n+     */\n+    public abstract Class getThrowableClass();\n+}\n+", "timestamp": 1031768170, "metainfo": ""}