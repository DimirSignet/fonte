{"sha": "48ef0f31c287f79498cfdad2e01bdb2c37db3615", "log": "PR: http://issues.apache.org/bugzilla/show_bug.cgi?id=25849 Added to SystemUtils: getJavaHome, getJavaIoTmpDir, getUserDir, getUserHome. Sorted source (Eclispe).   ", "commit": "\n--- a/src/test/org/apache/commons/lang/SystemUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/SystemUtilsTest.java\n  */\n package org.apache.commons.lang;\n \n+import java.io.File;\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n \n+import junit.framework.Assert;\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n  *\n  * @author Stephen Colebourne\n  * @author Tetsuya Kaneuchi\n- * @version $Id: SystemUtilsTest.java,v 1.7 2003/10/07 20:59:46 scolebourne Exp $\n+ * @author Gary D. Gregory\n+ * @version $Id: SystemUtilsTest.java,v 1.8 2003/12/31 22:01:06 ggregory Exp $\n  */\n public class SystemUtilsTest extends TestCase {\n-\n-    public SystemUtilsTest(String name) {\n-        super(name);\n-    }\n \n     public static void main(String[] args) {\n         TestRunner.run(suite());\n         suite.setName(\"SystemUtils Tests\");\n         return suite;\n     }\n+    \n+    //-----------------------------------------------------------------------\n+    // COPIED FROM SystemUtils\n+    //-----------------------------------------------------------------------\n+    private String JAVA_VERSION;\n+    private String OS_NAME;\n+    private String OS_VERSION;\n+\n+    public SystemUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * <p>Get the Java version number as a <code>float</code>.</p>\n+     *\n+     * <p>Example output:</p>\n+     * <ul>\n+     *  <li><code>1.2f</code> for JDK 1.2\n+     *  <li><code>1.31f</code> for JDK 1.3.1\n+     * </ul>\n+     * \n+     * <p>Patch releases are not reported.\n+     * Zero is returned if JAVA_VERSION is <code>null</code>.</p>\n+     * \n+     * @return the version, for example 1.31f for JDK 1.3.1\n+     */\n+    private float getJavaVersionAsFloat() {\n+        if (JAVA_VERSION == null) {\n+            return 0f;\n+        }\n+        String str = JAVA_VERSION.substring(0, 3);\n+        if (JAVA_VERSION.length() >= 5) {\n+            str = str + JAVA_VERSION.substring(4, 5);\n+        }\n+        return Float.parseFloat(str);\n+    }\n+    \n+    /**\n+     * <p>Get the Java version number as an <code>int</code>.</p>\n+     *\n+     * <p>Example output:</p>\n+     * <ul>\n+     *  <li><code>120</code> for JDK 1.2\n+     *  <li><code>131</code> for JDK 1.3.1\n+     * </ul>\n+     * \n+     * <p>Patch releases are not reported.\n+     * Zero is returned if JAVA_VERSION is <code>null</code>.</p>\n+     * \n+     * @return the version, for example 131 for JDK 1.3.1\n+     */\n+    private int getJavaVersionAsInt() {\n+        if (JAVA_VERSION == null) {\n+            return 0;\n+        }\n+        String str = JAVA_VERSION.substring(0, 1);\n+        str = str + JAVA_VERSION.substring(2, 3);\n+        if (JAVA_VERSION.length() >= 5) {\n+            str = str + JAVA_VERSION.substring(4, 5);\n+        } else {\n+            str = str + \"0\";\n+        }\n+        return Integer.parseInt(str);\n+    }\n+    \n+    /**\n+     * Decides if the java version matches.\n+     * \n+     * @param versionPrefix  the prefix for the java version\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private boolean getJavaVersionMatches(String versionPrefix) {\n+        if (JAVA_VERSION == null) {\n+            return false;\n+        }\n+        return JAVA_VERSION.startsWith(versionPrefix);\n+    }    \n+\n+    /**\n+     * Decides if the operating system matches.\n+     * \n+     * @param osNamePrefix  the prefix for the os name\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private boolean getOSMatches(String osNamePrefix) {\n+        if (OS_NAME == null) {\n+            return false;\n+        }\n+        return OS_NAME.startsWith(osNamePrefix);\n+    }    \n+\n+    /**\n+     * Decides if the operating system matches.\n+     * \n+     * @param osNamePrefix  the prefix for the os name\n+     * @param osVersionPrefix  the prefix for the version\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n+        if (OS_NAME == null || OS_VERSION == null) {\n+            return false;\n+        }\n+        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n+    }    \n \n     protected void setUp() throws Exception {\n         super.setUp();\n         assertEquals(false, Modifier.isFinal(SystemUtils.class.getModifiers()));\n     }\n     \n-    //-----------------------------------------------------------------------\n-    // COPIED FROM SystemUtils\n-    //-----------------------------------------------------------------------\n-    private String JAVA_VERSION;\n-    private String OS_NAME;\n-    private String OS_VERSION;\n-    \n-    /**\n-     * Decides if the java version matches.\n-     * \n-     * @param versionPrefix  the prefix for the java version\n-     * @return true if matches, or false if not or can't determine\n-     */\n-    private boolean getJavaVersionMatches(String versionPrefix) {\n-        if (JAVA_VERSION == null) {\n-            return false;\n-        }\n-        return JAVA_VERSION.startsWith(versionPrefix);\n-    }    \n-\n-    /**\n-     * <p>Get the Java version number as a <code>float</code>.</p>\n-     *\n-     * <p>Example output:</p>\n-     * <ul>\n-     *  <li><code>1.2f</code> for JDK 1.2\n-     *  <li><code>1.31f</code> for JDK 1.3.1\n-     * </ul>\n-     * \n-     * <p>Patch releases are not reported.\n-     * Zero is returned if JAVA_VERSION is <code>null</code>.</p>\n-     * \n-     * @return the version, for example 1.31f for JDK 1.3.1\n-     */\n-    private float getJavaVersionAsFloat() {\n-        if (JAVA_VERSION == null) {\n-            return 0f;\n-        }\n-        String str = JAVA_VERSION.substring(0, 3);\n-        if (JAVA_VERSION.length() >= 5) {\n-            str = str + JAVA_VERSION.substring(4, 5);\n-        }\n-        return Float.parseFloat(str);\n-    }\n-    \n-    /**\n-     * <p>Get the Java version number as an <code>int</code>.</p>\n-     *\n-     * <p>Example output:</p>\n-     * <ul>\n-     *  <li><code>120</code> for JDK 1.2\n-     *  <li><code>131</code> for JDK 1.3.1\n-     * </ul>\n-     * \n-     * <p>Patch releases are not reported.\n-     * Zero is returned if JAVA_VERSION is <code>null</code>.</p>\n-     * \n-     * @return the version, for example 131 for JDK 1.3.1\n-     */\n-    private int getJavaVersionAsInt() {\n-        if (JAVA_VERSION == null) {\n-            return 0;\n-        }\n-        String str = JAVA_VERSION.substring(0, 1);\n-        str = str + JAVA_VERSION.substring(2, 3);\n-        if (JAVA_VERSION.length() >= 5) {\n-            str = str + JAVA_VERSION.substring(4, 5);\n+    /**\n+     * Assums no security manager exists.\n+     */\n+    public void testGetJavaHome() {\n+        File dir = SystemUtils.getJavaHome();\n+        Assert.assertNotNull(dir);\n+        Assert.assertTrue(dir.exists());\n+    }\n+\n+    /**\n+     * Assums no security manager exists.\n+     */\n+    public void testGetJavaIoTmpDir() {\n+        File dir = SystemUtils.getJavaIoTmpDir();\n+        Assert.assertNotNull(dir);\n+        Assert.assertTrue(dir.exists());\n+    }\n+\n+    /**\n+     * Assums no security manager exists.\n+     */\n+    public void testGetUserDir() {\n+        File dir = SystemUtils.getUserDir();\n+        Assert.assertNotNull(dir);\n+        Assert.assertTrue(dir.exists());\n+    }\n+\n+    /**\n+     * Assums no security manager exists.\n+     */\n+    public void testGetUserHome() {\n+        File dir = SystemUtils.getUserHome();\n+        Assert.assertNotNull(dir);\n+        Assert.assertTrue(dir.exists());\n+    }\n+\n+    public void testIS_JAVA() {\n+        String javaVersion = System.getProperty(\"java.version\");\n+        if (javaVersion == null) {\n+            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n+            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n+        } else if (javaVersion.startsWith(\"1.1\")) {\n+            assertTrue(SystemUtils.IS_JAVA_1_1);\n+        } else if (javaVersion.startsWith(\"1.2\")) {\n+            assertTrue(SystemUtils.IS_JAVA_1_2);\n+        } else if (javaVersion.startsWith(\"1.3\")) {\n+            assertTrue(SystemUtils.IS_JAVA_1_3);\n+        } else if (javaVersion.startsWith(\"1.4\")) {\n+            assertTrue(SystemUtils.IS_JAVA_1_4);\n+        } else if (javaVersion.startsWith(\"1.5\")) {\n+            assertTrue(SystemUtils.IS_JAVA_1_5);\n         } else {\n-            str = str + \"0\";\n-        }\n-        return Integer.parseInt(str);\n-    }\n-\n-    /**\n-     * Decides if the operating system matches.\n-     * \n-     * @param osNamePrefix  the prefix for the os name\n-     * @return true if matches, or false if not or can't determine\n-     */\n-    private boolean getOSMatches(String osNamePrefix) {\n-        if (OS_NAME == null) {\n-            return false;\n-        }\n-        return OS_NAME.startsWith(osNamePrefix);\n-    }    \n-\n-    /**\n-     * Decides if the operating system matches.\n-     * \n-     * @param osNamePrefix  the prefix for the os name\n-     * @param osVersionPrefix  the prefix for the version\n-     * @return true if matches, or false if not or can't determine\n-     */\n-    private boolean getOSMatches(String osNamePrefix, String osVersionPrefix) {\n-        if (OS_NAME == null || OS_VERSION == null) {\n-            return false;\n-        }\n-        return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n-    }    \n+            System.out.println(\"Can't test IS_JAVA value\");\n+        }\n+    }\n+\n+    public void testIS_OS() {\n+        String osName = System.getProperty(\"os.name\");\n+        if (osName == null) {\n+            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+            assertEquals(false, SystemUtils.IS_OS_UNIX);\n+            assertEquals(false, SystemUtils.IS_OS_SOLARIS);\n+            assertEquals(false, SystemUtils.IS_OS_LINUX);\n+            assertEquals(false, SystemUtils.IS_OS_MAC_OSX);\n+        } else if (osName.startsWith(\"Windows\")) {\n+            assertEquals(false, SystemUtils.IS_OS_UNIX);\n+            assertEquals(true, SystemUtils.IS_OS_WINDOWS);\n+        } else if (osName.startsWith(\"Solaris\")) {\n+            assertEquals(true, SystemUtils.IS_OS_SOLARIS);\n+            assertEquals(true, SystemUtils.IS_OS_UNIX);\n+            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+        } else if (osName.toLowerCase().startsWith(\"linux\")) {\n+            assertEquals(true, SystemUtils.IS_OS_LINUX);\n+            assertEquals(true, SystemUtils.IS_OS_UNIX);\n+            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+        } else if (osName.startsWith(\"Mac OS X\")) {\n+            assertEquals(true, SystemUtils.IS_OS_MAC_OSX);\n+            assertEquals(true, SystemUtils.IS_OS_UNIX);\n+            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+        } else if (osName.startsWith(\"OS/2\")) {\n+            assertEquals(true, SystemUtils.IS_OS_OS2);\n+            assertEquals(false, SystemUtils.IS_OS_UNIX);\n+            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+        } else if (osName.startsWith(\"SunOS\")) {\n+            assertEquals(true, SystemUtils.IS_OS_SUN_OS);\n+            assertEquals(true, SystemUtils.IS_OS_UNIX);\n+            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+        } else {\n+            System.out.println(\"Can't test IS_OS value\");\n+        }\n+    }\n \n     //-----------------------------------------------------------------------\n     public void testJavaVersion() {\n         assertEquals(SystemUtils.JAVA_VERSION_FLOAT, SystemUtils.getJavaVersion(), 0f);\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testJavaVersionMatches() {\n-        JAVA_VERSION = null;\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.1\";\n-        assertEquals(true, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.2\";\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(true, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.3.0\";\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.3.1\";\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.4.0\";\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.4.1\";\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.5.0\";\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(true, getJavaVersionMatches(\"1.5\"));\n-        JAVA_VERSION = \"1.6.0\";\n-        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n-        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n     }\n    \n     public void testJavaVersionAsFloat() {\n         assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n     }\n     \n+    //-----------------------------------------------------------------------\n+    public void testJavaVersionMatches() {\n+        JAVA_VERSION = null;\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.1\";\n+        assertEquals(true, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.2\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.3.0\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.3.1\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.4.0\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.4.1\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.5.0\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.6.0\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+    }\n+    \n     public void testOSMatches() {\n         OS_NAME = null;\n         assertEquals(false, getOSMatches(\"Windows\"));\n         OS_VERSION = \"4.0\";\n         assertEquals(false, getOSMatches(\"Windows 9\", \"4.1\"));\n     }\n-\n-    public void testIS_OS() {\n-        String osName = System.getProperty(\"os.name\");\n-        if (osName == null) {\n-            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n-            assertEquals(false, SystemUtils.IS_OS_UNIX);\n-            assertEquals(false, SystemUtils.IS_OS_SOLARIS);\n-            assertEquals(false, SystemUtils.IS_OS_LINUX);\n-            assertEquals(false, SystemUtils.IS_OS_MAC_OSX);\n-        } else if (osName.startsWith(\"Windows\")) {\n-            assertEquals(false, SystemUtils.IS_OS_UNIX);\n-            assertEquals(true, SystemUtils.IS_OS_WINDOWS);\n-        } else if (osName.startsWith(\"Solaris\")) {\n-            assertEquals(true, SystemUtils.IS_OS_SOLARIS);\n-            assertEquals(true, SystemUtils.IS_OS_UNIX);\n-            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n-        } else if (osName.toLowerCase().startsWith(\"linux\")) {\n-            assertEquals(true, SystemUtils.IS_OS_LINUX);\n-            assertEquals(true, SystemUtils.IS_OS_UNIX);\n-            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n-        } else if (osName.startsWith(\"Mac OS X\")) {\n-            assertEquals(true, SystemUtils.IS_OS_MAC_OSX);\n-            assertEquals(true, SystemUtils.IS_OS_UNIX);\n-            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n-        } else if (osName.startsWith(\"OS/2\")) {\n-            assertEquals(true, SystemUtils.IS_OS_OS2);\n-            assertEquals(false, SystemUtils.IS_OS_UNIX);\n-            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n-        } else if (osName.startsWith(\"SunOS\")) {\n-            assertEquals(true, SystemUtils.IS_OS_SUN_OS);\n-            assertEquals(true, SystemUtils.IS_OS_UNIX);\n-            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n-        } else {\n-            System.out.println(\"Can't test IS_OS value\");\n-        }\n-    }\n-\n-    public void testIS_JAVA() {\n-        String javaVersion = System.getProperty(\"java.version\");\n-        if (javaVersion == null) {\n-            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n-        } else if (javaVersion.startsWith(\"1.1\")) {\n-            assertTrue(SystemUtils.IS_JAVA_1_1);\n-        } else if (javaVersion.startsWith(\"1.2\")) {\n-            assertTrue(SystemUtils.IS_JAVA_1_2);\n-        } else if (javaVersion.startsWith(\"1.3\")) {\n-            assertTrue(SystemUtils.IS_JAVA_1_3);\n-        } else if (javaVersion.startsWith(\"1.4\")) {\n-            assertTrue(SystemUtils.IS_JAVA_1_4);\n-        } else if (javaVersion.startsWith(\"1.5\")) {\n-            assertTrue(SystemUtils.IS_JAVA_1_5);\n-        } else {\n-            System.out.println(\"Can't test IS_JAVA value\");\n-        }\n-    }\n-    \n }", "timestamp": 1072908066, "metainfo": ""}