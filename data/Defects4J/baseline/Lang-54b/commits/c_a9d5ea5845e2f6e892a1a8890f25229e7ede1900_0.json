{"sha": "a9d5ea5845e2f6e892a1a8890f25229e7ede1900", "log": "Removed stackTrace and getStackTrace. ExceptionUtils has getStackTrace and stackTrace is only slightly different in that it uses a ByteArrayOutputStream and not a StringWriter. A change since the beta, but not allowing obvious ones to happen will be silly.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ed@apache.org\">Ed Korthof</a>\n  * @author <a href=\"mailto:rand_mcneely@yahoo.com>Rand McNeely</a>\n  * @author <a href=\"mailto:scolebourne@joda.org>Stephen Colebourne</a>\n- * @version $Id: StringUtils.java,v 1.9 2002/08/31 11:07:08 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.10 2002/08/31 19:05:32 bayard Exp $\n  */\n public class StringUtils {\n \n \n     // Misc\n     //--------------------------------------------------------------------------\n-    \n-    /**\n-     * Get the stack trace from a Throwable as a String.\n-     * <p>\n-     * This method uses printStackTrace() internally to obtain the stack trace.\n-     *\n-     * @see java.lang.Throwable#printStackTrace()\n-     * @param throwable  the throwable to extract a stack trace from\n-     * @return the extracted stack trace, or null if an error occurs\n-     */\n-    public static String stackTrace(Throwable throwable) {\n-        String trace = null;\n-        try {\n-            // And show the Error Screen.\n-            ByteArrayOutputStream buf = new ByteArrayOutputStream();\n-            throwable.printStackTrace(new PrintWriter(buf, true));\n-            trace = buf.toString();\n-            \n-        } catch (Exception ex) {\n-            // ignore\n-        }\n-        return trace;\n-    }\n \n     /**\n      * Find the Levenshtein distance between two strings.\n         return d[n][m];\n     }\n \n-    /**\n-     * Convenient method to retrieve the full stacktrace from a given exception.\n-     * \n-     * @param t the exception to get the stacktrace from.\n-     * @return the stacktrace from the given exception.\n-     */\n-    public static String getStackTrace(Throwable t) {\n-        StringWriter sw = new StringWriter();\n-        PrintWriter pw = new PrintWriter(sw, true);\n-        t.printStackTrace(pw);\n-        pw.flush();\n-        pw.close();\n-        return sw.toString();\n-    }   \n-\n-// these are not really of use in the Java world. Only if you're a C afficionado\n-//    public static String sprintf(String format, Object[] list);\n-//    public static Object[] sscanf(String str, String format);\n-//    public static String pack(String[] strs, String format);\n-//    public static String[] unpack(String str, String format);\n-\n }\n \n ", "timestamp": 1030820732, "metainfo": ""}