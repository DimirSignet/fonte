{"sha": "f9733cf0d379b87cd22574a32865c90ae8d50152", "log": "Modify the meta-maps from file-length to line-column to be consistent with the maps themselves.  R=acleung,jschorr DELTA=94  (32 added, 30 deleted, 32 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1964   ", "commit": "\n--- a/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java\n \n   private boolean validate = false;\n \n-  private final static int UNMAPPED = -1;\n+  private static final int UNMAPPED = -1;\n \n   /**\n    * A pre-order traversal ordered list of mappings stored in this map.\n   /**\n    * Writes the source name map to 'out'.\n    */\n-  private void addMap(Appendable out, Map<String,Integer> map)\n+  private void addMap(Appendable out, Map<String, Integer> map)\n       throws IOException {\n     int i = 0;\n     for (Entry<String, Integer> entry : map.entrySet()) {\n   // Source map field helpers.\n \n   private static void appendFirstField(\n-      Appendable out, String name, String value)\n+      Appendable out, String name, CharSequence value)\n       throws IOException {\n     out.append(\"\\\"\");\n     out.append(name);\n     out.append(value);\n   }\n \n-  private static void appendField(Appendable out, String name, String value)\n+  private static void appendField(\n+      Appendable out, String name, CharSequence value)\n       throws IOException {\n     out.append(\",\\n\");\n     out.append(\"\\\"\");\n \n       for (int i = line; i <= nextLine; i++) {\n         if (i == nextLine) {\n-          closeEntry(id, nextCol-col);\n+          closeEntry(id, nextCol - col);\n           break;\n         }\n \n       // mapping id length will exceed 64 base64 characters in length so\n       // additional \"!\" don't signal additional id length characters.\n       if (reps > 16 || relativeIdLength > 4) {\n-        String repsString = valueToBase64(reps -1, 1);\n+        String repsString = valueToBase64(reps - 1, 1);\n         for (int i = 0; i < repsString.length(); i++) {\n           // TODO(johnlenz): update this to whatever is agreed to.\n           out.append('!');\n         }\n-        String sizeId = valueToBase64(relativeIdString.length() -1, 1);\n+        String sizeId = valueToBase64(relativeIdString.length() - 1, 1);\n \n         out.append(sizeId);\n         out.append(repsString);\n       } else {\n-        int prefix = ((reps -1) << 2) + (relativeIdString.length() -1);\n+        int prefix = ((reps - 1) << 2) + (relativeIdString.length() - 1);\n         Preconditions.checkState(prefix < 64 && prefix >= 0,\n             \"prefix (%s) reps(%s) map id size(%s)\",\n             prefix, reps, relativeIdString.length());\n      * represented as a two-complement value.\n      */\n     public static int getRelativeMappingId(int id, int idLength, int lastId) {\n-      int base = 1 << (idLength *6);\n+      int base = 1 << (idLength * 6);\n       int relativeId = id - lastId;\n       return (relativeId < 0) ? relativeId + base : relativeId;\n     }\n     public static int getRelativeMappingIdLength(int rawId, int lastId) {\n       Preconditions.checkState(rawId >= 0 || rawId == UNMAPPED);\n       int relativeId = rawId - lastId;\n-      int id = (relativeId < 0 ? Math.abs(relativeId) -1 : relativeId) << 1;\n+      int id = (relativeId < 0 ? Math.abs(relativeId) - 1 : relativeId) << 1;\n       int digits = 1;\n       int base = 64;\n       while (id >= base) {\n \n   @Override\n   public void appendIndexMapTo(\n-      Appendable out, String name, List<SourceMapSection> appSections)\n-      throws IOException {\n-    // Add the header fields.\n-    out.append(\"{\\n\");\n-    appendFirstField(out, \"version\", \"2\");\n-    appendField(out, \"file\", escapeString(name));\n-\n-    // Add the line character maps.\n-    appendFieldStart(out, \"sections\");\n-    out.append(\"[\\n\");\n-    boolean first = true;\n-    Long offset = new Long(0);\n-    for (SourceMapSection section : appSections) {\n-      if (first) {\n-        first = false;\n-      } else {\n-        out.append(\",\\n\");\n-      }\n-      out.append(\"{\\n\");\n-      appendFirstField(out, \"offset\", offset.toString());\n-      appendField(out, \"file\", escapeString(section.getSectionUrl()));\n-      out.append(\"\\n}\");\n-\n-      offset += section.getLength();\n-    }\n-\n-    out.append(\"\\n]\");\n-    appendFieldEnd(out);\n-\n-    out.append(\"\\n}\\n\");\n+      Appendable out, String name, List<SourceMapSection> appSections) {\n+    throw new UnsupportedOperationException();\n   }\n }\n--- a/src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java\n  */\n public class SourceMapGeneratorV3 implements SourceMapGenerator {\n \n-  private final static int UNMAPPED = -1;\n+  private static final int UNMAPPED = -1;\n \n \n   /**\n   // Source map field helpers.\n \n   private static void appendFirstField(\n-      Appendable out, String name, String value)\n+      Appendable out, String name, CharSequence value)\n       throws IOException {\n     out.append(\"\\\"\");\n     out.append(name);\n     out.append(value);\n   }\n \n-  private static void appendField(Appendable out, String name, String value)\n+  private static void appendField(\n+      Appendable out, String name, CharSequence value)\n       throws IOException {\n     out.append(\",\\n\");\n     out.append(\"\\\"\");\n     appendFieldStart(out, \"sections\");\n     out.append(\"[\\n\");\n     boolean first = true;\n-    Long offset = new Long(0);\n+    int line = 0, column = 0;\n     for (SourceMapSection section : sections) {\n       if (first) {\n         first = false;\n         out.append(\",\\n\");\n       }\n       out.append(\"{\\n\");\n-      appendFirstField(out, \"offset\", offset.toString());\n+      appendFirstField(out, \"offset\",\n+          offsetValue(section.getLine(), section.getColumn()));\n       appendField(out, \"url\", escapeString(section.getSectionUrl()));\n       out.append(\"\\n}\");\n-\n-      offset += section.getLength();\n     }\n \n     out.append(\"\\n]\");\n     appendFieldEnd(out);\n \n     out.append(\"\\n}\\n\");\n+  }\n+\n+  private CharSequence offsetValue(int line, int column) throws IOException {\n+    StringBuilder out = new StringBuilder();\n+    out.append(\"{\\n\");\n+    appendFirstField(out, \"line\", String.valueOf(line));\n+    appendField(out, \"column\", String.valueOf(column));\n+    out.append(\"\\n}\");\n+    return out;\n   }\n \n   private int getSourceId(String sourceName) {\n--- a/src/com/google/debugging/sourcemap/SourceMapSection.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapSection.java\n    * source file such as when multiple files are concatenated together.\n    */\n   private final String sectionUrl;\n-  private final long representedLength;\n+  private final int line;\n+  private final int column;\n \n   /**\n    * @param sectionUrl The url for the partial sourcemap\n-   * @param length The number of character represented by the source\n-   * map section.\n+   * @param line The number of lines into the file where the represented section\n+   *    starts.\n+   * @param column The number of characters into the line where the represented\n+   *    section starts.\n    */\n-  public SourceMapSection(String sectionUrl, long length) {\n+  public SourceMapSection(String sectionUrl, int line, int column) {\n     this.sectionUrl = sectionUrl;\n-    this.representedLength = length;\n+    this.line = line;\n+    this.column = column;\n   }\n \n   /**\n-   * @return the name\n+   * @return the name of the map\n    */\n   public String getSectionUrl() {\n     return sectionUrl;\n   }\n \n   /**\n-   * @return the length\n+   * @return the starting line for this section\n    */\n-  public long getLength() {\n-    return representedLength;\n+  public int getLine() {\n+    return line;\n+  }\n+\n+  /**\n+   * @return the column for this section\n+   */\n+  public int getColumn() {\n+    return column;\n   }\n }", "timestamp": 1305924040, "metainfo": ""}