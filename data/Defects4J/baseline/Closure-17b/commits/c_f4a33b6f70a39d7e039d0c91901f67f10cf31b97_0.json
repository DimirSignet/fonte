{"sha": "f4a33b6f70a39d7e039d0c91901f67f10cf31b97", "log": "Emit a warning if a block comment looks like it should be a jsdoc comment fixes issue 332  R=acleung DELTA=38  (33 added, 2 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1450   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n \n package com.google.javascript.jscomp.parsing;\n \n-import static com.google.javascript.jscomp.mozilla.rhino.Token.CommentType.JSDOC;\n-\n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;\n+import com.google.javascript.jscomp.mozilla.rhino.Token.CommentType;\n import com.google.javascript.jscomp.mozilla.rhino.ast.ArrayLiteral;\n import com.google.javascript.jscomp.mozilla.rhino.ast.Assignment;\n import com.google.javascript.jscomp.mozilla.rhino.ast.AstNode;\n  */\n public class IRFactory {\n \n+  static final String SUSPICIOUS_COMMENT_WARNING =\n+      \"Non-JSDoc comment has annotations. \" +\n+      \"Did you mean to start it with '/**'?\";\n+\n   private final String sourceString;\n   private final String sourceName;\n   private final Config config;\n \n     if (node.getComments() != null) {\n       for (Comment comment : node.getComments()) {\n-        if (comment.getCommentType() == JSDOC && !comment.isParsed()) {\n+        if (comment.getCommentType() == CommentType.JSDOC &&\n+            !comment.isParsed()) {\n           irFactory.handlePossibleFileOverviewJsDoc(comment);\n+        } else if (comment.getCommentType() == CommentType.BLOCK) {\n+          irFactory.handleBlockComment(comment);\n         }\n       }\n     }\n       }\n     }\n     return irNode;\n+  }\n+\n+  /**\n+   * Check to see if the given block comment looks like it should be JSDoc.\n+   */\n+  private void handleBlockComment(Comment comment) {\n+    String value = comment.getValue();\n+    if (value.indexOf(\"/* @\") != -1 ||\n+        value.indexOf(\"\\n * @\") != -1) {\n+      errorReporter.warning(\n+          SUSPICIOUS_COMMENT_WARNING,\n+          sourceName,\n+          comment.getLineno(), \"\", 0);\n+    }\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n         \"* @return {boolean|undefined}\\n\" +\n         \"*/\\n\" +\n         \"function g(b) { return b ? true : undefined; }\\n\" +\n-        \"/* @return {T} */\\n\" +\n+        \"/** @return {T} */\\n\" +\n         \"function h() {\\n\" +\n         \"return /** @type {T} */ (f(/** @type {boolean} */ (g(true))));\\n\" +\n         \"}\");\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"* @return {boolean|undefined}\\n\" +\n         \"*/\\n\" +\n         \"function g(b) { return b ? true : undefined; }\\n\" +\n-        \"/* @return {T} */\\n\" +\n+        \"/** @return {T} */\\n\" +\n         \"function h() {\\n\" +\n         \"return /** @type {T} */ (f(/** @type {boolean} */ (g(true))));\\n\" +\n         \"}\");\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n \n \n public class ParserTest extends BaseJSTypeTestCase {\n+  private static final String SUSPICIOUS_COMMENT_WARNING =\n+      IRFactory.SUSPICIOUS_COMMENT_WARNING;\n+\n   private static final String TRAILING_COMMA_MESSAGE =\n       ScriptRuntime.getMessage0(\"msg.extra.trailing.comma\");\n \n \n   public void testTrailingCommaWarning7() {\n     parseError(\"var a = {,};\", BAD_PROPERTY_MESSAGE);\n+  }\n+\n+  public void testSuspiciousBlockCommentWarning1() {\n+    parse(\"/* @type {number} */ var x = 3;\", SUSPICIOUS_COMMENT_WARNING);\n+  }\n+\n+  public void testSuspiciousBlockCommentWarning2() {\n+    parse(\"/* \\n * @type {number} */ var x = 3;\", SUSPICIOUS_COMMENT_WARNING);\n   }\n \n   public void testCatchClauseForbidden() {", "timestamp": 1302733093, "metainfo": ""}