{"sha": "22775ad7cad0bea94d56726e1d6a80f31604c118", "log": "Add a @meaning annotation so that soy templates can inject meaning.  R=jschorr DELTA=76  (76 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=206098   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/Annotation.java\n+++ b/src/com/google/javascript/jscomp/parsing/Annotation.java\n   INTERFACE,\n   JAVA_DISPATCH,\n   LICENSE, // same as preserve\n+  MEANING,\n   NO_ALIAS,\n   NO_COMPILE,\n   NO_SHADOW,\n       put(\"interface\", Annotation.INTERFACE).\n       put(\"javadispatch\", Annotation.JAVA_DISPATCH).\n       put(\"license\", Annotation.LICENSE).\n+      put(\"meaning\", Annotation.MEANING).\n       put(\"noalias\", Annotation.NO_ALIAS).\n       put(\"nocompile\", Annotation.NO_COMPILE).\n       put(\"noshadow\", Annotation.NO_SHADOW).\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n                   token = eatTokensUntilEOL();\n                   continue retry;\n \n+                case MEANING:\n+                  ExtractionInfo meaningInfo =\n+                      extractMultilineTextualBlock(token);\n+                  String meaning = meaningInfo.string;\n+                  token = meaningInfo.token;\n+                  if (!jsdocBuilder.recordMeaning(meaning)) {\n+                    parser.addWarning(\"msg.jsdoc.meaning.extra\",\n+                        stream.getLineno(), stream.getCharno());\n+                  }\n+                  continue retry;\n+\n                 case NO_ALIAS:\n                   if (!jsdocBuilder.recordNoAlias()) {\n                     parser.addWarning(\"msg.jsdoc.noalias\",\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n \n     // Other information\n     String description = null;\n+    String meaning = null;\n     String deprecated = null;\n     String license = null;\n     Set<String> suppressions = null;\n   }\n \n   /**\n+   * Gets the meaning specified by the {@code @meaning} annotation.\n+   *\n+   * In localization systems, two messages with the same content but\n+   * different \"meanings\" may be translated differently. By default, we\n+   * use the name of the variable that the message is initialized to as\n+   * the \"meaning\" of the message.\n+   *\n+   * But some code generators (like Closure Templates) inject their own\n+   * meaning with the jsdoc {@code @meaning} annotation.\n+   */\n+  public String getMeaning() {\n+    return (info == null) ? null : info.meaning;\n+  }\n+\n+  void setMeaning(String meaning) {\n+    lazyInitInfo();\n+    info.meaning = meaning;\n+  }\n+\n+  /**\n    * Gets the description specified by the {@code @license} annotation.\n    */\n   public String getLicense() {\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n   }\n \n   /**\n+   * Records a meaning giving context for translation (i18n). Different\n+   * meanings will result in different translations.\n+   *\n+   * @return {@code true} If the meaning was successfully updated.\n+   */\n+  public boolean recordMeaning(String meaning) {\n+    if (meaning != null && currentInfo.getMeaning() == null) {\n+      currentInfo.setMeaning(meaning);\n+      populated = true;\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  /**\n    * Records a fileoverview description.\n    *\n    * @return {@code true} if the description was recorded and {@code false}\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n     String comment = \"@desc\\n:\\n[\\n]\\n...*/\";\n \n     assertEquals(\": [ ] ...\", parse(comment).getDescription());\n+  }\n+\n+  public void testParseMeaning1() throws Exception {\n+    assertEquals(\"tigers\",\n+        parse(\"@meaning tigers   */\").getMeaning());\n+  }\n+\n+  public void testParseMeaning2() throws Exception {\n+    assertEquals(\"tigers and lions and bears\",\n+        parse(\"@meaning tigers\\n * and lions\\n * and bears */\").getMeaning());\n+  }\n+\n+  public void testParseMeaning3() throws Exception {\n+    JSDocInfo info =\n+        parse(\"@meaning  tigers\\n * and lions\\n * @desc  and bears */\");\n+    assertEquals(\"tigers and lions\", info.getMeaning());\n+    assertEquals(\"and bears\", info.getDescription());\n+  }\n+\n+  public void testParseMeaning4() throws Exception {\n+    parse(\"@meaning  tigers\\n * @meaning and lions  */\",\n+        \"extra @meaning tag\");\n   }\n \n   public void testParsePreserve() throws Exception {", "timestamp": 1283464328, "metainfo": ""}