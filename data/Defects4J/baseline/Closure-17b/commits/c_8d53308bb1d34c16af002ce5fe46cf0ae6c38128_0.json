{"sha": "8d53308bb1d34c16af002ce5fe46cf0ae6c38128", "log": "ExportTestFunctions now supports exporting function expressions in addition to statements  ", "commit": "\n--- a/src/com/google/javascript/jscomp/ExportTestFunctions.java\n+++ b/src/com/google/javascript/jscomp/ExportTestFunctions.java\n       NodeTraversal.AbstractPostOrderCallback {\n \n     public void visit(NodeTraversal t, Node n, Node parent) {\n-      if (parent != null && parent.getType() == Token.SCRIPT &&\n-          n.getType() == Token.FUNCTION) {\n-        String functionName = NodeUtil.getFunctionName(n);\n-        if (isTestFunction(n, functionName) && t.inGlobalScope()) {\n-          exportTestFunction(functionName, n, parent);\n+      if (parent != null && parent.getType() == Token.SCRIPT\n+          && t.inGlobalScope()) {\n+        if (NodeUtil.isFunctionDeclaration(n)) {\n+          // Check for a test function statement.\n+          String functionName = NodeUtil.getFunctionName(n);\n+          if (isTestFunction(n, functionName)) {\n+            exportTestFunction(functionName, n, parent);\n+          }\n+        } else if (isVarDeclaredFunction(n)) {\n+          // Check for a test function expression.\n+          Node functionNode = n.getFirstChild().getFirstChild();\n+          String functionName = NodeUtil.getFunctionName(functionNode);\n+          if (isTestFunction(functionNode, functionName)) {\n+            exportTestFunction(functionName, n, parent);\n+          }          \n         }\n       }\n+    }\n+    \n+    /**\n+     * Whether node corresponds to a function expression declared with var,\n+     * which is of the form:\n+     * <pre>\n+     * var functionName = function() {\n+     *   // Implementation\n+     * };\n+     * </pre>\n+     * This has the AST structure VAR -> NAME -> FUNCTION\n+     * @param node\n+     */\n+    private boolean isVarDeclaredFunction(Node node) {\n+      if (node.getType() != Token.VAR) {\n+        return false;\n+      }\n+      Node grandchild = node.getFirstChild().getFirstChild();\n+      return grandchild != null && grandchild.getType() == Token.FUNCTION;\n     }\n   }\n \n--- a/test/com/google/javascript/jscomp/ExportTestFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/ExportTestFunctionsTest.java\n              + \"google_exportSymbol(\\\"testBar\\\",testBar)\");\n     testSame(\"var testCase = {}; testCase.setUpPage = function() {}\");\n   }\n+\n+  /**\n+   * Make sure this works for global functions declared as function expressions:\n+   * <pre>\n+   * var testFunctionName = function() {\n+   *   // Implementation\n+   * };\n+   * </pre>\n+   * This format should be supported in addition to function statements.\n+   */\n+  public void testFunctionExpressionsAreExported() {\n+    test(\"var Foo = function() {var testA = function() {}}\",\n+         \"var Foo = function() {var testA = function() {}}\");\n+    test(\"var setUp = function() {}\",\n+         \"var setUp = function() {}; \" +\n+         \"google_exportSymbol(\\\"setUp\\\",setUp)\");\n+    test(\"var setUpPage = function() {}\",\n+         \"var setUpPage = function() {}; \" +\n+         \"google_exportSymbol(\\\"setUpPage\\\",setUpPage)\");\n+    test(\"var tearDown = function() {}\",\n+         \"var tearDown = function() {}; \" +\n+         \"google_exportSymbol(\\\"tearDown\\\",tearDown)\");\n+    test(\"var tearDownPage = function() {}\",\n+         \"var tearDownPage = function() {}; \" +\n+         \"google_exportSymbol(\\\"tearDownPage\\\", tearDownPage)\");\n+    test(\"var testBar = function() { var testB = function() {}}\",\n+         \"var testBar = function(){ var testB = function() {}}; \" +\n+         \"google_exportSymbol(\\\"testBar\\\",testBar)\");\n+  }\n+\n }", "timestamp": 1278190980, "metainfo": ""}