{"sha": "d5b11f8918aaac365ce173dd9e6edadc687fb4b5", "log": "Fix removal of useful switch cases.  R=acleung DELTA=100  (81 added, 7 deleted, 12 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=161003   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n+++ b/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.jstype.TernaryValue;\n+\n+import javax.annotation.Nullable;\n \n /**\n  * Peephole optimization to remove useless code such as IF's with false\n   private Node tryOptimizeSwitch(Node n) {\n     Preconditions.checkState(n.getType() == Token.SWITCH);\n \n-    Node defaultCase = findDefaultCase(n);\n-    if (defaultCase != null && isUselessCase(defaultCase)) {\n-      NodeUtil.redeclareVarsInsideBranch(defaultCase);\n-      n.removeChild(defaultCase);\n-      reportCodeChange();\n-      defaultCase = null;\n-    }\n+    Node defaultCase = tryOptimizeDefaultCase(n);\n \n     // Removing cases when there exists a default case is not safe.\n-    // TODO(johnlenz): Allow this if the same code is executed.\n     if (defaultCase == null) {\n       Node next = null;\n+      Node prev = null;\n       // The first child is the switch conditions skip it.\n       for (Node c = n.getFirstChild().getNext(); c != null; c = next) {\n         next = c.getNext();\n-        if (!mayHaveSideEffects(c.getFirstChild()) && isUselessCase(c)) {\n-          NodeUtil.redeclareVarsInsideBranch(c);\n-          n.removeChild(c);\n-          reportCodeChange();\n+        if (!mayHaveSideEffects(c.getFirstChild()) && isUselessCase(c, prev)) {\n+          removeCase(n, c);\n+        } else {\n+          prev = c;\n         }\n       }\n     }\n \n+    // Remove the switch if there are no remaining cases.\n     if (n.hasOneChild()) {\n       Node condition = n.removeFirstChild();\n       Node parent = n.getParent();\n   }\n \n   /**\n-   * @return the default case node or null.\n-   */\n-  private Node findDefaultCase(Node n) {\n-    for (Node c : n.children()) {\n+   * @return the default case node or null if there is no default case or\n+   *     if the default case is removed.\n+   */\n+  private Node tryOptimizeDefaultCase(Node n) {\n+    Preconditions.checkState(n.getType() == Token.SWITCH);\n+\n+    Node lastNonRemovable = n.getFirstChild();  // The switch condition\n+\n+    // The first child is the switch conditions skip it when looking for cases.\n+    for (Node c = n.getFirstChild().getNext(); c != null; c = c.getNext()) {\n       if (c.getType() == Token.DEFAULT) {\n+        // Remove cases that fall-through to the default case\n+        Node caseToRemove = lastNonRemovable.getNext();\n+        for (Node next; caseToRemove != c; caseToRemove = next) {\n+          next = caseToRemove.getNext();\n+          removeCase(n, caseToRemove);\n+        }\n+\n+        // Don't use the switch condition as the previous case.\n+        Node prevCase = (lastNonRemovable == n.getFirstChild())\n+            ? null : lastNonRemovable;\n+\n+        // Remove the default case if we can\n+        if (isUselessCase(c, prevCase)) {\n+          removeCase(n, c);\n+          return null;\n+        }\n         return c;\n+      } else {\n+        Preconditions.checkState(c.getType() == Token.CASE);\n+        if (c.getLastChild().hasChildren()\n+            || mayHaveSideEffects(c.getFirstChild())) {\n+          lastNonRemovable = c;\n+        }\n       }\n     }\n     return null;\n   }\n \n   /**\n+   * Remove the case from the switch redeclaring any variables declared in it.\n+   * @param caseNode The case to remove.\n+   */\n+  private void removeCase(Node switchNode, Node caseNode) {\n+    NodeUtil.redeclareVarsInsideBranch(caseNode);\n+    switchNode.removeChild(caseNode);\n+    reportCodeChange();\n+  }\n+\n+  /**\n+   * The function assumes that when checking a CASE node there is no\n+   * DEFAULT node in the SWITCH.\n    * @return Whether the CASE or DEFAULT block does anything useful.\n    */\n-  private boolean isUselessCase(Node caseNode) {\n+  private boolean isUselessCase(Node caseNode, @Nullable Node previousCase) {\n+    Preconditions.checkState(\n+        previousCase == null || previousCase.getNext() == caseNode);\n+    // A case isn't useless can't be useless if a previous case falls\n+    // through to it unless it happens to be the last case in the switch.\n+    Node switchNode = caseNode.getParent();\n+    if (switchNode.getLastChild() != caseNode\n+        && previousCase != null) {\n+      Node previousBlock = previousCase.getLastChild();\n+      if (!previousBlock.hasChildren()\n+          || !isExit(previousBlock.getLastChild())) {\n+        return false;\n+      }\n+    }\n+\n     Node executingCase = caseNode;\n     while (executingCase != null) {\n       Preconditions.checkState(executingCase.getType() == Token.DEFAULT\n     return true;\n   }\n \n+  /**\n+   * @return Whether the node is an obvious control flow exit.\n+   */\n+  private boolean isExit(Node n) {\n+    switch (n.getType()) {\n+      case Token.BREAK:\n+      case Token.CONTINUE:\n+      case Token.RETURN:\n+      case Token.THROW:\n+        return true;\n+      default:\n+        return false;\n+    }\n+  }\n+\n   private Node tryFoldComma(Node n) {\n     // If the left side does nothing replace the comma with the result.\n \n--- a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java\n     fold(\"switch(a){default: break; case 1:break;}\", \"\");\n     fold(\"switch(a){default: var b; break; case 1: var c; break;}\",\n         \"var c; var b;\");\n+\n     // Can't remove cases if a default exists.\n     foldSame(\"function f() {switch(a){default: return; case 1: break;}}\");\n     foldSame(\"function f() {switch(a){case 1: foo();}}\");\n     foldSame(\"function f() {switch(a){case 3: case 2: case 1: foo();}}\");\n-    // TODO(johnlenz): remove useless cases before \"default\"\n-    foldSame(\"function f() {switch(a){case 2: case 1: default: foo();}}\");\n-    \n+\n+    fold(\"function f() {switch(a){case 2: case 1: default: foo();}}\",\n+         \"function f() {switch(a){default: foo();}}\");\n+    fold(\"switch(a){case 1: default:break; case 2: foo()}\",\n+         \"switch(a){case 2: foo()}\");\n+    foldSame(\"switch(a){case 1: goo(); default:break; case 2: foo()}\");\n+\n+    // TODO(johnlenz): merge the useless \"case 2\"\n+    foldSame(\"switch(a){case 1: goo(); case 2:break; case 3: foo()}\");\n+\n     // Can't remove cases if something useful is done.\n     foldSame(\"switch(a){case 1: var c =2; break;}\");\n     foldSame(\"function f() {switch(a){case 1: return;}}\");", "timestamp": 1281984854, "metainfo": ""}