{"sha": "1787218d0d069393fc25bf7fb8db2ad019aa1491", "log": "When there's no output_manifest files are specified in the commandline, output_manifest filename is set as empty string \"\". It should be filtered out when being passed to the Compiler. Otherwise unexpected exceptions would be thrown, resulted by the change in CL 22845327.  Fixes Issue 529.  R=johnlenz DELTA=27  (24 added, 2 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2968   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n           throw new FlagUsageException(\"Can't specify stdin twice.\");\n         }\n \n-        inputs.add(JSSourceFile.fromInputStream(\"stdin\", System.in));\n-        usingStdin = true;\n         if (!config.outputManifests.isEmpty()) {\n           throw new FlagUsageException(\"Manifest files cannot be generated \" +\n               \"when the input is from stdin.\");\n           throw new FlagUsageException(\"Bundle files cannot be generated \" +\n               \"when the input is from stdin.\");\n         }\n+        inputs.add(JSSourceFile.fromInputStream(\"stdin\", System.in));\n+        usingStdin = true;\n       }\n     }\n     return inputs;\n \n     /**\n      * Sets whether to print output manifest files.\n+     * Filter out empty file names.\n      */\n     CommandLineConfig setOutputManifest(List<String> outputManifests) {\n-      this.outputManifests = outputManifests;\n+      this.outputManifests = Lists.newArrayList();\n+      for (String manifestName : outputManifests) {\n+        if (!manifestName.isEmpty()) {\n+          this.outputManifests.add(manifestName);\n+        }\n+      }\n+      this.outputManifests = ImmutableList.copyOf(this.outputManifests);\n       return this;\n     }\n \n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n import com.google.common.base.Suppliers;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n+import com.google.javascript.jscomp.AbstractCommandLineRunner.FlagUsageException;\n import com.google.javascript.jscomp.CompilerOptions.LanguageMode;\n import com.google.javascript.rhino.Node;\n \n import junit.framework.TestCase;\n \n import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n import java.io.PrintStream;\n import java.util.List;\n \n     testSame(\"var x = {}; with (x) {}\");\n   }\n \n+  public void testNoSrCFilesWithManifest() throws IOException {\n+    args.add(\"--use_only_custom_externs=true\");\n+    args.add(\"--output_manifest=test.MF\");\n+    CommandLineRunner runner = createCommandLineRunner(new String[0]);\n+    String expectedMessage = \"\";\n+    try {\n+      runner.doRun();\n+    } catch (FlagUsageException e) {\n+      expectedMessage = e.getMessage();\n+    }\n+    assertEquals(expectedMessage, \"Bad --js flag. \" +\n+      \"Manifest files cannot be generated when the input is from stdin.\");\n+  }\n+\n   /* Helper functions */\n \n   private void testSame(String original) {", "timestamp": 1313005202, "metainfo": ""}