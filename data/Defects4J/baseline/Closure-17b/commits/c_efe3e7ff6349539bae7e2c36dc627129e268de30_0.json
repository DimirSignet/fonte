{"sha": "efe3e7ff6349539bae7e2c36dc627129e268de30", "log": "Change on 2010/04/14 by john          Remove redundant function.          R=robert         DELTA=20  (0 added, 18 deleted, 2 changed)  Change on 2010/04/14 by john          Maintain source information in InlineVariables.          R=alan         DELTA=10  (7 added, 1 deleted, 2 changed)    Revision created by MOE tool push_codebase. MOE_MIGRATION=vjrbog   ", "commit": "\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n           value = init.getAssignedValue();\n         } else {\n           // Create a new node for variable that is never initialized.\n-          value = NodeUtil.newUndefinedNode();\n+          value = NodeUtil.newUndefinedNode()\n+              .copyInformationFromForTree(declaration.getNameNode());\n         }\n         Preconditions.checkNotNull(value);\n         inlineWellDefinedVariable(v, value, referenceInfo.references);\n      *     to re-parent.\n      */\n     private void inlineValue(Var v, Reference ref, Node value) {\n-      Node parent = ref.getParent();\n       if (ref.isSimpleAssignmentToName()) {\n         // This is the initial assignment.\n-        ref.getGrandparent().replaceChild(parent, value);\n+        ref.getGrandparent().replaceChild(ref.getParent(), value);\n       } else {\n         ref.getParent().replaceChild(ref.getNameNode(), value);\n       }\n+\n       blacklistVarReferencesInTree(value, v.scope);\n       compiler.reportCodeChange();\n     }\n--- a/src/com/google/javascript/jscomp/ReplaceCssNames.java\n+++ b/src/com/google/javascript/jscomp/ReplaceCssNames.java\n               n.removeChild(first);\n               Node replacement = new Node(Token.ADD, first,\n                   Node.newString(\"-\" + second.getString())\n-                      .copySourceLocationFrom(second))\n-                  .copySourceLocationFrom(n);\n+                      .copyInformationFrom(second))\n+                  .copyInformationFrom(n);\n               replacement.setJSType(nativeStringType);\n               parent.replaceChild(n, replacement);\n               compiler.reportCodeChange();\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n   }\n \n   /**\n-   * Copies source file, line and column number from the other\n-   * node given to the current node.\n-   * @return this\n-   */\n-  public Node copySourceLocationFrom(Node other) {\n-    if (getProp(SOURCEFILE_PROP) == null) {\n-      putProp(SOURCEFILE_PROP, other.getProp(SOURCEFILE_PROP));\n-      sourcePosition = other.sourcePosition;\n-    }\n-\n-    if (getLineno() == -1 || getCharno() == -1) {\n-      setLineno(other.getLineno());\n-      setCharno(other.getCharno());\n-    }\n-    return this;\n-  }\n-\n-  /**\n    * Copies source file and name information from the other\n    * node given to the current node. Used for maintaining\n    * debug information across node append and remove operations.\n--- a/test/com/google/javascript/jscomp/InlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/InlineVariablesTest.java\n \n   public InlineVariablesTest() {\n     enableNormalize();\n+  }\n+\n+  @Override\n+  public void setUp() {\n+    super.enableLineNumberCheck(true);\n   }\n \n   @Override", "timestamp": 1271345346, "metainfo": ""}