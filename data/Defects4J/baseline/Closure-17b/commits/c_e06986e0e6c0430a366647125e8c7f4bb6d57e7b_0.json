{"sha": "e06986e0e6c0430a366647125e8c7f4bb6d57e7b", "log": "Correct parameter aliasing when inlining of function with inner functions.  R=acleung DELTA=55  (51 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3088   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionArgumentInjector.java\n     Set<String> names = getFunctionParameterSet(fnNode);\n     Set<String> unsafeNames = Sets.newHashSet();\n     return findModifiedParameters(\n-        fnNode, null, names, unsafeNames);\n+        fnNode.getLastChild(), null, names, unsafeNames, false);\n   }\n \n   /**\n    * @param n The node in question.\n    * @param parent The parent of the node.\n    * @param names The set of names to check.\n+   * @param unsafe The set of names that require aliases.\n+   * @param inInnerFunction Whether the inspection is occurring on a inner\n+   *     function.\n    */\n   private static Set<String> findModifiedParameters(\n-      Node n, Node parent, Set<String> names, Set<String> unsafe) {\n+      Node n, Node parent, Set<String> names, Set<String> unsafe,\n+      boolean inInnerFunction) {\n     Preconditions.checkArgument(unsafe != null);\n     if (n.getType() == Token.NAME) {\n       if (names.contains(n.getString())) {\n-        if (canNameValueChange(n, parent)) {\n+        if (inInnerFunction || canNameValueChange(n, parent)) {\n           unsafe.add(n.getString());\n         }\n       }\n+    } else if (n.getType() == Token.FUNCTION) {\n+      // A function parameter can not be replaced with a direct inlined value\n+      // if it is referred to by an inner function. The inner function\n+      // can out live the call we are replacing, so inner function must\n+      // capture a unique name.  This approach does not work within loop\n+      // bodies so those are forbidden elsewhere.\n+      inInnerFunction = true;\n     }\n \n     for (Node c : n.children()) {\n-      findModifiedParameters(c, n, names, unsafe);\n+      findModifiedParameters(c, n, names, unsafe, inInnerFunction);\n     }\n \n     return unsafe;\n--- a/test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionArgumentInjectorTest.java\n             parseFunction(\"function f(a,b){ a; if (a) b=0 }\")));\n   }\n \n+  public void testFindModifiedParameters6() {\n+    assertEquals(Sets.newHashSet(\"a\", \"b\"),\n+        FunctionArgumentInjector.findModifiedParameters(\n+            parseFunction(\"function f(a,b){ function f(){ a;b; } }\")));\n+  }\n+\n+  public void testFindModifiedParameters7() {\n+    assertEquals(Sets.newHashSet(\"b\"),\n+        FunctionArgumentInjector.findModifiedParameters(\n+            parseFunction(\"function f(a,b){ a; function f(){ b; } }\")));\n+  }\n+\n+  public void testFindModifiedParameters8() {\n+    assertEquals(Sets.newHashSet(\"b\"),\n+        FunctionArgumentInjector.findModifiedParameters(\n+            parseFunction(\n+                \"function f(a,b){ \"+\n+                \"a; function f(){ function g() { b; } } }\")));\n+  }\n+\n+  public void testFindModifiedParameters9() {\n+    assertEquals(Sets.newHashSet(\"a\", \"b\"),\n+        FunctionArgumentInjector.findModifiedParameters(\n+            parseFunction(\"function f(a,b){ (function(){ a;b; }) }\")));\n+  }\n+\n+  public void testFindModifiedParameters10() {\n+    assertEquals(Sets.newHashSet(\"b\"),\n+        FunctionArgumentInjector.findModifiedParameters(\n+            parseFunction(\"function f(a,b){ a; (function (){ b; }) }\")));\n+  }\n+\n+  public void testFindModifiedParameters11() {\n+    assertEquals(Sets.newHashSet(\"b\"),\n+        FunctionArgumentInjector.findModifiedParameters(\n+            parseFunction(\n+                \"function f(a,b){ \"+\n+                \"a; (function(){ (function () { b; }) }) }\")));\n+  }\n+\n   public void testMaybeAddTempsForCallArguments1() {\n     // Parameters with side-effects must be executed\n     // even if they aren't referenced.", "timestamp": 1314057817, "metainfo": ""}