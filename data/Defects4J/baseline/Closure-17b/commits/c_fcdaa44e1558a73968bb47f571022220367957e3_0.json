{"sha": "fcdaa44e1558a73968bb47f571022220367957e3", "log": "One JSDocInfo source to rule them all  R=acleung DELTA=47  (20 added, 23 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3633   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n   }\n \n   /**\n-   * @param nameNode A name node\n-   * @return The JSDocInfo for the name node\n-   */\n-  static JSDocInfo getInfoForNameNode(Node nameNode) {\n-    JSDocInfo info = null;\n-    Node parent = null;\n-    if (nameNode != null) {\n-      info = nameNode.getJSDocInfo();\n-      parent = nameNode.getParent();\n-    }\n-\n-    if (info == null && parent != null &&\n-        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n-          parent.getType() == Token.FUNCTION)) {\n-      info = parent.getJSDocInfo();\n-    }\n-    return info;\n-  }\n-\n-  /**\n    * Get the JSDocInfo for a function.\n    */\n   public static JSDocInfo getFunctionJSDocInfo(Node n) {\n \n       int parentType = parent.getType();\n       if (parentType == Token.NAME) {\n-        info = parent.getJSDocInfo();\n-        if (info == null && parent.getParent().hasOneChild()) {\n-          info = parent.getParent().getJSDocInfo();\n-        }\n+        return getBestJSDocInfo(parent);\n       } else if (parentType == Token.ASSIGN) {\n         info = parent.getJSDocInfo();\n       } else if (isObjectLitKey(parent, parent.getParent())) {\n+        info = parent.getJSDocInfo();\n+      } else if (parentType == Token.FUNCTION) {\n+        info = parent.getJSDocInfo();\n+      } else if (parentType == Token.VAR && parent.hasOneChild()) {\n         info = parent.getJSDocInfo();\n       }\n     }\n--- a/src/com/google/javascript/jscomp/Scope.java\n+++ b/src/com/google/javascript/jscomp/Scope.java\n     Preconditions.checkState(vars.get(name) == null);\n \n     // native variables do not have a name node.\n-    // TODO(user): make Var abstract and have NativeVar, NormalVar.\n-    JSDocInfo info = NodeUtil.getInfoForNameNode(nameNode);\n+    JSDocInfo info = nameNode == null\n+        ? null : NodeUtil.getBestJSDocInfo(nameNode);\n \n     Var var = new Var(inferred, name, nameNode, type, this, vars.size(), input,\n         info != null && info.isDefine(), info);\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n                child != null; child = child.getNext()) {\n             identifyNameNode(\n                 child, child.getFirstChild(),\n-                NodeUtil.getInfoForNameNode(child));\n+                NodeUtil.getBestJSDocInfo(child));\n           }\n           break;\n         case Token.EXPR_RESULT:\n--- a/test/com/google/javascript/jscomp/SymbolTableTest.java\n+++ b/test/com/google/javascript/jscomp/SymbolTableTest.java\n import com.google.javascript.jscomp.SymbolTable.Reference;\n import com.google.javascript.jscomp.SymbolTable.Symbol;\n import com.google.javascript.jscomp.SymbolTable.SymbolScope;\n+import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Token;\n \n import junit.framework.TestCase;\n     assertEquals(26, cCtor.getDeclaration().getNode().getLineno());\n   }\n \n+  public void testJSDocAssociationWithBadNamespace() {\n+    SymbolTable table = createSymbolTable(\n+        // Notice that the declaration for \"goog\" is missing.\n+        // We want to recover anyway and print out what we know\n+        // about goog.Foo.\n+        \"/** @constructor */ goog.Foo = function(){};\");\n+\n+    Symbol foo = getGlobalVar(table, \"goog.Foo\");\n+    assertNotNull(foo);\n+\n+    JSDocInfo info = foo.getJSDocInfo();\n+    assertNotNull(info);\n+    assertTrue(info.isConstructor());\n+  }\n+\n   public void testMissingConstructorTag() {\n     SymbolTable table = createSymbolTable(\n         \"function F() {\" +", "timestamp": 1320449538, "metainfo": ""}