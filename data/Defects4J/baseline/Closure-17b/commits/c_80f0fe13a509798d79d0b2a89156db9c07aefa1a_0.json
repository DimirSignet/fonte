{"sha": "80f0fe13a509798d79d0b2a89156db9c07aefa1a", "log": "Combine redundant IFs  R=acleung DELTA=70  (68 added, 1 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3700   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n     for (Node child = n.getFirstChild();\n          child != null; child = child.getNext()){\n       if (child.isIf()){\n-\n         Node cond = child.getFirstChild();\n         Node thenBranch = cond.getNext();\n         Node elseBranch = thenBranch.getNext();\n         Node nextNode = child.getNext();\n \n-        if (nextNode != null && elseBranch == null &&\n+        if (nextNode != null && elseBranch == null\n+            && isReturnBlock(thenBranch)\n+            && nextNode.isIf()) {\n+          Node nextCond = nextNode.getFirstChild();\n+          Node nextThen = nextCond.getNext();\n+          Node nextElse = nextThen.getNext();\n+          if (thenBranch.isEquivalentToTyped(nextThen)) {\n+            // Transform\n+            //   if (x) return 1; if (y) return 1;\n+            // to\n+            //   if (x||y) return 1;\n+            child.detachFromParent();\n+            child.detachChildren();\n+            Node newCond = new Node(Token.OR, cond);\n+            nextNode.replaceChild(nextCond, newCond);\n+            newCond.addChildToBack(nextCond);\n+            reportCodeChange();\n+          } else if (nextElse != null\n+              && thenBranch.isEquivalentToTyped(nextElse)) {\n+            // Transform\n+            //   if (x) return 1; if (y) foo() else return 1;\n+            // to\n+            //   if (!x&&y) foo() else return 1;\n+            child.detachFromParent();\n+            child.detachChildren();\n+            Node newCond = new Node(Token.AND,\n+                new Node(Token.NOT, cond).copyInformationFrom(cond));\n+            nextNode.replaceChild(nextCond, newCond);\n+            newCond.addChildToBack(nextCond);\n+            reportCodeChange();\n+          }\n+        } else if (nextNode != null && elseBranch == null &&\n             isReturnBlock(thenBranch) && isReturnExpression(nextNode)) {\n           Node thenExpr = null;\n           // if(x)return; return 1 -> return x?void 0:1\n--- a/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n     test(\"([a])\", \"\");\n     test(\"([foo()])\", \"foo()\");\n   }\n+\n+  public void testFoldIfs1() {\n+    fold(\"function f() {if (x) return 1; else if (y) return 1;}\",\n+         \"function f() {if (x||y) return 1;}\");\n+    fold(\"function f() {if (x) return 1; else {if (y) return 1; else foo();}}\",\n+         \"function f() {if (x||y) return 1; foo();}\");\n+  }\n+\n+  public void testFoldIfs2() {\n+    fold(\"function f() {if (x) { a(); } else if (y) { a() }}\",\n+         \"function f() {x?a():y&&a();}\");\n+  }\n+\n+\n }\n--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n \n     foldSame(\"function f(){for(var x in y) { return x.y; } return k}\");\n   }\n+\n+  public void testCombineIfs1() {\n+    fold(\"function f() {if (x) return 1; if (y) return 1}\",\n+         \"function f() {if (x||y) return 1;}\");\n+    fold(\"function f() {if (x) return 1; if (y) foo(); else return 1}\",\n+         \"function f() {if ((!x)&&y) foo(); else return 1;}\");\n+  }\n+\n+  public void testCombineIfs2() {\n+    // combinable but not yet done\n+    foldSame(\"function f() {if (x) throw 1; if (y) throw 1}\");\n+    // Can't combine, side-effect\n+    fold(\"function f(){ if (x) g(); if (y) g() }\",\n+         \"function f(){ x&&g(); y&&g() }\");\n+    // Can't combine, side-effect\n+    fold(\"function f(){ if (x) y = 0; if (y) y = 0; }\",\n+         \"function f(){ x&&(y = 0); y&&(y = 0); }\");\n+  }\n+\n+  public void testCombineIfs3() {\n+    foldSame(\"function f() {if (x) return 1; if (y) {g();f()}}\");\n+  }\n+\n \n   /** Try to minimize assignments */\n   public void testFoldAssignments() {", "timestamp": 1321296090, "metainfo": ""}