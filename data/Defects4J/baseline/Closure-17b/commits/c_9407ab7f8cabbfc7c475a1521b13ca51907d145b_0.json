{"sha": "9407ab7f8cabbfc7c475a1521b13ca51907d145b", "log": "Don't crash on bad goog.reflect.object calls.  R=acleung DELTA=21  (19 added, 1 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2143   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n+++ b/src/com/google/javascript/jscomp/ClosureCodingConvention.java\n package com.google.javascript.jscomp;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Lists;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n     Preconditions.checkArgument(callNode.getType() == Token.CALL);\n     Node callName = callNode.getFirstChild();\n     if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) ||\n-        callName.getChildCount() != 2) {\n+        callNode.getChildCount() != 3) {\n       return null;\n     }\n \n \n     Node objectNode = typeNode.getNext();\n     if (objectNode.getType() != Token.OBJECTLIT) {\n+      // TODO(johnlenz): The coding convention should not be performing checks.\n       t.getCompiler().report(JSError.make(t.getSourceName(), callNode,\n                                           OBJECTLIT_EXPECTED));\n       return null;\n--- a/test/com/google/javascript/jscomp/ClosureCodingConventionTest.java\n+++ b/test/com/google/javascript/jscomp/ClosureCodingConventionTest.java\n     assertNotClassDefining(\"goog$inherits(A);\");\n   }\n \n+  public void testObjectLiteralCast() {\n+    assertNotObjectLiteralCast(\"goog.reflect.object();\");\n+    assertNotObjectLiteralCast(\"goog.reflect.object(A);\");\n+    assertNotObjectLiteralCast(\"goog.reflect.object(1, {});\");\n+    assertObjectLiteralCast(\"goog.reflect.object(A, {});\");\n+  }\n+\n+  private void assertNotObjectLiteralCast(String code) {\n+    Node n = parseTestCode(code);\n+    assertNull(conv.getObjectLiteralCast(null, n.getFirstChild()));\n+  }\n+\n+  private void assertObjectLiteralCast(String code) {\n+    Node n = parseTestCode(code);\n+    assertNotNull(conv.getObjectLiteralCast(null, n.getFirstChild()));\n+  }\n+\n   private void assertNotClassDefining(String code) {\n     Node n = parseTestCode(code);\n     assertNull(conv.getClassesDefinedByCall(n.getFirstChild()));", "timestamp": 1307039555, "metainfo": ""}