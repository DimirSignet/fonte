{"sha": "51344c09446b142ea5d11692e4ac1e6a813b187f", "log": "Change \"jscomp\" to \"$jscomp\". This is a little bit more appropriate in ES3, which encourages using \"$\" in names for generated code (see section 7.6)  R=johnlenz DELTA=128  (5 added, 0 deleted, 123 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4339   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RuntimeTypeCheck.java\n+++ b/src/com/google/javascript/jscomp/RuntimeTypeCheck.java\n           IR.assign(\n               NodeUtil.newQualifiedNameNode(\n                   compiler.getCodingConvention(),\n-                  \"jscomp.typecheck.log\"),\n+                  \"$jscomp.typecheck.log\"),\n               NodeUtil.newQualifiedNameNode(\n                   compiler.getCodingConvention(),\n                   logFunction)));\n \n   private Node jsCode(String prop) {\n     return NodeUtil.newQualifiedNameNode(\n-        compiler.getCodingConvention(), \"jscomp.typecheck.\" + prop);\n+        compiler.getCodingConvention(), \"$jscomp.typecheck.\" + prop);\n   }\n }\n--- a/test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java\n   public void testValue() {\n     testChecks(\"/** @param {number} i */ function f(i) {}\",\n         \"function f(i) {\" +\n-        \"  jscomp.typecheck.checkType(i, \" +\n-        \"      [jscomp.typecheck.valueChecker('number')]);\" +\n+        \"  $jscomp.typecheck.checkType(i, \" +\n+        \"      [$jscomp.typecheck.valueChecker('number')]);\" +\n         \"}\");\n   }\n \n     // to ensure the immutable annotations are preserved.\n     testChecks(\"/** @param {number} CONST */ function f(CONST) {}\",\n         \"function f(CONST) {\" +\n-        \"  jscomp.typecheck.checkType(CONST, \" +\n-        \"      [jscomp.typecheck.valueChecker('number')]);\" +\n+        \"  $jscomp.typecheck.checkType(CONST, \" +\n+        \"      [$jscomp.typecheck.valueChecker('number')]);\" +\n         \"}\");\n   }\n \n     testChecks(\"/** @param {number} i */ function f(i) { function g() {} }\",\n         \"function f(i) {\" +\n         \"  function g() {}\" +\n-        \"  jscomp.typecheck.checkType(i, \" +\n-        \"      [jscomp.typecheck.valueChecker('number')]);\" +\n+        \"  $jscomp.typecheck.checkType(i, \" +\n+        \"      [$jscomp.typecheck.valueChecker('number')]);\" +\n         \"}\");\n   }\n \n   public void testNullValue() {\n     testChecks(\"/** @param {null} i */ function f(i) {}\",\n         \"function f(i) {\" +\n-        \"  jscomp.typecheck.checkType(i, [jscomp.typecheck.nullChecker]);\" +\n+        \"  $jscomp.typecheck.checkType(i, [$jscomp.typecheck.nullChecker]);\" +\n         \"}\");\n   }\n \n   public void testValues() {\n     testChecks(\"/** @param {number} i\\n@param {string} j*/ function f(i, j) {}\",\n         \"function f(i, j) {\" +\n-        \"  jscomp.typecheck.checkType(i, \" +\n-        \"      [jscomp.typecheck.valueChecker('number')]);\" +\n-        \"  jscomp.typecheck.checkType(j, \" +\n-        \"      [jscomp.typecheck.valueChecker('string')]);\" +\n+        \"  $jscomp.typecheck.checkType(i, \" +\n+        \"      [$jscomp.typecheck.valueChecker('number')]);\" +\n+        \"  $jscomp.typecheck.checkType(j, \" +\n+        \"      [$jscomp.typecheck.valueChecker('string')]);\" +\n         \"}\");\n   }\n \n   public void testSkipParamOK() {\n     testChecks(\"/** @param {*} i\\n@param {string} j*/ function f(i, j) {}\",\n         \"function f(i, j) {\" +\n-        \"  jscomp.typecheck.checkType(j, \" +\n-        \"      [jscomp.typecheck.valueChecker('string')]);\" +\n+        \"  $jscomp.typecheck.checkType(j, \" +\n+        \"      [$jscomp.typecheck.valueChecker('string')]);\" +\n         \"}\");\n   }\n \n   public void testUnion() {\n     testChecks(\"/** @param {number|string} x */ function f(x) {}\",\n         \"function f(x) {\" +\n-        \"  jscomp.typecheck.checkType(x, [\" +\n-        \"      jscomp.typecheck.valueChecker('number'), \" +\n-        \"      jscomp.typecheck.valueChecker('string')\" +\n+        \"  $jscomp.typecheck.checkType(x, [\" +\n+        \"      $jscomp.typecheck.valueChecker('number'), \" +\n+        \"      $jscomp.typecheck.valueChecker('string')\" +\n         \"]);\" +\n         \"}\");\n   }\n   public void testReturn() {\n     testChecks(\"/** @return {string} */ function f() { return 'x'; }\",\n         \"function f() {\" +\n-        \"  return jscomp.typecheck.checkType('x', \" +\n-        \"      [jscomp.typecheck.valueChecker('string')]);\" +\n+        \"  return $jscomp.typecheck.checkType('x', \" +\n+        \"      [$jscomp.typecheck.valueChecker('string')]);\" +\n         \"}\");\n   }\n \n   public void testNativeClass() {\n     testChecks(\"/** @param {!String} x */ function f(x) {}\",\n         \"function f(x) {\" +\n-        \"  jscomp.typecheck.checkType(x, \" +\n-        \"      [jscomp.typecheck.externClassChecker('String')]);\" +\n+        \"  $jscomp.typecheck.checkType(x, \" +\n+        \"      [$jscomp.typecheck.externClassChecker('String')]);\" +\n         \"}\");\n   }\n \n         \"var goog = {}; goog.Foo = function() {};\" +\n         \"goog.Foo.prototype['instance_of__goog.Foo'] = true;\" +\n         \"function f(x) {\" +\n-        \"  jscomp.typecheck.checkType(x, \" +\n-        \"    [jscomp.typecheck.classChecker('goog.Foo')]);\" +\n+        \"  $jscomp.typecheck.checkType(x, \" +\n+        \"    [$jscomp.typecheck.classChecker('goog.Foo')]);\" +\n         \"}\");\n   }\n \n         \"/** @param {!I} i */function f(i) {}\",\n         \"function I() {}\" +\n         \"function f(i) {\" +\n-        \"  jscomp.typecheck.checkType(i, \" +\n-        \"    [jscomp.typecheck.interfaceChecker('I')])\" +\n+        \"  $jscomp.typecheck.checkType(i, \" +\n+        \"    [$jscomp.typecheck.interfaceChecker('I')])\" +\n         \"}\");\n   }\n \n         \"/** @constructor\\n@implements {I} */function C() {}\",\n         \"function I() {}\" +\n         \"function f(i) {\" +\n-        \"  jscomp.typecheck.checkType(i, \" +\n-        \"      [jscomp.typecheck.interfaceChecker('I')])\" +\n+        \"  $jscomp.typecheck.checkType(i, \" +\n+        \"      [$jscomp.typecheck.interfaceChecker('I')])\" +\n         \"}\" +\n         \"function C() {}\" +\n         \"C.prototype['instance_of__C'] = true;\" +\n         \"function I() {}\" +\n         \"function J() {}\" +\n         \"function f(i) {\" +\n-        \"  jscomp.typecheck.checkType(i, \" +\n-        \"      [jscomp.typecheck.interfaceChecker('I')])\" +\n+        \"  $jscomp.typecheck.checkType(i, \" +\n+        \"      [$jscomp.typecheck.interfaceChecker('I')])\" +\n         \"}\" +\n         \"function C() {}\" +\n         \"C.prototype['instance_of__C'] = true;\" +\n         \"C.prototype.f = function() {};\",\n         \"function I() {}\" +\n         \"function f(i) {\" +\n-        \"  jscomp.typecheck.checkType(i, \" +\n-        \"      [jscomp.typecheck.interfaceChecker('I')])\" +\n+        \"  $jscomp.typecheck.checkType(i, \" +\n+        \"      [$jscomp.typecheck.interfaceChecker('I')])\" +\n         \"}\" +\n         \"function C() {}\" +\n         \"C.prototype['instance_of__C'] = true;\" +\n         \"var goog = {}; goog.inherits = function(x, y) {};\" +\n         \"function I() {}\" +\n         \"function f(i) {\" +\n-        \"  jscomp.typecheck.checkType(i, \" +\n-        \"      [jscomp.typecheck.interfaceChecker('I')])\" +\n+        \"  $jscomp.typecheck.checkType(i, \" +\n+        \"      [$jscomp.typecheck.interfaceChecker('I')])\" +\n         \"}\" +\n         \"function B() {}\" +\n         \"B.prototype['instance_of__B'] = true;\" +", "timestamp": 1331311628, "metainfo": ""}