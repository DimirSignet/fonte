{"sha": "e8c234a050e4ed6c8220d5afc0b6a4d5d166b7e0", "log": "Fix a bug in 'this' type inference, where it didn't work correctly when you have the union of two objects. Also, make these default to warnings. These days, we have a separate mechanism for upgrading warnings to errors. (--jscomp_error=checkTypes)  R=mgoodman DELTA=41  (21 added, 0 deleted, 20 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3455   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n       + \"found   : {1}\\n\"\n       + \"expected: {2}\");\n \n-  static final DiagnosticType TEMPLATE_TYPE_DUPLICATED = DiagnosticType.error(\n+  static final DiagnosticType TEMPLATE_TYPE_DUPLICATED = DiagnosticType.warning(\n       \"JSC_TEMPLATE_TYPE_DUPLICATED\",\n       \"Only one parameter type must be the template type\");\n \n-  static final DiagnosticType TEMPLATE_TYPE_EXPECTED = DiagnosticType.error(\n+  static final DiagnosticType TEMPLATE_TYPE_EXPECTED = DiagnosticType.warning(\n       \"JSC_TEMPLATE_TYPE_EXPECTED\",\n       \"The template type must be a parameter type\");\n \n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n class TypeInference\n     extends DataFlowAnalysis.BranchedForwardDataFlowAnalysis<Node, FlowScope> {\n   static final DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE =\n-      DiagnosticType.error(\n+      DiagnosticType.warning(\n       \"JSC_TEMPLATE_TYPE_NOT_OBJECT_TYPE\",\n-      \"The template type must be an object type\");\n+      \"The template type must be an object type.\\nActual: {0}\");\n \n   static final DiagnosticType TEMPLATE_TYPE_OF_THIS_EXPECTED =\n-      DiagnosticType.error(\n+      DiagnosticType.warning(\n       \"JSC_TEMPLATE_TYPE_OF_THIS_EXPECTED\",\n       \"A function type with the template type as the type of this must be a \" +\n       \"parameter type\");\n           getJSType(iParameter).restrictByNotNullOrUndefined();\n       if (iParameterType.isTemplateType()) {\n         // Find the actual type of this argument.\n-        JSType iArgumentType = null;\n+        ObjectType iArgumentType = null;\n         if (i + 1 < childCount) {\n           Node iArgument = n.getChildAtIndex(i + 1);\n-          iArgumentType = getJSType(iArgument).restrictByNotNullOrUndefined();\n-          if (!(iArgumentType instanceof ObjectType)) {\n+          iArgumentType = getJSType(iArgument)\n+              .restrictByNotNullOrUndefined()\n+              .collapseUnion()\n+              .toObjectType();\n+          if (iArgumentType == null) {\n             compiler.report(\n                 JSError.make(NodeUtil.getSourceName(iArgument), iArgument,\n-                    TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n+                    TEMPLATE_TYPE_NOT_OBJECT_TYPE,\n+                    getJSType(iArgument).toString()));\n             return;\n           }\n         }\n                     // function.\n                     jArgument.setJSType(\n                         registry.createFunctionTypeWithNewThisType(\n-                            jArgumentFnType, (ObjectType) iArgumentType));\n+                            jArgumentFnType, iArgumentType));\n                   }\n                 } else {\n                   // Warn if the anonymous function literal references this.\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n         \"*/\\n\" +\n         \"function f(x, y, z) {}\\n\" +\n         \"f(this, this, function() { this });\",\n-        FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format(), true);\n+        FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format());\n   }\n \n   public void testBadTemplateType2() throws Exception {\n         \"*/\\n\" +\n         \"function f(x, y) {}\\n\" +\n         \"f(0, function() {});\",\n-        TypeInference.TEMPLATE_TYPE_NOT_OBJECT_TYPE.format(), true);\n+        TypeInference.TEMPLATE_TYPE_NOT_OBJECT_TYPE.format(\"number\"));\n   }\n \n   public void testBadTemplateType3() throws Exception {\n         \"*/\\n\" +\n         \"function f(x) {}\\n\" +\n         \"f(this);\",\n-        TypeInference.TEMPLATE_TYPE_OF_THIS_EXPECTED.format(), true);\n+        TypeInference.TEMPLATE_TYPE_OF_THIS_EXPECTED.format());\n   }\n \n   public void testBadTemplateType4() throws Exception {\n         \"*/\\n\" +\n         \"function f() {}\\n\" +\n         \"f();\",\n-        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(), true);\n+        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n   }\n \n   public void testBadTemplateType5() throws Exception {\n         \"*/\\n\" +\n         \"function f() {}\\n\" +\n         \"f();\",\n-        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(), true);\n+        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n   }\n \n   private void checkObjectType(ObjectType objectType, String propertyName,\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"*/\\n\" +\n         \"function f(x, y, z) {}\\n\" +\n         \"f(this, this, function() { this });\",\n-        FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format(), true);\n+        FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED.format());\n   }\n \n   public void testBadTemplateType2() throws Exception {\n         \"*/\\n\" +\n         \"function f(x, y) {}\\n\" +\n         \"f(0, function() {});\",\n-        TypeInference.TEMPLATE_TYPE_NOT_OBJECT_TYPE.format(), true);\n+        TypeInference.TEMPLATE_TYPE_NOT_OBJECT_TYPE.format(\"number\"));\n   }\n \n   public void testBadTemplateType3() throws Exception {\n         \"*/\\n\" +\n         \"function f(x) {}\\n\" +\n         \"f(this);\",\n-        TypeInference.TEMPLATE_TYPE_OF_THIS_EXPECTED.format(), true);\n+        TypeInference.TEMPLATE_TYPE_OF_THIS_EXPECTED.format());\n   }\n \n   public void testBadTemplateType4() throws Exception {\n         \"*/\\n\" +\n         \"function f() {}\\n\" +\n         \"f();\",\n-        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(), true);\n+        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n   }\n \n   public void testBadTemplateType5() throws Exception {\n         \"*/\\n\" +\n         \"function f() {}\\n\" +\n         \"f();\",\n-        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(), true);\n+        FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format());\n   }\n \n   public void testFunctionLiteralUndefinedThisArgument() throws Exception {\n         + \" */\\n\"\n         + \"function baz(fn, opt_obj) {}\\n\"\n         + \"baz(function() {}, null);\");\n+  }\n+\n+  public void testUnionTemplateThisType() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function F() {}\" +\n+        \"/** @return {F|Array} */ function g() { return []; }\" +\n+        \"/** @param {F} x */ function h(x) { }\" +\n+        \"/**\\n\" +\n+        \"* @param {T} x\\n\" +\n+        \"* @param {function(this:T, ...)} y\\n\" +\n+        \"* @template T\\n\" +\n+        \"*/\\n\" +\n+        \"function f(x, y) {}\\n\" +\n+        \"f(g(), function() { h(this); });\",\n+        \"actual parameter 1 of h does not match formal parameter\\n\" +\n+        \"found   : Object\\n\" +\n+        \"required: (F|null)\");\n   }\n \n   public void testActiveXObject() throws Exception {", "timestamp": 1318461236, "metainfo": ""}