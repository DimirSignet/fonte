{"sha": "4c1b34b34b68f102fbb5021a801b6d99de967550", "log": "Open up the visibility on some PassConfig methods. Fixes issue 684  R=acleung DELTA=15  (0 added, 0 deleted, 15 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4484   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CleanupPasses.java\n+++ b/src/com/google/javascript/jscomp/CleanupPasses.java\n   }\n \n   @Override\n-  State getIntermediateState() {\n+  protected State getIntermediateState() {\n     return state;\n   }\n \n   }\n \n   @Override\n-  void setIntermediateState(State state) {\n+  protected void setIntermediateState(State state) {\n     this.state = state;\n   }\n \n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n   }\n \n   @Override\n-  State getIntermediateState() {\n+  protected State getIntermediateState() {\n     return new State(\n         cssNames == null ? null : Maps.newHashMap(cssNames),\n         exportedNames == null ? null :\n   }\n \n   @Override\n-  void setIntermediateState(State state) {\n+  protected void setIntermediateState(State state) {\n     this.cssNames = state.cssNames == null ? null :\n         Maps.newHashMap(state.cssNames);\n     this.exportedNames = state.exportedNames == null ? null :\n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n    * Get intermediate state for a running pass config, so it can\n    * be paused and started again later.\n    */\n-  abstract State getIntermediateState();\n+  protected abstract State getIntermediateState();\n \n   /**\n    * Set the intermediate state for a pass config, to restart\n    * a compilation process that had been previously paused.\n    */\n-  abstract void setIntermediateState(State state);\n+  protected abstract void setIntermediateState(State state);\n \n   /**\n    * An implementation of PassConfig that just proxies all its method calls\n       return delegate.getTopScope();\n     }\n \n-    @Override State getIntermediateState() {\n+    @Override protected State getIntermediateState() {\n       return delegate.getIntermediateState();\n     }\n \n-    @Override void setIntermediateState(State state) {\n+    @Override protected void setIntermediateState(State state) {\n       delegate.setIntermediateState(state);\n     }\n   }\n   /**\n    * Intermediate state for a running pass configuration.\n    */\n-  static class State implements Serializable {\n+  public static class State implements Serializable {\n     private static final long serialVersionUID = 1L;\n \n     final Map<String, Integer> cssNames;\n     final FunctionNames functionNames;\n     final String idGeneratorMap;\n \n-    State(Map<String, Integer> cssNames, Set<String> exportedNames,\n-          CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n-          VariableMap variableMap, VariableMap propertyMap,\n-          VariableMap anonymousFunctionNameMap,\n-          VariableMap stringMap, FunctionNames functionNames,\n-          String idGeneratorMap) {\n+    public State(Map<String, Integer> cssNames, Set<String> exportedNames,\n+        CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n+        VariableMap variableMap, VariableMap propertyMap,\n+        VariableMap anonymousFunctionNameMap,\n+        VariableMap stringMap, FunctionNames functionNames,\n+        String idGeneratorMap) {\n       this.cssNames = cssNames;\n       this.exportedNames = exportedNames;\n       this.crossModuleIdGenerator = crossModuleIdGenerator;", "timestamp": 1333664263, "metainfo": ""}