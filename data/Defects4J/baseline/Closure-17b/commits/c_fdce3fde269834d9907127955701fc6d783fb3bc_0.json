{"sha": "fdce3fde269834d9907127955701fc6d783fb3bc", "log": "Suppress warnings about constructors called without the \"new\" keyword when the constructor is both defined in an extern file and has an explicit @return annotation. This supports the factory design pattern used in many 3rd party libraries.  Committed by Chad.  Revision created by MOE tool push_codebase.  R=acleung DELTA=1897  (819 added, 919 deleted, 159 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1013   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n     if (childType instanceof FunctionType) {\n       FunctionType functionType = (FunctionType) childType;\n \n-      // Non-native constructors should never be called directly.\n+      boolean isExtern = false;\n+      JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();\n+      if(functionJSDocInfo != null) {\n+        String sourceName = functionJSDocInfo.getSourceName();\n+        CompilerInput functionSource = compiler.getInput(sourceName);\n+        isExtern = functionSource.isExtern();\n+      }\n+\n+      // Non-native constructors should not be called directly\n+      // unless they specify a return type and are defined\n+      // in an extern.\n       if (functionType.isConstructor() &&\n-          !functionType.isNativeObjectType()) {\n+          !functionType.isNativeObjectType() &&\n+          (functionType.getReturnType().isUnknownType() ||\n+           functionType.getReturnType().isVoidType() ||\n+           !isExtern)) {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n       }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java\n       // Methods defined in a separate functions and then added via assignment\n       \"function twoArg(arg1, arg2) {};\" +\n       \"Foo.prototype.prototypeMethod = twoArg;\" +\n-      \"Foo.staticMethod = twoArg;\";\n+      \"Foo.staticMethod = twoArg;\" +\n+      // Constructor that specifies a return type\n+      \"/**\\n * @constructor\\n * @return {Bar}\\n */\\n\" +\n+      \"function Bar() {}\";\n \n     // Prototype method with too many arguments.\n     testSame(METHOD_DEFS +\n     testSame(METHOD_DEFS +\n         \"Foo.staticMethod(1);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n+\n+    // Constructor calls require new keyword\n+    testSame(METHOD_DEFS + \"Bar();\", TypeCheck.CONSTRUCTOR_NOT_CALLABLE);\n+\n+    // Extern constructor calls require new keyword\n+    testSame(METHOD_DEFS, \"Foo();\", TypeCheck.CONSTRUCTOR_NOT_CALLABLE);\n+\n+    // Extern constructor call without new keyword\n+    testSame(METHOD_DEFS, \"Bar();\", null);\n   }\n \n   public void assertOk(String params, String arguments) {", "timestamp": 1300919799, "metainfo": ""}