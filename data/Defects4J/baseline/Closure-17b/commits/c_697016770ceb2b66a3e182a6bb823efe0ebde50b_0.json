{"sha": "697016770ceb2b66a3e182a6bb823efe0ebde50b", "log": "Extends the RescopeGlobalSymbols compiler pass to make all extern symbols reference the global scope explicitly. The change is meant to be 100% backward compatible.  The current implementation is browser dependend. As we are most likely the only customer of this compiler pass, I think that is OK. It could, of course, be changed to make \"window\" be configurable.  This change allows injecting the global scope into code payloads. We use this to enable JS payloads to be used across friendly iframes; in particular all +1 buttons on a page, reuse the same JS.  R=nicksantos,johnlenz DELTA=69  (69 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4381   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RescopeGlobalSymbols.java\n+++ b/src/com/google/javascript/jscomp/RescopeGlobalSymbols.java\n  */\n package com.google.javascript.jscomp;\n \n+import com.google.common.collect.ImmutableSet;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.jscomp.NodeTraversal.AbstractShallowStatementCallback;\n import com.google.javascript.rhino.IR;\n import com.google.javascript.rhino.Node;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Set;\n \n /**\n  * Finds all references to global symbols and rewrites them to be property\n \n   // Appended to variables names that conflict with globalSymbolNamespace.\n   private static final String DISAMBIGUATION_SUFFIX = \"$\";\n+  private static final String WINDOW = \"window\";\n+  private static final Set<String> SPECIAL_EXTERNS =\n+      ImmutableSet.of(WINDOW, \"eval\", \"arguments\");\n \n   private final AbstractCompiler compiler;\n   private final String globalSymbolNamespace;\n     NodeTraversal.traverse(compiler, root, new RewriteScopeCallback());\n     // 3. removing the var from every statement in global scope.\n     NodeTraversal.traverse(compiler, root, new RemoveGlobalVarCallback());\n+\n+    // Extra pass which makes all extern global symbols reference window\n+    // explicitly.\n+    NodeTraversal.traverse(compiler, root,\n+        new MakeExternsReferenceWindowExplicitly());\n   }\n \n   /**\n       return comma;\n     }\n   }\n+\n+  /**\n+   * Rewrites extern names to be explicit children of window instead of only\n+   * implicitly referencing it.\n+   * This enables injecting window into a scope and make all global symbol\n+   * depend on the injected object.\n+   */\n+  private class MakeExternsReferenceWindowExplicitly extends\n+      AbstractPostOrderCallback {\n+\n+    @Override\n+    public void visit(NodeTraversal t, Node n, Node parent) {\n+      if (!n.isName()) {\n+        return;\n+      }\n+      String name = n.getString();\n+      Scope.Var var = t.getScope().getVar(name);\n+      if (name.length() > 0 && (var == null || var.isExtern()) &&\n+          !globalSymbolNamespace.equals(name) &&\n+          !SPECIAL_EXTERNS.contains(name)) {\n+        parent.replaceChild(n, IR.getprop(IR.name(WINDOW), IR.string(name))\n+            .srcrefTree(n));\n+        compiler.reportCodeChange();\n+      }\n+    }\n+\n+  }\n }\n--- a/test/com/google/javascript/jscomp/RescopeGlobalSymbolsTest.java\n+++ b/test/com/google/javascript/jscomp/RescopeGlobalSymbolsTest.java\n         \"_.foo = function () { var _$a$ = 1;}\");\n   }\n \n+  public void testExterns() {\n+    test(\"var document;\",\n+        \"document\",\n+        \"window.document\", null, null);\n+    test(\"var document;\",\n+        \"document.getElementsByTagName('test')\",\n+        \"window.document.getElementsByTagName('test')\", null, null);\n+    test(\"var document;\",\n+        \"window.document.getElementsByTagName('test')\",\n+        \"window.document.getElementsByTagName('test')\", null, null);\n+    test(\"var document;document.getElementsByTagName\",\n+        \"document.getElementsByTagName('test')\",\n+        \"window.document.getElementsByTagName('test')\", null, null);\n+    test(\"var document,navigator\",\n+        \"document.navigator;navigator\",\n+        \"window.document.navigator;window.navigator\", null, null);\n+    test(\"var iframes\",\n+        \"function test() { iframes.resize(); }\",\n+        \"_.test = function() { window.iframes.resize(); }\", null, null);\n+    test(\"var iframes\",\n+        \"var foo = iframes;\",\n+        \"_.foo = window.iframes;\", null, null);\n+    // Special names.\n+    test(\"var arguments, window, eval;\",\n+        \"arguments;window;eval;\",\n+        \"arguments;window;eval;\", null, null);\n+    // Actually not an extern.\n+    test(\"\",\n+        \"document\",\n+        \"window.document\", null, null);\n+  }\n+\n   private class StringCompare extends CompilerTestCase {\n \n     StringCompare() {", "timestamp": 1332293558, "metainfo": ""}