{"sha": "68c9dd762c89b2d1d0e2c2edb1e82df43602e7bc", "log": "Record the original source comment if parseJsDocDocumentation is enabled  R=tylerg DELTA=47  (44 added, 1 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=177   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n           new JsDocTokenStream(comment.substring(numOpeningChars),\n                                lineno,\n                                position2charno(position) + numOpeningChars),\n+          node,\n           sourceName,\n           config,\n           errorReporter);\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;\n+import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.JSDocInfoBuilder;\n import com.google.javascript.rhino.JSTypeExpression;\n   }\n \n   JsDocInfoParser(JsDocTokenStream stream,\n+                  Comment commentNode,\n                   String sourceName,\n                   Config config,\n                   ErrorReporter errorReporter) {\n     this.stream = stream;\n     this.sourceName = sourceName;\n     this.jsdocBuilder = new JSDocInfoBuilder(config.parseJsDocDocumentation);\n+    if (commentNode != null) {\n+      this.jsdocBuilder.recordOriginalCommentString(commentNode.getValue());\n+    }\n     this.annotationNames = config.annotationNames;\n     this.suppressionNames = config.suppressionNames;\n \n         false);\n     JsDocInfoParser parser = new JsDocInfoParser(\n         new JsDocTokenStream(typeString),\n+        null,\n         \"typeparsing\",\n         config,\n         NullErrorReporter.forNewRhino());\n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n   }\n \n   private static final class LazilyInitializedDocumentation {\n-    // TODO(nicksantos): Use UIntProps to clean up all of this. It takes\n-    // care of all the lazy-instantiation internally.\n+    String sourceComment = null;\n     List<Marker> markers = null;\n \n     Map<String, String> parameters = null;\n   public boolean hasModifies() {\n     return info != null && info.modifies != null;\n   }\n+\n+  /**\n+   * Returns the original JSDoc comment string. Returns null unless\n+   * parseJsDocDocumentation is enabled via the ParserConfig.\n+   */\n+  public String getOriginalCommentString() {\n+    return documentation == null ? null : documentation.sourceComment;\n+  }\n+\n+  void setOriginalCommentString(String sourceComment) {\n+    if (!lazyInitDocumentation()) {\n+      return;\n+    }\n+    documentation.sourceComment = sourceComment;\n+  }\n }\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n     this.parseDocumentation = parseDocumentation;\n   }\n \n+  /**\n+   * Sets the original JSDoc comment string. This is a no-op if the builder\n+   * isn't configured to record documentation.\n+   */\n+  public void recordOriginalCommentString(String sourceComment) {\n+    if (parseDocumentation) {\n+      currentInfo.setOriginalCommentString(sourceComment);\n+    }\n+  }\n+\n   public boolean shouldParseDocumentation() {\n     return parseDocumentation;\n   }\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.mozilla.rhino.CompilerEnvirons;\n import com.google.javascript.jscomp.mozilla.rhino.Parser;\n+import com.google.javascript.jscomp.mozilla.rhino.Token.CommentType;\n import com.google.javascript.jscomp.mozilla.rhino.ast.AstRoot;\n import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;\n import com.google.javascript.jscomp.testing.TestErrorReporter;\n       \"* @supported */\");\n   }\n \n+  public void testGetOriginalCommentString() throws Exception {\n+    String comment = \"* @desc This is a comment */\";\n+    JSDocInfo info = parse(comment);\n+    assertNull(info.getOriginalCommentString());\n+    info = parse(comment, true /* parseDocumentation */);\n+    assertEquals(comment, info.getOriginalCommentString());\n+  }\n+\n   /**\n    * Asserts that a documentation field exists on the given marker.\n    *\n         new JsDocInfoParser(\n             new JsDocTokenStream(comment.getValue().substring(3),\n                 comment.getLineno()),\n+            comment,\n             script.getSourceName(),\n             config,\n             testErrorReporter);\n \n     Config config = new Config(extraAnnotations, extraSuppressions,\n         parseDocumentation, false);\n-    JsDocInfoParser jsdocParser = new JsDocInfoParser(stream(comment),\n+    JsDocInfoParser jsdocParser = new JsDocInfoParser(\n+        stream(comment),\n+        new Comment(0, 0, CommentType.JSDOC, comment),\n         \"testcode\", config, errorReporter);\n \n     if (fileLevelJsDocBuilder != null) {", "timestamp": 1292959115, "metainfo": ""}