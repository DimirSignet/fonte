{"sha": "0f3beda56236a03c2de371a0aa776522ef24ffb6", "log": "Applying the synchronization from LANG-369  ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n         if (StringUtils.isNotEmpty(methodName) && !isCauseMethodName(methodName)) {            \n             List list = getCauseMethodNameList();\n             if (list.add(methodName)) {\n-                CAUSE_METHOD_NAMES = toArray(list);\n+                synchronized(CAUSE_METHOD_NAMES) {\n+                    CAUSE_METHOD_NAMES = toArray(list);\n+                }\n             }\n         }\n     }\n         if (StringUtils.isNotEmpty(methodName)) {\n             List list = getCauseMethodNameList();\n             if (list.remove(methodName)) {\n-                CAUSE_METHOD_NAMES = toArray(list);\n+                synchronized(CAUSE_METHOD_NAMES) {\n+                    CAUSE_METHOD_NAMES = toArray(list);\n+                }\n             }\n         }\n     }\n      * @return {@link #CAUSE_METHOD_NAMES} as a List.\n      */\n     private static ArrayList getCauseMethodNameList() {\n-        return new ArrayList(Arrays.asList(CAUSE_METHOD_NAMES));\n+        synchronized(CAUSE_METHOD_NAMES) {\n+            return new ArrayList(Arrays.asList(CAUSE_METHOD_NAMES));\n+        }\n     }\n \n     /**\n      * @since 2.1\n      */\n     public static boolean isCauseMethodName(String methodName) {\n-        return ArrayUtils.indexOf(CAUSE_METHOD_NAMES, methodName) >= 0;\n+        synchronized(CAUSE_METHOD_NAMES) {\n+            return ArrayUtils.indexOf(CAUSE_METHOD_NAMES, methodName) >= 0;\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n      * @since 1.0\n      */\n     public static Throwable getCause(Throwable throwable) {\n-        return getCause(throwable, CAUSE_METHOD_NAMES);\n+        synchronized(CAUSE_METHOD_NAMES) {\n+            return getCause(throwable, CAUSE_METHOD_NAMES);\n+        }\n     }\n \n     /**\n         Throwable cause = getCauseUsingWellKnownTypes(throwable);\n         if (cause == null) {\n             if (methodNames == null) {\n-                methodNames = CAUSE_METHOD_NAMES;\n+                synchronized(CAUSE_METHOD_NAMES) {\n+                    methodNames = CAUSE_METHOD_NAMES;\n+                }\n             }\n             for (int i = 0; i < methodNames.length; i++) {\n                 String methodName = methodNames[i];\n         }\n \n         Class cls = throwable.getClass();\n-        for (int i = 0, isize = CAUSE_METHOD_NAMES.length; i < isize; i++) {\n-            try {\n-                Method method = cls.getMethod(CAUSE_METHOD_NAMES[i], null);\n-                if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {\n-                    return true;\n+        synchronized(CAUSE_METHOD_NAMES) {\n+            for (int i = 0, isize = CAUSE_METHOD_NAMES.length; i < isize; i++) {\n+                try {\n+                    Method method = cls.getMethod(CAUSE_METHOD_NAMES[i], null);\n+                    if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {\n+                        return true;\n+                    }\n+                } catch (NoSuchMethodException ignored) {\n+                    // exception ignored\n+                } catch (SecurityException ignored) {\n+                    // exception ignored\n                 }\n-            } catch (NoSuchMethodException ignored) {\n-                // exception ignored\n-            } catch (SecurityException ignored) {\n-                // exception ignored\n             }\n         }\n ", "timestamp": 1194897510, "metainfo": ""}