{"sha": "96845b81ce0fc2594e3e7f16c3838f041c8577bb", "log": "New methods and testing of StrBuilder  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n      * Constructor that creates an empty builder initial capacity 32 characters.\n      */\n     public StrBuilder() {\n-        this(32);\n+        this(CAPACITY);\n     }\n \n     /**\n     }\n \n     /**\n-     * Clears the string builder (convenience Collections API style method).\n-     * <p>\n-     * This method is the same as {@link #setLength(int)} and is provided to match the\n-     * API of Collections.\n-     */\n-    public void clear() {\n-        size = 0;\n-    }\n-\n-    /**\n      * Checks is the string builder is empty (convenience Collections API style method).\n      * <p>\n      * This method is the same as checking {@link #length()} and is provided to match the\n      */\n     public boolean isEmpty() {\n         return size == 0;\n+    }\n+\n+    /**\n+     * Clears the string builder (convenience Collections API style method).\n+     * <p>\n+     * This method does not reduce the size of the internal character buffer.\n+     * To do that, call <code>clear()</code> followed by {@link #minimizeCapacity()}.\n+     * <p>\n+     * This method is the same as {@link #setLength(int)} and is provided to match the\n+     * API of Collections.\n+     */\n+    public void clear() {\n+        size = 0;\n     }\n \n     //-----------------------------------------------------------------------\n     public StrBuilder append(char[] chars, int startIndex, int length) {\n         if (chars == null) {\n             return this;\n+        }\n+        if (startIndex < 0 || startIndex > chars.length) {\n+            throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n         }\n         if (length < 0) {\n             throw new StringIndexOutOfBoundsException(\"length must not be negative\");\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Appends an array placing separators between each pair of values, but\n-     * not after the last.\n+     * Appends an array placing separators between each value, but\n+     * not before the first or after the last.\n      * Appending a null array will have no effect.\n      * Each object is appended using {@link #append(Object)}.\n      *\n     }\n \n     /**\n-     * Appends a collection placing separators between each pair of values, but\n-     * not after the last.\n+     * Appends a collection placing separators between each value, but\n+     * not before the first or after the last.\n      * Appending a null collection will have no effect.\n      * Each object is appended using {@link #append(Object)}.\n      *\n         return this;\n     }\n \n+    /**\n+     * Appends an iterator placing separators between each value, but\n+     * not before the first or after the last.\n+     * Appending a null iterator will have no effect.\n+     * Each object is appended using {@link #append(Object)}.\n+     *\n+     * @param it  the iterator to append\n+     * @param separator  the separator to use, null means no separator\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendWithSeparators(Iterator it, String separator) {\n+        if (it != null) {\n+            separator = (separator == null ? \"\" : separator);\n+            append(it.next());\n+            while (it.hasNext()) {\n+                append(separator);\n+                append(it.next());\n+            }\n+        }\n+        return this;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Appends the pad character to the builder the specified number of times.\n         return this;\n     }\n \n-    /**\n-     * Appends an object to the builder padding on the left to a fixed length.\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Appends an object to the builder padding on the left to a fixed width.\n+     * The <code>toString</code> of the object is used.\n      * If the object is larger than the length, the left hand side is lost.\n      * If the object is null, the null text value is used.\n      * \n-     * @param obj  the object to append\n-     * @param length  the fixed field width\n+     * @param obj  the object to append, null uses null text\n+     * @param width  the fixed field width, zero or negative has no effect\n      * @param padChar  the pad character to use\n      * @return this, to enable chaining\n      */\n-    public StrBuilder appendFixedLengthPadLeft(Object obj, int length, char padChar) {\n-        if (length > 0) {\n-            ensureCapacity(size + length);\n+    public StrBuilder appendFixedWidthPadLeft(Object obj, int width, char padChar) {\n+        if (width > 0) {\n+            ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n-            if (strLen >= length) {\n-                str.getChars(strLen - length, strLen, buf, size);\n+            if (strLen >= width) {\n+                str.getChars(strLen - width, strLen, buf, size);\n             } else {\n-                int padLen = length - strLen;\n+                int padLen = width - strLen;\n                 for (int i = 0; i < padLen; i++) {\n                     buf[size + i] = padChar;\n                 }\n                 str.getChars(0, strLen, buf, size + padLen);\n             }\n-            size += length;\n-        }\n-        return this;\n+            size += width;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Appends an object to the builder padding on the left to a fixed width.\n+     * The <code>String.valueOf</code> of the object is used.\n+     * If the formatted value is larger than the length, the left hand side is lost.\n+     * \n+     * @param value  the value to append\n+     * @param width  the fixed field width, zero or negative has no effect\n+     * @param padChar  the pad character to use\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendFixedWidthPadLeft(int value, int width, char padChar) {\n+        return appendFixedWidthPadLeft(String.valueOf(value), width, padChar);\n     }\n \n     /**\n      * Appends an object to the builder padding on the right to a fixed length.\n+     * The <code>toString</code> of the object is used.\n      * If the object is larger than the length, the right hand side is lost.\n      * If the object is null, null text value is used.\n      * \n-     * @param obj  the object to append\n-     * @param length  the fixed field width\n+     * @param obj  the object to append, null uses null text\n+     * @param width  the fixed field width, zero or negative has no effect\n      * @param padChar  the pad character to use\n      * @return this, to enable chaining\n      */\n-    public StrBuilder appendFixedLengthPadRight(Object obj, int length, char padChar) {\n-        if (length > 0) {\n-            ensureCapacity(size + length);\n+    public StrBuilder appendFixedWidthPadRight(Object obj, int width, char padChar) {\n+        if (width > 0) {\n+            ensureCapacity(size + width);\n             String str = (obj == null ? getNullText() : obj.toString());\n             int strLen = str.length();\n-            if (strLen >= length) {\n-                str.getChars(strLen - length, strLen, buf, size);\n+            if (strLen >= width) {\n+                str.getChars(0, strLen, buf, size);\n             } else {\n-                int padLen = length - strLen;\n+                int padLen = width - strLen;\n                 str.getChars(0, strLen, buf, size);\n                 for (int i = 0; i < padLen; i++) {\n                     buf[size + strLen + i] = padChar;\n                 }\n             }\n-            size += length;\n-        }\n-        return this;\n+            size += width;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Appends an object to the builder padding on the right to a fixed length.\n+     * The <code>String.valueOf</code> of the object is used.\n+     * If the object is larger than the length, the right hand side is lost.\n+     * \n+     * @param value  the value to append\n+     * @param width  the fixed field width, zero or negative has no effect\n+     * @param padChar  the pad character to use\n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder appendFixedWidthPadRight(int value, int width, char padChar) {\n+        return appendFixedWidthPadRight(String.valueOf(value), width, padChar);\n     }\n \n     //-----------------------------------------------------------------------\n         return this;\n     }\n \n+//    /**\n+//     * Gets a String version of the string builder by calling the internal\n+//     * constructor of String by reflection.\n+//     * <p>\n+//     * WARNING: You must not use the StrBuilder after calling this method\n+//     * as the buffer is now shared with the String object. To ensure this,\n+//     * the internal character array is set to null, so you will get\n+//     * NullPointerExceptions on all method calls.\n+//     *\n+//     * @return the builder as a String\n+//     */\n+//    public String toSharedString() {\n+//        try {\n+//            Constructor con = String.class.getDeclaredConstructor(\n+//                new Class[] {int.class, int.class, char[].class});\n+//            con.setAccessible(true);\n+//            char[] buffer = buf;\n+//            buf = null;\n+//            size = -1;\n+//            nullText = null;\n+//            return (String) con.newInstance(\n+//                new Object[] {new Integer(0), new Integer(size), buffer});\n+//            \n+//        } catch (Exception ex) {\n+//            ex.printStackTrace();\n+//            throw new UnsupportedOperationException(\"StrBuilder.toSharedString is unsupported: \" + ex.getMessage());\n+//        }\n+//    }\n+\n     /**\n      * Gets a String version of the string builder, creating a new instance\n      * each time the method is called.\n      */\n     public String toString() {\n         return new String(buf, 0, size);\n+    }\n+\n+    /**\n+     * Gets a StringBuffer version of the string builder, creating a\n+     * new instance each time the method is called.\n+     *\n+     * @return the builder as a StringBuffer\n+     */\n+    public StringBuffer toStringBuffer() {\n+        return new StringBuffer(size).append(buf, 0, size);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n /*\n- * Copyright 2002-2005 The Apache Software Foundation.\n+ * Copyright 2005 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Collections;\n+import java.util.Iterator;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n  */\n public class StrBuilderTest extends TestCase {\n \n+    /** Test subclass of Object, with a toString method. */\n     private static Object FOO = new Object() {\n         public String toString() {\n             return \"foo\";\n     };\n \n     /**\n-     * Main.\n+     * Main method.\n      * \n-     * @param args\n-     *            command line arguments, ignored\n+     * @param args  command line arguments, ignored\n      */\n     public static void main(String[] args) {\n         TestRunner.run(suite());\n         super(name);\n     }\n \n-    public void testAppend() {\n-\n-        StrBuilder sb = new StrBuilder();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendNull();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.append((Object) null);\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.append(FOO);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((String) null);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(\"\");\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(\"bar\");\n-        assertEquals(\"foobar\", sb.toString());\n-\n-        sb.append((StringBuffer) null);\n-        assertEquals(\"foobar\", sb.toString());\n-\n-        sb.append(new StringBuffer(\"baz\"));\n-        assertEquals(\"foobarbaz\", sb.toString());\n-\n-        sb.clear();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.append((char[]) null);\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.append(new char[0]);\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.append(new char[]{'f', 'o', 'o'});\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append((char[]) null, 0, 1);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        try {\n-            sb.append(new char[]{'b', 'a', 'r'}, -1, 1);\n-            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new char[]{'b', 'a', 'r'}, 3, 1);\n-            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new char[]{'b', 'a', 'r'}, 1, -1);\n-            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.append(new char[]{'b', 'a', 'r'}, 1, 3);\n-            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        // These next two cases slip by the error condition checks but are silent modifications\n-        sb.append(new char[]{'b', 'a', 'r'}, -1, 0);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(new char[]{'b', 'a', 'r'}, 3, 0);\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.append(new char[]{'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f'}, 3, 3);\n-        assertEquals(\"foobar\", sb.toString());\n-\n-        sb.append(true);\n-        assertEquals(\"foobartrue\", sb.toString());\n-\n-        sb.append(false);\n-        assertEquals(\"foobartruefalse\", sb.toString());\n-\n-        sb.append('!');\n-        assertEquals(\"foobartruefalse!\", sb.toString());\n-\n-        sb.clear();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.append(0);\n-        assertEquals(\"0\", sb.toString());\n-\n-        sb.append(1L);\n-        assertEquals(\"01\", sb.toString());\n-\n-        sb.append(2.3F);\n-        assertEquals(\"012.3\", sb.toString());\n-\n-        sb.append(4.5D);\n-        assertEquals(\"012.34.5\", sb.toString());\n-    }\n-\n-    public void testAppendFixedLength() {\n-\n-        StrBuilder sb = new StrBuilder();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendFixedLengthPadLeft(\"foo\", -1, '-');\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendFixedLengthPadLeft(\"foo\", 0, '-');\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendFixedLengthPadLeft(\"foo\", 1, '-');\n-        assertEquals(\"o\", sb.toString());\n-\n-        sb.clear();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendFixedLengthPadLeft(\"foo\", 2, '-');\n-        assertEquals(\"oo\", sb.toString());\n-\n-        sb.clear();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendFixedLengthPadLeft(\"foo\", 3, '-');\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.clear();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendFixedLengthPadLeft(\"foo\", 4, '-');\n-        assertEquals(\"-foo\", sb.toString());\n-\n-        sb.clear();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendFixedLengthPadLeft(\"foo\", 10, '-');\n-        assertEquals(10, sb.length());\n-        // 1234567890\n-        assertEquals(\"-------foo\", sb.toString());\n-\n-        sb.clear();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendFixedLengthPadRight(\"foo\", -1, '-');\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendFixedLengthPadRight(\"foo\", 0, '-');\n-        assertEquals(\"\", sb.toString());\n-\n-        /*\n-         * \n-         * TODO: appears the implementation for appendFixedLengthPadRight is broken?\n-         * \n-         * sb.appendFixedLengthPadRight(\"foo\", 1, '-'); assertEquals(\"f\", sb.toString());\n-         * \n-         * sb.clear(); assertEquals(\"\", sb.toString());\n-         * \n-         * sb.appendFixedLengthPadRight(\"foo\", 2, '-'); assertEquals(\"fo\", sb.toString());\n-         * \n-         * sb.clear(); assertEquals(\"\", sb.toString());\n-         * \n-         * sb.appendFixedLengthPadRight(\"foo\", 3, '-'); assertEquals(\"foo\", sb.toString());\n-         * \n-         * sb.clear(); assertEquals(\"\", sb.toString());\n-         * \n-         * sb.appendFixedLengthPadRight(\"foo\", 4, '-'); assertEquals(\"foo-\", sb.toString());\n-         * \n-         * sb.clear(); assertEquals(\"\", sb.toString());\n-         * \n-         * sb.appendFixedLengthPadRight(\"foo\", 10, '-'); assertEquals(10, sb.length()); // 1234567890\n-         * assertEquals(\"foo-------\", sb.toString());\n-         * \n-         */\n-    }\n-\n-    public void testAppendPadding() {\n-\n-        StrBuilder sb = new StrBuilder();\n-        sb.append(\"foo\");\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.appendPadding(-1, '-');\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.appendPadding(0, '-');\n-        assertEquals(\"foo\", sb.toString());\n-\n-        sb.appendPadding(1, '-');\n-        assertEquals(\"foo-\", sb.toString());\n-\n-        sb.appendPadding(16, '-');\n-        assertEquals(20, sb.length());\n-        // 12345678901234567890\n-        assertEquals(\"foo-----------------\", sb.toString());\n-    }\n-\n-    public void testAppendWithNullText() {\n-\n-        StrBuilder sb = new StrBuilder();\n-        sb.setNullText(\"null\");\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendNull();\n-        assertEquals(\"null\", sb.toString());\n-\n-        sb.append((Object) null);\n-        assertEquals(\"nullnull\", sb.toString());\n-\n-        sb.append(FOO);\n-        assertEquals(\"nullnullfoo\", sb.toString());\n-\n-        sb.append((String) null);\n-        assertEquals(\"nullnullfoonull\", sb.toString());\n-\n-        sb.append(\"\");\n-        assertEquals(\"nullnullfoonull\", sb.toString());\n-\n-        sb.append(\"bar\");\n-        assertEquals(\"nullnullfoonullbar\", sb.toString());\n-\n-        sb.append((StringBuffer) null);\n-        assertEquals(\"nullnullfoonullbarnull\", sb.toString());\n-\n-        sb.append(new StringBuffer(\"baz\"));\n-        assertEquals(\"nullnullfoonullbarnullbaz\", sb.toString());\n-    }\n-\n-    public void testAppendWithSeparators() {\n-\n-        StrBuilder sb = new StrBuilder();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendWithSeparators((Object[]) null, \",\");\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendWithSeparators(new Object[0], \",\");\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, \",\");\n-        assertEquals(\"foo,bar,baz\", sb.toString());\n-\n-        sb.clear();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, null);\n-        assertEquals(\"foobarbaz\", sb.toString());\n-\n-        sb.clear();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n-        assertEquals(\"foo,,baz\", sb.toString());\n-\n-        sb.clear();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendWithSeparators((Collection) null, \",\");\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendWithSeparators(Collections.EMPTY_LIST, \",\");\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), \",\");\n-        assertEquals(\"foo,bar,baz\", sb.toString());\n-\n-        sb.clear();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), null);\n-        assertEquals(\"foobarbaz\", sb.toString());\n-\n-        sb.clear();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n-        assertEquals(\"foo,,baz\", sb.toString());\n-    }\n-\n-    public void testAppendWithSeparatorsWithNullText() {\n-\n-        StrBuilder sb = new StrBuilder();\n-        sb.setNullText(\"null\");\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n-        assertEquals(\"foo,null,baz\", sb.toString());\n-\n-        sb.clear();\n-        assertEquals(\"\", sb.toString());\n-\n-        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n-        assertEquals(\"foo,null,baz\", sb.toString());\n-    }\n-\n+    //-----------------------------------------------------------------------\n+    public void testConstructors() {\n+        StrBuilder sb0 = new StrBuilder();\n+        assertEquals(32, sb0.capacity());\n+        assertEquals(0, sb0.length());\n+        assertEquals(0, sb0.size());\n+\n+        StrBuilder sb1 = new StrBuilder(32);\n+        assertEquals(32, sb1.capacity());\n+        assertEquals(0, sb1.length());\n+        assertEquals(0, sb1.size());\n+\n+        StrBuilder sb2 = new StrBuilder(0);\n+        assertEquals(32, sb2.capacity());\n+        assertEquals(0, sb2.length());\n+        assertEquals(0, sb2.size());\n+\n+        StrBuilder sb3 = new StrBuilder(-1);\n+        assertEquals(32, sb3.capacity());\n+        assertEquals(0, sb3.length());\n+        assertEquals(0, sb3.size());\n+\n+        StrBuilder sb4 = new StrBuilder(1);\n+        assertEquals(1, sb4.capacity());\n+        assertEquals(0, sb4.length());\n+        assertEquals(0, sb4.size());\n+\n+        StrBuilder sb5 = new StrBuilder((String) null);\n+        assertEquals(32, sb5.capacity());\n+        assertEquals(0, sb5.length());\n+        assertEquals(0, sb5.size());\n+\n+        StrBuilder sb6 = new StrBuilder(\"\");\n+        assertEquals(32, sb6.capacity());\n+        assertEquals(0, sb6.length());\n+        assertEquals(0, sb6.size());\n+\n+        StrBuilder sb7 = new StrBuilder(\"foo\");\n+        assertEquals(35, sb7.capacity());\n+        assertEquals(3, sb7.length());\n+        assertEquals(3, sb7.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testCapacityAndLength() {\n-\n         StrBuilder sb = new StrBuilder();\n         assertEquals(32, sb.capacity());\n         assertEquals(0, sb.length());\n         assertTrue(sb.isEmpty());\n     }\n \n-    public void testCharArray() {\n-        // TODO\n-    }\n-\n-    public void testConstructor() {\n-\n-        StrBuilder sb0 = new StrBuilder();\n-        assertTrue(sb0.isEmpty());\n-        StrBuilder sb1 = new StrBuilder(32);\n-        assertTrue(sb1.isEmpty());\n-        StrBuilder sb2 = new StrBuilder(0);\n-        assertTrue(sb2.isEmpty());\n-        StrBuilder sb3 = new StrBuilder(-1);\n-        assertTrue(sb3.isEmpty());\n-        StrBuilder sb4 = new StrBuilder(1);\n-        assertTrue(sb4.isEmpty());\n-        StrBuilder sb5 = new StrBuilder((String) null);\n-        assertTrue(sb5.isEmpty());\n-        StrBuilder sb6 = new StrBuilder(\"\");\n-        assertTrue(sb6.isEmpty());\n-        StrBuilder sb7 = new StrBuilder(\"foo\");\n-        assertFalse(sb7.isEmpty());\n-    }\n-\n-    public void testGetSetChar() {\n-\n-        StrBuilder sb = new StrBuilder();\n-\n+    //-----------------------------------------------------------------------\n+    public void testLength() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(0, sb.length());\n+        \n+        sb.append(\"Hello\");\n+        assertEquals(5, sb.length());\n+    }\n+\n+    public void testSetLength() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(\"Hello\");\n+        sb.setLength(2);\n+        assertEquals(\"He\", sb.toString());\n+\n+        try {\n+            sb.setLength(-1);\n+            fail(\"setLength(-1) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCapacity() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(sb.buf.length, sb.capacity());\n+        \n+        sb.append(\"HelloWorldHelloWorldHelloWorldHelloWorld\");\n+        assertEquals(sb.buf.length, sb.capacity());\n+    }\n+\n+    public void testEnsureCapacity() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.ensureCapacity(2);\n+        assertEquals(true, sb.capacity() >= 2);\n+        \n+        sb.ensureCapacity(-1);\n+        assertEquals(true, sb.capacity() >= 0);\n+        \n+        sb.append(\"HelloWorld\");\n+        sb.ensureCapacity(40);\n+        assertEquals(true, sb.capacity() >= 40);\n+    }\n+\n+    public void testMinimizeCapacity() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.minimizeCapacity();\n+        assertEquals(0, sb.capacity());\n+        \n+        sb.append(\"HelloWorld\");\n+        sb.minimizeCapacity();\n+        assertEquals(10, sb.capacity());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSize() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(0, sb.size());\n+        \n+        sb.append(\"Hello\");\n+        assertEquals(5, sb.size());\n+    }\n+\n+    public void testIsEmpty() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(true, sb.isEmpty());\n+        \n+        sb.append(\"Hello\");\n+        assertEquals(false, sb.isEmpty());\n+        \n+        sb.clear();\n+        assertEquals(true, sb.isEmpty());\n+    }\n+\n+    public void testClear() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(\"Hello\");\n+        sb.clear();\n+        assertEquals(0, sb.length());\n+        assertEquals(true, sb.buf.length >= 5);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCharAt() {\n+        StrBuilder sb = new StrBuilder();\n         try {\n             sb.charAt(0);\n             fail(\"charAt(0) expected IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException e) {\n             // expected\n         }\n-\n         try {\n             sb.charAt(-1);\n             fail(\"charAt(-1) expected IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException e) {\n             // expected\n         }\n-\n-        try {\n-            sb.setCharAt(0, 'f');\n-            fail(\"setCharAt(0,) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n-        try {\n-            sb.setCharAt(-1, 'f');\n-            fail(\"setCharAt(-1,) expected IndexOutOfBoundsException\");\n-        } catch (IndexOutOfBoundsException e) {\n-            // expected\n-        }\n-\n         sb.append(\"foo\");\n         assertEquals('f', sb.charAt(0));\n         assertEquals('o', sb.charAt(1));\n         assertEquals('o', sb.charAt(2));\n-\n+        try {\n+            sb.charAt(-1);\n+            fail(\"charAt(-1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n         try {\n             sb.charAt(3);\n             fail(\"charAt(3) expected IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException e) {\n             // expected\n         }\n-\n+    }\n+\n+    public void testSetCharAt() {\n+        StrBuilder sb = new StrBuilder();\n+        try {\n+            sb.setCharAt(0, 'f');\n+            fail(\"setCharAt(0,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        try {\n+            sb.setCharAt(-1, 'f');\n+            fail(\"setCharAt(-1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        sb.append(\"foo\");\n         sb.setCharAt(0, 'b');\n         sb.setCharAt(1, 'a');\n         sb.setCharAt(2, 'r');\n-\n         try {\n             sb.setCharAt(3, '!');\n             fail(\"setCharAt(3,) expected IndexOutOfBoundsException\");\n         } catch (IndexOutOfBoundsException e) {\n             // expected\n         }\n-\n-        assertEquals('b', sb.charAt(0));\n-        assertEquals('a', sb.charAt(1));\n-        assertEquals('r', sb.charAt(2));\n-    }\n-\n-    public void testInitialCapacityAndLength() {\n-\n-        StrBuilder sb0 = new StrBuilder();\n-        assertEquals(32, sb0.capacity());\n-        assertEquals(0, sb0.length());\n-        assertEquals(0, sb0.size());\n-\n-        StrBuilder sb1 = new StrBuilder(32);\n-        assertEquals(32, sb1.capacity());\n-        assertEquals(0, sb1.length());\n-        assertEquals(0, sb1.size());\n-\n-        StrBuilder sb2 = new StrBuilder(0);\n-        assertEquals(32, sb2.capacity());\n-        assertEquals(0, sb2.length());\n-        assertEquals(0, sb2.size());\n-\n-        StrBuilder sb3 = new StrBuilder(-1);\n-        assertEquals(32, sb3.capacity());\n-        assertEquals(0, sb3.length());\n-        assertEquals(0, sb3.size());\n-\n-        StrBuilder sb4 = new StrBuilder(1);\n-        assertEquals(1, sb4.capacity());\n-        assertEquals(0, sb4.length());\n-        assertEquals(0, sb4.size());\n-\n-        StrBuilder sb5 = new StrBuilder((String) null);\n-        assertEquals(32, sb5.capacity());\n-        assertEquals(0, sb5.length());\n-        assertEquals(0, sb5.size());\n-\n-        StrBuilder sb6 = new StrBuilder(\"\");\n-        assertEquals(32, sb6.capacity());\n-        assertEquals(0, sb6.length());\n-        assertEquals(0, sb6.size());\n-\n-        StrBuilder sb7 = new StrBuilder(\"foo\");\n-        assertEquals(35, sb7.capacity());\n-        assertEquals(3, sb7.length());\n-        assertEquals(3, sb7.size());\n+        assertEquals(\"bar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNullText() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(null, sb.getNullText());\n+\n+        sb.setNullText(\"null\");\n+        assertEquals(\"null\", sb.getNullText());\n+\n+        sb.setNullText(\"\");\n+        assertEquals(null, sb.getNullText());\n+\n+        sb.setNullText(\"NULL\");\n+        assertEquals(\"NULL\", sb.getNullText());\n+\n+        sb.setNullText((String) null);\n+        assertEquals(null, sb.getNullText());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendWithNullText() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"NULL\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendNull();\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb.append((Object) null);\n+        assertEquals(\"NULLNULL\", sb.toString());\n+\n+        sb.append(FOO);\n+        assertEquals(\"NULLNULLfoo\", sb.toString());\n+\n+        sb.append((String) null);\n+        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n+\n+        sb.append(\"\");\n+        assertEquals(\"NULLNULLfooNULL\", sb.toString());\n+\n+        sb.append(\"bar\");\n+        assertEquals(\"NULLNULLfooNULLbar\", sb.toString());\n+\n+        sb.append((StringBuffer) null);\n+        assertEquals(\"NULLNULLfooNULLbarNULL\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"baz\"));\n+        assertEquals(\"NULLNULLfooNULLbarNULLbaz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppend_Object() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendNull();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append((Object) null);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append(FOO);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((String) null);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(\"\");\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(\"bar\");\n+        assertEquals(\"foobar\", sb.toString());\n+\n+        sb.append((StringBuffer) null);\n+        assertEquals(\"foobar\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"baz\"));\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.append(new StrBuilder(\"yes\"));\n+        assertEquals(\"foobarbazyes\", sb.toString());\n+    }\n+\n+    public void testAppend_CharArray() {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        sb.append((char[]) null);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append(new char[0]);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append(new char[]{'f', 'o', 'o'});\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((char[]) null, 0, 1);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, -1, 1);\n+            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 3, 1);\n+            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 1, -1);\n+            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 1, 3);\n+            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, -1, 3);\n+            fail(\"append(char[], -1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 4, 0);\n+            fail(\"append(char[], 4, 0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(new char[]{'b', 'a', 'r'}, 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new char[]{'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f'}, 3, 3);\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    public void testAppend_Primitive() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(true);\n+        assertEquals(\"true\", sb.toString());\n+\n+        sb.append(false);\n+        assertEquals(\"truefalse\", sb.toString());\n+\n+        sb.append('!');\n+        assertEquals(\"truefalse!\", sb.toString());\n+    }\n+\n+    public void testAppend_PrimitiveNumber() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(0);\n+        assertEquals(\"0\", sb.toString());\n+\n+        sb.append(1L);\n+        assertEquals(\"01\", sb.toString());\n+\n+        sb.append(2.3f);\n+        assertEquals(\"012.3\", sb.toString());\n+\n+        sb.append(4.5d);\n+        assertEquals(\"012.34.5\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendPadding() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.appendPadding(-1, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.appendPadding(0, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.appendPadding(1, '-');\n+        assertEquals(\"foo-\", sb.toString());\n+\n+        sb.appendPadding(16, '-');\n+        assertEquals(20, sb.length());\n+        //            12345678901234567890\n+        assertEquals(\"foo-----------------\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendFixedWidthPadLeft() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadLeft(\"foo\", -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 1, '-');\n+        assertEquals(\"o\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 2, '-');\n+        assertEquals(\"oo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 3, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 4, '-');\n+        assertEquals(\"-foo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(\"foo\", 10, '-');\n+        assertEquals(10, sb.length());\n+        //            1234567890\n+        assertEquals(\"-------foo\", sb.toString());\n+\n+        sb.clear();\n+        sb.setNullText(\"null\");\n+        sb.appendFixedWidthPadRight(null, 5, '-');\n+        assertEquals(\"-null\", sb.toString());\n+    }\n+\n+    public void testAppendFixedWidthPadLeft_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadLeft(123, -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 1, '-');\n+        assertEquals(\"3\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 2, '-');\n+        assertEquals(\"23\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 3, '-');\n+        assertEquals(\"123\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 4, '-');\n+        assertEquals(\"-123\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadLeft(123, 10, '-');\n+        assertEquals(10, sb.length());\n+        //            1234567890\n+        assertEquals(\"-------123\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendFixedWidthPadRight() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadRight(\"foo\", -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 1, '-');\n+        assertEquals(\"f\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 2, '-');\n+        assertEquals(\"fo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 3, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 4, '-');\n+        assertEquals(\"foo-\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(\"foo\", 10, '-');\n+        assertEquals(10, sb.length());\n+        //            1234567890\n+        assertEquals(\"foo-------\", sb.toString());\n+\n+        sb.clear();\n+        sb.setNullText(\"null\");\n+        sb.appendFixedWidthPadRight(null, 5, '-');\n+        assertEquals(\"null-\", sb.toString());\n+    }\n+\n+    public void testAppendFixedWidthPadRight_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendFixedWidthPadRight(123, -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 1, '-');\n+        assertEquals(\"1\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 2, '-');\n+        assertEquals(\"12\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 3, '-');\n+        assertEquals(\"123\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 4, '-');\n+        assertEquals(\"123-\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendFixedWidthPadRight(123, 10, '-');\n+        assertEquals(10, sb.length());\n+        //            1234567890\n+        assertEquals(\"123-------\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAppendWithSeparators_Array() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendWithSeparators((Object[]) null, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(new Object[0], \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, \",\");\n+        assertEquals(\"foo,bar,baz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, null);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n+        assertEquals(\"foo,,baz\", sb.toString());\n+    }\n+\n+    public void testAppendWithSeparators_Collection() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendWithSeparators((Collection) null, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Collections.EMPTY_LIST, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), \",\");\n+        assertEquals(\"foo,bar,baz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), null);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n+        assertEquals(\"foo,,baz\", sb.toString());\n+    }\n+\n+    public void testAppendWithSeparators_Iterator() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.appendWithSeparators((Iterator) null, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), \",\");\n+        assertEquals(\"foo,bar,baz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}).iterator(), null);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}).iterator(), \",\");\n+        assertEquals(\"foo,,baz\", sb.toString());\n+    }\n+\n+    public void testAppendWithSeparatorsWithNullText() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"null\");\n+        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n+        assertEquals(\"foo,null,baz\", sb.toString());\n+\n+        sb.clear();\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n+        assertEquals(\"foo,null,baz\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCharArray() {\n+        // TODO\n     }\n \n     public void testInsert() {\n         assertEquals(\"foonullbarbaz\", sb.toString());\n     }\n \n-    public void testNullText() {\n-\n-        StrBuilder sb = new StrBuilder();\n-        assertEquals(null, sb.getNullText());\n-\n-        sb.setNullText(\"null\");\n-        assertEquals(\"null\", sb.getNullText());\n-\n-        sb.setNullText(\"\");\n-        assertEquals(null, sb.getNullText());\n-\n-        sb.setNullText(\"foo\");\n-        assertEquals(\"foo\", sb.getNullText());\n-\n-        sb.setNullText((String) null);\n-        assertEquals(null, sb.getNullText());\n-    }\n }", "timestamp": 1120916462, "metainfo": ""}