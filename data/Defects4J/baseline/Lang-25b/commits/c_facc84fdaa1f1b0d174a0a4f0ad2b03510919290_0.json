{"sha": "facc84fdaa1f1b0d174a0a4f0ad2b03510919290", "log": "Added a utility for examining Throwable objects, as proposed by Costin <costinm@covalent.net> and Henri Yandell <bayard@apache.org>.  Comes complete with a full suite of tests for initial functionality.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+package org.apache.commons.lang.exception;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+/**\n+ * Utility routines for manipulating <code>Throwable</code> objects.\n+ *\n+ * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n+ * @since 1.0\n+ */\n+public class ExceptionUtils\n+{\n+    /**\n+     * The name of the <code>getCause()</code> method.\n+     */\n+    protected static final String CAUSE_METHOD_NAME = \"getCause\";\n+\n+    /**\n+     * The parameters of the <code>getCause()</code> method.\n+     */\n+    protected static final Object[] CAUSE_METHOD_PARAMS = {};\n+\n+    /**\n+     * Constructs a new <code>ExceptionUtils</code>.  Protected to\n+     * discourage instantiation.\n+     */\n+    protected ExceptionUtils()\n+    {\n+    }\n+    \n+    /**\n+     * Introspects the specified <code>Throwable</code> for a\n+     * <code>getCause()</code> method (standard as of JDK 1.4, and\n+     * part of the {@link\n+     * org.apache.commons.lang.exception.NestableException} API),\n+     * extracting and returning the cause of the exception.\n+     * Otherwise, returns <code>null</code>.\n+     * <p>\n+     * TODO: Examine for a \"detail\" public member attribute from\n+     * java.rmi.RemoteException.\n+     *\n+     * @param t The exception to introspect for a cause.\n+     * @return The cause of the <code>Throwable</code>.\n+     */\n+    public static Throwable getCause(Throwable t)\n+    {\n+        Throwable cause = null;\n+\n+        if (t instanceof NestableException)\n+        {\n+            cause = ((NestableException) t).getCause();\n+        }\n+        else if (t instanceof NestableRuntimeException)\n+        {\n+            cause = ((NestableRuntimeException) t).getCause();\n+        }\n+        else\n+        {\n+            Method getCause = null;\n+            Class c = t.getClass();\n+            try\n+            {\n+                getCause = c.getMethod(CAUSE_METHOD_NAME, null);\n+            }\n+            catch (NoSuchMethodException ignored)\n+            {\n+            }\n+            catch (SecurityException ignored)\n+            {\n+            }\n+\n+            if (getCause != null && getCause.getReturnType() == Throwable.class)\n+            {\n+                try\n+                {\n+                    cause = (Throwable) getCause.invoke(t, CAUSE_METHOD_PARAMS);\n+                }\n+                catch (IllegalAccessException ignored)\n+                {\n+                }\n+                catch (IllegalArgumentException ignored)\n+                {\n+                }\n+                catch (InvocationTargetException ignored)\n+                {\n+                }\n+            }\n+        }\n+\n+        return cause;\n+    }\n+    \n+    /**\n+     * Walks through the exception chain to the last element -- the\n+     * \"root\" of the tree -- using {@link #getCause(Throwable)}, and\n+     * returns that exception.\n+     *\n+     * @return The root cause of the <code>Throwable</code>.\n+     * @see #getCause(Throwable)\n+     */\n+    public static Throwable getRootCause(Throwable t)\n+    {\n+        Throwable cause = getCause(t);\n+        if (cause != null)\n+        {\n+            t = cause;\n+            while ((t = getCause(t)) != null)\n+            {\n+                cause = t;\n+            }\n+        }\n+        return cause;\n+    }\n+}\n--- a/src/test/org/apache/commons/lang/exception/ExceptionTestSuite.java\n+++ b/src/test/org/apache/commons/lang/exception/ExceptionTestSuite.java\n         suite.addTest(NestableDelegateTestCase.suite());\n         suite.addTest(NestableExceptionTestCase.suite());\n         suite.addTest(NestableRuntimeExceptionTestCase.suite());\n+        suite.addTest(ExceptionUtilsTestCase.suite());\n         return suite;\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java\n+package org.apache.commons.lang.exception;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Tests {@link org.apache.commons.lang.exception.ExceptionUtils}.\n+ *\n+ * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n+ * @since 1.0\n+ */\n+public class ExceptionUtilsTestCase extends junit.framework.TestCase\n+{\n+    private NestableException nested;\n+    private Throwable withCause;\n+    private Throwable withoutCause;\n+\n+    public ExceptionUtilsTestCase(String name)\n+    {\n+        super(name);\n+    }\n+    \n+    public static Test suite()\n+    {\n+        return new TestSuite(ExceptionUtilsTestCase.class);\n+    }\n+\n+    public void setUp()\n+    {\n+        withoutCause = new ExceptionWithoutCause();\n+        nested = new NestableException(withoutCause);\n+        withCause = new ExceptionWithCause(nested);\n+    }\n+\n+    public void testGetCause()\n+    {\n+        assertNull(ExceptionUtils.getCause(withoutCause));\n+        assertTrue(ExceptionUtils.getCause(nested) == withoutCause);\n+        assertTrue(ExceptionUtils.getCause(withCause) == nested);\n+    }\n+\n+    public void testGetRootCause()\n+    {\n+        assertNull(ExceptionUtils.getRootCause(withoutCause));\n+        assertTrue(ExceptionUtils.getRootCause(withCause) == withoutCause);\n+        assertTrue(ExceptionUtils.getRootCause(withCause) == withoutCause);\n+    }\n+\n+    private static class ExceptionWithCause extends Exception\n+    {\n+        private Throwable cause;\n+\n+        public ExceptionWithCause(Throwable cause)\n+        {\n+            this.cause = cause;\n+        }\n+\n+        public Throwable getCause()\n+        {\n+            return cause;\n+        }\n+    }\n+\n+    private static class ExceptionWithoutCause extends Exception\n+    {\n+        /**\n+         * Bogus signature.\n+         */\n+        public void getCause()\n+        {\n+        }\n+    }\n+}", "timestamp": 1029261958, "metainfo": ""}