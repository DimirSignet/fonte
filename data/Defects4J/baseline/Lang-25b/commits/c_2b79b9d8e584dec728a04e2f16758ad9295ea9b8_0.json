{"sha": "2b79b9d8e584dec728a04e2f16758ad9295ea9b8", "log": "Moving the indexOf(String, String, int) method above the ordinalIndexOf methods to put it with its overloaded peers. LANG-590  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n     }\n \n     /**\n+     * <p>Finds the first index within a String, handling <code>null</code>.\n+     * This method uses {@link String#indexOf(String, int)}.</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A negative start position is treated as zero.\n+     * An empty (\"\") search String always matches.\n+     * A start position greater than the string length only matches\n+     * an empty search String.</p>\n+     *\n+     * <pre>\n+     * StringUtils.indexOf(null, *, *)          = -1\n+     * StringUtils.indexOf(*, null, *)          = -1\n+     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n+     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n+     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n+     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n+     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n+     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n+     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n+     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n+     * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n+     * </pre>\n+     *\n+     * @param str  the String to check, may be null\n+     * @param searchStr  the String to find, may be null\n+     * @param startPos  the start position, negative treated as zero\n+     * @return the first index of the search String,\n+     *  -1 if no match or <code>null</code> string input\n+     * @since 2.0\n+     */\n+    public static int indexOf(String str, String searchStr, int startPos) {\n+        if (str == null || searchStr == null) {\n+            return -1;\n+        }\n+        return str.indexOf(searchStr, startPos);\n+    }\n+\n+    /**\n      * <p>Finds the n-th index within a String, handling <code>null</code>.\n      * This method uses {@link String#indexOf(String)}.</p>\n      *\n             found++;\n         } while (found < ordinal);\n         return index;\n-    }\n-\n-    /**\n-     * <p>Finds the first index within a String, handling <code>null</code>.\n-     * This method uses {@link String#indexOf(String, int)}.</p>\n-     *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n-     * A negative start position is treated as zero.\n-     * An empty (\"\") search String always matches.\n-     * A start position greater than the string length only matches\n-     * an empty search String.</p>\n-     *\n-     * <pre>\n-     * StringUtils.indexOf(null, *, *)          = -1\n-     * StringUtils.indexOf(*, null, *)          = -1\n-     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n-     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n-     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n-     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n-     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n-     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n-     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n-     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n-     * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n-     * </pre>\n-     *\n-     * @param str  the String to check, may be null\n-     * @param searchStr  the String to find, may be null\n-     * @param startPos  the start position, negative treated as zero\n-     * @return the first index of the search String,\n-     *  -1 if no match or <code>null</code> string input\n-     * @since 2.0\n-     */\n-    public static int indexOf(String str, String searchStr, int startPos) {\n-        if (str == null || searchStr == null) {\n-            return -1;\n-        }\n-        return str.indexOf(searchStr, startPos);\n     }\n \n     /**", "timestamp": 1265526614, "metainfo": ""}