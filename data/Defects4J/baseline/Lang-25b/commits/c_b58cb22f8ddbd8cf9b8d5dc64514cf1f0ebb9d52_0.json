{"sha": "b58cb22f8ddbd8cf9b8d5dc64514cf1f0ebb9d52", "log": "Removing the EscapeUtils/UnescapeUtils classes, and making StringEscapeUtils the replacement. Writer variants of StringEscapeUtils are dropped - instead you hit those via the translator objects. Some javadoc/testing cleanup needed.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n import java.io.IOException;\n import java.io.Writer;\n \n-import org.apache.commons.lang.text.translate.EscapeUtils;\n-import org.apache.commons.lang.text.translate.UnescapeUtils;\n+import org.apache.commons.lang.text.translate.*;\n+\n+// CsvTranslators\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.lang.CharUtils;\n \n /**\n  * <p>Escapes and unescapes <code>String</code>s for\n  * @author Pete Gieser\n  * @since 2.0\n  * @version $Id$\n- *\n- * @deprecated Use text.translate.EscapeUtils and text.translate.UnescapeUtils instead\n  */\n-@Deprecated\n public class StringEscapeUtils {\n+\n+    /* ESCAPE TRANSLATORS */\n+\n+    public static final CharSequenceTranslator ESCAPE_JAVA = \n+          new LookupTranslator(\n+            new String[][] { \n+              {\"\\\"\", \"\\\\\\\"\"},\n+              {\"\\\\\", \"\\\\\\\\\"},\n+          }).with(\n+            new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE())\n+          ).with(\n+            UnicodeEscaper.outsideOf(32, 0x7f) \n+        );\n+\n+    public static final CharSequenceTranslator ESCAPE_ECMASCRIPT = \n+        new AggregateTranslator(\n+            new LookupTranslator(\n+                      new String[][] { \n+                            {\"'\", \"\\\\'\"},\n+                            {\"\\\"\", \"\\\\\\\"\"},\n+                            {\"\\\\\", \"\\\\\\\\\"},\n+                            {\"/\", \"\\\\/\"}\n+                      }),\n+            new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE()),\n+            UnicodeEscaper.outsideOf(32, 0x7f) \n+        );\n+            \n+    public static final CharSequenceTranslator ESCAPE_XML = \n+        new AggregateTranslator(\n+            new LookupTranslator(EntityArrays.BASIC_ESCAPE()),\n+            new LookupTranslator(EntityArrays.APOS_ESCAPE())\n+        );\n+\n+    public static final CharSequenceTranslator ESCAPE_HTML3 = \n+        new AggregateTranslator(\n+            new LookupTranslator(EntityArrays.BASIC_ESCAPE()),\n+            new LookupTranslator(EntityArrays.ISO8859_1_ESCAPE())\n+        );\n+\n+    public static final CharSequenceTranslator ESCAPE_HTML4 = \n+        new AggregateTranslator(\n+            new LookupTranslator(EntityArrays.BASIC_ESCAPE()),\n+            new LookupTranslator(EntityArrays.ISO8859_1_ESCAPE()),\n+            new LookupTranslator(EntityArrays.HTML40_EXTENDED_ESCAPE())\n+        );\n+\n+    public static final CharSequenceTranslator ESCAPE_CSV = new CsvEscaper();\n+\n+    // TODO: Create a parent class - 'SinglePassTranslator' ?\n+    // TODO: It would handle the index checking, and length returning, and \n+    // TODO: could also have an optimization check method.\n+    static class CsvEscaper extends CharSequenceTranslator {\n+\n+        private static final char CSV_DELIMITER = ',';\n+        private static final char CSV_QUOTE = '\"';\n+        private static final String CSV_QUOTE_STR = String.valueOf(CSV_QUOTE);\n+        private static final char[] CSV_SEARCH_CHARS = new char[] {CSV_DELIMITER, CSV_QUOTE, CharUtils.CR, CharUtils.LF};\n+\n+        // TODO: Replace with a RegexTranslator. That should consume the number of characters the regex uses up?\n+        @Override\n+        public int translate(CharSequence input, int index, Writer out) throws IOException {\n+\n+            if(index != 0) {\n+                throw new IllegalStateException(\"CsvEscaper should never reach the [1] index\");\n+            }\n+\n+            if (StringUtils.containsNone(input.toString(), CSV_SEARCH_CHARS)) {\n+                out.write(input.toString());\n+            } else {\n+                out.write(CSV_QUOTE);\n+                out.write(StringUtils.replace(input.toString(), CSV_QUOTE_STR, CSV_QUOTE_STR + CSV_QUOTE_STR));\n+                out.write(CSV_QUOTE);\n+            }\n+            return input.length();\n+        }\n+    }\n+\n+    /* UNESCAPE TRANSLATORS */\n+\n+    // TODO: throw \"illegal character: \\92\" as an Exception if a \\ on the end of the Java (as per the compiler)?\n+    public static final CharSequenceTranslator UNESCAPE_JAVA = \n+        new AggregateTranslator(\n+            new UnicodeUnescaper(),\n+            new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_UNESCAPE()),\n+            new LookupTranslator(\n+                      new String[][] { \n+                            {\"\\\\\\\\\", \"\\\\\"},\n+                            {\"\\\\\\\"\", \"\\\"\"},\n+                            {\"\\\\'\", \"'\"},\n+                            {\"\\\\\", \"\"}\n+                      })\n+        );\n+\n+    public static final CharSequenceTranslator UNESCAPE_ECMASCRIPT = UNESCAPE_JAVA;\n+\n+    public static final CharSequenceTranslator UNESCAPE_HTML3 = \n+        new AggregateTranslator(\n+            new LookupTranslator(EntityArrays.BASIC_UNESCAPE()),\n+            new LookupTranslator(EntityArrays.ISO8859_1_UNESCAPE()),\n+            new NumericEntityUnescaper()\n+        );\n+\n+    public static final CharSequenceTranslator UNESCAPE_HTML4 = \n+        new AggregateTranslator(\n+            new LookupTranslator(EntityArrays.BASIC_UNESCAPE()),\n+            new LookupTranslator(EntityArrays.ISO8859_1_UNESCAPE()),\n+            new LookupTranslator(EntityArrays.HTML40_EXTENDED_UNESCAPE()),\n+            new NumericEntityUnescaper()\n+        );\n+\n+    public static final CharSequenceTranslator UNESCAPE_XML = \n+        new AggregateTranslator(\n+            new LookupTranslator(EntityArrays.BASIC_UNESCAPE()),\n+            new LookupTranslator(EntityArrays.APOS_UNESCAPE()),\n+            new NumericEntityUnescaper()\n+        );\n+\n+    public static final CharSequenceTranslator UNESCAPE_CSV = new CsvUnescaper();\n+\n+    static class CsvUnescaper extends CharSequenceTranslator {\n+\n+        private static final char CSV_DELIMITER = ',';\n+        private static final char CSV_QUOTE = '\"';\n+        private static final String CSV_QUOTE_STR = String.valueOf(CSV_QUOTE);\n+        private static final char[] CSV_SEARCH_CHARS = new char[] {CSV_DELIMITER, CSV_QUOTE, CharUtils.CR, CharUtils.LF};\n+\n+        // TODO: Replace with a RegexTranslator. That should consume the number of characters the regex uses up?\n+        @Override\n+        public int translate(CharSequence input, int index, Writer out) throws IOException {\n+\n+            if(index != 0) {\n+                throw new IllegalStateException(\"CsvUnescaper should never reach the [1] index\");\n+            }\n+\n+            if ( input.charAt(0) != CSV_QUOTE || input.charAt(input.length() - 1) != CSV_QUOTE ) {\n+                out.write(input.toString());\n+                return input.length();\n+            }\n+\n+            // strip quotes\n+            String quoteless = input.subSequence(1, input.length() - 1).toString();\n+\n+            if ( StringUtils.containsAny(quoteless, CSV_SEARCH_CHARS) ) {\n+                // deal with escaped quotes; ie) \"\"\n+                out.write(StringUtils.replace(quoteless, CSV_QUOTE_STR + CSV_QUOTE_STR, CSV_QUOTE_STR));\n+            } else {\n+                out.write(input.toString());\n+            }\n+            return input.length();\n+        }\n+    }\n+\n+    /* Helper functions */\n \n     /**\n      * <p><code>StringEscapeUtils</code> instances should NOT be constructed in\n      * </pre>\n      * </p>\n      *\n-     * @param str  String to escape values in, may be null\n+     * @param input  String to escape values in, may be null\n      * @return String with escaped values, <code>null</code> if null string input\n      */\n-    public static String escapeJava(String str) {\n-        return EscapeUtils.escapeJava(str);\n-    }\n-\n-    /**\n-     * <p>Escapes the characters in a <code>String</code> using Java String rules to\n-     * a <code>Writer</code>.</p>\n-     * \n-     * <p>A <code>null</code> string input has no effect.</p>\n-     * \n-     * @see #escapeJava(java.lang.String)\n-     * @param out  Writer to write escaped string into\n-     * @param str  String to escape values in, may be null\n-     * @throws IllegalArgumentException if the Writer is <code>null</code>\n-     * @throws IOException if error occurs on underlying Writer\n-     */\n-    public static void escapeJava(Writer out, String str) throws IOException {\n-        EscapeUtils.ESCAPE_JAVA.translate(str, out);\n-    }\n-\n-    /**\n-     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p>\n-     * <p>Escapes any values it finds into their JavaScript String form.\n+    public static final String escapeJava(String input) {\n+        return ESCAPE_JAVA.translate(input);\n+    }\n+\n+    /**\n+     * <p>Escapes the characters in a <code>String</code> using EcmaScript String rules.</p>\n+     * <p>Escapes any values it finds into their EcmaScript String form.\n      * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n      *\n      * <p>So a tab becomes the characters <code>'\\\\'</code> and\n      * <code>'t'</code>.</p>\n      *\n-     * <p>The only difference between Java strings and JavaScript strings\n-     * is that in JavaScript, a single quote and forward-slash (/) are escaped.</p>\n+     * <p>The only difference between Java strings and EcmaScript strings\n+     * is that in EcmaScript, a single quote and forward-slash (/) are escaped.</p>\n+     *\n+     * <p>Note that EcmaScript is best known by the JavaScript and ActionScript dialects. </p>\n      *\n      * <p>Example:\n      * <pre>\n      * </pre>\n      * </p>\n      *\n-     * @param str  String to escape values in, may be null\n+     * @param input  String to escape values in, may be null\n      * @return String with escaped values, <code>null</code> if null string input\n      */\n-    public static String escapeJavaScript(String str) {\n-        return EscapeUtils.escapeEcmaScript(str);\n-    }\n-\n-    /**\n-     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules\n-     * to a <code>Writer</code>.</p>\n-     * \n-     * <p>A <code>null</code> string input has no effect.</p>\n-     * \n-     * @see #escapeJavaScript(java.lang.String)\n-     * @param out  Writer to write escaped string into\n-     * @param str  String to escape values in, may be null\n-     * @throws IllegalArgumentException if the Writer is <code>null</code>\n-     * @throws IOException if error occurs on underlying Writer\n-     **/\n-    public static void escapeJavaScript(Writer out, String str) throws IOException {\n-        EscapeUtils.ESCAPE_ECMASCRIPT.translate(str, out);\n+    public static final String escapeEcmaScript(String input) {\n+        return ESCAPE_ECMASCRIPT.translate(input);\n     }\n \n     /**\n      * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n      * is preceded by another <code>'\\'</code>.</p>\n      * \n-     * @param str  the <code>String</code> to unescape, may be null\n+     * @param input  the <code>String</code> to unescape, may be null\n      * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n      */\n-    public static String unescapeJava(String str) {\n-        return UnescapeUtils.unescapeJava(str);\n-    }\n-\n-    /**\n-     * <p>Unescapes any Java literals found in the <code>String</code> to a\n-     * <code>Writer</code>.</p>\n-     *\n-     * <p>For example, it will turn a sequence of <code>'\\'</code> and\n-     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n-     * is preceded by another <code>'\\'</code>.</p>\n-     * \n-     * <p>A <code>null</code> string input has no effect.</p>\n-     * \n-     * @param out  the <code>Writer</code> used to output unescaped characters\n-     * @param str  the <code>String</code> to unescape, may be null\n-     * @throws IllegalArgumentException if the Writer is <code>null</code>\n-     * @throws IOException if error occurs on underlying Writer\n-     */\n-    public static void unescapeJava(Writer out, String str) throws IOException {\n-        UnescapeUtils.UNESCAPE_JAVA.translate(str, out);\n-    }\n-\n-    /**\n-     * <p>Unescapes any JavaScript literals found in the <code>String</code>.</p>\n+    public static final String unescapeJava(String input) {\n+        return UNESCAPE_JAVA.translate(input);\n+    }\n+\n+    /**\n+     * <p>Unescapes any EcmaScript literals found in the <code>String</code>.</p>\n      *\n      * <p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code>\n      * into a newline character, unless the <code>'\\'</code> is preceded by another\n      * <code>'\\'</code>.</p>\n      *\n      * @see #unescapeJava(String)\n-     * @param str  the <code>String</code> to unescape, may be null\n+     * @param input  the <code>String</code> to unescape, may be null\n      * @return A new unescaped <code>String</code>, <code>null</code> if null string input\n      */\n-    public static String unescapeJavaScript(String str) {\n-        return UnescapeUtils.unescapeEcmaScript(str);\n-    }\n-\n-    /**\n-     * <p>Unescapes any JavaScript literals found in the <code>String</code> to a\n-     * <code>Writer</code>.</p>\n-     *\n-     * <p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code>\n-     * into a newline character, unless the <code>'\\'</code> is preceded by another\n-     * <code>'\\'</code>.</p>\n-     *\n-     * <p>A <code>null</code> string input has no effect.</p>\n-     * \n-     * @see #unescapeJava(Writer,String)\n-     * @param out  the <code>Writer</code> used to output unescaped characters\n-     * @param str  the <code>String</code> to unescape, may be null\n-     * @throws IllegalArgumentException if the Writer is <code>null</code>\n-     * @throws IOException if error occurs on underlying Writer\n-     */\n-    public static void unescapeJavaScript(Writer out, String str) throws IOException {\n-        UnescapeUtils.UNESCAPE_ECMASCRIPT.translate(str, out);\n+    public static final String unescapeEcmaScript(String input) {\n+        return UNESCAPE_ECMASCRIPT.translate(input);\n     }\n \n     // HTML and XML\n      * Note that the commonly used apostrophe escape character (&amp;apos;)\n      * is not a legal entity and so is not supported). </p>\n      *\n-     * @param str  the <code>String</code> to escape, may be null\n+     * @param input  the <code>String</code> to escape, may be null\n      * @return a new escaped <code>String</code>, <code>null</code> if null string input\n      * \n      * @see #unescapeHtml(String)\n      * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n      * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n      */\n-    public static String escapeHtml(String str) {\n-        return EscapeUtils.escapeHtml4(str);\n-    }\n-\n-    /**\n-     * <p>Escapes the characters in a <code>String</code> using HTML entities and writes\n-     * them to a <code>Writer</code>.</p>\n-     *\n-     * <p>\n-     * For example:\n-     * </p> \n-     * <code>\"bread\" & \"butter\"</code>\n-     * <p>becomes:</p>\n-     * <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>.\n-     *\n-     * <p>Supports all known HTML 4.0 entities, including funky accents.\n-     * Note that the commonly used apostrophe escape character (&amp;apos;)\n-     * is not a legal entity and so is not supported). </p>\n-     *\n-     * @param writer  the writer receiving the escaped string, not null\n-     * @param string  the <code>String</code> to escape, may be null\n-     * @throws IllegalArgumentException if the writer is null\n-     * @throws IOException when <code>Writer</code> passed throws the exception from\n-     *                                       calls to the {@link Writer#write(int)} methods.\n-     * \n-     * @see #escapeHtml(String)\n-     * @see #unescapeHtml(String)\n-     * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n-     * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n-     * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n-     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n-     * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n-     */\n-    public static void escapeHtml(Writer writer, String string) throws IOException {\n-        EscapeUtils.ESCAPE_HTML4.translate(string, writer);\n-    }\n-\n+    public static final String escapeHtml4(String input) {\n+        return ESCAPE_HTML4.translate(input);\n+    }\n+\n+    public static final String escapeHtml3(String input) {\n+        return ESCAPE_HTML3.translate(input);\n+    }\n+                \n     //-----------------------------------------------------------------------\n     /**\n      * <p>Unescapes a string containing entity escapes to a string\n      * verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n      * become \"&gt;&amp;zzzz;x\".</p>\n      *\n-     * @param str  the <code>String</code> to unescape, may be null\n+     * @param input  the <code>String</code> to unescape, may be null\n      * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n-     * @see #escapeHtml(Writer, String)\n-     */\n-    public static String unescapeHtml(String str) {\n-        return UnescapeUtils.unescapeHtml4(str);\n-    }\n-\n-    /**\n-     * <p>Unescapes a string containing entity escapes to a string\n-     * containing the actual Unicode characters corresponding to the\n-     * escapes. Supports HTML 4.0 entities.</p>\n-     *\n-     * <p>For example, the string \"&amp;lt;Fran&amp;ccedil;ais&amp;gt;\"\n-     * will become \"&lt;Fran&ccedil;ais&gt;\"</p>\n-     *\n-     * <p>If an entity is unrecognized, it is left alone, and inserted\n-     * verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n-     * become \"&gt;&amp;zzzz;x\".</p>\n-     *\n-     * @param writer  the writer receiving the unescaped string, not null\n-     * @param string  the <code>String</code> to unescape, may be null\n-     * @throws IllegalArgumentException if the writer is null\n-     * @throws IOException if an IOException occurs\n-     * @see #escapeHtml(String)\n-     */\n-    public static void unescapeHtml(Writer writer, String string) throws IOException {\n-        UnescapeUtils.UNESCAPE_HTML4.translate(string, writer);\n+     */\n+    public static final String unescapeHtml4(String input) {\n+        return UNESCAPE_HTML4.translate(input);\n+    }\n+\n+    public static final String unescapeHtml3(String input) {\n+        return UNESCAPE_HTML3.translate(input);\n     }\n \n     //-----------------------------------------------------------------------\n      * <p>Note that unicode characters greater than 0x7f are as of 3.0, no longer \n      *    escaped. </p>\n      *\n-     * @param writer  the writer receiving the unescaped string, not null\n-     * @param str  the <code>String</code> to escape, may be null\n-     * @throws IllegalArgumentException if the writer is null\n-     * @throws IOException if there is a problem writing\n-     * @see #unescapeXml(java.lang.String)\n-     */\n-    public static void escapeXml(Writer writer, String str) throws IOException {\n-        EscapeUtils.ESCAPE_XML.translate(str, writer);\n-    }\n-\n-    /**\n-     * <p>Escapes the characters in a <code>String</code> using XML entities.</p>\n-     *\n-     * <p>For example: <tt>\"bread\" & \"butter\"</tt> =>\n-     * <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n-     * </p>\n-     *\n-     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n-     * Does not support DTDs or external entities.</p>\n-     *\n-     * <p>Note that unicode characters greater than 0x7f are as of 3.0, no longer \n-     *    escaped. </p>\n-     *\n-     * @param str  the <code>String</code> to escape, may be null\n+     * @param input  the <code>String</code> to escape, may be null\n      * @return a new escaped <code>String</code>, <code>null</code> if null string input\n      * @see #unescapeXml(java.lang.String)\n      */\n-    public static String escapeXml(String str) {\n-        return EscapeUtils.escapeXml(str);\n-    }\n+    public static final String escapeXml(String input) {\n+        return ESCAPE_XML.translate(input);\n+    }\n+                \n \n     //-----------------------------------------------------------------------\n     /**\n      * <p>Note that numerical \\\\u unicode codes are unescaped to their respective \n      *    unicode characters. This may change in future releases. </p>\n      *\n-     * @param writer  the writer receiving the unescaped string, not null\n-     * @param str  the <code>String</code> to unescape, may be null\n-     * @throws IllegalArgumentException if the writer is null\n-     * @throws IOException if there is a problem writing\n-     * @see #escapeXml(String)\n-     */\n-    public static void unescapeXml(Writer writer, String str) throws IOException {\n-        UnescapeUtils.UNESCAPE_XML.translate(str, writer);\n-    }\n-\n-    /**\n-     * <p>Unescapes a string containing XML entity escapes to a string\n-     * containing the actual Unicode characters corresponding to the\n-     * escapes.</p>\n-     *\n-     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n-     * Does not support DTDs or external entities.</p>\n-     *\n-     * <p>Note that numerical \\\\u unicode codes are unescaped to their respective \n-     *    unicode characters. This may change in future releases. </p>\n-     *\n-     * @param str  the <code>String</code> to unescape, may be null\n+     * @param input  the <code>String</code> to unescape, may be null\n      * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n      * @see #escapeXml(String)\n      */\n-    public static String unescapeXml(String str) {\n-        return UnescapeUtils.unescapeXml(str);\n-    }\n+    public static final String unescapeXml(String input) {\n+        return UNESCAPE_XML.translate(input);\n+    }\n+                \n \n     //-----------------------------------------------------------------------\n \n      * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n      * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n      *\n-     * @param str the input CSV column String, may be null\n+     * @param input the input CSV column String, may be null\n      * @return the input String, enclosed in double quotes if the value contains a comma,\n      * newline or double quote, <code>null</code> if null string input\n      * @since 2.4\n      */\n-    public static String escapeCsv(String str) {\n-        return EscapeUtils.escapeCsv(str);\n-    }\n-\n-    /**\n-     * <p>Writes a <code>String</code> value for a CSV column enclosed in double quotes,\n-     * if required.</p>\n-     *\n-     * <p>If the value contains a comma, newline or double quote, then the\n-     *    String value is written enclosed in double quotes.</p>\n-     * </p>\n-     *\n-     * <p>Any double quote characters in the value are escaped with another double quote.</p>\n-     *\n-     * <p>If the value does not contain a comma, newline or double quote, then the\n-     *    String value is written unchanged (null values are ignored).</p>\n+    public static final String escapeCsv(String input) {\n+        return ESCAPE_CSV.translate(input);\n+    }\n+\n+    /**\n+     * <p>Returns a <code>String</code> value for an unescaped CSV column. </p>\n+     *\n+     * <p>If the value is enclosed in double quotes, and contains a comma, newline \n+     *    or double quote, then quotes are removed. \n+     * </p>\n+     *\n+     * <p>Any double quote escaped characters (a pair of double quotes) are unescaped \n+     *    to just one double quote. </p>\n+     *\n+     * <p>If the value is not enclosed in double quotes, or is and does not contain a \n+     *    comma, newline or double quote, then the String value is returned unchanged.</p>\n      * </p>\n      *\n      * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n      * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n      *\n-     * @param str the input CSV column String, may be null\n-     * @param out Writer to write input string to, enclosed in double quotes if it contains\n-     * a comma, newline or double quote\n-     * @throws IOException if error occurs on underlying Writer\n-     * @since 2.4\n-     */\n-    public static void escapeCsv(Writer out, String str) throws IOException {\n-        EscapeUtils.ESCAPE_CSV.translate(str, out);\n-    }\n-\n-    /**\n-     * <p>Returns a <code>String</code> value for an unescaped CSV column. </p>\n-     *\n-     * <p>If the value is enclosed in double quotes, and contains a comma, newline \n-     *    or double quote, then quotes are removed. \n-     * </p>\n-     *\n-     * <p>Any double quote escaped characters (a pair of double quotes) are unescaped \n-     *    to just one double quote. </p>\n-     *\n-     * <p>If the value is not enclosed in double quotes, or is and does not contain a \n-     *    comma, newline or double quote, then the String value is returned unchanged.</p>\n-     * </p>\n-     *\n-     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n-     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n-     *\n-     * @param str the input CSV column String, may be null\n+     * @param input the input CSV column String, may be null\n      * @return the input String, with enclosing double quotes removed and embedded double \n      * quotes unescaped, <code>null</code> if null string input\n      * @since 2.4\n      */\n-    public static String unescapeCsv(String str) {\n-        return UnescapeUtils.unescapeCsv(str);\n-    }\n-\n-    /**\n-     * <p>Returns a <code>String</code> value for an unescaped CSV column. </p>\n-     *\n-     * <p>If the value is enclosed in double quotes, and contains a comma, newline \n-     *    or double quote, then quotes are removed. \n-     * </p>\n-     *\n-     * <p>Any double quote escaped characters (a pair of double quotes) are unescaped \n-     *    to just one double quote. </p>\n-     *\n-     * <p>If the value is not enclosed in double quotes, or is and does not contain a \n-     *    comma, newline or double quote, then the String value is returned unchanged.</p>\n-     * </p>\n-     *\n-     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n-     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n-     *\n-     * @param str the input CSV column String, may be null\n-     * @param out Writer to write the input String to, with enclosing double quotes \n-     * removed and embedded double quotes unescaped, <code>null</code> if null string input\n-     * @throws IOException if error occurs on underlying Writer\n-     * @since 2.4\n-     */\n-    public static void unescapeCsv(Writer out, String str) throws IOException {\n-        UnescapeUtils.UNESCAPE_CSV.translate(str, out);\n+    public static final String unescapeCsv(String input) {\n+        return UNESCAPE_CSV.translate(input);\n     }\n \n }\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n     public void testEscapeJava() throws IOException {\n         assertEquals(null, StringEscapeUtils.escapeJava(null));\n         try {\n-            StringEscapeUtils.escapeJava(null, null);\n-            fail();\n-        } catch (IOException ex) {\n-            fail();\n-        } catch (IllegalArgumentException ex) {\n-        }\n-        try {\n-            StringEscapeUtils.escapeJava(null, \"\");\n+            StringEscapeUtils.ESCAPE_JAVA.translate(null, null);\n+            fail();\n+        } catch (IOException ex) {\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        try {\n+            StringEscapeUtils.ESCAPE_JAVA.translate(\"\", null);\n             fail();\n         } catch (IOException ex) {\n             fail();\n         assertEquals(message, expected, converted);\n \n         StringWriter writer = new StringWriter();\n-        StringEscapeUtils.escapeJava(writer, original);\n+        StringEscapeUtils.ESCAPE_JAVA.translate(original, writer);\n         assertEquals(expected, writer.toString());\n     }\n \n     public void testUnescapeJava() throws IOException {\n         assertEquals(null, StringEscapeUtils.unescapeJava(null));\n         try {\n-            StringEscapeUtils.unescapeJava(null, null);\n-            fail();\n-        } catch (IOException ex) {\n-            fail();\n-        } catch (IllegalArgumentException ex) {\n-        }\n-        try {\n-            StringEscapeUtils.unescapeJava(null, \"\");\n+            StringEscapeUtils.UNESCAPE_JAVA.translate(null, null);\n+            fail();\n+        } catch (IOException ex) {\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        try {\n+            StringEscapeUtils.UNESCAPE_JAVA.translate(\"\", null);\n             fail();\n         } catch (IOException ex) {\n             fail();\n                 expected, actual);\n \n         StringWriter writer = new StringWriter();\n-        StringEscapeUtils.unescapeJava(writer, original);\n+        StringEscapeUtils.UNESCAPE_JAVA.translate(original, writer);\n         assertEquals(unescaped, writer.toString());\n \n     }\n \n-    public void testEscapeJavaScript() {\n-        assertEquals(null, StringEscapeUtils.escapeJavaScript(null));\n-        try {\n-            StringEscapeUtils.escapeJavaScript(null, null);\n-            fail();\n-        } catch (IOException ex) {\n-            fail();\n-        } catch (IllegalArgumentException ex) {\n-        }\n-        try {\n-            StringEscapeUtils.escapeJavaScript(null, \"\");\n+    public void testEscapeEcmaScript() {\n+        assertEquals(null, StringEscapeUtils.escapeEcmaScript(null));\n+        try {\n+            StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(null, null);\n+            fail();\n+        } catch (IOException ex) {\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        try {\n+            StringEscapeUtils.ESCAPE_ECMASCRIPT.translate(\"\", null);\n             fail();\n         } catch (IOException ex) {\n             fail();\n         } catch (IllegalArgumentException ex) {\n         }\n         \n-        assertEquals(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeJavaScript(\"He didn't say, \\\"stop!\\\"\"));\n+        assertEquals(\"He didn\\\\'t say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeEcmaScript(\"He didn't say, \\\"stop!\\\"\"));\n         assertEquals(\"document.getElementById(\\\\\\\"test\\\\\\\").value = \\\\'<script>alert(\\\\'aaa\\\\');<\\\\/script>\\\\';\", \n-                StringEscapeUtils.escapeJavaScript(\"document.getElementById(\\\"test\\\").value = '<script>alert('aaa');</script>';\"));\n+                StringEscapeUtils.escapeEcmaScript(\"document.getElementById(\\\"test\\\").value = '<script>alert('aaa');</script>';\"));\n     }\n \n \n             String message = htmlEscapes[i][0];\n             String expected = htmlEscapes[i][1];\n             String original = htmlEscapes[i][2];\n-            assertEquals(message, expected, StringEscapeUtils.escapeHtml(original));\n+            assertEquals(message, expected, StringEscapeUtils.escapeHtml4(original));\n             StringWriter sw = new StringWriter();\n             try {\n-                StringEscapeUtils.escapeHtml(sw, original);\n+                StringEscapeUtils.ESCAPE_HTML4.translate(original, sw);\n             } catch (IOException e) {\n             }\n             String actual = original == null ? null : sw.toString();\n         }\n     }\n \n-    public void testUnescapeHtml() {\n+    public void testUnescapeHtml4() {\n         for (int i = 0; i < htmlEscapes.length; ++i) {\n             String message = htmlEscapes[i][0];\n             String expected = htmlEscapes[i][2];\n             String original = htmlEscapes[i][1];\n-            assertEquals(message, expected, StringEscapeUtils.unescapeHtml(original));\n+            assertEquals(message, expected, StringEscapeUtils.unescapeHtml4(original));\n             \n             StringWriter sw = new StringWriter();\n             try {\n-                StringEscapeUtils.unescapeHtml(sw, original);\n+                StringEscapeUtils.UNESCAPE_HTML4.translate(original, sw);\n             } catch (IOException e) {\n             }\n             String actual = original == null ? null : sw.toString();\n         // \\u00E7 is a cedilla (c with wiggle under)\n         // note that the test string must be 7-bit-clean (unicode escaped) or else it will compile incorrectly\n         // on some locales        \n-        assertEquals(\"funny chars pass through OK\", \"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml(\"Fran\\u00E7ais\"));\n+        assertEquals(\"funny chars pass through OK\", \"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml4(\"Fran\\u00E7ais\"));\n         \n-        assertEquals(\"Hello&;World\", StringEscapeUtils.unescapeHtml(\"Hello&;World\"));\n-        assertEquals(\"Hello&#;World\", StringEscapeUtils.unescapeHtml(\"Hello&#;World\"));\n-        assertEquals(\"Hello&# ;World\", StringEscapeUtils.unescapeHtml(\"Hello&# ;World\"));\n-        assertEquals(\"Hello&##;World\", StringEscapeUtils.unescapeHtml(\"Hello&##;World\"));\n+        assertEquals(\"Hello&;World\", StringEscapeUtils.unescapeHtml4(\"Hello&;World\"));\n+        assertEquals(\"Hello&#;World\", StringEscapeUtils.unescapeHtml4(\"Hello&#;World\"));\n+        assertEquals(\"Hello&# ;World\", StringEscapeUtils.unescapeHtml4(\"Hello&# ;World\"));\n+        assertEquals(\"Hello&##;World\", StringEscapeUtils.unescapeHtml4(\"Hello&##;World\"));\n     }\n \n     public void testUnescapeHexCharsHtml() {\n         // Simple easy to grok test \n-        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml(\"&#x80;&#x9F;\"));\n-        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml(\"&#X80;&#X9F;\"));\n+        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml4(\"&#x80;&#x9F;\"));\n+        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml4(\"&#X80;&#X9F;\"));\n         // Test all Character values:\n         for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {\n             Character c1 = new Character(i);\n             String expected = c1.toString() + c2.toString();\n             String escapedC1 = \"&#x\" + Integer.toHexString((c1.charValue())) + \";\";\n             String escapedC2 = \"&#x\" + Integer.toHexString((c2.charValue())) + \";\";\n-            assertEquals(\"hex number unescape index \" + (int)i, expected, StringEscapeUtils.unescapeHtml(escapedC1 + escapedC2));\n+            assertEquals(\"hex number unescape index \" + (int)i, expected, StringEscapeUtils.unescapeHtml4(escapedC1 + escapedC2));\n         }\n     }\n \n     public void testUnescapeUnknownEntity() throws Exception\n     {\n-        assertEquals(\"&zzzz;\", StringEscapeUtils.unescapeHtml(\"&zzzz;\"));\n+        assertEquals(\"&zzzz;\", StringEscapeUtils.unescapeHtml4(\"&zzzz;\"));\n     }\n \n     public void testEscapeHtmlVersions() throws Exception\n     {\n-        assertEquals(\"&Beta;\", StringEscapeUtils.escapeHtml(\"\\u0392\"));\n-        assertEquals(\"\\u0392\", StringEscapeUtils.unescapeHtml(\"&Beta;\"));\n+        assertEquals(\"&Beta;\", StringEscapeUtils.escapeHtml4(\"\\u0392\"));\n+        assertEquals(\"\\u0392\", StringEscapeUtils.unescapeHtml4(\"&Beta;\"));\n \n         //todo: refine API for escaping/unescaping specific HTML versions\n \n \n         StringWriter sw = new StringWriter();\n         try {\n-            StringEscapeUtils.escapeXml(sw, \"<abc>\");\n+            StringEscapeUtils.ESCAPE_XML.translate(\"<abc>\", sw);\n         } catch (IOException e) {\n         }\n         assertEquals(\"XML was escaped incorrectly\", \"&lt;abc&gt;\", sw.toString() );\n \n         sw = new StringWriter();\n         try {\n-            StringEscapeUtils.unescapeXml(sw, \"&lt;abc&gt;\");\n+            StringEscapeUtils.UNESCAPE_XML.translate(\"&lt;abc&gt;\", sw);\n         } catch (IOException e) {\n         }\n         assertEquals(\"XML was unescaped incorrectly\", \"<abc>\", sw.toString() );\n     // Tests issue #38569\n     // http://issues.apache.org/bugzilla/show_bug.cgi?id=38569\n     public void testStandaloneAmphersand() {\n-        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeHtml(\"&lt;P&O&gt;\"));\n-        assertEquals(\"test & <\", StringEscapeUtils.unescapeHtml(\"test & &lt;\"));\n+        assertEquals(\"<P&O>\", StringEscapeUtils.unescapeHtml4(\"&lt;P&O&gt;\"));\n+        assertEquals(\"test & <\", StringEscapeUtils.unescapeHtml4(\"test & &lt;\"));\n         assertEquals(\"<P&O>\", StringEscapeUtils.unescapeXml(\"&lt;P&O&gt;\"));\n         assertEquals(\"test & <\", StringEscapeUtils.unescapeXml(\"test & &lt;\"));\n     }\n \n     public void testLang313() {\n-        assertEquals(\"& &\", StringEscapeUtils.unescapeHtml(\"& &amp;\"));\n+        assertEquals(\"& &\", StringEscapeUtils.unescapeHtml4(\"& &amp;\"));\n     }\n \n     public void testEscapeCsvString() throws Exception\n     private void checkCsvEscapeWriter(String expected, String value) {\n         try {\n             StringWriter writer = new StringWriter();\n-            StringEscapeUtils.escapeCsv(writer, value);\n+            StringEscapeUtils.ESCAPE_CSV.translate(value, writer);\n             assertEquals(expected, writer.toString());\n         } catch (IOException e) {\n             fail(\"Threw: \" + e);\n     private void checkCsvUnescapeWriter(String expected, String value) {\n         try {\n             StringWriter writer = new StringWriter();\n-            StringEscapeUtils.unescapeCsv(writer, value);\n+            StringEscapeUtils.UNESCAPE_CSV.translate(value, writer);\n             assertEquals(expected, writer.toString());\n         } catch (IOException e) {\n             fail(\"Threw: \" + e);\n \n         String original = new String(data, \"UTF8\");\n \n-        String escaped = StringEscapeUtils.escapeHtml( original );\n+        String escaped = StringEscapeUtils.escapeHtml4( original );\n         assertEquals( \"High unicode should not have been escaped\", original, escaped);\n \n-        String unescaped = StringEscapeUtils.unescapeHtml( escaped );\n+        String unescaped = StringEscapeUtils.unescapeHtml4( escaped );\n         assertEquals( \"High unicode should have been unchanged\", original, unescaped);\n \n // TODO: I think this should hold, needs further investigation\n-//        String unescapedFromEntity = StringEscapeUtils.unescapeHtml( \"&#119650;\" );\n+//        String unescapedFromEntity = StringEscapeUtils.unescapeHtml4( \"&#119650;\" );\n //        assertEquals( \"High unicode should have been unescaped\", original, unescapedFromEntity);\n     }\n \n     public void testEscapeHiragana() throws java.io.UnsupportedEncodingException {\n         // Some random Japanese unicode characters\n         String original = \"\\u304B\\u304C\\u3068\";\n-        String escaped = StringEscapeUtils.escapeHtml(original);\n-        assertEquals( \"Hiragana character unicode behaviour should not be being escaped by escapeHtml\",\n+        String escaped = StringEscapeUtils.escapeHtml4(original);\n+        assertEquals( \"Hiragana character unicode behaviour should not be being escaped by escapeHtml4\",\n         original, escaped);\n \n-        String unescaped = StringEscapeUtils.unescapeHtml( escaped );\n+        String unescaped = StringEscapeUtils.unescapeHtml4( escaped );\n \n         assertEquals( \"Hiragana character unicode behaviour has changed - expected no unescaping\", escaped, unescaped);\n     }", "timestamp": 1258447555, "metainfo": ""}