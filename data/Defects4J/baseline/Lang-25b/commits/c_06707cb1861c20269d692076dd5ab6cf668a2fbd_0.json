{"sha": "06707cb1861c20269d692076dd5ab6cf668a2fbd", "log": "Applying Robert Scholte's excellent unit tests from LANG-443 and his second patch from LANG-440 fixing a discovered boundary case for AM_PM in round  ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n                         if (offset >= 12) {\n                             offset -= 12;\n                         }\n-                        roundUp = offset > 6;\n+                        roundUp = offset >= 6;\n                         offsetSet = true;\n                     }\n                     break;\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.time;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * These Unit-tests will check all possible extremes when using some rounding-methods of DateUtils.\n+ * The extremes are tested at the switch-point in milliseconds\n+ * \n+ * According to the implementation SEMI_MONTH will either round/truncate to the 1st or 16th\n+ * When rounding Calendar.MONTH it depends on the number of days within that month.\n+ * A month with 28 days will be rounded up from the 15th\n+ * A month with 29 or 30 days will be rounded up from the 16th\n+ * A month with 31 days will be rounded up from the 17th\n+ * \n+ * @todo Add DateUtils.ceil()-tests if method is available\n+ *   \n+ * @author Robert Scholte\n+ * @since 3.0\n+ *\n+ */\n+public class DateUtilsRoundingTest extends TestCase {\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(DateUtilsRoundingTest.class);\n+        suite.setName(\"DateUtils Rounding Tests\");\n+        return suite;\n+    }\n+\n+\tDateFormat dateTimeParser;\n+\t\n+\tDate januaryOneDate;\n+\tDate targetYearDate;\n+\t//No targetMonths, these must be tested for every type of month(28-31 days)\n+\tDate targetDateDate, targetDayOfMonthDate, targetAmDate, targetPmDate;\n+\tDate targetHourOfDayDate, targetHourDate;\n+\tDate targetMinuteDate;\n+\tDate targetSecondDate;\n+\tDate targetMilliSecondDate;\n+\n+\tCalendar januaryOneCalendar;\n+\tFastDateFormat fdf = DateFormatUtils.ISO_DATETIME_FORMAT;\n+\n+\tprotected void setUp() throws Exception {\n+\t\tsuper.setUp();\n+\t\tdateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);\n+\t\t\n+\t\ttargetYearDate = dateTimeParser.parse(\"January 1, 2007 0:00:00.000\");\n+\t\ttargetDateDate = targetDayOfMonthDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n+\t\ttargetAmDate =  dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n+\t\ttargetPmDate = dateTimeParser.parse(\"June 1, 2008 12:00:00.000\");\n+\t\ttargetHourDate = dateTimeParser.parse(\"June 1, 2008 8:00:00.000\");\n+\t\ttargetHourOfDayDate = dateTimeParser.parse(\"June 1, 2008 8:00:00.000\");\n+\t\ttargetMinuteDate =  dateTimeParser.parse(\"June 1, 2008 8:15:00.000\");\n+\t\ttargetSecondDate =  dateTimeParser.parse(\"June 1, 2008 8:15:14.000\");\n+\t\ttargetMilliSecondDate =  dateTimeParser.parse(\"June 1, 2008 8:15:14.231\");\n+\t\t\n+\t\tjanuaryOneDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.000\");\n+\t\tjanuaryOneCalendar = Calendar.getInstance();\n+\t\tjanuaryOneCalendar.setTime(januaryOneDate);\n+\t}\n+\n+\t/**\n+\t * Tests DateUtils.round()-method with Calendar.Year\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testRoundYear() throws Exception {\n+\t\tfinal int calendarField = Calendar.YEAR;\n+\t\tDate roundedUpDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.000\");\n+\t\tDate roundedDownDate = targetYearDate;\n+\t\tDate lastRoundedDownDate = dateTimeParser.parse(\"June 30, 2007 23:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Tests DateUtils.round()-method with Calendar.MONTH\n+\t * Includes rounding months with 28, 29, 30 and 31 days\n+\t * Includes rounding to January 1\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testRoundMonth() throws Exception {\n+\t\tfinal int calendarField = Calendar.MONTH;\n+\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+\t\tDate minDate, maxDate;\n+\t\t\n+\t\t//month with 28 days\n+\t\troundedUpDate = dateTimeParser.parse(\"March 1, 2007 0:00:00.000\");\n+\t\troundedDownDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"February 14, 2007 23:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+\t\t//month with 29 days\n+\t\troundedUpDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n+\t\troundedDownDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"February 15, 2008 23:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t\t\n+\t\t//month with 30 days\n+\t\troundedUpDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n+\t\troundedDownDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"April 15, 2008 23:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t\t\n+\t\t//month with 31 days\n+\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n+\t\troundedDownDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"May 16, 2008 23:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t\t\n+\t\t//round to January 1\n+\t\tminDate = dateTimeParser.parse(\"December 17, 2007 00:00:00.000\");\n+\t\tmaxDate = dateTimeParser.parse(\"January 16, 2008 23:59:59.999\");\n+\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Tests DateUtils.round()-method with DateUtils.SEMI_MONTH\n+\t * Includes rounding months with 28, 29, 30 and 31 days, each with first and second half \n+\t * Includes rounding to January 1\n+\t * \t \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testRoundSemiMonth() throws Exception {\n+\t\tfinal int calendarField = DateUtils.SEMI_MONTH;\n+\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+\t\tDate minDate, maxDate;\n+\t\t\n+\t\t//month with 28 days (1)\n+\t\troundedUpDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n+\t\troundedDownDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"February 8, 2007 23:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+\t\t//month with 28 days (2)\n+\t\troundedUpDate = dateTimeParser.parse(\"March 1, 2007 0:00:00.000\");\n+\t\troundedDownDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"February 23, 2007 23:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+\t\t//month with 29 days (1)\n+\t\troundedUpDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n+\t\troundedDownDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"February 8, 2008 23:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t\t\n+\t\t//month with 29 days (2)\n+\t\troundedUpDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n+\t\troundedDownDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"February 23, 2008 23:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+\t\t//month with 30 days (1)\n+\t\troundedUpDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n+\t\troundedDownDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"April 8, 2008 23:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+\t\t//month with 30 days (2)\n+\t\troundedUpDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n+\t\troundedDownDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"April 23, 2008 23:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t\t\n+\t\t//month with 31 days (1)\n+\t\troundedUpDate = dateTimeParser.parse(\"May 16, 2008 0:00:00.000\");\n+\t\troundedDownDate = dateTimeParser.parse(\"May 1, 2008 0:00:00.000\");\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"May 8, 2008 23:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+\t\t//month with 31 days (2)\n+\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 0:00:00.000\");\n+\t\troundedDownDate = dateTimeParser.parse(\"May 16, 2008 0:00:00.000\");\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"May 23, 2008 23:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t\t\n+\t\t//round to January 1\n+\t\tminDate = dateTimeParser.parse(\"December 24, 2007 00:00:00.000\");\n+\t\tmaxDate = dateTimeParser.parse(\"January 8, 2008 23:59:59.999\");\n+\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Tests DateUtils.round()-method with Calendar.DATE\n+\t * Includes rounding the extremes of one day \n+\t * Includes rounding to January 1\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testRoundDate() throws Exception {\n+\t\tfinal int calendarField = Calendar.DATE;\n+\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+\t\tDate minDate, maxDate;\n+\n+\t\troundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n+\t\troundedDownDate = targetDateDate;\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t\t\n+\t\t//round to January 1\n+\t\tminDate = dateTimeParser.parse(\"December 31, 2007 12:00:00.000\");\n+\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 11:59:59.999\");\n+\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Tests DateUtils.round()-method with Calendar.DAY_OF_MONTH\n+\t * Includes rounding the extremes of one day \n+\t * Includes rounding to January 1\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testRoundDayOfMonth() throws Exception {\n+\t\tfinal int calendarField = Calendar.DAY_OF_MONTH;\n+\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+\t\tDate minDate, maxDate;\n+\n+\t\troundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n+\t\troundedDownDate = targetDayOfMonthDate;\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t\t\n+\t\t//round to January 1\n+\t\tminDate = dateTimeParser.parse(\"December 31, 2007 12:00:00.000\");\n+\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 11:59:59.999\");\n+\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Tests DateUtils.round()-method with Calendar.AM_PM\n+\t * Includes rounding the extremes of both AM and PM of one day \n+\t * Includes rounding to January 1\n+\t * \n+\t * @throws Exception\n+\t * @3.0\n+\t */\n+\tpublic void testRoundAmPm() throws Exception {\n+\t\tfinal int calendarField = Calendar.AM_PM;\n+\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+\t\tDate minDate, maxDate;\n+\n+\t\t//AM\n+\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 12:00:00.000\");\n+\t\troundedDownDate = targetAmDate;\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 5:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+\t\t//PM\n+\t\troundedUpDate = dateTimeParser.parse(\"June 2, 2008 0:00:00.000\");\n+\t\troundedDownDate = targetPmDate;\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 17:59:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\n+\t\t//round to January 1\n+\t\tminDate = dateTimeParser.parse(\"December 31, 2007 18:00:00.000\");\n+\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 5:59:59.999\");\n+\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Tests DateUtils.round()-method with Calendar.HOUR_OF_DAY\n+\t * Includes rounding the extremes of one hour \n+\t * Includes rounding to January 1\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testRoundHourOfDay() throws Exception {\n+\t\tfinal int calendarField = Calendar.HOUR_OF_DAY;\n+\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+\t\tDate minDate, maxDate;\n+\n+\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 9:00:00.000\");\n+\t\troundedDownDate = targetHourOfDayDate;\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:29:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t\t\n+\t\t//round to January 1\n+\t\tminDate = dateTimeParser.parse(\"December 31, 2007 23:30:00.000\");\n+\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 0:29:59.999\");\n+\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Tests DateUtils.round()-method with Calendar.HOUR\n+\t * Includes rounding the extremes of one hour \n+\t * Includes rounding to January 1\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testRoundHour() throws Exception {\n+\t\tfinal int calendarField = Calendar.HOUR;\n+\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+\t\tDate minDate, maxDate;\n+\n+\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 9:00:00.000\");\n+\t\troundedDownDate = targetHourDate;\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:29:59.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t\t\n+\t\t//round to January 1\n+\t\tminDate = dateTimeParser.parse(\"December 31, 2007 23:30:00.000\");\n+\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 0:29:59.999\");\n+\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Tests DateUtils.round()-method with Calendar.MINUTE\n+\t * Includes rounding the extremes of one minute \n+\t * Includes rounding to January 1\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testRoundMinute() throws Exception {\n+\t\tfinal int calendarField = Calendar.MINUTE;\n+\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+\t\tDate minDate, maxDate;\n+\n+\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:16:00.000\");\n+\t\troundedDownDate = targetMinuteDate;\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:15:29.999\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t\t\n+\t\t//round to January 1\n+\t\tminDate = dateTimeParser.parse(\"December 31, 2007 23:59:30.000\");\n+\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 0:00:29.999\");\n+\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Tests DateUtils.round()-method with Calendar.SECOND\n+\t * Includes rounding the extremes of one second \n+\t * Includes rounding to January 1\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testRoundSecond() throws Exception {\n+\t\tfinal int calendarField = Calendar.SECOND;\n+\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+\t\tDate minDate, maxDate;\n+\n+\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:15:15.000\");\n+\t\troundedDownDate = targetSecondDate;\n+\t\tlastRoundedDownDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.499\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t\t\n+\t\t//round to January 1\n+\t\tminDate = dateTimeParser.parse(\"December 31, 2007 23:59:59.500\");\n+\t\tmaxDate = dateTimeParser.parse(\"January 1, 2008 0:00:00.499\");\n+\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Tests DateUtils.round()-method with Calendar.MILLISECOND\n+\t * Includes rounding the extremes of one second \n+\t * Includes rounding to January 1\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testRoundMilliSecond() throws Exception {\n+\t\tfinal int calendarField = Calendar.MILLISECOND;\n+\t\tDate roundedUpDate, roundedDownDate, lastRoundedDownDate;\n+\t\tDate minDate, maxDate;\n+\n+\t\troundedDownDate = lastRoundedDownDate = targetMilliSecondDate;\n+\t\troundedUpDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.232\");\n+\t\tbaseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField);\n+\t\t\n+\t\t//round to January 1\n+\t\tminDate = maxDate = januaryOneDate;\n+\t\troundToJanuaryFirst(minDate, maxDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Test DateUtils.truncate()-method with Calendar.YEAR\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testTruncateYear() throws Exception {\n+\t\tfinal int calendarField = Calendar.YEAR;\n+\t\tDate lastTruncateDate = dateTimeParser.parse(\"December 31, 2007 23:59:59.999\");\n+\t\tbaseTruncateTest(targetYearDate, lastTruncateDate, calendarField);\n+\t}\n+\n+\t/**\n+\t * Test DateUtils.truncate()-method with Calendar.MONTH\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testTruncateMonth() throws Exception {\n+\t\tfinal int calendarField = Calendar.MONTH;\n+\t\tDate truncatedDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n+\t\tDate lastTruncateDate = dateTimeParser.parse(\"March 31, 2008 23:59:59.999\");\n+\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\t}\n+\n+\t/**\n+\t * Test DateUtils.truncate()-method with DateUtils.SEMI_MONTH\n+\t * Includes truncating months with 28, 29, 30 and 31 days, each with first and second half\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testTruncateSemiMonth() throws Exception {\n+\t\tfinal int calendarField = DateUtils.SEMI_MONTH;\n+\t\tDate truncatedDate, lastTruncateDate;\n+\t\t\n+\t\t//month with 28 days (1)\n+\t\ttruncatedDate = dateTimeParser.parse(\"February 1, 2007 0:00:00.000\");\n+\t\tlastTruncateDate = dateTimeParser.parse(\"February 15, 2007 23:59:59.999\");\n+\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+\t\t//month with 28 days (2)\n+\t\ttruncatedDate = dateTimeParser.parse(\"February 16, 2007 0:00:00.000\");\n+\t\tlastTruncateDate = dateTimeParser.parse(\"February 28, 2007 23:59:59.999\");\n+\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+\t\t//month with 29 days (1)\n+\t\ttruncatedDate = dateTimeParser.parse(\"February 1, 2008 0:00:00.000\");\n+\t\tlastTruncateDate = dateTimeParser.parse(\"February 15, 2008 23:59:59.999\");\n+\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+\t\t//month with 29 days (2)\n+\t\ttruncatedDate = dateTimeParser.parse(\"February 16, 2008 0:00:00.000\");\n+\t\tlastTruncateDate = dateTimeParser.parse(\"February 29, 2008 23:59:59.999\");\n+\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+\t\t//month with 30 days (1)\n+\t\ttruncatedDate = dateTimeParser.parse(\"April 1, 2008 0:00:00.000\");\n+\t\tlastTruncateDate = dateTimeParser.parse(\"April 15, 2008 23:59:59.999\");\n+\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+\t\t//month with 30 days (2)\n+\t\ttruncatedDate = dateTimeParser.parse(\"April 16, 2008 0:00:00.000\");\n+\t\tlastTruncateDate = dateTimeParser.parse(\"April 30, 2008 23:59:59.999\");\n+\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\t\t\n+\t\t//month with 31 days (1)\n+\t\ttruncatedDate = dateTimeParser.parse(\"March 1, 2008 0:00:00.000\");\n+\t\tlastTruncateDate = dateTimeParser.parse(\"March 15, 2008 23:59:59.999\");\n+\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+\t\t//month with 31 days (2)\n+\t\ttruncatedDate = dateTimeParser.parse(\"March 16, 2008 0:00:00.000\");\n+\t\tlastTruncateDate = dateTimeParser.parse(\"March 31, 2008 23:59:59.999\");\n+\t\tbaseTruncateTest(truncatedDate, lastTruncateDate, calendarField);\n+\n+\t}\n+\n+\t/**\n+\t * Test DateUtils.truncate()-method with Calendar.DATE\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testTruncateDate() throws Exception {\n+\t\tfinal int calendarField = Calendar.DATE;\n+\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n+\t\tbaseTruncateTest(targetDateDate, lastTruncateDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testTruncateDayOfMonth() throws Exception {\n+\t\tfinal int calendarField = Calendar.DAY_OF_MONTH;\n+\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n+\t\tbaseTruncateTest(targetDayOfMonthDate, lastTruncateDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Test DateUtils.truncate()-method with Calendar.AM_PM\n+\t * Includes truncating the extremes of both AM and PM of one day \n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testTruncateAmPm() throws Exception {\n+\t\tfinal int calendarField = Calendar.AM_PM;\n+\t\t\n+\t\t//AM\n+\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 11:59:59.999\");\n+\t\tbaseTruncateTest(targetAmDate, lastTruncateDate, calendarField);\n+\n+\t\t//PM\n+\t\tlastTruncateDate = dateTimeParser.parse(\"June 1, 2008 23:59:59.999\");\n+\t\tbaseTruncateTest(targetPmDate, lastTruncateDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Test DateUtils.truncate()-method with Calendar.HOUR\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testTruncateHour() throws Exception {\n+\t\tfinal int calendarField = Calendar.HOUR;\n+\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\n+\t\tbaseTruncateTest(targetHourDate, lastTruncateDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Test DateUtils.truncate()-method with Calendar.HOUR_OF_DAY\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testTruncateHourOfDay() throws Exception {\n+\t\tfinal int calendarField = Calendar.HOUR_OF_DAY;\n+\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:59:59.999\");\n+\t\tbaseTruncateTest(targetHourOfDayDate, lastTruncateDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Test DateUtils.truncate()-method with Calendar.MINUTE\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testTruncateMinute() throws Exception {\n+\t\tfinal int calendarField = Calendar.MINUTE;\n+\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:59.999\");\n+\t\tbaseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Test DateUtils.truncate()-method with Calendar.SECOND\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testTruncateSecond() throws Exception {\n+\t\tfinal int calendarField = Calendar.SECOND;\n+\t\tDate lastTruncateDate = dateTimeParser.parse(\"June 1, 2008 8:15:14.999\");\n+\t\tbaseTruncateTest(targetSecondDate, lastTruncateDate, calendarField);\n+\t}\n+\t\n+\t/**\n+\t * Test DateUtils.truncate()-method with Calendar.SECOND\n+\t * \n+\t * @throws Exception\n+\t * @since 3.0\n+\t */\n+\tpublic void testTruncateMilliSecond() throws Exception {\n+\t\tfinal int calendarField = Calendar.MILLISECOND;\n+\t\tbaseTruncateTest(targetMilliSecondDate, targetMilliSecondDate, calendarField);\n+\t}\n+\t\t\n+\t/**\n+\t * When using this basetest all extremes are tested.<br> \n+\t * It will test the Date, Calendar and Object-implementation<br>\n+\t * lastRoundDownDate should round down to roundedDownDate<br>\n+\t * lastRoundDownDate + 1 millisecond should round up to roundedUpDate\n+\t * \n+\t * @param roundedUpDate the next rounded date after <strong>roundedDownDate</strong> when using <strong>calendarField</strong>\n+\t * @param roundedDownDate the result if <strong>lastRoundDownDate</strong> was rounded with <strong>calendarField</strong>\n+\t * @param lastRoundDownDate rounding this value with <strong>calendarField</strong> will result in <strong>roundedDownDate</strong>\n+\t * @param calendarField\n+\t * @since 3.0\n+\t */\n+\tprotected void baseRoundTest(final Date roundedUpDate, final Date roundedDownDate, final Date lastRoundDownDate, final int calendarField) {\n+\t\tDate firstRoundUpDate = DateUtils.addMilliseconds(lastRoundDownDate, 1);\n+\t\t\n+\t\t//Date-comparison\n+\t\tassertEquals(roundedDownDate, DateUtils.round(roundedDownDate, calendarField));\n+\t\tassertEquals(roundedUpDate, DateUtils.round(roundedUpDate, calendarField));\n+\t\tassertEquals(roundedDownDate, DateUtils.round(lastRoundDownDate, calendarField));\n+\t\tassertEquals(roundedUpDate, DateUtils.round(firstRoundUpDate, calendarField));\n+\t\t\n+\t\t//Calendar-initiations\n+\t\tCalendar roundedUpCalendar, roundedDownCalendar, lastRoundDownCalendar, firstRoundUpCalendar; \n+\t\troundedDownCalendar = Calendar.getInstance();\n+\t\troundedUpCalendar = Calendar.getInstance();\n+\t\tlastRoundDownCalendar = Calendar.getInstance();\n+\t\tfirstRoundUpCalendar = Calendar.getInstance();\n+\t\troundedDownCalendar.setTime(roundedDownDate);\n+\t\troundedUpCalendar.setTime(roundedUpDate);\n+\t\tlastRoundDownCalendar.setTime(lastRoundDownDate);\n+\t\tfirstRoundUpCalendar.setTime(firstRoundUpDate);\n+\n+\t\t//Calendar-comparison\n+\t\tassertEquals(roundedDownCalendar, DateUtils.round(roundedDownCalendar, calendarField));\n+\t\tassertEquals(roundedUpCalendar, DateUtils.round(roundedUpCalendar, calendarField));\n+\t\tassertEquals(roundedDownCalendar, DateUtils.round(lastRoundDownCalendar, calendarField));\n+\t\tassertEquals(roundedUpCalendar, DateUtils.round(firstRoundUpCalendar, calendarField));\n+\n+\t\t//Object-comparison\n+\t\tassertEquals(roundedDownDate, DateUtils.round((Object) roundedDownDate, calendarField));\n+\t\tassertEquals(roundedUpDate, DateUtils.round((Object) roundedUpDate, calendarField));\n+\t\tassertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));\n+\t\tassertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));\n+\t\tassertEquals(roundedDownDate, DateUtils.round((Object) roundedDownCalendar, calendarField));\n+\t\tassertEquals(roundedUpDate, DateUtils.round((Object) roundedUpCalendar, calendarField));\n+\t\tassertEquals(roundedDownDate, DateUtils.round((Object) lastRoundDownDate, calendarField));\n+\t\tassertEquals(roundedUpDate, DateUtils.round((Object) firstRoundUpDate, calendarField));\n+\t}\n+\t\n+\t/**\n+\t * When using this basetest all extremes are tested.<br> \n+\t * It will test the Date, Calendar and Object-implementation<br>\n+\t * lastTruncateDate should round down to truncatedDate<br>\n+\t * lastTruncateDate + 1 millisecond should never round down to truncatedDate\n+\t * \n+\t * @param truncatedDate expected Date when <strong>lastTruncateDate</strong> is truncated with <strong>calendarField</strong>\n+\t * @param lastTruncateDate the last possible Date which will truncate to <strong>truncatedDate</strong> with <strong>calendarField</strong>\n+\t * @param calendarField a Calendar.field value\n+\t * @since 3.0\n+\t */\n+\tprotected void baseTruncateTest(final Date truncatedDate, final Date lastTruncateDate, final int calendarField) {\n+\t\tDate nextTruncateDate = DateUtils.addMilliseconds(lastTruncateDate, 1);\n+\t\t\n+\t\t//Date-comparison\n+\t\tassertEquals(\"Truncating \"+ fdf.format(truncatedDate) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", truncatedDate, DateUtils.truncate(truncatedDate, calendarField));\n+\t\tassertEquals(truncatedDate, DateUtils.truncate(lastTruncateDate, calendarField));\n+\t\tassertFalse(fdf.format(lastTruncateDate) +\" is not an extreme when truncating as Date with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate(nextTruncateDate, calendarField)));\n+\t\t\n+\t\t//Calendar-initiations\n+\t\tCalendar truncatedCalendar, lastTruncateCalendar, nextTruncateCalendar; \n+\t\ttruncatedCalendar = Calendar.getInstance();\n+\t\tlastTruncateCalendar = Calendar.getInstance();\n+\t\tnextTruncateCalendar = Calendar.getInstance();\n+\t\ttruncatedCalendar.setTime(truncatedDate);\n+\t\tlastTruncateCalendar.setTime(lastTruncateDate);\n+\t\tnextTruncateCalendar.setTime(nextTruncateDate);\n+\n+\t\t//Calendar-comparison\n+\t\tassertEquals(\"Truncating \"+ fdf.format(truncatedCalendar) +\" as Calendar with CalendarField-value \"+ calendarField +\" must return itself\", truncatedCalendar, DateUtils.truncate(truncatedCalendar, calendarField));\n+\t\tassertEquals(truncatedCalendar, DateUtils.truncate(lastTruncateCalendar, calendarField));\n+\t\tassertFalse(fdf.format(lastTruncateCalendar) +\" is not an extreme when truncating as Calendar with CalendarField-value \"+ calendarField, truncatedCalendar.equals(DateUtils.truncate(nextTruncateCalendar, calendarField)));\n+\n+\t\t//Object-comparison\n+\t\tassertEquals(\"Truncating \"+ fdf.format(truncatedDate) +\" as Date cast to Object with CalendarField-value \"+ calendarField +\" must return itself as Date\", truncatedDate, DateUtils.truncate((Object) truncatedDate, calendarField));\n+\t\tassertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateDate, calendarField));\n+\t\tassertFalse(fdf.format(lastTruncateDate) +\" is not an extreme when truncating as Date cast to Object with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateDate, calendarField)));\n+\t\tassertEquals(\"Truncating \"+ fdf.format(truncatedCalendar) +\" as Calendar cast to Object with CalendarField-value \"+ calendarField +\" must return itself as Date\", truncatedDate, DateUtils.truncate((Object) truncatedCalendar, calendarField));\n+\t\tassertEquals(truncatedDate, DateUtils.truncate((Object) lastTruncateCalendar, calendarField));\n+\t\tassertFalse(fdf.format(lastTruncateCalendar) +\" is not an extreme when truncating as Calendar cast to Object with CalendarField-value \"+ calendarField, truncatedDate.equals(DateUtils.truncate((Object) nextTruncateCalendar, calendarField)));\n+\t}\n+\t\n+\t/**\n+\t * \n+\t * Any January 1 could be considered as the ultimate extreme.\n+\t * Instead of comparing the results if the input has a difference of 1 millisecond we check the output to be exactly January first. \n+\t * \n+\t * @param minDate\n+\t * @param maxDate\n+\t * @param calendarField\n+\t * @since 3.0\n+\t */\n+\tprotected void roundToJanuaryFirst(Date minDate, Date maxDate, int calendarField) {\n+\t\tassertEquals(\"Rounding \"+ fdf.format(januaryOneDate) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", januaryOneDate, DateUtils.round(januaryOneDate, calendarField));\n+\t\tassertEquals(januaryOneDate, DateUtils.round(minDate, calendarField));\n+\t\tassertEquals(januaryOneDate, DateUtils.round(maxDate, calendarField));\n+\t\t\n+\t\tCalendar minCalendar = Calendar.getInstance();\n+\t\tminCalendar.setTime(minDate);\n+\t\tCalendar maxCalendar = Calendar.getInstance();\n+\t\tmaxCalendar.setTime(maxDate);\n+\t\tassertEquals(\"Rounding \"+ fdf.format(januaryOneCalendar) +\" as Date with CalendarField-value \"+ calendarField +\" must return itself\", januaryOneCalendar, DateUtils.round(januaryOneCalendar, calendarField));\n+\t\tassertEquals(januaryOneCalendar, DateUtils.round(minCalendar, calendarField));\n+\t\tassertEquals(januaryOneCalendar, DateUtils.round(maxCalendar, calendarField));\n+\n+\t\tDate toPrevRoundDate = DateUtils.addMilliseconds(minDate, -1);\n+\t\tDate toNextRoundDate = DateUtils.addMilliseconds(maxDate, 1);\n+\t\tassertFalse(fdf.format(minDate) +\" is not an lower-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));\n+\t\tassertFalse(fdf.format(maxDate) +\" is not an upper-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));\n+\t\t\n+\t\tCalendar toPrevRoundCalendar = Calendar.getInstance();\n+\t\ttoPrevRoundCalendar.setTime(toPrevRoundDate);\n+\t\tCalendar toNextRoundCalendar = Calendar.getInstance();\n+\t\ttoNextRoundCalendar.setTime(toNextRoundDate);\n+\t\tassertFalse(fdf.format(minCalendar) +\" is not an lower-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toPrevRoundDate, calendarField)));\n+\t\tassertFalse(fdf.format(maxCalendar) +\" is not an upper-extreme when rounding as Date with CalendarField-value \"+ calendarField, januaryOneDate.equals(DateUtils.round(toNextRoundDate, calendarField)));\n+\t}\n+}\n--- a/src/test/org/apache/commons/lang/time/TimeTestSuite.java\n+++ b/src/test/org/apache/commons/lang/time/TimeTestSuite.java\n         suite.addTest(StopWatchTest.suite());\n         suite.addTest(FastDateFormatTest.suite());\n         suite.addTest(DateUtilsFragmentTest.suite());\n+        suite.addTest(DateUtilsRoundingTest.suite());\n         return suite;\n     }\n }", "timestamp": 1225904443, "metainfo": ""}