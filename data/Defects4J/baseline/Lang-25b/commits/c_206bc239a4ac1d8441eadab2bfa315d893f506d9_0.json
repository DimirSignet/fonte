{"sha": "206bc239a4ac1d8441eadab2bfa315d893f506d9", "log": "javadoc/checkstyle changes only  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n  * \n  * <p>Limitations inherited from <code>java.text.MessageFormat</code>:\n  * <ul>\n- * <li>When using \"choice\" subformats, support for nested formatting instructions is limited to that provided by the base class.</li>\n- * <li>Thread-safety of <code>Format</code>s, including <code>MessageFormat</code> and thus <code>ExtendedMessageFormat</code>, is not guaranteed.</li>\n+ * <li>When using \"choice\" subformats, support for nested formatting instructions is limited\n+ *     to that provided by the base class.</li>\n+ * <li>Thread-safety of <code>Format</code>s, including <code>MessageFormat</code> and thus\n+ *     <code>ExtendedMessageFormat</code>, is not guaranteed.</li>\n  * </ul>\n  * </p>\n  * \n                 try {\n                     return Integer.parseInt(result.toString());\n                 } catch (NumberFormatException e) {\n-                    //we've already ensured only digits, so unless something outlandishly large was specified we should be okay.\n+                    // we've already ensured only digits, so unless something\n+                    // outlandishly large was specified we should be okay.\n                 }\n             }\n             error = !Character.isDigit(c);\n      * Insert formats back into the pattern for toPattern() support.\n      *\n      * @param pattern source\n-     * @param formats the Formats to insert\n-     * @param metaFormat Format to format the Formats\n+     * @param customPatterns The custom patterns to re-insert, if any\n      * @return full pattern\n      */\n     private String insertFormats(String pattern, ArrayList customPatterns) {\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n  * <p>A suite of utilities surrounding the use of the\n  * {@link java.util.Calendar} and {@link java.util.Date} object.</p>\n  * \n- * <p>DateUtils contains a lot of common methods considering manipulations of Dates or Calendars.\n- * Some methods require some extra explanation.\n- * The truncate and round methods could be considered the Math.floor(), Math.ceil() or Math.round versions for dates\n+ * <p>DateUtils contains a lot of common methods considering manipulations\n+ * of Dates or Calendars. Some methods require some extra explanation.\n+ * The truncate and round methods could be considered the Math.floor(),\n+ * Math.ceil() or Math.round versions for dates\n  * This way date-fields will be ignored in bottom-up order.\n- * As a complement to these methods we've introduced some fragment-methods. With these methods the Date-fields will be ignored in top-down order.\n- * Since a date without a year is not a valid date, you have to decide in what kind of date-field you want your result, for instance milliseconds or days.\n+ * As a complement to these methods we've introduced some fragment-methods.\n+ * With these methods the Date-fields will be ignored in top-down order.\n+ * Since a date without a year is not a valid date, you have to decide in what\n+ * kind of date-field you want your result, for instance milliseconds or days.\n  * </p>\n  *   \n  *   \n      *  <li>January 1, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538</li>\n      *  <li>January 6, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538</li>\n      *  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10538 (10*1000 + 538)</li>\n-     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in milliseconds)</li>\n+     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n+     *   (a millisecond cannot be split in milliseconds)</li>\n      * </ul>\n      * </p>\n      * \n      * \n      * <p>\n      * <ul>\n-     *  <li>January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10 (equivalent to deprecated date.getSeconds())</li>\n-     *  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10 (equivalent to deprecated date.getSeconds())</li>\n-     *  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110 (7*3600 + 15*60 + 10)</li>\n-     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in seconds)</li>\n+     *  <li>January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10\n+     *   (equivalent to deprecated date.getSeconds())</li>\n+     *  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10\n+     *   (equivalent to deprecated date.getSeconds())</li>\n+     *  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110\n+     *   (7*3600 + 15*60 + 10)</li>\n+     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n+     *   (a millisecond cannot be split in seconds)</li>\n      * </ul>\n      * </p>\n      * \n      * \n      * <p>\n      * <ul>\n-     *  <li>January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15 (equivalent to deprecated date.getMinutes())</li>\n-     *  <li>January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15 (equivalent to deprecated date.getMinutes())</li>\n+     *  <li>January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15\n+     *   (equivalent to deprecated date.getMinutes())</li>\n+     *  <li>January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15\n+     *   (equivalent to deprecated date.getMinutes())</li>\n      *  <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 15</li>\n      *  <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 435 (7*60 + 15)</li>\n-     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in minutes)</li>\n+     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n+     *   (a millisecond cannot be split in minutes)</li>\n      * </ul>\n      * </p>\n      * \n      * \n      * <p>\n      * <ul>\n-     *  <li>January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7 (equivalent to deprecated date.getHours())</li>\n-     *  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7 (equivalent to deprecated date.getHours())</li>\n+     *  <li>January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7\n+     *   (equivalent to deprecated date.getHours())</li>\n+     *  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7\n+     *   (equivalent to deprecated date.getHours())</li>\n      *  <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 7</li>\n      *  <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 127 (5*24 + 7)</li>\n-     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in hours)</li>\n+     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n+     *   (a millisecond cannot be split in hours)</li>\n      * </ul>\n      * </p>\n      * \n      *  \n      * <p>\n      * <ul>\n-     *  <li>January 28, 2008 with Calendar.MONTH as fragment will return 28 (equivalent to deprecated date.getDay())</li>\n-     *  <li>February 28, 2008 with Calendar.MONTH as fragment will return 28 (equivalent to deprecated date.getDay())</li>\n+     *  <li>January 28, 2008 with Calendar.MONTH as fragment will return 28\n+     *   (equivalent to deprecated date.getDay())</li>\n+     *  <li>February 28, 2008 with Calendar.MONTH as fragment will return 28\n+     *   (equivalent to deprecated date.getDay())</li>\n      *  <li>January 28, 2008 with Calendar.YEAR as fragment will return 28</li>\n      *  <li>February 28, 2008 with Calendar.YEAR as fragment will return 59</li>\n-     *  <li>January 28, 2008 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in days)</li>\n+     *  <li>January 28, 2008 with Calendar.MILLISECOND as fragment will return 0\n+     *   (a millisecond cannot be split in days)</li>\n      * </ul>\n      * </p>\n      * \n      * \n      * <p>\n      * <ul>\n-     *  <li>January 1, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538 (equivalent to calendar.get(Calendar.MILLISECOND))</li>\n-     *  <li>January 6, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538 (equivalent to calendar.get(Calendar.MILLISECOND))</li>\n-     *  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10538 (10*1000 + 538)</li>\n-     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in milliseconds)</li>\n+     *  <li>January 1, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538\n+     *   (equivalent to calendar.get(Calendar.MILLISECOND))</li>\n+     *  <li>January 6, 2008 7:15:10.538 with Calendar.SECOND as fragment will return 538\n+     *   (equivalent to calendar.get(Calendar.MILLISECOND))</li>\n+     *  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10538\n+     *   (10*1000 + 538)</li>\n+     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n+     *   (a millisecond cannot be split in milliseconds)</li>\n      * </ul>\n      * </p>\n      * \n      * \n      * <p>\n      * <ul>\n-     *  <li>January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10 (equivalent to calendar.get(Calendar.SECOND))</li>\n-     *  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10 (equivalent to calendar.get(Calendar.SECOND))</li>\n-     *  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110 (7*3600 + 15*60 + 10)</li>\n-     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in seconds)</li>\n+     *  <li>January 1, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10\n+     *   (equivalent to calendar.get(Calendar.SECOND))</li>\n+     *  <li>January 6, 2008 7:15:10.538 with Calendar.MINUTE as fragment will return 10\n+     *   (equivalent to calendar.get(Calendar.SECOND))</li>\n+     *  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 26110\n+     *   (7*3600 + 15*60 + 10)</li>\n+     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n+     *   (a millisecond cannot be split in seconds)</li>\n      * </ul>\n      * </p>\n      * \n      * \n      * <p>\n      * <ul>\n-     *  <li>January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15 (equivalent to calendar.get(Calendar.MINUTES))</li>\n-     *  <li>January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15 (equivalent to calendar.get(Calendar.MINUTES))</li>\n+     *  <li>January 1, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15\n+     *   (equivalent to calendar.get(Calendar.MINUTES))</li>\n+     *  <li>January 6, 2008 7:15:10.538 with Calendar.HOUR_OF_DAY as fragment will return 15\n+     *   (equivalent to calendar.get(Calendar.MINUTES))</li>\n      *  <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 15</li>\n      *  <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 435 (7*60 + 15)</li>\n-     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in minutes)</li>\n+     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n+     *   (a millisecond cannot be split in minutes)</li>\n      * </ul>\n      * </p>\n      * \n      *  \n      * <p>\n      * <ul>\n-     *  <li>January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7 (equivalent to calendar.get(Calendar.HOUR_OF_DAY))</li>\n-     *  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7 (equivalent to calendar.get(Calendar.HOUR_OF_DAY))</li>\n+     *  <li>January 1, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7\n+     *   (equivalent to calendar.get(Calendar.HOUR_OF_DAY))</li>\n+     *  <li>January 6, 2008 7:15:10.538 with Calendar.DAY_OF_YEAR as fragment will return 7\n+     *   (equivalent to calendar.get(Calendar.HOUR_OF_DAY))</li>\n      *  <li>January 1, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 7</li>\n      *  <li>January 6, 2008 7:15:10.538 with Calendar.MONTH as fragment will return 127 (5*24 + 7)</li>\n-     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in hours)</li>\n+     *  <li>January 16, 2008 7:15:10.538 with Calendar.MILLISECOND as fragment will return 0\n+     *   (a millisecond cannot be split in hours)</li>\n      * </ul>\n      * </p>\n      *  \n      * \n      * <p>\n      * <ul>\n-     *  <li>January 28, 2008 with Calendar.MONTH as fragment will return 28 (equivalent to calendar.get(Calendar.DAY_OF_MONTH))</li>\n-     *  <li>February 28, 2008 with Calendar.MONTH as fragment will return 28 (equivalent to calendar.get(Calendar.DAY_OF_MONTH))</li>\n-     *  <li>January 28, 2008 with Calendar.YEAR as fragment will return 28 (equivalent to calendar.get(Calendar.DAY_OF_YEAR))</li>\n-     *  <li>February 28, 2008 with Calendar.YEAR as fragment will return 59 (equivalent to calendar.get(Calendar.DAY_OF_YEAR))</li>\n-     *  <li>January 28, 2008 with Calendar.MILLISECOND as fragment will return 0 (a millisecond cannot be split in days)</li>\n+     *  <li>January 28, 2008 with Calendar.MONTH as fragment will return 28\n+     *   (equivalent to calendar.get(Calendar.DAY_OF_MONTH))</li>\n+     *  <li>February 28, 2008 with Calendar.MONTH as fragment will return 28\n+     *   (equivalent to calendar.get(Calendar.DAY_OF_MONTH))</li>\n+     *  <li>January 28, 2008 with Calendar.YEAR as fragment will return 28\n+     *   (equivalent to calendar.get(Calendar.DAY_OF_YEAR))</li>\n+     *  <li>February 28, 2008 with Calendar.YEAR as fragment will return 59\n+     *   (equivalent to calendar.get(Calendar.DAY_OF_YEAR))</li>\n+     *  <li>January 28, 2008 with Calendar.MILLISECOND as fragment will return 0\n+     *   (a millisecond cannot be split in days)</li>\n      * </ul>\n      * </p>\n      * ", "timestamp": 1204765091, "metainfo": ""}