{"sha": "c21496975943dc9cfd65d7f6dd6e2aeb4d42d147", "log": "Javadoc fixes and improved tests bug 21952, from Phil Steitz   ", "commit": "\n--- a/src/java/org/apache/commons/lang/CharSetUtils.java\n+++ b/src/java/org/apache/commons/lang/CharSetUtils.java\n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: CharSetUtils.java,v 1.14 2003/07/19 20:22:36 scolebourne Exp $\n+ * @version $Id: CharSetUtils.java,v 1.15 2003/07/30 00:08:38 scolebourne Exp $\n  */\n public class CharSetUtils {\n \n      *\n      * @param str  String to replace characters in, may be null\n      * @param repl  String to find that will be replaced, must not be null\n-     * @param with  String to put into the target String, must not be null\n+     * @param with  String to put into the target String, must not be null or empty (\"\")\n      * @return translated String, <code>null</code> if null string input\n-     * @throws NullPointerException if <code>target</code>, <code>with</code>\n-     *  or <code>repl</code> is <code>null</code>\n+     * @throws NullPointerException if <code>with</code> or <code>repl</code> \n+     *  is <code>null</code>\n+     * @throws ArrayIndexOutOfBoundsException if <code>with</code> is empty (\"\")\n      */\n     public static String translate(String str, String repl, String with) {\n         if (str == null) {\n--- a/src/test/org/apache/commons/lang/CharSetUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/CharSetUtilsTest.java\n  * @author <a href=\"mailto:bayard@generationjava.com\">Henri Yandell</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Stephen Colebourne\n- * @version $Id: CharSetUtilsTest.java,v 1.8 2003/07/19 20:22:36 scolebourne Exp $\n+ * @version $Id: CharSetUtilsTest.java,v 1.9 2003/07/30 00:08:38 scolebourne Exp $\n  */\n public class CharSetUtilsTest extends TestCase {\n     \n \n     public void testSqueeze() {\n         assertEquals(null, CharSetUtils.squeeze(null, (String[]) null));\n+        assertEquals(null, CharSetUtils.squeeze(null, (String) null));\n         assertEquals(null, CharSetUtils.squeeze(null, new String[] { \"el\" }));\n         assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", new String[] { \"el\" }));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"\"));\n         assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[] { \"el\" }));\n         assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] { \"e\" }));\n         assertEquals(\"fofof\", CharSetUtils.squeeze(\"fooffooff\", new String[] { \"of\" }));\n         assertEquals(\"fof\", CharSetUtils.squeeze(\"fooooff\", new String[] { \"fo\" }));\n         try {\n             CharSetUtils.squeeze(\"hello\", (String[]) null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {}\n+        try {\n+            CharSetUtils.squeeze(\"hello\", new String[] { \"\", null });\n+            fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {}\n     }\n \n     public void testCount() {\n         assertEquals(0, CharSetUtils.count(null, (String[]) null));\n+        assertEquals(0, CharSetUtils.count(null, (String) null));\n         assertEquals(0, CharSetUtils.count(null, new String[] { \"el\" }));\n         assertEquals(3, CharSetUtils.count(\"hello\", new String[] { \"el\" }));\n         assertEquals(0, CharSetUtils.count(\"\", new String[] { \"el\" }));\n         assertEquals(2, CharSetUtils.count(\"hello\", new String[] { \"e-i\" }));\n         assertEquals(5, CharSetUtils.count(\"hello\", new String[] { \"a-z\" }));\n         assertEquals(0, CharSetUtils.count(\"hello\", new String[] { \"\" }));\n+        assertEquals(0, CharSetUtils.count(\"hello\", \"\"));\n         try {\n             CharSetUtils.count(\"hello\", (String[]) null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {}\n+        try {\n+            CharSetUtils.count(\"hello\", new String[] { \"\", null });\n+            fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {}\n     }\n \n     public void testKeep() {\n         assertEquals(null, CharSetUtils.keep(null, (String[]) null));\n+        assertEquals(null, CharSetUtils.keep(null, (String) null));\n         assertEquals(null, CharSetUtils.keep(null, new String[] { \"el\" }));\n         assertEquals(\"ell\", CharSetUtils.keep(\"hello\", new String[] { \"el\" }));\n         assertEquals(\"hello\", CharSetUtils.keep(\"hello\", new String[] { \"elho\" }));\n         assertEquals(\"\", CharSetUtils.keep(\"hello\", new String[] { \"\" }));\n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", \"\"));\n         assertEquals(\"hello\", CharSetUtils.keep(\"hello\", new String[] { \"a-z\" }));\n         assertEquals(\"----\", CharSetUtils.keep(\"----\", new String[] { \"-\" }));\n         assertEquals(\"ll\", CharSetUtils.keep(\"hello\", new String[] { \"l\" }));\n         try {\n             CharSetUtils.keep(\"hello\", (String[]) null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {}\n+        try {\n+            CharSetUtils.keep(\"hello\", new String[] { \"\", null});\n+            fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {}\n     }\n \n     public void testDelete() {\n         assertEquals(null, CharSetUtils.delete(null, (String[]) null));\n+        assertEquals(null, CharSetUtils.delete(null,(String) null));\n         assertEquals(null, CharSetUtils.delete(null, new String[] { \"el\" }));\n         assertEquals(\"ho\", CharSetUtils.delete(\"hello\", new String[] { \"el\" }));\n         assertEquals(\"\", CharSetUtils.delete(\"hello\", new String[] { \"elho\" }));\n         assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] { \"\" }));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"\"));\n         assertEquals(\"\", CharSetUtils.delete(\"hello\", new String[] { \"a-z\" }));\n         assertEquals(\"\", CharSetUtils.delete(\"----\", new String[] { \"-\" }));\n         assertEquals(\"heo\", CharSetUtils.delete(\"hello\", new String[] { \"l\" }));\n         try {\n             CharSetUtils.delete(\"hello\", (String[]) null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {}\n+        try {\n+            CharSetUtils.delete(\"hello\",  new String[] { \"-\", null });\n+            fail(\"Expecting NullPointerException\");\n         } catch (NullPointerException ex) {}\n     }\n     \n+    public void testTranslate() {\n+        assertEquals(null, CharSetUtils.translate(null, null, null));\n+        assertEquals(\"\", CharSetUtils.translate(\"\",\"a\", \"b\"));\n+        assertEquals(\"jelly\", CharSetUtils.translate(\"hello\", \"ho\", \"jy\"));\n+        assertEquals(\"jellj\", CharSetUtils.translate(\"hello\", \"ho\", \"j\"));\n+        assertEquals(\"jelly\", CharSetUtils.translate(\"hello\", \"ho\", \"jyx\"));\n+        assertEquals(\"\\rhello\\r\", CharSetUtils.translate(\"\\nhello\\n\", \"\\n\", \"\\r\"));\n+        assertEquals(\"hello\", CharSetUtils.translate(\"hello\", \"\", \"x\"));\n+        assertEquals(\"hello\", CharSetUtils.translate(\"hello\", \"\", \"\"));\n+        try {\n+            CharSetUtils.translate(\"hello\", null, null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {}\n+        try {\n+            CharSetUtils.translate(\"hello\", \"h\", null);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {}\n+        try {\n+            CharSetUtils.translate(\"hello\", null, \"a\");\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {}\n+        try {\n+            CharSetUtils.translate(\"hello\", \"h\", \"\");\n+            fail(\"Expecting ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException ex) {}\n+    }         \n }\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n  *\n  * @author of original StringUtilsTest.testEscape = ?\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n- * @version $Id: StringEscapeUtilsTest.java,v 1.9 2003/07/19 20:22:36 scolebourne Exp $\n+ * @version $Id: StringEscapeUtilsTest.java,v 1.10 2003/07/30 00:08:38 scolebourne Exp $\n  */\n public class StringEscapeUtilsTest extends TestCase {\n     private final static String FOO = \"foo\";\n             fail();\n         } catch (IllegalArgumentException ex) {\n         }\n+        try {\n+            String str = StringEscapeUtils.unescapeJava(\"\\\\u02-3\");\n+            fail();\n+        } catch (RuntimeException ex) {\n+        }\n         \n         assertUnescapeJava(\"\", \"\");\n         assertUnescapeJava(\"test\", \"test\");\n         assertUnescapeJava(\"\\ntest\\b\", \"\\\\ntest\\\\b\");\n         assertUnescapeJava(\"\\u123425foo\\ntest\\b\", \"\\\\u123425foo\\\\ntest\\\\b\");\n+        assertUnescapeJava(\"'\\foo\\teste\\r\", \"\\\\'\\\\foo\\\\teste\\\\r\");\n+        assertUnescapeJava(\"\\\\\", \"\\\\\");\n         //foo\n         assertUnescapeJava(\"lowercase unicode\", \"\\uABCDx\", \"\\\\uabcdx\");\n         assertUnescapeJava(\"uppercase unicode\", \"\\uABCDx\", \"\\\\uABCDx\");\n \n         assertEquals(\"unescape(String) failed\" +\n                 (message == null ? \"\" : (\": \" + message)) +\n-                \": expected '\" + StringUtils.escape(expected) +\n+                \": expected '\" + StringEscapeUtils.escapeJava(expected) +\n                 // we escape this so we can see it in the error message\n-                \"' actual '\" + StringUtils.escape(actual) + \"'\",\n+                \"' actual '\" + StringEscapeUtils.escapeJava(actual) + \"'\",\n                 expected, actual);\n \n         StringPrintWriter writer = new StringPrintWriter();\n         {\"no escaping\", \"plain text\", \"plain text\"},\n         {\"no escaping\", \"plain text\", \"plain text\"},\n         {\"empty string\", \"\", \"\"},\n+        {\"null\", null, null},\n         {\"ampersand\", \"bread &amp; butter\", \"bread & butter\"},\n         {\"quotes\", \"&quot;bread&quot; &amp; butter\", \"\\\"bread\\\" & butter\"},\n         {\"final character only\", \"greater than &gt;\", \"greater than >\"},\n             assertEquals(htmlEscapes[i][0], htmlEscapes[i][2], StringEscapeUtils.unescapeHtml(htmlEscapes[i][1]));\n             // todo: add test for (and implement) Writer-based version\n         }\n-        // \\u00E7 is a cedilla ()\n+        // \\u00E7 is a cedilla (c with wiggle under)\n         // note that the test string must be 7-bit-clean (unicode escaped) or else it will compile incorrectly\n         // on some locales\n         assertEquals(\"funny chars pass through OK\", \"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml(\"Fran\\u00E7ais\"));\n \n         assertEquals(\"ain't\", StringEscapeUtils.unescapeXml(\"ain&apos;t\"));\n         assertEquals(\"ain&apos;t\", StringEscapeUtils.escapeXml(\"ain't\"));\n+        assertEquals(\"\", StringEscapeUtils.escapeXml(\"\"));\n+        assertEquals(null, StringEscapeUtils.escapeXml(null));\n+        assertEquals(null, StringEscapeUtils.unescapeXml(null));\n     }\n \n     // SQL\n     public void testEscapeSql() throws Exception\n     {\n         assertEquals(\"don''t stop\", StringEscapeUtils.escapeSql(\"don't stop\"));\n+        assertEquals(\"\", StringEscapeUtils.escapeSql(\"\"));\n+        assertEquals(null, StringEscapeUtils.escapeSql(null));\n     }\n }\n ", "timestamp": 1059523718, "metainfo": ""}