{"sha": "cd287265b44edebec85c641769ae5e2a58c28c52", "log": "Change behaviour of indexOf to match subclasses, with appropriate comments bug 30929   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/Nestable.java\n+++ b/src/java/org/apache/commons/lang/exception/Nestable.java\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: Nestable.java,v 1.11 2004/02/18 22:54:04 ggregory Exp $\n+ * @version $Id: Nestable.java,v 1.12 2004/10/09 10:45:24 scolebourne Exp $\n  */\n public interface Nestable {\n     \n \n     /**\n      * Returns the index, numbered from 0, of the first occurrence of the\n-     * specified type in the chain of <code>Throwable</code>s, or -1 if the\n-     * specified type is not found in the chain.\n+     * specified type, or a subclass, in the chain of <code>Throwable</code>s.\n+     * The method returns -1 if the specified type is not found in the chain.\n+     * <p>\n+     * NOTE: From v2.1, we have clarified the <code>Nestable</code> interface\n+     * such that this method matches subclasses.\n+     * If you want to NOT match subclasses, please use\n+     * {@link ExceptionUtils#indexOfThrowable(Throwable, Class)}\n+     * (which is avaiable in all versions of lang).\n      *\n-     * @param type <code>Class</code> to be found\n+     * @param type  the type to find, subclasses match, null returns -1\n      * @return index of the first occurrence of the type in the chain, or -1 if\n      * the type is not found\n      */\n \n     /**\n      * Returns the index, numbered from 0, of the first <code>Throwable</code>\n-     * that matches the specified type in the chain of <code>Throwable</code>s\n-     * with an index greater than or equal to the specified index, or -1 if\n-     * the type is not found.\n+     * that matches the specified type, or a subclass, in the chain of <code>Throwable</code>s\n+     * with an index greater than or equal to the specified index.\n+     * The method returns -1 if the specified type is not found in the chain.\n+     * <p>\n+     * NOTE: From v2.1, we have clarified the <code>Nestable</code> interface\n+     * such that this method matches subclasses.\n+     * If you want to NOT match subclasses, please use\n+     * {@link ExceptionUtils#indexOfThrowable(Throwable, Class, int)}\n+     * (which is avaiable in all versions of lang).\n      *\n-     * @param type <code>Class</code> to be found\n+     * @param type  the type to find, subclasses match, null returns -1\n      * @param fromIndex the index, numbered from 0, of the starting position in\n      * the chain to be searched\n      * @return index of the first occurrence of the type in the chain, or -1 if\n \n     /**\n      * Prints the stack trace for this exception only--root cause not\n-     * included--using the provided writer.  Used by {@link\n-     * org.apache.commons.lang.exception.NestableDelegate} to write\n+     * included--using the provided writer.  Used by\n+     * {@link org.apache.commons.lang.exception.NestableDelegate} to write\n      * individual stack traces to a buffer.  The implementation of\n      * this method should call\n      * <code>super.printStackTrace(out);</code> in most cases.\n--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n  * @author Sean C. Sullivan\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: NestableDelegate.java,v 1.25 2004/09/30 07:03:25 bayard Exp $\n+ * @version $Id: NestableDelegate.java,v 1.26 2004/10/09 10:45:24 scolebourne Exp $\n  */\n public class NestableDelegate implements Serializable {\n \n     /**\n      * Whether to print the stack trace top-down.\n      * This public flag may be set by calling code, typically in initialisation.\n+     * This exists for backwards compatability, setting it to false will return\n+     * the library to v1.0 behaviour (but will affect all users of the library\n+     * in the classloader).\n      * @since 2.0\n      */\n     public static boolean topDown = true;\n     /**\n      * Whether to trim the repeated stack trace.\n      * This public flag may be set by calling code, typically in initialisation.\n+     * This exists for backwards compatability, setting it to false will return\n+     * the library to v1.0 behaviour (but will affect all users of the library\n+     * in the classloader).\n      * @since 2.0\n      */\n     public static boolean trimStackFrames = true;\n+    \n+    /**\n+     * Whether to match subclasses via indexOf.\n+     * This public flag may be set by calling code, typically in initialisation.\n+     * This exists for backwards compatability, setting it to false will return\n+     * the library to v2.0 behaviour (but will affect all users of the library\n+     * in the classloader).\n+     * @since 2.1\n+     */\n+    public static boolean matchSubclasses = true;\n \n     /**\n      * Constructs a new <code>NestableDelegate</code> instance to manage the\n \n     /**\n      * Returns the index, numbered from 0, of the first <code>Throwable</code>\n-     * that matches the specified type in the chain of <code>Throwable</code>s\n-     * held in this delegate's <code>Nestable</code> with an index greater than\n-     * or equal to the specified index, or -1 if the type is not found.\n-     *\n-     * @param type <code>Class</code> to be found\n+     * that matches the specified type, or a subclass, in the chain of <code>Throwable</code>s\n+     * with an index greater than or equal to the specified index.\n+     * The method returns -1 if the specified type is not found in the chain.\n+     * <p>\n+     * NOTE: From v2.1, we have clarified the <code>Nestable</code> interface\n+     * such that this method matches subclasses.\n+     * If you want to NOT match subclasses, please use\n+     * {@link ExceptionUtils#indexOfThrowable(Throwable, Class, int)}\n+     * (which is avaiable in all versions of lang).\n+     * An alternative is to use the public static flag {@link #matchSubclasses}\n+     * on <code>NestableDelegate</code>, however this is not recommended.\n+     *\n+     * @param type  the type to find, subclasses match, null returns -1\n      * @param fromIndex the index, numbered from 0, of the starting position in\n      * the chain to be searched\n      * @return index of the first occurrence of the type in the chain, or -1 if\n      * @since 2.0\n      */\n     public int indexOfThrowable(Class type, int fromIndex) {\n+        if (type == null) {\n+            return -1;\n+        }\n         if (fromIndex < 0) {\n             throw new IndexOutOfBoundsException(\"The start index was out of bounds: \" + fromIndex);\n         }\n             throw new IndexOutOfBoundsException(\"The start index was out of bounds: \"\n                 + fromIndex + \" >= \" + throwables.length);\n         }\n-        for (int i = fromIndex; i < throwables.length; i++) {\n-// TODO: decide on whether to include this\n-//            if (type.isAssignableFrom(throwables[i].getClass())) {\n-            if (throwables[i].getClass().equals(type)) {\n-                return i;\n+        if (matchSubclasses) {\n+            for (int i = fromIndex; i < throwables.length; i++) {\n+                if (type.isAssignableFrom(throwables[i].getClass())) {\n+                    return i;\n+                }\n+            }\n+        } else {\n+            for (int i = fromIndex; i < throwables.length; i++) {\n+                if (type.equals(throwables[i].getClass())) {\n+                    return i;\n+                }\n             }\n         }\n         return -1;\n--- a/src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java\n  * interface.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: AbstractNestableTestCase.java,v 1.6 2004/02/18 23:02:15 ggregory Exp $\n+ * @version $Id: AbstractNestableTestCase.java,v 1.7 2004/10/09 10:45:24 scolebourne Exp $\n  */\n public abstract class AbstractNestableTestCase extends TestCase\n {\n         {\n             doNestableExceptionIndexOfThrowable(n, throwables[i], indexes[i], msgs[indexes[i]]);\n         }\n+        doNestableExceptionIndexOfThrowable(n, getBaseThrowableClass(), 0, msgs[0]);\n         doNestableExceptionIndexOfThrowable(n, java.util.Date.class, -1, null);\n+        doNestableExceptionIndexOfThrowable(n, null, -1, null);\n     }\n     \n     private void doNestableExceptionIndexOfThrowable(Nestable n, Class type, int expectedIndex, String expectedMsg)\n         Throwable t = null;\n         \n         int index = n.indexOfThrowable(type);\n-        assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n+        assertEquals(\"index of throwable \" + (type == null ? \"null\" : type.getName()), expectedIndex, index);\n         if(expectedIndex > -1)\n         {\n             t = n.getThrowable(index);\n         doNestableExceptionIndexOfThrowableI(n, getTester1Class(), 4, -1, null);\n         doNestableExceptionIndexOfThrowableI(n, getThrowableClass(), 2, 4, msgs[4]);\n         doNestableExceptionIndexOfThrowableI(n, java.util.Date.class, 0, -1, null);\n+        doNestableExceptionIndexOfThrowableI(n, null, 0, -1, null);\n         \n         // Test for index out of bounds\n         try\n         Throwable t = null;\n         \n         int index = n.indexOfThrowable(type, fromIndex);\n-        assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n+        assertEquals(\"index of throwable \" + (type == null ? \"null\" : type.getName()), expectedIndex, index);\n         if(expectedIndex > -1)\n         {\n             t = n.getThrowable(index);\n      * @return the class\n      */\n     public abstract Class getThrowableClass();\n+\n+    /**\n+     * Returns the base class being used, typically Error, Eception or RuntimeException.\n+     *\n+     * @return the class\n+     */\n+    public abstract Class getBaseThrowableClass();\n+\n }\n \n--- a/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java\n package org.apache.commons.lang.exception;\n \n import java.io.ByteArrayOutputStream;\n+import java.io.EOFException;\n+import java.io.IOException;\n import java.io.PrintStream;\n import java.io.PrintWriter;\n \n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n- * @version $Id: NestableDelegateTestCase.java,v 1.8 2004/02/18 23:02:15 ggregory Exp $\n+ * @version $Id: NestableDelegateTestCase.java,v 1.9 2004/10/09 10:45:24 scolebourne Exp $\n  */\n public class NestableDelegateTestCase extends junit.framework.TestCase {\n     private static final String CONSTRUCTOR_FAILED_MSG = \n         throwables[1] = NestableDelegateTester2.class;\n         throwables[2] = NestableDelegateTester1.class;\n         throwables[3] = NestableDelegateTester2.class;\n-        throwables[4] = Exception.class;\n+        throwables[4] = EOFException.class;\n         int[] indexes = {0, 1, 0, 1, 4};\n         n = new NestableDelegateTester1(msgs[0], \n                 new NestableDelegateTester2(msgs[1], \n                     new NestableDelegateTester1(\n                         new NestableDelegateTester2(msgs[3], \n-                            new Exception(msgs[4])\n+                            new EOFException(msgs[4])\n                         )\n                     )\n                 )\n         doNestableDelegateIndexOfThrowable(d, NestableDelegateTester1.class, 1, 2, msgs[2]);\n         doNestableDelegateIndexOfThrowable(d, NestableDelegateTester1.class, 3, -1, null);\n         doNestableDelegateIndexOfThrowable(d, NestableDelegateTester1.class, 4, -1, null);\n-        doNestableDelegateIndexOfThrowable(d, Exception.class, 2, 4, msgs[4]);\n+        doNestableDelegateIndexOfThrowable(d, EOFException.class, 2, 4, msgs[4]);\n+        doNestableDelegateIndexOfThrowable(d, IOException.class, 2, 4, msgs[4]);\n+        doNestableDelegateIndexOfThrowable(d, Exception.class, 2, 2, msgs[2]);\n+        doNestableDelegateIndexOfThrowable(d, Exception.class, 0, 0, msgs[0]);\n         doNestableDelegateIndexOfThrowable(d, java.util.Date.class, 0, -1, null);\n+        doNestableDelegateIndexOfThrowable(d, null, 0, -1, null);\n         \n         // Test for index out of bounds\n         try\n         Throwable t = null;\n         \n         int index = d.indexOfThrowable(type, fromIndex);\n-        assertEquals(\"index of throwable \" + type.getName(), expectedIndex, index);\n+        assertEquals(\"index of throwable \" + (type == null ? \"null\" : type.getName()), expectedIndex, index);\n         if(expectedIndex > -1)\n         {\n             t = d.getThrowable(index);\n--- a/src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java\n  */\n package org.apache.commons.lang.exception;\n \n+import java.io.EOFException;\n+\n import junit.framework.Test;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n  * Tests the org.apache.commons.lang.exception.NestableError class.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableErrorTestCase.java,v 1.6 2004/02/18 23:02:15 ggregory Exp $\n+ * @version $Id: NestableErrorTestCase.java,v 1.7 2004/10/09 10:45:24 scolebourne Exp $\n  */\n public class NestableErrorTestCase extends AbstractNestableTestCase {\n     \n      */\n     public Throwable getThrowable(String msg)\n     {\n-        return new Error(msg);\n+        return new EOFException(msg);\n     }\n     \n     /**\n      * @see AbstractNestableTestCase#getThrowableClass()\n      */\n     public Class getThrowableClass()\n+    {\n+        return EOFException.class;\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getBaseThrowableClass()\n+     */\n+    public Class getBaseThrowableClass()\n     {\n         return Error.class;\n     }\n--- a/src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableExceptionTestCase.java\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n+import java.io.EOFException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.PrintStream;\n  * Tests the org.apache.commons.lang.exception.NestableException class.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableExceptionTestCase.java,v 1.11 2004/02/18 23:02:15 ggregory Exp $\n+ * @version $Id: NestableExceptionTestCase.java,v 1.12 2004/10/09 10:45:24 scolebourne Exp $\n  */\n public class NestableExceptionTestCase extends AbstractNestableTestCase {\n     \n      */\n     public Throwable getThrowable(String msg)\n     {\n-        return new Exception(msg);\n+        return new EOFException(msg);\n     }\n     \n     /**\n      */\n     public Class getThrowableClass()\n     {\n+        return EOFException.class;\n+    }\n+\n+    /**\n+     * @see AbstractNestableTestCase#getBaseThrowableClass()\n+     */\n+    public Class getBaseThrowableClass()\n+    {\n         return Exception.class;\n     }\n-\n+    \n     public void testSpecificPrintStackTrace()\n     {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n--- a/src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTestCase.java\n package org.apache.commons.lang.exception;\n \n import java.io.ByteArrayOutputStream;\n+import java.io.EOFException;\n import java.io.PrintStream;\n \n import junit.framework.Test;\n  * Tests the org.apache.commons.lang.exception.NestableRuntimeException class.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableRuntimeExceptionTestCase.java,v 1.11 2004/02/18 23:22:29 ggregory Exp $\n+ * @version $Id: NestableRuntimeExceptionTestCase.java,v 1.12 2004/10/09 10:45:24 scolebourne Exp $\n  */\n public class NestableRuntimeExceptionTestCase extends AbstractNestableTestCase {\n     \n      */\n     public Throwable getThrowable(String msg)\n     {\n-        return new RuntimeException(msg);\n+        return new EOFException(msg);\n     }\n     \n     /**\n      * @see AbstractNestableTestCase#getThrowableClass()\n      */\n     public Class getThrowableClass()\n+    {\n+        return EOFException.class;\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getBaseThrowableClass()\n+     */\n+    public Class getBaseThrowableClass()\n     {\n         return RuntimeException.class;\n     }", "timestamp": 1097318724, "metainfo": ""}