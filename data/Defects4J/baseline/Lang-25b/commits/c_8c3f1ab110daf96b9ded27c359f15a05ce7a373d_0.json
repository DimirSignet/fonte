{"sha": "8c3f1ab110daf96b9ded27c359f15a05ce7a373d", "log": "Add new empty array constants for number objects Declare variables as final Fix null behaviour to be null tolerant Javadoc null behaviour Fix formatting   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n  * @author Nikolay Metchev\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.13 2003/06/20 08:03:51 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.14 2003/06/25 23:32:08 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n     public static final String[] EMPTY_STRING_ARRAY = new String[0];\n     /** An empty immutable long array */\n     public static final long[] EMPTY_LONG_ARRAY = new long[0];\n+    /** An empty immutable Long array */\n+    public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];\n     /** An empty immutable int array */\n     public static final int[] EMPTY_INT_ARRAY = new int[0];\n+    /** An empty immutable Integer array */\n+    public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];\n     /** An empty immutable short array */\n     public static final short[] EMPTY_SHORT_ARRAY = new short[0];\n+    /** An empty immutable Short array */\n+    public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];\n     /** An empty immutable byte array */\n     public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n+    /** An empty immutable Byte array */\n+    public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];\n     /** An empty immutable double array */\n     public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];\n+    /** An empty immutable Double array */\n+    public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];\n     /** An empty immutable float array */\n     public static final float[] EMPTY_FLOAT_ARRAY = new float[0];\n+    /** An empty immutable Float array */\n+    public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];\n     /** An empty immutable boolean array */\n     public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];\n-    \n+    /** An empty immutable Boolean array */\n+    public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];\n+    /** An empty immutable char array */\n+    public static final char[] EMPTY_CHAR_ARRAY = new char[0];\n+    /** An empty immutable Character array */\n+    public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];\n+\n     /**\n      * <p>ArrayUtils instances should NOT be constructed in standard programming.\n      * Instead, the class should be used as <code>ArrayUtils.clone(new int[] {2})</code>.</p>\n      */\n     public ArrayUtils() {\n     }\n-\n+    \n     // Basic methods handling multi-dimensional arrays\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Outputs an array as a String, treating <code>null</code> as an empty array.</p>\n      *\n      * @param array  the array to get a toString for, may be <code>null</code>\n      * @return a String representation of the array, '{}' if <code>null</code> passed in\n      */\n-    public static String toString(Object array) {\n+    public static String toString(final Object array) {\n         return toString(array, \"{}\");\n     }\n-    \n+\n     /**\n      * <p>Outputs an array as a String handling <code>null</code>s.</p>\n      *\n      * @param stringIfNull  the String to return if the array is <code>null</code>\n      * @return a String representation of the array\n      */    \n-    public static String toString(Object array, String stringIfNull) {\n+    public static String toString(final Object array, final String stringIfNull) {\n         if (array == null) {\n             return stringIfNull;\n         }\n         return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n     }\n-    \n+\n     /**\n      * <p>Get a hashCode for an array handling multi-dimensional arrays correctly.</p>\n      * \n      * @param array  the array to get a hashCode for, may be <code>null</code>\n      * @return a hashCode for the array\n      */\n-    public static int hashCode(Object array) {\n+    public static int hashCode(final Object array) {\n         return new HashCodeBuilder().append(array).toHashCode();\n     }\n-    \n+\n     /**\n      * <p>Compares two arrays, using equals(), handling multi-dimensional arrays\n      * correctly.</p>\n      * @param array2  the array to get a hashCode for, may be <code>null</code>\n      * @return <code>true</code> if the arrays are equal\n      */\n-    public static boolean isEquals(Object array1, Object array2) {\n+    public static boolean isEquals(final Object array1, final Object array2) {\n         return new EqualsBuilder().append(array1, array2).isEquals();\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n-    \n     /**\n      * <p>Converts the given array into a {@link java.util.Map}. Each element of the array\n      * must be either a {@link java.util.Map.Entry} or an Array, containing at least two\n      *     {\"GREEN\", \"#00FF00\"},\n      *     {\"BLUE\", \"#0000FF\"}});\n      * </pre>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      *\n      * @param array  an array whose elements are either a {@link java.util.Map.Entry} or \n-     *  an Array containing at least two elements\n+     *  an Array containing at least two elements, may be <code>null</code>\n      * @return a <code>Map</code> that was created from the array\n-     * @throws IllegalArgumentException  if the array is <code>null</code>\n      * @throws IllegalArgumentException  if one element of this Array is\n      *  itself an Array containing less then two elements\n      * @throws IllegalArgumentException  if the array contains elements other\n      *  than {@link java.util.Map.Entry} and an Array\n      */\n-    public static Map toMap(Object[] array) {\n-        if (array == null) {\n-            throw new IllegalArgumentException(\"The array must not be null\");            \n-        }\n-        Map map = new HashMap((int) (array.length * 1.5));\n+    public static Map toMap(final Object[] array) {\n+        if (array == null) {\n+            return null;\n+        }\n+        final Map map = new HashMap((int) (array.length * 1.5));\n         for (int i = 0; i < array.length; i++) {\n             Object object = array[i];\n             if (object instanceof Map.Entry) {\n         }\n         return map;\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Shallow clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n      * <p>The objecs in the array are not cloned, thus there is no special\n      * handling for multi-dimensional arrays.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to shallow clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n-    public static Object[] clone(Object[] array) {\n+    public static Object[] clone(final Object[] array) {\n         if (array == null) {\n             return null;\n         }\n         return (Object[]) array.clone();\n     }\n-    \n+\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n-    public static long[] clone(long[] array) {\n+    public static long[] clone(final long[] array) {\n         if (array == null) {\n             return null;\n         }\n         return (long[]) array.clone();\n     }\n-    \n+\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n         }\n         return (int[]) array.clone();\n     }\n-    \n+\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n-    public static short[] clone(short[] array) {\n+    public static short[] clone(final short[] array) {\n         if (array == null) {\n             return null;\n         }\n         return (short[]) array.clone();\n     }\n-    \n+\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n-    public static char[] clone(char[] array) {\n+    public static char[] clone(final char[] array) {\n         if (array == null) {\n             return null;\n         }\n         return (char[]) array.clone();\n     }\n-    \n+\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n-    public static byte[] clone(byte[] array) {\n+    public static byte[] clone(final byte[] array) {\n         if (array == null) {\n             return null;\n         }\n         return (byte[]) array.clone();\n     }\n-    \n+\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n-    public static double[] clone(double[] array) {\n+    public static double[] clone(final double[] array) {\n         if (array == null) {\n             return null;\n         }\n         return (double[]) array.clone();\n     }\n-    \n+\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n-    public static float[] clone(float[] array) {\n+    public static float[] clone(final float[] array) {\n         if (array == null) {\n             return null;\n         }\n         return (float[]) array.clone();\n     }\n-    \n+\n     /**\n      * <p>Clones an array returning a typecast result and handling\n      * <code>null</code>.</p>\n      *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, or <code>null</code> if <code>null</code>\n      *  passed in\n      */\n-    public static boolean[] clone(boolean[] array) {\n+    public static boolean[] clone(final boolean[] array) {\n         if (array == null) {\n             return null;\n         }\n     }\n \n     //-----------------------------------------------------------------------\n-\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */    \n-    public static boolean isSameLength(Object[] array1, Object[] array2) {\n+    public static boolean isSameLength(final Object[] array1, final Object[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n         }\n         return true;\n     }\n-    \n+\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(long[] array1, long[] array2) {\n+    public static boolean isSameLength(final long[] array1, final long[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n         }\n         return true;\n     }\n-    \n+\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(int[] array1, int[] array2) {\n+    public static boolean isSameLength(final int[] array1, final int[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n         }\n         return true;\n     }\n-    \n+\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(short[] array1, short[] array2) {\n+    public static boolean isSameLength(final short[] array1, final short[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n         }\n         return true;\n     }\n-    \n+\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(char[] array1, char[] array2) {\n+    public static boolean isSameLength(final char[] array1, final char[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n         }\n         return true;\n     }\n-    \n+\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(byte[] array1, byte[] array2) {\n+    public static boolean isSameLength(final byte[] array1, final byte[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n         }\n         return true;\n     }\n-    \n+\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(double[] array1, double[] array2) {\n+    public static boolean isSameLength(final double[] array1, final double[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n         }\n         return true;\n     }\n-    \n+\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored</p>.\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(float[] array1, float[] array2) {\n+    public static boolean isSameLength(final float[] array1, final float[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n         }\n         return true;\n     }\n-    \n+\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(boolean[] array1, boolean[] array2) {\n+    public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n         }\n         return true;\n     }\n-    \n+\n     /**\n      * <p>Checks whether two arrays are the same type taking into account\n      * multi-dimensional arrays.</p>\n-     * \n-     * <p>Primitive arrays may be compared using this method too.</p>\n      * \n      * @param array1 the first array, must not be <code>null</code>\n      * @param array2 the second array, must not be <code>null</code>\n      * @return <code>true</code> if type of arrays matches\n      * @throws IllegalArgumentException if either array is <code>null</code>\n      */    \n-    public static boolean isSameType(Object array1, Object array2) {\n+    public static boolean isSameType(final Object array1, final Object array2) {\n         if (array1 == null || array2 == null) {\n-            throw new IllegalArgumentException(\"The array must not be null\");\n+            throw new NullArgumentException(\"Array\");\n         }\n         return array1.getClass().getName().equals(array2.getClass().getName());\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n-    \n     /** \n-     * Reverses the order of the given array.\n-     * <p>\n-     * There is no special handling for multi-dimensional arrays.\n-     * <p>\n-     * The method does nothing if <code>null</code> is passed in.\n+     * <p>Reverses the order of the given array.</p>\n+     *\n+     * <p>There is no special handling for multi-dimensional arrays.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(Object[] array) {\n+    public static void reverse(final Object[] array) {\n         if (array == null) {\n             return;\n         }\n     }\n \n     /**\n-     * Reverses the order of the given array.\n-     * <p>\n-     * The method does nothing if <code>null</code> is passed in.\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(long[] array) {\n+    public static void reverse(final long[] array) {\n         if (array == null) {\n             return;\n         }\n     }\n \n     /**\n-     * Reverses the order of the given array.\n-     * <p>\n-     * The method does nothing if <code>null</code> is passed in.\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(int[] array) {\n+    public static void reverse(final int[] array) {\n         if (array == null) {\n             return;\n         }\n     }\n \n     /**\n-     * Reverses the order of the given array.\n-     * <p>\n-     * There is no special handling for multi-dimensional arrays.\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(short[] array) {\n+    public static void reverse(final short[] array) {\n         if (array == null) {\n             return;\n         }\n     }\n \n     /**\n-     * Reverses the order of the given array.\n-     * <p>\n-     * The method does nothing if <code>null</code> is passed in.\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(char[] array) {\n+    public static void reverse(final char[] array) {\n         if (array == null) {\n             return;\n         }\n     }\n \n     /**\n-     * Reverses the order of the given array.\n-     * <p>\n-     * The method does nothing if <code>null</code> is passed in.\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(byte[] array) {\n+    public static void reverse(final byte[] array) {\n         if (array == null) {\n             return;\n         }\n     }\n \n     /**\n-     * Reverses the order of the given array.\n-     * <p>\n-     * The method does nothing if <code>null</code> is passed in.\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(double[] array) {\n+    public static void reverse(final double[] array) {\n         if (array == null) {\n             return;\n         }\n     }\n \n     /**\n-     * Reverses the order of the given array.\n-     * <p>\n-     * The method does nothing if <code>null</code> is passed in.\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(float[] array) {\n+    public static void reverse(final float[] array) {\n         if (array == null) {\n             return;\n         }\n     }\n \n     /**\n-     * Reverses the order of the given array.\n-     * <p>\n-     * The method does nothing if <code>null</code> is passed in.\n+     * <p>Reverses the order of the given array.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(boolean[] array) {\n+    public static void reverse(final boolean[] array) {\n         if (array == null) {\n             return;\n         }\n             i++;\n         }\n     }\n-    \n+\n+    // IndexOf\n     //-----------------------------------------------------------------------\n-    \n-    /**\n-     * Find the index of the given object in the array.\n-     * <p>\n-     * The method returns -1 if a <code>null</code> array is passed in.\n+    /**\n+     * <p>Find the index of the given object in the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @return the index of the object within the array, or -1 if not found\n      */\n-    public static int indexOf(Object[] array, Object objectToFind) {\n+    public static int indexOf(final Object[] array, final Object objectToFind) {\n         return indexOf(array, objectToFind, 0);\n     }\n-    \n-    /**\n-     * Find the index of the given object in the array starting at the given index.\n-     * <p>\n-     * The method returns -1 if a <code>null</code> array is passed in.\n-     * <p>\n-     * A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return -1.\n+\n+    /**\n+     * <p>Find the index of the given object in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> input.</p>\n+     *\n+     * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n+     * length will return -1.</p>\n      * \n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @return the index of the object within the array starting at the\n      *  given index, or -1 if not found\n      */\n-    public static int indexOf(Object[] array, Object objectToFind, int startIndex) {\n+    public static int indexOf(final Object[] array, final Object objectToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n         }\n         return -1;\n     }\n-    \n-    /**\n-     * Find the last index of the given object within the array.\n-     * <p>\n-     * The method returns -1 if a <code>null</code> array is passed in.\n+\n+    /**\n+     * <p>Find the last index of the given object within the array.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> input.</p>\n      * \n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @return the last index of the object to find, or -1 if not found\n      */\n-    public static int lastIndexOf(Object[] array, Object objectToFind) {\n+    public static int lastIndexOf(final Object[] array, final Object objectToFind) {\n         if (array == null) {\n             return -1;\n         }\n         return lastIndexOf(array, objectToFind, array.length - 1);\n     }\n-    \n-    /**\n-     * Find the last index of the given object in the array starting at the given index.\n-     * <p>\n-     * The method returns -1 if a <code>null</code> array is passed in.\n-     * <p>\n-     * A negative startIndex will return -1. A startIndex larger than the array\n-     * length will search from the end of the array.\n+\n+    /**\n+     * <p>Find the last index of the given object in the array starting at the given index.</p>\n+     *\n+     * <p>This method returns <code>-1</code> if <code>null</code> input.</p>\n+     *\n+     * <p>A negative startIndex will return -1. A startIndex larger than the array\n+     * length will search from the end of the array.</p>\n      * \n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @return the last index of the object within the array starting at the given index,\n      *  or -1 if not found\n      */\n-    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {\n+    public static int lastIndexOf(final Object[] array, final Object objectToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n         }\n         return -1;\n     }\n-    \n-    /**\n-     * Checks if the object is in the given array.\n-     * <p>\n-     * The method returns <code>false</code> if a <code>null</code> array is passed in.\n+\n+    /**\n+     * <p>Checks if the object is in the given array.</p>\n+     *\n+     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n      * \n      * @param array  the array to search through\n      * @param objectToFind  the object to find\n      * @return <code>true</code> if the array contains the object\n      */\n-    public static boolean contains(Object[] array, Object objectToFind) {\n+    public static boolean contains(final Object[] array, final Object objectToFind) {\n         return (indexOf(array, objectToFind) != -1);\n     }\n-    \n+\n }", "timestamp": 1056583928, "metainfo": ""}