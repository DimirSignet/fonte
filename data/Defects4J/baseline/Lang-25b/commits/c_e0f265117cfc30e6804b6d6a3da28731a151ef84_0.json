{"sha": "e0f265117cfc30e6804b6d6a3da28731a151ef84", "log": "Javadoc fixes; add missing @Overrides  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Range.java\n+++ b/src/java/org/apache/commons/lang/Range.java\n      * determine where values lie in the range.</p>\n      *\n      * @param element  the value to use for this range, must not be <code>null</code>\n+     * @param c comparator to be used\n      * @throws IllegalArgumentException if the value is <code>null</code>\n      */\n     public Range(T element, Comparator c) {\n      *\n      * @param element1  first value that defines the edge of the range, inclusive\n      * @param element2  second value that defines the edge of the range, inclusive\n+     * @param c comparator to be used\n      * @throws IllegalArgumentException if either value is <code>null</code>\n      */\n     public Range(T element1, T element2, Comparator c) {\n      * \n      * <p><code>null</code> is handled and returns <code>false</code>.</p>\n      * \n-     * <p>This implementation uses the {@link #containsNumber(Number)} method.\n+     * <p>This implementation uses the {@link #contains(Object)} method.\n      * Subclasses may be able to optimise this.</p>\n      *\n      * @param range  the range to test, may be <code>null</code>\n      * \n      * <p><code>null</code> is handled and returns <code>false</code>.</p>\n      * \n-     * <p>This implementation uses the {@link #containsNumber(Number)} and\n+     * <p>This implementation uses the {@link #contains(Object)} and\n      * {@link #containsRange(Range)} methods.\n      * Subclasses may be able to optimise this.</p>\n      *\n      * \n      * <p>To be equal, the class, minimum and maximum must be equal.</p>\n      * \n-     * <p>This implementation uses the {@link #getMinimumNumber()} and \n-     * {@link #getMaximumNumber()} methods. \n+     * <p>This implementation uses the {@link #getMinimum()} and \n+     * {@link #getMaximum()} methods. \n      * Subclasses may be able to optimise this.</p>\n      *\n      * @param obj the reference object with which to compare\n     /**\n      * <p>Gets a hashCode for the range.</p>\n      * \n-     * <p>This implementation uses the {@link #getMinimumNumber()} and \n-     * {@link #getMaximumNumber()} methods. \n+     * <p>This implementation uses the {@link #getMinimum()} and \n+     * {@link #getMaximum()} methods. \n      * Subclasses may be able to optimise this.</p>\n      *\n      * @return a hash code value for this object\n      *\n      * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n      * \n-     * <p>This implementation uses the {@link #getMinimumNumber()} and \n-     * {@link #getMaximumNumber()} methods. \n+     * <p>This implementation uses the {@link #getMinimum()} and \n+     * {@link #getMaximum()} methods. \n      * Subclasses may be able to optimise this.</p>\n      *\n      * @return the <code>String</code> representation of this range\n             return obj1.compareTo(obj2);\n         }\n \n+        @Override\n         public int hashCode() {\n             return \"ComparableComparator\".hashCode();\n         }\n \n+        @Override\n         public boolean equals(Object object) {\n             return (this == object) || \n                    ((null != object) && (object.getClass().equals(this.getClass())));", "timestamp": 1258648821, "metainfo": ""}