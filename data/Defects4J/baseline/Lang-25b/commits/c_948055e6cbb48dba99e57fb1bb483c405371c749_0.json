{"sha": "948055e6cbb48dba99e57fb1bb483c405371c749", "log": "Add Validate class for argument validation   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/Validate.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.Map;\n+/**\n+ * <p>Validate is a static utility class for validating arguments.\n+ * \n+ * <p>The class is based along the lines of JUnit. If an argument value is \n+ * deemed invalid, an IllegalArgumentException is thrown. For example:\n+ * \n+ * <pre>\n+ * Validate.isTrue( i > 0, \"The value must be greater than zero: \", i);\n+ * Validate.notNull( surname, \"The surname must not be null\");\n+ * </pre>\n+ *\n+ * @author <a href=\"mailto:ola.berg@arkitema.se\">Ola Berg</a>\n+ * @author Stephen Colebourne\n+ * @version $Id: Validate.java,v 1.1 2002/12/13 17:21:56 scolebourne Exp $\n+ */\n+public class Validate {\n+    \n+    /**\n+     * Constructor. This class should not normally be instantiated.\n+     */\n+    public Validate() {\n+    }\n+    \n+    // isTrue\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the test\n+     * result is false.\n+     * \n+     * <p>This is used when validating according to an arbitrary boolean expression,\n+     * such as validating a primitive number or using your own custom validation \n+     * expression.\n+     * <pre>\n+     * Validate.isTrue( myObject.isOk(), \"The object is not OK: \", myObject);\n+     * </pre>\n+     * <p>For performance reasons, the object is passed as a separate parameter and\n+     * appended to the message string only in the case of an error.\n+     * \n+     * @param expression  a boolean expression\n+     * @param message  the exception message you would like to see if the expression is false\n+     * @param value  the value to append to the message in case of error\n+     * @throws IllegalArgumentException if expression is false\n+     */\n+    public static void isTrue(boolean expression, String message, Object value) {\n+        if (expression == false) {\n+            throw new IllegalArgumentException(message + value);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the test\n+     * result is false.\n+     * \n+     * <p>This is used when validating according to an arbitrary boolean expression,\n+     * such as validating a primitive number or using your own custom validation \n+     * expression.\n+     * <pre>\n+     * Validate.isTrue( i > 0, \"The value must be greater than zero: \", i);\n+     * </pre>\n+     * <p>For performance reasons, the object is passed as a separate parameter and\n+     * appended to the message string only in the case of an error.\n+     * \n+     * @param expression  a boolean expression\n+     * @param message  the exception message you would like to see if the expression is false\n+     * @param value  the value to append to the message in case of error\n+     * @throws IllegalArgumentException if expression is false\n+     */\n+    public static void isTrue(boolean expression, String message, long value) {\n+        if (expression == false) {\n+            throw new IllegalArgumentException(message + value);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the test\n+     * result is false.\n+     * \n+     * <p>This is used when validating according to an arbitrary boolean expression,\n+     * such as validating a primitive number or using your own custom validation \n+     * expression.\n+     * <pre>\n+     * Validate.isTrue( d > 0.0, \"The value must be greater than zero: \", d);\n+     * </pre>\n+     * <p>For performance reasons, the object is passed as a separate parameter and\n+     * appended to the message string only in the case of an error.\n+     * \n+     * @param expression  a boolean expression\n+     * @param message  the exception message you would like to see if the expression is false\n+     * @param value  the value to append to the message in case of error\n+     * @throws IllegalArgumentException if expression is false\n+     */\n+    public static void isTrue(boolean expression, String message, double value) {\n+        if (expression == false) {\n+            throw new IllegalArgumentException(message + value);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the test\n+     * result is false.\n+     * \n+     * <p>This is used when validating according to an arbitrary boolean expression,\n+     * such as validating a primitive number or using your own custom validation \n+     * expression.\n+     * <pre>\n+     * Validate.isTrue( (i > 0), \"The value must be greater than zero\");\n+     * Validate.isTrue( myObject.isOk(), \"The object is not OK\");\n+     * </pre>\n+     * <p>For performance reasons, the message string should not involve a string append,\n+     * instead use the {@link #isTrue(boolean, String, Object)} method.\n+     * \n+     * @param expression  a boolean expression\n+     * @param message  the exception message you would like to see if the expression is false\n+     * @throws IllegalArgumentException if expression is false\n+     */\n+    public static void isTrue(boolean expression, String message) {\n+        if (expression == false) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the test\n+     * result is false.\n+     * \n+     * <p>This is used when validating according to an arbitrary boolean expression,\n+     * such as validating a primitive number or using your own custom validation \n+     * expression.\n+     * <pre>\n+     * Validate.isTrue( i > 0 );\n+     * Validate.isTrue( myObject.isOk() );\n+     * </pre>\n+     * <p>The message in the exception is 'The validated expression is false'.\n+     * \n+     * @param expression  a boolean expression\n+     * @throws IllegalArgumentException if expression is false\n+     */\n+    public static void isTrue(boolean expression) {\n+        if (expression == false) {\n+            throw new IllegalArgumentException(\"The validated expression is false\");\n+        }\n+    }\n+\n+    // notNull\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument is null.\n+     * <pre>\n+     * Validate.notNull(myObject, \"The object must not be null\");\n+     * </pre>\n+     * \n+     * @param object  the object to check is not null\n+     * @param message  the exception message you would like to see if the object is null\n+     * @throws IllegalArgumentException if the object is null\n+     */\n+    public static void notNull(Object object, String message) {\n+        if (object == null) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument is null.\n+     * <pre>\n+     * Validate.notNull(myObject);\n+     * </pre>\n+     * <p>The message in the exception is 'The validated object is null'.\n+     * \n+     * @param object  the object to check is not null\n+     * @throws IllegalArgumentException if the object is null\n+     */\n+    public static void notNull(Object object) {\n+        if (object == null) {\n+            throw new IllegalArgumentException(\"The validated object is null\");\n+        }\n+    }\n+\n+    // notEmpty array\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument array is empty (null or no elements).\n+     * <pre>\n+     * Validate.notEmpty(myArray, \"The array must not be empty\");\n+     * </pre>\n+     * \n+     * @param array  the array to check is not empty\n+     * @param message  the exception message you would like to see if the array is empty\n+     * @throws IllegalArgumentException if the array is empty\n+     */\n+    public static void notEmpty(Object[] array, String message) {\n+        if (array == null || array.length == 0) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument array is empty (null or no elements).\n+     * <pre>\n+     * Validate.notEmpty(myArray);\n+     * </pre>\n+     * <p>The message in the exception is 'The validated array is empty'.\n+     * \n+     * @param array  the array to check is not empty\n+     * @throws IllegalArgumentException if the array is empty\n+     */\n+    public static void notEmpty(Object[] array) {\n+        if (array == null || array.length == 0) {\n+            throw new IllegalArgumentException(\"The validated array is empty\");\n+        }\n+    }\n+\n+    // notEmpty collection\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument Collection is empty (null or no elements).\n+     * <pre>\n+     * Validate.notEmpty(myCollection, \"The collection must not be empty\");\n+     * </pre>\n+     * \n+     * @param collection  the collection to check is not empty\n+     * @param message  the exception message you would like to see if the collection is empty\n+     * @throws IllegalArgumentException if the collection is empty\n+     */\n+    public static void notEmpty(Collection collection, String message) {\n+        if (collection == null || collection.size() == 0) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument Collection is empty (null or no elements).\n+     * <pre>\n+     * Validate.notEmpty(myCollection);\n+     * </pre>\n+     * <p>The message in the exception is 'The validated collection is empty'.\n+     * \n+     * @param collection  the collection to check is not empty\n+     * @throws IllegalArgumentException if the collection is empty\n+     */\n+    public static void notEmpty(Collection collection) {\n+        if (collection == null || collection.size() == 0) {\n+            throw new IllegalArgumentException(\"The validated collection is empty\");\n+        }\n+    }\n+\n+    // notEmpty map\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument Map is empty (null or no elements).\n+     * <pre>\n+     * Validate.notEmpty(myMap, \"The collection must not be empty\");\n+     * </pre>\n+     * \n+     * @param map  the map to check is not empty\n+     * @param message  the exception message you would like to see if the map is empty\n+     * @throws IllegalArgumentException if the map is empty\n+     */\n+    public static void notEmpty(Map map, String message) {\n+        if (map == null || map.size() == 0) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument Map is empty (null or no elements).\n+     * <pre>\n+     * Validate.notEmpty(myMap);\n+     * </pre>\n+     * <p>The message in the exception is 'The validated map is empty'.\n+     * \n+     * @param map  the map to check is not empty\n+     * @throws IllegalArgumentException if the map is empty\n+     */\n+    public static void notEmpty(Map map) {\n+        if (map == null || map.size() == 0) {\n+            throw new IllegalArgumentException(\"The validated map is empty\");\n+        }\n+    }\n+\n+    // notEmpty string\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument String is empty (null or zero length).\n+     * <pre>\n+     * Validate.notEmpty(myString, \"The string must not be empty\");\n+     * </pre>\n+     * \n+     * @param string  the string to check is not empty\n+     * @param message  the exception message you would like to see if the string is empty\n+     * @throws IllegalArgumentException if the string is empty\n+     */\n+    public static void notEmpty(String string, String message) {\n+        if (string == null || string.length() == 0) {\n+            throw new IllegalArgumentException(message);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument String is empty (null or zero length).\n+     * <pre>\n+     * Validate.notEmpty(myString);\n+     * </pre>\n+     * <p>The message in the exception is 'The validated string is empty'.\n+     * \n+     * @param string  the string to check is not empty\n+     * @throws IllegalArgumentException if the string is empty\n+     */\n+    public static void notEmpty(String string) {\n+        if (string == null || string.length() == 0) {\n+            throw new IllegalArgumentException(\"The validated string is empty\");\n+        }\n+    }\n+\n+    // notNullElements array\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument array has null elements or is null.\n+     * <pre>\n+     * Validate.notEmpty(myArray, \"The array must not contain null elements\");\n+     * </pre>\n+     * \n+     * @param array  the array to check\n+     * @param message  the exception message if the array has null elements\n+     * @throws IllegalArgumentException if the array has null elements or is null\n+     */\n+    public static void noNullElements(Object[] array, String message) {\n+        Validate.notNull(array);\n+        for (int i = 0; i < array.length; i++) {\n+            if (array[i] == null) {\n+                throw new IllegalArgumentException(message);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument array has null elements or is null.\n+     * <pre>\n+     * Validate.notEmpty(myArray);\n+     * </pre>\n+     * <p>The message in the exception is 'The validated array contains null element at index: '.\n+     * \n+     * @param array  the array to check\n+     * @throws IllegalArgumentException if the array has null elements or is null\n+     */\n+    public static void noNullElements(Object[] array) {\n+        Validate.notNull(array);\n+        for (int i = 0; i < array.length; i++) {\n+            if (array[i] == null) {\n+                throw new IllegalArgumentException(\"The validated array contains null element at index: \" + i);\n+            }\n+        }\n+    }\n+\n+    // notNullElements collection\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument collection has null elements or is null.\n+     * <pre>\n+     * Validate.notEmpty(myCollection, \"The collection must not contain null elements\");\n+     * </pre>\n+     * \n+     * @param collection  the collection to check\n+     * @param message  the exception message if the array has null elements\n+     * @throws IllegalArgumentException if the collection has null elements or is null\n+     */\n+    public static void noNullElements(Collection collection, String message) {\n+        Validate.notNull(collection);\n+        int i = 0;\n+        for (Iterator it = collection.iterator(); it.hasNext(); i++) {\n+            if (it.next() == null) {\n+                throw new IllegalArgumentException(message);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing IllegalArgumentException if the \n+     * argument collection has null elements or is null.\n+     * <pre>\n+     * Validate.notEmpty(myCollection);\n+     * </pre>\n+     * <p>The message in the exception is 'The validated collection contains null element at index: '.\n+     * \n+     * @param collection  the collection to check\n+     * @throws IllegalArgumentException if the collection has null elements or is null\n+     */\n+    public static void noNullElements(Collection collection) {\n+        Validate.notNull(collection);\n+        int i = 0;\n+        for (Iterator it = collection.iterator(); it.hasNext(); i++) {\n+            if (it.next() == null) {\n+                throw new IllegalArgumentException(\"The validated collection contains null element at index: \" + i);\n+            }\n+        }\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/LangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/LangTestSuite.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: LangTestSuite.java,v 1.5 2002/10/13 22:42:59 scolebourne Exp $\n+ * @version $Id: LangTestSuite.java,v 1.6 2002/12/13 17:21:56 scolebourne Exp $\n  */\n public class LangTestSuite extends TestCase {\n     \n         suite.addTest(StringUtilsSubstringTest.suite());\n         suite.addTest(StringUtilsEqualsIndexOfTest.suite());\n         suite.addTest(StringUtilsIsTest.suite());\n+        suite.addTest(ValidateTest.suite());\n         return suite;\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/ValidateTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Unit tests {@link org.apache.commons.lang.Validate}.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: ValidateTest.java,v 1.1 2002/12/13 17:21:56 scolebourne Exp $\n+ */\n+public class ValidateTest extends TestCase {\n+\n+    public ValidateTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+    \tTestSuite suite = new TestSuite(ValidateTest.class);\n+    \tsuite.setName(\"Validate Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue1() {\n+        Validate.isTrue(true);\n+        try {\n+            Validate.isTrue(false);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated expression is false\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue2() {\n+        Validate.isTrue(true, \"MSG\");\n+        try {\n+            Validate.isTrue(false, \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue3() {\n+        Validate.isTrue(true, \"MSG\", new Integer(6));\n+        try {\n+            Validate.isTrue(false, \"MSG\", new Integer(6));\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG6\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue4() {\n+        Validate.isTrue(true, \"MSG\", 7);\n+        try {\n+            Validate.isTrue(false, \"MSG\", 7);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG7\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsTrue5() {\n+        Validate.isTrue(true, \"MSG\", 7.4d);\n+        try {\n+            Validate.isTrue(false, \"MSG\", 7.4d);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG7.4\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotNull1() {\n+        Validate.notNull(new Object());\n+        try {\n+            Validate.notNull(null);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotNull2() {\n+        Validate.notNull(new Object(), \"MSG\");\n+        try {\n+            Validate.notNull(null, \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyArray1() {\n+        Validate.notEmpty(new Object[] {null});\n+        try {\n+            Validate.notEmpty((Object[]) null);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated array is empty\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(new Object[0]);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated array is empty\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyArray2() {\n+        Validate.notEmpty(new Object[] {null}, \"MSG\");\n+        try {\n+            Validate.notEmpty((Object[]) null, \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(new Object[0], \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyCollection1() {\n+        Collection coll = new ArrayList();\n+        try {\n+            Validate.notEmpty((Collection) null);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated collection is empty\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(coll);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated collection is empty\", ex.getMessage());\n+        }\n+        coll.add(new Integer(8));\n+        Validate.notEmpty(coll);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyCollection2() {\n+        Collection coll = new ArrayList();\n+        try {\n+            Validate.notEmpty((Collection) null, \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(coll, \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        coll.add(new Integer(8));\n+        Validate.notEmpty(coll, \"MSG\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyMap1() {\n+        Map map = new HashMap();\n+        try {\n+            Validate.notEmpty((Map) null);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated map is empty\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(map);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated map is empty\", ex.getMessage());\n+        }\n+        map.put(\"ll\", new Integer(8));\n+        Validate.notEmpty(map);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyMap2() {\n+        Map map = new HashMap();\n+        try {\n+            Validate.notEmpty((Map) null, \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(map, \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        map.put(\"ll\", new Integer(8));\n+        Validate.notEmpty(map, \"MSG\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyString1() {\n+        Validate.notEmpty(\"hjl\");\n+        try {\n+            Validate.notEmpty((String) null);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated string is empty\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(\"\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated string is empty\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotEmptyString2() {\n+        Validate.notEmpty(new Object[] {null}, \"MSG\");\n+        try {\n+            Validate.notEmpty((String) null, \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        try {\n+            Validate.notEmpty(\"\", \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNoNullElementsArray1() {\n+        String[] array = new String[] {\"a\", \"b\"};\n+        Validate.noNullElements(array);\n+        try {\n+            Validate.noNullElements((Object[]) null);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+        array[1] = null;\n+        try {\n+            Validate.notEmpty(array);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated array contains null element at index: 1\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNoNullElementsArray2() {\n+        String[] array = new String[] {\"a\", \"b\"};\n+        Validate.noNullElements(array, \"MSG\");\n+        try {\n+            Validate.noNullElements((Object[]) null, \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+        array[1] = null;\n+        try {\n+            Validate.notEmpty(array, \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNoNullElementsCollection1() {\n+        List coll = new ArrayList();\n+        coll.add(\"a\");\n+        coll.add(\"b\");\n+        Validate.noNullElements(coll);\n+        try {\n+            Validate.noNullElements((Collection) null);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+        coll.set(1, null);\n+        try {\n+            Validate.notEmpty(coll);\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated collection contains null element at index: 1\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNoNullElementsCollection2() {\n+        List coll = new ArrayList();\n+        coll.add(\"a\");\n+        coll.add(\"b\");\n+        Validate.noNullElements(coll, \"MSG\");\n+        try {\n+            Validate.noNullElements((Collection) null, \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated object is null\", ex.getMessage());\n+        }\n+        coll.set(1, null);\n+        try {\n+            Validate.notEmpty(coll, \"MSG\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+}", "timestamp": 1039800116, "metainfo": ""}