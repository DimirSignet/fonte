{"sha": "f6e6f605361d90efce738c3c09f80bde460ff73f", "log": "Layout getters and setters in pairs to match general lang formatting  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/VariableFormatter.java\n+++ b/src/java/org/apache/commons/lang/text/VariableFormatter.java\n         return doReplace(data, 0, data.length, obj, priorVariables);\n     }\n \n-    /**\n-     * Returns the escape character.\n-     * \n-     * @return the character used for escaping variable references\n-     */\n-    public char getEscapeCharacter() {\n-        return this.escapeCharacter;\n-    }\n-\n     private int getLength(FieldPosition tok) {\n         return tok.getEndIndex() - tok.getBeginIndex();\n-    }\n-\n-    /**\n-     * Returns the prefix for variables.\n-     * \n-     * @return the prefix for variables\n-     */\n-    public String getVariablePrefix() {\n-        return this.variablePrefix;\n-    }\n-\n-    /**\n-     * Gets the VariableResolver\n-     * \n-     * @return the VariableResolver\n-     */\n-    public VariableResolver getVariableResolver() {\n-        return this.variableResolver;\n-    }\n-\n-    /**\n-     * Returns the suffix for variables.\n-     * \n-     * @return the suffix for variables\n-     */\n-    public String getVariableSuffix() {\n-        return this.variableSuffix;\n     }\n \n     /**\n         return this.getVariableResolver().resolveVariable(name);\n     }\n \n-    /**\n-     * Sets the escape character. If this character is placed before a variable reference in the source text, this\n-     * variable will be ignored.\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns the escape character.\n+     * \n+     * @return the character used for escaping variable references\n+     */\n+    public char getEscapeCharacter() {\n+        return this.escapeCharacter;\n+    }\n+\n+    /**\n+     * Sets the escape character.\n+     * If this character is placed before a variable reference in the source\n+     * text, this variable will be ignored.\n      * \n      * @param escapeCharacter\n      *            the escape character (0 for disabling escaping)\n     }\n \n     /**\n+     * Returns the prefix for variables.\n+     * \n+     * @return the prefix for variables\n+     */\n+    public String getVariablePrefix() {\n+        return this.variablePrefix;\n+    }\n+\n+    /**\n      * Sets the prefix for variables.\n      * \n      * @param variablePrefix\n-     *            the prefix for variables\n+     *            the prefix for variables, not null\n      * @throws IllegalArgumentException\n      *             if the prefix is <b>null</b>\n      */\n-    public void setVariablePrefix(String variablePrefix) throws IllegalArgumentException {\n+    public void setVariablePrefix(String variablePrefix) {\n         if (variablePrefix == null) {\n             throw new IllegalArgumentException(\"Variable prefix must not be null!\");\n         }\n     }\n \n     /**\n+     * Returns the suffix for variables.\n+     * \n+     * @return the suffix for variables\n+     */\n+    public String getVariableSuffix() {\n+        return this.variableSuffix;\n+    }\n+\n+    /**\n+     * Sets the suffix for variables\n+     * \n+     * @param variableSuffix\n+     *            the suffix for variables, not null\n+     * @throws IllegalArgumentException\n+     *             if the prefix is <b>null</b>\n+     */\n+    public void setVariableSuffix(String variableSuffix) {\n+        if (variableSuffix == null) {\n+            throw new IllegalArgumentException(\"Variable suffix must not be null!\");\n+        }\n+        this.variableSuffix = variableSuffix;\n+    }\n+\n+    /**\n+     * Gets the VariableResolver\n+     * \n+     * @return the VariableResolver\n+     */\n+    public VariableResolver getVariableResolver() {\n+        return this.variableResolver;\n+    }\n+\n+    /**\n      * Sets the VariableResolver\n      * \n      * @param variableResolver\n         this.variableResolver = variableResolver;\n     }\n \n-    /**\n-     * Sets the suffix for variables\n-     * \n-     * @param variableSuffix\n-     *            the suffix for variables\n-     * @throws IllegalArgumentException\n-     *             if the prefix is <b>null</b>\n-     */\n-    public void setVariableSuffix(String variableSuffix) throws IllegalArgumentException {\n-        if (variableSuffix == null) {\n-            throw new IllegalArgumentException(\"Variable suffix must not be null!\");\n-        }\n-        this.variableSuffix = variableSuffix;\n-    }\n }", "timestamp": 1152228477, "metainfo": ""}