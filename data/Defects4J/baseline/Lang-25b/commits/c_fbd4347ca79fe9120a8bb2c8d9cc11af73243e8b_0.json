{"sha": "fbd4347ca79fe9120a8bb2c8d9cc11af73243e8b", "log": "Applying Ivan Bilenjkij's patch such that the Mutable classes implement an appropriately typed Mutable interface. LANG-528  ", "commit": "\n--- a/src/java/org/apache/commons/lang/mutable/MutableBoolean.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableBoolean.java\n  * @author Apache Software Foundation\n  * @version $Id$\n  */\n-public class MutableBoolean implements Mutable, Serializable, Comparable<MutableBoolean> {\n+public class MutableBoolean implements Mutable<Boolean>, Serializable, Comparable<MutableBoolean> {\n \n     /**\n      * Required for serialization support.\n      * @return zero if this object represents the same boolean value as the argument; a positive value if this object\n      *         represents true and the argument represents false; and a negative value if this object represents false\n      *         and the argument represents true\n-     * @throws ClassCastException\n-     *             if the argument is not a MutableInt\n      */\n     public int compareTo(MutableBoolean other) {\n         boolean anotherVal = other.value;\n      * \n      * @return the value as a Boolean\n      */\n-    public Object getValue() {\n+    public Boolean getValue() {\n         return Boolean.valueOf(this.value);\n     }\n \n      *            the value to set\n      * @throws NullPointerException\n      *             if the object is null\n-     * @throws ClassCastException\n-     *             if the type is not a {@link Boolean}\n      */\n-    public void setValue(Object value) {\n-        setValue(((Boolean) value).booleanValue());\n+    public void setValue(Boolean value) {\n+        this.value = value.booleanValue();\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/mutable/MutableByte.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableByte.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public class MutableByte extends Number implements Comparable<MutableByte>, Mutable {\n+public class MutableByte extends Number implements Comparable<MutableByte>, Mutable<Number> {\n \n     /**\n      * Required for serialization support.\n      * \n      * @return the value as a Byte\n      */\n-    public Object getValue() {\n+    public Byte getValue() {\n         return Byte.valueOf(this.value);\n     }\n \n      *            the value to set\n      * @throws NullPointerException\n      *             if the object is null\n-     * @throws ClassCastException\n-     *             if the type is not a {@link Number}\n-     */\n-    public void setValue(Object value) {\n-        setValue(((Number) value).byteValue());\n+     */\n+    public void setValue(Number value) {\n+        this.value = value.byteValue();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public class MutableDouble extends Number implements Comparable<MutableDouble>, Mutable {\n+public class MutableDouble extends Number implements Comparable<MutableDouble>, Mutable<Number> {\n \n     /**\n      * Required for serialization support.\n      * \n      * @return the value as a Double\n      */\n-    public Object getValue() {\n+    public Double getValue() {\n         return new Double(this.value);\n     }\n \n      *            the value to set\n      * @throws NullPointerException\n      *             if the object is null\n-     * @throws ClassCastException\n-     *             if the type is not a {@link Number}\n-     */\n-    public void setValue(Object value) {\n-        setValue(((Number) value).doubleValue());\n+     */\n+    public void setValue(Number value) {\n+        this.value = value.doubleValue();\n     }\n \n     //-----------------------------------------------------------------------\n      * @param other\n      *            the mutable to compare to\n      * @return negative if this is less, zero if equal, positive if greater\n-     * @throws ClassCastException if the argument is not a MutableDouble\n      */\n     public int compareTo(MutableDouble other) {\n         double anotherVal = other.value;\n--- a/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public class MutableFloat extends Number implements Comparable<MutableFloat>, Mutable {\n+public class MutableFloat extends Number implements Comparable<MutableFloat>, Mutable<Number> {\n \n     /**\n      * Required for serialization support.\n      * \n      * @return the value as a Float\n      */\n-    public Object getValue() {\n+    public Float getValue() {\n         return new Float(this.value);\n     }\n \n      *            the value to set\n      * @throws NullPointerException\n      *             if the object is null\n-     * @throws ClassCastException\n-     *             if the type is not a {@link Number}\n-     */\n-    public void setValue(Object value) {\n-        setValue(((Number) value).floatValue());\n+     */\n+    public void setValue(Number value) {\n+        this.value = value.floatValue();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/mutable/MutableInt.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableInt.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public class MutableInt extends Number implements Comparable<MutableInt>, Mutable {\n+public class MutableInt extends Number implements Comparable<MutableInt>, Mutable<Number> {\n \n     /**\n      * Required for serialization support.\n      * \n      * @return the value as a Integer\n      */\n-    public Object getValue() {\n+    public Integer getValue() {\n         return new Integer(this.value);\n     }\n \n      * @throws ClassCastException\n      *                  if the type is not a {@link Number}\n      */\n-    public void setValue(Object value) {\n-        setValue(((Number) value).intValue());\n+    public void setValue(Number value) {\n+        this.value = value.intValue();\n     }\n \n     //-----------------------------------------------------------------------\n      * @param other\n      *                  the mutable to compare to\n      * @return negative if this is less, zero if equal, positive if greater\n-     * @throws ClassCastException if the argument is not a MutableInt\n      */\n     public int compareTo(MutableInt other) {\n         int anotherVal = other.value;\n--- a/src/java/org/apache/commons/lang/mutable/MutableLong.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableLong.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public class MutableLong extends Number implements Comparable<MutableLong>, Mutable {\n+public class MutableLong extends Number implements Comparable<MutableLong>, Mutable<Number> {\n \n     /**\n      * Required for serialization support.\n      * \n      * @return the value as a Long\n      */\n-    public Object getValue() {\n+    public Long getValue() {\n         return new Long(this.value);\n     }\n \n      *            the value to set\n      * @throws NullPointerException\n      *             if the object is null\n-     * @throws ClassCastException\n-     *             if the type is not a {@link Number}\n-     */\n-    public void setValue(Object value) {\n-        setValue(((Number) value).longValue());\n+     */\n+    public void setValue(Number value) {\n+        this.value = value.longValue();\n     }\n \n     //-----------------------------------------------------------------------\n      * @param other\n      *            the mutable to compare to\n      * @return negative if this is less, zero if equal, positive if greater\n-     * @throws ClassCastException if the argument is not a MutableLong\n      */\n     public int compareTo(MutableLong other) {\n         long anotherVal = other.value;\n--- a/src/java/org/apache/commons/lang/mutable/MutableShort.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableShort.java\n  * @since 2.1\n  * @version $Id$\n  */\n-public class MutableShort extends Number implements Comparable<MutableShort>, Mutable {\n+public class MutableShort extends Number implements Comparable<MutableShort>, Mutable<Number> {\n \n     /**\n      * Required for serialization support.\n      * \n      * @return the value as a Short\n      */\n-    public Object getValue() {\n+    public Short getValue() {\n         return new Short(this.value);\n     }\n \n      *                  the value to set\n      * @throws NullPointerException\n      *                  if the object is null\n-     * @throws ClassCastException\n-     *                  if the type is not a {@link Number}\n-     */\n-    public void setValue(Object value) {\n-        setValue(((Number) value).shortValue());\n+     */\n+    public void setValue(Number value) {\n+        this.value = value.shortValue();\n     }\n \n     //-----------------------------------------------------------------------\n      * @param other\n      *                  the mutable to compare to\n      * @return negative if this is less, zero if equal, positive if greater\n-     * @throws ClassCastException if the argument is not a MutableShort\n      */\n     public int compareTo(MutableShort other) {\n         short anotherVal = other.value;\n--- a/src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java\n             fail();\n         } catch (NullPointerException ex) {\n         }\n-        try {\n-            mutBool.setValue(\"false\");\n-            fail();\n-        } catch (ClassCastException ex) {\n-        }\n     }\n \n     public void testHashCode() {\n--- a/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n             mutNum.setValue(null);\n             fail();\n         } catch (NullPointerException ex) {}\n-        try {\n-            mutNum.setValue(\"0\");\n-            fail();\n-        } catch (ClassCastException ex) {}\n     }\n \n     public void testEquals() {\n--- a/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n             mutNum.setValue(null);\n             fail();\n         } catch (NullPointerException ex) {}\n-        try {\n-            mutNum.setValue(\"0\");\n-            fail();\n-        } catch (ClassCastException ex) {}\n     }\n \n     public void testNanInfinite() {\n--- a/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n             mutNum.setValue(null);\n             fail();\n         } catch (NullPointerException ex) {}\n-        try {\n-            mutNum.setValue(\"0\");\n-            fail();\n-        } catch (ClassCastException ex) {}\n     }\n \n     public void testNanInfinite() {\n--- a/src/test/org/apache/commons/lang/mutable/MutableIntTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableIntTest.java\n             mutNum.setValue(null);\n             fail();\n         } catch (NullPointerException ex) {}\n-        try {\n-            mutNum.setValue(\"0\");\n-            fail();\n-        } catch (ClassCastException ex) {}\n     }\n \n     public void testEquals() {\n--- a/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n             mutNum.setValue(null);\n             fail();\n         } catch (NullPointerException ex) {}\n-        try {\n-            mutNum.setValue(\"0\");\n-            fail();\n-        } catch (ClassCastException ex) {}\n     }\n \n     public void testEquals() {\n--- a/src/test/org/apache/commons/lang/mutable/MutableObjectTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableObjectTest.java\n \n     // ----------------------------------------------------------------\n     public void testConstructors() {\n-        assertEquals(null, new MutableObject().getValue());\n+        assertEquals(null, new MutableObject<String>().getValue());\n         \n         Integer i = new Integer(6);\n-        assertSame(i, new MutableObject(i).getValue());\n-        assertSame(\"HI\", new MutableObject(\"HI\").getValue());\n-        assertSame(null, new MutableObject(null).getValue());\n+        assertSame(i, new MutableObject<Integer>(i).getValue());\n+        assertSame(\"HI\", new MutableObject<String>(\"HI\").getValue());\n+        assertSame(null, new MutableObject<Object>(null).getValue());\n     }\n \n     public void testGetSet() {\n-        final MutableObject mutNum = new MutableObject();\n-        assertEquals(null, new MutableObject().getValue());\n+        final MutableObject<String> mutNum = new MutableObject<String>();\n+        assertEquals(null, new MutableObject<Object>().getValue());\n         \n         mutNum.setValue(\"HELLO\");\n         assertSame(\"HELLO\", mutNum.getValue());\n     }\n \n     public void testEquals() {\n-        final MutableObject mutNumA = new MutableObject(\"ALPHA\");\n-        final MutableObject mutNumB = new MutableObject(\"ALPHA\");\n-        final MutableObject mutNumC = new MutableObject(\"BETA\");\n-        final MutableObject mutNumD = new MutableObject(null);\n+        final MutableObject<String> mutNumA = new MutableObject<String>(\"ALPHA\");\n+        final MutableObject<String> mutNumB = new MutableObject<String>(\"ALPHA\");\n+        final MutableObject<String> mutNumC = new MutableObject<String>(\"BETA\");\n+        final MutableObject<String> mutNumD = new MutableObject<String>(null);\n \n         assertEquals(true, mutNumA.equals(mutNumA));\n         assertEquals(true, mutNumA.equals(mutNumB));\n     }\n \n     public void testHashCode() {\n-        final MutableObject mutNumA = new MutableObject(\"ALPHA\");\n-        final MutableObject mutNumB = new MutableObject(\"ALPHA\");\n-        final MutableObject mutNumC = new MutableObject(\"BETA\");\n-        final MutableObject mutNumD = new MutableObject(null);\n+        final MutableObject<String> mutNumA = new MutableObject<String>(\"ALPHA\");\n+        final MutableObject<String> mutNumB = new MutableObject<String>(\"ALPHA\");\n+        final MutableObject<String> mutNumC = new MutableObject<String>(\"BETA\");\n+        final MutableObject<String> mutNumD = new MutableObject<String>(null);\n \n         assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n         assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n     }\n \n     public void testToString() {\n-        assertEquals(\"HI\", new MutableObject(\"HI\").toString());\n-        assertEquals(\"10.0\", new MutableObject(new Double(10)).toString());\n-        assertEquals(\"null\", new MutableObject(null).toString());\n+        assertEquals(\"HI\", new MutableObject<String>(\"HI\").toString());\n+        assertEquals(\"10.0\", new MutableObject<Double>(new Double(10)).toString());\n+        assertEquals(\"null\", new MutableObject<Object>(null).toString());\n     }\n \n }\n--- a/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n             mutNum.setValue(null);\n             fail();\n         } catch (NullPointerException ex) {}\n-        try {\n-            mutNum.setValue(\"0\");\n-            fail();\n-        } catch (ClassCastException ex) {}\n     }\n \n     public void testEquals() {", "timestamp": 1252345973, "metainfo": ""}