{"sha": "5d15738971bf09a2bb850fd4832c11c60b17a061", "log": "Remove references to Labeled in method names as it is unecessary and the spelling looks poor/confusing in British English  ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ContextedException.java\n+++ b/src/java/org/apache/commons/lang/exception/ContextedException.java\n  *     ...\n  *   } catch (Throwable e) {\n  *     throw new ContextedException(\"Error posting account transaction\", e)\n- *          .addLabeledValue(\"accountNumber\", accountNumber)\n- *          .addLabeledValue(\"amountPosted\", amountPosted)\n- *          .addLabeledValue(\"previousBalance\", previousBalance)\n+ *          .addValue(\"accountNumber\", accountNumber)\n+ *          .addValue(\"amountPosted\", amountPosted)\n+ *          .addValue(\"previousBalance\", previousBalance)\n  *   }\n  * }\n  * </pre>\n  *  [previousBalance=-2.17]\n  *\n  *  ---------------------------------\n- *  at org.apache.commons.lang.exception.ContextedExceptionTest.testAddLabeledValue(ContextedExceptionTest.java:88)\n+ *  at org.apache.commons.lang.exception.ContextedExceptionTest.testAddValue(ContextedExceptionTest.java:88)\n  *  ..... (rest of trace)\n  * </pre>\n  * </p>\n      * @param value  information needed to understand exception, may be null\n      * @return this, for method chaining\n      */\n-    public ContextedException addLabeledValue(String label, Object value) {        \n-        exceptionContext.addLabeledValue(label, value);\n+    public ContextedException addValue(String label, Object value) {        \n+        exceptionContext.addValue(label, value);\n         return this;\n     }\n \n      * @param label  the label to get the contextual value for, may be null\n      * @return the contextual value associated with the label, may be null\n      */\n-    public Object getLabeledValue(String label) {\n-        return exceptionContext.getLabeledValue(label);\n+    public Object getValue(String label) {\n+        return exceptionContext.getValue(label);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java\n+++ b/src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java\n  *     ...\n  *   } catch (Throwable e) {\n  *     throw new ContextedException(\"Error posting account transaction\", e)\n- *          .addLabeledValue(\"accountNumber\", accountNumber)\n- *          .addLabeledValue(\"amountPosted\", amountPosted)\n- *          .addLabeledValue(\"previousBalance\", previousBalance)\n+ *          .addValue(\"accountNumber\", accountNumber)\n+ *          .addValue(\"amountPosted\", amountPosted)\n+ *          .addValue(\"previousBalance\", previousBalance)\n  *   }\n  * }\n  * </pre>\n  *  [previousBalance=-2.17]\n  *\n  *  ---------------------------------\n- *  at org.apache.commons.lang.exception.ContextedRuntimeExceptionTest.testAddLabeledValue(ContextedExceptionTest.java:88)\n+ *  at org.apache.commons.lang.exception.ContextedRuntimeExceptionTest.testAddValue(ContextedExceptionTest.java:88)\n  *  ..... (rest of trace)\n  * </pre>\n  * </p>\n      * @param value  information needed to understand exception, may be null\n      * @return this, for method chaining\n      */\n-    public ContextedRuntimeException addLabeledValue(String label, Object value) {        \n-        exceptionContext.addLabeledValue(label, value);\n+    public ContextedRuntimeException addValue(String label, Object value) {        \n+        exceptionContext.addValue(label, value);\n         return this;\n     }\n \n      * @param label  the label to get the contextual value for, may be null\n      * @return the contextual value associated with the label, may be null\n      */\n-    public Object getLabeledValue(String label) {\n-        return exceptionContext.getLabeledValue(label);\n+    public Object getValue(String label) {\n+        return exceptionContext.getValue(label);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java\n+++ b/src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java\n      * @param value  the value of item to add, may be null\n      * @return this, for method chaining\n      */\n-    public ExceptionContext addLabeledValue(String label, Object value) {        \n+    public ExceptionContext addValue(String label, Object value) {        \n         contextValueMap.put(label, value);\n         return this;\n     }\n      * @param label  the label to get the contextual value for, may be null\n      * @return the contextual value associated with the label, may be null\n      */\n-    public Object getLabeledValue(String label) {\n+    public Object getValue(String label) {\n         return contextValueMap.get(label);\n     }\n \n--- a/src/java/org/apache/commons/lang/exception/ExceptionContext.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionContext.java\n      * @param value  the value of item to add, may be null\n      * @return context itself to allow method chaining\n      */\n-    public ExceptionContext addLabeledValue(String label, Object value);\n+    public ExceptionContext addValue(String label, Object value);\n \n     /**\n      * Retrieves a contextual data value associated with the label.\n      * @param label  the label to get the contextual value for, may be null\n      * @return the contextual value associated with the label, may be null\n      */\n-    public Object getLabeledValue(String label);\n+    public Object getValue(String label);\n \n     /**\n      * Retrieves the labels defined in the contextual data.\n--- a/src/test/org/apache/commons/lang/exception/ContextedExceptionTest.java\n+++ b/src/test/org/apache/commons/lang/exception/ContextedExceptionTest.java\n         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n     }\n \n-    public void testAddLabeledValue() {\n+    public void testAddValue() {\n         contextedException = new ContextedException(new Exception(TEST_MESSAGE))\n-        .addLabeledValue(\"test1\", null)\n-        .addLabeledValue(\"test2\", \"some value\")\n-        .addLabeledValue(\"test Date\", new Date())\n-        .addLabeledValue(\"test Nbr\", new Integer(5))\n-        .addLabeledValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        .addValue(\"test1\", null)\n+        .addValue(\"test2\", \"some value\")\n+        .addValue(\"test Date\", new Date())\n+        .addValue(\"test Nbr\", new Integer(5))\n+        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n         \n         String message = contextedException.getMessage();\n         assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n         assertTrue(message.indexOf(\"5\")>=0);\n         assertTrue(message.indexOf(\"Crap\")>=0);\n         \n-        assertTrue(contextedException.getLabeledValue(\"test1\") == null);\n-        assertTrue(contextedException.getLabeledValue(\"test2\").equals(\"some value\"));\n-        assertTrue(contextedException.getLabeledValue(\"crap\") == null);\n-        assertTrue(contextedException.getLabeledValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n+        assertTrue(contextedException.getValue(\"test1\") == null);\n+        assertTrue(contextedException.getValue(\"test2\").equals(\"some value\"));\n+        assertTrue(contextedException.getValue(\"crap\") == null);\n+        assertTrue(contextedException.getValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n         \n         assertTrue(contextedException.getLabelSet().size() == 5);\n         assertTrue(contextedException.getLabelSet().contains(\"test1\"));\n         \n         assertTrue(!contextedException.getLabelSet().contains(\"crap\"));\n \n-        contextedException.addLabeledValue(\"test Poorly written obj\", \"replacement\");\n+        contextedException.addValue(\"test Poorly written obj\", \"replacement\");\n         \n         String contextMessage = contextedException.getFormattedExceptionMessage(null);\n         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n     \n     public void testNullExceptionPassing() {\n         contextedException = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null)\n-        .addLabeledValue(\"test1\", null)\n-        .addLabeledValue(\"test2\", \"some value\")\n-        .addLabeledValue(\"test Date\", new Date())\n-        .addLabeledValue(\"test Nbr\", new Integer(5))\n-        .addLabeledValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        .addValue(\"test1\", null)\n+        .addValue(\"test2\", \"some value\")\n+        .addValue(\"test Date\", new Date())\n+        .addValue(\"test Nbr\", new Integer(5))\n+        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n         \n         String message = contextedException.getMessage();\n         assertTrue(message != null);\n     }\n \n     public void testGetMessage() {\n-        testAddLabeledValue();\n+        testAddValue();\n     }\n     \n     static class ObjectWithFaultyToString implements Serializable {\n--- a/src/test/org/apache/commons/lang/exception/ContextedRuntimeExceptionTest.java\n+++ b/src/test/org/apache/commons/lang/exception/ContextedRuntimeExceptionTest.java\n         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0);\n     }\n \n-    public void testAddLabeledValue() {\n+    public void testAddValue() {\n         contextedRuntimeException = new ContextedRuntimeException(new Exception(TEST_MESSAGE))\n-        .addLabeledValue(\"test1\", null)\n-        .addLabeledValue(\"test2\", \"some value\")\n-        .addLabeledValue(\"test Date\", new Date())\n-        .addLabeledValue(\"test Nbr\", new Integer(5))\n-        .addLabeledValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        .addValue(\"test1\", null)\n+        .addValue(\"test2\", \"some value\")\n+        .addValue(\"test Date\", new Date())\n+        .addValue(\"test Nbr\", new Integer(5))\n+        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n         \n         String message = contextedRuntimeException.getMessage();\n         assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n         assertTrue(message.indexOf(\"5\")>=0);\n         assertTrue(message.indexOf(\"Crap\")>=0);\n         \n-        assertTrue(contextedRuntimeException.getLabeledValue(\"test1\") == null);\n-        assertTrue(contextedRuntimeException.getLabeledValue(\"test2\").equals(\"some value\"));\n-        assertTrue(contextedRuntimeException.getLabeledValue(\"crap\") == null);\n-        assertTrue(contextedRuntimeException.getLabeledValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n+        assertTrue(contextedRuntimeException.getValue(\"test1\") == null);\n+        assertTrue(contextedRuntimeException.getValue(\"test2\").equals(\"some value\"));\n+        assertTrue(contextedRuntimeException.getValue(\"crap\") == null);\n+        assertTrue(contextedRuntimeException.getValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n         \n         assertTrue(contextedRuntimeException.getLabelSet().size() == 5);\n         assertTrue(contextedRuntimeException.getLabelSet().contains(\"test1\"));\n         \n         assertTrue(!contextedRuntimeException.getLabelSet().contains(\"crap\"));\n \n-        contextedRuntimeException.addLabeledValue(\"test Poorly written obj\", \"replacement\");\n+        contextedRuntimeException.addValue(\"test Poorly written obj\", \"replacement\");\n         \n         String contextMessage = contextedRuntimeException.getFormattedExceptionMessage(null);\n         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n     \n     public void testNullExceptionPassing() {\n         contextedRuntimeException = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null)\n-        .addLabeledValue(\"test1\", null)\n-        .addLabeledValue(\"test2\", \"some value\")\n-        .addLabeledValue(\"test Date\", new Date())\n-        .addLabeledValue(\"test Nbr\", new Integer(5))\n-        .addLabeledValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        .addValue(\"test1\", null)\n+        .addValue(\"test2\", \"some value\")\n+        .addValue(\"test Date\", new Date())\n+        .addValue(\"test Nbr\", new Integer(5))\n+        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n         \n         String message = contextedRuntimeException.getMessage();\n         assertTrue(message != null);\n     }\n \n     public void testGetMessage() {\n-        testAddLabeledValue();\n+        testAddValue();\n     }\n     \n \n--- a/src/test/org/apache/commons/lang/exception/DefaultExceptionContextTest.java\n+++ b/src/test/org/apache/commons/lang/exception/DefaultExceptionContextTest.java\n     @Override\n     public void setUp() {\n         defaultExceptionContext = new DefaultExceptionContext()\n-        .addLabeledValue(\"test1\", null)\n-        .addLabeledValue(\"test2\", \"some value\")\n-        .addLabeledValue(\"test Date\", new Date())\n-        .addLabeledValue(\"test Nbr\", new Integer(5))\n-        .addLabeledValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        .addValue(\"test1\", null)\n+        .addValue(\"test2\", \"some value\")\n+        .addValue(\"test Date\", new Date())\n+        .addValue(\"test Nbr\", new Integer(5))\n+        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n     }\n     \n-    public void testAddLabeledValue() {\n+    public void testAddValue() {\n                 \n         String message = defaultExceptionContext.getFormattedExceptionMessage(\"This is an error\");\n         assertTrue(message.indexOf(\"This is an error\")>=0);\n         defaultExceptionContext.getFormattedExceptionMessage(null);\n     }\n     \n-    public void testGetLabeledValue() {\n-        assertTrue(defaultExceptionContext.getLabeledValue(\"test1\") == null);\n-        assertTrue(defaultExceptionContext.getLabeledValue(\"test2\").equals(\"some value\"));\n-        assertTrue(defaultExceptionContext.getLabeledValue(\"crap\") == null);\n-        assertTrue(defaultExceptionContext.getLabeledValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n+    public void testGetValue() {\n+        assertTrue(defaultExceptionContext.getValue(\"test1\") == null);\n+        assertTrue(defaultExceptionContext.getValue(\"test2\").equals(\"some value\"));\n+        assertTrue(defaultExceptionContext.getValue(\"crap\") == null);\n+        assertTrue(defaultExceptionContext.getValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n     }\n     \n     public void testGetLabelSet() {", "timestamp": 1256402742, "metainfo": ""}