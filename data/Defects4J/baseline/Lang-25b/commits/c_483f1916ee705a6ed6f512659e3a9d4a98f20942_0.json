{"sha": "483f1916ee705a6ed6f512659e3a9d4a98f20942", "log": "Adding Vincent Ricard's patch to CharRange.java providing an iterator that lets you walk the chars in the range. LANG-454  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharRange.java\n+++ b/src/main/java/org/apache/commons/lang3/CharRange.java\n package org.apache.commons.lang3;\n \n import java.io.Serializable;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n \n /**\n  * <p>A contiguous range of characters, optionally negated.</p>\n         }\n         return iToString;\n     }\n-    \n+\n+    // Expansions\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Returns an iterator which can be used to walk through the characters described by this range.</p>\n+     *\n+     * @return an iterator to the chars represented by this range\n+     */\n+    public Iterator iterator() {\n+        return new CharacterIterator(this);\n+    }\n+\n+    static class CharacterIterator implements Iterator {\n+        /** The currect character */\n+        private char current;\n+\n+        private CharRange range;\n+        private boolean hasNext;\n+\n+        public CharacterIterator(CharRange r) {\n+            range = r;\n+            hasNext = true;\n+\n+            if (range.negated) {\n+                if (range.start == 0) {\n+                    if (range.end == Character.MAX_VALUE) {\n+                        // This range is an empty set\n+                        hasNext = false;\n+                    } else {\n+                        current = (char) (range.end + 1);\n+                    }\n+                } else {\n+                    current = 0;\n+                }\n+            } else {\n+                current = range.start;\n+            }\n+        }\n+\n+        private void prepareNext() {\n+            if (range.negated) {\n+                if (current == Character.MAX_VALUE) {\n+                    hasNext = false;\n+                } else if (current + 1 == range.start) {\n+                    if (range.end == Character.MAX_VALUE) {\n+                        hasNext = false;\n+                    } else {\n+                        current = (char) (range.end + 1);\n+                    }\n+                } else {\n+                    current = (char) (current + 1);\n+                }\n+            } else if (current < range.end) {\n+                current = (char) (current + 1);\n+            } else {\n+                hasNext = false;\n+            }\n+        }\n+\n+        /**\n+         * Has the iterator not reached the end character yet?\n+         *\n+         * @return <code>true</code> if the iterator has yet to reach the character date\n+         */\n+        public boolean hasNext() {\n+            return hasNext;\n+        }\n+\n+        /**\n+         * Return the next character in the iteration\n+         *\n+         * @return <code>Character</code> for the next character\n+         */\n+        public Object next() {\n+            if (hasNext == false) {\n+                throw new NoSuchElementException();\n+            }\n+            char cur = current;\n+            prepareNext();\n+            return Character.valueOf(cur);\n+        }\n+\n+        /**\n+         * Always throws UnsupportedOperationException.\n+         *\n+         * @throws UnsupportedOperationException\n+         * @see java.util.Iterator#remove()\n+         */\n+        public void remove() {\n+            throw new UnsupportedOperationException();\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/lang3/CharRangeTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharRangeTest.java\n package org.apache.commons.lang3;\n \n import java.lang.reflect.Modifier;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n \n import junit.framework.TestCase;\n \n             assertEquals(\"The Range must not be null\", e.getMessage());\n         }\n     }\n-    \n+\n+    public void testIterator() {\n+        CharRange a = CharRange.is('a');\n+        CharRange ad = CharRange.isIn('a', 'd');\n+        CharRange nota = CharRange.isNot('a');\n+        CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE);\n+        CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE);\n+        CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1));\n+\n+        Iterator aIt = a.iterator();\n+        assertNotNull(aIt);\n+        assertTrue(aIt.hasNext());\n+        assertEquals(Character.valueOf('a'), aIt.next());\n+        assertFalse(aIt.hasNext());\n+\n+        Iterator adIt = ad.iterator();\n+        assertNotNull(adIt);\n+        assertTrue(adIt.hasNext());\n+        assertEquals(Character.valueOf('a'), adIt.next());\n+        assertEquals(Character.valueOf('b'), adIt.next());\n+        assertEquals(Character.valueOf('c'), adIt.next());\n+        assertEquals(Character.valueOf('d'), adIt.next());\n+        assertFalse(adIt.hasNext());\n+\n+        Iterator notaIt = nota.iterator();\n+        assertNotNull(notaIt);\n+        assertTrue(notaIt.hasNext());\n+        while (notaIt.hasNext()) {\n+            Character c = (Character) notaIt.next();\n+            assertFalse('a' == c.charValue());\n+        }\n+\n+        Iterator emptySetIt = emptySet.iterator();\n+        assertNotNull(emptySetIt);\n+        assertFalse(emptySetIt.hasNext());\n+        try {\n+            emptySetIt.next();\n+            fail(\"Should throw NoSuchElementException\");\n+        } catch (NoSuchElementException e) {\n+            assertTrue(true);\n+        }\n+\n+        Iterator notFirstIt = notFirst.iterator();\n+        assertNotNull(notFirstIt);\n+        assertTrue(notFirstIt.hasNext());\n+        assertEquals(Character.valueOf((char) 0), notFirstIt.next());\n+        assertFalse(notFirstIt.hasNext());\n+        try {\n+        \tnotFirstIt.next();\n+            fail(\"Should throw NoSuchElementException\");\n+        } catch (NoSuchElementException e) {\n+            assertTrue(true);\n+        }\n+\n+        Iterator notLastIt = notLast.iterator();\n+        assertNotNull(notLastIt);\n+        assertTrue(notLastIt.hasNext());\n+        assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next());\n+        assertFalse(notLastIt.hasNext());\n+        try {\n+        \tnotLastIt.next();\n+            fail(\"Should throw NoSuchElementException\");\n+        } catch (NoSuchElementException e) {\n+            assertTrue(true);\n+        }\n+    }\n+\n     //-----------------------------------------------------------------------    \n     public void testSerialization() {\n         CharRange range = CharRange.is('a');", "timestamp": 1265182270, "metainfo": ""}