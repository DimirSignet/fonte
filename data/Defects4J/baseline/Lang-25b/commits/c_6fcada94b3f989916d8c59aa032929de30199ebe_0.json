{"sha": "6fcada94b3f989916d8c59aa032929de30199ebe", "log": "Fix DefaultExceptionContext.addValue that overwrites information in a recursive situation (LANG-605). Allow explicit replacement of a label with the new replaceValue methods.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/exception/ContextedException.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/ContextedException.java\n     /**\n      * Adds information helpful to a developer in diagnosing and correcting\n      * the problem.  For the information to be meaningful, the value passed\n-     * should have a reasonable toString() implementation.\n+     * should have a reasonable toString() implementation. If the added label\n+     * is already available, the label is appended with an index.\n      * <p>\n      * Note: This exception is only serializable if the object added is serializable.\n+     * </p>\n      * \n      * @param label  a textual label associated with information, null not recommended\n      * @param value  information needed to understand exception, may be null\n     }\n \n     /**\n+     * Replaces information helpful to a developer in diagnosing and correcting\n+     * the problem.  For the information to be meaningful, the value passed\n+     * should have a reasonable toString() implementation. If the replaced\n+     * label does not yet exist, it is simply added.\n+     * <p>\n+     * Note: This exception is only serializable if the object added is serializable.\n+     * </p>\n+     * \n+     * @param label  a textual label associated with information, null not recommended\n+     * @param value  information needed to understand exception, may be null\n+     * @return this, for method chaining\n+     */\n+    public ContextedException replaceValue(String label, Object value) {        \n+        exceptionContext.replaceValue(label, value);\n+        return this;\n+    }\n+\n+    /**\n      * Retrieves a contextual data value associated with the label.\n      * \n      * @param label  the label to get the contextual value for, may be null\n--- a/src/main/java/org/apache/commons/lang3/exception/ContextedRuntimeException.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/ContextedRuntimeException.java\n  * @see ContextedException\n  * @author Apache Software Foundation\n  * @author D. Ashmore\n- * @author J&ouml;rg Schaible\n  * @since 3.0\n  */\n public class ContextedRuntimeException extends RuntimeException implements ExceptionContext {\n     /**\n      * Adds information helpful to a developer in diagnosing and correcting\n      * the problem.  For the information to be meaningful, the value passed\n-     * should have a reasonable toString() implementation.\n+     * should have a reasonable toString() implementation. If the added label\n+     * is already available, the label is appended with an index.\n      * <p>\n      * Note: This exception is only serializable if the object added is serializable.\n+     * </p>\n      * \n      * @param label  a textual label associated with information, null not recommended\n      * @param value  information needed to understand exception, may be null\n     }\n \n     /**\n+     * Replaces information helpful to a developer in diagnosing and correcting\n+     * the problem.  For the information to be meaningful, the value passed\n+     * should have a reasonable toString() implementation. If the replaced\n+     * label does not yet exist, it is simply added.\n+     * <p>\n+     * Note: This exception is only serializable if the object added is serializable.\n+     * </p>\n+     * \n+     * @param label  a textual label associated with information, null not recommended\n+     * @param value  information needed to understand exception, may be null\n+     * @return this, for method chaining\n+     */\n+    public ContextedRuntimeException replaceValue(String label, Object value) {        \n+        exceptionContext.replaceValue(label, value);\n+        return this;\n+    }\n+\n+    /**\n      * Retrieves a contextual data value associated with the label.\n      * \n      * @param label  the label to get the contextual value for, may be null\n--- a/src/main/java/org/apache/commons/lang3/exception/DefaultExceptionContext.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/DefaultExceptionContext.java\n     /**\n      * Adds a contextual label-value pair into this context.\n      * <p>\n-     * This label-value pair provides information useful for debugging.\n+     * This label-value pair provides information useful for debugging. If the\n+     * label already exists and the provided information is different, the \n+     * label will be added with an appended index.\n+     * </p>\n      * \n      * @param label  the label of the item to add, null not recommended\n      * @param value  the value of item to add, may be null\n      * @return this, for method chaining\n      */\n     public ExceptionContext addValue(String label, Object value) {        \n+        String key = label;\n+        int i = 0;\n+        while (contextValueMap.containsKey(key)) {\n+            Object information = contextValueMap.get(key);\n+            if ((value == null && information == null)\n+                    || (value != null && value.equals(information)))\n+                return this;\n+            key = label + \"[\" + ++i +\"]\";\n+        }\n+        contextValueMap.put(key, value);\n+        return this;\n+    }\n+\n+    /**\n+     * Replaces a contextual label-value pair of this context.\n+     * <p>\n+     * This label-value pair provides information useful for debugging. If the\n+     * label does not yet exists, a simply add operation is performed.\n+     * </p>\n+     * \n+     * @param label  the label of the item to add, null not recommended\n+     * @param value  the value of item to add, may be null\n+     * @return this, for method chaining\n+     */\n+    public ExceptionContext replaceValue(String label, Object value) {        \n         contextValueMap.put(label, value);\n         return this;\n     }\n--- a/src/main/java/org/apache/commons/lang3/exception/ExceptionContext.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/ExceptionContext.java\n     /**\n      * Adds a contextual label-value pair into this context.\n      * <p>\n-     * This label-value pair provides information useful for debugging.\n+     * This label-value pair provides information useful for debugging. If the\n+     * provided label already exists, it depends on the implementation what\n+     * happens with the new value. \n+     * </p>\n      * \n      * @param label  the label of the item to add, null not recommended\n      * @param value  the value of item to add, may be null\n      * @return context itself to allow method chaining\n      */\n     public ExceptionContext addValue(String label, Object value);\n+\n+    /**\n+     * Replaces a contextual label-value pair of this context.\n+     * <p>\n+     * This label-value pair provides information useful for debugging. If the\n+     * label does not exist yet, it depends on the implementation what happens\n+     * with the provided value.\n+     * </p>\n+     * \n+     * @param label  the label of the item to add, null not recommended\n+     * @param value  the value of item to add, may be null\n+     * @return context itself to allow method chaining\n+     */\n+    public ExceptionContext replaceValue(String label, Object value);\n \n     /**\n      * Retrieves a contextual data value associated with the label.\n--- a/src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java\n /**\n  * JUnit tests for ContextedException.\n  * @author D. Ashmore\n- *\n+ * @author Apache Software Foundation\n  */\n public class ContextedExceptionTest extends TestCase {\n     \n     private static final String TEST_MESSAGE_2 = \"This is monotonous\";\n     private static final String TEST_MESSAGE = \"Test Message\";\n     private ContextedException contextedException;\n-\n-    public ContextedExceptionTest(String name) {\n-        super(name);\n-    }\n \n     public void testContextedException() {\n         contextedException = new ContextedException();\n         .addValue(\"test1\", null)\n         .addValue(\"test2\", \"some value\")\n         .addValue(\"test Date\", new Date())\n-        .addValue(\"test Nbr\", new Integer(5))\n-        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        .addValue(\"test Nbr\", new Integer(5));\n         \n         String message = contextedException.getMessage();\n         assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n         assertTrue(message.indexOf(\"test2\")>=0);\n         assertTrue(message.indexOf(\"test Date\")>=0);\n         assertTrue(message.indexOf(\"test Nbr\")>=0);\n-        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n         assertTrue(message.indexOf(\"some value\")>=0);\n         assertTrue(message.indexOf(\"5\")>=0);\n-        assertTrue(message.indexOf(\"Crap\")>=0);\n         \n         assertTrue(contextedException.getValue(\"test1\") == null);\n         assertTrue(contextedException.getValue(\"test2\").equals(\"some value\"));\n-        assertTrue(contextedException.getValue(\"crap\") == null);\n-        assertTrue(contextedException.getValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n         \n-        assertTrue(contextedException.getLabelSet().size() == 5);\n+        assertTrue(contextedException.getLabelSet().size() == 4);\n         assertTrue(contextedException.getLabelSet().contains(\"test1\"));\n         assertTrue(contextedException.getLabelSet().contains(\"test2\"));\n         assertTrue(contextedException.getLabelSet().contains(\"test Date\"));\n         assertTrue(contextedException.getLabelSet().contains(\"test Nbr\"));\n+\n+        contextedException.addValue(\"test2\", \"different value\");\n+        assertTrue(contextedException.getLabelSet().size() == 5);\n+        assertTrue(contextedException.getLabelSet().contains(\"test2\"));\n+        assertTrue(contextedException.getLabelSet().contains(\"test2[1]\"));\n+        \n+        String contextMessage = contextedException.getFormattedExceptionMessage(null);\n+        assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n+        assertTrue(contextedException.getMessage().endsWith(contextMessage));\n+    }\n+\n+    public void testReplaceValue() {\n+        contextedException = new ContextedException(new Exception(TEST_MESSAGE))\n+        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        \n+        String message = contextedException.getMessage();\n+        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n+        assertTrue(message.indexOf(\"Crap\")>=0);\n+        \n+        assertTrue(contextedException.getValue(\"crap\") == null);\n+        assertTrue(contextedException.getValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n+        \n+        assertTrue(contextedException.getLabelSet().size() == 1);\n         assertTrue(contextedException.getLabelSet().contains(\"test Poorly written obj\"));\n         \n         assertTrue(!contextedException.getLabelSet().contains(\"crap\"));\n \n-        contextedException.addValue(\"test Poorly written obj\", \"replacement\");\n-        \n+        contextedException.replaceValue(\"test Poorly written obj\", \"replacement\");\n+\n+        assertTrue(contextedException.getLabelSet().size() == 1);\n+\n         String contextMessage = contextedException.getFormattedExceptionMessage(null);\n         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n         assertTrue(contextedException.getMessage().endsWith(contextMessage));\n         String message = contextedException.getMessage();\n         assertTrue(message != null);\n     }\n-\n-    public void testGetMessage() {\n-        testAddValue();\n-    }\n     \n     static class ObjectWithFaultyToString implements Serializable {\n \n--- a/src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java\n /**\n  * JUnit tests for ContextedRuntimeException.\n  * @author D. Ashmore\n+ * @author Apache Software Foundation\n  *\n  */\n public class ContextedRuntimeExceptionTest extends TestCase {\n     private static final String TEST_MESSAGE_2 = \"This is monotonous\";\n     private static final String TEST_MESSAGE = \"Test Message\";\n     private ContextedRuntimeException contextedRuntimeException;\n-\n-    public ContextedRuntimeExceptionTest(String name) {\n-        super(name);\n-    }\n \n     public void testContextedException() {\n         contextedRuntimeException = new ContextedRuntimeException();\n         .addValue(\"test1\", null)\n         .addValue(\"test2\", \"some value\")\n         .addValue(\"test Date\", new Date())\n-        .addValue(\"test Nbr\", new Integer(5))\n-        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        .addValue(\"test Nbr\", new Integer(5));\n         \n         String message = contextedRuntimeException.getMessage();\n         assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n         assertTrue(message.indexOf(\"test2\")>=0);\n         assertTrue(message.indexOf(\"test Date\")>=0);\n         assertTrue(message.indexOf(\"test Nbr\")>=0);\n-        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n         assertTrue(message.indexOf(\"some value\")>=0);\n         assertTrue(message.indexOf(\"5\")>=0);\n-        assertTrue(message.indexOf(\"Crap\")>=0);\n         \n         assertTrue(contextedRuntimeException.getValue(\"test1\") == null);\n         assertTrue(contextedRuntimeException.getValue(\"test2\").equals(\"some value\"));\n-        assertTrue(contextedRuntimeException.getValue(\"crap\") == null);\n-        assertTrue(contextedRuntimeException.getValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n         \n-        assertTrue(contextedRuntimeException.getLabelSet().size() == 5);\n+        assertTrue(contextedRuntimeException.getLabelSet().size() == 4);\n         assertTrue(contextedRuntimeException.getLabelSet().contains(\"test1\"));\n         assertTrue(contextedRuntimeException.getLabelSet().contains(\"test2\"));\n         assertTrue(contextedRuntimeException.getLabelSet().contains(\"test Date\"));\n         assertTrue(contextedRuntimeException.getLabelSet().contains(\"test Nbr\"));\n+\n+        contextedRuntimeException.addValue(\"test2\", \"different value\");\n+        assertTrue(contextedRuntimeException.getLabelSet().size() == 5);\n+        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test2\"));\n+        assertTrue(contextedRuntimeException.getLabelSet().contains(\"test2[1]\"));\n+        \n+        String contextMessage = contextedRuntimeException.getFormattedExceptionMessage(null);\n+        assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n+        assertTrue(contextedRuntimeException.getMessage().endsWith(contextMessage));\n+    }\n+\n+    public void testReplaceValue() {\n+        contextedRuntimeException = new ContextedRuntimeException(new Exception(TEST_MESSAGE))\n+        .addValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n+        \n+        String message = contextedRuntimeException.getMessage();\n+        assertTrue(message.indexOf(TEST_MESSAGE)>=0);\n+        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n+        assertTrue(message.indexOf(\"Crap\")>=0);\n+        \n+        assertTrue(contextedRuntimeException.getValue(\"crap\") == null);\n+        assertTrue(contextedRuntimeException.getValue(\"test Poorly written obj\") instanceof ObjectWithFaultyToString);\n+        \n+        assertTrue(contextedRuntimeException.getLabelSet().size() == 1);\n         assertTrue(contextedRuntimeException.getLabelSet().contains(\"test Poorly written obj\"));\n         \n         assertTrue(!contextedRuntimeException.getLabelSet().contains(\"crap\"));\n \n-        contextedRuntimeException.addValue(\"test Poorly written obj\", \"replacement\");\n-        \n+        contextedRuntimeException.replaceValue(\"test Poorly written obj\", \"replacement\");\n+\n+        assertTrue(contextedRuntimeException.getLabelSet().size() == 1);\n+\n         String contextMessage = contextedRuntimeException.getFormattedExceptionMessage(null);\n         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1);\n         assertTrue(contextedRuntimeException.getMessage().endsWith(contextMessage));\n         String message = contextedRuntimeException.getMessage();\n         assertTrue(message != null);\n     }\n-\n-    public void testGetMessage() {\n-        testAddValue();\n-    }\n-    \n-\n }\n--- a/src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java\n import junit.framework.TestCase;\n \n /**\n- * JUnit tests for DefaultExceptionContext\n+ * JUnit tests for DefaultExceptionContext.\n  * @author D. Ashmore\n  *\n  */\n     }\n     \n     public void testAddValue() {\n+        defaultExceptionContext.addValue(\"test2\", \"different value\");\n                 \n         String message = defaultExceptionContext.getFormattedExceptionMessage(\"This is an error\");\n         assertTrue(message.indexOf(\"This is an error\")>=0);\n         assertTrue(message.indexOf(\"test1\")>=0);\n         assertTrue(message.indexOf(\"test2\")>=0);\n+        assertTrue(message.indexOf(\"test2[1]\")>=0);\n         assertTrue(message.indexOf(\"test Date\")>=0);\n         assertTrue(message.indexOf(\"test Nbr\")>=0);\n         assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n         assertTrue(message.indexOf(\"some value\")>=0);\n+        assertTrue(message.indexOf(\"different value\")>=0);\n         assertTrue(message.indexOf(\"5\")>=0);\n         assertTrue(message.indexOf(\"Crap\")>=0);\n-        \n-        //contextedException.printStackTrace();\n     }\n+    \n+    public void testReplaceValue() {\n+        defaultExceptionContext.replaceValue(\"test2\", \"different value\");\n+        defaultExceptionContext.replaceValue(\"test3\", \"3\");\n+                \n+        String message = defaultExceptionContext.getFormattedExceptionMessage(\"This is an error\");\n+        assertTrue(message.indexOf(\"This is an error\")>=0);\n+        assertTrue(message.indexOf(\"test1\")>=0);\n+        assertTrue(message.indexOf(\"test2\")>=0);\n+        assertTrue(message.indexOf(\"test3\")>=0);\n+        assertTrue(message.indexOf(\"test Date\")>=0);\n+        assertTrue(message.indexOf(\"test Nbr\")>=0);\n+        assertTrue(message.indexOf(\"test Poorly written obj\")>=0);\n+        assertTrue(message.indexOf(\"different value\")>=0);\n+        assertTrue(message.indexOf(\"5\")>=0);\n+        assertTrue(message.indexOf(\"Crap\")>=0);\n+\n+        assertTrue(message.indexOf(\"test2[1]\")<0);\n+        assertTrue(message.indexOf(\"some value\")<0);\n+}\n     \n     public void testFormattedExceptionMessageNull() {\n         defaultExceptionContext = new DefaultExceptionContext();", "timestamp": 1268673115, "metainfo": ""}