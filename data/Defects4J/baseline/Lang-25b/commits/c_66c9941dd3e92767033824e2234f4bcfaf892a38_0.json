{"sha": "66c9941dd3e92767033824e2234f4bcfaf892a38", "log": "Extra tests suggested by Clover   ", "commit": "\n--- a/src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateFormatUtilsTest.java\n  */\n package org.apache.commons.lang.time;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n import java.util.Calendar;\n import java.util.TimeZone;\n \n         super(s);\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new DateFormatUtils());\n+        Constructor[] cons = DateFormatUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(DateFormatUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(DateFormatUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     public void testDateTimeISO(){\n         TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n         Calendar cal = Calendar.getInstance(timeZone);\n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n  */\n package org.apache.commons.lang.time;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n     }\n \n     //-----------------------------------------------------------------------\n-\n-\n+    public void testConstructor() {\n+        assertNotNull(new DateUtils());\n+        Constructor[] cons = DateUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(DateUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(DateUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     /**\n      * Tests various values with the round method\n      */\n--- a/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n  */\n package org.apache.commons.lang.time;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n import java.util.Calendar;\n import java.util.TimeZone;\n \n         super(s);\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new DurationFormatUtils());\n+        Constructor[] cons = DurationFormatUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(false, Modifier.isPublic(DurationFormatUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(DurationFormatUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     public void testFormatWords(){\n         String text = null;\n         \n--- a/src/test/org/apache/commons/lang/time/StopWatchTest.java\n+++ b/src/test/org/apache/commons/lang/time/StopWatchTest.java\n  * TestCase for StopWatch.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: StopWatchTest.java,v 1.4 2003/06/24 21:13:55 scolebourne Exp $\n+ * @version $Id: StopWatchTest.java,v 1.5 2003/08/01 00:12:32 scolebourne Exp $\n  */\n public class StopWatchTest extends TestCase {\n \n         super(s);\n     }\n \n+    //-----------------------------------------------------------------------\n     public void testStopWatchSimple(){\n         StopWatch watch = new StopWatch();\n-        assertEquals(0, watch.getTime());\n-        \n         watch.start();\n             try {Thread.sleep(550);} catch (InterruptedException ex) {}\n         watch.stop();\n         \n         watch.reset();\n         assertEquals(0, watch.getTime());\n+    }\n+    \n+    public void testStopWatchSimpleGet(){\n+        StopWatch watch = new StopWatch();\n+        assertEquals(0, watch.getTime());\n+        assertEquals(\"0:00:00.000\", watch.toString());\n+        \n+        watch.start();\n+            try {Thread.sleep(500);} catch (InterruptedException ex) {}\n+        assertTrue(watch.getTime() < 2000);\n     }\n     \n     public void testStopWatchSplit(){", "timestamp": 1059696752, "metainfo": ""}