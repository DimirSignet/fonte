{"sha": "cb357f73cb6be994ae92c5e38adaf71ea4346c63", "log": "A couple more cap/uncap tests.   ", "commit": "\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsTest.java,v 1.47 2003/08/14 00:04:20 bayard Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.48 2003/08/14 01:15:51 ggregory Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n     private static final String TEXT_LIST_CHAR = \"foo;bar;baz\";\n     private static final String TEXT_LIST_NOSEP = \"foobarbaz\";\n \n-    private static final String FOO = \"foo\";\n-    private static final String BAR = \"bar\";\n-    private static final String CAP_FOO = \"Foo\";\n-\n-    private static final String SENTENCE = \"foo bar baz\";\n+    private static final String FOO_UNCAP = \"foo\";\n+    private static final String FOO_CAP = \"Foo\";\n+\n+    private static final String SENTENCE_UNCAP = \"foo bar baz\";\n+    private static final String SENTENCE_CAP = \"Foo Bar Baz\";\n \n     public StringUtilsTest(String name) {\n         super(name);\n         assertEquals(null, StringUtils.uncapitalizeAllWords(null));\n \n         assertEquals(\"capitalize(String) failed\",\n-                     CAP_FOO, StringUtils.capitalize(FOO) );\n+                     FOO_CAP, StringUtils.capitalize(FOO_UNCAP) );\n         assertEquals(\"capitalize(empty-string) failed\",\n                      \"\", StringUtils.capitalize(\"\") );\n         assertEquals(\"capitalize(single-char-string) failed\",\n                      \"X\", StringUtils.capitalize(\"x\") );\n         assertEquals(\"capitalizeAllWords(String) failed\",\n-                     \"Foo Bar Baz\", StringUtils.capitalizeAllWords(SENTENCE) );\n+                     \"Foo Bar Baz\", StringUtils.capitalizeAllWords(SENTENCE_UNCAP) );\n         assertEquals(\"capitalizeAllWords(empty-string) failed\",\n                      \"\", StringUtils.capitalizeAllWords(\"\") );\n         assertEquals(\"uncapitalize(String) failed\",\n-                     FOO, StringUtils.uncapitalize(CAP_FOO) );\n+                     FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );\n         assertEquals(\"uncapitalize(empty-string) failed\",\n                      \"\", StringUtils.uncapitalize(\"\") );\n         assertEquals(\"uncapitalize(single-char-string) failed\",\n                      \"x\", StringUtils.uncapitalize(\"X\") );\n         assertEquals(\"uncapitalizeAllWords(String) failed\",\n-                     SENTENCE, StringUtils.uncapitalizeAllWords(\"Foo Bar Baz\") );\n+                     SENTENCE_UNCAP, StringUtils.uncapitalizeAllWords(\"Foo Bar Baz\") );\n         assertEquals(\"uncapitalizeAllWords(empty-string) failed\",\n                      \"\", StringUtils.uncapitalizeAllWords(\"\") );\n+                     \n+        // reflection type of tests: Sentences.\n+        assertEquals(\"uncapitalizeAllWords(capitalizeAllWords(String)) failed\",\n+                     SENTENCE_UNCAP, StringUtils.uncapitalizeAllWords(StringUtils.capitalizeAllWords(SENTENCE_UNCAP)) );\n+        assertEquals(\"capitalizeAllWords(uncapitalizeAllWords(String)) failed\",\n+                     SENTENCE_CAP, StringUtils.capitalizeAllWords(StringUtils.uncapitalizeAllWords(SENTENCE_CAP)) );\n+        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n+                     SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) );\n+        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n+                     SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) );\n+\n+        // reflection type of tests: One word.\n+        assertEquals(\"uncapitalizeAllWords(capitalizeAllWords(String)) failed\",\n+                     FOO_UNCAP, StringUtils.uncapitalizeAllWords(StringUtils.capitalizeAllWords(FOO_UNCAP)) );\n+        assertEquals(\"capitalizeAllWords(uncapitalizeAllWords(String)) failed\",\n+                     FOO_CAP, StringUtils.capitalizeAllWords(StringUtils.uncapitalizeAllWords(FOO_CAP)) );\n+        assertEquals(\"uncapitalize(capitalize(String)) failed\",\n+                    FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );\n+        assertEquals(\"capitalize(uncapitalize(String)) failed\",\n+                    FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) );\n \n         assertEquals(\"upperCase(String) failed\",\n                      \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\") );\n     \n     public void testOverlayString_StringStringIntInt() {\n         assertEquals(\"overlayString(String, String, int, int) failed\",\n-                     \"foo foor baz\", StringUtils.overlayString(SENTENCE, FOO, 4, 6) );\n+                     \"foo foor baz\", StringUtils.overlayString(SENTENCE_UNCAP, FOO_UNCAP, 4, 6) );\n         assertEquals(\"abef\", StringUtils.overlayString(\"abcdef\", \"\", 2, 4));\n         assertEquals(\"abzzzzef\", StringUtils.overlayString(\"abcdef\", \"zzzz\", 2, 4));\n         assertEquals(\"abcdzzzzcdef\", StringUtils.overlayString(\"abcdef\", \"zzzz\", 4, 2));\n \n     public void testDeprecatedChompFunctions() {\n         assertEquals(\"chompLast(String) failed\",\n-                     FOO, StringUtils.chompLast(FOO + \"\\n\") );\n+                     FOO_UNCAP, StringUtils.chompLast(FOO_UNCAP + \"\\n\") );\n \n         assertEquals(\"getChomp(String, String) failed\",\n-                     \"\\n\" + FOO, StringUtils.getChomp(FOO + \"\\n\" + FOO, \"\\n\") );\n+                     \"\\n\" + FOO_UNCAP, StringUtils.getChomp(FOO_UNCAP + \"\\n\" + FOO_UNCAP, \"\\n\") );\n \n         assertEquals(\"prechomp(String, String) failed\",\n-                     FOO, StringUtils.prechomp(FOO + \"\\n\" + FOO, \"\\n\") );\n+                     FOO_UNCAP, StringUtils.prechomp(FOO_UNCAP + \"\\n\" + FOO_UNCAP, \"\\n\") );\n \n         assertEquals(\"getPrechomp(String, String) failed\",\n-                     FOO + \"\\n\", StringUtils.getPrechomp(FOO + \"\\n\" + FOO, \"\\n\") );\n+                     FOO_UNCAP + \"\\n\", StringUtils.getPrechomp(FOO_UNCAP + \"\\n\" + FOO_UNCAP, \"\\n\") );\n \n         assertEquals(\"chopNewline(String, String) failed\",\n-                     FOO, StringUtils.chopNewline(FOO + \"\\r\\n\") );\n+                     FOO_UNCAP, StringUtils.chopNewline(FOO_UNCAP + \"\\r\\n\") );\n     }\n \n     public void testChop() {\n \n         String[][] chopCases = {\n-            { FOO + \"\\r\\n\", FOO } ,\n-            { FOO + \"\\n\" , FOO } ,\n-            { FOO + \"\\r\", FOO },\n-            { FOO + \" \\r\", FOO + \" \" },\n+            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP } ,\n+            { FOO_UNCAP + \"\\n\" , FOO_UNCAP } ,\n+            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n+            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n             { \"foo\", \"fo\"},\n             { \"foo\\nfoo\", \"foo\\nfo\" },\n             { \"\\n\", \"\" },\n     public void testChomp() {\n \n         String[][] chompCases = {\n-            { FOO + \"\\r\\n\", FOO },\n-            { FOO + \"\\n\" , FOO },\n-            { FOO + \"\\r\", FOO },\n-            { FOO + \" \\r\", FOO + \" \" },\n-            { FOO, FOO },\n-            { FOO + \"\\n\\n\", FOO + \"\\n\"},\n-            { FOO + \"\\r\\n\\r\\n\", FOO + \"\\r\\n\" },\n+            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP },\n+            { FOO_UNCAP + \"\\n\" , FOO_UNCAP },\n+            { FOO_UNCAP + \"\\r\", FOO_UNCAP },\n+            { FOO_UNCAP + \" \\r\", FOO_UNCAP + \" \" },\n+            { FOO_UNCAP, FOO_UNCAP },\n+            { FOO_UNCAP + \"\\n\\n\", FOO_UNCAP + \"\\n\"},\n+            { FOO_UNCAP + \"\\r\\n\\r\\n\", FOO_UNCAP + \"\\r\\n\" },\n             { \"foo\\nfoo\", \"foo\\nfoo\" },\n             { \"foo\\n\\rfoo\", \"foo\\n\\rfoo\" },\n             { \"\\n\", \"\" },\n             { \"\\r\\n\", \"\" },\n             { \"\", \"\" },\n             { null, null },\n-            { FOO + \"\\n\\r\", FOO + \"\\n\"}\n+            { FOO_UNCAP + \"\\n\\r\", FOO_UNCAP + \"\\n\"}\n         };\n         for (int i = 0; i < chompCases.length; i++) {\n             String original = chompCases[i][0];\n     public void testChopNewLine() {\n \n         String[][] newLineCases = {\n-            { FOO + \"\\r\\n\", FOO } ,\n-            { FOO + \"\\n\" , FOO } ,\n-            { FOO + \"\\r\", FOO + \"\\r\" },\n-            { FOO, FOO },\n-            { FOO + \"\\n\" + FOO , FOO + \"\\n\" + FOO },\n-            { FOO + \"\\n\\n\", FOO + \"\\n\"},\n+            { FOO_UNCAP + \"\\r\\n\", FOO_UNCAP } ,\n+            { FOO_UNCAP + \"\\n\" , FOO_UNCAP } ,\n+            { FOO_UNCAP + \"\\r\", FOO_UNCAP + \"\\r\" },\n+            { FOO_UNCAP, FOO_UNCAP },\n+            { FOO_UNCAP + \"\\n\" + FOO_UNCAP , FOO_UNCAP + \"\\n\" + FOO_UNCAP },\n+            { FOO_UNCAP + \"\\n\\n\", FOO_UNCAP + \"\\n\"},\n             { \"\\n\", \"\" },\n             { \"\", \"\" },\n             { \"\\r\\n\", \"\" }", "timestamp": 1060823751, "metainfo": ""}