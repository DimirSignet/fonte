{"sha": "0695c3f71e3fc5abe29d8b9b33eed7faac7e73bf", "log": "Adding a unit test for #LANG-281 and a fix. The fix involves removing the reduceAndCorrect method. It appears that this method was doing sod all - which is worrying as it used to be important. I'm guessing that it was a bad fix for a bug that was then subsequently fixed with other code. I'll create a JIRA issue to create more tests to test out the +31 block of code.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n             days -= 1;\n         }\n         while (days < 0) {\n-            days += 31; // such overshooting is taken care of later on\n+            end.add(Calendar.MONTH, -1);\n+            days += end.getActualMaximum(Calendar.DAY_OF_MONTH);\n+//days += 31; // TODO: Need tests to show this is bad and the new code is good.\n+// HEN: It's a tricky subject. Jan 15th to March 10th. If I count days-first it is \n+// 1 month and 26 days, but if I count month-first then it is 1 month and 23 days.\n+// Also it's contextual - if asked for no M in the format then I should probably \n+// be doing no calculating here.\n             months -= 1;\n+            end.add(Calendar.MONTH, 1);\n         }\n         while (months < 0) {\n             months += 12;\n             years -= 1;\n         }\n-\n-        // take estimates off of end to see if we can equal start, when it overshoots recalculate\n-        milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);\n-        seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);\n-        minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);\n-        hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);\n-        days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);\n-        months -= reduceAndCorrect(start, end, Calendar.MONTH, months);\n-        years -= reduceAndCorrect(start, end, Calendar.YEAR, years);\n \n         // This next block of code adds in values that \n         // aren't requested. This allows the user to ask for the \n         return buffer.toString();\n     }\n \n-    /**\n-     * Reduces by difference, then if it overshot, calculates the overshot amount and \n-     * fixes and returns the amount to change by.\n-     *\n-     * @param start Start of period being formatted\n-     * @param end End of period being formatted\n-     * @param field Field to reduce, as per constants in {@link java.util.Calendar}\n-     * @param difference amount to reduce by\n-     * @return int reduced value\n-     */\n-    static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) {\n-        end.add( field, -1 * difference );\n-        int endValue = end.get(field);\n-        int startValue = start.get(field);\n-        if (endValue < startValue) {\n-            int newdiff = startValue - endValue;\n-            end.add( field, newdiff );\n-            return newdiff;\n-        } else {\n-            return 0;\n-        }\n-    }\n-\n     static final Object y = \"y\";\n     static final Object M = \"M\";\n     static final Object d = \"d\";\n--- a/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n         assertEquals( \"0000/00/30 16:00:00 000\", DurationFormatUtils.formatPeriod(cal1.getTime().getTime(), cal2.getTime().getTime(), \"yyyy/MM/dd HH:mm:ss SSS\") );\n     }\n \n+    // https://issues.apache.org/jira/browse/LANG-281\n+    public void testJiraLang281() {\n+        Calendar cal = Calendar.getInstance();\n+        cal.set(Calendar.MONTH, Calendar.DECEMBER);\n+        cal.set(Calendar.DAY_OF_MONTH, 31);\n+        cal.set(Calendar.YEAR, 2005);\n+        cal.set(Calendar.HOUR_OF_DAY, 0);\n+        cal.set(Calendar.MINUTE, 0);\n+        cal.set(Calendar.SECOND, 0);\n+        cal.set(Calendar.MILLISECOND, 0);\n+\n+        Calendar cal2 = Calendar.getInstance();\n+        cal2.set(Calendar.MONTH, Calendar.OCTOBER);\n+        cal2.set(Calendar.DAY_OF_MONTH, 6);\n+        cal2.set(Calendar.YEAR, 2006);\n+        cal2.set(Calendar.HOUR_OF_DAY, 0);\n+        cal2.set(Calendar.MINUTE, 0);\n+        cal2.set(Calendar.SECOND, 0);\n+        cal2.set(Calendar.MILLISECOND, 0);\n+        String result = DurationFormatUtils.formatPeriod(cal.getTime().getTime(), cal2.getTime().getTime(), \"MM\");\n+        assertEquals(\"09\", result);\n+    }\n+\n     private void assertArrayEquals(DurationFormatUtils.Token[] obj1, DurationFormatUtils.Token[] obj2) {\n         assertEquals(\"Arrays are unequal length. \", obj1.length, obj2.length);\n         for (int i = 0; i < obj1.length; i++) {", "timestamp": 1160180562, "metainfo": ""}