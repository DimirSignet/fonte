{"sha": "4991a323e370713bd82b3df647c45a208be90de2", "log": "Remove end of line spaces   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n import java.util.List;\n \n /**\n- * <p>Operations on {@link java.lang.String} that are \n+ * <p>Operations on {@link java.lang.String} that are\n  * <code>null</code> safe.</p>\n- * \n+ *\n  * <ul>\n  *  <li><b>IsEmpty/IsBlank</b>\n  *      - checks if a String contains text</li>\n  *\n  * <p>The <code>StringUtils</code> class defines certain words related to\n  * String handling.</p>\n- * \n+ *\n  * <ul>\n  *  <li>null - <code>null</code></li>\n  *  <li>empty - a zero-length string (<code>\"\"</code>)</li>\n  *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n  *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n  * </ul>\n- * \n+ *\n  * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.\n  * That is to say that a <code>null</code> input will return <code>null</code>.\n  * Where a <code>boolean</code> or <code>int</code> is being returned\n  * details vary by method.</p>\n- * \n- * <p>A side effect of the <code>null</code> handling is that a \n+ *\n+ * <p>A side effect of the <code>null</code> handling is that a\n  * <code>NullPointerException</code> should be considered a bug in\n  * <code>StringUtils</code> (except for deprecated methods).</p>\n- * \n+ *\n  * <p>Methods in this class give sample code to explain their operation.\n  * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n  *\n  * @author Gary Gregory\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.118 2003/11/23 20:44:39 psteitz Exp $\n+ * @version $Id: StringUtils.java,v 1.119 2003/11/29 13:13:32 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     // Whitespace:\n     // Character.isWhitespace() is faster than WHITESPACE.indexOf()\n     // where WHITESPACE is a string of all whitespace characters\n-    // \n+    //\n     // Character access:\n     // String.charAt(n) versus toCharArray(), then array[n]\n     // String.charAt(n) is about 15% worse for a 10K string\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Checks if a String is empty (\"\") or null.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.isEmpty(null)      = true\n      * StringUtils.isEmpty(\"\")        = true\n      * <p>NOTE: This method changed in Lang version 2.0.\n      * It no longer trims the String.\n      * That functionality is available in isBlank().</p>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @return <code>true</code> if the String is empty or null\n      */\n \n     /**\n      * <p>Checks if a String is not empty (\"\") and not null.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.isNotEmpty(null)      = false\n      * StringUtils.isNotEmpty(\"\")        = false\n \n     /**\n      * <p>Checks if a String is whitespace, empty (\"\") or null.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.isBlank(null)      = true\n      * StringUtils.isBlank(\"\")        = true\n \n     /**\n      * <p>Checks if a String is not empty (\"\"), not null and not whitespace only.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.isNotBlank(null)      = false\n      * StringUtils.isNotBlank(\"\")        = false\n      * </pre>\n      *\n      * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is \n+     * @return <code>true</code> if the String is\n      *  not empty and not null and not whitespace\n      * @since 2.0\n      */\n      * <p>Removes control characters (char &lt;= 32) from both\n      * ends of this String, handling <code>null</code> by returning\n      * an empty String (\"\").</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.clean(null)          = \"\"\n      * StringUtils.clean(\"\")            = \"\"\n      * <p>Removes control characters (char &lt;= 32) from both\n      * ends of this String, handling <code>null</code> by returning\n      * <code>null</code>.</p>\n-     * \n+     *\n      * <p>The String is trimmed using {@link String#trim()}.\n      * Trim removes start and end characters &lt;= 32.\n      * To strip whitespace use {@link #strip(String)}.</p>\n-     * \n+     *\n      * <p>To trim your choice of characters, use the\n      * {@link #strip(String, String)} methods.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.trim(null)          = null\n      * StringUtils.trim(\"\")            = \"\"\n         return (str == null ? null : str.trim());\n     }\n \n-    /** \n-     * <p>Removes control characters (char &lt;= 32) from both  \n-     * ends of this String returning <code>null</code> if the String is \n+    /**\n+     * <p>Removes control characters (char &lt;= 32) from both\n+     * ends of this String returning <code>null</code> if the String is\n      * empty (\"\") after the trim or if it is <code>null</code>.\n-     * \n+     *\n      * <p>The String is trimmed using {@link String#trim()}.\n      * Trim removes start and end characters &lt;= 32.\n      * To strip whitespace use {@link #stripToNull(String)}.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.trimToNull(null)          = null\n      * StringUtils.trimToNull(\"\")            = null\n      * StringUtils.trimToNull(\"abc\")         = \"abc\"\n      * StringUtils.trimToNull(\"    abc    \") = \"abc\"\n      * </pre>\n-     *  \n+     *\n      * @param str  the String to be trimmed, may be null\n-     * @return the trimmed String, \n+     * @return the trimmed String,\n      *  <code>null</code> if only chars &lt;= 32, empty or null String input\n      * @since 2.0\n      */\n         return (ts == null || ts.length() == 0 ? null : ts);\n     }\n \n-    /** \n-     * <p>Removes control characters (char &lt;= 32) from both \n+    /**\n+     * <p>Removes control characters (char &lt;= 32) from both\n      * ends of this String returning an empty String (\"\") if the String\n      * is empty (\"\") after the trim or if it is <code>null</code>.\n-     * \n+     *\n      * <p>The String is trimmed using {@link String#trim()}.\n      * Trim removes start and end characters &lt;= 32.\n      * To strip whitespace use {@link #stripToEmpty(String)}.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.trimToEmpty(null)          = \"\"\n      * StringUtils.trimToEmpty(\"\")            = \"\"\n      * StringUtils.trimToEmpty(\"abc\")         = \"abc\"\n      * StringUtils.trimToEmpty(\"    abc    \") = \"abc\"\n      * </pre>\n-     *  \n+     *\n      * @param str  the String to be trimmed, may be null\n      * @return the trimmed String, or an empty String if <code>null</code> input\n      * @since 2.0\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Strips whitespace from the start and end of a String.</p>\n-     * \n+     *\n      * <p>This is similar to {@link #trim(String)} but removes whitespace.\n      * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n-     * \n+     *\n      * <p>A <code>null</code> input String returns <code>null</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.strip(null)     = null\n      * StringUtils.strip(\"\")       = \"\"\n      * StringUtils.strip(\" abc \")  = \"abc\"\n      * StringUtils.strip(\" ab c \") = \"ab c\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to remove whitespace from, may be null\n      * @return the stripped String, <code>null</code> if null String input\n      */\n         return strip(str, null);\n     }\n \n-    /** \n+    /**\n      * <p>Strips whitespace from the start and end of a String  returning\n      * <code>null</code> if the String is empty (\"\") after the strip.</p>\n-     * \n+     *\n      * <p>This is similar to {@link #trimToNull(String)} but removes whitespace.\n      * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.strip(null)     = null\n      * StringUtils.strip(\"\")       = null\n      * StringUtils.strip(\" abc \")  = \"abc\"\n      * StringUtils.strip(\" ab c \") = \"ab c\"\n      * </pre>\n-     *  \n+     *\n      * @param str  the String to be stripped, may be null\n-     * @return the stripped String, \n+     * @return the stripped String,\n      *  <code>null</code> if whitespace, empty or null String input\n      * @since 2.0\n      */\n         return (str.length() == 0 ? null : str);\n     }\n \n-    /** \n+    /**\n      * <p>Strips whitespace from the start and end of a String  returning\n      * an empty String if <code>null</code> input.</p>\n-     * \n+     *\n      * <p>This is similar to {@link #trimToEmpty(String)} but removes whitespace.\n      * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.strip(null)     = \"\"\n      * StringUtils.strip(\"\")       = \"\"\n      * StringUtils.strip(\" abc \")  = \"abc\"\n      * StringUtils.strip(\" ab c \") = \"ab c\"\n      * </pre>\n-     *  \n+     *\n      * @param str  the String to be stripped, may be null\n      * @return the trimmed String, or an empty String if <code>null</code> input\n      * @since 2.0\n      *\n      * <p>A <code>null</code> input String returns <code>null</code>.\n      * An empty string (\"\") input returns the empty string.</p>\n-     * \n+     *\n      * <p>If the stripChars String is <code>null</code>, whitespace is\n      * stripped as defined by {@link Character#isWhitespace(char)}.\n      * Alternatively use {@link #strip(String)}.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.strip(null, *)          = null\n      * StringUtils.strip(\"\", *)            = \"\"\n      * StringUtils.strip(\" abc \", null)    = \"abc\"\n      * StringUtils.strip(\"  abcyx\", \"xyz\") = \"  abc\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to remove characters from, may be null\n      * @param stripChars  the characters to remove, null treated as whitespace\n      * @return the stripped String, <code>null</code> if null String input\n      *\n      * <p>A <code>null</code> input String returns <code>null</code>.\n      * An empty string (\"\") input returns the empty string.</p>\n-     * \n+     *\n      * <p>If the stripChars String is <code>null</code>, whitespace is\n      * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.stripStart(null, *)          = null\n      * StringUtils.stripStart(\"\", *)            = \"\"\n      * StringUtils.stripStart(\" abc \", null)    = \"abc \"\n      * StringUtils.stripStart(\"yxabc  \", \"xyz\") = \"abc  \"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to remove characters from, may be null\n      * @param stripChars  the characters to remove, null treated as whitespace\n      * @return the stripped String, <code>null</code> if null String input\n      *\n      * <p>A <code>null</code> input String returns <code>null</code>.\n      * An empty string (\"\") input returns the empty string.</p>\n-     * \n+     *\n      * <p>If the stripChars String is <code>null</code>, whitespace is\n      * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.stripEnd(null, *)          = null\n      * StringUtils.stripEnd(\"\", *)            = \"\"\n      * StringUtils.stripEnd(\" abc \", null)    = \" abc\"\n      * StringUtils.stripEnd(\"  abcyx\", \"xyz\") = \"  abc\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to remove characters from, may be null\n      * @param stripChars  the characters to remove, null treated as whitespace\n      * @return the stripped String, <code>null</code> if null String input\n      * A <code>null</code> array will return <code>null</code>.\n      * An empty array will return itself.\n      * A <code>null</code> array entry will be ignored.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.stripAll(null)             = null\n      * StringUtils.stripAll([])               = []\n      * StringUtils.stripAll([\"abc\", \"  abc\"]) = [\"abc\", \"abc\"]\n      * StringUtils.stripAll([\"abc  \", null])  = [\"abc\", null]\n      * </pre>\n-     * \n+     *\n      * @param strs  the array to remove whitespace from, may be null\n      * @return the stripped Strings, <code>null</code> if null array input\n      */\n      * A <code>null</code> array entry will be ignored.\n      * A <code>null</code> stripChars will strip whitespace as defined by\n      * {@link Character#isWhitespace(char)}.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.stripAll(null, *)                = null\n      * StringUtils.stripAll([], *)                  = []\n      * StringUtils.stripAll([\"abc  \", null], \"yz\")  = [\"abc  \", null]\n      * StringUtils.stripAll([\"yabcz\", null], \"yz\")  = [\"abc\", null]\n      * </pre>\n-     * \n+     *\n      * @param strs  the array to remove characters from, may be null\n      * @param stripChars  the characters to remove, null treated as whitespace\n      * @return the stripped Strings, <code>null</code> if null array input\n      * StringUtils.equals(\"abc\", \"abc\") = true\n      * StringUtils.equals(\"abc\", \"ABC\") = false\n      * </pre>\n-     *  \n+     *\n      * @see java.lang.String#equals(Object)\n      * @param str1  the first String, may be null\n      * @param str2  the second String, may be null\n      * StringUtils.equalsIgnoreCase(\"abc\", \"abc\") = true\n      * StringUtils.equalsIgnoreCase(\"abc\", \"ABC\") = true\n      * </pre>\n-     * \n+     *\n      * @see java.lang.String#equalsIgnoreCase(String)\n      * @param str1  the first String, may be null\n      * @param str2  the second String, may be null\n      * This method uses {@link String#indexOf(int)}.</p>\n      *\n      * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.indexOf(null, *)         = -1\n      * StringUtils.indexOf(\"\", *)           = -1\n      * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n      * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchChar  the character to find\n-     * @return the first index of the search character, \n+     * @return the first index of the search character,\n      *  -1 if no match or <code>null</code> string input\n      * @since 2.0\n      */\n      * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.\n      * A negative start position is treated as zero.\n      * A start position greater than the string length returns <code>-1</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.indexOf(null, *, *)          = -1\n      * StringUtils.indexOf(\"\", *, *)            = -1\n      * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n      * StringUtils.indexOf(\"aabaabaa\", 'b', -1) = 2\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchChar  the character to find\n      * @param startPos  the start position, negative treated as zero\n-     * @return the first index of the search character, \n+     * @return the first index of the search character,\n      *  -1 if no match or <code>null</code> string input\n      * @since 2.0\n      */\n      * This method uses {@link String#indexOf(String)}.</p>\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.indexOf(null, *)          = -1\n      * StringUtils.indexOf(*, null)          = -1\n      * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n      * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n      * @return the first index of the search String,\n      * This method uses {@link String#indexOf(String)}.</p>\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.ordinalIndexOf(null, *, *)          = -1\n      * StringUtils.ordinalIndexOf(*, null, *)          = -1\n      * StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 1)   = 0\n      * StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 2)   = 0\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n      * @param ordinal  the n-th <code>searchStr</code> to find\n      * An empty (\"\") search String always matches.\n      * A start position greater than the string length only matches\n      * an empty search String.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.indexOf(null, *, *)          = -1\n      * StringUtils.indexOf(*, null, *)          = -1\n      * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n      * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n      * @param startPos  the start position, negative treated as zero\n      * This method uses {@link String#lastIndexOf(int)}.</p>\n      *\n      * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.lastIndexOf(null, *)         = -1\n      * StringUtils.lastIndexOf(\"\", *)           = -1\n      * StringUtils.lastIndexOf(\"aabaabaa\", 'a') = 7\n      * StringUtils.lastIndexOf(\"aabaabaa\", 'b') = 5\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchChar  the character to find\n-     * @return the last index of the search character, \n+     * @return the last index of the search character,\n      *  -1 if no match or <code>null</code> string input\n      * @since 2.0\n      */\n      * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.\n      * A negative start position returns <code>-1</code>.\n      * A start position greater than the string length searches the whole string.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.lastIndexOf(null, *, *)          = -1\n      * StringUtils.lastIndexOf(\"\", *,  *)           = -1\n      * StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1) = -1\n      * StringUtils.lastIndexOf(\"aabaabaa\", 'a', 0)  = 0\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchChar  the character to find\n      * @param startPos  the start position\n-     * @return the last index of the search character, \n+     * @return the last index of the search character,\n      *  -1 if no match or <code>null</code> string input\n      * @since 2.0\n      */\n      * This method uses {@link String#lastIndexOf(String)}.</p>\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.lastIndexOf(null, *)          = -1\n      * StringUtils.lastIndexOf(*, null)          = -1\n      * StringUtils.lastIndexOf(\"aabaabaa\", \"ab\") = 1\n      * StringUtils.lastIndexOf(\"aabaabaa\", \"\")   = 8\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n      * @return the last index of the search String,\n      * A negative start position returns <code>-1</code>.\n      * An empty (\"\") search String always matches unless the start position is negative.\n      * A start position greater than the string length searches the whole string.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.lastIndexOf(null, *, *)          = -1\n      * StringUtils.lastIndexOf(*, null, *)          = -1\n      * StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0)  = 0\n      * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0)  = -1\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n      * @param startPos  the start position, negative treated as zero\n      * This method uses {@link String#indexOf(int)}.</p>\n      *\n      * <p>A <code>null</code> or empty (\"\") String will return <code>false</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.contains(null, *)    = false\n      * StringUtils.contains(\"\", *)      = false\n      * StringUtils.contains(\"abc\", 'a') = true\n      * StringUtils.contains(\"abc\", 'z') = false\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchChar  the character to find\n-     * @return true if the String contains the search character, \n+     * @return true if the String contains the search character,\n      *  false if not or <code>null</code> string input\n      * @since 2.0\n      */\n      * This method uses {@link String#indexOf(int)}.</p>\n      *\n      * <p>A <code>null</code> String will return <code>false</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.contains(null, *)     = false\n      * StringUtils.contains(*, null)     = false\n      * StringUtils.contains(\"abc\", \"a\")  = true\n      * StringUtils.contains(\"abc\", \"z\")  = false\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n-     * @return true if the String contains the search String, \n+     * @return true if the String contains the search String,\n      *  false if not or <code>null</code> string input\n      * @since 2.0\n      */\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.\n      * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.indexOfAny(null, *)                = -1\n      * StringUtils.indexOfAny(\"\", *)                  = -1\n      * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n      * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.\n      * A <code>null</code> search string will return <code>-1</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.indexOfAny(null, *)            = -1\n      * StringUtils.indexOfAny(\"\", *)              = -1\n      * StringUtils.indexOfAny(\"zzabyycdxx\", \"by\") = 3\n      * StringUtils.indexOfAny(\"aba\",\"z\")          = -1\n      * </pre>\n-     *  \n+     *\n      * @param str  the String to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.\n      * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.indexOfAnyBut(null, *)           = -1\n      * StringUtils.indexOfAnyBut(\"\", *)             = -1\n      * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n      * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.\n      * A <code>null</code> search string will return <code>-1</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.indexOfAnyBut(null, *)            = -1\n      * StringUtils.indexOfAnyBut(\"\", *)              = -1\n      * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n      * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n      * </pre>\n-     *  \n+     *\n      * @param str  the String to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n      * StringUtils.containsOnly(\"ab1\", 'abc')  = false\n      * StringUtils.containsOnly(\"abz\", 'abc')  = false\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param valid  an array of valid chars, may be null\n      * @return true if it only contains valid chars and is non-null\n      * StringUtils.containsOnly(\"ab1\", \"abc\")  = false\n      * StringUtils.containsOnly(\"abz\", \"abc\")  = false\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param validChars  a String of valid chars, may be null\n      * @return true if it only contains valid chars and is non-null\n      * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n      * StringUtils.containsNone(\"abz\", 'xyz')  = false\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param invalidChars  an array of invalid chars, may be null\n      * @return true if it contains none of the invalid chars, or is null\n      * StringUtils.containsNone(\"ab1\", \"xyz\")  = true\n      * StringUtils.containsNone(\"abz\", \"xyz\")  = false\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param invalidChars  a String of invalid chars, may be null\n      * @return true if it contains none of the invalid chars, or is null\n      * A <code>null</code> search array entry will be ignored, but a search\n      * array containing \"\" will return <code>0</code> if <code>str</code> is not\n      * null. This method uses {@link String#indexOf(String)}.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.indexOfAny(null, *)                     = -1\n      * StringUtils.indexOfAny(*, null)                     = -1\n      * StringUtils.indexOfAny(\"\", [\"\"])                    = 0\n      * StringUtils.indexOfAny(\"\", [\"a\"])                   = -1\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchStrs  the Strings to search for, may be null\n      * @return the first index of any of the searchStrs in str, -1 if no match\n      * <p>A <code>null</code> String will return <code>-1</code>.\n      * A <code>null</code> search array will return <code>-1</code>.\n      * A <code>null</code> or zero length search array entry will be ignored,\n-     * but a search array containing \"\" will return the length of <code>str</code> \n+     * but a search array containing \"\" will return the length of <code>str</code>\n      * if <code>str</code> is not null. This method uses {@link String#indexOf(String)}</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.lastIndexOfAny(null, *)                   = -1\n      * StringUtils.lastIndexOfAny(*, null)                   = -1\n      * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n      * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"\"])   = 10\n      * </pre>\n-     * \n+     *\n      * @param str  the String to check, may be null\n      * @param searchStrs  the Strings to search for, may be null\n      * @return the last index of any of the Strings, -1 if no match\n      *\n      * <p>A <code>null</code> String will return <code>null</code>.\n      * An empty (\"\") String will return \"\".</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.substring(null, *)   = null\n      * StringUtils.substring(\"\", *)     = \"\"\n      * StringUtils.substring(\"abc\", -2) = \"bc\"\n      * StringUtils.substring(\"abc\", -4) = \"abc\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to get the substring from, may be null\n      * @param start  the position to start from, negative means\n      *  count back from the end of the String by this many characters\n      * characters from the end of the String.</p>\n      *\n      * <p>The returned substring starts with the character in the <code>start</code>\n-     * position and ends before the <code>end</code> position. All position counting is \n-     * zero-based -- i.e., to start at the beginning of the string use \n-     * <code>start = 0</code>. Negative start and end positions can be used to \n+     * position and ends before the <code>end</code> position. All position counting is\n+     * zero-based -- i.e., to start at the beginning of the string use\n+     * <code>start = 0</code>. Negative start and end positions can be used to\n      * specify offsets relative to the end of the String.</p>\n      *\n      * <p>If <code>start</code> is not strictly to the left of <code>end</code>, \"\"\n      * is returned.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.substring(null, *, *)    = null\n      * StringUtils.substring(\"\", * ,  *)    = \"\";\n      * StringUtils.substring(\"abc\", -2, -1) = \"b\"\n      * StringUtils.substring(\"abc\", -4, 2)  = \"ab\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to get the substring from, may be null\n      * @param start  the position to start from, negative means\n      *  count back from the end of the String by this many characters\n      * StringUtils.left(\"abc\", 2)   = \"ab\"\n      * StringUtils.left(\"abc\", 4)   = \"abc\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to get the leftmost characters from, may be null\n      * @param len  the length of the required String, must be zero or positive\n      * @return the leftmost characters, <code>null</code> if null String input\n      * StringUtils.right(\"abc\", 2)   = \"bc\"\n      * StringUtils.right(\"abc\", 4)   = \"abc\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to get the rightmost characters from, may be null\n      * @param len  the length of the required String, must be zero or positive\n      * @return the rightmost characters, <code>null</code> if null String input\n      * StringUtils.mid(\"abc\", 4, 2)   = \"\"\n      * StringUtils.mid(\"abc\", -2, 2)  = \"ab\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to get the characters from, may be null\n      * @param pos  the position to start from, negative treated as zero\n      * @param len  the length of the required String, must be zero or positive\n      * An empty (\"\") string input will return the empty string.\n      * A <code>null</code> separator will return the empty string if the\n      * input string is not <code>null</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.substringAfter(null, *)      = null\n      * StringUtils.substringAfter(\"\", *)        = \"\"\n      * <p>A <code>null</code> string input will return <code>null</code>.\n      * An empty (\"\") string input will return the empty string.\n      * An empty or <code>null</code> separator will return the input string.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.substringBeforeLast(null, *)      = null\n      * StringUtils.substringBeforeLast(\"\", *)        = \"\"\n      *\n      * <p>A <code>null</code> input String returns <code>null</code>.\n      * A <code>null</code> tag returns <code>null</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.substringBetween(null, *)            = null\n      * StringUtils.substringBetween(\"\", \"\")             = \"\"\n     /**\n      * <p>Gets the String that is nested in between two Strings.\n      * Only the first match is returned.</p>\n-     * \n+     *\n      * <p>A <code>null</code> input String returns <code>null</code>.\n      * A <code>null</code> open/close returns <code>null</code> (no match).\n      * An empty (\"\") open/close returns an empty string.</p>\n      *\n      * <p>A <code>null</code> input String returns <code>null</code>.\n      * A <code>null</code> tag returns <code>null</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.getNestedString(null, *)            = null\n      * StringUtils.getNestedString(\"\", \"\")             = \"\"\n     /**\n      * <p>Gets the String that is nested in between two Strings.\n      * Only the first match is returned.</p>\n-     * \n+     *\n      * <p>A <code>null</code> input String returns <code>null</code>.\n      * A <code>null</code> open/close returns <code>null</code> (no match).\n      * An empty (\"\") open/close returns an empty string.</p>\n      *\n      * <p>The separator is not included in the returned String array.\n      * Adjacent separators are treated as one separator.</p>\n-     * \n+     *\n      * <p>A <code>null</code> input String returns <code>null</code>.</p>\n      *\n      * <pre>\n      * StringUtils.split(\"abc  def\") = [\"abc\", \"def\"]\n      * StringUtils.split(\" abc \")    = [\"abc\"]\n      * </pre>\n-     * \n+     *\n      * @param str  the String to parse, may be null\n      * @return an array of parsed Strings, <code>null</code> if null String input\n      */\n      *\n      * <p>The separator is not included in the returned String array.\n      * Adjacent separators are treated as one separator.</p>\n-     * \n+     *\n      * <p>A <code>null</code> input String returns <code>null</code>.</p>\n      *\n      * <pre>\n      * StringUtils.split(\"a\\tb\\nc\", null) = [\"a\", \"b\", \"c\"]\n      * StringUtils.split(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n      * </pre>\n-     * \n+     *\n      * @param str  the String to parse, may be null\n      * @param separatorChar  the character used as the delimiter,\n      *  <code>null</code> splits on whitespace\n      *\n      * <p>The separator is not included in the returned String array.\n      * Adjacent separators are treated as one separator.</p>\n-     * \n+     *\n      * <p>A <code>null</code> input String returns <code>null</code>.\n      * A <code>null</code> separatorChars splits on whitespace.</p>\n      *\n      * StringUtils.split(\"abc  def\", \" \") = [\"abc\", \"def\"]\n      * StringUtils.split(\"ab:cd:ef\", \":\") = [\"ab\", \"cd\", \"ef\"]\n      * </pre>\n-     * \n+     *\n      * @param str  the String to parse, may be null\n      * @param separatorChars  the characters used as the delimiters,\n      *  <code>null</code> splits on whitespace\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Concatenates elements of an array into a single String.\n-     * Null objects or empty strings within the array are represented by \n+     * Null objects or empty strings within the array are represented by\n      * empty strings.</p>\n      *\n      * <pre>\n      * StringUtils.concatenate([\"a\", \"b\", \"c\"]) = \"abc\"\n      * StringUtils.concatenate([null, \"\", \"a\"]) = \"a\"\n      * </pre>\n-     * \n+     *\n      * @param array  the array of values to concatenate, may be null\n      * @return the concatenated String, <code>null</code> if null array input\n      * @deprecated Use the better named {@link #join(Object[])} instead.\n      * containing the provided list of elements.</p>\n      *\n      * <p>No separator is added to the joined String.\n-     * Null objects or empty strings within the array are represented by \n+     * Null objects or empty strings within the array are represented by\n      * empty strings.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.join(null)            = null\n      * StringUtils.join([])              = \"\"\n      * StringUtils.join([\"a\", \"b\", \"c\"]) = \"abc\"\n      * StringUtils.join([null, \"\", \"a\"]) = \"a\"\n      * </pre>\n-     * \n+     *\n      * @param array  the array of values to join together, may be null\n      * @return the joined String, <code>null</code> if null array input\n      * @since 2.0\n      * containing the provided list of elements.</p>\n      *\n      * <p>No delimiter is added before or after the list.\n-     * Null objects or empty strings within the array are represented by \n+     * Null objects or empty strings within the array are represented by\n      * empty strings.</p>\n      *\n      * <pre>\n      * containing the provided list of elements.</p>\n      *\n      * <p>No delimiter is added before or after the list.\n-     * A <code>null</code> separator is the same as an empty String (\"\"). \n-     * Null objects or empty strings within the array are represented by \n+     * A <code>null</code> separator is the same as an empty String (\"\").\n+     * Null objects or empty strings within the array are represented by\n      * empty strings.</p>\n      *\n      * <pre>\n      * <p>Joins the elements of the provided <code>Iterator</code> into\n      * a single String containing the provided elements.</p>\n      *\n-     * <p>No delimiter is added before or after the list. Null objects or empty \n+     * <p>No delimiter is added before or after the list. Null objects or empty\n      * strings within the iteration are represented by empty strings.</p>\n      *\n      * <p>See the examples here: {@link #join(Object[],char)}. </p>\n     /**\n      * <p>Deletes all 'space' characters from a String as defined by\n      * {@link Character#isSpace(char)}.</p>\n-     * \n-     * <p>This is the only StringUtils method that uses the \n+     *\n+     * <p>This is the only StringUtils method that uses the\n      * <code>isSpace</code> definition. You are advised to use\n      * {@link #deleteWhitespace(String)} instead as whitespace is much\n      * better localized.</p>\n      * StringUtils.deleteSpaces(\"ab  c\")        = \"abc\"\n      * StringUtils.deleteSpaces(\"a\\nb\\tc     \") = \"abc\"\n      * </pre>\n-     *  \n+     *\n      * <p>Spaces are defined as <code>{' ', '\\t', '\\r', '\\n', '\\b'}</code>\n      * in line with the deprecated <code>isSpace</code> method.</p>\n      *\n      * StringUtils.deleteWhitespace(\"abc\")        = \"abc\"\n      * StringUtils.deleteWhitespace(\"   ab  c  \") = \"abc\"\n      * </pre>\n-     *  \n+     *\n      * @param str  the String to delete whitespace from, may be null\n      * @return the String without whitespaces, <code>null</code> if null String input\n      */\n     /**\n      * <p>Removes a substring only if it is at the begining of a source string,\n      * otherwise returns the source string.</p>\n-     * \n+     *\n      * <p>A <code>null</code> source string will return <code>null</code>.\n      * An empty (\"\") source string will return the empty string.\n      * A <code>null</code> search string will return the source string.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.removeStart(null, *)      = null\n      * StringUtils.removeStart(\"\", *)        = \"\"\n      * <p>A <code>null</code> source string will return <code>null</code>.\n      * An empty (\"\") source string will return the empty string.\n      * A <code>null</code> search string will return the source string.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.removeEnd(null, *)      = null\n      * StringUtils.removeEnd(\"\", *)        = \"\"\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Replaces a String with another String inside a larger String, once.</p>\n-     * \n+     *\n      * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.replaceOnce(null, *, *)        = null\n      * StringUtils.replaceOnce(\"\", *, *)          = \"\"\n      * StringUtils.replaceOnce(\"aba\", \"a\", \"\")    = \"aba\"\n      * StringUtils.replaceOnce(\"aba\", \"a\", \"z\")   = \"zba\"\n      * </pre>\n-     * \n+     *\n      * @see #replace(String text, String repl, String with, int max)\n      * @param text  text to search and replace in, may be null\n      * @param repl  the String to search for, may be null\n      * <p>Replaces all occurrences of a String within another String.</p>\n      *\n      * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.replace(null, *, *)        = null\n      * StringUtils.replace(\"\", *, *)          = \"\"\n      * StringUtils.replace(\"aba\", \"a\", \"\")    = \"b\"\n      * StringUtils.replace(\"aba\", \"a\", \"z\")   = \"zbz\"\n      * </pre>\n-     * \n+     *\n      * @see #replace(String text, String repl, String with, int max)\n      * @param text  text to search and replace in, may be null\n      * @param repl  the String to search for, may be null\n      * StringUtils.replace(\"abaa\", \"a\", \"z\", 2)   = \"zbza\"\n      * StringUtils.replace(\"abaa\", \"a\", \"z\", -1)  = \"zbzz\"\n      * </pre>\n-     * \n+     *\n      * @param text  text to search and replace in, may be null\n      * @param repl  the String to search for, may be null\n      * @param with  the String to replace with, may be null\n      *\n      * <p>A <code>null</code> string input returns <code>null</code>.\n      * An empty (\"\") string input returns an empty string.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.replaceChars(null, *, *)        = null\n      * StringUtils.replaceChars(\"\", *, *)          = \"\"\n      * StringUtils.replaceChars(\"abcba\", 'b', 'y') = \"aycya\"\n      * StringUtils.replaceChars(\"abcba\", 'z', 'y') = \"abcba\"\n      * </pre>\n-     * \n+     *\n      * @param str  String to replace characters in, may be null\n      * @param searchChar  the character to search for, may be null\n      * @param replaceChar  the character to replace, may be null\n      *\n      * <p>For example:<br />\n      * <code>replaceChars(&quot;hello&quot;, &quot;ho&quot;, &quot;jy&quot;) = jelly</code>.</p>\n-     * \n+     *\n      * <p>A <code>null</code> string input returns <code>null</code>.\n      * An empty (\"\") string input returns an empty string.\n      * A null or empty set of search characters returns the input string.</p>\n-     * \n+     *\n      * <p>The length of the search characters should normally equal the length\n      * of the replace characters.\n      * If the search characters is longer, then the extra search characters\n      * are deleted.\n      * If the search characters is shorter, then the extra replace characters\n      * are ignored.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.replaceChars(null, *, *)           = null\n      * StringUtils.replaceChars(\"\", *, *)             = \"\"\n      * StringUtils.replaceChars(\"abcba\", \"bc\", \"y\")   = \"ayya\"\n      * StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\") = \"ayzya\"\n      * </pre>\n-     * \n+     *\n      * @param str  String to replace characters in, may be null\n      * @param searchChars  a set of characters to search for, may be null\n      * @param replaceChars  a set of characters to replace, may be null\n      * StringUtils.overlayString(\"abcdef\", \"zzzz\", -1, 4) = IndexOutOfBoundsException\n      * StringUtils.overlayString(\"abcdef\", \"zzzz\", 2, 8)  = IndexOutOfBoundsException\n      * </pre>\n-     * \n+     *\n      * @param text  the String to do overlaying in, may be null\n      * @param overlay  the String to overlay, may be null\n      * @param start  the position to start overlaying at, must be valid\n \n     /**\n      * <p>Overlays part of a String with another String.</p>\n-     * \n+     *\n      * <p>A <code>null</code> string input returns <code>null</code>.\n      * A negative index is treated as zero.\n      * An index greater than the string length is treated as the string length.\n      * StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -3) = \"zzzzabcdef\"\n      * StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10)  = \"abcdefzzzz\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to do overlaying in, may be null\n      * @param overlay  the String to overlay, may be null\n      * @param start  the position to start overlaying at\n     /**\n      * <p>Remove any &quot;\\n&quot; if and only if it is at the end\n      * of the supplied String.</p>\n-     * \n+     *\n      * @param str  the String to chomp from, must not be null\n      * @return String without chomped ending\n      * @throws NullPointerException if str is <code>null</code>\n \n     /**\n      * <p>Remove a value if and only if the String ends with that value.</p>\n-     * \n+     *\n      * @param str  the String to chomp from, must not be null\n      * @param sep  the String to chomp, must not be null\n      * @return String without chomped ending\n         }\n     }\n \n-    /** \n+    /**\n      * <p>Remove everything and return the last value of a supplied String, and\n      * everything after it from a String.</p>\n      *\n         }\n     }\n \n-    /** \n+    /**\n      * <p>Remove the first value of a supplied String, and everything before it\n      * from a String.</p>\n      *\n         }\n     }\n \n-    /** \n+    /**\n      * <p>Remove and return everything before the first value of a\n      * supplied String from another String.</p>\n      *\n      * <p>Right pad a String with spaces (' ').</p>\n      *\n      * <p>The String is padded to the size of <code>size</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.rightPad(null, *)   = null\n      * StringUtils.rightPad(\"\", 3)     = \"   \"\n     /**\n      * <p>Centers a String in a larger String of size <code>size</code>\n      * using the space character (' ').<p>\n-     * \n+     *\n      * <p>If the size is less than the String length, the String is returned.\n      * A <code>null</code> String returns <code>null</code>.\n      * A negative size is treated as zero.</p>\n      * StringUtils.center(\"abcd\", 2) = \"abcd\"\n      * StringUtils.center(\"a\", 4)    = \" a  \"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to center, may be null\n      * @param size  the int size of new String, negative treated as zero\n      * @return centered String, <code>null</code> if null String input\n      * StringUtils.center(\"a\", 4, ' ')    = \" a  \"\n      * StringUtils.center(\"a\", 4, 'y')    = \"yayy\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to center, may be null\n      * @param size  the int size of new String, negative treated as zero\n      * @param padChar  the character to pad the new String with\n      * StringUtils.center(\"abc\", 7, null) = \"  abc  \"\n      * StringUtils.center(\"abc\", 7, \"\")   = \"  abc  \"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to center, may be null\n      * @param size  the int size of new String, negative treated as zero\n      * @param padStr  the String to pad the new String with, must not be null or empty\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Converts a String to upper case as per {@link String#toUpperCase()}.</p>\n-     * \n+     *\n      * <p>A <code>null</code> input String returns <code>null</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.upperCase(null)  = null\n      * StringUtils.upperCase(\"\")    = \"\"\n      * StringUtils.upperCase(\"aBc\") = \"ABC\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to upper case, may be null\n      * @return the upper cased String, <code>null</code> if null String input\n      */\n \n     /**\n      * <p>Converts a String to lower case as per {@link String#toLowerCase()}.</p>\n-     * \n+     *\n      * <p>A <code>null</code> input String returns <code>null</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.lowerCase(null)  = null\n      * StringUtils.lowerCase(\"\")    = \"\"\n      * StringUtils.lowerCase(\"aBc\") = \"abc\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to lower case, may be null\n      * @return the lower cased String, <code>null</code> if null String input\n      */\n     /**\n      * <p>Capitalizes a String changing the first letter to title case as\n      * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n-     * \n+     *\n      * <p>For a word based algorithm, see {@link WordUtils#capitalize(String)}.\n      * A <code>null</code> input String returns <code>null</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.capitalize(null)  = null\n      * StringUtils.capitalize(\"\")    = \"\"\n      * StringUtils.capitalize(\"cat\") = \"Cat\"\n      * StringUtils.capitalize(\"cAt\") = \"CAt\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to capitalize, may be null\n      * @return the capitalized String, <code>null</code> if null String input\n      * @see WordUtils#capitalize(String)\n     /**\n      * <p>Capitalizes a String changing the first letter to title case as\n      * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n-     * \n+     *\n      * @param str  the String to capitalize, may be null\n      * @return the capitalized String, <code>null</code> if null String input\n      * @deprecated Use the standardly named {@link #capitalize(String)}.\n     /**\n      * <p>Uncapitalizes a String changing the first letter to title case as\n      * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n-     * \n+     *\n      * <p>For a word based algorithm, see {@link WordUtils#uncapitalize(String)}.\n      * A <code>null</code> input String returns <code>null</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.uncapitalize(null)  = null\n      * StringUtils.uncapitalize(\"\")    = \"\"\n      * StringUtils.uncapitalize(\"Cat\") = \"cat\"\n      * StringUtils.uncapitalize(\"CAT\") = \"cAT\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to uncapitalize, may be null\n      * @return the uncapitalized String, <code>null</code> if null String input\n      * @see WordUtils#uncapitalize(String)\n     /**\n      * <p>Uncapitalizes a String changing the first letter to title case as\n      * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n-     * \n+     *\n      * @param str  the String to uncapitalize, may be null\n      * @return the uncapitalized String, <code>null</code> if null String input\n      * @deprecated Use the standardly named {@link #uncapitalize(String)}.\n     /**\n      * <p>Swaps the case of a String changing upper and title case to\n      * lower case, and lower case to upper case.</p>\n-     * \n+     *\n      * <ul>\n      *  <li>Upper case character converts to Lower case</li>\n      *  <li>Title case character converts to Lower case</li>\n      *  <li>Lower case character converts to Upper case</li>\n      * </ul>\n-     * \n+     *\n      * <p>For a word based algorithm, see {@link WordUtils#swapCase(String)}.\n      * A <code>null</code> input String returns <code>null</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.swapCase(null)                 = null\n      * StringUtils.swapCase(\"\")                   = \"\"\n      * StringUtils.swapCase(\"The dog has a BONE\") = \"tHE DOG HAS A bone\"\n      * </pre>\n-     * \n+     *\n      * <p>NOTE: This method changed in Lang version 2.0.\n      * It no longer performs a word based algorithm.\n      * If you only use ASCII, you will notice no change.\n      * That functionality is available in WordUtils.</p>\n-     * \n+     *\n      * @param str  the String to swap case, may be null\n      * @return the changed String, <code>null</code> if null String input\n      */\n      * <p>Counts how many times the substring appears in the larger String.</p>\n      *\n      * <p>A <code>null</code> or empty (\"\") String input returns <code>0</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.countMatches(null, *)       = 0\n      * StringUtils.countMatches(\"\", *)         = 0\n      *\n      * <p><code>null</code> will return <code>false</code>.\n      * An empty String (\"\") will return <code>true</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.isAlpha(null)   = false\n      * StringUtils.isAlpha(\"\")     = true\n      *\n      * <p><code>null</code> will return <code>false</code>\n      * An empty String (\"\") will return <code>true</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.isAlphaSpace(null)   = false\n      * StringUtils.isAlphaSpace(\"\")     = true\n      *\n      * <p><code>null</code> will return <code>false</code>.\n      * An empty String (\"\") will return <code>true</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.isAlphanumeric(null)   = false\n      * StringUtils.isAlphanumeric(\"\")     = true\n      *\n      * <p><code>null</code> will return <code>false</code>.\n      * An empty String (\"\") will return <code>true</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.isAlphanumeric(null)   = false\n      * StringUtils.isAlphanumeric(\"\")     = true\n      *\n      * <p><code>null</code> will return <code>false</code>.\n      * An empty String (\"\") will return <code>true</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.isNumeric(null)   = false\n      * StringUtils.isNumeric(\"\")     = true\n      *\n      * <p><code>null</code> will return <code>false</code>.\n      * An empty String (\"\") will return <code>true</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.isNumeric(null)   = false\n      * StringUtils.isNumeric(\"\")     = true\n      *\n      * <p><code>null</code> will return <code>false</code>.\n      * An empty String (\"\") will return <code>true</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.isWhitespace(null)   = false\n      * StringUtils.isWhitespace(\"\")     = true\n     // Defaults\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Returns either the passed in String, \n+     * <p>Returns either the passed in String,\n      * or if the String is <code>null</code>, an empty String (\"\").</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.defaultString(null)  = \"\"\n      * StringUtils.defaultString(\"\")    = \"\"\n      * StringUtils.defaultString(\"bat\") = \"bat\"\n      * </pre>\n-     * \n+     *\n      * @see ObjectUtils#toString(Object)\n      * @see String#valueOf(Object)\n      * @param str  the String to check, may be null\n     }\n \n     /**\n-     * <p>Returns either the passed in String, \n+     * <p>Returns either the passed in String,\n      * or if the String is <code>null</code>, an empty String (\"\").</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.defaultString(null, \"null\")  = \"null\"\n      * StringUtils.defaultString(\"\", \"null\")    = \"\"\n      * StringUtils.defaultString(\"bat\", \"null\") = \"bat\"\n      * </pre>\n-     * \n+     *\n      * @see ObjectUtils#toString(Object,String)\n      * @see String#valueOf(Object)\n      * @param str  the String to check, may be null\n-     * @param defaultStr  the default String to return \n+     * @param defaultStr  the default String to return\n      *  if the input is <code>null</code>, may be null\n      * @return the passed in String, or the default if it was <code>null</code>\n      */\n      * <p>Reverses a String as per {@link StringBuffer#reverse()}.</p>\n      *\n      * <p><A code>null</code> String returns <code>null</code>.</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.reverse(null)  = null\n      * StringUtils.reverse(\"\")    = \"\"\n      * StringUtils.reverse(\"bat\") = \"tab\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to reverse, may be null\n      * @return the reversed String, <code>null</code> if null String input\n      */\n      * <p>The Strings between the delimiters are not reversed.\n      * Thus java.lang.String becomes String.lang.java (if the delimiter\n      * is <code>'.'</code>).</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.reverseDelimited(null, *)      = null\n      * StringUtils.reverseDelimited(\"\", *)        = \"\"\n      * StringUtils.reverseDelimited(\"a.b.c\", 'x') = \"a.b.c\"\n      * StringUtils.reverseDelimited(\"a.b.c\", \".\") = \"c.b.a\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to reverse, may be null\n      * @param separatorChar  the separator character to use\n      * @return the reversed String, <code>null</code> if null String input\n         if (str == null) {\n             return null;\n         }\n-        // could implement manually, but simple way is to reuse other, \n+        // could implement manually, but simple way is to reuse other,\n         // probably slower, methods.\n         String[] strs = split(str, separatorChar);\n         ArrayUtils.reverse(strs);\n      * <p>The Strings between the delimiters are not reversed.\n      * Thus java.lang.String becomes String.lang.java (if the delimiter\n      * is <code>\".\"</code>).</p>\n-     * \n+     *\n      * <pre>\n      * StringUtils.reverseDelimitedString(null, *)       = null\n      * StringUtils.reverseDelimitedString(\"\",*)          = \"\"\n      * StringUtils.reverseDelimitedString(\"a.b.c\", null) = \"a.b.c\"\n      * StringUtils.reverseDelimitedString(\"a.b.c\", \".\")  = \"c.b.a\"\n      * </pre>\n-     * \n+     *\n      * @param str  the String to reverse, may be null\n      * @param separatorChars  the separator characters to use, null treated as whitespace\n      * @return the reversed String, <code>null</code> if null String input\n      * @deprecated Use {@link #reverseDelimited(String, char)} instead.\n      *      This method is broken as the join doesn't know which char to use.\n      *      Method will be removed in Commons Lang 3.0.\n-     * \n+     *\n      */\n     public static String reverseDelimitedString(String str, String separatorChars) {\n         if (str == null) {\n             return null;\n         }\n-        // could implement manually, but simple way is to reuse other, \n+        // could implement manually, but simple way is to reuse other,\n         // probably slower, methods.\n         String[] strs = split(str, separatorChars);\n         ArrayUtils.reverse(strs);\n     // Abbreviating\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Abbreviates a String using ellipses. This will turn \n+     * <p>Abbreviates a String using ellipses. This will turn\n      * \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n      *\n      * <p>Specifically:\n     }\n \n     /**\n-     * <p>Abbreviates a String using ellipses. This will turn \n+     * <p>Abbreviates a String using ellipses. This will turn\n      * \"Now is the time for all good men\" into \"...is the time for...\"</p>\n      *\n      * <p>Works like <code>abbreviate(String, int)</code>, but allows you to specify\n      *\n      * @param str1  the first String, may be null\n      * @param str2  the second String, may be null\n-     * @return the portion of str2 where it differs from str1; returns the \n+     * @return the portion of str2 where it differs from str1; returns the\n      * empty String if they are equal\n      * @since 2.0\n      */\n     /**\n      * <p>Compares two Strings, and returns the index at which the\n      * Strings begin to differ.</p>\n-     * \n-     * <p>For example, \n+     *\n+     * <p>For example,\n      * <code>indexOfDifference(\"i am a machine\", \"i am a robot\") -> 7</code></p>\n      *\n      * <pre>\n      * <p>Find the Levenshtein distance between two Strings.</p>\n      *\n      * <p>This is the number of changes needed to change one String into\n-     * another, where each change is a single character modification (deletion, \n+     * another, where each change is a single character modification (deletion,\n      * insertion or substitution).</p>\n      *\n      * <p>This implementation of the Levenshtein distance algorithm\n      * StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") = 8\n      * StringUtils.getLevenshteinDistance(\"hello\", \"hallo\")    = 1\n      * </pre>\n-     * \n+     *\n      * @param s  the first String, must not be null\n      * @param t  the second String, must not be null\n      * @return result distance\n \n     /**\n      * <p>Gets the minimum of three <code>int</code> values.</p>\n-     * \n+     *\n      * @param a  value 1\n      * @param b  value 2\n      * @param c  value 3", "timestamp": 1070111612, "metainfo": ""}