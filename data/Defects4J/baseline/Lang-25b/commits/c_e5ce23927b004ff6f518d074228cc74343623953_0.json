{"sha": "e5ce23927b004ff6f518d074228cc74343623953", "log": "Added examples in javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n  * @author Matthew Hawthorne\n  * @author Gary Gregory\n  * @since 2.0\n- * @version $Id: BooleanUtils.java,v 1.15 2003/09/07 14:32:34 psteitz Exp $\n+ * @version $Id: BooleanUtils.java,v 1.16 2003/09/23 19:45:14 fredrik Exp $\n  */\n public class BooleanUtils {\n \n      * <p>Negates the specified boolean.</p>\n      * \n      * <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p>\n+     *\n+     * <pre>\n+     *   BooleanUtils.negate(Boolean.TRUE)  = Boolean.FALSE;\n+     *   BooleanUtils.negate(Boolean.FALSE) = Boolean.TRUE;\n+     *   BooleanUtils.negate(null)          = null;\n+     * </pre>\n      * \n      * @param bool  the Boolean to negate, may be null\n      * @return the negated Boolean, or <code>null</code> if <code>null</code> input\n      * <p>Boolean factory that avoids creating new Boolean objecs all the time.</p>\n      * \n      * <p>This method was added to JDK1.4 but is available here for earlier JDKs.</p>\n-     * \n+     *\n+     * <pre>\n+     *   BooleanUtils.toBooleanObject(false) = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(true)  = Boolean.TRUE\n+     * </pre>\n+     *\n      * @param bool  the boolean to convert\n      * @return Boolean.TRUE or Boolean.FALSE as appropriate\n      */\n     /**\n      * <p>Converts a Boolean to a boolean handling <code>null</code>\n      * by returning <code>false</code>.</p>\n-     * \n+     *\n+     * <pre>\n+     *   BooleanUtils.toBoolean(Boolean.TRUE)  = true\n+     *   BooleanUtils.toBoolean(Boolean.FALSE) = false\n+     *   BooleanUtils.toBoolean(null)          = false\n+     * </pre>\n+     *\n      * @param bool  the boolean to convert\n      * @return <code>true</code> or <code>false</code>, \n      *  <code>null</code> returns <code>false</code>\n     /**\n      * <p>Converts a Boolean to a boolean handling <code>null</code>.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toBooleanDefaultIfNull(Boolean.TRUE, false) = true\n+     *   BooleanUtils.toBooleanDefaultIfNull(Boolean.FALSE, true) = false\n+     *   BooleanUtils.toBooleanDefaultIfNull(null, true)          = true\n+     * </pre>\n+     *\n      * @param bool  the boolean to convert\n      * @param valueIfNull  the boolean value to return if <code>null</code>\n      * @return <code>true</code> or <code>false</code>\n      * <p>Converts an int to a boolean using the convention that <code>zero</code>\n      * is <code>false</code>.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toBoolean(0) = false\n+     *   BooleanUtils.toBoolean(1) = true\n+     *   BooleanUtils.toBoolean(2) = true\n+     * </pre>\n+     *\n      * @param value  the int to convert\n      * @return <code>true</code> if non-zero, <code>false</code>\n      *  if zero\n      * <p>Converts an int to a Boolean using the convention that <code>zero</code>\n      * is <code>false</code>.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toBoolean(0) = Boolean.FALSE\n+     *   BooleanUtils.toBoolean(1) = Boolean.TRUE\n+     *   BooleanUtils.toBoolean(2) = Boolean.TRUE\n+     * </pre>\n+     *\n      * @param value  the int to convert\n      * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,\n      *  <code>null</code> if <code>null</code>\n      * is <code>false</code>.</p>\n      * \n      * <p><code>null</code> will be converted to <code>null</code>.</p>\n-     * \n+     *\n+     * <pre>\n+     *   BooleanUtils.toBoolean(new Integer(0))    = Boolean.FALSE\n+     *   BooleanUtils.toBoolean(new Integer(1))    = Boolean.TRUE\n+     *   BooleanUtils.toBoolean(new Integer(null)) = null\n+     * </pre>\n+     *\n      * @param value  the Integer to convert\n      * @return Boolean.TRUE if non-zero, Boolean.FALSE if zero,\n      *  <code>null</code> if <code>null</code> input\n     /**\n      * <p>Converts an int to a boolean specifying the conversion values.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toBoolean(0, 1, 0) = false\n+     *   BooleanUtils.toBoolean(1, 1, 0) = true\n+     *   BooleanUtils.toBoolean(2, 1, 2) = false\n+     *   BooleanUtils.toBoolean(2, 2, 0) = true\n+     * </pre>\n+     *\n      * @param value  the Integer to convert\n      * @param trueValue  the value to match for <code>true</code>\n      * @param falseValue  the value to match for <code>false</code>\n     /**\n      * <p>Converts an Integer to a boolean specifying the conversion values.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false\n+     *   BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true\n+     *   BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false\n+     *   BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true\n+     *   BooleanUtils.toBoolean(null, null, new Integer(0))                     = true\n+     * </pre>\n+     *\n      * @param value  the Integer to convert\n      * @param trueValue  the value to match for <code>true</code>,\n      *  may be <code>null</code>\n     /**\n      * <p>Converts an int to a Boolean specifying the conversion values.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toBooleanObject(0, 0, 2, 3) = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(2, 1, 2, 3) = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(3, 1, 2, 3) = null\n+     * </pre>\n+     *\n      * @param value  the Integer to convert\n      * @param trueValue  the value to match for <code>true</code>\n      * @param falseValue  the value to match for <code>false</code>\n     /**\n      * <p>Converts an Integer to a Boolean specifying the conversion values.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null\n+     * </pre>\n+     *\n      * @param value  the Integer to convert\n      * @param trueValue  the value to match for <code>true</code>,\n      *  may be <code>null</code>\n     /**\n      * <p>Converts a boolean to an int using the convention that\n      * <code>zero</code> is <code>false</code>.</p>\n-     * \n+     *\n+     * <pre>\n+     *   BooleanUtils.toInteger(true)  = 1\n+     *   BooleanUtils.toInteger(false) = 0\n+     * </pre>\n+     *\n      * @param bool  the boolean to convert\n      * @return one if <code>true</code>, zero if <code>false</code>\n      */\n      * <p>Converts a boolean to an Integer using the convention that\n      * <code>zero</code> is <code>false</code>.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toIntegerObject(true)  = new Integer(1)\n+     *   BooleanUtils.toIntegerObject(false) = new Integer(0)\n+     * </pre>\n+     *\n      * @param bool  the boolean to convert\n      * @return one if <code>true</code>, zero if <code>false</code>\n      */\n     /**\n      * <p>Converts a Boolean to a Integer using the convention that\n      * <code>zero</code> is <code>false</code>.</p>\n-     * \n+     *\n      * <p><code>null</code> will be converted to <code>null</code>.</p>\n-     * \n+     *\n+     * <pre>\n+     *   BooleanUtils.toIntegerObject(Boolean.TRUE)  = new Integer(1)\n+     *   BooleanUtils.toIntegerObject(Boolean.FALSE) = new Integer(0)\n+     * </pre>\n+     *\n      * @param bool  the Boolean to convert\n      * @return one if Boolean.TRUE, zero if Boolean.FALSE, <code>null</code> if <code>null</code>\n      */\n     /**\n      * <p>Converts a boolean to an int specifying the conversion values.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toInteger(true, 1, 0)  = 1\n+     *   BooleanUtils.toInteger(false, 1, 0) = 0\n+     * </pre>\n+     *\n      * @param bool  the to convert\n      * @param trueValue  the value to return if <code>true</code>\n      * @param falseValue  the value to return if <code>false</code>\n     /**\n      * <p>Converts a Boolean to an int specifying the conversion values.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toInteger(Boolean.TRUE, 1, 0, 2)  = 1\n+     *   BooleanUtils.toInteger(Boolean.FALSE, 1, 0, 2) = 0\n+     *   BooleanUtils.toInteger(null, 1, 0, 2)          = 2\n+     * </pre>\n+     *\n      * @param bool  the Boolean to convert\n      * @param trueValue  the value to return if <code>true</code>\n      * @param falseValue  the value to return if <code>false</code>\n     /**\n      * <p>Converts a boolean to an Integer specifying the conversion values.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toIntegerObject(true, new Integer(1), new Integer(0))  = new Integer(1)\n+     *   BooleanUtils.toIntegerObject(false, new Integer(1), new Integer(0)) = new Integer(0)\n+     * </pre>\n+     *\n      * @param bool  the to convert\n      * @param trueValue  the value to return if <code>true</code>,\n      *  may be <code>null</code>\n     /**\n      * <p>Converts a Boolean to an Integer specifying the conversion values.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toIntegerObject(Boolean.TRUE, new Integer(1), new Integer(0), new Integer(2))  = new Integer(1)\n+     *   BooleanUtils.toIntegerObject(Boolean.FALSE, new Integer(1), new Integer(0), new Integer(2)) = new Integer(0)\n+     *   BooleanUtils.toIntegerObject(null, new Integer(1), new Integer(0), new Integer(2))          = new Integer(2)\n+     * </pre>\n+     *\n      * @param bool  the Boolean to convert\n      * @param trueValue  the value to return if <code>true</code>,\n      *  may be <code>null</code>\n      * <code>'false'</code>, <code>'off'</code> or <code>'no'</code>\n      * (case insensitive) will return <code>false</code>.\n      * Otherwise, <code>null</code> is returned.</p>\n+     *\n+     * <pre>\n+     *   BooleanUtils.toBooleanObject(\"true\")  = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"false\") = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"on\")    = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"ON\")    = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"off\")   = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"oFf\")   = Boolean.FALSE\n+     * </pre>\n      *\n      * @param str  the String to check\n      * @return the Boolean value of the string,\n \n     /**\n      * <p>Converts a String to a Boolean throwing an exception if no match.</p>\n+     *\n+     * <pre>\n+     *   BooleanUtils.toBooleanObject(\"true\", \"true\", \"false\", \"null\")  = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"false\", \"true\", \"false\", \"null\") = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"null\", \"true\", \"false\", \"null\")  = null\n+     * </pre>\n      *\n      * @param str  the String to check\n      * @param trueString  the String to match for <code>true</code>\n      * (case insensitive) will return <code>true</code>. Otherwise,\n      * <code>false</code> is returned.</p>\n      *\n+     * <pre>\n+     *   BooleanUtils.toBoolean(\"true\")  = true\n+     *   BooleanUtils.toBoolean(\"on\")    = true\n+     *   BooleanUtils.toBoolean(\"yes\")   = true\n+     *   BooleanUtils.toBoolean(\"false\") = false\n+     * </pre>\n+     *\n      * @param str  the String to check\n      * @return the boolean value of the string, <code>false</code> if no match\n      */\n      * <p>Converts a String to a Boolean throwing an exception if no match found.</p>\n      * \n      * <p>null is returned if there is no match.</p>\n+     *\n+     * <pre>\n+     *   BooleanUtils.toBoolean(\"true\", \"true\", \"false\")  = true\n+     *   BooleanUtils.toBoolean(\"false\", \"true\", \"false\") = false\n+     * </pre>\n      *\n      * @param str  the String to check\n      * @param trueString  the String to match for <code>true</code>\n      * <p>Converts a Boolean to a String returning <code>'true'</code>,\n      * <code>'false'</code>, or <code>null</code>.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toStringTrueFalse(Boolean.TRUE)  = \"true\"\n+     *   BooleanUtils.toStringTrueFalse(Boolean.FALSE) = \"false\"\n+     *   BooleanUtils.toStringTrueFalse(null)          = null;\n+     * </pre>\n+     *\n      * @param bool  the Boolean to check\n      * @return <code>'true'</code>, <code>'false'</code>,\n      *  or <code>null</code>\n      * <p>Converts a Boolean to a String returning <code>'on'</code>,\n      * <code>'off'</code>, or <code>null</code>.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toStringOnOff(Boolean.TRUE)  = \"on\"\n+     *   BooleanUtils.toStringOnOff(Boolean.FALSE) = \"off\"\n+     *   BooleanUtils.toStringOnOff(null)          = null;\n+     * </pre>\n+     *\n      * @param bool  the Boolean to check\n      * @return <code>'on'</code>, <code>'off'</code>,\n      *  or <code>null</code>\n      * <p>Converts a Boolean to a String returning <code>'yes'</code>,\n      * <code>'no'</code>, or <code>null</code>.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toStringYesNo(Boolean.TRUE)  = \"yes\"\n+     *   BooleanUtils.toStringYesNo(Boolean.FALSE) = \"no\"\n+     *   BooleanUtils.toStringYesNo(null)          = null;\n+     * </pre>\n+     *\n      * @param bool  the Boolean to check\n      * @return <code>'yes'</code>, <code>'no'</code>,\n      *  or <code>null</code>\n     /**\n      * <p>Converts a Boolean to a String returning one of the input Strings.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toString(Boolean.TRUE, \"true\", \"false\", null)   = \"true\"\n+     *   BooleanUtils.toString(Boolean.FALSE, \"true\", \"false\", null)  = \"false\"\n+     *   BooleanUtils.toString(null, \"true\", \"false\", null)           = null;\n+     * </pre>\n+     *\n      * @param bool  the Boolean to check\n      * @param trueString  the String to return if <code>true</code>,\n      *  may be <code>null</code>\n      * <p>Converts a boolean to a String returning <code>'true'</code>\n      * or <code>'false'</code>.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toStringTrueFalse(true)   = \"true\"\n+     *   BooleanUtils.toStringTrueFalse(false)  = \"false\"\n+     * </pre>\n+     *\n      * @param bool  the Boolean to check\n      * @return <code>'true'</code>, <code>'false'</code>,\n      *  or <code>null</code>\n      * <p>Converts a boolean to a String returning <code>'on'</code>\n      * or <code>'off'</code>.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toStringOnOff(true)   = \"on\"\n+     *   BooleanUtils.toStringOnOff(false)  = \"off\"\n+     * </pre>\n+     *\n      * @param bool  the Boolean to check\n      * @return <code>'on'</code>, <code>'off'</code>,\n      *  or <code>null</code>\n      * <p>Converts a boolean to a String returning <code>'yes'</code>\n      * or <code>'no'</code>.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toStringYesNo(true)   = \"yes\"\n+     *   BooleanUtils.toStringYesNo(false)  = \"no\"\n+     * </pre>\n+     *\n      * @param bool  the Boolean to check\n      * @return <code>'yes'</code>, <code>'no'</code>,\n      *  or <code>null</code>\n     /**\n      * <p>Converts a boolean to a String returning one of the input Strings.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.toString(true, \"true\", \"false\")   = \"true\"\n+     *   BooleanUtils.toString(false, \"true\", \"false\")  = \"false\"\n+     * </pre>\n+     *\n      * @param bool  the Boolean to check\n      * @param trueString  the String to return if <code>true</code>,\n      *  may be <code>null</code>\n     // ----------------------------------------------------------------------\n     /**\n      * <p>Performs an xor on a set of booleans.</p>\n-     * \n+     *\n+     * <pre>\n+     *   BooleanUtils.xor(new boolean[] { true, true })   = false\n+     *   BooleanUtils.xor(new boolean[] { false, false }) = false\n+     *   BooleanUtils.xor(new boolean[] { true, false })  = true\n+     * </pre>\n+     *\n      * @param array  an array of <code>boolean<code>s\n      * @return <code>true</code> if the xor is successful.\n      * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n     /**\n      * <p>Performs an xor on an array of Booleans.</p>\n      * \n+     * <pre>\n+     *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE })   = Boolean.FALSE\n+     *   BooleanUtils.xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) = Boolean.FALSE\n+     *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })  = Boolean.TRUE\n+     * </pre>\n+     *\n      * @param array  an array of <code>Boolean<code>s\n      * @return <code>true</code> if the xor is successful.\n      * @throws IllegalArgumentException if <code>array</code> is <code>null</code>", "timestamp": 1064346314, "metainfo": ""}