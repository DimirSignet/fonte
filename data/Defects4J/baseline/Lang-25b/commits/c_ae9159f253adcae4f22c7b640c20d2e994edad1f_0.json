{"sha": "ae9159f253adcae4f22c7b640c20d2e994edad1f", "log": "Renaming files to match *Test.java of other tests. Code is broken - needs to be edited after the svn mv  ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/exception/AbstractNestableTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.exception;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n+import junit.framework.TestCase;\n+/**\n+ * Tests implementations of the org.apache.commons.lang.exception.Nestable\n+ * interface.\n+ *\n+ * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n+ * @version $Id$\n+ */\n+public abstract class AbstractNestableTestCase extends TestCase\n+{\n+\n+    /**\n+     * Constructs an instance of\n+     * <code>AbstractNestableTestCase</code>.\n+     *\n+     * @param name the test name\n+     */\n+    public AbstractNestableTestCase(String name)\n+    {\n+        super(name);\n+    }\n+    \n+    /**\n+     * Tests the getCause() operation.\n+     */\n+    public void testGetCause()\n+    {\n+        Nestable ne1 = getNestable();\n+        assertNull(\"nestable exception() cause is null\", ne1.getCause()); \n+        \n+        Nestable ne2 = getNestable(\"ne2\");\n+        assertNull(\"nestable exception(\\\"ne2\\\") cause is null\", ne2.getCause());\n+        \n+        Nestable ne3 = getNestable(getThrowable(\"ne3 exception\"));\n+        assertNotNull(\"nestable exception(Throwable(\\\"ne3 exception\\\") cause is not null\",\n+            ne3.getCause()); \n+        assertTrue(\"nestable exception(Throwable(\\\"ne3 exception\\\") cause message == ne3 exception\",\n+            ne3.getCause().getMessage().equals(\"ne3 exception\")); \n+        \n+        Nestable ne4 = getNestable(\"ne4\", getThrowable(\"ne4 exception\"));\n+        assertNotNull(\"nestable exception(\\\"ne4\\\", Throwable(\\\"ne4 exception\\\") cause is not null\", \n+            ne4.getCause()); \n+        \n+        Nestable ne5 = getNestable(\"ne5\", (Throwable) null);\n+        assertNull(\"nestable exception(\\\"ne5\\\", null) cause is null\", \n+            ne5.getCause()); \n+        \n+        Nestable ne6 = getNestable(null, getThrowable(\"ne6 exception\"));\n+        assertNotNull(\"nestable exception(null, Throwable(\\\"ne6 exception\\\") cause is not null\", \n+            ne6.getCause()); \n+    }\n+\n+    /**\n+     * Tests the getThrowableCount() operation.\n+     */\n+    public void testGetThrowableCount()\n+    {\n+        Nestable ne1 = getNestable();\n+        assertEquals(\"ne1 throwable count\", 1, ne1.getThrowableCount());\n+\n+        Nestable ne2 = getNestable(\"ne2\");\n+        assertEquals(\"ne2 throwable count\", 1, ne2.getThrowableCount());\n+        \n+        Nestable ne3 = getNestable(getThrowable(\"ne3 exception\"));\n+        assertEquals(\"ne3 throwable count\", 2, ne3.getThrowableCount());\n+        \n+        Nestable ne4 = getNestable(\"ne4\", getThrowable(\"ne4 exception\"));\n+        assertEquals(\"ne4 throwable count\", 2, ne4.getThrowableCount());\n+        \n+        Nestable ne5 = getNestable(\"ne5\", (Throwable) null);\n+        assertEquals(\"ne 5 throwable count\", 1, ne5.getThrowableCount());\n+        \n+        Nestable ne6 = getNestable(null, getThrowable(\"ne6 exception\"));\n+        assertEquals(\"ne 6 throwable count\", 2, ne6.getThrowableCount());\n+        \n+        Nestable ne7 = getNestable(\"ne7o\", getNestable(\"ne7i\", getThrowable(\"ne7 exception\")));\n+        assertEquals(\"ne 7 throwable count\", 3, ne7.getThrowableCount());\n+\n+        Nestable ne8 = getNestable(\"level 1\", getNestable(\"level 2\", getNestable(getNestable(\"level 4\", getThrowable(\"level 5\")))));\n+        assertEquals(\"ne 8 throwable count\", 5, ne8.getThrowableCount());\n+    }\n+    \n+    /**\n+     * Tests the getMessage() operation.\n+     */\n+    public void testGetMessage()\n+    {\n+        Nestable ne1 = getNestable();\n+        assertNull(\"nestable exception() message is null\", ne1.getMessage()); \n+\n+        Nestable ne2 = getNestable(\"ne2\");\n+        assertNotNull(\"nestable exception(\\\"ne2\\\") message is not null\", ne2.getMessage());\n+        assertEquals(\"nestable exception(\\\"ne2\\\") message == ne2\", ne2.getMessage(), \"ne2\");\n+        \n+        Nestable ne3 = getNestable(getThrowable(\"ne3 exception\"));\n+        assertNotNull(\"nestable exception(Throwable(\\\"ne3 exception\\\") message is not null\",\n+            ne3.getMessage()); \n+        assertEquals(\"nestable exception(Throwable(\\\"ne3 exception\\\") message equals cause.toString()\",\n+            ne3.getMessage(), ne3.getCause().toString()); \n+        \n+        Nestable ne4 = getNestable(\"ne4\", getThrowable(\"ne4 exception\"));\n+        assertNotNull(\"nestable exception(\\\"ne4\\\", Throwable(\\\"ne4 exception\\\") message is not null\", \n+            ne4.getMessage()); \n+        assertEquals(\"nestable exception(\\\"ne4\\\", Throwable(\\\"ne4 exception\\\") message == ne4\", \n+            ne4.getMessage(), \"ne4\"); \n+        \n+        Nestable ne5 = getNestable(\"ne5\", (Throwable) null);\n+        assertNotNull(\"nestable exception(\\\"ne5\\\", null) message is not null\", \n+            ne5.getMessage()); \n+        assertEquals(\"nestable exception(\\\"ne5\\\", null) message == ne5\", \n+            ne5.getMessage(), \"ne5\"); \n+        \n+        Throwable t6 = getThrowable(\"ne6 exception\");\n+        Nestable ne6 = getNestable(null, t6);\n+        assertNotNull(\"nestable exception(null, Throwable(\\\"ne6 exception\\\") message is not null\",\n+            ne6.getMessage()); \n+        assertEquals(\"nestable exception(null, Throwable(\\\"ne6 exception\\\") message equals cause.toString()\",\n+            ne6.getMessage(), ne6.getCause().toString()); \n+        \n+        Nestable ne7 = getNestable(\"ne7o\", getNestable(\"ne7i\", getThrowable(\"ne7 exception\")));\n+        assertEquals(\"nestable exception(\\\"ne7o\\\", getNestable(\\\"ne7i\\\", Throwable(\\\"ne7 exception\\\"))) message is ne7o: ne7i: ne7 exception\",\n+            ne7.getMessage(), \"ne7o\");\n+\n+        Nestable ne8 = getNestable();\n+        assertNull(\"nestable exception() message is null\",\n+            ne8.getMessage());\n+\n+    }\n+\n+    /**\n+     * Tests the getMessage(int) operation.\n+     */\n+    public void testGetMessageI()\n+    {\n+        String[] msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        Nestable ne = getNestable(msgs[0], getNestable(msgs[1], getNestable(getNestable(msgs[3], getThrowable(msgs[4])))));\n+        for(int i = 0; i < msgs.length; i++)\n+        {\n+            assertEquals(\"message \" + i, msgs[i], ne.getMessage(i));\n+        }\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            String msg = ne.getMessage(-1);\n+            fail(\"getMessage(-1) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioode)\n+        {\n+        }\n+        try\n+        {\n+            String msg = ne.getMessage(msgs.length + 100);\n+            fail(\"getMessage(999) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioode)\n+        {\n+        }\n+    }\n+\n+    /**\n+     * Tests the getMessages() operation.\n+     */\n+    public void testGetMessages()\n+    {\n+        String[] msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        Nestable ne = getNestable(msgs[0], getNestable(msgs[1], getNestable(getNestable(msgs[3], getThrowable(msgs[4])))));\n+        String[] nMsgs = ne.getMessages();\n+        assertEquals(\"messages length\", msgs.length, nMsgs.length);\n+        for(int i = 0; i < nMsgs.length; i++)\n+        {\n+            assertEquals(\"message \" + i, msgs[i], nMsgs[i]);\n+        }\n+    }\n+\n+    /**\n+     * Tests the getThrowable(int) operation.\n+     */\n+    public void testGetThrowableI()\n+    {\n+        Nestable n = null;\n+        String msgs[] = null;\n+        Class[] throwables = null;\n+        \n+        msgs = new String[2];\n+        msgs[0] = null;\n+        msgs[1] = \"level 2\";\n+        throwables = new Class[2];\n+        throwables[0] = getTester1Class();\n+        throwables[1] = getThrowableClass();\n+        n = getTester1(getThrowable(msgs[1]));\n+        doNestableExceptionGetThrowableI(n, throwables, msgs);\n+ \n+        msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        throwables = new Class[5];\n+        throwables[0] = getTester1Class();\n+        throwables[1] = getTester2Class();\n+        throwables[2] = getTester1Class();\n+        throwables[3] = getTester2Class();\n+        throwables[4] = getThrowableClass();        \n+        n = getTester1(msgs[0], getTester2(msgs[1], getTester1(getTester2(msgs[3], getThrowable(msgs[4])))));\n+        doNestableExceptionGetThrowableI(n, throwables, msgs);\n+    }\n+    \n+    private void doNestableExceptionGetThrowableI(Nestable n, Class[] classes, String[] msgs)\n+    {\n+        Throwable t = null;\n+        String msg = null;\n+\n+        for(int i = 0; i < classes.length; i++)\n+        {\n+            t = n.getThrowable(i);\n+            assertEquals(\"throwable class\", classes[i], t.getClass());\n+            if(Nestable.class.isInstance(t))\n+            {\n+                msg = ((Nestable) t).getMessage(0);\n+            }\n+            else\n+            {\n+                msg = t.getMessage();\n+            }\n+            assertEquals(\"throwable message\", msgs[i], msg);\n+        }\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            t = n.getThrowable(-1);\n+            fail(\"getThrowable(-1) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioobe)\n+        {\n+        }\n+        try\n+        {\n+            t = n.getThrowable(999);\n+            fail(\"getThrowable(999) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioobe)\n+        {\n+        }\n+    }\n+\n+    /**\n+     * Tests the getThrowables() operation.\n+     */\n+    public void testGetThrowables()\n+    {\n+        Nestable n = null;\n+        String msgs[] = null;\n+        Class[] throwables = null;\n+        \n+        msgs = new String[2];\n+        msgs[0] = null;\n+        msgs[1] = \"level 2\";\n+        throwables = new Class[2];\n+        throwables[0] = getTester1Class();\n+        throwables[1] = getThrowableClass();\n+        n = getTester1(getThrowable(msgs[1]));\n+        doNestableExceptionGetThrowables(n, throwables, msgs);\n+ \n+        msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        throwables = new Class[5];\n+        throwables[0] = getTester1Class();\n+        throwables[1] = getTester2Class();\n+        throwables[2] = getTester1Class();\n+        throwables[3] = getTester2Class();\n+        throwables[4] = getThrowableClass();\n+        n = getTester1(msgs[0], getTester2(msgs[1], getTester1(getTester2(msgs[3], getThrowable(msgs[4])))));\n+        doNestableExceptionGetThrowables(n, throwables, msgs);\n+    }\n+    \n+    private void doNestableExceptionGetThrowables(Nestable n, Class[] classes, String[] msgs)\n+    {\n+        String msg = null;\n+\n+        Throwable throwables[] = n.getThrowables();\n+        assertEquals(\"throwables length\", classes.length, throwables.length);\n+        for(int i = 0; i < classes.length; i++)\n+        {\n+            assertEquals(\"throwable class\", classes[i], throwables[i].getClass());\n+            Throwable t = throwables[i];\n+            if(Nestable.class.isInstance(t))\n+            {\n+                msg = ((Nestable) t).getMessage(0);\n+            }\n+            else\n+            {\n+                msg = t.getMessage();\n+            }\n+            assertEquals(\"throwable message\", msgs[i], msg);\n+        }\n+    }\n+\n+    /**\n+     * Tests the indexOfThrowable() operation.\n+     */\n+    public void testIndexOfThrowable()\n+    {\n+        Nestable n = null;\n+        String msgs[] = null;\n+        Class[] throwables = null;\n+        \n+        msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        throwables = new Class[5];\n+        throwables[0] = getTester1Class();\n+        throwables[1] = getTester2Class();\n+        throwables[2] = getTester1Class();\n+        throwables[3] = getTester2Class();\n+        throwables[4] = getThrowableClass();\n+        int[] indexes = {0, 1, 0, 1, 4};\n+        n = getTester1(msgs[0], getTester2(msgs[1], getTester1(getTester2(msgs[3], getThrowable(msgs[4])))));\n+        for(int i = 0; i < throwables.length; i++)\n+        {\n+            doNestableExceptionIndexOfThrowable(n, throwables[i], indexes[i], msgs[indexes[i]]);\n+        }\n+        doNestableExceptionIndexOfThrowable(n, getBaseThrowableClass(), 0, msgs[0]);\n+        doNestableExceptionIndexOfThrowable(n, java.util.Date.class, -1, null);\n+        doNestableExceptionIndexOfThrowable(n, null, -1, null);\n+    }\n+    \n+    private void doNestableExceptionIndexOfThrowable(Nestable n, Class type, int expectedIndex, String expectedMsg)\n+    {\n+        Throwable t = null;\n+        \n+        int index = n.indexOfThrowable(type);\n+        assertEquals(\"index of throwable \" + (type == null ? \"null\" : type.getName()), expectedIndex, index);\n+        if(expectedIndex > -1)\n+        {\n+            t = n.getThrowable(index);\n+            if(expectedMsg != null)\n+            {\n+                String msg = null;\n+                if(Nestable.class.isInstance(t))\n+                {\n+                    msg = ((Nestable) t).getMessage(0);\n+                }\n+                else\n+                {\n+                    msg = t.getMessage();\n+                }\n+                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Tests the indexOfThrowable(int) operation.\n+     */\n+    public void testIndexOfThrowableI()\n+    {\n+        Nestable n = null;\n+        String msgs[] = null;\n+        Class[] throwables = null;\n+        \n+        msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        throwables = new Class[5];\n+        throwables[0] = getTester1Class();\n+        throwables[1] = getTester2Class();\n+        throwables[2] = getTester1Class();\n+        throwables[3] = getTester2Class();\n+        throwables[4] = getThrowableClass();\n+        int[] indexes = {0, 1, 0, 1, 4};\n+        n = getTester1(msgs[0], getTester2(msgs[1], getTester1(getTester2(msgs[3], getThrowable(msgs[4])))));\n+        for(int i = 0; i < throwables.length; i++)\n+        {\n+            doNestableExceptionIndexOfThrowableI(n, throwables[i], 0, indexes[i], msgs[indexes[i]]);\n+        }\n+        doNestableExceptionIndexOfThrowableI(n, getTester2Class(), 2, 3, msgs[3]);\n+        doNestableExceptionIndexOfThrowableI(n, getTester1Class(), 1, 2, msgs[2]);\n+        doNestableExceptionIndexOfThrowableI(n, getTester1Class(), 3, -1, null);\n+        doNestableExceptionIndexOfThrowableI(n, getTester1Class(), 4, -1, null);\n+        doNestableExceptionIndexOfThrowableI(n, getThrowableClass(), 2, 4, msgs[4]);\n+        doNestableExceptionIndexOfThrowableI(n, java.util.Date.class, 0, -1, null);\n+        doNestableExceptionIndexOfThrowableI(n, null, 0, -1, null);\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            int index = n.indexOfThrowable(getTester1Class(), -1);\n+            fail(\"method should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException iooob)\n+        {\n+        }\n+        try\n+        {\n+            int index = n.indexOfThrowable(getTester1Class(), 5);\n+            fail(\"method should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException iooob)\n+        {\n+        }\n+        \n+    }\n+\n+    private void doNestableExceptionIndexOfThrowableI(Nestable n, Class type, int fromIndex, int expectedIndex, String expectedMsg)\n+    {\n+        Throwable t = null;\n+        \n+        int index = n.indexOfThrowable(type, fromIndex);\n+        assertEquals(\"index of throwable \" + (type == null ? \"null\" : type.getName()), expectedIndex, index);\n+        if(expectedIndex > -1)\n+        {\n+            t = n.getThrowable(index);\n+            if(expectedMsg != null)\n+            {\n+                String msg = null;\n+                if(Nestable.class.isInstance(t))\n+                {\n+                    msg = ((Nestable) t).getMessage(0);\n+                }\n+                else\n+                {\n+                    msg = t.getMessage();\n+                }\n+                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n+            }\n+        }\n+        \n+    }\n+\n+    /**\n+     * Tests the printPartialStackTrace() operation.\n+     */\n+    public void testPrintPartialStackTrace()\n+    {\n+        Nestable ne9 = getNestable(\"ne9\", getThrowable(\"ne9 exception\"));\n+        ByteArrayOutputStream baos2 = new ByteArrayOutputStream();\n+        PrintStream ps2 = new PrintStream(baos2);\n+        PrintWriter pw2 = new PrintWriter(ps2, true);\n+        ne9.printPartialStackTrace(pw2);\n+        String stack2 = baos2.toString();\n+        String startsWith = ne9.getClass().getName() + \": ne9\";\n+        assertTrue(\"stack trace startsWith == \" + startsWith,\n+            stack2.startsWith(startsWith));\n+        assertEquals(\"stack trace indexOf rethrown == -1\",\n+            stack2.indexOf(\"rethrown\"), -1);\n+    }\n+\n+    /**\n+     * Tests the printStackTrace() operation.\n+     */\n+    public void testPrintStackTrace()\n+    {\n+        Nestable ne8 = getNestable(\"ne8\", getThrowable(\"ne8 exception\"));\n+        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();\n+        PrintStream ps1 = new PrintStream(baos1);\n+        PrintWriter pw1 = new PrintWriter(ps1, true);\n+        ne8.printStackTrace(pw1);\n+        String stack1 = baos1.toString();\n+        String startsWith = ne8.getClass().getName() + \": ne8\";\n+        assertTrue(\"stack trace startsWith == \" + startsWith,\n+            stack1.startsWith(startsWith));\n+        String indexOf = getThrowableClass().getName() + \": ne8 exception\";\n+        assertTrue(\"stack trace indexOf \" + indexOf + \" > -1\",\n+            stack1.indexOf(indexOf) > -1); \n+    }\n+\n+    /**\n+     * Returns an instance of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @return the instance\n+     */\n+    public abstract Nestable getNestable();\n+    \n+    /**\n+     * Returns an instance of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @param n <code>Nestable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getNestable(Nestable n);\n+    \n+    /**\n+     * Returns an instance of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getNestable(String msg);\n+    \n+    /**\n+     * Returns an instance of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @param n <code>Nestable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getNestable(String msg, Nestable n);\n+    \n+    /**\n+     * Returns an instance of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @param t <code>Throwable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getNestable(String msg, Throwable t);\n+    \n+    /**\n+     * Returns an instance of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @param t <code>Throwable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getNestable(Throwable t);\n+    \n+    /**\n+     * Returns an instance of a <code>Throwable</code> to be used in\n+     * constructing instances of the <code>Nestable</code> implementation being\n+     * tested.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Throwable getThrowable(String msg);\n+\n+    /**\n+     * Returns an instance of one tester <code>Nestable</code> implementation.\n+     *\n+     * @param n <code>Nestable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getTester1(Nestable n);\n+    \n+    /**\n+     * Returns an instance of one tester <code>Nestable</code> implementation.\n+     *\n+     * @param t <code>Throwable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getTester1(Throwable t);\n+    \n+    /**\n+     * Returns an instance of one tester <code>Nestable</code> implementation.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @param n <code>Nestable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getTester1(String msg, Nestable n);\n+    \n+    /**\n+     * Returns an instance of one tester <code>Nestable</code> implementation.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @param t <code>Throwable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getTester1(String msg, Throwable t);\n+    \n+    /**\n+     * Returns an instance of a second tester <code>Nestable</code>\n+     * implementation.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @param n <code>Nestable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getTester2(String msg, Nestable n);\n+    \n+    /**\n+     * Returns an instance of a second tester <code>Nestable</code>\n+     * implementation.\n+     *\n+     * @param msg <code>String</code> argument to be provided to the instance\n+     * constructor\n+     * @param t <code>Throwable</code> argument to be provided to the instance\n+     * constructor\n+     * @return the instance\n+     */\n+    public abstract Nestable getTester2(String msg, Throwable t);\n+\n+    /**\n+     * Returns the class of the first tester <code>Nestable</code>\n+     * implementation.\n+     *\n+     * @return the class\n+     */\n+    public abstract Class getTester1Class();\n+    \n+    /**\n+     * Returns the class of the second tester <code>Nestable</code>\n+     * implementation.\n+     *\n+     * @return the class\n+     */\n+    public abstract Class getTester2Class();\n+\n+    /**\n+     * Returns the class of the <code>Throwable</code> used in constructing\n+     * instances of the <code>Nestable</code> implementation being tested.\n+     *\n+     * @return the class\n+     */\n+    public abstract Class getThrowableClass();\n+\n+    /**\n+     * Returns the base class being used, typically Error, Eception or RuntimeException.\n+     *\n+     * @return the class\n+     */\n+    public abstract Class getBaseThrowableClass();\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/exception/ExceptionUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.exception;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Modifier;\n+import java.sql.SQLException;\n+import java.util.List;\n+\n+import junit.framework.Assert;\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.lang.SystemUtils;\n+\n+/**\n+ * Tests {@link org.apache.commons.lang.exception.ExceptionUtils}.\n+ * \n+ * <h3>Notes</h3>\n+ * <p>\n+ * Make sure this exception code does not depend on Java 1.4 nested exceptions. SVN revision 38990 does not compile with\n+ * Java 1.3.1.\n+ * </p>\n+ * <ul>\n+ * <li>Compiled with Sun Java 1.3.1_15</li>\n+ * <li>Tested with Sun Java 1.3.1_15</li>\n+ * <li>Tested with Sun Java 1.4.2_12</li>\n+ * <li>Tested with Sun Java 1.5.0_08</li>\n+ * <li>All of the above on Windows XP SP2 + patches.</li>\n+ * </ul>\n+ * <p>\n+ * Gary Gregory; August 16, 2006.\n+ * </p>\n+ * \n+ * @author Daniel L. Rall\n+ * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n+ * @author Stephen Colebourne\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @since 1.0\n+ */\n+public class ExceptionUtilsTestCase extends junit.framework.TestCase {\n+    \n+    private NestableException nested;\n+    private Throwable withCause;\n+    private Throwable withoutCause;\n+    private Throwable jdkNoCause;\n+    private ExceptionWithCause selfCause;\n+    private ExceptionWithCause cyclicCause;\n+\n+    public ExceptionUtilsTestCase(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(ExceptionUtilsTestCase.class);\n+    }\n+\n+    public void setUp() {\n+        withoutCause = createExceptionWithoutCause();\n+        nested = new NestableException(withoutCause);\n+        withCause = new ExceptionWithCause(nested);\n+        jdkNoCause = new NullPointerException();\n+        selfCause = new ExceptionWithCause(null);\n+        selfCause.setCause(selfCause);\n+        ExceptionWithCause a = new ExceptionWithCause(null);\n+        ExceptionWithCause b = new ExceptionWithCause(a);\n+        a.setCause(b);\n+        cyclicCause = new ExceptionWithCause(a);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        withoutCause = null;\n+        nested = null;\n+        withCause = null;\n+        jdkNoCause = null;\n+        selfCause = null;\n+        cyclicCause = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private Throwable createExceptionWithoutCause() {\n+        try {\n+            throw new ExceptionWithoutCause();\n+        } catch (Throwable t) {\n+            return t;\n+        }\n+    }\n+\n+    private Throwable createExceptionWithCause() {\n+        try {\n+            try {\n+                throw new ExceptionWithCause(createExceptionWithoutCause());\n+            } catch (Throwable t) {\n+                throw new ExceptionWithCause(t);\n+            }\n+        } catch (Throwable t) {\n+            return t;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    \n+    public void testConstructor() {\n+        assertNotNull(new ExceptionUtils());\n+        Constructor[] cons = ExceptionUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(ExceptionUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(ExceptionUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    \n+    public void testCauseMethodNameOps() {\n+        this.testCauseMethodNameOps(null);\n+        this.testCauseMethodNameOps(\"\");\n+        this.testCauseMethodNameOps(\" \");\n+        this.testCauseMethodNameOps(\"\\t\\r\\n\\t\");\n+        this.testCauseMethodNameOps(\"testMethodName\");\n+    }\n+    \n+    void testCauseMethodNameOps(String name) {\n+        String methodName = \"testMethodName\";\n+        try {\n+            Assert.assertFalse(ExceptionUtils.isCauseMethodName(methodName));\n+            ExceptionUtils.addCauseMethodName(methodName);            \n+            ExceptionUtils.addCauseMethodName(methodName);            \n+            Assert.assertTrue(ExceptionUtils.isCauseMethodName(methodName));\n+        } finally {\n+            ExceptionUtils.removeCauseMethodName(methodName);\n+            Assert.assertFalse(\n+                    \"The method name \" + methodName + \" should not be in the array\", \n+                    ExceptionUtils.isCauseMethodName(methodName));\n+        }\n+    }\n+    \n+    public void testGetCause_Throwable() {\n+        assertSame(null, ExceptionUtils.getCause(null));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause));\n+        assertSame(withoutCause, ExceptionUtils.getCause(nested));\n+        assertSame(nested, ExceptionUtils.getCause(withCause));\n+        assertSame(null, ExceptionUtils.getCause(jdkNoCause));\n+        assertSame(selfCause, ExceptionUtils.getCause(selfCause));\n+        assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(cyclicCause));\n+        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getCause(cyclicCause.getCause()));\n+        assertSame(cyclicCause.getCause(), ExceptionUtils.getCause(((ExceptionWithCause) cyclicCause.getCause()).getCause()));\n+    }\n+\n+    public void testGetCause_ThrowableArray() {\n+        assertSame(null, ExceptionUtils.getCause(null, null));\n+        assertSame(null, ExceptionUtils.getCause(null, new String[0]));\n+\n+        // match because known type        \n+        assertSame(withoutCause, ExceptionUtils.getCause(nested, null));\n+        assertSame(withoutCause, ExceptionUtils.getCause(nested, new String[0]));\n+        assertSame(withoutCause, ExceptionUtils.getCause(nested, new String[] {\"getCause\"}));\n+        \n+        // not known type, so match on supplied method names\n+        assertSame(nested, ExceptionUtils.getCause(withCause, null));  // default names\n+        assertSame(null, ExceptionUtils.getCause(withCause, new String[0]));\n+        assertSame(null, ExceptionUtils.getCause(withCause, new String[] {null}));\n+        assertSame(nested, ExceptionUtils.getCause(withCause, new String[] {\"getCause\"}));\n+        \n+        // not known type, so match on supplied method names\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, null));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0]));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {null}));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {\"getCause\"}));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {\"getTargetException\"}));\n+    }\n+\n+    public void testGetRootCause_Throwable() {\n+        assertSame(null, ExceptionUtils.getRootCause(null));\n+        assertSame(null, ExceptionUtils.getRootCause(withoutCause));\n+        assertSame(withoutCause, ExceptionUtils.getRootCause(nested));\n+        assertSame(withoutCause, ExceptionUtils.getRootCause(withCause));\n+        assertSame(null, ExceptionUtils.getRootCause(jdkNoCause));\n+        assertSame(null, ExceptionUtils.getRootCause(selfCause));\n+        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), ExceptionUtils.getRootCause(cyclicCause));\n+    }\n+\n+    public void testSetCause() {\n+        Exception cause = new ExceptionWithoutCause();\n+        assertEquals(true, ExceptionUtils.setCause(new ExceptionWithCause(null), cause));\n+        if (SystemUtils.isJavaVersionAtLeast(140)) {\n+            assertEquals(true, ExceptionUtils.setCause(new ExceptionWithoutCause(), cause));\n+        }\n+    }\n+\n+    /**\n+     * Tests overriding a cause to <code>null</code>.\n+     */\n+    public void testSetCauseToNull() {\n+        Exception ex = new ExceptionWithCause(new IOException());\n+        assertEquals(true, ExceptionUtils.setCause(ex, new IllegalStateException()));\n+        assertNotNull(ExceptionUtils.getCause(ex));\n+        assertEquals(true, ExceptionUtils.setCause(ex, null));\n+        assertNull(ExceptionUtils.getCause(ex));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsThrowableNested() {\n+        if (SystemUtils.isJavaVersionAtLeast(140)) {\n+            assertEquals(true, ExceptionUtils.isThrowableNested());\n+        } else {\n+            assertEquals(false, ExceptionUtils.isThrowableNested());\n+        }\n+    }\n+    \n+    public void testIsNestedThrowable_Throwable() {\n+        assertEquals(true, ExceptionUtils.isNestedThrowable(new SQLException()));\n+        assertEquals(true, ExceptionUtils.isNestedThrowable(new InvocationTargetException(new Exception())));\n+        assertEquals(true, ExceptionUtils.isNestedThrowable(new NestableRuntimeException()));\n+        assertEquals(true, ExceptionUtils.isNestedThrowable(withCause));\n+        assertEquals(true, ExceptionUtils.isNestedThrowable(nested));\n+        if (SystemUtils.isJavaVersionAtLeast(140)) {\n+            assertEquals(true, ExceptionUtils.isNestedThrowable(withoutCause));\n+            assertEquals(true, ExceptionUtils.isNestedThrowable(new Throwable()));\n+        } else {\n+            assertEquals(false, ExceptionUtils.isNestedThrowable(withoutCause));\n+            assertEquals(false, ExceptionUtils.isNestedThrowable(new Throwable()));\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetThrowableCount_Throwable() {\n+        assertEquals(0, ExceptionUtils.getThrowableCount(null));\n+        assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause));\n+        assertEquals(2, ExceptionUtils.getThrowableCount(nested));\n+        assertEquals(3, ExceptionUtils.getThrowableCount(withCause));\n+        assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause));\n+        assertEquals(1, ExceptionUtils.getThrowableCount(selfCause));\n+        assertEquals(3, ExceptionUtils.getThrowableCount(cyclicCause));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetThrowables_Throwable_null() {\n+        assertEquals(0, ExceptionUtils.getThrowables(null).length);\n+    }\n+\n+    public void testGetThrowables_Throwable_withoutCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(withoutCause);\n+        assertEquals(1, throwables.length);\n+        assertSame(withoutCause, throwables[0]);\n+    }\n+\n+    public void testGetThrowables_Throwable_nested() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(nested);\n+        assertEquals(2, throwables.length);\n+        assertSame(nested, throwables[0]);\n+        assertSame(withoutCause, throwables[1]);\n+    }\n+\n+    public void testGetThrowables_Throwable_withCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(withCause);\n+        assertEquals(3, throwables.length);\n+        assertSame(withCause, throwables[0]);\n+        assertSame(nested, throwables[1]);\n+        assertSame(withoutCause, throwables[2]);\n+    }\n+\n+    public void testGetThrowables_Throwable_jdkNoCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(jdkNoCause);\n+        assertEquals(1, throwables.length);\n+        assertSame(jdkNoCause, throwables[0]);\n+    }\n+\n+    public void testGetThrowables_Throwable_selfCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(selfCause);\n+        assertEquals(1, throwables.length);\n+        assertSame(selfCause, throwables[0]);\n+    }\n+\n+    public void testGetThrowables_Throwable_recursiveCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(cyclicCause);\n+        assertEquals(3, throwables.length);\n+        assertSame(cyclicCause, throwables[0]);\n+        assertSame(cyclicCause.getCause(), throwables[1]);\n+        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables[2]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetThrowableList_Throwable_null() {\n+        List throwables = ExceptionUtils.getThrowableList(null);\n+        assertEquals(0, throwables.size());\n+    }\n+\n+    public void testGetThrowableList_Throwable_withoutCause() {\n+        List throwables = ExceptionUtils.getThrowableList(withoutCause);\n+        assertEquals(1, throwables.size());\n+        assertSame(withoutCause, throwables.get(0));\n+    }\n+\n+    public void testGetThrowableList_Throwable_nested() {\n+        List throwables = ExceptionUtils.getThrowableList(nested);\n+        assertEquals(2, throwables.size());\n+        assertSame(nested, throwables.get(0));\n+        assertSame(withoutCause, throwables.get(1));\n+    }\n+\n+    public void testGetThrowableList_Throwable_withCause() {\n+        List throwables = ExceptionUtils.getThrowableList(withCause);\n+        assertEquals(3, throwables.size());\n+        assertSame(withCause, throwables.get(0));\n+        assertSame(nested, throwables.get(1));\n+        assertSame(withoutCause, throwables.get(2));\n+    }\n+\n+    public void testGetThrowableList_Throwable_jdkNoCause() {\n+        List throwables = ExceptionUtils.getThrowableList(jdkNoCause);\n+        assertEquals(1, throwables.size());\n+        assertSame(jdkNoCause, throwables.get(0));\n+    }\n+\n+    public void testGetThrowableList_Throwable_selfCause() {\n+        List throwables = ExceptionUtils.getThrowableList(selfCause);\n+        assertEquals(1, throwables.size());\n+        assertSame(selfCause, throwables.get(0));\n+    }\n+\n+    public void testGetThrowableList_Throwable_recursiveCause() {\n+        List throwables = ExceptionUtils.getThrowableList(cyclicCause);\n+        assertEquals(3, throwables.size());\n+        assertSame(cyclicCause, throwables.get(0));\n+        assertSame(cyclicCause.getCause(), throwables.get(1));\n+        assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIndexOf_ThrowableClass() {\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class));\n+        assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class));\n+        assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class));\n+        assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class));\n+    }\n+\n+    public void testIndexOf_ThrowableClassInt() {\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0));\n+        assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));\n+        assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0));\n+        assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0));\n+\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIndexOfType_ThrowableClass() {\n+        assertEquals(-1, ExceptionUtils.indexOfType(null, null));\n+        assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class));\n+        assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(nested, null));\n+        assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class));\n+        assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class));\n+        assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));\n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class));\n+        assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class));\n+        assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class));\n+        \n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class));\n+    }\n+\n+    public void testIndexOfType_ThrowableClassInt() {\n+        assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0));\n+        assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0));\n+        assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0));\n+        assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));\n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));\n+        assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0));\n+        assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0));\n+\n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1));\n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9));\n+        \n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrintRootCauseStackTrace_Throwable() throws Exception {\n+        ExceptionUtils.printRootCauseStackTrace(null);\n+        // could pipe system.err to a known stream, but not much point as\n+        // internally this method calls stram method anyway\n+    }\n+    \n+    public void testPrintRootCauseStackTrace_ThrowableStream() throws Exception {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\n+        ExceptionUtils.printRootCauseStackTrace(null, (PrintStream) null);\n+        ExceptionUtils.printRootCauseStackTrace(null, new PrintStream(out));\n+        assertEquals(0, out.toString().length());\n+        \n+        out = new ByteArrayOutputStream(1024);\n+        try {\n+            ExceptionUtils.printRootCauseStackTrace(withCause, (PrintStream) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        \n+        out = new ByteArrayOutputStream(1024);\n+        Throwable withCause = createExceptionWithCause();\n+        ExceptionUtils.printRootCauseStackTrace(withCause, new PrintStream(out));\n+        String stackTrace = out.toString();\n+        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);\n+        \n+        out = new ByteArrayOutputStream(1024);\n+        ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintStream(out));\n+        stackTrace = out.toString();\n+        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);\n+    }\n+\n+    public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception {\n+        StringWriter writer = new StringWriter(1024);\n+        ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null);\n+        ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer));\n+        assertEquals(0, writer.getBuffer().length());\n+        \n+        writer = new StringWriter(1024);\n+        try {\n+            ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        \n+        writer = new StringWriter(1024);\n+        Throwable withCause = createExceptionWithCause();\n+        ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer));\n+        String stackTrace = writer.toString();\n+        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);\n+        \n+        writer = new StringWriter(1024);\n+        ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer));\n+        stackTrace = writer.toString();\n+        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetRootCauseStackTrace_Throwable() throws Exception {\n+        assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length);\n+        \n+        Throwable withCause = createExceptionWithCause();\n+        String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause);\n+        boolean match = false;\n+        for (int i = 0; i < stackTrace.length; i++) {\n+            if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) {\n+                match = true;\n+                break;\n+            }\n+        }\n+        assertEquals(true, match);\n+        \n+        stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause);\n+        match = false;\n+        for (int i = 0; i < stackTrace.length; i++) {\n+            if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) {\n+                match = true;\n+                break;\n+            }\n+        }\n+        assertEquals(false, match);\n+    }\n+\n+    public void testRemoveCommonFrames_ListList() throws Exception {\n+        try {\n+            ExceptionUtils.removeCommonFrames(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+    }\n+\n+    public void test_getMessage_Throwable() {\n+        Throwable th = null;\n+        assertEquals(\"\", ExceptionUtils.getMessage(th));\n+        \n+        th = new IllegalArgumentException(\"Base\");\n+        assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getMessage(th));\n+        \n+        th = new ExceptionWithCause(\"Wrapper\", th);\n+        assertEquals(\"ExceptionUtilsTestCase.ExceptionWithCause: Wrapper\", ExceptionUtils.getMessage(th));\n+    }\n+\n+    public void test_getRootCauseMessage_Throwable() {\n+        Throwable th = null;\n+        assertEquals(\"\", ExceptionUtils.getRootCauseMessage(th));\n+        \n+        th = new IllegalArgumentException(\"Base\");\n+        assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getRootCauseMessage(th));\n+        \n+        th = new ExceptionWithCause(\"Wrapper\", th);\n+        assertEquals(\"IllegalArgumentException: Base\", ExceptionUtils.getRootCauseMessage(th));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Provides a method with a well known chained/nested exception\n+     * name which matches the full signature (e.g. has a return value\n+     * of <code>Throwable</code>.\n+     */\n+    private static class ExceptionWithCause extends Exception {\n+        private Throwable cause;\n+\n+        public ExceptionWithCause(String str, Throwable cause) {\n+            super(str);\n+            setCause(cause);\n+        }\n+\n+        public ExceptionWithCause(Throwable cause) {\n+            super();\n+            setCause(cause);\n+        }\n+\n+        public Throwable getCause() {\n+            return cause;\n+        }\n+\n+        public void setCause(Throwable cause) {\n+            this.cause = cause;\n+        }\n+    }\n+\n+    /**\n+     * Provides a method with a well known chained/nested exception\n+     * name which does not match the full signature (e.g. lacks a\n+     * return value of <code>Throwable</code>.\n+     */\n+    private static class ExceptionWithoutCause extends Exception {\n+        public void getTargetException() {\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/exception/NestableDelegateTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.exception;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.EOFException;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.io.PrintWriter;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests the org.apache.commons.lang.exception.NestableDelegate class.\n+ *\n+ * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n+ * @author Daniel L. Rall\n+ * @version $Id$\n+ */\n+public class NestableDelegateTestCase extends junit.framework.TestCase {\n+    private static final String CONSTRUCTOR_FAILED_MSG = \n+    \"The Nestable implementation passed to the NestableDelegate(Nestable) constructor must extend java.lang.Throwable\";\n+\n+    private static final String PARTIAL_STACK_TRACE =\n+        \"ThrowableNestedNestable partial stack trace place-holder\";\n+\n+    protected String lineSeparator;\n+\n+    /**\n+     * Construct a new instance of NestableDelegateTestCase with the specified name\n+     */\n+    public NestableDelegateTestCase(String name)\n+    {\n+        super(name);\n+    }\n+\n+    /**\n+     * Set up instance variables required by this test case.\n+     */\n+    public void setUp()\n+    {\n+        lineSeparator = System.getProperty(\"line.separator\");\n+    }\n+    \n+    public static Test suite()\n+    {\n+        return new TestSuite(NestableDelegateTestCase.class);\n+    }\n+    \n+    /**\n+     * Tear down instance variables required by this test case.\n+     */\n+    public void tearDown()\n+    {\n+        lineSeparator = null;\n+    }\n+    \n+    /**\n+     * Test the implementation\n+     */\n+    public void testNestableDelegateConstructor()\n+    {\n+        String msg = null;\n+        boolean constructorFailed = false;\n+        try\n+        {\n+            NestableDelegate nonThrowableCause = new NestableDelegate(new NonThrowableNestable());\n+        }\n+        catch(IllegalArgumentException iae)\n+        {\n+            constructorFailed = true;\n+            msg = iae.getMessage();\n+        }\n+        assertTrue(\"nestable delegate constructor with non-throwable cause failed == true\", constructorFailed);\n+        assertTrue(\"constructor failed exception msg == \" + CONSTRUCTOR_FAILED_MSG,\n+            msg.equals(CONSTRUCTOR_FAILED_MSG));\n+\n+        constructorFailed = false;\n+        try\n+        {\n+            NestableDelegate nd1 = new NestableDelegate(new ThrowableNestable());\n+        }\n+        catch(IllegalArgumentException iae)\n+        {\n+            constructorFailed = true;\n+        }\n+        assertTrue(\"nestable delegate constructor with throwable cause failed == false\", !constructorFailed);\n+    }\n+\n+    public void testNestableDelegateGetMessage()\n+    {\n+        Nestable ne1 = new ThrowableNestable();\n+        assertTrue(\"ThrowableNestable ne1 getMessage() == ThrowableNestable exception\",\n+            ne1.getMessage().equals(\"ThrowableNestable exception\"));\n+        NestableDelegate nd1 = new NestableDelegate(ne1);\n+        assertTrue(\"nd1 getMessage() == \" + ne1.getCause().getMessage(),\n+            nd1.getMessage(\"base\").equals(\"base: \" + ne1.getCause().getMessage()));\n+        \n+        Nestable ne2 = new ThrowableNestedNestable(new Exception(\"nested exception 2\"));\n+        NestableDelegate nd2 = new NestableDelegate(ne2);\n+        assertTrue(\"nd2 getMessage() == base: \" + ne2.getCause().getMessage(),\n+            nd2.getMessage(\"base\").equals(\"base: \" + ne2.getCause().getMessage()));\n+    }\n+\n+    public void testNestableDelegateGetThrowableCount()\n+    {\n+        Nestable n = null;\n+        NestableDelegate d = null;\n+        \n+        n = new NestableDelegateTester1();\n+        d = new NestableDelegate(n);\n+        doNestableDelegateGetThrowableCount(d, 1);\n+        \n+        n = new NestableDelegateTester1(\"level 1\");\n+        d = new NestableDelegate(n);\n+        doNestableDelegateGetThrowableCount(d, 1);\n+        \n+        n = new NestableDelegateTester1(new Exception());\n+        d = new NestableDelegate(n);\n+        doNestableDelegateGetThrowableCount(d, 2);\n+        \n+        n = new NestableDelegateTester1(new Exception(\"level 2\"));\n+        d = new NestableDelegate(n);\n+        doNestableDelegateGetThrowableCount(d, 2);\n+        \n+        n = new NestableDelegateTester1(\"level 1\", \n+                new NestableDelegateTester2(\"level 2\", \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(\"level 4\", \n+                            new Exception(\"level 5\")\n+                        )\n+                    )\n+                )\n+            );\n+        d = new NestableDelegate(n);\n+        doNestableDelegateGetThrowableCount(d, 5);\n+    }\n+\n+    private void doNestableDelegateGetThrowableCount(NestableDelegate d, int len)\n+    {\n+        // Compare the lengths\n+        assertEquals(\"delegate length\", len, d.getThrowableCount());\n+    }\n+    \n+    public void testNestableDelegateGetMessages()\n+    {\n+        Nestable n = null;\n+        NestableDelegate d = null;\n+        String msgs[] = null;\n+        \n+        msgs = new String[1];\n+        n = new NestableDelegateTester1();\n+        d = new NestableDelegate(n);        \n+        doNestableDelegateGetMessages(d, msgs);\n+        \n+        msgs = new String[1];\n+        msgs[0] = \"level 1\";\n+        n = new NestableDelegateTester1(msgs[0]);\n+        d = new NestableDelegate(n);\n+        doNestableDelegateGetMessages(d, msgs);\n+\n+        msgs = new String[2];\n+        n = new NestableDelegateTester1(new Exception());\n+        d = new NestableDelegate(n);\n+        doNestableDelegateGetMessages(d, msgs);\n+\n+        msgs = new String[2];\n+        msgs[0] = null;\n+        msgs[1] = \"level 2\";\n+        n = new NestableDelegateTester1(new Exception(msgs[1]));\n+        d = new NestableDelegate(n);\n+        doNestableDelegateGetMessages(d, msgs);\n+ \n+        msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        n = new NestableDelegateTester1(msgs[0], \n+                new NestableDelegateTester2(msgs[1], \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(msgs[3], \n+                            new Exception(msgs[4])\n+                        )\n+                    )\n+                )\n+            );\n+        d = new NestableDelegate(n);\n+        doNestableDelegateGetMessages(d, msgs);\n+    }\n+\n+    private void doNestableDelegateGetMessages(NestableDelegate d, String[] nMsgs)\n+    {\n+        // Compare the messages\n+        String[] dMsgs = d.getMessages();\n+        assertEquals(\"messages length\", nMsgs.length, dMsgs.length);\n+        for(int i = 0; i < nMsgs.length; i++)\n+        {\n+            assertEquals(\"message \" + i, nMsgs[i], dMsgs[i]);\n+        }\n+    }\n+    \n+    public void testGetMessageString()\n+    {\n+        NestableDelegateTester1 ndt1 = new NestableDelegateTester1 (new NullPointerException ());\n+        NestableDelegate nd = new NestableDelegate (ndt1);\n+        assertNull (nd.getMessage((String)null));\n+        \n+        ndt1 = new NestableDelegateTester1 (new NullPointerException (\"null pointer\"));\n+        nd = new NestableDelegate (ndt1);\n+        assertNotNull(nd.getMessage((String)null));\n+        \n+        ndt1 = new NestableDelegateTester1 ();\n+        nd = new NestableDelegate (ndt1);\n+        assertNull(nd.getMessage((String)null));\n+        \n+        ndt1 = new NestableDelegateTester1 (\"root\");\n+        nd = new NestableDelegate (ndt1);\n+        assertNull(nd.getMessage((String)null));\n+    }\n+\n+    public void testNestableDelegateGetMessageN()\n+    {\n+        Nestable n = null;\n+        NestableDelegate d = null;\n+        String[] msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        n = new NestableDelegateTester1(msgs[0], \n+                new NestableDelegateTester2(msgs[1], \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(msgs[3], \n+                            new Exception(msgs[4])\n+                        )\n+                    )\n+                )\n+            );\n+        d = new NestableDelegate(n);\n+        for(int i = 0; i < msgs.length; i++)\n+        {\n+            assertEquals(\"message \" + i, msgs[i], d.getMessage(i));\n+        }\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            String msg = d.getMessage(-1);\n+            fail(\"getMessage(-1) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioode)\n+        {\n+        }\n+        try\n+        {\n+            String msg = d.getMessage(msgs.length + 100);\n+            fail(\"getMessage(999) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioode)\n+        {\n+        }\n+    }\n+\n+    public void testNestableDelegateGetThrowableN()\n+    {\n+        Nestable n = null;\n+        NestableDelegate d = null;\n+        String msgs[] = null;\n+        Class[] throwables = null;\n+        \n+        msgs = new String[2];\n+        msgs[0] = null;\n+        msgs[1] = \"level 2\";\n+        throwables = new Class[2];\n+        throwables[0] = NestableDelegateTester1.class;\n+        throwables[1] = Exception.class;\n+        n = new NestableDelegateTester1(new Exception(msgs[1]));\n+        d = new NestableDelegate(n);\n+        doNestableDelegateGetThrowableN(d, throwables, msgs);\n+ \n+        msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        throwables = new Class[5];\n+        throwables[0] = NestableDelegateTester1.class;\n+        throwables[1] = NestableDelegateTester2.class;\n+        throwables[2] = NestableDelegateTester1.class;\n+        throwables[3] = NestableDelegateTester2.class;\n+        throwables[4] = Exception.class;        \n+        n = new NestableDelegateTester1(msgs[0], \n+                new NestableDelegateTester2(msgs[1], \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(msgs[3], \n+                            new Exception(msgs[4])\n+                            )\n+                        )\n+                    )\n+                );\n+        d = new NestableDelegate(n);\n+        doNestableDelegateGetThrowableN(d, throwables, msgs);\n+    }\n+\n+    private void doNestableDelegateGetThrowableN(NestableDelegate d, Class[] classes, String[] msgs)\n+    {\n+        Throwable t = null;\n+        String msg = null;\n+        \n+        for(int i = 0; i < classes.length; i++)\n+        {\n+            t = d.getThrowable(i);\n+            assertEquals(\"throwable class\", classes[i], t.getClass());\n+            if(Nestable.class.isInstance(t))\n+            {\n+                msg = ((Nestable) t).getMessage(0);\n+            }\n+            else\n+            {\n+                msg = t.getMessage();\n+            }\n+            assertEquals(\"throwable message\", msgs[i], msg);\n+        }\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            t = d.getThrowable(-1);\n+            fail(\"getThrowable(-1) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioobe)\n+        {\n+        }\n+        try\n+        {\n+            t = d.getThrowable(999);\n+            fail(\"getThrowable(999) should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException ioobe)\n+        {\n+        }\n+    }\n+\n+    public void testNestableDelegateGetThrowables()\n+    {\n+        Nestable n = null;\n+        NestableDelegate d = null;\n+        String msgs[] = null;\n+        Class[] throwables = null;\n+        \n+        msgs = new String[2];\n+        msgs[0] = null;\n+        msgs[1] = \"level 2\";\n+        throwables = new Class[2];\n+        throwables[0] = NestableDelegateTester1.class;\n+        throwables[1] = Exception.class;\n+        n = new NestableDelegateTester1(new Exception(msgs[1]));\n+        d = new NestableDelegate(n);\n+        doNestableDelegateGetThrowables(d, throwables, msgs);\n+ \n+        msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        throwables = new Class[5];\n+        throwables[0] = NestableDelegateTester1.class;\n+        throwables[1] = NestableDelegateTester2.class;\n+        throwables[2] = NestableDelegateTester1.class;\n+        throwables[3] = NestableDelegateTester2.class;\n+        throwables[4] = Exception.class;        \n+        n = new NestableDelegateTester1(msgs[0], \n+                new NestableDelegateTester2(msgs[1], \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(msgs[3], \n+                            new Exception(msgs[4])\n+                        )\n+                    )\n+                )\n+            );\n+        d = new NestableDelegate(n);\n+        doNestableDelegateGetThrowables(d, throwables, msgs);\n+    }\n+    \n+    private void doNestableDelegateGetThrowables(NestableDelegate d, Class[] classes, String[] msgs)\n+    {\n+        Throwable[] throwables = null;\n+        String msg = null;\n+\n+        throwables = d.getThrowables();\n+        assertEquals(\"throwables length\", classes.length, throwables.length);\n+        for(int i = 0; i < classes.length; i++)\n+        {\n+            assertEquals(\"throwable class\", classes[i], throwables[i].getClass());\n+            Throwable t = throwables[i];\n+            if(Nestable.class.isInstance(t))\n+            {\n+                msg = ((Nestable) t).getMessage(0);\n+            }\n+            else\n+            {\n+                msg = t.getMessage();\n+            }\n+            assertEquals(\"throwable message\", msgs[i], msg);\n+        }\n+    }\n+\n+    public void testIndexOfThrowable()\n+    {\n+        Nestable n = null;\n+        NestableDelegate d = null;\n+        String msgs[] = null;\n+        Class[] throwables = null;\n+        \n+        msgs = new String[5];\n+        msgs[0] = \"level 1\";\n+        msgs[1] = \"level 2\";\n+        msgs[2] = null;\n+        msgs[3] = \"level 4\";\n+        msgs[4] = \"level 5\";\n+        throwables = new Class[5];\n+        throwables[0] = NestableDelegateTester1.class;\n+        throwables[1] = NestableDelegateTester2.class;\n+        throwables[2] = NestableDelegateTester1.class;\n+        throwables[3] = NestableDelegateTester2.class;\n+        throwables[4] = EOFException.class;\n+        int[] indexes = {0, 1, 0, 1, 4};\n+        n = new NestableDelegateTester1(msgs[0], \n+                new NestableDelegateTester2(msgs[1], \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(msgs[3], \n+                            new EOFException(msgs[4])\n+                        )\n+                    )\n+                )\n+            );\n+        d = new NestableDelegate(n);\n+        for(int i = 0; i < throwables.length; i++)\n+        {\n+            doNestableDelegateIndexOfThrowable(d, throwables[i], 0, indexes[i], msgs[indexes[i]]);\n+        }\n+        doNestableDelegateIndexOfThrowable(d, NestableDelegateTester2.class, 2, 3, msgs[3]);\n+        doNestableDelegateIndexOfThrowable(d, NestableDelegateTester1.class, 1, 2, msgs[2]);\n+        doNestableDelegateIndexOfThrowable(d, NestableDelegateTester1.class, 3, -1, null);\n+        doNestableDelegateIndexOfThrowable(d, NestableDelegateTester1.class, 4, -1, null);\n+        doNestableDelegateIndexOfThrowable(d, EOFException.class, 2, 4, msgs[4]);\n+        doNestableDelegateIndexOfThrowable(d, IOException.class, 2, 4, msgs[4]);\n+        doNestableDelegateIndexOfThrowable(d, Exception.class, 2, 2, msgs[2]);\n+        doNestableDelegateIndexOfThrowable(d, Exception.class, 0, 0, msgs[0]);\n+        doNestableDelegateIndexOfThrowable(d, java.util.Date.class, 0, -1, null);\n+        doNestableDelegateIndexOfThrowable(d, null, 0, -1, null);\n+        \n+        // Test for index out of bounds\n+        try\n+        {\n+            int index = d.indexOfThrowable(NestableDelegateTester1.class, -1);\n+            fail(\"method should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException iooob)\n+        {\n+        }\n+        try\n+        {\n+            int index = d.indexOfThrowable(NestableDelegateTester1.class, 5);\n+            fail(\"method should have thrown IndexOutOfBoundsException\");\n+        }\n+        catch(IndexOutOfBoundsException iooob)\n+        {\n+        }\n+    }\n+\n+    private void doNestableDelegateIndexOfThrowable(NestableDelegate d, Class type, int fromIndex, int expectedIndex, String expectedMsg)\n+    {\n+        Throwable t = null;\n+        \n+        int index = d.indexOfThrowable(type, fromIndex);\n+        assertEquals(\"index of throwable \" + (type == null ? \"null\" : type.getName()), expectedIndex, index);\n+        if(expectedIndex > -1)\n+        {\n+            t = d.getThrowable(index);\n+            if(expectedMsg != null)\n+            {\n+                String msg = null;\n+                if(Nestable.class.isInstance(t))\n+                {\n+                    msg = ((Nestable) t).getMessage(0);\n+                }\n+                else\n+                {\n+                    msg = t.getMessage();\n+                }\n+                assertEquals(\"message of indexed throwable\", expectedMsg, msg);\n+            }\n+        }\n+    }\n+    \n+    public void testNestableDelegetePrintStackTrace()\n+    {\n+        int lineSepLen = lineSeparator.length();\n+        int partialStackTraceLen = PARTIAL_STACK_TRACE.length();\n+        Nestable ne3 = new ThrowableNestedNestable(new Exception(\"nested exception 3\"));\n+        NestableDelegate nd3 = new NestableDelegate(ne3);\n+\n+        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();\n+        PrintStream ps1 = new PrintStream(baos1);\n+        nd3.printStackTrace(ps1);\n+        String stack1 = baos1.toString();\n+        assertTrue(\"stack trace startsWith\", stack1.startsWith(PARTIAL_STACK_TRACE));\n+\n+        Nestable n = new NestableDelegateTester1(\"level 1\", \n+                new NestableDelegateTester2(\"level 2\", \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(\"level 4\", \n+                            new Exception(\"level 5\")\n+                        )\n+                    )\n+                )\n+            );\n+        NestableDelegate d = new NestableDelegate(n);\n+        \n+        // Only testing the flags for jdk1.3 and below\n+        if (!ExceptionUtils.isThrowableNested()) {\n+            NestableDelegate.topDown = true; NestableDelegate.trimStackFrames = true;\n+            checkStackTrace(d, true, true, NestableDelegateTester1.class.getName()+\": level 1\", 24);\n+            NestableDelegate.topDown = true; NestableDelegate.trimStackFrames = false;\n+            checkStackTrace(d, true, false, NestableDelegateTester1.class.getName()+\": level 1\", 80);\n+            NestableDelegate.topDown = false; NestableDelegate.trimStackFrames = true;\n+            checkStackTrace(d, false, true, \"java.lang.Exception: level 5\", 24);\n+            NestableDelegate.topDown = false; NestableDelegate.trimStackFrames = false;\n+            checkStackTrace(d, false, false, \"java.lang.Exception: level 5\", 80);\n+            NestableDelegate.topDown = true; NestableDelegate.trimStackFrames = true;\n+        }\n+    }\n+    private void checkStackTrace(NestableDelegate d, boolean topDown, boolean trimStackFrames,\n+            String startsWith, int expCount) {\n+        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();\n+        PrintStream ps1 = new PrintStream(baos1);\n+        d.printStackTrace(ps1);\n+        String stack1 = baos1.toString();\n+        int actCount = countLines(stack1);\n+        assertTrue(\"topDown: \"+topDown+\", trimStackFrames: \"+trimStackFrames+\" startsWith\",\n+            stack1.startsWith(startsWith));\n+        // test is unreliable, as count varies depending on JUnit version/where main method is\n+//        assertEquals(\"topDown: \"+topDown+\", trimStackFrames: \"+trimStackFrames+\" lineCount\",\n+//            expCount, actCount);\n+    }\n+    private int countLines(String s) {\n+        if (s == null) return 0;\n+        \n+        int i = 0, ndx = -1;\n+        while ((ndx = s.indexOf(\"\\n\", ndx+1)) != -1) {\n+            i++;\n+        }\n+        return i;\n+    }\n+    \n+    public static void main(String args[])\n+    {\n+        TestRunner.run(suite());\n+    }\n+}\n+\n+/**\n+ * Nestable and Throwable class which can be passed to the NestableDelegate\n+ * constructor. Used for testing various methods which iterate through the\n+ * nested causes.\n+ */\n+class NestableDelegateTester1 extends Exception implements Nestable\n+{\n+    private Throwable cause = null;\n+\n+    public NestableDelegateTester1()\n+    {\n+        super();\n+    }\n+\n+    public NestableDelegateTester1(String reason, Throwable cause)\n+    {\n+        super(reason);\n+        this.cause = cause;\n+    }\n+    \n+    public NestableDelegateTester1(String reason)\n+    {\n+        super(reason);\n+    }\n+    \n+    public NestableDelegateTester1(Throwable cause)\n+    {\n+        super();\n+        this.cause = cause;\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowables()\n+     * Returns zero-length <code>Throwable</code> array for this test.\n+     */\n+    public Throwable[] getThrowables()\n+    {\n+        return new Throwable[0];\n+    }\n+    \n+    /**\n+     * @see Nestable#getMessages()\n+     * Returns zero-length String array for this test.\n+     */\n+    public String[] getMessages()\n+    {\n+        return new String[0];\n+    }\n+    \n+    /**\n+     * @see Nestable#indexOfThrowable(Class)\n+     * Returns -1 for this test.\n+     */\n+    public int indexOfThrowable(Class type)\n+    {\n+        return -1;\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowable(int)\n+     * Returns <code>null</code> for this test.\n+     */\n+    public Throwable getThrowable(int index)\n+    {\n+        return null;\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowableCount()\n+     * Returns 1 for this test.\n+     */\n+    public int getThrowableCount()\n+    {\n+        return 1;\n+    }\n+    \n+    /**\n+     * @see Nestable#getCause()\n+     */\n+    public Throwable getCause()\n+    {\n+        return cause;\n+    }\n+    \n+    /**\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n+     *\n+     * @param out The writer to use.\n+     */\n+    public void printPartialStackTrace(PrintWriter out)\n+    {\n+        super.printStackTrace(out);\n+    }\n+    \n+    /**\n+     * @see Nestable#getMessage(int)\n+     */\n+    public String getMessage(int index)\n+    {\n+        if(index == 0)\n+        {\n+            return super.getMessage();\n+        }\n+        else\n+        {\n+            return \"\";\n+        }\n+    }\n+    \n+    /**\n+     * @see Nestable#indexOfThrowable(Class, int)\n+     * Returns -1 for this test.\n+     */\n+    public int indexOfThrowable(Class type, int fromIndex)\n+    {\n+        return -1;\n+    }\n+    \n+}\n+\n+/**\n+ * Nestable and Throwable class which can be passed to the NestableDelegate\n+ * constructor. Used for testing various methods which iterate through the\n+ * nested causes.\n+ */\n+class NestableDelegateTester2 extends Throwable implements Nestable\n+{\n+    private Throwable cause = null;\n+\n+    public NestableDelegateTester2()\n+    {\n+        super();\n+    }\n+    \n+    public NestableDelegateTester2(String reason, Throwable cause)\n+    {\n+        super(reason);\n+        this.cause = cause;\n+    }\n+    \n+    public NestableDelegateTester2(String reason)\n+    {\n+        super(reason);\n+    }\n+    \n+    public NestableDelegateTester2(Throwable cause)\n+    {\n+        super();\n+        this.cause = cause;\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowables()\n+     * Returns zero-length <code>Throwable</code> array for this test.\n+     */\n+    public Throwable[] getThrowables()\n+    {\n+        return new Throwable[0];\n+    }\n+    \n+    /**\n+     * @see Nestable#getMessages()\n+     * Returns zero-length String array for this test.\n+     */\n+    public String[] getMessages()\n+    {\n+        return new String[0];\n+    }\n+    \n+    /**\n+     * @see Nestable#indexOfThrowable(Class)\n+     * Returns -1 for this test.\n+     */\n+    public int indexOfThrowable(Class type)\n+    {\n+        return -1;\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowable(int)\n+     * Returns <code>null</code> for this test.\n+     */\n+    public Throwable getThrowable(int index)\n+    {\n+        return null;\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowableCount()\n+     * Returns 1 for this test.\n+     *\n+     * @return 1\n+     */\n+    public int getThrowableCount()\n+    {\n+        return 1;\n+    }\n+    \n+    /**\n+     * @see Nestable#getCause()\n+     */\n+    public Throwable getCause()\n+    {\n+        return cause;\n+    }\n+    \n+    /**\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n+     *\n+     * @param out The writer to use.\n+     */\n+    public void printPartialStackTrace(PrintWriter out)\n+    {\n+        super.printStackTrace(out);\n+    }\n+    \n+    /**\n+     * @see Nestable#getMessage(int)\n+     */\n+    public String getMessage(int index)\n+    {\n+        if(index == 0)\n+        {\n+            return super.getMessage();\n+        }\n+        else\n+        {\n+            return \"\";\n+        }\n+    }\n+    \n+    /**\n+     * @see Nestable#indexOfThrowable(Class, int)     \n+     * Returns -1 for this test.\n+     */\n+    public int indexOfThrowable(Class type, int fromIndex)\n+    {\n+        return -1;\n+    }\n+    \n+}\n+\n+/**\n+ * Used to test that the constructor passes when passed a throwable cause\n+ * And, the NestableDelegate.getMessage() returns the message from underlying \n+ * nestable (which also has to be a Throwable).\n+ */\n+class ThrowableNestable extends Throwable implements Nestable\n+{\n+    private Throwable cause = new Exception(\"ThrowableNestable cause\");\n+\n+    /**\n+     * @see Nestable#getThrowableCount()\n+     * Returns 1 for this test.\n+     */\n+    public int getThrowableCount()\n+    {\n+        return 1;\n+    }\n+    \n+    /**\n+     * @see Nestable#getMessage()\n+     * Returns the hard-coded string \"ThrowableNestable exception\" for this\n+     * test.\n+     */\n+    public String getMessage()\n+    {\n+        return \"ThrowableNestable exception\";\n+    }\n+\n+    /**\n+     * @see Nestable#getMessage(int)\n+     * Returns the hard-coded string \"ThrowableNestable exception\" for this\n+     * test.\n+     */\n+    public String getMessage(int index)\n+    {\n+        return getMessage();\n+    }\n+\n+    /**\n+     * @see Nestable#getMessages()\n+     * Returns single-element string array with \"ThrowableNestable exception\".\n+     */\n+    public String[] getMessages()\n+    {\n+        String msgs[] = new String[1];\n+        msgs[0] = getMessage();\n+        return msgs;\n+    }\n+    \n+    /**\n+     * @see Nestable#getCause()\n+     */\n+    public Throwable getCause()\n+    {\n+        return cause;\n+    }\n+\n+    /**\n+     * @see Nestable#printStackTrace(PrintWriter)\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n+     */\n+    public void printStackTrace(PrintWriter out)\n+    {\n+    }\n+    \n+    /**\n+     * @see Nestable#printPartialStackTrace(PrintWriter)\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n+     */\n+    public void printPartialStackTrace(PrintWriter out)\n+    {\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowable(int)\n+     */\n+    public Throwable getThrowable(int index)\n+    {\n+        return cause;\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowables()\n+     */\n+    public Throwable[] getThrowables()\n+    {\n+        Throwable throwables[] = new Throwable[1];\n+        throwables[0] = cause;\n+        return throwables;\n+    }\n+    \n+    /**\n+     * @see Nestable#indexOfThrowable(Class)\n+     */\n+    public int indexOfThrowable(Class type)\n+    {\n+        if(Exception.class.isInstance(type))\n+        {\n+            return 0;\n+        }\n+        return -1;\n+    }\n+    \n+    /**\n+     * @see Nestable#indexOfThrowable(Class,int)\n+     */\n+    public int indexOfThrowable(Class type, int fromIndex)\n+    {\n+        return indexOfThrowable(type);\n+    }\n+    \n+}\n+\n+/**\n+ * Nestable and Throwable class which takes in a 'cause' object.\n+ * Returns a message wrapping the 'cause' message\n+ * Prints a fixed stack trace and partial stack trace.\n+ */\n+class ThrowableNestedNestable extends Throwable implements Nestable\n+{\n+    private Throwable cause = null;\n+    \n+    public ThrowableNestedNestable(Throwable cause)\n+    {\n+        this.cause = cause;\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowableCount()\n+     * Returns 1 for this test.\n+     */\n+    public int getThrowableCount()\n+    {\n+        return 1;\n+    }\n+    \n+    /**\n+     * @see Nestable#getMessage()\n+     * For this test, returns \"ThrowableNestable exception (\" appended to the\n+     * message of the cause specified in the constructor.\n+     */\n+    public String getMessage()\n+    {\n+        return \"ThrowableNestedNestable exception (\" + cause.getMessage() + \")\";\n+    }\n+\n+    /**\n+     * @see Nestable#getMessage(int)\n+     * For this test, returns \"ThrowableNestable exception (\" appended to the\n+     * message of the cause specified in the constructor.\n+     */\n+    public String getMessage(int index)\n+    {\n+        return \"ThrowableNestedNestable exception (\" + cause.getMessage() + \")\";\n+    }\n+    \n+    /**\n+     * @see Nestable#getMessages()\n+     * For this test, returns a single-element string array containing\n+     * \"ThrowableNestable exception (\" appended to the\n+     * message of the cause specified in the constructor.\n+     */\n+    public String[] getMessages()\n+    {\n+        String[] msgs = new String[1];\n+        msgs[0] = \"ThrowableNestedNestable exception (\" + cause.getMessage() + \")\";\n+        return msgs;\n+    }\n+    \n+    /**\n+     * @see Nestable#getCause()\n+     */\n+    public Throwable getCause()\n+    {\n+        return cause;\n+    }\n+    \n+    /**\n+     * @see Nestable#printStackTrace(PrintWriter)\n+     * For this test, writes the string\n+     * \"ThrowableNestedNestable stack trace place-holder\" to the print writer.\n+     */\n+    public void printStackTrace(PrintWriter out)\n+    {\n+        out.println(\"ThrowableNestedNestable stack trace place-holder\");\n+    }\n+    \n+    /**\n+     * @see Nestable#printPartialStackTrace(PrintWriter)\n+     * For this test, writes the string\n+     * \"ThrowableNestedNestable partial stack trace place-holder\" to the print\n+     * writer.\n+     */\n+    public void printPartialStackTrace(PrintWriter out)\n+    {\n+        out.println(\"ThrowableNestedNestable partial stack trace place-holder\");\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowable(int)\n+     */\n+    public Throwable getThrowable(int index)\n+    {\n+        return cause;\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowables()\n+     */\n+    public Throwable[] getThrowables()\n+    {\n+        Throwable throwables[] = new Throwable[1];\n+        throwables[0] = cause;\n+        return throwables;\n+    }\n+    \n+    /**\n+     * @see Nestable#indexOfThrowable(Class)\n+     */\n+    public int indexOfThrowable(Class type)\n+    {\n+        if(Exception.class.isInstance(type))\n+        {\n+            return 0;\n+        }\n+        return -1;\n+    }\n+    \n+    /**\n+     * @see Nestable#indexOfThrowable(Class, int)\n+     */\n+    public int indexOfThrowable(Class type, int fromIndex)\n+    {\n+        return indexOfThrowable(type);\n+    }\n+    \n+}\n+\n+/**\n+ * Used to test that the constructor fails when passed a non-throwable cause\n+ */\n+class NonThrowableNestable implements Nestable\n+{\n+    /**\n+     * @see Nestable#getThrowableCount()\n+     * Returns 1 for this test.\n+     */\n+    public int getThrowableCount()\n+    {\n+        return 1;\n+    }\n+    \n+    /**\n+     * @see Nestable#getMessage()\n+     * Returns the string \"non-throwable\" for this test.\n+     */\n+    public String getMessage()\n+    {\n+        return \"non-throwable\";\n+    }\n+\n+    /**\n+     * @see Nestable#getMessage(int)\n+     * Returns the string \"non-throwable\" for this test.\n+     */\n+    public String getMessage(int index)\n+    {\n+        return \"non-throwable\";\n+    }\n+    \n+    /**\n+     * @see Nestable#getMessage()\n+     * Returns a single-element array containing the string \"non-throwable\" for\n+     * this test.\n+     */\n+    public String[] getMessages()\n+    {\n+        String[] msgs = new String[1];\n+        msgs[0] = \"non-throwable\";\n+        return msgs;\n+    }\n+    \n+    /**\n+     * @see Nestable#getCause()\n+     * Returns <code>null</code> for this test.\n+     */\n+    public Throwable getCause()\n+    {\n+        return null;\n+    }\n+    \n+    /**\n+     * @see Nestable#printStackTrace(PrintWriter)\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n+     */\n+    public void printStackTrace(PrintWriter out)\n+    {\n+    }\n+    \n+    /**\n+     * @see Nestable#printStackTrace(PrintStream)\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n+     */\n+    public void printStackTrace(PrintStream out)\n+    {\n+    }\n+    \n+    /**\n+     * @see Nestable#printPartialStackTrace(PrintWriter)\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n+     */\n+    public void printPartialStackTrace(PrintWriter out)\n+    {\n+    }\n+    \n+\n+    /**\n+     * @see Nestable#getThrowable(int)\n+     * Returns <code>null</code> for this test.\n+     */\n+    public Throwable getThrowable(int index)\n+    {\n+        return null;\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowables()\n+     * Returns zero-length <code>Throwable</code> array.\n+     */\n+    public Throwable[] getThrowables()\n+    {\n+        return new Throwable[0];\n+    }\n+    \n+    /**\n+     * @see Nestable#indexOfThrowable(Class)\n+     * Returns -1 for this test.\n+     */\n+    public int indexOfThrowable(Class type)\n+    {\n+        return -1;\n+    }\n+    \n+    /**\n+     * @see Nestable#indexOfThrowable(Class, int)\n+     * Returns -1 for this test.\n+     */\n+    public int indexOfThrowable(Class type, int fromIndex)\n+    {\n+        return -1;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/exception/NestableErrorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.exception;\n+\n+import java.io.EOFException;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests the org.apache.commons.lang.exception.NestableError class.\n+ *\n+ * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n+ * @version $Id$\n+ */\n+public class NestableErrorTestCase extends AbstractNestableTestCase {\n+    \n+    /**\n+     * Construct a new instance of\n+     * <code>NestableErrorTestCase</code>.\n+     *\n+     * @param name test case name\n+     */\n+    public NestableErrorTestCase(String name)\n+    {\n+        super(name);\n+    }\n+\n+    /**\n+     * Sets up instance variables required by this test case.\n+     */\n+    public void setUp()\n+    {\n+    }\n+\n+    /**\n+     * Returns the test suite\n+     *\n+     * @return the test suite\n+     */\n+    public static Test suite()\n+    {\n+        return new TestSuite(NestableErrorTestCase.class);\n+    }\n+    \n+    /**\n+     * Tears down instance variables required by this test case.\n+     */\n+    public void tearDown()\n+    {\n+    }\n+\n+    /**\n+     * Command line entry point for running the test suite.\n+     *\n+     * @param args array of command line arguments\n+     */\n+    public static void main(String args[])\n+    {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * @see AbstractNestableTestCase#getNestable()\n+     */\n+    public Nestable getNestable()\n+    {\n+        return new NestableError();\n+    }    \n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(Nestable)\n+     */\n+    public Nestable getNestable(Nestable n)\n+    {\n+        return new NestableError((Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(String)\n+     */\n+    public Nestable getNestable(String msg)\n+    {\n+        return new NestableError(msg);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(Throwable)\n+     */\n+    public Nestable getNestable(Throwable t)\n+    {\n+        return new NestableError(t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(String, Throwable)\n+     */\n+    public Nestable getNestable(String msg, Throwable t)\n+    {\n+        return new NestableError(msg, t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(String, Nestable)\n+     */\n+    public Nestable getNestable(String msg, Nestable n)\n+    {\n+        return new NestableError(msg, (Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(Throwable)\n+     */\n+    public Nestable getTester1(Throwable t)\n+    {\n+        return new NestableErrorTester1(t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(Nestable)\n+     */\n+    public Nestable getTester1(Nestable n)\n+    {\n+        return new NestableErrorTester1((Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(String, Throwable)\n+     */\n+    public Nestable getTester1(String msg, Throwable t)\n+    {\n+        return new NestableErrorTester1(msg, t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(String, Nestable)\n+     */\n+    public Nestable getTester1(String msg, Nestable n)\n+    {\n+        return new NestableErrorTester1(msg, (Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1Class()\n+     */\n+    public Class getTester1Class()\n+    {\n+        return NestableErrorTester1.class;\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester2(String, Throwable)\n+     */\n+    public Nestable getTester2(String msg, Throwable t)\n+    {\n+        return new NestableErrorTester2(msg, t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester2(String, Nestable)\n+     */\n+    public Nestable getTester2(String msg, Nestable n)\n+    {\n+        return new NestableErrorTester2(msg, (Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester2Class()\n+     */\n+    public Class getTester2Class()\n+    {\n+        return NestableErrorTester2.class;\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getThrowable(String)\n+     */\n+    public Throwable getThrowable(String msg)\n+    {\n+        return new EOFException(msg);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getThrowableClass()\n+     */\n+    public Class getThrowableClass()\n+    {\n+        return EOFException.class;\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getBaseThrowableClass()\n+     */\n+    public Class getBaseThrowableClass()\n+    {\n+        return Error.class;\n+    }\n+    \n+}\n+\n+/**\n+ * First nestable tester implementation for use in test cases.\n+ */\n+class NestableErrorTester1 extends NestableError\n+{\n+    public NestableErrorTester1()\n+    {\n+        super();\n+    }\n+\n+    public NestableErrorTester1(String reason, Throwable cause)\n+    {\n+        super(reason, cause);\n+    }\n+    \n+    public NestableErrorTester1(String reason)\n+    {\n+        super(reason);\n+    }\n+    \n+    public NestableErrorTester1(Throwable cause)\n+    {\n+        super(cause);\n+    }\n+    \n+}\n+\n+/**\n+ * Second nestable tester implementation for use in test cases.\n+ */\n+class NestableErrorTester2 extends NestableError\n+{\n+    public NestableErrorTester2()\n+    {\n+        super();\n+    }\n+    \n+    public NestableErrorTester2(String reason, Throwable cause)\n+    {\n+        super(reason, cause);\n+    }\n+    \n+    public NestableErrorTester2(String reason)\n+    {\n+        super(reason);\n+    }\n+    \n+    public NestableErrorTester2(Throwable cause)\n+    {\n+        super(cause);\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/exception/NestableExceptionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.exception;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.EOFException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.PrintStream;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests the org.apache.commons.lang.exception.NestableException class.\n+ *\n+ * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n+ * @version $Id$\n+ */\n+public class NestableExceptionTestCase extends AbstractNestableTestCase {\n+    \n+    /**\n+     * Construct a new instance of\n+     * <code>NestableExceptionTestCase</code>.\n+     *\n+     * @param name test case name\n+     */\n+    public NestableExceptionTestCase(String name)\n+    {\n+        super(name);\n+    }\n+\n+    /**\n+     * Sets up instance variables required by this test case.\n+     */\n+    public void setUp()\n+    {\n+    }\n+    \n+    /**\n+     * Returns the test suite\n+     *\n+     * @return the test suite\n+     */\n+    public static Test suite()\n+    {\n+        return new TestSuite(NestableExceptionTestCase.class);\n+    }\n+    \n+    /**\n+     * Tears down instance variables required by this test case.\n+     */\n+    public void tearDown()\n+    {\n+    }\n+    \n+    /**\n+     * Command line entry point for running the test suite.\n+     *\n+     * @param args array of command line arguments\n+     */\n+    public static void main(String args[])\n+    {\n+        TestRunner.run(suite());\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable()\n+     */\n+    public Nestable getNestable()\n+    {\n+        return new NestableException();\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(Nestable)\n+     */\n+    public Nestable getNestable(Nestable n)\n+    {\n+        return new NestableException((Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(String)\n+     */\n+    public Nestable getNestable(String msg)\n+    {\n+        return new NestableException(msg);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(Throwable)\n+     */\n+    public Nestable getNestable(Throwable t)\n+    {\n+        return new NestableException(t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(String, Throwable)\n+     */\n+    public Nestable getNestable(String msg, Throwable t)\n+    {\n+        return new NestableException(msg, t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(String, Nestable)\n+     */\n+    public Nestable getNestable(String msg, Nestable n)\n+    {\n+        return new NestableException(msg, (Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(Throwable)\n+     */\n+    public Nestable getTester1(Throwable t)\n+    {\n+        return new NestableExceptionTester1(t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(Nestable)\n+     */\n+    public Nestable getTester1(Nestable n)\n+    {\n+        return new NestableExceptionTester1((Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(String, Throwable)\n+     */\n+    public Nestable getTester1(String msg, Throwable t)\n+    {\n+        return new NestableExceptionTester1(msg, t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(String, Nestable)\n+     */\n+    public Nestable getTester1(String msg, Nestable n)\n+    {\n+        return new NestableExceptionTester1(msg, (Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1Class()\n+     */\n+    public Class getTester1Class()\n+    {\n+        return NestableExceptionTester1.class;\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester2(String, Throwable)\n+     */\n+    public Nestable getTester2(String msg, Throwable t)\n+    {\n+        return new NestableExceptionTester2(msg, t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester2(String, Nestable)\n+     */\n+    public Nestable getTester2(String msg, Nestable n)\n+    {\n+        return new NestableExceptionTester2(msg, (Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester2Class()\n+     */\n+    public Class getTester2Class()\n+    {\n+        return NestableExceptionTester2.class;\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getThrowable(String)\n+     */\n+    public Throwable getThrowable(String msg)\n+    {\n+        return new EOFException(msg);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getThrowableClass()\n+     */\n+    public Class getThrowableClass()\n+    {\n+        return EOFException.class;\n+    }\n+\n+    /**\n+     * @see AbstractNestableTestCase#getBaseThrowableClass()\n+     */\n+    public Class getBaseThrowableClass()\n+    {\n+        return Exception.class;\n+    }\n+    \n+    public void testSpecificPrintStackTrace()\n+    {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        PrintStream ps = new PrintStream(baos);\n+        NestableException ne = new NestableException(\"outer\", new NestableException(\"inner\", new Exception(\"another exception\")));\n+        for(int i = 0; i < 2; i++)\n+        {\n+            if(i == 0)\n+            {\n+                // Test printStackTrac()\n+                // Replace System.err with our own PrintStream so that we can\n+                // obtain and check the printStrackTrace output\n+                PrintStream err = System.err;\n+                System.setErr(ps);\n+                ne.printStackTrace();\n+                // Restore the System.err\n+                System.setErr(err);\n+            }\n+            else\n+            {\n+                // Test printStackTrace(PrintStream)\n+                ne.printStackTrace(ps);\n+            }\n+        }\n+        String msg = baos.toString();\n+        assertTrue( \"printStackTrace() starts with outer message\", msg.startsWith(\"org.apache.commons.lang.exception.NestableException: outer\"));\n+        assertTrue( \"printStackTrace() contains 1st nested message\", msg.indexOf(\"Caused by: org.apache.commons.lang.exception.NestableException: inner\") >= 0);\n+        assertTrue( \"printStackTrace() contains 2nd nested message\", msg.indexOf(\"Caused by: java.lang.Exception: another exception\") >= 0);\n+        assertTrue( \"printStackTrace() inner message after outer message\", \n+            msg.indexOf(\"org.apache.commons.lang.exception.NestableException: outer\") <\n+            msg.indexOf(\"Caused by: org.apache.commons.lang.exception.NestableException: inner\"));\n+        assertTrue( \"printStackTrace() cause message after inner message\",\n+            msg.indexOf(\"Caused by: org.apache.commons.lang.exception.NestableException: inner\") <\n+            msg.indexOf(\"Caused by: java.lang.Exception: another exception\"));\n+    }\n+    \n+    public void testSerialization()\n+        throws java.io.IOException, ClassNotFoundException\n+    {\n+        RuntimeException nestedEx = new RuntimeException(\"nested exception message\");\n+        NestableExceptionTester1 ex = new NestableExceptionTester1(\"serialization test\", nestedEx);\n+\n+        assertTrue( \"implements java.io.Serializable\", nestedEx instanceof java.io.Serializable);\n+        \n+        assertTrue( \"implements java.io.Serializable\", ex instanceof java.io.Serializable);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ByteArrayInputStream bais = null;\n+        ObjectOutputStream oos = null;\n+        ObjectInputStream ois = null;\n+\n+        try\n+        {        \n+            oos = new ObjectOutputStream(baos);\n+            oos.writeObject(ex);\n+            oos.flush();\n+            bais = new ByteArrayInputStream(baos.toByteArray());\n+            ois = new ObjectInputStream(bais);\n+            NestableExceptionTester1 deserializedEx = (NestableExceptionTester1) ois.readObject();\n+            assertEquals( \n+                    \"getThrowableCount() return value\",\n+                        ex.getThrowableCount(),\n+                        deserializedEx.getThrowableCount());\n+            \n+            for (int i = 0; i < ex.getThrowableCount(); i++)\n+            {\n+                Throwable t = ex.getThrowable(i);\n+                Throwable deserializedThrowable = deserializedEx.getThrowable(i);\n+                \n+                assertEquals( t.getClass(),\n+                        deserializedThrowable.getClass());\n+                        \n+                assertEquals(\n+                    t.getMessage(),\n+                    deserializedThrowable.getMessage());\n+            }\n+        }\n+        finally\n+        {\n+            if (null != oos)\n+            {\n+                try\n+                {\n+                    oos.close();\n+                }\n+                catch (Exception ignored)\n+                {\n+                    // intentionally empty\n+                }\n+            }\n+        }\n+        \n+    }\n+}\n+\n+/**\n+ * First nestable tester implementation for use in test cases.\n+ */\n+class NestableExceptionTester1 extends NestableException\n+{\n+    public NestableExceptionTester1()\n+    {\n+        super();\n+    }\n+\n+    public NestableExceptionTester1(String reason, Throwable cause)\n+    {\n+        super(reason, cause);\n+    }\n+    \n+    public NestableExceptionTester1(String reason)\n+    {\n+        super(reason);\n+    }\n+    \n+    public NestableExceptionTester1(Throwable cause)\n+    {\n+        super(cause);\n+    }\n+    \n+}\n+\n+/**\n+ * Second nestable tester implementation for use in test cases.\n+ */\n+class NestableExceptionTester2 extends NestableException\n+{\n+    public NestableExceptionTester2()\n+    {\n+        super();\n+    }\n+    \n+    public NestableExceptionTester2(String reason, Throwable cause)\n+    {\n+        super(reason, cause);\n+    }\n+    \n+    public NestableExceptionTester2(String reason)\n+    {\n+        super(reason);\n+    }\n+    \n+    public NestableExceptionTester2(Throwable cause)\n+    {\n+        super(cause);\n+    }\n+    \n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.exception;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.EOFException;\n+import java.io.PrintStream;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests the org.apache.commons.lang.exception.NestableRuntimeException class.\n+ *\n+ * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n+ * @version $Id$\n+ */\n+public class NestableRuntimeExceptionTestCase extends AbstractNestableTestCase {\n+    \n+    /**\n+     * Construct a new instance of\n+     * <code>NestableRuntimeExceptionTestCase</code>.\n+     *\n+     * @param name test case name\n+     */\n+    public NestableRuntimeExceptionTestCase(String name)\n+    {\n+        super(name);\n+    }\n+\n+    /**\n+     * Sets up instance variables required by this test case.\n+     */\n+    public void setUp()\n+    {\n+    }\n+    \n+    /**\n+     * Returns the test suite\n+     *\n+     * @return the test suite\n+     */\n+    public static Test suite()\n+    {\n+        return new TestSuite(NestableRuntimeExceptionTestCase.class);\n+    }\n+    \n+    /**\n+     * Tears down instance variables required by this test case.\n+     */\n+    public void tearDown()\n+    {\n+    }\n+    \n+    /**\n+     * Command line entry point for running the test suite.\n+     *\n+     * @param args array of command line arguments\n+     */\n+    public static void main(String args[])\n+    {\n+        TestRunner.run(suite());\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable()\n+     */\n+    public Nestable getNestable()\n+    {\n+        return new NestableRuntimeException();\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(Nestable)\n+     */\n+    public Nestable getNestable(Nestable n)\n+    {\n+        return new NestableRuntimeException((Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(String)\n+     */\n+    public Nestable getNestable(String msg)\n+    {\n+        return new NestableRuntimeException(msg);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(Throwable)\n+     */\n+    public Nestable getNestable(Throwable t)\n+    {\n+        return new NestableRuntimeException(t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(String, Throwable)\n+     */\n+    public Nestable getNestable(String msg, Throwable t)\n+    {\n+        return new NestableRuntimeException(msg, t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(String, Nestable)\n+     */\n+    public Nestable getNestable(String msg, Nestable n)\n+    {\n+        return new NestableRuntimeException(msg, (Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(Throwable)\n+     */\n+    public Nestable getTester1(Throwable t)\n+    {\n+        return new NestableRuntimeExceptionTester1(t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(Nestable)\n+     */\n+    public Nestable getTester1(Nestable n)\n+    {\n+        return new NestableRuntimeExceptionTester1((Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(String, Throwable)\n+     */\n+    public Nestable getTester1(String msg, Throwable t)\n+    {\n+        return new NestableRuntimeExceptionTester1(msg, t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(String, Nestable)\n+     */\n+    public Nestable getTester1(String msg, Nestable n)\n+    {\n+        return new NestableRuntimeExceptionTester1(msg, (Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1Class()\n+     */\n+    public Class getTester1Class()\n+    {\n+        return NestableRuntimeExceptionTester1.class;\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester2(String, Throwable)\n+     */\n+    public Nestable getTester2(String msg, Throwable t)\n+    {\n+        return new NestableRuntimeExceptionTester2(msg, t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester2(String, Nestable)\n+     */\n+    public Nestable getTester2(String msg, Nestable n)\n+    {\n+        return new NestableRuntimeExceptionTester2(msg, (Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester2Class()\n+     */\n+    public Class getTester2Class()\n+    {\n+        return NestableRuntimeExceptionTester2.class;\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getThrowable(String)\n+     */\n+    public Throwable getThrowable(String msg)\n+    {\n+        return new EOFException(msg);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getThrowableClass()\n+     */\n+    public Class getThrowableClass()\n+    {\n+        return EOFException.class;\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getBaseThrowableClass()\n+     */\n+    public Class getBaseThrowableClass()\n+    {\n+        return RuntimeException.class;\n+    }\n+    \n+    public void testSpecificPrintStackTrace()\n+    {\n+        // Test printStackTrac()\n+        // Replace System.err with our own PrintStream so that we can obtain\n+        // and check the printStrackTrace output\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        PrintStream ps = new PrintStream(baos);\n+        NestableRuntimeException ne = new NestableRuntimeException(\"outer\", new NestableRuntimeException(\"inner\", new Exception(\"another exception\")));\n+        for(int i = 0; i < 2; i++)\n+        {\n+            if(i == 0)\n+            {\n+                // Test printStackTrac()\n+                // Replace System.err with our own PrintStream so that we can\n+                // obtain and check the printStrackTrace output\n+                PrintStream err = System.err;\n+                System.setErr(ps);\n+                ne.printStackTrace();\n+                // Restore the System.err\n+                System.setErr(err);\n+            }\n+            else\n+            {\n+                // Test printStackTrace(PrintStream)\n+                ne.printStackTrace(ps);\n+            }\n+        }\n+        String msg = baos.toString();\n+        assertTrue( \"printStackTrace() starts with outer message\", msg.startsWith(\"org.apache.commons.lang.exception.NestableRuntimeException: outer\"));\n+        assertTrue( \"printStackTrace() contains 1st nested message\", msg.indexOf(\"Caused by: org.apache.commons.lang.exception.NestableRuntimeException: inner\") >= 0);\n+        assertTrue( \"printStackTrace() contains 2nd nested message\", msg.indexOf(\"Caused by: java.lang.Exception: another exception\") >= 0);\n+        assertTrue( \"printStackTrace() inner message after outer message\", \n+            msg.indexOf(\"org.apache.commons.lang.exception.NestableRuntimeException: outer\") <\n+            msg.indexOf(\"Caused by: org.apache.commons.lang.exception.NestableRuntimeException: inner\"));\n+        assertTrue( \"printStackTrace() cause message after inner message\",\n+            msg.indexOf(\"Caused by: org.apache.commons.lang.exception.NestableRuntimeException: inner\") <\n+            msg.indexOf(\"Caused by: java.lang.Exception: another exception\"));\n+    }\n+    \n+}\n+\n+/**\n+ * First nestable tester implementation for use in test cases.\n+ */\n+class NestableRuntimeExceptionTester1 extends NestableRuntimeException\n+{\n+    public NestableRuntimeExceptionTester1()\n+    {\n+        super();\n+    }\n+\n+    public NestableRuntimeExceptionTester1(String reason, Throwable cause)\n+    {\n+        super(reason, cause);\n+    }\n+    \n+    public NestableRuntimeExceptionTester1(String reason)\n+    {\n+        super(reason);\n+    }\n+    \n+    public NestableRuntimeExceptionTester1(Throwable cause)\n+    {\n+        super(cause);\n+    }\n+    \n+}\n+\n+/**\n+ * Second nestable tester implementation.\n+ */\n+class NestableRuntimeExceptionTester2 extends NestableRuntimeException\n+{\n+    public NestableRuntimeExceptionTester2()\n+    {\n+        super();\n+    }\n+    \n+    public NestableRuntimeExceptionTester2(String reason, Throwable cause)\n+    {\n+        super(reason, cause);\n+    }\n+    \n+    public NestableRuntimeExceptionTester2(String reason)\n+    {\n+        super(reason);\n+    }\n+    \n+    public NestableRuntimeExceptionTester2(Throwable cause)\n+    {\n+        super(cause);\n+    }\n+    \n+}\n+", "timestamp": 1236478536, "metainfo": ""}