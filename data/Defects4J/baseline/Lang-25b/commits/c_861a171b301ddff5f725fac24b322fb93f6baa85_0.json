{"sha": "861a171b301ddff5f725fac24b322fb93f6baa85", "log": "getCause(Throwable): Refactored into two methods which are called internally.  This will allow more cause method names to be added with ease.  getCauseUsingWellKnownTypes(Throwable): Extracted from getCause().  getCauseUsingMethodName(String, Throwable): Extracted from getCause().   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n      */\n     public static Throwable getCause(Throwable t)\n     {\n-        Throwable cause = null;\n-\n-        if (t instanceof NestableException)\n-        {\n-            cause = ((NestableException) t).getCause();\n-        }\n-        else if (t instanceof NestableRuntimeException)\n-        {\n-            cause = ((NestableRuntimeException) t).getCause();\n-        }\n-        else if (t instanceof SQLException)\n-        {\n-            cause = ((SQLException) t).getNextException();\n-        }\n-        else\n-        {\n-            Method getCause = null;\n-            Class c = t.getClass();\n-            try\n-            {\n-                getCause = c.getMethod(CAUSE_METHOD_NAME, null);\n-            }\n-            catch (NoSuchMethodException ignored)\n-            {\n-            }\n-            catch (SecurityException ignored)\n-            {\n-            }\n-\n-            if (getCause != null &&\n-                Throwable.class.isAssignableFrom(getCause.getReturnType()))\n-            {\n-                try\n-                {\n-                    cause = (Throwable) getCause.invoke(t, CAUSE_METHOD_PARAMS);\n-                }\n-                catch (IllegalAccessException ignored)\n-                {\n-                }\n-                catch (IllegalArgumentException ignored)\n-                {\n-                }\n-                catch (InvocationTargetException ignored)\n-                {\n-                }\n-            }\n-        }\n-\n+        Throwable cause = getCauseUsingWellKnownTypes(t);\n+        if (cause == null)\n+        {\n+            cause = getCauseUsingMethodName(CAUSE_METHOD_NAME, t);\n+        }\n         return cause;\n     }\n     \n         }\n         return cause;\n     }\n+\n+    /**\n+     * Uses <code>instanceof</code> checks to examine the exception,\n+     * looking for well known types which could contain chained or\n+     * wrapped exceptions.\n+     *\n+     * @param t The exception to examine.\n+     * @return The wrapped exception, or <code>null</code> if not\n+     * found.\n+     */\n+    private static Throwable getCauseUsingWellKnownTypes(Throwable t)\n+    {\n+        if (t instanceof NestableException)\n+        {\n+            return ((NestableException) t).getCause();\n+        }\n+        else if (t instanceof NestableRuntimeException)\n+        {\n+            return ((NestableRuntimeException) t).getCause();\n+        }\n+        else if (t instanceof SQLException)\n+        {\n+            return ((SQLException) t).getNextException();\n+        }\n+        else if (t instanceof InvocationTargetException)\n+        {\n+            return ((InvocationTargetException) t).getTargetException();\n+        }\n+        else\n+        {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * @param methodName The name of the method to find and invoke.\n+     * @param t The exception to examine.\n+     * @return The wrapped exception, or <code>null</code> if not\n+     * found.\n+     */\n+    private static Throwable getCauseUsingMethodName(String methodName,\n+                                                     Throwable t)\n+    {\n+        Method method = null;\n+        try\n+        {\n+            method = t.getClass().getMethod(methodName, null);\n+        }\n+        catch (NoSuchMethodException ignored)\n+        {\n+        }\n+        catch (SecurityException ignored)\n+        {\n+        }\n+\n+        if (method != null &&\n+            Throwable.class.isAssignableFrom(method.getReturnType()))\n+        {\n+            try\n+            {\n+                return (Throwable) method.invoke(t, CAUSE_METHOD_PARAMS);\n+            }\n+            catch (IllegalAccessException ignored)\n+            {\n+            }\n+            catch (IllegalArgumentException ignored)\n+            {\n+            }\n+            catch (InvocationTargetException ignored)\n+            {\n+            }\n+        }\n+        return null;\n+    }\n }", "timestamp": 1029359119, "metainfo": ""}