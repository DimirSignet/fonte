{"sha": "7bb3e3cb931a997637cabc3901f0329b10820e03", "log": "Add missing Javadoc comments.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/LongRange.java\n+++ b/src/java/org/apache/commons/lang/math/LongRange.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: LongRange.java,v 1.5 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: LongRange.java,v 1.6 2003/12/29 00:58:27 ggregory Exp $\n  */\n public final class LongRange extends Range implements Serializable {\n     \n     }\n \n     /**\n-     * <p>Gets the maximum number in this range as a <code>int</code>.</p>\n-     * \n-     * <p>This conversion can lose information for large values.</p>\n+     * <p>Gets the maximum number in this range cast to an <code>int</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values.</p>\n+     * \n+     * @return the maximum number in this range cast to an <code>int</code>.\n      */\n     public int getMaximumInteger() {\n         return (int) max;\n--- a/src/java/org/apache/commons/lang/math/RandomUtils.java\n+++ b/src/java/org/apache/commons/lang/math/RandomUtils.java\n  * method and its system-wide <code>Random</code> object.\n  * \n  * @author Henri Yandell\n+ * @author Gary D. Gregory\n  * @since 2.0\n- * @version $Id: RandomUtils.java,v 1.6 2003/08/18 02:22:24 bayard Exp $\n+ * @version $Id: RandomUtils.java,v 1.7 2003/12/29 00:58:27 ggregory Exp $\n  */\n public class RandomUtils {\n \n+    /**\n+     * An instance of {@link JVMRandom}.\n+     */\n     public static final Random JVM_RANDOM = new JVMRandom();\n \n // should be possible for JVM_RANDOM?\n     public static int nextInt() {\n         return nextInt(JVM_RANDOM);\n     }\n-    public static int nextInt(Random rnd) {\n-        return rnd.nextInt();\n-    }\n+    \n+    /**\n+     * <p>Returns the next pseudorandom, uniformly distributed int value\n+     * from the given <code>random</code> sequence.</p>\n+     *\n+     * @param random the Random sequence generator.\n+     * @return the random int\n+     */\n+    public static int nextInt(Random random) {\n+        return random.nextInt();\n+    }\n+    \n     /**\n      * <p>Returns a pseudorandom, uniformly distributed int value\n      * between <code>0</code> (inclusive) and the specified value\n      * (exclusive), from the Math.random() sequence.</p>\n      *\n      * @param n  the specified exclusive max-value\n-     *\n      * @return the random int\n      */\n     public static int nextInt(int n) {\n         return nextInt(JVM_RANDOM, n);\n     }\n-    public static int nextInt(Random rnd, int n) {\n+    \n+    /**\n+     * <p>Returns a pseudorandom, uniformly distributed int value\n+     * between <code>0</code> (inclusive) and the specified value\n+     * (exclusive), from the given Random sequence.</p>\n+     *\n+     * @param random the Random sequence generator.\n+     * @param n  the specified exclusive max-value\n+     * @return the random int\n+     */\n+    public static int nextInt(Random random, int n) {\n         // check this cannot return 'n'\n-        return rnd.nextInt(n);\n-    }\n+        return random.nextInt(n);\n+    }\n+    \n     /**\n      * <p>Returns the next pseudorandom, uniformly distributed long value\n      * from the Math.random() sequence.</p>\n     public static long nextLong() {\n         return nextLong(JVM_RANDOM);\n     }\n-    public static long nextLong(Random rnd) {\n-        return rnd.nextLong();\n-    }\n+\n+    /**\n+     * <p>Returns the next pseudorandom, uniformly distributed long value\n+     * from the given Random sequence.</p>\n+     *\n+     * @param random the Random sequence generator.\n+     * @return the random long\n+     */\n+    public static long nextLong(Random random) {\n+        return random.nextLong();\n+    }\n+    \n     /**\n      * <p>Returns the next pseudorandom, uniformly distributed boolean value\n      * from the Math.random() sequence.</p>\n     public static boolean nextBoolean() {\n         return nextBoolean(JVM_RANDOM);\n     }\n-    public static boolean nextBoolean(Random rnd) {\n-        return rnd.nextBoolean();\n-    }\n+\n+    /**\n+     * <p>Returns the next pseudorandom, uniformly distributed boolean value\n+     * from the given random sequence.</p>\n+     *\n+     * @param random the Random sequence generator.\n+     * @return the random boolean\n+     */\n+    public static boolean nextBoolean(Random random) {\n+        return random.nextBoolean();\n+    }\n+    \n     /**\n      * <p>Returns the next pseudorandom, uniformly distributed float value\n      * between <code>0.0</code> and <code>1.0</code> from the Math.random()\n     public static float nextFloat() {\n         return nextFloat(JVM_RANDOM);\n     }\n-    public static float nextFloat(Random rnd) {\n-        return rnd.nextFloat();\n-    }\n-    /**\n-     * <p>Synonymous to the Math.random() call.</p>\n+\n+    /**\n+     * <p>Returns the next pseudorandom, uniformly distributed float value\n+     * between <code>0.0</code> and <code>1.0</code> from the given Random\n+     * sequence.</p>\n+     *\n+     * @param random the Random sequence generator.\n+     * @return the random float\n+     */\n+    public static float nextFloat(Random random) {\n+        return random.nextFloat();\n+    }\n+    \n+    /**\n+     * <p>Returns the next pseudorandom, uniformly distributed float value\n+     * between <code>0.0</code> and <code>1.0</code> from the Math.random()\n+     * sequence.</p>\n      *\n      * @return the random double\n      */\n     public static double nextDouble() {\n         return nextDouble(JVM_RANDOM);\n     }\n-    public static double nextDouble(Random rnd) {\n-        return rnd.nextDouble();\n+\n+    /**\n+     * <p>Returns the next pseudorandom, uniformly distributed float value\n+     * between <code>0.0</code> and <code>1.0</code> from the given Random\n+     * sequence.</p>\n+     *\n+     * @param random the Random sequence generator.\n+     * @return the random double\n+     */\n+    public static double nextDouble(Random random) {\n+        return random.nextDouble();\n     }\n     \n }", "timestamp": 1072659507, "metainfo": ""}