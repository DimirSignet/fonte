{"sha": "e888bebad8f8f4def4be5e7f112de967aaba670f", "log": "Add methods for Cloneables to ObjectUtils (LANG-576).  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n package org.apache.commons.lang3;\n \n import java.io.Serializable;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import org.apache.commons.lang3.exception.CloneFailedException;\n \n /**\n  * <p>Operations on <code>Object</code>.</p>\n             return c1 != null ? c1 : c2;\n         }\n     }\n+    \n+    /**\n+     * Clone an object.\n+     * \n+     * @param <T> the type of the object\n+     * @param o the object to clone\n+     * @return the clone if the object implements {@link Cloneable} otherwise <code>null</code>\n+     * @throws CloneFailedException if the object is cloneable and the clone operation fails\n+     * @since 3.0\n+     */\n+    public static <T> T clone(final T o) {\n+        if (o instanceof Cloneable) {\n+            try {\n+                final Method clone = o.getClass().getMethod(\"clone\", (Class[])null);\n+                @SuppressWarnings(\"unchecked\")\n+                final T result = (T)clone.invoke(o, (Object[])null);\n+                return result;\n+            } catch (final NoSuchMethodException e) {\n+                throw new CloneFailedException(\"Cloneable type has no clone method\", e);\n+            } catch (final IllegalAccessException e) {\n+                throw new CloneFailedException(\"Cannot clone Cloneable type\", e);\n+            } catch (final InvocationTargetException e) {\n+                throw new CloneFailedException(\"Exception cloning Cloneable type\", e.getCause());\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Clone an object if possible.\n+     * \n+     * @param <T> the type of the object\n+     * @param o the object to clone\n+     * @return the clone if the object implements {@link Cloneable} otherwise the object itself\n+     * @throws CloneFailedException if the object is cloneable and the clone operation fails\n+     * @since 3.0\n+     */\n+    public static <T> T cloneIfPossible(final T o) {\n+        final T clone = clone(o);\n+        return clone == null ? o : clone;\n+    }\n \n     // Null\n     //-----------------------------------------------------------------------\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/exception/CloneFailedException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.exception;\n+\n+/**\n+ * Exception thrown when a clone cannot be created. In contrast to\n+ * {@link CloneNotSupportedException} this is a {@link RuntimeException}.\n+ * \n+ * @author Apache Software Foundation\n+ * @since 3.0\n+ */\n+public class CloneFailedException extends RuntimeException {\n+    // ~ Static fields/initializers ---------------------------------------------\n+\n+    private static final long serialVersionUID = 20091223L;\n+\n+    // ~ Constructors -----------------------------------------------------------\n+\n+    /**\n+     * Constructs a CloneFailedException.\n+     * \n+     * @param message description of the exception\n+     * @since upcoming\n+     */\n+    public CloneFailedException(final String message) {\n+        super(message);\n+    }\n+\n+    /**\n+     * Constructs a CloneFailedException.\n+     * \n+     * @param cause cause of the exception\n+     * @since upcoming\n+     */\n+    public CloneFailedException(final Throwable cause) {\n+        super(cause);\n+    }\n+\n+    /**\n+     * Constructs a CloneFailedException.\n+     * \n+     * @param message description of the exception\n+     * @param cause cause of the exception\n+     * @since upcoming\n+     */\n+    public CloneFailedException(final String message, final Throwable cause) {\n+        super(message, cause);\n+    }\n+}\n--- a/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n import java.util.Calendar;\n import java.util.Date;\n \n+import org.apache.commons.lang3.exception.CloneFailedException;\n+import org.apache.commons.lang3.mutable.MutableObject;\n+\n import junit.framework.TestCase;\n \n /**\n         assertNull( ObjectUtils.min((String)null, (String)null) );\n     }\n \n+    /**\n+     * Tests {@link ObjectUtils#clone(Object)} with a cloneable object.\n+     */\n+    public void testCloneOfCloneable() {\n+        final CloneableString string = new CloneableString(\"apache\");\n+        final CloneableString stringClone = ObjectUtils.clone(string);\n+        assertEquals(\"apache\", stringClone.getValue());\n+    }\n+\n+    /**\n+     * Tests {@link ObjectUtils#clone(Object)} with a not cloneable object.\n+     */\n+    public void testCloneOfNotCloneable() {\n+        final String string = new String(\"apache\");\n+        assertNull(ObjectUtils.clone(string));\n+    }\n+\n+    /**\n+     * Tests {@link ObjectUtils#clone(Object)} with an uncloneable object.\n+     */\n+    public void testCloneOfUncloneable() {\n+        final UncloneableString string = new UncloneableString(\"apache\");\n+        try {\n+            ObjectUtils.clone(string);\n+            fail(\"Thrown \" + CloneFailedException.class.getName() + \" expected\");\n+        } catch (final CloneFailedException e) {\n+            assertEquals(NoSuchMethodException.class, e.getCause().getClass());\n+        }\n+    }\n+\n+    /**\n+     * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object.\n+     */\n+    public void testPossibleCloneOfCloneable() {\n+        final CloneableString string = new CloneableString(\"apache\");\n+        final CloneableString stringClone = ObjectUtils.cloneIfPossible(string);\n+        assertEquals(\"apache\", stringClone.getValue());\n+    }\n+\n+    /**\n+     * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a not cloneable object.\n+     */\n+    public void testPossibleCloneOfNotCloneable() {\n+        final String string = new String(\"apache\");\n+        assertSame(string, ObjectUtils.cloneIfPossible(string));\n+    }\n+\n+    /**\n+     * Tests {@link ObjectUtils#cloneIfPossible(Object)} with an uncloneable object.\n+     */\n+    public void testPossibleCloneOfUncloneable() {\n+        final UncloneableString string = new UncloneableString(\"apache\");\n+        try {\n+            ObjectUtils.cloneIfPossible(string);\n+            fail(\"Thrown \" + CloneFailedException.class.getName() + \" expected\");\n+        } catch (final CloneFailedException e) {\n+            assertEquals(NoSuchMethodException.class, e.getCause().getClass());\n+        }\n+    }\n+\n+    /**\n+     * String that is cloneable.\n+     */\n+    static final class CloneableString extends MutableObject<String> implements Cloneable {\n+        private static final long serialVersionUID = 1L;\n+        CloneableString(final String s) {\n+            super(s);\n+        }\n+\n+        @Override\n+        public CloneableString clone() throws CloneNotSupportedException {\n+            return (CloneableString)super.clone();\n+        }\n+    }\n+\n+    /**\n+     * String that is not cloneable.\n+     */\n+    static final class UncloneableString extends MutableObject<String> implements Cloneable {\n+        private static final long serialVersionUID = 1L;\n+        UncloneableString(final String s) {\n+            super(s);\n+        }\n+    }\n+\n }", "timestamp": 1265844125, "metainfo": ""}