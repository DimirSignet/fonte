{"sha": "8e2568a56bd7ebe666da514df1bedc8f32223219", "log": "http://issues.apache.org/bugzilla/show_bug.cgi?id=37596 The method DurationFormatUtils.formatDurationWords incorrectly outputs numbers ending in \"1\" without a plural \"s\" postfix for the time unit. Added a fix and tests that \"1 <unit>s\" gets converted to \"1 <unit>\" but that \"11 <unit>s\" is left alone.  ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n             }\n         }\n         // handle plurals\n-        duration = StringUtils.replaceOnce(duration, \"1 seconds\", \"1 second\");\n-        duration = StringUtils.replaceOnce(duration, \"1 minutes\", \"1 minute\");\n-        duration = StringUtils.replaceOnce(duration, \"1 hours\", \"1 hour\");\n-        duration = StringUtils.replaceOnce(duration, \"1 days\", \"1 day\");\n-        return duration;\n+        duration = \" \" + duration;\n+        duration = StringUtils.replaceOnce(duration, \" 1 seconds\", \" 1 second\");\n+        duration = StringUtils.replaceOnce(duration, \" 1 minutes\", \" 1 minute\");\n+        duration = StringUtils.replaceOnce(duration, \" 1 hours\", \" 1 hour\");\n+        duration = StringUtils.replaceOnce(duration, \" 1 days\", \" 1 day\");\n+        return duration.trim();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DurationFormatUtilsTest.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang.time;\n \n import java.lang.reflect.Constructor;\n \n /**\n  * TestCase for DurationFormatUtils.\n- *\n+ * \n  * @author Apache Ant - DateUtilsTest\n  * @author <a href=\"mailto:sbailliez@apache.org\">Stephane Bailliez</a>\n  * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n         super(s);\n     }\n \n-    //-----------------------------------------------------------------------\n+    // -----------------------------------------------------------------------\n     public void testConstructor() {\n         assertNotNull(new DurationFormatUtils());\n         Constructor[] cons = DurationFormatUtils.class.getDeclaredConstructors();\n         assertEquals(true, Modifier.isPublic(DurationFormatUtils.class.getModifiers()));\n         assertEquals(false, Modifier.isFinal(DurationFormatUtils.class.getModifiers()));\n     }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testFormatDurationWords(){\n+\n+    // -----------------------------------------------------------------------\n+    public void testFormatDurationWords() {\n         String text = null;\n-        \n-        text = DurationFormatUtils.formatDurationWords(50*1000, true, false);\n+\n+        text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false);\n         assertEquals(\"50 seconds\", text);\n-        text = DurationFormatUtils.formatDurationWords(65*1000, true, false);\n+        text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false);\n         assertEquals(\"1 minute 5 seconds\", text);\n-        text = DurationFormatUtils.formatDurationWords(120*1000, true, false);\n+        text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false);\n         assertEquals(\"2 minutes 0 seconds\", text);\n-        text = DurationFormatUtils.formatDurationWords(121*1000, true, false);\n+        text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false);\n         assertEquals(\"2 minutes 1 second\", text);\n-        text = DurationFormatUtils.formatDurationWords(72*60*1000, true, false);\n+        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false);\n         assertEquals(\"1 hour 12 minutes 0 seconds\", text);\n-        text = DurationFormatUtils.formatDurationWords(24*60*60*1000, true, false);\n+        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false);\n         assertEquals(\"1 day 0 hours 0 minutes 0 seconds\", text);\n-        \n-        text = DurationFormatUtils.formatDurationWords(50*1000, true, true);\n+\n+        text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true);\n         assertEquals(\"50 seconds\", text);\n-        text = DurationFormatUtils.formatDurationWords(65*1000, true, true);\n+        text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true);\n         assertEquals(\"1 minute 5 seconds\", text);\n-        text = DurationFormatUtils.formatDurationWords(120*1000, true, true);\n+        text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true);\n         assertEquals(\"2 minutes\", text);\n-        text = DurationFormatUtils.formatDurationWords(121*1000, true, true);\n+        text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true);\n         assertEquals(\"2 minutes 1 second\", text);\n-        text = DurationFormatUtils.formatDurationWords(72*60*1000, true, true);\n+        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true);\n         assertEquals(\"1 hour 12 minutes\", text);\n-        text = DurationFormatUtils.formatDurationWords(24*60*60*1000, true, true);\n+        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true);\n         assertEquals(\"1 day\", text);\n-        \n-        text = DurationFormatUtils.formatDurationWords(50*1000, false, true);\n+\n+        text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true);\n         assertEquals(\"0 days 0 hours 0 minutes 50 seconds\", text);\n-        text = DurationFormatUtils.formatDurationWords(65*1000, false, true);\n+        text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true);\n         assertEquals(\"0 days 0 hours 1 minute 5 seconds\", text);\n-        text = DurationFormatUtils.formatDurationWords(120*1000, false, true);\n+        text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true);\n         assertEquals(\"0 days 0 hours 2 minutes\", text);\n-        text = DurationFormatUtils.formatDurationWords(121*1000, false, true);\n+        text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true);\n         assertEquals(\"0 days 0 hours 2 minutes 1 second\", text);\n-        text = DurationFormatUtils.formatDurationWords(72*60*1000, false, true);\n+        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true);\n         assertEquals(\"0 days 1 hour 12 minutes\", text);\n-        text = DurationFormatUtils.formatDurationWords(24*60*60*1000, false, true);\n+        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true);\n         assertEquals(\"1 day\", text);\n-        \n-        text = DurationFormatUtils.formatDurationWords(50*1000, false, false);\n+\n+        text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false);\n         assertEquals(\"0 days 0 hours 0 minutes 50 seconds\", text);\n-        text = DurationFormatUtils.formatDurationWords(65*1000, false, false);\n+        text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false);\n         assertEquals(\"0 days 0 hours 1 minute 5 seconds\", text);\n-        text = DurationFormatUtils.formatDurationWords(120*1000, false, false);\n+        text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false);\n         assertEquals(\"0 days 0 hours 2 minutes 0 seconds\", text);\n-        text = DurationFormatUtils.formatDurationWords(121*1000, false, false);\n+        text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false);\n         assertEquals(\"0 days 0 hours 2 minutes 1 second\", text);\n-        text = DurationFormatUtils.formatDurationWords(72*60*1000, false, false);\n+        text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false);\n         assertEquals(\"0 days 1 hour 12 minutes 0 seconds\", text);\n-        text = DurationFormatUtils.formatDurationWords(48*60*60*1000 + 72*60*1000 , false, false);\n+        text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);\n+        assertEquals(\"1 day 1 hour 12 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false);\n         assertEquals(\"2 days 1 hour 12 minutes 0 seconds\", text);\n-    }\n-\n-    public void testFormatDurationHMS(){\n+        for (int i = 2; i < 31; i++) {\n+            text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000, false, false);\n+            // assertEquals(i + \" days 0 hours 0 minutes 0 seconds\", text);\n+            //            \n+            // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours\n+            // -2 minutes -47...>\n+            // at junit.framework.Assert.assertEquals(Assert.java:81)\n+            // at junit.framework.Assert.assertEquals(Assert.java:87)\n+            // at\n+            // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124)\n+            // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n+            // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n+            // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n+            // at java.lang.reflect.Method.invoke(Method.java:324)\n+            // at junit.framework.TestCase.runTest(TestCase.java:154)\n+            // at junit.framework.TestCase.runBare(TestCase.java:127)\n+            // at junit.framework.TestResult$1.protect(TestResult.java:106)\n+            // at junit.framework.TestResult.runProtected(TestResult.java:124)\n+            // at junit.framework.TestResult.run(TestResult.java:109)\n+            // at junit.framework.TestCase.run(TestCase.java:118)\n+            // at junit.framework.TestSuite.runTest(TestSuite.java:208)\n+            // at junit.framework.TestSuite.run(TestSuite.java:203)\n+            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478)\n+            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344)\n+            // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196)\n+        }\n+    }\n+\n+    /**\n+     * Tests that \"1 <unit>s\" gets converted to \"1 <unit>\" but that \"11 <unit>s\" is left alone.\n+     */\n+    public void testFormatDurationPluralWords() {\n+        long oneSecond = 1000;\n+        long oneMinute = oneSecond * 60;\n+        long oneHour = oneMinute * 60;\n+        long oneDay = oneHour * 24;\n+        String text = null;\n+\n+        text = DurationFormatUtils.formatDurationWords(oneSecond, false, false);\n+        assertEquals(\"0 days 0 hours 0 minutes 1 second\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneSecond * 2, false, false);\n+        assertEquals(\"0 days 0 hours 0 minutes 2 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneSecond * 11, false, false);\n+        assertEquals(\"0 days 0 hours 0 minutes 11 seconds\", text);\n+\n+        text = DurationFormatUtils.formatDurationWords(oneMinute, false, false);\n+        assertEquals(\"0 days 0 hours 1 minute 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneMinute * 2, false, false);\n+        assertEquals(\"0 days 0 hours 2 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneMinute * 11, false, false);\n+        assertEquals(\"0 days 0 hours 11 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneMinute + oneSecond, false, false);\n+        assertEquals(\"0 days 0 hours 1 minute 1 second\", text);\n+\n+        text = DurationFormatUtils.formatDurationWords(oneHour, false, false);\n+        assertEquals(\"0 days 1 hour 0 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneHour * 2, false, false);\n+        assertEquals(\"0 days 2 hours 0 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneHour * 11, false, false);\n+        assertEquals(\"0 days 11 hours 0 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneHour + oneMinute + oneSecond, false, false);\n+        assertEquals(\"0 days 1 hour 1 minute 1 second\", text);\n+\n+        text = DurationFormatUtils.formatDurationWords(oneDay, false, false);\n+        assertEquals(\"1 day 0 hours 0 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneDay * 2, false, false);\n+        assertEquals(\"2 days 0 hours 0 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneDay * 11, false, false);\n+        assertEquals(\"11 days 0 hours 0 minutes 0 seconds\", text);\n+        text = DurationFormatUtils.formatDurationWords(oneDay + oneHour + oneMinute + oneSecond, false, false);\n+        assertEquals(\"1 day 1 hour 1 minute 1 second\", text);\n+    }\n+\n+    public void testFormatDurationHMS() {\n         long time = 0;\n         assertEquals(\"0:00:00.000\", DurationFormatUtils.formatDurationHMS(time));\n-        \n+\n         time = 1;\n         assertEquals(\"0:00:00.001\", DurationFormatUtils.formatDurationHMS(time));\n-        \n+\n         time = 15;\n         assertEquals(\"0:00:00.015\", DurationFormatUtils.formatDurationHMS(time));\n-        \n+\n         time = 165;\n         assertEquals(\"0:00:00.165\", DurationFormatUtils.formatDurationHMS(time));\n-        \n+\n         time = 1675;\n         assertEquals(\"0:00:01.675\", DurationFormatUtils.formatDurationHMS(time));\n-        \n+\n         time = 13465;\n         assertEquals(\"0:00:13.465\", DurationFormatUtils.formatDurationHMS(time));\n-        \n+\n         time = 72789;\n         assertEquals(\"0:01:12.789\", DurationFormatUtils.formatDurationHMS(time));\n-        \n+\n         time = 12789 + 32 * 60000;\n         assertEquals(\"0:32:12.789\", DurationFormatUtils.formatDurationHMS(time));\n-        \n+\n         time = 12789 + 62 * 60000;\n         assertEquals(\"1:02:12.789\", DurationFormatUtils.formatDurationHMS(time));\n     }\n \n     public void testFormatDuration() {\n         long duration = 0;\n-        assertEquals( \"0\", DurationFormatUtils.formatDuration(duration, \"y\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatDuration(duration, \"M\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatDuration(duration, \"d\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatDuration(duration, \"H\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatDuration(duration, \"m\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatDuration(duration, \"s\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatDuration(duration, \"S\") );\n-        assertEquals( \"0000\", DurationFormatUtils.formatDuration(duration, \"SSSS\") );\n-        assertEquals( \"0000\", DurationFormatUtils.formatDuration(duration, \"yyyy\") );\n-        assertEquals( \"0000\", DurationFormatUtils.formatDuration(duration, \"yyMM\") );\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"y\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"M\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"d\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"H\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"m\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"s\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"S\"));\n+        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"SSSS\"));\n+        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"yyyy\"));\n+        assertEquals(\"0000\", DurationFormatUtils.formatDuration(duration, \"yyMM\"));\n \n         duration = 60 * 1000;\n-        assertEquals( \"0\", DurationFormatUtils.formatDuration(duration, \"y\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatDuration(duration, \"M\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatDuration(duration, \"d\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatDuration(duration, \"H\") );\n-        assertEquals( \"1\", DurationFormatUtils.formatDuration(duration, \"m\") );\n-        assertEquals( \"60\", DurationFormatUtils.formatDuration(duration, \"s\") );\n-        assertEquals( \"60000\", DurationFormatUtils.formatDuration(duration, \"S\") );\n-        assertEquals( \"01:00\", DurationFormatUtils.formatDuration(duration, \"mm:ss\") );\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"y\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"M\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"d\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatDuration(duration, \"H\"));\n+        assertEquals(\"1\", DurationFormatUtils.formatDuration(duration, \"m\"));\n+        assertEquals(\"60\", DurationFormatUtils.formatDuration(duration, \"s\"));\n+        assertEquals(\"60000\", DurationFormatUtils.formatDuration(duration, \"S\"));\n+        assertEquals(\"01:00\", DurationFormatUtils.formatDuration(duration, \"mm:ss\"));\n \n         Calendar base = Calendar.getInstance();\n         base.set(2000, 0, 1, 0, 0, 0);\n         base.set(Calendar.MILLISECOND, 0);\n-        \n+\n         Calendar cal = Calendar.getInstance();\n         cal.set(2003, 1, 1, 0, 0, 0);\n         cal.set(Calendar.MILLISECOND, 0);\n         // don't use 1970 in test as time zones were less reliable in 1970 than now\n         // remember that duration formatting ignores time zones, working on strict hour lengths\n         int days = 366 + 365 + 365 + 31;\n-        assertEquals( \"0 0 \" + days, DurationFormatUtils.formatDuration(duration, \"y M d\") );\n-    }\n-\n-    public void testFormatPeriodISO(){\n+        assertEquals(\"0 0 \" + days, DurationFormatUtils.formatDuration(duration, \"y M d\"));\n+    }\n+\n+    public void testFormatPeriodISO() {\n         TimeZone timeZone = TimeZone.getTimeZone(\"GMT-3\");\n         Calendar base = Calendar.getInstance(timeZone);\n         base.set(1970, 0, 1, 0, 0, 0);\n         base.set(Calendar.MILLISECOND, 0);\n-        \n+\n         Calendar cal = Calendar.getInstance(timeZone);\n         cal.set(2002, 1, 23, 9, 11, 12);\n         cal.set(Calendar.MILLISECOND, 1);\n         text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);\n         assertEquals(\"2002-02-23T09:11:12-03:00\", text);\n         // test fixture is the same as above, but now with extended format.\n-        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\n+        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\n+                DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\n         assertEquals(\"P32Y1M22DT9H11M12.001S\", text);\n         // test fixture from example in http://www.w3.org/TR/xmlschema-2/#duration\n         cal.set(1971, 1, 3, 10, 30, 0);\n         cal.set(Calendar.MILLISECOND, 0);\n-        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\n+        text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),\n+                DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone);\n         assertEquals(\"P1Y1M2DT10H30M0.000S\", text);\n         // want a way to say 'don't print the seconds in format()' or other fields for that matter:\n-        //assertEquals(\"P1Y2M3DT10H30M\", text);\n+        // assertEquals(\"P1Y2M3DT10H30M\", text);\n     }\n \n     public void testFormatPeriod() {\n         cal1970.set(1970, 0, 1, 0, 0, 0);\n         cal1970.set(Calendar.MILLISECOND, 0);\n         long time1970 = cal1970.getTime().getTime();\n-        \n-        assertEquals( \"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"y\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"M\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"d\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"H\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"m\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"s\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"S\") );\n-        assertEquals( \"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"SSSS\") );\n-        assertEquals( \"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyyy\") );\n-        assertEquals( \"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyMM\") );\n+\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"y\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"M\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"d\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"H\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"m\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"s\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time1970, \"S\"));\n+        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"SSSS\"));\n+        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyyy\"));\n+        assertEquals(\"0000\", DurationFormatUtils.formatPeriod(time1970, time1970, \"yyMM\"));\n \n         long time = time1970 + 60 * 1000;\n-        assertEquals( \"0\", DurationFormatUtils.formatPeriod(time1970, time, \"y\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatPeriod(time1970, time, \"M\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatPeriod(time1970, time, \"d\") );\n-        assertEquals( \"0\", DurationFormatUtils.formatPeriod(time1970, time, \"H\") );\n-        assertEquals( \"1\", DurationFormatUtils.formatPeriod(time1970, time, \"m\") );\n-        assertEquals( \"60\", DurationFormatUtils.formatPeriod(time1970, time, \"s\") );\n-        assertEquals( \"60000\", DurationFormatUtils.formatPeriod(time1970, time, \"S\") );\n-        assertEquals( \"01:00\", DurationFormatUtils.formatPeriod(time1970, time, \"mm:ss\") );\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"y\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"M\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"d\"));\n+        assertEquals(\"0\", DurationFormatUtils.formatPeriod(time1970, time, \"H\"));\n+        assertEquals(\"1\", DurationFormatUtils.formatPeriod(time1970, time, \"m\"));\n+        assertEquals(\"60\", DurationFormatUtils.formatPeriod(time1970, time, \"s\"));\n+        assertEquals(\"60000\", DurationFormatUtils.formatPeriod(time1970, time, \"S\"));\n+        assertEquals(\"01:00\", DurationFormatUtils.formatPeriod(time1970, time, \"mm:ss\"));\n \n         Calendar cal = Calendar.getInstance();\n         cal.set(1973, 6, 1, 0, 0, 0);\n         cal.set(Calendar.MILLISECOND, 0);\n         time = cal.getTime().getTime();\n-        assertEquals( \"36\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\") );\n-        assertEquals( \"3 years 6 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\") );\n-        assertEquals( \"03/06\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\") );\n+        assertEquals(\"36\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n+        assertEquals(\"3 years 6 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n+        assertEquals(\"03/06\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n \n         cal.set(1973, 10, 1, 0, 0, 0);\n         cal.set(Calendar.MILLISECOND, 0);\n         time = cal.getTime().getTime();\n-        assertEquals( \"310\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\") );\n-        assertEquals( \"3 years 10 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\") );\n-        assertEquals( \"03/10\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\") );\n+        assertEquals(\"310\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n+        assertEquals(\"3 years 10 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n+        assertEquals(\"03/10\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n \n         cal.set(1974, 0, 1, 0, 0, 0);\n         cal.set(Calendar.MILLISECOND, 0);\n         time = cal.getTime().getTime();\n-        assertEquals( \"40\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\") );\n-        assertEquals( \"4 years 0 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\") );\n-        assertEquals( \"04/00\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\") );\n-        assertEquals( \"48\", DurationFormatUtils.formatPeriod(time1970, time, \"M\") );\n-        assertEquals( \"48\", DurationFormatUtils.formatPeriod(time1970, time, \"MM\") );\n-        assertEquals( \"048\", DurationFormatUtils.formatPeriod(time1970, time, \"MMM\") );\n+        assertEquals(\"40\", DurationFormatUtils.formatPeriod(time1970, time, \"yM\"));\n+        assertEquals(\"4 years 0 months\", DurationFormatUtils.formatPeriod(time1970, time, \"y' years 'M' months'\"));\n+        assertEquals(\"04/00\", DurationFormatUtils.formatPeriod(time1970, time, \"yy/MM\"));\n+        assertEquals(\"48\", DurationFormatUtils.formatPeriod(time1970, time, \"M\"));\n+        assertEquals(\"48\", DurationFormatUtils.formatPeriod(time1970, time, \"MM\"));\n+        assertEquals(\"048\", DurationFormatUtils.formatPeriod(time1970, time, \"MMM\"));\n     }\n \n     public void testLexx() {\n         // tests each constant\n-        assertArrayEquals( \n-          new DurationFormatUtils.Token[] { \n-            new DurationFormatUtils.Token( DurationFormatUtils.y, 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.M, 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.d, 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.H, 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.m, 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.s, 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.S, 1)\n-          }, DurationFormatUtils.lexx(\"yMdHmsS\") \n-        );\n+        assertArrayEquals(new DurationFormatUtils.Token[]{\n+            new DurationFormatUtils.Token(DurationFormatUtils.y, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.M, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.d, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.m, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.s, 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx(\"yMdHmsS\"));\n \n         // tests the ISO8601-like\n-        assertArrayEquals( \n-          new DurationFormatUtils.Token[] { \n-            new DurationFormatUtils.Token( DurationFormatUtils.H, 1),\n-            new DurationFormatUtils.Token( new StringBuffer(\":\"), 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.m, 2),\n-            new DurationFormatUtils.Token( new StringBuffer(\":\"), 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.s, 2),\n-            new DurationFormatUtils.Token( new StringBuffer(\".\"), 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.S, 3)\n-          }, DurationFormatUtils.lexx(\"H:mm:ss.SSS\")\n-        );\n+        assertArrayEquals(new DurationFormatUtils.Token[]{\n+            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\":\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.m, 2),\n+            new DurationFormatUtils.Token(new StringBuffer(\":\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.s, 2),\n+            new DurationFormatUtils.Token(new StringBuffer(\".\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx(\"H:mm:ss.SSS\"));\n \n         // test the iso extended format\n-        assertArrayEquals( \n-          new DurationFormatUtils.Token[] { \n-            new DurationFormatUtils.Token( new StringBuffer(\"P\"), 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.y, 4),\n-            new DurationFormatUtils.Token( new StringBuffer(\"Y\"), 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.M, 1),\n-            new DurationFormatUtils.Token( new StringBuffer(\"M\"), 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.d, 1),\n-            new DurationFormatUtils.Token( new StringBuffer(\"DT\"), 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.H, 1),\n-            new DurationFormatUtils.Token( new StringBuffer(\"H\"), 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.m, 1),\n-            new DurationFormatUtils.Token( new StringBuffer(\"M\"), 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.s, 1),\n-            new DurationFormatUtils.Token( new StringBuffer(\".\"), 1),\n-            new DurationFormatUtils.Token( DurationFormatUtils.S, 1),\n-            new DurationFormatUtils.Token( new StringBuffer(\"S\"), 1)\n-          }, \n-          DurationFormatUtils.lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)\n-        );\n+        assertArrayEquals(new DurationFormatUtils.Token[]{\n+            new DurationFormatUtils.Token(new StringBuffer(\"P\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.y, 4),\n+            new DurationFormatUtils.Token(new StringBuffer(\"Y\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.M, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\"M\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.d, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\"DT\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\"H\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.m, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\"M\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.s, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\".\"), 1),\n+            new DurationFormatUtils.Token(DurationFormatUtils.S, 1),\n+            new DurationFormatUtils.Token(new StringBuffer(\"S\"), 1)}, DurationFormatUtils\n+                .lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN));\n \n         // test failures in equals\n-        DurationFormatUtils.Token token = new DurationFormatUtils.Token( DurationFormatUtils.y, 4 );\n-        assertFalse( \"Token equal to non-Token class. \", token.equals(new Object()) );\n-        assertFalse( \"Token equal to Token with wrong value class. \", token.equals(\n-            new DurationFormatUtils.Token( new Object() )\n-        ) );\n-        assertFalse( \"Token equal to Token with different count. \", token.equals(\n-            new DurationFormatUtils.Token( DurationFormatUtils.y, 1 )\n-        ) );\n-        DurationFormatUtils.Token numToken = new DurationFormatUtils.Token( new Integer(1), 4 );\n-        assertTrue( \"Token with Number value not equal to itself. \", numToken.equals( numToken ) );\n-    }\n+        DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4);\n+        assertFalse(\"Token equal to non-Token class. \", token.equals(new Object()));\n+        assertFalse(\"Token equal to Token with wrong value class. \", token.equals(new DurationFormatUtils.Token(\n+                new Object())));\n+        assertFalse(\"Token equal to Token with different count. \", token.equals(new DurationFormatUtils.Token(\n+                DurationFormatUtils.y, 1)));\n+        DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(new Integer(1), 4);\n+        assertTrue(\"Token with Number value not equal to itself. \", numToken.equals(numToken));\n+    }\n+\n     private void assertArrayEquals(DurationFormatUtils.Token[] obj1, DurationFormatUtils.Token[] obj2) {\n-        assertEquals( \"Arrays are unequal length. \", obj1.length, obj2.length );\n-        for(int i=0; i<obj1.length; i++) {\n-            assertTrue( \"Index \" + i + \" not equal, \" + obj1[i] + \" vs \" + obj2, obj1[i].equals(obj2[i]));\n+        assertEquals(\"Arrays are unequal length. \", obj1.length, obj2.length);\n+        for (int i = 0; i < obj1.length; i++) {\n+            assertTrue(\"Index \" + i + \" not equal, \" + obj1[i] + \" vs \" + obj2, obj1[i].equals(obj2[i]));\n         }\n     }\n ", "timestamp": 1132705184, "metainfo": ""}