{"sha": "43094f16f6ea9d77ea429749d54606a5ae182fa5", "log": "Add trim()  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n         }\n         \n         int half = size / 2;\n+        char[] buf = buffer;\n         for (int leftIdx = 0, rightIdx = size - 1; leftIdx < half; leftIdx++,rightIdx--) {\n-            char swap = buffer[leftIdx];\n-            buffer[leftIdx] = buffer[rightIdx];\n-            buffer[rightIdx] = swap;\n+            char swap = buf[leftIdx];\n+            buf[leftIdx] = buf[rightIdx];\n+            buf[rightIdx] = swap;\n+        }\n+        return this;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Reverses the string builder placing each character in the opposite index.\n+     * \n+     * @return this, to enable chaining\n+     */\n+    public StrBuilder trim() {\n+        if (size == 0) {\n+            return this;\n+        }\n+        int len = size;\n+        char[] buf = buffer;\n+        int pos = 0;\n+        while (pos < len && buf[pos] <= ' ') {\n+            pos++;\n+        }\n+        while (pos < len && buf[len - 1] <= ' ') {\n+            len--;\n+        }\n+        if (len < size) {\n+            delete(len, size);\n+        }\n+        if (pos > 0) {\n+            delete(0, pos);\n         }\n         return this;\n     }\n--- a/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n         assertSame(sb, sb.minimizeCapacity());\n         assertSame(sb, sb.clear());\n         assertSame(sb, sb.reverse());\n+        assertSame(sb, sb.trim());\n     }\n \n     //-----------------------------------------------------------------------\n     public void testReverse() {\n         StrBuilder sb = new StrBuilder();\n         assertEquals(\"\", sb.reverse().toString());\n-        sb.append(true);\n+        \n+        sb.clear().append(true);\n         assertEquals(\"eurt\", sb.reverse().toString());\n         assertEquals(\"true\", sb.reverse().toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTrim() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(\"\", sb.reverse().toString());\n+        \n+        sb.clear().append(\" \\u0000 \");\n+        assertEquals(\"\", sb.trim().toString());\n+        \n+        sb.clear().append(\" \\u0000 a b c\");\n+        assertEquals(\"a b c\", sb.trim().toString());\n+        \n+        sb.clear().append(\"a b c \\u0000 \");\n+        assertEquals(\"a b c\", sb.trim().toString());\n+        \n+        sb.clear().append(\" \\u0000 a b c \\u0000 \");\n+        assertEquals(\"a b c\", sb.trim().toString());\n+        \n+        sb.clear().append(\"a b c\");\n+        assertEquals(\"a b c\", sb.trim().toString());\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1125143191, "metainfo": ""}