{"sha": "209cd96451c4c5bf1f4c5fee6453c481946aa596", "log": "If a name occurs also as a direct left child of an assignment expression, FlowSensitiveInlineVariables may still inline the variable. For example, x = x + 1.  R=acleung DELTA=17  (16 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=223255   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n \n         @Override\n         public void visit(NodeTraversal t, Node n, Node parent) {\n-          if (NodeUtil.isName(n) && n.getString().equals(varName)) {\n+          if (NodeUtil.isName(n) && n.getString().equals(varName) &&\n+              // do not count in if it is left child of an assignment operator\n+              !(NodeUtil.isAssign(parent) &&\n+               (parent.getFirstChild() == n))) {\n             numUseWithinUseCfgNode++;\n           }\n         }\n--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n     inline(\"var x; x = 1; print(x)\", \"var x; print(1)\");\n     inline(\"var x; x = 1; x\", \"var x; 1\");\n     inline(\"var x; x = 1; var a = x\", \"var x; var a = 1\");\n+    inline(\"var x; x = 1; x = x + 1\", \"var x; x = 1 + 1\");\n   }\n \n   public void testSimpleVar() {\n     inline(\"var x = 1; print(x)\", \"var x; print(1)\");\n     inline(\"var x = 1; x\", \"var x; 1\");\n     inline(\"var x = 1; var a = x\", \"var x; var a = 1\");\n+    inline(\"var x = 1; x = x + 1\", \"var x; x = 1 + 1\");\n   }\n \n   public void testExported() {\n     noInline(\"var x; function foo() { var y = x; print(y) }\");\n   }\n \n+  public void testInlineIfNameIsLeftSideOfAssign() {\n+    inline(\"var x = 1; x = print(x) + 1\", \"var x; x = print(1) + 1\");\n+    inline(\"var x = 1; L: x = x + 2\", \"var x; L: x = 1 + 2\");\n+    inline(\"var x = 1; x = (x = x + 1)\", \"var x; x = (x = 1 + 1)\");\n+\n+    noInline(\"var x = 1; x = (x = (x = 10) + x)\");\n+    noInline(\"var x = 1; x = (f(x) = (x = 10) + x);\");\n+    noInline(\"var x = 1; x=-1,foo(x)\");\n+    noInline(\"var x = 1; x-=1,foo(x)\");\n+  }\n+\n   public void testInlineArguments() {\n     testSame(\"function _func(x) { print(x) }\");\n     testSame(\"function _func(x,y) { if(y) { x = 1 }; print(x) }\");", "timestamp": 1284586110, "metainfo": ""}