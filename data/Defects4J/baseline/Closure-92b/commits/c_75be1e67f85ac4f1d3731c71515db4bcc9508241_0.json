{"sha": "75be1e67f85ac4f1d3731c71515db4bcc9508241", "log": "Tweak testForEquality relation, so that functions are not comparable to strings, numbers, or booleans  R=moedinger DELTA=329  (59 added, 1 deleted, 269 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=211375   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/BooleanType.java\n+++ b/src/com/google/javascript/rhino/jstype/BooleanType.java\n \n   @Override\n   public TernaryValue testForEquality(JSType that) {\n-    if (UNKNOWN.equals(super.testForEquality(that))) {\n-      return UNKNOWN;\n+    TernaryValue result = super.testForEquality(that);\n+    if (result != null) {\n+      return result;\n     }\n     if (that.isUnknownType() || that.isSubtype(\n             getNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN)) ||\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n    * </ul>\n    */\n   public TernaryValue testForEquality(JSType that) {\n-    if (that.isAllType() || that.isNoType() || that.isUnknownType()) {\n+    return testForEqualityHelper(this, that);\n+  }\n+\n+  TernaryValue testForEqualityHelper(JSType aType, JSType bType) {\n+    if (bType.isAllType() || bType.isEmptyType() || bType.isUnknownType()) {\n       return UNKNOWN;\n     }\n-    if (that.isEnumElementType()) {\n-      return that.testForEquality(this);\n-    }\n-    if (that instanceof UnionType) {\n-      UnionType union = (UnionType) that;\n-      TernaryValue result = null;\n-      for (JSType t : union.alternates) {\n-        TernaryValue test = this.testForEquality(t);\n-        if (result == null) {\n-          result = test;\n-        } else if (!result.equals(test)) {\n-          return UNKNOWN;\n-        }\n+    if (aType.isFunctionType() || bType.isFunctionType()) {\n+      JSType otherType = aType.isFunctionType() ? bType : aType;\n+      // In theory, functions are comparable to anything except\n+      // null/undefined. For example, on FF3:\n+      // function() {} == 'function () {\\n}'\n+      // In practice, how a function serializes to a string is\n+      // implementation-dependent, so it does not really make sense to test\n+      // for equality with a string.\n+      if (otherType.isSubtype(getNativeType(JSTypeNative.OBJECT_TYPE))) {\n+        return TernaryValue.UNKNOWN;\n+      } else {\n+        return TernaryValue.FALSE;\n       }\n+    }\n+    if (bType.isEnumElementType() || bType.isUnionType()) {\n+      return bType.testForEquality(aType);\n     }\n     return null;\n   }\n--- a/src/com/google/javascript/rhino/jstype/NullType.java\n+++ b/src/com/google/javascript/rhino/jstype/NullType.java\n \n   @Override\n   public TernaryValue testForEquality(JSType that) {\n-    if (UNKNOWN.equals(super.testForEquality(that))) {\n-      return UNKNOWN;\n+    TernaryValue result = super.testForEquality(that);\n+    if (result != null) {\n+      return result;\n     }\n     if (that.isNullType() || that.isVoidType()) {\n       return TRUE;\n--- a/src/com/google/javascript/rhino/jstype/NumberType.java\n+++ b/src/com/google/javascript/rhino/jstype/NumberType.java\n \n   @Override\n   public TernaryValue testForEquality(JSType that) {\n-    if (UNKNOWN.equals(super.testForEquality(that))) {\n-      return UNKNOWN;\n+    TernaryValue result = super.testForEquality(that);\n+    if (result != null) {\n+      return result;\n     }\n     if (that.isUnknownType() || that.isSubtype(\n             getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))) {\n--- a/src/com/google/javascript/rhino/jstype/StringType.java\n+++ b/src/com/google/javascript/rhino/jstype/StringType.java\n \n   @Override\n   public TernaryValue testForEquality(JSType that) {\n-    if (UNKNOWN.equals(super.testForEquality(that))) {\n-      return UNKNOWN;\n+    TernaryValue result = super.testForEquality(that);\n+    if (result != null) {\n+      return result;\n     }\n     if (that.isUnknownType() || that.isSubtype(\n             getNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN))) {\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n \n   public void testBooleanPreservation3() throws Exception {\n     testTypes(\"/** @param {Function?} x\\n @return {boolean?} */\" +\n-        \"function f(x) { return x && x == \\\"a\\\"; }\");\n+        \"function f(x) { return x && x == \\\"a\\\"; }\",\n+        \"condition always evaluates to false\\n\" +\n+        \"left : Function\\n\" +\n+        \"right: string\");\n   }\n \n   public void testBooleanPreservation4() throws Exception {\n-    testTypes(\"/** @param {Function?} x\\n @return {boolean} */\" +\n+    testTypes(\"/** @param {Function?|boolean} x\\n @return {boolean} */\" +\n         \"function f(x) { return x && x == \\\"a\\\"; }\",\n         \"inconsistent return type\\n\" +\n         \"found   : (boolean|null|undefined)\\n\" +\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n \n   public void testBooleanPreservation3() throws Exception {\n     testTypes(\"/** @param {Function?} x\\n @return {boolean?} */\" +\n-        \"function f(x) { return x && x == \\\"a\\\"; }\");\n+        \"function f(x) { return x && x == \\\"a\\\"; }\",\n+        \"condition always evaluates to false\\n\" +\n+        \"left : Function\\n\" +\n+        \"right: string\");\n   }\n \n   public void testBooleanPreservation4() throws Exception {\n-    testTypes(\"/** @param {Function?} x\\n @return {boolean} */\" +\n+    testTypes(\"/** @param {Function?|boolean} x\\n @return {boolean} */\" +\n         \"function f(x) { return x && x == \\\"a\\\"; }\",\n         \"inconsistent return type\\n\" +\n         \"found   : (boolean|null)\\n\" +\n   public void testComparison10() throws Exception {\n     testTypes(\"/** @type {Array.<undefined>} */ var a = [];\" +\n         \"a[0] === null\");\n+  }\n+\n+  public void testComparison11() throws Exception {\n+    testTypes(\n+        \"(function(){}) == 'x'\",\n+        \"condition always evaluates to false\\n\" +\n+        \"left : function (): undefined\\n\" +\n+        \"right: string\");\n+  }\n+\n+  public void testComparison12() throws Exception {\n+    testTypes(\n+        \"(function(){}) == 3\",\n+        \"condition always evaluates to false\\n\" +\n+        \"left : function (): undefined\\n\" +\n+        \"right: number\");\n+  }\n+\n+  public void testComparison13() throws Exception {\n+    testTypes(\n+        \"(function(){}) == false\",\n+        \"condition always evaluates to false\\n\" +\n+        \"left : function (): undefined\\n\" +\n+        \"right: boolean\");\n   }\n \n   public void testEnumStaticMethod1() throws Exception {\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n         canTestForEqualityWith(ALL_TYPE));\n     assertTrue(U2U_CONSTRUCTOR_TYPE.\n         canTestForEqualityWith(ARRAY_TYPE));\n-    assertTrue(U2U_CONSTRUCTOR_TYPE.\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.\n         canTestForEqualityWith(BOOLEAN_TYPE));\n     assertTrue(U2U_CONSTRUCTOR_TYPE.\n         canTestForEqualityWith(BOOLEAN_OBJECT_TYPE));\n         canTestForEqualityWith(recordType));\n     assertFalse(U2U_CONSTRUCTOR_TYPE.\n         canTestForEqualityWith(NULL_TYPE));\n-    assertTrue(U2U_CONSTRUCTOR_TYPE.\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.\n         canTestForEqualityWith(NUMBER_TYPE));\n     assertTrue(U2U_CONSTRUCTOR_TYPE.\n         canTestForEqualityWith(NUMBER_OBJECT_TYPE));\n         canTestForEqualityWith(REFERENCE_ERROR_TYPE));\n     assertTrue(U2U_CONSTRUCTOR_TYPE.\n         canTestForEqualityWith(REGEXP_TYPE));\n-    assertTrue(U2U_CONSTRUCTOR_TYPE.\n+    assertFalse(U2U_CONSTRUCTOR_TYPE.\n         canTestForEqualityWith(STRING_TYPE));\n     assertTrue(U2U_CONSTRUCTOR_TYPE.\n         canTestForEqualityWith(STRING_OBJECT_TYPE));\n     assertFalse(NO_OBJECT_TYPE.canAssignTo(VOID_TYPE));\n \n     // canTestForEqualityWith\n-    assertFalse(NO_OBJECT_TYPE.canTestForEqualityWith(NO_TYPE));\n-    assertFalse(NO_OBJECT_TYPE.canTestForEqualityWith(NO_OBJECT_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(ARRAY_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(BOOLEAN_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(BOOLEAN_OBJECT_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(EVAL_ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(functionType));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(recordType));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(NULL_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(NUMBER_OBJECT_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(URI_ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(RANGE_ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(REFERENCE_ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(STRING_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(SYNTAX_ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(TYPE_ERROR_TYPE));\n-    assertTrue(NO_OBJECT_TYPE.canTestForEqualityWith(VOID_TYPE));\n+    assertCannotTestForEqualityWith(NO_OBJECT_TYPE, NO_TYPE);\n+    assertCannotTestForEqualityWith(NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, ALL_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, ARRAY_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, BOOLEAN_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, EVAL_ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, functionType);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, recordType);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, NULL_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, URI_ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, RANGE_ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, REFERENCE_ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, REGEXP_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, STRING_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, SYNTAX_ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, TYPE_ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_OBJECT_TYPE, VOID_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(NO_OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertTrue(NO_TYPE.canAssignTo(VOID_TYPE));\n \n     // canTestForEqualityWith\n-    assertFalse(NO_TYPE.canTestForEqualityWith(NO_TYPE));\n-    assertFalse(NO_TYPE.canTestForEqualityWith(NO_OBJECT_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(ARRAY_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(BOOLEAN_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(BOOLEAN_OBJECT_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(ERROR_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(EVAL_ERROR_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(functionType));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(NULL_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(NUMBER_OBJECT_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(URI_ERROR_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(RANGE_ERROR_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(REFERENCE_ERROR_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(STRING_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(SYNTAX_ERROR_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(TYPE_ERROR_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(NO_TYPE.canTestForEqualityWith(VOID_TYPE));\n+    assertCannotTestForEqualityWith(NO_TYPE, NO_TYPE);\n+    assertCannotTestForEqualityWith(NO_TYPE, NO_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, ARRAY_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, BOOLEAN_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, BOOLEAN_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, EVAL_ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, functionType);\n+    assertCanTestForEqualityWith(NO_TYPE, NULL_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, NUMBER_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, URI_ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, RANGE_ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, REFERENCE_ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, REGEXP_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, STRING_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, SYNTAX_ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, TYPE_ERROR_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, ALL_TYPE);\n+    assertCanTestForEqualityWith(NO_TYPE, VOID_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(NO_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertFalse(ARRAY_TYPE.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(ARRAY_TYPE.canTestForEqualityWith(NO_TYPE));\n-    assertTrue(ARRAY_TYPE.canTestForEqualityWith(NO_OBJECT_TYPE));\n-    assertTrue(ARRAY_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(ARRAY_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(ARRAY_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(ARRAY_TYPE.canTestForEqualityWith(functionType));\n-    assertTrue(ARRAY_TYPE.canTestForEqualityWith(recordType));\n-    assertFalse(ARRAY_TYPE.canTestForEqualityWith(VOID_TYPE));\n-    assertTrue(ARRAY_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(ARRAY_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(ARRAY_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n+    assertCanTestForEqualityWith(ARRAY_TYPE, NO_TYPE);\n+    assertCanTestForEqualityWith(ARRAY_TYPE, NO_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(ARRAY_TYPE, ALL_TYPE);\n+    assertCanTestForEqualityWith(ARRAY_TYPE, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(ARRAY_TYPE, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(ARRAY_TYPE, functionType);\n+    assertCanTestForEqualityWith(ARRAY_TYPE, recordType);\n+    assertCannotTestForEqualityWith(ARRAY_TYPE, VOID_TYPE);\n+    assertCanTestForEqualityWith(ARRAY_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(ARRAY_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(ARRAY_TYPE, REGEXP_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(ARRAY_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertTrue(UNKNOWN_TYPE.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(UNKNOWN_TYPE.canTestForEqualityWith(UNKNOWN_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canTestForEqualityWith(STRING_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canTestForEqualityWith(functionType));\n-    assertTrue(UNKNOWN_TYPE.canTestForEqualityWith(recordType));\n-    assertTrue(UNKNOWN_TYPE.canTestForEqualityWith(VOID_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n-    assertTrue(UNKNOWN_TYPE.canTestForEqualityWith(BOOLEAN_TYPE));\n+    assertCanTestForEqualityWith(UNKNOWN_TYPE, UNKNOWN_TYPE);\n+    assertCanTestForEqualityWith(UNKNOWN_TYPE, STRING_TYPE);\n+    assertCanTestForEqualityWith(UNKNOWN_TYPE, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(UNKNOWN_TYPE, functionType);\n+    assertCanTestForEqualityWith(UNKNOWN_TYPE, recordType);\n+    assertCanTestForEqualityWith(UNKNOWN_TYPE, VOID_TYPE);\n+    assertCanTestForEqualityWith(UNKNOWN_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(UNKNOWN_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(UNKNOWN_TYPE, REGEXP_TYPE);\n+    assertCanTestForEqualityWith(UNKNOWN_TYPE, BOOLEAN_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(UNKNOWN_TYPE.canTestForShallowEqualityWith(UNKNOWN_TYPE));\n     assertFalse(ALL_TYPE.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(ALL_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(ALL_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(ALL_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(ALL_TYPE.canTestForEqualityWith(functionType));\n-    assertTrue(ALL_TYPE.canTestForEqualityWith(recordType));\n-    assertTrue(ALL_TYPE.canTestForEqualityWith(VOID_TYPE));\n-    assertTrue(ALL_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(ALL_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(ALL_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n+    assertCanTestForEqualityWith(ALL_TYPE, ALL_TYPE);\n+    assertCanTestForEqualityWith(ALL_TYPE, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(ALL_TYPE, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(ALL_TYPE, functionType);\n+    assertCanTestForEqualityWith(ALL_TYPE, recordType);\n+    assertCanTestForEqualityWith(ALL_TYPE, VOID_TYPE);\n+    assertCanTestForEqualityWith(ALL_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(ALL_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(ALL_TYPE, REGEXP_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(ALL_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertFalse(OBJECT_TYPE.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(OBJECT_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(OBJECT_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(OBJECT_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(OBJECT_TYPE.canTestForEqualityWith(STRING_TYPE));\n-    assertTrue(OBJECT_TYPE.canTestForEqualityWith(BOOLEAN_TYPE));\n-    assertTrue(OBJECT_TYPE.canTestForEqualityWith(functionType));\n-    assertTrue(OBJECT_TYPE.canTestForEqualityWith(recordType));\n-    assertFalse(OBJECT_TYPE.canTestForEqualityWith(VOID_TYPE));\n-    assertTrue(OBJECT_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(OBJECT_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(OBJECT_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n-    assertTrue(OBJECT_TYPE.canTestForEqualityWith(ARRAY_TYPE));\n-    assertTrue(OBJECT_TYPE.canTestForEqualityWith(UNKNOWN_TYPE));\n+    assertCanTestForEqualityWith(OBJECT_TYPE, ALL_TYPE);\n+    assertCanTestForEqualityWith(OBJECT_TYPE, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(OBJECT_TYPE, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(OBJECT_TYPE, STRING_TYPE);\n+    assertCanTestForEqualityWith(OBJECT_TYPE, BOOLEAN_TYPE);\n+    assertCanTestForEqualityWith(OBJECT_TYPE, functionType);\n+    assertCanTestForEqualityWith(OBJECT_TYPE, recordType);\n+    assertCannotTestForEqualityWith(OBJECT_TYPE, VOID_TYPE);\n+    assertCanTestForEqualityWith(OBJECT_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(OBJECT_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(OBJECT_TYPE, REGEXP_TYPE);\n+    assertCanTestForEqualityWith(OBJECT_TYPE, ARRAY_TYPE);\n+    assertCanTestForEqualityWith(OBJECT_TYPE, UNKNOWN_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertFalse(NUMBER_OBJECT_TYPE.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(NUMBER_OBJECT_TYPE.canTestForEqualityWith(NO_TYPE));\n-    assertTrue(NUMBER_OBJECT_TYPE.canTestForEqualityWith(NO_OBJECT_TYPE));\n-    assertTrue(NUMBER_OBJECT_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(NUMBER_OBJECT_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(NUMBER_OBJECT_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(NUMBER_OBJECT_TYPE.canTestForEqualityWith(functionType));\n-    assertTrue(NUMBER_OBJECT_TYPE.canTestForEqualityWith(elementsType));\n-    assertFalse(NUMBER_OBJECT_TYPE.canTestForEqualityWith(VOID_TYPE));\n-    assertTrue(NUMBER_OBJECT_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(NUMBER_OBJECT_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(NUMBER_OBJECT_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n-    assertTrue(NUMBER_OBJECT_TYPE.canTestForEqualityWith(ARRAY_TYPE));\n+    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, NO_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, NO_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, ALL_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, functionType);\n+    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, elementsType);\n+    assertCannotTestForEqualityWith(NUMBER_OBJECT_TYPE, VOID_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, REGEXP_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_OBJECT_TYPE, ARRAY_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(NUMBER_OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertFalse(NUMBER_TYPE.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(NUMBER_TYPE.canTestForEqualityWith(NO_TYPE));\n-    assertTrue(NUMBER_TYPE.canTestForEqualityWith(NO_OBJECT_TYPE));\n-    assertTrue(NUMBER_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(NUMBER_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(NUMBER_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(NUMBER_TYPE.canTestForEqualityWith(functionType));\n-    assertFalse(NUMBER_TYPE.canTestForEqualityWith(VOID_TYPE));\n-    assertTrue(NUMBER_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(NUMBER_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(NUMBER_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n-    assertTrue(NUMBER_TYPE.canTestForEqualityWith(ARRAY_TYPE));\n-    assertTrue(NUMBER_TYPE.canTestForEqualityWith(UNKNOWN_TYPE));\n+    assertCanTestForEqualityWith(NUMBER_TYPE, NO_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_TYPE, NO_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_TYPE, ALL_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_TYPE, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_TYPE, STRING_OBJECT_TYPE);\n+    assertCannotTestForEqualityWith(NUMBER_TYPE, functionType);\n+    assertCannotTestForEqualityWith(NUMBER_TYPE, VOID_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_TYPE, REGEXP_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_TYPE, ARRAY_TYPE);\n+    assertCanTestForEqualityWith(NUMBER_TYPE, UNKNOWN_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(NUMBER_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertFalse(NULL_TYPE.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(NULL_TYPE.canTestForEqualityWith(NO_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(NO_OBJECT_TYPE));\n-    assertTrue(NULL_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(ARRAY_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(BOOLEAN_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(BOOLEAN_OBJECT_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(ERROR_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(EVAL_ERROR_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(functionType));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(NULL_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(NUMBER_OBJECT_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(URI_ERROR_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(RANGE_ERROR_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(REFERENCE_ERROR_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(STRING_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(SYNTAX_ERROR_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(TYPE_ERROR_TYPE));\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(VOID_TYPE));\n+    assertCanTestForEqualityWith(NULL_TYPE, NO_TYPE);\n+    assertCanTestForEqualityWith(NULL_TYPE, NO_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(NULL_TYPE, ALL_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, ARRAY_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, BOOLEAN_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, BOOLEAN_OBJECT_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, DATE_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, ERROR_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, EVAL_ERROR_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, functionType);\n+    assertCannotTestForEqualityWith(NULL_TYPE, NULL_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, NUMBER_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, NUMBER_OBJECT_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, OBJECT_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, URI_ERROR_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, RANGE_ERROR_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, REFERENCE_ERROR_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, REGEXP_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, STRING_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, STRING_OBJECT_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, SYNTAX_ERROR_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, TYPE_ERROR_TYPE);\n+    assertCannotTestForEqualityWith(NULL_TYPE, VOID_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(NULL_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertFalse(DATE_TYPE.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(DATE_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(DATE_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(DATE_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(DATE_TYPE.canTestForEqualityWith(functionType));\n-    assertFalse(DATE_TYPE.canTestForEqualityWith(VOID_TYPE));\n-    assertTrue(DATE_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(DATE_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(DATE_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n-    assertTrue(DATE_TYPE.canTestForEqualityWith(ARRAY_TYPE));\n+    assertCanTestForEqualityWith(DATE_TYPE, ALL_TYPE);\n+    assertCanTestForEqualityWith(DATE_TYPE, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(DATE_TYPE, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(DATE_TYPE, functionType);\n+    assertCannotTestForEqualityWith(DATE_TYPE, VOID_TYPE);\n+    assertCanTestForEqualityWith(DATE_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(DATE_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(DATE_TYPE, REGEXP_TYPE);\n+    assertCanTestForEqualityWith(DATE_TYPE, ARRAY_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(DATE_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertTrue(REGEXP_TYPE.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(REGEXP_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(REGEXP_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(REGEXP_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(REGEXP_TYPE.canTestForEqualityWith(functionType));\n-    assertFalse(REGEXP_TYPE.canTestForEqualityWith(VOID_TYPE));\n-    assertTrue(REGEXP_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(REGEXP_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(REGEXP_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n-    assertTrue(REGEXP_TYPE.canTestForEqualityWith(ARRAY_TYPE));\n+    assertCanTestForEqualityWith(REGEXP_TYPE, ALL_TYPE);\n+    assertCanTestForEqualityWith(REGEXP_TYPE, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(REGEXP_TYPE, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(REGEXP_TYPE, functionType);\n+    assertCannotTestForEqualityWith(REGEXP_TYPE, VOID_TYPE);\n+    assertCanTestForEqualityWith(REGEXP_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(REGEXP_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(REGEXP_TYPE, REGEXP_TYPE);\n+    assertCanTestForEqualityWith(REGEXP_TYPE, ARRAY_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(REGEXP_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertFalse(STRING_OBJECT_TYPE.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(STRING_OBJECT_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(STRING_OBJECT_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(STRING_OBJECT_TYPE.canTestForEqualityWith(STRING_TYPE));\n-    assertTrue(STRING_OBJECT_TYPE.canTestForEqualityWith(functionType));\n-    assertTrue(STRING_OBJECT_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(STRING_OBJECT_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(STRING_OBJECT_TYPE.canTestForEqualityWith(BOOLEAN_TYPE));\n-    assertTrue(STRING_OBJECT_TYPE.canTestForEqualityWith(BOOLEAN_OBJECT_TYPE));\n-    assertTrue(STRING_OBJECT_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(STRING_OBJECT_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n-    assertTrue(STRING_OBJECT_TYPE.canTestForEqualityWith(ARRAY_TYPE));\n-    assertTrue(STRING_OBJECT_TYPE.canTestForEqualityWith(UNKNOWN_TYPE));\n+    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, ALL_TYPE);\n+    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, STRING_TYPE);\n+    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, functionType);\n+    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, BOOLEAN_TYPE);\n+    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, REGEXP_TYPE);\n+    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, ARRAY_TYPE);\n+    assertCanTestForEqualityWith(STRING_OBJECT_TYPE, UNKNOWN_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(STRING_OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertFalse(STRING_TYPE.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(STRING_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(STRING_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(STRING_TYPE.canTestForEqualityWith(functionType));\n-    assertTrue(STRING_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(STRING_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(STRING_TYPE.canTestForEqualityWith(BOOLEAN_TYPE));\n-    assertTrue(STRING_TYPE.canTestForEqualityWith(BOOLEAN_OBJECT_TYPE));\n-    assertTrue(STRING_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(STRING_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n-    assertTrue(STRING_TYPE.canTestForEqualityWith(ARRAY_TYPE));\n-    assertTrue(STRING_TYPE.canTestForEqualityWith(UNKNOWN_TYPE));\n+    assertCanTestForEqualityWith(STRING_TYPE, ALL_TYPE);\n+    assertCanTestForEqualityWith(STRING_TYPE, STRING_OBJECT_TYPE);\n+    assertCannotTestForEqualityWith(STRING_TYPE, functionType);\n+    assertCanTestForEqualityWith(STRING_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(STRING_TYPE, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(STRING_TYPE, BOOLEAN_TYPE);\n+    assertCanTestForEqualityWith(STRING_TYPE, BOOLEAN_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(STRING_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(STRING_TYPE, REGEXP_TYPE);\n+    assertCanTestForEqualityWith(STRING_TYPE, ARRAY_TYPE);\n+    assertCanTestForEqualityWith(STRING_TYPE, UNKNOWN_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(STRING_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertFalse(recordType.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(recordType.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(recordType.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(recordType.canTestForEqualityWith(recordType));\n-    assertTrue(recordType.canTestForEqualityWith(functionType));\n-    assertTrue(recordType.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(recordType.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(recordType.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(recordType.canTestForEqualityWith(REGEXP_TYPE));\n+    assertCanTestForEqualityWith(recordType, ALL_TYPE);\n+    assertCanTestForEqualityWith(recordType, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(recordType, recordType);\n+    assertCanTestForEqualityWith(recordType, functionType);\n+    assertCanTestForEqualityWith(recordType, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(recordType, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(recordType, DATE_TYPE);\n+    assertCanTestForEqualityWith(recordType, REGEXP_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(recordType.canTestForShallowEqualityWith(NO_TYPE));\n     assertTrue(functionInst.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(functionInst.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(functionInst.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(functionInst.canTestForEqualityWith(functionInst));\n-    assertTrue(functionInst.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(functionInst.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(functionInst.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(functionInst.canTestForEqualityWith(REGEXP_TYPE));\n+    assertCanTestForEqualityWith(functionInst, ALL_TYPE);\n+    assertCanTestForEqualityWith(functionInst, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(functionInst, functionInst);\n+    assertCanTestForEqualityWith(functionInst, OBJECT_TYPE);\n+    assertCannotTestForEqualityWith(functionInst, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(functionInst, DATE_TYPE);\n+    assertCanTestForEqualityWith(functionInst, REGEXP_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(functionInst.canTestForShallowEqualityWith(NO_TYPE));\n     assertTrue(functionType.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(functionType.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(functionType.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(functionType.canTestForEqualityWith(functionType));\n-    assertTrue(functionType.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(functionType.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(functionType.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(functionType.canTestForEqualityWith(REGEXP_TYPE));\n+    assertCanTestForEqualityWith(functionType, ALL_TYPE);\n+    assertCanTestForEqualityWith(functionType, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(functionType, functionType);\n+    assertCanTestForEqualityWith(functionType, OBJECT_TYPE);\n+    assertCannotTestForEqualityWith(functionType, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(functionType, DATE_TYPE);\n+    assertCanTestForEqualityWith(functionType, REGEXP_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(functionType.canTestForShallowEqualityWith(NO_TYPE));\n     assertNull(VOID_TYPE.autoboxesTo());\n \n     // canTestForEqualityWith\n-    assertTrue(VOID_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertFalse(VOID_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n+    assertCanTestForEqualityWith(VOID_TYPE, ALL_TYPE);\n+    assertCannotTestForEqualityWith(VOID_TYPE, REGEXP_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(VOID_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertFalse(BOOLEAN_TYPE.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(BOOLEAN_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(BOOLEAN_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(BOOLEAN_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(BOOLEAN_TYPE.canTestForEqualityWith(functionType));\n-    assertFalse(BOOLEAN_TYPE.canTestForEqualityWith(VOID_TYPE));\n-    assertTrue(BOOLEAN_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(BOOLEAN_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(BOOLEAN_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n-    assertTrue(BOOLEAN_TYPE.canTestForEqualityWith(UNKNOWN_TYPE));\n+    assertCanTestForEqualityWith(BOOLEAN_TYPE, ALL_TYPE);\n+    assertCanTestForEqualityWith(BOOLEAN_TYPE, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(BOOLEAN_TYPE, NUMBER_TYPE);\n+    assertCannotTestForEqualityWith(BOOLEAN_TYPE, functionType);\n+    assertCannotTestForEqualityWith(BOOLEAN_TYPE, VOID_TYPE);\n+    assertCanTestForEqualityWith(BOOLEAN_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(BOOLEAN_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(BOOLEAN_TYPE, REGEXP_TYPE);\n+    assertCanTestForEqualityWith(BOOLEAN_TYPE, UNKNOWN_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(BOOLEAN_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertFalse(BOOLEAN_OBJECT_TYPE.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(BOOLEAN_OBJECT_TYPE.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(BOOLEAN_OBJECT_TYPE.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(BOOLEAN_OBJECT_TYPE.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(BOOLEAN_OBJECT_TYPE.canTestForEqualityWith(functionType));\n-    assertFalse(BOOLEAN_OBJECT_TYPE.canTestForEqualityWith(VOID_TYPE));\n-    assertTrue(BOOLEAN_OBJECT_TYPE.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(BOOLEAN_OBJECT_TYPE.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(BOOLEAN_OBJECT_TYPE.canTestForEqualityWith(REGEXP_TYPE));\n+    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, ALL_TYPE);\n+    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, functionType);\n+    assertCannotTestForEqualityWith(BOOLEAN_OBJECT_TYPE, VOID_TYPE);\n+    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, DATE_TYPE);\n+    assertCanTestForEqualityWith(BOOLEAN_OBJECT_TYPE, REGEXP_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(BOOLEAN_OBJECT_TYPE.canTestForShallowEqualityWith(NO_TYPE));\n     assertFalse(enumType.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(enumType.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(enumType.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(enumType.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(enumType.canTestForEqualityWith(functionType));\n-    assertFalse(enumType.canTestForEqualityWith(VOID_TYPE));\n-    assertTrue(enumType.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(enumType.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(enumType.canTestForEqualityWith(REGEXP_TYPE));\n+    assertCanTestForEqualityWith(enumType, ALL_TYPE);\n+    assertCanTestForEqualityWith(enumType, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(enumType, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(enumType, functionType);\n+    assertCannotTestForEqualityWith(enumType, VOID_TYPE);\n+    assertCanTestForEqualityWith(enumType, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(enumType, DATE_TYPE);\n+    assertCanTestForEqualityWith(enumType, REGEXP_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(enumType.canTestForShallowEqualityWith(NO_TYPE));\n     assertFalse(elementsType.canBeCalled());\n \n     // canTestForEqualityWith\n-    assertTrue(elementsType.canTestForEqualityWith(ALL_TYPE));\n-    assertTrue(elementsType.canTestForEqualityWith(STRING_OBJECT_TYPE));\n-    assertTrue(elementsType.canTestForEqualityWith(NUMBER_TYPE));\n-    assertTrue(elementsType.canTestForEqualityWith(NUMBER_OBJECT_TYPE));\n-    assertTrue(elementsType.canTestForEqualityWith(elementsType));\n-    assertTrue(elementsType.canTestForEqualityWith(functionType));\n-    assertFalse(elementsType.canTestForEqualityWith(VOID_TYPE));\n-    assertTrue(elementsType.canTestForEqualityWith(OBJECT_TYPE));\n-    assertTrue(elementsType.canTestForEqualityWith(DATE_TYPE));\n-    assertTrue(elementsType.canTestForEqualityWith(REGEXP_TYPE));\n+    assertCanTestForEqualityWith(elementsType, ALL_TYPE);\n+    assertCanTestForEqualityWith(elementsType, STRING_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(elementsType, NUMBER_TYPE);\n+    assertCanTestForEqualityWith(elementsType, NUMBER_OBJECT_TYPE);\n+    assertCanTestForEqualityWith(elementsType, elementsType);\n+    assertCannotTestForEqualityWith(elementsType, functionType);\n+    assertCannotTestForEqualityWith(elementsType, VOID_TYPE);\n+    assertCanTestForEqualityWith(elementsType, OBJECT_TYPE);\n+    assertCanTestForEqualityWith(elementsType, DATE_TYPE);\n+    assertCanTestForEqualityWith(elementsType, REGEXP_TYPE);\n \n     // canTestForShallowEqualityWith\n     assertTrue(elementsType.canTestForShallowEqualityWith(NO_TYPE));\n     assertNull(objectType.autoboxesTo());\n \n     // canTestForEqualityWith\n-    assertTrue(objectType.canTestForEqualityWith(NUMBER_TYPE));\n+    assertCanTestForEqualityWith(objectType, NUMBER_TYPE);\n \n     // matchesXxxContext\n     assertFalse(objectType.matchesInt32Context());\n   @SuppressWarnings(\"checked\")\n   public void testCanTestForEqualityWithCornerCases() {\n     // null == undefined is always true\n-    assertFalse(NULL_TYPE.canTestForEqualityWith(VOID_TYPE));\n+    assertCannotTestForEqualityWith(NULL_TYPE, VOID_TYPE);\n \n     // (Object,null) == undefined could be true or false\n     UnionType nullableObject =\n         (UnionType) createUnionType(OBJECT_TYPE, NULL_TYPE);\n-    assertTrue(nullableObject.canTestForEqualityWith(VOID_TYPE));\n-    assertTrue(VOID_TYPE.canTestForEqualityWith(nullableObject));\n+    assertCanTestForEqualityWith(nullableObject, VOID_TYPE);\n+    assertCanTestForEqualityWith(VOID_TYPE, nullableObject);\n   }\n \n   /**\n     compare(UNKNOWN, UNKNOWN_TYPE, BOOLEAN_TYPE);\n     compare(UNKNOWN, UNKNOWN_TYPE, NULL_TYPE);\n     compare(UNKNOWN, UNKNOWN_TYPE, VOID_TYPE);\n+\n+    compare(FALSE, U2U_CONSTRUCTOR_TYPE, BOOLEAN_TYPE);\n+    compare(FALSE, U2U_CONSTRUCTOR_TYPE, NUMBER_TYPE);\n+    compare(FALSE, U2U_CONSTRUCTOR_TYPE, STRING_TYPE);\n+    compare(FALSE, U2U_CONSTRUCTOR_TYPE, VOID_TYPE);\n+    compare(FALSE, U2U_CONSTRUCTOR_TYPE, NULL_TYPE);\n+    compare(UNKNOWN, U2U_CONSTRUCTOR_TYPE, OBJECT_TYPE);\n+    compare(UNKNOWN, U2U_CONSTRUCTOR_TYPE, ALL_TYPE);\n   }\n \n   private void compare(TernaryValue r, JSType t1, JSType t2) {\n     assertEquals(r, t1.testForEquality(t2));\n     assertEquals(r, t2.testForEquality(t1));\n+  }\n+\n+  private void assertCanTestForEqualityWith(JSType t1, JSType t2) {\n+    assertTrue(t1.canTestForEqualityWith(t2));\n+    assertTrue(t2.canTestForEqualityWith(t1));\n+  }\n+\n+  private void assertCannotTestForEqualityWith(JSType t1, JSType t2) {\n+    assertFalse(t1.canTestForEqualityWith(t2));\n+    assertFalse(t2.canTestForEqualityWith(t1));\n   }\n \n   /**", "timestamp": 1283883567, "metainfo": ""}