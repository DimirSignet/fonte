{"sha": "52547e61d187e102f21e5545c24e8d232fefe92f", "log": "WarningsGuard for @suppress.  R=johnlenz DELTA=276  (243 added, 16 deleted, 17 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=86010   ", "commit": "\n--- a/src/com/google/javascript/jscomp/JSError.java\n+++ b/src/com/google/javascript/jscomp/JSError.java\n import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.rhino.Node;\n \n+import javax.annotation.Nullable;\n+\n /**\n  * Compile error description\n  *\n   /** Name of the source */\n   public final String sourceName;\n \n+  /** Node where the warning occurred. */\n+  final Node node;\n+\n   /** Line number of the source */\n   public final int lineNumber;\n \n    * @param arguments Arguments to be incorporated into the message\n    */\n   public static JSError make(DiagnosticType type, String... arguments) {\n-    return new JSError(null, -1, -1, type, null, arguments);\n+    return new JSError(null, null, -1, -1, type, null, arguments);\n   }\n \n   /**\n    */\n   public static JSError make(String sourceName, int lineno, int charno,\n                              DiagnosticType type, String... arguments) {\n-    return new JSError(sourceName, lineno, charno, type, null, arguments);\n+    return new JSError(sourceName, null, lineno, charno, type, null, arguments);\n   }\n \n   /**\n    */\n   public static JSError make(String sourceName, int lineno, int charno,\n       CheckLevel level, DiagnosticType type, String... arguments) {\n-    return new JSError(sourceName, lineno, charno, type, level, arguments);\n+    return new JSError(\n+        sourceName, null, lineno, charno, type, level, arguments);\n   }\n \n   /**\n   public static JSError make(String sourceName, Node n, CheckLevel level,\n       DiagnosticType type, String... arguments) {\n \n-    return new JSError(sourceName, n.getLineno(), n.getCharno(), type, level,\n+    return new JSError(sourceName, n, n.getLineno(), n.getCharno(), type, level,\n         arguments);\n   }\n \n   //\n \n   /**\n-   * Creates a JSError at a CheckLevel for a source file location.  Package\n-   * private to avoid any entanglement with code outside of the compiler.\n-   *\n-   * This is a preferred internal constructor.\n-   */\n-  private JSError(String sourceName, int lineno, int charno,\n+   * Creates a JSError at a CheckLevel for a source file location.\n+   * Private to avoid any entanglement with code outside of the compiler.\n+   */\n+  private JSError(\n+      String sourceName, @Nullable Node node, int lineno, int charno,\n       DiagnosticType type, CheckLevel level, String... arguments) {\n     this.type = type;\n+    this.node = node;\n     this.description = type.format.format(arguments);\n     this.lineNumber = lineno;\n     this.charno = charno;\n   }\n \n   /**\n-   * Creates a JSError for a source file location.  Package private to avoid\n+   * Creates a JSError for a source file location.  Private to avoid\n    * any entanglement with code outside of the compiler.\n-   *\n-   * This is a preferred internal constructor.\n-   */\n-  private JSError(String sourceName, Node node,\n+   */\n+  private JSError(String sourceName, @Nullable Node node,\n                   DiagnosticType type, String... arguments) {\n     this(sourceName,\n+         node,\n          (node != null) ? node.getLineno() : -1,\n          (node != null) ? node.getCharno() : -1,\n          type, null, arguments);\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n   }\n \n   /**\n+   * Get the JSDocInfo for a function.\n+   */\n+  static JSDocInfo getFunctionInfo(Node n) {\n+    Preconditions.checkState(n.getType() == Token.FUNCTION);\n+    JSDocInfo fnInfo = n.getJSDocInfo();\n+    if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {\n+      // Look for the info on other nodes.\n+      Node parent = n.getParent();\n+      if (parent.getType() == Token.ASSIGN) {\n+        // on ASSIGNs\n+        fnInfo = parent.getJSDocInfo();\n+      } else if (parent.getType() == Token.NAME) {\n+        // on var NAME = function() { ... };\n+        fnInfo = parent.getParent().getJSDocInfo();\n+      }\n+    }\n+    return fnInfo;\n+  }\n+\n+  /**\n    * @param n The node.\n    * @return The source name property on the node or its ancestors.\n    */\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n     if (checkOnly) {\n       normalizeNodeTypes(root);\n     } else {\n-      // Don't perform \"PrepareAnnoations\" when doing checks as\n+      // Don't perform \"PrepareAnnotations\" when doing checks as\n       // they currently aren't valid during sanity checks.  In particular,\n       // they DIRECT_EVAL shouldn't be applied after inlining has been\n       // performed.\n      * Annotate optional and var_arg function parameters.\n      */\n     private void annotateFunctions(Node n, Node parent) {\n-      Preconditions.checkState(n.getType() == Token.FUNCTION);\n-      JSDocInfo fnInfo = n.getJSDocInfo();\n-      if (fnInfo == null) {\n-        // Look for the info on other nodes.\n-        if (parent.getType() == Token.ASSIGN) {\n-          // on ASSIGNs\n-          fnInfo = parent.getJSDocInfo();\n-        } else if (parent.getType() == Token.NAME) {\n-          // on var NAME = function() { ... };\n-          fnInfo = parent.getParent().getJSDocInfo();\n-        }\n-      }\n+      JSDocInfo fnInfo = NodeUtil.getFunctionInfo(n);\n \n       // Compute which function parameters are optional and\n       // which are var_args.\n         }\n       }\n     }\n-\n   }\n }\n--- a/src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/ShowByPathWarningsGuard.java\n \n   @Override\n   protected int getPriority() {\n-    return 1; // applied first\n+    return WarningsGuard.Priority.FILTER_BY_PATH.value; // applied first\n   }\n }\n--- a/src/com/google/javascript/jscomp/StrictWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/StrictWarningsGuard.java\n \n   @Override\n   protected int getPriority() {\n-    return 100; // applied last\n+    return WarningsGuard.Priority.STRICT.value; // applied last\n   }\n }\n--- /dev/null\n+++ b/src/com/google/javascript/jscomp/SuppressDocWarningsGuard.java\n+/*\n+ * Copyright 2010 Google Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp;\n+\n+import com.google.common.collect.Maps;\n+import com.google.javascript.rhino.JSDocInfo;\n+import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n+\n+import java.util.Map;\n+\n+/**\n+ * Filters warnings based on in-code {@code @suppress} annotations.\n+ * @author nicksantos@google.com (Nick Santos)\n+ */\n+class SuppressDocWarningsGuard extends WarningsGuard {\n+  /** Warnings guards for each suppressable warnings group, indexed by name. */\n+  private final Map<String, DiagnosticGroupWarningsGuard> suppressors =\n+      Maps.newHashMap();\n+\n+  /**\n+   * The suppressable groups, indexed by name.\n+   */\n+  SuppressDocWarningsGuard(Map<String, DiagnosticGroup> suppressableGroups) {\n+    for (Map.Entry<String, DiagnosticGroup> entry :\n+             suppressableGroups.entrySet()) {\n+      suppressors.put(\n+          entry.getKey(),\n+          new DiagnosticGroupWarningsGuard(\n+              entry.getValue(),\n+              CheckLevel.OFF));\n+    }\n+  }\n+\n+  @Override\n+  public CheckLevel level(JSError error) {\n+    Node node = error.node;\n+    if (node != null) {\n+      for (Node current = node;\n+           current != null;\n+           current = current.getParent()) {\n+        int type = current.getType();\n+        JSDocInfo info = null;\n+\n+        // We only care about function annotations at the FUNCTION and SCRIPT\n+        // level. Otherwise, the @suppress annotation has an implicit\n+        // dependency on the exact structure of our AST, and that seems like\n+        // a bad idea.\n+        if (type == Token.FUNCTION) {\n+          info = NodeUtil.getFunctionInfo(current);\n+        } else if (type == Token.SCRIPT) {\n+          info = current.getJSDocInfo();\n+        }\n+\n+        if (info != null) {\n+          for (String suppressor : info.getSuppressions()) {\n+            WarningsGuard guard = suppressors.get(suppressor);\n+\n+            // Some @suppress tags are for other tools, and\n+            // may not have a warnings guard.\n+            if (guard != null) {\n+              CheckLevel newLevel = guard.level(error);\n+              if (newLevel != null) {\n+                return newLevel;\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n+  @Override\n+  public int getPriority() {\n+    // Happens after path-based filtering, but before other times\n+    // of filtering.\n+    return WarningsGuard.Priority.SUPPRESS_DOC.value;\n+  }\n+}\n--- a/src/com/google/javascript/jscomp/WarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/WarningsGuard.java\n  */\n public abstract class WarningsGuard {\n \n+  public static enum Priority {\n+    MAX(1),\n+    MIN(100),\n+    STRICT(100),\n+    DEFAULT(50),\n+    SUPPRESS_DOC(20),\n+    FILTER_BY_PATH(1);\n+\n+    final int value;\n+\n+    Priority(int value) {\n+      this.value = value;\n+    }\n+  }\n+\n   /**\n    * Returns a new check level for a given error. OFF - suppress it, ERROR -\n    * report as error. null means that this guard does not know what to do\n    * guard will be applied sooner. Expressed on a scale of 1 to 100.\n    */\n   protected int getPriority() {\n-    return 50;\n+    return Priority.DEFAULT.value;\n   }\n \n   /**", "timestamp": 1281061918, "metainfo": ""}