{"sha": "2f5cb1622371de540fe20dcbe0411651ec89f952", "log": "Make the CFA recognize possible ON_EX edges for instanceof operations. Fixes issue 113. (Alan)  Fix DisambiugateProperties to look at subclasses of a type on which a property is referenced. (Andrew)    ", "commit": "\n--- a/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowAnalysis.java\n       case Token.ASSIGN:\n       case Token.INC:\n       case Token.DEC:\n+      case Token.INSTANCEOF:\n         return true;\n       case Token.FUNCTION:\n         return false;\n     }\n     for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-      if (mayThrowException(c)) {\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {\n         return true;\n       }\n     }\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n       }\n     }\n \n-    @Override public JSType getTypeWithProperty(String field, JSType type) {\n+    @Override public ObjectType getTypeWithProperty(String field, JSType type) {\n       if (!(type instanceof ObjectType)) {\n         if (type.autoboxesTo() != null) {\n           type = type.autoboxesTo();\n           foundType = objType;\n         }\n         objType = objType.getImplicitPrototype();\n+      }\n+      // If the property does not exist on the referenced type but the original\n+      // type is an object type, see if any subtype has the property.\n+      if (foundType == null) {\n+        ObjectType maybeType = ObjectType.cast(\n+            registry.getGreatestSubtypeWithProperty(type, field));\n+        // getGreatestSubtypeWithProperty does not guarantee that the property\n+        // is defined on the returned type, it just indicates that it might be,\n+        // so we have to double check.\n+        if (maybeType != null && maybeType.hasOwnProperty(field)) {\n+          foundType = maybeType;\n+        }\n       }\n       return foundType;\n     }\n--- a/test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java\n+++ b/test/com/google/javascript/jscomp/CheckUnreachableCodeTest.java\n     testSame(\"switch (x) { default: throw x; break; }\");\n   }\n \n+  public void testInstanceOfThrowsException() {\n+    testSame(\"function f() {try { if (value instanceof type) return true; } \" +\n+             \"catch (e) { }}\");\n+  }\n+  \n   private void assertUnreachable(String js) {\n     test(js, js, CheckUnreachableCode.UNREACHABLE_CODE);\n   }\n--- a/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java\n+++ b/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java\n     testCfg(src, expectedWhenNotTraversingFunctions, false);\n   }\n \n+  public void testInstanceOf() {\n+    String src = \"try { x instanceof 'x' } catch (e) { }\";\n+    ControlFlowGraph<Node> cfg = createCfg(src, true);\n+    assertCrossEdge(cfg, Token.EXPR_RESULT, Token.BLOCK, Branch.ON_EX);\n+  }\n+  \n   public void testSynBlock() {\n     String src = \"START(); var x; END()\";\n     ControlFlowGraph<Node> cfg = createCfg(src, true);\n     assertDownEdge(cfg, Token.BLOCK, Token.EXPR_RESULT, Branch.SYN_BLOCK);\n   }\n-\n+  \n   public void testPartialTraversalOfScope() {\n     Compiler compiler = new Compiler();\n     ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, true);\n--- a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n     testSets(true, js, \"{a=[[Bar.prototype, Foo.prototype]]}\");\n   }\n \n+  public void testSupertypeReferenceOfSubtypeProperty() {\n+    String externs = \"\"\n+        + \"/** @constructor */ function Ext() {}\"\n+        + \"Ext.prototype.a;\";\n+    String js = \"\"\n+        + \"/** @constructor */ function Foo() {}\\n\"\n+        + \"/** @constructor \\n@extends Foo*/ function Bar() {}\\n\"\n+        + \"Bar.prototype.a;\\n\"\n+        + \"/** @param {Foo} foo */\"\n+        + \"function foo(foo) {\\n\"\n+        + \"  var x = foo.a;\\n\"\n+        + \"}\\n\";\n+    String result = \"\"\n+        + \"function Foo() {}\\n\"\n+        + \"function Bar() {}\\n\"\n+        + \"Bar.prototype.Bar_prototype$a;\\n\"\n+        + \"function foo(foo) {\\n\"\n+        + \"  var x = foo.Bar_prototype$a;\\n\"\n+        + \"}\\n\";\n+    testSets(false, externs, js, result, \"{a=[[Bar.prototype]]}\");\n+  }\n+\n   public void testObjectLiteralNotRenamed() {\n     String js = \"\"\n         + \"var F = {a:'a', b:'b'};\"\n     testSets(true, js, output, \"{a=[[Bar.prototype], [Foo.prototype]]}\");\n   }\n \n+  public void testCustomInherits() {\n+    String js = \"Object.prototype.inheritsFrom = function(shuper) {\\n\" +\n+        \"  /** @constructor */\\n\" +\n+        \"  function Inheriter() { }\\n\" +\n+        \"  Inheriter.prototype = shuper.prototype;\\n\" +\n+        \"  this.prototype = new Inheriter();\\n\" +\n+        \"  this.superConstructor = shuper;\\n\" +\n+        \"};\\n\" +\n+        \"function Foo(var1, var2, strength) {\\n\" +\n+        \"  Foo.superConstructor.call(this, strength);\\n\" +\n+        \"}\" +\n+        \"Foo.inheritsFrom(Object);\";\n+\n+    String externs = \"\" +\n+        \"function Function(var_args) {}\" +\n+        \"/** @return {*} */Function.prototype.call = function(var_args) {};\";\n+\n+    testSets(false, externs, js, js, \"{}\");\n+  }\n+\n   public void runFindHighestTypeInChain() {\n     // Check that this doesn't go into an infinite loop.\n     DisambiguateProperties.forJSTypeSystem(new Compiler())", "timestamp": 1266887262, "metainfo": ""}