{"sha": "6afe53cb82f87071567808d816dea524a74ae3ab", "log": "Change on 2010/07/02 09:18:28 by johnlenz  \tFix a minor code size regression: \tSeperate marking the AST unnormalized and the denormalize pass so that \tit can take advanced of the dead assignment elimination and var \tgathering.  \tR=bowdidge \tDELTA=22  (20 added, 1 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=46008   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       passes.add(aliasKeywords);\n     }\n \n-    passes.add(denormalize);\n+    // Passes after this point can no longer depend on normalized AST\n+    // assumptions.\n+    passes.add(markUnnormalized);\n \n     if (options.coalesceVariableNames) {\n       passes.add(coalesceVariableNames);\n     if (options.collapseVariableDeclarations) {\n       passes.add(collapseVariableDeclarations);\n     }\n+\n+    // This pass works best after collapseVariableDeclarations.\n+    passes.add(denormalize);\n \n     if (options.instrumentationTemplate != null) {\n       passes.add(instrumentFunctions);\n--- a/src/com/google/javascript/jscomp/Denormalize.java\n+++ b/src/com/google/javascript/jscomp/Denormalize.java\n   @Override\n   public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root, this);\n-    compiler.setUnnormalized();\n   }\n \n   @Override", "timestamp": 1278099124, "metainfo": ""}