{"sha": "c28d0ab6972531b5bd13638ce7b69eeaea551e54", "log": "Add rictic's \"ant fuzz-test\" command    ", "commit": "\n--- /dev/null\n+++ b/test/com/google/javascript/jscomp/regtests/CompileEachLineOfProgramOutput.java\n+/*\n+ * Copyright 2009 Peter Burns\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.javascript.jscomp.regtests;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.util.logging.Level;\n+\n+import com.google.javascript.jscomp.CompilationLevel;\n+import com.google.javascript.jscomp.Compiler;\n+import com.google.javascript.jscomp.CompilerOptions;\n+import com.google.javascript.jscomp.JSSourceFile;\n+import com.google.javascript.jscomp.Result;\n+import com.google.javascript.jscomp.WarningLevel;\n+\n+public class CompileEachLineOfProgramOutput {\n+  private static final JSSourceFile extern =\n+      JSSourceFile.fromCode(\"externs.js\", \"\");\n+  private static final CompilerOptions options =\n+      new CompilerOptions();\n+\n+  static {\n+    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(\n+        options);\n+    WarningLevel.QUIET.setOptionsForWarningLevel(options);\n+    Compiler.setLoggingLevel(Level.OFF);\n+  }\n+\n+  public static void main(String[] args) throws IOException {\n+    if (args.length == 0){\n+      usage();\n+    }\n+    Runtime r = Runtime.getRuntime();\n+    Process p = null;\n+    try {\n+      p = r.exec(args);\n+    } catch (IOException e) {\n+      if (args[0].equals(\"generatejs\")) {\n+        // assuming that the command wasn't found\n+        System.out.println(\"generatejs not found, required for generating \" +\n+            \"fuzz test cases\");\n+        System.out.println(\"See: http://github.com/rictic/generatejs\");\n+        System.exit(2);\n+      } else {\n+        throw e;\n+      }\n+    }\n+\n+    BufferedReader br = new BufferedReader(\n+        new InputStreamReader(p.getInputStream()));\n+    int programsCompiled = 0, compilerErrors = 0;\n+    for (String program = br.readLine(); program != null; program =\n+             br.readLine()) {\n+      try {\n+        compile(program, programsCompiled);\n+      } catch(Exception e) {\n+        System.out.println(\"Compiler error on program #\" +\n+            programsCompiled + \":\");\n+        System.out.println(program);\n+        System.out.println(\"Details:\");\n+        e.printStackTrace(System.out);\n+        System.out.println(\"\\n\\n\\n\");\n+        compilerErrors++;\n+      }\n+\n+      programsCompiled++;\n+    }\n+\n+    if (compilerErrors == 0){\n+      System.out.println(programsCompiled +\n+          \" programs compiled without error\");\n+      System.exit(0);\n+    } else {\n+      System.out.println(\"==========FAILURE===========\");\n+      System.out.println(compilerErrors +\n+          \" programs caused an error within the compiler out of \" +\n+          programsCompiled + \" tested.\");\n+      System.exit(1);\n+    }\n+  }\n+\n+  public static Result compile(String program, int num) {\n+    JSSourceFile input = JSSourceFile.fromCode(\"\"+num, program);\n+    Compiler compiler = new Compiler();\n+    Result result = compiler.compile(extern, input, options);\n+    return result;\n+  }\n+\n+  private static void usage() {\n+    System.out.println(\n+        \"Usage: pass in a program to execute (with arguments)\");\n+    System.out.println(\n+        \"The program is expected to produce js programs to stdout, \" +\n+        \"one per line\");\n+  }\n+}", "timestamp": 1261112950, "metainfo": ""}