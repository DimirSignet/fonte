{"sha": "114620510958121ebec3dd8d037d70571fb7da20", "log": "Filtering what is presented in the source map is independent of the source map format so lets default to a more limited set of nodes by default now.  R=jschorr DELTA=200  (170 added, 11 deleted, 19 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=85017   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n     if (config.createSourceMap.length() > 0) {\n       options.sourceMapOutputPath = config.createSourceMap;\n     }\n+    options.sourceMapDetailLevel = config.sourceMapDetailLevel;\n \n     if (!config.variableMapInputFile.equals(\"\")) {\n       options.inputVariableMapSerialized =\n       return this;\n     }\n \n+    private SourceMap.DetailLevel sourceMapDetailLevel =\n+        SourceMap.DetailLevel.ALL;\n+\n+    /**\n+     * The detail supplied in the source map file, if generated.\n+     */\n+    CommandLineConfig setSourceMapDetailLevel(SourceMap.DetailLevel level) {\n+      this.sourceMapDetailLevel = level;\n+      return this;\n+    }\n+\n     private final List<String> jscompError = Lists.newArrayList();\n \n     /**\n--- a/src/com/google/javascript/jscomp/CodePrinter.java\n+++ b/src/com/google/javascript/jscomp/CodePrinter.java\n     final private Deque<Mapping> mappings;\n     final private List<Mapping> allMappings;\n     final private boolean createSrcMap;\n+    final private SourceMap.DetailLevel sourceMapDetailLevel;\n     protected final StringBuilder code = new StringBuilder(1024);\n     protected final int lineLengthThreshold;\n     protected int lineLength = 0;\n     protected int lineIndex = 0;\n \n-    MappedCodePrinter(int lineLengthThreshold, boolean createSrcMap) {\n+    MappedCodePrinter(\n+        int lineLengthThreshold,\n+        boolean createSrcMap,\n+        SourceMap.DetailLevel sourceMapDetailLevel) {\n+      Preconditions.checkState(sourceMapDetailLevel != null);\n       this.lineLengthThreshold = lineLengthThreshold;\n       this.createSrcMap = createSrcMap;\n+      this.sourceMapDetailLevel = sourceMapDetailLevel;\n       this.mappings = createSrcMap ? new ArrayDeque<Mapping>() : null;\n       this.allMappings = createSrcMap ? new ArrayList<Mapping>() : null;\n     }\n      */\n     @Override\n     void startSourceMapping(Node node) {\n+      Preconditions.checkState(sourceMapDetailLevel != null);\n+      Preconditions.checkState(node != null);\n       if (createSrcMap\n           && node.getProp(Node.SOURCEFILE_PROP) != null\n-          && node.getLineno() > 0) {\n+          && node.getLineno() > 0\n+          && sourceMapDetailLevel.apply(node)) {\n         int line = getCurrentLineIndex();\n         int index = getCurrentCharIndex();\n-\n-        // If the index is -1, we are not performing any mapping.\n-        if (index >= 0) {\n-          Mapping mapping = new Mapping();\n-          mapping.node = node;\n-          mapping.start = new Position(line, index);\n-          mappings.push(mapping);\n-          allMappings.add(mapping);\n-        }\n+        Preconditions.checkState(line >= 0);\n+        Mapping mapping = new Mapping();\n+        mapping.node = node;\n+        mapping.start = new Position(line, index);\n+        mappings.push(mapping);\n+        allMappings.add(mapping);\n       }\n     }\n \n      */\n     @Override\n     void endSourceMapping(Node node) {\n-      if (createSrcMap\n-          && node.getProp(Node.SOURCEFILE_PROP) != null\n-          && node.getLineno() > 0) {\n+      if (createSrcMap && !mappings.isEmpty() && mappings.peek().node == node) {\n+        Mapping mapping = mappings.pop();\n         int line = getCurrentLineIndex();\n         int index = getCurrentCharIndex();\n-\n-        // If the index is -1, we are not performing any mapping.\n-        if (index >= 0) {\n-          Preconditions.checkState(\n-              !mappings.isEmpty(), \"Mismatch in start and end of mapping\");\n-\n-          Mapping mapping = mappings.pop();\n-          mapping.end = new Position(line, index);\n-        }\n+        Preconditions.checkState(line >= 0);\n+        mapping.end = new Position(line, index);\n       }\n     }\n \n     /**\n      * @param lineLengthThreshold The length of a line after which we force\n      *                            a newline when possible.\n+     * @param createSourceMap Whether to generate source map data.\n+     * @param sourceMapDetailLevel A filter to control which nodes get mapped\n+     *     into the source map.\n      */\n     private PrettyCodePrinter(\n-        int lineLengthThreshold, boolean createSourceMap) {\n-      super(lineLengthThreshold, createSourceMap);\n+        int lineLengthThreshold,\n+        boolean createSourceMap,\n+        SourceMap.DetailLevel sourceMapDetailLevel) {\n+      super(lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n     }\n \n     /**\n    *                            a newline when possible.\n    * @param createSrcMap Whether to gather source position\n    *                            mapping information when printing.\n+   * @param sourceMapDetailLevel A filter to control which nodes get mapped into\n+   *     the source map.\n    */\n     private CompactCodePrinter(boolean lineBreak, int lineLengthThreshold,\n-        boolean createSrcMap) {\n-      super(lineLengthThreshold, createSrcMap);\n+        boolean createSrcMap, SourceMap.DetailLevel sourceMapDetailLevel) {\n+      super(lineLengthThreshold, createSrcMap, sourceMapDetailLevel);\n       this.lineBreak = lineBreak;\n     }\n \n     private boolean outputTypes = false;\n     private int lineLengthThreshold = DEFAULT_LINE_LENGTH_THRESHOLD;\n     private SourceMap sourceMap = null;\n+    private SourceMap.DetailLevel sourceMapDetailLevel = SourceMap.DetailLevel.ALL;\n     // Specify a charset to use when outputting source code.  If null,\n     // then just output ASCII.\n     private Charset outputCharset = null;\n      */\n     Builder setSourceMap(SourceMap sourceMap) {\n       this.sourceMap = sourceMap;\n+      return this;\n+    }\n+\n+    /**\n+     * @param level The detail level to use.\n+     */\n+    Builder setSourceMapDetailLevel(SourceMap.DetailLevel level) {\n+      Preconditions.checkState(level != null);\n+      this.sourceMapDetailLevel = level;\n       return this;\n     }\n \n               : Format.COMPACT;\n \n       return toSource(root, outputFormat, lineBreak, lineLengthThreshold,\n-          sourceMap, outputCharset);\n+          sourceMap, sourceMapDetailLevel, outputCharset);\n     }\n   }\n \n   private static String toSource(Node root, Format outputFormat,\n                                  boolean lineBreak,  int lineLengthThreshold,\n                                  SourceMap sourceMap,\n+                                 SourceMap.DetailLevel sourceMapDetailLevel,\n                                  Charset outputCharset) {\n+    Preconditions.checkState(sourceMapDetailLevel != null);\n+\n     boolean createSourceMap = (sourceMap != null);\n     MappedCodePrinter mcp =\n         outputFormat == Format.COMPACT\n         ? new CompactCodePrinter(\n-            lineBreak, lineLengthThreshold, createSourceMap)\n-        : new PrettyCodePrinter(lineLengthThreshold, createSourceMap);\n+            lineBreak, lineLengthThreshold,\n+            createSourceMap, sourceMapDetailLevel)\n+        : new PrettyCodePrinter(\n+            lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n     CodeGenerator cg =\n         outputFormat == Format.TYPED\n         ? new TypedCodeGenerator(mcp, outputCharset)\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     builder.setPrettyPrint(options.prettyPrint);\n     builder.setLineBreak(options.lineBreak);\n     builder.setSourceMap(sourceMap);\n+    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n     builder.setOutputCharset(options.outputCharset);\n     return builder.build();\n   }\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n   /** The output path for the source map. */\n   public String sourceMapOutputPath;\n+\n+  /** The detail level for the generated source map. */\n+  public SourceMap.DetailLevel sourceMapDetailLevel =\n+      SourceMap.DetailLevel.SYMBOLS;\n \n   /**\n    * Charset to use when generating code.  If null, then output ASCII.\n--- a/src/com/google/javascript/jscomp/SourceMap.java\n+++ b/src/com/google/javascript/jscomp/SourceMap.java\n package com.google.javascript.jscomp;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.base.Predicate;\n import com.google.common.collect.Lists;\n import com.google.javascript.rhino.Node;\n \n public class SourceMap {\n \n   private final static int UNMAPPED = -1;\n+\n+  /**\n+   * Source maps can be very large different levels of detail can be specified.\n+   */\n+  public enum DetailLevel implements Predicate<Node> {\n+    // ALL is best when the fullest details are needed for debugging or for\n+    // code-origin analysis.\n+    ALL {\n+      @Override public boolean apply(Node node) {\n+        return true;\n+      }\n+    },\n+    // SYMBOLS is intended to be used for stack trace deobfuscation when full\n+    // detail is not needed.\n+    SYMBOLS {\n+      @Override public boolean apply(Node node) {\n+        return NodeUtil.isCall(node)\n+            || NodeUtil.isNew(node)\n+            || NodeUtil.isFunction(node)\n+            || NodeUtil.isName(node)\n+            || (NodeUtil.isString(node) && NodeUtil.isGet(node.getParent()));\n+      }\n+    };\n+  }\n \n   /**\n    * A mapping from a given position in an input source file to a given position\n--- a/test/com/google/javascript/jscomp/SourceMapTest.java\n+++ b/test/com/google/javascript/jscomp/SourceMapTest.java\n import com.google.common.collect.LinkedListMultimap;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Multimap;\n+import com.google.javascript.jscomp.SourceMap.DetailLevel;\n \n import junit.framework.TestCase;\n \n       JSSourceFile.fromCode(\"externs\", \"\")\n   };\n \n+  private DetailLevel detailLevel = SourceMap.DetailLevel.ALL;\n+\n+  @Override\n+  public void setUp() {\n+    detailLevel = SourceMap.DetailLevel.ALL;\n+  }\n+\n   public void testBasicMapping() throws Exception {\n     compileAndCheck(\"function __BASIC__() { }\");\n   }\n   }\n \n   public void testGoldenOutput1() throws Exception {\n+    detailLevel = SourceMap.DetailLevel.ALL;\n+\n     checkSourceMap(\"function f(foo, bar) { foo = foo + bar + 2; return foo; }\",\n \n                    \"/** Begin line maps. **/{ \\\"file\\\" : \\\"testcode\\\", \" +\n                    \"[\\\"testcode\\\",1,41]\\n\" +\n                    \"[\\\"testcode\\\",1,44]\\n\" +\n                    \"[\\\"testcode\\\",1,51,\\\"foo\\\"]\\n\");\n+\n+    detailLevel = SourceMap.DetailLevel.SYMBOLS;\n+\n+    checkSourceMap(\"function f(foo, bar) { foo = foo + bar + 2; return foo; }\",\n+\n+                   \"/** Begin line maps. **/{ \\\"file\\\" : \\\"testcode\\\", \" +\n+                   \"\\\"count\\\": 1 }\\n\" +\n+\n+                   \"[0,0,0,0,0,0,0,0,1,1,0,2,2,2,0,3,3,3,0,0,4,4,4,0,5,5,5,0,\" +\n+                   \"6,6,6,0,0,0,0,0,0,0,0,0,7,7,7,7,0]\\n\" +\n+\n+                   \"/** Begin file information. **/\\n\" +\n+                   \"[]\\n\" +\n+\n+                   \"/** Begin mapping definitions. **/\\n\" +\n+                   \"[\\\"testcode\\\",1,9]\\n\" +\n+                   \"[\\\"testcode\\\",1,9,\\\"f\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,11,\\\"foo\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,16,\\\"bar\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,23,\\\"foo\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,29,\\\"foo\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,35,\\\"bar\\\"]\\n\" +\n+                   \"[\\\"testcode\\\",1,51,\\\"foo\\\"]\\n\");\n   }\n \n   public void testGoldenOutput2() throws Exception {\n   }\n \n   public void testGoldenOutput5() throws Exception {\n+    detailLevel = SourceMap.DetailLevel.ALL;\n+\n     checkSourceMap(\"c:\\\\myfile.js\",\n                    \"/** @preserve\\n\" +\n                    \" * this is a test.\\n\" +\n                    \"[\\\"c:\\\\\\\\myfile.js\\\",4,1314,\\\"c\\\"]\\n\" +\n                    \"[\\\"c:\\\\\\\\myfile.js\\\",4,1318,\\\"d\\\"]\\n\" +\n                    \"[\\\"c:\\\\\\\\myfile.js\\\",4,1322,\\\"e\\\"]\\n\");\n+\n+    detailLevel = SourceMap.DetailLevel.SYMBOLS;\n+\n+    checkSourceMap(\"c:\\\\myfile.js\",\n+        \"/** @preserve\\n\" +\n+        \" * this is a test.\\n\" +\n+        \" */\\n\" +\n+        \"var foo=a + 'this is a really long line that will force the\"\n+        + \" mapping to span multiple lines 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \" 123456789 123456789 123456789 123456789 123456789\"\n+        + \"' + c + d + e;\",\n+\n+        \"/** Begin line maps. **/\" +\n+        \"{ \\\"file\\\" : \\\"testcode\\\", \\\"count\\\": 6 }\\n\" +\n+        \"[]\\n\" +\n+        \"[]\\n\" +\n+        \"[]\\n\" +\n+        \"[]\\n\" +\n+        \"[-1,-1,-1,-1,0,0,0,0,1]\\n\" +\n+        \"[2,0,3,0,4]\\n\" +\n+        \"/** Begin file information. **/\\n\" +\n+        \"[]\\n\" +\n+        \"[]\\n\" +\n+        \"[]\\n\" +\n+        \"[]\\n\" +\n+        \"[]\\n\" +\n+        \"[]\\n\" +\n+        \"/** Begin mapping definitions. **/\\n\" +\n+        \"[\\\"c:\\\\\\\\myfile.js\\\",4,4,\\\"foo\\\"]\\n\" +\n+        \"[\\\"c:\\\\\\\\myfile.js\\\",4,8,\\\"a\\\"]\\n\" +\n+        \"[\\\"c:\\\\\\\\myfile.js\\\",4,1314,\\\"c\\\"]\\n\" +\n+        \"[\\\"c:\\\\\\\\myfile.js\\\",4,1318,\\\"d\\\"]\\n\" +\n+        \"[\\\"c:\\\\\\\\myfile.js\\\",4,1322,\\\"e\\\"]\\n\");\n   }\n \n   public void testBasicDeterminism() throws Exception {\n     Compiler compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n     options.sourceMapOutputPath = \"testcode_source_map.out\";\n+    options.sourceMapDetailLevel = detailLevel;\n \n     // Turn on IDE mode to get rid of optimizations.\n     options.ideMode = true;", "timestamp": 1281049980, "metainfo": ""}