{"sha": "8be30b03493eb98e31eab98c0d69c1abf44104fb", "log": "Fuse statements into FOR-IN loops  R=johnlenz DELTA=18  (17 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=517   ", "commit": "\n--- a/src/com/google/javascript/jscomp/StatementFusion.java\n+++ b/src/com/google/javascript/jscomp/StatementFusion.java\n     }\n \n     // TODO(user): Support more control statement for fusion.\n-    // FOR, FOR-IN\n+    // FOR\n     switch(last.getType()) {\n       case Token.IF:\n       case Token.THROW:\n       case Token.RETURN:\n         // We don't want to add a new return value.\n         return last.hasChildren();\n+      case Token.FOR:\n+        return NodeUtil.isForIn(last);\n     }\n \n     return false;\n       case Token.EXPR_RESULT:\n         fuseExpresssonIntoFirstChild(commaTree, last);\n         return;\n+      case Token.FOR:\n+        if (NodeUtil.isForIn(last)) {\n+          fuseExpresssonIntoSecondChild(commaTree, last);\n+        }\n+        return ;\n       default:\n         throw new IllegalStateException(\"Statement fusion missing.\");\n     }\n     Node comma = fuseExpressionIntoExpression(exp, val);\n     stmt.addChildToFront(comma);\n   }\n+\n+  private static void fuseExpresssonIntoSecondChild(Node exp, Node stmt) {\n+    Node val = stmt.removeChildAfter(stmt.getFirstChild());\n+    Node comma = fuseExpressionIntoExpression(exp, val);\n+    stmt.addChildAfter(comma, stmt.getFirstChild());\n+  }\n }\n--- a/test/com/google/javascript/jscomp/StatementFusionTest.java\n+++ b/test/com/google/javascript/jscomp/StatementFusionTest.java\n     fuse(\"a;b;c;switch(x){}\", \"switch(a,b,c,x){}\");\n   }\n \n+  public void testFuseIntoForIn() {\n+    fuse(\"a;b;c;for(x in y){}\", \"for(x in a,b,c,y){}\");\n+  }\n+\n   public void testNoFuseIntoWhile() {\n     fuseSame(\"a;b;c;while(x){}\");\n   }", "timestamp": 1297715300, "metainfo": ""}