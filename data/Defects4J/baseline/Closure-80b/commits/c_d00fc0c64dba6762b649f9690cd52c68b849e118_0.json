{"sha": "d00fc0c64dba6762b649f9690cd52c68b849e118", "log": "Make id generator map available    R=pupius DELTA=108  (99 added, 0 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=225430   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     return new Result(getErrors(), getWarnings(), debugLog.toString(),\n         state.variableMap, state.propertyMap,\n         state.anonymousFunctionNameMap, state.stringMap, functionInformationMap,\n-        sourceMap, externExports, state.cssNames);\n+        sourceMap, externExports, state.cssNames, state.idGeneratorMap);\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n   /** String replacement map */\n   private VariableMap stringMap = null;\n \n+  /** Id generator map */\n+  private String idGeneratorMap = null;\n+\n   public DefaultPassConfig(CompilerOptions options) {\n     super(options);\n   }\n         exportedNames == null ? null :\n             Collections.unmodifiableSet(exportedNames),\n         crossModuleIdGenerator, variableMap, propertyMap,\n-        anonymousFunctionNameMap, stringMap, functionNames);\n+        anonymousFunctionNameMap, stringMap, functionNames, idGeneratorMap);\n   }\n \n   @Override\n     this.anonymousFunctionNameMap = state.anonymousFunctionNameMap;\n     this.stringMap = state.stringMap;\n     this.functionNames = state.functionNames;\n+    this.idGeneratorMap = state.idGeneratorMap;\n   }\n \n   @Override\n   private final PassFactory replaceIdGenerators =\n       new PassFactory(\"replaceIdGenerators\", true) {\n     @Override\n-    protected CompilerPass createInternal(AbstractCompiler compiler) {\n-      return new ReplaceIdGenerators(compiler, options.idGenerators);\n+    protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+      return new CompilerPass() {\n+        @Override public void process(Node externs, Node root) {\n+          ReplaceIdGenerators pass =\n+              new ReplaceIdGenerators(compiler, options.idGenerators);\n+          pass.process(externs, root);\n+          idGeneratorMap = pass.getIdGeneratorMap();\n+        }\n+      };\n     }\n   };\n \n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n     final VariableMap anonymousFunctionNameMap;\n     final VariableMap stringMap;\n     final FunctionNames functionNames;\n+    final String idGeneratorMap;\n \n     State(Map<String, Integer> cssNames, Set<String> exportedNames,\n           CrossModuleMethodMotion.IdGenerator crossModuleIdGenerator,\n           VariableMap variableMap, VariableMap propertyMap,\n           VariableMap anonymousFunctionNameMap,\n-          VariableMap stringMap, FunctionNames functionNames) {\n+          VariableMap stringMap, FunctionNames functionNames,\n+          String idGeneratorMap) {\n       this.cssNames = cssNames;\n       this.exportedNames = exportedNames;\n       this.crossModuleIdGenerator = crossModuleIdGenerator;\n       this.propertyMap = propertyMap;\n       this.anonymousFunctionNameMap = anonymousFunctionNameMap;\n       this.stringMap = stringMap;\n+      this.idGeneratorMap = idGeneratorMap;\n       this.functionNames = functionNames;\n     }\n   }\n--- a/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n+++ b/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n \n   private final AbstractCompiler compiler;\n   private final Map<String, NameGenerator> nameGenerators;\n+  private final Map<String, List<Replacement>> idGeneratorMaps;\n \n   public ReplaceIdGenerators(AbstractCompiler compiler,\n                              Set<String> idGenerators) {\n     this.compiler = compiler;\n     nameGenerators = Maps.newHashMap();\n+    idGeneratorMaps = Maps.newLinkedHashMap();\n     for (String idGenerator : idGenerators) {\n       nameGenerators.put(\n           idGenerator,\n           new NameGenerator(Collections.<String>emptySet(), \"\", null));\n+      idGeneratorMaps.put(idGenerator, Lists.<Replacement>newArrayList());\n     }\n   }\n \n       if (nameGenerator == null) {\n         return;\n       }\n+      List<Replacement> idGeneratorMap = idGeneratorMaps.get(callName);\n \n       if (!t.inGlobalScope()) {\n         // Warn about calls not in the global scope.\n       }\n \n       String nextName = nameGenerator.generateNextName();\n+\n       parent.replaceChild(n, Node.newString(nextName));\n+      idGeneratorMap.add(\n+          new Replacement(nextName, t.getSourceName(), t.getLineNumber()));\n \n       compiler.reportCodeChange();\n     }\n   }\n+\n+  /**\n+   * @return the id generator map.\n+   */\n+  public String getIdGeneratorMap() {\n+    StringBuilder sb = new StringBuilder();\n+    for (Map.Entry<String, List<Replacement>> entry :\n+        idGeneratorMaps.entrySet()) {\n+      sb.append(\"[\");\n+      sb.append(entry.getKey());\n+      sb.append(\"]\\n\\n\");\n+      for (Replacement replacement : entry.getValue()) {\n+        sb.append(replacement.toString());\n+        sb.append(\"\\n\");\n+      }\n+      sb.append(\"\\n\");\n+    }\n+    return sb.toString();\n+  }\n+\n+  private static class Replacement {\n+    private final String name;\n+    private final String sourceName;\n+    private final int lineNumber;\n+\n+    private Replacement(String name, String sourceName, int lineNumber) {\n+      this.name = name;\n+      this.sourceName = sourceName;\n+      this.lineNumber = lineNumber;\n+    }\n+\n+    @Override\n+    public String toString() {\n+      return name + \":\" + sourceName + \":\" + lineNumber;\n+    }\n+  }\n }\n--- a/src/com/google/javascript/jscomp/Result.java\n+++ b/src/com/google/javascript/jscomp/Result.java\n   public final SourceMap sourceMap;\n   public final Map<String, Integer> cssNames;\n   public final String externExport;\n+  public final String idGeneratorMap;\n \n   Result(JSError[] errors, JSError[] warnings, String debugLog,\n          VariableMap variableMap, VariableMap propertyMap,\n          VariableMap namedAnonFunctionMap,\n          VariableMap stringMap,\n          FunctionInformationMap functionInformationMap,\n-         SourceMap sourceMap,  String externExport,\n-         Map<String, Integer> cssNames) {\n+         SourceMap sourceMap, String externExport,\n+         Map<String, Integer> cssNames, String idGeneratorMap) {\n     this.success = errors.length == 0;\n     this.errors = errors;\n     this.warnings = warnings;\n     this.sourceMap = sourceMap;\n     this.externExport = externExport;\n     this.cssNames = cssNames;\n+    this.idGeneratorMap = idGeneratorMap;\n   }\n \n   // Visible for testing only.\n                 SourceMap sourceMap, String externExport) {\n     this(errors, warnings, debugLog, variableMap, propertyMap,\n          namedAnonFunctionMap, null, functionInformationMap, sourceMap,\n-         externExport, null);\n+         externExport, null, null);\n   }\n }", "timestamp": 1284672000, "metainfo": ""}