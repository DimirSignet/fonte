{"sha": "4672d2c17dbddd139330f247d96b6cc94376a719", "log": "Fixes issue 162 Reimplement the --flagfile option  R=johnlenz,acleung DELTA=73  (72 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=324   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n+import com.google.common.io.Files;\n import com.google.common.io.LimitInputStream;\n \n import org.kohsuke.args4j.CmdLineException;\n import org.kohsuke.args4j.spi.Parameters;\n import org.kohsuke.args4j.spi.Setter;\n \n+import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.PrintStream;\n import java.util.Map;\n import java.util.ResourceBundle;\n import java.util.Set;\n+import java.util.StringTokenizer;\n import java.util.logging.Level;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n+\n+import java.nio.charset.Charset;\n \n /**\n  * CommandLineRunner translates flags into Java API calls on the Compiler.\n         handler = BooleanOptionHandler.class,\n         usage = \"Prints the compiler version to stderr.\")\n     private boolean version = false;\n+    \n+    @Option(name = \"--flagfile\",\n+        usage = \"A file containing additional command-line options.\")\n+    private String flag_file = \"\";    \n \n     // Our own option parser to be backwards-compatible.\n     // It needs to be public because of the crazy reflection that args4j does.\n     initConfigFromFlags(args, err);\n   }\n \n-  private void initConfigFromFlags(String[] args, PrintStream err) {\n+  private List<String> processArgs(String[] args) {\n     // Args4j has a different format that the old command-line parser.\n     // So we use some voodoo to get the args into the format that args4j\n     // expects.\n     Pattern argPattern = Pattern.compile(\"(--[a-zA-Z_]+)=(.*)\");\n     Pattern quotesPattern = Pattern.compile(\"^['\\\"](.*)['\\\"]$\");\n     List<String> processedArgs = Lists.newArrayList();\n+    \n     for (String arg : args) {\n       Matcher matcher = argPattern.matcher(arg);\n       if (matcher.matches()) {\n         processedArgs.add(arg);\n       }\n     }\n-\n+    \n+    return processedArgs;\n+  }\n+  \n+  private void processFlagFile(PrintStream err) \n+            throws CmdLineException, IOException {\n+    List<String> argsInFile = Lists.newArrayList();\n+    File flagFileInput = new File(flags.flag_file);\n+    StringTokenizer tokenizer = new StringTokenizer(\n+        Files.toString(flagFileInput, Charset.defaultCharset()));\n+\n+    while (tokenizer.hasMoreTokens()) {\n+        argsInFile.add(tokenizer.nextToken());\n+    }\n+    \n+    flags.flag_file = \"\";\n+    List<String> processedFileArgs \n+        = processArgs(argsInFile.toArray(new String[] {}));\n+    CmdLineParser parserFileArgs = new CmdLineParser(flags);\n+    parserFileArgs.parseArgument(processedFileArgs.toArray(new String[] {}));\n+    \n+    // Currently we are not supporting this (prevent direct/indirect loops)\n+    if (!flags.flag_file.equals(\"\")) {\n+      err.println(\"ERROR - Arguments in the file cannot contain \"\n+          + \"--flagfile option.\");\n+      isConfigValid = false;\n+    }\n+  }\n+  \n+  private void initConfigFromFlags(String[] args, PrintStream err) {\n+\n+    List<String> processedArgs = processArgs(args);\n+    \n     CmdLineParser parser = new CmdLineParser(flags);\n     isConfigValid = true;\n     try {\n       parser.parseArgument(processedArgs.toArray(new String[] {}));\n+      // For contains --flagfile flag\n+      if (!flags.flag_file.equals(\"\")) {\n+        processFlagFile(err);\n+      }\n     } catch (CmdLineException e) {\n       err.println(e.getMessage());\n+      isConfigValid = false;\n+    } catch (IOException ioErr) {\n+      err.println(\"ERROR - \" + flags.flag_file + \" read error.\");\n       isConfigValid = false;\n     }\n \n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n     testSame(\"var goog = {}; goog.provide('goog.dom');\");\n   }\n \n+\n   //////////////////////////////////////////////////////////////////////////////\n   // Integration tests\n ", "timestamp": 1295563884, "metainfo": ""}