{"sha": "35495b79950fee47d479bb8625e4d4cf967a61af", "log": "Increase converter test coverage   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/convert/MockBadChronology.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.chrono.AbstractChronology;\n+\n+/**\n+ * A basic mock testing class for an unknown calendar.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+class MockBadChronology extends AbstractChronology {\n+    \n+    MockBadChronology() {\n+        super();\n+    }\n+\n+    public Chronology withZone(DateTimeZone zone) {\n+        return null;\n+    }\n+    \n+    public DateTimeZone getZone() {\n+        return null;\n+    }\n+    public Chronology withUTC() {\n+        return null;\n+    }\n+    public String toString() {\n+        return null;\n+    }\n+    \n+}\n--- a/JodaTime/src/test/org/joda/time/convert/MockUnknownCalendar.java\n+++ b/JodaTime/src/test/org/joda/time/convert/MockUnknownCalendar.java\n  *\n  * @author Stephen Colebourne\n  */\n-public class MockUnknownCalendar extends Calendar {\n+class MockUnknownCalendar extends Calendar {\n     \n     private long millis;\n     private TimeZone zone;\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/convert/MockUnknownTimeZone.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+/**\n+ * A basic mock testing class for an unknown time zone.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+class MockUnknownTimeZone extends TimeZone {\n+    \n+    MockUnknownTimeZone() {\n+        super();\n+    }\n+    \n+    public String getID() {\n+        return \"!!!\";\n+    }\n+    public String getDisplayName(boolean daylight, int style, Locale locale) {\n+        return \"!!!\";\n+    }\n+\n+    public int getOffset(int era, int year, int month, int day, int dayOfWeek, int milliseconds) {\n+        return 0;\n+    }\n+    public void setRawOffset(int offsetMillis) {\n+    }\n+    public int getRawOffset() {\n+        return 0;\n+    }\n+    public boolean useDaylightTime() {\n+        return false;\n+    }\n+    public boolean inDaylightTime(Date date) {\n+        return false;\n+    }\n+    \n+}\n--- a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java\n         cal.setGregorianChange(new Date(Long.MIN_VALUE));\n         assertEquals(GregorianChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(cal));\n         \n+        cal = new GregorianCalendar(new MockUnknownTimeZone());\n+        assertEquals(GJChronology.getInstance(), CalendarConverter.INSTANCE.getChronology(cal));\n+        \n         Calendar uc = new MockUnknownCalendar(TimeZone.getTimeZone(\"Europe/Moscow\"));\n         assertEquals(ISOChronology.getInstance(MOSCOW), CalendarConverter.INSTANCE.getChronology(uc));\n         \n--- a/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationType;\n+import org.joda.time.MutableDuration;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n         assertEquals(true, LongConverter.INSTANCE.isPrecise(new Long(123L)));\n     }\n \n+    public void testSetInto_Object() throws Exception {\n+        MutableDuration m = new MutableDuration(DurationType.getMillisType());\n+        LongConverter.INSTANCE.setInto(m, new Long(123L));\n+        assertEquals(123L, m.getTotalMillis());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"Converter[java.lang.Long]\", LongConverter.INSTANCE.toString());\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java\n import org.joda.time.DateTimeZone;\n import org.joda.time.Duration;\n import org.joda.time.DurationType;\n+import org.joda.time.MutableDuration;\n import org.joda.time.ReadableDuration;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n         assertEquals(false, ReadableDurationConverter.INSTANCE.isPrecise(new Duration(DurationType.getYearMonthType(), 1, 2, 0, 1, 0, 0, 0, 0)));\n     }\n \n+    public void testSetInto_Object() throws Exception {\n+        MutableDuration m = new MutableDuration(DurationType.getYearMonthType());\n+        ReadableDurationConverter.INSTANCE.setInto(m, new Duration(DurationType.getYearMonthType(), 1, 2, 0, 3, 0, 0, 0, 0));\n+        assertEquals(1, m.getYears());\n+        assertEquals(2, m.getMonths());\n+        assertEquals(0, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(0, m.getHours());\n+        assertEquals(0, m.getMinutes());\n+        assertEquals(0, m.getSeconds());\n+        assertEquals(0, m.getMillis());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"Converter[org.joda.time.ReadableDuration]\", ReadableDurationConverter.INSTANCE.toString());\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n         assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), PARIS));\n         assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (DateTimeZone) null));\n         assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (DateTimeZone) null));\n+        \n+        assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L, new MockBadChronology()), PARIS));\n     }\n \n     public void testGetChronology_Object_Chronology() throws Exception {", "timestamp": 1089155612, "metainfo": ""}