{"sha": "e161f2dac4dedaf07bc64bf067a1ededb27b5d74", "log": "Reorder methods and Javadoc   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/ReadWritableInterval.java\n+++ b/JodaTime/src/java/org/joda/time/ReadWritableInterval.java\n public interface ReadWritableInterval extends ReadableInterval {\n \n     /**\n-     * Sets this interval to be the same as another.\n-     *\n-     * @param interval  the interval to copy\n-     */\n-    void setInterval(ReadableInterval interval);\n-\n-    /**\n      * Sets this interval from two millisecond instants.\n      *\n      * @param startInstant  the start of the time interval\n      * @param endInstant  the start of the time interval\n+     * @throws IllegalArgumentException if the end is before the start\n      */\n     void setInterval(long startInstant, long endInstant);\n+\n+    /**\n+     * Sets this interval to be the same as another.\n+     *\n+     * @param interval  the interval to copy\n+     * @throws IllegalArgumentException if the end is before the start\n+     */\n+    void setInterval(ReadableInterval interval);\n \n     /**\n      * Sets this interval from two instants.\n      *\n      * @param startInstant  the start of the time interval\n      * @param endInstant  the start of the time interval\n+     * @throws IllegalArgumentException if the end is before the start\n      */\n     void setInterval(ReadableInstant startInstant, ReadableInstant endInstant);\n \n      *\n      * @param millisInstant  the start of the time interval,\n      *  millisecond instant from 1970-01-01T00:00:00Z\n+     * @throws IllegalArgumentException if the end is before the start\n      */\n     void setStartMillis(long millisInstant);\n \n      * Sets the start of this time interval as an Instant.\n      *\n      * @param instant  the start of the time interval\n+     * @throws IllegalArgumentException if the end is before the start\n      */\n     void setStartInstant(ReadableInstant instant);\n \n      *\n      * @param millisInstant  the end of the time interval,\n      *  millisecond instant from 1970-01-01T00:00:00Z\n+     * @throws IllegalArgumentException if the end is before the start\n      */\n     void setEndMillis(long millisInstant);\n \n      * Sets the end of this time interval as an Instant.\n      *\n      * @param instant  the end of the time interval\n+     * @throws IllegalArgumentException if the end is before the start\n      */\n     void setEndInstant(ReadableInstant instant);\n \n      * Sets the duration of this time interval, preserving the start instant.\n      *\n      * @param millisDuration  new duration for interval\n+     * @throws IllegalArgumentException if the end is before the start\n      * @throws ArithmeticException if the end instant exceeds the capacity of a long\n      */\n     void setDurationAfterStart(long millisDuration);\n      * Sets the duration of this time interval, preserving the end instant.\n      *\n      * @param millisDuration  new duration for interval\n+     * @throws IllegalArgumentException if the end is before the start\n+     * @throws ArithmeticException if the start instant exceeds the capacity of a long\n      */\n     void setDurationBeforeEnd(long millisDuration);\n \n      * Sets the duration of this time interval, preserving the start instant.\n      *\n      * @param duration  new duration for interval\n+     * @throws IllegalArgumentException if the end is before the start\n      * @throws ArithmeticException if the end instant exceeds the capacity of a long\n      */\n     void setDurationAfterStart(ReadableDuration duration);\n      * Sets the duration of this time interval, preserving the end instant.\n      *\n      * @param duration  new duration for interval\n+     * @throws IllegalArgumentException if the end is before the start\n      * @throws ArithmeticException if the start instant exceeds the capacity of a long\n      */\n     void setDurationBeforeEnd(ReadableDuration duration);\n      * Sets the period of this time interval, preserving the start instant.\n      *\n      * @param period  new period for interval, null means zero length\n+     * @throws IllegalArgumentException if the end is before the start\n      * @throws ArithmeticException if the end instant exceeds the capacity of a long\n      */\n     void setPeriodAfterStart(ReadablePeriod period);\n      * Sets the period of this time interval, preserving the end instant.\n      *\n      * @param period  new period for interval, null means zero length\n+     * @throws IllegalArgumentException if the end is before the start\n      * @throws ArithmeticException if the start instant exceeds the capacity of a long\n      */\n     void setPeriodBeforeEnd(ReadablePeriod period);", "timestamp": 1092503630, "metainfo": ""}