{"sha": "e12257524e216a6673ba1e337f8d97e955af7800", "log": "Add static parse methods to period/duration/interval classes  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/Duration.java\n+++ b/JodaTime/src/main/java/org/joda/time/Duration.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Parses a {@code Duration} from the specified string.\n+     * <p>\n+     * This parses the format {@code PTa.bS}, as per {@link #toString()}.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static Duration parse(String str) {\n+        return new Duration(str);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Create a duration with the specified number of days assuming that\n      * there are the standard number of milliseconds in a day.\n      * <p>\n--- a/JodaTime/src/main/java/org/joda/time/Interval.java\n+++ b/JodaTime/src/main/java/org/joda/time/Interval.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Parses a {@code Interval} from the specified string.\n+     * <p>\n+     * The String formats are described by {@link ISODateTimeFormat#dateTimeParser()}\n+     * and {@link ISOPeriodFormat#standard()}, and may be 'datetime/datetime',\n+     * 'datetime/period' or 'period/datetime'.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static Interval parse(String str) {\n+        return new Interval(str);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Constructs an interval from a start and end instant with the ISO\n      * default chronology in the default time zone.\n      * \n--- a/JodaTime/src/main/java/org/joda/time/MutableInterval.java\n+++ b/JodaTime/src/main/java/org/joda/time/MutableInterval.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Parses a {@code MutableInterval} from the specified string.\n+     * <p>\n+     * The String formats are described by {@link ISODateTimeFormat#dateTimeParser()}\n+     * and {@link ISOPeriodFormat#standard()}, and may be 'datetime/datetime',\n+     * 'datetime/period' or 'period/datetime'.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static MutableInterval parse(String str) {\n+        return new MutableInterval(str);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Constructs a zero length time interval from 1970-01-01 to 1970-01-01.\n      */\n     public MutableInterval() {\n--- a/JodaTime/src/main/java/org/joda/time/MutablePeriod.java\n+++ b/JodaTime/src/main/java/org/joda/time/MutablePeriod.java\n import org.joda.time.base.BasePeriod;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISOPeriodFormat;\n+import org.joda.time.format.PeriodFormatter;\n \n /**\n  * Standard mutable time period implementation.\n     /** Serialization version */\n     private static final long serialVersionUID = 3436451121567212165L;\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Parses a {@code MutablePeriod} from the specified string.\n+     * <p>\n+     * This uses {@link ISOPeriodFormat#standard()}.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static MutablePeriod parse(String str) {\n+        return parse(str, ISOPeriodFormat.standard());\n+    }\n+\n+    /**\n+     * Parses a {@code MutablePeriod} from the specified string using a formatter.\n+     * \n+     * @param str  the string to parse, not null\n+     * @param formatter  the formatter to use, not null\n+     * @since 2.0\n+     */\n+    public static MutablePeriod parse(String str, PeriodFormatter formatter) {\n+        return formatter.parsePeriod(str).toMutablePeriod();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Creates a zero-length period using the standard period type.\n      */\n--- a/JodaTime/src/main/java/org/joda/time/Period.java\n+++ b/JodaTime/src/main/java/org/joda/time/Period.java\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISOPeriodFormat;\n+import org.joda.time.format.PeriodFormatter;\n \n /**\n  * An immutable time period specifying a set of duration field values.\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Parses a {@code Period} from the specified string.\n+     * <p>\n+     * This uses {@link ISOPeriodFormat#standard()}.\n+     * \n+     * @param str  the string to parse, not null\n+     * @since 2.0\n+     */\n+    public static Period parse(String str) {\n+        return parse(str, ISOPeriodFormat.standard());\n+    }\n+\n+    /**\n+     * Parses a {@code Period} from the specified string using a formatter.\n+     * \n+     * @param str  the string to parse, not null\n+     * @param formatter  the formatter to use, not null\n+     * @since 2.0\n+     */\n+    public static Period parse(String str, PeriodFormatter formatter) {\n+        return formatter.parsePeriod(str);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Create a period with a specified number of years.\n      * <p>\n      * The standard period type is used, thus you can add other fields such\n--- a/JodaTime/src/test/java/org/joda/time/TestDuration_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestDuration_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        assertEquals(new Duration(3200), Duration.parse(\"PT3.2S\"));\n+        assertEquals(new Duration(6000), Duration.parse(\"PT6S\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testFactory_standardDays_long() throws Throwable {\n         Duration test = Duration.standardDays(1);\n         assertEquals(24L * 60L * 60L * 1000L, test.getMillis());\n--- a/JodaTime/src/test/java/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestInterval_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS));\n+        DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS));\n+        assertEquals(new Interval(start, end), Interval.parse(\"2010-06-30T12:30/2010-07-01T14:30\"));\n+        assertEquals(new Interval(start, end), Interval.parse(\"2010-06-30T12:30/P1DT2H\"));\n+        assertEquals(new Interval(start, end), Interval.parse(\"P1DT2H/2010-07-01T14:30\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testConstructor_long_long1() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n                 interval.setChronology(chrono);\n                 interval.setInterval(1234L, 5678L);\n             }\n-            public Class getSupportedType() {\n+            public Class<?> getSupportedType() {\n                 return String.class;\n             }\n         };\n                 interval.setChronology(chrono);\n                 interval.setInterval(1234L, 5678L);\n             }\n-            public Class getSupportedType() {\n+            public Class<?> getSupportedType() {\n                 return ReadableInterval.class;\n             }\n         };\n--- a/JodaTime/src/test/java/org/joda/time/TestMutableInterval_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutableInterval_Constructors.java\n         originalDateTimeZone = DateTimeZone.getDefault();\n         originalTimeZone = TimeZone.getDefault();\n         originalLocale = Locale.getDefault();\n-        DateTimeZone.setDefault(LONDON);\n+        DateTimeZone.setDefault(PARIS);\n         TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n         Locale.setDefault(Locale.UK);\n     }\n         assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n         assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n         assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        DateTime start = new DateTime(2010, 6, 30, 12, 30, ISOChronology.getInstance(PARIS));\n+        DateTime end = new DateTime(2010, 7, 1, 14, 30, ISOChronology.getInstance(PARIS));\n+        assertEquals(new MutableInterval(start, end), MutableInterval.parse(\"2010-06-30T12:30/2010-07-01T14:30\"));\n+        assertEquals(new MutableInterval(start, end), MutableInterval.parse(\"2010-06-30T12:30/P1DT2H\"));\n+        assertEquals(new MutableInterval(start, end), MutableInterval.parse(\"P1DT2H/2010-07-01T14:30\"));\n     }\n \n     //-----------------------------------------------------------------------\n                 interval.setChronology(chrono);\n                 interval.setInterval(1234L, 5678L);\n             }\n-            public Class getSupportedType() {\n+            public Class<?> getSupportedType() {\n                 return String.class;\n             }\n         };\n                 interval.setChronology(chrono);\n                 interval.setInterval(1234L, 5678L);\n             }\n-            public Class getSupportedType() {\n+            public Class<?> getSupportedType() {\n                 return ReadableInterval.class;\n             }\n         };\n--- a/JodaTime/src/test/java/org/joda/time/TestMutablePeriod_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutablePeriod_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        assertEquals(new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 890), MutablePeriod.parse(\"P1Y2M3W4DT5H6M7.890S\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Test constructor ()\n      */\n--- a/JodaTime/src/test/java/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestPeriod_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testParse_noFormatter() throws Throwable {\n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 890), Period.parse(\"P1Y2M3W4DT5H6M7.890S\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testConstructor1() throws Throwable {\n         Period test = new Period();\n         assertEquals(PeriodType.standard(), test.getPeriodType());", "timestamp": 1289656275, "metainfo": ""}