{"sha": "1b7590e5d5f512a3e178c7ce06ed4cd150335807", "log": "Add javadoc and refactor implementation   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDuration.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDuration.java\n         long totalMillis = 0;\n \n         DurationField field;\n-        int value;\n-\n-        if ((value = iYears) != 0) {\n+        int value; // used to lock fields against threading issues\n+        value = iYears;\n+        if (value != 0) {\n             field = type.years();\n             if (isPrecise &= field.isPrecise()) {\n                 totalMillis += field.getMillis(value);\n             }\n         }\n-        if ((value = iMonths) != 0) {\n+        value = iMonths;\n+        if (value != 0) {\n             field = type.months();\n             if (isPrecise &= field.isPrecise()) {\n                 totalMillis += field.getMillis(value);\n             }\n         }\n-        if ((value = iWeeks) != 0) {\n+        value = iWeeks;\n+        if (value != 0) {\n             field = type.weeks();\n             if (isPrecise &= field.isPrecise()) {\n                 totalMillis += field.getMillis(value);\n             }\n         }\n-        if ((value = iDays) != 0) {\n+        value = iDays;\n+        if (value != 0) {\n             field = type.days();\n             if (isPrecise &= field.isPrecise()) {\n                 totalMillis += field.getMillis(value);\n             }\n         }\n-        if ((value = iHours) != 0) {\n+        value = iHours;\n+        if (value != 0) {\n             field = type.hours();\n             if (isPrecise &= field.isPrecise()) {\n                 totalMillis += field.getMillis(value);\n             }\n         }\n-        if ((value = iMinutes) != 0) {\n+        value = iMinutes;\n+        if (value != 0) {\n             field = type.minutes();\n             if (isPrecise &= field.isPrecise()) {\n                 totalMillis += field.getMillis(value);\n             }\n         }\n-        if ((value = iSeconds) != 0) {\n+        value = iSeconds;\n+        if (value != 0) {\n             field = type.seconds();\n             if (isPrecise &= field.isPrecise()) {\n                 totalMillis += field.getMillis(value);\n             }\n         }\n-        if ((value = iMillis) != 0) {\n+        value = iMillis;\n+        if (value != 0) {\n             field = type.millis();\n             if (isPrecise &= field.isPrecise()) {\n                 totalMillis += field.getMillis(value);\n             type = type.withChronology(chrono);\n         }\n \n-        int value;\n-\n-        if ((value = scaleValue(iYears, scalar)) != 0) {\n+        long value; // used to lock fields against threading issues\n+        value = scaleValue(iYears, scalar);\n+        if (value != 0) {\n             instant = type.years().add(instant, value);\n         }\n-        if ((value = scaleValue(iMonths, scalar)) != 0) {\n+        value = scaleValue(iMonths, scalar);\n+        if (value != 0) {\n             instant = type.months().add(instant, value);\n         }\n-        if ((value = scaleValue(iWeeks, scalar)) != 0) {\n+        value = scaleValue(iWeeks, scalar);\n+        if (value != 0) {\n             instant = type.weeks().add(instant, value);\n         }\n-        if ((value = scaleValue(iDays, scalar)) != 0) {\n+        value = scaleValue(iDays, scalar);\n+        if (value != 0) {\n             instant = type.days().add(instant, value);\n         }\n-        if ((value = scaleValue(iHours, scalar)) != 0) {\n+        value = scaleValue(iHours, scalar);\n+        if (value != 0) {\n             instant = type.hours().add(instant, value);\n         }\n-        if ((value = scaleValue(iMinutes, scalar)) != 0) {\n+        value = scaleValue(iMinutes, scalar);\n+        if (value != 0) {\n             instant = type.minutes().add(instant, value);\n         }\n-        if ((value = scaleValue(iSeconds, scalar)) != 0) {\n+        value = scaleValue(iSeconds, scalar);\n+        if (value != 0) {\n             instant = type.seconds().add(instant, value);\n         }\n-        if ((value = scaleValue(iMillis, scalar)) != 0) {\n+        value = scaleValue(iMillis, scalar);\n+        if (value != 0) {\n             instant = type.millis().add(instant, value);\n         }\n \n         return instant;\n     }\n \n-    private static int scaleValue(int value, int scalar) {\n+    /**\n+     * Convert the scalar to a multiple efficiently.\n+     * \n+     * @param value  the value\n+     * @param scalar  the scalar\n+     * @return the converted value\n+     */\n+    private static long scaleValue(int value, int scalar) {\n+        long val = value;  // use long to avoid truncation\n         switch (scalar) {\n         case -1:\n-            return -value;\n+            return -val;\n         case 0:\n             return 0;\n         case 1:\n-            return value;\n+            return val;\n         default:\n-            return value * scalar;\n+            return val * scalar;\n         }\n     }\n \n         if (millis != 0) {\n             checkArgument(type.millis(), \"millis\");\n         }\n-\n+        \n+        // assign fields in one block to reduce threading issues\n         iYears = years;\n         iMonths = months;\n         iWeeks = weeks;\n             startInstant = field.add(startInstant, millis);\n         }\n         \n-        // (end - start) is excess to be discarded\n-        iTotalMillis = baseTotalMillis - (endInstant - startInstant);\n-        iTotalMillisState = 2;\n-        \n+        // assign fields in one block to reduce threading issues\n         iYears = years;\n         iMonths = months;\n         iWeeks = weeks;\n         iMinutes = minutes;\n         iSeconds = seconds;\n         iMillis = millis;\n+        // (end - start) is excess to be discarded\n+        iTotalMillis = baseTotalMillis - (endInstant - startInstant);\n+        iTotalMillisState = 2;\n     }\n \n     /**\n             startInstant = field.add(startInstant, millis);\n         }\n         \n-        // (end - start) is excess to be discarded\n-        iTotalMillis = duration - (duration - startInstant);\n-        iTotalMillisState = 2;\n-        \n+        // assign fields in one block to reduce threading issues\n         iYears = years;\n         iMonths = months;\n         iWeeks = weeks;\n         iMinutes = minutes;\n         iSeconds = seconds;\n         iMillis = millis;\n+        // (end - start) is excess to be discarded\n+        iTotalMillis = duration - (duration - startInstant);\n+        iTotalMillisState = 2;\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1090781273, "metainfo": ""}