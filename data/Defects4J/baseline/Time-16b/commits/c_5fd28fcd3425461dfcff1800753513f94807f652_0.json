{"sha": "5fd28fcd3425461dfcff1800753513f94807f652", "log": "Fix and simplify zero handling in period format   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n  * @author Brian S O'Neill\n  */\n public class PeriodFormatterBuilder {\n-    private static final int PRINT_ZERO_RARELY = 1;\n-    private static final int PRINT_ZERO_IF_SUPPORTED = 2;\n-    private static final int PRINT_ZERO_ALWAYS = 3;\n-\n-    private boolean iFavorFirstFieldForZero;\n+    private static final int PRINT_ZERO_RARELY_FIRST = 1;\n+    private static final int PRINT_ZERO_RARELY_LAST = 2;\n+    private static final int PRINT_ZERO_IF_SUPPORTED = 3;\n+    private static final int PRINT_ZERO_ALWAYS = 4;\n+    private static final int PRINT_ZERO_NEVER = 5;\n+    \n+    private static final int YEARS = 0;\n+    private static final int MONTHS = 1;\n+    private static final int WEEKS = 2;\n+    private static final int DAYS = 3;\n+    private static final int HOURS = 4;\n+    private static final int MINUTES = 5;\n+    private static final int SECONDS = 6;\n+    private static final int MILLIS = 7;\n+    private static final int SECONDS_MILLIS = 8;\n+    private static final int SECONDS_OPTIONAL_MILLIS = 9;\n \n     private int iMinPrintedDigits;\n     private int iPrintZeroSetting;\n     // List of PeriodFormatters used to build a final formatter.\n     private List iFormatters;\n \n-    // List of PeriodFormatters used to build an alternate formatter. The\n-    // alternate is chosen if no other fields are printed.\n-    private List iAlternateFormatters;\n+    // Last PeriodFormatter appended of each field type.\n+    private FieldFormatter[] iFieldFormatters;\n \n     public PeriodFormatterBuilder() {\n         clear();\n     }\n \n     /**\n-     * Converts to a PeriodPrinter that prints using all the appended\n-     * elements. Subsequent changes to this builder do not affect the returned\n-     * printer.\n+     * Converts to a PeriodPrinter that prints using all the appended elements.\n+     * Subsequent changes to this builder do not affect the returned printer.\n+     * \n+     * @return the newly created printer\n      */\n     public PeriodPrinter toPrinter() {\n         return toFormatter();\n     }\n \n     /**\n-     * Converts to a PeriodParser that parses using all the appended\n-     * elements. Subsequent changes to this builder do not affect the returned\n-     * parser.\n+     * Converts to a PeriodParser that parses using all the appended elements.\n+     * Subsequent changes to this builder do not affect the returned parser.\n+     * \n+     * @return the newly created parser\n      */\n     public PeriodParser toParser() {\n         return toFormatter();\n     }\n \n     /**\n-     * Converts to a PeriodFormatter that formats using all the appended\n-     * elements. Subsequent changes to this builder do not affect the returned\n-     * formatter.\n+     * Converts to a PeriodFormatter that formats using all the appended elements.\n+     * Subsequent changes to this builder do not affect the returned formatter.\n+     * \n+     * @return the newly created formatter\n      */\n     public PeriodFormatter toFormatter() {\n         PeriodFormatter formatter = toFormatter(iFormatters);\n-        List altFormatters = iAlternateFormatters;\n-        if (altFormatters.size() > 0) {\n-            // Alternate is needed only if field formatters were\n-            // appended. Literals may have been appended as well.\n-            for (int i=altFormatters.size(); --i>=0; ) {\n-                if (altFormatters.get(i) instanceof FieldFormatter) {\n-                    formatter = new AlternateSelector\n-                        (formatter, altFormatters, iFavorFirstFieldForZero);\n-                    break;\n-                }\n-            }\n-        }\n+        iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();\n         return formatter;\n     }\n \n     }\n \n     /**\n-     * Clears out all the appended elements, allowing this builder to be\n-     * reused.\n+     * Clears out all the appended elements, allowing this builder to be reused.\n      */\n     public void clear() {\n-        iFavorFirstFieldForZero = false;\n         iMinPrintedDigits = 1;\n-        iPrintZeroSetting = PRINT_ZERO_RARELY;\n+        iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;\n         iMaxParsedDigits = 10;\n         iRejectSignedValues = false;\n         iPrefix = null;\n         } else {\n             iFormatters.clear();\n         }\n-        if (iAlternateFormatters == null) {\n-            iAlternateFormatters = new ArrayList();\n-        } else {\n-            iAlternateFormatters.clear();\n-        }\n+        iFieldFormatters = new FieldFormatter[10];\n     }\n \n     /**\n         clearPrefix();\n         Literal literal = new Literal(text);\n         iFormatters.add(literal);\n-        iAlternateFormatters.add(literal);\n         return this;\n     }\n \n     /**\n      * Never print zero values for the next and following appended fields,\n      * unless no fields would be printed. If no fields are printed, the printer\n-     * forces at most one \"printZeroRarely\" field to print a zero.\n+     * forces the last \"printZeroRarely\" field to print a zero.\n      * <p>\n      * This field setting is the default.\n      *\n      * @return this PeriodFormatterBuilder\n-     * @see #favorLastFieldForZero()\n-     * @see #favorFirstFieldForZero()\n-     */\n-    public PeriodFormatterBuilder printZeroRarely() {\n-        iPrintZeroSetting = PRINT_ZERO_RARELY;\n+     */\n+    public PeriodFormatterBuilder printZeroRarelyLast() {\n+        iPrintZeroSetting = PRINT_ZERO_RARELY_LAST;\n+        return this;\n+    }\n+\n+    /**\n+     * Never print zero values for the next and following appended fields,\n+     * unless no fields would be printed. If no fields are printed, the printer\n+     * forces the first \"printZeroRarely\" field to print a zero.\n+     *\n+     * @return this PeriodFormatterBuilder\n+     */\n+    public PeriodFormatterBuilder printZeroRarelyFirst() {\n+        iPrintZeroSetting = PRINT_ZERO_RARELY_FIRST;\n         return this;\n     }\n \n      */\n     public PeriodFormatterBuilder printZeroAlways() {\n         iPrintZeroSetting = PRINT_ZERO_ALWAYS;\n+        return this;\n+    }\n+\n+    /**\n+     * Never print zero values for the next and following appended fields,\n+     * unless no fields would be printed. If no fields are printed, the printer\n+     * forces the last \"printZeroRarely\" field to print a zero.\n+     * <p>\n+     * This field setting is the default.\n+     *\n+     * @return this PeriodFormatterBuilder\n+     */\n+    public PeriodFormatterBuilder printZeroNever() {\n+        iPrintZeroSetting = PRINT_ZERO_NEVER;\n         return this;\n     }\n \n      * @return this PeriodFormatterBuilder\n      */\n     public PeriodFormatterBuilder appendYears() {\n-        appendField(1);\n+        appendField(YEARS);\n         return this;\n     }\n \n      * @return this PeriodFormatterBuilder\n      */\n     public PeriodFormatterBuilder appendMonths() {\n-        appendField(2);\n+        appendField(MONTHS);\n         return this;\n     }\n \n      * @return this PeriodFormatterBuilder\n      */\n     public PeriodFormatterBuilder appendWeeks() {\n-        appendField(3);\n+        appendField(WEEKS);\n         return this;\n     }\n \n      * @return this PeriodFormatterBuilder\n      */\n     public PeriodFormatterBuilder appendDays() {\n-        appendField(4);\n+        appendField(DAYS);\n         return this;\n     }\n \n      * @return this PeriodFormatterBuilder\n      */\n     public PeriodFormatterBuilder appendHours() {\n-        appendField(5);\n+        appendField(HOURS);\n         return this;\n     }\n \n      * @return this PeriodFormatterBuilder\n      */\n     public PeriodFormatterBuilder appendMinutes() {\n-        appendField(6);\n+        appendField(MINUTES);\n         return this;\n     }\n \n      * @return this PeriodFormatterBuilder\n      */\n     public PeriodFormatterBuilder appendSeconds() {\n-        appendField(7);\n+        appendField(SECONDS);\n         return this;\n     }\n \n      * @return this PeriodFormatterBuilder\n      */\n     public PeriodFormatterBuilder appendSecondsWithMillis() {\n-        appendField(9);\n+        appendField(SECONDS_MILLIS);\n         return this;\n     }\n \n      * @return this PeriodFormatterBuilder\n      */\n     public PeriodFormatterBuilder appendSecondsWithOptionalMillis() {\n-        appendField(10);\n+        appendField(SECONDS_OPTIONAL_MILLIS);\n         return this;\n     }\n \n      * @return this PeriodFormatterBuilder\n      */\n     public PeriodFormatterBuilder appendMillis() {\n-        appendField(8);\n+        appendField(MILLIS);\n         return this;\n     }\n \n      * @return this PeriodFormatterBuilder\n      */\n     public PeriodFormatterBuilder appendMillis3Digit() {\n-        appendField(8, 3);\n+        appendField(7, 3);\n         return this;\n     }\n \n \n     private void appendField(int type, int minPrinted) {\n         FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,\n-            iMaxParsedDigits, iRejectSignedValues, type, iPrefix, null);\n+            iMaxParsedDigits, iRejectSignedValues, type, iFieldFormatters, iPrefix, null);\n         iFormatters.add(field);\n-        if (iPrintZeroSetting == PRINT_ZERO_RARELY) {\n-            iAlternateFormatters.add(field);\n-        }\n+        iFieldFormatters[type] = field;\n         iPrefix = null;\n     }\n \n         }\n \n         clearPrefix();\n-        Object newField = new FieldFormatter((FieldFormatter) originalField, suffix);\n+        FieldFormatter newField = new FieldFormatter((FieldFormatter) originalField, suffix);\n         iFormatters.set(iFormatters.size() - 1, newField);\n-\n-        int index = iAlternateFormatters.lastIndexOf(originalField);\n-        if (index >= 0) {\n-            iAlternateFormatters.set(index, newField);\n-        }\n-\n+        iFieldFormatters[newField.getFieldType()] = newField;\n+        \n         return this;\n     }\n \n             formatters.add(new Separator(text, finalText, composite, useBefore, useAfter));\n         }\n         \n-        return this;\n-    }\n-\n-    /**\n-     * If the printer doesn't print any field values, it forces a\n-     * \"printZeroRarely\" field to print. This setting controls which field is\n-     * selected.\n-     * <p>\n-     * It starts from the last appended field, and moves towards the first,\n-     * stopping until it finds a field that is supported by the period being\n-     * printed. If no supported fields are found, then no fields are printed.\n-     * <p>\n-     * This setting is the default.\n-     *\n-     * @return this PeriodFormatterBuilder\n-     * @see #printZeroRarely()\n-     */\n-    public PeriodFormatterBuilder favorLastFieldForZero() {\n-        iFavorFirstFieldForZero = false;\n-        return this;\n-    }\n-\n-    /**\n-     * If the printer doesn't print any field values, it forces a\n-     * \"printZeroRarely\" field to print. This setting controls which field is\n-     * selected.\n-     * <p>\n-     * It starts from the first appended field, and moves towards the last,\n-     * stopping until it finds a field that is supported by the period being\n-     * printed. If no supported fields are found, then no fields are printed.\n-     *\n-     * @return this PeriodFormatterBuilder\n-     * @see #printZeroRarely()\n-     */\n-    public PeriodFormatterBuilder favorFirstFieldForZero() {\n-        iFavorFirstFieldForZero = true;\n         return this;\n     }\n \n         private final int iPrintZeroSetting;\n         private final int iMaxParsedDigits;\n         private final boolean iRejectSignedValues;\n-\n+        \n+        /** The index of the field type, 0=year, etc. */\n         private final int iFieldType;\n-\n+        /**\n+         * The array of the latest formatter added for each type.\n+         * This is shared between all the field formatters in a formatter.\n+         */\n+        private final FieldFormatter[] iFieldFormatters;\n+        \n         private final PeriodFieldAffix iPrefix;\n         private final PeriodFieldAffix iSuffix;\n+        \n \n         FieldFormatter(int minPrintedDigits, int printZeroSetting,\n                        int maxParsedDigits, boolean rejectSignedValues,\n-                       int fieldType, PeriodFieldAffix prefix, PeriodFieldAffix suffix) {\n+                       int fieldType, FieldFormatter[] fieldFormatters,\n+                       PeriodFieldAffix prefix, PeriodFieldAffix suffix) {\n             iMinPrintedDigits = minPrintedDigits;\n             iPrintZeroSetting = printZeroSetting;\n             iMaxParsedDigits = maxParsedDigits;\n             iRejectSignedValues = rejectSignedValues;\n             iFieldType = fieldType;\n+            iFieldFormatters = fieldFormatters;\n             iPrefix = prefix;\n             iSuffix = suffix;\n         }\n             iMaxParsedDigits = field.iMaxParsedDigits;\n             iRejectSignedValues = field.iRejectSignedValues;\n             iFieldType = field.iFieldType;\n+            iFieldFormatters = field.iFieldFormatters;\n             iPrefix = field.iPrefix;\n             if (field.iSuffix != null) {\n                 suffix = new CompositeAffix(field.iSuffix, suffix);\n             }\n             iSuffix = suffix;\n-        }\n-\n-        FieldFormatter(FieldFormatter field, int printZeroSetting) {\n-            iMinPrintedDigits = field.iMinPrintedDigits;\n-            iPrintZeroSetting = printZeroSetting;\n-            iMaxParsedDigits = field.iMaxParsedDigits;\n-            iRejectSignedValues = field.iRejectSignedValues;\n-            iFieldType = field.iFieldType;\n-            iPrefix = field.iPrefix;\n-            iSuffix = field.iSuffix;\n         }\n \n         public int countFieldsToPrint(ReadablePeriod period) {\n             }\n \n             int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);\n-            if (iFieldType >= 9) {\n+            if (iFieldType >= 8) {\n                 sum++; // decimal point\n-                if (iFieldType == 10 && (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND) == 0) {\n+                if (iFieldType == SECONDS_OPTIONAL_MILLIS &&\n+                    (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND) == 0) {\n                     sum -= 4; // remove three digits and decimal point\n                 }\n                 valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;\n             }\n             int value = (int) valueLong;\n \n-            PeriodFieldAffix affix;\n-            if ((affix = iPrefix) != null) {\n-                sum += affix.calculatePrintedLength(value);\n-            }\n-            if ((affix = iSuffix) != null) {\n-                sum += affix.calculatePrintedLength(value);\n+            if (iPrefix != null) {\n+                sum += iPrefix.calculatePrintedLength(value);\n+            }\n+            if (iSuffix != null) {\n+                sum += iSuffix.calculatePrintedLength(value);\n             }\n \n             return sum;\n                 return;\n             }\n             int value = (int) valueLong;\n-            if (iFieldType >= 9) {\n+            if (iFieldType >= 8) {\n                 value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);\n             }\n \n-            PeriodFieldAffix affix;\n-            if ((affix = iPrefix) != null) {\n-                affix.printTo(buf, value);\n+            if (iPrefix != null) {\n+                iPrefix.printTo(buf, value);\n             }\n             int minDigits = iMinPrintedDigits;\n             if (minDigits <= 1) {\n             } else {\n                 FormatUtils.appendPaddedInteger(buf, value, minDigits);\n             }\n-            if (iFieldType >= 9) {\n+            if (iFieldType >= 8) {\n                 int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n-                if (iFieldType == 9 || dp > 0) {\n+                if (iFieldType == SECONDS_MILLIS || dp > 0) {\n                     buf.append('.');\n                     FormatUtils.appendPaddedInteger(buf, dp, 3);\n                 }\n             }\n-            if ((affix = iSuffix) != null) {\n-                affix.printTo(buf, value);\n+            if (iSuffix != null) {\n+                iSuffix.printTo(buf, value);\n             }\n         }\n \n                 return;\n             }\n             int value = (int) valueLong;\n-            if (iFieldType >= 9) {\n+            if (iFieldType >= 8) {\n                 value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);\n             }\n \n-            PeriodFieldAffix affix;\n-            if ((affix = iPrefix) != null) {\n-                affix.printTo(out, value);\n+            if (iPrefix != null) {\n+                iPrefix.printTo(out, value);\n             }\n             int minDigits = iMinPrintedDigits;\n             if (minDigits <= 1) {\n             } else {\n                 FormatUtils.writePaddedInteger(out, value, minDigits);\n             }\n-            if (iFieldType >= 9) {\n+            if (iFieldType >= 8) {\n                 int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n-                if (iFieldType == 9 || dp > 0) {\n+                if (iFieldType == SECONDS_MILLIS || dp > 0) {\n                     out.write('.');\n                     FormatUtils.writePaddedInteger(out, dp, 3);\n                 }\n             }\n-            if ((affix = iSuffix) != null) {\n-                affix.printTo(out, value);\n+            if (iSuffix != null) {\n+                iSuffix.printTo(out, value);\n             }\n         }\n \n                 }\n             }\n \n-            if (!mustParse && !isSupported(period.getPeriodType())) {\n+            if (!mustParse && !isSupported(period.getPeriodType(), iFieldType)) {\n                 // If parsing is not required and the field is not supported,\n                 // exit gracefully so that another parser can continue on.\n                 return position;\n                 }\n             }\n             \n-            setFieldValue(period, value);\n+            setFieldValue(period, iFieldType, value);\n                 \n             if (position >= 0 && iSuffix != null) {\n                 position = iSuffix.parse(text, position);\n             } else {\n                 type = period.getPeriodType();\n             }\n+            if (type != null && isSupported(type, iFieldType) == false) {\n+                return Long.MAX_VALUE;\n+            }\n \n             int value;\n \n             switch (iFieldType) {\n             default:\n                 return Long.MAX_VALUE;\n-            case 1:\n-                if (type != null && type.years().isSupported() == false) {\n+            case YEARS:\n+                value = period.getYears();\n+                break;\n+            case MONTHS:\n+                value = period.getMonths();\n+                break;\n+            case WEEKS:\n+                value = period.getWeeks();\n+                break;\n+            case DAYS:\n+                value = period.getDays();\n+                break;\n+            case HOURS:\n+                value = period.getHours();\n+                break;\n+            case MINUTES:\n+                value = period.getMinutes();\n+                break;\n+            case SECONDS:\n+                value = period.getSeconds();\n+                break;\n+            case MILLIS:\n+                value = period.getMillis();\n+                break;\n+            case SECONDS_MILLIS: // drop through\n+            case SECONDS_OPTIONAL_MILLIS:\n+                value = period.getSeconds() * DateTimeConstants.MILLIS_PER_SECOND + period.getMillis();\n+                break;\n+            }\n+\n+            // determine if period is zero and this is the last field\n+            if (value == 0) {\n+                switch (iPrintZeroSetting) {\n+                case PRINT_ZERO_NEVER:\n                     return Long.MAX_VALUE;\n-                }\n-                value = period.getYears();\n-                break;\n-            case 2:\n-                if (type != null && type.months().isSupported() == false) {\n-                    return Long.MAX_VALUE;\n-                }\n-                value = period.getMonths();\n-                break;\n-            case 3:\n-                if (type != null && type.weeks().isSupported() == false) {\n-                    return Long.MAX_VALUE;\n-                }\n-                value = period.getWeeks();\n-                break;\n-            case 4:\n-                if (type != null && type.days().isSupported() == false) {\n-                    return Long.MAX_VALUE;\n-                }\n-                value = period.getDays();\n-                break;\n-            case 5:\n-                if (type != null && type.hours().isSupported() == false) {\n-                    return Long.MAX_VALUE;\n-                }\n-                value = period.getHours();\n-                break;\n-            case 6:\n-                if (type != null && type.minutes().isSupported() == false) {\n-                    return Long.MAX_VALUE;\n-                }\n-                value = period.getMinutes();\n-                break;\n-            case 7:\n-                if (type != null && type.seconds().isSupported() == false) {\n-                    return Long.MAX_VALUE;\n-                }\n-                value = period.getSeconds();\n-                break;\n-            case 8:\n-                if (type != null && type.millis().isSupported() == false) {\n-                    return Long.MAX_VALUE;\n-                }\n-                value = period.getMillis();\n-                break;\n-            case 9: // drop through\n-            case 10:\n-                if (type != null && type.seconds().isSupported() == false && type.millis().isSupported() == false) {\n-                    return Long.MAX_VALUE;\n-                }\n-                value = period.getSeconds() * DateTimeConstants.MILLIS_PER_SECOND + period.getMillis();\n-                break;\n-            }\n-\n-            if (value == 0 && iPrintZeroSetting == PRINT_ZERO_RARELY) {\n-                return Long.MAX_VALUE;\n+                case PRINT_ZERO_RARELY_LAST:\n+                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {\n+                        for (int i = iFieldType + 1; i < 10; i++) {\n+                            if (isSupported(type, i) && iFieldFormatters[i] != null) {\n+                                return Long.MAX_VALUE;\n+                            }\n+                        }\n+                    } else {\n+                        return Long.MAX_VALUE;\n+                    }\n+                    break;\n+                case PRINT_ZERO_RARELY_FIRST:\n+                    if (isZero(period) && iFieldFormatters[iFieldType] == this) {\n+                        for (int i = Math.min(iFieldType, 8) - 1; i >= 0; i++) {\n+                            if (isSupported(type, i) && iFieldFormatters[i] != null) {\n+                                return Long.MAX_VALUE;\n+                            }\n+                        }\n+                    } else {\n+                        return Long.MAX_VALUE;\n+                    }\n+                    break;\n+                }\n             }\n \n             return value;\n         }\n \n-        boolean isSupported(PeriodType type) {\n-            switch (iFieldType) {\n+        boolean isZero(ReadablePeriod period) {\n+            return (period.getYears() == 0 && period.getMonths() == 0 &&\n+                    period.getWeeks() == 0 && period.getDays() == 0 &&\n+                    period.getHours() == 0 && period.getMinutes() == 0 &&\n+                    period.getSeconds() == 0 && period.getMillis() == 0);\n+        }\n+\n+        boolean isSupported(PeriodType type, int field) {\n+            switch (field) {\n             default:\n                 return false;\n-            case 1:\n+            case YEARS:\n                 return type.years().isSupported();\n-            case 2:\n+            case MONTHS:\n                 return type.months().isSupported();\n-            case 3:\n+            case WEEKS:\n                 return type.weeks().isSupported();\n-            case 4:\n+            case DAYS:\n                 return type.days().isSupported();\n-            case 5:\n+            case HOURS:\n                 return type.hours().isSupported();\n-            case 6:\n+            case MINUTES:\n                 return type.minutes().isSupported();\n-            case 7:\n+            case SECONDS:\n                 return type.seconds().isSupported();\n-            case 8:\n+            case MILLIS:\n                 return type.millis().isSupported();\n-            case 9: // drop through\n-            case 10:\n+            case SECONDS_MILLIS: // drop through\n+            case SECONDS_OPTIONAL_MILLIS:\n                 return type.seconds().isSupported() ||  type.millis().isSupported();\n             }\n         }\n \n-        void setFieldValue(ReadWritablePeriod period, int value) {\n-            switch (iFieldType) {\n+        void setFieldValue(ReadWritablePeriod period, int field, int value) {\n+            switch (field) {\n             default:\n                 break;\n-            case 1:\n+            case YEARS:\n                 period.setYears(value);\n                 break;\n-            case 2:\n+            case MONTHS:\n                 period.setMonths(value);\n                 break;\n-            case 3:\n+            case WEEKS:\n                 period.setWeeks(value);\n                 break;\n-            case 4:\n+            case DAYS:\n                 period.setDays(value);\n                 break;\n-            case 5:\n+            case HOURS:\n                 period.setHours(value);\n                 break;\n-            case 6:\n+            case MINUTES:\n                 period.setMinutes(value);\n                 break;\n-            case 7:\n+            case SECONDS:\n                 period.setSeconds(value);\n                 break;\n-            case 8:\n+            case MILLIS:\n                 period.setMillis(value);\n                 break;\n             }\n         }\n \n-        int getPrintZeroSetting() {\n-            return iPrintZeroSetting;\n+        int getFieldType() {\n+            return iFieldType;\n         }\n     }\n \n         }\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Selects between a number of choices based on which matches best.\n-     */\n-    private static final class AlternateSelector extends AbstractPeriodFormatter\n-        implements PeriodFormatter\n-    {\n-        private final PeriodFormatter iPrimaryFormatter;\n-        private final PeriodPrinter[] iAlternatePrinters;\n-        private final boolean iFavorFirstFieldForZero;\n-\n-        AlternateSelector(PeriodFormatter primaryFormatter,\n-                          List alternatePrinters,\n-                          boolean favorFirstFieldForZero) {\n-            iPrimaryFormatter = primaryFormatter;\n-            iAlternatePrinters = (PeriodPrinter[])alternatePrinters.toArray\n-                (new PeriodPrinter[alternatePrinters.size()]);\n-            iFavorFirstFieldForZero = favorFirstFieldForZero;\n-        }\n-\n-        public int countFieldsToPrint(ReadablePeriod period, int stopAt) {\n-            int count = iPrimaryFormatter.countFieldsToPrint(period, stopAt);\n-            if (count < 1 && stopAt >= 1) {\n-                if (chooseFieldToPrint(period) != null) {\n-                    return 1;\n-                }\n-            }\n-            return count;\n-        }\n-\n-        public int calculatePrintedLength(ReadablePeriod period) {\n-            if (iPrimaryFormatter.countFieldsToPrint(period, 1) > 0) {\n-                return iPrimaryFormatter.calculatePrintedLength(period);\n-            }\n-\n-            Object chosenOne = chooseFieldToPrint(period);\n-\n-            int sum = 0;\n-            PeriodPrinter[] printers = iAlternatePrinters;\n-            for (int i=printers.length; --i>=0; ) {\n-                PeriodPrinter dp = printers[i];\n-                if (dp == chosenOne || !(dp instanceof FieldFormatter)) {\n-                    sum += dp.calculatePrintedLength(period);\n-                }\n-            }\n-            return sum;\n-        }\n-\n-        public void printTo(StringBuffer buf, ReadablePeriod period) {\n-            if (iPrimaryFormatter.countFieldsToPrint(period, 1) > 0) {\n-                iPrimaryFormatter.printTo(buf, period);\n-                return;\n-            }\n-\n-            Object chosenOne = chooseFieldToPrint(period);\n-            \n-            PeriodPrinter[] printers = iAlternatePrinters;\n-            int len = printers.length;\n-            for (int i=0; i<len; i++) {\n-                PeriodPrinter dp = printers[i];\n-                if (dp == chosenOne || !(dp instanceof FieldFormatter)) {\n-                    dp.printTo(buf, period);\n-                }\n-            }\n-        }\n-\n-        public void printTo(Writer out, ReadablePeriod period) throws IOException {\n-            if (iPrimaryFormatter.countFieldsToPrint(period, 1) > 0) {\n-                iPrimaryFormatter.printTo(out, period);\n-                return;\n-            }\n-            \n-            Object chosenOne = chooseFieldToPrint(period);\n-\n-            PeriodPrinter[] printers = iAlternatePrinters;\n-            int len = printers.length;\n-            for (int i=0; i<len; i++) {\n-                PeriodPrinter dp = printers[i];\n-                if (dp == chosenOne || !(dp instanceof FieldFormatter)) {\n-                    dp.printTo(out, period);\n-                }\n-            }\n-        }\n-\n-        public int parseInto(ReadWritablePeriod period,\n-                             String periodStr, int position) {\n-            return iPrimaryFormatter.parseInto(period, periodStr, position);\n-        }\n-\n-        private FieldFormatter chooseFieldToPrint(ReadablePeriod period) {\n-            PeriodType type = period.getPeriodType();\n-            PeriodPrinter[] printers = iAlternatePrinters;\n-            if (iFavorFirstFieldForZero) {\n-                int len = printers.length;\n-                for (int i=0; i<len; i++) {\n-                    PeriodPrinter dp = printers[i];\n-                    if (dp instanceof FieldFormatter) {\n-                        FieldFormatter ff = (FieldFormatter) dp;\n-                        if (ff.isSupported(type)) {\n-                            if (ff.getPrintZeroSetting() == PRINT_ZERO_RARELY) {\n-                                ff = new FieldFormatter(ff, PRINT_ZERO_IF_SUPPORTED);\n-                                printers[i] = ff;\n-                            }\n-                            return ff;\n-                        }\n-                    }\n-                }\n-            } else {\n-                for (int i=printers.length; --i>=0; ) {\n-                    PeriodPrinter dp = printers[i];\n-                    if (dp instanceof FieldFormatter) {\n-                        FieldFormatter ff = (FieldFormatter) dp;\n-                        if (ff.isSupported(type)) {\n-                            if (ff.getPrintZeroSetting() == PRINT_ZERO_RARELY) {\n-                                ff = new FieldFormatter(ff, PRINT_ZERO_IF_SUPPORTED);\n-                                printers[i] = ff;\n-                            }\n-                            return ff;\n-                        }\n-                    }\n-                }\n-            }\n-            return null;\n-        }\n-    }\n-\n }\n--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n         assertEquals(\"---0\", f.print(EMPTY_PERIOD));\n         assertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));\n         assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n-    }\n-\n-    public void testFormatPrintZeroRarely() {\n+        \n+        // test only last instance of same field is output\n+        f = new PeriodFormatterBuilder()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendYears().toFormatter();\n+        assertEquals(\"-0\", f.print(EMPTY_PERIOD));\n+        assertEquals(2, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n+    }\n+\n+    public void testFormatPrintZeroRarelyLast() {\n         PeriodFormatter f =\n             new PeriodFormatterBuilder()\n-                .printZeroRarely()\n+                .printZeroRarelyLast()\n                 .appendYears().appendLiteral(\"-\")\n                 .appendMonths().appendLiteral(\"-\")\n                 .appendWeeks().appendLiteral(\"-\")\n         assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n     }\n \n-    public void testFormatPrintZeroRarelyFavorFirst() {\n+    public void testFormatPrintZeroRarelyFirst() {\n         PeriodFormatter f =\n             new PeriodFormatterBuilder()\n-                .printZeroRarely().favorFirstFieldForZero()\n+                .printZeroRarelyFirst()\n                 .appendYears().appendLiteral(\"-\")\n                 .appendMonths().appendLiteral(\"-\")\n                 .appendWeeks().appendLiteral(\"-\")\n         assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n         \n         assertEquals(\"0---\", f.print(EMPTY_PERIOD));\n-        assertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n-    }\n-\n-    public void testFormatPrintZeroRarelyFavorLast() {\n-        PeriodFormatter f =\n-            new PeriodFormatterBuilder()\n-                .printZeroRarely().favorLastFieldForZero()\n-                .appendYears().appendLiteral(\"-\")\n-                .appendMonths().appendLiteral(\"-\")\n-                .appendWeeks().appendLiteral(\"-\")\n-                .appendDays().toFormatter();\n-        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(PERIOD));\n-        assertEquals(4, f.countFieldsToPrint(PERIOD));\n-        \n-        assertEquals(\"---0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(4, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n-        \n-        assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n-        assertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n-        assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n-        \n-        assertEquals(\"---0\", f.print(EMPTY_PERIOD));\n         assertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));\n         assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n     }\n         assertEquals(4, f.countFieldsToPrint(EMPTY_PERIOD));\n     }\n \n+    public void testFormatPrintZeroNever() {\n+        PeriodFormatter f =\n+            new PeriodFormatterBuilder()\n+                .printZeroNever()\n+                .appendYears().appendLiteral(\"-\")\n+                .appendMonths().appendLiteral(\"-\")\n+                .appendWeeks().appendLiteral(\"-\")\n+                .appendDays().toFormatter();\n+        assertEquals(\"1-2-3-4\", f.print(PERIOD));\n+        assertEquals(7, f.calculatePrintedLength(PERIOD));\n+        assertEquals(4, f.countFieldsToPrint(PERIOD));\n+        \n+        assertEquals(\"---\", f.print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(0, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n+        assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n+        \n+        assertEquals(\"---\", f.print(EMPTY_PERIOD));\n+        assertEquals(3, f.calculatePrintedLength(EMPTY_PERIOD));\n+        assertEquals(0, f.countFieldsToPrint(EMPTY_PERIOD));\n+    }\n+\n }", "timestamp": 1093713524, "metainfo": ""}