{"sha": "257fbbcdc2b458f9854e23fa885d5a379cd5ca34", "log": "Fixed conversions to and from java.util.Date and java.util.Calendar where time zone rules differ between JDK and Joda-Time.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java\n package org.joda.time.base;\n \n import java.util.Calendar;\n+import java.util.Date;\n import java.util.GregorianCalendar;\n import java.util.Locale;\n+import java.util.TimeZone;\n \n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeZone;\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Get the date time as a <code>java.util.Date</code>.\n+     * \n+     * @return a Date initialised with this datetime\n+     */\n+    public Date toDate() {\n+        long millis = getMillis();\n+        long millisLocal = millis - TimeZone.getDefault().getOffset(millis);\n+        return new Date(millisLocal + getZone().getOffsetFromLocal(millisLocal));\n+    }\n+\n+    /**\n      * Get the date time as a <code>java.util.Calendar</code>.\n      * The locale is passed in, enabling Calendar to select the correct\n      * localized subclass.\n         }\n         DateTimeZone zone = getZone();\n         Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);\n-        cal.setTime(toDate());\n+        cal.setTime(convertToDate(cal));\n         return cal;\n     }\n \n     public GregorianCalendar toGregorianCalendar() {\n         DateTimeZone zone = getZone();\n         GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());\n-        cal.setTime(toDate());\n+        cal.setTime(convertToDate(cal));\n         return cal;\n+    }\n+\n+    private Date convertToDate(Calendar cal) {\n+        long millis = getMillis();\n+        long millisLocal = millis - cal.getTimeZone().getOffset(millis);\n+        millis = millisLocal + getZone().getOffsetFromLocal(millisLocal);\n+        return new Date(millis);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java\n      * @throws ClassCastException if the object is an invalid type\n      */\n     public long getInstantMillis(Object object, Chronology chrono) {\n-        return ((Calendar) object).getTime().getTime();\n+        Calendar calendar = (Calendar) object;\n+        long millisLocal = calendar.getTime().getTime() +\n+            calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);\n+        DateTimeZone tz = DateTimeZone.forTimeZone(calendar.getTimeZone());\n+        return millisLocal - tz.getOffsetFromLocal(millisLocal);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/convert/DateConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/DateConverter.java\n import java.util.Date;\n \n import org.joda.time.Chronology;\n+import org.joda.time.DateTimeZone;\n \n /**\n  * DateConverter converts a java util Date to an instant or partial.\n      * @throws ClassCastException if the object is an invalid type\n      */\n     public long getInstantMillis(Object object, Chronology chrono) {\n-        return ((Date) object).getTime();\n+        Date date = (Date) object;\n+        long millisLocal = date.getTime() - date.getTimezoneOffset() * 60000;\n+        return millisLocal - DateTimeZone.getDefault().getOffsetFromLocal(millisLocal);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java\n         zone = DateTimeZone.getDefault();\n         locale = Locale.getDefault();\n         DateTimeZone.setDefault(LONDON);\n+        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n         Locale.setDefault(Locale.UK);\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        java.util.TimeZone.setDefault(zone.toTimeZone());\n         Locale.setDefault(locale);\n         zone = null;\n     }\n--- a/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestInstant_Constructors.java\n         zone = DateTimeZone.getDefault();\n         locale = Locale.getDefault();\n         DateTimeZone.setDefault(LONDON);\n+        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n         Locale.setDefault(Locale.UK);\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        java.util.TimeZone.setDefault(zone.toTimeZone());\n         Locale.setDefault(locale);\n         zone = null;\n     }\n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java\n         zone = DateTimeZone.getDefault();\n         locale = Locale.getDefault();\n         DateTimeZone.setDefault(LONDON);\n+        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n         Locale.setDefault(Locale.UK);\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        java.util.TimeZone.setDefault(zone.toTimeZone());\n         Locale.setDefault(locale);\n         zone = null;\n     }\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n         DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n         zone = DateTimeZone.getDefault();\n         DateTimeZone.setDefault(LONDON);\n+        java.util.TimeZone.setDefault(LONDON.toTimeZone());\n     }\n \n     protected void tearDown() throws Exception {\n         DateTimeUtils.setCurrentMillisSystem();\n         DateTimeZone.setDefault(zone);\n+        java.util.TimeZone.setDefault(zone.toTimeZone());\n         zone = null;\n     }\n ", "timestamp": 1129186479, "metainfo": ""}