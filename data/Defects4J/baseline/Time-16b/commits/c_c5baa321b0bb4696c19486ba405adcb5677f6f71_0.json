{"sha": "c5baa321b0bb4696c19486ba405adcb5677f6f71", "log": "Make DateTimeField a fully abstract class (not interface)   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeField.java\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to query\n      * @return the text value of the field\n      */\n-    public String getAsText(long instant) {\n-        return getAsText(instant, null);\n-    }\n+    public abstract String getAsText(long instant);\n \n     /**\n      * Get the human-readable, text value of this field from a partial instant.\n      * @param locale  the locale to use for selecting a text symbol, null for default\n      * @return the text value of the field\n      */\n-    public String getAsText(ReadablePartial partial, Locale locale) {\n-        return getAsText(partial, partial.get(this), locale);\n-    }\n+    public abstract String getAsText(ReadablePartial partial, Locale locale);\n \n     /**\n      * Get the human-readable, short text value of this field from the\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to query\n      * @return the short text value of the field\n      */\n-    public String getAsShortText(long instant) {\n-        return getAsShortText(instant, null);\n-    }\n+    public abstract String getAsShortText(long instant);\n \n     /**\n      * Get the human-readable, short text value of this field from a partial instant.\n      * @param locale  the locale to use for selecting a text symbol, null for default\n      * @return the text value of the field\n      */\n-    public String getAsShortText(ReadablePartial partial, Locale locale) {\n-        return getAsShortText(partial, partial.get(this), locale);\n-    }\n+    public abstract String getAsShortText(ReadablePartial partial, Locale locale);\n \n     /**\n      * Adds a value (which may be negative) to the millis value,\n      * @throws IllegalArgumentException if the text value is invalid\n      */\n     public abstract long set(long instant, String text, Locale locale);\n+\n+    /**\n+     * Sets a value in the milliseconds supplied from a human-readable, text value.\n+     * <p>\n+     * If setting this field would make other fields invalid, then those fields\n+     * may be changed. For example if the current date is the 31st January, and\n+     * the month is set to February, the day would be invalid. Instead, the day\n+     * would be changed to the closest value - the 28th/29th February as appropriate.\n+     * \n+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in\n+     * @param text  the text value to set\n+     * @return the updated milliseconds\n+     * @throws IllegalArgumentException if the text value is invalid\n+     */\n+    public abstract long set(long instant, String text);\n \n     /**\n      * Sets a value in the milliseconds supplied from a human-readable, text value.\n      */\n     public abstract int[] set(ReadablePartial instant, int fieldIndex, int[] values, String text, Locale locale);\n \n-    /**\n-     * Sets a value in the milliseconds supplied from a human-readable, text value.\n-     * <p>\n-     * If setting this field would make other fields invalid, then those fields\n-     * may be changed. For example if the current date is the 31st January, and\n-     * the month is set to February, the day would be invalid. Instead, the day\n-     * would be changed to the closest value - the 28th/29th February as appropriate.\n-     * \n-     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in\n-     * @param text  the text value to set\n-     * @return the updated milliseconds\n-     * @throws IllegalArgumentException if the text value is invalid\n-     */\n-    public long set(long instant, String text) {\n-        return set(instant, text, null);\n-    }\n-\n     // Extra information API\n     //------------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n      * The default implementation returns getAsText(get(instant), locale).\n      *\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to query\n-     * @param locale the locale to use for selecting a text symbol, null for\n-     * default\n+     * @param locale the locale to use for selecting a text symbol, null means default\n      * @return the text value of the field\n      */\n     public String getAsText(long instant, Locale locale) {\n         return getAsText(get(instant), locale);\n+    }\n+\n+    /**\n+     * Get the human-readable, text value of this field from the milliseconds.\n+     * <p>\n+     * The default implementation calls {@link #getAsText(long, Locale)}.\n+     *\n+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to query\n+     * @return the text value of the field\n+     */\n+    public final String getAsText(long instant) {\n+        return getAsText(instant, null);\n     }\n \n     /**\n     }\n \n     /**\n+     * Get the human-readable, text value of this field from a partial instant.\n+     * If the specified locale is null, the default locale is used.\n+     * <p>\n+     * The default implementation calls {@link ReadablePartial#get(DateTimeField)}\n+     * and {@link #getAsText(ReadablePartial, int, Locale)}.\n+     *\n+     * @param partial  the partial instant to query\n+     * @param locale  the locale to use for selecting a text symbol, null for default\n+     * @return the text value of the field\n+     */\n+    public final String getAsText(ReadablePartial partial, Locale locale) {\n+        return getAsText(partial, partial.get(this), locale);\n+    }\n+\n+    /**\n      * Get the human-readable, text value of this field from the field value.\n      * If the specified locale is null, the default locale is used.\n      * <p>\n      * The default implementation returns getAsShortText(get(instant), locale).\n      *\n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to query\n-     * @param locale the locale to use for selecting a text symbol, null for default\n+     * @param locale the locale to use for selecting a text symbol, null means default\n      * @return the text value of the field\n      */\n     public String getAsShortText(long instant, Locale locale) {\n         return getAsShortText(get(instant), locale);\n+    }\n+\n+    /**\n+     * Get the human-readable, short text value of this field from the milliseconds.\n+     * <p>\n+     * The default implementation calls {@link #getAsShortText(long, Locale)}.\n+     *\n+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to query\n+     * @return the text value of the field\n+     */\n+    public final String getAsShortText(long instant) {\n+        return getAsShortText(instant, null);\n     }\n \n     /**\n      */\n     public String getAsShortText(ReadablePartial partial, int fieldValue, Locale locale) {\n         return getAsShortText(fieldValue, locale);\n+    }\n+\n+    /**\n+     * Get the human-readable, short text value of this field from a partial instant.\n+     * If the specified locale is null, the default locale is used.\n+     * <p>\n+     * The default implementation calls {@link ReadablePartial#get(DateTimeField)}\n+     * and {@link #getAsText(ReadablePartial, int, Locale)}.\n+     *\n+     * @param partial  the partial instant to query\n+     * @param locale  the locale to use for selecting a text symbol, null for default\n+     * @return the text value of the field\n+     */\n+    public final String getAsShortText(ReadablePartial partial, Locale locale) {\n+        return getAsShortText(partial, partial.get(this), locale);\n     }\n \n     /**\n \n     /**\n      * Sets a value in the milliseconds supplied from a human-readable, text value.\n+     * <p>\n+     * This implementation uses {@link #set(long, String, Locale)}.\n+     * <p>\n+     * Note: subclasses that override this method should also override getAsText.\n+     *\n+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in\n+     * @param text  the text value to set\n+     * @return the updated milliseconds\n+     * @throws IllegalArgumentException if the text value is invalid\n+     */\n+    public final long set(long instant, String text) {\n+        return set(instant, text, null);\n+    }\n+\n+    /**\n+     * Sets a value in the milliseconds supplied from a human-readable, text value.\n      * If the specified locale is null, the default locale is used.\n      * <p>\n      * This implementation uses {@link #convertText(String, Locale)} and\n--- a/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n      *\n      * @throws UnsupportedOperationException\n      */\n+    public String getAsText(long instant) {\n+        throw unsupported();\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException\n+     *\n+     * @throws UnsupportedOperationException\n+     */\n     public String getAsText(ReadablePartial partial, int fieldValue, Locale locale) {\n         throw unsupported();\n     }\n      *\n      * @throws UnsupportedOperationException\n      */\n+    public String getAsText(ReadablePartial partial, Locale locale) {\n+        throw unsupported();\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException\n+     *\n+     * @throws UnsupportedOperationException\n+     */\n     public String getAsShortText(long instant, Locale locale) {\n         throw unsupported();\n     }\n      *\n      * @throws UnsupportedOperationException\n      */\n+    public String getAsShortText(long instant) {\n+        throw unsupported();\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException\n+     *\n+     * @throws UnsupportedOperationException\n+     */\n     public String getAsShortText(ReadablePartial partial, int fieldValue, Locale locale) {\n+        throw unsupported();\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException\n+     *\n+     * @throws UnsupportedOperationException\n+     */\n+    public String getAsShortText(ReadablePartial partial, Locale locale) {\n         throw unsupported();\n     }\n \n      * @throws UnsupportedOperationException\n      */\n     public long set(long instant, String text, Locale locale) {\n+        throw unsupported();\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException\n+     *\n+     * @throws UnsupportedOperationException\n+     */\n+    public long set(long instant, String text) {\n         throw unsupported();\n     }\n ", "timestamp": 1090966438, "metainfo": ""}