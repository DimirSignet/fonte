{"sha": "2c7ec20e6fc78d63c13c4ef64359d169de8610ce", "log": "Increase test coverage   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n             test.property(bad);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n }\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testOffsetMillisToZero() {\n+        long now1 = 0L;\n+        try {\n+            // set time to one day ago\n+            DateTimeUtils.setCurrentMillisOffset(0);\n+            now1 = DateTimeUtils.currentTimeMillis();\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+        long now2 = DateTimeUtils.currentTimeMillis();\n+        assertEquals(now1, now2);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testOffsetMillisSecurity() {\n         if (OLD_JDK) {\n             return;\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    public void testIsSupported_DateTimeFieldType() {\n+        DateTime test = new DateTime();\n+        assertEquals(true, test.isSupported(DateTimeFieldType.era()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.centuryOfEra()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfCentury()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.yearOfEra()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.year()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.monthOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfMonth()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.weekyear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.dayOfYear()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.halfdayOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfHalfday()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.clockhourOfHalfday()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.hourOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfHour()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.minuteOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.secondOfDay()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfSecond()));\n+        assertEquals(true, test.isSupported(DateTimeFieldType.millisOfDay()));\n+        assertEquals(false, test.isSupported(null));\n+    }\n+\n     public void testGetMethods() {\n         DateTime test = new DateTime();\n         \n             test.property(bad);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n }\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testToPeriodTo() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Period result = test.toPeriodTo(dt);\n+        assertEquals(new Period(test, dt), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriodTo_PeriodType() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Period result = test.toPeriodTo(dt, PeriodType.standard().withMillisRemoved());\n+        assertEquals(new Period(test, dt, PeriodType.standard().withMillisRemoved()), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToIntervalFrom() {\n         long length =\n             (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n         DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         Interval result = test.toIntervalFrom(dt);\n         assertEquals(new Interval(dt, test), result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToIntervalTo() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        DateTime dt = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Interval result = test.toIntervalTo(dt);\n+        assertEquals(new Interval(test, dt), result);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testConstructor_RD_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration dur = new Interval(dt1, dt2).toDuration();\n+        Period test = new Period(dur, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RD_RI2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Duration dur = null;\n+        Period test = new Period(dur, dt1);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RD_RI_PeriodType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration dur = new Interval(dt1, dt2).toDuration();\n+        Period test = new Period(dur, dt2, PeriodType.yearDayTime());\n+        assertEquals(PeriodType.yearDayTime(), test.getPeriodType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+    }\n+\n+    public void testConstructor_RD_RI_PeriodType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        Duration dur = null;\n+        Period test = new Period(dur, dt1, (PeriodType) null);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Test constructor (Object)\n      */\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Basics.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n import java.io.ObjectOutputStream;\n import java.util.Arrays;\n import java.util.Locale;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         assertEquals(COPTIC_UTC, base.getChronology());\n         check(test, 10, 20, 30, 40);\n         assertEquals(ISO_UTC, test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField1() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay result = test.withField(DateTimeFieldType.hourOfDay(), 15);\n+        \n+        assertEquals(new TimeOfDay(10, 20, 30, 40), test);\n+        assertEquals(new TimeOfDay(15, 20, 30, 40), result);\n+    }\n+\n+    public void testWithField2() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField3() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            test.withField(DateTimeFieldType.dayOfMonth(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField4() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay result = test.withField(DateTimeFieldType.hourOfDay(), 10);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded1() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay result = test.withFieldAdded(DurationFieldType.hours(), 6);\n+        \n+        assertEquals(new TimeOfDay(10, 20, 30, 40), test);\n+        assertEquals(new TimeOfDay(16, 20, 30, 40), result);\n+    }\n+\n+    public void testWithFieldAdded2() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded3() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded4() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay result = test.withFieldAdded(DurationFieldType.hours(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithFieldAdded5() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        try {\n+            test.withFieldAdded(DurationFieldType.days(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded6() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay result = test.withFieldAdded(DurationFieldType.hours(), 16);\n+        \n+        assertEquals(new TimeOfDay(10, 20, 30, 40), test);\n+        assertEquals(new TimeOfDay(2, 20, 30, 40), result);\n+    }\n+\n+    public void testWithFieldAdded7() {\n+        TimeOfDay test = new TimeOfDay(23, 59, 59, 999);\n+        TimeOfDay result = test.withFieldAdded(DurationFieldType.millis(), 1);\n+        assertEquals(new TimeOfDay(0, 0, 0, 0), result);\n+        \n+        test = new TimeOfDay(23, 59, 59, 999);\n+        result = test.withFieldAdded(DurationFieldType.seconds(), 1);\n+        assertEquals(new TimeOfDay(0, 0, 0, 999), result);\n+        \n+        test = new TimeOfDay(23, 59, 59, 999);\n+        result = test.withFieldAdded(DurationFieldType.minutes(), 1);\n+        assertEquals(new TimeOfDay(0, 0, 59, 999), result);\n+        \n+        test = new TimeOfDay(23, 59, 59, 999);\n+        result = test.withFieldAdded(DurationFieldType.hours(), 1);\n+        assertEquals(new TimeOfDay(0, 59, 59, 999), result);\n+    }\n+\n+    public void testWithFieldAdded8() {\n+        TimeOfDay test = new TimeOfDay(0, 0, 0, 0);\n+        TimeOfDay result = test.withFieldAdded(DurationFieldType.millis(), -1);\n+        assertEquals(new TimeOfDay(23, 59, 59, 999), result);\n+        \n+        test = new TimeOfDay(0, 0, 0, 0);\n+        result = test.withFieldAdded(DurationFieldType.seconds(), -1);\n+        assertEquals(new TimeOfDay(23, 59, 59, 0), result);\n+        \n+        test = new TimeOfDay(0, 0, 0, 0);\n+        result = test.withFieldAdded(DurationFieldType.minutes(), -1);\n+        assertEquals(new TimeOfDay(23, 59, 0, 0), result);\n+        \n+        test = new TimeOfDay(0, 0, 0, 0);\n+        result = test.withFieldAdded(DurationFieldType.hours(), -1);\n+        assertEquals(new TimeOfDay(23, 0, 0, 0), result);\n+    }\n+\n+    public void testPlus_RP() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        TimeOfDay expected = new TimeOfDay(15, 26, 37, 48, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinus_RP() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40, BuddhistChronology.getInstance());\n+        TimeOfDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        TimeOfDay expected = new TimeOfDay(9, 19, 29, 39, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n     }\n \n     //-----------------------------------------------------------------------\n             test.property(DateTimeFieldType.millisOfDay());\n             fail();\n         } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n import java.io.ObjectOutputStream;\n import java.util.Arrays;\n import java.util.Locale;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testWithField1() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay result = test.withField(DateTimeFieldType.year(), 2006);\n+        \n+        assertEquals(new YearMonthDay(2004, 6, 9), test);\n+        assertEquals(new YearMonthDay(2006, 6, 9), result);\n+    }\n+\n+    public void testWithField2() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        try {\n+            test.withField(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithField3() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        try {\n+            test.withField(DateTimeFieldType.hourOfDay(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded1() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay result = test.withFieldAdded(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new YearMonthDay(2004, 6, 9), test);\n+        assertEquals(new YearMonthDay(2010, 6, 9), result);\n+    }\n+\n+    public void testWithFieldAdded2() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        try {\n+            test.withFieldAdded(null, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded3() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        try {\n+            test.withFieldAdded(null, 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithFieldAdded4() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        YearMonthDay result = test.withFieldAdded(DurationFieldType.years(), 0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithFieldAdded5() {\n+        YearMonthDay test = new YearMonthDay(2004, 6, 9);\n+        try {\n+            test.withFieldAdded(DurationFieldType.hours(), 6);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPlus_RP() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        YearMonthDay expected = new YearMonthDay(2003, 7, 7, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinus_RP() {\n+        YearMonthDay test = new YearMonthDay(2002, 5, 3, BuddhistChronology.getInstance());\n+        YearMonthDay result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        YearMonthDay expected = new YearMonthDay(2001, 4, 2, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToDateTimeAtMidnight() {\n         YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS);\n         \n         assertEquals(test.dayOfMonth(), test.property(DateTimeFieldType.dayOfMonth()));\n         try {\n             test.property(DateTimeFieldType.millisOfDay());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.property(null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }", "timestamp": 1106782634, "metainfo": ""}