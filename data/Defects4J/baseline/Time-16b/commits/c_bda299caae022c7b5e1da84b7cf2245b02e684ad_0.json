{"sha": "bda299caae022c7b5e1da84b7cf2245b02e684ad", "log": "Test DateTimeUtils   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         \n         suite.addTest(TestDateTimeComparator.suite());\n         suite.addTest(TestDateTimeConstants.suite());\n+        suite.addTest(TestDateTimeUtils.suite());\n         suite.addTest(TestDateTimeZone.suite());\n //        suite.addTest(TestParseISO.suite());\n         return suite;\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.lang.reflect.Modifier;\n+import java.security.AllPermission;\n+import java.security.CodeSource;\n+import java.security.Permission;\n+import java.security.PermissionCollection;\n+import java.security.Permissions;\n+import java.security.Policy;\n+import java.security.ProtectionDomain;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for Instant.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateTimeUtils extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private static final Policy RESTRICT;\n+    private static final Policy ALLOW;\n+    static {\n+        // don't call Policy.getPolicy()\n+        RESTRICT = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+            public boolean implies(ProtectionDomain domain, Permission permission) {\n+                if (permission instanceof JodaTimePermission) {\n+                    return false;\n+                }\n+                return super.implies(domain, permission);\n+            }\n+        };\n+        ALLOW = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+        };\n+    }\n+    \n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeUtils.class);\n+    }\n+\n+    public TestDateTimeUtils(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClass() {\n+        Class cls = DateTimeUtils.class;\n+        assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(true, Modifier.isFinal(cls.getModifiers()));\n+        \n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isPrivate(cls.getDeclaredConstructors()[0].getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSystemMillis() {\n+        long nowSystem = System.currentTimeMillis();\n+        long now = DateTimeUtils.currentTimeMillis();\n+        assertTrue((now >= nowSystem));\n+        assertTrue((now - nowSystem) < 10000L);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSystemMillisSecurity() {\n+        try {\n+            try {\n+                Policy.setPolicy(RESTRICT);\n+                System.setSecurityManager(new SecurityManager());\n+                DateTimeUtils.setCurrentMillisSystem();\n+                fail();\n+            } catch (SecurityException ex) {\n+                // ok\n+            } finally {\n+                System.setSecurityManager(null);\n+                Policy.setPolicy(ALLOW);\n+            }\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFixedMillis() {\n+        try {\n+            DateTimeUtils.setCurrentMillisFixed(0L);\n+            assertEquals(0L, DateTimeUtils.currentTimeMillis());\n+            assertEquals(0L, DateTimeUtils.currentTimeMillis());\n+            assertEquals(0L, DateTimeUtils.currentTimeMillis());\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+        long nowSystem = System.currentTimeMillis();\n+        long now = DateTimeUtils.currentTimeMillis();\n+        assertTrue((now >= nowSystem));\n+        assertTrue((now - nowSystem) < 10000L);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFixedMillisSecurity() {\n+        try {\n+            try {\n+                Policy.setPolicy(RESTRICT);\n+                System.setSecurityManager(new SecurityManager());\n+                DateTimeUtils.setCurrentMillisFixed(0L);\n+                fail();\n+            } catch (SecurityException ex) {\n+                // ok\n+            } finally {\n+                System.setSecurityManager(null);\n+                Policy.setPolicy(ALLOW);\n+            }\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testOffsetMillis() {\n+        try {\n+            // set time to one day ago\n+            DateTimeUtils.setCurrentMillisOffset(-24 * 60 *  60 * 1000);\n+            long nowSystem = System.currentTimeMillis();\n+            long now = DateTimeUtils.currentTimeMillis();\n+            long nowAdjustDay = now + (24 * 60 *  60 * 1000);\n+            assertTrue((now < nowSystem));\n+            assertTrue((nowAdjustDay >= nowSystem));\n+            assertTrue((nowAdjustDay - nowSystem) < 10000L);\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+        long nowSystem = System.currentTimeMillis();\n+        long now = DateTimeUtils.currentTimeMillis();\n+        assertTrue((now >= nowSystem));\n+        assertTrue((now - nowSystem) < 10000L);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testOffsetMillisSecurity() {\n+        try {\n+            try {\n+                Policy.setPolicy(RESTRICT);\n+                System.setSecurityManager(new SecurityManager());\n+                DateTimeUtils.setCurrentMillisOffset(-24 * 60 *  60 * 1000);\n+                fail();\n+            } catch (SecurityException ex) {\n+                // ok\n+            } finally {\n+                System.setSecurityManager(null);\n+                Policy.setPolicy(ALLOW);\n+            }\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+    }\n+\n+}", "timestamp": 1090149375, "metainfo": ""}