{"sha": "b63efc4aba8f3a82577f215db2e3cc67c26293b7", "log": "Make PeriodType methods consistent and test   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/PeriodType.java\n+++ b/JodaTime/src/java/org/joda/time/PeriodType.java\n public abstract class PeriodType implements Serializable {\n     private static final long serialVersionUID = 2274324892792009998L;\n \n-    private static final PeriodType MILLIS_TYPE;\n-    private static final PeriodType DAY_HOUR_TYPE;\n-    private static final PeriodType YEAR_DAY_TYPE;\n-    private static final PeriodType YEAR_WEEK_TYPE;\n-    private static final PeriodType YEAR_MONTH_TYPE;\n-    private static final PeriodType ALL_TYPE;\n-    private static final PeriodType UTC_DAY_HOUR_TYPE;\n-    private static final PeriodType UTC_YEAR_DAY_TYPE;\n-    private static final PeriodType UTC_YEAR_WEEK_TYPE;\n-    private static final PeriodType UTC_YEAR_MONTH_TYPE;\n-    private static final PeriodType UTC_ALL_TYPE;\n-    private static final PeriodType PRECISE_DAY_HOUR_TYPE;\n-    private static final PeriodType PRECISE_YEAR_DAY_TYPE;\n-    private static final PeriodType PRECISE_YEAR_WEEK_TYPE;\n-    private static final PeriodType PRECISE_YEAR_MONTH_TYPE;\n-    private static final PeriodType PRECISE_ALL_TYPE;\n+    private static final PeriodType MILLIS;\n+    private static final PeriodType DAY_HOUR;\n+    private static final PeriodType YEAR_DAY;\n+    private static final PeriodType YEAR_WEEK;\n+    private static final PeriodType YEAR_MONTH;\n+    private static final PeriodType ALL;\n+    private static final PeriodType DAY_HOUR_UTC;\n+    private static final PeriodType YEAR_DAY_UTC;\n+    private static final PeriodType YEAR_WEEK_UTC;\n+    private static final PeriodType YEAR_MONTH_UTC;\n+    private static final PeriodType ALL_UTC;\n+    private static final PeriodType PRECISE_DAY_HOUR;\n+    private static final PeriodType PRECISE_YEAR_DAY;\n+    private static final PeriodType PRECISE_YEAR_WEEK;\n+    private static final PeriodType PRECISE_YEAR_MONTH;\n+    private static final PeriodType PRECISE_ALL;\n \n     static {\n-        MILLIS_TYPE = new MillisType();\n-        DAY_HOUR_TYPE = new DayHourType(ISOChronology.getInstance());\n-        YEAR_DAY_TYPE = new YearDayType(ISOChronology.getInstance());\n-        YEAR_WEEK_TYPE = new YearWeekType(ISOChronology.getInstance());\n-        YEAR_MONTH_TYPE = new YearMonthType(ISOChronology.getInstance());\n-        ALL_TYPE = new AllType(ISOChronology.getInstance());\n-        UTC_DAY_HOUR_TYPE = new DayHourType(ISOChronology.getInstanceUTC());\n-        UTC_YEAR_DAY_TYPE = new YearDayType(ISOChronology.getInstanceUTC());\n-        UTC_YEAR_WEEK_TYPE = new YearWeekType(ISOChronology.getInstanceUTC());\n-        UTC_YEAR_MONTH_TYPE = new YearMonthType(ISOChronology.getInstanceUTC());\n-        UTC_ALL_TYPE = new AllType(ISOChronology.getInstanceUTC());\n-        PRECISE_DAY_HOUR_TYPE = new PreciseDayHourType(ISOChronology.getInstanceUTC());\n-        PRECISE_YEAR_DAY_TYPE = new PreciseYearDayType(ISOChronology.getInstanceUTC());\n-        PRECISE_YEAR_WEEK_TYPE = new PreciseYearWeekType(ISOChronology.getInstanceUTC());\n-        PRECISE_YEAR_MONTH_TYPE = new PreciseYearMonthType(ISOChronology.getInstanceUTC());\n-        PRECISE_ALL_TYPE = new PreciseAllType(ISOChronology.getInstanceUTC());\n+        MILLIS = new MillisType();\n+        DAY_HOUR = new DayHourType(ISOChronology.getInstance());\n+        YEAR_DAY = new YearDayType(ISOChronology.getInstance());\n+        YEAR_WEEK = new YearWeekType(ISOChronology.getInstance());\n+        YEAR_MONTH = new YearMonthType(ISOChronology.getInstance());\n+        ALL = new AllType(ISOChronology.getInstance());\n+        DAY_HOUR_UTC = new DayHourType(ISOChronology.getInstanceUTC());\n+        YEAR_DAY_UTC = new YearDayType(ISOChronology.getInstanceUTC());\n+        YEAR_WEEK_UTC = new YearWeekType(ISOChronology.getInstanceUTC());\n+        YEAR_MONTH_UTC = new YearMonthType(ISOChronology.getInstanceUTC());\n+        ALL_UTC = new AllType(ISOChronology.getInstanceUTC());\n+        PRECISE_DAY_HOUR = new PreciseDayHourType(ISOChronology.getInstanceUTC());\n+        PRECISE_YEAR_DAY = new PreciseYearDayType(ISOChronology.getInstanceUTC());\n+        PRECISE_YEAR_WEEK = new PreciseYearWeekType(ISOChronology.getInstanceUTC());\n+        PRECISE_YEAR_MONTH = new PreciseYearMonthType(ISOChronology.getInstanceUTC());\n+        PRECISE_ALL = new PreciseAllType(ISOChronology.getInstanceUTC());\n     }\n \n     /**\n      * typically limited by a 32 bit int.\n      */\n     public static PeriodType getMillisType() {\n-        return MILLIS_TYPE;\n+        return MILLIS;\n     }\n \n     /**\n      * Returns a PeriodType using the ISOChronology in current time zone of:\n      *\n      * <ul>\n+     * <li>days\n+     * <li>hours (precise)\n+     * <li>minutes (precise)\n+     * <li>seconds (precise)\n+     * <li>milliseconds (precise)\n+     * </ul>\n+     */\n+    public static PeriodType getDayHourType() {\n+        return DAY_HOUR;\n+    }\n+\n+    /**\n+     * Returns a precise PeriodType using the ISOChronology in UTC of:\n+     *\n+     * <ul>\n+     * <li>days (precise, fixed at 24 hours)\n+     * <li>hours (precise)\n+     * <li>minutes (precise)\n+     * <li>seconds (precise)\n+     * <li>milliseconds (precise)\n+     * </ul>\n+     */\n+    public static PeriodType getDayHourTypeUTC() {\n+        return DAY_HOUR_UTC;\n+    }\n+\n+    /**\n+     * Returns a PeriodType of:\n+     *\n+     * <ul>\n+     * <li>days\n+     * <li>hours (precise)\n+     * <li>minutes (precise)\n+     * <li>seconds (precise)\n+     * <li>milliseconds (precise)\n+     * </ul>\n+     *\n+     * This factory method returns a PeriodType that calculates using any Chronology.\n+     *\n+     * @param chrono Chronology to use for calculations.\n+     */\n+    public static PeriodType getDayHourType(Chronology chrono) {\n+        if (chrono == null || chrono.equals(ISOChronology.getInstance())) {\n+            return getDayHourType();\n+        }\n+        if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n+            return getDayHourTypeUTC();\n+        }\n+        return new DayHourType(chrono);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a PeriodType using the ISOChronology in current time zone of:\n+     *\n+     * <ul>\n+     * <li>years\n+     * <li>days\n+     * <li>hours (precise)\n+     * <li>minutes (precise)\n+     * <li>seconds (precise)\n+     * <li>milliseconds (precise)\n+     * </ul>\n+     */\n+    public static PeriodType getYearDayType() {\n+        return YEAR_DAY;\n+    }\n+\n+    /**\n+     * Returns a PeriodType using the ISOChronology in UTC of:\n+     *\n+     * <ul>\n+     * <li>years\n+     * <li>days (precise, fixed at 24 hours)\n+     * <li>hours (precise)\n+     * <li>minutes (precise)\n+     * <li>seconds (precise)\n+     * <li>milliseconds (precise)\n+     * </ul>\n+     */\n+    public static PeriodType getYearDayTypeUTC() {\n+        return YEAR_DAY_UTC;\n+    }\n+\n+    /**\n+     * Returns a PeriodType of:\n+     *\n+     * <ul>\n+     * <li>years\n+     * <li>days\n+     * <li>hours (precise)\n+     * <li>minutes (precise)\n+     * <li>seconds (precise)\n+     * <li>milliseconds (precise)\n+     * </ul>\n+     *\n+     * This factory method returns a PeriodType that calculates using any Chronology.\n+     *\n+     * @param chrono Chronology to use for calculations.\n+     */\n+    public static PeriodType getYearDayType(Chronology chrono) {\n+        if (chrono == null || chrono.equals(ISOChronology.getInstance())) {\n+            return getYearDayType();\n+        }\n+        if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n+            return getYearDayTypeUTC();\n+        }\n+        return new YearDayType(chrono);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a PeriodType using the ISOChronology in current time zone of:\n+     *\n+     * <ul>\n+     * <li>years (weekyears)\n+     * <li>weeks\n+     * <li>days\n+     * <li>hours (precise)\n+     * <li>minutes (precise)\n+     * <li>seconds (precise)\n+     * <li>milliseconds (precise)\n+     * </ul>\n+     */\n+    public static PeriodType getYearWeekType() {\n+        return YEAR_WEEK;\n+    }\n+\n+    /**\n+     * Returns a PeriodType using the ISOChronology in UTC of:\n+     *\n+     * <ul>\n+     * <li>years\n+     * <li>weeks (precise, fixed at 7 days)\n+     * <li>days (precise, fixed at 24 hours)\n+     * <li>hours (precise)\n+     * <li>minutes (precise)\n+     * <li>seconds (precise)\n+     * <li>milliseconds (precise)\n+     * </ul>\n+     */\n+    public static PeriodType getYearWeekTypeUTC() {\n+        return YEAR_WEEK_UTC;\n+    }\n+\n+    /**\n+     * Returns a PeriodType of:\n+     *\n+     * <ul>\n+     * <li>years (weekyears)\n+     * <li>weeks\n      * <li>days\n      * <li>hours\n      * <li>minutes\n      * <li>seconds\n      * <li>milliseconds\n      * </ul>\n-     */\n-    public static PeriodType getDayHourType() {\n-        return DAY_HOUR_TYPE;\n+     *\n+     * This factory method returns a PeriodType that calculates using any Chronology.\n+     *\n+     * @param chrono Chronology to use for calculations.\n+     */\n+    public static PeriodType getYearWeekType(Chronology chrono) {\n+        if (chrono == null || chrono.equals(ISOChronology.getInstance())) {\n+            return getYearWeekType();\n+        }\n+        if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n+            return getYearWeekTypeUTC();\n+        }\n+        return new YearWeekType(chrono);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a PeriodType using the ISOChronology in current time zone of:\n+     *\n+     * <ul>\n+     * <li>years\n+     * <li>months\n+     * <li>days\n+     * <li>hours (precise)\n+     * <li>minutes (precise)\n+     * <li>seconds (precise)\n+     * <li>milliseconds (precise)\n+     * </ul>\n+     */\n+    public static PeriodType getYearMonthType() {\n+        return YEAR_MONTH;\n+    }\n+\n+    /**\n+     * Returns a PeriodType using the ISOChronology in UTC of:\n+     *\n+     * <ul>\n+     * <li>years\n+     * <li>months\n+     * <li>days (precise, fixed at 24 hours)\n+     * <li>hours (precise)\n+     * <li>minutes (precise)\n+     * <li>seconds (precise)\n+     * <li>milliseconds (precise)\n+     * </ul>\n+     */\n+    public static PeriodType getYearMonthTypeUTC() {\n+        return YEAR_MONTH_UTC;\n     }\n \n     /**\n      * Returns a PeriodType of:\n      *\n      * <ul>\n+     * <li>years\n+     * <li>months\n      * <li>days\n      * <li>hours\n      * <li>minutes\n      *\n      * @param chrono Chronology to use for calculations.\n      */\n-    public static PeriodType getDayHourType(Chronology chrono) {\n+    public static PeriodType getYearMonthType(Chronology chrono) {\n         if (chrono == null || chrono.equals(ISOChronology.getInstance())) {\n-            return getDayHourType();\n+            return getYearMonthType();\n         }\n         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n-            return getUTCDayHourType();\n-        }\n-        return new DayHourType(chrono);\n-    }\n-\n+            return getYearMonthTypeUTC();\n+        }\n+        return new YearMonthType(chrono);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Returns a PeriodType using the ISOChronology in current time zone of:\n      *\n      * </ul>\n      */\n     public static PeriodType getAllType() {\n-        return ALL_TYPE;\n+        return ALL;\n+    }\n+\n+    /**\n+     * Returns a PeriodType using the ISOChronology in UTC of:\n+     *\n+     * <ul>\n+     * <li>years\n+     * <li>months\n+     * <li>weeks (precise, fixed at 7 days)\n+     * <li>days (precise, fixed at 24 hours)\n+     * <li>hours (precise)\n+     * <li>minutes (precise)\n+     * <li>seconds (precise)\n+     * <li>milliseconds (precise)\n+     * </ul>\n+     */\n+    public static PeriodType getAllTypeUTC() {\n+        return ALL_UTC;\n     }\n \n     /**\n             return getAllType();\n         }\n         if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n-            return getUTCAllType();\n+            return getAllTypeUTC();\n         }\n         return new AllType(chrono);\n     }\n \n-    /**\n-     * Returns a PeriodType using the ISOChronology in current time zone of:\n-     *\n-     * <ul>\n-     * <li>years\n-     * <li>days\n-     * <li>hours (precise)\n-     * <li>minutes (precise)\n-     * <li>seconds (precise)\n-     * <li>milliseconds (precise)\n-     * </ul>\n-     */\n-    public static PeriodType getYearDayType() {\n-        return YEAR_DAY_TYPE;\n-    }\n-\n-    /**\n-     * Returns a PeriodType of:\n-     *\n-     * <ul>\n-     * <li>years\n-     * <li>days\n-     * <li>hours\n-     * <li>minutes\n-     * <li>seconds\n-     * <li>milliseconds\n-     * </ul>\n-     *\n-     * This factory method returns a PeriodType that calculates using any Chronology.\n-     *\n-     * @param chrono Chronology to use for calculations.\n-     */\n-    public static PeriodType getYearDayType(Chronology chrono) {\n-        if (chrono == null || chrono.equals(ISOChronology.getInstance())) {\n-            return getYearDayType();\n-        }\n-        if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n-            return getUTCYearDayType();\n-        }\n-        return new YearDayType(chrono);\n-    }\n-\n-    /**\n-     * Returns a PeriodType using the ISOChronology in current time zone of:\n-     *\n-     * <ul>\n-     * <li>years\n-     * <li>months\n-     * <li>days\n-     * <li>hours (precise)\n-     * <li>minutes (precise)\n-     * <li>seconds (precise)\n-     * <li>milliseconds (precise)\n-     * </ul>\n-     */\n-    public static PeriodType getYearMonthType() {\n-        return YEAR_MONTH_TYPE;\n-    }\n-\n-    /**\n-     * Returns a PeriodType of:\n-     *\n-     * <ul>\n-     * <li>years\n-     * <li>months\n-     * <li>days\n-     * <li>hours\n-     * <li>minutes\n-     * <li>seconds\n-     * <li>milliseconds\n-     * </ul>\n-     *\n-     * This factory method returns a PeriodType that calculates using any Chronology.\n-     *\n-     * @param chrono Chronology to use for calculations.\n-     */\n-    public static PeriodType getYearMonthType(Chronology chrono) {\n-        if (chrono == null || chrono.equals(ISOChronology.getInstance())) {\n-            return getYearMonthType();\n-        }\n-        if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n-            return getUTCYearMonthType();\n-        }\n-        return new YearMonthType(chrono);\n-    }\n-\n-    /**\n-     * Returns a PeriodType using the ISOChronology in current time zone of:\n-     *\n-     * <ul>\n-     * <li>years (weekyears)\n-     * <li>weeks\n-     * <li>days\n-     * <li>hours (precise)\n-     * <li>minutes (precise)\n-     * <li>seconds (precise)\n-     * <li>milliseconds (precise)\n-     * </ul>\n-     */\n-    public static PeriodType getYearWeekType() {\n-        return YEAR_WEEK_TYPE;\n-    }\n-\n-    /**\n-     * Returns a PeriodType of:\n-     *\n-     * <ul>\n-     * <li>years (weekyears)\n-     * <li>weeks\n-     * <li>days\n-     * <li>hours\n-     * <li>minutes\n-     * <li>seconds\n-     * <li>milliseconds\n-     * </ul>\n-     *\n-     * This factory method returns a PeriodType that calculates using any Chronology.\n-     *\n-     * @param chrono Chronology to use for calculations.\n-     */\n-    public static PeriodType getYearWeekType(Chronology chrono) {\n-        if (chrono == null || chrono.equals(ISOChronology.getInstance())) {\n-            return getYearWeekType();\n-        }\n-        if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n-            return getUTCYearWeekType();\n-        }\n-        return new YearWeekType(chrono);\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Returns a precise PeriodType using the ISOChronology in UTC of:\n      * <li>milliseconds (precise)\n      * </ul>\n      */\n-    public static PeriodType getUTCDayHourType() {\n-        return UTC_DAY_HOUR_TYPE;\n-    }\n-\n-    /**\n-     * Returns a PeriodType using the ISOChronology in UTC of:\n-     *\n-     * <ul>\n-     * <li>years\n-     * <li>days (precise, fixed at 24 hours)\n-     * <li>hours (precise)\n-     * <li>minutes (precise)\n-     * <li>seconds (precise)\n-     * <li>milliseconds (precise)\n-     * </ul>\n-     */\n-    public static PeriodType getUTCYearDayType() {\n-        return UTC_YEAR_DAY_TYPE;\n-    }\n-\n-    /**\n-     * Returns a PeriodType using the ISOChronology in UTC of:\n-     *\n-     * <ul>\n-     * <li>years\n-     * <li>months\n-     * <li>days (precise, fixed at 24 hours)\n-     * <li>hours (precise)\n-     * <li>minutes (precise)\n-     * <li>seconds (precise)\n-     * <li>milliseconds (precise)\n-     * </ul>\n-     */\n-    public static PeriodType getUTCYearMonthType() {\n-        return UTC_YEAR_MONTH_TYPE;\n-    }\n-\n-    /**\n-     * Returns a PeriodType using the ISOChronology in UTC of:\n-     *\n-     * <ul>\n-     * <li>years\n-     * <li>weeks (precise, fixed at 7 days)\n-     * <li>days (precise, fixed at 24 hours)\n-     * <li>hours (precise)\n-     * <li>minutes (precise)\n-     * <li>seconds (precise)\n-     * <li>milliseconds (precise)\n-     * </ul>\n-     */\n-    public static PeriodType getUTCYearWeekType() {\n-        return UTC_YEAR_WEEK_TYPE;\n-    }\n-\n-    /**\n-     * Returns a PeriodType using the ISOChronology in UTC of:\n-     *\n-     * <ul>\n-     * <li>years\n-     * <li>months\n-     * <li>weeks (precise, fixed at 7 days)\n-     * <li>days (precise, fixed at 24 hours)\n-     * <li>hours (precise)\n-     * <li>minutes (precise)\n-     * <li>seconds (precise)\n-     * <li>milliseconds (precise)\n-     * </ul>\n-     */\n-    public static PeriodType getUTCAllType() {\n-        return UTC_ALL_TYPE;\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Returns a precise PeriodType using the ISOChronology in UTC of:\n-     *\n-     * <ul>\n-     * <li>days (precise, fixed at 24 hours)\n-     * <li>hours (precise)\n-     * <li>minutes (precise)\n-     * <li>seconds (precise)\n-     * <li>milliseconds (precise)\n-     * </ul>\n-     */\n     public static PeriodType getPreciseDayHourType() {\n-        return PRECISE_DAY_HOUR_TYPE;\n+        return PRECISE_DAY_HOUR;\n     }\n \n     /**\n      * </ul>\n      */\n     public static PeriodType getPreciseYearDayType() {\n-        return PRECISE_YEAR_DAY_TYPE;\n+        return PRECISE_YEAR_DAY;\n     }\n \n     /**\n      * </ul>\n      */\n     public static PeriodType getPreciseYearMonthType() {\n-        return PRECISE_YEAR_MONTH_TYPE;\n+        return PRECISE_YEAR_MONTH;\n     }\n \n     /**\n      * </ul>\n      */\n     public static PeriodType getPreciseYearWeekType() {\n-        return PRECISE_YEAR_WEEK_TYPE;\n+        return PRECISE_YEAR_WEEK;\n     }\n \n     /**\n      * </ul>\n      */\n     public static PeriodType getPreciseAllType() {\n-        return PRECISE_ALL_TYPE;\n+        return PRECISE_ALL;\n     }\n \n     //-----------------------------------------------------------------------\n             if (chrono == iChronology) {\n                 return this;\n             }\n-            return PeriodType.getYearWeekType(chrono);\n+            return PeriodType.getYearDayType(chrono);\n         }\n \n         public boolean isPrecise() {\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n \n     public void testConstructor_RI_RP3() throws Throwable {\n         Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n-        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getUTCAllType());\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getAllTypeUTC());\n         long result = TEST_TIME_NOW;\n         result = ISOChronology.getInstanceUTC().months().add(result, 6);\n         result = ISOChronology.getInstanceUTC().days().add(result, 3);\n \n     public void testConstructor_RP_RI3() throws Throwable {\n         Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n-        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getUTCAllType());\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getAllTypeUTC());\n         long result = TEST_TIME_NOW;\n         result = ISOChronology.getInstanceUTC().months().add(result, -6);\n         result = ISOChronology.getInstanceUTC().days().add(result, -3);\n--- a/JodaTime/src/test/org/joda/time/TestPeriodType.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriodType.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testYearDayType() throws Exception {\n+        PeriodType type = PeriodType.getYearDayType();\n+        assertEquals(true, type.years().isSupported());\n+        assertEquals(false, type.months().isSupported());\n+        assertEquals(false, type.weeks().isSupported());\n+        assertEquals(true, type.days().isSupported());\n+        assertEquals(true, type.hours().isSupported());\n+        assertEquals(true, type.minutes().isSupported());\n+        assertEquals(true, type.seconds().isSupported());\n+        assertEquals(true, type.millis().isSupported());\n+        assertEquals(false, type.isPrecise());\n+        assertEquals(ISOChronology.getInstance(), type.getChronology());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.getYearDayType());\n+        assertEquals(false, type.equals(PeriodType.getAllType()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.getYearDayType().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());\n+        assertEquals(\"YearDayType\", type.getName());\n+        assertEquals(\"PeriodType[YearDayType]\", type.toString());\n+        assertSameAfterSerialization(type);\n+        assertSame(type, type.withChronology(null));\n+        assertSame(type, type.withChronology(ISOChronology.getInstance()));\n+        assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testYearWeekType() throws Exception {\n         PeriodType type = PeriodType.getYearWeekType();\n         assertEquals(true, type.years().isSupported());\n         assertSame(PeriodType.getAllType(), type.withChronology(null));\n         assertSame(PeriodType.getAllType(), type.withChronology(ISOChronology.getInstance()));\n         assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDayHourTypeUTC() throws Exception {\n+        PeriodType type = PeriodType.getDayHourTypeUTC();\n+        assertEquals(false, type.years().isSupported());\n+        assertEquals(false, type.months().isSupported());\n+        assertEquals(false, type.weeks().isSupported());\n+        assertEquals(true, type.days().isSupported());\n+        assertEquals(true, type.hours().isSupported());\n+        assertEquals(true, type.minutes().isSupported());\n+        assertEquals(true, type.seconds().isSupported());\n+        assertEquals(true, type.millis().isSupported());\n+        assertEquals(true, type.isPrecise());\n+        assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.getDayHourTypeUTC());\n+        assertEquals(false, type.equals(PeriodType.getAllType()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.getDayHourTypeUTC().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());\n+        assertEquals(\"DayHourType\", type.getName());\n+        assertEquals(\"PeriodType[DayHourType]\", type.toString());\n+        assertSameAfterSerialization(type);\n+        assertSame(type, type.withChronology(null));\n+        assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testYearDayTypeUTC() throws Exception {\n+        PeriodType type = PeriodType.getYearDayTypeUTC();\n+        assertEquals(true, type.years().isSupported());\n+        assertEquals(false, type.months().isSupported());\n+        assertEquals(false, type.weeks().isSupported());\n+        assertEquals(true, type.days().isSupported());\n+        assertEquals(true, type.hours().isSupported());\n+        assertEquals(true, type.minutes().isSupported());\n+        assertEquals(true, type.seconds().isSupported());\n+        assertEquals(true, type.millis().isSupported());\n+        assertEquals(false, type.isPrecise());\n+        assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.getYearDayTypeUTC());\n+        assertEquals(false, type.equals(PeriodType.getAllType()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.getYearDayTypeUTC().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());\n+        assertEquals(\"YearDayType\", type.getName());\n+        assertEquals(\"PeriodType[YearDayType]\", type.toString());\n+        assertSameAfterSerialization(type);\n+        assertSame(type, type.withChronology(null));\n+        assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testYearWeekTypeUTC() throws Exception {\n+        PeriodType type = PeriodType.getYearWeekTypeUTC();\n+        assertEquals(true, type.years().isSupported());\n+        assertEquals(false, type.months().isSupported());\n+        assertEquals(true, type.weeks().isSupported());\n+        assertEquals(true, type.days().isSupported());\n+        assertEquals(true, type.hours().isSupported());\n+        assertEquals(true, type.minutes().isSupported());\n+        assertEquals(true, type.seconds().isSupported());\n+        assertEquals(true, type.millis().isSupported());\n+        assertEquals(false, type.isPrecise());\n+        assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.getYearWeekTypeUTC());\n+        assertEquals(false, type.equals(PeriodType.getAllType()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.getYearWeekTypeUTC().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());\n+        assertEquals(\"YearWeekType\", type.getName());\n+        assertEquals(\"PeriodType[YearWeekType]\", type.toString());\n+        assertSameAfterSerialization(type);\n+        assertSame(type, type.withChronology(null));\n+        assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testYearMonthTypeUTC() throws Exception {\n+        PeriodType type = PeriodType.getYearMonthTypeUTC();\n+        assertEquals(true, type.years().isSupported());\n+        assertEquals(true, type.months().isSupported());\n+        assertEquals(false, type.weeks().isSupported());\n+        assertEquals(true, type.days().isSupported());\n+        assertEquals(true, type.hours().isSupported());\n+        assertEquals(true, type.minutes().isSupported());\n+        assertEquals(true, type.seconds().isSupported());\n+        assertEquals(true, type.millis().isSupported());\n+        assertEquals(false, type.isPrecise());\n+        assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.getYearMonthTypeUTC());\n+        assertEquals(false, type.equals(PeriodType.getAllType()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.getYearMonthTypeUTC().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.getAllType().hashCode());\n+        assertEquals(\"YearMonthType\", type.getName());\n+        assertEquals(\"PeriodType[YearMonthType]\", type.toString());\n+        assertSameAfterSerialization(type);\n+        assertSame(type, type.withChronology(null));\n+        assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAllTypeUTC() throws Exception {\n+        PeriodType type = PeriodType.getAllTypeUTC();\n+        assertEquals(true, type.years().isSupported());\n+        assertEquals(true, type.months().isSupported());\n+        assertEquals(true, type.weeks().isSupported());\n+        assertEquals(true, type.days().isSupported());\n+        assertEquals(true, type.hours().isSupported());\n+        assertEquals(true, type.minutes().isSupported());\n+        assertEquals(true, type.seconds().isSupported());\n+        assertEquals(true, type.millis().isSupported());\n+        assertEquals(false, type.isPrecise());\n+        assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());\n+        assertEquals(true, type.equals(type));\n+        assertEquals(true, type == PeriodType.getAllTypeUTC());\n+        assertEquals(false, type.equals(PeriodType.getMillisType()));\n+        assertEquals(true, type.hashCode() == type.hashCode());\n+        assertEquals(true, type.hashCode() == PeriodType.getAllTypeUTC().hashCode());\n+        assertEquals(false, type.hashCode() == PeriodType.getMillisType().hashCode());\n+        assertEquals(\"AllType\", type.getName());\n+        assertEquals(\"PeriodType[AllType]\", type.toString());\n+        assertSameAfterSerialization(type);\n+        assertSame(type, type.withChronology(null));\n+        assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1091890346, "metainfo": ""}