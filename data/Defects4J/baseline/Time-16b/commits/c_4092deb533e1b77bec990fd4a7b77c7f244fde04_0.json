{"sha": "4092deb533e1b77bec990fd4a7b77c7f244fde04", "log": "Allow easier usage from within other (custom) usertypes   ", "commit": "\n--- a/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java\n+++ b/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTime.java\n \n import org.hibernate.Hibernate;\n import org.hibernate.HibernateException;\n-import org.hibernate.usertype.UserType;\n+import org.hibernate.usertype.EnhancedUserType;\n import org.joda.time.DateTime;\n \n import java.io.Serializable;\n  *\n  * @author Mario Ivankovits (mario@ops.co.at)\n  */\n-public class PersistentDateTime implements UserType\n+public class PersistentDateTime implements EnhancedUserType\n {\n-    private static final int[] SQL_TYPES = new int[]\n+\tpublic final static PersistentDateTime INSTANCE = new PersistentDateTime();\n+\n+\tprivate static final int[] SQL_TYPES = new int[]\n     {\n         Types.TIMESTAMP,\n     };\n \n     public Object nullSafeGet(ResultSet resultSet, String[] strings, Object object) throws HibernateException, SQLException\n     {\n-        Object timestamp = Hibernate.TIMESTAMP.nullSafeGet(resultSet, strings[0]);\n-        if (timestamp == null)\n-        {\n-            return null;\n-        }\n+\t\treturn nullSafeGet(resultSet, strings[0]);\n \n-        return new DateTime(timestamp);\n-    }\n+\t}\n \n-    public void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException\n-    {\n-        if (value == null)\n-        {\n-            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, null, index);\n-        }\n-        else\n-        {\n-            Hibernate.TIMESTAMP.nullSafeSet(preparedStatement, ((DateTime) value).toDate(), index);\n-        }\n-    }\n+\tpublic Object nullSafeGet(ResultSet resultSet, String string) throws SQLException\n+\t{\n+\t\tObject timestamp = Hibernate.TIMESTAMP.nullSafeGet(resultSet, string);\n+\t\tif (timestamp == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\treturn new DateTime(timestamp);\n+\t}\n+\n+\tpublic void nullSafeSet(PreparedStatement preparedStatement, Object value, int index) throws HibernateException, SQLException\n+\t{\n+\t\tif (value == null)\n+\t\t{\n+\t\t\tHibernate.TIMESTAMP.nullSafeSet(preparedStatement, null, index);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tHibernate.TIMESTAMP.nullSafeSet(preparedStatement, ((DateTime) value).toDate(), index);\n+\t\t}\n+\t}\n \n     public Object deepCopy(Object value) throws HibernateException\n     {\n     {\n         return original;\n     }\n+\n+\tpublic String objectToSQLString(Object object)\n+\t{\n+\t\tthrow new UnsupportedOperationException();\n+\t}\n+\n+\tpublic String toXMLString(Object object)\n+\t{\n+\t\treturn object.toString();\n+\t}\n+\n+\tpublic Object fromXMLString(String string)\n+\t{\n+\t\treturn new DateTime(string);\n+\t}\n }\n--- a/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java\n+++ b/JodaTimeContrib/src/java/org/joda/time/contrib/hibernate/PersistentDateTimeTZ.java\n  */\n public class PersistentDateTimeTZ implements UserType\n {\n-    private static final int[] SQL_TYPES = new int[]\n+\tpublic final static PersistentDateTimeTZ INSTANCE = new PersistentDateTimeTZ();\n+\n+\tprivate static final int[] SQL_TYPES = new int[]\n     {\n         Types.TIMESTAMP,\n         Types.VARCHAR,", "timestamp": 1118845581, "metainfo": ""}