{"sha": "3fba96d753ba2c20ef2b53487b13b323f23aced7", "log": "Checkstyle fixes   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DurationFieldType.java\n+++ b/JodaTime/src/java/org/joda/time/DurationFieldType.java\n             chronology = DateTimeUtils.getChronology(chronology);\n             \n             switch (iOrdinal) {\n-            case ERAS:\n-                return chronology.eras();\n-            case CENTURIES:\n-                return chronology.centuries();\n-            case WEEKYEARS:\n-                return chronology.weekyears();\n-            case YEARS:\n-                return chronology.years();\n-            case MONTHS:\n-                return chronology.months();\n-            case WEEKS:\n-                return chronology.weeks();\n-            case DAYS:\n-                return chronology.days();\n-            case HALFDAYS:\n-                return chronology.halfdays();\n-            case HOURS:\n-                return chronology.hours();\n-            case MINUTES:\n-                return chronology.minutes();\n-            case SECONDS:\n-                return chronology.seconds();\n-            case MILLIS:\n-                return chronology.millis();\n-            default:\n-                // Shouldn't happen.\n-                throw new InternalError();\n+                case ERAS:\n+                    return chronology.eras();\n+                case CENTURIES:\n+                    return chronology.centuries();\n+                case WEEKYEARS:\n+                    return chronology.weekyears();\n+                case YEARS:\n+                    return chronology.years();\n+                case MONTHS:\n+                    return chronology.months();\n+                case WEEKS:\n+                    return chronology.weeks();\n+                case DAYS:\n+                    return chronology.days();\n+                case HALFDAYS:\n+                    return chronology.halfdays();\n+                case HOURS:\n+                    return chronology.hours();\n+                case MINUTES:\n+                    return chronology.minutes();\n+                case SECONDS:\n+                    return chronology.seconds();\n+                case MILLIS:\n+                    return chronology.millis();\n+                default:\n+                    // Shouldn't happen.\n+                    throw new InternalError();\n             }\n         }\n \n          */\n         private Object readResolve() {\n             switch (iOrdinal) {\n-            case ERAS:\n-                return ERAS_TYPE;\n-            case CENTURIES:\n-                return CENTURIES_TYPE;\n-            case WEEKYEARS:\n-                return WEEKYEARS_TYPE;\n-            case YEARS:\n-                return YEARS_TYPE;\n-            case MONTHS:\n-                return MONTHS_TYPE;\n-            case WEEKS:\n-                return WEEKS_TYPE;\n-            case DAYS:\n-                return DAYS_TYPE;\n-            case HALFDAYS:\n-                return HALFDAYS_TYPE;\n-            case HOURS:\n-                return HOURS_TYPE;\n-            case MINUTES:\n-                return MINUTES_TYPE;\n-            case SECONDS:\n-                return SECONDS_TYPE;\n-            case MILLIS:\n-                return MILLIS_TYPE;\n-            default:\n-                // Shouldn't happen.\n-                return this;\n+                case ERAS:\n+                    return ERAS_TYPE;\n+                case CENTURIES:\n+                    return CENTURIES_TYPE;\n+                case WEEKYEARS:\n+                    return WEEKYEARS_TYPE;\n+                case YEARS:\n+                    return YEARS_TYPE;\n+                case MONTHS:\n+                    return MONTHS_TYPE;\n+                case WEEKS:\n+                    return WEEKS_TYPE;\n+                case DAYS:\n+                    return DAYS_TYPE;\n+                case HALFDAYS:\n+                    return HALFDAYS_TYPE;\n+                case HOURS:\n+                    return HOURS_TYPE;\n+                case MINUTES:\n+                    return MINUTES_TYPE;\n+                case SECONDS:\n+                    return SECONDS_TYPE;\n+                case MILLIS:\n+                    return MILLIS_TYPE;\n+                default:\n+                    // Shouldn't happen.\n+                    return this;\n             }\n         }\n \n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n      */\n     public void setMillis(long instant) {\n         switch (iRoundingMode) {\n-        case ROUND_NONE:\n-            break;\n-        case ROUND_FLOOR:\n-            instant = iRoundingField.roundFloor(instant);\n-            break;\n-        case ROUND_CEILING:\n-            instant = iRoundingField.roundCeiling(instant);\n-            break;\n-        case ROUND_HALF_FLOOR:\n-            instant = iRoundingField.roundHalfFloor(instant);\n-            break;\n-        case ROUND_HALF_CEILING:\n-            instant = iRoundingField.roundHalfCeiling(instant);\n-            break;\n-        case ROUND_HALF_EVEN:\n-            instant = iRoundingField.roundHalfEven(instant);\n-            break;\n+            case ROUND_NONE:\n+                break;\n+            case ROUND_FLOOR:\n+                instant = iRoundingField.roundFloor(instant);\n+                break;\n+            case ROUND_CEILING:\n+                instant = iRoundingField.roundCeiling(instant);\n+                break;\n+            case ROUND_HALF_FLOOR:\n+                instant = iRoundingField.roundHalfFloor(instant);\n+                break;\n+            case ROUND_HALF_CEILING:\n+                instant = iRoundingField.roundHalfCeiling(instant);\n+                break;\n+            case ROUND_HALF_EVEN:\n+                instant = iRoundingField.roundHalfEven(instant);\n+                break;\n         }\n \n         super.setMillis(instant);\n      * @return a clone of the this object.\n      */\n     public MutableDateTime copy() {\n-        return (MutableDateTime)clone();\n+        return (MutableDateTime) clone();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/MutablePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/MutablePeriod.java\n      * @return a clone of the this object.\n      */\n     public MutablePeriod copy() {\n-        return (MutablePeriod)clone();\n+        return (MutablePeriod) clone();\n     }\n \n     /**", "timestamp": 1099731053, "metainfo": ""}