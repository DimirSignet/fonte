{"sha": "714c53e2af8fe894fda54eb805958ced0ce08532", "log": "Fix multiplication of Long.MIN_VALUE by -1 in safeMultiply()", "commit": "\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n         if (val2 == 1) {\n             return val1;\n         }\n-        if (val2 == 0) {\n+        if (val1 == 1) {\n+            return val2;\n+        }\n+        if (val1 == 0 || val2 == 0) {\n             return 0;\n         }\n         long total = val1 * val2;\n-        if (total / val2 != val1) {\n-            throw new ArithmeticException\n-                (\"The calculation caused an overflow: \" + val1 + \" * \" + val2);\n+        if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {\n+            throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n         }\n         return total;\n     }\n--- a/src/test/java/org/joda/time/field/TestFieldUtils.java\n+++ b/src/test/java/org/joda/time/field/TestFieldUtils.java\n         } catch (ArithmeticException e) {\n         }\n     }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSafeMultiplyLongLong() {\n+      assertEquals(0L, FieldUtils.safeMultiply(0L, 0L));\n+      \n+      assertEquals(1L, FieldUtils.safeMultiply(1L, 1L));\n+      assertEquals(3L, FieldUtils.safeMultiply(1L, 3L));\n+      assertEquals(3L, FieldUtils.safeMultiply(3L, 1L));\n+      \n+      assertEquals(6L, FieldUtils.safeMultiply(2L, 3L));\n+      assertEquals(-6L, FieldUtils.safeMultiply(2L, -3L));\n+      assertEquals(-6L, FieldUtils.safeMultiply(-2L, 3L));\n+      assertEquals(6L, FieldUtils.safeMultiply(-2L, -3L));\n+      \n+      assertEquals(Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, 1L));\n+      assertEquals(Long.MIN_VALUE, FieldUtils.safeMultiply(Long.MIN_VALUE, 1L));\n+      assertEquals(-Long.MAX_VALUE, FieldUtils.safeMultiply(Long.MAX_VALUE, -1L));\n+      \n+      try {\n+          FieldUtils.safeMultiply(Long.MIN_VALUE, -1L);\n+          fail();\n+      } catch (ArithmeticException e) {\n+      }\n+      \n+      try {\n+          FieldUtils.safeMultiply(-1L, Long.MIN_VALUE);\n+          fail();\n+      } catch (ArithmeticException e) {\n+      }\n+    \n+      try {\n+          FieldUtils.safeMultiply(Long.MIN_VALUE, 100L);\n+          fail();\n+      } catch (ArithmeticException e) {\n+      }\n+      \n+      try {\n+          FieldUtils.safeMultiply(Long.MIN_VALUE, Long.MAX_VALUE);\n+          fail();\n+      } catch (ArithmeticException e) {\n+      }\n+      \n+      try {\n+          FieldUtils.safeMultiply(Long.MAX_VALUE, Long.MIN_VALUE);\n+          fail();\n+      } catch (ArithmeticException e) {\n+      }\n+  }\n }\n+", "timestamp": 1329840996, "metainfo": ""}