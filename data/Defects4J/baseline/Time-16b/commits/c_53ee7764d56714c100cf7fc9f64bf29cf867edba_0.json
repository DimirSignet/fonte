{"sha": "53ee7764d56714c100cf7fc9f64bf29cf867edba", "log": "Simplify withZoneRetainFields   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n      * The returned object will have a local time of midnight in the new zone on\n      * the same day as the original instant.\n      *\n-     * @param newDateTimeZone  the new time zone\n+     * @param newDateTimeZone  the new time zone, null means default\n      * @return a copy of this instant with a different time zone\n      */\n     public final DateMidnight withZoneRetainFields(DateTimeZone newDateTimeZone) {\n-        final long originalMillis = getMillis();\n-        final Chronology originalChrono = getChronology();\n-        final DateTimeZone originalZone;\n-        if (originalChrono == null || (originalZone = originalChrono.getZone()) == null) {\n-            // Without an original chronology or time zone, no new time zone\n-            // can be set. Call withMillis to let it decide if a clone should\n-            // be made or not.\n-            return withMillis(originalMillis);\n-        }\n-        if (newDateTimeZone == null) {\n-            newDateTimeZone = DateTimeZone.getDefault();\n-        }\n-\n+        newDateTimeZone = (newDateTimeZone == null ? DateTimeZone.getDefault() : newDateTimeZone);\n+        DateTimeZone originalZone = getZone();\n+        originalZone = (originalZone == null ? DateTimeZone.getDefault() : originalZone);\n+        if (newDateTimeZone == originalZone) {\n+            return this;\n+        }\n+        \n+        long originalMillis = getMillis();\n         long newMillis = originalMillis + originalZone.getOffset(originalMillis);\n         newMillis -= newDateTimeZone.getOffsetFromLocal(newMillis);\n \n-        return new DateMidnight(newMillis, originalChrono.withZone(newDateTimeZone));\n+        return new DateMidnight(newMillis, getChronology().withZone(newDateTimeZone));\n     }\n \n     // Date properties\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n      * the field values the same.\n      * The returned object will be either be a new instance or <code>this</code>.\n      *\n-     * @param newDateTimeZone  the new time zone\n+     * @param newDateTimeZone  the new time zone, null means default\n      * @return a copy of this instant with a different time zone\n      * @see #withZone\n      */\n     public final DateTime withZoneRetainFields(DateTimeZone newDateTimeZone) {\n-        final long originalMillis = getMillis();\n-        final Chronology originalChrono = getChronology();\n-        final DateTimeZone originalZone;\n-        if (originalChrono == null || (originalZone = originalChrono.getZone()) == null) {\n-            // Without an original chronology or time zone, no new time zone\n-            // can be set. Call withMillis to let it decide if a clone should\n-            // be made or not.\n-            return withMillis(originalMillis);\n+        newDateTimeZone = (newDateTimeZone == null ? DateTimeZone.getDefault() : newDateTimeZone);\n+        DateTimeZone originalZone = getZone();\n+        originalZone = (originalZone == null ? DateTimeZone.getDefault() : originalZone);\n+        if (newDateTimeZone == originalZone) {\n+            return this;\n         }\n-\n-        DateTime newInstant = withChronology(originalChrono.withZone(newDateTimeZone));\n-        newDateTimeZone = newInstant.getZone();\n-\n-        if (newDateTimeZone == null || newDateTimeZone == originalZone) {\n-            // New time zone didn't stick or didn't change. Skip millis adjustment.\n-            return newInstant;\n-        }\n-\n+        \n+        long originalMillis = getMillis();\n         long newMillis = originalMillis + originalZone.getOffset(originalMillis);\n         newMillis -= newDateTimeZone.getOffsetFromLocal(newMillis);\n \n-        return newInstant.withMillis(newMillis);\n+        return new DateTime(newMillis, getChronology().withZone(newDateTimeZone));\n     }\n \n     // Date properties", "timestamp": 1089671691, "metainfo": ""}