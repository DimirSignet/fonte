{"sha": "339cf9a991c3e20717e771b7306ecf3d5f384bbe", "log": "Fixed javadoc link.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/field/DecoratedDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/DecoratedDurationField.java\n import org.joda.time.DurationField;\n \n /**\n- * <code>DecoratedDurationField</code> extends {@link AbstractDurationField},\n+ * <code>DecoratedDurationField</code> extends {@link BaseDurationField},\n  * implementing only the minimum required set of methods. These implemented\n  * methods delegate to a wrapped field.\n  * <p>\n  * This design allows new DurationField types to be defined that piggyback on\n  * top of another, inheriting all the safe method implementations from\n- * AbstractDurationField. Should any method require pure delegation to the\n+ * BaseDurationField. Should any method require pure delegation to the\n  * wrapped field, simply override and use the provided getWrappedField method.\n  * <p>\n  * DecoratedDurationField is thread-safe and immutable, and its subclasses must", "timestamp": 1089427213, "metainfo": ""}