{"sha": "a7236b6d711d55fedec812d4188801c6d6d5a378", "log": "Fix hashcode on partial property classes from FindBugs   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets a suitable hashcode for the object.\n+     * \n+     * @return the hashcode\n+     */\n+    public int hashCode() {\n+        int hash = 19;\n+        hash = 13 * hash + get();\n+        hash = 13 * hash + getFieldType().hashCode();\n+        hash = 13 * hash + getReadablePartial().getChronology().hashCode();\n+        return hash;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Output a debugging string.\n      * \n      * @return debugging string\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Properties.java\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    public void testPropertyEquals() {\n+        YearMonthDay test1 = new YearMonthDay(2005, 11, 8);\n+        YearMonthDay test2 = new YearMonthDay(2005, 11, 9);\n+        YearMonthDay test3 = new YearMonthDay(2005, 11, 8, CopticChronology.getInstanceUTC());\n+        assertEquals(false, test1.dayOfMonth().equals(test1.year()));\n+        assertEquals(false, test1.dayOfMonth().equals(test1.monthOfYear()));\n+        assertEquals(true, test1.dayOfMonth().equals(test1.dayOfMonth()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.year()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.monthOfYear()));\n+        assertEquals(false, test1.dayOfMonth().equals(test2.dayOfMonth()));\n+        \n+        assertEquals(false, test1.monthOfYear().equals(test1.year()));\n+        assertEquals(true, test1.monthOfYear().equals(test1.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test1.dayOfMonth()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.year()));\n+        assertEquals(true, test1.monthOfYear().equals(test2.monthOfYear()));\n+        assertEquals(false, test1.monthOfYear().equals(test2.dayOfMonth()));\n+        \n+        assertEquals(false, test1.dayOfMonth().equals(null));\n+        assertEquals(false, test1.dayOfMonth().equals(\"any\"));\n+        \n+        // chrono\n+        assertEquals(false, test1.dayOfMonth().equals(test3.dayOfMonth()));\n+    }\n+\n+    public void testPropertyHashCode() {\n+        YearMonthDay test1 = new YearMonthDay(2005, 11, 8);\n+        YearMonthDay test2 = new YearMonthDay(2005, 11, 9);\n+        assertEquals(true, test1.dayOfMonth().hashCode() == test1.dayOfMonth().hashCode());\n+        assertEquals(false, test1.dayOfMonth().hashCode() == test2.dayOfMonth().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test1.monthOfYear().hashCode());\n+        assertEquals(true, test1.monthOfYear().hashCode() == test2.monthOfYear().hashCode());\n+    }\n+\n     //-----------------------------------------------------------------------\n     private void check(YearMonthDay test, int year, int month, int day) {\n         assertEquals(year, test.getYear());", "timestamp": 1135296489, "metainfo": ""}