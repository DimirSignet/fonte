{"sha": "0f44370d09c96a9978864aefb50e0086eb90d9df", "log": "Added support to create Periods from a duration end end instant.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n     }\n \n     /**\n+     * Creates a period from the given duration and end point.\n+     *\n+     * @param duration  the duration of the interval, null means zero-length\n+     * @param endInstant  the interval end, null means now\n+     */\n+    public Period(ReadableDuration duration, ReadableInstant endInstant) {\n+        super(duration, endInstant, null);\n+    }\n+\n+    /**\n+     * Creates a period from the given duration and end point.\n+     *\n+     * @param duration  the duration of the interval, null means zero-length\n+     * @param endInstant  the interval end, null means now\n+     * @param type  which set of fields this period supports, null means standard\n+     */\n+    public Period(ReadableDuration duration, ReadableInstant endInstant, PeriodType type) {\n+        super(duration, endInstant, type);\n+    }\n+\n+    /**\n      * Creates a period from the specified object using the\n      * {@link org.joda.time.convert.ConverterManager ConverterManager}.\n      *\n--- a/JodaTime/src/java/org/joda/time/base/BaseDuration.java\n+++ b/JodaTime/src/java/org/joda/time/base/BaseDuration.java\n      * However, ISO UTC also has precise days and weeks.\n      * <p>\n      * For more control over the conversion process, you must pair the duration with\n-     * an instant, see {@link #toPeriodFrom(ReadableInstant)}.\n+     * an instant, see {@link #toPeriodFrom(ReadableInstant)} and\n+     * {@link #toPeriodTo(ReadableInstant)}\n      * \n      * @param chrono  the chronology to use, null means ISO default\n      * @return a Period created using the millisecond duration from this instance\n      * However, ISO UTC also has precise days and weeks.\n      * <p>\n      * For more control over the conversion process, you must pair the duration with\n-     * an instant, see {@link #toPeriodFrom(ReadableInstant, PeriodType)}.\n+     * an instant, see {@link #toPeriodFrom(ReadableInstant, PeriodType)} and\n+     * {@link #toPeriodTo(ReadableInstant, PeriodType)}\n      * \n      * @param type  the period type to use, null means standard\n      * @param chrono  the chronology to use, null means ISO default\n     }\n \n     /**\n+     * Converts this duration to a Period instance by subtracting the duration\n+     * from an end instant to obtain an interval using the standard period\n+     * type.\n+     * <p>\n+     * This conversion will determine the fields of a period accurately.\n+     * The results are based on the instant millis, the chronology of the instant,\n+     * the standard period type and the length of this duration.\n+     * \n+     * @param endInstant  the instant to calculate the period to, null means now\n+     * @return a Period created using the millisecond duration from this instance\n+     */\n+    public Period toPeriodTo(ReadableInstant endInstant) {\n+        return new Period(this, endInstant);\n+    }\n+\n+    /**\n+     * Converts this duration to a Period instance by subtracting the duration\n+     * from an end instant to obtain an interval using the standard period\n+     * type.\n+     * <p>\n+     * This conversion will determine the fields of a period accurately.\n+     * The results are based on the instant millis, the chronology of the instant,\n+     * the period type and the length of this duration.\n+     * \n+     * @param endInstant  the instant to calculate the period to, null means now\n+     * @param type  the period type determining how to split the duration into fields, null means All type\n+     * @return a Period created using the millisecond duration from this instance\n+     */\n+    public Period toPeriodTo(ReadableInstant endInstant, PeriodType type) {\n+        return new Period(this, endInstant, type);\n+    }\n+\n+    /**\n      * Converts this duration to an Interval starting at the specified instant.\n      * \n-     * @param startInstant  the instant to start the instant from, null means now\n+     * @param startInstant  the instant to start the interval at, null means now\n      * @return an Interval starting at the specified instant\n      */\n     public Interval toIntervalFrom(ReadableInstant startInstant) {\n         return new Interval(startInstant, this);\n     }\n \n+    /**\n+     * Converts this duration to an Interval ending at the specified instant.\n+     * \n+     * @param endInstant  the instant to end the interval at, null means now\n+     * @return an Interval ending at the specified instant\n+     */\n+    public Interval toIntervalTo(ReadableInstant endInstant) {\n+        return new Interval(this, endInstant);\n+    }\n+\n }\n--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n      * @throws IllegalArgumentException if an unsupported field's value is non-zero\n      */\n     protected BasePeriod(int years, int months, int weeks, int days,\n-                            int hours, int minutes, int seconds, int millis,\n-                            PeriodType type) {\n+                         int hours, int minutes, int seconds, int millis,\n+                         PeriodType type) {\n         super();\n         type = checkPeriodType(type);\n         iType = type;\n         long durationMillis = DateTimeUtils.getDurationMillis(duration);\n         long endMillis = FieldUtils.safeAdd(startMillis, durationMillis);\n         Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);\n+        iType = type;\n+        iValues = chrono.get(this, startMillis, endMillis);\n+    }\n+\n+    /**\n+     * Creates a period from the given duration and end point.\n+     *\n+     * @param duration  the duration of the interval, null means zero-length\n+     * @param endInstant  the interval end, null means now\n+     * @param type  which set of fields this period supports, null means standard\n+     */\n+    protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, PeriodType type) {\n+        super();\n+        type = checkPeriodType(type);\n+        long durationMillis = DateTimeUtils.getDurationMillis(duration);\n+        long endMillis = DateTimeUtils.getInstantMillis(endInstant);\n+        long startMillis = FieldUtils.safeSubtract(endMillis, durationMillis);\n+        Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);\n         iType = type;\n         iValues = chrono.get(this, startMillis, endMillis);\n     }", "timestamp": 1100708317, "metainfo": ""}