{"sha": "cfe3388edd8cd2e60bdbae5e0097275dde52c7a7", "log": "Added more methods to DurationConverter.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/convert/DurationConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/DurationConverter.java\n  */\n package org.joda.time.convert;\n \n+import org.joda.time.ReadableDuration;\n+import org.joda.time.ReadWritableDuration;\n+\n /**\n  * DurationConverter defines how an object is converted to a millisecond duration.\n  *\n  * @author Stephen Colebourne\n+ * @author Brian S O'Neill\n  * @since 1.0\n  */\n public interface DurationConverter extends Converter {\n+\n+    /**\n+     * Returns true if the given support object represents a precice\n+     * duration. If so, getDurationMillis can be called.\n+     *\n+     * @throws ClassCastException if the object is invalid\n+     */\n+    boolean isPrecise(Object object);\n \n     /**\n      * Extracts the millis from an object of this convertor's type.\n      * \n      * @param object  the object to convert, must not be null\n      * @return the millisecond duration\n-     * @throws IllegalArgumentException if the object is invalid\n+     * @throws ClassCastException if the object is invalid\n      */\n     long getDurationMillis(Object object);\n-    \n+\n+    /**\n+     * Extracts duration values from an object of this converter's type, and\n+     * sets them into the given ReadWritableDuration.\n+     *\n+     * @param duration duration to get modified\n+     * @param object  the object to convert, must not be null\n+     * @return the millisecond duration\n+     * @throws ClassCastException if the object is invalid\n+     */\n+    void setInto(ReadWritableDuration duration, Object object);\n+\n }\n--- a/JodaTime/src/java/org/joda/time/convert/InstantConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/InstantConverter.java\n public interface InstantConverter extends Converter {\n \n     /**\n-     * Extracts the millis from an object of this convertor's type.\n+     * Extracts the millis from an object of this converter's type.\n      * \n      * @param object  the object to convert, must not be null\n      * @return the millisecond instant\n     long getInstantMillis(Object object);\n     \n     /**\n-     * Extracts the millis from an object of this convertor's type. The zone\n+     * Extracts the millis from an object of this converter's type. The zone\n      * parameter is a hint to the converter, should it require a time zone to\n      * aid in conversion.\n      * \n     long getInstantMillis(Object object, DateTimeZone zone);\n     \n     /**\n-     * Extracts the millis from an object of this convertor's type. The chrono\n+     * Extracts the millis from an object of this converter's type. The chrono\n      * parameter is a hint to the converter, should it require a chronology to\n      * aid in conversion.\n      * \n     \n     //-----------------------------------------------------------------------\n     /**\n-     * Extracts the chronology from an object of this convertor's type.\n+     * Extracts the chronology from an object of this converter's type.\n      * \n      * @param object  the object to convert, must not be null\n      * @return the chronology, never null\n     Chronology getChronology(Object object);\n     \n     /**\n-     * Extracts the chronology from an object of this convertor's type\n+     * Extracts the chronology from an object of this converter's type\n      * where the time zone is specified.\n      * \n      * @param object  the object to convert, must not be null\n     Chronology getChronology(Object object, DateTimeZone zone);\n     \n     /**\n-     * Extracts the chronology from an object of this convertor's type\n+     * Extracts the chronology from an object of this converter's type\n      * where the chronology is specified.\n      * \n      * @param object  the object to convert, must not be null\n--- a/JodaTime/src/java/org/joda/time/convert/LongConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/LongConverter.java\n  */\n package org.joda.time.convert;\n \n+import org.joda.time.ReadWritableDuration;\n \n /**\n  * LongConverter converts a Long to milliseconds in the ISOChronology.\n  *\n  * @author Stephen Colebourne\n+ * @author Brian S O'Neill\n  * @since 1.0\n  */\n class LongConverter extends AbstractConverter implements InstantConverter, DurationConverter {\n         return ((Long) object).longValue();\n     }\n     \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns true always.\n+     */\n+    public boolean isPrecise(Object object) {\n+        return true;\n+    }\n+\n     /**\n      * Gets the millisecond duration, which is the Long value.\n      * \n     public long getDurationMillis(Object object) {\n         return ((Long) object).longValue();\n     }\n-    \n+\n+    /**\n+     * Extracts duration values from an object of this converter's type, and\n+     * sets them into the given ReadWritableDuration.\n+     *\n+     * @param duration duration to get modified\n+     * @param object  the object to convert, must not be null\n+     * @return the millisecond duration\n+     * @throws IllegalArgumentException if the object is invalid\n+     */\n+    public void setInto(ReadWritableDuration duration, Object object) {\n+        duration.setTotalMillis(((Long) object).longValue());\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Returns Long.class.\n--- a/JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java\n package org.joda.time.convert;\n \n import org.joda.time.ReadableDuration;\n+import org.joda.time.ReadWritableDuration;\n \n /**\n  * ReadableDurationConverter extracts milliseconds and chronology from a ReadableDuration.\n  *\n  * @author Stephen Colebourne\n+ * @author Brian S O'Neill\n  * @since 1.0\n  */\n class ReadableDurationConverter extends AbstractConverter implements DurationConverter {\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Returns true if the given support object represents a precice\n+     * duration. If so, getDurationMillis can be called.\n+     *\n+     * @throws ClassCastException if the object is invalid\n+     */\n+    public boolean isPrecise(Object object) {\n+        return ((ReadableDuration) object).isPrecise();\n+    }\n+\n+    /**\n      * Extracts the millis from an object of this convertor's type.\n      * \n      * @param object  the object to convert, must not be null\n         return ((ReadableDuration) object).getTotalMillis();\n     }\n     \n+    /**\n+     * Extracts duration values from an object of this converter's type, and\n+     * sets them into the given ReadWritableDuration.\n+     *\n+     * @param duration duration to get modified\n+     * @param object  the object to convert, must not be null\n+     * @return the millisecond duration\n+     * @throws ClassCastException if the object is invalid\n+     */\n+    public void setInto(ReadWritableDuration duration, Object object) {\n+        duration.setDuration((ReadableDuration) object);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Returns ReadableDuration.class.", "timestamp": 1071978632, "metainfo": ""}