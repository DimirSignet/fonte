{"sha": "5ccd1def534f2e37637d0311fb8bcfba62f1c74d", "log": "Add missing since tags for 1.5  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n      * @param instantUTC  the UTC instant to convert to local\n      * @return the local instant with the same local time\n      * @throws ArithmeticException if the result overflows a long\n+     * @since 1.5\n      */\n     public long convertUTCToLocal(long instantUTC) {\n         int offset = getOffset(instantUTC);\n      * @return the UTC instant with the same local time, \n      * @throws ArithmeticException if the result overflows a long\n      * @throws IllegalArgumentException if the zone has no eqivalent local time\n+     * @since 1.5\n      */\n     public long convertLocalToUTC(long instantLocal, boolean strict) {\n         // get the offset at instantLocal (first estimate)\n--- a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java\n+++ b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java\n      * @param fieldType  type of field being set\n      * @param value  illegal value being set\n      * @param explain  an explanation\n+     * @since 1.5\n      */\n     public IllegalFieldValueException(DateTimeFieldType fieldType,\n                                       Number value, String explain) {\n--- a/JodaTime/src/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDate.java\n      * of 1970-01-01T00:00:00 (not fixed to any specific time zone).\n      * \n      * @return the number of milliseconds since 1970-01-01T00:00:00\n+     * @since 1.5 (previously private)\n      */\n     protected long getLocalMillis() {\n         return iLocalMillis;\n      * This instance is immutable and unaffected by this method call.\n      * \n      * @return this date as a datetime at the start of the day\n+     * @since 1.5\n      */\n     public DateTime toDateTimeAtStartOfDay() {\n         return toDateTimeAtStartOfDay(null);\n      *\n      * @param zone  the zone to use, null means default zone\n      * @return this date as a datetime at the start of the day\n+     * @since 1.5\n      */\n     public DateTime toDateTimeAtStartOfDay(DateTimeZone zone) {\n         zone = DateTimeUtils.getZone(zone);\n--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java\n      * of 1970-01-01T00:00:00 (not fixed to any specific time zone).\n      *\n      * @return the number of milliseconds since 1970-01-01T00:00:00\n+     * @since 1.5 (previously private)\n      */\n     protected long getLocalMillis() {\n         return iLocalMillis;\n--- a/JodaTime/src/java/org/joda/time/LocalTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalTime.java\n      * of 1970-01-01T00:00:00 (not fixed to any specific time zone).\n      * \n      * @return the number of milliseconds since 1970-01-01T00:00:00\n+     * @since 1.5 (previously private)\n      */\n     protected long getLocalMillis() {\n         return iLocalMillis;\n--- a/JodaTime/src/java/org/joda/time/Partial.java\n+++ b/JodaTime/src/java/org/joda/time/Partial.java\n      * @return true if this partial matches the specified partial\n      * @throws IllegalArgumentException if the partial is null\n      * @throws IllegalArgumentException if the fields of the two partials do not match\n+     * @since 1.5\n      */\n     public boolean isMatch(ReadablePartial partial) {\n         if (partial == null) {\n--- a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java\n      * decode the data into a DateTimeZone object.\n      *\n      * @param out output stream to receive encoded DateTimeZone.\n+     * @since 1.5 (parameter added)\n      */\n     public void writeTo(String zoneID, OutputStream out) throws IOException {\n         if (out instanceof DataOutput) {\n      * decode the data into a DateTimeZone object.\n      *\n      * @param out output stream to receive encoded DateTimeZone.\n+     * @since 1.5 (parameter added)\n      */\n     public void writeTo(String zoneID, DataOutput out) throws IOException {\n         // pass false so zone id is not written out", "timestamp": 1193650103, "metainfo": ""}