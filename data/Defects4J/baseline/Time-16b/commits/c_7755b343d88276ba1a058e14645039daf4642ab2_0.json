{"sha": "7755b343d88276ba1a058e14645039daf4642ab2", "log": "Fix and test LenientChronology to ensure it works with time zones bug 1755161  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/LenientDateTimeField.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2007 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     }\n \n     /**\n-     * Set values which may be out of bounds. If the value is out of bounds,\n-     * the instant is first set to the minimum allowed value, and then the\n-     * difference is added.\n+     * Set values which may be out of bounds by adding the difference between\n+     * the new value and the current value.\n      */\n     public long set(long instant, int value) {\n-        int min = getMinimumValue(instant);\n-        if (value >= min && value <= getMaximumValue(instant)) {\n-            return super.set(instant, value);\n-        }\n-        return add(super.set(instant, min), value - min);\n+        long difference = FieldUtils.safeSubtract(value, get(instant));\n+        return add(instant, difference);\n     }\n }\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/MockZone.java\n+/*\n+ *  Copyright 2001-2007 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+public class MockZone extends DateTimeZone {\n+\n+    long transition;\n+    int winterOffset;\n+\n+    public MockZone(long transition, int winterOffset) {\n+        super(\"MockZone\");\n+        this.transition = transition;\n+        this.winterOffset = winterOffset;\n+    }\n+\n+    public int getOffset(long instant) {\n+        return (instant < transition ? winterOffset : winterOffset + 3600000);\n+    }\n+\n+    public int getStandardOffset(long instant) {\n+        return winterOffset;\n+    }\n+\n+    public long nextTransition(long instant) {\n+        return (instant < transition ? transition : transition + 180L * DateTimeConstants.MILLIS_PER_DAY);\n+    }\n+\n+    public long previousTransition(long instant) {\n+        return (instant > transition ? transition : transition - 180L * DateTimeConstants.MILLIS_PER_DAY);\n+    }\n+\n+    public boolean isFixed() {\n+        return false;\n+    }\n+\n+    public String getNameKey(long instant) {\n+        return null;\n+    }\n+\n+    public boolean equals(Object object) {\n+        return false;\n+    }\n+}\n--- a/JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestLenientChronology.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.MockZone;\n \n /**\n  *\n     protected void tearDown() throws Exception {\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void test_setYear() {\n+        Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());\n+        DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);\n+        assertEquals(\"2007-01-01T00:00:00.000Z\", dt.toString());\n+        dt = dt.withYear(2008);\n+        assertEquals(\"2008-01-01T00:00:00.000Z\", dt.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_setMonthOfYear() {\n+        Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());\n+        DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);\n+        assertEquals(\"2007-01-01T00:00:00.000Z\", dt.toString());\n+        dt = dt.withMonthOfYear(13);\n+        assertEquals(\"2008-01-01T00:00:00.000Z\", dt.toString());\n+        dt = dt.withMonthOfYear(0);\n+        assertEquals(\"2007-12-01T00:00:00.000Z\", dt.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_setDayOfMonth() {\n+        Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());\n+        DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);\n+        assertEquals(\"2007-01-01T00:00:00.000Z\", dt.toString());\n+        dt = dt.withDayOfMonth(32);\n+        assertEquals(\"2007-02-01T00:00:00.000Z\", dt.toString());\n+        dt = dt.withDayOfMonth(0);\n+        assertEquals(\"2007-01-31T00:00:00.000Z\", dt.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_setHourOfDay() {\n+        Chronology zone = LenientChronology.getInstance(ISOChronology.getInstanceUTC());\n+        DateTime dt = new DateTime(2007, 1, 1, 0, 0 ,0, 0, zone);\n+        assertEquals(\"2007-01-01T00:00:00.000Z\", dt.toString());\n+        dt = dt.withHourOfDay(24);\n+        assertEquals(\"2007-01-02T00:00:00.000Z\", dt.toString());\n+        dt = dt.withHourOfDay(-1);\n+        assertEquals(\"2007-01-01T23:00:00.000Z\", dt.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //------------------------ Bug ------------------------------------------\n+    //-----------------------------------------------------------------------\n     public void testNearDstTransition() {\n         // This is just a regression test. Test case provided by Blair Martin.\n \n \n         assertEquals(hour, dt.getHourOfDay()); // Used to fail - hour was 22\n     }\n+\n+    //-----------------------------------------------------------------------\n+    //------------------------ Bug [1755161] --------------------------------\n+    //-----------------------------------------------------------------------\n+    /** Mock zone simulating America/Grand_Turk cutover at midnight 2007-04-01 */\n+    private static long CUTOVER_TURK = 1175403600000L;\n+    private static int OFFSET_TURK = -18000000;  // -05:00\n+    private static final DateTimeZone MOCK_TURK = new MockZone(CUTOVER_TURK, OFFSET_TURK);\n+\n+    //-----------------------------------------------------------------------\n+    public void test_MockTurkIsCorrect() {\n+        DateTime pre = new DateTime(CUTOVER_TURK - 1L, MOCK_TURK);\n+        assertEquals(\"2007-03-31T23:59:59.999-05:00\", pre.toString());\n+        DateTime at = new DateTime(CUTOVER_TURK, MOCK_TURK);\n+        assertEquals(\"2007-04-01T01:00:00.000-04:00\", at.toString());\n+        DateTime post = new DateTime(CUTOVER_TURK + 1L, MOCK_TURK);\n+        assertEquals(\"2007-04-01T01:00:00.001-04:00\", post.toString());\n+    }\n+\n+    public void test_lenientChrononolgy_Chicago() {\n+        DateTimeZone zone = DateTimeZone.forID(\"America/Chicago\");\n+        Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(zone));\n+        DateTime dt = new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);\n+        assertEquals(\"2007-03-11T03:30:00.000-05:00\", dt.toString());\n+    }\n+\n+    public void test_lenientChrononolgy_Turk() {\n+        Chronology lenient = LenientChronology.getInstance(ISOChronology.getInstance(MOCK_TURK));\n+        DateTime dt = new DateTime(2007, 4, 1, 0, 30, 0, 0, lenient);\n+        assertEquals(\"2007-04-01T01:30:00.000-04:00\", dt.toString());\n+    }\n+\n+    public void test_strictChrononolgy_Chicago() {\n+        DateTimeZone zone = DateTimeZone.forID(\"America/Chicago\");\n+        Chronology lenient = StrictChronology.getInstance(ISOChronology.getInstance(zone));\n+        try {\n+            new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void test_isoChrononolgy_Chicago() {\n+        DateTimeZone zone = DateTimeZone.forID(\"America/Chicago\");\n+        Chronology lenient = ISOChronology.getInstance(zone);\n+        try {\n+            new DateTime(2007, 3, 11, 2, 30, 0, 0, lenient);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n }", "timestamp": 1186240548, "metainfo": ""}