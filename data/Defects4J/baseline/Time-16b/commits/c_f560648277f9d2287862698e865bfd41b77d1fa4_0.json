{"sha": "f560648277f9d2287862698e865bfd41b77d1fa4", "log": "Test PartialConverter   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestCalendarConverter.java\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GJChronology;\n import org.joda.time.chrono.GregorianChronology;\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar();\n+        cal.setTime(new Date(12345678L));\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = Chronology.getISO().get(tod, 12345678L);\n+        int[] actual = CalendarConverter.INSTANCE.getPartialValues(tod, cal, Chronology.getISO());\n+        assertEquals(true, Arrays.equals(expected, actual));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"Converter[java.util.Calendar]\", CalendarConverter.INSTANCE.toString());\n     }\n--- a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Duration;\n+import org.joda.time.ReadablePartial;\n import org.joda.time.ReadablePeriod;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    public void testGetPartialConverter() {\n+        PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n+        assertEquals(Long.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPartialConverter(new DateTime());\n+        assertEquals(ReadableInstant.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPartialConverter(\"\");\n+        assertEquals(String.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPartialConverter(new Date());\n+        assertEquals(Date.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPartialConverter(new GregorianCalendar());\n+        assertEquals(Calendar.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPartialConverter(null);\n+        assertEquals(null, c.getSupportedType());\n+        \n+        try {\n+            ConverterManager.getInstance().getPartialConverter(Boolean.TRUE);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetPartialConverterRemovedNull() {\n+        try {\n+            ConverterManager.getInstance().removePartialConverter(NullConverter.INSTANCE);\n+            try {\n+                ConverterManager.getInstance().getPartialConverter(null);\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+        } finally {\n+            ConverterManager.getInstance().addPartialConverter(NullConverter.INSTANCE);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testGetPartialConverterOKMultipleMatches() {\n+        PartialConverter c = new PartialConverter() {\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return ReadableDateTime.class;}\n+        };\n+        try {\n+            ConverterManager.getInstance().addPartialConverter(c);\n+            PartialConverter ok = ConverterManager.getInstance().getPartialConverter(new DateTime());\n+            // ReadableDateTime and ReadablePartial both match, but RI discarded as less specific\n+            assertEquals(ReadableDateTime.class, ok.getSupportedType());\n+        } finally {\n+            ConverterManager.getInstance().removePartialConverter(c);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testGetPartialConverterBadMultipleMatches() {\n+        PartialConverter c = new PartialConverter() {\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return Serializable.class;}\n+        };\n+        try {\n+            ConverterManager.getInstance().addPartialConverter(c);\n+            try {\n+                ConverterManager.getInstance().getPartialConverter(new DateTime());\n+                fail();\n+            } catch (IllegalStateException ex) {\n+                // Serializable and ReadablePartial both match, so cannot pick\n+            }\n+        } finally {\n+            ConverterManager.getInstance().removePartialConverter(c);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPartialConverters() {\n+        PartialConverter[] array = ConverterManager.getInstance().getPartialConverters();\n+        assertEquals(6, array.length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddPartialConverter1() {\n+        PartialConverter c = new PartialConverter() {\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        try {\n+            PartialConverter removed = ConverterManager.getInstance().addPartialConverter(c);\n+            assertEquals(null, removed);\n+            assertEquals(Boolean.class, ConverterManager.getInstance().getPartialConverter(Boolean.TRUE).getSupportedType());\n+            assertEquals(7, ConverterManager.getInstance().getPartialConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().removePartialConverter(c);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testAddPartialConverter2() {\n+        PartialConverter c = new PartialConverter() {\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return String.class;}\n+        };\n+        try {\n+            PartialConverter removed = ConverterManager.getInstance().addPartialConverter(c);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(String.class, ConverterManager.getInstance().getPartialConverter(\"\").getSupportedType());\n+            assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testAddPartialConverter3() {\n+        PartialConverter removed = ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE);\n+        assertEquals(null, removed);\n+        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testAddPartialConverter4() {\n+        PartialConverter removed = ConverterManager.getInstance().addPartialConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testAddPartialConverterSecurity() {\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemovePartialConverter1() {\n+        try {\n+            PartialConverter removed = ConverterManager.getInstance().removePartialConverter(StringConverter.INSTANCE);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(5, ConverterManager.getInstance().getPartialConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testRemovePartialConverter2() {\n+        PartialConverter c = new PartialConverter() {\n+            public int[] getPartialValues(ReadablePartial partial, Object object, Chronology chrono) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        PartialConverter removed = ConverterManager.getInstance().removePartialConverter(c);\n+        assertEquals(null, removed);\n+        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testRemovePartialConverter3() {\n+        PartialConverter removed = ConverterManager.getInstance().removePartialConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+    }\n+\n+    public void testRemovePartialConverterSecurity() {\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().removeInstantConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     private static int DURATION_SIZE = 5;\n     \n     public void testGetDurationConverter() {\n--- a/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestDateConverter.java\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n import java.util.Date;\n \n import junit.framework.TestCase;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n     }\n \n     //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = Chronology.getISO().get(tod, 12345678L);\n+        int[] actual = DateConverter.INSTANCE.getPartialValues(tod, new Date(12345678L), Chronology.getISO());\n+        assertEquals(true, Arrays.equals(expected, actual));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"Converter[java.util.Date]\", DateConverter.INSTANCE.toString());\n     }\n--- a/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n     }\n \n     //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = Chronology.getISO().get(tod, 12345678L);\n+        int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), Chronology.getISO());\n+        assertEquals(true, Arrays.equals(expected, actual));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testGetDurationMillis_Object() throws Exception {\n         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n     }\n--- a/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import org.joda.time.MutableInterval;\n import org.joda.time.MutablePeriod;\n import org.joda.time.PeriodType;\n+import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n     }\n \n     //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = new int[] {10 + 1, 20, 30, 40}; // now\n+        int[] actual = NullConverter.INSTANCE.getPartialValues(tod, null, Chronology.getISO());\n+        assertEquals(true, Arrays.equals(expected, actual));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testGetDurationMillis_Object() throws Exception {\n         assertEquals(0L, NullConverter.INSTANCE.getDurationMillis(null));\n     }\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import org.joda.time.Instant;\n import org.joda.time.MutableDateTime;\n import org.joda.time.ReadableInstant;\n+import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n     }\n \n     //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = Chronology.getISO().get(tod, 12345678L);\n+        int[] actual = ReadableInstantConverter.INSTANCE.getPartialValues(tod, new Instant(12345678L), Chronology.getISO());\n+        assertEquals(true, Arrays.equals(expected, actual));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"Converter[org.joda.time.ReadableInstant]\", ReadableInstantConverter.INSTANCE.toString());\n     }\n--- a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n import java.util.Locale;\n \n import junit.framework.TestCase;\n import org.joda.time.MutableInterval;\n import org.joda.time.MutablePeriod;\n import org.joda.time.PeriodType;\n+import org.joda.time.TimeOfDay;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n         assertEquals(JulianChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501\", JULIAN));\n         assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501+01:00\", (Chronology) null));\n         assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501\", (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = new int[] {3, 4, 5, 6};\n+        int[] actual = StringConverter.INSTANCE.getPartialValues(tod, \"T03:04:05.006\", Chronology.getISO());\n+        assertEquals(true, Arrays.equals(expected, actual));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1094999066, "metainfo": ""}