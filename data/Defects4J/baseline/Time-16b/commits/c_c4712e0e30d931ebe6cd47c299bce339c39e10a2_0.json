{"sha": "c4712e0e30d931ebe6cd47c299bce339c39e10a2", "log": "Add isSupported to types   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n     public abstract DurationFieldType getRangeDurationType();\n \n     /**\n-     * Select a suitable field for this type from the given Chronology.\n+     * Gets a suitable field for this type from the given Chronology.\n      *\n-     * @param chronology Chronology to select a field from, null means\n-     * ISOChronology in default zone\n+     * @param chronology  the chronology to use, null means ISOChronology in default zone\n      * @return a suitable field\n      */\n     public abstract DateTimeField getField(Chronology chronology);\n+\n+    /**\n+     * Checks whether this field supported in the given Chronology.\n+     *\n+     * @param chronology  the chronology to use, null means ISOChronology in default zone\n+     * @return true if supported\n+     */\n+    public boolean isSupported(Chronology chronology) {\n+        return getField(chronology).isSupported();\n+    }\n \n     /**\n      * Get a suitable debug string.\n--- a/JodaTime/src/java/org/joda/time/DurationFieldType.java\n+++ b/JodaTime/src/java/org/joda/time/DurationFieldType.java\n     }\n \n     /**\n-     * Select a suitable field for this type from the given Chronology.\n+     * Gets a suitable field for this type from the given Chronology.\n      *\n-     * @param chronology Chronology to select a field from, null means\n-     * ISOChronology in default zone\n+     * @param chronology  the chronology to use, null means ISOChronology in default zone\n      * @return a suitable field\n      */\n     public abstract DurationField getField(Chronology chronology);\n+\n+    /**\n+     * Checks whether this field supported in the given Chronology.\n+     *\n+     * @param chronology  the chronology to use, null means ISOChronology in default zone\n+     * @return true if supported\n+     */\n+    public boolean isSupported(Chronology chronology) {\n+        return getField(chronology).isSupported();\n+    }\n \n     /**\n      * Get a suitable debug string.\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         suite.addTest(TestChronology.suite());\n+        suite.addTest(TestDateTimeFieldType.suite());\n         \n         suite.addTest(TestInstant_Constructors.suite());\n         suite.addTest(TestInstant_Basics.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for Chronology.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDateTimeFieldType extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDateTimeFieldType.class);\n+    }\n+\n+    public TestDateTimeFieldType(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_era() {\n+        assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era());\n+        assertEquals(\"era\", DateTimeFieldType.era().getName());\n+        assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType());\n+        assertEquals(null, DateTimeFieldType.era().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().era(), DateTimeFieldType.era().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().era().isSupported(), DateTimeFieldType.era().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_centuryOfEra() {\n+        assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra());\n+        assertEquals(\"centuryOfEra\", DateTimeFieldType.centuryOfEra().getName());\n+        assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType());\n+        assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_yearOfCentury() {\n+        assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury());\n+        assertEquals(\"yearOfCentury\", DateTimeFieldType.yearOfCentury().getName());\n+        assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType());\n+        assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_yearOfEra() {\n+        assertEquals(DateTimeFieldType.yearOfEra(), DateTimeFieldType.yearOfEra());\n+        assertEquals(\"yearOfEra\", DateTimeFieldType.yearOfEra().getName());\n+        assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfEra().getDurationType());\n+        assertEquals(DurationFieldType.eras(), DateTimeFieldType.yearOfEra().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().yearOfEra(), DateTimeFieldType.yearOfEra().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().yearOfEra().isSupported(), DateTimeFieldType.yearOfEra().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_year() {\n+        assertEquals(DateTimeFieldType.year(), DateTimeFieldType.year());\n+        assertEquals(\"year\", DateTimeFieldType.year().getName());\n+        assertEquals(DurationFieldType.years(), DateTimeFieldType.year().getDurationType());\n+        assertEquals(null, DateTimeFieldType.year().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().year(), DateTimeFieldType.year().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().year().isSupported(), DateTimeFieldType.year().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_monthOfYear() {\n+        assertEquals(DateTimeFieldType.monthOfYear(), DateTimeFieldType.monthOfYear());\n+        assertEquals(\"monthOfYear\", DateTimeFieldType.monthOfYear().getName());\n+        assertEquals(DurationFieldType.months(), DateTimeFieldType.monthOfYear().getDurationType());\n+        assertEquals(DurationFieldType.years(), DateTimeFieldType.monthOfYear().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().monthOfYear(), DateTimeFieldType.monthOfYear().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().monthOfYear().isSupported(), DateTimeFieldType.monthOfYear().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_weekyearOfCentury() {\n+        assertEquals(DateTimeFieldType.weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury());\n+        assertEquals(\"weekyearOfCentury\", DateTimeFieldType.weekyearOfCentury().getName());\n+        assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyearOfCentury().getDurationType());\n+        assertEquals(DurationFieldType.centuries(), DateTimeFieldType.weekyearOfCentury().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().weekyearOfCentury().isSupported(), DateTimeFieldType.weekyearOfCentury().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_weekyear() {\n+        assertEquals(DateTimeFieldType.weekyear(), DateTimeFieldType.weekyear());\n+        assertEquals(\"weekyear\", DateTimeFieldType.weekyear().getName());\n+        assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyear().getDurationType());\n+        assertEquals(null, DateTimeFieldType.weekyear().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().weekyear(), DateTimeFieldType.weekyear().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().weekyear().isSupported(), DateTimeFieldType.weekyear().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_weekOfWeekyear() {\n+        assertEquals(DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear());\n+        assertEquals(\"weekOfWeekyear\", DateTimeFieldType.weekOfWeekyear().getName());\n+        assertEquals(DurationFieldType.weeks(), DateTimeFieldType.weekOfWeekyear().getDurationType());\n+        assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekOfWeekyear().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().weekOfWeekyear().isSupported(), DateTimeFieldType.weekOfWeekyear().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_dayOfYear() {\n+        assertEquals(DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfYear());\n+        assertEquals(\"dayOfYear\", DateTimeFieldType.dayOfYear().getName());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfYear().getDurationType());\n+        assertEquals(DurationFieldType.years(), DateTimeFieldType.dayOfYear().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().dayOfYear(), DateTimeFieldType.dayOfYear().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().dayOfYear().isSupported(), DateTimeFieldType.dayOfYear().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_dayOfMonth() {\n+        assertEquals(DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth());\n+        assertEquals(\"dayOfMonth\", DateTimeFieldType.dayOfMonth().getName());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfMonth().getDurationType());\n+        assertEquals(DurationFieldType.months(), DateTimeFieldType.dayOfMonth().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_dayOfWeek() {\n+        assertEquals(DateTimeFieldType.dayOfWeek(), DateTimeFieldType.dayOfWeek());\n+        assertEquals(\"dayOfWeek\", DateTimeFieldType.dayOfWeek().getName());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfWeek().getDurationType());\n+        assertEquals(DurationFieldType.weeks(), DateTimeFieldType.dayOfWeek().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().dayOfWeek(), DateTimeFieldType.dayOfWeek().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().dayOfWeek().isSupported(), DateTimeFieldType.dayOfWeek().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_halfdayOfDay() {\n+        assertEquals(DateTimeFieldType.halfdayOfDay(), DateTimeFieldType.halfdayOfDay());\n+        assertEquals(\"halfdayOfDay\", DateTimeFieldType.halfdayOfDay().getName());\n+        assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.halfdayOfDay().getDurationType());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.halfdayOfDay().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().halfdayOfDay(), DateTimeFieldType.halfdayOfDay().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().halfdayOfDay().isSupported(), DateTimeFieldType.halfdayOfDay().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_clockhourOfDay() {\n+        assertEquals(DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.clockhourOfDay());\n+        assertEquals(\"clockhourOfDay\", DateTimeFieldType.clockhourOfDay().getName());\n+        assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfDay().getDurationType());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.clockhourOfDay().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().clockhourOfDay(), DateTimeFieldType.clockhourOfDay().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().clockhourOfDay().isSupported(), DateTimeFieldType.clockhourOfDay().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_clockhourOfHalfday() {\n+        assertEquals(DateTimeFieldType.clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday());\n+        assertEquals(\"clockhourOfHalfday\", DateTimeFieldType.clockhourOfHalfday().getName());\n+        assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfHalfday().getDurationType());\n+        assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.clockhourOfHalfday().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().clockhourOfHalfday().isSupported(), DateTimeFieldType.clockhourOfHalfday().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_hourOfHalfday() {\n+        assertEquals(DateTimeFieldType.hourOfHalfday(), DateTimeFieldType.hourOfHalfday());\n+        assertEquals(\"hourOfHalfday\", DateTimeFieldType.hourOfHalfday().getName());\n+        assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfHalfday().getDurationType());\n+        assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.hourOfHalfday().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().hourOfHalfday(), DateTimeFieldType.hourOfHalfday().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().hourOfHalfday().isSupported(), DateTimeFieldType.hourOfHalfday().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_hourOfDay() {\n+        assertEquals(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay());\n+        assertEquals(\"hourOfDay\", DateTimeFieldType.hourOfDay().getName());\n+        assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfDay().getDurationType());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.hourOfDay().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().hourOfDay(), DateTimeFieldType.hourOfDay().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().hourOfDay().isSupported(), DateTimeFieldType.hourOfDay().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_minuteOfDay() {\n+        assertEquals(DateTimeFieldType.minuteOfDay(), DateTimeFieldType.minuteOfDay());\n+        assertEquals(\"minuteOfDay\", DateTimeFieldType.minuteOfDay().getName());\n+        assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfDay().getDurationType());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.minuteOfDay().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().minuteOfDay(), DateTimeFieldType.minuteOfDay().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().minuteOfDay().isSupported(), DateTimeFieldType.minuteOfDay().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_minuteOfHour() {\n+        assertEquals(DateTimeFieldType.minuteOfHour(), DateTimeFieldType.minuteOfHour());\n+        assertEquals(\"minuteOfHour\", DateTimeFieldType.minuteOfHour().getName());\n+        assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfHour().getDurationType());\n+        assertEquals(DurationFieldType.hours(), DateTimeFieldType.minuteOfHour().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().minuteOfHour(), DateTimeFieldType.minuteOfHour().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().minuteOfHour().isSupported(), DateTimeFieldType.minuteOfHour().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_secondOfDay() {\n+        assertEquals(DateTimeFieldType.secondOfDay(), DateTimeFieldType.secondOfDay());\n+        assertEquals(\"secondOfDay\", DateTimeFieldType.secondOfDay().getName());\n+        assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfDay().getDurationType());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.secondOfDay().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().secondOfDay(), DateTimeFieldType.secondOfDay().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().secondOfDay().isSupported(), DateTimeFieldType.secondOfDay().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_secondOfMinute() {\n+        assertEquals(DateTimeFieldType.secondOfMinute(), DateTimeFieldType.secondOfMinute());\n+        assertEquals(\"secondOfMinute\", DateTimeFieldType.secondOfMinute().getName());\n+        assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfMinute().getDurationType());\n+        assertEquals(DurationFieldType.minutes(), DateTimeFieldType.secondOfMinute().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().secondOfMinute(), DateTimeFieldType.secondOfMinute().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().secondOfMinute().isSupported(), DateTimeFieldType.secondOfMinute().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_millisOfDay() {\n+        assertEquals(DateTimeFieldType.millisOfDay(), DateTimeFieldType.millisOfDay());\n+        assertEquals(\"millisOfDay\", DateTimeFieldType.millisOfDay().getName());\n+        assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfDay().getDurationType());\n+        assertEquals(DurationFieldType.days(), DateTimeFieldType.millisOfDay().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().millisOfDay(), DateTimeFieldType.millisOfDay().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().millisOfDay().isSupported(), DateTimeFieldType.millisOfDay().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+    public void test_millisOfSecond() {\n+        assertEquals(DateTimeFieldType.millisOfSecond(), DateTimeFieldType.millisOfSecond());\n+        assertEquals(\"millisOfSecond\", DateTimeFieldType.millisOfSecond().getName());\n+        assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfSecond().getDurationType());\n+        assertEquals(DurationFieldType.seconds(), DateTimeFieldType.millisOfSecond().getRangeDurationType());\n+        assertEquals(Chronology.getCopticUTC().millisOfSecond(), DateTimeFieldType.millisOfSecond().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().millisOfSecond().isSupported(), DateTimeFieldType.millisOfSecond().isSupported(Chronology.getCopticUTC()));\n+    }\n+\n+}", "timestamp": 1094387124, "metainfo": ""}