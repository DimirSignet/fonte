{"sha": "7db787317115fc706deb42cdc623d0b5324375d0", "log": "Add validate() to Chronology for PartialInstant   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Chronology.java\n+++ b/JodaTime/src/java/org/joda/time/Chronology.java\n  * information on the Joda project, please see <http://www.joda.org/>.\n  */\n package org.joda.time;\n+\n+import org.joda.time.partial.PartialInstant;\n \n /**\n  * Chronology provides access to the individual date time fields for a\n                            int secondOfMinute, int millisOfSecond)\n         throws IllegalArgumentException;\n \n+    /**\n+     * Validates whether the fields stored in a partial instant are valid.\n+     *\n+     * @param instant  the partial instant to validate\n+     * @throws IllegalArgumentException if the instant is invalid\n+     */\n+    void validate(PartialInstant instant);\n+\n     // Millis\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/AbstractChronology.java\n import java.io.Serializable;\n \n import org.joda.time.Chronology;\n-// Import for @link support\n-import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeZone;\n import org.joda.time.DateTimeField;\n import org.joda.time.DurationField;\n import org.joda.time.field.UnsupportedDateTimeField;\n import org.joda.time.field.UnsupportedDurationField;\n+import org.joda.time.partial.PartialInstant;\n \n /**\n  * AbstractChronology provides a skeleton implementation for chronology\n         return millisOfSecond().set(instant, millisOfSecond);\n     }\n \n+    /**\n+     * Validates whether the fields stored in a partial instant are valid.\n+     * <p>\n+     * This implementation uses {@link DateTimeField#getMinimumValue()} and\n+     * {@link DateTimeField#getMaximumValue()}.\n+     *\n+     * @param instant  the partial instant to validate\n+     * @throws IllegalArgumentException if the instant is invalid\n+     */\n+    public void validate(PartialInstant instant) {\n+        DateTimeField[] fields = instant.getFields();\n+        int[] values = instant.getValues();\n+        for (int i = 0; i < fields.length; i++) {\n+            if (values[i] < fields[i].getMinimumValue()) {\n+                throw new IllegalArgumentException(\"Value \" + values[i] +\n+                        \" for \" + fields[i].getName() + \" is less than minimum\");\n+            }\n+            if (values[i] > fields[i].getMaximumValue()) {\n+                throw new IllegalArgumentException(\"Value \" + values[i] +\n+                        \" for \" + fields[i].getName() + \" is greater than maximum\");\n+            }\n+        }\n+        for (int i = 0; i < fields.length; i++) {\n+            if (values[i] < fields[i].getMinimumValue(instant)) {\n+                throw new IllegalArgumentException(\"Value \" + values[i] +\n+                        \" for \" + fields[i].getName() + \" is less than minimum\");\n+            }\n+            if (values[i] > fields[i].getMaximumValue(instant)) {\n+                throw new IllegalArgumentException(\"Value \" + values[i] +\n+                        \" for \" + fields[i].getName() + \" is greater than maximum\");\n+            }\n+        }\n+    }\n+\n     // Millis\n     //-----------------------------------------------------------------------\n     /**\n     /**\n      * Get the day of week field for this chronology.\n      *\n-     * <p>DayOfWeek values are defined in {@link DateTimeConstants}.\n+     * <p>DayOfWeek values are defined in\n+     * {@link org.joda.time.DateTimeConstants DateTimeConstants}.\n      * They use the ISO definitions, where 1 is Monday and 7 is Sunday.\n      * \n      * @return DateTimeField or UnsupportedDateTimeField if unsupported", "timestamp": 1086001079, "metainfo": ""}