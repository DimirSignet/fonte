{"sha": "50ab1cce105af55209b83eb7709d9afc94f71958", "log": "Avoid NPE, Javadoc   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n      * @throws IllegalArgumentException if the field is null or unsupported\n      */\n     public Property property(DateTimeFieldType type) {\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"The DateTimeFieldType must not be null\");\n+        }\n         DateTimeField field = type.getField(getChronology());\n         if (field.isSupported() == false) {\n             throw new IllegalArgumentException(\"Field '\" + type + \"' is not supported\");\n      * The interval starts at midnight 00:00 and ends at 00:00 the following day,\n      * (which is not included in the interval, as intervals are half-open).\n      * \n-     * @return a YearMonthDay using the same millis and chronology\n+     * @return an interval over the day\n      */\n     public Interval toInterval() {\n         Chronology chrono = getChronology();\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n      * @throws IllegalArgumentException if the field is null or unsupported\n      */\n     public Property property(DateTimeFieldType type) {\n+        if (type == null) {\n+            throw new IllegalArgumentException(\"The DateTimeFieldType must not be null\");\n+        }\n         DateTimeField field = type.getField(getChronology());\n         if (field.isSupported() == false) {\n             throw new IllegalArgumentException(\"Field '\" + type + \"' is not supported\");\n--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java\n  * Joda Software License, Version 1.0\n  *\n  *\n- * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n  * All rights reserved.\n  *\n  * Redistribution and use in source and binary forms, with or without\n      * Converts this object to an Interval representing the whole day\n      * in the default time zone.\n      *\n-     * @return the DateMidnight instance in the default zone\n+     * @return a interval over the day\n      */\n     public Interval toInterval() {\n         return toInterval(null);\n      * Converts this object to an Interval representing the whole day.\n      *\n      * @param zone  the zone to get the Interval in, null means default\n-     * @return the DateMidnight instance\n+     * @return a interval over the day\n      */\n     public Interval toInterval(DateTimeZone zone) {\n         zone = DateTimeUtils.getZone(zone);", "timestamp": 1104710153, "metainfo": ""}