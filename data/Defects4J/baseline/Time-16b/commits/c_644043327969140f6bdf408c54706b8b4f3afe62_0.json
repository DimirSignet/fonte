{"sha": "644043327969140f6bdf408c54706b8b4f3afe62", "log": "Add Comparable to ReadablePartial interface", "commit": "\n--- a/src/main/java/org/joda/time/LocalDate.java\n+++ b/src/main/java/org/joda/time/LocalDate.java\n      * <p>\n      * The specified object must be a partial instance whose field types\n      * match those of this partial.\n-     * <p>\n-     * NOTE: This implementation violates the Comparable contract.\n-     * This method will accept any instance of ReadablePartial as input.\n-     * However, it is possible that some implementations of ReadablePartial\n-     * exist that do not extend AbstractPartial, and thus will throw a\n-     * ClassCastException if compared in the opposite direction.\n-     * The cause of this problem is that ReadablePartial doesn't define\n-     * the compareTo() method, however we can't change that until v2.0.\n      *\n      * @param partial  an object to check against\n      * @return negative if this is less, zero if equal, positive if greater\n--- a/src/main/java/org/joda/time/LocalDateTime.java\n+++ b/src/main/java/org/joda/time/LocalDateTime.java\n      * <p>\n      * The specified object must be a partial instance whose field types\n      * match those of this partial.\n-     * <p>\n-     * NOTE: This implementation violates the Comparable contract.\n-     * This method will accept any instance of ReadablePartial as input.\n-     * However, it is possible that some implementations of ReadablePartial\n-     * exist that do not extend AbstractPartial, and thus will throw a\n-     * ClassCastException if compared in the opposite direction.\n-     * The cause of this problem is that ReadablePartial doesn't define\n-     * the compareTo() method, however we can't change that until v2.0.\n      *\n      * @param partial  an object to check against\n      * @return negative if this is less, zero if equal, positive if greater\n--- a/src/main/java/org/joda/time/LocalTime.java\n+++ b/src/main/java/org/joda/time/LocalTime.java\n /*\n- *  Copyright 2001-2010 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n      * <p>\n      * The specified object must be a partial instance whose field types\n      * match those of this partial.\n-     * <p>\n-     * NOTE: This implementation violates the Comparable contract.\n-     * This method will accept any instance of ReadablePartial as input.\n-     * However, it is possible that some implementations of ReadablePartial\n-     * exist that do not extend AbstractPartial, and thus will throw a\n-     * ClassCastException if compared in the opposite direction.\n-     * The cause of this problem is that ReadablePartial doesn't define\n-     * the compareTo() method, however we can't change that until v2.0.\n      *\n      * @param partial  an object to check against\n      * @return negative if this is less, zero if equal, positive if greater\n--- a/src/main/java/org/joda/time/ReadablePartial.java\n+++ b/src/main/java/org/joda/time/ReadablePartial.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * @author Stephen Colebourne\n  * @since 1.0\n  */\n-public interface ReadablePartial {\n+public interface ReadablePartial extends Comparable<ReadablePartial> {\n \n     /**\n      * Gets the number of fields that this partial supports.\n      */\n     int hashCode();\n \n-// NOTE: This method should have existed in Joda-Time v1.0.\n-// We STRONGLY recommend that all implementations of ReadablePartial\n-// implement this method, as per AbstractPartial.\n-// The simplest way to do this is to extend AbstractPartial.\n-// v2.0 of Joda-Time will include this method in this interface.\n-//    //-----------------------------------------------------------------------\n-//    /**\n-//     * Compares this partial with another returning an integer\n-//     * indicating the order.\n-//     * <p>\n-//     * The fields are compared in order, from largest to smallest.\n-//     * The first field that is non-equal is used to determine the result.\n-//     * Thus a YearHour partial will first be compared on the year, and then\n-//     * on the hour.\n-//     * <p>\n-//     * The specified object must be a partial instance whose field types\n-//     * match those of this partial. If the parial instance has different\n-//     * fields then a ClassCastException is thrown.\n-//     *\n-//     * @param partial  an object to check against\n-//     * @return negative if this is less, zero if equal, positive if greater\n-//     * @throws ClassCastException if the partial is the wrong class\n-//     *  or if it has field types that don't match\n-//     * @throws NullPointerException if the partial is null\n-//     * @since 2.0\n-//     */\n-//    int compareTo(Object partial);\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Compares this partial with another returning an integer\n+     * indicating the order.\n+     * <p>\n+     * The fields are compared in order, from largest to smallest.\n+     * The first field that is non-equal is used to determine the result.\n+     * Thus a year-hour partial will first be compared on the year, and then\n+     * on the hour.\n+     * <p>\n+     * The specified object must be a partial instance whose field types\n+     * match those of this partial. If the partial instance has different\n+     * fields then a {@code ClassCastException} is thrown.\n+     *\n+     * @param partial  an object to check against\n+     * @return negative if this is less, zero if equal, positive if greater\n+     * @throws ClassCastException if the partial is the wrong class\n+     *  or if it has field types that don't match\n+     * @throws NullPointerException if the partial is null\n+     * @since 2.0, previously on {@code AbstractPartial}\n+     */\n+    int compareTo(ReadablePartial partial);\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/main/java/org/joda/time/base/AbstractPartial.java\n+++ b/src/main/java/org/joda/time/base/AbstractPartial.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n      * The specified object must be a partial instance whose field types\n      * match those of this partial.\n      * <p>\n-     * NOTE: This implementation violates the Comparable contract.\n-     * This method will accept any instance of ReadablePartial as input.\n-     * However, it is possible that some implementations of ReadablePartial\n-     * exist that do not extend AbstractPartial, and thus will throw a\n-     * ClassCastException if compared in the opposite direction.\n-     * The cause of this problem is that ReadablePartial doesn't define\n-     * the compareTo() method, however we can't change that until v2.0.\n+     * NOTE: Prior to v2.0, the {@code Comparable} interface was only implemented\n+     * in this class and not in the {@code ReadablePartial} interface.\n      *\n      * @param other  an object to check against\n      * @return negative if this is less, zero if equal, positive if greater\n--- a/src/test/java/org/joda/time/MockPartial.java\n+++ b/src/test/java/org/joda/time/MockPartial.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     public int[] getValues() {\n         return new int[0];\n     }\n+    public int compareTo(ReadablePartial partial) {\n+        return 0;\n+    }\n }", "timestamp": 1306014899, "metainfo": ""}