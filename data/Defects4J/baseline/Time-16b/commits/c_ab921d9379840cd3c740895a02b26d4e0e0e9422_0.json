{"sha": "ab921d9379840cd3c740895a02b26d4e0e0e9422", "log": "Change DurationField from interface to Class   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DurationField.java\n+++ b/JodaTime/src/java/org/joda/time/DurationField.java\n  * @author Brian S O'Neill\n  * @since 1.0\n  */\n-public interface DurationField extends Comparable {\n+public abstract class DurationField implements Comparable {\n \n     /**\n      * Get the name of the field, intended for debugging purposes only. By\n      * \n      * @return field name\n      */\n-    String getName();\n+    public abstract String getName();\n \n     /**\n      * Returns true if this field is supported.\n      * \n      * @return true if this field is supported\n      */\n-    boolean isSupported();\n+    public abstract boolean isSupported();\n \n     /**\n      * Is this field precise. A precise field can calculate its value from\n      * @return true if precise\n      * @see #getUnitMillis()\n      */\n-    boolean isPrecise();\n+    public abstract boolean isPrecise();\n     \n     /**\n      * Returns the amount of milliseconds per unit value of this field. For\n      * @return the unit size of this field, in milliseconds\n      * @see #isPrecise()\n      */\n-    long getUnitMillis();\n+    public abstract long getUnitMillis();\n \n     //------------------------------------------------------------------------\n     /**\n      * negative\n      * @throws ArithmeticException if the value is too large for an int\n      */\n-    int getValue(long duration);\n+    public abstract int getValue(long duration);\n \n     /**\n      * Get the value of this field from the milliseconds, which is approximate\n      * @return the value of the field, in the units of the field, which may be\n      * negative\n      */\n-    long getValueAsLong(long duration);\n+    public abstract long getValueAsLong(long duration);\n \n     /**\n      * Get the value of this field from the milliseconds relative to an\n      * negative\n      * @throws ArithmeticException if the value is too large for an int\n      */\n-    int getValue(long duration, long instant);\n+    public abstract int getValue(long duration, long instant);\n \n     /**\n      * Get the value of this field from the milliseconds relative to an\n      * @return the value of the field, in the units of the field, which may be\n      * negative\n      */\n-    long getValueAsLong(long duration, long instant);\n+    public abstract long getValueAsLong(long duration, long instant);\n \n     //------------------------------------------------------------------------\n     /**\n      * @return the milliseconds that the field represents, which may be\n      * negative\n      */\n-    long getMillis(int value);\n+    public abstract long getMillis(int value);\n \n     /**\n      * Get the millisecond duration of this field from its value, which is\n      * @return the milliseconds that the field represents, which may be\n      * negative\n      */\n-    long getMillis(long value);\n+    public abstract long getMillis(long value);\n \n     /**\n      * Get the millisecond duration of this field from its value relative to an\n      * @return the millisecond duration that the field represents, which may be\n      * negative\n      */\n-    long getMillis(int value, long instant);\n+    public abstract long getMillis(int value, long instant);\n \n     /**\n      * Get the millisecond duration of this field from its value relative to an\n      * @return the millisecond duration that the field represents, which may be\n      * negative\n      */\n-    long getMillis(long value, long instant);\n+    public abstract long getMillis(long value, long instant);\n \n     /**\n      * Adds a duration value (which may be negative) to the instant.\n      * @param value  the value to add, in the units of the field\n      * @return the updated milliseconds\n      */\n-    long add(long instant, int value);\n+    public abstract long add(long instant, int value);\n \n     /**\n      * Adds a duration value (which may be negative) to the instant.\n      * @param value  the value to add, in the units of the field\n      * @return the updated milliseconds\n      */\n-    long add(long instant, long value);\n+    public abstract long add(long instant, long value);\n \n     /**\n      * Computes the difference between two instants, as measured in the units\n      * subtract off the minuend\n      * @return the difference in the units of this field\n      */\n-    int getDifference(long minuendInstant, long subtrahendInstant);\n+    public abstract int getDifference(long minuendInstant, long subtrahendInstant);\n \n     /**\n      * Computes the difference between two instants, as measured in the units\n      * subtract off the minuend\n      * @return the difference in the units of this field\n      */\n-    long getDifferenceAsLong(long minuendInstant, long subtrahendInstant);\n+    public abstract long getDifferenceAsLong(long minuendInstant, long subtrahendInstant);\n \n     /**\n      * Compares this duration field with another duration field for ascending\n      * @throws NullPointerException if the object is null\n      * @throws ClassCastException if the object type is not supported\n      */\n-    int compareTo(Object durationField);\n+    public abstract int compareTo(Object durationField);\n \n     /**\n      * Returns a localized unit name of this field, using the given value as an\n      * \n      * @return debug string\n      */\n-    String toString();\n+    public abstract String toString();\n     \n }\n--- a/JodaTime/src/java/org/joda/time/field/AbstractDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/AbstractDurationField.java\n  * @author Brian S O'Neill\n  * @see DecoratedDurationField\n  */\n-public abstract class AbstractDurationField implements DurationField, Serializable {\n-\n-    static final long serialVersionUID = -2554245107589433218L;\n-\n-    /** A desriptive name for the field */\n+public abstract class AbstractDurationField extends DurationField implements Serializable {\n+\n+    /** Serialization lock. */\n+    private static final long serialVersionUID = -2554245107589433218L;\n+\n+    /** A desriptive name for the field. */\n     private final String iName;\n \n     protected AbstractDurationField(String name) {\n--- a/JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/DelegatedDurationField.java\n  * @author Brian S O'Neill\n  * @see DecoratedDurationField\n  */\n-public class DelegatedDurationField implements DurationField, Serializable {\n+public class DelegatedDurationField extends DurationField implements Serializable {\n \n-    static final long serialVersionUID = -5576443481242007829L;\n+    /** Serialization lock. */\n+    private static final long serialVersionUID = -5576443481242007829L;\n \n     /** The DurationField being wrapped */\n     private final DurationField iField;\n--- a/JodaTime/src/java/org/joda/time/field/MillisDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/MillisDurationField.java\n  *\n  * @author Brian S O'Neill\n  */\n-public final class MillisDurationField implements DurationField, Serializable {\n+public final class MillisDurationField extends DurationField implements Serializable {\n \n-    /** Serialization version. */\n+    /** Serialization lock. */\n     private static final long serialVersionUID = 2656707858124633367L;\n \n     /** Singleton instance. */\n--- a/JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/UnsupportedDurationField.java\n  *\n  * @author Brian S O'Neill\n  */\n-public final class UnsupportedDurationField implements DurationField, Serializable {\n-\n-    static final long serialVersionUID = -6390301302770925357L;\n+public final class UnsupportedDurationField extends DurationField implements Serializable {\n+\n+    /** Serialization lock. */\n+    private static final long serialVersionUID = -6390301302770925357L;\n \n     /**\n      * Instance with the name \"unsupported\".\n \n     //------------------------------------------------------------------------\n     /**\n+     * Compares this duration field to another.\n+     * \n+     * @param obj  the object to compare to\n+     * @return true if equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj instanceof UnsupportedDurationField) {\n+            return (((UnsupportedDurationField) obj).getName().equals(getName()));\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Gets a suitable hashcode.\n+     * \n+     * @return the hashcode\n+     */\n+    public int hashCode() {\n+        return getName().hashCode();\n+    }\n+\n+    /**\n      * Get a suitable debug string.\n      * \n      * @return debug string", "timestamp": 1089412510, "metainfo": ""}