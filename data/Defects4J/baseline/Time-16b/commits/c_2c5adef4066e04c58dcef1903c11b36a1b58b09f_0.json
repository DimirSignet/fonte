{"sha": "2c5adef4066e04c58dcef1903c11b36a1b58b09f", "log": "Add static now() methods to major classes", "commit": "\n--- a/src/main/java/org/joda/time/DateMidnight.java\n+++ b/src/main/java/org/joda/time/DateMidnight.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Obtains a {@code DateMidnight} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the default time zone.\n+     * The constructed object will have a local time of midnight.\n+     * \n+     * @return the current date, not null\n+     * @since 2.0\n+     */\n+    public static DateMidnight now() {\n+        return new DateMidnight();\n+    }\n+\n+    /**\n+     * Obtains a {@code DateMidnight} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the specified time zone.\n+     * The constructed object will have a local time of midnight.\n+     *\n+     * @param zone  the time zone, not null\n+     * @return the current date, not null\n+     * @since 2.0\n+     */\n+    public static DateMidnight now(DateTimeZone zone) {\n+        if (zone == null) {\n+            throw new NullPointerException(\"Zone must not be null\");\n+        }\n+        return new DateMidnight(zone);\n+    }\n+\n+    /**\n+     * Obtains a {@code DateMidnight} set to the current system millisecond time\n+     * using the specified chronology.\n+     * The constructed object will have a local time of midnight.\n+     *\n+     * @param chronology  the chronology, not null\n+     * @return the current date, not null\n+     * @since 2.0\n+     */\n+    public static DateMidnight now(Chronology chronology) {\n+        if (chronology == null) {\n+            throw new NullPointerException(\"Chronology must not be null\");\n+        }\n+        return new DateMidnight(chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Parses a {@code DateMidnight} from the specified string.\n      * <p>\n      * This uses {@link ISODateTimeFormat#dateTimeParser()}.\n      * Constructs an instance set to the current system millisecond time\n      * using <code>ISOChronology</code> in the default time zone.\n      * The constructed object will have a local time of midnight.\n+     * \n+     * @see #now()\n      */\n     public DateMidnight() {\n         super();\n      * If the specified time zone is null, the default zone is used.\n      *\n      * @param zone  the time zone, null means default zone\n+     * @see #now(DateTimeZone)\n      */\n     public DateMidnight(DateTimeZone zone) {\n         super(zone);\n      * in the default time zone is used.\n      *\n      * @param chronology  the chronology, null means ISOChronology in default zone\n+     * @see #now(Chronology)\n      */\n     public DateMidnight(Chronology chronology) {\n         super(chronology);\n--- a/src/main/java/org/joda/time/DateTime.java\n+++ b/src/main/java/org/joda/time/DateTime.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Obtains a {@code DateTime} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the default time zone.\n+     * \n+     * @return the current date-time, not null\n+     * @since 2.0\n+     */\n+    public static DateTime now() {\n+        return new DateTime();\n+    }\n+\n+    /**\n+     * Obtains a {@code DateTime} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the specified time zone.\n+     *\n+     * @param zone  the time zone, not null\n+     * @return the current date-time, not null\n+     * @since 2.0\n+     */\n+    public static DateTime now(DateTimeZone zone) {\n+        if (zone == null) {\n+            throw new NullPointerException(\"Zone must not be null\");\n+        }\n+        return new DateTime(zone);\n+    }\n+\n+    /**\n+     * Obtains a {@code DateTime} set to the current system millisecond time\n+     * using the specified chronology.\n+     *\n+     * @param chronology  the chronology, not null\n+     * @return the current date-time, not null\n+     * @since 2.0\n+     */\n+    public static DateTime now(Chronology chronology) {\n+        if (chronology == null) {\n+            throw new NullPointerException(\"Chronology must not be null\");\n+        }\n+        return new DateTime(chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Parses a {@code DateTime} from the specified string.\n      * <p>\n      * This uses {@link ISODateTimeFormat#dateTimeParser()}.\n     /**\n      * Constructs an instance set to the current system millisecond time\n      * using <code>ISOChronology</code> in the default time zone.\n+     * \n+     * @see #now()\n      */\n     public DateTime() {\n         super();\n      * If the specified time zone is null, the default zone is used.\n      *\n      * @param zone  the time zone, null means default zone\n+     * @see #now(DateTimeZone)\n      */\n     public DateTime(DateTimeZone zone) {\n         super(zone);\n      * in the default time zone is used.\n      *\n      * @param chronology  the chronology, null means ISOChronology in default zone\n+     * @see #now(Chronology)\n      */\n     public DateTime(Chronology chronology) {\n         super(chronology);\n--- a/src/main/java/org/joda/time/Instant.java\n+++ b/src/main/java/org/joda/time/Instant.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Obtains an {@code Instant} set to the current system millisecond time.\n+     * \n+     * @return the current instant, not null\n+     * @since 2.0\n+     */\n+    public static Instant now() {\n+        return new Instant();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Parses a {@code Instant} from the specified string.\n      * <p>\n      * This uses {@link ISODateTimeFormat#dateTimeParser()}.\n     //-----------------------------------------------------------------------\n     /**\n      * Constructs an instance set to the current system millisecond time.\n+     * \n+     * @see #now()\n      */\n     public Instant() {\n         super();\n--- a/src/main/java/org/joda/time/LocalDate.java\n+++ b/src/main/java/org/joda/time/LocalDate.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Obtains a {@code LocalDate} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the default time zone.\n+     * \n+     * @return the current date-time, not null\n+     * @since 2.0\n+     */\n+    public static LocalDate now() {\n+        return new LocalDate();\n+    }\n+\n+    /**\n+     * Obtains a {@code LocalDate} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the specified time zone.\n+     *\n+     * @param zone  the time zone, not null\n+     * @return the current date-time, not null\n+     * @since 2.0\n+     */\n+    public static LocalDate now(DateTimeZone zone) {\n+        if (zone == null) {\n+            throw new NullPointerException(\"Zone must not be null\");\n+        }\n+        return new LocalDate(zone);\n+    }\n+\n+    /**\n+     * Obtains a {@code LocalDate} set to the current system millisecond time\n+     * using the specified chronology.\n+     *\n+     * @param chronology  the chronology, not null\n+     * @return the current date-time, not null\n+     * @since 2.0\n+     */\n+    public static LocalDate now(Chronology chronology) {\n+        if (chronology == null) {\n+            throw new NullPointerException(\"Chronology must not be null\");\n+        }\n+        return new LocalDate(chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Parses a {@code LocalDate} from the specified string.\n      * <p>\n      * This uses {@link ISODateTimeFormat#localDateParser()}.\n      * ISO chronology in the default zone.\n      * <p>\n      * Once the constructor is completed, the zone is no longer used.\n+     * \n+     * @see #now()\n      */\n     public LocalDate() {\n         this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());\n      * Once the constructor is completed, the zone is no longer used.\n      *\n      * @param zone  the time zone, null means default zone\n+     * @see #now(DateTimeZone)\n      */\n     public LocalDate(DateTimeZone zone) {\n         this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));\n      * Once the constructor is completed, the zone is no longer used.\n      *\n      * @param chronology  the chronology, null means ISOChronology in default zone\n+     * @see #now(Chronology)\n      */\n     public LocalDate(Chronology chronology) {\n         this(DateTimeUtils.currentTimeMillis(), chronology);\n--- a/src/main/java/org/joda/time/LocalDateTime.java\n+++ b/src/main/java/org/joda/time/LocalDateTime.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Obtains a {@code LocalDateTime} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the default time zone.\n+     * The resulting object does not use the zone.\n+     * \n+     * @return the current date, not null\n+     * @since 2.0\n+     */\n+    public static LocalDateTime now() {\n+        return new LocalDateTime();\n+    }\n+\n+    /**\n+     * Obtains a {@code LocalDateTime} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the specified time zone.\n+     * The resulting object does not use the zone.\n+     *\n+     * @param zone  the time zone, not null\n+     * @return the current date, not null\n+     * @since 2.0\n+     */\n+    public static LocalDateTime now(DateTimeZone zone) {\n+        if (zone == null) {\n+            throw new NullPointerException(\"Zone must not be null\");\n+        }\n+        return new LocalDateTime(zone);\n+    }\n+\n+    /**\n+     * Obtains a {@code LocalDateTime} set to the current system millisecond time\n+     * using the specified chronology.\n+     * The resulting object does not use the zone.\n+     *\n+     * @param chronology  the chronology, not null\n+     * @return the current date, not null\n+     * @since 2.0\n+     */\n+    public static LocalDateTime now(Chronology chronology) {\n+        if (chronology == null) {\n+            throw new NullPointerException(\"Chronology must not be null\");\n+        }\n+        return new LocalDateTime(chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Parses a {@code LocalDateTime} from the specified string.\n      * <p>\n      * This uses {@link ISODateTimeFormat#localDateOptionalTimeParser()}.\n      * ISO chronology in the default zone.\n      * <p>\n      * Once the constructor is completed, the zone is no longer used.\n+     * \n+     * @see #now()\n      */\n     public LocalDateTime() {\n         this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());\n      * Once the constructor is completed, the zone is no longer used.\n      *\n      * @param zone  the time zone, null means default zone\n+     * @see #now(DateTimeZone)\n      */\n     public LocalDateTime(DateTimeZone zone) {\n         this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));\n      * Once the constructor is completed, the zone is no longer used.\n      *\n      * @param chronology  the chronology, null means ISOChronology in default zone\n+     * @see #now(Chronology)\n      */\n     public LocalDateTime(Chronology chronology) {\n         this(DateTimeUtils.currentTimeMillis(), chronology);\n--- a/src/main/java/org/joda/time/LocalTime.java\n+++ b/src/main/java/org/joda/time/LocalTime.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Obtains a {@code LocalTime} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the default time zone.\n+     * The resulting object does not use the zone.\n+     * \n+     * @return the current time, not null\n+     * @since 2.0\n+     */\n+    public static LocalTime now() {\n+        return new LocalTime();\n+    }\n+\n+    /**\n+     * Obtains a {@code LocalTime} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the specified time zone.\n+     * The resulting object does not use the zone.\n+     *\n+     * @param zone  the time zone, not null\n+     * @return the current time, not null\n+     * @since 2.0\n+     */\n+    public static LocalTime now(DateTimeZone zone) {\n+        if (zone == null) {\n+            throw new NullPointerException(\"Zone must not be null\");\n+        }\n+        return new LocalTime(zone);\n+    }\n+\n+    /**\n+     * Obtains a {@code LocalTime} set to the current system millisecond time\n+     * using the specified chronology.\n+     * The resulting object does not use the zone.\n+     *\n+     * @param chronology  the chronology, not null\n+     * @return the current time, not null\n+     * @since 2.0\n+     */\n+    public static LocalTime now(Chronology chronology) {\n+        if (chronology == null) {\n+            throw new NullPointerException(\"Chronology must not be null\");\n+        }\n+        return new LocalTime(chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Parses a {@code LocalTime} from the specified string.\n      * <p>\n      * This uses {@link ISODateTimeFormat#localTimeParser()}.\n      * ISO chronology in the default zone.\n      * <p>\n      * Once the constructor is completed, the zone is no longer used.\n+     * \n+     * @see #now()\n      */\n     public LocalTime() {\n         this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance());\n      * Once the constructor is completed, the zone is no longer used.\n      *\n      * @param zone  the time zone, null means default zone\n+     * @see #now(DateTimeZone)\n      */\n     public LocalTime(DateTimeZone zone) {\n         this(DateTimeUtils.currentTimeMillis(), ISOChronology.getInstance(zone));\n      * Once the constructor is completed, the zone is no longer used.\n      *\n      * @param chronology  the chronology, null means ISOChronology in default zone\n+     * @see #now(Chronology)\n      */\n     public LocalTime(Chronology chronology) {\n         this(DateTimeUtils.currentTimeMillis(), chronology);\n--- a/src/main/java/org/joda/time/MonthDay.java\n+++ b/src/main/java/org/joda/time/MonthDay.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Obtains a {@code MonthDay} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the default time zone.\n+     * The resulting object does not use the zone.\n+     * \n+     * @return the current month-day, not null\n+     * @since 2.0\n+     */\n+    public static MonthDay now() {\n+        return new MonthDay();\n+    }\n+\n+    /**\n+     * Obtains a {@code MonthDay} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the specified time zone.\n+     * The resulting object does not use the zone.\n+     *\n+     * @param zone  the time zone, not null\n+     * @return the current month-day, not null\n+     * @since 2.0\n+     */\n+    public static MonthDay now(DateTimeZone zone) {\n+        if (zone == null) {\n+            throw new NullPointerException(\"Zone must not be null\");\n+        }\n+        return new MonthDay(zone);\n+    }\n+\n+    /**\n+     * Obtains a {@code MonthDay} set to the current system millisecond time\n+     * using the specified chronology.\n+     * The resulting object does not use the zone.\n+     *\n+     * @param chronology  the chronology, not null\n+     * @return the current month-day, not null\n+     * @since 2.0\n+     */\n+    public static MonthDay now(Chronology chronology) {\n+        if (chronology == null) {\n+            throw new NullPointerException(\"Chronology must not be null\");\n+        }\n+        return new MonthDay(chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Parses a {@code MonthDay} from the specified string.\n      * <p>\n      * This uses {@link ISODateTimeFormat#localDateParser()} or the format {@code --MM-dd}.\n      * The constructor uses the default time zone, resulting in the local time\n      * being initialised. Once the constructor is complete, all further calculations\n      * are performed without reference to a time-zone (by switching to UTC).\n+     * \n+     * @see #now()\n      */\n     public MonthDay() {\n         super();\n      * are performed without reference to a time-zone (by switching to UTC).\n      * \n      * @param zone  the zone to use, null means default zone\n+     * @see #now(DateTimeZone)\n      */\n     public MonthDay(DateTimeZone zone) {\n         super(ISOChronology.getInstance(zone));\n      * without reference to a time-zone (by switching to UTC).\n      *\n      * @param chronology  the chronology, null means ISOChronology in the default zone\n+     * @see #now(Chronology)\n      */\n     public MonthDay(Chronology chronology) {\n         super(chronology);\n--- a/src/main/java/org/joda/time/MutableDateTime.java\n+++ b/src/main/java/org/joda/time/MutableDateTime.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Obtains a {@code MutableDateTime} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the default time zone.\n+     * \n+     * @return the current date-time, not null\n+     * @since 2.0\n+     */\n+    public static MutableDateTime now() {\n+        return new MutableDateTime();\n+    }\n+\n+    /**\n+     * Obtains a {@code MutableDateTime} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the specified time zone.\n+     *\n+     * @param zone  the time zone, not null\n+     * @return the current date-time, not null\n+     * @since 2.0\n+     */\n+    public static MutableDateTime now(DateTimeZone zone) {\n+        if (zone == null) {\n+            throw new NullPointerException(\"Zone must not be null\");\n+        }\n+        return new MutableDateTime(zone);\n+    }\n+\n+    /**\n+     * Obtains a {@code MutableDateTime} set to the current system millisecond time\n+     * using the specified chronology.\n+     *\n+     * @param chronology  the chronology, not null\n+     * @return the current date-time, not null\n+     * @since 2.0\n+     */\n+    public static MutableDateTime now(Chronology chronology) {\n+        if (chronology == null) {\n+            throw new NullPointerException(\"Chronology must not be null\");\n+        }\n+        return new MutableDateTime(chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Parses a {@code MutableDateTime} from the specified string.\n      * <p>\n      * This uses {@link ISODateTimeFormat#dateTimeParser()}.\n     /**\n      * Constructs an instance set to the current system millisecond time\n      * using <code>ISOChronology</code> in the default time zone.\n+     * \n+     * @see #now()\n      */\n     public MutableDateTime() {\n         super();\n      * If the specified time zone is null, the default zone is used.\n      *\n      * @param zone  the time zone, null means default zone\n+     * @see #now(DateTimeZone)\n      */\n     public MutableDateTime(DateTimeZone zone) {\n         super(zone);\n      * in the default time zone is used.\n      *\n      * @param chronology  the chronology, null means ISOChronology in default zone\n+     * @see #now(Chronology)\n      */\n     public MutableDateTime(Chronology chronology) {\n         super(chronology);\n--- a/src/main/java/org/joda/time/YearMonth.java\n+++ b/src/main/java/org/joda/time/YearMonth.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Obtains a {@code YearMonth} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the default time zone.\n+     * The resulting object does not use the zone.\n+     * \n+     * @return the current year-month, not null\n+     * @since 2.0\n+     */\n+    public static YearMonth now() {\n+        return new YearMonth();\n+    }\n+\n+    /**\n+     * Obtains a {@code YearMonth} set to the current system millisecond time\n+     * using <code>ISOChronology</code> in the specified time zone.\n+     * The resulting object does not use the zone.\n+     *\n+     * @param zone  the time zone, not null\n+     * @return the current year-month, not null\n+     * @since 2.0\n+     */\n+    public static YearMonth now(DateTimeZone zone) {\n+        if (zone == null) {\n+            throw new NullPointerException(\"Zone must not be null\");\n+        }\n+        return new YearMonth(zone);\n+    }\n+\n+    /**\n+     * Obtains a {@code YearMonth} set to the current system millisecond time\n+     * using the specified chronology.\n+     * The resulting object does not use the zone.\n+     *\n+     * @param chronology  the chronology, not null\n+     * @return the current year-month, not null\n+     * @since 2.0\n+     */\n+    public static YearMonth now(Chronology chronology) {\n+        if (chronology == null) {\n+            throw new NullPointerException(\"Chronology must not be null\");\n+        }\n+        return new YearMonth(chronology);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Parses a {@code YearMonth} from the specified string.\n      * <p>\n      * This uses {@link ISODateTimeFormat#localDateParser()}.\n      * The constructor uses the default time zone, resulting in the local time\n      * being initialised. Once the constructor is complete, all further calculations\n      * are performed without reference to a time-zone (by switching to UTC).\n+     * \n+     * @see #now()\n      */\n     public YearMonth() {\n         super();\n      * are performed without reference to a time-zone (by switching to UTC).\n      * \n      * @param zone  the zone to use, null means default zone\n+     * @see #now(DateTimeZone)\n      */\n     public YearMonth(DateTimeZone zone) {\n         super(ISOChronology.getInstance(zone));\n      * without reference to a time-zone (by switching to UTC).\n      *\n      * @param chronology  the chronology, null means ISOChronology in the default zone\n+     * @see #now(Chronology)\n      */\n     public YearMonth(Chronology chronology) {\n         super(chronology);\n--- a/src/test/java/org/joda/time/TestDateMidnight_Constructors.java\n+++ b/src/test/java/org/joda/time/TestDateMidnight_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * Test now ()\n+     */\n+    public void test_now() throws Throwable {\n+        DateMidnight test = DateMidnight.now();\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    /**\n+     * Test now (DateTimeZone)\n+     */\n+    public void test_now_DateTimeZone() throws Throwable {\n+        DateMidnight test = DateMidnight.now(PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_PARIS, test.getMillis());\n+    }\n+\n+    /**\n+     * Test now (DateTimeZone=null)\n+     */\n+    public void test_now_nullDateTimeZone() throws Throwable {\n+        try {\n+            DateMidnight.now((DateTimeZone) null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    /**\n+     * Test now (Chronology)\n+     */\n+    public void test_now_Chronology() throws Throwable {\n+        DateMidnight test = DateMidnight.now(GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW_LONDON, test.getMillis());\n+    }\n+\n+    /**\n+     * Test now (Chronology=null)\n+     */\n+    public void test_now_nullChronology() throws Throwable {\n+        try {\n+            DateMidnight.now((Chronology) null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testParse_noFormatter() throws Throwable {\n         assertEquals(new DateMidnight(2010, 6, 30, ISOChronology.getInstance(LONDON)), DateMidnight.parse(\"2010-06-30\"));\n         assertEquals(new DateMidnight(2010, 1, 2, ISOChronology.getInstance(LONDON)), DateMidnight.parse(\"2010-002\"));\n--- a/src/test/java/org/joda/time/TestDateTime_Constructors.java\n+++ b/src/test/java/org/joda/time/TestDateTime_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * Test now ()\n+     */\n+    public void test_now() throws Throwable {\n+        DateTime test = DateTime.now();\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test now (DateTimeZone)\n+     */\n+    public void test_now_DateTimeZone() throws Throwable {\n+        DateTime test = DateTime.now(PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test now (DateTimeZone=null)\n+     */\n+    public void test_now_nullDateTimeZone() throws Throwable {\n+        try {\n+            DateTime.now((DateTimeZone) null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    /**\n+     * Test now (Chronology)\n+     */\n+    public void test_now_Chronology() throws Throwable {\n+        DateTime test = DateTime.now(GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test now (Chronology=null)\n+     */\n+    public void test_now_nullChronology() throws Throwable {\n+        try {\n+            DateTime.now((Chronology) null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testParse_noFormatter() throws Throwable {\n         assertEquals(new DateTime(2010, 6, 30, 1, 20, ISOChronology.getInstance(DateTimeZone.forOffsetHours(2))), DateTime.parse(\"2010-06-30T01:20+02:00\"));\n         assertEquals(new DateTime(2010, 1, 2, 14, 50, ISOChronology.getInstance(LONDON)), DateTime.parse(\"2010-002T14:50\"));\n--- a/src/test/java/org/joda/time/TestInstant_Constructors.java\n+++ b/src/test/java/org/joda/time/TestInstant_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * Test now ()\n+     */\n+    public void test_now() throws Throwable {\n+        Instant test = Instant.now();\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testParse_noFormatter() throws Throwable {\n         assertEquals(new DateTime(2010, 6, 30, 0, 20, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse(\"2010-06-30T01:20+02:00\"));\n         assertEquals(new DateTime(2010, 1, 2, 14, 50, ISOChronology.getInstance(LONDON)).toInstant(), Instant.parse(\"2010-002T14:50\"));\n--- a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java\n+++ b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n+        assertEquals(test, LocalDateTime.now());\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(59, test.getMinuteOfHour());\n         assertEquals(0, test.getSecondOfMinute());\n         assertEquals(0, test.getMillisOfSecond());\n+        assertEquals(test, LocalDateTime.now(LONDON));\n         \n         test = new LocalDateTime(PARIS);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(59, test.getMinuteOfHour());\n         assertEquals(0, test.getSecondOfMinute());\n         assertEquals(0, test.getMillisOfSecond());\n+        assertEquals(test, LocalDateTime.now(PARIS));\n     }\n \n     public void testConstructor_nullDateTimeZone() throws Throwable {\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n+        assertEquals(test, LocalDateTime.now(GREGORIAN_PARIS));\n     }\n \n     public void testConstructor_nullChronology() throws Throwable {\n--- a/src/test/java/org/joda/time/TestLocalDate_Constructors.java\n+++ b/src/test/java/org/joda/time/TestLocalDate_Constructors.java\n         assertEquals(1970, test.getYear());\n         assertEquals(6, test.getMonthOfYear());\n         assertEquals(9, test.getDayOfMonth());\n+        assertEquals(test, LocalDate.now());\n     }\n \n     public void testConstructor_DateTimeZone() throws Throwable {\n         assertEquals(2005, test.getYear());\n         assertEquals(6, test.getMonthOfYear());\n         assertEquals(8, test.getDayOfMonth());\n+        assertEquals(test, LocalDate.now(LONDON));\n         \n         test = new LocalDate(PARIS);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(2005, test.getYear());\n         assertEquals(6, test.getMonthOfYear());\n         assertEquals(9, test.getDayOfMonth());\n+        assertEquals(test, LocalDate.now(PARIS));\n     }\n \n     public void testConstructor_nullDateTimeZone() throws Throwable {\n         assertEquals(1970, test.getYear());\n         assertEquals(6, test.getMonthOfYear());\n         assertEquals(9, test.getDayOfMonth());\n+        assertEquals(test, LocalDate.now(GREGORIAN_PARIS));\n     }\n \n     public void testConstructor_nullChronology() throws Throwable {\n--- a/src/test/java/org/joda/time/TestLocalTime_Constructors.java\n+++ b/src/test/java/org/joda/time/TestLocalTime_Constructors.java\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n+        assertEquals(test, LocalTime.now());\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(59, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n+        assertEquals(test, LocalTime.now(LONDON));\n         \n         test = new LocalTime(PARIS);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(59, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n+        assertEquals(test, LocalTime.now(PARIS));\n     }\n \n     public void testConstructor_nullDateTimeZone() throws Throwable {\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n+        assertEquals(test, LocalTime.now(JULIAN_LONDON));\n     }\n \n     public void testConstructor_nullChronology() throws Throwable {\n--- a/src/test/java/org/joda/time/TestMonthDay_Constructors.java\n+++ b/src/test/java/org/joda/time/TestMonthDay_Constructors.java\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(6, test.getMonthOfYear());\n         assertEquals(9, test.getDayOfMonth());\n+        assertEquals(test, MonthDay.now());\n     }\n \n     /**\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(6, test.getMonthOfYear());\n         assertEquals(30, test.getDayOfMonth());\n+        assertEquals(test, MonthDay.now(LONDON));\n         \n         test = new MonthDay(PARIS);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(7, test.getMonthOfYear());\n         assertEquals(1, test.getDayOfMonth());\n+        assertEquals(test, MonthDay.now(PARIS));\n     }\n \n     /**\n         assertEquals(GREGORIAN_UTC, test.getChronology());\n         assertEquals(6, test.getMonthOfYear());\n         assertEquals(9, test.getDayOfMonth());\n+        assertEquals(test, MonthDay.now(GREGORIAN_PARIS));\n     }\n \n     /**\n--- a/src/test/java/org/joda/time/TestMutableDateTime_Constructors.java\n+++ b/src/test/java/org/joda/time/TestMutableDateTime_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * Test now ()\n+     */\n+    public void test_now() throws Throwable {\n+        MutableDateTime test = MutableDateTime.now();\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test now (DateTimeZone)\n+     */\n+    public void test_now_DateTimeZone() throws Throwable {\n+        MutableDateTime test = MutableDateTime.now(PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test now (DateTimeZone=null)\n+     */\n+    public void test_now_nullDateTimeZone() throws Throwable {\n+        try {\n+            MutableDateTime.now((DateTimeZone) null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    /**\n+     * Test now (Chronology)\n+     */\n+    public void test_now_Chronology() throws Throwable {\n+        MutableDateTime test = MutableDateTime.now(GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test now (Chronology=null)\n+     */\n+    public void test_now_nullChronology() throws Throwable {\n+        try {\n+            MutableDateTime.now((Chronology) null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testParse_noFormatter() throws Throwable {\n         assertEquals(new MutableDateTime(2010, 6, 30, 1, 20, 0, 0, ISOChronology.getInstance(DateTimeZone.forOffsetHours(2))), MutableDateTime.parse(\"2010-06-30T01:20+02:00\"));\n         assertEquals(new MutableDateTime(2010, 1, 2, 14, 50, 0, 0, ISOChronology.getInstance(LONDON)), MutableDateTime.parse(\"2010-002T14:50\"));\n--- a/src/test/java/org/joda/time/TestYearMonth_Constructors.java\n+++ b/src/test/java/org/joda/time/TestYearMonth_Constructors.java\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(1970, test.getYear());\n         assertEquals(6, test.getMonthOfYear());\n+        assertEquals(test, YearMonth.now());\n     }\n \n     /**\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(2005, test.getYear());\n         assertEquals(6, test.getMonthOfYear());\n+        assertEquals(test, YearMonth.now(LONDON));\n         \n         test = new YearMonth(PARIS);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(2005, test.getYear());\n         assertEquals(7, test.getMonthOfYear());\n+        assertEquals(test, YearMonth.now(PARIS));\n     }\n \n     /**\n         assertEquals(GREGORIAN_UTC, test.getChronology());\n         assertEquals(1970, test.getYear());\n         assertEquals(6, test.getMonthOfYear());\n+        assertEquals(test, YearMonth.now(GREGORIAN_PARIS));\n     }\n \n     /**", "timestamp": 1312047682, "metainfo": ""}