{"sha": "12c05dd8bccbefa84472abb08c10feca97a07bb8", "log": "Refactor AbstractDuration to remove instance variable   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDuration.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDuration.java\n  */\n package org.joda.time;\n \n-import java.io.Serializable;\n-\n-import org.joda.time.convert.ConverterManager;\n-import org.joda.time.convert.DurationConverter;\n-import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISOPeriodFormat;\n \n /**\n  * @author Stephen Colebourne\n  * @since 1.0\n  */\n-public abstract class AbstractDuration\n-        implements ReadableDuration, Serializable {\n-\n-    /** Serialization version */\n-    private static final long serialVersionUID = 358732693691287348L;\n-\n-    /** The duration length */\n-    private long iMillis;\n-\n-    /**\n-     * Creates a duration from the given millisecond duration.\n-     *\n-     * @param duration  the duration, in milliseconds\n-     */\n-    public AbstractDuration(long duration) {\n+public abstract class AbstractDuration implements ReadableDuration {\n+\n+    /**\n+     * Constructor.\n+     */\n+    public AbstractDuration() {\n         super();\n-        iMillis = duration;\n-    }\n-\n-    /**\n-     * Creates a duration from the given interval endpoints.\n-     *\n-     * @param startInstant  interval start, null means now\n-     * @param endInstant  interval end, null means now\n-     * @throws ArithmeticException if the duration exceeds a 64 bit long\n-     */\n-    public AbstractDuration(long startInstant, long  endInstant) {\n-        super();\n-        iMillis = FieldUtils.safeAdd(endInstant, -startInstant);\n-    }\n-\n-    /**\n-     * Creates a duration from the given interval endpoints.\n-     *\n-     * @param startInstant  interval start, null means now\n-     * @param endInstant  interval end, null means now\n-     * @throws ArithmeticException if the duration exceeds a 64 bit long\n-     */\n-    public AbstractDuration(ReadableInstant startInstant, ReadableInstant  endInstant) {\n-        super();\n-        if (startInstant == endInstant) {\n-            iMillis = 0L;\n-        } else {\n-            long start = (startInstant == null ? DateTimeUtils.currentTimeMillis() : startInstant.getMillis());\n-            long end = (endInstant == null ? DateTimeUtils.currentTimeMillis() : endInstant.getMillis());\n-            iMillis = FieldUtils.safeAdd(end, -start);\n-        }\n-    }\n-\n-    /**\n-     * Creates a new duration based on another using the {@link ConverterManager}.\n-     *\n-     * @param duration  duration to convert\n-     * @throws IllegalArgumentException if duration is invalid\n-     */\n-    public AbstractDuration(Object duration) {\n-        super();\n-        DurationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);\n-        iMillis = converter.getDurationMillis(duration);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Gets the total length of this duration in milliseconds.\n-     *\n-     * @return the total length of the duration in milliseconds.\n-     */\n-    public final long getMillis() {\n-        return iMillis;\n     }\n \n     //-----------------------------------------------------------------------\n      * Compares this object with the specified object for equality based\n      * on the millisecond length. All ReadableDuration instances are accepted.\n      *\n-     * @param readableDuration  a readable duration to check against\n+     * @param duration  a readable duration to check against\n      * @return true if the length of the duration is equal\n      */\n-    public final boolean equals(Object readableDuration) {\n-        if (this == readableDuration) {\n+    public final boolean equals(Object duration) {\n+        if (this == duration) {\n             return true;\n         }\n-        if (readableDuration instanceof ReadableDuration == false) {\n+        if (duration instanceof ReadableDuration == false) {\n             return false;\n         }\n-        ReadableDuration other = (ReadableDuration) readableDuration;\n+        ReadableDuration other = (ReadableDuration) duration;\n         return (getMillis() == other.getMillis());\n     }\n \n      *\n      * @return the value as an ISO8601 string\n      */\n-    public String toString() {\n+    public final String toString() {\n         return ISOPeriodFormat.getInstance().standard().print(toPeriod());\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Sets all the fields in one go from another ReadableDuration.\n-     * \n-     * @param duration  the duration to set, null means zero length duration\n-     * @throws IllegalArgumentException if an unsupported field's value is non-zero\n-     */\n-    protected void setDuration(ReadableDuration duration) {\n-        if (duration == null) {\n-            setMillis(0L);\n-        } else {\n-            setMillis(duration.getMillis());\n-        }\n-    }\n-\n-    /**\n-     * Sets all the fields in one go from a millisecond duration.\n-     * <p>\n-     * Subclasses that wish to be immutable should override this method with an\n-     * empty implementation that is protected and final. This also ensures that\n-     * all lower subclasses are also immutable.\n-     * \n-     * @param length  duration length, in milliseconds\n-     */\n-    protected void setMillis(long length) {\n-        iMillis = length;\n-    }\n-\n }\n--- a/JodaTime/src/java/org/joda/time/Duration.java\n+++ b/JodaTime/src/java/org/joda/time/Duration.java\n \n import java.io.Serializable;\n \n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.DurationConverter;\n+import org.joda.time.field.FieldUtils;\n+\n /**\n  * An immutable duration specifying a length of time in milliseconds.\n  * <p>\n     /** Serialization version */\n     private static final long serialVersionUID = 2471658376918L;\n \n+    /** The duration length */\n+    private final long iMillis;\n+\n     /**\n      * Creates a duration from the given millisecond duration.\n      *\n      * @param duration  the duration, in milliseconds\n      */\n     public Duration(long duration) {\n-        super(duration);\n+        super();\n+        iMillis = duration;\n     }\n \n     /**\n      * @throws ArithmeticException if the duration exceeds a 64 bit long\n      */\n     public Duration(long startInstant, long endInstant) {\n-        super(startInstant, endInstant);\n+        super();\n+        iMillis = FieldUtils.safeAdd(endInstant, -startInstant);\n     }\n \n     /**\n      * Creates a duration from the given interval endpoints.\n      *\n-     * @param startInstant  interval start, null means now\n-     * @param endInstant  interval end, null means now\n+     * @param start  interval start, null means now\n+     * @param end  interval end, null means now\n      * @throws ArithmeticException if the duration exceeds a 64 bit long\n      */\n-    public Duration(ReadableInstant startInstant, ReadableInstant endInstant) {\n-        super(startInstant, endInstant);\n+    public Duration(ReadableInstant start, ReadableInstant end) {\n+        super();\n+        if (start == end) {\n+            iMillis = 0L;\n+        } else {\n+            long startMillis = DateTimeUtils.getInstantMillis(start);\n+            long endMillis = DateTimeUtils.getInstantMillis(end);\n+            iMillis = FieldUtils.safeAdd(endMillis, -startMillis);\n+        }\n     }\n \n     /**\n      * @throws IllegalArgumentException if duration is invalid\n      */\n     public Duration(Object duration) {\n-        super(duration);\n+        super();\n+        DurationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);\n+        iMillis = converter.getDurationMillis(duration);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the total length of this duration in milliseconds.\n+     *\n+     * @return the total length of the duration in milliseconds.\n+     */\n+    public final long getMillis() {\n+        return iMillis;\n     }\n \n     //-----------------------------------------------------------------------\n      * @param duration  the new length of the duration\n      * @return the new duration instance\n      */\n-    public Duration withMillis(long duration) {\n+    public final Duration withMillis(long duration) {\n         if (duration == getMillis()) {\n             return this;\n         }\n         return new Duration(duration);\n     }\n \n-    //-----------------------------------------------------------------------\n     /**\n-     * Overridden to do nothing, ensuring this class and all subclasses are immutable.\n+     * Adds to this duration returning a new Duration instance.\n+     * <p>\n+     * If the addition is zero, this instance is returned.\n+     * \n+     * @param durationToAdd  the duration to add to this one\n+     * @return the new duration instance\n      */\n-    protected final void setMillis(long duration) {\n+    public final Duration withDurationAdded(long durationToAdd) {\n+        return withDurationAdded(durationToAdd, 1);\n+    }\n+\n+    /**\n+     * Adds to this duration returning a new Duration instance.\n+     * <p>\n+     * If the addition is zero, this instance is returned.\n+     * \n+     * @param durationToAdd  the duration to add to this one\n+     * @param scalar  the amount of times to add, such as -1 to subtract once\n+     * @return the new duration instance\n+     */\n+    public final Duration withDurationAdded(long durationToAdd, int scalar) {\n+        if (durationToAdd == 0 || scalar == 0) {\n+            return this;\n+        }\n+        long add = FieldUtils.safeMultiply(durationToAdd, scalar);\n+        long duration = FieldUtils.safeAdd(getMillis(), add);\n+        return new Duration(duration);\n     }\n \n }\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n     }\n     \n     class MockDuration extends AbstractDuration {\n+        private final long iValue;\n         public MockDuration(long value) {\n-            super(value);\n+            super();\n+            iValue = value;\n+        }\n+        public long getMillis() {\n+            return iValue;\n         }\n     }\n \n     }\n \n     //-----------------------------------------------------------------------\n-    public void testImmutable() {\n-        MockChangeDuration test = new MockChangeDuration(111L);\n-        test.testSetDuration_RD_1();\n-        assertEquals(111L, test.getMillis());\n-        \n-        test = new MockChangeDuration(111L);\n-        test.testSetDuration_RD_2();\n-        assertEquals(111L, test.getMillis());\n-        \n-        test = new MockChangeDuration(111L);\n-        test.testSetMillis();\n-        assertEquals(111L, test.getMillis());\n-    }\n-    \n-    static class MockChangeDuration extends Duration {\n-        MockChangeDuration(long duration) {\n-            super(duration);\n-        }\n-        public void testSetDuration_RD_1() {\n-            setDuration(null);\n-        }\n-        public void testSetDuration_RD_2() {\n-            setDuration(new Duration(0L));\n-        }\n-        public void testSetMillis() {\n-            setMillis(0L);\n-        }\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testMutable() {\n-        // No MutableDuration class, so this tests relevant methods in AbstractDuration\n-        MockMutableDuration mutable = new MockMutableDuration(111L);\n-        assertEquals(111L, mutable.getMillis());\n-        \n-        mutable.setMillis(1234L);\n-        assertEquals(1234L, mutable.getMillis());\n-        \n-        mutable.setDuration(null);\n-        assertEquals(0L, mutable.getMillis());\n-        \n-        mutable.setDuration(new Duration(123L));\n-        assertEquals(123L, mutable.getMillis());\n-    }\n-    \n-    static class MockMutableDuration extends AbstractDuration {\n-        MockMutableDuration(long duration) {\n-            super(duration);\n-        }\n-        public void setDuration(ReadableDuration d) {\n-            super.setDuration(d);\n-        }\n-        public void setMillis(long d) {\n-            super.setMillis(d);\n-        }\n+    public void testWithDurationAdded_long1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(8000L);\n+        assertEquals(8123L, result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_long2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(0L);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_long_int1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(8000L, 1);\n+        assertEquals(8123L, result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_long_int2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(8000L, 2);\n+        assertEquals(16123L, result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_long_int3() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(8000L, -1);\n+        assertEquals((123L - 8000L), result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_long_int4() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(0L, 1);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithDurationAdded_long_int5() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(8000L, 0);\n+        assertSame(test, result);\n     }\n \n }", "timestamp": 1092508542, "metainfo": ""}