{"sha": "ce6991c2cfb3b666b53c5ad8b5b1f18d0eca9b21", "log": "Add missing since tags for 1.3  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n      * same date and chronology.\n      *\n      * @return a LocalDate with the same date and chronology\n+     * @since 1.3\n      */\n     public LocalDate toLocalDate() {\n         return new LocalDate(getMillis(), getChronology());\n      * @param era  the era to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateMidnight withEra(int era) {\n         return withMillis(getChronology().era().set(getMillis(), era));\n      * @param centuryOfEra  the centurey of era to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateMidnight withCenturyOfEra(int centuryOfEra) {\n         return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));\n      * @param yearOfEra  the year of era to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateMidnight withYearOfEra(int yearOfEra) {\n         return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));\n      * @param yearOfCentury  the year of century to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateMidnight withYearOfCentury(int yearOfCentury) {\n         return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));\n      * @param year  the year to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateMidnight withYear(int year) {\n         return withMillis(getChronology().year().set(getMillis(), year));\n      * @param weekyear  the weekyear to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateMidnight withWeekyear(int weekyear) {\n         return withMillis(getChronology().weekyear().set(getMillis(), weekyear));\n      * @param monthOfYear  the month of year to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateMidnight withMonthOfYear(int monthOfYear) {\n         return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));\n      * @param weekOfWeekyear  the week of weekyear to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateMidnight withWeekOfWeekyear(int weekOfWeekyear) {\n         return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));\n      * @param dayOfYear  the day of year to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateMidnight withDayOfYear(int dayOfYear) {\n         return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));\n      * @param dayOfMonth  the day of month to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateMidnight withDayOfMonth(int dayOfMonth) {\n         return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));\n      * @param dayOfWeek  the day of week to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateMidnight withDayOfWeek(int dayOfWeek) {\n         return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n      * the same datetime and chronology.\n      *\n      * @return a LocalDateTime with the same datetime and chronology\n+     * @since 1.3\n      */\n     public LocalDateTime toLocalDateTime() {\n         return new LocalDateTime(getMillis(), getChronology());\n      * same date and chronology.\n      *\n      * @return a LocalDate with the same date and chronology\n+     * @since 1.3\n      */\n     public LocalDate toLocalDate() {\n         return new LocalDate(getMillis(), getChronology());\n      * same time and chronology.\n      *\n      * @return a LocalTime with the same time and chronology\n+     * @since 1.3\n      */\n     public LocalTime toLocalTime() {\n         return new LocalTime(getMillis(), getChronology());\n      * @param era  the era to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withEra(int era) {\n         return withMillis(getChronology().era().set(getMillis(), era));\n      * @param centuryOfEra  the centurey of era to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withCenturyOfEra(int centuryOfEra) {\n         return withMillis(getChronology().centuryOfEra().set(getMillis(), centuryOfEra));\n      * @param yearOfEra  the year of era to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withYearOfEra(int yearOfEra) {\n         return withMillis(getChronology().yearOfEra().set(getMillis(), yearOfEra));\n      * @param yearOfCentury  the year of century to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withYearOfCentury(int yearOfCentury) {\n         return withMillis(getChronology().yearOfCentury().set(getMillis(), yearOfCentury));\n      * @param year  the year to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withYear(int year) {\n         return withMillis(getChronology().year().set(getMillis(), year));\n      * @param weekyear  the weekyear to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withWeekyear(int weekyear) {\n         return withMillis(getChronology().weekyear().set(getMillis(), weekyear));\n      * @param monthOfYear  the month of year to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withMonthOfYear(int monthOfYear) {\n         return withMillis(getChronology().monthOfYear().set(getMillis(), monthOfYear));\n      * @param weekOfWeekyear  the week of weekyear to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withWeekOfWeekyear(int weekOfWeekyear) {\n         return withMillis(getChronology().weekOfWeekyear().set(getMillis(), weekOfWeekyear));\n      * @param dayOfYear  the day of year to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withDayOfYear(int dayOfYear) {\n         return withMillis(getChronology().dayOfYear().set(getMillis(), dayOfYear));\n      * @param dayOfMonth  the day of month to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withDayOfMonth(int dayOfMonth) {\n         return withMillis(getChronology().dayOfMonth().set(getMillis(), dayOfMonth));\n      * @param dayOfWeek  the day of week to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withDayOfWeek(int dayOfWeek) {\n         return withMillis(getChronology().dayOfWeek().set(getMillis(), dayOfWeek));\n      * @param hour  the hour of day to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withHourOfDay(int hour) {\n         return withMillis(getChronology().hourOfDay().set(getMillis(), hour));\n      * @param minute  the minute of hour to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withMinuteOfHour(int minute) {\n         return withMillis(getChronology().minuteOfHour().set(getMillis(), minute));\n      * @param second  the second of minute to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withSecondOfMinute(int second) {\n         return withMillis(getChronology().secondOfMinute().set(getMillis(), second));\n      * @param millis  the millis of second to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withMillisOfSecond(int millis) {\n         return withMillis(getChronology().millisOfSecond().set(getMillis(), millis));\n      * @param millis  the millis of day to set\n      * @return a copy of this object with the field set\n      * @throws IllegalArgumentException if the value is invalid\n+     * @since 1.3\n      */\n     public DateTime withMillisOfDay(int millis) {\n         return withMillis(getChronology().millisOfDay().set(getMillis(), millis));\n--- a/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java\n+++ b/JodaTime/src/java/org/joda/time/IllegalFieldValueException.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     }\n \n     /**\n-     * Provide additional detail by prepending a message to the existing\n-     * message. A colon is separator is automatically inserted between the\n-     * messages.\n+     * Provide additional detail by prepending a message to the existing message.\n+     * A colon is separator is automatically inserted between the messages.\n+     * @since 1.3\n      */\n     public void prependMessage(String message) {\n         if (iMessage == null) {\n--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java\n      * Converts this object to a LocalTime with the same time and chronology.\n      *\n      * @return a LocalTime with the same time and chronology\n+     * @since 1.3\n      */\n     public LocalTime toLocalTime() {\n         return new LocalTime(getHourOfDay(), getMinuteOfHour(),\n--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java\n      * Converts this object to a LocalDate with the same date and chronology.\n      *\n      * @return a LocalDate with the same date and chronology\n+     * @since 1.3\n      */\n     public LocalDate toLocalDate() {\n         return new LocalDate(getYear(), getMonthOfYear(), getDayOfMonth(), getChronology());\n--- a/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/field/AbstractPartialFieldProperty.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n      * Gets a suitable hashcode for the object.\n      * \n      * @return the hashcode\n+     * @since 1.3\n      */\n     public int hashCode() {\n         int hash = 19;\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n      * @param text optional text being parsed, to be included in any error message\n      * @return milliseconds since 1970-01-01T00:00:00Z\n      * @throws IllegalArgumentException if any field is out of range\n+     * @since 1.3\n      */\n     public long computeMillis(boolean resetFields, String text) {\n         SavedField[] savedFields = iSavedFields;", "timestamp": 1154383809, "metainfo": ""}