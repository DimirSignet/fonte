{"sha": "49b93444b594c2418063c1f95cb07bd30bd639a1", "log": "Rename appendNumeric to appendDecimal, reserving \"numeric\" for later use.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java\n                             (chronoUTC.yearOfEra(), \"yearOfCentury\", \"centuries\", 100);\n                         break;\n                     }\n-                    builder.appendNumeric(field, 2, 2);\n+                    builder.appendDecimal(field, 2, 2);\n                 } else {\n                     // Try to support long year values.\n                     int maxDigits = 9;\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n      * @return this DateTimeFormatterBuilder\n      * @throws IllegalArgumentException if field is null\n      */\n-    public DateTimeFormatterBuilder appendNumeric(\n+    public DateTimeFormatterBuilder appendDecimal(\n             DateTimeField field, int minDigits, int maxDigits) {\n         if (field == null) {\n             throw new IllegalArgumentException(\"Field must not be null\");\n      * @return this DateTimeFormatterBuilder\n      * @throws IllegalArgumentException if field is null\n      */\n-    public DateTimeFormatterBuilder appendSignedNumeric(\n+    public DateTimeFormatterBuilder appendSignedDecimal(\n             DateTimeField field, int minDigits, int maxDigits) {\n         if (field == null) {\n             throw new IllegalArgumentException(\"Field must not be null\");\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendMillisOfSecond(final int minDigits) {\n-        return appendNumeric(iChronoUTC.millisOfSecond(), minDigits, 3);\n+        return appendDecimal(iChronoUTC.millisOfSecond(), minDigits, 3);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendMillisOfDay(final int minDigits) {\n-        return appendNumeric(iChronoUTC.millisOfDay(), minDigits, 8);\n+        return appendDecimal(iChronoUTC.millisOfDay(), minDigits, 8);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendSecondOfMinute(final int minDigits) {\n-        return appendNumeric(iChronoUTC.secondOfMinute(), minDigits, 2);\n+        return appendDecimal(iChronoUTC.secondOfMinute(), minDigits, 2);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendSecondOfDay(final int minDigits) {\n-        return appendNumeric(iChronoUTC.secondOfDay(), minDigits, 5);\n+        return appendDecimal(iChronoUTC.secondOfDay(), minDigits, 5);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendMinuteOfHour(final int minDigits) {\n-        return appendNumeric(iChronoUTC.minuteOfHour(), minDigits, 2);\n+        return appendDecimal(iChronoUTC.minuteOfHour(), minDigits, 2);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendMinuteOfDay(final int minDigits) {\n-        return appendNumeric(iChronoUTC.minuteOfDay(), minDigits, 4);\n+        return appendDecimal(iChronoUTC.minuteOfDay(), minDigits, 4);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendHourOfDay(final int minDigits) {\n-        return appendNumeric(iChronoUTC.hourOfDay(), minDigits, 2);\n+        return appendDecimal(iChronoUTC.hourOfDay(), minDigits, 2);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendClockhourOfDay(final int minDigits) {\n-        return appendNumeric(iChronoUTC.clockhourOfDay(), minDigits, 2);\n+        return appendDecimal(iChronoUTC.clockhourOfDay(), minDigits, 2);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendHourOfHalfday(final int minDigits) {\n-        return appendNumeric(iChronoUTC.hourOfHalfday(), minDigits, 2);\n+        return appendDecimal(iChronoUTC.hourOfHalfday(), minDigits, 2);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendClockhourOfHalfday(final int minDigits) {\n-        return appendNumeric(iChronoUTC.clockhourOfHalfday(), minDigits, 2);\n+        return appendDecimal(iChronoUTC.clockhourOfHalfday(), minDigits, 2);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendDayOfWeek(final int minDigits) {\n-        return appendNumeric(iChronoUTC.dayOfWeek(), minDigits, 1);\n+        return appendDecimal(iChronoUTC.dayOfWeek(), minDigits, 1);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendDayOfMonth(final int minDigits) {\n-        return appendNumeric(iChronoUTC.dayOfMonth(), minDigits, 2);\n+        return appendDecimal(iChronoUTC.dayOfMonth(), minDigits, 2);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendDayOfYear(final int minDigits) {\n-        return appendNumeric(iChronoUTC.dayOfYear(), minDigits, 3);\n+        return appendDecimal(iChronoUTC.dayOfYear(), minDigits, 3);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendWeekOfWeekyear(final int minDigits) {\n-        return appendNumeric(iChronoUTC.weekOfWeekyear(), minDigits, 2);\n+        return appendDecimal(iChronoUTC.weekOfWeekyear(), minDigits, 2);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendWeekyear(final int minDigits, final int maxDigits) {\n-        return appendNumeric\n+        return appendDecimal\n             (iChronoUTC.weekyear(), minDigits, maxDigits);\n     }\n \n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendMonthOfYear(final int minDigits) {\n-        return appendNumeric(iChronoUTC.monthOfYear(), minDigits, 2);\n+        return appendDecimal(iChronoUTC.monthOfYear(), minDigits, 2);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendYear(final int minDigits, final int maxDigits) {\n-        return appendSignedNumeric(iChronoUTC.year(), minDigits, maxDigits);\n+        return appendSignedDecimal(iChronoUTC.year(), minDigits, maxDigits);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendYearOfEra(final int minDigits, final int maxDigits) {\n-        return appendNumeric(iChronoUTC.yearOfEra(), minDigits, maxDigits);\n+        return appendDecimal(iChronoUTC.yearOfEra(), minDigits, maxDigits);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendYearOfCentury(final int minDigits, final int maxDigits) {\n-        return appendNumeric(iChronoUTC.yearOfCentury(), minDigits, maxDigits);\n+        return appendDecimal(iChronoUTC.yearOfCentury(), minDigits, maxDigits);\n     }\n \n     /**\n      * @return this DateTimeFormatterBuilder\n      */\n     public DateTimeFormatterBuilder appendCenturyOfEra(final int minDigits, final int maxDigits) {\n-        return appendSignedNumeric(iChronoUTC.centuryOfEra(), minDigits, maxDigits);\n+        return appendSignedDecimal(iChronoUTC.centuryOfEra(), minDigits, maxDigits);\n     }\n \n     /**", "timestamp": 1072545501, "metainfo": ""}