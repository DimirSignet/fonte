{"sha": "c9bb201571e8646aae2ae4f47db903eacb40c5b1", "log": "Rename Property.getInstant to getReadableInstant   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/property/AbstractReadableInstantFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/property/AbstractReadableInstantFieldProperty.java\n      * \n      * @return the instant\n      */\n-    public abstract ReadableInstant getInstant();\n+    public abstract ReadableInstant getReadableInstant();\n \n     //-----------------------------------------------------------------------\n     /**\n      * @see DateTimeField#get\n      */\n     public int get() {\n-        return getField().get(getInstant().getMillis());\n+        return getField().get(getReadableInstant().getMillis());\n     }\n \n     /**\n      * @see DateTimeField#getAsText\n      */\n     public String getAsText(Locale locale) {\n-        return getField().getAsText(getInstant().getMillis(), locale);\n+        return getField().getAsText(getReadableInstant().getMillis(), locale);\n     }\n \n     /**\n      * @see DateTimeField#getAsShortText\n      */\n     public String getAsShortText(Locale locale) {\n-        return getField().getAsShortText(getInstant().getMillis(), locale);\n+        return getField().getAsShortText(getReadableInstant().getMillis(), locale);\n     }\n \n     /**\n         if (instant == null) {\n             throw new IllegalArgumentException(\"The instant must not be null\");\n         }\n-        return getField().getDifference(getInstant().getMillis(), instant.getMillis());\n+        return getField().getDifference(getReadableInstant().getMillis(), instant.getMillis());\n     }\n \n     /**\n         if (instant == null) {\n             throw new IllegalArgumentException(\"The instant must not be null\");\n         }\n-        return getField().getDifferenceAsLong(getInstant().getMillis(), instant.getMillis());\n+        return getField().getDifferenceAsLong(getReadableInstant().getMillis(), instant.getMillis());\n     }\n \n     //-----------------------------------------------------------------------\n      * @see DateTimeField#isLeap\n      */\n     public boolean isLeap() {\n-        return getField().isLeap(getInstant().getMillis());\n+        return getField().isLeap(getReadableInstant().getMillis());\n     }\n \n     /**\n      * @see DateTimeField#getLeapAmount\n      */\n     public int getLeapAmount() {\n-        return getField().getLeapAmount(getInstant().getMillis());\n+        return getField().getLeapAmount(getReadableInstant().getMillis());\n     }\n \n     /**\n      * @see DateTimeField#getMinimumValue\n      */\n     public int getMinimumValue() {\n-        return getField().getMinimumValue(getInstant().getMillis());\n+        return getField().getMinimumValue(getReadableInstant().getMillis());\n     }\n \n     /**\n      * @see DateTimeField#getMaximumValue\n      */\n     public int getMaximumValue() {\n-        return getField().getMaximumValue(getInstant().getMillis());\n+        return getField().getMaximumValue(getReadableInstant().getMillis());\n     }\n \n     /**\n      * @return remainder duration, in milliseconds\n      */\n     public long remainder() {\n-        return getField().remainder(getInstant().getMillis());\n+        return getField().remainder(getReadableInstant().getMillis());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java\n      * \n      * @return the instant\n      */\n-    public ReadableInstant getInstant() {\n+    public ReadableInstant getReadableInstant() {\n         return iInstant;\n     }\n \n--- a/JodaTime/src/java/org/joda/time/property/ReadWritableInstantFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/property/ReadWritableInstantFieldProperty.java\n      * \n      * @return the instant\n      */\n-    public ReadableInstant getInstant() {\n+    public ReadableInstant getReadableInstant() {\n         return iInstant;\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n         assertSame(test.getChronology().era(), test.era().getField());\n         assertEquals(\"era\", test.era().getName());\n         assertEquals(\"Property[era]\", test.era().toString());\n-        assertSame(test, test.era().getInstant());\n+        assertSame(test, test.era().getReadableInstant());\n         assertSame(test, test.era().getDateTime());\n         assertEquals(1, test.era().get());\n         assertEquals(\"AD\", test.era().getAsText());\n         assertSame(test.getChronology().yearOfEra(), test.yearOfEra().getField());\n         assertEquals(\"yearOfEra\", test.yearOfEra().getName());\n         assertEquals(\"Property[yearOfEra]\", test.yearOfEra().toString());\n-        assertSame(test, test.yearOfEra().getInstant());\n+        assertSame(test, test.yearOfEra().getReadableInstant());\n         assertSame(test, test.yearOfEra().getDateTime());\n         assertEquals(1972, test.yearOfEra().get());\n         assertEquals(\"1972\", test.yearOfEra().getAsText());\n         assertSame(test.getChronology().centuryOfEra(), test.centuryOfEra().getField());\n         assertEquals(\"centuryOfEra\", test.centuryOfEra().getName());\n         assertEquals(\"Property[centuryOfEra]\", test.centuryOfEra().toString());\n-        assertSame(test, test.centuryOfEra().getInstant());\n+        assertSame(test, test.centuryOfEra().getReadableInstant());\n         assertSame(test, test.centuryOfEra().getDateTime());\n         assertEquals(19, test.centuryOfEra().get());\n         assertEquals(\"19\", test.centuryOfEra().getAsText());\n         assertSame(test.getChronology().yearOfCentury(), test.yearOfCentury().getField());\n         assertEquals(\"yearOfCentury\", test.yearOfCentury().getName());\n         assertEquals(\"Property[yearOfCentury]\", test.yearOfCentury().toString());\n-        assertSame(test, test.yearOfCentury().getInstant());\n+        assertSame(test, test.yearOfCentury().getReadableInstant());\n         assertSame(test, test.yearOfCentury().getDateTime());\n         assertEquals(72, test.yearOfCentury().get());\n         assertEquals(\"72\", test.yearOfCentury().getAsText());\n         assertSame(test.getChronology().year(), test.year().getField());\n         assertEquals(\"year\", test.year().getName());\n         assertEquals(\"Property[year]\", test.year().toString());\n-        assertSame(test, test.year().getInstant());\n+        assertSame(test, test.year().getReadableInstant());\n         assertSame(test, test.year().getDateTime());\n         assertEquals(1972, test.year().get());\n         assertEquals(\"1972\", test.year().getAsText());\n         assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n         assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n         assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n-        assertSame(test, test.monthOfYear().getInstant());\n+        assertSame(test, test.monthOfYear().getReadableInstant());\n         assertSame(test, test.monthOfYear().getDateTime());\n         assertEquals(6, test.monthOfYear().get());\n         assertEquals(\"June\", test.monthOfYear().getAsText());\n         assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n         assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n         assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n-        assertSame(test, test.dayOfMonth().getInstant());\n+        assertSame(test, test.dayOfMonth().getReadableInstant());\n         assertSame(test, test.dayOfMonth().getDateTime());\n         assertEquals(9, test.dayOfMonth().get());\n         assertEquals(\"9\", test.dayOfMonth().getAsText());", "timestamp": 1089413040, "metainfo": ""}