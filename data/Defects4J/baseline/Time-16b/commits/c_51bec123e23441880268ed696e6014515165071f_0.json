{"sha": "51bec123e23441880268ed696e6014515165071f", "log": "DateTimeZone.convertLocalToUTC [2903029] Now handles date after last ever DST change reported by Christoph Goldner  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n             if (strict || offsetLocal < 0) {\n                 // determine if we are in the DST gap\n                 long nextLocal = nextTransition(instantLocal - offsetLocal);\n+                if (nextLocal == (instantLocal - offsetLocal)) {\n+                    nextLocal = Long.MAX_VALUE;\n+                }\n                 long nextAdjusted = nextTransition(instantLocal - offset);\n+                if (nextAdjusted == (instantLocal - offset)) {\n+                    nextAdjusted = Long.MAX_VALUE;\n+                }\n                 if (nextLocal != nextAdjusted) {\n                     // yes we are in the DST gap\n                     if (strict) {\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZoneCutover.java\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+\n+import org.joda.time.tz.DateTimeZoneBuilder;\n \n /**\n  * This class is a JUnit test for DateTimeZone.\n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n \n+    public void test_DateTime_JustAfterLastEverOverlap() {\n+        // based on America/Argentina/Catamarca in file 2009s\n+        DateTimeZone zone = new DateTimeZoneBuilder()\n+            .setStandardOffset(-3 * DateTimeConstants.MILLIS_PER_HOUR)\n+            .addRecurringSavings(\"SUMMER\", 1 * DateTimeConstants.MILLIS_PER_HOUR, 2000, 2008,\n+                                    'w', 4, 10, 0, true, 23 * DateTimeConstants.MILLIS_PER_HOUR)\n+            .addRecurringSavings(\"WINTER\", 0, 2000, 2008,\n+                                    'w', 8, 10, 0, true, 0 * DateTimeConstants.MILLIS_PER_HOUR)\n+            .toDateTimeZone(\"Zone\", false);\n+        \n+        LocalDate date = new LocalDate(2008, 8, 10);\n+        assertEquals(\"2008-08-10\", date.toString());\n+        \n+        DateTime dt = date.toDateTimeAtStartOfDay(zone);\n+        System.out.println(dt);\n+        assertEquals(\"2008-08-10T00:00:00.000-03:00\", dt.toString());\n+    }\n+\n //    public void test_toDateMidnight_SaoPaolo() {\n //        // RFE: 1684259\n //        DateTimeZone zone = DateTimeZone.forID(\"America/Sao_Paulo\");", "timestamp": 1266368571, "metainfo": ""}