{"sha": "a5b05944d52519cc70d86d1f59fe1c0e8d2e8956", "log": "Add getMillisKeepLocal to DateTimeZone   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDateTime.java\n             return;\n         }\n         \n-        long millis = getMillis();\n-        millis += originalZone.getOffset(millis);\n-        millis -= newZone.getOffsetFromLocal(millis);\n+        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());\n         // Don't set iChronology and iMillis directly, as it may provide a\n         // backdoor to immutable subclasses.\n         setChronology(iChronology.withZone(newZone));\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n      * The returned object will have a local time of midnight in the new zone on\n      * the same day as the original instant.\n      *\n-     * @param newDateTimeZone  the new time zone, null means default\n+     * @param newZone  the new time zone, null means default\n      * @return a copy of this instant with a different time zone\n      */\n-    public final DateMidnight withZoneRetainFields(DateTimeZone newDateTimeZone) {\n-        newDateTimeZone = (newDateTimeZone == null ? DateTimeZone.getDefault() : newDateTimeZone);\n+    public final DateMidnight withZoneRetainFields(DateTimeZone newZone) {\n+        newZone = (newZone == null ? DateTimeZone.getDefault() : newZone);\n         DateTimeZone originalZone = getZone();\n         originalZone = (originalZone == null ? DateTimeZone.getDefault() : originalZone);\n-        if (newDateTimeZone == originalZone) {\n+        if (newZone == originalZone) {\n             return this;\n         }\n         \n-        long originalMillis = getMillis();\n-        long newMillis = originalMillis + originalZone.getOffset(originalMillis);\n-        newMillis -= newDateTimeZone.getOffsetFromLocal(newMillis);\n-\n-        return new DateMidnight(newMillis, getChronology().withZone(newDateTimeZone));\n+        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());\n+        return new DateMidnight(millis, getChronology().withZone(newZone));\n     }\n \n     // Date properties\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n             return this;\n         }\n         \n-        long millis = getMillis();\n-        millis += originalZone.getOffset(millis);\n-        millis -= newZone.getOffsetFromLocal(millis);\n-\n+        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());\n         return new DateTime(millis, getChronology().withZone(newZone));\n     }\n \n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n      *\n      * @param instantLocal  the millisecond instant, relative to this time zone, to\n      * get the offset for\n-     * @return the millisceond offset to subtract from local time to get UTC time.\n+     * @return the millisecond offset to subtract from local time to get UTC time\n      */\n     public int getOffsetFromLocal(long instantLocal) {\n         return getOffset(instantLocal - getOffset(instantLocal));\n+    }\n+\n+    /**\n+     * Gets the millisecond instant in another zone keeping the same local time.\n+     * <p>\n+     * The conversion is performed by converting the specified UTC millis to local\n+     * millis in this zone, then converting back to UTC millis in the new zone.\n+     *\n+     * @param newZone  the new zone, null means default\n+     * @param oldInstant  the UTC millisecond instant to convert\n+     * @return the UTC millisecond instant with the same local time in the new zone\n+     */\n+    public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant) {\n+        if (newZone == null) {\n+            newZone = DateTimeZone.getDefault();\n+        }\n+        long instantLocal = oldInstant + getOffset(oldInstant);\n+        return instantLocal - newZone.getOffsetFromLocal(instantLocal);\n     }\n \n     /**\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testGetMillisKeepLocal() {\n+        long millisLondon = TEST_TIME_SUMMER;\n+        long millisParis = TEST_TIME_SUMMER - 1L * DateTimeConstants.MILLIS_PER_HOUR;\n+        \n+        assertEquals(millisParis, LONDON.getMillisKeepLocal(PARIS, millisLondon));\n+        assertEquals(millisLondon, PARIS.getMillisKeepLocal(LONDON, millisParis));\n+        assertEquals(millisLondon, PARIS.getMillisKeepLocal(null, millisParis));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testIsFixed() {\n         DateTimeZone zone = DateTimeZone.getInstance(\"Europe/Paris\");\n         assertEquals(false, zone.isFixed());", "timestamp": 1090082943, "metainfo": ""}