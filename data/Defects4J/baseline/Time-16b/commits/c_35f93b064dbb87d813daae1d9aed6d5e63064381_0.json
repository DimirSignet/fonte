{"sha": "35f93b064dbb87d813daae1d9aed6d5e63064381", "log": "Testing of LocalDate  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDate.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Constructs an instance from an Object that represents a datetime.\n+     * The time zone will be retrieved from the object if possible,\n+     * otherwise the default time zone will be used.\n+     * <p>\n+     * If the object contains no chronology, <code>ISOChronology</code> is used.\n+     * Once the constructor is completed, the zone is no longer used.\n+     * <p>\n+     * The recognised object types are defined in\n+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n+     * include ReadableInstant, String, Calendar and Date.\n+     *\n+     * @param instant  the datetime object\n+     * @param zone  the time zone\n+     * @throws IllegalArgumentException if the instant is invalid\n+     */\n+    public static LocalDate forInstant(Object instant) {\n+        return forInstant(instant, (Chronology) null);\n+    }\n+\n+    /**\n      * Constructs an instance from an Object that represents a datetime,\n      * forcing the time zone to that specified.\n      * <p>\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestInterval_Constructors.suite());\n         suite.addTest(TestInterval_Basics.suite());\n         \n+        suite.addTest(TestLocalDate_Constructors.suite());\n+        suite.addTest(TestLocalDate_Basics.suite());\n+        \n+        suite.addTest(TestLocalTime_Constructors.suite());\n         suite.addTest(TestLocalTime_Basics.suite());\n-        suite.addTest(TestLocalTime_Constructors.suite());\n         suite.addTest(TestLocalTime_Properties.suite());\n-        \n-        suite.addTest(TestLocalDate_Basics.suite());\n         \n         suite.addTest(TestMutableInterval_Constructors.suite());\n         suite.addTest(TestMutableInterval_Basics.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for LocalDate.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestLocalDate_Constructors extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n+    private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n+    private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n+    private static final Chronology GREGORIAN_PARIS = GregorianChronology.getInstance(PARIS);\n+    \n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestLocalDate_Constructors.class);\n+    }\n+\n+    public TestLocalDate_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_ForCalendarFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDate expected = new LocalDate(1970, 2, 3);\n+        assertEquals(expected, LocalDate.forFields(cal));\n+        try {\n+            LocalDate.forFields((Calendar) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_ForDateFields() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDate expected = new LocalDate(1970, 2, 3);\n+        assertEquals(expected, LocalDate.forFields(cal.getTime()));\n+        try {\n+            LocalDate.forFields((Date) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_nowDefaultZone() throws Throwable {\n+        LocalDate test = LocalDate.nowDefaultZone();\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_now_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        LocalDate test = LocalDate.now(LONDON);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(8, test.getDayOfMonth());\n+        \n+        test = LocalDate.now(PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_now_nullDateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2005, 6, 8, 23, 59, 0, 0, LONDON);\n+        DateTimeUtils.setCurrentMillisFixed(dt.getMillis());\n+        // 23:59 in London is 00:59 the following day in Paris\n+        \n+        LocalDate test = LocalDate.now((DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2005, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(8, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_now_Chronology() throws Throwable {\n+        LocalDate test = LocalDate.now(GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_now_nullChronology() throws Throwable {\n+        LocalDate test = LocalDate.now((Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_forInstantDefaultZone_long1() throws Throwable {\n+        LocalDate test = LocalDate.forInstantDefaultZone(TEST_TIME1);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_forInstantDefaultZone_long2() throws Throwable {\n+        LocalDate test = LocalDate.forInstantDefaultZone(TEST_TIME2);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_forInstant_long1_DateTimeZone() throws Throwable {\n+        LocalDate test = LocalDate.forInstant(TEST_TIME1, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_forInstant_long2_DateTimeZone() throws Throwable {\n+        LocalDate test = LocalDate.forInstant(TEST_TIME2, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_forInstant_long_nullDateTimeZone() throws Throwable {\n+        LocalDate test = LocalDate.forInstant(TEST_TIME1, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_forInstant_long1_Chronology() throws Throwable {\n+        LocalDate test = LocalDate.forInstant(TEST_TIME1, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_forInstant_long2_Chronology() throws Throwable {\n+        LocalDate test = LocalDate.forInstant(TEST_TIME2, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1971, test.getYear());\n+        assertEquals(5, test.getMonthOfYear());\n+        assertEquals(7, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_forInstant_long_nullChronology() throws Throwable {\n+        LocalDate test = LocalDate.forInstant(TEST_TIME1, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactory_forInstant_Object1() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = LocalDate.forInstant(date);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_forInstant_nullObject() throws Throwable {\n+        LocalDate test = LocalDate.forInstant((Object) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_forInstant_Object_DateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = LocalDate.forInstant(date, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_forInstant_nullObject_DateTimeZone() throws Throwable {\n+        LocalDate test = LocalDate.forInstant((Object) null, PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_Object_nullDateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = LocalDate.forInstant(date, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_nullObject_nullDateTimeZone() throws Throwable {\n+        LocalDate test = LocalDate.forInstant((Object) null, (DateTimeZone) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_forInstant_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = LocalDate.forInstant(date, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_forInstant_nullObject_Chronology() throws Throwable {\n+        LocalDate test = LocalDate.forInstant((Object) null, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        LocalDate test = LocalDate.forInstant(date, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(6, test.getDayOfMonth());\n+    }\n+\n+    public void testFactory_nullObject_nullChronology() throws Throwable {\n+        LocalDate test = LocalDate.forInstant((Object) null, (Chronology) null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_int_int_int() throws Throwable {\n+        LocalDate test = new LocalDate(1970, 6, 9);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        try {\n+            new LocalDate(Integer.MIN_VALUE, 6, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(Integer.MAX_VALUE, 6, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 0, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 13, 9);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 6, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 6, 31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new LocalDate(1970, 7, 31);\n+        try {\n+            new LocalDate(1970, 7, 32);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_Chronology() throws Throwable {\n+        LocalDate test = new LocalDate(1970, 6, 9, GREGORIAN_PARIS);\n+        assertEquals(GREGORIAN_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        try {\n+            new LocalDate(Integer.MIN_VALUE, 6, 9, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(Integer.MAX_VALUE, 6, 9, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 0, 9, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 13, 9, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 6, 0, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LocalDate(1970, 6, 31, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new LocalDate(1970, 7, 31, GREGORIAN_PARIS);\n+        try {\n+            new LocalDate(1970, 7, 32, GREGORIAN_PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_int_int_int_nullChronology() throws Throwable {\n+        LocalDate test = new LocalDate(1970, 6, 9, null);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+}", "timestamp": 1142636232, "metainfo": ""}