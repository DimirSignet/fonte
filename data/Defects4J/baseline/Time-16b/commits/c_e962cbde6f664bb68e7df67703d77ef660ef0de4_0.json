{"sha": "e962cbde6f664bb68e7df67703d77ef660ef0de4", "log": "PartialInstant getMax/getMin methods   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeField.java\n     public abstract int getMinimumValue(long instant);\n \n     /**\n+     * Get the minimum value for this field evaluated at the specified time.\n+     * \n+     * @param instant  the partial instant to query\n+     * @return the minimum value for this field, in the units of the field\n+     */\n+    public abstract int getMinimumValue(PartialInstant instant);\n+\n+    /**\n      * Get the maximum allowable value for this field.\n      * \n      * @return the maximum valid value for this field, in the units of the\n      * @return the maximum value for this field, in the units of the field\n      */\n     public abstract int getMaximumValue(long instant);\n+\n+    /**\n+     * Get the maximum value for this field evaluated at the specified time.\n+     * \n+     * @param instant  the partial instant to query\n+     * @return the maximum value for this field, in the units of the field\n+     */\n+    public abstract int getMaximumValue(PartialInstant instant);\n \n     /**\n      * Get the maximum text value for this field.\n--- a/JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/AbstractGJChronology.java\n         } else {\n             return MIN_DAYS_PER_MONTH_ARRAY[month - 1];\n         }\n+    }\n+\n+    /**\n+     * Gets the maximum days in the specified month.\n+     * \n+     * @param month  the month\n+     * @return the max days\n+     */\n+    final int getDaysInMonthMax(int month) {\n+        return MAX_DAYS_PER_MONTH_ARRAY[month - 1];\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java\n \n import org.joda.time.DurationField;\n import org.joda.time.field.PreciseDurationDateTimeField;\n+import org.joda.time.partial.PartialInstant;\n \n /**\n  * Provides time calculations for the day of the month component of time.\n \t\treturn iChronology.isLeapYear(iChronology.getYear(instant)) ? 6 : 5;\n     }\n \n+    public int getMaximumValue(PartialInstant instant) {\n+        if (instant.isSupported(iChronology.monthOfYear())) {\n+            int month = instant.get(iChronology.monthOfYear());\n+            if (month <= 12) {\n+                return 30;\n+            }\n+            if (instant.isSupported(iChronology.year())) {\n+                int year = instant.get(iChronology.year());\n+                return iChronology.isLeapYear(year) ? 6 : 5;\n+            }\n+            return 6;\n+        }\n+        return 30;\n+    }\n+\n     /**\n      * Serialization singleton\n      */\n--- a/JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java\n \n import org.joda.time.DurationField;\n import org.joda.time.field.PreciseDurationDateTimeField;\n+import org.joda.time.partial.PartialInstant;\n \n /**\n  * Provides time calculations for the day of the month component of time.\n         return iChronology.getDaysInYearMonth(thisYear, thisMonth);\n     }\n \n+    public int getMaximumValue(PartialInstant instant) {\n+        if (instant.isSupported(iChronology.monthOfYear())) {\n+            int month = instant.get(iChronology.monthOfYear());\n+            if (instant.isSupported(iChronology.year())) {\n+                int year = instant.get(iChronology.year());\n+                return iChronology.getDaysInYearMonth(year, month);\n+            }\n+            return iChronology.getDaysInMonthMax(month);\n+        }\n+        return 31;\n+    }\n+\n     protected int getMaximumValueForSet(long instant, int value) {\n         return value > 28 ? getMaximumValue(instant) : 28;\n     }\n--- a/JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java\n  */\n package org.joda.time.chrono;\n \n-import org.joda.time.DateTimeConstants;\n import org.joda.time.DurationField;\n import org.joda.time.field.PreciseDurationDateTimeField;\n+import org.joda.time.partial.PartialInstant;\n \n /**\n  * Provides time calculations for the day of the year component of time.\n     }\n \n     public int getMaximumValue(long instant) {\n-        int thisYear = iChronology.getYear(instant);\n-        return iChronology.getDaysInYear(thisYear);\n+        int year = iChronology.getYear(instant);\n+        return iChronology.getDaysInYear(year);\n+    }\n+\n+    public int getMaximumValue(PartialInstant instant) {\n+        if (instant.isSupported(iChronology.year())) {\n+            int year = instant.get(iChronology.year());\n+            return iChronology.getDaysInYear(year);\n+        }\n+        return 366;\n     }\n \n     protected int getMaximumValueForSet(long instant, int value) {\n--- a/JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java\n package org.joda.time.chrono;\n \n import org.joda.time.DateTimeConstants;\n-import org.joda.time.DateTimeField;\n import org.joda.time.DurationField;\n import org.joda.time.field.PreciseDurationDateTimeField;\n+import org.joda.time.partial.PartialInstant;\n \n /**\n  * Provides time calculations for the week of a week based year component of time.\n     }\n \n     public int getMaximumValue(long instant) {\n-        int thisYear = iChronology.getWeekyear(instant);\n-        return iChronology.getWeeksInYear(thisYear);\n+        int weekyear = iChronology.getWeekyear(instant);\n+        return iChronology.getWeeksInYear(weekyear);\n+    }\n+\n+    public int getMaximumValue(PartialInstant instant) {\n+        if (instant.isSupported(iChronology.weekyear())) {\n+            int weekyear = instant.get(iChronology.weekyear());\n+            return iChronology.getWeeksInYear(weekyear);\n+        }\n+        return 53;\n     }\n \n     protected int getMaximumValueForSet(long instant, int value) {\n--- a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public int[] set(PartialInstant instant, int fieldIndex, int value) {\n-        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n+        FieldUtils.verifyValueBounds(this, value, getMinimumValue(instant), getMaximumValue(instant));\n         int[] array = instant.getValues();\n         array[fieldIndex] = value;\n         return array;\n     }\n \n     /**\n+     * Get the minimum value for this field evaluated at the specified time.\n+     * <p>\n+     * This implementation returns the same as {@link #getMinimumValue()}.\n+     * \n+     * @param instant  the partial instant to query\n+     * @return the minimum value for this field, in the units of the field\n+     */\n+    public int getMinimumValue(PartialInstant instant) {\n+        return getMinimumValue();\n+    }\n+\n+    /**\n      * Get the maximum allowable value for this field.\n      * \n      * @return the maximum valid value for this field, in the units of the\n      * @return the maximum value for this field, in the units of the field\n      */\n     public int getMaximumValue(long instant) {\n+        return getMaximumValue();\n+    }\n+\n+    /**\n+     * Get the maximum value for this field evaluated at the specified time.\n+     * <p>\n+     * This implementation returns the same as {@link #getMaximumValue()}.\n+     * \n+     * @param instant  the partial instant to query\n+     * @return the maximum value for this field, in the units of the field\n+     */\n+    public int getMaximumValue(PartialInstant instant) {\n         return getMaximumValue();\n     }\n \n--- a/JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java\n         return iField.getMinimumValue(instant);\n     }\n \n+    public int getMinimumValue(PartialInstant instant) {\n+        return iField.getMinimumValue(instant);\n+    }\n+\n     public int getMaximumValue() {\n         return iField.getMaximumValue();\n     }\n \n     public int getMaximumValue(long instant) {\n+        return iField.getMaximumValue(instant);\n+    }\n+\n+    public int getMaximumValue(PartialInstant instant) {\n         return iField.getMaximumValue(instant);\n     }\n \n--- a/JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java\n \n import org.joda.time.DateTimeField;\n import org.joda.time.DurationField;\n+import org.joda.time.partial.PartialInstant;\n \n /**\n  * Wraps another field such that zero values are replaced with one more than\n     }\n \n     /**\n+     * Always returns 1.\n+     * \n+     * @return the minimum value of 1\n+     */\n+    public int getMinimumValue(PartialInstant instant) {\n+        return 1;\n+    }\n+\n+    /**\n      * Get the maximum value for the field, which is one more than the wrapped\n      * field's maximum value.\n      * \n         return getWrappedField().getMaximumValue(instant) + 1;\n     }\n \n+    /**\n+     * Get the maximum value for the field, which is one more than the wrapped\n+     * field's maximum value.\n+     * \n+     * @return the maximum value\n+     */\n+    public int getMaximumValue(PartialInstant instant) {\n+        return getWrappedField().getMaximumValue(instant) + 1;\n+    }\n+\n     public long roundFloor(long instant) {\n         return getWrappedField().roundFloor(instant);\n     }\n--- a/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n      *\n      * @throws UnsupportedOperationException\n      */\n+    public int getMinimumValue(PartialInstant instant) {\n+        throw unsupported();\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException\n+     *\n+     * @throws UnsupportedOperationException\n+     */\n     public int getMaximumValue() {\n         throw unsupported();\n     }\n      * @throws UnsupportedOperationException\n      */\n     public int getMaximumValue(long instant) {\n+        throw unsupported();\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException\n+     *\n+     * @throws UnsupportedOperationException\n+     */\n+    public int getMaximumValue(PartialInstant instant) {\n         throw unsupported();\n     }\n \n--- a/JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/partial/AbstractPartialFieldProperty.java\n     }\n \n     //-----------------------------------------------------------------------\n-// TODO\n-//    /**\n-//     * Gets the minimum value for the field ignoring the current time.\n-//     * \n-//     * @return the minimum value\n-//     * @see DateTimeField#getMinimumValue\n-//     */\n-//    public int getMinimumValueOverall() {\n-//        return getField().getMinimumValue();\n-//    }\n-//\n-//    /**\n-//     * Gets the minimum value for the field.\n-//     * \n-//     * @return the minimum value\n-//     * @see DateTimeField#getMinimumValue\n-//     */\n-//    public int getMinimumValue() {\n-//        return getField().getMinimumValue(getPartialInstant(), get());\n-//    }\n-//\n-//    /**\n-//     * Gets the maximum value for the field ignoring the current time.\n-//     * \n-//     * @return the maximum value\n-//     * @see DateTimeField#getMaximumValue\n-//     */\n-//    public int getMaximumValueOverall() {\n-//        return getField().getMaximumValue();\n-//    }\n-//\n-//    /**\n-//     * Gets the maximum value for the field.\n-//     * \n-//     * @return the maximum value\n-//     * @see DateTimeField#getMaximumValue\n-//     */\n-//    public int getMaximumValue() {\n-//        return getField().getMaximumValue(getPartialInstant(), get());\n-//    }\n+    /**\n+     * Gets the minimum value for the field ignoring the current time.\n+     * \n+     * @return the minimum value\n+     * @see DateTimeField#getMinimumValue\n+     */\n+    public int getMinimumValueOverall() {\n+        return getField().getMinimumValue();\n+    }\n+\n+    /**\n+     * Gets the minimum value for this field given the current field values.\n+     * \n+     * @return the minimum value\n+     * @see DateTimeField#getMinimumValue\n+     */\n+    public int getMinimumValue() {\n+        return getField().getMinimumValue(getPartialInstant());\n+    }\n+\n+    /**\n+     * Gets the maximum value for the field ignoring the current time.\n+     * \n+     * @return the maximum value\n+     * @see DateTimeField#getMaximumValue\n+     */\n+    public int getMaximumValueOverall() {\n+        return getField().getMaximumValue();\n+    }\n+\n+    /**\n+     * Gets the maximum value for this field given the current field values.\n+     * \n+     * @return the maximum value\n+     * @see DateTimeField#getMaximumValue\n+     */\n+    public int getMaximumValue() {\n+        return getField().getMaximumValue(getPartialInstant());\n+    }\n \n     /**\n      * Gets the maximum text length for the field.\n--- a/JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java\n+++ b/JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java\n         assertEquals(\"1970-01-01T10:20:30.040Z\", result.toString());\n     }\n \n-    public void testProperty() {\n+    public void testPropertyGet() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n         assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());\n         assertEquals(\"hourOfDay\", test.hourOfDay().getName());\n         assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());\n         assertEquals(2, test.hourOfDay().getMaximumTextLength(null));\n         assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));\n+        assertEquals(0, test.hourOfDay().getMinimumValue());\n+        assertEquals(0, test.hourOfDay().getMinimumValueOverall());\n+        assertEquals(23, test.hourOfDay().getMaximumValue());\n+        assertEquals(23, test.hourOfDay().getMaximumValueOverall());\n     }\n \n     public void testPropertySet() {", "timestamp": 1084723726, "metainfo": ""}