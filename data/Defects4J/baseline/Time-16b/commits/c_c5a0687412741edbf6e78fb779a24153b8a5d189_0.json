{"sha": "c5a0687412741edbf6e78fb779a24153b8a5d189", "log": "Add halfdays and weekyearOfCentury fields   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Chronology.java\n+++ b/JodaTime/src/java/org/joda/time/Chronology.java\n      */\n     public abstract DateTimeField clockhourOfDay();\n \n+    // Halfday\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Get the halfdays duration field for this chronology.\n+     * \n+     * @return DurationField or UnsupportedDurationField if unsupported\n+     */\n+    public abstract DurationField halfdays();\n+\n     /**\n      * Get the hour of am/pm (0-11) field for this chronology.\n      * \n      */\n     public abstract DateTimeField weekOfWeekyear();\n \n+    // Weekyear\n+    //-----------------------------------------------------------------------\n     /**\n      * Get the weekyears duration field for this chronology.\n      * \n      */\n     public abstract DateTimeField weekyear();\n \n+    /**\n+     * Get the year of a week based year in a century field for this chronology.\n+     * \n+     * @return DateTimeField or UnsupportedDateTimeField if unsupported\n+     */\n+    public abstract  DateTimeField weekyearOfCentury();\n+\n     // Month\n     //-----------------------------------------------------------------------\n     /**\n      */\n     public abstract DateTimeField yearOfCentury();\n \n+    // Century\n+    //-----------------------------------------------------------------------\n     /**\n      * Get the centuries duration field for this chronology.\n      * \n      */\n     public abstract DateTimeField centuryOfEra();\n \n+    // Era\n+    //-----------------------------------------------------------------------\n     /**\n      * Get the eras duration field for this chronology.\n      * \n      */\n     public abstract DateTimeField era();\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Gets a debugging toString.\n      * \n--- a/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n                 return chronology.monthOfYear();\n             case DAY_OF_MONTH:\n                 return chronology.dayOfMonth();\n-                // TODO: Add to Chronology\n-                //case WEEKYEAR_OF_CENTURY:\n-                //return chronology.weekyearOfCentury();\n+            case WEEKYEAR_OF_CENTURY:\n+                return chronology.weekyearOfCentury();\n             case WEEKYEAR:\n                 return chronology.weekyear();\n             case WEEK_OF_WEEKYEAR:\n--- a/JodaTime/src/java/org/joda/time/DurationFieldType.java\n+++ b/JodaTime/src/java/org/joda/time/DurationFieldType.java\n                 return chronology.weeks();\n             case DAYS:\n                 return chronology.days();\n-                // TODO: Add to Chronology\n-                //case HALFDAYS:\n-                //return chronology.halfdays();\n+            case HALFDAYS:\n+                return chronology.halfdays();\n             case HOURS:\n                 return chronology.hours();\n             case MINUTES:\n--- a/JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/AssembledChronology.java\n     private transient DurationField iSeconds;\n     private transient DurationField iMinutes;\n     private transient DurationField iHours;\n+    private transient DurationField iHalfdays;\n \n     private transient DurationField iDays;\n     private transient DurationField iWeeks;\n     private transient DateTimeField iDayOfYear;\n     private transient DateTimeField iWeekOfWeekyear;\n     private transient DateTimeField iWeekyear;\n+    private transient DateTimeField iWeekyearOfCentury;\n     private transient DateTimeField iMonthOfYear;\n     private transient DateTimeField iYear;\n     private transient DateTimeField iYearOfEra;\n         return iClockhourOfDay;\n     }\n \n+    public final DurationField halfdays() {\n+        return iHalfdays;\n+    }\n+\n     public final DateTimeField hourOfHalfday() {\n         return iHourOfHalfday;\n     }\n \n     public final DateTimeField weekyear() {\n         return iWeekyear;\n+    }\n+\n+    public final DateTimeField weekyearOfCentury() {\n+        return iWeekyearOfCentury;\n     }\n \n     public final DurationField months() {\n             iSeconds   = (f = fields.seconds)   != null ? f : super.seconds();\n             iMinutes   = (f = fields.minutes)   != null ? f : super.minutes();\n             iHours     = (f = fields.hours)     != null ? f : super.hours();\n+            iHalfdays  = (f = fields.halfdays)  != null ? f : super.halfdays();\n             iDays      = (f = fields.days)      != null ? f : super.days();\n             iWeeks     = (f = fields.weeks)     != null ? f : super.weeks();\n             iWeekyears = (f = fields.weekyears) != null ? f : super.weekyears();\n             iDayOfYear          = (f = fields.dayOfYear)          != null ? f : super.dayOfYear();\n             iWeekOfWeekyear     = (f = fields.weekOfWeekyear)     != null ? f : super.weekOfWeekyear();\n             iWeekyear           = (f = fields.weekyear)           != null ? f : super.weekyear();\n+            iWeekyearOfCentury  = (f = fields.weekyearOfCentury)  != null ? f : super.weekyearOfCentury();\n             iMonthOfYear        = (f = fields.monthOfYear)        != null ? f : super.monthOfYear();\n             iYear               = (f = fields.year)               != null ? f : super.year();\n             iYearOfEra          = (f = fields.yearOfEra)          != null ? f : super.yearOfEra();\n         public DurationField seconds;\n         public DurationField minutes;\n         public DurationField hours;\n+        public DurationField halfdays;\n     \n         public DurationField days;\n         public DurationField weeks;\n         public DateTimeField dayOfYear;\n         public DateTimeField weekOfWeekyear;\n         public DateTimeField weekyear;\n+        public DateTimeField weekyearOfCentury;\n         public DateTimeField monthOfYear;\n         public DateTimeField year;\n         public DateTimeField yearOfEra;\n                 if (isSupported(f = chrono.hours())) {\n                     hours = f;\n                 }\n+                if (isSupported(f = chrono.halfdays())) {\n+                    halfdays = f;\n+                }\n                 if (isSupported(f = chrono.days())) {\n                     days = f;\n                 }\n                 if (isSupported(f = chrono.weekyear())) {\n                     weekyear = f;\n                 }\n+                if (isSupported(f = chrono.weekyearOfCentury())) {\n+                    weekyearOfCentury = f;\n+                }\n                 if (isSupported(f = chrono.monthOfYear())) {\n                     monthOfYear = f;\n                 }\n--- a/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BaseChronology.java\n import java.io.Serializable;\n \n import org.joda.time.Chronology;\n+import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeZone;\n-import org.joda.time.DateTimeField;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n import org.joda.time.ReadablePartial;\n         return UnsupportedDateTimeField.getInstance(DateTimeFieldType.clockhourOfDay(), hours());\n     }\n \n+    // Halfday\n+    //-----------------------------------------------------------------------\n     /**\n      * Get the halfdays duration field for this chronology.\n      * \n         return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekOfWeekyear(), weeks());\n     }\n \n+    // Weekyear\n+    //-----------------------------------------------------------------------\n     /**\n      * Get the weekyears duration field for this chronology.\n      * \n         return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyear(), weekyears());\n     }\n \n+    /**\n+     * Get the year of a week based year in a century field for this chronology.\n+     * \n+     * @return DateTimeField or UnsupportedDateTimeField if unsupported\n+     */\n+    public DateTimeField weekyearOfCentury() {\n+        return UnsupportedDateTimeField.getInstance(DateTimeFieldType.weekyearOfCentury(), weekyears());\n+    }\n+\n     // Month\n     //-----------------------------------------------------------------------\n     /**\n         return UnsupportedDateTimeField.getInstance(DateTimeFieldType.yearOfCentury(), years());\n     }\n \n+    // Century\n+    //-----------------------------------------------------------------------\n     /**\n      * Get the centuries duration field for this chronology.\n      * \n         return UnsupportedDateTimeField.getInstance(DateTimeFieldType.centuryOfEra(), centuries());\n     }\n \n+    // Era\n+    //-----------------------------------------------------------------------\n     /**\n      * Get the eras duration field for this chronology.\n      * \n         return UnsupportedDateTimeField.getInstance(DateTimeFieldType.era(), eras());\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Gets a debugging toString.\n      * \n--- a/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BaseGJChronology.java\n         fields.seconds = cSecondsField;\n         fields.minutes = cMinutesField;\n         fields.hours = cHoursField;\n-        //fields.halfdays = cHalfdaysField;  Doesn't exist in public interface\n+        fields.halfdays = cHalfdaysField;\n         fields.days = cDaysField;\n         fields.weeks = cWeeksField;\n \n         fields.monthOfYear = new GJMonthOfYearDateTimeField(this);\n         fields.weekyear = new GJWeekyearDateTimeField(this);\n         fields.weekOfWeekyear = new GJWeekOfWeekyearDateTimeField(this, fields.weeks);\n-\n+        \n+        field = new RemainderDateTimeField(\n+            fields.weekyear, DateTimeFieldType.weekyearOfCentury(), 100);\n+        fields.weekyearOfCentury = new OffsetDateTimeField(\n+            field, DateTimeFieldType.weekyearOfCentury(), 1);\n+        \n         // The remaining (imprecise) durations are available from the newly\n         // created datetime fields.\n \n--- a/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BuddhistChronology.java\n             fields.yearOfCentury = new OffsetDateTimeField(\n                 field, DateTimeFieldType.yearOfCentury(), 1);\n             \n+            field = new RemainderDateTimeField(\n+                fields.weekyear, DateTimeFieldType.weekyearOfCentury(), 100);\n+            fields.weekyearOfCentury = new OffsetDateTimeField(\n+                field, DateTimeFieldType.weekyearOfCentury(), 1);\n+            \n             fields.era = BuddhistEraDateTimeField.INSTANCE;\n         }\n     }\n--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n             fields.months = fields.monthOfYear.getDurationField();\n             \n             fields.weekyear = new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, true);\n+            fields.weekyearOfCentury = new ImpreciseCutoverField\n+                (julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears);\n             fields.weekyears = fields.weekyear.getDurationField();\n         }\n     }\n--- a/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ISOChronology.java\n                 ISOYearOfEraDateTimeField.INSTANCE, DateTimeFieldType.centuryOfEra(), 100);\n             fields.yearOfCentury = new RemainderDateTimeField(\n                 (DividedDateTimeField) fields.centuryOfEra, DateTimeFieldType.yearOfCentury());\n+            fields.weekyearOfCentury = new RemainderDateTimeField(\n+                (DividedDateTimeField) fields.centuryOfEra, DateTimeFieldType.weekyearOfCentury());\n \n             fields.centuries = fields.centuryOfEra.getDurationField();\n         }\n--- a/JodaTime/src/java/org/joda/time/chrono/LenientChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/LenientChronology.java\n         fields.monthOfYear = convertField(fields.monthOfYear);\n         fields.weekOfWeekyear = convertField(fields.weekOfWeekyear);\n         fields.weekyear = convertField(fields.weekyear);\n+        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury);\n \n         fields.millisOfSecond = convertField(fields.millisOfSecond);\n         fields.millisOfDay = convertField(fields.millisOfDay);\n--- a/JodaTime/src/java/org/joda/time/chrono/LimitChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/LimitChronology.java\n         fields.weeks = convertField(fields.weeks, converted);\n         fields.days = convertField(fields.days, converted);\n \n+        fields.halfdays = convertField(fields.halfdays, converted);\n         fields.hours = convertField(fields.hours, converted);\n         fields.minutes = convertField(fields.minutes, converted);\n         fields.seconds = convertField(fields.seconds, converted);\n         fields.monthOfYear = convertField(fields.monthOfYear, converted);\n         fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\n         fields.weekyear = convertField(fields.weekyear, converted);\n+        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\n \n         fields.millisOfSecond = convertField(fields.millisOfSecond, converted);\n         fields.millisOfDay = convertField(fields.millisOfDay, converted);\n--- a/JodaTime/src/java/org/joda/time/chrono/StrictChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/StrictChronology.java\n         fields.monthOfYear = convertField(fields.monthOfYear);\n         fields.weekOfWeekyear = convertField(fields.weekOfWeekyear);\n         fields.weekyear = convertField(fields.weekyear);\n+        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury);\n \n         fields.millisOfSecond = convertField(fields.millisOfSecond);\n         fields.millisOfDay = convertField(fields.millisOfDay);\n--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n         fields.weeks = convertField(fields.weeks, converted);\n         fields.days = convertField(fields.days, converted);\n \n+        fields.halfdays = convertField(fields.halfdays, converted);\n         fields.hours = convertField(fields.hours, converted);\n         fields.minutes = convertField(fields.minutes, converted);\n         fields.seconds = convertField(fields.seconds, converted);\n         fields.monthOfYear = convertField(fields.monthOfYear, converted);\n         fields.weekOfWeekyear = convertField(fields.weekOfWeekyear, converted);\n         fields.weekyear = convertField(fields.weekyear, converted);\n+        fields.weekyearOfCentury = convertField(fields.weekyearOfCentury, converted);\n \n         fields.millisOfSecond = convertField(fields.millisOfSecond, converted);\n         fields.millisOfDay = convertField(fields.millisOfDay, converted);\n--- a/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java\n         assertEquals(\"months\", BuddhistChronology.getInstance().months().getName());\n         assertEquals(\"weeks\", BuddhistChronology.getInstance().weeks().getName());\n         assertEquals(\"days\", BuddhistChronology.getInstance().days().getName());\n+        assertEquals(\"halfdays\", GregorianChronology.getInstance().halfdays().getName());\n         assertEquals(\"hours\", BuddhistChronology.getInstance().hours().getName());\n         assertEquals(\"minutes\", BuddhistChronology.getInstance().minutes().getName());\n         assertEquals(\"seconds\", BuddhistChronology.getInstance().seconds().getName());\n         assertEquals(true, BuddhistChronology.getInstance().months().isSupported());\n         assertEquals(true, BuddhistChronology.getInstance().weeks().isSupported());\n         assertEquals(true, BuddhistChronology.getInstance().days().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().halfdays().isSupported());\n         assertEquals(true, BuddhistChronology.getInstance().hours().isSupported());\n         assertEquals(true, BuddhistChronology.getInstance().minutes().isSupported());\n         assertEquals(true, BuddhistChronology.getInstance().seconds().isSupported());\n         assertEquals(false, BuddhistChronology.getInstance().months().isPrecise());\n         assertEquals(false, BuddhistChronology.getInstance().weeks().isPrecise());\n         assertEquals(false, BuddhistChronology.getInstance().days().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstance().halfdays().isPrecise());\n         assertEquals(true, BuddhistChronology.getInstance().hours().isPrecise());\n         assertEquals(true, BuddhistChronology.getInstance().minutes().isPrecise());\n         assertEquals(true, BuddhistChronology.getInstance().seconds().isPrecise());\n         assertEquals(false, BuddhistChronology.getInstanceUTC().months().isPrecise());\n         assertEquals(true, BuddhistChronology.getInstanceUTC().weeks().isPrecise());\n         assertEquals(true, BuddhistChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstanceUTC().halfdays().isPrecise());\n         assertEquals(true, BuddhistChronology.getInstanceUTC().hours().isPrecise());\n         assertEquals(true, BuddhistChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, BuddhistChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(\"yearOfEra\", BuddhistChronology.getInstance().yearOfEra().getName());\n         assertEquals(\"year\", BuddhistChronology.getInstance().year().getName());\n         assertEquals(\"monthOfYear\", BuddhistChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", BuddhistChronology.getInstance().weekyearOfCentury().getName());\n         assertEquals(\"weekyear\", BuddhistChronology.getInstance().weekyear().getName());\n         assertEquals(\"weekOfWeekyear\", BuddhistChronology.getInstance().weekOfWeekyear().getName());\n         assertEquals(\"dayOfYear\", BuddhistChronology.getInstance().dayOfYear().getName());\n         assertEquals(true, BuddhistChronology.getInstance().yearOfEra().isSupported());\n         assertEquals(true, BuddhistChronology.getInstance().year().isSupported());\n         assertEquals(true, BuddhistChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, BuddhistChronology.getInstance().weekyearOfCentury().isSupported());\n         assertEquals(true, BuddhistChronology.getInstance().weekyear().isSupported());\n         assertEquals(true, BuddhistChronology.getInstance().weekOfWeekyear().isSupported());\n         assertEquals(true, BuddhistChronology.getInstance().dayOfYear().isSupported());\n--- a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n         assertEquals(\"months\", CopticChronology.getInstance().months().getName());\n         assertEquals(\"weeks\", CopticChronology.getInstance().weeks().getName());\n         assertEquals(\"days\", CopticChronology.getInstance().days().getName());\n+        assertEquals(\"halfdays\", CopticChronology.getInstance().halfdays().getName());\n         assertEquals(\"hours\", CopticChronology.getInstance().hours().getName());\n         assertEquals(\"minutes\", CopticChronology.getInstance().minutes().getName());\n         assertEquals(\"seconds\", CopticChronology.getInstance().seconds().getName());\n         assertEquals(true, CopticChronology.getInstance().months().isSupported());\n         assertEquals(true, CopticChronology.getInstance().weeks().isSupported());\n         assertEquals(true, CopticChronology.getInstance().days().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().halfdays().isSupported());\n         assertEquals(true, CopticChronology.getInstance().hours().isSupported());\n         assertEquals(true, CopticChronology.getInstance().minutes().isSupported());\n         assertEquals(true, CopticChronology.getInstance().seconds().isSupported());\n         assertEquals(false, CopticChronology.getInstance().months().isPrecise());\n         assertEquals(false, CopticChronology.getInstance().weeks().isPrecise());\n         assertEquals(false, CopticChronology.getInstance().days().isPrecise());\n+        assertEquals(false, CopticChronology.getInstance().halfdays().isPrecise());\n         assertEquals(true, CopticChronology.getInstance().hours().isPrecise());\n         assertEquals(true, CopticChronology.getInstance().minutes().isPrecise());\n         assertEquals(true, CopticChronology.getInstance().seconds().isPrecise());\n         assertEquals(true, CopticChronology.getInstanceUTC().months().isPrecise());\n         assertEquals(true, CopticChronology.getInstanceUTC().weeks().isPrecise());\n         assertEquals(true, CopticChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, CopticChronology.getInstanceUTC().halfdays().isPrecise());\n         assertEquals(true, CopticChronology.getInstanceUTC().hours().isPrecise());\n         assertEquals(true, CopticChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, CopticChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(\"yearOfEra\", CopticChronology.getInstance().yearOfEra().getName());\n         assertEquals(\"year\", CopticChronology.getInstance().year().getName());\n         assertEquals(\"monthOfYear\", CopticChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", CopticChronology.getInstance().weekyearOfCentury().getName());\n         assertEquals(\"weekyear\", CopticChronology.getInstance().weekyear().getName());\n         assertEquals(\"weekOfWeekyear\", CopticChronology.getInstance().weekOfWeekyear().getName());\n         assertEquals(\"dayOfYear\", CopticChronology.getInstance().dayOfYear().getName());\n         assertEquals(true, CopticChronology.getInstance().yearOfEra().isSupported());\n         assertEquals(true, CopticChronology.getInstance().year().isSupported());\n         assertEquals(true, CopticChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, CopticChronology.getInstance().weekyearOfCentury().isSupported());\n         assertEquals(true, CopticChronology.getInstance().weekyear().isSupported());\n         assertEquals(true, CopticChronology.getInstance().weekOfWeekyear().isSupported());\n         assertEquals(true, CopticChronology.getInstance().dayOfYear().isSupported());\n--- a/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java\n         assertEquals(\"weekyears\", GJChronology.getInstance().weekyears().getName());\n         assertEquals(\"months\", GJChronology.getInstance().months().getName());\n         assertEquals(\"weeks\", GJChronology.getInstance().weeks().getName());\n+        assertEquals(\"halfdays\", GJChronology.getInstance().halfdays().getName());\n         assertEquals(\"days\", GJChronology.getInstance().days().getName());\n         assertEquals(\"hours\", GJChronology.getInstance().hours().getName());\n         assertEquals(\"minutes\", GJChronology.getInstance().minutes().getName());\n         assertEquals(true, GJChronology.getInstance().months().isSupported());\n         assertEquals(true, GJChronology.getInstance().weeks().isSupported());\n         assertEquals(true, GJChronology.getInstance().days().isSupported());\n+        assertEquals(true, GJChronology.getInstance().halfdays().isSupported());\n         assertEquals(true, GJChronology.getInstance().hours().isSupported());\n         assertEquals(true, GJChronology.getInstance().minutes().isSupported());\n         assertEquals(true, GJChronology.getInstance().seconds().isSupported());\n         assertEquals(false, GJChronology.getInstance().months().isPrecise());\n         assertEquals(false, GJChronology.getInstance().weeks().isPrecise());\n         assertEquals(false, GJChronology.getInstance().days().isPrecise());\n+        assertEquals(false, GJChronology.getInstance().halfdays().isPrecise());\n         assertEquals(true, GJChronology.getInstance().hours().isPrecise());\n         assertEquals(true, GJChronology.getInstance().minutes().isPrecise());\n         assertEquals(true, GJChronology.getInstance().seconds().isPrecise());\n         assertEquals(false, GJChronology.getInstanceUTC().months().isPrecise());\n         assertEquals(true, GJChronology.getInstanceUTC().weeks().isPrecise());\n         assertEquals(true, GJChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, GJChronology.getInstanceUTC().halfdays().isPrecise());\n         assertEquals(true, GJChronology.getInstanceUTC().hours().isPrecise());\n         assertEquals(true, GJChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, GJChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(\"yearOfEra\", GJChronology.getInstance().yearOfEra().getName());\n         assertEquals(\"year\", GJChronology.getInstance().year().getName());\n         assertEquals(\"monthOfYear\", GJChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", GJChronology.getInstance().weekyearOfCentury().getName());\n         assertEquals(\"weekyear\", GJChronology.getInstance().weekyear().getName());\n         assertEquals(\"weekOfWeekyear\", GJChronology.getInstance().weekOfWeekyear().getName());\n         assertEquals(\"dayOfYear\", GJChronology.getInstance().dayOfYear().getName());\n         assertEquals(true, GJChronology.getInstance().yearOfEra().isSupported());\n         assertEquals(true, GJChronology.getInstance().year().isSupported());\n         assertEquals(true, GJChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, GJChronology.getInstance().weekyearOfCentury().isSupported());\n         assertEquals(true, GJChronology.getInstance().weekyear().isSupported());\n         assertEquals(true, GJChronology.getInstance().weekOfWeekyear().isSupported());\n         assertEquals(true, GJChronology.getInstance().dayOfYear().isSupported());\n--- a/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java\n         assertEquals(\"months\", GregorianChronology.getInstance().months().getName());\n         assertEquals(\"weeks\", GregorianChronology.getInstance().weeks().getName());\n         assertEquals(\"days\", GregorianChronology.getInstance().days().getName());\n+        assertEquals(\"halfdays\", GregorianChronology.getInstance().halfdays().getName());\n         assertEquals(\"hours\", GregorianChronology.getInstance().hours().getName());\n         assertEquals(\"minutes\", GregorianChronology.getInstance().minutes().getName());\n         assertEquals(\"seconds\", GregorianChronology.getInstance().seconds().getName());\n         assertEquals(true, GregorianChronology.getInstance().months().isSupported());\n         assertEquals(true, GregorianChronology.getInstance().weeks().isSupported());\n         assertEquals(true, GregorianChronology.getInstance().days().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().halfdays().isSupported());\n         assertEquals(true, GregorianChronology.getInstance().hours().isSupported());\n         assertEquals(true, GregorianChronology.getInstance().minutes().isSupported());\n         assertEquals(true, GregorianChronology.getInstance().seconds().isSupported());\n         assertEquals(false, GregorianChronology.getInstance().months().isPrecise());\n         assertEquals(false, GregorianChronology.getInstance().weeks().isPrecise());\n         assertEquals(false, GregorianChronology.getInstance().days().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstance().halfdays().isPrecise());\n         assertEquals(true, GregorianChronology.getInstance().hours().isPrecise());\n         assertEquals(true, GregorianChronology.getInstance().minutes().isPrecise());\n         assertEquals(true, GregorianChronology.getInstance().seconds().isPrecise());\n         assertEquals(false, GregorianChronology.getInstanceUTC().months().isPrecise());\n         assertEquals(true, GregorianChronology.getInstanceUTC().weeks().isPrecise());\n         assertEquals(true, GregorianChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstanceUTC().halfdays().isPrecise());\n         assertEquals(true, GregorianChronology.getInstanceUTC().hours().isPrecise());\n         assertEquals(true, GregorianChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, GregorianChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(\"yearOfEra\", GregorianChronology.getInstance().yearOfEra().getName());\n         assertEquals(\"year\", GregorianChronology.getInstance().year().getName());\n         assertEquals(\"monthOfYear\", GregorianChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", GregorianChronology.getInstance().weekyearOfCentury().getName());\n         assertEquals(\"weekyear\", GregorianChronology.getInstance().weekyear().getName());\n         assertEquals(\"weekOfWeekyear\", GregorianChronology.getInstance().weekOfWeekyear().getName());\n         assertEquals(\"dayOfYear\", GregorianChronology.getInstance().dayOfYear().getName());\n         assertEquals(true, GregorianChronology.getInstance().yearOfEra().isSupported());\n         assertEquals(true, GregorianChronology.getInstance().year().isSupported());\n         assertEquals(true, GregorianChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, GregorianChronology.getInstance().weekyearOfCentury().isSupported());\n         assertEquals(true, GregorianChronology.getInstance().weekyear().isSupported());\n         assertEquals(true, GregorianChronology.getInstance().weekOfWeekyear().isSupported());\n         assertEquals(true, GregorianChronology.getInstance().dayOfYear().isSupported());\n--- a/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java\n         assertEquals(\"months\", ISOChronology.getInstance().months().getName());\n         assertEquals(\"weeks\", ISOChronology.getInstance().weeks().getName());\n         assertEquals(\"days\", ISOChronology.getInstance().days().getName());\n+        assertEquals(\"halfdays\", ISOChronology.getInstance().halfdays().getName());\n         assertEquals(\"hours\", ISOChronology.getInstance().hours().getName());\n         assertEquals(\"minutes\", ISOChronology.getInstance().minutes().getName());\n         assertEquals(\"seconds\", ISOChronology.getInstance().seconds().getName());\n         assertEquals(true, ISOChronology.getInstance().months().isSupported());\n         assertEquals(true, ISOChronology.getInstance().weeks().isSupported());\n         assertEquals(true, ISOChronology.getInstance().days().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().halfdays().isSupported());\n         assertEquals(true, ISOChronology.getInstance().hours().isSupported());\n         assertEquals(true, ISOChronology.getInstance().minutes().isSupported());\n         assertEquals(true, ISOChronology.getInstance().seconds().isSupported());\n         assertEquals(false, ISOChronology.getInstance().months().isPrecise());\n         assertEquals(false, ISOChronology.getInstance().weeks().isPrecise());\n         assertEquals(false, ISOChronology.getInstance().days().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance().halfdays().isPrecise());\n         assertEquals(true, ISOChronology.getInstance().hours().isPrecise());\n         assertEquals(true, ISOChronology.getInstance().minutes().isPrecise());\n         assertEquals(true, ISOChronology.getInstance().seconds().isPrecise());\n         assertEquals(false, ISOChronology.getInstanceUTC().months().isPrecise());\n         assertEquals(true, ISOChronology.getInstanceUTC().weeks().isPrecise());\n         assertEquals(true, ISOChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, ISOChronology.getInstanceUTC().halfdays().isPrecise());\n         assertEquals(true, ISOChronology.getInstanceUTC().hours().isPrecise());\n         assertEquals(true, ISOChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, ISOChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(\"yearOfEra\", ISOChronology.getInstance().yearOfEra().getName());\n         assertEquals(\"year\", ISOChronology.getInstance().year().getName());\n         assertEquals(\"monthOfYear\", ISOChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", ISOChronology.getInstance().weekyearOfCentury().getName());\n         assertEquals(\"weekyear\", ISOChronology.getInstance().weekyear().getName());\n         assertEquals(\"weekOfWeekyear\", ISOChronology.getInstance().weekOfWeekyear().getName());\n         assertEquals(\"dayOfYear\", ISOChronology.getInstance().dayOfYear().getName());\n         assertEquals(true, ISOChronology.getInstance().yearOfEra().isSupported());\n         assertEquals(true, ISOChronology.getInstance().year().isSupported());\n         assertEquals(true, ISOChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, ISOChronology.getInstance().weekyearOfCentury().isSupported());\n         assertEquals(true, ISOChronology.getInstance().weekyear().isSupported());\n         assertEquals(true, ISOChronology.getInstance().weekOfWeekyear().isSupported());\n         assertEquals(true, ISOChronology.getInstance().dayOfYear().isSupported());\n--- a/JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java\n         assertEquals(\"months\", JulianChronology.getInstance().months().getName());\n         assertEquals(\"weeks\", JulianChronology.getInstance().weeks().getName());\n         assertEquals(\"days\", JulianChronology.getInstance().days().getName());\n+        assertEquals(\"halfdays\", JulianChronology.getInstance().halfdays().getName());\n         assertEquals(\"hours\", JulianChronology.getInstance().hours().getName());\n         assertEquals(\"minutes\", JulianChronology.getInstance().minutes().getName());\n         assertEquals(\"seconds\", JulianChronology.getInstance().seconds().getName());\n         assertEquals(true, JulianChronology.getInstance().months().isSupported());\n         assertEquals(true, JulianChronology.getInstance().weeks().isSupported());\n         assertEquals(true, JulianChronology.getInstance().days().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().halfdays().isSupported());\n         assertEquals(true, JulianChronology.getInstance().hours().isSupported());\n         assertEquals(true, JulianChronology.getInstance().minutes().isSupported());\n         assertEquals(true, JulianChronology.getInstance().seconds().isSupported());\n         assertEquals(false, JulianChronology.getInstance().months().isPrecise());\n         assertEquals(false, JulianChronology.getInstance().weeks().isPrecise());\n         assertEquals(false, JulianChronology.getInstance().days().isPrecise());\n+        assertEquals(false, JulianChronology.getInstance().halfdays().isPrecise());\n         assertEquals(true, JulianChronology.getInstance().hours().isPrecise());\n         assertEquals(true, JulianChronology.getInstance().minutes().isPrecise());\n         assertEquals(true, JulianChronology.getInstance().seconds().isPrecise());\n         assertEquals(false, JulianChronology.getInstanceUTC().months().isPrecise());\n         assertEquals(true, JulianChronology.getInstanceUTC().weeks().isPrecise());\n         assertEquals(true, JulianChronology.getInstanceUTC().days().isPrecise());\n+        assertEquals(true, JulianChronology.getInstanceUTC().halfdays().isPrecise());\n         assertEquals(true, JulianChronology.getInstanceUTC().hours().isPrecise());\n         assertEquals(true, JulianChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, JulianChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(\"yearOfEra\", JulianChronology.getInstance().yearOfEra().getName());\n         assertEquals(\"year\", JulianChronology.getInstance().year().getName());\n         assertEquals(\"monthOfYear\", JulianChronology.getInstance().monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", JulianChronology.getInstance().weekyearOfCentury().getName());\n         assertEquals(\"weekyear\", JulianChronology.getInstance().weekyear().getName());\n         assertEquals(\"weekOfWeekyear\", JulianChronology.getInstance().weekOfWeekyear().getName());\n         assertEquals(\"dayOfYear\", JulianChronology.getInstance().dayOfYear().getName());\n         assertEquals(true, JulianChronology.getInstance().yearOfEra().isSupported());\n         assertEquals(true, JulianChronology.getInstance().year().isSupported());\n         assertEquals(true, JulianChronology.getInstance().monthOfYear().isSupported());\n+        assertEquals(true, JulianChronology.getInstance().weekyearOfCentury().isSupported());\n         assertEquals(true, JulianChronology.getInstance().weekyear().isSupported());\n         assertEquals(true, JulianChronology.getInstance().weekOfWeekyear().isSupported());\n         assertEquals(true, JulianChronology.getInstance().dayOfYear().isSupported());", "timestamp": 1094244515, "metainfo": ""}