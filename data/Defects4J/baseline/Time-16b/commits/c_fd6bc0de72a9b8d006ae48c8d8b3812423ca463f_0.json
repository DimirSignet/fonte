{"sha": "fd6bc0de72a9b8d006ae48c8d8b3812423ca463f", "log": "Add isSupported(type) to bring in line with ReadablePartial and potential future shared interface   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/ReadableInstant.java\n+++ b/JodaTime/src/java/org/joda/time/ReadableInstant.java\n      */\n     int get(DateTimeFieldType type);\n \n+    /**\n+     * Checks whether the field type specified is supported by this implementation.\n+     *\n+     * @param field  the field type to check, may be null which returns false\n+     * @return true if the field is supported\n+     */\n+    boolean isSupported(DateTimeFieldType field);\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Get the value as a simple immutable <code>Instant</code> object.\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n     }\n \n     /**\n+     * Checks if the field type specified is supported by this instant and chronology.\n+     * This can be used to avoid exceptions in {@link #get(DateTimeFieldType)}.\n+     *\n+     * @param type  a field type, usually obtained from DateTimeFieldType\n+     * @return true if the field type is supported\n+     */\n+    public boolean isSupported(DateTimeFieldType type) {\n+        if (type == null) {\n+            return false;\n+        }\n+        return type.getField(getChronology()).isSupported();\n+    }\n+\n+    /**\n      * Get the value of one of the fields of a datetime.\n      * <p>\n      * This could be used to get a field using a different Chronology.", "timestamp": 1106498053, "metainfo": ""}