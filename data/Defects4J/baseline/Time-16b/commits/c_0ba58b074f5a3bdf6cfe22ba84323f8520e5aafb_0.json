{"sha": "0ba58b074f5a3bdf6cfe22ba84323f8520e5aafb", "log": "Added simple time zone builder tests.   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/tz/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/tz/TestAll.java\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         suite.addTest(TestUTCProvider.suite());\n+        suite.addTest(TestBuilder.suite());\n         return suite;\n     }\n \n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n-}\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/tz/TestBuilder.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2005 Stephen Colebourne.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally\n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.tz;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.format.DateTimeFormatterBuilder;\n+\n+/**\n+ * Test cases for DateTimeZoneBuilder.\n+ *\n+ * @author Brian S O'Neill\n+ */\n+public class TestBuilder extends TestCase {\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestBuilder.class);\n+    }\n+\n+    static final DateTimeFormatter OFFSET_FORMATTER = new DateTimeFormatterBuilder()\n+        .appendTimeZoneOffset(null, true, 2, 4)\n+        .toFormatter();\n+\n+    // Each row is {transition, nameKey, standardOffset, offset}\n+    static final String[][] AMERICA_LOS_ANGELES_DATA = {\n+        {null,                            \"LMT\", \"-07:52:58\", \"-07:52:58\"},\n+        {\"1883-11-18T19:52:58.000Z\",      \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1918-03-31T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1918-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1919-03-30T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1919-10-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1942-02-09T02:00:00.000-08:00\", \"PWT\", \"-08:00\", \"-07:00\"},\n+        {\"1945-08-14T23:00:00.000Z\",      \"PPT\", \"-08:00\", \"-07:00\"},\n+        {\"1945-09-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1948-03-14T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1949-01-01T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1950-04-30T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1950-09-24T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1951-04-29T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1951-09-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1952-04-27T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1952-09-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1953-04-26T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1953-09-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1954-04-25T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1954-09-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1955-04-24T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1955-09-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1956-04-29T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1956-09-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1957-04-28T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1957-09-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1958-04-27T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1958-09-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1959-04-26T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1959-09-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1960-04-24T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1960-09-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1961-04-30T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1961-09-24T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1962-04-29T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1962-10-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1963-04-28T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1963-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1964-04-26T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1964-10-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1965-04-25T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1965-10-31T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1966-04-24T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1966-10-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1967-04-30T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1967-10-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1968-04-28T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1968-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1969-04-27T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1969-10-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1970-04-26T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1970-10-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1971-04-25T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1971-10-31T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1972-04-30T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1972-10-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1973-04-29T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1973-10-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1974-01-06T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1974-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1975-02-23T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1975-10-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1976-04-25T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1976-10-31T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1977-04-24T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1977-10-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1978-04-30T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1978-10-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1979-04-29T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1979-10-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1980-04-27T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1980-10-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1981-04-26T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1981-10-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1982-04-25T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1982-10-31T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1983-04-24T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1983-10-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1984-04-29T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1984-10-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1985-04-28T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1985-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1986-04-27T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1986-10-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1987-04-05T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1987-10-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1988-04-03T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1988-10-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1989-04-02T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1989-10-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1990-04-01T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1990-10-28T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1991-04-07T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1991-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1992-04-05T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1992-10-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1993-04-04T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1993-10-31T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1994-04-03T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1994-10-30T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1995-04-02T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1995-10-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1996-04-07T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1996-10-27T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1997-04-06T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1997-10-26T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1998-04-05T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1998-10-25T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"1999-04-04T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"1999-10-31T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+        {\"2000-04-02T02:00:00.000-08:00\", \"PDT\", \"-08:00\", \"-07:00\"},\n+        {\"2000-10-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n+    };\n+\n+    static DateTimeZone buildAmericaLosAngeles() {\n+        return new DateTimeZoneBuilder()\n+            .addCutover(-2147483648, 'w', 1, 1, 0, false, 0)\n+            .setStandardOffset(-28378000)\n+            .setFixedSavings(\"LMT\", 0)\n+            .addCutover(1883, 'w', 11, 18, 0, false, 43200000)\n+            .setStandardOffset(-28800000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1918, 1919, 'w',  3, -1, 7, false, 7200000)\n+            .addRecurringSavings(\"PST\",       0, 1918, 1919, 'w', 10, -1, 7, false, 7200000)\n+            .addRecurringSavings(\"PWT\", 3600000, 1942, 1942, 'w',  2,  9, 0, false, 7200000)\n+            .addRecurringSavings(\"PPT\", 3600000, 1945, 1945, 'u',  8, 14, 0, false, 82800000)\n+            .addRecurringSavings(\"PST\",       0, 1945, 1945, 'w',  9, 30, 0, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1948, 1948, 'w',  3, 14, 0, false, 7200000)\n+            .addRecurringSavings(\"PST\",       0, 1949, 1949, 'w',  1,  1, 0, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1950, 1966, 'w',  4, -1, 7, false, 7200000)\n+            .addRecurringSavings(\"PST\",       0, 1950, 1961, 'w',  9, -1, 7, false, 7200000)\n+            .addRecurringSavings(\"PST\",       0, 1962, 1966, 'w', 10, -1, 7, false, 7200000)\n+            .addRecurringSavings(\"PST\",       0, 1967, 2147483647, 'w', 10, -1, 7, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1967, 1973, 'w', 4, -1,  7, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1974, 1974, 'w', 1,  6,  0, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1975, 1975, 'w', 2, 23,  0, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1976, 1986, 'w', 4, -1,  7, false, 7200000)\n+            .addRecurringSavings(\"PDT\", 3600000, 1987, 2147483647, 'w', 4, 1, 7, true, 7200000)\n+            .toDateTimeZone(\"America/Los_Angeles\");\n+    }\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+\n+    public TestBuilder(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+    }\n+\n+    public void testID() {\n+        DateTimeZone tz = buildAmericaLosAngeles();\n+        assertEquals(\"America/Los_Angeles\", tz.getID());\n+    }\n+\n+    public void testForwardTransitions() {\n+        DateTimeZone tz = buildAmericaLosAngeles();\n+        testForwardTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n+    }\n+\n+    private void testForwardTransitions(DateTimeZone tz, String[][] data) {\n+        long instant = Long.MIN_VALUE;\n+        for (int i=0; i<data.length; i++) {\n+            String[] row = data[i];\n+            long expectedInstant = instant;\n+            if (row[0] != null) {\n+                instant = tz.nextTransition(instant);\n+                expectedInstant = new DateTime(row[0]).getMillis();\n+            }\n+\n+            String expectedKey = row[1];\n+            int expectedStandardOffset = -(int) OFFSET_FORMATTER.parseMillis(row[2]);\n+            int expectedOffset = -(int) OFFSET_FORMATTER.parseMillis(row[3]);\n+\n+            assertEquals(expectedInstant, instant);\n+            assertEquals(expectedKey, tz.getNameKey(instant));\n+            assertEquals(expectedStandardOffset, tz.getStandardOffset(instant));\n+            assertEquals(expectedOffset, tz.getOffset(instant));\n+\n+            // Sample a few instants between transitions.\n+            if (i < data.length - 1) {\n+                long nextInstant = new DateTime(data[i + 1][0]).getMillis();\n+                long span = (nextInstant - instant) / 10;\n+                for (int j=1; j<10; j++) {\n+                    long between = instant + j * span;\n+                    assertEquals(expectedKey, tz.getNameKey(between));\n+                    assertEquals(expectedStandardOffset, tz.getStandardOffset(between));\n+                    assertEquals(expectedOffset, tz.getOffset(between));\n+                }\n+            }\n+        }\n+    }\n+\n+    public void testReverseTransitions() {\n+        DateTimeZone tz = buildAmericaLosAngeles();\n+        testReverseTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n+    }\n+\n+    private void testReverseTransitions(DateTimeZone tz, String[][] data) {\n+        long instant = new DateTime(data[data.length - 1][0]).getMillis();\n+        for (int i=data.length; --i>=1; ) {\n+            String[] row = data[i];\n+            String[] prevRow = data[i - 1];\n+            instant = tz.previousTransition(instant);\n+\n+            long expectedInstant = new DateTime(row[0]).getMillis() - 1;\n+            String expectedKey = prevRow[1];\n+            int expectedStandardOffset = -(int) OFFSET_FORMATTER.parseMillis(prevRow[2]);\n+            int expectedOffset = -(int) OFFSET_FORMATTER.parseMillis(prevRow[3]);\n+\n+            assertEquals(expectedInstant, instant);\n+            assertEquals(expectedKey, tz.getNameKey(instant));\n+            assertEquals(expectedStandardOffset, tz.getStandardOffset(instant));\n+            assertEquals(expectedOffset, tz.getOffset(instant));\n+        }\n+    }\n+}", "timestamp": 1107628910, "metainfo": ""}