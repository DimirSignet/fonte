{"sha": "16834a41cdb318fc09542e8a41ddf3b28a217627", "log": "Reinstate LocalDate deprecated methods as the binary incompatibility isn't worth the hassle  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/main/java/org/joda/time/LocalDate.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Converts this LocalDate to a full datetime at midnight using the default\n+     * time zone.\n+     * <p>\n+     * This method will throw an exception if the default time zone switches\n+     * to Daylight Savings Time at midnight and this LocalDate represents\n+     * that switchover date. The problem is that there is no such time as\n+     * midnight on the required date, and as such an exception is thrown.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     * \n+     * @return this date as a datetime at midnight\n+     * @deprecated Use {@link #toDateTimeAtStartOfDay()} which won't throw an exception\n+     */\n+    @Deprecated\n+    public DateTime toDateTimeAtMidnight() {\n+        return toDateTimeAtMidnight(null);\n+    }\n+\n+    /**\n+     * Converts this LocalDate to a full datetime at midnight using the\n+     * specified time zone.\n+     * <p>\n+     * This method will throw an exception if the time zone switches\n+     * to Daylight Savings Time at midnight and this LocalDate represents\n+     * that switchover date. The problem is that there is no such time as\n+     * midnight on the required date, and as such an exception is thrown.\n+     * <p>\n+     * This method uses the chronology from this instance plus the time zone\n+     * specified.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     *\n+     * @param zone  the zone to use, null means default zone\n+     * @return this date as a datetime at midnight\n+     * @deprecated Use {@link #toDateTimeAtStartOfDay(DateTimeZone)} which won't throw an exception\n+     */\n+    @Deprecated\n+    public DateTime toDateTimeAtMidnight(DateTimeZone zone) {\n+        zone = DateTimeUtils.getZone(zone);\n+        Chronology chrono = getChronology().withZone(zone);\n+        return new DateTime(getYear(), getMonthOfYear(), getDayOfMonth(), 0, 0, 0, 0, chrono);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Converts this LocalDate to a full datetime using the default time zone\n      * setting the date fields from this instance and the time fields from\n      * the current time.\n--- a/JodaTime/src/test/java/org/joda/time/TestLocalDate_Basics.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestLocalDate_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n+    public void testToDateTimeAtMidnight() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTimeAtMidnight();\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n+    public void testToDateTimeAtMidnight_Zone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTimeAtMidnight(TOKYO);\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_TOKYO), test);\n+    }\n+\n+    @SuppressWarnings(\"deprecation\")\n+    public void testToDateTimeAtMidnight_nullZone() {\n+        LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n+        \n+        DateTime test = base.toDateTimeAtMidnight((DateTimeZone) null);\n+        check(base, 2005, 6, 9);\n+        assertEquals(new DateTime(2005, 6, 9, 0, 0, 0, 0, COPTIC_LONDON), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToDateTimeAtCurrentTime() {\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n         DateTime dt = new DateTime(2004, 6, 9, 6, 7, 8, 9);", "timestamp": 1282092586, "metainfo": ""}