{"sha": "3c2898ad5dede0054c4ad88fe3487aeae4e95bef", "log": "Add RPartial converter   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/convert/ConverterManager.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ConverterManager.java\n         });\n \n         iPartialConverters = new ConverterSet(new Converter[] {\n+            ReadablePartialConverter.INSTANCE,\n             ReadableInstantConverter.INSTANCE,\n             StringConverter.INSTANCE,\n             CalendarConverter.INSTANCE,\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/convert/ReadablePartialConverter.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.ReadablePartial;\n+\n+/**\n+ * ReadablePartialConverter extracts partial fields and chronology from a ReadablePartial.\n+ *\n+ * @author Stephen Colebourne\n+ * @since 1.0\n+ */\n+class ReadablePartialConverter extends AbstractConverter\n+        implements PartialConverter {\n+\n+    /**\n+     * Singleton instance.\n+     */\n+    static final ReadablePartialConverter INSTANCE = new ReadablePartialConverter();\n+\n+    /**\n+     * Restricted constructor.\n+     */\n+    protected ReadablePartialConverter() {\n+        super();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the chronology, which is taken from the ReadablePartial.\n+     * \n+     * @param object  the ReadablePartial to convert, must not be null\n+     * @param zone  the specified zone to use, null means default zone\n+     * @return the chronology, never null\n+     */\n+    public Chronology getChronology(Object object, DateTimeZone zone) {\n+        return getChronology(object, (Chronology) null).withZone(zone);\n+    }\n+\n+    /**\n+     * Gets the chronology, which is taken from the ReadableInstant.\n+     * <p>\n+     * If the passed in chronology is non-null, it is used.\n+     * Otherwise the chronology from the instant is used.\n+     * \n+     * @param object  the ReadablePartial to convert, must not be null\n+     * @param chrono  the chronology to use, null means use that from object\n+     * @return the chronology, never null\n+     */\n+    public Chronology getChronology(Object object, Chronology chrono) {\n+        if (chrono == null) {\n+            chrono = ((ReadablePartial) object).getChronology();\n+            chrono = DateTimeUtils.getChronology(chrono);\n+        }\n+        return chrono;\n+    }\n+\n+    /**\n+     * Extracts the values of the partial from an object of this converter's type.\n+     * The chrono parameter is a hint to the converter, should it require a\n+     * chronology to aid in conversion.\n+     * \n+     * @param fieldSource  a partial that provides access to the fields.\n+     *  This partial may be incomplete and only getFieldType(int) should be used\n+     * @param object  the object to convert\n+     * @param chrono  the chronology to use, which is the non-null result of getChronology()\n+     * @return the array of field values that match the fieldSource, must be non-null valid\n+     * @throws ClassCastException if the object is invalid\n+     */\n+    public int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono) {\n+        ReadablePartial input = (ReadablePartial) object;\n+        int size = fieldSource.size();\n+        if (input.size() != size) {\n+            throw new IllegalArgumentException(\"Partial field type lists are different\");\n+        }\n+        int[] values = new int[size];\n+        for (int i = 0; i < size; i++) {\n+            if (fieldSource.getFieldType(i) != input.getFieldType(i)) {\n+                throw new IllegalArgumentException(\"Partial field type lists are different\");\n+            }\n+            values[i] = input.getValue(i);\n+        }\n+        chrono.validate(fieldSource, values);\n+        return values;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns ReadableInstant.class.\n+     * \n+     * @return ReadableInstant.class\n+     */\n+    public Class getSupportedType() {\n+        return ReadablePartial.class;\n+    }\n+\n+}\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n         assertEquals(40, test.getMillisOfSecond());\n     }\n \n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_todObject() throws Throwable {\n+        TimeOfDay base = new TimeOfDay(10, 20, 30, 40, Chronology.getCoptic(PARIS));\n+        TimeOfDay test = new TimeOfDay(base);\n+        assertEquals(Chronology.getCopticUTC(), test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Test constructor (Object, Chronology)\n--- a/JodaTime/src/test/org/joda/time/convert/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestAll.java\n         suite.addTest(TestReadableDurationConverter.suite());\n         suite.addTest(TestReadableIntervalConverter.suite());\n         suite.addTest(TestReadableInstantConverter.suite());\n+        suite.addTest(TestReadablePartialConverter.suite());\n         suite.addTest(TestReadablePeriodConverter.suite());\n         suite.addTest(TestStringConverter.suite());\n         return suite;\n--- a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n import org.joda.time.ReadableDuration;\n import org.joda.time.ReadableInstant;\n import org.joda.time.ReadableInterval;\n+import org.joda.time.TimeOfDay;\n \n /**\n  * This class is a JUnit test for ConverterManager.\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n+    private static final int PARTIAL_SIZE = 7;\n+    \n     public void testGetPartialConverter() {\n         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n         assertEquals(Long.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n+        assertEquals(ReadablePartial.class, c.getSupportedType());\n         \n         c = ConverterManager.getInstance().getPartialConverter(new DateTime());\n         assertEquals(ReadableInstant.class, c.getSupportedType());\n         } finally {\n             ConverterManager.getInstance().addPartialConverter(NullConverter.INSTANCE);\n         }\n-        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n     public void testGetPartialConverterOKMultipleMatches() {\n         } finally {\n             ConverterManager.getInstance().removePartialConverter(c);\n         }\n-        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n     public void testGetPartialConverterBadMultipleMatches() {\n         } finally {\n             ConverterManager.getInstance().removePartialConverter(c);\n         }\n-        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testGetPartialConverters() {\n         PartialConverter[] array = ConverterManager.getInstance().getPartialConverters();\n-        assertEquals(6, array.length);\n+        assertEquals(PARTIAL_SIZE, array.length);\n     }\n \n     //-----------------------------------------------------------------------\n             PartialConverter removed = ConverterManager.getInstance().addPartialConverter(c);\n             assertEquals(null, removed);\n             assertEquals(Boolean.class, ConverterManager.getInstance().getPartialConverter(Boolean.TRUE).getSupportedType());\n-            assertEquals(7, ConverterManager.getInstance().getPartialConverters().length);\n+            assertEquals(PARTIAL_SIZE + 1, ConverterManager.getInstance().getPartialConverters().length);\n         } finally {\n             ConverterManager.getInstance().removePartialConverter(c);\n         }\n-        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n     public void testAddPartialConverter2() {\n             PartialConverter removed = ConverterManager.getInstance().addPartialConverter(c);\n             assertEquals(StringConverter.INSTANCE, removed);\n             assertEquals(String.class, ConverterManager.getInstance().getPartialConverter(\"\").getSupportedType());\n-            assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+            assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n         } finally {\n             ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE);\n         }\n-        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n     public void testAddPartialConverter3() {\n         PartialConverter removed = ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE);\n         assertEquals(null, removed);\n-        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n     public void testAddPartialConverter4() {\n         PartialConverter removed = ConverterManager.getInstance().addPartialConverter(null);\n         assertEquals(null, removed);\n-        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n     public void testAddPartialConverterSecurity() {\n             System.setSecurityManager(null);\n             Policy.setPolicy(ALLOW);\n         }\n-        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n     //-----------------------------------------------------------------------\n         try {\n             PartialConverter removed = ConverterManager.getInstance().removePartialConverter(StringConverter.INSTANCE);\n             assertEquals(StringConverter.INSTANCE, removed);\n-            assertEquals(5, ConverterManager.getInstance().getPartialConverters().length);\n+            assertEquals(PARTIAL_SIZE - 1, ConverterManager.getInstance().getPartialConverters().length);\n         } finally {\n             ConverterManager.getInstance().addPartialConverter(StringConverter.INSTANCE);\n         }\n-        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n     public void testRemovePartialConverter2() {\n         };\n         PartialConverter removed = ConverterManager.getInstance().removePartialConverter(c);\n         assertEquals(null, removed);\n-        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n     public void testRemovePartialConverter3() {\n         PartialConverter removed = ConverterManager.getInstance().removePartialConverter(null);\n         assertEquals(null, removed);\n-        assertEquals(6, ConverterManager.getInstance().getPartialConverters().length);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n     public void testRemovePartialConverterSecurity() {\n             System.setSecurityManager(null);\n             Policy.setPolicy(ALLOW);\n         }\n-        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+        assertEquals(PARTIAL_SIZE, ConverterManager.getInstance().getPartialConverters().length);\n     }\n \n     //-----------------------------------------------------------------------\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n-        assertEquals(\"ConverterManager[6 instant,6 partial,5 duration,5 period,3 interval]\", ConverterManager.getInstance().toString());\n+        assertEquals(\"ConverterManager[6 instant,7 partial,5 duration,5 period,3 interval]\", ConverterManager.getInstance().toString());\n     }\n \n }\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadablePartialConverter.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeField;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.ReadablePartial;\n+import org.joda.time.TimeOfDay;\n+import org.joda.time.YearMonthDay;\n+import org.joda.time.base.BasePartial;\n+import org.joda.time.chrono.BuddhistChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for ReadablePartialConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestReadablePartialConverter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final Chronology ISO = ISOChronology.getInstance();\n+    private static final Chronology JULIAN = JulianChronology.getInstance();\n+    private static final Chronology BUDDHIST = BuddhistChronology.getInstance();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestReadablePartialConverter.class);\n+    }\n+\n+    public TestReadablePartialConverter(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = ReadablePartialConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor(null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(ReadablePartial.class, ReadablePartialConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Object_Zone() throws Exception {\n+        assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n+        assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n+        assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n+    }\n+\n+    public void testGetChronology_Object_Chronology() throws Exception {\n+        assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n+        assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n+        assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetPartialValues() throws Exception {\n+        TimeOfDay tod = new TimeOfDay();\n+        int[] expected = new int[] {1, 2, 3, 4};\n+        int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), Chronology.getISO(PARIS));\n+        assertEquals(true, Arrays.equals(expected, actual));\n+        \n+        try {\n+            ReadablePartialConverter.INSTANCE.getPartialValues(tod, new YearMonthDay(2005, 6, 9), JULIAN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ReadablePartialConverter.INSTANCE.getPartialValues(tod, new MockTOD(), JULIAN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    static class MockTOD extends BasePartial {\n+        protected DateTimeField getField(int index, Chronology chrono) {\n+            switch (index) {\n+                case 0:\n+                return chrono.hourOfDay();\n+                case 1:\n+                return chrono.minuteOfHour();\n+                case 2:\n+                return chrono.year();\n+                case 3:\n+                return chrono.era();\n+            }\n+            return null;\n+        }\n+        public int size() {\n+            return 4;\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[org.joda.time.ReadablePartial]\", ReadablePartialConverter.INSTANCE.toString());\n+    }\n+\n+}", "timestamp": 1095005548, "metainfo": ""}