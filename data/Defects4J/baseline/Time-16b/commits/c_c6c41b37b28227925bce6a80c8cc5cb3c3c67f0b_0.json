{"sha": "c6c41b37b28227925bce6a80c8cc5cb3c3c67f0b", "log": "Refactor Period formatting to match DateTime, part 2   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java\n      * @return the value as an ISO8601 string\n      */\n     public String toString() {\n-        return ISOPeriodFormat.getInstance().standard().print(this);\n+        return ISOPeriodFormat.standard().print(this);\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n      */\n     public void setInto(ReadWritablePeriod period, Object object, Chronology chrono) {\n         String str = (String) object;\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         period.clear();\n         int pos = parser.parseInto(period, str, 0);\n         if (pos < str.length()) {\n \n         DateTimeFormatter dateTimeParser = ISODateTimeFormat.dateTimeParser();\n         dateTimeParser = dateTimeParser.withChronology(chrono);\n-        PeriodFormatter periodParser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter periodParser = ISOPeriodFormat.standard();\n         long startInstant = 0, endInstant = 0;\n         Period period = null;\n         Chronology parsedChrono = null;\n--- a/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java\n package org.joda.time.format;\n \n /**\n- * ISOPeriodFormat provides factory methods for the ISO8601 standard.\n+ * Factory that creates instances of PeriodFormatter for the ISO8601 standard.\n+ * <p>\n+ * Period formatting is performed by the {@link PeriodFormatter} class.\n+ * Three classes provide factory methods to create formatters, and this is one.\n+ * The others are {@link PeriodFormat} and {@link PeriodFormatterBuilder}.\n  * <p>\n  * ISOPeriodFormat is thread-safe and immutable, and the formatters it\n  * returns are as well.\n  */\n public class ISOPeriodFormat {\n \n+    /** @deprecated */\n     private static final ISOPeriodFormat INSTANCE = new ISOPeriodFormat();\n \n-    /**\n-     * Returns a singleton instance of ISOPeriodFormat.\n+    /** Cache of standard format. */\n+    private static PeriodFormatter cStandard;\n+    /** Cache of alternate months format. */\n+    private static PeriodFormatter cAlternate;\n+    /** Cache of alternate extended months format. */\n+    private static PeriodFormatter cAlternateExtended;\n+    /** Cache of alternate weeks format. */\n+    private static PeriodFormatter cAlternateWithWeeks;\n+    /** Cache of alternate extended weeks format. */\n+    private static PeriodFormatter cAlternateExtendedWihWeeks;\n+\n+    /**\n+     * Deprecated, methods are now static.\n+     * \n+     * @deprecated use static methods\n      */\n     public static ISOPeriodFormat getInstance() {\n         return INSTANCE;\n     }\n \n-    private transient PeriodFormatter\n-        iStandard,\n-        iAlternate,\n-        iAlternateExtended,\n-        iAlternateWithWeeks,\n-        iAlternateExtendedWihWeeks;\n-\n+    /**\n+     * Constructor.\n+     */\n     private ISOPeriodFormat() {\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * The standard ISO format - PyYmMwWdDThHmMsS.\n      * Milliseconds are not output.\n      * \n      * @return the formatter\n      */\n-    public PeriodFormatter standard() {\n-        if (iStandard == null) {\n-            iStandard = new PeriodFormatterBuilder()\n+    public static PeriodFormatter standard() {\n+        if (cStandard == null) {\n+            cStandard = new PeriodFormatterBuilder()\n                 .appendLiteral(\"P\")\n                 .appendYears()\n                 .appendSuffix(\"Y\")\n                 .appendSuffix(\"S\")\n                 .toFormatter();\n         }\n-        return iStandard;\n+        return cStandard;\n     }\n \n     /**\n      * \n      * @return the formatter\n      */\n-    public PeriodFormatter alternate() {\n-        if (iAlternate == null) {\n-            iAlternate = new PeriodFormatterBuilder()\n+    public static PeriodFormatter alternate() {\n+        if (cAlternate == null) {\n+            cAlternate = new PeriodFormatterBuilder()\n                 .appendLiteral(\"P\")\n                 .printZeroAlways()\n                 .minimumPrintedDigits(4)\n                 .appendSecondsWithOptionalMillis()\n                 .toFormatter();\n         }\n-        return iAlternate;\n+        return cAlternate;\n     }\n \n     /**\n      * \n      * @return the formatter\n      */\n-    public PeriodFormatter alternateExtended() {\n-        if (iAlternateExtended == null) {\n-            iAlternateExtended = new PeriodFormatterBuilder()\n+    public static PeriodFormatter alternateExtended() {\n+        if (cAlternateExtended == null) {\n+            cAlternateExtended = new PeriodFormatterBuilder()\n                 .appendLiteral(\"P\")\n                 .printZeroAlways()\n                 .minimumPrintedDigits(4)\n                 .appendSecondsWithOptionalMillis()\n                 .toFormatter();\n         }\n-        return iAlternateExtended;\n+        return cAlternateExtended;\n     }\n \n     /**\n      * \n      * @return the formatter\n      */\n-    public PeriodFormatter alternateWithWeeks() {\n-        if (iAlternateWithWeeks == null) {\n-            iAlternateWithWeeks = new PeriodFormatterBuilder()\n+    public static PeriodFormatter alternateWithWeeks() {\n+        if (cAlternateWithWeeks == null) {\n+            cAlternateWithWeeks = new PeriodFormatterBuilder()\n                 .appendLiteral(\"P\")\n                 .printZeroAlways()\n                 .minimumPrintedDigits(4)\n                 .appendSecondsWithOptionalMillis()\n                 .toFormatter();\n         }\n-        return iAlternateWithWeeks;\n+        return cAlternateWithWeeks;\n     }\n \n     /**\n      * \n      * @return the formatter\n      */\n-    public PeriodFormatter alternateExtendedWithWeeks() {\n-        if (iAlternateExtendedWihWeeks == null) {\n-            iAlternateExtendedWihWeeks = new PeriodFormatterBuilder()\n+    public static PeriodFormatter alternateExtendedWithWeeks() {\n+        if (cAlternateExtendedWihWeeks == null) {\n+            cAlternateExtendedWihWeeks = new PeriodFormatterBuilder()\n                 .appendLiteral(\"P\")\n                 .printZeroAlways()\n                 .minimumPrintedDigits(4)\n                 .appendSecondsWithOptionalMillis()\n                 .toFormatter();\n         }\n-        return iAlternateExtendedWihWeeks;\n+        return cAlternateExtendedWihWeeks;\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormat.java\n import java.util.Locale;\n \n /**\n- * PeriodFormat provides basic printing and parsing capabilities for\n- * periods. Eventually, this class will also support localization.\n+ * Factory that creates instances of PeriodFormatter.\n+ * <p>\n+ * Period formatting is performed by the {@link PeriodFormatter} class.\n+ * Three classes provide factory methods to create formatters, and this is one.\n+ * The others are {@link ISOPeriodFormat} and {@link PeriodFormatterBuilder}.\n  * <p>\n  * PeriodFormat is thread-safe and immutable, and the formatters it returns\n  * are as well.\n  */\n public class PeriodFormat {\n \n+    /** @deprecated */\n     private static final PeriodFormat INSTANCE = new PeriodFormat();\n \n+    /** An english words based formatter. */\n+    private static PeriodFormatter cEnglishWords;\n+\n     /**\n-     * Gets a formatter provider that works using the default locale.\n+     * Deprecated, methods are now static.\n      * \n-     * @return a format provider\n+     * @deprecated use static methods\n      */\n     public static PeriodFormat getInstance() {\n         return INSTANCE;\n     }\n \n     /**\n-     * Gets a formatter provider that works using the given locale.\n+     * Deprecated, methods are now static.\n      * \n-     * @param locale  the Locale to use, null for default locale\n-     * @return a format provider\n+     * @deprecated use static methods\n      */\n     public static PeriodFormat getInstance(Locale locale) {\n         return INSTANCE;\n     }\n \n-    private final PeriodFormatter iDefault;\n-\n+    /**\n+     * Constructor.\n+     */\n     private PeriodFormat() {\n-        String[] variants = {\" \", \",\", \",and \", \", and \"};\n-        iDefault = new PeriodFormatterBuilder()\n-            .appendYears()\n-            .appendSuffix(\" year\", \" years\")\n-            .appendSeparator(\", \", \" and \", variants)\n-            .appendMonths()\n-            .appendSuffix(\" month\", \" months\")\n-            .appendSeparator(\", \", \" and \", variants)\n-            .appendWeeks()\n-            .appendSuffix(\" week\", \" weeks\")\n-            .appendSeparator(\", \", \" and \", variants)\n-            .appendDays()\n-            .appendSuffix(\" day\", \" days\")\n-            .appendSeparator(\", \", \" and \", variants)\n-            .appendHours()\n-            .appendSuffix(\" hour\", \" hours\")\n-            .appendSeparator(\", \", \" and \", variants)\n-            .appendMinutes()\n-            .appendSuffix(\" minute\", \" minutes\")\n-            .appendSeparator(\", \", \" and \", variants)\n-            .appendSeconds()\n-            .appendSuffix(\" second\", \" seconds\")\n-            .appendSeparator(\", \", \" and \", variants)\n-            .appendMillis()\n-            .appendSuffix(\" millisecond\", \" milliseconds\")\n-            .toFormatter();\n     }\n \n     /**\n-     * Returns the default PeriodFormatter.\n+     * Gets the default PeriodFormatter.\n+     * <p>\n+     * This currently returns a word based formatter using English only.\n+     * Hopefully future release will support localized period formatting.\n+     * \n+     * @return the formatter\n      */\n-    public PeriodFormatter getDefault() {\n-        return iDefault;\n+    public static PeriodFormatter getDefault() {\n+        if (cEnglishWords == null) {\n+            String[] variants = {\" \", \",\", \",and \", \", and \"};\n+            cEnglishWords = new PeriodFormatterBuilder()\n+                .appendYears()\n+                .appendSuffix(\" year\", \" years\")\n+                .appendSeparator(\", \", \" and \", variants)\n+                .appendMonths()\n+                .appendSuffix(\" month\", \" months\")\n+                .appendSeparator(\", \", \" and \", variants)\n+                .appendWeeks()\n+                .appendSuffix(\" week\", \" weeks\")\n+                .appendSeparator(\", \", \" and \", variants)\n+                .appendDays()\n+                .appendSuffix(\" day\", \" days\")\n+                .appendSeparator(\", \", \" and \", variants)\n+                .appendHours()\n+                .appendSuffix(\" hour\", \" hours\")\n+                .appendSeparator(\", \", \" and \", variants)\n+                .appendMinutes()\n+                .appendSuffix(\" minute\", \" minutes\")\n+                .appendSeparator(\", \", \" and \", variants)\n+                .appendSeconds()\n+                .appendSuffix(\" second\", \" seconds\")\n+                .appendSeparator(\", \", \" and \", variants)\n+                .appendMillis()\n+                .appendSuffix(\" millisecond\", \" milliseconds\")\n+                .toFormatter();\n+        }\n+        return cEnglishWords;\n     }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java\n     //-----------------------------------------------------------------------\n     public void testFormatStandard() {\n         Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n-        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", ISOPeriodFormat.getInstance().standard().print(p));\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", ISOPeriodFormat.standard().print(p));\n         p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n-        assertEquals(\"P1Y2M3W4DT5H6M7S\", ISOPeriodFormat.getInstance().standard().print(p));\n+        assertEquals(\"P1Y2M3W4DT5H6M7S\", ISOPeriodFormat.standard().print(p));\n         \n         p = new Period(0);\n-        assertEquals(\"PT0S\", ISOPeriodFormat.getInstance().standard().print(p));\n+        assertEquals(\"PT0S\", ISOPeriodFormat.standard().print(p));\n         p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n-        assertEquals(\"PT0M\", ISOPeriodFormat.getInstance().standard().print(p));\n+        assertEquals(\"PT0M\", ISOPeriodFormat.standard().print(p));\n         \n-        assertEquals(\"P1Y4DT5H6M7.008S\", ISOPeriodFormat.getInstance().standard().print(YEAR_DAY_PERIOD));\n-        assertEquals(\"PT0S\", ISOPeriodFormat.getInstance().standard().print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(\"P1Y2M3W4D\", ISOPeriodFormat.getInstance().standard().print(DATE_PERIOD));\n-        assertEquals(\"PT5H6M7.008S\", ISOPeriodFormat.getInstance().standard().print(TIME_PERIOD));\n+        assertEquals(\"P1Y4DT5H6M7.008S\", ISOPeriodFormat.standard().print(YEAR_DAY_PERIOD));\n+        assertEquals(\"PT0S\", ISOPeriodFormat.standard().print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(\"P1Y2M3W4D\", ISOPeriodFormat.standard().print(DATE_PERIOD));\n+        assertEquals(\"PT5H6M7.008S\", ISOPeriodFormat.standard().print(TIME_PERIOD));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testFormatAlternate() {\n         Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n-        assertEquals(\"P00010204T050607.008\", ISOPeriodFormat.getInstance().alternate().print(p));\n+        assertEquals(\"P00010204T050607.008\", ISOPeriodFormat.alternate().print(p));\n         p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n-        assertEquals(\"P00010204T050607\", ISOPeriodFormat.getInstance().alternate().print(p));\n+        assertEquals(\"P00010204T050607\", ISOPeriodFormat.alternate().print(p));\n         \n         p = new Period(0);\n-        assertEquals(\"P00000000T000000\", ISOPeriodFormat.getInstance().alternate().print(p));\n+        assertEquals(\"P00000000T000000\", ISOPeriodFormat.alternate().print(p));\n         p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n-        assertEquals(\"P00000000T000000\", ISOPeriodFormat.getInstance().alternate().print(p));\n+        assertEquals(\"P00000000T000000\", ISOPeriodFormat.alternate().print(p));\n         \n-        assertEquals(\"P00010004T050607.008\", ISOPeriodFormat.getInstance().alternate().print(YEAR_DAY_PERIOD));\n-        assertEquals(\"P00000000T000000\", ISOPeriodFormat.getInstance().alternate().print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(\"P00010204T000000\", ISOPeriodFormat.getInstance().alternate().print(DATE_PERIOD));\n-        assertEquals(\"P00000000T050607.008\", ISOPeriodFormat.getInstance().alternate().print(TIME_PERIOD));\n+        assertEquals(\"P00010004T050607.008\", ISOPeriodFormat.alternate().print(YEAR_DAY_PERIOD));\n+        assertEquals(\"P00000000T000000\", ISOPeriodFormat.alternate().print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(\"P00010204T000000\", ISOPeriodFormat.alternate().print(DATE_PERIOD));\n+        assertEquals(\"P00000000T050607.008\", ISOPeriodFormat.alternate().print(TIME_PERIOD));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testFormatAlternateExtended() {\n         Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n-        assertEquals(\"P0001-02-04T05:06:07.008\", ISOPeriodFormat.getInstance().alternateExtended().print(p));\n+        assertEquals(\"P0001-02-04T05:06:07.008\", ISOPeriodFormat.alternateExtended().print(p));\n         p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n-        assertEquals(\"P0001-02-04T05:06:07\", ISOPeriodFormat.getInstance().alternateExtended().print(p));\n+        assertEquals(\"P0001-02-04T05:06:07\", ISOPeriodFormat.alternateExtended().print(p));\n         \n         p = new Period(0);\n-        assertEquals(\"P0000-00-00T00:00:00\", ISOPeriodFormat.getInstance().alternateExtended().print(p));\n+        assertEquals(\"P0000-00-00T00:00:00\", ISOPeriodFormat.alternateExtended().print(p));\n         p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n-        assertEquals(\"P0000-00-00T00:00:00\", ISOPeriodFormat.getInstance().alternateExtended().print(p));\n+        assertEquals(\"P0000-00-00T00:00:00\", ISOPeriodFormat.alternateExtended().print(p));\n         \n-        assertEquals(\"P0001-00-04T05:06:07.008\", ISOPeriodFormat.getInstance().alternateExtended().print(YEAR_DAY_PERIOD));\n-        assertEquals(\"P0000-00-00T00:00:00\", ISOPeriodFormat.getInstance().alternateExtended().print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(\"P0001-02-04T00:00:00\", ISOPeriodFormat.getInstance().alternateExtended().print(DATE_PERIOD));\n-        assertEquals(\"P0000-00-00T05:06:07.008\", ISOPeriodFormat.getInstance().alternateExtended().print(TIME_PERIOD));\n+        assertEquals(\"P0001-00-04T05:06:07.008\", ISOPeriodFormat.alternateExtended().print(YEAR_DAY_PERIOD));\n+        assertEquals(\"P0000-00-00T00:00:00\", ISOPeriodFormat.alternateExtended().print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(\"P0001-02-04T00:00:00\", ISOPeriodFormat.alternateExtended().print(DATE_PERIOD));\n+        assertEquals(\"P0000-00-00T05:06:07.008\", ISOPeriodFormat.alternateExtended().print(TIME_PERIOD));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testFormatAlternateWithWeeks() {\n         Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n-        assertEquals(\"P0001W0304T050607.008\", ISOPeriodFormat.getInstance().alternateWithWeeks().print(p));\n+        assertEquals(\"P0001W0304T050607.008\", ISOPeriodFormat.alternateWithWeeks().print(p));\n         p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n-        assertEquals(\"P0001W0304T050607\", ISOPeriodFormat.getInstance().alternateWithWeeks().print(p));\n+        assertEquals(\"P0001W0304T050607\", ISOPeriodFormat.alternateWithWeeks().print(p));\n         \n         p = new Period(0);\n-        assertEquals(\"P0000W0000T000000\", ISOPeriodFormat.getInstance().alternateWithWeeks().print(p));\n+        assertEquals(\"P0000W0000T000000\", ISOPeriodFormat.alternateWithWeeks().print(p));\n         p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n-        assertEquals(\"P0000W0000T000000\", ISOPeriodFormat.getInstance().alternateWithWeeks().print(p));\n+        assertEquals(\"P0000W0000T000000\", ISOPeriodFormat.alternateWithWeeks().print(p));\n         \n-        assertEquals(\"P0001W0004T050607.008\", ISOPeriodFormat.getInstance().alternateWithWeeks().print(YEAR_DAY_PERIOD));\n-        assertEquals(\"P0000W0000T000000\", ISOPeriodFormat.getInstance().alternateWithWeeks().print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(\"P0001W0304T000000\", ISOPeriodFormat.getInstance().alternateWithWeeks().print(DATE_PERIOD));\n-        assertEquals(\"P0000W0000T050607.008\", ISOPeriodFormat.getInstance().alternateWithWeeks().print(TIME_PERIOD));\n+        assertEquals(\"P0001W0004T050607.008\", ISOPeriodFormat.alternateWithWeeks().print(YEAR_DAY_PERIOD));\n+        assertEquals(\"P0000W0000T000000\", ISOPeriodFormat.alternateWithWeeks().print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(\"P0001W0304T000000\", ISOPeriodFormat.alternateWithWeeks().print(DATE_PERIOD));\n+        assertEquals(\"P0000W0000T050607.008\", ISOPeriodFormat.alternateWithWeeks().print(TIME_PERIOD));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testFormatAlternateExtendedWithWeeks() {\n         Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n-        assertEquals(\"P0001-W03-04T05:06:07.008\", ISOPeriodFormat.getInstance().alternateExtendedWithWeeks().print(p));\n+        assertEquals(\"P0001-W03-04T05:06:07.008\", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));\n         p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n-        assertEquals(\"P0001-W03-04T05:06:07\", ISOPeriodFormat.getInstance().alternateExtendedWithWeeks().print(p));\n+        assertEquals(\"P0001-W03-04T05:06:07\", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));\n         \n         p = new Period(0);\n-        assertEquals(\"P0000-W00-00T00:00:00\", ISOPeriodFormat.getInstance().alternateExtendedWithWeeks().print(p));\n+        assertEquals(\"P0000-W00-00T00:00:00\", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));\n         p = new Period(0, PeriodType.standard().withMillisRemoved().withSecondsRemoved());\n-        assertEquals(\"P0000-W00-00T00:00:00\", ISOPeriodFormat.getInstance().alternateExtendedWithWeeks().print(p));\n+        assertEquals(\"P0000-W00-00T00:00:00\", ISOPeriodFormat.alternateExtendedWithWeeks().print(p));\n         \n-        assertEquals(\"P0001-W00-04T05:06:07.008\", ISOPeriodFormat.getInstance().alternateExtendedWithWeeks().print(YEAR_DAY_PERIOD));\n-        assertEquals(\"P0000-W00-00T00:00:00\", ISOPeriodFormat.getInstance().alternateExtendedWithWeeks().print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(\"P0001-W03-04T00:00:00\", ISOPeriodFormat.getInstance().alternateExtendedWithWeeks().print(DATE_PERIOD));\n-        assertEquals(\"P0000-W00-00T05:06:07.008\", ISOPeriodFormat.getInstance().alternateExtendedWithWeeks().print(TIME_PERIOD));\n+        assertEquals(\"P0001-W00-04T05:06:07.008\", ISOPeriodFormat.alternateExtendedWithWeeks().print(YEAR_DAY_PERIOD));\n+        assertEquals(\"P0000-W00-00T00:00:00\", ISOPeriodFormat.alternateExtendedWithWeeks().print(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(\"P0001-W03-04T00:00:00\", ISOPeriodFormat.alternateExtendedWithWeeks().print(DATE_PERIOD));\n+        assertEquals(\"P0000-W00-00T05:06:07.008\", ISOPeriodFormat.alternateExtendedWithWeeks().print(TIME_PERIOD));\n     }\n \n }\n--- a/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard1() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         Period p = parser.parsePeriod(\"P1Y2M3W4DT5H6M7.008S\");\n         assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard2() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         Period p = parser.parsePeriod(\"P0Y0M0W0DT5H6M7.008S\");\n         assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 8), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard3() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         Period p = parser.parsePeriod(\"P0DT5H6M7.008S\");\n         assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 8), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard4() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         Period p = parser.parsePeriod(\"P2Y3DT5H6M7.008S\");\n         assertEquals(new Period(2, 0, 0, 3, 5, 6, 7, 8), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard5() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         Period p = parser.parsePeriod(\"P2YT5H6M7.008S\");\n         assertEquals(new Period(2, 0, 0, 0, 5, 6, 7, 8), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard6() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         Period p = parser.parsePeriod(\"PT5H6M7.008S\");\n         assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 8), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard7() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         Period p = parser.parsePeriod(\"P1Y2M3W4D\");\n         assertEquals(new Period(1, 2, 3, 4, 0, 0, 0, 0), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard8() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         Period p = parser.parsePeriod(\"PT5H6M7S\");\n         assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 0), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard9() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         Period p = parser.parsePeriod(\"PT0S\");\n         assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 0), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard10() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         Period p = parser.parsePeriod(\"P0D\");\n         assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 0), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard11() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         Period p = parser.parsePeriod(\"P0Y\");\n         assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 0), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandardFail1() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         try {\n             parser.parsePeriod(\"P1Y2S\");\n             fail();\n \n     //-----------------------------------------------------------------------\n     public void testParseStandardFail2() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         try {\n             parser.parsePeriod(\"PS\");\n             fail();\n \n     //-----------------------------------------------------------------------\n     public void testParseStandardFail3() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         try {\n             parser.parsePeriod(\"PTS\");\n             fail();\n \n     //-----------------------------------------------------------------------\n     public void testParseStandardFail4() {\n-        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.standard();\n         try {\n             parser.parsePeriod(\"PXS\");\n             fail();\n--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard1() {\n-        PeriodFormatter parser = PeriodFormat.getInstance().getDefault();\n+        PeriodFormatter parser = PeriodFormat.getDefault();\n         Period p = parser.parsePeriod(\"6 years, 3 months and 2 days\");\n         assertEquals(new Period(6, 3, 0, 2, 0, 0, 0, 0), p);\n     }\n--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java\n         DateTimeZone.setDefault(LONDON);\n         TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n         Locale.setDefault(Locale.UK);\n-        f = ISOPeriodFormat.getInstance().standard();\n+        f = ISOPeriodFormat.standard();\n     }\n \n     protected void tearDown() throws Exception {\n--- a/JodaTime/src/test/org/joda/time/tz/TestCompiler.java\n+++ b/JodaTime/src/test/org/joda/time/tz/TestCompiler.java\n  */\n package org.joda.time.tz;\n \n+import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.io.InputStream;\n-import java.io.IOException;\n-import java.io.StringBufferInputStream;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         File tempFile = new File(tempDir, \"tzdata\");\n         tempFile.deleteOnExit();\n \n-        InputStream in = new StringBufferInputStream(data);\n+        InputStream in = new ByteArrayInputStream(data.getBytes(\"UTF-8\"));\n \n         FileOutputStream out = new FileOutputStream(tempFile);\n         byte[] buf = new byte[1000];", "timestamp": 1108339766, "metainfo": ""}