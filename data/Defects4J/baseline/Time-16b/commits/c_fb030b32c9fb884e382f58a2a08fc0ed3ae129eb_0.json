{"sha": "fb030b32c9fb884e382f58a2a08fc0ed3ae129eb", "log": "Add methods to simplify common addition and subtraction of periods   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n      * Gets a copy of this datetime with the value of the specified field increased.\n      * <p>\n      * If the addition is zero or the field is null, then <code>this</code> is returned.\n+     * <p>\n      * These three lines are equivalent:\n      * <pre>\n-     * DateTime added = dt.withFieldAdded(DateTimeFieldType.dayOfMonth(), 6);\n-     * DateTime added = dt.dayOfMonth().addToCopy(6);\n-     * DateTime added = dt.property(DateTimeFieldType.dayOfMonth()).addToCopy(6);\n+     * DateMidnight added = dt.withFieldAdded(DateTimeFieldType.year(), 6);\n+     * DateMidnight added = dt.plusYears(6);\n+     * DateMidnight added = dt.year().addToCopy(6);\n      * </pre>\n      * \n      * @param fieldType  the field type to add to, not null\n      * <p>\n      * If the addition is zero, then <code>this</code> is returned.\n      * <p>\n-     * To add or subtract on a single field use the properties, for example:\n-     * <pre>\n-     * DateTime added = dt.dayOfMonth().addToCopy(6);\n-     * </pre>\n+     * This method is typically used to add multiple copies of complex\n+     * period instances. Adding one field is best achieved using methods\n+     * like {@link #withFieldAdded(DurationFieldType, int)}\n+     * or {@link #plusYears(int)}.\n      * \n      * @param period  the period to add to this one, null means zero\n      * @param scalar  the amount of times to add, such as -1 to subtract once\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * \n-     * @param duration  the duration to add to this one\n+     * @param duration  the duration, in millis, to add to this one\n      * @return a copy of this datetime with the duration added\n      * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n      */\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n-     * The following two lines are identical in effect:\n-     * <pre>\n-     * DateTime added = dt.hourOfDay().addToCopy(6);\n-     * DateTime added = dt.plus(Period.hours(6));\n-     * </pre>\n+     * This method is typically used to add complex period instances.\n+     * Adding one field is best achieved using methods\n+     * like {@link #plusYears(int)}.\n      * \n      * @param period  the duration to add to this one, null means zero\n      * @return a copy of this datetime with the period added\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Returns a new datetime plus the specified number of years.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateMidnight added = dt.plusYears(6);\n+     * DateMidnight added = dt.plus(Period.years(6));\n+     * DateMidnight added = dt.withFieldAdded(DurationFieldType.years(), 6);\n+     * </pre>\n+     *\n+     * @param years  the amount of years to add, may be negative\n+     * @return the new datetime plus the increased years\n+     * @since 1.1\n+     */\n+    public DateMidnight plusYears(int years) {\n+        if (years == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().years().add(getMillis(), years);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime plus the specified number of months.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateMidnight added = dt.plusMonths(6);\n+     * DateMidnight added = dt.plus(Period.months(6));\n+     * DateMidnight added = dt.withFieldAdded(DurationFieldType.months(), 6);\n+     * </pre>\n+     *\n+     * @param months  the amount of months to add, may be negative\n+     * @return the new datetime plus the increased months\n+     * @since 1.1\n+     */\n+    public DateMidnight plusMonths(int months) {\n+        if (months == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().months().add(getMillis(), months);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime plus the specified number of weeks.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateMidnight added = dt.plusWeeks(6);\n+     * DateMidnight added = dt.plus(Period.weeks(6));\n+     * DateMidnight added = dt.withFieldAdded(DurationFieldType.weeks(), 6);\n+     * </pre>\n+     *\n+     * @param weeks  the amount of weeks to add, may be negative\n+     * @return the new datetime plus the increased weeks\n+     * @since 1.1\n+     */\n+    public DateMidnight plusWeeks(int weeks) {\n+        if (weeks == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().weeks().add(getMillis(), weeks);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime plus the specified number of days.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateMidnight added = dt.plusDays(6);\n+     * DateMidnight added = dt.plus(Period.days(6));\n+     * DateMidnight added = dt.withFieldAdded(DurationFieldType.days(), 6);\n+     * </pre>\n+     *\n+     * @param days  the amount of days to add, may be negative\n+     * @return the new datetime plus the increased days\n+     * @since 1.1\n+     */\n+    public DateMidnight plusDays(int days) {\n+        if (days == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().days().add(getMillis(), days);\n+        return withMillis(instant);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets a copy of this datetime with the specified duration take away.\n+     * <p>\n+     * If the amount is zero or null, then <code>this</code> is returned.\n+     * \n+     * @param duration  the duration, in millis, to reduce this instant by\n+     * @return a copy of this datetime with the duration taken away\n+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     */\n+    public DateMidnight minus(long duration) {\n+        return withDurationAdded(duration, -1);\n+    }\n+\n+    /**\n      * Gets a copy of this datetime with the specified duration take away.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * @return a copy of this datetime with the duration taken away\n      * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n      */\n-    public DateMidnight minus(long duration) {\n-        return withDurationAdded(duration, -1);\n-    }\n-\n-    /**\n-     * Gets a copy of this datetime with the specified duration take away.\n-     * <p>\n-     * If the amount is zero or null, then <code>this</code> is returned.\n-     * \n-     * @param duration  the duration to reduce this instant by\n-     * @return a copy of this datetime with the duration taken away\n-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n-     */\n     public DateMidnight minus(ReadableDuration duration) {\n         return withDurationAdded(duration, -1);\n     }\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n-     * The following two lines are identical in effect:\n-     * <pre>\n-     * DateTime added = dt.hourOfDay().addToCopy(-6);\n-     * DateTime added = dt.minus(Period.hours(6));\n-     * </pre>\n+     * This method is typically used to subtract complex period instances.\n+     * Subtracting one field is best achieved using methods\n+     * like {@link #minusYears(int)}.\n      * \n      * @param period  the period to reduce this instant by\n      * @return a copy of this datetime with the period taken away\n      */\n     public DateMidnight minus(ReadablePeriod period) {\n         return withPeriodAdded(period, -1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new datetime minus the specified number of years.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime subtracted = dt.minusYears(6);\n+     * DateTime subtracted = dt.minus(Period.years(6));\n+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.years(), -6);\n+     * </pre>\n+     *\n+     * @param years  the amount of years to subtract, may be negative\n+     * @return the new datetime minus the increased years\n+     * @since 1.1\n+     */\n+    public DateMidnight minusYears(int years) {\n+        if (years == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().years().subtract(getMillis(), years);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime minus the specified number of months.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateMidnight subtracted = dt.minusMonths(6);\n+     * DateMidnight subtracted = dt.minus(Period.months(6));\n+     * DateMidnight subtracted = dt.withFieldAdded(DurationFieldType.months(), -6);\n+     * </pre>\n+     *\n+     * @param months  the amount of months to subtract, may be negative\n+     * @return the new datetime minus the increased months\n+     * @since 1.1\n+     */\n+    public DateMidnight minusMonths(int months) {\n+        if (months == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().months().subtract(getMillis(), months);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime minus the specified number of weeks.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateMidnight subtracted = dt.minusWeeks(6);\n+     * DateMidnight subtracted = dt.minus(Period.weeks(6));\n+     * DateMidnight subtracted = dt.withFieldAdded(DurationFieldType.weeks(), -6);\n+     * </pre>\n+     *\n+     * @param weeks  the amount of weeks to subtract, may be negative\n+     * @return the new datetime minus the increased weeks\n+     * @since 1.1\n+     */\n+    public DateMidnight minusWeeks(int weeks) {\n+        if (weeks == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().weeks().subtract(getMillis(), weeks);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime minus the specified number of days.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateMidnight subtracted = dt.minusDays(6);\n+     * DateMidnight subtracted = dt.minus(Period.days(6));\n+     * DateMidnight subtracted = dt.withFieldAdded(DurationFieldType.days(), -6);\n+     * </pre>\n+     *\n+     * @param days  the amount of days to subtract, may be negative\n+     * @return the new datetime minus the increased days\n+     * @since 1.1\n+     */\n+    public DateMidnight minusDays(int days) {\n+        if (days == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().days().subtract(getMillis(), days);\n+        return withMillis(instant);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n      * <p>\n      * These three lines are equivalent:\n      * <pre>\n-     * DateTime added = dt.withField(DateTimeFieldType.dayOfMonth(), 6);\n-     * DateTime added = dt.dayOfMonth().addToCopy(6);\n-     * DateTime added = dt.property(DateTimeFieldType.dayOfMonth()).addToCopy(6);\n+     * DateTime added = dt.withFieldAdded(DurationFieldType.years(), 6);\n+     * DateTime added = dt.plusYears(6);\n+     * DateTime added = dt.plus(Period.years(6));\n      * </pre>\n      * \n      * @param fieldType  the field type to add to, not null\n      * <p>\n      * If the addition is zero, then <code>this</code> is returned.\n      * <p>\n-     * To add or subtract on a single field use the properties, for example:\n-     * <pre>\n-     * DateTime added = dt.hourOfDay().addToCopy(6);\n-     * </pre>\n+     * This method is typically used to add multiple copies of complex\n+     * period instances. Adding one field is best achieved using methods\n+     * like {@link #withFieldAdded(DurationFieldType, int)}\n+     * or {@link #plusYears(int)}.\n      * \n      * @param period  the period to add to this one, null means zero\n      * @param scalar  the amount of times to add, such as -1 to subtract once\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * \n-     * @param duration  the duration to add to this one\n+     * @param duration  the duration, in millis, to add to this one\n      * @return a copy of this datetime with the duration added\n      * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n      */\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n-     * The following two lines are identical in effect:\n-     * <pre>\n-     * DateTime added = dt.hourOfDay().addToCopy(6);\n-     * DateTime added = dt.plus(Period.hours(6));\n-     * </pre>\n+     * This method is typically used to add complex period instances.\n+     * Adding one field is best achieved using methods\n+     * like {@link #plusYears(int)}.\n      * \n      * @param period  the duration to add to this one, null means zero\n      * @return a copy of this datetime with the period added\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Returns a new datetime plus the specified number of years.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime added = dt.plusYears(6);\n+     * DateTime added = dt.plus(Period.years(6));\n+     * DateTime added = dt.withFieldAdded(DurationFieldType.years(), 6);\n+     * </pre>\n+     *\n+     * @param years  the amount of years to add, may be negative\n+     * @return the new datetime plus the increased years\n+     * @since 1.1\n+     */\n+    public DateTime plusYears(int years) {\n+        if (years == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().years().add(getMillis(), years);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime plus the specified number of months.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime added = dt.plusMonths(6);\n+     * DateTime added = dt.plus(Period.months(6));\n+     * DateTime added = dt.withFieldAdded(DurationFieldType.months(), 6);\n+     * </pre>\n+     *\n+     * @param months  the amount of months to add, may be negative\n+     * @return the new datetime plus the increased months\n+     * @since 1.1\n+     */\n+    public DateTime plusMonths(int months) {\n+        if (months == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().months().add(getMillis(), months);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime plus the specified number of weeks.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime added = dt.plusWeeks(6);\n+     * DateTime added = dt.plus(Period.weeks(6));\n+     * DateTime added = dt.withFieldAdded(DurationFieldType.weeks(), 6);\n+     * </pre>\n+     *\n+     * @param weeks  the amount of weeks to add, may be negative\n+     * @return the new datetime plus the increased weeks\n+     * @since 1.1\n+     */\n+    public DateTime plusWeeks(int weeks) {\n+        if (weeks == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().weeks().add(getMillis(), weeks);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime plus the specified number of days.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime added = dt.plusDays(6);\n+     * DateTime added = dt.plus(Period.days(6));\n+     * DateTime added = dt.withFieldAdded(DurationFieldType.days(), 6);\n+     * </pre>\n+     *\n+     * @param days  the amount of days to add, may be negative\n+     * @return the new datetime plus the increased days\n+     * @since 1.1\n+     */\n+    public DateTime plusDays(int days) {\n+        if (days == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().days().add(getMillis(), days);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime plus the specified number of hours.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime added = dt.plusHours(6);\n+     * DateTime added = dt.plus(Period.hours(6));\n+     * DateTime added = dt.withFieldAdded(DurationFieldType.hours(), 6);\n+     * </pre>\n+     *\n+     * @param hours  the amount of hours to add, may be negative\n+     * @return the new datetime plus the increased hours\n+     * @since 1.1\n+     */\n+    public DateTime plusHours(int hours) {\n+        if (hours == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().hours().add(getMillis(), hours);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime plus the specified number of minutes.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime added = dt.plusMinutes(6);\n+     * DateTime added = dt.plus(Period.minutes(6));\n+     * DateTime added = dt.withFieldAdded(DurationFieldType.minutes(), 6);\n+     * </pre>\n+     *\n+     * @param minutes  the amount of minutes to add, may be negative\n+     * @return the new datetime plus the increased minutes\n+     * @since 1.1\n+     */\n+    public DateTime plusMinutes(int minutes) {\n+        if (minutes == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().minutes().add(getMillis(), minutes);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime plus the specified number of seconds.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime added = dt.plusSeconds(6);\n+     * DateTime added = dt.plus(Period.seconds(6));\n+     * DateTime added = dt.withFieldAdded(DurationFieldType.seconds(), 6);\n+     * </pre>\n+     *\n+     * @param seconds  the amount of seconds to add, may be negative\n+     * @return the new datetime plus the increased seconds\n+     * @since 1.1\n+     */\n+    public DateTime plusSeconds(int seconds) {\n+        if (seconds == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().seconds().add(getMillis(), seconds);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime plus the specified number of millis.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime added = dt.plusMillis(6);\n+     * DateTime added = dt.plus(Period.millis(6));\n+     * DateTime added = dt.withFieldAdded(DurationFieldType.millis(), 6);\n+     * </pre>\n+     *\n+     * @param millis  the amount of millis to add, may be negative\n+     * @return the new datetime plus the increased millis\n+     * @since 1.1\n+     */\n+    public DateTime plusMillis(int millis) {\n+        if (millis == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().millis().add(getMillis(), millis);\n+        return withMillis(instant);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets a copy of this datetime with the specified duration take away.\n+     * <p>\n+     * If the amount is zero or null, then <code>this</code> is returned.\n+     * \n+     * @param duration  the duration, in millis, to reduce this instant by\n+     * @return a copy of this datetime with the duration taken away\n+     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     */\n+    public DateTime minus(long duration) {\n+        return withDurationAdded(duration, -1);\n+    }\n+\n+    /**\n      * Gets a copy of this datetime with the specified duration take away.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * @return a copy of this datetime with the duration taken away\n      * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n      */\n-    public DateTime minus(long duration) {\n-        return withDurationAdded(duration, -1);\n-    }\n-\n-    /**\n-     * Gets a copy of this datetime with the specified duration take away.\n-     * <p>\n-     * If the amount is zero or null, then <code>this</code> is returned.\n-     * \n-     * @param duration  the duration to reduce this instant by\n-     * @return a copy of this datetime with the duration taken away\n-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n-     */\n     public DateTime minus(ReadableDuration duration) {\n         return withDurationAdded(duration, -1);\n     }\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n-     * The following two lines are identical in effect:\n-     * <pre>\n-     * DateTime added = dt.hourOfDay().addToCopy(-6);\n-     * DateTime added = dt.minus(Period.hours(6));\n-     * </pre>\n+     * This method is typically used to subtract complex period instances.\n+     * Subtracting one field is best achieved using methods\n+     * like {@link #minusYears(int)}.\n      * \n      * @param period  the period to reduce this instant by\n      * @return a copy of this datetime with the period taken away\n      */\n     public DateTime minus(ReadablePeriod period) {\n         return withPeriodAdded(period, -1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new datetime minus the specified number of years.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime subtracted = dt.minusYears(6);\n+     * DateTime subtracted = dt.minus(Period.years(6));\n+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.years(), -6);\n+     * </pre>\n+     *\n+     * @param years  the amount of years to subtract, may be negative\n+     * @return the new datetime minus the increased years\n+     * @since 1.1\n+     */\n+    public DateTime minusYears(int years) {\n+        if (years == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().years().subtract(getMillis(), years);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime minus the specified number of months.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime subtracted = dt.minusMonths(6);\n+     * DateTime subtracted = dt.minus(Period.months(6));\n+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.months(), -6);\n+     * </pre>\n+     *\n+     * @param months  the amount of months to subtract, may be negative\n+     * @return the new datetime minus the increased months\n+     * @since 1.1\n+     */\n+    public DateTime minusMonths(int months) {\n+        if (months == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().months().subtract(getMillis(), months);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime minus the specified number of weeks.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime subtracted = dt.minusWeeks(6);\n+     * DateTime subtracted = dt.minus(Period.weeks(6));\n+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.weeks(), -6);\n+     * </pre>\n+     *\n+     * @param weeks  the amount of weeks to subtract, may be negative\n+     * @return the new datetime minus the increased weeks\n+     * @since 1.1\n+     */\n+    public DateTime minusWeeks(int weeks) {\n+        if (weeks == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().weeks().subtract(getMillis(), weeks);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime minus the specified number of days.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime subtracted = dt.minusDays(6);\n+     * DateTime subtracted = dt.minus(Period.days(6));\n+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.days(), -6);\n+     * </pre>\n+     *\n+     * @param days  the amount of days to subtract, may be negative\n+     * @return the new datetime minus the increased days\n+     * @since 1.1\n+     */\n+    public DateTime minusDays(int days) {\n+        if (days == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().days().subtract(getMillis(), days);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime minus the specified number of hours.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime subtracted = dt.minusHours(6);\n+     * DateTime subtracted = dt.minus(Period.hours(6));\n+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.hours(), -6);\n+     * </pre>\n+     *\n+     * @param hours  the amount of hours to subtract, may be negative\n+     * @return the new datetime minus the increased hours\n+     * @since 1.1\n+     */\n+    public DateTime minusHours(int hours) {\n+        if (hours == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().hours().subtract(getMillis(), hours);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime minus the specified number of minutes.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime subtracted = dt.minusMinutes(6);\n+     * DateTime subtracted = dt.minus(Period.minutes(6));\n+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.minutes(), -6);\n+     * </pre>\n+     *\n+     * @param minutes  the amount of minutes to subtract, may be negative\n+     * @return the new datetime minus the increased minutes\n+     * @since 1.1\n+     */\n+    public DateTime minusMinutes(int minutes) {\n+        if (minutes == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().minutes().subtract(getMillis(), minutes);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime minus the specified number of seconds.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime subtracted = dt.minusSeconds(6);\n+     * DateTime subtracted = dt.minus(Period.seconds(6));\n+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.seconds(), -6);\n+     * </pre>\n+     *\n+     * @param seconds  the amount of seconds to subtract, may be negative\n+     * @return the new datetime minus the increased seconds\n+     * @since 1.1\n+     */\n+    public DateTime minusSeconds(int seconds) {\n+        if (seconds == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().seconds().subtract(getMillis(), seconds);\n+        return withMillis(instant);\n+    }\n+\n+    /**\n+     * Returns a new datetime minus the specified number of millis.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * DateTime subtracted = dt.minusMillis(6);\n+     * DateTime subtracted = dt.minus(Period.millis(6));\n+     * DateTime subtracted = dt.withFieldAdded(DurationFieldType.millis(), -6);\n+     * </pre>\n+     *\n+     * @param millis  the amount of millis to subtract, may be negative\n+     * @return the new datetime minus the increased millis\n+     * @since 1.1\n+     */\n+    public DateTime minusMillis(int millis) {\n+        if (millis == 0) {\n+            return this;\n+        }\n+        long instant = getChronology().millis().subtract(getMillis(), millis);\n+        return withMillis(instant);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/DurationField.java\n+++ b/JodaTime/src/java/org/joda/time/DurationField.java\n     public abstract long add(long instant, long value);\n \n     /**\n+     * Subtracts a duration value (which may be negative) from the instant.\n+     * \n+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to subtract from\n+     * @param value  the value to subtract, in the units of the field\n+     * @return the updated milliseconds\n+     */\n+    public long subtract(long instant, int value) {\n+        if (value == Integer.MIN_VALUE) {\n+            return subtract(instant, (long) value);\n+        }\n+        return add(instant, -value);\n+    }\n+\n+    /**\n+     * Subtracts a duration value (which may be negative) from the instant.\n+     * \n+     * @param instant  the milliseconds from 1970-01-01T00:00:00Z to subtract from\n+     * @param value  the value to subtract, in the units of the field\n+     * @return the updated milliseconds\n+     */\n+    public long subtract(long instant, long value) {\n+        if (value == Long.MIN_VALUE) {\n+            throw new ArithmeticException(\"Long.MIN_VALUE cannot be negated\");\n+        }\n+        return add(instant, -value);\n+    }\n+\n+    /**\n      * Computes the difference between two instants, as measured in the units\n      * of this field. Any fractional units are dropped from the result. Calling\n      * getDifference reverses the effect of calling add. In the following code:\n--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java\n      * <p>\n      * These three lines are equivalent:\n      * <pre>\n-     * TimeOfDay added = tod.withFieldAdded(DateTimeFieldType.minuteOfHour(), 6);\n+     * TimeOfDay added = tod.withFieldAdded(DurationFieldType.minutes(), 6);\n+     * TimeOfDay added = tod.plusMinutes(6);\n      * TimeOfDay added = tod.minuteOfHour().addToCopy(6);\n-     * TimeOfDay added = tod.property(DateTimeFieldType.minuteOfHour()).addToCopy(6);\n      * </pre>\n      * \n      * @param fieldType  the field type to add to, not null\n      * If the addition is zero, then <code>this</code> is returned.\n      * Fields in the period that aren't present in the partial are ignored.\n      * <p>\n-     * To add or subtract on a single field see\n-     * {@link #withFieldAdded(DurationFieldType, int)}.\n+     * This method is typically used to add multiple copies of complex\n+     * period instances. Adding one field is best achieved using methods\n+     * like {@link #withFieldAdded(DurationFieldType, int)}\n+     * or {@link #plusHours(int)}.\n      * \n      * @param period  the period to add to this one, null means zero\n      * @param scalar  the amount of times to add, such as -1 to subtract once\n         return new TimeOfDay(this, newValues);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Gets a copy of this instance with the specified period added,\n      * wrapping to what would be a new day if required.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n-     * The following two lines are identical in effect:\n-     * <pre>\n-     * TimeOfDay added = tod.minuteOfHour().addToCopy(6);\n-     * TimeOfDay added = tod.plus(Period.days(6));\n-     * </pre>\n+     * This method is typically used to add complex period instances.\n+     * Adding one field is best achieved using methods\n+     * like {@link #plusHours(int)}.\n      * \n      * @param period  the duration to add to this one, null means zero\n      * @return a copy of this instance with the period added\n         return withPeriodAdded(period, 1);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new time plus the specified number of hours.\n+     * <p>\n+     * This time instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * TimeOfDay added = dt.plusHours(6);\n+     * TimeOfDay added = dt.plus(Period.hours(6));\n+     * TimeOfDay added = dt.withFieldAdded(DurationFieldType.hours(), 6);\n+     * </pre>\n+     *\n+     * @param hours  the amount of hours to add, may be negative\n+     * @return the new time plus the increased hours\n+     * @since 1.1\n+     */\n+    public TimeOfDay plusHours(int hours) {\n+        return withFieldAdded(DurationFieldType.hours(), hours);\n+    }\n+\n+    /**\n+     * Returns a new time plus the specified number of minutes.\n+     * <p>\n+     * This time instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * TimeOfDay added = dt.plusMinutes(6);\n+     * TimeOfDay added = dt.plus(Period.minutes(6));\n+     * TimeOfDay added = dt.withFieldAdded(DurationFieldType.minutes(), 6);\n+     * </pre>\n+     *\n+     * @param minutes  the amount of minutes to add, may be negative\n+     * @return the new time plus the increased minutes\n+     * @since 1.1\n+     */\n+    public TimeOfDay plusMinutes(int minutes) {\n+        return withFieldAdded(DurationFieldType.minutes(), minutes);\n+    }\n+\n+    /**\n+     * Returns a new time plus the specified number of seconds.\n+     * <p>\n+     * This time instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * TimeOfDay added = dt.plusSeconds(6);\n+     * TimeOfDay added = dt.plus(Period.seconds(6));\n+     * TimeOfDay added = dt.withFieldAdded(DurationFieldType.seconds(), 6);\n+     * </pre>\n+     *\n+     * @param seconds  the amount of seconds to add, may be negative\n+     * @return the new time plus the increased seconds\n+     * @since 1.1\n+     */\n+    public TimeOfDay plusSeconds(int seconds) {\n+        return withFieldAdded(DurationFieldType.seconds(), seconds);\n+    }\n+\n+    /**\n+     * Returns a new time plus the specified number of millis.\n+     * <p>\n+     * This time instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * TimeOfDay added = dt.plusMillis(6);\n+     * TimeOfDay added = dt.plus(Period.millis(6));\n+     * TimeOfDay added = dt.withFieldAdded(DurationFieldType.millis(), 6);\n+     * </pre>\n+     *\n+     * @param millis  the amount of millis to add, may be negative\n+     * @return the new time plus the increased millis\n+     * @since 1.1\n+     */\n+    public TimeOfDay plusMillis(int millis) {\n+        return withFieldAdded(DurationFieldType.millis(), millis);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets a copy of this instance with the specified period take away,\n      * wrapping to what would be a new day if required.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n-     * The following lines are identical in effect:\n-     * <pre>\n-     * TimeOfDay added = tod.minuteOfHour().addToCopy(-6);\n-     * TimeOfDay added = tod.minus(Period.days(6));\n-     * TimeOfDay added = tod.plus(Period.days(-6));\n-     * </pre>\n+     * This method is typically used to subtract complex period instances.\n+     * Subtracting one field is best achieved using methods\n+     * like {@link #minusHours(int)}.\n      * \n      * @param period  the period to reduce this instant by\n      * @return a copy of this instance with the period taken away\n-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     * @throws ArithmeticException if the new time exceeds capacity\n      */\n     public TimeOfDay minus(ReadablePeriod period) {\n         return withPeriodAdded(period, -1);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new time minus the specified number of hours.\n+     * <p>\n+     * This time instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * TimeOfDay subtracted = dt.minusHours(6);\n+     * TimeOfDay subtracted = dt.minus(Period.hours(6));\n+     * TimeOfDay subtracted = dt.withFieldAdded(DurationFieldType.hours(), -6);\n+     * </pre>\n+     *\n+     * @param hours  the amount of hours to subtract, may be negative\n+     * @return the new time minus the increased hours\n+     * @since 1.1\n+     */\n+    public TimeOfDay minusHours(int hours) {\n+        return withFieldAdded(DurationFieldType.hours(), FieldUtils.safeNegate(hours));\n+    }\n+\n+    /**\n+     * Returns a new time minus the specified number of minutes.\n+     * <p>\n+     * This time instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * TimeOfDay subtracted = dt.minusMinutes(6);\n+     * TimeOfDay subtracted = dt.minus(Period.minutes(6));\n+     * TimeOfDay subtracted = dt.withFieldAdded(DurationFieldType.minutes(), -6);\n+     * </pre>\n+     *\n+     * @param minutes  the amount of minutes to subtract, may be negative\n+     * @return the new time minus the increased minutes\n+     * @since 1.1\n+     */\n+    public TimeOfDay minusMinutes(int minutes) {\n+        return withFieldAdded(DurationFieldType.minutes(), FieldUtils.safeNegate(minutes));\n+    }\n+\n+    /**\n+     * Returns a new time minus the specified number of seconds.\n+     * <p>\n+     * This time instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * TimeOfDay subtracted = dt.minusSeconds(6);\n+     * TimeOfDay subtracted = dt.minus(Period.seconds(6));\n+     * TimeOfDay subtracted = dt.withFieldAdded(DurationFieldType.seconds(), -6);\n+     * </pre>\n+     *\n+     * @param seconds  the amount of seconds to subtract, may be negative\n+     * @return the new time minus the increased seconds\n+     * @since 1.1\n+     */\n+    public TimeOfDay minusSeconds(int seconds) {\n+        return withFieldAdded(DurationFieldType.seconds(), FieldUtils.safeNegate(seconds));\n+    }\n+\n+    /**\n+     * Returns a new time minus the specified number of millis.\n+     * <p>\n+     * This time instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * TimeOfDay subtracted = dt.minusMillis(6);\n+     * TimeOfDay subtracted = dt.minus(Period.millis(6));\n+     * TimeOfDay subtracted = dt.withFieldAdded(DurationFieldType.millis(), -6);\n+     * </pre>\n+     *\n+     * @param millis  the amount of millis to subtract, may be negative\n+     * @return the new time minus the increased millis\n+     * @since 1.1\n+     */\n+    public TimeOfDay minusMillis(int millis) {\n+        return withFieldAdded(DurationFieldType.millis(), FieldUtils.safeNegate(millis));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets the property object for the specified type, which contains many useful methods.\n      *\n--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java\n      * <p>\n      * These three lines are equivalent:\n      * <pre>\n-     * YearMonthDay added = ymd.withFieldAdded(DateTimeFieldType.dayOfMonth(), 6);\n+     * YearMonthDay added = ymd.withFieldAdded(DurationFieldType.days(), 6);\n+     * YearMonthDay added = ymd.plusDays(6);\n      * YearMonthDay added = ymd.dayOfMonth().addToCopy(6);\n-     * YearMonthDay added = ymd.property(DateTimeFieldType.dayOfMonth()).addToCopy(6);\n      * </pre>\n      * \n      * @param fieldType  the field type to add to, not null\n      * If the addition is zero, then <code>this</code> is returned.\n      * Fields in the period that aren't present in the partial are ignored.\n      * <p>\n-     * To add or subtract on a single field see\n-     * {@link #withFieldAdded(DurationFieldType, int)}.\n+     * This method is typically used to add multiple copies of complex\n+     * period instances. Adding one field is best achieved using methods\n+     * like {@link #withFieldAdded(DurationFieldType, int)}\n+     * or {@link #plusYears(int)}.\n      * \n      * @param period  the period to add to this one, null means zero\n      * @param scalar  the amount of times to add, such as -1 to subtract once\n         return new YearMonthDay(this, newValues);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Gets a copy of this instance with the specified period added.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n-     * The following two lines are identical in effect:\n-     * <pre>\n-     * YearMonthDay added = ymd.dayOfMonth().addToCopy(6);\n-     * YearMonthDay added = ymd.plus(Period.days(6));\n-     * </pre>\n+     * This method is typically used to add complex period instances.\n+     * Adding one field is best achieved using methods\n+     * like {@link #plusYears(int)}.\n      * \n      * @param period  the duration to add to this one, null means zero\n      * @return a copy of this instance with the period added\n         return withPeriodAdded(period, 1);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new date plus the specified number of years.\n+     * <p>\n+     * This date instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * YearMonthDay added = dt.plusYears(6);\n+     * YearMonthDay added = dt.plus(Period.years(6));\n+     * YearMonthDay added = dt.withFieldAdded(DurationFieldType.years(), 6);\n+     * </pre>\n+     *\n+     * @param years  the amount of years to add, may be negative\n+     * @return the new date plus the increased years\n+     * @since 1.1\n+     */\n+    public YearMonthDay plusYears(int years) {\n+        return withFieldAdded(DurationFieldType.years(), years);\n+    }\n+\n+    /**\n+     * Returns a new date plus the specified number of months.\n+     * <p>\n+     * This date instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * YearMonthDay added = dt.plusMonths(6);\n+     * YearMonthDay added = dt.plus(Period.months(6));\n+     * YearMonthDay added = dt.withFieldAdded(DurationFieldType.months(), 6);\n+     * </pre>\n+     *\n+     * @param months  the amount of months to add, may be negative\n+     * @return the new date plus the increased months\n+     * @since 1.1\n+     */\n+    public YearMonthDay plusMonths(int months) {\n+        return withFieldAdded(DurationFieldType.months(), months);\n+    }\n+\n+    /**\n+     * Returns a new date plus the specified number of days.\n+     * <p>\n+     * This date instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * YearMonthDay added = dt.plusDays(6);\n+     * YearMonthDay added = dt.plus(Period.days(6));\n+     * YearMonthDay added = dt.withFieldAdded(DurationFieldType.days(), 6);\n+     * </pre>\n+     *\n+     * @param days  the amount of days to add, may be negative\n+     * @return the new date plus the increased days\n+     * @since 1.1\n+     */\n+    public YearMonthDay plusDays(int days) {\n+        return withFieldAdded(DurationFieldType.days(), days);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets a copy of this instance with the specified period take away.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n-     * The following lines are identical in effect:\n-     * <pre>\n-     * YearMonthDay added = ymd.dayOfMonth().addToCopy(-6);\n-     * YearMonthDay added = ymd.minus(Period.days(6));\n-     * YearMonthDay added = ymd.plus(Period.days(-6));\n-     * </pre>\n+     * This method is typically used to subtract complex period instances.\n+     * Subtracting one field is best achieved using methods\n+     * like {@link #minusYears(int)}.\n      * \n      * @param period  the period to reduce this instant by\n      * @return a copy of this instance with the period taken away\n         return withPeriodAdded(period, -1);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new datetime minus the specified number of years.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * YearMonthDay subtracted = dt.minusYears(6);\n+     * YearMonthDay subtracted = dt.minus(Period.years(6));\n+     * YearMonthDay subtracted = dt.withFieldAdded(DurationFieldType.years(), -6);\n+     * </pre>\n+     *\n+     * @param years  the amount of years to subtract, may be negative\n+     * @return the new datetime minus the increased years\n+     * @since 1.1\n+     */\n+    public YearMonthDay minusYears(int years) {\n+        return withFieldAdded(DurationFieldType.years(), FieldUtils.safeNegate(years));\n+    }\n+\n+    /**\n+     * Returns a new datetime minus the specified number of months.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * YearMonthDay subtracted = dt.minusMonths(6);\n+     * YearMonthDay subtracted = dt.minus(Period.months(6));\n+     * YearMonthDay subtracted = dt.withFieldAdded(DurationFieldType.months(), -6);\n+     * </pre>\n+     *\n+     * @param months  the amount of months to subtract, may be negative\n+     * @return the new datetime minus the increased months\n+     * @since 1.1\n+     */\n+    public YearMonthDay minusMonths(int months) {\n+        return withFieldAdded(DurationFieldType.months(), FieldUtils.safeNegate(months));\n+    }\n+\n+    /**\n+     * Returns a new datetime minus the specified number of days.\n+     * <p>\n+     * This datetime instance is immutable and unaffected by this method call.\n+     * <p>\n+     * The following three lines are identical in effect:\n+     * <pre>\n+     * YearMonthDay subtracted = dt.minusDays(6);\n+     * YearMonthDay subtracted = dt.minus(Period.days(6));\n+     * YearMonthDay subtracted = dt.withFieldAdded(DurationFieldType.days(), -6);\n+     * </pre>\n+     *\n+     * @param days  the amount of days to subtract, may be negative\n+     * @return the new datetime minus the increased days\n+     * @since 1.1\n+     */\n+    public YearMonthDay minusDays(int days) {\n+        return withFieldAdded(DurationFieldType.days(), FieldUtils.safeNegate(days));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets the property object for the specified type, which contains many useful methods.\n      *\n--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n     \n     //------------------------------------------------------------------------\n     /**\n+     * Negates the input throwing an exception if it can't negate it.\n+     * \n+     * @param value  the value to negate\n+     * @return the negated value\n+     * @throws ArithmeticException if the value is Integer.MIN_VALUE\n+     */\n+    public static int safeNegate(int value) {\n+        if (value == Integer.MIN_VALUE) {\n+            throw new ArithmeticException(\"Integer.MIN_VALUE cannoy be negated\");\n+        }\n+        return -value;\n+    }\n+    \n+    /**\n      * Add two values throwing an exception if overflow occurs.\n      * \n      * @param val1  the first value\n      * @param val2  the second value\n      * @return the new total\n+     * @throws ArithmeticException if the value is too big or too small\n      */\n     public static int safeAdd(int val1, int val2) {\n         long total = ((long) val1) + ((long) val2);\n      * @param val1  the first value\n      * @param val2  the second value\n      * @return the new total\n+     * @throws ArithmeticException if the value is too big or too small\n      */\n     public static long safeAdd(long val1, long val2) {\n         long total = val1 + val2;\n      * @param val1  the first value, to be taken away from\n      * @param val2  the second value, the amount to take away\n      * @return the new total\n+     * @throws ArithmeticException if the value is too big or too small\n      */\n     public static long safeSubtract(long val1, long val2) {\n         if (val2 == Long.MIN_VALUE) {\n      * @param val1  the first value\n      * @param val2  the second value\n      * @return the new total\n+     * @throws ArithmeticException if the value is too big or too small\n      */\n     public static long safeMultiply(long val1, long val2) {\n         if (val1 == 0  || val2 == 0) {\n      * \n      * @param value  the value\n      * @return the value as an int\n+     * @throws ArithmeticException if the value is too big or too small\n      */\n     public static int safeToInt(long value) {\n         if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {\n      * @param val1  the first value\n      * @param val2  the second value\n      * @return the new total\n+     * @throws ArithmeticException if the value is too big or too small\n      */\n     public static int safeMultiplyToInt(long val1, long val2) {\n         long val = FieldUtils.safeMultiply(val1, val2);\n         return FieldUtils.safeToInt(val);\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Verify that input values are within specified bounds.\n      * ", "timestamp": 1118185328, "metainfo": ""}