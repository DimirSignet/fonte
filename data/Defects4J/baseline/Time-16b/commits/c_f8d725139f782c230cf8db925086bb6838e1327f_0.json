{"sha": "f8d725139f782c230cf8db925086bb6838e1327f", "log": "Add and use new local ISO parsers  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDate.java\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadablePartial, ReadableInstant, String, Calendar and Date.\n-     * The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.\n+     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.\n      *\n      * @param instant  the datetime object\n      * @throws IllegalArgumentException if the instant is invalid\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadablePartial, ReadableInstant, String, Calendar and Date.\n-     * The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.\n+     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.\n      *\n      * @param instant  the datetime object\n      * @param zone  the time zone\n         Chronology chronology = converter.getChronology(instant, zone);\n         chronology = DateTimeUtils.getChronology(chronology);\n         iChronology = chronology.withUTC();\n-        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateElementParser());\n+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());\n         iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);\n     }\n \n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadablePartial, ReadableInstant, String, Calendar and Date.\n-     * The String formats are described by {@link ISODateTimeFormat#dateElementParser()}.\n+     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.\n      *\n      * @param instant  the datetime object\n      * @param chronology  the chronology\n         chronology = converter.getChronology(instant, chronology);\n         chronology = DateTimeUtils.getChronology(chronology);\n         iChronology = chronology.withUTC();\n-        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateElementParser());\n+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateParser());\n         iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], 0);\n     }\n \n--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadablePartial, ReadableInstant, String, Calendar and Date.\n-     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.\n+     * The String formats are described by {@link ISODateTimeFormat#localDateOptionalTimeParser()}.\n      *\n      * @param instant  the datetime object\n      * @throws IllegalArgumentException if the instant is invalid\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadablePartial, ReadableInstant, String, Calendar and Date.\n-     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.\n+     * The String formats are described by {@link ISODateTimeFormat#localDateOptionalTimeParser()}.\n      *\n      * @param instant  the datetime object\n      * @param zone  the time zone\n         Chronology chronology = converter.getChronology(instant, zone);\n         chronology = DateTimeUtils.getChronology(chronology);\n         iChronology = chronology.withUTC();\n-        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateOptionalTimeParser());\n+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());\n         iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);\n     }\n \n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadablePartial, ReadableInstant, String, Calendar and Date.\n-     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.\n+     * The String formats are described by {@link ISODateTimeFormat#localDateOptionalTimeParser()}.\n      *\n      * @param instant  the datetime object\n      * @param chronology  the chronology\n         chronology = converter.getChronology(instant, chronology);\n         chronology = DateTimeUtils.getChronology(chronology);\n         iChronology = chronology.withUTC();\n-        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.dateOptionalTimeParser());\n+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localDateOptionalTimeParser());\n         iLocalMillis = iChronology.getDateTimeMillis(values[0], values[1], values[2], values[3]);\n     }\n \n--- a/JodaTime/src/java/org/joda/time/LocalTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalTime.java\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadablePartial, ReadableInstant, String, Calendar and Date.\n-     * The String formats are described by {@link ISODateTimeFormat#timeParser()}.\n+     * The String formats are described by {@link ISODateTimeFormat#localTimeParser()}.\n      *\n      * @param instant  the datetime object\n      * @throws IllegalArgumentException if the instant is invalid\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadablePartial, ReadableInstant, String, Calendar and Date.\n-     * The String formats are described by {@link ISODateTimeFormat#timeParser()}.\n+     * The String formats are described by {@link ISODateTimeFormat#localTimeParser()}.\n      *\n      * @param instant  the datetime object\n      * @param zone  the time zone\n         Chronology chronology = converter.getChronology(instant, zone);\n         chronology = DateTimeUtils.getChronology(chronology);\n         iChronology = chronology.withUTC();\n-        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.timeParser());\n+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localTimeParser());\n         iLocalMillis = iChronology.getDateTimeMillis(0L, values[0], values[1], values[2], values[3]);\n     }\n \n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadablePartial, ReadableInstant, String, Calendar and Date.\n-     * The String formats are described by {@link ISODateTimeFormat#timeParser()}.\n+     * The String formats are described by {@link ISODateTimeFormat#localTimeParser()}.\n      *\n      * @param instant  the datetime object\n      * @param chronology  the chronology\n         chronology = converter.getChronology(instant, chronology);\n         chronology = DateTimeUtils.getChronology(chronology);\n         iChronology = chronology.withUTC();\n-        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.timeParser());\n+        int[] values = converter.getPartialValues(this, instant, chronology, ISODateTimeFormat.localTimeParser());\n         iLocalMillis = iChronology.getDateTimeMillis(0L, values[0], values[1], values[2], values[3]);\n     }\n \n--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n         tpe, // time parser element\n         dp,  // date parser\n         tp,  // time parser\n+        ltp, // local time parser\n         dtp, // date time parser\n-        dotp; // date optional time parser\n+        dotp, // date optional time parser\n+        ldotp; // local date optional time parser\n \n     /**\n      * Constructor.\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Returns a generic ISO date parser. It accepts formats described by\n-     * the following syntax:\n+     * Returns a generic ISO date parser for parsing dates with a possible zone.\n+     * It accepts formats described by the following syntax:\n      * <pre>\n      * date              = date-element ['T' offset]\n      * date-element      = std-date-element | ord-date-element | week-date-element\n      */\n     public static DateTimeFormatter dateParser() {\n         if (dp == null) {\n+            DateTimeParser tOffset = new DateTimeFormatterBuilder()\n+                .appendLiteral('T')\n+                .append(offsetElement()).toParser();\n             dp = new DateTimeFormatterBuilder()\n                 .append(dateElementParser())\n-                .appendOptional\n-                (new DateTimeFormatterBuilder()\n-                 .appendLiteral('T')\n-                 .append(offsetElement())\n-                 .toParser())\n+                .appendOptional(tOffset)\n                 .toFormatter();\n         }\n         return dp;\n     }\n \n     /**\n-     * Returns a generic ISO date parser. It accepts formats described by\n-     * the following syntax:\n+     * Returns a generic ISO date parser for parsing local dates.\n+     * It accepts formats described by the following syntax:\n+     * <pre>\n+     * date-element      = std-date-element | ord-date-element | week-date-element\n+     * std-date-element  = yyyy ['-' MM ['-' dd]]\n+     * ord-date-element  = yyyy ['-' DDD]\n+     * week-date-element = xxxx '-W' ww ['-' e]\n+     * </pre>\n+     * @since 1.3\n+     */\n+    public static DateTimeFormatter localDateParser() {\n+        return dateElementParser();\n+    }\n+\n+    /**\n+     * Returns a generic ISO date parser for parsing dates.\n+     * It accepts formats described by the following syntax:\n      * <pre>\n      * date-element      = std-date-element | ord-date-element | week-date-element\n      * std-date-element  = yyyy ['-' MM ['-' dd]]\n     }\n \n     /**\n-     * Returns a generic ISO time parser. It accepts formats described by\n-     * the following syntax:\n+     * Returns a generic ISO time parser for parsing times with a possible zone.\n+     * It accepts formats described by the following syntax:\n      * <pre>\n      * time           = ['T'] time-element [offset]\n      * time-element   = HH [minute-element] | [fraction]\n     public static DateTimeFormatter timeParser() {\n         if (tp == null) {\n             tp = new DateTimeFormatterBuilder()\n-                .appendOptional\n-                (new DateTimeFormatterBuilder()\n-                 .appendLiteral('T')\n-                 .toParser())\n+                .appendOptional(literalTElement().getParser())\n                 .append(timeElementParser())\n                 .appendOptional(offsetElement().getParser())\n                 .toFormatter();\n         }\n         return tp;\n+    }\n+\n+    /**\n+     * Returns a generic ISO time parser for parsing local times.\n+     * It accepts formats described by the following syntax:\n+     * <pre>\n+     * time           = ['T'] time-element\n+     * time-element   = HH [minute-element] | [fraction]\n+     * minute-element = ':' mm [second-element] | [fraction]\n+     * second-element = ':' ss [fraction]\n+     * fraction       = ('.' | ',') digit+\n+     * </pre>\n+     * @since 1.3\n+     */\n+    public static DateTimeFormatter localTimeParser() {\n+        if (ltp == null) {\n+            ltp = new DateTimeFormatterBuilder()\n+                .appendOptional(literalTElement().getParser())\n+                .append(timeElementParser())\n+                .toFormatter();\n+        }\n+        return ltp;\n     }\n \n     /**\n      * Returns a generic ISO datetime parser which parses either a date or\n      * a time or both. It accepts formats described by the following syntax:\n      * <pre>\n-     * datetime          = time | (date-element [time | ('T' offset)])\n+     * datetime          = time | date-opt-time\n      * time              = 'T' time-element [offset]\n+     * date-opt-time     = date-element ['T' [time-element] [offset]]\n      * date-element      = std-date-element | ord-date-element | week-date-element\n      * std-date-element  = yyyy ['-' MM ['-' dd]]\n      * ord-date-element  = yyyy ['-' DDD]\n                 .append(timeElementParser())\n                 .appendOptional(offsetElement().getParser())\n                 .toParser();\n-\n             dtp = new DateTimeFormatterBuilder()\n-                .append(null, new DateTimeParser[] {\n-                    time,\n-                    new DateTimeFormatterBuilder()\n-                    .append(dateElementParser())\n-                    .append(null, new DateTimeParser[] {\n-                        time,\n-                        new DateTimeFormatterBuilder()\n-                        .appendLiteral('T')\n-                        .append(offsetElement())\n-                        .toParser(),\n-                        null\n-                    })\n-                    .toParser()\n-                })\n+                .append(null, new DateTimeParser[] {time, dateOptionalTimeParser().getParser()})\n                 .toFormatter();\n         }\n         return dtp;\n \n     /**\n      * Returns a generic ISO datetime parser where the date is mandatory and\n-     * the time is optional. It accepts formats described by the following syntax:\n+     * the time is optional. This parser can parse zoned datetimes.\n+     * It accepts formats described by the following syntax:\n      * <pre>\n-     * datetime          = date-element ['T' time-element [offset]])\n+     * date-opt-time     = date-element ['T' [time-element] [offset]]\n      * date-element      = std-date-element | ord-date-element | week-date-element\n      * std-date-element  = yyyy ['-' MM ['-' dd]]\n      * ord-date-element  = yyyy ['-' DDD]\n      * minute-element    = ':' mm [second-element] | [fraction]\n      * second-element    = ':' ss [fraction]\n      * fraction          = ('.' | ',') digit+\n-     * offset            = 'Z' | (('+' | '-') HH [':' mm [':' ss [('.' | ',') SSS]]])\n      * </pre>\n+     * @since 1.3\n      */\n     public static DateTimeFormatter dateOptionalTimeParser() {\n         if (dotp == null) {\n+            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder()\n+                .appendLiteral('T')\n+                .appendOptional(timeElementParser().getParser())\n+                .appendOptional(offsetElement().getParser())\n+                .toParser();\n             dotp = new DateTimeFormatterBuilder()\n                 .append(dateElementParser())\n-                .appendOptional(\n-                    new DateTimeFormatterBuilder()\n-                        .appendLiteral('T')\n-                        .append(timeElementParser())\n-                        .appendOptional(offsetElement().getParser())\n-                        .toParser())\n+                .appendOptional(timeOrOffset)\n                 .toFormatter();\n         }\n         return dotp;\n+    }\n+\n+    /**\n+     * Returns a generic ISO datetime parser where the date is mandatory and\n+     * the time is optional. This parser only parses local datetimes.\n+     * It accepts formats described by the following syntax:\n+     * <pre>\n+     * datetime          = date-element ['T' time-element]\n+     * date-element      = std-date-element | ord-date-element | week-date-element\n+     * std-date-element  = yyyy ['-' MM ['-' dd]]\n+     * ord-date-element  = yyyy ['-' DDD]\n+     * week-date-element = xxxx '-W' ww ['-' e]\n+     * time-element      = HH [minute-element] | [fraction]\n+     * minute-element    = ':' mm [second-element] | [fraction]\n+     * second-element    = ':' ss [fraction]\n+     * fraction          = ('.' | ',') digit+\n+     * </pre>\n+     * @since 1.3\n+     */\n+    public static DateTimeFormatter localDateOptionalTimeParser() {\n+        if (ldotp == null) {\n+            DateTimeParser time = new DateTimeFormatterBuilder()\n+                .appendLiteral('T')\n+                .append(timeElementParser())\n+                .toParser();\n+            ldotp = new DateTimeFormatterBuilder()\n+                .append(dateElementParser())\n+                .appendOptional(time)\n+                .toFormatter();\n+        }\n+        return ldotp;\n     }\n \n     //-----------------------------------------------------------------------\n         }\n         return ze;\n     }\n-    \n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         }\n     }\n \n+    public void testConstructor_ObjectString1() throws Throwable {\n+        DateTime test = new DateTime(\"1972-12-03\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString2() throws Throwable {\n+        DateTime test = new DateTime(\"2006-06-03T+14:00\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(2006, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(2, test.getDayOfMonth());  // timezone\n+        assertEquals(11, test.getHourOfDay());  // test zone is +1, so shift back (14 - 1) hours from midnight\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString3() throws Throwable {\n+        DateTime test = new DateTime(\"1972-12-03T10:20:30.040\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString4() throws Throwable {\n+        DateTime test = new DateTime(\"2006-06-03T10:20:30.040+14:00\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(2006, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(2, test.getDayOfMonth());  // timezone\n+        assertEquals(21, test.getHourOfDay());  // test zone is +1, so shift back (14 - 1) hours from 10am\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString5() throws Throwable {\n+        DateTime test = new DateTime(\"T10:20:30.040\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1970, test.getYear());\n+        assertEquals(1, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString6() throws Throwable {\n+        DateTime test = new DateTime(\"T10:20:30.040+14:00\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(1969, test.getYear());  // timezone\n+        assertEquals(12, test.getMonthOfYear());  // timezone\n+        assertEquals(31, test.getDayOfMonth());  // timezone\n+        assertEquals(21, test.getHourOfDay());  // test zone is +1, so shift back (14 - 1) hours from 10am\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString7() throws Throwable {\n+        DateTime test = new DateTime(\"10\");\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(10, test.getYear());\n+        assertEquals(1, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+        assertEquals(0, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectStringEx1() throws Throwable {\n+        try {\n+            new DateTime(\"10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx2() throws Throwable {\n+        try {\n+            new DateTime(\"10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Test constructor (Object, DateTimeZone)\n      */\n--- a/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDateTime_Constructors.java\n         assertEquals(0, test.getMillisOfSecond());\n     }\n \n-    public void testConstructor_ObjectString5() throws Throwable {\n-        LocalDateTime test = new LocalDateTime(\"1972-04-06T10:20:30.040+06:00\");\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1972, test.getYear());\n-        assertEquals(4, test.getMonthOfYear());\n-        assertEquals(6, test.getDayOfMonth());\n-        assertEquals(10 + OFFSET_MOSCOW - 6, test.getHourOfDay());\n-        assertEquals(20, test.getMinuteOfHour());\n-        assertEquals(30, test.getSecondOfMinute());\n-        assertEquals(40, test.getMillisOfSecond());\n-    }\n-\n     public void testConstructor_ObjectStringEx1() throws Throwable {\n         try {\n+            new LocalDateTime(\"1970-04-06T+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx2() throws Throwable {\n+        try {\n+            new LocalDateTime(\"1970-04-06T10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx3() throws Throwable {\n+        try {\n             new LocalDateTime(\"T10:20:30.040\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n-    public void testConstructor_ObjectStringEx2() throws Throwable {\n+    public void testConstructor_ObjectStringEx4() throws Throwable {\n         try {\n             new LocalDateTime(\"T10:20:30.040+14:00\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n-    public void testConstructor_ObjectStringEx3() throws Throwable {\n-        try {\n-            new LocalDateTime(\"1970-04-06T+14:00\");\n+    public void testConstructor_ObjectStringEx5() throws Throwable {\n+        try {\n+            new LocalDateTime(\"10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx6() throws Throwable {\n+        try {\n+            new LocalDateTime(\"10:20:30.040+14:00\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java\n import junit.framework.TestSuite;\n \n import org.joda.time.chrono.BuddhistChronology;\n-import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n \n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n     private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n     private static final Chronology GREGORIAN_UTC = GregorianChronology.getInstanceUTC();\n         assertEquals(6, test.getDayOfMonth());\n     }\n \n+    public void testConstructor_ObjectString3() throws Throwable {\n+        LocalDate test = new LocalDate(\"1972-02\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(2, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+    }\n+\n     public void testConstructor_ObjectStringEx1() throws Throwable {\n         try {\n+            new LocalDate(\"1970-04-06T+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx2() throws Throwable {\n+        try {\n             new LocalDate(\"1970-04-06T10:20:30.040\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n-    public void testConstructor_ObjectStringEx2() throws Throwable {\n+    public void testConstructor_ObjectStringEx3() throws Throwable {\n         try {\n             new LocalDate(\"1970-04-06T10:20:30.040+14:00\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n-    public void testConstructor_ObjectStringEx3() throws Throwable {\n+    public void testConstructor_ObjectStringEx4() throws Throwable {\n+        try {\n+            new LocalDate(\"T10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx5() throws Throwable {\n         try {\n             new LocalDate(\"T10:20:30.040+14:00\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n-    public void testConstructor_ObjectStringEx4() throws Throwable {\n-        try {\n-            new LocalDate(\"1970-04-06T+14:00\");\n+    public void testConstructor_ObjectStringEx6() throws Throwable {\n+        try {\n+            new LocalDate(\"10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx7() throws Throwable {\n+        try {\n+            new LocalDate(\"10:20:30.040+14:00\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java\n     }\n \n     public void testConstructor_ObjectString2() throws Throwable {\n-        LocalTime test = new LocalTime(\"10:20:30.040+04:00\");\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(10 + OFFSET_LONDON - 4, test.getHourOfDay());\n+        LocalTime test = new LocalTime(\"T10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n         assertEquals(20, test.getMinuteOfHour());\n         assertEquals(30, test.getSecondOfMinute());\n         assertEquals(40, test.getMillisOfSecond());\n     }\n \n     public void testConstructor_ObjectString3() throws Throwable {\n-        LocalTime test = new LocalTime(\"T10:20:30.040\");\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(10, test.getHourOfDay());\n-        assertEquals(20, test.getMinuteOfHour());\n-        assertEquals(30, test.getSecondOfMinute());\n-        assertEquals(40, test.getMillisOfSecond());\n-    }\n-\n-    public void testConstructor_ObjectString4() throws Throwable {\n-        LocalTime test = new LocalTime(\"T10:20:30.040+04:00\");\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(10 + OFFSET_LONDON - 4, test.getHourOfDay());\n-        assertEquals(20, test.getMinuteOfHour());\n-        assertEquals(30, test.getSecondOfMinute());\n-        assertEquals(40, test.getMillisOfSecond());\n-    }\n-\n-    public void testConstructor_ObjectString5() throws Throwable {\n         LocalTime test = new LocalTime(\"10:20\");\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(10, test.getHourOfDay());\n         assertEquals(0, test.getMillisOfSecond());\n     }\n \n+    public void testConstructor_ObjectString4() throws Throwable {\n+        LocalTime test = new LocalTime(\"10\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n     public void testConstructor_ObjectStringEx1() throws Throwable {\n         try {\n             new LocalTime(\"1970-04-06\");\n \n     public void testConstructor_ObjectStringEx2() throws Throwable {\n         try {\n+            new LocalTime(\"1970-04-06T+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx3() throws Throwable {\n+        try {\n+            new LocalTime(\"1970-04-06T10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx4() throws Throwable {\n+        try {\n             new LocalTime(\"1970-04-06T10:20:30.040+14:00\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n-    public void testConstructor_ObjectStringEx3() throws Throwable {\n-        try {\n-            new LocalTime(\"1970-04-06T+14:00\");\n+    public void testConstructor_ObjectStringEx5() throws Throwable {\n+        try {\n+            new LocalTime(\"T10:20:30.040+04:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx6() throws Throwable {\n+        try {\n+            new LocalTime(\"10:20:30.040+04:00\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         assertEquals(40, test.getMillisOfSecond());\n     }\n \n+    public void testConstructor_ObjectString1() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(\"10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString2() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(\"10:20:30.040+04:00\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET - 4, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString3() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(\"T10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString4() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(\"T10:20:30.040+04:00\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10 + OFFSET - 4, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(30, test.getSecondOfMinute());\n+        assertEquals(40, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString5() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(\"10:20\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(20, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectString6() throws Throwable {\n+        TimeOfDay test = new TimeOfDay(\"10\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(0, test.getMillisOfSecond());\n+    }\n+\n+    public void testConstructor_ObjectStringEx1() throws Throwable {\n+        try {\n+            new TimeOfDay(\"1970-04-06\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx2() throws Throwable {\n+        try {\n+            new TimeOfDay(\"1970-04-06T+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx3() throws Throwable {\n+        try {\n+            new TimeOfDay(\"1970-04-06T10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor_ObjectStringEx4() throws Throwable {\n+        try {\n+            new TimeOfDay(\"1970-04-06T10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Test constructor (Object, Chronology)\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     }\n \n     //-----------------------------------------------------------------------\n-    /**\n-     * Test constructor (Object)\n-     */\n     public void testConstructor_Object() throws Throwable {\n         Date date = new Date(TEST_TIME1);\n         YearMonthDay test = new YearMonthDay(date);\n         assertEquals(6, test.getDayOfMonth());\n     }\n \n-    /**\n-     * Test constructor (Object=null)\n-     */\n     public void testConstructor_nullObject() throws Throwable {\n         YearMonthDay test = new YearMonthDay((Object) null);\n         assertEquals(ISO_UTC, test.getChronology());\n         assertEquals(9, test.getDayOfMonth());\n     }\n \n+    public void testConstructor_ObjectString1() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(\"1972-12-03\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectString2() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(\"1972-12-03T+14:00\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(2, test.getDayOfMonth());  // timezone\n+    }\n+\n+    public void testConstructor_ObjectString3() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(\"1972-12-03T10:20:30.040\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectString4() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(\"1972-12-03T10:20:30.040+14:00\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1972, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(2, test.getDayOfMonth());  // timezone\n+    }\n+\n+    public void testConstructor_ObjectString5() throws Throwable {\n+        YearMonthDay test = new YearMonthDay(\"10\");\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(10, test.getYear());\n+        assertEquals(1, test.getMonthOfYear());\n+        assertEquals(1, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_ObjectStringEx1() throws Throwable {\n+        try {\n+            new YearMonthDay(\"T10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx2() throws Throwable {\n+        try {\n+            new YearMonthDay(\"T10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx3() throws Throwable {\n+        try {\n+            new YearMonthDay(\"10:20:30.040\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void testConstructor_ObjectStringEx4() throws Throwable {\n+        try {\n+            new YearMonthDay(\"10:20:30.040+14:00\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Test constructor (Object, Chronology)\n      */\n--- a/JodaTime/src/test/org/joda/time/format/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestAll.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2006 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         suite.addTest(TestDateTimeFormatStyle.suite());\n         suite.addTest(TestISODateTimeFormat.suite());\n         suite.addTest(TestISODateTimeFormat_Fields.suite());\n+        suite.addTest(TestISODateTimeFormatParsing.suite());\n         suite.addTest(TestDateTimeFormatterBuilder.suite());\n         \n         suite.addTest(TestPeriodFormatter.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormatParsing.java\n+/*\n+ *  Copyright 2001-2006 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+\n+/**\n+ * This class is a Junit unit test for ISODateTimeFormat parsing.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestISODateTimeFormatParsing extends TestCase {\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestISODateTimeFormatParsing.class);\n+    }\n+\n+    public TestISODateTimeFormatParsing(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.forID(\"Europe/London\"));\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_dateParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.dateParser();\n+        assertParse(parser, true, \"2006-06-09\");\n+        assertParse(parser, true, \"2006-W27-3\");\n+        assertParse(parser, true, \"2006-123\");\n+        assertParse(parser, true, \"2006-06-09T+02:00\");\n+        assertParse(parser, true, \"2006-W27-3T+02:00\");\n+        assertParse(parser, true, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, false, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, false, \"T10:20:30.040\");\n+        assertParse(parser, false, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, false, \"10:20:30.040\");\n+        assertParse(parser, false, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_localDateParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.localDateParser();\n+        assertParse(parser, true, \"2006-06-09\");\n+        assertParse(parser, true, \"2006-W27-3\");\n+        assertParse(parser, true, \"2006-123\");\n+        assertParse(parser, false, \"2006-06-09T+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T+02:00\");\n+        assertParse(parser, false, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, false, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, false, \"T10:20:30.040\");\n+        assertParse(parser, false, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, false, \"10:20:30.040\");\n+        assertParse(parser, false, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_dateElementParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.dateElementParser();\n+        assertParse(parser, true, \"2006-06-09\");\n+        assertParse(parser, true, \"2006-W27-3\");\n+        assertParse(parser, true, \"2006-123\");\n+        assertParse(parser, false, \"2006-06-09T+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T+02:00\");\n+        assertParse(parser, false, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, false, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, false, \"T10:20:30.040\");\n+        assertParse(parser, false, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, false, \"10:20:30.040\");\n+        assertParse(parser, false, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_timeParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.timeParser();\n+        assertParse(parser, false, \"2006-06-09\");\n+        assertParse(parser, false, \"2006-W27-3\");\n+        assertParse(parser, false, \"2006-123\");\n+        assertParse(parser, false, \"2006-06-09T+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T+02:00\");\n+        assertParse(parser, false, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, false, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, true, \"T10:20:30.040\");\n+        assertParse(parser, true, \"T10.5\");\n+        assertParse(parser, true, \"T10:20:30.040+02:00\");\n+        assertParse(parser, true, \"T10.5+02:00\");\n+        \n+        assertParse(parser, true, \"10:20:30.040\");\n+        assertParse(parser, true, \"10.5\");\n+        assertParse(parser, true, \"10:20:30.040+02:00\");\n+        assertParse(parser, true, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_localTimeParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.localTimeParser();\n+        assertParse(parser, false, \"2006-06-09\");\n+        assertParse(parser, false, \"2006-W27-3\");\n+        assertParse(parser, false, \"2006-123\");\n+        assertParse(parser, false, \"2006-06-09T+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T+02:00\");\n+        assertParse(parser, false, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, false, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, true, \"T10:20:30.040\");\n+        assertParse(parser, true, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, true, \"10:20:30.040\");\n+        assertParse(parser, true, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_timeElementParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.timeElementParser();\n+        assertParse(parser, false, \"2006-06-09\");\n+        assertParse(parser, false, \"2006-W27-3\");\n+        assertParse(parser, false, \"2006-123\");\n+        assertParse(parser, false, \"2006-06-09T+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T+02:00\");\n+        assertParse(parser, false, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, false, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, false, \"T10:20:30.040\");\n+        assertParse(parser, false, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, true, \"10:20:30.040\");\n+        assertParse(parser, true, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_dateTimeParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.dateTimeParser();\n+        assertParse(parser, true, \"2006-06-09\");\n+        assertParse(parser, true, \"2006-W27-3\");\n+        assertParse(parser, true, \"2006-123\");\n+        assertParse(parser, true, \"2006-06-09T+02:00\");\n+        assertParse(parser, true, \"2006-W27-3T+02:00\");\n+        assertParse(parser, true, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, true, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, true, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, true, \"2006-123T10:20:30.040\");\n+        assertParse(parser, true, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, true, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, true, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, true, \"T10:20:30.040\");\n+        assertParse(parser, true, \"T10.5\");\n+        assertParse(parser, true, \"T10:20:30.040+02:00\");\n+        assertParse(parser, true, \"T10.5+02:00\");\n+        \n+        assertParse(parser, false, \"10:20:30.040\");\n+        assertParse(parser, false, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_dateOptionalTimeParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.dateOptionalTimeParser();\n+        assertParse(parser, true, \"2006-06-09\");\n+        assertParse(parser, true, \"2006-W27-3\");\n+        assertParse(parser, true, \"2006-123\");\n+        assertParse(parser, true, \"2006-06-09T+02:00\");\n+        assertParse(parser, true, \"2006-W27-3T+02:00\");\n+        assertParse(parser, true, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, true, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, true, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, true, \"2006-123T10:20:30.040\");\n+        assertParse(parser, true, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, true, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, true, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, false, \"T10:20:30.040\");\n+        assertParse(parser, false, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, false, \"10:20:30.040\");\n+        assertParse(parser, false, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_localDateOptionalTimeParser() {\n+        DateTimeFormatter parser = ISODateTimeFormat.localDateOptionalTimeParser();\n+        assertParse(parser, true, \"2006-06-09\");\n+        assertParse(parser, true, \"2006-W27-3\");\n+        assertParse(parser, true, \"2006-123\");\n+        assertParse(parser, false, \"2006-06-09T+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T+02:00\");\n+        assertParse(parser, false, \"2006-123T+02:00\");\n+        \n+        assertParse(parser, true, \"2006-06-09T10:20:30.040\");\n+        assertParse(parser, true, \"2006-W27-3T10:20:30.040\");\n+        assertParse(parser, true, \"2006-123T10:20:30.040\");\n+        assertParse(parser, false, \"2006-06-09T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-W27-3T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"2006-123T10:20:30.040+02:00\");\n+        \n+        assertParse(parser, false, \"T10:20:30.040\");\n+        assertParse(parser, false, \"T10.5\");\n+        assertParse(parser, false, \"T10:20:30.040+02:00\");\n+        assertParse(parser, false, \"T10.5+02:00\");\n+        \n+        assertParse(parser, false, \"10:20:30.040\");\n+        assertParse(parser, false, \"10.5\");\n+        assertParse(parser, false, \"10:20:30.040+02:00\");\n+        assertParse(parser, false, \"10.5+02:00\");\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    private void assertParse(DateTimeFormatter parser, boolean expected, String str) {\n+        if (expected) {\n+            parser.parseMillis(str);\n+        } else {\n+            try {\n+                parser.parseMillis(str);\n+                fail();\n+            } catch (IllegalArgumentException ex) {\n+                // expected\n+            }\n+        }\n+    }\n+\n+}", "timestamp": 1150548363, "metainfo": ""}