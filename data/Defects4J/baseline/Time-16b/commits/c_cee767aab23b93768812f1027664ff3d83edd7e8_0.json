{"sha": "cee767aab23b93768812f1027664ff3d83edd7e8", "log": "Refine API and increase test coverage   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n         return new Property(this, field);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Converts this object to a YearMonthDay using the same millis and chronology.\n+     * \n+     * @return a YearMonthDay using the same millis and chronology\n+     */\n+    public YearMonthDay toYearMonthDay() {\n+        return new YearMonthDay(getMillis(), getChronology());\n+    }\n+\n+    /**\n+     * Converts this object to an Interval encompassing the whole of this day.\n+     * <p>\n+     * The interval starts at midnight 00:00 and ends at 00:00 the following day,\n+     * (which is not included in the interval, as intervals are half-open).\n+     * \n+     * @return a YearMonthDay using the same millis and chronology\n+     */\n+    public Interval toInterval() {\n+        return new Interval(this, Period.days(1));\n+    }\n+\n     // Date properties\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Get this object as a DateMidnight using the same millis and chronology.\n+     * Converts this object to a DateMidnight using the same millis and chronology.\n      * \n      * @return a DateMidnight using the same millis and chronology\n      */\n     public DateMidnight toDateMidnight() {\n         return new DateMidnight(getMillis(), getChronology());\n+    }\n+\n+    /**\n+     * Converts this object to a YearMonthDay using the same millis and chronology.\n+     * \n+     * @return a YearMonthDay using the same millis and chronology\n+     */\n+    public YearMonthDay toYearMonthDay() {\n+        return new YearMonthDay(getMillis(), getChronology());\n+    }\n+\n+    /**\n+     * Converts this object to a TimeOfDay using the same millis and chronology.\n+     * \n+     * @return a TimeOfDay using the same millis and chronology\n+     */\n+    public TimeOfDay toTimeOfDay() {\n+        return new TimeOfDay(getMillis(), getChronology());\n     }\n \n     // Date properties\n--- a/JodaTime/src/java/org/joda/time/ReadableInstant.java\n+++ b/JodaTime/src/java/org/joda/time/ReadableInstant.java\n     long getMillis();\n \n     /**\n-     * Gets the chronology of the instant, null if not applicable.\n+     * Gets the chronology of the instant.\n      * <p>\n      * The {@link Chronology} provides conversion from the millisecond\n      * value to meaningful fields in a particular calendar system.\n      * \n-     * @return the Chronology, null if not applicable\n+     * @return the Chronology, never null\n      */\n     Chronology getChronology();\n \n     /**\n-     * Gets the time zone of the instant, null if not applicable.\n+     * Gets the time zone of the instant from the chronology.\n      * \n-     * @return the DateTimeZone, null if not applicable\n+     * @return the DateTimeZone that the instant is using, never null\n      */\n     DateTimeZone getZone();\n \n      * The formula used must be as follows:\n      * <pre>\n      * ((int) (getMillis() ^ (getMillis() >>> 32))) +\n-     * (getChronology() == null ? 0 : getChronology().hashCode())\n+     * (getChronology().hashCode())\n      * </pre>\n      *\n      * @return a hash code as defined above\n--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java\n         return new DateMidnight(getYear(), getMonthOfYear(), getDayOfMonth(), chrono);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Converts this object to a DateTime using a TimeOfDay to fill in the\n      * missing fields and using the default time zone.\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Converts this object to an Interval representing the whole day\n+     * in the default time zone.\n+     *\n+     * @return the DateMidnight instance in the default zone\n+     */\n+    public Interval toInterval() {\n+        return toInterval(null);\n+    }\n+\n+    /**\n+     * Converts this object to an Interval representing the whole day.\n+     *\n+     * @param zone  the zone to get the Interval in, null means default\n+     * @return the DateMidnight instance\n+     */\n+    public Interval toInterval(DateTimeZone zone) {\n+        zone = DateTimeUtils.getZone(zone);\n+        DateMidnight start = toDateMidnight(zone);\n+        return new Interval(start, start.plus(Period.days(1)));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Get the year field value.\n      *\n      * @return the year\n--- a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java\n             locale = Locale.getDefault();\n         }\n         DateTimeZone zone = getZone();\n-        Calendar cal;\n-        if (zone == null) {\n-            cal = Calendar.getInstance(locale);\n-        } else {\n-            cal = Calendar.getInstance(zone.toTimeZone(), locale);\n-        }\n+        Calendar cal = Calendar.getInstance(zone.toTimeZone(), locale);\n         cal.setTime(toDate());\n         return cal;\n     }\n      */\n     public GregorianCalendar toGregorianCalendar() {\n         DateTimeZone zone = getZone();\n-        GregorianCalendar cal;\n-        if (zone == null) {\n-            cal = new GregorianCalendar();\n-        } else {\n-            cal = new GregorianCalendar(zone.toTimeZone());\n-        }\n+        GregorianCalendar cal = new GregorianCalendar(zone.toTimeZone());\n         cal.setTime(toDate());\n         return cal;\n     }\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the time zone of the datetime from the chronology, or null if there\n-     * isn't any chronology.\n-     * \n-     * @return the DateTimeZone that the datetime is using\n+     * Gets the time zone of the instant from the chronology.\n+     * \n+     * @return the DateTimeZone that the instant is using, never null\n      */\n     public DateTimeZone getZone() {\n-        Chronology chrono = getChronology();\n-        return (chrono != null ? chrono.getZone() : null);\n+        return getChronology().getZone();\n     }\n \n     /**\n         // must be to fulfil ReadableInstant contract\n         return\n             ((int) (getMillis() ^ (getMillis() >>> 32))) +\n-            (getChronology() == null ? 0 : getChronology().hashCode());\n+            (getChronology().hashCode());\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/base/BaseDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/base/BaseDateTime.java\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n import org.joda.time.ReadableDateTime;\n-import org.joda.time.TimeOfDay;\n-import org.joda.time.YearMonthDay;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.InstantConverter;\n         iChronology = checkChronology(chronology);\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Get this object as a YearMonthDay and chronology.\n-     * \n-     * @return a YearMonthDay using the same millis and chronology\n-     */\n-    public YearMonthDay toYearMonthDay() {\n-        return new YearMonthDay(getMillis(), getChronology());\n-    }\n-\n-    /**\n-     * Get this object as a TimeOfDay and chronology.\n-     * \n-     * @return a TimeOfDay using the same millis and chronology\n-     */\n-    public TimeOfDay toTimeOfDay() {\n-        return new TimeOfDay(getMillis(), getChronology());\n-    }\n-\n }\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n import junit.framework.TestSuite;\n \n import org.joda.time.base.AbstractInstant;\n+import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.field.UnsupportedDateTimeField;\n \n /**\n  * This class is a Junit unit test for DateMidnight.\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testToYearMonthDay() {\n+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, Chronology.getCoptic());\n+        YearMonthDay test = base.toYearMonthDay();\n+        assertEquals(new YearMonthDay(TEST_TIME1_UTC, Chronology.getCoptic()), test);\n+    }\n+\n+    public void testToInterval() {\n+        DateMidnight base = new DateMidnight(TEST_TIME1_UTC, Chronology.getCoptic());\n+        Interval test = base.toInterval();\n+        DateMidnight end = base.plus(Period.days(1));\n+        assertEquals(new Interval(base, end), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testWithMillis_long() {\n         DateMidnight test = new DateMidnight(TEST_TIME1_UTC);\n         DateMidnight result = test.withMillis(TEST_TIME2_UTC);\n         result = test.withZoneRetainFields(LONDON);\n         assertSame(test, result);\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFields_RPartial() {\n+        DateMidnight test = new DateMidnight(2004, 5, 6);\n+        DateMidnight result = test.withFields(new YearMonthDay(2003, 4, 5));\n+        DateMidnight expected = new DateMidnight(2003, 4, 5);\n+        assertEquals(expected, result);\n+        \n+        test = new DateMidnight(TEST_TIME1_UTC);\n+        result = test.withFields(null);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithField1() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight result = test.withField(DateTimeFieldType.year(), 2006);\n+        \n+        assertEquals(new DateMidnight(2004, 6, 9), test);\n+        assertEquals(new DateMidnight(2006, 6, 9), result);\n+    }\n+\n+    public void testWithField2() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight result = test.withField(null, 6);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithFieldAdded1() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight result = test.withFieldAdded(DurationFieldType.years(), 6);\n+        \n+        assertEquals(new DateMidnight(2004, 6, 9), test);\n+        assertEquals(new DateMidnight(2010, 6, 9), result);\n+    }\n+\n+    public void testWithFieldAdded2() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight result = test.withFieldAdded(null, 6);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_long_int() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());\n+        DateMidnight result = test.withDurationAdded(123456789L, 1);\n+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(123456789L, 0);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(123456789L, 2);\n+        expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(123456789L, -3);\n+        expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_RD_int() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());\n+        DateMidnight result = test.withDurationAdded(new Duration(123456789L), 1);\n+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(null, 1);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), 0);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), 2);\n+        expected = new DateMidnight(test.getMillis() + (2L * 123456789L), BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), -3);\n+        expected = new DateMidnight(test.getMillis() - (3L * 123456789L), BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_RP_int() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 1);\n+        DateMidnight expected = new DateMidnight(2003, 7, 28, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withPeriodAdded(null, 1);\n+        assertSame(test, result);\n+        \n+        result = test.withPeriodAdded(new Period(1, 2, 3, 4, 5, 6, 7, 8), 0);\n+        assertSame(test, result);\n+        \n+        result = test.withPeriodAdded(new Period(1, 2, 0, 4, 5, 6, 7, 8), 3);\n+        expected = new DateMidnight(2005, 11, 15, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.withPeriodAdded(new Period(1, 2, 0, 1, 1, 2, 3, 4), -1);\n+        expected = new DateMidnight(2001, 3, 1, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public void testPlus_long() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());\n+        DateMidnight result = test.plus(123456789L);\n+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+    }\n+    \n+    public void testPlus_RD() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());\n+        DateMidnight result = test.plus(new Duration(123456789L));\n+        DateMidnight expected = new DateMidnight(test.getMillis() + 123456789L, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadableDuration) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testPlus_RP() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight result = test.plus(new Period(1, 2, 3, 4, 5, 6, 7, 8));\n+        DateMidnight expected = new DateMidnight(2003, 7, 28, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------    \n+    public void testMinus_long() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());\n+        DateMidnight result = test.minus(123456789L);\n+        DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+    }\n+\n+    public void testMinus_RD() {\n+        DateMidnight test = new DateMidnight(TEST_TIME1_UTC, BuddhistChronology.getInstance());\n+        DateMidnight result = test.minus(new Duration(123456789L));\n+        DateMidnight expected = new DateMidnight(test.getMillis() - 123456789L, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadableDuration) null);\n+        assertSame(test, result);\n+    }\n+\n+    public void testMinus_RP() {\n+        DateMidnight test = new DateMidnight(2002, 5, 3, BuddhistChronology.getInstance());\n+        DateMidnight result = test.minus(new Period(1, 1, 1, 1, 1, 1, 1, 1));\n+        DateMidnight expected = new DateMidnight(2001, 3, 25, BuddhistChronology.getInstance());\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadablePeriod) null);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        DateMidnight test = new DateMidnight();\n+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));\n+        assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear()));\n+        assertEquals(test.property(DateTimeFieldType.millisOfSecond()), test.property(DateTimeFieldType.millisOfSecond()));\n+        DateTimeFieldType bad = new DateTimeFieldType(\"bad\") {\n+            public DurationFieldType getDurationType() {\n+                return DurationFieldType.weeks();\n+            }\n+            public DurationFieldType getRangeDurationType() {\n+                return null;\n+            }\n+            public DateTimeField getField(Chronology chronology) {\n+                return UnsupportedDateTimeField.getInstance(this, null);\n+            }\n+        };\n+        try {\n+            test.property(bad);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testGetIntervalChronology_RInterval() {\n+        Interval dt = new Interval(123L, 456L, Chronology.getBuddhist());\n+        assertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt));\n+        \n+        assertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(null));\n+        \n+        MutableInterval ai = new MutableInterval() {\n+            public Chronology getChronology() {\n+                return null; // testing for this\n+            }\n+        };\n+        assertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(ai));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetIntervalChronology_RI_RI() {\n+        DateTime dt1 = new DateTime(123L, Chronology.getBuddhist());\n+        DateTime dt2 = new DateTime(123L, Chronology.getCoptic());\n+        assertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt1, dt2));\n+        assertEquals(Chronology.getBuddhist(), DateTimeUtils.getIntervalChronology(dt1, null));\n+        assertEquals(Chronology.getCoptic(), DateTimeUtils.getIntervalChronology(null, dt2));\n+        assertEquals(Chronology.getISO(), DateTimeUtils.getIntervalChronology(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testGetChronology_Chronology() {\n         assertEquals(BuddhistChronology.getInstance(), DateTimeUtils.getChronology(BuddhistChronology.getInstance()));\n         assertEquals(ISOChronology.getInstance(), DateTimeUtils.getChronology(null));\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.field.UnsupportedDateTimeField;\n \n /**\n  * This class is a Junit unit test for DateTime.\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testToDateMidnight() {\n+        DateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());\n+        DateMidnight test = base.toDateMidnight();\n+        assertEquals(new DateMidnight(base, Chronology.getCoptic()), test);\n+    }\n+\n+    public void testToYearMonthDay() {\n+        DateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());\n+        YearMonthDay test = base.toYearMonthDay();\n+        assertEquals(new YearMonthDay(TEST_TIME1, Chronology.getCoptic()), test);\n+    }\n+\n+    public void testToTimeOfDay() {\n+        DateTime base = new DateTime(TEST_TIME1, Chronology.getCoptic());\n+        TimeOfDay test = base.toTimeOfDay();\n+        assertEquals(new TimeOfDay(TEST_TIME1, Chronology.getCoptic()), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testWithMillis_long() {\n         DateTime test = new DateTime(TEST_TIME1);\n         DateTime result = test.withMillis(TEST_TIME2);\n         result = test.minus((ReadablePeriod) null);\n         assertSame(test, result);\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n+    public void testProperty() {\n+        DateTime test = new DateTime();\n+        assertEquals(test.year(), test.property(DateTimeFieldType.year()));\n+        assertEquals(test.dayOfWeek(), test.property(DateTimeFieldType.dayOfWeek()));\n+        assertEquals(test.secondOfMinute(), test.property(DateTimeFieldType.secondOfMinute()));\n+        assertEquals(test.millisOfSecond(), test.property(DateTimeFieldType.millisOfSecond()));\n+        DateTimeFieldType bad = new DateTimeFieldType(\"bad\") {\n+            public DurationFieldType getDurationType() {\n+                return DurationFieldType.weeks();\n+            }\n+            public DurationFieldType getRangeDurationType() {\n+                return null;\n+            }\n+            public DateTimeField getField(Chronology chronology) {\n+                return UnsupportedDateTimeField.getInstance(this, null);\n+            }\n+        };\n+        try {\n+            test.property(bad);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n         assertSame(test, result);\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_long_int() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.withDurationAdded(123456789L, 1);\n+        Instant expected = new Instant(TEST_TIME1 + 123456789L);\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(123456789L, 0);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(123456789L, 2);\n+        expected = new Instant(TEST_TIME1 + (2L * 123456789L));\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(123456789L, -3);\n+        expected = new Instant(TEST_TIME1 - (3L * 123456789L));\n+        assertEquals(expected, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_RD_int() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.withDurationAdded(new Duration(123456789L), 1);\n+        Instant expected = new Instant(TEST_TIME1 + 123456789L);\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(null, 1);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), 0);\n+        assertSame(test, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), 2);\n+        expected = new Instant(TEST_TIME1 + (2L * 123456789L));\n+        assertEquals(expected, result);\n+        \n+        result = test.withDurationAdded(new Duration(123456789L), -3);\n+        expected = new Instant(TEST_TIME1 - (3L * 123456789L));\n+        assertEquals(expected, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testPlus_long() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.plus(123456789L);\n+        Instant expected = new Instant(TEST_TIME1 + 123456789L);\n+        assertEquals(expected, result);\n+    }\n+    \n+    public void testPlus_RD() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.plus(new Duration(123456789L));\n+        Instant expected = new Instant(TEST_TIME1 + 123456789L);\n+        assertEquals(expected, result);\n+        \n+        result = test.plus((ReadableDuration) null);\n+        assertSame(test, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------    \n+    public void testMinus_long() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.minus(123456789L);\n+        Instant expected = new Instant(TEST_TIME1 - 123456789L);\n+        assertEquals(expected, result);\n+    }\n+    \n+    public void testMinus_RD() {\n+        Instant test = new Instant(TEST_TIME1);\n+        Instant result = test.minus(new Duration(123456789L));\n+        Instant expected = new Instant(TEST_TIME1 - 123456789L);\n+        assertEquals(expected, result);\n+        \n+        result = test.minus((ReadableDuration) null);\n+        assertSame(test, result);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     public void testImmutable() {\n         assertTrue(Modifier.isFinal(Instant.class.getModifiers()));\n     }\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testWithChronology1() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withChronology(Chronology.getBuddhist());\n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME2, Chronology.getBuddhist()), test);\n+    }\n+\n+    public void testWithChronology2() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withChronology(null);\n+        assertEquals(new Interval(TEST_TIME1, TEST_TIME2, Chronology.getISO()), test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testWithStartMillis_long1() {\n         Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n         Interval test = base.withStartMillis(TEST_TIME1 - 1);\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    public void testWithDurationAfterStart4() throws Throwable {\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withDurationAfterStart(base.toDuration());\n+        \n+        assertSame(base, test);\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testWithDurationBeforeEnd1() throws Throwable {\n         Duration dur = new Duration(TEST_TIME_NOW - TEST_TIME1);\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    public void testWithDurationBeforeEnd4() throws Throwable {\n+        Interval base = new Interval(TEST_TIME_NOW, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withDurationBeforeEnd(base.toDuration());\n+        \n+        assertSame(base, test);\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testWithPeriodAfterStart1() throws Throwable {\n         DateTime dt = new DateTime(TEST_TIME_NOW, COPTIC_PARIS);\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Test factory (long)\n+     */\n+    public void testFactoryMillisOfDay_long1() throws Throwable {\n+        TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1);\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test factory (long, Chronology)\n+     */\n+    public void testFactoryMillisOfDay_long1_Chronology() throws Throwable {\n+        TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1, JulianChronology.getInstance());\n+        assertEquals(JulianChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    /**\n+     * Test factory (long, Chronology=null)\n+     */\n+    public void testFactoryMillisOfDay_long_nullChronology() throws Throwable {\n+        TimeOfDay test = TimeOfDay.fromMillisOfDay(TEST_TIME1, null);\n+        assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Test constructor ()\n      */\n     public void testConstructor() throws Throwable {\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testToInterval() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        Interval test = base.toInterval();\n+        check(base, 2005, 6, 9);\n+        DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT);\n+        DateTime end = start.plus(Period.days(1));\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInterval_Zone() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        Interval test = base.toInterval(TOKYO);\n+        check(base, 2005, 6, 9);\n+        DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT, TOKYO);\n+        DateTime end = start.plus(Period.days(1));\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n+    public void testToInterval_nullZone() {\n+        YearMonthDay base = new YearMonthDay(2005, 6, 9, COPTIC_PARIS); // PARIS irrelevant\n+        Interval test = base.toInterval(null);\n+        check(base, 2005, 6, 9);\n+        DateTime start = base.toDateTime(TimeOfDay.MIDNIGHT, LONDON);\n+        DateTime end = start.plus(Period.days(1));\n+        Interval expected = new Interval(start, end);\n+        assertEquals(expected, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testProperty() {\n         YearMonthDay test = new YearMonthDay(2005, 6, 9);\n         assertEquals(test.year(), test.property(DateTimeFieldType.year()));\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeZone;\n import org.joda.time.Instant;\n+import org.joda.time.MutableDateTime;\n import org.joda.time.ReadableInstant;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n     public void testGetChronology_Object() throws Exception {\n         assertEquals(ISO.withUTC(), ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L)));\n         assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L)));\n+        \n+        MutableDateTime mdt = new MutableDateTime() {\n+            public Chronology getChronology() {\n+                return null; // bad\n+            }\n+        };\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(mdt));\n     }\n \n     public void testGetChronology_Object_Zone() throws Exception {\n         assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (DateTimeZone) null));\n         \n         assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L, new MockBadChronology()), PARIS));\n+        \n+        MutableDateTime mdt = new MutableDateTime() {\n+            public Chronology getChronology() {\n+                return null; // bad\n+            }\n+        };\n+        assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(mdt, PARIS));\n     }\n \n     public void testGetChronology_Object_Chronology() throws Exception {\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n         assertEquals(Chronology.getGJ(), m.getChronology());\n     }\n \n+    public void testSetIntoInterval_Object3() throws Exception {\n+        MutableInterval i = new MutableInterval(0L, 123L) {\n+            public Chronology getChronology() {\n+                return null; // bad\n+            }\n+        };\n+        MutableInterval m = new MutableInterval(-1000L, 1000L, Chronology.getBuddhist());\n+        ReadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getGJ());\n+        assertEquals(0L, m.getStartMillis());\n+        assertEquals(123L, m.getEndMillis());\n+        assertEquals(Chronology.getISO(), m.getChronology());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"Converter[org.joda.time.ReadableInterval]\", ReadableIntervalConverter.INSTANCE.toString());", "timestamp": 1094921274, "metainfo": ""}