{"sha": "87acf8d63689779e7eaec3e9801046977c0dd696", "log": "Split Duration and TimePeriod converters and Javadoc   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/convert/ConverterManager.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ConverterManager.java\n \n         iDurationConverters = new ConverterSet(new Converter[] {\n             ReadableDurationConverter.INSTANCE,\n+            ReadableTimePeriodConverter.INSTANCE,\n             ReadableIntervalConverter.INSTANCE,\n             StringConverter.INSTANCE,\n             LongConverter.INSTANCE,\n         });\n \n         iTimePeriodConverters = new ConverterSet(new Converter[] {\n+            ReadableDurationConverter.INSTANCE,\n             ReadableTimePeriodConverter.INSTANCE,\n             ReadableIntervalConverter.INSTANCE,\n             StringConverter.INSTANCE,\n--- a/JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java\n  */\n package org.joda.time.convert;\n \n+import org.joda.time.DurationType;\n+import org.joda.time.ReadWritableTimePeriod;\n import org.joda.time.ReadableDuration;\n \n /**\n  * @author Brian S O'Neill\n  * @since 1.0\n  */\n-class ReadableDurationConverter extends AbstractConverter implements DurationConverter {\n+class ReadableDurationConverter extends AbstractConverter\n+        implements DurationConverter, TimePeriodConverter {\n \n     /**\n      * Singleton instance.\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Extracts duration values from an object of this converter's type, and\n+     * sets them into the given ReadWritableDuration.\n+     *\n+     * @param duration duration to get modified\n+     * @param object  the object to convert, must not be null\n+     * @return the millisecond duration\n+     * @throws NullPointerException if the duration or object is null\n+     * @throws ClassCastException if the object is an invalid type\n+     * @throws IllegalArgumentException if the object is invalid\n+     */\n+    public void setInto(ReadWritableTimePeriod duration, Object object) {\n+        duration.setTimePeriod((ReadableDuration) object);\n+    }\n+\n+    /**\n+     * Selects a suitable duration type for the given object.\n+     *\n+     * @param object  the object to examine, must not be null\n+     * @param precise  true if a precise type is required\n+     * @return the duration type from the readable duration\n+     * @throws NullPointerException if the object is null\n+     * @throws ClassCastException if the object is an invalid type\n+     */\n+    public DurationType getDurationType(Object object, boolean precise) {\n+        return DurationType.getPreciseAllType();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Returns ReadableDuration.class.\n      * \n      * @return ReadableDuration.class\n--- a/JodaTime/src/java/org/joda/time/convert/ReadableTimePeriodConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ReadableTimePeriodConverter.java\n  * @author Brian S O'Neill\n  * @since 1.0\n  */\n-class ReadableTimePeriodConverter extends AbstractConverter implements TimePeriodConverter {\n+class ReadableTimePeriodConverter extends AbstractConverter\n+        implements TimePeriodConverter, DurationConverter {\n \n     /**\n      * Singleton instance.\n      */\n     protected ReadableTimePeriodConverter() {\n         super();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Extracts the millis from an object of this convertor's type.\n+     * \n+     * @param object  the object to convert, must not be null\n+     * @return the millisecond value\n+     * @throws NullPointerException if the object is null\n+     * @throws ClassCastException if the object is an invalid type\n+     * @throws IllegalArgumentException if the object is invalid\n+     */\n+    public long getDurationMillis(Object object) {\n+        return ((ReadableTimePeriod) object).toDurationMillis();\n     }\n \n     //-----------------------------------------------------------------------\n      * @throws ClassCastException if the object is an invalid type\n      */\n     public DurationType getDurationType(Object object, boolean precise) {\n-        return DurationType.getPreciseAllType();\n+        ReadableTimePeriod period = (ReadableTimePeriod) object;\n+        if (precise) {\n+            if (period.getDurationType().isPrecise()) {\n+                return period.getDurationType();\n+            } else {\n+                return DurationType.getPreciseAllType();\n+            }\n+        }\n+        return period.getDurationType();\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1091576909, "metainfo": ""}