{"sha": "31a2dfba0d1a9ae187f64d736f5f1f09fc5f7c8d", "log": "Test field package   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/field/BaseDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/BaseDurationField.java\n      * negative\n      */\n     public long getMillis(int value) {\n-        return value * getUnitMillis();\n+        return value * getUnitMillis();  // safe\n     }\n \n     /**\n      * negative\n      */\n     public long getMillis(long value) {\n-        return value * getUnitMillis();\n+        return FieldUtils.safeMultiply(value, getUnitMillis());\n     }\n \n     // Calculation API\n--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n     }\n     \n     /**\n+     * Subtracts two values throwing an exception if overflow occurs.\n+     * \n+     * @param val1  the first value, to be taken away from\n+     * @param val2  the second value, the amount to take away\n+     * @return the new total\n+     */\n+    public static long safeSubtract(long val1, long val2) {\n+        if (val2 == Long.MIN_VALUE) {\n+            if (val1 <= 0L) {\n+                return (val1 - val2);\n+            }\n+            throw new ArithmeticException(\"The calculation caused an overflow: \" + val1 +\" - \" + val2);\n+        }\n+        return safeAdd(val1, -val2);\n+    }\n+    \n+    /**\n      * Multiply two values throwing an exception if overflow occurs.\n      * \n      * @param val1  the first value\n--- a/JodaTime/src/java/org/joda/time/field/MillisDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/MillisDurationField.java\n     }\n \n     public int getDifference(long minuendInstant, long subtrahendInstant) {\n-        return FieldUtils.safeToInt(FieldUtils.safeAdd(minuendInstant, -subtrahendInstant));\n+        return FieldUtils.safeToInt(FieldUtils.safeSubtract(minuendInstant, subtrahendInstant));\n     }\n \n     public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n-        return FieldUtils.safeAdd(minuendInstant, -subtrahendInstant);\n+        return FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\n     }\n \n     //------------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/field/PreciseDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/PreciseDurationField.java\n      * negative\n      */\n     public long getValueAsLong(long duration, long instant) {\n-        return duration / iUnitMillis;\n+        return duration / iUnitMillis;  // safe\n     }\n \n     /**\n      * negative\n      */\n     public long getMillis(int value, long instant) {\n-        return value * iUnitMillis;\n+        return value * iUnitMillis;  // safe\n     }\n \n     /**\n      * negative\n      */\n     public long getMillis(long value, long instant) {\n-        return value * iUnitMillis;\n+        return FieldUtils.safeMultiply(value, iUnitMillis);\n     }\n \n     public long add(long instant, int value) {\n-        return instant + value * iUnitMillis;\n+        long addition = value * iUnitMillis;  // safe\n+        return FieldUtils.safeAdd(instant, addition);\n     }\n \n     public long add(long instant, long value) {\n-        return instant + value * iUnitMillis;\n+        long addition = FieldUtils.safeMultiply(value, iUnitMillis);\n+        return FieldUtils.safeAdd(instant, addition);\n     }\n \n     public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) {\n-        return (minuendInstant - subtrahendInstant) / iUnitMillis;\n+        long difference = FieldUtils.safeSubtract(minuendInstant, subtrahendInstant);\n+        return difference / iUnitMillis;\n     }\n \n     //-----------------------------------------------------------------------\n             return true;\n         } else if (obj instanceof PreciseDurationField) {\n             PreciseDurationField other = (PreciseDurationField) obj;\n-            return (iUnitMillis == other.iUnitMillis);\n+            return (getType() == other.getType()) && (iUnitMillis == other.iUnitMillis);\n         }\n         return false;\n     }\n      */\n     public int hashCode() {\n         long millis = iUnitMillis;\n-        return (int) (millis ^ (millis >>> 32));\n+        int hash = (int) (millis ^ (millis >>> 32));\n+        hash += getType().hashCode();\n+        return hash;\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/field/ScaledDurationField.java\n+++ b/JodaTime/src/java/org/joda/time/field/ScaledDurationField.java\n     }\n \n     public long getMillis(int value) {\n-        return getWrappedField().getMillis(value * iScalar);\n+        long scaled = ((long) value) * ((long) iScalar);\n+        return getWrappedField().getMillis(scaled);\n     }\n \n     public long getMillis(long value) {\n-        return getWrappedField().getMillis(value * iScalar);\n+        long scaled = FieldUtils.safeMultiply(value, iScalar);\n+        return getWrappedField().getMillis(scaled);\n     }\n \n     public long getMillis(int value, long instant) {\n-        return getWrappedField().getMillis(value * iScalar, instant);\n+        long scaled = ((long) value) * ((long) iScalar);\n+        return getWrappedField().getMillis(scaled, instant);\n     }\n \n     public long getMillis(long value, long instant) {\n-        return getWrappedField().getMillis(value * iScalar, instant);\n+        long scaled = FieldUtils.safeMultiply(value, iScalar);\n+        return getWrappedField().getMillis(scaled, instant);\n     }\n \n     public long add(long instant, int value) {\n-        return getWrappedField().add(instant, value * iScalar);\n+        long scaled = ((long) value) * ((long) iScalar);\n+        return getWrappedField().add(instant, scaled);\n     }\n \n     public long add(long instant, long value) {\n-        return getWrappedField().add(instant, value * iScalar);\n+        long scaled = FieldUtils.safeMultiply(value, iScalar);\n+        return getWrappedField().add(instant, scaled);\n     }\n \n     public int getDifference(long minuendInstant, long subtrahendInstant) {\n         return getWrappedField().getUnitMillis() * iScalar;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Returns the scalar applied, in the field's units.\n      * \n     public int getScalar() {\n         return iScalar;\n     }\n+\n+    /**\n+     * Compares this duration field to another.\n+     * Two fields are equal if of the same type and duration.\n+     * \n+     * @param obj  the object to compare to\n+     * @return if equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (obj instanceof ScaledDurationField) {\n+            ScaledDurationField other = (ScaledDurationField) obj;\n+            return (getWrappedField().equals(other.getWrappedField())) &&\n+                   (getType() == other.getType()) &&\n+                   (iScalar == other.iScalar);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Gets a hash code for this instance.\n+     * \n+     * @return a suitable hashcode\n+     */\n+    public int hashCode() {\n+        long scalar = iScalar;\n+        int hash = (int) (scalar ^ (scalar >>> 32));\n+        hash += getType().hashCode();\n+        hash += getWrappedField().hashCode();\n+        return hash;\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/field/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/field/TestAll.java\n         super(testName);\n     }\n \n-    public static Test suite() {\n-        TestSuite suite = new TestSuite();\n-        \n-        suite.addTest(TestMillisDurationField.suite());\n-        \n-        return suite;\n-    }\n-\n     public static void main(String args[]) {\n         String[] testCaseName = {\n             TestAll.class.getName()\n         junit.textui.TestRunner.main(testCaseName);\n     }\n \n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        \n+        suite.addTest(TestMillisDurationField.suite());\n+        suite.addTest(TestPreciseDurationField.suite());\n+        suite.addTest(TestScaledDurationField.suite());\n+        \n+        return suite;\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java\n+++ b/JodaTime/src/test/org/joda/time/field/TestMillisDurationField.java\n         assertEquals(567L - 1234L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, 1234L));\n         assertEquals(567L + 1234L, MillisDurationField.INSTANCE.getDifferenceAsLong(567L, -1234L));\n         try {\n-            MillisDurationField.INSTANCE.getDifferenceAsLong(Long.MAX_VALUE, 1L);\n+            MillisDurationField.INSTANCE.getDifferenceAsLong(Long.MAX_VALUE, -1L);\n             fail();\n         } catch (ArithmeticException ex) {}\n     }\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/field/TestPreciseDurationField.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.field;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+\n+/**\n+ * This class is a Junit unit test for PreciseDurationField.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPreciseDurationField extends TestCase {\n+    \n+    private static final long LONG_INTEGER_MAX = Integer.MAX_VALUE;\n+    private static final int INTEGER_MAX = Integer.MAX_VALUE;\n+    private static final long LONG_MAX = Long.MAX_VALUE;\n+    \n+    private PreciseDurationField iField;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPreciseDurationField.class);\n+    }\n+\n+    public TestPreciseDurationField(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        iField = new PreciseDurationField(DurationFieldType.seconds(), 1000);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        iField = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_constructor() {\n+        try {\n+            new PreciseDurationField(null, 10);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getType() {\n+        assertEquals(DurationFieldType.seconds(), iField.getType());\n+    }\n+\n+    public void test_getName() {\n+        assertEquals(\"seconds\", iField.getName());\n+    }\n+    \n+    public void test_isSupported() {\n+        assertEquals(true, iField.isSupported());\n+    }\n+\n+    public void test_isPrecise() {\n+        assertEquals(true, iField.isPrecise());\n+    }\n+\n+    public void test_getUnitMillis() {\n+        assertEquals(1000, iField.getUnitMillis());\n+    }\n+\n+    public void test_toString() {\n+        assertEquals(\"DurationField[seconds]\", iField.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getValue_long() {\n+        assertEquals(0, iField.getValue(0L));\n+        assertEquals(12345, iField.getValue(12345678L));\n+        assertEquals(-1, iField.getValue(-1234L));\n+        assertEquals(INTEGER_MAX, iField.getValue(LONG_INTEGER_MAX * 1000L + 999L));\n+        try {\n+            iField.getValue(LONG_INTEGER_MAX * 1000L + 1000L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getValueAsLong_long() {\n+        assertEquals(0L, iField.getValueAsLong(0L));\n+        assertEquals(12345L, iField.getValueAsLong(12345678L));\n+        assertEquals(-1L, iField.getValueAsLong(-1234L));\n+        assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 1000L + 1000L));\n+    }\n+\n+    public void test_getValue_long_long() {\n+        assertEquals(0, iField.getValue(0L, 567L));\n+        assertEquals(12345, iField.getValue(12345678L, 567L));\n+        assertEquals(-1, iField.getValue(-1234L, 567L));\n+        assertEquals(INTEGER_MAX, iField.getValue(LONG_INTEGER_MAX * 1000L + 999L, 567L));\n+        try {\n+            iField.getValue(LONG_INTEGER_MAX * 1000L + 1000L, 567L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getValueAsLong_long_long() {\n+        assertEquals(0L, iField.getValueAsLong(0L, 567L));\n+        assertEquals(12345L, iField.getValueAsLong(12345678L, 567L));\n+        assertEquals(-1L, iField.getValueAsLong(-1234L, 567L));\n+        assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 1000L + 1000L, 567L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMillis_int() {\n+        assertEquals(0, iField.getMillis(0));\n+        assertEquals(1234000L, iField.getMillis(1234));\n+        assertEquals(-1234000L, iField.getMillis(-1234));\n+        assertEquals(LONG_INTEGER_MAX * 1000L, iField.getMillis(INTEGER_MAX));\n+    }\n+\n+    public void test_getMillis_long() {\n+        assertEquals(0L, iField.getMillis(0L));\n+        assertEquals(1234000L, iField.getMillis(1234L));\n+        assertEquals(-1234000L, iField.getMillis(-1234L));\n+        try {\n+            iField.getMillis(LONG_MAX);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getMillis_int_long() {\n+        assertEquals(0L, iField.getMillis(0, 567L));\n+        assertEquals(1234000L, iField.getMillis(1234, 567L));\n+        assertEquals(-1234000L, iField.getMillis(-1234, 567L));\n+        assertEquals(LONG_INTEGER_MAX * 1000L, iField.getMillis(INTEGER_MAX, 567L));\n+    }\n+\n+    public void test_getMillis_long_long() {\n+        assertEquals(0L, iField.getMillis(0L, 567L));\n+        assertEquals(1234000L, iField.getMillis(1234L, 567L));\n+        assertEquals(-1234000L, iField.getMillis(-1234L, 567L));\n+        try {\n+            iField.getMillis(LONG_MAX, 567L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_add_long_int() {\n+        assertEquals(567L, iField.add(567L, 0));\n+        assertEquals(567L + 1234000L, iField.add(567L, 1234));\n+        assertEquals(567L - 1234000L, iField.add(567L, -1234));\n+        try {\n+            iField.add(LONG_MAX, 1);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_add_long_long() {\n+        assertEquals(567L, iField.add(567L, 0L));\n+        assertEquals(567L + 1234000L, iField.add(567L, 1234L));\n+        assertEquals(567L - 1234000L, iField.add(567L, -1234L));\n+        try {\n+            iField.add(LONG_MAX, 1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        try {\n+            iField.add(1L, LONG_MAX);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getDifference_long_int() {\n+        assertEquals(0, iField.getDifference(1L, 0L));\n+        assertEquals(567, iField.getDifference(567000L, 0L));\n+        assertEquals(567 - 1234, iField.getDifference(567000L, 1234000L));\n+        assertEquals(567 + 1234, iField.getDifference(567000L, -1234000L));\n+        try {\n+            iField.getDifference(LONG_MAX, -1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getDifferenceAsLong_long_long() {\n+        assertEquals(0L, iField.getDifferenceAsLong(1L, 0L));\n+        assertEquals(567L, iField.getDifferenceAsLong(567000L, 0L));\n+        assertEquals(567L - 1234L, iField.getDifferenceAsLong(567000L, 1234000L));\n+        assertEquals(567L + 1234L, iField.getDifferenceAsLong(567000L, -1234000L));\n+        try {\n+            iField.getDifferenceAsLong(LONG_MAX, -1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_equals() {\n+        assertEquals(true, iField.equals(iField));\n+        assertEquals(false, iField.equals(Chronology.getISO().minutes()));\n+        DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);\n+        assertEquals(false, iField.equals(dummy));\n+        dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000);\n+        assertEquals(true, iField.equals(dummy));\n+        dummy = new PreciseDurationField(DurationFieldType.millis(), 1000);\n+        assertEquals(false, iField.equals(dummy));\n+        assertEquals(false, iField.equals(\"\"));\n+        assertEquals(false, iField.equals(null));\n+    }\n+\n+    public void test_hashCode() {\n+        assertEquals(true, iField.hashCode() == iField.hashCode());\n+        assertEquals(false, iField.hashCode() == Chronology.getISO().minutes().hashCode());\n+        DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);\n+        assertEquals(false, iField.hashCode() == dummy.hashCode());\n+        dummy = new PreciseDurationField(DurationFieldType.seconds(), 1000);\n+        assertEquals(true, iField.hashCode() == dummy.hashCode());\n+        dummy = new PreciseDurationField(DurationFieldType.millis(), 1000);\n+        assertEquals(false, iField.hashCode() == dummy.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_compareTo() {\n+        assertEquals(0, iField.compareTo(iField));\n+        assertEquals(-1, iField.compareTo(Chronology.getISO().minutes()));\n+        DurationField dummy = new PreciseDurationField(DurationFieldType.seconds(), 0);\n+        assertEquals(1, iField.compareTo(dummy));\n+        try {\n+            iField.compareTo(\"\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            iField.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        DurationField test = iField;\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DurationField result = (DurationField) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/field/TestScaledDurationField.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.field;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n+\n+/**\n+ * This class is a Junit unit test for PreciseDurationField.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestScaledDurationField extends TestCase {\n+    \n+    private static final long LONG_INTEGER_MAX = Integer.MAX_VALUE;\n+    private static final int INTEGER_MAX = Integer.MAX_VALUE;\n+    private static final long LONG_MAX = Long.MAX_VALUE;\n+    \n+    private ScaledDurationField iField;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestScaledDurationField.class);\n+    }\n+\n+    public TestScaledDurationField(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DurationField base = MillisDurationField.INSTANCE;\n+        iField = new ScaledDurationField(base, DurationFieldType.minutes(), 90);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        iField = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_constructor() {\n+        try {\n+            new ScaledDurationField(null, DurationFieldType.minutes(), 10);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new ScaledDurationField(MillisDurationField.INSTANCE, null, 10);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void test_getScalar() {\n+        assertEquals(90, iField.getScalar());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getType() {\n+        assertEquals(DurationFieldType.minutes(), iField.getType());\n+    }\n+\n+    public void test_getName() {\n+        assertEquals(\"minutes\", iField.getName());\n+    }\n+    \n+    public void test_isSupported() {\n+        assertEquals(true, iField.isSupported());\n+    }\n+\n+    public void test_isPrecise() {\n+        assertEquals(true, iField.isPrecise());\n+    }\n+\n+    public void test_getUnitMillis() {\n+        assertEquals(90, iField.getUnitMillis());\n+    }\n+\n+    public void test_toString() {\n+        assertEquals(\"DurationField[minutes]\", iField.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getValue_long() {\n+        assertEquals(0, iField.getValue(0L));\n+        assertEquals(12345678 / 90, iField.getValue(12345678L));\n+        assertEquals(-1234 / 90, iField.getValue(-1234L));\n+        assertEquals(INTEGER_MAX / 90, iField.getValue(LONG_INTEGER_MAX));\n+        try {\n+            iField.getValue(LONG_INTEGER_MAX + 1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getValueAsLong_long() {\n+        assertEquals(0L, iField.getValueAsLong(0L));\n+        assertEquals(12345678L / 90, iField.getValueAsLong(12345678L));\n+        assertEquals(-1234 / 90L, iField.getValueAsLong(-1234L));\n+        assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 90L + 90L));\n+    }\n+\n+    public void test_getValue_long_long() {\n+        assertEquals(0, iField.getValue(0L, 567L));\n+        assertEquals(12345678 / 90, iField.getValue(12345678L, 567L));\n+        assertEquals(-1234 / 90, iField.getValue(-1234L, 567L));\n+        assertEquals(INTEGER_MAX / 90, iField.getValue(LONG_INTEGER_MAX, 567L));\n+        try {\n+            iField.getValue(LONG_INTEGER_MAX + 1L, 567L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getValueAsLong_long_long() {\n+        assertEquals(0L, iField.getValueAsLong(0L, 567L));\n+        assertEquals(12345678 / 90L, iField.getValueAsLong(12345678L, 567L));\n+        assertEquals(-1234 / 90L, iField.getValueAsLong(-1234L, 567L));\n+        assertEquals(LONG_INTEGER_MAX + 1L, iField.getValueAsLong(LONG_INTEGER_MAX * 90L + 90L, 567L));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getMillis_int() {\n+        assertEquals(0, iField.getMillis(0));\n+        assertEquals(1234L * 90L, iField.getMillis(1234));\n+        assertEquals(-1234L * 90L, iField.getMillis(-1234));\n+        assertEquals(LONG_INTEGER_MAX * 90L, iField.getMillis(INTEGER_MAX));\n+    }\n+\n+    public void test_getMillis_long() {\n+        assertEquals(0L, iField.getMillis(0L));\n+        assertEquals(1234L * 90L, iField.getMillis(1234L));\n+        assertEquals(-1234L * 90L, iField.getMillis(-1234L));\n+        try {\n+            iField.getMillis(LONG_MAX);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getMillis_int_long() {\n+        assertEquals(0L, iField.getMillis(0, 567L));\n+        assertEquals(1234L * 90L, iField.getMillis(1234, 567L));\n+        assertEquals(-1234L * 90L, iField.getMillis(-1234, 567L));\n+        assertEquals(LONG_INTEGER_MAX * 90L, iField.getMillis(INTEGER_MAX, 567L));\n+    }\n+\n+    public void test_getMillis_long_long() {\n+        assertEquals(0L, iField.getMillis(0L, 567L));\n+        assertEquals(1234L * 90L, iField.getMillis(1234L, 567L));\n+        assertEquals(-1234L * 90L, iField.getMillis(-1234L, 567L));\n+        try {\n+            iField.getMillis(LONG_MAX, 567L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_add_long_int() {\n+        assertEquals(567L, iField.add(567L, 0));\n+        assertEquals(567L + 1234L * 90L, iField.add(567L, 1234));\n+        assertEquals(567L - 1234L * 90L, iField.add(567L, -1234));\n+        try {\n+            iField.add(LONG_MAX, 1);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_add_long_long() {\n+        assertEquals(567L, iField.add(567L, 0L));\n+        assertEquals(567L + 1234L * 90L, iField.add(567L, 1234L));\n+        assertEquals(567L - 1234L * 90L, iField.add(567L, -1234L));\n+        try {\n+            iField.add(LONG_MAX, 1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        try {\n+            iField.add(1L, LONG_MAX);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_getDifference_long_int() {\n+        assertEquals(0, iField.getDifference(1L, 0L));\n+        assertEquals(567, iField.getDifference(567L * 90L, 0L));\n+        assertEquals(567 - 1234, iField.getDifference(567L * 90L, 1234L * 90L));\n+        assertEquals(567 + 1234, iField.getDifference(567L * 90L, -1234L * 90L));\n+        try {\n+            iField.getDifference(LONG_MAX, -1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void test_getDifferenceAsLong_long_long() {\n+        assertEquals(0L, iField.getDifferenceAsLong(1L, 0L));\n+        assertEquals(567L, iField.getDifferenceAsLong(567L * 90L, 0L));\n+        assertEquals(567L - 1234L, iField.getDifferenceAsLong(567L * 90L, 1234L * 90L));\n+        assertEquals(567L + 1234L, iField.getDifferenceAsLong(567L * 90L, -1234L * 90L));\n+        try {\n+            iField.getDifferenceAsLong(LONG_MAX, -1L);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_equals() {\n+        assertEquals(true, iField.equals(iField));\n+        assertEquals(false, iField.equals(Chronology.getISO().minutes()));\n+        DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2);\n+        assertEquals(false, iField.equals(dummy));\n+        dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90);\n+        assertEquals(true, iField.equals(dummy));\n+        dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90);\n+        assertEquals(false, iField.equals(dummy));\n+        assertEquals(false, iField.equals(\"\"));\n+        assertEquals(false, iField.equals(null));\n+    }\n+\n+    public void test_hashCode() {\n+        assertEquals(iField.hashCode(), iField.hashCode());\n+        assertEquals(false, iField.hashCode() == Chronology.getISO().minutes().hashCode());\n+        DurationField dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 2);\n+        assertEquals(false, iField.hashCode() == dummy.hashCode());\n+        dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.minutes(), 90);\n+        assertEquals(true, iField.hashCode() == dummy.hashCode());\n+        dummy = new ScaledDurationField(MillisDurationField.INSTANCE, DurationFieldType.millis(), 90);\n+        assertEquals(false, iField.hashCode() == dummy.hashCode());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_compareTo() {\n+        assertEquals(0, iField.compareTo(iField));\n+        assertEquals(-1, iField.compareTo(Chronology.getISO().minutes()));\n+        DurationField dummy = new PreciseDurationField(DurationFieldType.minutes(), 0);\n+        assertEquals(1, iField.compareTo(dummy));\n+        try {\n+            iField.compareTo(\"\");\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            iField.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        DurationField test = iField;\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DurationField result = (DurationField) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+}", "timestamp": 1095292212, "metainfo": ""}