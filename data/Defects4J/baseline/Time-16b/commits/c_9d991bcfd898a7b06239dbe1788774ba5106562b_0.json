{"sha": "9d991bcfd898a7b06239dbe1788774ba5106562b", "log": "use the Integer cache where possible", "commit": "\n--- a/src/main/java/org/joda/time/chrono/BaseChronology.java\n+++ b/src/main/java/org/joda/time/chrono/BaseChronology.java\n             DateTimeField field = partial.getField(i);\n             if (value < field.getMinimumValue()) {\n                 throw new IllegalFieldValueException\n-                    (field.getType(), new Integer(value),\n-                     new Integer(field.getMinimumValue()), null);\n+                    (field.getType(), Integer.valueOf(value),\n+                     Integer.valueOf(field.getMinimumValue()), null);\n             }\n             if (value > field.getMaximumValue()) {\n                 throw new IllegalFieldValueException\n-                    (field.getType(), new Integer(value),\n-                     null, new Integer(field.getMaximumValue()));\n+                    (field.getType(), Integer.valueOf(value),\n+                     null, Integer.valueOf(field.getMaximumValue()));\n             }\n         }\n         // check values in specific range, catching really odd cases like 30th Feb\n             DateTimeField field = partial.getField(i);\n             if (value < field.getMinimumValue(partial, values)) {\n                 throw new IllegalFieldValueException\n-                    (field.getType(), new Integer(value),\n-                     new Integer(field.getMinimumValue(partial, values)), null);\n+                    (field.getType(), Integer.valueOf(value),\n+                     Integer.valueOf(field.getMinimumValue(partial, values)), null);\n             }\n             if (value > field.getMaximumValue(partial, values)) {\n                 throw new IllegalFieldValueException\n-                    (field.getType(), new Integer(value),\n-                     null, new Integer(field.getMaximumValue(partial, values)));\n+                    (field.getType(), Integer.valueOf(value),\n+                     null, Integer.valueOf(field.getMaximumValue(partial, values)));\n             }\n         }\n     }\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n                     // Verify that new value stuck.\n                     if (get(instant) != value) {\n                         throw new IllegalFieldValueException\n-                            (iGregorianField.getType(), new Integer(value), null, null);\n+                            (iGregorianField.getType(), Integer.valueOf(value), null, null);\n                     }\n                 }\n             } else {\n                     // Verify that new value stuck.\n                     if (get(instant) != value) {\n                        throw new IllegalFieldValueException\n-                            (iJulianField.getType(), new Integer(value), null, null);\n+                            (iJulianField.getType(), Integer.valueOf(value), null, null);\n                     }\n                 }\n             }\n--- a/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java\n+++ b/src/main/java/org/joda/time/chrono/GJLocaleSymbols.java\n \n         Integer[] integers = new Integer[13];\n         for (int i=0; i<13; i++) {\n-            integers[i] = new Integer(i);\n+            integers[i] = Integer.valueOf(i);\n         }\n \n         iParseEras = new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER);\n--- a/src/main/java/org/joda/time/chrono/JulianChronology.java\n+++ b/src/main/java/org/joda/time/chrono/JulianChronology.java\n         if (year <= 0) {\n             if (year == 0) {\n                 throw new IllegalFieldValueException\n-                    (DateTimeFieldType.year(), new Integer(year), null, null);\n+                    (DateTimeFieldType.year(), Integer.valueOf(year), null, null);\n             }\n             year++;\n         }\n--- a/src/main/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/src/main/java/org/joda/time/chrono/ZonedChronology.java\n             localInstant = iField.set(localInstant, value);\n             long result = iZone.convertLocalToUTC(localInstant, false, instant);\n             if (get(result) != value) {\n-                throw new IllegalFieldValueException(iField.getType(), new Integer(value),\n+                throw new IllegalFieldValueException(iField.getType(), Integer.valueOf(value),\n                     \"Illegal instant due to time zone offset transition: \" +\n                     DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(localInstant)) +\n                     \" (\" + iZone.getID() + \")\");\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n                                          int value, int lowerBound, int upperBound) {\n         if ((value < lowerBound) || (value > upperBound)) {\n             throw new IllegalFieldValueException\n-                (field.getType(), new Integer(value),\n-                 new Integer(lowerBound), new Integer(upperBound));\n+                (field.getType(), Integer.valueOf(value),\n+                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));\n         }\n     }\n \n                                          int value, int lowerBound, int upperBound) {\n         if ((value < lowerBound) || (value > upperBound)) {\n             throw new IllegalFieldValueException\n-                (fieldType, new Integer(value),\n-                 new Integer(lowerBound), new Integer(upperBound));\n+                (fieldType, Integer.valueOf(value),\n+                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));\n         }\n     }\n \n                                          int value, int lowerBound, int upperBound) {\n         if ((value < lowerBound) || (value > upperBound)) {\n             throw new IllegalFieldValueException\n-                (fieldName, new Integer(value),\n-                 new Integer(lowerBound), new Integer(upperBound));\n+                (fieldName, Integer.valueOf(value),\n+                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));\n         }\n     }\n \n--- a/src/main/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatter.java\n      * @since 1.1\n      */\n     public DateTimeFormatter withPivotYear(int pivotYear) {\n-        return withPivotYear(new Integer(pivotYear));\n+        return withPivotYear(Integer.valueOf(pivotYear));\n     }\n \n     /**\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n                         validValues.add(\"ce\");\n                         maxLength = 3;\n                     }\n-                    array = new Object[] {validValues, new Integer(maxLength)};\n+                    array = new Object[] {validValues, Integer.valueOf(maxLength)};\n                     innerMap.put(iFieldType, array);\n                 } else {\n                     validValues = (Set<String>) array[0];", "timestamp": 1310702172, "metainfo": ""}