{"sha": "218a7fe91a685e089ab8fd7700806f7a6083f18d", "log": "Add FromString and ToString to DateTimeZone  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/main/java/org/joda/time/DateTimeZone.java\n import java.util.Set;\n import java.util.TimeZone;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.chrono.BaseChronology;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.DateTimeFormat;\n      * @return the DateTimeZone object for the ID\n      * @throws IllegalArgumentException if the ID is not recognised\n      */\n+    @FromString\n     public static DateTimeZone forID(String id) {\n         if (id == null) {\n             return getDefault();\n      * \n      * @return the ID of this datetime zone\n      */\n+    @ToString\n     public final String getID() {\n         return iID;\n     }\n--- a/JodaTime/src/test/java/org/joda/time/TestStringConvert.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestStringConvert.java\n     }\n \n     //-----------------------------------------------------------------------\n-//    public void testTimeZone() {\n-//        DateTimeZone test = DateTimeZone.forID(\"Europe/Paris\");\n-//        String str = StringConvert.INSTANCE.convertToString(test);\n-//        assertEquals(\"Europe/Paris\", str);\n-//        assertEquals(test, StringConvert.INSTANCE.convertFromString(DateTimeZone.class, str));\n-//    }\n+    public void testTimeZone() {\n+        DateTimeZone test = DateTimeZone.forID(\"Europe/Paris\");\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"Europe/Paris\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(DateTimeZone.class, str));\n+    }\n \n //    public void testInterval() {\n //        DateTime a = new DateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE));", "timestamp": 1291508353, "metainfo": ""}