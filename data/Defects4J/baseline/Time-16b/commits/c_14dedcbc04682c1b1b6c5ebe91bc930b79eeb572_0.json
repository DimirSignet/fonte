{"sha": "14dedcbc04682c1b1b6c5ebe91bc930b79eeb572", "log": "DateTimeZone.forTimeZone [3216471] Time-zone ID \"MET\" from java.util.TimeZone is now mapped correctly. Other time-zone conversions have been updated appropriately  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/main/java/org/joda/time/DateTimeZone.java\n             // Backwards compatibility with TimeZone.\n             map = new HashMap<String, String>();\n             map.put(\"GMT\", \"UTC\");\n+            map.put(\"WET\", \"WET\");\n+            map.put(\"CET\", \"CET\");\n+            map.put(\"MET\", \"CET\");\n+            map.put(\"ECT\", \"CET\");\n+            map.put(\"EET\", \"EET\");\n             map.put(\"MIT\", \"Pacific/Apia\");\n-            map.put(\"HST\", \"Pacific/Honolulu\");\n+            map.put(\"HST\", \"Pacific/Honolulu\");  // JDK 1.1 compatible\n             map.put(\"AST\", \"America/Anchorage\");\n             map.put(\"PST\", \"America/Los_Angeles\");\n-            map.put(\"MST\", \"America/Denver\");\n+            map.put(\"MST\", \"America/Denver\");  // JDK 1.1 compatible\n             map.put(\"PNT\", \"America/Phoenix\");\n             map.put(\"CST\", \"America/Chicago\");\n-            map.put(\"EST\", \"America/New_York\");\n-            map.put(\"IET\", \"America/Indianapolis\");\n+            map.put(\"EST\", \"America/New_York\");  // JDK 1.1 compatible\n+            map.put(\"IET\", \"America/Indiana/Indianapolis\");\n             map.put(\"PRT\", \"America/Puerto_Rico\");\n             map.put(\"CNT\", \"America/St_Johns\");\n-            map.put(\"AGT\", \"America/Buenos_Aires\");\n+            map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\n             map.put(\"BET\", \"America/Sao_Paulo\");\n-            map.put(\"WET\", \"Europe/London\");\n-            map.put(\"ECT\", \"Europe/Paris\");\n             map.put(\"ART\", \"Africa/Cairo\");\n             map.put(\"CAT\", \"Africa/Harare\");\n-            map.put(\"EET\", \"Europe/Bucharest\");\n             map.put(\"EAT\", \"Africa/Addis_Ababa\");\n-            map.put(\"MET\", \"Asia/Tehran\");\n             map.put(\"NET\", \"Asia/Yerevan\");\n             map.put(\"PLT\", \"Asia/Karachi\");\n-            map.put(\"IST\", \"Asia/Calcutta\");\n+            map.put(\"IST\", \"Asia/Kolkata\");\n             map.put(\"BST\", \"Asia/Dhaka\");\n-            map.put(\"VST\", \"Asia/Saigon\");\n+            map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n             map.put(\"CTT\", \"Asia/Shanghai\");\n             map.put(\"JST\", \"Asia/Tokyo\");\n             map.put(\"ACT\", \"Australia/Darwin\");\n--- a/JodaTime/src/test/java/org/joda/time/TestDateTimeZone.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateTimeZone.java\n import java.security.Policy;\n import java.security.ProtectionDomain;\n import java.util.HashSet;\n+import java.util.LinkedHashMap;\n import java.util.Locale;\n+import java.util.Map;\n import java.util.Set;\n import java.util.TimeZone;\n \n             DateTimeZone.forID(\"+0\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testForID_String_old() {\n+        Map<String, String> map = new LinkedHashMap<String, String>();\n+        map.put(\"GMT\", \"UTC\");\n+        map.put(\"WET\", \"WET\");\n+        map.put(\"CET\", \"CET\");\n+        map.put(\"MET\", \"CET\");\n+        map.put(\"ECT\", \"CET\");\n+        map.put(\"EET\", \"EET\");\n+        map.put(\"MIT\", \"Pacific/Apia\");\n+        map.put(\"HST\", \"Pacific/Honolulu\");\n+        map.put(\"AST\", \"America/Anchorage\");\n+        map.put(\"PST\", \"America/Los_Angeles\");\n+        map.put(\"MST\", \"America/Denver\");\n+        map.put(\"PNT\", \"America/Phoenix\");\n+        map.put(\"CST\", \"America/Chicago\");\n+        map.put(\"EST\", \"America/New_York\");\n+        map.put(\"IET\", \"America/Indiana/Indianapolis\");\n+        map.put(\"PRT\", \"America/Puerto_Rico\");\n+        map.put(\"CNT\", \"America/St_Johns\");\n+        map.put(\"AGT\", \"America/Argentina/Buenos_Aires\");\n+        map.put(\"BET\", \"America/Sao_Paulo\");\n+        map.put(\"ART\", \"Africa/Cairo\");\n+        map.put(\"CAT\", \"Africa/Harare\");\n+        map.put(\"EAT\", \"Africa/Addis_Ababa\");\n+        map.put(\"NET\", \"Asia/Yerevan\");\n+        map.put(\"PLT\", \"Asia/Karachi\");\n+        map.put(\"IST\", \"Asia/Kolkata\");\n+        map.put(\"BST\", \"Asia/Dhaka\");\n+        map.put(\"VST\", \"Asia/Ho_Chi_Minh\");\n+        map.put(\"CTT\", \"Asia/Shanghai\");\n+        map.put(\"JST\", \"Asia/Tokyo\");\n+        map.put(\"ACT\", \"Australia/Darwin\");\n+        map.put(\"AET\", \"Australia/Sydney\");\n+        map.put(\"SST\", \"Pacific/Guadalcanal\");\n+        map.put(\"NST\", \"Pacific/Auckland\");\n+        for (String key : map.keySet()) {\n+            String value = map.get(key);\n+            TimeZone juZone = TimeZone.getTimeZone(key);\n+            DateTimeZone zone = DateTimeZone.forTimeZone(juZone);\n+            assertEquals(value, zone.getID());\n+//            System.out.println(juZone);\n+//            System.out.println(juZone.getDisplayName());\n+//            System.out.println(zone);\n+//            System.out.println(\"------\");\n+        }\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1301615198, "metainfo": ""}