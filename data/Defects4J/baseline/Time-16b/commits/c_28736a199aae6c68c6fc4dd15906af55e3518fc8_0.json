{"sha": "28736a199aae6c68c6fc4dd15906af55e3518fc8", "log": "Fixed conversion methods toDateTime, toDateTimeISO, toMutableDateTime, and toMutableDateTimeISO to preserve the time zone   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractInstant.java\n     }\n \n     /**\n-     * Get this object as a DateTime.\n+     * Get this object as a DateTime, in the same zone.\n      * \n      * @return a DateTime using the same millis\n      */\n     public DateTime toDateTime() {\n-        return new DateTime(getMillis());\n-    }\n-\n-    /**\n-     * Get this object as a DateTime using ISOChronology in the default zone.\n-     * \n-     * @return a DateTime using the same millis with ISOChronology in the default zone.\n+        return new DateTime(getMillis(), getZone());\n+    }\n+\n+    /**\n+     * Get this object as a DateTime using ISOChronology, in the same zone.\n+     * \n+     * @return a DateTime using the same millis with ISOChronology\n      */\n     public DateTime toDateTimeISO() {\n-        return new DateTime(getMillis(), ISOChronology.getInstance());\n+        return new DateTime(getMillis(), ISOChronology.getInstance(getZone()));\n     }\n \n     /**\n     }\n \n     /**\n-     * Get this object as a DateTime.\n+     * Get this object as a DateTime using the given chronology and its zone.\n      * \n      * @param chronology chronology to apply, or ISOChronology if null\n      * @return a DateTime using the same millis\n     // returning a copy prevents this.\n \n     /**\n-     * Get this object as a MutableDateTime.\n+     * Get this object as a MutableDateTime, in the same zone.\n      * \n      * @return a MutableDateTime using the same millis\n      */\n     public MutableDateTime toMutableDateTime() {\n-        return new MutableDateTime(getMillis());\n-    }\n-\n-    /**\n-     * Get this object as a MutableDateTime using ISOChronology in the default zone.\n-     * \n-     * @return a MutableDateTime using the same millis with ISOChronology in the default zone.\n+        return new MutableDateTime(getMillis(), getZone());\n+    }\n+\n+    /**\n+     * Get this object as a MutableDateTime using ISOChronology, in the same zone.\n+     * \n+     * @return a MutableDateTime using the same millis with ISOChronology\n      */\n     public MutableDateTime toMutableDateTimeISO() {\n-        return new MutableDateTime(getMillis(), ISOChronology.getInstance());\n+        return new MutableDateTime(getMillis(), ISOChronology.getInstance(getZone()));\n     }\n \n     /**\n     }\n \n     /**\n-     * Get this object as a MutableDateTime.\n+     * Get this object as a MutableDateTime using the given chronology and its zone.\n      * \n      * @param chronology chronology to apply, or ISOChronology if null\n      * @return a MutableDateTime using the same millis\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n         assertSame(DateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n         assertNotSame(test, result);\n         \n         test = new DateTime(TEST_TIME1, BuddhistChronology.getInstance());\n--- a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n         assertSame(DateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());\n     }\n \n     public void testToDateTime_DateTimeZone() {\n         Instant test = new Instant(TEST_TIME1);\n         MutableDateTime result = test.toMutableDateTime();\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());\n     }\n \n     public void testToMutableDateTimeISO() {\n         assertSame(MutableDateTime.class, result.getClass());\n         assertSame(ISOChronology.class, result.getChronology().getClass());\n         assertEquals(test.getMillis(), result.getMillis());\n-        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+        assertEquals(ISOChronology.getInstanceUTC(), result.getChronology());\n     }\n \n     public void testToMutableDateTime_DateTimeZone() {", "timestamp": 1139502610, "metainfo": ""}