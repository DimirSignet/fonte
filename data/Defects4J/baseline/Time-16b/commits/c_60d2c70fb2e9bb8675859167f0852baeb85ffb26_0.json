{"sha": "60d2c70fb2e9bb8675859167f0852baeb85ffb26", "log": "Added limited localization support for IslamicChronology month names.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/BasicMonthOfYearDateTimeField.java\n     /**\n      * Restricted constructor.\n      * \n-     * @param the dayOfYear that is the leap day\n+     * @param leapMonth the month of year that leaps\n      */\n     BasicMonthOfYearDateTimeField(BaseGJChronology chronology, int leapMonth) {\n         super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());\n--- a/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicChronology.java\n             super.assemble(fields);\n \n             fields.era = ERA_FIELD;\n-            fields.monthOfYear = new BasicMonthOfYearDateTimeField(this, 12);\n+            fields.monthOfYear = new IslamicMonthOfYearDateTimeField(this);\n             fields.months = fields.monthOfYear.getDurationField();\n         }\n     }\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/chrono/IslamicMonthOfYearDateTimeField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.chrono;\n+\n+import java.util.Locale;\n+\n+/**\n+ * Provides month names for IslamicChronology. This implementation is crude and\n+ * only supports locale language of \"ar\". For all other locales, names are\n+ * numbers.\n+ *\n+ * @author Brian S O'Neill\n+ * @since 1.2\n+ */\n+final class IslamicMonthOfYearDateTimeField extends BasicMonthOfYearDateTimeField {\n+\n+    /** Serialization version */\n+    private static final long serialVersionUID = -4748157875845286249L;\n+\n+    private static final Locale AR = new Locale(\"ar\", \"\", \"\");\n+\n+    private static final String[] AR_MONTH_NAMES = {\n+        \"\\u0645\\u062d\\u0631\\u0645\",\n+        \"\\u0635\\u0641\\u0631\",\n+        \"\\u0631\\u0628\\u064a\\u0639 \\u0627\\u0644\\u0623\\u0648\\u0644\",\n+        \"\\u0631\\u0628\\u064a\\u0639 \\u0627\\u0644\\u0622\\u062e\\u0631\",\n+        \"\\u062c\\u0645\\u0627\\u062f\\u0649 \\u0627\\u0644\\u0623\\u0648\\u0644\\u0649\",\n+        \"\\u062c\\u0645\\u0627\\u062f\\u0649 \\u0627\\u0644\\u0622\\u062e\\u0631\\u0629\",\n+        \"\\u0631\\u062c\\u0628\",\n+        \"\\u0634\\u0639\\u0628\\u0627\\u0646\",\n+        \"\\u0631\\u0645\\u0636\\u0627\\u0646\",\n+        \"\\u0634\\u0648\\u0627\\u0644\",\n+        \"\\u0630\\u0648 \\u0627\\u0644\\u0642\\u0639\\u062f\\u0629\",\n+        \"\\u0630\\u0648 \\u0627\\u0644\\u062d\\u062c\\u0629\"\n+    };\n+\n+    private static final int AR_MAX_MONTH_NAME_LENGTH;\n+\n+    static {\n+        int max = 0;\n+        for (int i=0; i<AR_MONTH_NAMES.length; i++) {\n+            int len = AR_MONTH_NAMES[i].length();\n+            if (len > max) {\n+                len = max;\n+            }\n+        }\n+        AR_MAX_MONTH_NAME_LENGTH = max;\n+    }\n+\n+    /**\n+     * Restricted constructor\n+     */\n+    IslamicMonthOfYearDateTimeField(IslamicChronology chronology) {\n+        super(chronology, 12);\n+    }\n+\n+    public String getAsText(int fieldValue, Locale locale) {\n+        if (locale == null) {\n+            locale = Locale.getDefault();\n+        }\n+        if (isSupported(locale) && fieldValue >= 1 && fieldValue <= 12) {\n+            return AR_MONTH_NAMES[fieldValue - 1];\n+        }\n+        return super.getAsText(fieldValue, locale);\n+    }\n+\n+    protected int convertText(String text, Locale locale) {\n+        if (locale == null) {\n+            locale = Locale.getDefault();\n+        }\n+        if (isSupported(locale)) {\n+            for (int i=0; i<AR_MONTH_NAMES.length; i++) {\n+                if (AR_MONTH_NAMES[i].equals(text)) {\n+                    return i + 1;\n+                }\n+            }\n+        }\n+        return super.convertText(text, locale);\n+    }\n+\n+    public int getMaximumTextLength(Locale locale) {\n+        if (locale == null) {\n+            locale = Locale.getDefault();\n+        }\n+        if (isSupported(locale)) {\n+            return AR_MAX_MONTH_NAME_LENGTH;\n+        }\n+        return super.getMaximumTextLength(locale);\n+    }\n+\n+    private boolean isSupported(Locale locale) {\n+        return locale.getLanguage().equals(AR.getLanguage());\n+    }\n+}", "timestamp": 1133339841, "metainfo": ""}