{"sha": "2b25b36a3db81dd14141e7a6ba06824990c32f95", "log": "Javadoc and tidy up  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/YearMonth.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonth.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * <p>\n  * Calculations on YearMonth are performed using a {@link Chronology}.\n  * This chronology is set to be in the UTC time zone for all calculations.\n+ * <p>\n+ * One use case for this class is to store a credit card expiry date, as that only\n+ * references the year and month.\n+ * This class can be used as the gYearMonth type in XML Schema.\n  * <p>\n  * Each individual field can be queried in two ways:\n  * <ul>\n      * @throws IllegalArgumentException if the calendar is null\n      * @throws IllegalArgumentException if the year or month is invalid for the ISO chronology\n      */\n+    @SuppressWarnings(\"deprecation\")\n     public static YearMonth fromDateFields(Date date) {\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n      *\n      * @param year  the year\n      * @param monthOfYear  the month of the year\n-     * @param dayOfMonth  the day of the month\n      */\n     public YearMonth(int year, int monthOfYear) {\n         this(year, monthOfYear, null);\n      *\n      * @param year  the year\n      * @param monthOfYear  the month of the year\n-     * @param dayOfMonth  the day of the month\n      * @param chronology  the chronology, null means ISOChronology in the default zone\n      */\n     public YearMonth(int year, int monthOfYear, Chronology chronology) {\n     /**\n      * Gets an array of the field type of each of the fields that this partial supports.\n      * <p>\n-     * The fields are returned largest to smallest, Year, Month\n+     * The fields are returned largest to smallest, Year, Month.\n      *\n      * @return the array of field types (cloned), largest to smallest, never null\n      */\n     /**\n      * Returns a copy of this year-month with the specified field set to a new value.\n      * <p>\n-     * For example, if the field type is <code>dayOfMonth</code> then the day\n+     * For example, if the field type is <code>monthOfYear</code> then the month\n      * would be changed in the returned instance.\n      * <p>\n      * These three lines are equivalent:\n      * <pre>\n-     * YearMonth updated = ym.withField(DateTimeFieldType.dayOfMonth(), 6);\n-     * YearMonth updated = ym.dayOfMonth().setCopy(6);\n-     * YearMonth updated = ym.property(DateTimeFieldType.dayOfMonth()).setCopy(6);\n+     * YearMonth updated = ym.withField(DateTimeFieldType.monthOfYear(), 6);\n+     * YearMonth updated = ym.monthOfYear().setCopy(6);\n+     * YearMonth updated = ym.property(DateTimeFieldType.monthOfYear()).setCopy(6);\n      * </pre>\n      *\n      * @param fieldType  the field type to set, not null\n      * <p>\n      * These three lines are equivalent:\n      * <pre>\n-     * YearMonth added = ym.withFieldAdded(DurationFieldType.days(), 6);\n-     * YearMonth added = ym.plusDays(6);\n-     * YearMonth added = ym.dayOfMonth().addToCopy(6);\n+     * YearMonth added = ym.withFieldAdded(DurationFieldType.months(), 6);\n+     * YearMonth added = ym.plusMonths(6);\n+     * YearMonth added = ym.monthOfYear().addToCopy(6);\n      * </pre>\n      * \n      * @param fieldType  the field type to add to, not null\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Output the year-month in ISO8601 format (yyyy-MM-dd).\n+     * Output the year-month in ISO8601 format (yyyy-MM).\n      *\n      * @return ISO8601 time formatted string.\n      */\n         private static final long serialVersionUID = 5727734012190224363L;\n \n         /** The partial */\n-        private final YearMonth iYearMonth;\n+        private final YearMonth iBase;\n         /** The field index */\n         private final int iFieldIndex;\n \n          */\n         Property(YearMonth partial, int fieldIndex) {\n             super();\n-            iYearMonth = partial;\n+            iBase = partial;\n             iFieldIndex = fieldIndex;\n         }\n \n          * @return the field\n          */\n         public DateTimeField getField() {\n-            return iYearMonth.getField(iFieldIndex);\n+            return iBase.getField(iFieldIndex);\n         }\n \n         /**\n          * @return the partial\n          */\n         protected ReadablePartial getReadablePartial() {\n-            return iYearMonth;\n+            return iBase;\n         }\n \n         /**\n          * @return the partial\n          */\n         public YearMonth getYearMonth() {\n-            return iYearMonth;\n+            return iBase;\n         }\n \n         /**\n          * @return the field value\n          */\n         public int get() {\n-            return iYearMonth.getValue(iFieldIndex);\n+            return iBase.getValue(iFieldIndex);\n         }\n \n         //-----------------------------------------------------------------------\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n         public YearMonth addToCopy(int valueToAdd) {\n-            int[] newValues = iYearMonth.getValues();\n-            newValues = getField().add(iYearMonth, iFieldIndex, newValues, valueToAdd);\n-            return new YearMonth(iYearMonth, newValues);\n+            int[] newValues = iBase.getValues();\n+            newValues = getField().add(iBase, iFieldIndex, newValues, valueToAdd);\n+            return new YearMonth(iBase, newValues);\n         }\n \n         /**\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n         public YearMonth addWrapFieldToCopy(int valueToAdd) {\n-            int[] newValues = iYearMonth.getValues();\n-            newValues = getField().addWrapField(iYearMonth, iFieldIndex, newValues, valueToAdd);\n-            return new YearMonth(iYearMonth, newValues);\n+            int[] newValues = iBase.getValues();\n+            newValues = getField().addWrapField(iBase, iFieldIndex, newValues, valueToAdd);\n+            return new YearMonth(iBase, newValues);\n         }\n \n         //-----------------------------------------------------------------------\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n         public YearMonth setCopy(int value) {\n-            int[] newValues = iYearMonth.getValues();\n-            newValues = getField().set(iYearMonth, iFieldIndex, newValues, value);\n-            return new YearMonth(iYearMonth, newValues);\n+            int[] newValues = iBase.getValues();\n+            newValues = getField().set(iBase, iFieldIndex, newValues, value);\n+            return new YearMonth(iBase, newValues);\n         }\n \n         /**\n          * @throws IllegalArgumentException if the text value isn't valid\n          */\n         public YearMonth setCopy(String text, Locale locale) {\n-            int[] newValues = iYearMonth.getValues();\n-            newValues = getField().set(iYearMonth, iFieldIndex, newValues, text, locale);\n-            return new YearMonth(iYearMonth, newValues);\n+            int[] newValues = iBase.getValues();\n+            newValues = getField().set(iBase, iFieldIndex, newValues, text, locale);\n+            return new YearMonth(iBase, newValues);\n         }\n \n         /**", "timestamp": 1266152721, "metainfo": ""}