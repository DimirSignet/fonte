{"sha": "2a60e1169eeab2b4966b0c687e62bd420c907ff6", "log": "Increase test coverage   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestAbstractPartial.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.AbstractPartial;\n+import org.joda.time.chrono.BuddhistChronology;\n+\n+/**\n+ * This class is a Junit unit test for YearMonthDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestAbstractPartial extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    \n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestAbstractPartial.class);\n+    }\n+\n+    public TestAbstractPartial(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetValue() throws Throwable {\n+        MockPartial mock = new MockPartial();\n+        assertEquals(1970, mock.getValue(0));\n+        assertEquals(1, mock.getValue(1));\n+        \n+        try {\n+            mock.getValue(-1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            mock.getValue(2);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    public void testGetValues() throws Throwable {\n+        MockPartial mock = new MockPartial();\n+        int[] vals = mock.getValues();\n+        assertEquals(2, vals.length);\n+        assertEquals(1970, vals[0]);\n+        assertEquals(1, vals[1]);\n+    }\n+\n+    public void testGetField() throws Throwable {\n+        MockPartial mock = new MockPartial();\n+        assertEquals(BuddhistChronology.getInstance().year(), mock.getField(0));\n+        assertEquals(BuddhistChronology.getInstance().monthOfYear(), mock.getField(1));\n+        \n+        try {\n+            mock.getField(-1);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        try {\n+            mock.getField(2);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    static class MockPartial extends AbstractPartial {\n+        \n+        int[] val = new int[] {1970, 1};\n+        \n+        MockPartial() {\n+            super();\n+        }\n+\n+        protected DateTimeField getField(int index, Chronology chrono) {\n+            switch (index) {\n+                case 0:\n+                    return chrono.year();\n+                case 1:\n+                    return chrono.monthOfYear();\n+                default:\n+                    throw new IndexOutOfBoundsException();\n+            }\n+        }\n+\n+        public int getFieldSize() {\n+            return 2;\n+        }\n+        \n+        public int getValue(int index) {\n+            return val[index];\n+        }\n+\n+        public void setValue(int index, int value) {\n+            val[index] = value;\n+        }\n+\n+        public Chronology getChronology() {\n+            return BuddhistChronology.getInstance();\n+        }\n+    }\n+}\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestMutablePeriod_Basics.suite());\n         suite.addTest(TestMutablePeriod_Updates.suite());\n         \n+        suite.addTest(TestAbstractPartial.suite());\n+        suite.addTest(TestBasePartial.suite());\n         suite.addTest(TestTimeOfDay.suite());\n         suite.addTest(TestYearMonthDay.suite());\n         \n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestBasePartial.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.base.BasePartial;\n+\n+/**\n+ * This class is a Junit unit test for YearMonthDay.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestBasePartial extends TestCase {\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    \n+    private long TEST_TIME_NOW =\n+            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    private long TEST_TIME1 =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private long TEST_TIME2 =\n+        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestBasePartial.class);\n+    }\n+\n+    public TestBasePartial(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMethods() throws Throwable {\n+        MockPartial mock = new MockPartial();\n+        assertEquals(1970, mock.getYear());\n+        assertEquals(1, mock.getMonthOfYear());\n+        \n+        mock.setYear(2004);\n+        assertEquals(2004, mock.getYear());\n+        assertEquals(1, mock.getMonthOfYear());\n+        \n+        mock.setMonthOfYear(6);\n+        assertEquals(2004, mock.getYear());\n+        assertEquals(6, mock.getMonthOfYear());\n+        \n+        mock.set(2005, 5);\n+        assertEquals(2005, mock.getYear());\n+        assertEquals(5, mock.getMonthOfYear());\n+        \n+        try {\n+            mock.setMonthOfYear(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(2005, mock.getYear());\n+        assertEquals(5, mock.getMonthOfYear());\n+        \n+        try {\n+            mock.setMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(2005, mock.getYear());\n+        assertEquals(5, mock.getMonthOfYear());\n+    }\n+\n+    static class MockPartial extends BasePartial {\n+        \n+        MockPartial() {\n+            super(new int[] {1970, 1}, null);\n+        }\n+\n+        protected DateTimeField getField(int index, Chronology chrono) {\n+            switch (index) {\n+                case 0:\n+                    return chrono.year();\n+                case 1:\n+                    return chrono.monthOfYear();\n+                default:\n+                    throw new IndexOutOfBoundsException();\n+            }\n+        }\n+\n+        public int getFieldSize() {\n+            return 2;\n+        }\n+        \n+        public int getYear() {\n+            return getValue(0);\n+        }\n+        \n+        public void setYear(int year) {\n+            setValue(0, year);\n+        }\n+        \n+        public int getMonthOfYear() {\n+            return getValue(1);\n+        }\n+        \n+        public void setMonthOfYear(int month) {\n+            setValue(1, month);\n+        }\n+        \n+        public void set(int year, int month) {\n+            setValues(new int[] {year, month});\n+        }\n+    }\n+}\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableInstantConverter.java\n     public void testGetChronology_Object_Zone() throws Exception {\n         assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), PARIS));\n         assertEquals(ISO_PARIS, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), PARIS));\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), DateTimeZone.getDefault()));\n+        assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), DateTimeZone.getDefault()));\n         assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new Instant(123L), (DateTimeZone) null));\n         assertEquals(ISO, ReadableInstantConverter.INSTANCE.getChronology(new DateTime(123L), (DateTimeZone) null));\n         \n--- a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.MutableInterval;\n+import org.joda.time.MutablePeriod;\n import org.joda.time.PeriodType;\n-import org.joda.time.MutablePeriod;\n-import org.joda.time.MutableInterval;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n \n     }\n \n     //-----------------------------------------------------------------------\n-    public void testGetDurationMillis_Object() throws Exception {\n+    public void testGetDurationMillis_Object1() throws Exception {\n         long millis = StringConverter.INSTANCE.getDurationMillis(\"P2Y6M9D\");\n         long len = (2L * 365L + 6L * 30L + 9L) * DateTimeConstants.MILLIS_PER_DAY;\n         assertEquals(len, millis);\n+    }\n+\n+    public void testGetDurationMillis_Object2() throws Exception {\n+        try {\n+            StringConverter.INSTANCE.getDurationMillis(\"P2Y6M9DXYZ\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n             StringConverter.INSTANCE.setInto(m, \"PXY\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            StringConverter.INSTANCE.setInto(m, \"PT0SXY\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1093805425, "metainfo": ""}