{"sha": "6cd3a18f8cb3c907107017849ab1ac3b88e43fb5", "log": "Javadoc  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java\n  *     .addRecurringSavings(\"PDT\", 3600000, 1975, 1975, 'w', 2, 23,  0, false, 7200000)\n  *     .addRecurringSavings(\"PDT\", 3600000, 1976, 1986, 'w', 4, -1,  7, false, 7200000)\n  *     .addRecurringSavings(\"PDT\", 3600000, 1987, 2147483647, 'w', 4, 1, 7, true, 7200000)\n- *     .toDateTimeZone(\"America/Los_Angeles\");\n+ *     .toDateTimeZone(\"America/Los_Angeles\", true);\n  * </pre>\n  *\n  * @author Brian S O'Neill\n      * Adds a cutover for added rules. The standard offset at the cutover\n      * defaults to 0. Call setStandardOffset afterwards to change it.\n      *\n-     * @param year year of cutover\n+     * @param year  the year of cutover\n      * @param mode 'u' - cutover is measured against UTC, 'w' - against wall\n-     * offset, 's' - against standard offset.\n-     * @param dayOfMonth if negative, set to ((last day of month) - ~dayOfMonth).\n-     * For example, if -1, set to last day of month\n-     * @param dayOfWeek if 0, ignore\n-     * @param advanceDayOfWeek if dayOfMonth does not fall on dayOfWeek, advance to\n-     * dayOfWeek when true, retreat when false.\n-     * @param millisOfDay additional precision for specifying time of day of\n-     * cutover\n+     *  offset, 's' - against standard offset\n+     * @param monthOfYear  the month from 1 (January) to 12 (December)\n+     * @param dayOfMonth  if negative, set to ((last day of month) - ~dayOfMonth).\n+     *  For example, if -1, set to last day of month\n+     * @param dayOfWeek  from 1 (Monday) to 7 (Sunday), if 0 then ignore\n+     * @param advanceDayOfWeek  if dayOfMonth does not fall on dayOfWeek, advance to\n+     *  dayOfWeek when true, retreat when false.\n+     * @param millisOfDay  additional precision for specifying time of day of cutover\n      */\n     public DateTimeZoneBuilder addCutover(int year,\n                                           char mode,\n     /**\n      * Sets the standard offset to use for newly added rules until the next\n      * cutover is added.\n+     * @param standardOffset  the standard offset in millis\n      */\n     public DateTimeZoneBuilder setStandardOffset(int standardOffset) {\n         getLastRuleSet().setStandardOffset(standardOffset);\n     /**\n      * Add a recurring daylight saving time rule.\n      *\n-     * @param nameKey name key of new rule\n-     * @param saveMillis milliseconds to add to standard offset\n-     * @param fromYear First year that rule is in effect. MIN_VALUE indicates\n-     * beginning of time.\n-     * @param toYear Last year (inclusive) that rule is in effect. MAX_VALUE\n-     * indicates end of time.\n-     * @param mode 'u' - transitions are calculated against UTC, 'w' -\n-     * transitions are calculated against wall offset, 's' - transitions are\n-     * calculated against standard offset.\n-     * @param dayOfMonth if negative, set to ((last day of month) - ~dayOfMonth).\n-     * For example, if -1, set to last day of month\n-     * @param dayOfWeek if 0, ignore\n-     * @param advanceDayOfWeek if dayOfMonth does not fall on dayOfWeek, advance to\n-     * dayOfWeek when true, retreat when false.\n-     * @param millisOfDay additional precision for specifying time of day of\n-     * transitions\n+     * @param nameKey  the name key of new rule\n+     * @param saveMillis  the milliseconds to add to standard offset\n+     * @param fromYear  the first year that rule is in effect, MIN_VALUE indicates\n+     * beginning of time\n+     * @param toYear  the last year (inclusive) that rule is in effect, MAX_VALUE\n+     *  indicates end of time\n+     * @param mode  'u' - transitions are calculated against UTC, 'w' -\n+     *  transitions are calculated against wall offset, 's' - transitions are\n+     *  calculated against standard offset\n+     * @param monthOfYear  the month from 1 (January) to 12 (December)\n+     * @param dayOfMonth  if negative, set to ((last day of month) - ~dayOfMonth).\n+     *  For example, if -1, set to last day of month\n+     * @param dayOfWeek  from 1 (Monday) to 7 (Sunday), if 0 then ignore\n+     * @param advanceDayOfWeek  if dayOfMonth does not fall on dayOfWeek, advance to\n+     *  dayOfWeek when true, retreat when false.\n+     * @param millisOfDay  additional precision for specifying time of day of transitions\n      */\n     public DateTimeZoneBuilder addRecurringSavings(String nameKey, int saveMillis,\n                                                    int fromYear, int toYear,\n      * Encodes a built DateTimeZone to the given stream. Call readFrom to\n      * decode the data into a DateTimeZone object.\n      *\n-     * @param out output stream to receive encoded DateTimeZone.\n+     * @param out  the output stream to receive the encoded DateTimeZone\n      * @since 1.5 (parameter added)\n      */\n     public void writeTo(String zoneID, OutputStream out) throws IOException {\n      * Encodes a built DateTimeZone to the given stream. Call readFrom to\n      * decode the data into a DateTimeZone object.\n      *\n-     * @param out output stream to receive encoded DateTimeZone.\n+     * @param out  the output stream to receive the encoded DateTimeZone\n      * @since 1.5 (parameter added)\n      */\n     public void writeTo(String zoneID, DataOutput out) throws IOException {", "timestamp": 1250206001, "metainfo": ""}