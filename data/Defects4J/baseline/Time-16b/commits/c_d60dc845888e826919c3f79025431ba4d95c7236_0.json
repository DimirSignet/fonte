{"sha": "d60dc845888e826919c3f79025431ba4d95c7236", "log": "Additional testing   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestDateMidnight_Properties.suite());\n         \n         suite.addTest(TestDuration_Constructors.suite());\n+        suite.addTest(TestDuration_Basics.suite());\n+        \n+        suite.addTest(TestMutableDuration_Constructors.suite());\n+        suite.addTest(TestMutableDuration_Basics.suite());\n         \n         suite.addTest(TestTimeOfDay.suite());\n         suite.addTest(TestYearMonthDay.suite());\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeComparator.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeComparator.java\n         assertEquals(ISO.dayOfYear(), c.getUpperLimit());\n         assertEquals(\"DateTimeComparator[hourOfDay-dayOfYear]\", c.toString());\n         \n+        c = DateTimeComparator.getInstance(ISO.hourOfDay(), ISO.hourOfDay());\n+        assertEquals(ISO.hourOfDay(), c.getLowerLimit());\n+        assertEquals(ISO.hourOfDay(), c.getUpperLimit());\n+        assertEquals(\"DateTimeComparator[hourOfDay]\", c.toString());\n+        \n         c = DateTimeComparator.getInstance(null, null);\n         assertSame(DateTimeComparator.getInstance(), c);\n         \n         assertEquals(true, c2.equals(c3));\n         assertEquals(false, c1.hashCode() == c3.hashCode());\n         assertEquals(true, c2.hashCode() == c3.hashCode());\n+        \n+        DateTimeComparator c4 = DateTimeComparator.getDateOnlyInstance(ISOChronology.getInstance());\n+        assertEquals(false, c4.hashCode() == c3.hashCode());\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n+import org.joda.time.chrono.ISOChronology;\n+\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n /**\n- * This class is a Junit unit test for DateTime.\n+ * This class is a Junit unit test for Duration.\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     //-----------------------------------------------------------------------\n-    // TODO: Adds\n+    public void testAddTo1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, 1);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, -2);\n+        assertEquals(expected, added);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddToWithChronology1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddToWithChronology2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddToWithChronology3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, 1, null);\n+        assertEquals(expected, added);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddToRI1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        Instant added = test.addTo(new Instant(), 1);\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    public void testAddToRI2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        Instant added = test.addTo(new Instant(), -2);\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    public void testAddToRI3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        Instant added = test.addTo(null, 1);\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddIntoRWI1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        MutableDateTime mdt = new MutableDateTime();\n+        test.addInto(mdt, 1);\n+        assertEquals(expected, mdt.getMillis());\n+    }\n+    \n+    public void testAddIntoRWI2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        MutableDateTime mdt = new MutableDateTime();\n+        test.addInto(mdt, -2);\n+        assertEquals(expected, mdt.getMillis());\n+    }\n+    \n+    public void testAddIntoRWI3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.addInto(null, 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n     \n     //-----------------------------------------------------------------------\n     public void testToString() {\n         test = new MockChangeDuration(111L);\n         test.testSetMillis();\n         assertEquals(111L, test.getTotalMillis());\n+        \n+        test = new MockChangeDuration(111L);\n+        test.testNormalize();\n+        assertEquals(111L, test.getTotalMillis());\n     }\n     \n     static class MockChangeDuration extends Duration {\n         public void testSetMillis() {\n             setMillis(1);\n         }\n+        public void testNormalize() {\n+            super.normalize();\n+        }\n     }\n \n }\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java\n     }\n \n     public void testConstructor_RI_RI4() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        Duration test = new Duration(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(-3, test.getYears());\n+        assertEquals(-1, test.getMonths());\n+        assertEquals(-1, test.getWeeks());\n+        assertEquals(-1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(-1, test.getMinutes());\n+        assertEquals(-1, test.getSeconds());\n+        assertEquals(-1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(TEST_TIME_NOW - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI5() throws Throwable {\n         DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n         DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n         Duration test = new Duration(dt1, dt2);\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import org.joda.time.chrono.ISOChronology;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for MutableDuration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableDuration_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableDuration_Basics.class);\n+    }\n+\n+    public TestMutableDuration_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationType() {\n+        MutableDuration test = new MutableDuration();\n+        assertEquals(DurationType.getMillisType(), test.getDurationType());\n+    }\n+\n+    public void testGetTotalMillis() {\n+        MutableDuration test = new MutableDuration(123L);\n+        assertEquals(123L, test.getTotalMillis());\n+    }\n+\n+    public void testGetIsPrecise() {\n+        MutableDuration test = new MutableDuration(123L);\n+        assertEquals(true, test.isPrecise());\n+        test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(false, test.isPrecise());\n+    }\n+\n+    public void testGetMethods() {\n+        MutableDuration test = new MutableDuration();\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testEqualsHashCode() {\n+        MutableDuration test1 = new MutableDuration(123L);\n+        MutableDuration test2 = new MutableDuration(123L);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        MutableDuration test3 = new MutableDuration(321L);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockMutableDuration(123L)));\n+        assertEquals(false, test1.equals(new Duration(123L, DurationType.getAverageYearMonthType())));\n+    }\n+    \n+    class MockMutableDuration extends AbstractDuration {\n+        public MockMutableDuration(long value) {\n+            super(value, null);\n+        }\n+    }\n+\n+    public void testCompareTo() {\n+        MutableDuration test1 = new MutableDuration(123L);\n+        MutableDuration test1a = new MutableDuration(123L);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        MutableDuration test2 = new MutableDuration(321L);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        MutableDuration test3 = new MutableDuration(321L, DurationType.getAllType());\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        assertEquals(+1, test2.compareTo(new MockMutableDuration(123L)));\n+        assertEquals(0, test1.compareTo(new MockMutableDuration(123L)));\n+        \n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            test1.compareTo(new Long(123L));\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            test1.compareTo(new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8));\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testIsEqual() {\n+        MutableDuration test1 = new MutableDuration(123L);\n+        MutableDuration test1a = new MutableDuration(123L);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        MutableDuration test2 = new MutableDuration(321L);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        MutableDuration test3 = new MutableDuration(321L, DurationType.getAllType());\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        assertEquals(false, test2.isEqual(new MockMutableDuration(123L)));\n+        assertEquals(true, test1.isEqual(new MockMutableDuration(123L)));\n+        assertEquals(false, test1.isEqual(null));\n+        assertEquals(true, new MutableDuration(0L).isEqual(null));\n+    }\n+    \n+    public void testIsBefore() {\n+        MutableDuration test1 = new MutableDuration(123L);\n+        MutableDuration test1a = new MutableDuration(123L);\n+        assertEquals(false, test1.isShorterThan(test1a));\n+        assertEquals(false, test1a.isShorterThan(test1));\n+        assertEquals(false, test1.isShorterThan(test1));\n+        assertEquals(false, test1a.isShorterThan(test1a));\n+        \n+        MutableDuration test2 = new MutableDuration(321L);\n+        assertEquals(true, test1.isShorterThan(test2));\n+        assertEquals(false, test2.isShorterThan(test1));\n+        \n+        MutableDuration test3 = new MutableDuration(321L, DurationType.getAllType());\n+        assertEquals(true, test1.isShorterThan(test3));\n+        assertEquals(false, test3.isShorterThan(test1));\n+        assertEquals(false, test3.isShorterThan(test2));\n+        \n+        assertEquals(false, test2.isShorterThan(new MockMutableDuration(123L)));\n+        assertEquals(false, test1.isShorterThan(new MockMutableDuration(123L)));\n+        assertEquals(false, test1.isShorterThan(null));\n+        assertEquals(false, new MutableDuration(0L).isShorterThan(null));\n+    }\n+    \n+    public void testIsAfter() {\n+        MutableDuration test1 = new MutableDuration(123L);\n+        MutableDuration test1a = new MutableDuration(123L);\n+        assertEquals(false, test1.isLongerThan(test1a));\n+        assertEquals(false, test1a.isLongerThan(test1));\n+        assertEquals(false, test1.isLongerThan(test1));\n+        assertEquals(false, test1a.isLongerThan(test1a));\n+        \n+        MutableDuration test2 = new MutableDuration(321L);\n+        assertEquals(false, test1.isLongerThan(test2));\n+        assertEquals(true, test2.isLongerThan(test1));\n+        \n+        MutableDuration test3 = new MutableDuration(321L, DurationType.getAllType());\n+        assertEquals(false, test1.isLongerThan(test3));\n+        assertEquals(true, test3.isLongerThan(test1));\n+        assertEquals(false, test3.isLongerThan(test2));\n+        \n+        assertEquals(true, test2.isLongerThan(new MockMutableDuration(123L)));\n+        assertEquals(false, test1.isLongerThan(new MockMutableDuration(123L)));\n+        assertEquals(true, test1.isLongerThan(null));\n+        assertEquals(false, new MutableDuration(0L).isLongerThan(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        MutableDuration test = new MutableDuration(123L);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        MutableDuration result = (MutableDuration) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddTo1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, 1);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, -2);\n+        assertEquals(expected, added);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddToWithChronology1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddToWithChronology2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddToWithChronology3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, 1, null);\n+        assertEquals(expected, added);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddToRI1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        Instant added = test.addTo(new Instant(), 1);\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    public void testAddToRI2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        Instant added = test.addTo(new Instant(), -2);\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    public void testAddToRI3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        Instant added = test.addTo(null, 1);\n+        assertEquals(expected, added.getMillis());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddIntoRWI1() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        MutableDateTime mdt = new MutableDateTime();\n+        test.addInto(mdt, 1);\n+        assertEquals(expected, mdt.getMillis());\n+    }\n+    \n+    public void testAddIntoRWI2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        MutableDateTime mdt = new MutableDateTime();\n+        test.addInto(mdt, -2);\n+        assertEquals(expected, mdt.getMillis());\n+    }\n+    \n+    public void testAddIntoRWI3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test.addInto(null, 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", test.toString());\n+        \n+        test = new MutableDuration(0, 0, 0, 0, 0, 0, 0, 0);\n+        assertEquals(\"PT0S\", test.toString());\n+        \n+        test = new MutableDuration(12345L);\n+        assertEquals(\"PT12.345S\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToDuration() {\n+        MutableDuration test = new MutableDuration(123L);\n+        Duration result = test.toDuration();\n+        assertEquals(test.getDurationType(), result.getDurationType());\n+        assertEquals(test.isPrecise(), result.isPrecise());\n+        assertEquals(test.getTotalMillis(), result.getTotalMillis());\n+    }\n+\n+    public void testToMutableDuration() {\n+        MutableDuration test = new MutableDuration(123L);\n+        MutableDuration result = test.toMutableDuration();\n+        assertEquals(test.getDurationType(), result.getDurationType());\n+        assertEquals(test.isPrecise(), result.isPrecise());\n+        assertEquals(test.getTotalMillis(), result.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testCopy() {\n+        MutableDuration test = new MutableDuration(123L);\n+        MutableDuration copy = test.copy();\n+        assertEquals(test.getDurationType(), copy.getDurationType());\n+        assertEquals(test.isPrecise(), copy.isPrecise());\n+        assertEquals(test.getTotalMillis(), copy.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClone() {\n+        MutableDuration test = new MutableDuration(123L);\n+        MutableDuration copy = (MutableDuration) test.clone();\n+        assertEquals(test.getDurationType(), copy.getDurationType());\n+        assertEquals(test.isPrecise(), copy.isPrecise());\n+        assertEquals(test.getTotalMillis(), copy.getTotalMillis());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a JUnit test for MutableDuration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableDuration_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableDuration_Constructors.class);\n+    }\n+\n+    public TestMutableDuration_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstructor1() throws Throwable {\n+        MutableDuration test = new MutableDuration();\n+        assertEquals(DurationType.getMillisType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (DurationType)\n+     */\n+    public void testConstructor_DurationType1() throws Throwable {\n+        MutableDuration test = new MutableDuration(DurationType.getYearMonthType());\n+        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_DurationType2() throws Throwable {\n+        MutableDuration test = new MutableDuration((DurationType) null);\n+        assertEquals(DurationType.getMillisType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object1() throws Throwable {\n+        MutableDuration test = new MutableDuration(\"P1Y2M3D\");\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.getTotalMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n+        MutableDuration test = new MutableDuration((Object) null);\n+        assertEquals(DurationType.getMillisType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_Object3() throws Throwable {\n+        MutableDuration test = new MutableDuration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()));\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_Object4() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration base = new Duration(dt1, dt2);  // AllType and precise\n+        MutableDuration test = new MutableDuration(base);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object_DurationType1() throws Throwable {\n+        MutableDuration test = new MutableDuration(\"P1Y2M3D\", DurationType.getYearMonthType());\n+        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.getTotalMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testConstructor_Object_DurationType2() throws Throwable {\n+        MutableDuration test = new MutableDuration((Object) null, DurationType.getYearMonthType());\n+        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_Object_DurationType3() throws Throwable {\n+        MutableDuration test = new MutableDuration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), DurationType.getYearMonthType());\n+        assertEquals(DurationType.getYearMonthType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_Object_DurationType4() throws Throwable {\n+        MutableDuration test = new MutableDuration(new Duration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType()), null);\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (5ints)\n+     */\n+    public void testConstructor_5int1() throws Throwable {\n+        MutableDuration test = new MutableDuration(4, 5, 6, 7, 8);\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(4 * DateTimeConstants.MILLIS_PER_DAY +\n+            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (8ints)\n+     */\n+    public void testConstructor_8int1() throws Throwable {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.getTotalMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (8ints)\n+     */\n+    public void testConstructor_8int__DurationType1() throws Throwable {\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.getTotalMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testConstructor_8int__DurationType2() throws Throwable {\n+        MutableDuration test = new MutableDuration(0, 0, 0, 4, 5, 6, 7, 8, DurationType.getDayHourType());\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(4 * DateTimeConstants.MILLIS_PER_DAY +\n+            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_8int__DurationType3() throws Throwable {\n+        try {\n+            new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getDayHourType());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableDuration test = new MutableDuration(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_long_long2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutableDuration test = new MutableDuration(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_DurationType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableDuration test = new MutableDuration(dt1.getMillis(), dt2.getMillis(), null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_long_long_DurationType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n+        MutableDuration test = new MutableDuration(dt1.getMillis(), dt2.getMillis(), DurationType.getDayHourType());\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_long_long_DurationType3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutableDuration test = new MutableDuration(dt1.getMillis(), dt2.getMillis(), DurationType.getAllType().withMillisRemoved());\n+        assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableDuration test = new MutableDuration(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutableDuration test = new MutableDuration(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI3() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutableDuration test = new MutableDuration(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(3, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI4() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        MutableDuration test = new MutableDuration(dt1, dt2);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0L, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI_DurationType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableDuration test = new MutableDuration(dt1, dt2, null);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n+        MutableDuration test = new MutableDuration(dt1, dt2, DurationType.getDayHourType());\n+        assertEquals(DurationType.getDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutableDuration test = new MutableDuration(dt1, dt2, DurationType.getAllType().withMillisRemoved());\n+        assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType4() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MutableDuration test = new MutableDuration(dt1, dt2, DurationType.getAllType());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(3, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType5() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        MutableDuration test = new MutableDuration(dt1, dt2, DurationType.getAllType());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0L, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutableDuration test = new MutableDuration(length);\n+        assertEquals(DurationType.getMillisType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(length, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_DurationType1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutableDuration test = new MutableDuration(length, null);\n+        assertEquals(DurationType.getMillisType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(length, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_long_DurationType2() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutableDuration test = new MutableDuration(length, DurationType.getMillisType());\n+        assertEquals(DurationType.getMillisType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(length, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_long_DurationType3() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutableDuration test = new MutableDuration(length, DurationType.getAllType());\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_long_DurationType4() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MutableDuration test = new MutableDuration(length, DurationType.getAllType().withMillisRemoved());\n+        assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length - 8, test.getTotalMillis());\n+    }\n+\n+}", "timestamp": 1090621217, "metainfo": ""}