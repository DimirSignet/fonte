{"sha": "804115f1b95e7e219599edac5d8786bd86177f66", "log": "Increase coverage   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeComparator.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeComparator.java\n  */\n package org.joda.time;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collections;\n \n import junit.framework.TestSuite;\n \n-import org.joda.test.time.*;\n-import org.joda.time.Chronology;\n-import org.joda.time.DateTime;\n-import org.joda.time.DateTimeComparator;\n-import org.joda.time.DateTimeZone;\n-import org.joda.time.ReadableInstant;\n+import org.joda.test.time.BulkTest;\n import org.joda.time.chrono.ISOChronology;\n /**\n  * This class is a Junit unit test for the\n  */\n public class TestDateTimeComparator extends BulkTest {\n \n+    private static final Chronology ISO = ISOChronology.getInstance();\n+    \n     /**\n      * The main method for this test program.\n      * @param args command line arguments.\n         cTime = null;\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testClass() {\n+        assertEquals(true, Modifier.isPublic(DateTimeComparator.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(DateTimeComparator.class.getModifiers()));\n+        assertEquals(1, DateTimeComparator.class.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(DateTimeComparator.class.getDeclaredConstructors()[0].getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testStaticGetInstance() {\n+        DateTimeComparator c = DateTimeComparator.getInstance();\n+        assertEquals(null, c.getLowerLimit());\n+        assertEquals(null, c.getUpperLimit());\n+        assertEquals(\"DateTimeComparator[]\", c.toString());\n+    }        \n+    public void testStaticGetDateOnlyInstance() {\n+        DateTimeComparator c = DateTimeComparator.getDateOnlyInstance(ISO);\n+        assertEquals(ISO.dayOfYear(), c.getLowerLimit());\n+        assertEquals(null, c.getUpperLimit());\n+        assertEquals(\"DateTimeComparator[dayOfYear-]\", c.toString());\n+        \n+        c = DateTimeComparator.getDateOnlyInstance(null);\n+        assertEquals(ISO.dayOfYear(), c.getLowerLimit());\n+        assertEquals(null, c.getUpperLimit());\n+    }\n+    public void testStaticGetTimeOnlyInstance() {\n+        DateTimeComparator c = DateTimeComparator.getTimeOnlyInstance(ISO);\n+        assertEquals(null, c.getLowerLimit());\n+        assertEquals(ISO.dayOfYear(), c.getUpperLimit());\n+        assertEquals(\"DateTimeComparator[-dayOfYear]\", c.toString());\n+        \n+        c = DateTimeComparator.getTimeOnlyInstance(null);\n+        assertEquals(null, c.getLowerLimit());\n+        assertEquals(ISO.dayOfYear(), c.getUpperLimit());\n+    }\n+    public void testStaticGetInstanceLower() {\n+        DateTimeComparator c = DateTimeComparator.getInstance(ISO.hourOfDay());\n+        assertEquals(ISO.hourOfDay(), c.getLowerLimit());\n+        assertEquals(null, c.getUpperLimit());\n+        assertEquals(\"DateTimeComparator[hourOfDay-]\", c.toString());\n+        \n+        c = DateTimeComparator.getInstance(null);\n+        assertSame(DateTimeComparator.getInstance(), c);\n+    }\n+    public void testStaticGetInstanceLowerUpper() {\n+        DateTimeComparator c = DateTimeComparator.getInstance(ISO.hourOfDay(), ISO.dayOfYear());\n+        assertEquals(ISO.hourOfDay(), c.getLowerLimit());\n+        assertEquals(ISO.dayOfYear(), c.getUpperLimit());\n+        assertEquals(\"DateTimeComparator[hourOfDay-dayOfYear]\", c.toString());\n+        \n+        c = DateTimeComparator.getInstance(null, null);\n+        assertSame(DateTimeComparator.getInstance(), c);\n+        \n+        try {\n+            DateTimeComparator.getInstance(ISO.dayOfYear(), ISO.hourOfDay());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSerialization1() throws Exception {\n+        DateTimeField f = ISO.dayOfYear();\n+        f.toString();\n+        DateTimeComparator c = DateTimeComparator.getInstance(ISO.hourOfDay(), ISO.dayOfYear());\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(c);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DateTimeComparator result = (DateTimeComparator) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(c, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization2() throws Exception {\n+        DateTimeComparator c = DateTimeComparator.getInstance();\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(c);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DateTimeComparator result = (DateTimeComparator) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(c, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Test all basic comparator operation with DateTime objects.\n      */\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n     public void testClass() {\n         Class cls = DateTimeUtils.class;\n         assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n-        assertEquals(true, Modifier.isFinal(cls.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(cls.getModifiers()));\n         \n         assertEquals(1, cls.getDeclaredConstructors().length);\n-        assertEquals(true, Modifier.isPrivate(cls.getDeclaredConstructors()[0].getModifiers()));\n-    }\n-\n+        assertEquals(true, Modifier.isProtected(cls.getDeclaredConstructors()[0].getModifiers()));\n+        \n+        DateTimeUtils utils = new DateTimeUtils() {};\n+    }\n+    \n     //-----------------------------------------------------------------------\n     public void testSystemMillis() {\n         long nowSystem = System.currentTimeMillis();\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n  */\n package org.joda.time;\n \n+import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n import java.io.PrintStream;\n import java.lang.reflect.Modifier;\n import java.security.AllPermission;\n         assertEquals(\"UTC\", DateTimeZone.UTC.toString());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testSerialization1() throws Exception {\n+        DateTimeZone zone = DateTimeZone.getInstance(\"Europe/Paris\");\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(zone);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DateTimeZone result = (DateTimeZone) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(zone, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerialization2() throws Exception {\n+        DateTimeZone zone = DateTimeZone.getInstance(\"+01:00\");\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(zone);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DateTimeZone result = (DateTimeZone) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(zone, result);\n+    }\n+\n }", "timestamp": 1090156383, "metainfo": ""}