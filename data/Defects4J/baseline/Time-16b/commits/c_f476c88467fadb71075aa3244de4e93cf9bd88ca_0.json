{"sha": "f476c88467fadb71075aa3244de4e93cf9bd88ca", "log": "Javadoc   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDuration.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDuration.java\n      * Gets the value as a String in the ISO8601 duration format.\n      * <p>\n      * For example, \"P6H3M7S\" represents 6 hours, 3 minutes, 7 seconds.\n-     * The field values are determined using the PreciseAll period type.\n+     * The field values are determined using {@link #toPeriod()}.\n      * <p>\n      * For more control over the output, see\n      * {@link org.joda.time.format.PeriodFormatterBuilder PeriodFormatterBuilder}.\n--- a/JodaTime/src/java/org/joda/time/Interval.java\n+++ b/JodaTime/src/java/org/joda/time/Interval.java\n  * <p>\n  * A time interval represents a period of time between two instants.\n  * Intervals are inclusive of the start instant and exclusive of the end.\n+ * The end instant is always greater than or equal to the start instant.\n  * <p>\n  * Intervals have a fixed millisecond duration.\n  * This is the difference between the start and end instants.\n--- a/JodaTime/src/java/org/joda/time/MutableInterval.java\n+++ b/JodaTime/src/java/org/joda/time/MutableInterval.java\n  * <p>\n  * A time interval represents a period of time between two instants.\n  * Intervals are inclusive of the start instant and exclusive of the end.\n+ * The end instant is always greater than or equal to the start instant.\n  * <p>\n  * Intervals have a fixed millisecond duration.\n  * This is the difference between the start and end instants.\n--- a/JodaTime/src/java/org/joda/time/ReadableDuration.java\n+++ b/JodaTime/src/java/org/joda/time/ReadableDuration.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the value as a String in the ISO8601 duration format.\n-     * <p>\n-     * For example, \"P6H3M7S\" represents 6 hours, 3 minutes, 7 seconds.\n-     * The field values are determined using the PreciseAll period type.\n+     * Gets the value as a String in the ISO8601 duration format using hours,\n+     * minutes and seconds (including fractional milliseconds).\n+     * <p>\n+     * For example, \"PT6H3M7S\" represents 6 hours, 3 minutes, 7 seconds.\n      *\n      * @return the value as an ISO8601 string\n      */\n--- a/JodaTime/src/java/org/joda/time/ReadableInterval.java\n+++ b/JodaTime/src/java/org/joda/time/ReadableInterval.java\n  * <p>\n  * A time interval represents a period of time between two instants.\n  * Intervals are inclusive of the start instant and exclusive of the end.\n+ * The end instant is always greater than or equal to the start instant.\n  * <p>\n  * Intervals have a fixed millisecond duration.\n  * This is the difference between the start and end instants.\n     //-----------------------------------------------------------------------\n     /**\n      * Get the value as a String in the ISO8601 interval format.\n+     * <p>\n+     * For example, \"2004-06-09T12:30:00.000/2004-07-10T13:30:00.000\".\n      *\n      * @return the value as an ISO8601 string\n      */\n--- a/JodaTime/src/java/org/joda/time/ReadablePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/ReadablePeriod.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the value as a String in the ISO8601 duration format.\n-     * <p>\n-     * For example, \"P6H3M5S\" represents 6 hours, 3 minutes, 5 seconds.\n-     *\n-     * @return the value as an ISO8601 string\n+     * Gets the value as a String in the style of the ISO8601 duration format.\n+     * Technically, the output can breach the ISO specification as weeks may be included.\n+     * <p>\n+     * For example, \"PT6H3M5S\" represents 6 hours, 3 minutes, 5 seconds.\n+     *\n+     * @return the value as an ISO8601 style string\n      */\n     String toString();\n ", "timestamp": 1092267014, "metainfo": ""}