{"sha": "b9e9ad74618b8922a061c3dcea2569891404eacd", "log": "Increase test coverage   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeFieldType.java\n                 return chronology.millisOfSecond();\n             default:\n                 // Shouldn't happen.\n-                throw new IllegalStateException();\n+                throw new InternalError();\n             }\n         }\n \n--- a/JodaTime/src/java/org/joda/time/DurationFieldType.java\n+++ b/JodaTime/src/java/org/joda/time/DurationFieldType.java\n                 return chronology.millis();\n             default:\n                 // Shouldn't happen.\n-                throw new IllegalStateException();\n+                throw new InternalError();\n             }\n         }\n \n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         TestSuite suite = new TestSuite();\n         suite.addTest(TestChronology.suite());\n         suite.addTest(TestDateTimeFieldType.suite());\n+        suite.addTest(TestDurationFieldType.suite());\n         \n         suite.addTest(TestInstant_Constructors.suite());\n         suite.addTest(TestInstant_Basics.suite());\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Basics.java\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.UnsupportedDateTimeField;\n+import org.joda.time.field.UnsupportedDurationField;\n \n /**\n  * This class is a Junit unit test for DateMidnight.\n                 return null;\n             }\n             public DateTimeField getField(Chronology chronology) {\n-                return UnsupportedDateTimeField.getInstance(this, null);\n+                return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType()));\n             }\n         };\n         try {\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java\n  */\n package org.joda.time;\n \n-import java.util.Locale;\n-import java.util.TimeZone;\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n  * @author Stephen Colebourne\n  */\n public class TestDateTimeFieldType extends TestCase {\n-    // Test in 2002/03 as time zones are more well known\n-    // (before the late 90's they were all over the place)\n-\n-    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n-    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n-    \n-    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n-                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n-                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n-                     366 + 365;\n-    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n-                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n-                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n-                     366 + 365 + 365;\n-    \n-    // 2002-06-09\n-    private long TEST_TIME_NOW =\n-            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n-            \n-    // 2002-04-05\n-    private long TEST_TIME1 =\n-            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n-            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n-        \n-    // 2003-05-06\n-    private long TEST_TIME2 =\n-            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n-            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n-    \n-    private DateTimeZone originalDateTimeZone = null;\n-    private TimeZone originalTimeZone = null;\n-    private Locale originalLocale = null;\n \n     public static void main(String[] args) {\n         junit.textui.TestRunner.run(suite());\n     }\n \n     protected void setUp() throws Exception {\n-        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n-        originalDateTimeZone = DateTimeZone.getDefault();\n-        originalTimeZone = TimeZone.getDefault();\n-        originalLocale = Locale.getDefault();\n-        DateTimeZone.setDefault(LONDON);\n-        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n-        Locale.setDefault(Locale.UK);\n     }\n \n     protected void tearDown() throws Exception {\n-        DateTimeUtils.setCurrentMillisSystem();\n-        DateTimeZone.setDefault(originalDateTimeZone);\n-        TimeZone.setDefault(originalTimeZone);\n-        Locale.setDefault(originalLocale);\n-        originalDateTimeZone = null;\n-        originalTimeZone = null;\n-        originalLocale = null;\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testTest() {\n-        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n-        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n-        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void test_era() {\n+    public void test_era() throws Exception {\n         assertEquals(DateTimeFieldType.era(), DateTimeFieldType.era());\n         assertEquals(\"era\", DateTimeFieldType.era().getName());\n         assertEquals(DurationFieldType.eras(), DateTimeFieldType.era().getDurationType());\n         assertEquals(null, DateTimeFieldType.era().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().era(), DateTimeFieldType.era().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().era().isSupported(), DateTimeFieldType.era().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_centuryOfEra() {\n+        assertSerialization(DateTimeFieldType.era());\n+    }\n+\n+    public void test_centuryOfEra() throws Exception {\n         assertEquals(DateTimeFieldType.centuryOfEra(), DateTimeFieldType.centuryOfEra());\n         assertEquals(\"centuryOfEra\", DateTimeFieldType.centuryOfEra().getName());\n         assertEquals(DurationFieldType.centuries(), DateTimeFieldType.centuryOfEra().getDurationType());\n         assertEquals(DurationFieldType.eras(), DateTimeFieldType.centuryOfEra().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().centuryOfEra(), DateTimeFieldType.centuryOfEra().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().centuryOfEra().isSupported(), DateTimeFieldType.centuryOfEra().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_yearOfCentury() {\n+        assertSerialization(DateTimeFieldType.centuryOfEra());\n+    }\n+\n+    public void test_yearOfCentury() throws Exception {\n         assertEquals(DateTimeFieldType.yearOfCentury(), DateTimeFieldType.yearOfCentury());\n         assertEquals(\"yearOfCentury\", DateTimeFieldType.yearOfCentury().getName());\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfCentury().getDurationType());\n         assertEquals(DurationFieldType.centuries(), DateTimeFieldType.yearOfCentury().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().yearOfCentury(), DateTimeFieldType.yearOfCentury().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().yearOfCentury().isSupported(), DateTimeFieldType.yearOfCentury().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_yearOfEra() {\n+        assertSerialization(DateTimeFieldType.yearOfCentury());\n+    }\n+\n+    public void test_yearOfEra() throws Exception {\n         assertEquals(DateTimeFieldType.yearOfEra(), DateTimeFieldType.yearOfEra());\n         assertEquals(\"yearOfEra\", DateTimeFieldType.yearOfEra().getName());\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.yearOfEra().getDurationType());\n         assertEquals(DurationFieldType.eras(), DateTimeFieldType.yearOfEra().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().yearOfEra(), DateTimeFieldType.yearOfEra().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().yearOfEra().isSupported(), DateTimeFieldType.yearOfEra().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_year() {\n+        assertSerialization(DateTimeFieldType.yearOfEra());\n+    }\n+\n+    public void test_year() throws Exception {\n         assertEquals(DateTimeFieldType.year(), DateTimeFieldType.year());\n         assertEquals(\"year\", DateTimeFieldType.year().getName());\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.year().getDurationType());\n         assertEquals(null, DateTimeFieldType.year().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().year(), DateTimeFieldType.year().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().year().isSupported(), DateTimeFieldType.year().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_monthOfYear() {\n+        assertSerialization(DateTimeFieldType.year());\n+    }\n+\n+    public void test_monthOfYear() throws Exception {\n         assertEquals(DateTimeFieldType.monthOfYear(), DateTimeFieldType.monthOfYear());\n         assertEquals(\"monthOfYear\", DateTimeFieldType.monthOfYear().getName());\n         assertEquals(DurationFieldType.months(), DateTimeFieldType.monthOfYear().getDurationType());\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.monthOfYear().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().monthOfYear(), DateTimeFieldType.monthOfYear().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().monthOfYear().isSupported(), DateTimeFieldType.monthOfYear().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_weekyearOfCentury() {\n+        assertSerialization(DateTimeFieldType.monthOfYear());\n+    }\n+\n+    public void test_weekyearOfCentury() throws Exception {\n         assertEquals(DateTimeFieldType.weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury());\n         assertEquals(\"weekyearOfCentury\", DateTimeFieldType.weekyearOfCentury().getName());\n         assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyearOfCentury().getDurationType());\n         assertEquals(DurationFieldType.centuries(), DateTimeFieldType.weekyearOfCentury().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().weekyearOfCentury(), DateTimeFieldType.weekyearOfCentury().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().weekyearOfCentury().isSupported(), DateTimeFieldType.weekyearOfCentury().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_weekyear() {\n+        assertSerialization(DateTimeFieldType.weekyearOfCentury());\n+    }\n+\n+    public void test_weekyear() throws Exception {\n         assertEquals(DateTimeFieldType.weekyear(), DateTimeFieldType.weekyear());\n         assertEquals(\"weekyear\", DateTimeFieldType.weekyear().getName());\n         assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekyear().getDurationType());\n         assertEquals(null, DateTimeFieldType.weekyear().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().weekyear(), DateTimeFieldType.weekyear().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().weekyear().isSupported(), DateTimeFieldType.weekyear().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_weekOfWeekyear() {\n+        assertSerialization(DateTimeFieldType.weekyear());\n+    }\n+\n+    public void test_weekOfWeekyear() throws Exception {\n         assertEquals(DateTimeFieldType.weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear());\n         assertEquals(\"weekOfWeekyear\", DateTimeFieldType.weekOfWeekyear().getName());\n         assertEquals(DurationFieldType.weeks(), DateTimeFieldType.weekOfWeekyear().getDurationType());\n         assertEquals(DurationFieldType.weekyears(), DateTimeFieldType.weekOfWeekyear().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().weekOfWeekyear(), DateTimeFieldType.weekOfWeekyear().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().weekOfWeekyear().isSupported(), DateTimeFieldType.weekOfWeekyear().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_dayOfYear() {\n+        assertSerialization(DateTimeFieldType.weekOfWeekyear());\n+    }\n+\n+    public void test_dayOfYear() throws Exception {\n         assertEquals(DateTimeFieldType.dayOfYear(), DateTimeFieldType.dayOfYear());\n         assertEquals(\"dayOfYear\", DateTimeFieldType.dayOfYear().getName());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfYear().getDurationType());\n         assertEquals(DurationFieldType.years(), DateTimeFieldType.dayOfYear().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().dayOfYear(), DateTimeFieldType.dayOfYear().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().dayOfYear().isSupported(), DateTimeFieldType.dayOfYear().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_dayOfMonth() {\n+        assertSerialization(DateTimeFieldType.dayOfYear());\n+    }\n+\n+    public void test_dayOfMonth() throws Exception {\n         assertEquals(DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfMonth());\n         assertEquals(\"dayOfMonth\", DateTimeFieldType.dayOfMonth().getName());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfMonth().getDurationType());\n         assertEquals(DurationFieldType.months(), DateTimeFieldType.dayOfMonth().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().dayOfMonth(), DateTimeFieldType.dayOfMonth().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().dayOfMonth().isSupported(), DateTimeFieldType.dayOfMonth().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_dayOfWeek() {\n+        assertSerialization(DateTimeFieldType.dayOfMonth());\n+    }\n+\n+    public void test_dayOfWeek() throws Exception {\n         assertEquals(DateTimeFieldType.dayOfWeek(), DateTimeFieldType.dayOfWeek());\n         assertEquals(\"dayOfWeek\", DateTimeFieldType.dayOfWeek().getName());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.dayOfWeek().getDurationType());\n         assertEquals(DurationFieldType.weeks(), DateTimeFieldType.dayOfWeek().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().dayOfWeek(), DateTimeFieldType.dayOfWeek().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().dayOfWeek().isSupported(), DateTimeFieldType.dayOfWeek().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_halfdayOfDay() {\n+        assertSerialization(DateTimeFieldType.dayOfWeek());\n+    }\n+\n+    public void test_halfdayOfDay() throws Exception {\n         assertEquals(DateTimeFieldType.halfdayOfDay(), DateTimeFieldType.halfdayOfDay());\n         assertEquals(\"halfdayOfDay\", DateTimeFieldType.halfdayOfDay().getName());\n         assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.halfdayOfDay().getDurationType());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.halfdayOfDay().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().halfdayOfDay(), DateTimeFieldType.halfdayOfDay().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().halfdayOfDay().isSupported(), DateTimeFieldType.halfdayOfDay().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_clockhourOfDay() {\n+        assertSerialization(DateTimeFieldType.halfdayOfDay());\n+    }\n+\n+    public void test_clockhourOfDay() throws Exception {\n         assertEquals(DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.clockhourOfDay());\n         assertEquals(\"clockhourOfDay\", DateTimeFieldType.clockhourOfDay().getName());\n         assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfDay().getDurationType());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.clockhourOfDay().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().clockhourOfDay(), DateTimeFieldType.clockhourOfDay().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().clockhourOfDay().isSupported(), DateTimeFieldType.clockhourOfDay().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_clockhourOfHalfday() {\n+        assertSerialization(DateTimeFieldType.clockhourOfDay());\n+    }\n+\n+    public void test_clockhourOfHalfday() throws Exception {\n         assertEquals(DateTimeFieldType.clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday());\n         assertEquals(\"clockhourOfHalfday\", DateTimeFieldType.clockhourOfHalfday().getName());\n         assertEquals(DurationFieldType.hours(), DateTimeFieldType.clockhourOfHalfday().getDurationType());\n         assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.clockhourOfHalfday().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().clockhourOfHalfday(), DateTimeFieldType.clockhourOfHalfday().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().clockhourOfHalfday().isSupported(), DateTimeFieldType.clockhourOfHalfday().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_hourOfHalfday() {\n+        assertSerialization(DateTimeFieldType.clockhourOfHalfday());\n+    }\n+\n+    public void test_hourOfHalfday() throws Exception {\n         assertEquals(DateTimeFieldType.hourOfHalfday(), DateTimeFieldType.hourOfHalfday());\n         assertEquals(\"hourOfHalfday\", DateTimeFieldType.hourOfHalfday().getName());\n         assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfHalfday().getDurationType());\n         assertEquals(DurationFieldType.halfdays(), DateTimeFieldType.hourOfHalfday().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().hourOfHalfday(), DateTimeFieldType.hourOfHalfday().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().hourOfHalfday().isSupported(), DateTimeFieldType.hourOfHalfday().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_hourOfDay() {\n+        assertSerialization(DateTimeFieldType.hourOfHalfday());\n+    }\n+\n+    public void test_hourOfDay() throws Exception {\n         assertEquals(DateTimeFieldType.hourOfDay(), DateTimeFieldType.hourOfDay());\n         assertEquals(\"hourOfDay\", DateTimeFieldType.hourOfDay().getName());\n         assertEquals(DurationFieldType.hours(), DateTimeFieldType.hourOfDay().getDurationType());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.hourOfDay().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().hourOfDay(), DateTimeFieldType.hourOfDay().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().hourOfDay().isSupported(), DateTimeFieldType.hourOfDay().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_minuteOfDay() {\n+        assertSerialization(DateTimeFieldType.hourOfDay());\n+    }\n+\n+    public void test_minuteOfDay() throws Exception {\n         assertEquals(DateTimeFieldType.minuteOfDay(), DateTimeFieldType.minuteOfDay());\n         assertEquals(\"minuteOfDay\", DateTimeFieldType.minuteOfDay().getName());\n         assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfDay().getDurationType());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.minuteOfDay().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().minuteOfDay(), DateTimeFieldType.minuteOfDay().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().minuteOfDay().isSupported(), DateTimeFieldType.minuteOfDay().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_minuteOfHour() {\n+        assertSerialization(DateTimeFieldType.minuteOfDay());\n+    }\n+\n+    public void test_minuteOfHour() throws Exception {\n         assertEquals(DateTimeFieldType.minuteOfHour(), DateTimeFieldType.minuteOfHour());\n         assertEquals(\"minuteOfHour\", DateTimeFieldType.minuteOfHour().getName());\n         assertEquals(DurationFieldType.minutes(), DateTimeFieldType.minuteOfHour().getDurationType());\n         assertEquals(DurationFieldType.hours(), DateTimeFieldType.minuteOfHour().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().minuteOfHour(), DateTimeFieldType.minuteOfHour().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().minuteOfHour().isSupported(), DateTimeFieldType.minuteOfHour().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_secondOfDay() {\n+        assertSerialization(DateTimeFieldType.minuteOfHour());\n+    }\n+\n+    public void test_secondOfDay() throws Exception {\n         assertEquals(DateTimeFieldType.secondOfDay(), DateTimeFieldType.secondOfDay());\n         assertEquals(\"secondOfDay\", DateTimeFieldType.secondOfDay().getName());\n         assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfDay().getDurationType());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.secondOfDay().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().secondOfDay(), DateTimeFieldType.secondOfDay().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().secondOfDay().isSupported(), DateTimeFieldType.secondOfDay().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_secondOfMinute() {\n+        assertSerialization(DateTimeFieldType.secondOfDay());\n+    }\n+\n+    public void test_secondOfMinute() throws Exception {\n         assertEquals(DateTimeFieldType.secondOfMinute(), DateTimeFieldType.secondOfMinute());\n         assertEquals(\"secondOfMinute\", DateTimeFieldType.secondOfMinute().getName());\n         assertEquals(DurationFieldType.seconds(), DateTimeFieldType.secondOfMinute().getDurationType());\n         assertEquals(DurationFieldType.minutes(), DateTimeFieldType.secondOfMinute().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().secondOfMinute(), DateTimeFieldType.secondOfMinute().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().secondOfMinute().isSupported(), DateTimeFieldType.secondOfMinute().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_millisOfDay() {\n+        assertSerialization(DateTimeFieldType.secondOfMinute());\n+    }\n+\n+    public void test_millisOfDay() throws Exception {\n         assertEquals(DateTimeFieldType.millisOfDay(), DateTimeFieldType.millisOfDay());\n         assertEquals(\"millisOfDay\", DateTimeFieldType.millisOfDay().getName());\n         assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfDay().getDurationType());\n         assertEquals(DurationFieldType.days(), DateTimeFieldType.millisOfDay().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().millisOfDay(), DateTimeFieldType.millisOfDay().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().millisOfDay().isSupported(), DateTimeFieldType.millisOfDay().isSupported(Chronology.getCopticUTC()));\n-    }\n-\n-    public void test_millisOfSecond() {\n+        assertSerialization(DateTimeFieldType.millisOfDay());\n+    }\n+\n+    public void test_millisOfSecond() throws Exception {\n         assertEquals(DateTimeFieldType.millisOfSecond(), DateTimeFieldType.millisOfSecond());\n         assertEquals(\"millisOfSecond\", DateTimeFieldType.millisOfSecond().getName());\n         assertEquals(DurationFieldType.millis(), DateTimeFieldType.millisOfSecond().getDurationType());\n         assertEquals(DurationFieldType.seconds(), DateTimeFieldType.millisOfSecond().getRangeDurationType());\n         assertEquals(Chronology.getCopticUTC().millisOfSecond(), DateTimeFieldType.millisOfSecond().getField(Chronology.getCopticUTC()));\n         assertEquals(Chronology.getCopticUTC().millisOfSecond().isSupported(), DateTimeFieldType.millisOfSecond().isSupported(Chronology.getCopticUTC()));\n+        assertSerialization(DateTimeFieldType.millisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void assertSerialization(DateTimeFieldType type) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(type);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DateTimeFieldType result = (DateTimeFieldType) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(type, result);\n     }\n \n }\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.UnsupportedDateTimeField;\n+import org.joda.time.field.UnsupportedDurationField;\n \n /**\n  * This class is a Junit unit test for DateTime.\n                 return null;\n             }\n             public DateTimeField getField(Chronology chronology) {\n-                return UnsupportedDateTimeField.getInstance(this, null);\n+                return UnsupportedDateTimeField.getInstance(this, UnsupportedDurationField.getInstance(getDurationType()));\n             }\n         };\n         try {\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestDurationFieldType.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for DurationFieldType.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDurationFieldType extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDurationFieldType.class);\n+    }\n+\n+    public TestDurationFieldType(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_eras() throws Exception {\n+        assertEquals(DurationFieldType.eras(), DurationFieldType.eras());\n+        assertEquals(\"eras\", DurationFieldType.eras().getName());\n+        assertEquals(Chronology.getCopticUTC().eras(), DurationFieldType.eras().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().eras().isSupported(), DurationFieldType.eras().isSupported(Chronology.getCopticUTC()));\n+        assertSerialization(DurationFieldType.eras());\n+    }\n+\n+    public void test_centuries() throws Exception {\n+        assertEquals(DurationFieldType.centuries(), DurationFieldType.centuries());\n+        assertEquals(\"centuries\", DurationFieldType.centuries().getName());\n+        assertEquals(Chronology.getCopticUTC().centuries(), DurationFieldType.centuries().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().centuries().isSupported(), DurationFieldType.centuries().isSupported(Chronology.getCopticUTC()));\n+        assertSerialization(DurationFieldType.centuries());\n+    }\n+\n+    public void test_years() throws Exception {\n+        assertEquals(DurationFieldType.years(), DurationFieldType.years());\n+        assertEquals(\"years\", DurationFieldType.years().getName());\n+        assertEquals(Chronology.getCopticUTC().years(), DurationFieldType.years().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().years().isSupported(), DurationFieldType.years().isSupported(Chronology.getCopticUTC()));\n+        assertSerialization(DurationFieldType.years());\n+    }\n+\n+    public void test_months() throws Exception {\n+        assertEquals(DurationFieldType.months(), DurationFieldType.months());\n+        assertEquals(\"months\", DurationFieldType.months().getName());\n+        assertEquals(Chronology.getCopticUTC().months(), DurationFieldType.months().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().months().isSupported(), DurationFieldType.months().isSupported(Chronology.getCopticUTC()));\n+        assertSerialization(DurationFieldType.months());\n+    }\n+\n+    public void test_weekyears() throws Exception {\n+        assertEquals(DurationFieldType.weekyears(), DurationFieldType.weekyears());\n+        assertEquals(\"weekyears\", DurationFieldType.weekyears().getName());\n+        assertEquals(Chronology.getCopticUTC().weekyears(), DurationFieldType.weekyears().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().weekyears().isSupported(), DurationFieldType.weekyears().isSupported(Chronology.getCopticUTC()));\n+        assertSerialization(DurationFieldType.weekyears());\n+    }\n+\n+    public void test_weeks() throws Exception {\n+        assertEquals(DurationFieldType.weeks(), DurationFieldType.weeks());\n+        assertEquals(\"weeks\", DurationFieldType.weeks().getName());\n+        assertEquals(Chronology.getCopticUTC().weeks(), DurationFieldType.weeks().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().weeks().isSupported(), DurationFieldType.weeks().isSupported(Chronology.getCopticUTC()));\n+        assertSerialization(DurationFieldType.weeks());\n+    }\n+\n+    public void test_days() throws Exception {\n+        assertEquals(DurationFieldType.days(), DurationFieldType.days());\n+        assertEquals(\"days\", DurationFieldType.days().getName());\n+        assertEquals(Chronology.getCopticUTC().days(), DurationFieldType.days().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().days().isSupported(), DurationFieldType.days().isSupported(Chronology.getCopticUTC()));\n+        assertSerialization(DurationFieldType.days());\n+    }\n+\n+    public void test_halfdays() throws Exception {\n+        assertEquals(DurationFieldType.halfdays(), DurationFieldType.halfdays());\n+        assertEquals(\"halfdays\", DurationFieldType.halfdays().getName());\n+        assertEquals(Chronology.getCopticUTC().halfdays(), DurationFieldType.halfdays().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().halfdays().isSupported(), DurationFieldType.halfdays().isSupported(Chronology.getCopticUTC()));\n+        assertSerialization(DurationFieldType.halfdays());\n+    }\n+\n+    public void test_hours() throws Exception {\n+        assertEquals(DurationFieldType.hours(), DurationFieldType.hours());\n+        assertEquals(\"hours\", DurationFieldType.hours().getName());\n+        assertEquals(Chronology.getCopticUTC().hours(), DurationFieldType.hours().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().hours().isSupported(), DurationFieldType.hours().isSupported(Chronology.getCopticUTC()));\n+        assertSerialization(DurationFieldType.hours());\n+    }\n+\n+    public void test_minutes() throws Exception {\n+        assertEquals(DurationFieldType.minutes(), DurationFieldType.minutes());\n+        assertEquals(\"minutes\", DurationFieldType.minutes().getName());\n+        assertEquals(Chronology.getCopticUTC().minutes(), DurationFieldType.minutes().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().minutes().isSupported(), DurationFieldType.minutes().isSupported(Chronology.getCopticUTC()));\n+        assertSerialization(DurationFieldType.minutes());\n+    }\n+\n+    public void test_seconds() throws Exception {\n+        assertEquals(DurationFieldType.seconds(), DurationFieldType.seconds());\n+        assertEquals(\"seconds\", DurationFieldType.seconds().getName());\n+        assertEquals(Chronology.getCopticUTC().seconds(), DurationFieldType.seconds().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().seconds().isSupported(), DurationFieldType.seconds().isSupported(Chronology.getCopticUTC()));\n+        assertSerialization(DurationFieldType.seconds());\n+    }\n+\n+    public void test_millis() throws Exception {\n+        assertEquals(DurationFieldType.millis(), DurationFieldType.millis());\n+        assertEquals(\"millis\", DurationFieldType.millis().getName());\n+        assertEquals(Chronology.getCopticUTC().millis(), DurationFieldType.millis().getField(Chronology.getCopticUTC()));\n+        assertEquals(Chronology.getCopticUTC().millis().isSupported(), DurationFieldType.millis().isSupported(Chronology.getCopticUTC()));\n+        assertSerialization(DurationFieldType.millis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void assertSerialization(DurationFieldType type) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(type);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        DurationFieldType result = (DurationFieldType) ois.readObject();\n+        ois.close();\n+        \n+        assertSame(type, result);\n+    }\n+\n+}\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n         assertEquals(new Interval(TEST_TIME1, TEST_TIME2, Chronology.getISO()), test);\n     }\n \n+    public void testWithChronology3() {\n+        Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n+        Interval test = base.withChronology(COPTIC_PARIS);\n+        assertSame(base, test);\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testWithStartMillis_long1() {\n         Interval base = new Interval(TEST_TIME1, TEST_TIME2, COPTIC_PARIS);\n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Constructors.java\n         assertEquals(4, test.getMillis());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object_Chronology1() throws Throwable {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutablePeriod test = new MutablePeriod(new Duration(length), Chronology.getISO());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals((450 * 24) + 5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object_Chronology2() throws Throwable {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        MutablePeriod test = new MutablePeriod(new Duration(length), Chronology.getISOUTC());\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+        assertEquals(0, test.getMonths());\n+        assertEquals(64, test.getWeeks());\n+        assertEquals(2, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n         MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n         test.add(DurationFieldType.years(), 10);\n         assertEquals(11, test.getYears());\n+        \n+        test = new MutablePeriod(0, 0, 0, 0, 0, 0, 0, 1, PeriodType.millis());\n+        test.add(DurationFieldType.years(), 0);\n+        assertEquals(0, test.getYears());\n+        assertEquals(1, test.getMillis());\n         \n         test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n         try {\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n             ReadableIntervalConverter.INSTANCE.getPeriodType(i));\n     }\n \n-    public void testSetIntoPeriod_Object() throws Exception {\n+    public void testSetIntoPeriod_Object1() throws Exception {\n         Interval i = new Interval(100L, 223L);\n         MutablePeriod m = new MutablePeriod(PeriodType.millis());\n         ReadableIntervalConverter.INSTANCE.setInto(m, i, null);\n         assertEquals(123, m.getMillis());\n     }\n \n+    public void testSetIntoPeriod_Object2() throws Exception {\n+        Interval i = new Interval(100L, 223L);\n+        MutablePeriod m = new MutablePeriod(PeriodType.millis());\n+        ReadableIntervalConverter.INSTANCE.setInto(m, i, Chronology.getCoptic());\n+        assertEquals(0, m.getYears());\n+        assertEquals(0, m.getMonths());\n+        assertEquals(0, m.getWeeks());\n+        assertEquals(0, m.getDays());\n+        assertEquals(0, m.getHours());\n+        assertEquals(0, m.getMinutes());\n+        assertEquals(0, m.getSeconds());\n+        assertEquals(123, m.getMillis());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testIsReadableInterval_Object_Chronology() throws Exception {\n         Interval i = new Interval(1234L, 5678L);", "timestamp": 1095202761, "metainfo": ""}