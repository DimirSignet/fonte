{"sha": "582ba2eaffbb3d0fac2a1b938e1a7d3284146624", "log": "Fixed offset time zones calculated incorrect periods - fix isPrecise()  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n         }\n \n         public boolean isPrecise() {\n-            return iTimeField ? iField.isPrecise() : this.iZone.isFixed();\n+            return iTimeField ? iField.isPrecise() : iField.isPrecise() && this.iZone.isFixed();\n         }\n \n         public long getUnitMillis() {\n--- a/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestBuddhistChronology.java\n         assertEquals(true, BuddhistChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, BuddhistChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(true, BuddhistChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, BuddhistChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, BuddhistChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, BuddhistChronology.getInstance(gmt).millis().isPrecise());\n     }\n \n     public void testDateFields() {\n--- a/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestCopticChronology.java\n         assertEquals(true, CopticChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, CopticChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(true, CopticChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, CopticChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, CopticChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, CopticChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, CopticChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, CopticChronology.getInstance(gmt).millis().isPrecise());\n     }\n \n     public void testDateFields() {\n--- a/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestEthiopicChronology.java\n         assertEquals(true, EthiopicChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, EthiopicChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(true, EthiopicChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, EthiopicChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, EthiopicChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, EthiopicChronology.getInstance(gmt).millis().isPrecise());\n     }\n \n     public void testDateFields() {\n--- a/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java\n         assertEquals(true, GJChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, GJChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(true, GJChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, GJChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, GJChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, GJChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, GJChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, GJChronology.getInstance(gmt).millis().isPrecise());\n     }\n \n     public void testDateFields() {\n--- a/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestGregorianChronology.java\n         assertEquals(true, GregorianChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, GregorianChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(true, GregorianChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, GregorianChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, GregorianChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, GregorianChronology.getInstance(gmt).millis().isPrecise());\n     }\n \n     public void testDateFields() {\n--- a/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestISOChronology.java\n         assertEquals(true, ISOChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, ISOChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(true, ISOChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, ISOChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(gmt).millis().isPrecise());\n+        \n+        DateTimeZone offset = DateTimeZone.forOffsetHours(1);\n+        assertEquals(false, ISOChronology.getInstance(offset).centuries().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance(offset).years().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance(offset).weekyears().isPrecise());\n+        assertEquals(false, ISOChronology.getInstance(offset).months().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).weeks().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).days().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).halfdays().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).hours().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).minutes().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).seconds().isPrecise());\n+        assertEquals(true, ISOChronology.getInstance(offset).millis().isPrecise());\n     }\n \n     public void testDateFields() {\n--- a/JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestIslamicChronology.java\n         assertEquals(true, IslamicChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, IslamicChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(true, IslamicChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, IslamicChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, IslamicChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, IslamicChronology.getInstance(gmt).millis().isPrecise());\n     }\n \n     public void testDateFields() {\n--- a/JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestJulianChronology.java\n         assertEquals(true, JulianChronology.getInstanceUTC().minutes().isPrecise());\n         assertEquals(true, JulianChronology.getInstanceUTC().seconds().isPrecise());\n         assertEquals(true, JulianChronology.getInstanceUTC().millis().isPrecise());\n+        \n+        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        assertEquals(false, JulianChronology.getInstance(gmt).centuries().isPrecise());\n+        assertEquals(false, JulianChronology.getInstance(gmt).years().isPrecise());\n+        assertEquals(false, JulianChronology.getInstance(gmt).weekyears().isPrecise());\n+        assertEquals(false, JulianChronology.getInstance(gmt).months().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).weeks().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).days().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).halfdays().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).hours().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).minutes().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).seconds().isPrecise());\n+        assertEquals(true, JulianChronology.getInstance(gmt).millis().isPrecise());\n     }\n \n     public void testDateFields() {", "timestamp": 1205598585, "metainfo": ""}