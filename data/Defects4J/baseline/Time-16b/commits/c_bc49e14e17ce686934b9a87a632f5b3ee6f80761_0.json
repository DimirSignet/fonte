{"sha": "bc49e14e17ce686934b9a87a632f5b3ee6f80761", "log": "Classloading CachedDateTimeZone could invalidate state [2935625] Reported by Michael Barker  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n import java.util.TimeZone;\n \n import org.joda.time.chrono.BaseChronology;\n-import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n     /** The set of ID strings. */\n     private static Set<String> cAvailableIDs;\n     /** The default time zone. */\n-    private static DateTimeZone cDefault;\n+    private static volatile DateTimeZone cDefault;\n     /** A formatter for printing and parsing zones. */\n     private static DateTimeFormatter cOffsetFormatter;\n \n     static {\n         setProvider0(null);\n         setNameProvider0(null);\n-\n-        try {\n-            try {\n-                cDefault = forID(System.getProperty(\"user.timezone\"));\n-            } catch (RuntimeException ex) {\n-                // ignored\n-            }\n-            if (cDefault == null) {\n-                cDefault = forTimeZone(TimeZone.getDefault());\n-            }\n-        } catch (IllegalArgumentException ex) {\n-            // ignored\n-        }\n-\n-        if (cDefault == null) {\n-            cDefault = UTC;\n-        }\n     }\n \n     //-----------------------------------------------------------------------\n      * @return the default datetime zone object\n      */\n     public static DateTimeZone getDefault() {\n-        return cDefault;\n+        DateTimeZone zone = cDefault;\n+        if (zone == null) {\n+            synchronized(DateTimeZone.class) {\n+                zone = cDefault;\n+                if (zone == null) {\n+                    DateTimeZone temp = null;\n+                    try {\n+                        try {\n+                            temp = forID(System.getProperty(\"user.timezone\"));\n+                        } catch (RuntimeException ex) {\n+                            // ignored\n+                        }\n+                        if (temp == null) {\n+                            temp = forTimeZone(TimeZone.getDefault());\n+                        }\n+                    } catch (IllegalArgumentException ex) {\n+                        // ignored\n+                    }\n+                    if (temp == null) {\n+                        temp = UTC;\n+                    }\n+                    cDefault = zone = temp;\n+                }\n+            }\n+        }\n+        return zone;\n     }\n \n     /**\n         if (zone == null) {\n             throw new IllegalArgumentException(\"The datetime zone must not be null\");\n         }\n-        cDefault = zone;\n+        synchronized(DateTimeZone.class) {\n+            cDefault = zone;\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n     }\n \n     private static int parseOffset(String str) {\n-        Chronology chrono;\n-        if (cDefault != null) {\n-            chrono = ISOChronology.getInstanceUTC();\n-        } else {\n-            // Can't use a real chronology if called during class\n-            // initialization. Offset parser doesn't need it anyhow.\n-            chrono = new BaseChronology() {\n-                public DateTimeZone getZone() {\n-                    return null;\n-                }\n-                public Chronology withUTC() {\n-                    return this;\n-                }\n-                public Chronology withZone(DateTimeZone zone) {\n-                    return this;\n-                }\n-                public String toString() {\n-                    return getClass().getName();\n-                }\n-            };\n-        }\n-\n+        // Can't use a real chronology if called during class\n+        // initialization. Offset parser doesn't need it anyhow.\n+        Chronology chrono = new BaseChronology() {\n+            public DateTimeZone getZone() {\n+                return null;\n+            }\n+            public Chronology withUTC() {\n+                return this;\n+            }\n+            public Chronology withZone(DateTimeZone zone) {\n+                return this;\n+            }\n+            public String toString() {\n+                return getClass().getName();\n+            }\n+        };\n         return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);\n     }\n ", "timestamp": 1266167962, "metainfo": ""}