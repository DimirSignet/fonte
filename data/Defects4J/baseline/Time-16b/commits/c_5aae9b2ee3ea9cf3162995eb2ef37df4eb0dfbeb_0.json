{"sha": "5aae9b2ee3ea9cf3162995eb2ef37df4eb0dfbeb", "log": "Support pluggable locale text and additional locales in JDK 6 [2690370] implemented by sschz  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n  */\n package org.joda.time;\n \n+import java.lang.reflect.Method;\n+import java.text.DateFormatSymbols;\n+import java.util.Locale;\n+\n import org.joda.time.chrono.ISOChronology;\n \n /**\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets the {@link DateFormatSymbols} based on the given locale.\n+     * <p>\n+     * If JDK 6 or newer is being used, DateFormatSymbols.getInstance(locale) will\n+     * be used in order to allow the use of locales defined as extensions.\n+     * Otherwise, new DateFormatSymbols(locale) will be used.\n+     * See JDK 6 {@link DateFormatSymbols} for further information.\n+     * \n+     * @param locale  the {@link Locale} used to get the correct {@link DateFormatSymbols}\n+     * @return the symbols\n+     */\n+    public static final DateFormatSymbols getDateFormatSymbols(Locale locale) {\n+        try {        \t\n+        \tMethod method = DateFormatSymbols.class.getMethod(\"getInstance\", new Class[] {Locale.class});        \t\n+        \treturn (DateFormatSymbols) method.invoke(null, new Object[] {locale});        \t\n+        } catch (Exception ex) {\n+        \treturn new DateFormatSymbols(locale);\n+        } \n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Base class defining a millisecond provider.\n      */\n     abstract static class MillisProvider {\n--- a/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJLocaleSymbols.java\n \n import java.lang.ref.WeakReference;\n import java.text.DateFormatSymbols;\n-import java.util.WeakHashMap;\n import java.util.Locale;\n import java.util.TreeMap;\n+import java.util.WeakHashMap;\n \n import org.joda.time.DateTimeFieldType;\n+import org.joda.time.DateTimeUtils;\n import org.joda.time.IllegalFieldValueException;\n \n /**\n      */\n     private GJLocaleSymbols(Locale locale) {\n         iLocale = new WeakReference(locale);\n-\n-        DateFormatSymbols dfs = new DateFormatSymbols(locale);\n-\n+        \n+        DateFormatSymbols dfs = DateTimeUtils.getDateFormatSymbols(locale);\n+        \n         iEras = dfs.getEras();\n         iDaysOfWeek = realignDaysOfWeek(dfs.getWeekdays());\n         iShortDaysOfWeek = realignDaysOfWeek(dfs.getShortWeekdays());\n--- a/JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java\n+++ b/JodaTime/src/java/org/joda/time/tz/DefaultNameProvider.java\n import java.text.DateFormatSymbols;\n import java.util.HashMap;\n import java.util.Locale;\n+\n+import org.joda.time.DateTimeUtils;\n \n /**\n  * The default name provider acquires localized names from\n         HashMap byNameKeyCache = (HashMap)byIdCache.get(id);\n         if (byNameKeyCache == null) {\n             byIdCache.put(id, byNameKeyCache = createCache());\n-            String[][] zoneStrings = new DateFormatSymbols(locale).getZoneStrings();\n+            String[][] zoneStrings = DateTimeUtils.getDateFormatSymbols(locale).getZoneStrings();\n             for (int i=0; i<zoneStrings.length; i++) {\n                 String[] set = zoneStrings[i];\n                 if (set != null && set.length == 5 && id.equals(set[0])) {", "timestamp": 1238964864, "metainfo": ""}