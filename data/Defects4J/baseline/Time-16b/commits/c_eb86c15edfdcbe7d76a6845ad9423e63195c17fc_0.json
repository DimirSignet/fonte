{"sha": "eb86c15edfdcbe7d76a6845ad9423e63195c17fc", "log": "Add more methods   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/MutablePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/MutablePeriod.java\n      * Sets the number of years of the period.\n      * \n      * @param years  the number of years\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     public void setYears(int years) {\n         super.setField(DurationFieldType.years(), years);\n      * Adds the specified years to the number of years in the period.\n      * \n      * @param years  the number of years\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addYears(int years) {\n      * Sets the number of months of the period.\n      * \n      * @param months  the number of months\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     public void setMonths(int months) {\n         super.setField(DurationFieldType.months(), months);\n      * Adds the specified months to the number of months in the period.\n      * \n      * @param months  the number of months\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addMonths(int months) {\n      * Sets the number of weeks of the period.\n      * \n      * @param weeks  the number of weeks\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     public void setWeeks(int weeks) {\n         super.setField(DurationFieldType.weeks(), weeks);\n      * Adds the specified weeks to the number of weeks in the period.\n      * \n      * @param weeks  the number of weeks\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addWeeks(int weeks) {\n      * Sets the number of days of the period.\n      * \n      * @param days  the number of days\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     public void setDays(int days) {\n         super.setField(DurationFieldType.days(), days);\n      * Adds the specified days to the number of days in the period.\n      * \n      * @param days  the number of days\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addDays(int days) {\n      * Sets the number of hours of the period.\n      * \n      * @param hours  the number of hours\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     public void setHours(int hours) {\n         super.setField(DurationFieldType.hours(), hours);\n      * Adds the specified hours to the number of hours in the period.\n      * \n      * @param hours  the number of hours\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addHours(int hours) {\n      * Sets the number of minutes of the period.\n      * \n      * @param minutes  the number of minutes\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     public void setMinutes(int minutes) {\n         super.setField(DurationFieldType.minutes(), minutes);\n      * Adds the specified minutes to the number of minutes in the period.\n      * \n      * @param minutes  the number of minutes\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addMinutes(int minutes) {\n      * Sets the number of seconds of the period.\n      * \n      * @param seconds  the number of seconds\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     public void setSeconds(int seconds) {\n         super.setField(DurationFieldType.seconds(), seconds);\n      * Adds the specified seconds to the number of seconds in the period.\n      * \n      * @param seconds  the number of seconds\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addSeconds(int seconds) {\n      * Sets the number of millis of the period.\n      * \n      * @param millis  the number of millis\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     public void setMillis(int millis) {\n         super.setField(DurationFieldType.millis(), millis);\n      * Adds the specified millis to the number of millis in the period.\n      * \n      * @param millis  the number of millis\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     public void addMillis(int millis) {\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n      * @return the period\n      */\n     public static Period years(int years) {\n-        return new Period(new int[] {years}, PeriodType.standard());\n+        return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard());\n     }\n \n     /**\n      * @return the period\n      */\n     public static Period months(int months) {\n-        return new Period(new int[] {months}, PeriodType.standard());\n+        return new Period(new int[] {0, months, 0, 0, 0, 0, 0, 0}, PeriodType.standard());\n     }\n \n     /**\n      * @return the period\n      */\n     public static Period weeks(int weeks) {\n-        return new Period(new int[] {weeks}, PeriodType.standard());\n+        return new Period(new int[] {0, 0, weeks, 0, 0, 0, 0, 0}, PeriodType.standard());\n     }\n \n     /**\n      * @return the period\n      */\n     public static Period days(int days) {\n-        return new Period(new int[] {days}, PeriodType.standard());\n+        return new Period(new int[] {0, 0, 0, days, 0, 0, 0, 0}, PeriodType.standard());\n     }\n \n     /**\n      * @return the period\n      */\n     public static Period hours(int hours) {\n-        return new Period(new int[] {hours}, PeriodType.standard());\n+        return new Period(new int[] {0, 0, 0, 0, hours, 0, 0, 0}, PeriodType.standard());\n     }\n \n     /**\n      * @return the period\n      */\n     public static Period minutes(int minutes) {\n-        return new Period(new int[] {minutes}, PeriodType.standard());\n+        return new Period(new int[] {0, 0, 0, 0, 0, minutes, 0, 0}, PeriodType.standard());\n     }\n \n     /**\n      * @return the period\n      */\n     public static Period seconds(int seconds) {\n-        return new Period(new int[] {seconds}, PeriodType.standard());\n+        return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard());\n     }\n \n     /**\n      * @return the period\n      */\n     public static Period millis(int millis) {\n-        return new Period(new int[] {millis}, PeriodType.standard());\n+        return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());\n     }\n \n     //-----------------------------------------------------------------------\n      * Creates a new Period instance with the same field values but\n      * different PeriodType.\n      * \n-     * @param type  the period type to use, null means AllType\n+     * @param type  the period type to use, null means standard\n      * @return the new period instance\n      * @throws IllegalArgumentException if the new period won't accept all of the current fields\n      */\n         return new Period(this, type);\n     }\n \n+    /**\n+     * Creates a new Period instance with the fields from the specified period\n+     * set to new values.\n+     * \n+     * @param period  the period to copy from, null ignored\n+     * @return the new period instance\n+     * @throws IllegalArgumentException if a field type is unsupported\n+     */\n+    public Period withFields(ReadablePeriod period) {\n+        if (period == null) {\n+            return this;\n+        }\n+        int[] newValues = getValues();  // cloned\n+        newValues = super.mergePeriodInto(newValues, period);\n+        return new Period(newValues, getPeriodType());\n+    }\n+\n     //-----------------------------------------------------------------------\n+    /**\n+     * Creates a new Period instance with the specified field set to a new value.\n+     * \n+     * @param field  the field to set, null ignored\n+     * @param value  the value to set to\n+     * @return the new period instance\n+     * @throws IllegalArgumentException if the field type is unsupported\n+     */\n+    public Period withField(DurationFieldType field, int value) {\n+        if (field == null) {\n+            return this;\n+        }\n+        int[] newValues = getValues();  // cloned\n+        super.setFieldInto(newValues, field, value);\n+        return new Period(newValues, getPeriodType());\n+    }\n+\n     /**\n      * Returns a new period with the specified number of years.\n      * <p>\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Creates a new Period instance with the valueToAdd added to the specified field.\n+     * \n+     * @param field  the field to set, null ignored\n+     * @param value  the value to add\n+     * @return the new period instance\n+     * @throws IllegalArgumentException if the field type is unsupported\n+     */\n+    public Period plusField(DurationFieldType field, int valueToAdd) {\n+        if (valueToAdd == 0 || field == null) {\n+            return this;\n+        }\n+        int[] newValues = getValues();  // cloned\n+        super.addFieldInto(newValues, field, valueToAdd);\n+        return new Period(newValues, getPeriodType());\n+    }\n+\n+    /**\n      * Returns a new period with the specified number of years added.\n      * <p>\n      * This period instance is immutable and unaffected by this method call.\n--- a/JodaTime/src/java/org/joda/time/ReadWritablePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/ReadWritablePeriod.java\n      * Sets the number of years of the period.\n      * \n      * @param years  the number of years\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     void setYears(int years);\n \n      * Adds the specified years to the number of years in the period.\n      * \n      * @param years  the number of years\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     void addYears(int years);\n      * Sets the number of months of the period.\n      * \n      * @param months  the number of months\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     void setMonths(int months);\n \n      * Adds the specified months to the number of months in the period.\n      * \n      * @param months  the number of months\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     void addMonths(int months);\n      * Sets the number of weeks of the period.\n      * \n      * @param weeks  the number of weeks\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     void setWeeks(int weeks);\n \n      * Adds the specified weeks to the number of weeks in the period.\n      * \n      * @param weeks  the number of weeks\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     void addWeeks(int weeks);\n      * Sets the number of days of the period.\n      * \n      * @param days  the number of days\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     void setDays(int days);\n \n      * Adds the specified days to the number of days in the period.\n      * \n      * @param days  the number of days\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     void addDays(int days);\n      * Sets the number of hours of the period.\n      * \n      * @param hours  the number of hours\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     void setHours(int hours);\n \n      * Adds the specified hours to the number of hours in the period.\n      * \n      * @param hours  the number of hours\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     void addHours(int hours);\n      * Sets the number of minutes of the period.\n      * \n      * @param minutes  the number of minutes\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     void setMinutes(int minutes);\n \n      * Adds the specified minutes to the number of minutes in the period.\n      * \n      * @param minutes  the number of minutes\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     void addMinutes(int minutes);\n      * Sets the number of seconds of the period.\n      * \n      * @param seconds  the number of seconds\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     void setSeconds(int seconds);\n \n      * Adds the specified seconds to the number of seconds in the period.\n      * \n      * @param seconds  the number of seconds\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     void addSeconds(int seconds);\n      * Sets the number of millis of the period.\n      * \n      * @param millis  the number of millis\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      */\n     void setMillis(int millis);\n \n      * Adds the specified millis to the number of millis in the period.\n      * \n      * @param millis  the number of millis\n-     * @throws UnsupportedOperationException if field is not supported.\n+     * @throws IllegalArgumentException if field is not supported and the value is non-zero\n      * @throws ArithmeticException if the addition exceeds the capacity of the period\n      */\n     void addMillis(int millis);\n--- a/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePeriod.java\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Sets the value of a field in this period.\n      * \n      * @throws UnsupportedOperationException if field is not supported.\n      */\n     protected void setField(DurationFieldType field, int value) {\n+        setFieldInto(iValues, field, value);\n+    }\n+\n+    /**\n+     * Sets the value of a field in this period.\n+     * \n+     * @param values  the array of values to update\n+     * @param field  the field to set\n+     * @param value  the value to set\n+     * @throws IllegalArgumentException if field is not supported.\n+     */\n+    protected void setFieldInto(int[] values, DurationFieldType field, int value) {\n         int index = indexOf(field);\n         if (index == -1) {\n             if (value != 0) {\n-                throw new UnsupportedOperationException(\n+                throw new IllegalArgumentException(\n                     \"Period does not support field '\" + field.getName() + \"'\");\n             }\n         } else {\n-            setValue(index, value);\n-        }\n+            values[index] = value;\n+        }\n+    }\n+\n+    /**\n+     * Adds the value of a field in this period.\n+     * \n+     * @param field  the field to set\n+     * @param value  the value to set\n+     * @throws IllegalArgumentException if field is not supported.\n+     */\n+    protected void addField(DurationFieldType field, int value) {\n+        addFieldInto(iValues, field, value);\n+    }\n+\n+    /**\n+     * Adds the value of a field in this period.\n+     * \n+     * @param values  the array of values to update\n+     * @param field  the field to set\n+     * @param value  the value to set\n+     * @throws IllegalArgumentException if field is not supported.\n+     */\n+    protected void addFieldInto(int[] values, DurationFieldType field, int value) {\n+        int index = indexOf(field);\n+        if (index == -1) {\n+            if (value != 0) {\n+                throw new IllegalArgumentException(\n+                    \"Period does not support field '\" + field.getName() + \"'\");\n+            }\n+        } else {\n+            values[index] = FieldUtils.safeAdd(values[index], value);\n+        }\n+    }\n+\n+    /**\n+     * Merges the fields from another period.\n+     * \n+     * @param period  the period to add from, not null\n+     * @throws IllegalArgumentException if an unsupported field's value is non-zero\n+     */\n+    protected void mergePeriod(ReadablePeriod period) {\n+        iValues = mergePeriodInto(getValues(), period);\n+    }\n+\n+    /**\n+     * Merges the fields from another period.\n+     * \n+     * @param values  the array of values to update\n+     * @param period  the period to add from, not null\n+     * @return the updated values\n+     * @throws IllegalArgumentException if an unsupported field's value is non-zero\n+     */\n+    protected int[] mergePeriodInto(int[] values, ReadablePeriod period) {\n+         for (int i = 0, isize = period.size(); i < isize; i++) {\n+             DurationFieldType type = period.getFieldType(i);\n+             int value = period.getValue(i);\n+             checkAndUpdate(type, values, value);\n+         }\n+         return values;\n     }\n \n     /**\n      * @throws IllegalArgumentException if an unsupported field's value is non-zero\n      */\n     protected void addPeriod(ReadablePeriod period) {\n-         int[] newValues = getValues(); // already cloned\n+        iValues = addPeriodInto(getValues(), period);\n+    }\n+\n+    /**\n+     * Adds the fields from another period.\n+     * \n+     * @param values  the array of values to update\n+     * @param period  the period to add from, not null\n+     * @return the updated values\n+     * @throws IllegalArgumentException if an unsupported field's value is non-zero\n+     */\n+    protected int[] addPeriodInto(int[] values, ReadablePeriod period) {\n          for (int i = 0, isize = period.size(); i < isize; i++) {\n              DurationFieldType type = period.getFieldType(i);\n              int value = period.getValue(i);\n                          \"Period does not support field '\" + type.getName() + \"'\");\n                  }\n              } else {\n-                 newValues[index] = FieldUtils.safeAdd(getValue(index), value);\n+                 values[index] = FieldUtils.safeAdd(getValue(index), value);\n              }\n          }\n-         setValues(newValues);\n+         return values;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n         try {\n             test.setYears(1);\n             fail();\n-        } catch (UnsupportedOperationException ex) {}\n+        } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testWithFields1() {\n+        Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period test2 = new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis());\n+        Period result = test1.withFields(test2);\n+        \n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1);\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()), test2);\n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 9), result);\n+    }\n+\n+    public void testWithFields2() {\n+        Period test1 = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period test2 = null;\n+        Period result = test1.withFields(test2);\n+        \n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test1);\n+        assertSame(test1, result);\n+    }\n+\n+    public void testWithFields3() {\n+        Period test1 = new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis());\n+        Period test2 = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        try {\n+            test1.withFields(test2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 9, PeriodType.millis()), test1);\n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), test2);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testPeriodStatics() {\n         Period test;\n         test = Period.years(1);", "timestamp": 1094399442, "metainfo": ""}