{"sha": "aa114f070b15d0f91261a4c4c9c1b170ec5e92cf", "log": "DateTimeZone did not properly convert fixed offset zones to java.util.TimeZone  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n     /**\n      * Get the datetime zone as a {@link java.util.TimeZone}.\n      * \n-     * @return the equivalent TimeZone object\n+     * @return the closest matching TimeZone object\n      */\n     public java.util.TimeZone toTimeZone() {\n         return java.util.TimeZone.getTimeZone(iID);\n--- a/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/tz/FixedDateTimeZone.java\n         return instant;\n     }\n \n+    public java.util.TimeZone toTimeZone() {\n+        return new java.util.SimpleTimeZone(iWallOffset, getID());\n+    }\n+\n     public boolean equals(Object obj) {\n         if (this == obj) {\n             return true;\n--- a/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java\n+++ b/JodaTime/src/test/org/joda/time/tz/TestFixedDateTimeZone.java\n         assertEquals(false, zone1.hashCode() == zone4.hashCode());\n     }\n \n+    public void testToTimeZone() throws Exception {\n+        FixedDateTimeZone zone = new FixedDateTimeZone(\"A\", \"B\", 1, 5);\n+        java.util.TimeZone tz = zone.toTimeZone();\n+\n+        assertEquals(1, tz.getRawOffset());\n+        assertEquals(1, tz.getOffset(1167638400000L));\n+        assertEquals(1, tz.getOffset(1185951600000L));\n+    }\n }", "timestamp": 1174841268, "metainfo": ""}