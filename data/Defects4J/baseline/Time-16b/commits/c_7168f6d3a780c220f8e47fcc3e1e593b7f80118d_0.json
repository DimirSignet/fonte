{"sha": "7168f6d3a780c220f8e47fcc3e1e593b7f80118d", "log": "Add DateTimeUtils.isContiguous   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Checks whether the partial is contiguous.\n+     * <p>\n+     * A partial is contiguous if one field starts where another ends.\n+     * <p>\n+     * For example YearMonthDay is contiguous because DayOfMonth has the\n+     * same range (Month) as the unit of the next field (MonthOfYear), and\n+     * MonthOfYear has the same range (Year) as the unit of the next field\n+     * (Year).\n+     * <p>\n+     * Similarly, TimeOfDay is contiguous, as it consists of MillisOfSecond,\n+     * SecondOfMinute, MinuteOfHour and HourOfDay (note how the names of\n+     * each field 'join up').\n+     * <p>\n+     * However, a Year/HourOfDay partial is not contiguous because the range\n+     * field Day is not equal to the next field Year.\n+     * Similarly, a DayOfWeek/DayOfMonth partial is not contiguous because\n+     * the range Month is not equal to the next field Day.\n+     * \n+     * @param partial  the partial to check\n+     * @return true if the partial is contiguous\n+     * @throws IllegalArgumentException if the partial is null\n+     * @since 1.1\n+     */\n+    public static final boolean isContiguous(ReadablePartial partial) {\n+        if (partial == null) {\n+            throw new IllegalArgumentException(\"Partial must not be null\");\n+        }\n+        DurationFieldType lastType = null;\n+        for (int i = 0; i < partial.size(); i++) {\n+            DateTimeField loopField = partial.getField(i);\n+            if (i > 0) {\n+                if (loopField.getRangeDurationField().getType() != lastType) {\n+                    return false;\n+                }\n+            }\n+            lastType = loopField.getDurationField().getType();\n+        }\n+        return true;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Base class defining a millisecond provider.\n      */\n     abstract static class MillisProvider {\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n         assertEquals(0L, DateTimeUtils.getDurationMillis(null));\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testIsContiguous_RP() {\n+        YearMonthDay ymd = new YearMonthDay(2005, 6, 9);\n+        assertEquals(true, DateTimeUtils.isContiguous(ymd));\n+        TimeOfDay tod = new TimeOfDay(12, 20, 30, 0);\n+        assertEquals(true, DateTimeUtils.isContiguous(tod));\n+        Partial year = new Partial(DateTimeFieldType.year(), 2005);\n+        assertEquals(true, DateTimeUtils.isContiguous(year));\n+        Partial hourOfDay = new Partial(DateTimeFieldType.hourOfDay(), 12);\n+        assertEquals(true, DateTimeUtils.isContiguous(hourOfDay));\n+        Partial yearHour = year.with(DateTimeFieldType.hourOfDay(), 12);\n+        assertEquals(false, DateTimeUtils.isContiguous(yearHour));\n+        Partial ymdd = new Partial(ymd).with(DateTimeFieldType.dayOfWeek(), 2);\n+        assertEquals(false, DateTimeUtils.isContiguous(ymdd));\n+        Partial dd = new Partial(DateTimeFieldType.dayOfMonth(), 13).with(DateTimeFieldType.dayOfWeek(), 5);\n+        assertEquals(false, DateTimeUtils.isContiguous(dd));\n+        \n+        try {\n+            DateTimeUtils.isContiguous((ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n }", "timestamp": 1122243561, "metainfo": ""}