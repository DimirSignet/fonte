{"sha": "abeb8b9748182a27bc7859f14a5b91bab0675fdc", "log": "Remove Class and Package comparators - too specific set of use cases   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n package org.apache.commons.lang;\n \n import java.util.ArrayList;\n-import java.util.Comparator;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n  * @author Gary Gregory\n  * @author Norm Deane\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.33 2004/10/21 01:18:33 ggregory Exp $\n+ * @version $Id: ClassUtils.java,v 1.34 2004/12/19 22:35:38 scolebourne Exp $\n  */\n public class ClassUtils {\n \n         }\n         return (cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) >= 0);\n     }\n-    \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Compares two <code>Class</code>s by name.\n-     */\n-    private static class ClassNameComparator implements Comparator {\n-        /**\n-         * Compares two <code>Class</code>s by name.\n-         * @param o1 The receiver of the comparison call to {@link String#compareTo(String)}.\n-         * @param o2 The argument of the comparison call to {@link String#compareTo(String)}.\n-         * @return The return value from {@link String#compareTo(String)}\n-         * \n-         * @throws ClassCastException\n-         *                  If <code>o1</code> or <code>o2</code> are not <code>Class</code>\n-         *                  instances.\n-         */\n-        public int compare(Object o1, Object o2) {\n-            Class class1 = (Class) o1;\n-            Class class2 = (Class) o2;\n-            if (class1 == null) {\n-                return class2 == null ? 0 : -1;\n-            }\n-            if (class2 == null) {\n-                return 1;\n-            }\n-            return class1.getName().compareTo(class2.getName());\n-        }\n-    }\n-    \n-    /**\n-     * Compares two <code>Class</code>s by name.\n-     */\n-    public static final Comparator CLASS_NAME_COMPARATOR = new ClassNameComparator();\n \n-    /**\n-     * Compares two <code>Package</code>s by name.\n-     */\n-    private static class PackageNameComparator implements Comparator {\n-\n-        /**\n-         * Compares two <code>Package</code>s by name.\n-         * \n-         * @param o1 The receiver of the comparison call to {@link String#compareTo(String)}.\n-         * @param o2 The argument of the comparison call to {@link String#compareTo(String)}.\n-         * @return The return value from {@link String#compareTo(String)}\n-         * @throws ClassCastException\n-         *                  If <code>o1</code> or <code>o2</code> are not <code>Package</code>\n-         *                  instances.\n-         */\n-        public int compare(Object o1, Object o2) {\n-            Package package1 = (Package) o1;\n-            Package package2 = (Package) o2;\n-            if (package1 == null) {\n-                return package2 == null ? 0 : -1;\n-            }\n-            if (package2 == null) {\n-                return 1;\n-            }\n-            return package1.getName().compareTo(package2.getName());\n-        }        \n-    }\n-    \n-    /**\n-     * Compares two <code>Package</code>s by name.\n-     */\n-    public static final Comparator PACKAGE_NAME_COMPARATOR = new PackageNameComparator();\n-    \n }\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n import java.lang.reflect.Modifier;\n import java.net.URLClassLoader;\n import java.util.ArrayList;\n-import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n \n  *\n  * @author Stephen Colebourne\n  * @author Gary D. Gregory\n- * @version $Id: ClassUtilsTest.java,v 1.13 2004/06/30 18:33:58 ggregory Exp $\n+ * @version $Id: ClassUtilsTest.java,v 1.14 2004/12/19 22:35:38 scolebourne Exp $\n  */\n public class ClassUtilsTest extends TestCase {\n \n         // This used to return the exact same array, but no longer does.\n         assertNotSame(\"unmodified\", noPrimitives, ClassUtils.primitivesToWrappers(noPrimitives));\n     }\n-    \n-    public void testClassComparator() {\n-    \tComparator comparator = ClassUtils.CLASS_NAME_COMPARATOR;\n-    \tClass smallClass = java.lang.Boolean.class;\n-    \tClass bigClass =  java.util.Set.class;\n-    \t\n-\t\tassertTrue(comparator.compare(smallClass, smallClass) == 0);\n-\t\tassertTrue(comparator.compare(bigClass, smallClass) > 0);\n-\t\tassertTrue(comparator.compare(smallClass, bigClass) < 0);\n-\t\t\n-\t\tassertTrue(comparator.compare(smallClass, null) > 0);\n-\t\tassertTrue(comparator.compare(null, smallClass) < 0);\n-\n-        assertComparatorContract(comparator, smallClass, smallClass);\n-        assertComparatorContract(comparator, bigClass, bigClass);\n-        assertComparatorContract(comparator, smallClass, bigClass);\n-    }\n-\n-    public void testPackageComparator() {\n-        Comparator comparator = ClassUtils.PACKAGE_NAME_COMPARATOR;\n-        Package smallPackage = java.lang.Boolean.class.getPackage();\n-        Package bigPackage =  java.util.Set.class.getPackage();\n-        \n-        assertTrue(comparator.compare(smallPackage, smallPackage) == 0);\n-        assertTrue(comparator.compare(bigPackage, smallPackage) > 0);\n-        assertTrue(comparator.compare(smallPackage, bigPackage) < 0);\n-        \n-        assertTrue(comparator.compare(smallPackage, null) > 0);\n-        assertTrue(comparator.compare(null, smallPackage) < 0);\n-\n-        assertComparatorContract(comparator, smallPackage, smallPackage);\n-        assertComparatorContract(comparator, bigPackage, bigPackage);\n-        assertComparatorContract(comparator, smallPackage, bigPackage);\n-    }\n-\n-    public void testPackageNameComparatorWithDifferentClassLoaders() throws SecurityException, IllegalArgumentException, ClassNotFoundException {\n-        Comparator comparator = ClassUtils.PACKAGE_NAME_COMPARATOR;\n-        Package p1 = java.lang.Boolean.class.getPackage();\n-        Package p2 = java.util.Set.class.getPackage();\n-        ClassLoader classLoader = newSystemClassLoader();\n-        Object p1Other = this.getPackage(classLoader, \"java.lang.Boolean\");\n-        Object p2Other = this.getPackage(classLoader, \"java.util.Set\");\n-        // all here\n-        assertComparatorContract(comparator, p1, p1);\n-        assertComparatorContract(comparator, p2, p2);\n-        assertComparatorContract(comparator, p1, p2);\n-        // all other\n-        assertComparatorContract(comparator, p1Other, p1Other);\n-        assertComparatorContract(comparator, p2Other, p2Other);\n-        assertComparatorContract(comparator, p1Other, p2Other);\n-        // p1 and p1Other\n-        assertComparatorContract(comparator, p1, p1Other);\n-        assertComparatorContract(comparator, p2, p2);\n-        assertComparatorContract(comparator, p1Other, p2);\n-        // p2 and p2Other\n-        assertComparatorContract(comparator, p1, p1);\n-        assertComparatorContract(comparator, p2, p2Other);\n-        assertComparatorContract(comparator, p1, p2Other);\n-    }\n-    \n-    Object getPackage(ClassLoader classLoader, String className) throws ClassNotFoundException, SecurityException,\n-            IllegalArgumentException {\n-        // Sanity check:\n-        assertNotNull(Package.getPackage(\"java.lang\"));\n-        Package.getPackage(\"java.lang\").equals(Package.getPackage(\"java.lang\"));\n-        // set up:\n-        assertNotNull(classLoader);\n-        Class otherClass = classLoader.loadClass(className);\n-        assertNotNull(otherClass);\n-        Object otherPackage = otherClass.getPackage();\n-        assertNotNull(otherPackage);\n-        return otherPackage;\n-    }\n-\n-    /**\n-     * The ordering imposed by a Comparator c on a set of elements S is said to\n-     * be consistent with equals if and only if (compare((Object)e1,\n-     * (Object)e2)==0) has the same boolean value as e1.equals((Object)e2) for\n-     * every e1 and e2 in S.\n-     * \n-     * http://java.sun.com/j2se/1.3/docs/api/java/util/Comparator.html\n-     */\n-    public void assertComparatorContract(Comparator comparator, Object e1, Object e2) {\n-        assertEquals(comparator.compare(e1, e2) == 0, e1.equals(e2));\n-    }\n \n     public static ClassLoader newSystemClassLoader() throws  SecurityException, IllegalArgumentException {\n-        ClassLoader scl = ClassLoader.getSystemClassLoader();\n-        if (!(scl instanceof URLClassLoader)) {\n-            fail(\"Need a better test set up.\");\n-        }\n-        URLClassLoader urlScl = (URLClassLoader)scl;\n-        return URLClassLoader.newInstance(urlScl.getURLs(), null);\n-    }\n-    \n-//    public static List getAssignableFrom(List classes, Class superclass) {\n-//    public static boolean isAssignable(Class[] classArray, Class[] toClassArray) {\n-//    public static boolean isAssignable(Class cls, Class toClass) {\n+    \tClassLoader scl = ClassLoader.getSystemClassLoader();\n+    \tif (!(scl instanceof URLClassLoader)) {\n+    \t\tfail(\"Need a better test set up.\");\n+    \t}\n+    \tURLClassLoader urlScl = (URLClassLoader)scl;\n+    \treturn URLClassLoader.newInstance(urlScl.getURLs(), null);\n+    }\n+\n }", "timestamp": 1103495738, "metainfo": ""}