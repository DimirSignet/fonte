{"sha": "6a8eb444afab305867c0862bc4ff762a113667ce", "log": "Javadoc fixes, from Fredrik Westermarck   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n  * @author Moritz Petersen\n- * @version $Id: ArrayUtils.java,v 1.1 2002/10/13 22:42:06 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.2 2002/11/14 22:29:25 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Outputs an array as a String, treating null as an empty array.\n+     * Outputs an array as a String, treating <code>null</code> as an empty array.\n      * <p>\n      * Multi-dimensional arrays are handled correctly, including \n      * multi-dimensional primitive arrays.\n      * The format is that of Java source code, for example {a,b}.\n      * \n-     * @param array  the array to get a toString for, may not be null\n-     * @return a String representation of the array, '{}' if null passed in\n+     * @param array  the array to get a toString for, may not be <code>null</code>\n+     * @return a String representation of the array, '{}' if <code>null</code> passed in\n      */\n     public static String toString(Object array) {\n         return toString(array, \"{}\");\n     }\n     \n     /**\n-     * Outputs an array as a String handling nulls.\n+     * Outputs an array as a String handling <code>null</code>s.\n      * <p>\n      * Multi-dimensional arrays are handled correctly, including \n      * multi-dimensional primitive arrays.\n      * The format is that of Java source code, for example {a,b}.\n      * \n-     * @param array  the array to get a toString for, may be null\n-     * @param stringIfNull  the String to return if the array is null\n+     * @param array  the array to get a toString for, may be <code>null</code>\n+     * @param stringIfNull  the String to return if the array is <code>null</code>\n      * @return a String representation of the array\n      */    \n     public static String toString(Object array, String stringIfNull) {\n      * @param array  an array whose elements are either a {@link Map.Entry} or \n      *  an Array containing at least two elements\n      * @return a Map that was created from the array\n-     * @throws IllegalArgumentException  if the array is null\n+     * @throws IllegalArgumentException  if the array is <code>null</code>\n      * @throws IllegalArgumentException  if one element of this Array is\n      *  itself an Array containing less then two elements\n      * @throws IllegalArgumentException  if the array contains elements other\n //     * Multi-dimensional arrays are handled by the Object[] method.\n //     * The format is that of Java source code, for example {1,2}.\n //     * \n-//     * @param array  the array to get a toString for, must not be null\n-//     * @return a String representation of the array\n-//     * @throws IllegalArgumentException if the array is null\n+//     * @param array  the array to get a toString for, must not be <code>null</code>\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is <code>null</code>\n //     */\n //    public static String toString(long[] array) {\n //        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n //     * Multi-dimensional arrays are handled by the Object[] method.\n //     * The format is that of Java source code, for example {1,2}.\n //     * \n-//     * @param array  the array to get a toString for, must not be null\n-//     * @return a String representation of the array\n-//     * @throws IllegalArgumentException if the array is null\n+//     * @param array  the array to get a toString for, must not be <code>null</code>\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is <code>null</code>\n //     */\n //    public static String toString(int[] array) {\n //        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n //     * Multi-dimensional arrays are handled by the Object[] method.\n //     * The format is that of Java source code, for example {1,2}.\n //     * \n-//     * @param array  the array to get a toString for, must not be null\n-//     * @return a String representation of the array\n-//     * @throws IllegalArgumentException if the array is null\n+//     * @param array  the array to get a toString for, must not be <code>null</code>\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is <code>null</code>\n //     */\n //    public static String toString(short[] array) {\n //        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n //     * Multi-dimensional arrays are handled by the Object[] method.\n //     * The format is that of Java source code, for example {1,2}.\n //     * \n-//     * @param array  the array to get a toString for, must not be null\n-//     * @return a String representation of the array\n-//     * @throws IllegalArgumentException if the array is null\n+//     * @param array  the array to get a toString for, must not be <code>null</code>\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is <code>null</code>\n //     */\n //    public static String toString(byte[] array) {\n //        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n //     * Multi-dimensional arrays are handled by the Object[] method.\n //     * The format is that of Java source code, for example {1.0,2.0}.\n //     * \n-//     * @param array  the array to get a toString for, must not be null\n-//     * @return a String representation of the array\n-//     * @throws IllegalArgumentException if the array is null\n+//     * @param array  the array to get a toString for, must not be <code>null</code>\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is <code>null</code>\n //     */\n //    public static String toString(double[] array) {\n //        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n //     * Multi-dimensional arrays are handled by the Object[] method.\n //     * The format is that of Java source code, for example {1.0,2.0}.\n //     * \n-//     * @param array  the array to get a toString for, must not be null\n-//     * @return a String representation of the array\n-//     * @throws IllegalArgumentException if the array is null\n+//     * @param array  the array to get a toString for, must not be <code>null</code>\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is <code>null</code>\n //     */\n //    public static String toString(float[] array) {\n //        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n //     * Multi-dimensional arrays are handled by the Object[] method.\n //     * The format is that of Java source code, for example {true,false}.\n //     * \n-//     * @param array  the array to get a toString for, must not be null\n-//     * @return a String representation of the array\n-//     * @throws IllegalArgumentException if the array is null\n+//     * @param array  the array to get a toString for, must not be <code>null</code>\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is <code>null</code>\n //     */\n //    public static String toString(boolean[] array) {\n //        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Shallow clones an array returning a typecast result and handling null.\n+     * Shallow clones an array returning a typecast result and handling <code>null</code>.\n      * <p>\n      * The objecs in the array are not cloned.\n      * \n-     * @param array  the array to shallow clone, may not be null\n-     * @return the cloned array, or null if null passed in\n+     * @param array  the array to shallow clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n      */\n     public static Object[] clone(Object[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling null.\n-     * \n-     * @param array  the array to clone, may not be null\n-     * @return the cloned array, or null if null passed in\n+     * Clones an array returning a typecast result and handling <code>null</code>.\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n      */\n     public static long[] clone(long[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling null.\n-     * \n-     * @param array  the array to clone, may not be null\n-     * @return the cloned array, or null if null passed in\n+     * Clones an array returning a typecast result and handling <code>null</code>.\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n      */\n     public static int[] clone(int[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling null.\n-     * \n-     * @param array  the array to clone, may not be null\n-     * @return the cloned array, or null if null passed in\n+     * Clones an array returning a typecast result and handling <code>null</code>.\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n      */\n     public static short[] clone(short[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling null.\n-     * \n-     * @param array  the array to clone, may not be null\n-     * @return the cloned array, or null if null passed in\n+     * Clones an array returning a typecast result and handling <code>null</code>.\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n      */\n     public static byte[] clone(byte[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling null.\n-     * \n-     * @param array  the array to clone, may not be null\n-     * @return the cloned array, or null if null passed in\n+     * Clones an array returning a typecast result and handling <code>null</code>.\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n      */\n     public static double[] clone(double[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling null.\n-     * \n-     * @param array  the array to clone, may not be null\n-     * @return the cloned array, or null if null passed in\n+     * Clones an array returning a typecast result and handling <code>null</code>.\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n      */\n     public static float[] clone(float[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling null.\n-     * \n-     * @param array  the array to clone, may not be null\n-     * @return the cloned array, or null if null passed in\n+     * Clones an array returning a typecast result and handling <code>null</code>.\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n      */\n     public static boolean[] clone(boolean[] array) {\n         if (array == null) {\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Checks whether two arrays are the same length, treating null arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n-     * \n-     * @param array1 the first array, may be null\n-     * @param array2 the second array, may be null\n-     * @param true if length of arrays matches, treating null as an empty array\n+     * Checks whether two arrays are the same length, treating <code>null</code> \n+     * arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @param true if length of arrays matches, treating <code>null</code> as an empty array\n      */    \n     public static boolean isSameLength(Object[] array1, Object[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating null arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n-     * \n-     * @param array1 the first array, may be null\n-     * @param array2 the second array, may be null\n-     * @param true if length of arrays matches, treating null as an empty array\n+     * Checks whether two arrays are the same length, treating <code>null</code> \n+     * arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @param true if length of arrays matches, treating <code>null</code> as an empty array\n      */    \n     public static boolean isSameLength(long[] array1, long[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating null arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n-     * \n-     * @param array1 the first array, may be null\n-     * @param array2 the second array, may be null\n-     * @param true if length of arrays matches, treating null as an empty array\n+     * Checks whether two arrays are the same length, treating <code>null</code> \n+     * arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @param true if length of arrays matches, treating <code>null</code> as an empty array\n      */    \n     public static boolean isSameLength(int[] array1, int[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating null arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n-     * \n-     * @param array1 the first array, may be null\n-     * @param array2 the second array, may be null\n-     * @param true if length of arrays matches, treating null as an empty array\n+     * Checks whether two arrays are the same length, treating <code>null</code> \n+     * arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @param true if length of arrays matches, treating <code>null</code> as an empty array\n      */    \n     public static boolean isSameLength(short[] array1, short[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating null arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n-     * \n-     * @param array1 the first array, may be null\n-     * @param array2 the second array, may be null\n-     * @param true if length of arrays matches, treating null as an empty array\n+     * Checks whether two arrays are the same length, treating <code>null</code> \n+     * arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @param true if length of arrays matches, treating <code>null</code> as an empty array\n      */    \n     public static boolean isSameLength(byte[] array1, byte[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating null arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n-     * \n-     * @param array1 the first array, may be null\n-     * @param array2 the second array, may be null\n-     * @param true if length of arrays matches, treating null as an empty array\n+     * Checks whether two arrays are the same length, treating <code>null</code> \n+     * arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @param true if length of arrays matches, treating <code>null</code> as an empty array\n      */    \n     public static boolean isSameLength(double[] array1, double[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating null arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n-     * \n-     * @param array1 the first array, may be null\n-     * @param array2 the second array, may be null\n-     * @param true if length of arrays matches, treating null as an empty array\n+     * Checks whether two arrays are the same length, treating <code>null</code> \n+     * arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @param true if length of arrays matches, treating <code>null</code> as an empty array\n      */    \n     public static boolean isSameLength(float[] array1, float[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating null arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n-     * \n-     * @param array1 the first array, may be null\n-     * @param array2 the second array, may be null\n-     * @param true if length of arrays matches, treating null as an empty array\n+     * Checks whether two arrays are the same length, treating <code>null</code> \n+     * arrays as length 0.\n+     * Any multi-dimensional aspects of the arrays are ignored.\n+     * \n+     * @param array1 the first array, may be <code>null</code>\n+     * @param array2 the second array, may be <code>null</code>\n+     * @param true if length of arrays matches, treating <code>null</code> as an empty array\n      */    \n     public static boolean isSameLength(boolean[] array1, boolean[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n      * Checks whether two arrays are the same type taking into account\n      * multi-dimensional arrays.\n      * \n-     * @param array1 the first array, must not be null\n-     * @param array2 the second array, must not be null\n+     * @param array1 the first array, must not be <code>null</code>\n+     * @param array2 the second array, must not be <code>null</code>\n      * @param true if type of arrays matches\n-     * @throws IllegalArgumentException if either array is null\n+     * @throws IllegalArgumentException if either array is <code>null</code>\n      */    \n     public static boolean isSameType(Object array1, Object array2) {\n         if (array1 == null || array2 == null) {\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.ListIterator;\n /**\n  * <code>ClassUtils</code> contains utility methods for working for\n  * classes without using reflection.\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n- * @version $Id: ClassUtils.java,v 1.3 2002/10/24 23:12:54 scolebourne Exp $\n+ * @version $Id: ClassUtils.java,v 1.4 2002/11/14 22:29:25 scolebourne Exp $\n  */\n public class ClassUtils {\n \n     /**\n      * Gets the class name minus the package name from a Class.\n      * \n-     * @param cls  the class to get the short name for, must not be null\n+     * @param cls  the class to get the short name for, must not be <code>null</code>\n      * @return the class name without the package name\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static String getShortClassName(Class cls) {\n         if (cls == null) {\n     /**\n      * Gets the class name minus the package name for an Object.\n      * \n-     * @param object  the class to get the short name for, must not be null\n+     * @param object  the class to get the short name for, must not be <code>null</code>\n      * @return the class name of the object without the package name\n-     * @throws IllegalArgumentException if the object is null\n+     * @throws IllegalArgumentException if the object is <code>null</code>\n      */\n     public static String getShortClassName(Object object) {\n         if (object == null) {\n     /**\n      * Gets the class name minus the package name from a String.\n      * <p>\n-     * The string passed in is assumed to be a class name - it is not\n-     * checked.\n+     * The string passed in is assumed to be a class name - it is not checked.\n      * \n      * @param className  the className to get the short name for, must not be empty\n      * @return the class name of the class without the package name\n     /**\n      * Gets the package name of a Class.\n      * \n-     * @param cls  the class to get the package name for, must not be null\n+     * @param cls  the class to get the package name for, must not be <code>null</code>\n      * @return the package name\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static String getPackageName(Class cls) {\n         if (cls == null) {\n     /**\n      * Gets the package name of an Object.\n      * \n-     * @param object  the class to get the package name for, must not be null\n+     * @param object  the class to get the package name for, must not be <code>null</code>\n      * @return the package name\n-     * @throws IllegalArgumentException if the object is null\n+     * @throws IllegalArgumentException if the object is <code>null</code>\n      */\n     public static String getPackageName(Object object) {\n         if (object == null) {\n     /**\n      * Gets the package name from a String.\n      * <p>\n-     * The string passed in is assumed to be a class name - it is not\n-     * checked.\n+     * The string passed in is assumed to be a class name - it is not checked.\n      * \n      * @param className  the className to get the package name for, must not be empty\n      * @return the package name\n     /**\n      * Gets a list of superclasses for the given class.\n      * \n-     * @param cls  the class to look up, must not be null\n+     * @param cls  the class to look up, must not be <code>null</code>\n      * @return the list of superclasses in order going up from this one\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static List getAllSuperclasses(Class cls) {\n         if (cls == null) {\n      * declared in the source file and following its hieracrchy up. Later\n      * duplicates are ignored, so the order is maintained.\n      * \n-     * @param cls  the class to look up, must not be null\n+     * @param cls  the class to look up, must not be <code>null</code>\n      * @return the list of interfaces in order\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static List getAllInterfaces(Class cls) {\n         if (cls == null) {\n         return list;\n     }\n     \n-    /**\n-     * Gets a list of subclasses of the specified class.\n-     * <p>\n-     * This method searches the classpath to find all the subclasses\n-     * of a particular class available. No classes are loaded, the \n-     * returned list contains class names, not classes.\n-     *\n-     * @param cls  the class to find subclasses for\n-     * @return the list of subclass String class names\n-     * @throws IllegalArgumentException if the class is null\n-     */\n-    public static List getAllSubclassNames(Class cls) {\n-        if (cls == null) {\n-            throw new IllegalArgumentException(\"The class must not be null\");\n-        }\n-        // TODO Use JavaWorld tip for searching the classpath\n-        return null;\n-    }\n-\n-    /**\n-     * Gets a list of subclasses of the specified class.\n-     * <p>\n-     * This method searches the classpath to find all the subclasses\n-     * of a particular class available.\n-     *\n-     * @param cls  the class to find subclasses for\n-     * @return the list of subclasses\n-     * @throws IllegalArgumentException if the class is null\n-     */\n-    public static List getAllSubclasses(Class cls) {\n-        List names = getAllSubclassNames(cls);\n-        return convertClassNamesToClasses(names);\n-    }\n-\n-    /**\n-     * Gets a list of implementations of the specified interface.\n-     * <p>\n-     * This method searches the classpath to find all the implementations\n-     * of a particular interface available. No classes are loaded, the \n-     * returned list contains class names, not classes.\n-     *\n-     * @param cls  the class to find sub classes for\n-     * @return the list of implementation String class names\n-     * @throws IllegalArgumentException if the class is null\n-     */\n-    public static List getAllImplementationClassNames(Class cls) {\n-        if (cls == null) {\n-            throw new IllegalArgumentException(\"The class must not be null\");\n-        }\n-        // TODO Use JavaWorld tip for searching the classpath\n-        return null;\n-    }\n+//    /**\n+//     * Gets a list of subclasses of the specified class.\n+//     * <p>\n+//     * This method searches the classpath to find all the subclasses\n+//     * of a particular class available. No classes are loaded, the \n+//     * returned list contains class names, not classes.\n+//     *\n+//     * @param cls  the class to find subclasses for\n+//     * @return the list of subclass String class names\n+//     * @throws IllegalArgumentException if the class is <code>null</code>\n+//     */\n+//    public static List getAllSubclassNames(Class cls) {\n+//        if (cls == null) {\n+//            throw new IllegalArgumentException(\"The class must not be null\");\n+//        }\n+//        // TODO Use JavaWorld tip for searching the classpath\n+//        return null;\n+//    }\n+\n+//    /**\n+//     * Gets a list of subclasses of the specified class.\n+//     * <p>\n+//     * This method searches the classpath to find all the subclasses\n+//     * of a particular class available.\n+//     *\n+//     * @param cls  the class to find subclasses for\n+//     * @return the list of subclasses\n+//     * @throws IllegalArgumentException if the class is <code>null</code>\n+//     */\n+//    public static List getAllSubclasses(Class cls) {\n+//        List names = getAllSubclassNames(cls);\n+//        return convertClassNamesToClasses(names);\n+//    }\n+\n+//    /**\n+//     * Gets a list of implementations of the specified interface.\n+//     * <p>\n+//     * This method searches the classpath to find all the implementations\n+//     * of a particular interface available. No classes are loaded, the \n+//     * returned list contains class names, not classes.\n+//     *\n+//     * @param cls  the class to find sub classes for\n+//     * @return the list of implementation String class names\n+//     * @throws IllegalArgumentException if the class is <code>null</code>\n+//     */\n+//    public static List getAllImplementationClassNames(Class cls) {\n+//        if (cls == null) {\n+//            throw new IllegalArgumentException(\"The class must not be null\");\n+//        }\n+//        // TODO Use JavaWorld tip for searching the classpath\n+//        return null;\n+//    }\n \n     /**\n      * Given a list of class names, this method converts them into classes.\n-     * A new list is returned. If the class name cannot be found, null is\n-     * stored in the list. If the class name in the list is null, null is \n-     * stored in the output list.\n-     * \n-     * @param classes  the classNames to change, the class is stored back\n-     *  into the list. null will be stored in the list if no class is found.\n+     * A new list is returned. If the class name cannot be found, <code>null</code>\n+     * is stored in the list. If the class name in the list is <code>null</code>,\n+     * <code>null</code> is stored in the output list.\n+     * \n+     * @param classNames  the classNames to change, the class is stored back\n+     *  into the list. <code>null</code> will be stored in the list if no class is found.\n      * @return the list of Class objects corresponding to the class names\n-     * @throws IllegalArgumentException if the classNames is null\n+     * @throws IllegalArgumentException if the classNames is <code>null</code>\n      */\n     public static List convertClassNamesToClasses(List classNames) {\n         if (classNames == null) {\n      * @param classes  the classes to check\n      * @param superclass  the superclass to check for\n      * @return the list of subclasses or implementations\n-     * @throws IllegalArgumentException if the classes or superClass is null\n+     * @throws IllegalArgumentException if the classes or superClass is <code>null</code>\n      */\n     public static List getAssignableFrom(List classes, Class superclass) {\n         if (classes == null) {\n      * reflection invocation.\n      * <p>\n      * Unlike the Class.isAssignableFrom method, this method takes into \n-     * account widenings of primitive classes and nulls.\n+     * account widenings of primitive classes and <code>null</code>s.\n      * <p>\n      * Primitive widenings allow an int to be assigned to a long, float or \n      * double. This method returns the correct result for these cases.\n      * <p>\n-     * Null may be assigned to any reference type. This method will return\n-     * true if null is passed in and the toClass is non-primitive.\n+     * <code>Null</code> may be assigned to any reference type. This method will return\n+     * true if <code>null</code> is passed in and the toClass is non-primitive.\n      * <p>\n      * Specifically, this method tests whether the type represented by the\n      * specified <code>Class</code> parameter can be converted to the type\n      * <em>The Java Language Specification</em>, sections 5.1.1, 5.1.2 and \n      * 5.1.4 for details.\n      *\n-     * @param classArray  the array of Classes to check, may be null\n-     * @param toClassArray  the array of Classes to try to assign into, may be null\n+     * @param classArray  the array of Classes to check, may be <code>null</code>\n+     * @param toClassArray  the array of Classes to try to assign into, may be <code>null</code>\n      * @return true if assignment possible\n      */\n     public static boolean isAssignable(Class[] classArray, Class[] toClassArray) {\n      * Checks if one Class can be assigned to a variable of another Class.\n      * <p>\n      * Unlike the Class.isAssignableFrom method, this method takes into \n-     * account widenings of primitive classes and nulls.\n+     * account widenings of primitive classes and <code>null</code>s.\n      * <p>\n      * Primitive widenings allow an int to be assigned to a long, float or \n      * double. This method returns the correct result for these cases.\n      * <p>\n      * Null may be assigned to any reference type. This method will return\n-     * true if null is passed in and the toClass is non-primitive.\n+     * true if <code>null</code> is passed in and the toClass is non-primitive.\n      * <p>\n      * Specifically, this method tests whether the type represented by the\n      * specified <code>Class</code> parameter can be converted to the type\n      * <em>The Java Language Specification</em>, sections 5.1.1, 5.1.2 and \n      * 5.1.4 for details.\n      *\n-     * @param cls  the Class to check, may be null\n-     * @param toClass  the Class to try to assign into, must not be null\n+     * @param cls  the Class to check, may be <code>null</code>\n+     * @param toClass  the Class to try to assign into, must not be <code>null</code>\n      * @return true if assignment possible\n-     * @throws IllegalArgumentException if the toClass is null\n+     * @throws IllegalArgumentException if the toClass is <code>null</code>\n      */\n     public static boolean isAssignable(Class cls, Class toClass) {\n         if (toClass == null) {\n      * \n      * @param cls  the class to check\n      * @return true if the class is an inner or static nested class\n-     * @throws IllegalArgumentException if the class is null\n+     * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static boolean isInnerClass(Class cls) {\n         if (cls == null) {\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n- * @version $Id: StringUtils.java,v 1.21 2002/10/28 04:33:29 bayard Exp $\n+ * @version $Id: StringUtils.java,v 1.22 2002/11/14 22:29:25 scolebourne Exp $\n  */\n public class StringUtils {\n \n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Return either the passed in Object, or if it is <code>null</code>,\n-     * then an empty String.\n+     * Returns either the passed in Object as a String, or,\n+     * if the Object is <code>null</code>, an empty String.\n      * \n      * @param str the Object to check\n      * @return the passed in Object's toString, or blank if it was null\n     }\n \n     /**\n-     * Return either the passed in Object, or if it is <code>null</code>,\n-     * then a passed in default String.\n+     * Returns either the passed in Object as a String, or, \n+     * if the Object is <code>null</code>, a passed in default String.\n      * \n      * @param obj the Object to check\n      * @param defaultString  the default String to return if str is null\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Reverse a String, <code>null</code> String returns\n-     * <code>null</code>.\n+     * Reverse a String, <code>null</code> String returns <code>null</code>.\n      * \n      * @param str the String to reverse\n      * @return the reversed String", "timestamp": 1037312965, "metainfo": ""}