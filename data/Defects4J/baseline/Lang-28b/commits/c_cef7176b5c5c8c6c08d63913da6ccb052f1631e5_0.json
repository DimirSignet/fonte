{"sha": "cef7176b5c5c8c6c08d63913da6ccb052f1631e5", "log": "Killing the lang sandbox component  ", "commit": "\n--- /dev/null\n+++ b/src/pending/CalendarUtilsTest.java\n+// package org.apache.commons.lang;\n+\n+/*\n+ * Copyright 2002,2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import java.text.DateFormat;\n+import java.util.*;\n+\n+import junit.framework.AssertionFailedError;\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang.CalendarUtils}.\n+ *\n+ * @author <a href=\"mailto:sergek@lokitech.com\">Serge Knystautas</a>\n+ */\n+public class CalendarUtilsTest extends TestCase {\n+    DateFormat parser = null;\n+    Date date1 = null;\n+    Date date2 = null;\n+\n+    public CalendarUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+    \tTestSuite suite = new TestSuite(CalendarUtilsTest.class);\n+    \tsuite.setName(\"CalendarUtilsTest Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+\n+        parser = new java.text.SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\");\n+\n+        date1 = parser.parse(\"February 12, 2002 12:34:56.789\");\n+        date2 = parser.parse(\"November 18, 2001 1:23:11.321\");\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+\n+    /**\n+     * Tests various values with the round method\n+     */\n+    public void testRound() throws Exception {\n+        assertEquals(\"round year-1 failed\",\n+                new Date(\"2002 January 1\"),\n+                CalendarUtils.round(date1, Calendar.YEAR));\n+        assertEquals(\"round year-2 failed\",\n+                new Date(\"2002 January 1\"),\n+                CalendarUtils.round(date2, Calendar.YEAR));\n+        assertEquals(\"round month-1 failed\",\n+                new Date(\"2002 February 1\"),\n+                CalendarUtils.round(date1, Calendar.MONTH));\n+        assertEquals(\"round month-2 failed\",\n+                new Date(\"2001 December 1\"),\n+                CalendarUtils.round(date2, Calendar.MONTH));\n+        assertEquals(\"round semimonth-1 failed\",\n+                new Date(\"2002 February 16\"),\n+                CalendarUtils.round(date1, CalendarUtils.SEMI_MONTH));\n+        assertEquals(\"round semimonth-2 failed\",\n+                new Date(\"2001 November 16\"),\n+                CalendarUtils.round(date2, CalendarUtils.SEMI_MONTH));\n+        assertEquals(\"round date-1 failed\",\n+                new Date(\"2002 February 13\"),\n+                CalendarUtils.round(date1, Calendar.DATE));\n+        assertEquals(\"round date-2 failed\",\n+                new Date(\"2001 November 18\"),\n+                CalendarUtils.round(date2, Calendar.DATE));\n+        assertEquals(\"round hour-1 failed\",\n+                parser.parse(\"February 12, 2002 13:00:00.000\"),\n+                CalendarUtils.round(date1, Calendar.HOUR));\n+        assertEquals(\"round hour-2 failed\",\n+                parser.parse(\"November 18, 2001 1:00:00.000\"),\n+                CalendarUtils.round(date2, Calendar.HOUR));\n+        assertEquals(\"round minute-1 failed\",\n+                parser.parse(\"February 12, 2002 12:35:00.000\"),\n+                CalendarUtils.round(date1, Calendar.MINUTE));\n+        assertEquals(\"round minute-2 failed\",\n+                parser.parse(\"November 18, 2001 1:23:00.000\"),\n+                CalendarUtils.round(date2, Calendar.MINUTE));\n+        assertEquals(\"round second-1 failed\",\n+                parser.parse(\"February 12, 2002 12:34:57.000\"),\n+                CalendarUtils.round(date1, Calendar.SECOND));\n+        assertEquals(\"round second-2 failed\",\n+                parser.parse(\"November 18, 2001 1:23:11.000\"),\n+                CalendarUtils.round(date2, Calendar.SECOND));\n+    }\n+\n+    /**\n+     * Tests various values with the trunc method\n+     */\n+    public void testTrunc() throws Exception {\n+        assertEquals(\"trunc year-1 failed\",\n+                new Date(\"2002 January 1\"),\n+                CalendarUtils.trunc(date1, Calendar.YEAR));\n+        assertEquals(\"trunc year-2 failed\",\n+                new Date(\"2001 January 1\"),\n+                CalendarUtils.trunc(date2, Calendar.YEAR));\n+        assertEquals(\"trunc month-1 failed\",\n+                new Date(\"2002 February 1\"),\n+                CalendarUtils.trunc(date1, Calendar.MONTH));\n+        assertEquals(\"trunc month-2 failed\",\n+                new Date(\"2001 November 1\"),\n+                CalendarUtils.trunc(date2, Calendar.MONTH));\n+        assertEquals(\"trunc semimonth-1 failed\",\n+                new Date(\"2002 February 1\"),\n+                CalendarUtils.trunc(date1, CalendarUtils.SEMI_MONTH));\n+        assertEquals(\"trunc semimonth-2 failed\",\n+                new Date(\"2001 November 16\"),\n+                CalendarUtils.trunc(date2, CalendarUtils.SEMI_MONTH));\n+        assertEquals(\"trunc date-1 failed\",\n+                new Date(\"2002 February 12\"),\n+                CalendarUtils.trunc(date1, Calendar.DATE));\n+        assertEquals(\"trunc date-2 failed\",\n+                new Date(\"2001 November 18\"),\n+                CalendarUtils.trunc(date2, Calendar.DATE));\n+        assertEquals(\"trunc hour-1 failed\",\n+                parser.parse(\"February 12, 2002 12:00:00.000\"),\n+                CalendarUtils.trunc(date1, Calendar.HOUR));\n+        assertEquals(\"trunc hour-2 failed\",\n+                parser.parse(\"November 18, 2001 1:00:00.000\"),\n+                CalendarUtils.trunc(date2, Calendar.HOUR));\n+        assertEquals(\"trunc minute-1 failed\",\n+                parser.parse(\"February 12, 2002 12:34:00.000\"),\n+                CalendarUtils.trunc(date1, Calendar.MINUTE));\n+        assertEquals(\"trunc minute-2 failed\",\n+                parser.parse(\"November 18, 2001 1:23:00.000\"),\n+                CalendarUtils.trunc(date2, Calendar.MINUTE));\n+        assertEquals(\"trunc second-1 failed\",\n+                parser.parse(\"February 12, 2002 12:34:56.000\"),\n+                CalendarUtils.trunc(date1, Calendar.SECOND));\n+        assertEquals(\"trunc second-2 failed\",\n+                parser.parse(\"November 18, 2001 1:23:11.000\"),\n+                CalendarUtils.trunc(date2, Calendar.SECOND));\n+\n+    }\n+\n+    /**\n+     * Tests the parse method, which is supposed to handle various strings\n+     * as flexibly as CVS supports.\n+     */\n+    public void testParse() throws Exception {\n+        //This is difficult to test since the \"now\" used in the\n+        //  parse function cannot be controlled.  We could possibly control\n+        //  it by trying before and after and making sure the value we expect\n+        //  is between the two values calculated.\n+        //For now we're just using the custom assertEquals that takes a delta\n+\n+        Calendar now = null;\n+\n+        now = Calendar.getInstance();\n+        now.add(Calendar.MINUTE, -1);\n+        assertEquals(\"parse 1 minute ago\",\n+                now, CalendarUtils.parse(\"1 minute ago\"), 50);\n+        now = Calendar.getInstance();\n+        now.add(Calendar.MINUTE, -8);\n+        assertEquals(\"parse 8 minutes ago\",\n+                now, CalendarUtils.parse(\"8 minutes ago\"), 50);\n+\n+        now = Calendar.getInstance();\n+        now.add(Calendar.DATE, -1);\n+        assertEquals(\"parse yesterday\",\n+                now, CalendarUtils.parse(\"yesterday\"), 50);\n+\n+        now = Calendar.getInstance();\n+        now.add(Calendar.DATE, 1);\n+        assertEquals(\"parse tomorrow\",\n+                now, CalendarUtils.parse(\"tomorrow\"), 50);\n+\n+        now = Calendar.getInstance();\n+        //Sunday would be 1, Saturday would be 7, so we walk back up to 6 days.\n+        if (now.get(Calendar.DATE) == 1) {\n+            //If Sunday already, we go back a full week\n+            now.add(Calendar.DATE, -7);\n+        } else {\n+            now.add(Calendar.DATE, 1 - now.get(Calendar.DAY_OF_WEEK));\n+        }\n+        assertEquals(\"parse last Sunday\",\n+                now, CalendarUtils.parse(\"last Sunday\"), 50);\n+\n+        now = Calendar.getInstance();\n+        now.add(Calendar.DATE, -7);\n+        assertEquals(\"parse last week\",\n+                now, CalendarUtils.parse(\"last week\"), 50);\n+\n+        now = Calendar.getInstance();\n+        //January would be 0, December would be 11, so we walk back up to 11 months\n+        if (now.get(Calendar.MONTH) == 0) {\n+            //If January already, we go back a full year\n+            now.add(Calendar.MONTH, -12);\n+        } else {\n+            now.add(Calendar.MONTH, 0 - now.get(Calendar.MONTH));\n+        }\n+        assertEquals(\"parse last January\",\n+                now, CalendarUtils.parse(\"last January\"), 50);\n+    }\n+\n+    /**\n+     * Tests the calendar iterator for week ranges\n+     */\n+    public void testWeekIterator() throws Exception {\n+        Calendar now = Calendar.getInstance();\n+        Calendar today = CalendarUtils.trunc(now, Calendar.DATE);\n+        Calendar sunday = CalendarUtils.trunc(now, Calendar.DATE);\n+        sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK));\n+        Calendar monday = CalendarUtils.trunc(now, Calendar.DATE);\n+        if (monday.get(Calendar.DATE) == 1) {\n+            //This is sunday... roll back 6 days\n+            monday.add(Calendar.DATE, -6);\n+        } else {\n+            monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK));\n+        }\n+        Calendar centered = CalendarUtils.trunc(now, Calendar.DATE);\n+        centered.add(Calendar.DATE, -3);\n+\n+        Iterator it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_SUNDAY);\n+        assertWeekIterator(it, sunday);\n+        it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_MONDAY);\n+        assertWeekIterator(it, monday);\n+        it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_RELATIVE);\n+        assertWeekIterator(it, today);\n+        it = CalendarUtils.getCalendarIterator(now, CalendarUtils.RANGE_WEEK_CENTER);\n+        assertWeekIterator(it, centered);\n+    }\n+\n+    /**\n+     * Tests the calendar iterator for month-based ranges\n+     */\n+    public void testMonthIterator() throws Exception {\n+        Iterator it = CalendarUtils.getCalendarIterator(date1, CalendarUtils.RANGE_MONTH_SUNDAY);\n+        assertWeekIterator(it,\n+                new Date(\"January 27, 2002\"),\n+                new Date(\"March 2, 2002\"));\n+\n+        it = CalendarUtils.getCalendarIterator(date1, CalendarUtils.RANGE_MONTH_MONDAY);\n+        assertWeekIterator(it,\n+                new Date(\"January 28, 2002\"),\n+                new Date(\"March 3, 2002\"));\n+\n+        it = CalendarUtils.getCalendarIterator(date2, CalendarUtils.RANGE_MONTH_SUNDAY);\n+        assertWeekIterator(it,\n+                new Date(\"October 28, 2001\"),\n+                new Date(\"December 1, 2001\"));\n+\n+        it = CalendarUtils.getCalendarIterator(date2, CalendarUtils.RANGE_MONTH_MONDAY);\n+        assertWeekIterator(it,\n+                new Date(\"October 29, 2001\"),\n+                new Date(\"December 2, 2001\"));\n+    }\n+\n+    /**\n+     * This checks that this is a 7 element iterator of Calendar objects\n+     * that are dates (no time), and exactly 1 day spaced after each other.\n+     */\n+    private static void assertWeekIterator(Iterator it, Calendar start) {\n+        Calendar end = (Calendar) start.clone();\n+        end.add(Calendar.DATE, 6);\n+\n+        assertWeekIterator(it, start, end);\n+    }\n+\n+    /**\n+     * Convenience method for when working with Date objects\n+     */\n+    private static void assertWeekIterator(Iterator it, Date start, Date end) {\n+        Calendar calStart = Calendar.getInstance();\n+        calStart.setTime(start);\n+        Calendar calEnd = Calendar.getInstance();\n+        calEnd.setTime(end);\n+\n+        assertWeekIterator(it, calStart, calEnd);\n+    }\n+\n+    /**\n+     * This checks that this is a 7 divisble iterator of Calendar objects\n+     * that are dates (no time), and exactly 1 day spaced after each other\n+     * (in addition to the proper start and stop dates)\n+     */\n+    private static void assertWeekIterator(Iterator it, Calendar start, Calendar end) {\n+        Calendar cal = (Calendar) it.next();\n+        assertEquals(\"\", start, cal, 0);\n+        Calendar last = null;\n+        int count = 1;\n+        while (it.hasNext()) {\n+            //Check this is just a date (no time component)\n+            assertEquals(\"\", cal, CalendarUtils.trunc(cal, Calendar.DATE), 0);\n+\n+            last = cal;\n+            cal = (Calendar) it.next();\n+            count++;\n+\n+            //Check that this is one day more than the last date\n+            last.add(Calendar.DATE, 1);\n+            assertEquals(\"\", last, cal, 0);\n+        }\n+        if (count % 7 != 0) {\n+            throw new AssertionFailedError(\"There were \" + count + \" days in this iterator\");\n+        }\n+        assertEquals(\"\", end, cal, 0);\n+    }\n+\n+    /**\n+     * Used to check that Calendar objects are close enough\n+     * delta is in milliseconds\n+     */\n+    public static void assertEquals(String message, Calendar cal1, Calendar cal2, long delta) {\n+        if (Math.abs(cal1.getTime().getTime() - cal2.getTime().getTime()) > delta) {\n+            throw new AssertionFailedError(\n+                    message + \" expected \" + cal1.getTime() + \" but got \" + cal2.getTime());\n+        }\n+    }\n+}\n+", "timestamp": 1125271886, "metainfo": ""}