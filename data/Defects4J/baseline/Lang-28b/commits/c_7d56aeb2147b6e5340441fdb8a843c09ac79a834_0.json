{"sha": "7d56aeb2147b6e5340441fdb8a843c09ac79a834", "log": "Rename allElementsOfClass to allElementsOfType, and change to instanceof check   ", "commit": "\n--- a/src/java/org/apache/commons/lang/Validate.java\n+++ b/src/java/org/apache/commons/lang/Validate.java\n  * @author Gary Gregory\n  * @author Norm Deane\n  * @since 2.0\n- * @version $Id: Validate.java,v 1.12 2004/06/01 21:25:35 scolebourne Exp $\n+ * @version $Id: Validate.java,v 1.13 2004/10/08 21:44:41 scolebourne Exp $\n  */\n public class Validate {\n     // Validate has no dependencies on other classes in Commons Lang at present\n             }\n         }\n     }\n-    \n+\n     /**\n      * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n      * if the argument collection  is <code>null</code> or has elements that\n-     * are not of type <code>clazz</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.allElementsOfClass(collection, String.class, \"Collection has invalid elements\");\n-     * </pre>\n-     *\n-     * @param collection  the collection to check\n-     * @param clazz  the <code>Class</code> which the collection's elements are expected to be\n+     * are not of type <code>clazz</code> or a subclass.</p>\n+     *\n+     * <pre>\n+     * Validate.allElementsOfType(collection, String.class, \"Collection has invalid elements\");\n+     * </pre>\n+     *\n+     * @param collection  the collection to check, not null\n+     * @param clazz  the <code>Class</code> which the collection's elements are expected to be, not null\n      * @param message  the exception message if the <code>Collection</code> has elements not of type <code>clazz</code>\n      * @since 2.1\n      */\n-    public static void allElementsOfClass(Collection collection, Class clazz, String message) {\n+    public static void allElementsOfType(Collection collection, Class clazz, String message) {\n     \tValidate.notNull(collection);\n+        Validate.notNull(clazz);\n     \tfor (Iterator it = collection.iterator(); it.hasNext(); ) {\n-    \t\tif ((it.next().getClass().equals(clazz)) == false) {\n+    \t\tif (clazz.isInstance(it.next()) == false) {\n     \t\t\tthrow new IllegalArgumentException(message);\n     \t\t}\n     \t}\n-    }   \n-    \n+    }\n+\n     /**\n      * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n      * if the argument collection  is <code>null</code> or has elements that are not of \n-     * type <code>clazz</code>.</p>\n-     *\n-     * <pre>\n-     * Validate.allElementsOfClass(collection, String.class);\n+     * type <code>clazz</code> or a subclass.</p>\n+     *\n+     * <pre>\n+     * Validate.allElementsOfType(collection, String.class);\n      * </pre>\n      *\n      * <p>The message in the exception is 'The validated collection contains an element not of type clazz at index: '.</p>\n      * \n-     * @param collection  the collection to check\n-     * @param clazz the <code>Class</code> which the collection's elements are expected to be\n+     * @param collection  the collection to check, not null\n+     * @param clazz the <code>Class</code> which the collection's elements are expected to be, not null\n      * @since 2.1\n      */\n-    public static void allElementsOfClass(Collection collection, Class clazz) {\n+    public static void allElementsOfType(Collection collection, Class clazz) {\n     \tValidate.notNull(collection);\n+        Validate.notNull(clazz);\n     \tint i = 0;\n     \tfor (Iterator it = collection.iterator(); it.hasNext(); i++) {\n-    \t\tif ((it.next().getClass().equals(clazz)) == false) {\n+            if (clazz.isInstance(it.next()) == false) {\n     \t\t\tthrow new IllegalArgumentException(\"The validated collection contains an element not of type \"\n-                    + (clazz == null ? \"null\" : clazz.getName()) + \" at index: \" + i);\n+                    + clazz.getName() + \" at index: \" + i);\n     \t\t}\n     \t}\n     }\n--- a/src/test/org/apache/commons/lang/ValidateTest.java\n+++ b/src/test/org/apache/commons/lang/ValidateTest.java\n  *\n  * @author Stephen Colebourne\n  * @author Norm Deane\n- * @version $Id: ValidateTest.java,v 1.5 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id: ValidateTest.java,v 1.6 2004/10/08 21:44:41 scolebourne Exp $\n  */\n public class ValidateTest extends TestCase {\n \n     }\n \n     //-----------------------------------------------------------------------\n-    public void testAllElementsOfClass() {\n+    public void testAllElementsOfType() {\n     \tList coll = new ArrayList();\n     \tcoll.add(\"a\");\n     \tcoll.add(\"b\");\n-    \tValidate.allElementsOfClass(coll, String.class, \"MSG\");\n+    \tValidate.allElementsOfType(coll, String.class, \"MSG\");\n     \ttry {\n-    \t\tValidate.allElementsOfClass(coll, Integer.class, \"MSG\");\n+    \t\tValidate.allElementsOfType(coll, Integer.class, \"MSG\");\n     \t\tfail(\"Expecting IllegalArgumentException\");\n     \t} catch (IllegalArgumentException ex) {\n     \t\tassertEquals(\"MSG\", ex.getMessage());\n     \t}\n     \tcoll.set(1, Boolean.FALSE);\n     \ttry {\n-    \t\tValidate.allElementsOfClass(coll, String.class);\n+    \t\tValidate.allElementsOfType(coll, String.class);\n     \t\tfail(\"Expecting IllegalArgumentException\");\n     \t} catch (IllegalArgumentException ex) {\n     \t\tassertEquals(\"The validated collection contains an element not of type java.lang.String at index: 1\", ex.getMessage());\n     \t}\n-    }\n+        \n+        coll = new ArrayList();\n+        coll.add(new Integer(5));\n+        coll.add(new Double(2.0d));\n+        Validate.allElementsOfType(coll, Number.class, \"MSG\");\n+        try {\n+            Validate.allElementsOfType(coll, Integer.class, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+        try {\n+            Validate.allElementsOfType(coll, Double.class, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"MSG\", ex.getMessage());\n+        }\n+    }\n+\n }", "timestamp": 1097271881, "metainfo": ""}