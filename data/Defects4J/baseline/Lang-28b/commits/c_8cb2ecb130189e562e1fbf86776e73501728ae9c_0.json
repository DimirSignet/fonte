{"sha": "8cb2ecb130189e562e1fbf86776e73501728ae9c", "log": "Add additional method to support subclass searching of exceptions in a chain bug 30929   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Pete Gieser\n  * @since 1.0\n- * @version $Id: ExceptionUtils.java,v 1.41 2004/09/30 07:03:25 bayard Exp $\n+ * @version $Id: ExceptionUtils.java,v 1.42 2004/10/09 10:04:04 scolebourne Exp $\n  */\n public class ExceptionUtils {\n     \n     //-----------------------------------------------------------------------\n     /**\n      * <p>Returns the (zero based) index of the first <code>Throwable</code>\n-     * that matches the specified type in the exception chain.</p>\n+     * that matches the specified class (exactly) in the exception chain.\n+     * Subclasses of the specified class do not match - see\n+     * {@link #indexOfType(Throwable, Class)} for the opposite.</p>\n      * \n      * <p>A <code>null</code> throwable returns <code>-1</code>.\n      * A <code>null</code> type returns <code>-1</code>.\n      * No match in the chain returns <code>-1</code>.</p>\n      *\n      * @param throwable  the throwable to inspect, may be null\n-     * @param type  the type to search for\n+     * @param clazz  the class to search for, subclasses do not match, null returns -1\n      * @return the index into the throwable chain, -1 if no match or null input\n      */\n-    public static int indexOfThrowable(Throwable throwable, Class type) {\n-        return indexOfThrowable(throwable, type, 0);\n+    public static int indexOfThrowable(Throwable throwable, Class clazz) {\n+        return indexOf(throwable, clazz, 0, false);\n     }\n \n     /**\n      * <p>Returns the (zero based) index of the first <code>Throwable</code>\n      * that matches the specified type in the exception chain from\n-     * a specified index.</p>\n+     * a specified index.\n+     * Subclasses of the specified class do not match - see\n+     * {@link #indexOfType(Throwable, Class, int)} for the opposite.</p>\n      * \n      * <p>A <code>null</code> throwable returns <code>-1</code>.\n      * A <code>null</code> type returns <code>-1</code>.\n      * A start index greater than the number of throwables returns <code>-1</code>.</p>\n      *\n      * @param throwable  the throwable to inspect, may be null\n-     * @param type  the type to search for\n+     * @param clazz  the class to search for, subclasses do not match, null returns -1\n      * @param fromIndex  the (zero based) index of the starting position,\n      *  negative treated as zero, larger than chain size returns -1\n      * @return the index into the throwable chain, -1 if no match or null input\n      */\n-    public static int indexOfThrowable(Throwable throwable, Class type, int fromIndex) {\n-        if (throwable == null) {\n+    public static int indexOfThrowable(Throwable throwable, Class clazz, int fromIndex) {\n+        return indexOf(throwable, clazz, fromIndex, false);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Returns the (zero based) index of the first <code>Throwable</code>\n+     * that matches the specified class or subclass in the exception chain.\n+     * Subclasses of the specified class do match - see\n+     * {@link #indexOfThrowable(Throwable, Class)} for the opposite.</p>\n+     * \n+     * <p>A <code>null</code> throwable returns <code>-1</code>.\n+     * A <code>null</code> type returns <code>-1</code>.\n+     * No match in the chain returns <code>-1</code>.</p>\n+     *\n+     * @param throwable  the throwable to inspect, may be null\n+     * @param type  the type to search for, subclasses match, null returns -1\n+     * @return the index into the throwable chain, -1 if no match or null input\n+     * @since 2.1\n+     */\n+    public static int indexOfType(Throwable throwable, Class type) {\n+        return indexOf(throwable, type, 0, true);\n+    }\n+\n+    /**\n+     * <p>Returns the (zero based) index of the first <code>Throwable</code>\n+     * that matches the specified type in the exception chain from\n+     * a specified index.\n+     * Subclasses of the specified class do match - see\n+     * {@link #indexOfThrowable(Throwable, Class)} for the opposite.</p>\n+     * \n+     * <p>A <code>null</code> throwable returns <code>-1</code>.\n+     * A <code>null</code> type returns <code>-1</code>.\n+     * No match in the chain returns <code>-1</code>.\n+     * A negative start index is treated as zero.\n+     * A start index greater than the number of throwables returns <code>-1</code>.</p>\n+     *\n+     * @param throwable  the throwable to inspect, may be null\n+     * @param type  the type to search for, subclasses match, null returns -1\n+     * @param fromIndex  the (zero based) index of the starting position,\n+     *  negative treated as zero, larger than chain size returns -1\n+     * @return the index into the throwable chain, -1 if no match or null input\n+     * @since 2.1\n+     */\n+    public static int indexOfType(Throwable throwable, Class type, int fromIndex) {\n+        return indexOf(throwable, type, fromIndex, true);\n+    }\n+\n+    private static int indexOf(Throwable throwable, Class type, int fromIndex, boolean subclass) {\n+        if (throwable == null || type == null) {\n             return -1;\n         }\n         if (fromIndex < 0) {\n         if (fromIndex >= throwables.length) {\n             return -1;\n         }\n-        for (int i = fromIndex; i < throwables.length; i++) {\n-// TODO: decide on whether to include this\n-//            if (type.isAssignableFrom(throwables[i].getClass())) {\n-            if (throwables[i].getClass().equals(type)) {\n-                return i;\n+        if (subclass) {\n+            for (int i = fromIndex; i < throwables.length; i++) {\n+                if (type.isAssignableFrom(throwables[i].getClass())) {\n+                    return i;\n+                }\n+            }\n+        } else {\n+            for (int i = fromIndex; i < throwables.length; i++) {\n+                if (type.equals(throwables[i].getClass())) {\n+                    return i;\n+                }\n             }\n         }\n         return -1;\n--- a/src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java\n         assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class));\n         assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class));\n         assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class));\n     }\n \n     public void testIndexOf_ThrowableClassInt() {\n         assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));\n         assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1));\n         assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIndexOfType_ThrowableClass() {\n+        assertEquals(-1, ExceptionUtils.indexOfType(null, null));\n+        assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class));\n+        assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(nested, null));\n+        assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class));\n+        assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class));\n+        assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));\n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class));\n+        assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class));\n+        assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class));\n+        \n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class));\n+    }\n+\n+    public void testIndexOfType_ThrowableClassInt() {\n+        assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0));\n+        assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0));\n+        assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0));\n+        assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfType(withCause, null));\n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));\n+        assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0));\n+        assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0));\n+\n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1));\n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1));\n+        assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9));\n+        \n+        assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1097316244, "metainfo": ""}