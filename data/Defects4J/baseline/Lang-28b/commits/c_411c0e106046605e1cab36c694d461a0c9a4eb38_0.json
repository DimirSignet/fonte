{"sha": "411c0e106046605e1cab36c694d461a0c9a4eb38", "log": "Adding unit test for #39410. Implementing fix by switching from using Math.log to Integer.toString to figure out the number of digits.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n import java.util.Locale;\n import java.util.Map;\n import java.util.TimeZone;\n+\n+import org.apache.commons.lang.Validate;\n \n /**\n  * <p>FastDateFormat is a fast and thread-safe version of\n      */\n     public static final int SHORT = DateFormat.SHORT;\n     \n-    // package scoped as used by inner class\n-    static final double LOG_10 = Math.log(10);\n-\n     private static String cDefaultPattern;\n \n     private static Map cInstanceCache = new HashMap(7);\n                 if (value < 1000) {\n                     digits = 3;\n                 } else {\n-                    digits = (int)(Math.log(value) / LOG_10) + 1;\n+                    Validate.isTrue(value > -1, \"Negative values should not be possible\", value);\n+                    digits = Integer.toString(value).length();\n                 }\n                 for (int i = mSize; --i >= digits; ) {\n                     buffer.append('0');\n--- a/src/test/org/apache/commons/lang/time/FastDateFormatTest.java\n+++ b/src/test/org/apache/commons/lang/time/FastDateFormatTest.java\n         assertEquals(\"0999/01/01\", format.format(cal));\n     }\n     /**\n+     * Show Bug #39410 is solved\n+     */\n+    public void testMilleniumBug() {\n+        Calendar cal = Calendar.getInstance();\n+        FastDateFormat format = FastDateFormat.getInstance(\"dd.MM.yyyy\");\n+\n+        cal.set(1000,0,1);\n+        assertEquals(\"01.01.1000\", format.format(cal));\n+    }\n+\n+    /**\n      * testLowYearPadding showed that the date was buggy\n      * This test confirms it, getting 366 back as a date\n      */", "timestamp": 1146461563, "metainfo": ""}