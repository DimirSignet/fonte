{"sha": "68217617c54467c7c6098168e714a2fb6a48847d", "log": "ws  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n         }\n \n         Class[] convertedClasses = new Class[classes.length];\n-        for (int i=0; i < classes.length; i++) {\n-            convertedClasses[i] = primitiveToWrapper( classes[i] );\n+        for (int i = 0; i < classes.length; i++) {\n+            convertedClasses[i] = primitiveToWrapper(classes[i]);\n         }\n         return convertedClasses;\n     }\n         }\n \n         Class[] convertedClasses = new Class[classes.length];\n-        for (int i=0; i < classes.length; i++) {\n-            convertedClasses[i] = wrapperToPrimitive( classes[i] );\n+        for (int i = 0; i < classes.length; i++) {\n+            convertedClasses[i] = wrapperToPrimitive(classes[i]);\n         }\n         return convertedClasses;\n     }\n     }\n \n     /**\n-     * Returns the (initialized )class represented by <code>className</code>\n+     * Returns the (initialized) class represented by <code>className</code>\n      * using the current thread's context class loader. This implementation\n      * supports names like \"<code>java.lang.String[]</code>\" as well as\n      * \"<code>[Ljava.lang.String;</code>\".\n      * @return a <code>Class</code> array, <code>null</code> if null array input\n      * @since 2.4\n      */\n-    public static Class[] toClass(Object[] array)\n-    {\n+    public static Class[] toClass(Object[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n             return null;\n         } else {\n             int dim = 0;\n-            while(className.startsWith(\"[\")) {\n+            while (className.startsWith(\"[\")) {\n                 dim++;\n                 className = className.substring(1);\n             }\n-            if(dim < 1) {\n+            if (dim < 1) {\n                 return className;\n             } else {\n-                if(className.startsWith(\"L\")) {\n+                if (className.startsWith(\"L\")) {\n                     className = className.substring(\n                         1,\n                         className.endsWith(\";\")\n                             ? className.length() - 1\n                             : className.length());\n                 } else {\n-                    if(className.length() > 0) {\n+                    if (className.length() > 0) {\n                         className = (String) reverseAbbreviationMap.get(\n                             className.substring(0, 1));\n                     }\n                 }\n                 StringBuffer canonicalClassNameBuffer = new StringBuffer(className);\n-                for(int i = 0; i < dim; i++) {\n+                for (int i = 0; i < dim; i++) {\n                     canonicalClassNameBuffer.append(\"[]\");\n                 }\n                 return canonicalClassNameBuffer.toString();", "timestamp": 1233266455, "metainfo": ""}