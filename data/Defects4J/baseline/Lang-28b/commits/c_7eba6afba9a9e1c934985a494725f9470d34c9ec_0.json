{"sha": "7eba6afba9a9e1c934985a494725f9470d34c9ec", "log": "added some more entities from HTML 4.0 spec, refactored (Entities class), initialize maps on demand   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n /**\n  * <p>Common <code>String</code> escaping routines.</p>\n  *\n- * <p>Originally from \n+ * <p>Originally from\n  * <a href=\"http://jakarta.apache.org/turbine/\">Turbine</a> and the\n  * GenerationJavaCore library and from\n  * <a href=\"http://www.purpletech.com/code/\">Purple Technology</a>\n  * @author Helge Tesgaard\n  * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n  * @since 2.0\n- * @version $Id: StringEscapeUtils.java,v 1.2 2003/04/01 17:19:28 bayard Exp $\n+ * @version $Id: StringEscapeUtils.java,v 1.3 2003/04/02 06:14:46 alex Exp $\n  */\n public class StringEscapeUtils {\n \n             StringPrintWriter writer = new StringPrintWriter(str.length() * 2);\n             escapeJavaStyleString(writer, str, escapeSingleQuotes);\n             return writer.getString();\n-        }\n-        catch (IOException ioe) {\n+        } catch (IOException ioe) {\n             // this should never ever happen while writing to a StringWriter\n             ioe.printStackTrace();\n             return null;\n                 out.write(\"\\\\u00\" + Integer.toHexString(ch));\n             } else if (ch < 32) {\n                 switch (ch) {\n-                    case '\\b' :\n+                    case '\\b':\n                         out.write('\\\\');\n                         out.write('b');\n                         break;\n-                    case '\\n' :\n+                    case '\\n':\n                         out.write('\\\\');\n                         out.write('n');\n                         break;\n-                    case '\\t' :\n+                    case '\\t':\n                         out.write('\\\\');\n                         out.write('t');\n                         break;\n-                    case '\\f' :\n+                    case '\\f':\n                         out.write('\\\\');\n                         out.write('f');\n                         break;\n-                    case '\\r' :\n+                    case '\\r':\n                         out.write('\\\\');\n                         out.write('r');\n                         break;\n                 }\n             } else {\n                 switch (ch) {\n-                    case '\\'' :\n+                    case '\\'':\n                         if (escapeSingleQuote) out.write('\\\\');\n                         out.write('\\'');\n                         break;\n-                    case '\"' :\n+                    case '\"':\n                         out.write('\\\\');\n                         out.write('\"');\n                         break;\n-                    case '\\\\' :\n+                    case '\\\\':\n                         out.write('\\\\');\n                         out.write('\\\\');\n                         break;\n     }\n \n     /**\n-     * Unescapes any Java literals found in the String. For example, \n-     * it will turn a sequence of '\\' and 'n' into a newline character, \n+     * Unescapes any Java literals found in the String. For example,\n+     * it will turn a sequence of '\\' and 'n' into a newline character,\n      * unless the '\\' is preceded by another '\\'.\n      */\n     public static String unescapeJava(String str) {\n             StringPrintWriter writer = new StringPrintWriter(str.length());\n             unescapeJava(writer, str);\n             return writer.getString();\n-        }\n-        catch (IOException ioe) {\n+        } catch (IOException ioe) {\n             // this should never ever happen while writing to a StringWriter\n             ioe.printStackTrace();\n             return null;\n         boolean inUnicode = false;\n         for (int i = 0; i < sz; i++) {\n             char ch = str.charAt(i);\n-            if(inUnicode) {\n-                // if in unicode, then we're reading unicode \n+            if (inUnicode) {\n+                // if in unicode, then we're reading unicode\n                 // values in somehow\n-                if(unicode.length() == 4) {\n-                    // unicode now contains the four hex digits \n+                if (unicode.length() == 4) {\n+                    // unicode now contains the four hex digits\n                     // which represents our unicode chacater\n                     try {\n                         int value = Integer.parseInt(unicode.toString(), 16);\n-                        out.write( (char)value );\n+                        out.write((char) value);\n                         unicode.setLength(0);\n                         unicode.setLength(4);\n                         inUnicode = false;\n                         hadSlash = false;\n-                    } catch(NumberFormatException nfe) {\n-                        throw new NestableRuntimeException(\"Unable to parse unicode value: \"+unicode, nfe);\n+                    } catch (NumberFormatException nfe) {\n+                        throw new NestableRuntimeException(\"Unable to parse unicode value: \" + unicode, nfe);\n                     }\n                 } else {\n                     unicode.append(ch);\n                     continue;\n                 }\n             }\n-            if(hadSlash) {\n+            if (hadSlash) {\n                 // handle an escaped value\n                 hadSlash = false;\n-                switch(ch) {\n-                    case '\\\\': out.write('\\\\'); break;\n-                    case '\\'': out.write('\\''); break;\n-                    case '\\\"': out.write('\"'); break;\n-                    case 'r':  out.write('\\r'); break;\n-                    case 'f':  out.write('\\f'); break;\n-                    case 't':  out.write('\\t'); break;\n-                    case 'n':  out.write('\\n'); break;\n-                    case 'b':  out.write('\\b'); break;\n-                    case 'u':  {\n-                        // uh-oh, we're in unicode country....\n-                        inUnicode=true;\n-                        break;\n-                    }\n+                switch (ch) {\n+                    case '\\\\':\n+                        out.write('\\\\');\n+                        break;\n+                    case '\\'':\n+                        out.write('\\'');\n+                        break;\n+                    case '\\\"':\n+                        out.write('\"');\n+                        break;\n+                    case 'r':\n+                        out.write('\\r');\n+                        break;\n+                    case 'f':\n+                        out.write('\\f');\n+                        break;\n+                    case 't':\n+                        out.write('\\t');\n+                        break;\n+                    case 'n':\n+                        out.write('\\n');\n+                        break;\n+                    case 'b':\n+                        out.write('\\b');\n+                        break;\n+                    case 'u':\n+                        {\n+                            // uh-oh, we're in unicode country....\n+                            inUnicode = true;\n+                            break;\n+                        }\n                     default :\n                         out.write(ch);\n                         break;\n                 }\n                 continue;\n-            } else\n-            if(ch == '\\\\') {\n+            } else if (ch == '\\\\') {\n                 hadSlash = true;\n                 continue;\n-            } \n+            }\n             out.write(ch);\n         }\n-        if(hadSlash) {\n-            // then we're in the weird case of a \\ at the end of the \n+        if (hadSlash) {\n+            // then we're in the weird case of a \\ at the end of the\n             // string, let's output it anyway.\n             out.write('\\\\');\n         }\n     }\n \n     public static void unescapeJavaScript(Writer out, String str) throws IOException {\n-        unescapeJava(out,str);\n+        unescapeJava(out, str);\n     }\n \n     // HTML and XML\n     //--------------------------------------------------------------------------\n-    \n-    // see http://hotwired.lycos.com/webmonkey/reference/special_characters/\n-    //todo: initialize these lazily (on first request, rather than at classload time)\n-    static Object[][] entities = {\n-       // {\"#39\", new Integer(39)},       // ' - apostrophe\n-        {\"quot\", new Integer(34)},      // \" - double-quote\n-        {\"amp\", new Integer(38)},       // & - ampersand\n-        {\"lt\", new Integer(60)},        // < - less-than\n-        {\"gt\", new Integer(62)},        // > - greater-than\n-        {\"nbsp\", new Integer(160)},     // non-breaking space\n-        {\"copy\", new Integer(169)},     //  - copyright\n-        {\"reg\", new Integer(174)},      //  - registered trademark\n-        {\"Agrave\", new Integer(192)},   //  - uppercase A, grave accent\n-        {\"Aacute\", new Integer(193)},   //  - uppercase A, acute accent\n-        {\"Acirc\", new Integer(194)},    //  - uppercase A, circumflex accent\n-        {\"Atilde\", new Integer(195)},   //  - uppercase A, tilde\n-        {\"Auml\", new Integer(196)},     //  - uppercase A, umlaut\n-        {\"Aring\", new Integer(197)},    //  - uppercase A, ring\n-        {\"AElig\", new Integer(198)},    //  - uppercase AE\n-        {\"Ccedil\", new Integer(199)},   //  - uppercase C, cedilla\n-        {\"Egrave\", new Integer(200)},   //  - uppercase E, grave accent\n-        {\"Eacute\", new Integer(201)},   //  - uppercase E, acute accent\n-        {\"Ecirc\", new Integer(202)},    //  - uppercase E, circumflex accent\n-        {\"Euml\", new Integer(203)},     //  - uppercase E, umlaut\n-        {\"Igrave\", new Integer(204)},   //  - uppercase I, grave accent\n-        {\"Iacute\", new Integer(205)},   //  - uppercase I, acute accent\n-        {\"Icirc\", new Integer(206)},    //  - uppercase I, circumflex accent\n-        {\"Iuml\", new Integer(207)},     //  - uppercase I, umlaut\n-        {\"ETH\", new Integer(208)},      //  - uppercase Eth, Icelandic\n-        {\"Ntilde\", new Integer(209)},   //  - uppercase N, tilde\n-        {\"Ograve\", new Integer(210)},   //  - uppercase O, grave accent\n-        {\"Oacute\", new Integer(211)},   //  - uppercase O, acute accent\n-        {\"Ocirc\", new Integer(212)},    //  - uppercase O, circumflex accent\n-        {\"Otilde\", new Integer(213)},   //  - uppercase O, tilde\n-        {\"Ouml\", new Integer(214)},     //  - uppercase O, umlaut\n-        {\"Oslash\", new Integer(216)},   //  - uppercase O, slash\n-        {\"Ugrave\", new Integer(217)},   //  - uppercase U, grave accent\n-        {\"Uacute\", new Integer(218)},   //  - uppercase U, acute accent\n-        {\"Ucirc\", new Integer(219)},    //  - uppercase U, circumflex accent\n-        {\"Uuml\", new Integer(220)},     //  - uppercase U, umlaut\n-        {\"Yacute\", new Integer(221)},   //  - uppercase Y, acute accent\n-        {\"THORN\", new Integer(222)},    //  - uppercase THORN, Icelandic\n-        {\"szlig\", new Integer(223)},    //  - lowercase sharps, German\n-        {\"agrave\", new Integer(224)},   //  - lowercase a, grave accent\n-        {\"aacute\", new Integer(225)},   //  - lowercase a, acute accent\n-        {\"acirc\", new Integer(226)},    //  - lowercase a, circumflex accent\n-        {\"atilde\", new Integer(227)},   //  - lowercase a, tilde\n-        {\"auml\", new Integer(228)},     //  - lowercase a, umlaut\n-        {\"aring\", new Integer(229)},    //  - lowercase a, ring\n-        {\"aelig\", new Integer(230)},    //  - lowercase ae\n-        {\"ccedil\", new Integer(231)},   //  - lowercase c, cedilla\n-        {\"egrave\", new Integer(232)},   //  - lowercase e, grave accent\n-        {\"eacute\", new Integer(233)},   //  - lowercase e, acute accent\n-        {\"ecirc\", new Integer(234)},    //  - lowercase e, circumflex accent\n-        {\"euml\", new Integer(235)},     //  - lowercase e, umlaut\n-        {\"igrave\", new Integer(236)},   //  - lowercase i, grave accent\n-        {\"iacute\", new Integer(237)},   //  - lowercase i, acute accent\n-        {\"icirc\", new Integer(238)},    //  - lowercase i, circumflex accent\n-        {\"iuml\", new Integer(239)},     //  - lowercase i, umlaut\n-        {\"igrave\", new Integer(236)},   //  - lowercase i, grave accent\n-        {\"iacute\", new Integer(237)},   //  - lowercase i, acute accent\n-        {\"icirc\", new Integer(238)},    //  - lowercase i, circumflex accent\n-        {\"iuml\", new Integer(239)},     //  - lowercase i, umlaut\n-        {\"eth\", new Integer(240)},      //  - lowercase eth, Icelandic\n-        {\"ntilde\", new Integer(241)},   //  - lowercase n, tilde\n-        {\"ograve\", new Integer(242)},   //  - lowercase o, grave accent\n-        {\"oacute\", new Integer(243)},   //  - lowercase o, acute accent\n-        {\"ocirc\", new Integer(244)},    //  - lowercase o, circumflex accent\n-        {\"otilde\", new Integer(245)},   //  - lowercase o, tilde\n-        {\"ouml\", new Integer(246)},     //  - lowercase o, umlaut\n-        {\"oslash\", new Integer(248)},   //  - lowercase o, slash\n-        {\"ugrave\", new Integer(249)},   //  - lowercase u, grave accent\n-        {\"uacute\", new Integer(250)},   //  - lowercase u, acute accent\n-        {\"ucirc\", new Integer(251)},    //  - lowercase u, circumflex accent\n-        {\"uuml\", new Integer(252)},     //  - lowercase u, umlaut\n-        {\"yacute\", new Integer(253)},   //  - lowercase y, acute accent\n-        {\"thorn\", new Integer(254)},    //  - lowercase thorn, Icelandic\n-        {\"yuml\", new Integer(255)},     //  - lowercase y, umlaut\n-        {\"euro\", new Integer(8364)},    // Euro symbol\n-    };\n-    static Map e2i = new HashMap();\n-    static Map i2e = new HashMap();\n-    static {\n-        for (int i=0; i<entities.length; ++i) {\n-            e2i.put(entities[i][0], entities[i][1]);\n-            i2e.put(entities[i][1], entities[i][0]);\n-        }\n+\n+    private static class Entities {\n+        // see http://hotwired.lycos.com/webmonkey/reference/special_characters/\n+        // see http://www.w3.org/TR/REC-html40/sgml/entities.html\n+        static Object[][] entities = {\n+            // {\"#39\", new Integer(39)},       // ' - apostrophe\n+            {\"quot\", new Integer(34)}, // \" - double-quote\n+            {\"amp\", new Integer(38)}, // & - ampersand\n+            {\"lt\", new Integer(60)}, // < - less-than\n+            {\"gt\", new Integer(62)}, // > - greater-than\n+            {\"nbsp\", new Integer(160)}, // non-breaking space\n+            {\"iexcl\", new Integer(161)}, //inverted exclamation mark\n+            {\"cent\", new Integer(162)}, //cent sign\n+            {\"pound\", new Integer(163)}, //pound sign\n+            {\"curren\", new Integer(164)}, //currency sign\n+            {\"yen\", new Integer(165)}, //yen sign = yuan sign\n+            {\"brvbar\", new Integer(166)}, //broken bar = broken vertical bar\n+            {\"sect\", new Integer(167)}, //section sign\n+            {\"uml\", new Integer(168)}, //diaeresis = spacing diaeresis\n+            {\"copy\", new Integer(169)}, //  - copyright sign\n+            {\"ordf\", new Integer(170)}, //feminine ordinal indicator\n+            {\"laquo\", new Integer(171)}, //left-pointing double angle quotation mark = left pointing guillemet\n+            {\"not\", new Integer(172)}, //not sign\n+            {\"shy\", new Integer(173)}, //soft hyphen = discretionary hyphen\n+            {\"reg\", new Integer(174)}, //  - registered trademark sign\n+            {\"macr\", new Integer(175)}, //macron = spacing macron = overline = APL overbar\n+            {\"deg\", new Integer(176)}, //degree sign\n+            {\"plusmn\", new Integer(177)}, //plus-minus sign = plus-or-minus sign\n+            {\"sup2\", new Integer(178)}, //superscript two = superscript digit two = squared\n+            {\"sup3\", new Integer(179)}, //superscript three = superscript digit three = cubed\n+            {\"acute\", new Integer(180)}, //acute accent = spacing acute\n+            {\"micro\", new Integer(181)}, //micro sign\n+            {\"para\", new Integer(182)}, //pilcrow sign = paragraph sign\n+            {\"middot\", new Integer(183)}, //middle dot = Georgian comma = Greek middle dot\n+            {\"cedil\", new Integer(184)}, //cedilla = spacing cedilla\n+            {\"sup1\", new Integer(185)}, //superscript one = superscript digit one\n+            {\"ordm\", new Integer(186)}, //masculine ordinal indicator\n+            {\"raquo\", new Integer(187)}, //right-pointing double angle quotation mark = right pointing guillemet\n+            {\"frac14\", new Integer(188)}, //vulgar fraction one quarter = fraction one quarter\n+            {\"frac12\", new Integer(189)}, //vulgar fraction one half = fraction one half\n+            {\"frac34\", new Integer(190)}, //vulgar fraction three quarters = fraction three quarters\n+            {\"iquest\", new Integer(191)}, //inverted question mark = turned question mark\n+            {\"Agrave\", new Integer(192)}, //  - uppercase A, grave accent\n+            {\"Aacute\", new Integer(193)}, //  - uppercase A, acute accent\n+            {\"Acirc\", new Integer(194)}, //  - uppercase A, circumflex accent\n+            {\"Atilde\", new Integer(195)}, //  - uppercase A, tilde\n+            {\"Auml\", new Integer(196)}, //  - uppercase A, umlaut\n+            {\"Aring\", new Integer(197)}, //  - uppercase A, ring\n+            {\"AElig\", new Integer(198)}, //  - uppercase AE\n+            {\"Ccedil\", new Integer(199)}, //  - uppercase C, cedilla\n+            {\"Egrave\", new Integer(200)}, //  - uppercase E, grave accent\n+            {\"Eacute\", new Integer(201)}, //  - uppercase E, acute accent\n+            {\"Ecirc\", new Integer(202)}, //  - uppercase E, circumflex accent\n+            {\"Euml\", new Integer(203)}, //  - uppercase E, umlaut\n+            {\"Igrave\", new Integer(204)}, //  - uppercase I, grave accent\n+            {\"Iacute\", new Integer(205)}, //  - uppercase I, acute accent\n+            {\"Icirc\", new Integer(206)}, //  - uppercase I, circumflex accent\n+            {\"Iuml\", new Integer(207)}, //  - uppercase I, umlaut\n+            {\"ETH\", new Integer(208)}, //  - uppercase Eth, Icelandic\n+            {\"Ntilde\", new Integer(209)}, //  - uppercase N, tilde\n+            {\"Ograve\", new Integer(210)}, //  - uppercase O, grave accent\n+            {\"Oacute\", new Integer(211)}, //  - uppercase O, acute accent\n+            {\"Ocirc\", new Integer(212)}, //  - uppercase O, circumflex accent\n+            {\"Otilde\", new Integer(213)}, //  - uppercase O, tilde\n+            {\"Ouml\", new Integer(214)}, //  - uppercase O, umlaut\n+            {\"times\", new Integer(215)}, //multiplication sign\n+            {\"Oslash\", new Integer(216)}, //  - uppercase O, slash\n+            {\"Ugrave\", new Integer(217)}, //  - uppercase U, grave accent\n+            {\"Uacute\", new Integer(218)}, //  - uppercase U, acute accent\n+            {\"Ucirc\", new Integer(219)}, //  - uppercase U, circumflex accent\n+            {\"Uuml\", new Integer(220)}, //  - uppercase U, umlaut\n+            {\"Yacute\", new Integer(221)}, //  - uppercase Y, acute accent\n+            {\"THORN\", new Integer(222)}, //  - uppercase THORN, Icelandic\n+            {\"szlig\", new Integer(223)}, //  - lowercase sharps, German\n+            {\"agrave\", new Integer(224)}, //  - lowercase a, grave accent\n+            {\"aacute\", new Integer(225)}, //  - lowercase a, acute accent\n+            {\"acirc\", new Integer(226)}, //  - lowercase a, circumflex accent\n+            {\"atilde\", new Integer(227)}, //  - lowercase a, tilde\n+            {\"auml\", new Integer(228)}, //  - lowercase a, umlaut\n+            {\"aring\", new Integer(229)}, //  - lowercase a, ring\n+            {\"aelig\", new Integer(230)}, //  - lowercase ae\n+            {\"ccedil\", new Integer(231)}, //  - lowercase c, cedilla\n+            {\"egrave\", new Integer(232)}, //  - lowercase e, grave accent\n+            {\"eacute\", new Integer(233)}, //  - lowercase e, acute accent\n+            {\"ecirc\", new Integer(234)}, //  - lowercase e, circumflex accent\n+            {\"euml\", new Integer(235)}, //  - lowercase e, umlaut\n+            {\"igrave\", new Integer(236)}, //  - lowercase i, grave accent\n+            {\"iacute\", new Integer(237)}, //  - lowercase i, acute accent\n+            {\"icirc\", new Integer(238)}, //  - lowercase i, circumflex accent\n+            {\"iuml\", new Integer(239)}, //  - lowercase i, umlaut\n+            {\"eth\", new Integer(240)}, //  - lowercase eth, Icelandic\n+            {\"ntilde\", new Integer(241)}, //  - lowercase n, tilde\n+            {\"ograve\", new Integer(242)}, //  - lowercase o, grave accent\n+            {\"oacute\", new Integer(243)}, //  - lowercase o, acute accent\n+            {\"ocirc\", new Integer(244)}, //  - lowercase o, circumflex accent\n+            {\"otilde\", new Integer(245)}, //  - lowercase o, tilde\n+            {\"ouml\", new Integer(246)}, //  - lowercase o, umlaut\n+            {\"divide\", new Integer(247)}, // division sign\n+            {\"oslash\", new Integer(248)}, //  - lowercase o, slash\n+            {\"ugrave\", new Integer(249)}, //  - lowercase u, grave accent\n+            {\"uacute\", new Integer(250)}, //  - lowercase u, acute accent\n+            {\"ucirc\", new Integer(251)}, //  - lowercase u, circumflex accent\n+            {\"uuml\", new Integer(252)}, //  - lowercase u, umlaut\n+            {\"yacute\", new Integer(253)}, //  - lowercase y, acute accent\n+            {\"thorn\", new Integer(254)}, //  - lowercase thorn, Icelandic\n+            {\"yuml\", new Integer(255)}, //  - lowercase y, umlaut\n+            {\"euro\", new Integer(8364)}, // Euro symbol\n+        };\n+\n+        private Map mapNameToValue;\n+        private Map mapValueToName;\n+\n+        public Entities() {\n+            mapNameToValue = new HashMap();\n+            mapValueToName = new HashMap();\n+            for (int i = 0; i < entities.length; ++i) {\n+                mapNameToValue.put(entities[i][0], entities[i][1]);\n+                mapValueToName.put(entities[i][1], entities[i][0]);\n+            }\n+        }\n+\n+        public String entityName(int value) {\n+            return (String) mapValueToName.get(new Integer(value));\n+        }\n+\n+        public Integer entityValue(String name) {\n+            return (Integer) mapNameToValue.get(name);\n+        }\n+    }\n+\n+    private static Entities entities;\n+\n+    private static void initEntities() {\n+        if (entities == null)\n+            entities = new Entities();\n+    }\n+\n+    private static String entityName(char ch) {\n+        initEntities();\n+        return entities.entityName(ch);\n+    }\n+\n+    private static Integer entityValue(String entity) {\n+        initEntities();\n+        return entities.entityValue(entity);\n     }\n \n     /**\n      * see http://hotwired.lycos.com/webmonkey/reference/special_characters/\n      * @see #unescapeHtml(String)\n      **/\n-    public static String escapeHtml(String str)\n-    {\n+    public static String escapeHtml(String str) {\n         StringBuffer buf = new StringBuffer(str.length() * 2);\n         int i;\n-        for (i=0; i<str.length(); ++i) {\n+        for (i = 0; i < str.length(); ++i) {\n             char ch = str.charAt(i);\n-            String entity = (String)i2e.get( new Integer((int)ch) );\n+            String entity = entityName(ch);\n             if (entity == null) {\n-                if (((int)ch) > 128) {\n-                    int intValue = ((int)ch);\n+                if (((int) ch) > 128) {   // should this be 127 or 128?\n+                    int intValue = ((int) ch);\n                     buf.append(\"&#\" + intValue + \";\");\n-                }\n-                else {\n+                } else {\n                     buf.append(ch);\n                 }\n-            }\n-            else {\n+            } else {\n                 buf.append(\"&\" + entity + \";\");\n             }\n         }\n     public static String unescapeHtml(String str) {\n         StringBuffer buf = new StringBuffer(str.length());\n         int i;\n-        for (i=0; i<str.length(); ++i) {\n+        for (i = 0; i < str.length(); ++i) {\n             char ch = str.charAt(i);\n             if (ch == '&') {\n-                int semi = str.indexOf(';', i+1);\n+                int semi = str.indexOf(';', i + 1);\n                 if (semi == -1) {\n                     buf.append(ch);\n                     continue;\n                 }\n-                String entity = str.substring(i+1, semi);\n+                String entity = str.substring(i + 1, semi);\n                 Integer iso;\n                 if (entity.charAt(0) == '#') {\n                     iso = new Integer(entity.substring(1));\n-                }\n-                else {\n-                    iso = (Integer)e2i.get(entity);\n+                } else {\n+                    iso = entityValue(entity);\n                 }\n                 if (iso == null) {\n                     buf.append(\"&\" + entity + \";\");\n-                }\n-                else {\n-                    buf.append((char)(iso.intValue()));\n+                } else {\n+                    buf.append((char) (iso.intValue()));\n                 }\n                 i = semi;\n-            }\n-            else {\n+            } else {\n                 buf.append(ch);\n             }\n         }\n         return buf.toString();\n     }\n+\n }\n ", "timestamp": 1049264086, "metainfo": ""}