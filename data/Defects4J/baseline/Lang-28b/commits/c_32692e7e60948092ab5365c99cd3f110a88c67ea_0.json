{"sha": "32692e7e60948092ab5365c99cd3f110a88c67ea", "log": "Removing SQLException usage per LANG-539. This leads to removing getCauseUsingWellKnownTypes and dropping the optimization step for SQLException and InvocationTargetException; plus a simplification of the code in getCause(String,String[]) for LANG-491  ", "commit": "\n--- a/src/java/org/apache/commons/lang3/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang3/exception/ExceptionUtils.java\n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n-import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n         if (throwable == null) {\n             return null;\n         }\n-        Throwable cause = getCauseUsingWellKnownTypes(throwable);\n-        if (cause == null) {\n-            if (methodNames == null) {\n-                synchronized(CAUSE_METHOD_NAMES_LOCK) {\n-                    methodNames = CAUSE_METHOD_NAMES;\n+\n+        if (methodNames == null) {\n+            synchronized(CAUSE_METHOD_NAMES_LOCK) {\n+                methodNames = CAUSE_METHOD_NAMES;\n+            }\n+        }\n+\n+        for (int i = 0; i < methodNames.length; i++) {\n+            String methodName = methodNames[i];\n+            if (methodName != null) {\n+                Throwable cause = getCauseUsingMethodName(throwable, methodName);\n+                if (cause != null) {\n+                    return cause;\n                 }\n             }\n-            for (int i = 0; i < methodNames.length; i++) {\n-                String methodName = methodNames[i];\n-                if (methodName != null) {\n-                    cause = getCauseUsingMethodName(throwable, methodName);\n-                    if (cause != null) {\n-                        break;\n-                    }\n-                }\n-            }\n-\n-            if (cause == null) {\n-                cause = getCauseUsingFieldName(throwable, \"detail\");\n-            }\n-        }\n-        return cause;\n+        }\n+\n+        return getCauseUsingFieldName(throwable, \"detail\");\n     }\n \n     /**\n     public static Throwable getRootCause(Throwable throwable) {\n         List<Throwable> list = getThrowableList(throwable);\n         return (list.size() < 2 ? null : (Throwable)list.get(list.size() - 1));\n-    }\n-\n-    /**\n-     * <p>Finds a <code>Throwable</code> for known types.</p>\n-     * \n-     * <p>Uses <code>instanceof</code> checks to examine the exception,\n-     * looking for well known types which could contain chained or\n-     * wrapped exceptions.</p>\n-     *\n-     * @param throwable  the exception to examine\n-     * @return the wrapped exception, or <code>null</code> if not found\n-     */\n-    private static Throwable getCauseUsingWellKnownTypes(Throwable throwable) {\n-        if (throwable instanceof SQLException) {\n-            return ((SQLException) throwable).getNextException();\n-        } else if (throwable instanceof InvocationTargetException) {\n-            return ((InvocationTargetException) throwable).getTargetException();\n-        } else {\n-            return null;\n-        }\n     }\n \n     /**", "timestamp": 1262408230, "metainfo": ""}