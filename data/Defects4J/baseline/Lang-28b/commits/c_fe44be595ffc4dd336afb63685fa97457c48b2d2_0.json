{"sha": "fe44be595ffc4dd336afb63685fa97457c48b2d2", "log": "Add identityToString Make constructor public in line with NumberUtils and StringUtils Javadoc tidy   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n  * @author <a href=\"mailto:janekdb@yahoo.co.uk\">Janek Bogucki</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ObjectUtils.java,v 1.1 2002/07/19 03:35:54 bayard Exp $\n+ * @version $Id: ObjectUtils.java,v 1.2 2002/09/18 19:49:08 scolebourne Exp $\n  */\n public class ObjectUtils {\n     \n     /**\n-     * Prevent construction of ObjectUtils instances\n+     * ObjectUtils instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as <code>ObjectUtils.defaultIfNull(\"a\",\"b\");</code>.\n+     * This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.\n      */\n-    private ObjectUtils() {\n+    public ObjectUtils() {\n     }\n \n+    //--------------------------------------------------------------------\n+    \n     /**\n      * Returns a default value if the object passed is null.\n      *\n-     * @param object  the object to test.\n-     * @param defaultValue  the default value to return.\n-     * @return object if it is not null, defaultValue otherwise.\n+     * @param object  the object to test\n+     * @param defaultValue  the default value to return\n+     * @return object if it is not null, defaultValue otherwise\n      */\n     public static Object defaultIfNull(Object object, Object defaultValue) {\n         return (object != null ? object : defaultValue);\n      * Compares two objects for equality, where either one or both\n      * objects may be <code>null</code>.\n      *\n-     * @param object1  the first object.\n-     * @param object2  the second object.\n-     * @return True if the values of both objects are the same.\n+     * @param object1  the first object\n+     * @param object2  the second object\n+     * @return <code>true</code> if the values of both objects are the same\n      */\n     public static boolean equals(Object object1, Object object2) {\n-        if (object1 == null) {\n-            return (object2 == null);\n-        } else if (object2 == null) {\n-            // object1 is not null\n+        if (object1 == object2) {\n+            return true;\n+        }\n+        if ((object1 == null) || (object2 == null)) {\n             return false;\n-        } else {\n-            return object1.equals(object2);\n         }\n+        return object1.equals(object2);\n+    }\n+    \n+    /**\n+     * Gets the toString that would be produced by Object if a class did not\n+     * override toString itself. Null will return null.\n+     *\n+     * @param object  the object to create a toString for, may be null\n+     * @return the default toString text, or null if null passed in\n+     */\n+    public static String identityToString(Object object) {\n+        if (object == null) {\n+            return null;\n+        }\n+        return new StringBuffer()\n+            .append(object.getClass().getName())\n+            .append('@')\n+            .append(Integer.toHexString(System.identityHashCode(object)))\n+            .toString();\n     }\n     \n }", "timestamp": 1032378548, "metainfo": ""}