{"sha": "49b8c603ef302a4b8d44070e9649770f6afe655d", "log": "Improve performance of BooleanUtils.toBoolean(String)   ", "commit": "\n--- a/src/java/org/apache/commons/lang/BooleanUtils.java\n+++ b/src/java/org/apache/commons/lang/BooleanUtils.java\n  * @author Matthew Hawthorne\n  * @author Gary Gregory\n  * @since 2.0\n- * @version $Id: BooleanUtils.java,v 1.16 2003/09/23 19:45:14 fredrik Exp $\n+ * @version $Id: BooleanUtils.java,v 1.17 2003/10/21 23:23:06 scolebourne Exp $\n  */\n public class BooleanUtils {\n \n      * Otherwise, <code>null</code> is returned.</p>\n      *\n      * <pre>\n+     *   BooleanUtils.toBooleanObject(null)    = null\n      *   BooleanUtils.toBooleanObject(\"true\")  = Boolean.TRUE\n      *   BooleanUtils.toBooleanObject(\"false\") = Boolean.FALSE\n      *   BooleanUtils.toBooleanObject(\"on\")    = Boolean.TRUE\n      *   BooleanUtils.toBooleanObject(\"ON\")    = Boolean.TRUE\n      *   BooleanUtils.toBooleanObject(\"off\")   = Boolean.FALSE\n      *   BooleanUtils.toBooleanObject(\"oFf\")   = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"blue\")  = null\n      * </pre>\n      *\n      * @param str  the String to check\n     // String to boolean methods\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Converts a String to a boolean.</p>\n+     * <p>Converts a String to a boolean (optimised for performance).</p>\n      * \n      * <p><code>'true'</code>, <code>'on'</code> or <code>'yes'</code>\n      * (case insensitive) will return <code>true</code>. Otherwise,\n      * <code>false</code> is returned.</p>\n-     *\n-     * <pre>\n+     * \n+     * <p>This method performs 4 times faster (JDK1.4) than\n+     * <code>Boolean.valueOf(String)</code>. However, this method accepts\n+     * 'on' and 'yes' as true values.\n+     *\n+     * <pre>\n+     *   BooleanUtils.toBoolean(null)    = false\n      *   BooleanUtils.toBoolean(\"true\")  = true\n+     *   BooleanUtils.toBoolean(\"TRUE\")  = true\n+     *   BooleanUtils.toBoolean(\"tRUe\")  = true\n      *   BooleanUtils.toBoolean(\"on\")    = true\n      *   BooleanUtils.toBoolean(\"yes\")   = true\n      *   BooleanUtils.toBoolean(\"false\") = false\n+     *   BooleanUtils.toBoolean(\"x gti\") = false\n      * </pre>\n      *\n      * @param str  the String to check\n      * @return the boolean value of the string, <code>false</code> if no match\n      */\n     public static boolean toBoolean(String str) {\n-        if (\"true\".equalsIgnoreCase(str)) {\n+        // Previously used equalsIgnoreCase, which was fast for interned 'true'.\n+        // Non interned 'true' matched 15 times slower.\n+        // \n+        // Optimisation provides same performance as before for interned 'true'.\n+        // Similar performance for null, 'false', and other strings not length 2/3/4.\n+        // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.\n+        if (str == \"true\") {\n             return true;\n-        } else if (\"on\".equalsIgnoreCase(str)) {\n-            return true;\n-        } else if (\"yes\".equalsIgnoreCase(str)) {\n-            return true;\n-        }\n-        // no match\n+        }\n+        if (str == null) {\n+            return false;\n+        }\n+        switch (str.length()) {\n+            case 2: {\n+                char ch0 = str.charAt(0);\n+                char ch1 = str.charAt(1);\n+                return \n+                    (ch0 == 'o' || ch0 == 'O') &&\n+                    (ch1 == 'n' || ch1 == 'N');\n+            }\n+            case 3: {\n+                char ch = str.charAt(0);\n+                if (ch == 'y') {\n+                    return \n+                        (str.charAt(1) == 'e' || str.charAt(1) == 'E') &&\n+                        (str.charAt(2) == 's' || str.charAt(2) == 'S');\n+                }\n+                if (ch == 'Y') {\n+                    return \n+                        (str.charAt(1) == 'E' || str.charAt(1) == 'e') &&\n+                        (str.charAt(2) == 'S' || str.charAt(2) == 's');\n+                }\n+            }\n+            case 4: {\n+                char ch = str.charAt(0);\n+                if (ch == 't') {\n+                    return \n+                        (str.charAt(1) == 'r' || str.charAt(1) == 'R') &&\n+                        (str.charAt(2) == 'u' || str.charAt(2) == 'U') &&\n+                        (str.charAt(3) == 'e' || str.charAt(3) == 'E');\n+                }\n+                if (ch == 'T') {\n+                    return \n+                        (str.charAt(1) == 'R' || str.charAt(1) == 'r') &&\n+                        (str.charAt(2) == 'U' || str.charAt(2) == 'u') &&\n+                        (str.charAt(3) == 'E' || str.charAt(3) == 'e');\n+                }\n+            }\n+        }\n         return false;\n     }\n-\n+    \n+//    public static void main(String[] args) {\n+//        long start = System.currentTimeMillis();\n+//        boolean flag = true;\n+//        int count = 0;\n+//        for (int i = 0; i < 100000000; i++) {\n+//            flag = toBoolean(\"YES\");\n+//        }\n+//        long end = System.currentTimeMillis();\n+//        System.out.println((end - start) + \" \" + flag + \" \" + count);\n+//    }\n+    \n     /**\n      * <p>Converts a String to a Boolean throwing an exception if no match found.</p>\n      * \n--- a/src/test/org/apache/commons/lang/BooleanUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/BooleanUtilsTest.java\n  *\n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n- * @version $Id: BooleanUtilsTest.java,v 1.7 2003/08/18 02:22:25 bayard Exp $\n+ * @version $Id: BooleanUtilsTest.java,v 1.8 2003/10/21 23:23:06 scolebourne Exp $\n  */\n public class BooleanUtilsTest extends TestCase {\n \n         assertEquals(false, BooleanUtils.toBoolean(\"\"));\n         assertEquals(false, BooleanUtils.toBoolean(\"off\"));\n         assertEquals(false, BooleanUtils.toBoolean(\"oof\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"true\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"yep\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"trux\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"false\"));\n+        assertEquals(false, BooleanUtils.toBoolean(\"a\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"true\")); // interned handled differently\n+        assertEquals(true, BooleanUtils.toBoolean(new StringBuffer(\"tr\").append(\"ue\").toString()));\n+        assertEquals(true, BooleanUtils.toBoolean(\"truE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"trUe\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"trUE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"tRue\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"tRuE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"tRUe\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"tRUE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TRUE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TRUe\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TRuE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TRue\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TrUE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TrUe\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"TruE\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"True\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"on\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"oN\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"On\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"ON\"));\n         assertEquals(true, BooleanUtils.toBoolean(\"yes\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"on\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"TRUE\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"ON\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"yeS\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"yEs\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"yES\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"Yes\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"YeS\"));\n+        assertEquals(true, BooleanUtils.toBoolean(\"YEs\"));\n         assertEquals(true, BooleanUtils.toBoolean(\"YES\"));\n-        assertEquals(true, BooleanUtils.toBoolean(\"TruE\"));\n     }\n \n     public void test_toBoolean_String_String_String() {", "timestamp": 1066778586, "metainfo": ""}