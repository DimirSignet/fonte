{"sha": "7e8976d60b8a24f9fc03f89d98304d77e6153b6d", "log": "Add Fraction class and associated tests   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * <p><code>Fraction</code> is a <code>Number</code> implementation that\n+ * stores fractions accurately.</p>\n+ * \n+ * <p>This class is immutable, and interoperable with most methods that accept\n+ * a <code>Number</code>.</p>\n+ *\n+ * @author Travis Reeder\n+ * @author Stephen Colebourne\n+ * @since 2.0\n+ * @version $Id: Fraction.java,v 1.1 2002/12/22 19:39:39 scolebourne Exp $\n+ */\n+public final class Fraction extends Number implements Serializable, Comparable {\n+    \n+    private static final long serialVersionUID = 65382027393090L;\n+    \n+    public static final Fraction ZERO = new Fraction(0, 1);\n+    public static final Fraction ONE = new Fraction(1, 1);\n+    \n+    public static final Fraction ONE_HALF = new Fraction(1, 2);\n+    \n+    public static final Fraction ONE_THIRD = new Fraction(1, 3);\n+    public static final Fraction TWO_THIRDS = new Fraction(2, 3);\n+    \n+    public static final Fraction ONE_QUARTER = new Fraction(1, 4);\n+    public static final Fraction TWO_QUARTERS = new Fraction(2, 4);\n+    public static final Fraction THREE_QUARTERS = new Fraction(3, 4);\n+    \n+    public static final Fraction ONE_FIFTH = new Fraction(1, 5);\n+    public static final Fraction TWO_FIFTHS = new Fraction(2, 5);\n+    public static final Fraction THREE_FIFTHS = new Fraction(3, 5);\n+    public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);\n+    \n+\n+    /** The numerator number part of the fraction (the three in three sevenths) */\n+    private final int numerator;\n+    /** The denominator number part of the fraction (the seven in three sevenths) */\n+    private final int denominator;\n+\n+    /** Cached output hashCode (class is immutable) */\n+    private transient int hashCode = 0;\n+    /** Cached output toString (class is immutable) */\n+    private transient String toString = null;\n+    /** Cached output toProperString (class is immutable) */\n+    private transient String toProperString = null;\n+    \n+    /**\n+     * <p>Constructs a <code>Fraction</code> instance with the 2 parts \n+     * of a fraction Y/Z.</p>\n+     * \n+     * @param numerator  the numerator, for example the three in 'three sevenths'\n+     * @param denominator  the denominator, for example the seven in 'three sevenths'\n+     */\n+    private Fraction(int numerator, int denominator) {\n+        super();\n+        this.numerator = numerator;\n+        this.denominator = denominator;\n+    }\n+    \n+    /**\n+     * <p>Creates a <code>Fraction</code> instance with the 2 parts \n+     * of a fraction Y/Z.</p>\n+     * \n+     * <p>Any negative signs are resolved to be on the numerator.</p>\n+     * \n+     * @param numerator  the numerator, for example the three in 'three sevenths'\n+     * @param denominator  the denominator, for example the seven in 'three sevenths'\n+     * @return a new fraction instance\n+     * @throws ArithmeticException if the denomiator is zero\n+     */\n+    public static Fraction getFraction(int numerator, int denominator) {\n+        if (denominator == 0) {\n+            throw new ArithmeticException(\"The denominator must not be zero\");\n+        }\n+        if (denominator < 0) {\n+            numerator = -numerator;\n+            denominator = -denominator;\n+        }\n+        return new Fraction(numerator, denominator);\n+    }\n+\n+    /**\n+     * <p>Creates a <code>Fraction</code> instance with the 3 parts \n+     * of a fraction X Y/Z.</p>\n+     * \n+     * <p>The negative sign must be passed in on the whole number part.</p>\n+     * \n+     * @param whole  the whole number, for example the one in 'one and three sevenths'\n+     * @param numerator  the numerator, for example the three in 'one and three sevenths'\n+     * @param denominator  the denominator, for example the seven in 'one and three sevenths'\n+     * @return a new fraction instance\n+     * @throws ArithmeticException if the denomiator is zero\n+     * @throws ArithmeticException if the denomiator is negative\n+     * @throws ArithmeticException if the numerator is negative\n+     */\n+    public static Fraction getFraction(int whole, int numerator, int denominator) {\n+        if (denominator == 0) {\n+            throw new ArithmeticException(\"The denominator must not be zero\");\n+        }\n+        if (denominator < 0) {\n+            throw new ArithmeticException(\"The denominator must not be negative\");\n+        }        \n+        if (numerator < 0) {\n+            throw new ArithmeticException(\"The numerator must not be negative\");\n+        }\n+        if (whole < 0) {\n+            numerator = whole * denominator - numerator;\n+        } else {\n+            numerator = whole * denominator + numerator;\n+        }\n+        return new Fraction(numerator, denominator);\n+    }\n+\n+    /**\n+     * <p>Creates a <code>Fraction</code> instance with the 2 parts \n+     * of a fraction Y/Z.</p>\n+     * \n+     * <p>Any negative signs are resolved to be on the numerator.</p>\n+     * \n+     * @param numerator  the numerator, for example the three in 'three sevenths'\n+     * @param denominator  the denominator, for example the seven in 'three sevenths'\n+     * @return a new fraction instance, with the numerator and denominator reduced\n+     * @throws ArithmeticException if the denomiator is zero\n+     */\n+    public static Fraction getReducedFraction(int numerator, int denominator) {\n+        if (denominator == 0) {\n+            throw new ArithmeticException(\"The denominator must not be zero\");\n+        }\n+        if (denominator < 0) {\n+            numerator = -numerator;\n+            denominator = -denominator;\n+        }\n+        int gcd = greatestCommonDenominator(Math.abs(numerator), denominator);\n+        if (gcd == 0) {\n+            return new Fraction(numerator, denominator);\n+        }\n+        return new Fraction(numerator / gcd, denominator / gcd);\n+    }\n+    \n+    /**\n+     * <p>Creates a <code>Fraction</code> instance from a <code>double</code> value.</p>\n+     * \n+     * <p>This method uses the continued fraction algorithm.</p>\n+     *\n+     * @param value  the double value to convert\n+     * @return a new fraction instance that is close to the value\n+     * @throws ArithmeticException if the value is infinite or NaN\n+     * @throws ArithmeticException if the calculated denomiator is zero\n+     */\n+    public static Fraction getFraction(double value) {\n+        if (Double.isInfinite(value) || Double.isNaN(value)) {\n+            throw new ArithmeticException(\"The value must not be infinite or NaN\");\n+        }\n+        int sign = (value < 0 ? -1 : 1);\n+        value = Math.abs(value);\n+        int wholeNumber = (int) value;\n+        value -= wholeNumber;\n+        \n+        // http://archives.math.utk.edu/articles/atuyl/confrac/\n+        int numer0 = 0;  // the pre-previous\n+        int denom0 = 1;  // the pre-previous\n+        int numer1 = 1;  // the previous\n+        int denom1 = 0;  // the previous\n+        int numer2 = 0;  // the current, setup in calculation\n+        int denom2 = 0;  // the current, setup in calculation\n+        int a1 = (int) value;\n+        int a2 = 0;\n+        double x1 = 1;\n+        double x2 = 0;\n+        double y1 = value - a1;\n+        double y2 = 0;\n+        double delta1, delta2 = Double.MAX_VALUE;\n+        double fraction;\n+        int i = 1;\n+//        System.out.println(\"---\");\n+        do {\n+            delta1 = delta2;\n+            a2 = (int) (x1 / y1);\n+            x2 = y1;\n+            y2 = x1 - a2 * y1;\n+            numer2 = a1 * numer1 + numer0;\n+            denom2 = a1 * denom1 + denom0;\n+            fraction = (double) numer2 / (double) denom2;\n+            delta2 = Math.abs(value - fraction);\n+//            System.out.println(numer2 + \" \" + denom2 + \" \" + fraction + \" \" + delta2 + \" \" + y1);\n+            a1 = a2;\n+            x1 = x2;\n+            y1 = y2;\n+            numer0 = numer1;\n+            denom0 = denom1;\n+            numer1 = numer2;\n+            denom1 = denom2;\n+            i++;\n+//            System.out.println(\">>\" + delta1 +\" \"+ delta2+\" \"+(delta1 > delta2)+\" \"+i+\" \"+denom2);\n+        } while ((delta1 > delta2) && (denom2 <= 10000) && (denom2 > 0) && (i < 25));\n+        if (i == 25) {\n+            throw new ArithmeticException(\"Unable to convert double to fraction\");\n+        }\n+        return getReducedFraction((numer0 + wholeNumber * denom0) * sign, denom0);\n+    }\n+\n+    /**\n+     * <p>Creates a Fraction from a <code>String</code>.</p>\n+     * \n+     * <p>The formats accepted are:</p>\n+     * <ol>\n+     * <li><code>double</code> String containing a dot\n+     * <li>'X Y/Z'\n+     * <li>'Y/Z'\n+     * </ol> and a .</p>\n+     * \n+     * @param str  the string to parse, must not be <code>null</code>\n+     * @return the new <code>Fraction</code> instance\n+     * @throws IllegalArgumentException if the string is null\n+     * @throws NumberFormatException if the number format is invalid\n+     */\n+    public static Fraction getFraction(String str) {\n+        if (str == null) {\n+            throw new IllegalArgumentException(\"The string must not be null\");\n+        }\n+        // parse double format\n+        int pos = str.indexOf('.');\n+        if (pos >= 0) {\n+            return getFraction(Double.parseDouble(str));\n+        }\n+        \n+        // parse X Y/Z format\n+        pos = str.indexOf(' ');\n+        if (pos > 0) {\n+            int whole = Integer.parseInt(str.substring(0, pos));\n+            str = str.substring(pos + 1);\n+            pos = str.indexOf('/');\n+            if (pos < 0) {\n+                throw new NumberFormatException(\"The fraction could not be parsed as the format X Y/Z\");\n+            } else {\n+                int denom = Integer.parseInt(str.substring(pos + 1));\n+                return getFraction(\n+                    Integer.parseInt(str.substring(0, pos)) + whole * denom,\n+                    denom\n+                );\n+            }\n+        }\n+        \n+        // parse Y/Z format\n+        pos = str.indexOf('/');\n+        if (pos < 0) {\n+            // simple whole number\n+            return getFraction(Integer.parseInt(str), 1);\n+        } else {\n+            return getFraction(\n+                Integer.parseInt(str.substring(0, pos)),\n+                Integer.parseInt(str.substring(pos + 1))\n+            );\n+        }\n+    }\n+\n+    // Accessors\n+    //-------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the numerator part of the fraction.</p>\n+     * \n+     * <p>This method may return a value greater than the denominator, an\n+     * improper fraction, such as the seven in 7/8.</p>\n+     * \n+     * @return the numerator fraction part\n+     */\n+    public int getNumerator() {\n+        return numerator;\n+    }\n+\n+    /**\n+     * <p>Gets the denominator part of the fraction.</p>\n+     * \n+     * @return the denominator fraction part\n+     */\n+    public int getDenominator() {\n+        return denominator;\n+    }\n+    \n+    /**\n+     * <p>Gets the proper numerator, always positive.</p>\n+     * \n+     * <p>An improper fraction 7/8 can be resolved into a proper one, 1 3/4.\n+     * This method returns the 3 from the proper fraction.</p>\n+     * \n+     * <p>If the fraction is negative such as -7/8, it can be resolved into\n+     * -1 3/4, so this method returns the positive proper numerator, 3.</p>\n+     * \n+     * @return the numerator fraction part of a proper fraction, always positive\n+     */\n+    public int getProperNumerator() {\n+        return Math.abs(numerator % denominator);\n+    }\n+\n+    /**\n+     * <p>Gets the proper whole part of the fraction.</p>\n+     * \n+     * <p>An improper fraction 7/8 can be resolved into a proper one, 1 3/4.\n+     * This method returns the 1 from the proper fraction.</p>\n+     * \n+     * <p>If the fraction is negative such as -7/8, it can be resolved into\n+     * -1 3/4, so this method returns the positive whole part -1.</p>\n+     * \n+     * @return the whole fraction part of a proper fraction, that includes the sign\n+     */\n+    public int getProperWhole() {\n+        return numerator / denominator;\n+    }\n+\n+    // Number methods\n+    //-------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the fraction as an <code>int</code>. This returns the whole number\n+     * part of the fraction.</p>\n+     * \n+     * @return the whole number fraction part\n+     */\n+    public int intValue() {\n+        return (int) numerator / denominator;\n+    }\n+\n+    /**\n+     * <p>Gets the fraction as a <code>long</code>. This returns the whole number\n+     * part of the fraction.</p>\n+     * \n+     * @return the whole number fraction part\n+     */\n+    public long longValue() {\n+        return (long) numerator / denominator;\n+    }\n+\n+    /**\n+     * <p>Gets the fraction as a <code>float</code>. This calculates the fraction\n+     * as the numerator divided by denominator.</p>\n+     * \n+     * @return the fraction as a <code>float</code>\n+     */\n+    public float floatValue() {\n+        return ((float) numerator) / ((float) denominator);\n+    }\n+\n+    /**\n+     * <p>Gets the fraction as a <code>double</code>. This calculates the fraction\n+     * as the numerator divided by denominator.</p>\n+     * \n+     * @return the fraction as a <code>double</code>\n+     */\n+    public double doubleValue() {\n+        return ((double) numerator) / ((double) denominator);\n+    }\n+\n+    // Calculations\n+    //-------------------------------------------------------------------\n+\n+    /**\n+     * <p>Reduce the fraction to the smallest values for the numerator and \n+     * denominator, returning the result..</p>\n+     * \n+     * @return a new reduce fraction instance, or this if no simplification possible\n+     */\n+    public Fraction reduce() {\n+        int gcd = greatestCommonDenominator(Math.abs(numerator), denominator);\n+        if (gcd == 0) {\n+            return this;\n+        }\n+        return Fraction.getFraction(numerator / gcd, denominator / gcd);\n+    }\n+    \n+    /**\n+     * <p>Gets a fraction that is the invert (1/fraction) of this one.</p>\n+     * \n+     * <p>The returned fraction is not reduced.</p>\n+     * \n+     * @return a new fraction instance with the numerator and denominator inverted\n+     * @throws ArithmeticException if the numerator is zero\n+     */\n+    public Fraction invert() {\n+        if (numerator == 0) {\n+            throw new ArithmeticException(\"Unable to invert a fraction with a zero numerator\");\n+        }\n+        return getFraction(denominator, numerator);\n+    }\n+    \n+    /**\n+     * <p>Gets a fraction that is the negative (-fraction) of this one.</p>\n+     * \n+     * <p>The returned fraction is not reduced.</p>\n+     * \n+     * @return a new fraction instance with the opposite signed numerator\n+     */\n+    public Fraction negate() {\n+        return getFraction(-numerator, denominator);\n+    }\n+    \n+    /**\n+     * <p>Gets a fraction that is the positive equivalent\n+     * (fraction >= 0 ? this : -fraction) of this one.</p>\n+     * \n+     * <p>The returned fraction is not reduced.</p>\n+     * \n+     * @return <code>this</code> if it is positive, or a new positive fraction\n+     *  instance with the opposite signed numerator\n+     */\n+    public Fraction abs() {\n+        if (numerator >= 0) {\n+            return this;\n+        }\n+        return getFraction(-numerator, denominator);\n+    }\n+\n+    /**\n+     * <p>Gets a fraction that is raised to the passed in power.</p>\n+     * \n+     * <p>The returned fraction is not reduced.</p>\n+     * \n+     * @param power  the power to raise the fraction to\n+     * @return <code>this</code> if the power is one, <code>ONE</code> if the power \n+     * is zero or a new fraction instance raised to the appropriate power\n+     */\n+    public Fraction pow(int power) {\n+        if (power == 1) {\n+            return this;\n+        } else if (power == 0) {\n+            return ONE;\n+        } else if (power < 0) {\n+            return getFraction((int) Math.pow(denominator, -power), (int) Math.pow(numerator, -power));\n+        }\n+        return getFraction((int) Math.pow(numerator, power), (int) Math.pow(denominator, power));\n+    }\n+\n+    /**\n+     * <p>Gets the greatest common denominator of two numbers.</p>\n+     * \n+     * @param number1  a positive number\n+     * @param number2  a positive number\n+     * @return the greatest common denominator\n+     */\n+    private static int greatestCommonDenominator(int number1, int number2) {\n+        int remainder = number1 % number2;\n+        while (remainder != 0) {\n+            number1 = number2;\n+            number2 = remainder;\n+            remainder = number1 % number2;\n+        }\n+        return number2;\n+    }\n+\n+    // Arithmetic\n+    //-------------------------------------------------------------------\n+\n+    /**\n+     * <p>Adds the value of this fraction to another, returning the result.</p>\n+     * \n+     * <p>The implementation spots common cases of zero numerators and equal \n+     * denominators. Otherwise, it uses <code>(a/b) + (c/d) = (a*d + b*c) / (b*d)</code>\n+     * and then reduces the result.</p>\n+     * \n+     * @param the fraction to add, must not be <code>null</code>\n+     * @return a <code>Fraction</code> instance with the resulting values\n+     * @throws IllegalArgumentException if the fraction is null\n+     */\n+    public Fraction add(Fraction fraction) {\n+        if (fraction == null) {\n+            throw new IllegalArgumentException(\"The fraction must not be null\");\n+        }\n+        if (numerator == 0) {\n+            return fraction;\n+        }\n+        if (fraction.numerator == 0) {\n+            return this;\n+        }\n+        if (denominator == fraction.denominator) {\n+            return getReducedFraction(numerator + fraction.numerator, denominator);\n+        }\n+        return getReducedFraction(\n+            numerator * fraction.denominator + denominator * fraction.numerator,\n+            denominator * fraction.denominator\n+        );\n+    }\n+\n+    /**\n+     * <p>Subtracts the value of another fraction from the value of this one, \n+     * returning the result.</p>\n+     * \n+     * <p>The implementation spots common cases of zero numerators and equal \n+     * denominators. Otherwise, it uses <code>(a/b) - (c/d) = (a*d - b*c) / (b*d)</code>\n+     * and then reduces the result.</p>\n+     * \n+     * @param the fraction to subtract, must not be <code>null</code>\n+     * @return a <code>Fraction</code> instance with the resulting values\n+     * @throws IllegalArgumentException if the fraction is null\n+     */\n+    public Fraction subtract(Fraction fraction) {\n+        if (fraction == null) {\n+            throw new IllegalArgumentException(\"The fraction must not be null\");\n+        }\n+        if (numerator == 0) {\n+            return fraction.negate();\n+        }\n+        if (fraction.numerator == 0) {\n+            return this;\n+        }\n+        if (denominator == fraction.denominator) {\n+            return getReducedFraction(numerator - fraction.numerator, denominator);\n+        }\n+        return getReducedFraction(\n+            numerator * fraction.denominator - denominator * fraction.numerator,\n+            denominator * fraction.denominator\n+        );\n+    }\n+    \n+    /**\n+     * <p>Multiplies the value of this fraction by another, returning the result.</p>\n+     * \n+     * <p>The implementation uses <code>(a/b)*(c/d) = (a*c)/(b*d)</code>\n+     * and then reduces the result.</p>\n+     * \n+     * @param the fraction to multipy by, must not be <code>null</code>\n+     * @return a <code>Fraction</code> instance with the resulting values\n+     * @throws IllegalArgumentException if the fraction is null\n+     */\n+    public Fraction multiplyBy(Fraction fraction) {\n+        if (fraction == null) {\n+            throw new IllegalArgumentException(\"The fraction must not be null\");\n+        }\n+        if (numerator == 0 || fraction.numerator == 0) {\n+            return ZERO;\n+        }\n+        return getReducedFraction(\n+            numerator * fraction.numerator,\n+            denominator * fraction.denominator\n+        );\n+    }\n+    \n+    /**\n+     * <p>Divide the value of this fraction by another, returning the result.</p>\n+     * \n+     * <p>The implementation uses <code>(a/b)/(c/d) = a/b * d/c = (a*d)/(b*c)</code>\n+     * and then reduces the result.</p>\n+     * \n+     * @param the fraction to divide by, must not be <code>null</code>\n+     * @return a <code>Fraction</code> instance with the resulting values\n+     * @throws IllegalArgumentException if the fraction is null\n+     * @throws ArithmeticException if the fraction to divide by is zero\n+     */\n+    public Fraction divideBy(Fraction fraction) {\n+        if (fraction == null) {\n+            throw new IllegalArgumentException(\"The fraction must not be null\");\n+        }\n+        if (fraction.numerator == 0) {\n+            throw new ArithmeticException(\"The fraction to divide by must not be zero\");\n+        }\n+        if (numerator == 0) {\n+            return ZERO;\n+        }\n+        return getReducedFraction(\n+            numerator * fraction.denominator,\n+            denominator * fraction.numerator\n+        );\n+    }\n+\n+    // Basics\n+    //-------------------------------------------------------------------\n+\n+    /**\n+     * <p>Compares this fraction to another object to test if they are equal.</p>.\n+     * \n+     * <p>To be equal, both values must be equal. Thus 2/4 is not equal to 1/2.</p>\n+     *\n+     * @param obj the reference object with which to compare\n+     * @return <code>true</code> if this object is equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof Fraction == false) {\n+            return false;\n+        }\n+        Fraction other = (Fraction) obj;\n+        return (numerator == other.numerator &&\n+                denominator == other.denominator);\n+    }\n+\n+    /**\n+     * <p>Gets a hashCode for the fraction.</p>\n+     *\n+     * @return a hash code value for this object\n+     */\n+    public int hashCode() {\n+        if (hashCode == 0) {\n+            hashCode = 17;\n+            hashCode = 37 * hashCode + numerator;\n+            hashCode = 37 * hashCode + denominator;\n+        }\n+        return hashCode;\n+    }\n+\n+    /**\n+     * <p>Compares this object to another based on size.</p>\n+     * \n+     * @param object  the object to compare to\n+     * @return -ve if this is less, 0 if equal, +ve if greater\n+     * @throws ClassCastException if the object is not a <code>Fraction</code>\n+     * @throws NullPointerException if the object is <code>null</code>\n+     */\n+    public int compareTo(Object object) {\n+        Fraction other = (Fraction) object;\n+        if (numerator == other.numerator && denominator == other.denominator) {\n+            return 0;\n+        }\n+\n+        // otherwise see which is less\n+        long first = (long) numerator * (long) other.denominator;\n+        long second = (long) other.numerator * (long) denominator;\n+        if (first == second) {\n+            return 0;\n+        } else if (first < second) {\n+            return -1;\n+        } else {\n+            return 1;\n+        }\n+    }\n+\n+    /**\n+     * <p>Gets the fraction as a <code>String</code>.</p>\n+     * \n+     * <p>The format used is '<i>numerator</i>/<i>denominator</i>' always.\n+     * \n+     * @return a <code>String</code> form of the fraction\n+     */\n+    public String toString() {\n+        if (toString == null) {\n+            toString = new StringBuffer(32)\n+                .append(numerator)\n+                .append('/')\n+                .append(denominator).toString();\n+        }\n+        return toString;\n+    }\n+\n+    /**\n+     * <p>Gets the fraction as a proper <code>String</code> in the format X Y/Z.</p>\n+     * \n+     * <p>The format used in '<i>wholeNumber</i> <i>numerator</i>/<i>denominator</i>'.\n+     * If the whole number is zero it will be ommitted. If the numerator is zero,\n+     * only the whole number is returned.</p>\n+     * \n+     * @return a <code>String</code> form of the fraction\n+     */\n+    public String toProperString() {\n+        if (toProperString == null) {\n+            if (numerator == 0) {\n+                toProperString = \"0\";\n+            } else if (numerator == denominator) {\n+                toProperString = \"1\";\n+            } else if (Math.abs(numerator) > denominator) {\n+                int properNumerator = getProperNumerator();\n+                if (properNumerator == 0) {\n+                    toProperString = Integer.toString(getProperWhole());\n+                } else {\n+                    toProperString = new StringBuffer(32)\n+                        .append(getProperWhole()).append(' ')\n+                        .append(properNumerator).append('/')\n+                        .append(denominator).toString();\n+                }\n+            } else {\n+                toProperString = new StringBuffer(32)\n+                    .append(numerator).append('/')\n+                    .append(denominator).toString();\n+            }\n+        }\n+        return toProperString;\n+    }\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/math/FractionTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Test cases for the {@link Fraction} classes.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: FractionTest.java,v 1.1 2002/12/22 19:39:39 scolebourne Exp $\n+ */\n+public class FractionTest extends TestCase {\n+    \n+    private static final int SKIP = 10000;\n+\n+    public FractionTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(FractionTest.class);\n+        suite.setName(\"Fraction Tests\");\n+        return suite;\n+    }\n+    \n+    public void setUp() {\n+    }\n+\n+    //--------------------------------------------------------------------------\n+    \n+    public void testConstants() {\n+        assertEquals(0, Fraction.ZERO.getNumerator());\n+        assertEquals(1, Fraction.ZERO.getDenominator());\n+        \n+        assertEquals(1, Fraction.ONE.getNumerator());\n+        assertEquals(1, Fraction.ONE.getDenominator());\n+        \n+        assertEquals(1, Fraction.ONE_HALF.getNumerator());\n+        assertEquals(2, Fraction.ONE_HALF.getDenominator());\n+        \n+        assertEquals(1, Fraction.ONE_THIRD.getNumerator());\n+        assertEquals(3, Fraction.ONE_THIRD.getDenominator());\n+        \n+        assertEquals(2, Fraction.TWO_THIRDS.getNumerator());\n+        assertEquals(3, Fraction.TWO_THIRDS.getDenominator());\n+        \n+        assertEquals(1, Fraction.ONE_QUARTER.getNumerator());\n+        assertEquals(4, Fraction.ONE_QUARTER.getDenominator());\n+        \n+        assertEquals(2, Fraction.TWO_QUARTERS.getNumerator());\n+        assertEquals(4, Fraction.TWO_QUARTERS.getDenominator());\n+        \n+        assertEquals(3, Fraction.THREE_QUARTERS.getNumerator());\n+        assertEquals(4, Fraction.THREE_QUARTERS.getDenominator());\n+        \n+        assertEquals(1, Fraction.ONE_FIFTH.getNumerator());\n+        assertEquals(5, Fraction.ONE_FIFTH.getDenominator());\n+        \n+        assertEquals(2, Fraction.TWO_FIFTHS.getNumerator());\n+        assertEquals(5, Fraction.TWO_FIFTHS.getDenominator());\n+        \n+        assertEquals(3, Fraction.THREE_FIFTHS.getNumerator());\n+        assertEquals(5, Fraction.THREE_FIFTHS.getDenominator());\n+        \n+        assertEquals(4, Fraction.FOUR_FIFTHS.getNumerator());\n+        assertEquals(5, Fraction.FOUR_FIFTHS.getDenominator());\n+    }\n+    \n+    public void testFactory_int_int() {\n+        Fraction f = null;\n+        \n+        // zero\n+        f = Fraction.getFraction(0, 1);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getFraction(0, 2);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        // normal\n+        f = Fraction.getFraction(1, 1);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getFraction(2, 1);\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getFraction(23, 345);\n+        assertEquals(23, f.getNumerator());\n+        assertEquals(345, f.getDenominator());\n+        \n+        // improper\n+        f = Fraction.getFraction(22, 7);\n+        assertEquals(22, f.getNumerator());\n+        assertEquals(7, f.getDenominator());\n+        \n+        // negatives\n+        f = Fraction.getFraction(-6, 10);\n+        assertEquals(-6, f.getNumerator());\n+        assertEquals(10, f.getDenominator());\n+        \n+        f = Fraction.getFraction(6, -10);\n+        assertEquals(-6, f.getNumerator());\n+        assertEquals(10, f.getDenominator());\n+        \n+        f = Fraction.getFraction(-6, -10);\n+        assertEquals(6, f.getNumerator());\n+        assertEquals(10, f.getDenominator());\n+        \n+        // zero denominator\n+        try {\n+            f = Fraction.getFraction(1, 0);\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(2, 0);\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(-3, 0);\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testFactory_int_int_int() {\n+        Fraction f = null;\n+        \n+        // zero\n+        f = Fraction.getFraction(0, 0, 2);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getFraction(2, 0, 2);\n+        assertEquals(4, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getFraction(0, 1, 2);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        // normal\n+        f = Fraction.getFraction(1, 1, 2);\n+        assertEquals(3, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        // negatives\n+        try {\n+            f = Fraction.getFraction(1, -6, -10);\n+        } catch (ArithmeticException ex) {}\n+\n+        try {\n+            f = Fraction.getFraction(1, -6, -10);\n+        } catch (ArithmeticException ex) {}\n+\n+        try {\n+            f = Fraction.getFraction(1, -6, -10);\n+        } catch (ArithmeticException ex) {}\n+        \n+        // negative whole\n+        f = Fraction.getFraction(-1, 6, 10);\n+        assertEquals(-16, f.getNumerator());\n+        assertEquals(10, f.getDenominator());\n+        \n+        try {\n+            f = Fraction.getFraction(-1, -6, 10);\n+        } catch (ArithmeticException ex) {}\n+\n+        try {\n+            f = Fraction.getFraction(-1, 6, -10);\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(-1, -6, -10);\n+        } catch (ArithmeticException ex) {}\n+        \n+        // zero denominator\n+        try {\n+            f = Fraction.getFraction(0, 1, 0);\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(1, 2, 0);\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(-1, -3, 0);\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    public void testReducedFactory_int_int() {\n+        Fraction f = null;\n+        \n+        // zero\n+        f = Fraction.getReducedFraction(0, 1);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        // normal\n+        f = Fraction.getReducedFraction(1, 1);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(2, 1);\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        // improper\n+        f = Fraction.getReducedFraction(22, 7);\n+        assertEquals(22, f.getNumerator());\n+        assertEquals(7, f.getDenominator());\n+        \n+        // negatives\n+        f = Fraction.getReducedFraction(-6, 10);\n+        assertEquals(-3, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(6, -10);\n+        assertEquals(-3, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(-6, -10);\n+        assertEquals(3, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        // zero denominator\n+        try {\n+            f = Fraction.getReducedFraction(1, 0);\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getReducedFraction(2, 0);\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getReducedFraction(-3, 0);\n+        } catch (ArithmeticException ex) {}\n+\n+        // reduced        \n+        f = Fraction.getReducedFraction(0, 2);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(2, 2);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(2, 4);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(15, 10);\n+        assertEquals(3, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getReducedFraction(121, 22);\n+        assertEquals(11, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+    }\n+\n+    public void testFactory_double() {\n+        Fraction f = null;\n+        \n+        try {\n+            f = Fraction.getFraction(Double.NaN);\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(Double.POSITIVE_INFINITY);\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(Double.NEGATIVE_INFINITY);\n+        } catch (ArithmeticException ex) {}\n+        \n+        // zero\n+        f = Fraction.getFraction(0.0d);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        // one\n+        f = Fraction.getFraction(1.0d);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        // one half\n+        f = Fraction.getFraction(0.5d);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        // negative\n+        f = Fraction.getFraction(-0.875d);\n+        assertEquals(-7, f.getNumerator());\n+        assertEquals(8, f.getDenominator());\n+        \n+        // over 1\n+        f = Fraction.getFraction(1.25d);\n+        assertEquals(5, f.getNumerator());\n+        assertEquals(4, f.getDenominator());\n+        \n+        // two thirds\n+        f = Fraction.getFraction(0.66666d);\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(3, f.getDenominator());\n+        \n+        // small\n+        f = Fraction.getFraction(1.0d/10001d);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        // normal\n+        Fraction f2 = null;\n+        int remainder, number1, number2 = 0;\n+        for (int i = 1; i <= 100; i++) {  // denominator\n+            for (int j = 1; j <= i; j++) {  // numerator\n+                try {\n+                    f = Fraction.getFraction((double) j / (double) i);\n+                } catch (ArithmeticException ex) {\n+                    System.err.println(j + \" \" + i);\n+                    throw ex;\n+                }\n+                f2 = Fraction.getReducedFraction(j, i);\n+                assertEquals(f2.getNumerator(), f.getNumerator());\n+                assertEquals(f2.getDenominator(), f.getDenominator());\n+            }\n+        }\n+        // save time by skipping some tests!\n+        for (int i = 1001; i <= 10000; i+=SKIP) {  // denominator\n+            for (int j = 1; j <= i; j++) {  // numerator\n+                try {\n+                    f = Fraction.getFraction((double) j / (double) i);\n+                } catch (ArithmeticException ex) {\n+                    System.err.println(j + \" \" + i);\n+                    throw ex;\n+                }\n+                f2 = Fraction.getReducedFraction(j, i);\n+                assertEquals(f2.getNumerator(), f.getNumerator());\n+                assertEquals(f2.getDenominator(), f.getDenominator());\n+            }\n+        }\n+    }\n+\n+    public void testFactory_String() {\n+        try {\n+            Fraction.getFraction(null);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testFactory_String_double() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(\"0.0\");\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"0.2\");\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"0.5\");\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"0.66666\");\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(3, f.getDenominator());\n+        \n+        try {\n+            f = Fraction.getFraction(\"2.3R\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\".\");\n+        } catch (NumberFormatException ex) {}\n+    }\n+\n+    public void testFactory_String_proper() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(\"0 0/1\");\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"1 1/5\");\n+        assertEquals(6, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"7 1/2\");\n+        assertEquals(15, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"1 2/4\");\n+        assertEquals(6, f.getNumerator());\n+        assertEquals(4, f.getDenominator());\n+        \n+        try {\n+            f = Fraction.getFraction(\"2 3\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\"a 3\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\"2 b/4\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\"2 \");\n+        } catch (NumberFormatException ex) {}\n+\n+        try {\n+            f = Fraction.getFraction(\" 3\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\" \");\n+        } catch (NumberFormatException ex) {}\n+    }\n+\n+    public void testFactory_String_improper() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(\"0/1\");\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"1/5\");\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"1/2\");\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"2/3\");\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(3, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"7/3\");\n+        assertEquals(7, f.getNumerator());\n+        assertEquals(3, f.getDenominator());\n+        \n+        f = Fraction.getFraction(\"2/4\");\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(4, f.getDenominator());\n+        \n+        try {\n+            f = Fraction.getFraction(\"2/d\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\"2e/3\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\"2/\");\n+        } catch (NumberFormatException ex) {}\n+        \n+        try {\n+            f = Fraction.getFraction(\"/\");\n+        } catch (NumberFormatException ex) {}\n+    }\n+\n+    public void testGets() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(3, 5, 6);\n+        assertEquals(23, f.getNumerator());\n+        assertEquals(3, f.getProperWhole());\n+        assertEquals(5, f.getProperNumerator());\n+        assertEquals(6, f.getDenominator());\n+        \n+        f = Fraction.getFraction(-3, 5, 6);\n+        assertEquals(-23, f.getNumerator());\n+        assertEquals(-3, f.getProperWhole());\n+        assertEquals(5, f.getProperNumerator());\n+        assertEquals(6, f.getDenominator());\n+    }\n+            \n+    public void testConversions() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(3, 7, 8);\n+        assertEquals(3, f.intValue());\n+        assertEquals(3L, f.longValue());\n+        assertEquals(3.875f, f.floatValue(), 0.00001f);\n+        assertEquals(3.875d, f.doubleValue(), 0.00001d);\n+    }\n+    \n+    public void testReduce() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(50, 75);\n+        f = f.reduce();\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(3, f.getDenominator());\n+    }\n+    \n+    public void testInvert() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(50, 75);\n+        f = f.invert();\n+        assertEquals(75, f.getNumerator());\n+        assertEquals(50, f.getDenominator());\n+        \n+        f = Fraction.getFraction(4, 3);\n+        f = f.invert();\n+        assertEquals(3, f.getNumerator());\n+        assertEquals(4, f.getDenominator());\n+        \n+        f = Fraction.getFraction(0, 3);\n+        try {\n+            f = f.invert();\n+        } catch (ArithmeticException ex) {}\n+    }\n+    \n+    public void testNegate() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(50, 75);\n+        f = f.negate();\n+        assertEquals(-50, f.getNumerator());\n+        assertEquals(75, f.getDenominator());\n+        \n+        f = Fraction.getFraction(-50, 75);\n+        f = f.negate();\n+        assertEquals(50, f.getNumerator());\n+        assertEquals(75, f.getDenominator());\n+    }\n+    \n+    public void testAbs() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(50, 75);\n+        f = f.abs();\n+        assertEquals(50, f.getNumerator());\n+        assertEquals(75, f.getDenominator());\n+        \n+        f = Fraction.getFraction(-50, 75);\n+        f = f.abs();\n+        assertEquals(50, f.getNumerator());\n+        assertEquals(75, f.getDenominator());\n+    }\n+    \n+    public void testPow() {\n+        Fraction f = null;\n+        \n+        f = Fraction.getFraction(3, 5);\n+        assertEquals(Fraction.ONE, f.pow(0));\n+        \n+        f = Fraction.getFraction(3, 5);\n+        assertSame(f, f.pow(1));\n+\n+        f = Fraction.getFraction(3, 5);\n+        f = f.pow(2);\n+        assertEquals(9, f.getNumerator());\n+        assertEquals(25, f.getDenominator());\n+        \n+        f = Fraction.getFraction(3, 5);\n+        f = f.pow(3);\n+        assertEquals(27, f.getNumerator());\n+        assertEquals(125, f.getDenominator());\n+        \n+        f = Fraction.getFraction(3, 5);\n+        f = f.pow(-1);\n+        assertEquals(5, f.getNumerator());\n+        assertEquals(3, f.getDenominator());\n+        \n+        f = Fraction.getFraction(3, 5);\n+        f = f.pow(-2);\n+        assertEquals(25, f.getNumerator());\n+        assertEquals(9, f.getDenominator());\n+    }\n+    \n+    public void testAdd() {\n+        Fraction f = null;\n+        Fraction f1 = null;\n+        Fraction f2 = null;\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(1, 5);\n+        f = f1.add(f2);\n+        assertEquals(4, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(2, 5);\n+        f = f1.add(f2);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(3, 5);\n+        f = f1.add(f2);\n+        assertEquals(6, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(-4, 5);\n+        f = f1.add(f2);\n+        assertEquals(-1, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(1, 2);\n+        f = f1.add(f2);\n+        assertEquals(11, f.getNumerator());\n+        assertEquals(10, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(0, 5);\n+        f2 = Fraction.getFraction(1, 5);\n+        f = f1.add(f2);\n+        assertSame(f2, f);\n+        f = f2.add(f1);\n+        assertSame(f2, f);\n+        \n+        try {\n+            f.add(null);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+            \n+    public void testSubtract() {\n+        Fraction f = null;\n+        Fraction f1 = null;\n+        Fraction f2 = null;\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(1, 5);\n+        f = f1.subtract(f2);\n+        assertEquals(2, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(7, 5);\n+        f2 = Fraction.getFraction(2, 5);\n+        f = f1.subtract(f2);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(3, 5);\n+        f = f1.subtract(f2);\n+        assertEquals(0, f.getNumerator());\n+        assertEquals(1, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(-4, 5);\n+        f = f1.subtract(f2);\n+        assertEquals(7, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(1, 2);\n+        f = f1.subtract(f2);\n+        assertEquals(1, f.getNumerator());\n+        assertEquals(10, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(0, 5);\n+        f2 = Fraction.getFraction(1, 5);\n+        f = f2.subtract(f1);\n+        assertSame(f2, f);\n+        \n+        try {\n+            f.subtract(null);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+            \n+    public void testMultiply() {\n+        Fraction f = null;\n+        Fraction f1 = null;\n+        Fraction f2 = null;\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(2, 5);\n+        f = f1.multiplyBy(f2);\n+        assertEquals(6, f.getNumerator());\n+        assertEquals(25, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(-2, 5);\n+        f = f1.multiplyBy(f2);\n+        assertEquals(-6, f.getNumerator());\n+        assertEquals(25, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(-3, 5);\n+        f2 = Fraction.getFraction(-2, 5);\n+        f = f1.multiplyBy(f2);\n+        assertEquals(6, f.getNumerator());\n+        assertEquals(25, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(0, 5);\n+        f2 = Fraction.getFraction(2, 7);\n+        f = f1.multiplyBy(f2);\n+        assertSame(Fraction.ZERO, f);\n+        \n+        try {\n+            f.multiplyBy(null);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+            \n+    public void testDivide() {\n+        Fraction f = null;\n+        Fraction f1 = null;\n+        Fraction f2 = null;\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(2, 5);\n+        f = f1.divideBy(f2);\n+        assertEquals(3, f.getNumerator());\n+        assertEquals(2, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.ZERO;\n+        try {\n+            f = f1.divideBy(f2);\n+        } catch (ArithmeticException ex) {}\n+        \n+        f1 = Fraction.getFraction(0, 5);\n+        f2 = Fraction.getFraction(2, 7);\n+        f = f1.divideBy(f2);\n+        assertSame(Fraction.ZERO, f);\n+        \n+        try {\n+            f.divideBy(null);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+            \n+    public void testEquals() {\n+        Fraction f1 = null;\n+        Fraction f2 = null;\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        assertEquals(false, f1.equals(null));\n+        assertEquals(false, f1.equals(new Object()));\n+        assertEquals(false, f1.equals(new Integer(6)));\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        f2 = Fraction.getFraction(2, 5);\n+        assertEquals(false, f1.equals(f2));\n+        assertEquals(true, f1.equals(f1));\n+        assertEquals(true, f2.equals(f2));\n+        \n+        f2 = Fraction.getFraction(3, 5);\n+        assertEquals(true, f1.equals(f2));\n+        \n+        f2 = Fraction.getFraction(6, 10);\n+        assertEquals(false, f1.equals(f2));\n+    }\n+    \n+    public void testHashCode() {\n+        Fraction f1 = Fraction.getFraction(3, 5);\n+        Fraction f2 = Fraction.getFraction(3, 5);\n+        \n+        assertTrue(f1.hashCode() == f2.hashCode());\n+        \n+        f2 = Fraction.getFraction(2, 5);\n+        assertTrue(f1.hashCode() != f2.hashCode());\n+        \n+        f2 = Fraction.getFraction(6, 10);\n+        assertTrue(f1.hashCode() != f2.hashCode());\n+    }\n+    \n+    public void testCompareTo() {\n+        Fraction f1 = null;\n+        Fraction f2 = null;\n+        \n+        f1 = Fraction.getFraction(3, 5);\n+        \n+        try {\n+            f1.compareTo(null);\n+        } catch (NullPointerException ex) {}\n+        \n+        try {\n+            f1.compareTo(new Object());\n+        } catch (ClassCastException ex) {}\n+        \n+        f2 = Fraction.getFraction(2, 5);\n+        assertTrue(f1.compareTo(f2) > 0);\n+        \n+        f2 = Fraction.getFraction(4, 5);\n+        assertTrue(f1.compareTo(f2) < 0);\n+        \n+        f2 = Fraction.getFraction(3, 5);\n+        assertTrue(f1.compareTo(f2) == 0);\n+        \n+        f2 = Fraction.getFraction(6, 10);\n+        assertTrue(f1.compareTo(f2) == 0);\n+    }\n+    \n+    public void testToString() {\n+        Fraction f = null;\n+\n+        f = Fraction.getFraction(3, 5);\n+        assertEquals(\"3/5\", f.toString());\n+        \n+        f = Fraction.getFraction(7, 5);\n+        assertEquals(\"7/5\", f.toString());        \n+        \n+        f = Fraction.getFraction(4, 2);\n+        assertEquals(\"4/2\", f.toString());        \n+        \n+        f = Fraction.getFraction(0, 2);\n+        assertEquals(\"0/2\", f.toString());        \n+        \n+        f = Fraction.getFraction(2, 2);\n+        assertEquals(\"2/2\", f.toString());        \n+    }\n+    \n+    public void testToProperString() {\n+        Fraction f = null;\n+\n+        f = Fraction.getFraction(3, 5);\n+        assertEquals(\"3/5\", f.toProperString());        \n+        \n+        f = Fraction.getFraction(7, 5);\n+        assertEquals(\"1 2/5\", f.toProperString());        \n+        \n+        f = Fraction.getFraction(14, 10);\n+        assertEquals(\"1 4/10\", f.toProperString());        \n+        \n+        f = Fraction.getFraction(4, 2);\n+        assertEquals(\"2\", f.toProperString());        \n+        \n+        f = Fraction.getFraction(0, 2);\n+        assertEquals(\"0\", f.toProperString());        \n+        \n+        f = Fraction.getFraction(2, 2);\n+        assertEquals(\"1\", f.toProperString());        \n+        \n+        f = Fraction.getFraction(-7, 5);\n+        assertEquals(\"-1 2/5\", f.toProperString());        \n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/lang/math/MathTestSuite.java\n+++ b/src/test/org/apache/commons/lang/math/MathTestSuite.java\n  * Test suite for the Math package.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: MathTestSuite.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ * @version $Id: MathTestSuite.java,v 1.2 2002/12/22 19:39:39 scolebourne Exp $\n  */\n public class MathTestSuite extends TestCase {\n     \n         suite.setName(\"Commons-Lang-Math Tests\");\n         suite.addTest(DoubleRangeTest.suite());\n         suite.addTest(FloatRangeTest.suite());\n+        suite.addTest(FractionTest.suite());\n         suite.addTest(IntRangeTest.suite());\n         suite.addTest(LongRangeTest.suite());\n         suite.addTest(NumberRangeTest.suite());", "timestamp": 1040585979, "metainfo": ""}