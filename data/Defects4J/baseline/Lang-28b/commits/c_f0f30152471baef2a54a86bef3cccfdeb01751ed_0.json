{"sha": "f0f30152471baef2a54a86bef3cccfdeb01751ed", "log": "Fix javadoc, notably exceptions  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n     /**\n      * Copies part of the builder's character array into a new character array.\n      * \n-     * @param startIndex\n-     *            the start index, inclusive, must be valid\n-     * @param endIndex\n-     *            the end index, exclusive, must be valid except that if too large it is treated as end of string\n+     * @param startIndex  the start index, inclusive, must be valid\n+     * @param endIndex  the end index, exclusive, must be valid except that\n+     *  if too large it is treated as end of string\n      * @return a new array that holds part of the contents of the builder\n-     * \n-     * @throws StringIndexOutOfBoundsException\n-     *             when <code>startIndex</code> is less than 0; when <code>startIndex</code> is greater than\n-     *             <code>endIndex</code> (if <code>endIndex</code> is larger than {@link #size() }, then it is\n-     *             massaged to equal {@link #size()} before the validation).\n+     * @throws IndexOutOfBoundsException if startIndex is invalid,\n+     *  or if endIndex is invalid (but endIndex greater than size is valid)\n      */\n     public char[] toCharArray(int startIndex, int endIndex) {\n         endIndex = validateRange(startIndex, endIndex);\n      * @param index  the index to add at, must be valid\n      * @param obj  the object to insert\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public StrBuilder insert(int index, Object obj) {\n         if (obj == null) {\n      * @param index  the index to add at, must be valid\n      * @param str  the string to insert\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public StrBuilder insert(int index, String str) {\n         validateIndex(index);\n      * @param index  the index to add at, must be valid\n      * @param chars  the char array to insert\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public StrBuilder insert(int index, char chars[]) {\n         validateIndex(index);\n      * @param offset  the offset into the character array to start at, must be valid\n      * @param length  the length of the character array part to copy, must be positive\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if any index is invalid\n+     * @throws IndexOutOfBoundsException if any index is invalid\n      */\n     public StrBuilder insert(int index, char chars[], int offset, int length) {\n         validateIndex(index);\n      * @param index  the index to add at, must be valid\n      * @param value  the value to insert\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public StrBuilder insert(int index, boolean value) {\n         validateIndex(index);\n      * @param index  the index to add at, must be valid\n      * @param value  the value to insert\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public StrBuilder insert(int index, char value) {\n         validateIndex(index);\n      * @param index  the index to add at, must be valid\n      * @param value  the value to insert\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public StrBuilder insert(int index, int value) {\n         return insert(index, String.valueOf(value));\n      * @param index  the index to add at, must be valid\n      * @param value  the value to insert\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public StrBuilder insert(int index, long value) {\n         return insert(index, String.valueOf(value));\n      * @param index  the index to add at, must be valid\n      * @param value  the value to insert\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public StrBuilder insert(int index, float value) {\n         return insert(index, String.valueOf(value));\n      * @param index  the index to add at, must be valid\n      * @param value  the value to insert\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public StrBuilder insert(int index, double value) {\n         return insert(index, String.valueOf(value));\n      * @param endIndex  the end index, exclusive, must be valid except\n      *  that if too large it is treated as end of string\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public StrBuilder delete(int startIndex, int endIndex) {\n         endIndex = validateRange(startIndex, endIndex);\n      *\n      * @param index  the index to delete\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public StrBuilder deleteCharAt(int index) {\n         if (index < 0 || index >= size) {\n      *  that if too large it is treated as end of string\n      * @param str  the string to replace with\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public StrBuilder replace(int startIndex, int endIndex, String str) {\n         endIndex = validateRange(startIndex, endIndex);\n      *  that if too large it is treated as end of string\n      * @param builder  the string builder to replace with\n      * @return this, to enable chaining\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public StrBuilder replace(int startIndex, int endIndex, StrBuilder builder) {\n         endIndex = validateRange(startIndex, endIndex);\n      * \n      * @param start  the start index, inclusive, must be valid\n      * @return the new string\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public String substring(int start) {\n         return substring(start, size);\n      * @param endIndex  the end index, exclusive, must be valid except\n      *  that if too large it is treated as end of string\n      * @return the new string\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     public String substring(int startIndex, int endIndex) {\n         endIndex = validateRange(startIndex, endIndex);\n      * using any standard method that expects a Reader.\n      * The current implementation returns a CharArrayReader, but\n      * you should not rely on this.\n-     *\n-     * @return a reader\n+     * <p>\n+     * Note that no synchronization occurs, so you must not alter this\n+     * builder in one thread while reading it in another thread.\n+     *\n+     * @return a reader that reads from this builder\n      */\n     public Reader asReader() {\n         return new CharArrayReader(buffer, 0, size);\n      * @param endIndex  the end index, exclusive, must be valid except\n      *  that if too large it is treated as end of string\n      * @return the new string\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     protected int validateRange(int startIndex, int endIndex) {\n         if (startIndex < 0) {\n      * Validates parameters defining a single index in the builder.\n      * \n      * @param index  the index, must be valid\n-     * @throws StringIndexOutOfBoundsException if the index is invalid\n+     * @throws IndexOutOfBoundsException if the index is invalid\n      */\n     protected void validateIndex(int index) {\n         if (index < 0 || index > size) {", "timestamp": 1123537618, "metainfo": ""}