{"sha": "e2f8a3d5377b5ba956d8a821d793e13b862ab13b", "log": "Give more power to StrSubstitutor subclasses  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrSubstitutor.java\n+++ b/src/java/org/apache/commons/lang/text/StrSubstitutor.java\n      * Replaces all the occurrences of variables in the given source object with\n      * their matching values from the map.\n      *\n-     * @param source  the source text containing the variables to substitute\n-     * @param valueMap  the map with the values\n+     * @param source  the source text containing the variables to substitute, null returns null\n+     * @param valueMap  the map with the values, may be null\n      * @return the result of the replace operation\n      */\n     public static String replace(Object source, Map valueMap) {\n      * their matching values from the map. This method allows to specifiy a\n      * custom variable prefix and suffix\n      *\n-     * @param source  the source text containing the variables to substitute\n-     * @param valueMap  the map with the values\n-     * @param prefix  the prefix of variables\n-     * @param suffix  the suffix of variables\n+     * @param source  the source text containing the variables to substitute, null returns null\n+     * @param valueMap  the map with the values, may be null\n+     * @param prefix  the prefix of variables, not null\n+     * @param suffix  the suffix of variables, not null\n      * @return the result of the replace operation\n+     * @throws IllegalArgumentException if the prefix or suffix is null\n      */\n     public static String replace(Object source, Map valueMap, String prefix, String suffix) {\n         return new StrSubstitutor(valueMap, prefix, suffix).replace(source);\n      * Replaces all the occurrences of variables in the given source object with\n      * their matching values from the system properties.\n      *\n-     * @param source  the source text containing the variables to substitute\n+     * @param source  the source text containing the variables to substitute, null returns null\n      * @return the result of the replace operation\n      */\n     public static String replaceSystemProperties(Object source) {\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Main method for substituting variables.\n+     * Internal method that substitutes the variables.\n+     * <p>\n+     * Most users of this class do not need to call this method. This method will\n+     * be called automatically by another (public) method.\n+     * <p>\n+     * Writers of subclasses can override this method if they need access to\n+     * the substitution process at the start or end.\n      *\n      * @param buf  the string builder to substitute into, not null\n      * @param offset  the start offset within the builder, must be valid\n      * @param length  the length within the builder to be processed, must be valid\n      * @return true if altered\n      */\n-    private boolean substitute(StrBuilder buf, int offset, int length) {\n+    protected boolean substitute(StrBuilder buf, int offset, int length) {\n         return substitute(buf, offset, length, null) > 0;\n     }\n \n                             priorVariables.add(varName);\n                             \n                             // resolve the variable\n-                            String varValue = resolveVariable(varName);\n+                            String varValue = resolveVariable(varName, buf, startPos, endPos);\n                             if (varValue != null) {\n                                 // recursive replace\n                                 int varLen = varValue.length();\n     }\n \n     /**\n-     * Resolves the specified variable. This method is called whenever a variable\n-     * reference is detected in the source text. It is passed the variable's name\n-     * and must return the corresponding value. This implementation accesses the\n-     * value map using the variable's name as key. Derived classes may override\n-     * this method to implement a different strategy for resolving variables.\n-     *\n-     * @param varName  the name of the variable\n+     * Internal method that resolves the value of a variable.\n+     * <p>\n+     * Most users of this class do not need to call this method. This method is\n+     * called automatically by the substitution process.\n+     * <p>\n+     * Writers of subclasses can override this method if they need to alter\n+     * how each substitution occurs. The method is passed the variable's name\n+     * and must return the corresponding value. This implementation uses the\n+     * {@link #getVariableResolver()} with the variable's name as the key.\n+     *\n+     * @param variableName  the name of the variable, not null\n+     * @param buf  the buffer where the substitution is occurring, not null\n+     * @param startPos  the start position of the variable including the prefix, valid\n+     * @param endPos  the end position of the variable including the suffix, valid\n      * @return the variable's value or <b>null</b> if the variable is unknown\n      */\n-    protected String resolveVariable(String varName) {\n+    protected String resolveVariable(String variableName, StrBuilder buf, int startPos, int endPos) {\n         VariableResolver lookup = getVariableResolver();\n         if (lookup == null) {\n             return null;\n         }\n-        return lookup.resolveVariable(varName);\n+        return lookup.resolveVariable(variableName);\n     }\n \n     // Escape\n--- a/src/test/org/apache/commons/lang/text/StrSubstitutorTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrSubstitutorTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n-\n-import org.apache.commons.lang.text.StrSubstitutor.MapVariableResolver;\n \n /**\n  * Test class for StrSubstitutor.\n     }\n \n     //-----------------------------------------------------------------------\n-//    /**\n-//     * Tests source texts with nothing to replace.\n-//     */\n-//    public void testReplaceNothing() {\n-//        assertNull(this.getFormat().replace((char[]) null));\n-//        assertNull(this.getFormat().replace((String) null));\n-//        assertNull(this.getFormat().replace((Object) null));\n-//        assertEquals(\"Nothing to replace.\", this.getFormat().replace(\"Nothing to replace.\"));\n-//        assertEquals(\"42\", this.getFormat().replace(new Integer(42)));\n-//        assertEquals(0, this.getFormat().replace((StrBuilder) null));\n-//    }\n-//\n-////    /**\n-////     * Tests operating on objects.\n-////     */\n-////    public void testReplaceObject() {\n-////        this.getValueMap().put(\"value\", new Integer(42));\n-////        assertEquals(new Integer(42), this.getFormat().replaceObject(\"${value}\"));\n-////        assertEquals(\"The answer is 42.\", this.getFormat().replaceObject(\"The answer is ${value}.\"));\n-////    }\n-//\n-//    /**\n-//     * Tests interpolation with system properties.\n-//     */\n-//    public void testReplaceSystemProperties() {\n-//        StringBuffer buf = new StringBuffer();\n-//        buf.append(\"Hi \").append(System.getProperty(\"user.name\"));\n-//        buf.append(\", you are working with \");\n-//        buf.append(System.getProperty(\"os.name\"));\n-//        buf.append(\", your home directory is \");\n-//        buf.append(System.getProperty(\"user.home\")).append('.');\n-//        assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties(\"Hi ${user.name}, you are \"\n-//            + \"working with ${os.name}, your home \"\n-//            + \"directory is ${user.home}.\"));\n-//    }\n-//\n+    /**\n+     * Tests protected.\n+     */\n+    public void testResolveVariable() {\n+        final StrBuilder builder = new StrBuilder(\"Hi ${name}!\");\n+        Map map = new HashMap();\n+        map.put(\"name\", \"commons\");\n+        StrSubstitutor sub = new StrSubstitutor(map) {\n+            protected String resolveVariable(String variableName, StrBuilder buf, int startPos, int endPos) {\n+                assertEquals(\"name\", variableName);\n+                assertSame(builder, buf);\n+                assertEquals(3, startPos);\n+                assertEquals(10, endPos);\n+                return \"jakarta\";\n+            }\n+        };\n+        sub.replace(builder);\n+        assertEquals(\"Hi jakarta!\", builder.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests static.\n+     */\n+    public void testStaticReplace() {\n+        Map map = new HashMap();\n+        map.put(\"name\", \"commons\");\n+        assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi ${name}!\", map));\n+    }\n+\n+    /**\n+     * Tests static.\n+     */\n+    public void testStaticReplacePrefixSuffix() {\n+        Map map = new HashMap();\n+        map.put(\"name\", \"commons\");\n+        assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi <name>!\", map, \"<\", \">\"));\n+    }\n+\n+    /**\n+     * Tests interpolation with system properties.\n+     */\n+    public void testStaticReplaceSystemProperties() {\n+        StrBuilder buf = new StrBuilder();\n+        buf.append(\"Hi \").append(System.getProperty(\"user.name\"));\n+        buf.append(\", you are working with \");\n+        buf.append(System.getProperty(\"os.name\"));\n+        buf.append(\", your home directory is \");\n+        buf.append(System.getProperty(\"user.home\")).append('.');\n+        assertEquals(buf.toString(), StrSubstitutor.replaceSystemProperties(\"Hi ${user.name}, you are \"\n+            + \"working with ${os.name}, your home \"\n+            + \"directory is ${user.home}.\"));\n+    }\n+\n     //-----------------------------------------------------------------------\n     private void doTestReplace(String expectedResult, String replaceTemplate, boolean substring) {\n         String expectedShortResult = expectedResult.substring(1, expectedResult.length() - 1);", "timestamp": 1154992001, "metainfo": ""}