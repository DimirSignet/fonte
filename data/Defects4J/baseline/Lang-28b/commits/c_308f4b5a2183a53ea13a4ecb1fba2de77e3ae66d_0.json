{"sha": "308f4b5a2183a53ea13a4ecb1fba2de77e3ae66d", "log": "Cloning the output from getExcludeFieldNames, adjusting the code to use the attribute directly so it doesn't pay the clone() cost every time and changing the attribute from private to protected to let subclasses retain the ability to modify the field names (if that is why a getExcludeFieldNames method existed). Document in LANG-489  ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n     /**\n      * Which field names to exclude from output. Intended for fields like <code>\"password\"</code>.\n      */\n-    private String[] excludeFieldNames;\n+    protected String[] excludeFieldNames;\n \n     /**\n      * The last super class to stop appending fields for.\n             return false;\n         }\n         if (Modifier.isStatic(field.getModifiers()) && !this.isAppendStatics()) {\n-            // Rject static fields.\n+            // Reject static fields.\n             return false;\n         }\n-        if (this.getExcludeFieldNames() != null\n-            && Arrays.binarySearch(this.getExcludeFieldNames(), field.getName()) >= 0) {\n+        if (this.excludeFieldNames != null\n+            && Arrays.binarySearch(this.excludeFieldNames, field.getName()) >= 0) {\n             // Reject fields from the getExcludeFieldNames list.\n             return false;\n         }\n      * @return Returns the excludeFieldNames.\n      */\n     public String[] getExcludeFieldNames() {\n-        return this.excludeFieldNames;\n+        return this.excludeFieldNames.clone();\n     }\n \n     /**", "timestamp": 1242462367, "metainfo": ""}