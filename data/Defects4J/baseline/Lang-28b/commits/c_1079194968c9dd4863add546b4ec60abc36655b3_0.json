{"sha": "1079194968c9dd4863add546b4ec60abc36655b3", "log": "Update Javadoc to better describe the behaviour and use cases of the exceptions   ", "commit": "\n--- a/src/java/org/apache/commons/lang/IllegalClassException.java\n+++ b/src/java/org/apache/commons/lang/IllegalClassException.java\n package org.apache.commons.lang;\n \n /**\n- * <p>Thrown when an object is an instance of an unexpected type (a class or interface).</p>\n+ * <p>Thrown when an object is an instance of an unexpected type (a class or interface).\n+ * This exception supplements the standard <code>IllegalArgumentException</code>\n+ * by providing a more semantically rich description of the problem.</p>\n+ * \n+ * <p><code>IllegalClassException</code> represents the case where a method takes\n+ * in a genericly typed parameter like Object (typically because it has to due to some\n+ * other interface it implements), but this implementation only actually accepts a specific\n+ * type, for example String. This exception would be used in place of\n+ * <code>IllegalArgumentException</code>, yet it still extends it.</p>\n+ * \n+ * <pre>\n+ * public void foo(Object obj) {\n+ *   if (obj instanceof String == false) {\n+ *     throw new IllegalClassException(String.class, obj);\n+ *   }\n+ *   // do something with the string\n+ * }\n+ * </pre>\n  * \n  * @author Matthew Hawthorne\n  * @author Gary Gregory\n+ * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: IllegalClassException.java,v 1.6 2004/02/18 22:59:50 ggregory Exp $\n+ * @version $Id: IllegalClassException.java,v 1.7 2004/10/15 20:55:01 scolebourne Exp $\n  */\n public class IllegalClassException extends IllegalArgumentException {\n \n     /**\n-     * <p>Instantiates with the specified types (classes or interfaces).</p>\n+     * <p>Instantiates with the expected type, and actual object.</p>\n+     * \n+     * @param expected  the expected type\n+     * @param actual  the actual object\n+     * @since 2.1\n+     */\n+    public IllegalClassException(Class expected, Object actual) {\n+        super(\n+            \"Expected: \"\n+                + safeGetClassName(expected)\n+                + \", actual: \"\n+                + (actual == null ? \"null\" : actual.getClass().getName()));\n+    }\n+\n+    /**\n+     * <p>Instantiates with the expected and actual types.</p>\n      * \n      * @param expected  the expected type\n      * @param actual  the actual type\n--- a/src/java/org/apache/commons/lang/IncompleteArgumentException.java\n+++ b/src/java/org/apache/commons/lang/IncompleteArgumentException.java\n import java.util.Arrays;\n \n /**\n- * <p>Thrown to indicate an incomplete argument to a method.</p>\n+ * <p>Thrown to indicate an incomplete argument to a method.\n+ * This exception supplements the standard <code>IllegalArgumentException</code>\n+ * by providing a more semantically rich description of the problem.</p>\n+ * \n+ * <p><code>IncompleteArgumentException</code> represents the case where a method takes\n+ * in a parameter that has a number of properties, some of which have not been set.\n+ * A case might be a search requirements bean that must have three properties set\n+ * in order for the method to run, but only one is actually set.\n+ * This exception would be used in place of\n+ * <code>IllegalArgumentException</code>, yet it still extends it.</p>\n+ * \n+ * <pre>\n+ * public void foo(PersonSearcher search) {\n+ *   if (search.getSurname() == null ||\n+ *       search.getForename() == null ||\n+ *       search.getSex() == null) {\n+ *     throw new IncompleteArgumentException(\"search\");\n+ *   }\n+ *   // do something with the searcher\n+ * }\n+ * </pre>\n  * \n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: IncompleteArgumentException.java,v 1.6 2004/02/18 22:59:50 ggregory Exp $\n+ * @version $Id: IncompleteArgumentException.java,v 1.7 2004/10/15 20:55:01 scolebourne Exp $\n  */\n public class IncompleteArgumentException extends IllegalArgumentException {\n \n--- a/src/java/org/apache/commons/lang/NotImplementedException.java\n+++ b/src/java/org/apache/commons/lang/NotImplementedException.java\n import org.apache.commons.lang.exception.NestableDelegate;\n \n /**\n- * <p>Thrown to indicate that a block of code has not been implemented.</p>\n+ * <p>Thrown to indicate that a block of code has not been implemented.\n+ * This exception supplements <code>UnsupportedOperationException</code>\n+ * by providing a more semantically rich description of the problem.</p>\n+ * \n+ * <p><code>NotImplementedException</code> represents the case where the\n+ * author has yet to implement the logic at this point in the program.\n+ * This can act as an exception based TODO tag.\n+ * Because this logic might be within a catch block, this exception\n+ * suports exception chaining.</p>\n+ * \n+ * <pre>\n+ * public void foo() {\n+ *   try {\n+ *     // do something that throws an Exception\n+ *   } catch (Exception ex) {\n+ *     // don't know what to do here yet\n+ *     throw new NotImplementedException(\"TODO\", ex);\n+ *   }\n+ * }\n+ * </pre>\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: NotImplementedException.java,v 1.8 2004/03/16 22:42:58 scolebourne Exp $\n+ * @version $Id: NotImplementedException.java,v 1.9 2004/10/15 20:55:01 scolebourne Exp $\n  */\n public class NotImplementedException\n         extends UnsupportedOperationException implements Nestable {\n--- a/src/java/org/apache/commons/lang/NullArgumentException.java\n+++ b/src/java/org/apache/commons/lang/NullArgumentException.java\n \n /**\n  * <p>Thrown to indicate that an argument was <code>null</code> and should\n- * not have been.</p>\n+ * not have been.\n+ * This exception supplements the standard <code>IllegalArgumentException</code>\n+ * by providing a more semantically rich description of the problem.</p>\n+ * \n+ * <p><code>NullArgumentException</code> represents the case where a method takes\n+ * in a parameter that must not be <code>null</code>.\n+ * Some coding standards would use <code>NullPointerException</code> for this case,\n+ * others will use <code>IllegalArgumentException</code>.\n+ * Thus this exception would be used in place of\n+ * <code>IllegalArgumentException</code>, yet it still extends it.</p>\n+ * \n+ * <pre>\n+ * public void foo(String str) {\n+ *   if (str == null) {\n+ *     throw new NullArgumentException(\"str\");\n+ *   }\n+ *   // do something with the string\n+ * }\n+ * </pre>\n  * \n  * @author Matthew Hawthorne\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: NullArgumentException.java,v 1.7 2004/02/18 22:59:50 ggregory Exp $\n+ * @version $Id: NullArgumentException.java,v 1.8 2004/10/15 20:55:01 scolebourne Exp $\n  */\n public class NullArgumentException extends IllegalArgumentException {\n \n     * @param argName  the name of the argument that was <code>null</code>.\n     */\n     public NullArgumentException(String argName) {\n-        super(argName + \" must not be null.\");\n+        super((argName == null ? \"Argument\" : argName) + \" must not be null.\");\n     }\n+\n }\n--- a/src/java/org/apache/commons/lang/UnhandledException.java\n+++ b/src/java/org/apache/commons/lang/UnhandledException.java\n import org.apache.commons.lang.exception.NestableRuntimeException;\n \n /**\n- * Thrown when it is impossible or undesirable to consume\n- * or throw a checked exception.\n+ * <p>Thrown when it is impossible or undesirable to consume or throw a checked exception.</p>\n+ * This exception supplements the standard exception classes by providing a more\n+ * semantically rich description of the problem.</p>\n+ * \n+ * <p><code>UnhandledException</code> represents the case where a method has to deal\n+ * with a checked exception but does not wish to.\n+ * Instead, the checked exception is rethrown in this unchecked wrapper.</p>\n+ * \n+ * <pre>\n+ * public void foo() {\n+ *   try {\n+ *     // do something that throws IOException\n+ *   } catch (IOException ex) {\n+ *     // don't want to or can't throw IOException from foo()\n+ *     throw new UnhandledException(ex);\n+ *   }\n+ * }\n+ * </pre>\n  *\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: UnhandledException.java,v 1.5 2004/02/18 22:59:50 ggregory Exp $\n+ * @version $Id: UnhandledException.java,v 1.6 2004/10/15 20:55:01 scolebourne Exp $\n  */\n public class UnhandledException extends NestableRuntimeException {\n ", "timestamp": 1097873701, "metainfo": ""}