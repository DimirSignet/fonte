{"sha": "528036555cd76f497ac58b6930b85de78017d43e", "log": "Add toType methods to return the primitive wrapper object  ", "commit": "\n--- a/src/java/org/apache/commons/lang/mutable/MutableByte.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableByte.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets this mutable as an instance of Byte.\n+     *\n+     * @return a Byte instance containing the value from this mutable\n+     */\n+    public Byte toByte() {\n+        return new Byte(byteValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n      * is not <code>null</code> and is a <code>MutableByte</code> object that contains the same <code>byte</code>\n      * value as this object.\n--- a/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n      */\n     public boolean isInfinite() {\n         return Double.isInfinite(value);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets this mutable as an instance of Double.\n+     *\n+     * @return a Double instance containing the value from this mutable\n+     */\n+    public Double toDouble() {\n+        return new Double(doubleValue());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n         return Float.isInfinite(value);\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets this mutable as an instance of Float.\n+     *\n+     * @return a Float instance containing the value from this mutable\n+     */\n+    public Float toFloat() {\n+        return new Float(floatValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Compares this object against some other object. The result is <code>true</code> if and only if the argument is\n      * not <code>null</code> and is a <code>Float</code> object that represents a <code>float</code> that has the\n--- a/src/java/org/apache/commons/lang/mutable/MutableInt.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableInt.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets this mutable as an instance of Integer.\n+     *\n+     * @return a Integer instance containing the value from this mutable\n+     */\n+    public Integer toInteger() {\n+        return new Integer(intValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Compares this object to the specified object. The result is <code>true</code> if and only if the argument is\n      * not <code>null</code> and is an <code>MutableInt</code> object that contains the same <code>int</code> value\n      * as this object.\n--- a/src/java/org/apache/commons/lang/mutable/MutableLong.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableLong.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets this mutable as an instance of Long.\n+     *\n+     * @return a Long instance containing the value from this mutable\n+     */\n+    public Long toLong() {\n+        return new Long(longValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n      * is not <code>null</code> and is a <code>MutableLong</code> object that contains the same <code>long</code>\n      * value as this object.\n--- a/src/java/org/apache/commons/lang/mutable/MutableShort.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableShort.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets this mutable as an instance of Short.\n+     *\n+     * @return a Short instance containing the value from this mutable\n+     */\n+    public Short toShort() {\n+        return new Short(shortValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n      * is not <code>null</code> and is a <code>MutableShort</code> object that contains the same <code>short</code>\n      * value as this object.\n--- a/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n         assertEquals( 1L, mutNum.longValue() );\n     }\n \n+    public void testToByte() {\n+        assertEquals(new Byte((byte) 0), new MutableByte((byte) 0).toByte());\n+        assertEquals(new Byte((byte) 123), new MutableByte((byte) 123).toByte());\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0\", new MutableByte((byte) 0).toString());\n         assertEquals(\"10\", new MutableByte((byte) 10).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n         assertEquals( 1L, mutNum.longValue() );\n     }\n \n+    public void testToDouble() {\n+        assertEquals(new Double(0d), new MutableDouble(0d).toDouble());\n+        assertEquals(new Double(12.3d), new MutableDouble(12.3d).toDouble());\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0.0\", new MutableDouble(0d).toString());\n         assertEquals(\"10.0\", new MutableDouble(10d).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n         assertEquals( 1L, mutNum.longValue() );\n     }\n \n+    public void testToFloat() {\n+        assertEquals(new Float(0f), new MutableFloat(0f).toFloat());\n+        assertEquals(new Float(12.3f), new MutableFloat(12.3f).toFloat());\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0.0\", new MutableFloat(0f).toString());\n         assertEquals(\"10.0\", new MutableFloat(10f).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableIntTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableIntTest.java\n         assertEquals( 1L, mutNum.longValue() );\n     }\n \n+    public void testToInteger() {\n+        assertEquals(new Integer(0), new MutableInt(0).toInteger());\n+        assertEquals(new Integer(123), new MutableInt(123).toInteger());\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0\", new MutableInt(0).toString());\n         assertEquals(\"10\", new MutableInt(10).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n         assertEquals( 1L, mutNum.longValue() );\n     }\n \n+    public void testToLong() {\n+        assertEquals(new Long(0L), new MutableLong(0L).toLong());\n+        assertEquals(new Long(123L), new MutableLong(123L).toLong());\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0\", new MutableLong(0).toString());\n         assertEquals(\"10\", new MutableLong(10).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n         assertEquals( 1L, mutNum.longValue() );\n     }\n \n+    public void testToShort() {\n+        assertEquals(new Short((short) 0), new MutableShort((short) 0).toShort());\n+        assertEquals(new Short((short) 123), new MutableShort((short) 123).toShort());\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0\", new MutableShort((short) 0).toString());\n         assertEquals(\"10\", new MutableShort((short) 10).toString());", "timestamp": 1125151327, "metainfo": ""}