{"sha": "f1f885f17f9039702cc258fb7bc7688755fc0229", "log": "ArrayUtils generics  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * <p>Operations on arrays, primitive arrays (like <code>int[]</code>) and\n  * primitive wrapper arrays (like <code>Integer[]</code>).</p>\n- * \n+ *\n  * <p>This class tries to handle <code>null</code> input gracefully.\n  * An exception will not be thrown for a <code>null</code>\n  * array input. However, an Object array that contains a <code>null</code>\n     public ArrayUtils() {\n       super();\n     }\n-    \n+\n     // Basic methods handling multi-dimensional arrays\n     //-----------------------------------------------------------------------\n     /**\n      * multi-dimensional primitive arrays.</p>\n      *\n      * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>\n-     * \n+     *\n      * @param array  the array to get a toString for, may be <code>null</code>\n      * @return a String representation of the array, '{}' if null array input\n      */\n      * multi-dimensional primitive arrays.</p>\n      *\n      * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>\n-     * \n+     *\n      * @param array  the array to get a toString for, may be <code>null</code>\n      * @param stringIfNull  the String to return if the array is <code>null</code>\n      * @return a String representation of the array\n-     */    \n+     */\n+    @SuppressWarnings(\"unchecked\")\n     public static String toString(Object array, String stringIfNull) {\n         if (array == null) {\n             return stringIfNull;\n \n     /**\n      * <p>Get a hashCode for an array handling multi-dimensional arrays correctly.</p>\n-     * \n+     *\n      * <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>\n-     * \n+     *\n      * @param array  the array to get a hashCode for, may be <code>null</code>\n      * @return a hashCode for the array, zero if null array input\n      */\n     /**\n      * <p>Compares two arrays, using equals(), handling multi-dimensional arrays\n      * correctly.</p>\n-     * \n+     *\n      * <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>\n-     * \n+     *\n      * @param array1  the left hand array to compare, may be <code>null</code>\n      * @param array2  the right hand array to compare, may be <code>null</code>\n      * @return <code>true</code> if the arrays are equal\n      *     {\"GREEN\", \"#00FF00\"},\n      *     {\"BLUE\", \"#0000FF\"}});\n      * </pre>\n-     * \n+     *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      *\n      * @param array  an array whose elements are either a {@link java.util.Map.Entry} or\n      *\n      * <p>The objects in the array are not cloned, thus there is no special\n      * handling for multi-dimensional arrays.</p>\n-     * \n+     *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to shallow clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n-    public static Object[] clone(Object[] array) {\n+    public static <T> T[] clone(T[] array) {\n         if (array == null) {\n             return null;\n         }\n      * <code>null</code>.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n      * <code>null</code>.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n      * <code>null</code>.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n      * <code>null</code>.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n      * <code>null</code>.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n      * <code>null</code>.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n      * <code>null</code>.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n      * <code>null</code>.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n      *      the start and end indices.\n      * @since 2.1\n      */\n-    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> T[] subarray(T[] array, int startIndexInclusive, int endIndexExclusive) {\n         if (array == null) {\n             return null;\n         }\n         int newSize = endIndexExclusive - startIndexInclusive;\n         Class<?> type = array.getClass().getComponentType();\n         if (newSize <= 0) {\n-            return (Object[]) Array.newInstance(type, 0);\n-        }\n-        Object[] subarray = (Object[]) Array.newInstance(type, newSize);\n+            return (T[]) Array.newInstance(type, 0);\n+        }\n+        T[] subarray = (T[]) Array.newInstance(type, newSize);\n         System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n         return subarray;\n     }\n      * <code>null</code> arrays as length <code>0</code>.\n      *\n      * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n-     * \n+     *\n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n-     */    \n+     */\n     public static boolean isSameLength(Object[] array1, Object[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n+     *\n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n+     *\n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n+     *\n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n+     *\n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n+     *\n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n+     *\n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n+     *\n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n      * <code>null</code> arrays as length <code>0</code>.</p>\n-     * \n+     *\n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n      * @return <code>true</code> if length of arrays matches, treating\n     /**\n      * <p>Checks whether two arrays are the same type taking into account\n      * multi-dimensional arrays.</p>\n-     * \n+     *\n      * @param array1 the first array, must not be <code>null</code>\n      * @param array2 the second array, must not be <code>null</code>\n      * @return <code>true</code> if type of arrays matches\n      * @throws IllegalArgumentException if either array is <code>null</code>\n-     */    \n+     */\n     public static boolean isSameType(Object array1, Object array2) {\n         if (array1 == null || array2 == null) {\n             throw new IllegalArgumentException(\"The Array must not be null\");\n \n     // Reverse\n     //-----------------------------------------------------------------------\n-    /** \n+    /**\n      * <p>Reverses the order of the given array.</p>\n      *\n      * <p>There is no special handling for multi-dimensional arrays.</p>\n      *\n      * <p>This method does nothing for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(Object[] array) {\n \n     /**\n      * <p>Reverses the order of the given array.</p>\n-     * \n+     *\n      * <p>This method does nothing for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(long[] array) {\n \n     /**\n      * <p>Reverses the order of the given array.</p>\n-     * \n+     *\n      * <p>This method does nothing for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(int[] array) {\n \n     /**\n      * <p>Reverses the order of the given array.</p>\n-     * \n+     *\n      * <p>This method does nothing for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(short[] array) {\n \n     /**\n      * <p>Reverses the order of the given array.</p>\n-     * \n+     *\n      * <p>This method does nothing for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(char[] array) {\n \n     /**\n      * <p>Reverses the order of the given array.</p>\n-     * \n+     *\n      * <p>This method does nothing for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(byte[] array) {\n \n     /**\n      * <p>Reverses the order of the given array.</p>\n-     * \n+     *\n      * <p>This method does nothing for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(double[] array) {\n \n     /**\n      * <p>Reverses the order of the given array.</p>\n-     * \n+     *\n      * <p>This method does nothing for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(float[] array) {\n \n     /**\n      * <p>Reverses the order of the given array.</p>\n-     * \n+     *\n      * <p>This method does nothing for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to reverse, may be <code>null</code>\n      */\n     public static void reverse(boolean[] array) {\n \n     // IndexOf search\n     // ----------------------------------------------------------------------\n-    \n+\n     // Object IndexOf\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Finds the index of the given object in the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n-     * @return the index of the object within the array, \n+     * @return the index of the object within the array,\n      *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n      */\n     public static int indexOf(Object[] array, Object objectToFind) {\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n      * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @param startIndex  the index to start searching at\n                     return i;\n                 }\n             }\n-        } else {\n+        } else {//TODO add quick type compatibility check\n             for (int i = startIndex; i < array.length; i++) {\n                 if (objectToFind.equals(array[i])) {\n                     return i;\n      * <p>Finds the last index of the given object within the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @return the last index of the object within the array,\n      *\n      * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than\n      * the array length will search from the end of the array.</p>\n-     * \n+     *\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param objectToFind  the object to find, may be <code>null</code>\n      * @param startIndex  the start index to travers backwards from\n                     return i;\n                 }\n             }\n-        } else {\n+        } else {//TODO as above\n             for (int i = startIndex; i >= 0; i--) {\n                 if (objectToFind.equals(array[i])) {\n                     return i;\n      * <p>Checks if the object is in the given array.</p>\n      *\n      * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n+     *\n      * @param array  the array to search through\n      * @param objectToFind  the object to find\n      * @return <code>true</code> if the array contains the object\n      * <p>Finds the index of the given value in the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n      * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n      *\n      * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n-     * \n+     *\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * <p>Checks if the value is in the given array.</p>\n      *\n      * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n+     *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      * <p>Finds the index of the given value in the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n      * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n      *\n      * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n-     * \n+     *\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * <p>Checks if the value is in the given array.</p>\n      *\n      * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n+     *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      * <p>Finds the index of the given value in the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n      * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n-     * \n+     *\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * <p>Checks if the value is in the given array.</p>\n      *\n      * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n+     *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      * <p>Finds the index of the given value in the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n      * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n      *\n      * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n-     * \n+     *\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * <p>Checks if the value is in the given array.</p>\n      *\n      * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n+     *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      * <p>Finds the index of the given value in the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n      * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n-     * \n+     *\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * <p>Checks if the value is in the given array.</p>\n      *\n      * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n+     *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      * <p>Finds the index of the given value in the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n      * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param tolerance tolerance of the search\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n      * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n      * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n      * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param tolerance tolerance of the search\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n-     * \n+     *\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n-     * \n+     *\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * <p>Checks if the value is in the given array.</p>\n      *\n      * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n+     *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n \n     /**\n      * <p>Checks if a value falling within the given tolerance is in the\n-     * given array.  If the array contains a value within the inclusive range \n+     * given array.  If the array contains a value within the inclusive range\n      * defined by (value - tolerance) to (value + tolerance).</p>\n      *\n      * <p>The method returns <code>false</code> if a <code>null</code> array\n      * <p>Finds the index of the given value in the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n      * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the \n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n-     * \n+     *\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * <p>Checks if the value is in the given array.</p>\n      *\n      * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n+     *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      * <p>Finds the index of the given value in the array.</p>\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n      * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     * \n+     *\n      * @param array  the array to search through for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n     /**\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) if \n+     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) if\n      * <code>null</code> array input.</p>\n-     * \n+     *\n      * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n      *\n      * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n      *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than \n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than\n      * the array length will search from the end of the array.</p>\n-     * \n+     *\n      * @param array  the array to traverse for looking for the object, may be <code>null</code>\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * <p>Checks if the value is in the given array.</p>\n      *\n      * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n-     * \n+     *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      * <p>Converts an array of object Characters to primitives.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Character</code> array, may be <code>null</code>\n      * @return a <code>char</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n \n     /**\n      * <p>Converts an array of object Character to primitives handling <code>null</code>.</p>\n-     * \n+     *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Character</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return a <code>char</code> array, <code>null</code> if null array input\n         }\n         return result;\n     }\n-    \n+\n     /**\n      * <p>Converts an array of primitive chars to objects.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array a <code>char</code> array\n      * @return a <code>Character</code> array, <code>null</code> if null array input\n      */\n         }\n         final Character[] result = new Character[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            result[i] = new Character(array[i]);\n+            result[i] = Character.valueOf(array[i]);\n         }\n         return result;\n-     }    \n-    \n+     }\n+\n     // Long array converters\n     // ----------------------------------------------------------------------\n     /**\n      * <p>Converts an array of object Longs to primitives.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Long</code> array, may be <code>null</code>\n      * @return a <code>long</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n         }\n         return result;\n     }\n-    \n+\n     /**\n      * <p>Converts an array of object Long to primitives handling <code>null</code>.</p>\n-     * \n+     *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Long</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return a <code>long</code> array, <code>null</code> if null array input\n         }\n         return result;\n     }\n-    \n+\n     /**\n      * <p>Converts an array of primitive longs to objects.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>long</code> array\n      * @return a <code>Long</code> array, <code>null</code> if null array input\n      */\n         }\n         final Long[] result = new Long[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            result[i] = new Long(array[i]);\n+            result[i] = Long.valueOf(array[i]);\n         }\n         return result;\n     }\n      * <p>Converts an array of object Integers to primitives.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Integer</code> array, may be <code>null</code>\n      * @return an <code>int</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n \n     /**\n      * <p>Converts an array of object Integer to primitives handling <code>null</code>.</p>\n-     * \n+     *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Integer</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return an <code>int</code> array, <code>null</code> if null array input\n      * <p>Converts an array of primitive ints to objects.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  an <code>int</code> array\n      * @return an <code>Integer</code> array, <code>null</code> if null array input\n      */\n         }\n         final Integer[] result = new Integer[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            result[i] = new Integer(array[i]);\n+            result[i] = Integer.valueOf(array[i]);\n         }\n         return result;\n     }\n-    \n+\n     // Short array converters\n     // ----------------------------------------------------------------------\n     /**\n      * <p>Converts an array of object Shorts to primitives.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Short</code> array, may be <code>null</code>\n      * @return a <code>byte</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n \n     /**\n      * <p>Converts an array of object Short to primitives handling <code>null</code>.</p>\n-     * \n+     *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Short</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return a <code>byte</code> array, <code>null</code> if null array input\n      * <p>Converts an array of primitive shorts to objects.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>short</code> array\n      * @return a <code>Short</code> array, <code>null</code> if null array input\n      */\n         }\n         final Short[] result = new Short[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            result[i] = new Short(array[i]);\n+            result[i] = Short.valueOf(array[i]);\n         }\n         return result;\n-    }    \n+    }\n \n     // Byte array converters\n     // ----------------------------------------------------------------------\n      * <p>Converts an array of object Bytes to primitives.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Byte</code> array, may be <code>null</code>\n      * @return a <code>byte</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n \n     /**\n      * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p>\n-     * \n+     *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Byte</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return a <code>byte</code> array, <code>null</code> if null array input\n      * <p>Converts an array of primitive bytes to objects.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>byte</code> array\n      * @return a <code>Byte</code> array, <code>null</code> if null array input\n      */\n             result[i] = Byte.valueOf(array[i]);\n         }\n         return result;\n-    }  \n-    \n+    }\n+\n     // Double array converters\n     // ----------------------------------------------------------------------\n     /**\n      * <p>Converts an array of object Doubles to primitives.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Double</code> array, may be <code>null</code>\n      * @return a <code>double</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n \n     /**\n      * <p>Converts an array of object Doubles to primitives handling <code>null</code>.</p>\n-     * \n+     *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Double</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return a <code>double</code> array, <code>null</code> if null array input\n      * <p>Converts an array of primitive doubles to objects.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>double</code> array\n      * @return a <code>Double</code> array, <code>null</code> if null array input\n      */\n         }\n         final Double[] result = new Double[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            result[i] = new Double(array[i]);\n+            result[i] = Double.valueOf(array[i]);\n         }\n         return result;\n     }\n      * <p>Converts an array of object Floats to primitives.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Float</code> array, may be <code>null</code>\n      * @return a <code>float</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n \n     /**\n      * <p>Converts an array of object Floats to primitives handling <code>null</code>.</p>\n-     * \n+     *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Float</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return a <code>float</code> array, <code>null</code> if null array input\n      * <p>Converts an array of primitive floats to objects.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>float</code> array\n      * @return a <code>Float</code> array, <code>null</code> if null array input\n      */\n         }\n         final Float[] result = new Float[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            result[i] = new Float(array[i]);\n+            result[i] = Float.valueOf(array[i]);\n         }\n         return result;\n     }\n      * <p>Converts an array of object Booleans to primitives.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Boolean</code> array, may be <code>null</code>\n      * @return a <code>boolean</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n \n     /**\n      * <p>Converts an array of object Booleans to primitives handling <code>null</code>.</p>\n-     * \n+     *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>Boolean</code> array, may be <code>null</code>\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return a <code>boolean</code> array, <code>null</code> if null array input\n      * <p>Converts an array of primitive booleans to objects.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     * \n+     *\n      * @param array  a <code>boolean</code> array\n      * @return a <code>Boolean</code> array, <code>null</code> if null array input\n      */\n      *\n      * @param array1  the first array whose elements are added to the new array, may be <code>null</code>\n      * @param array2  the second array whose elements are added to the new array, may be <code>null</code>\n-     * @return The new array, <code>null</code> if <code>null</code> array inputs. \n+     * @return The new array, <code>null</code> if <code>null</code> array inputs.\n      *      The type of the new array is the type of the first array.\n      * @since 2.1\n      */\n     public static Object[] addAll(Object[] array1, Object[] array2) {\n+        /* this method could be generic as <T, U extends T> T[] addAll(T[], U[]), but if array1 == null,\n+         * clone array2, then caller tries to add T objects to the U clone, could be a problem.\n+         * Could add another version of the method where the first array cannot be null... :/\n+         */\n         if (array1 == null) {\n             return clone(array2);\n         } else if (array2 == null) {\n      * <p>Copies the given array and adds the given element at the end of the new array.</p>\n      *\n      * <p>The new array contains the same elements of the input\n-     * array plus the given element in the last position. The component type of \n+     * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add(null, null)      = [null]\n      * ArrayUtils.add(null, \"a\")       = [\"a\"]\n      * ArrayUtils.add([\"a\"], \"b\")      = [\"a\", \"b\"]\n      * ArrayUtils.add([\"a\", \"b\"], \"c\") = [\"a\", \"b\", \"c\"]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to \"add\" the element to, may be <code>null</code>\n      * @param element  the object to add\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      */\n-    public static Object[] add(Object[] array, Object element) {\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> T[] add(T[] array, T element) {\n         Class<?> type = array != null ? array.getClass() : (element != null ? element.getClass() : Object.class);\n-        Object[] newArray = (Object[]) copyArrayGrow1(array, type);\n+        T[] newArray = (T[]) copyArrayGrow1(array, type);\n         newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n-    \n+\n     /**\n      * <p>Copies the given array and adds the given element at the end of the new array.</p>\n      *\n      * <p>The new array contains the same elements of the input\n-     * array plus the given element in the last position. The component type of \n+     * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add(null, true)          = [true]\n      * ArrayUtils.add([true], false)       = [true, false]\n      * ArrayUtils.add([true, false], true) = [true, false, true]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to copy and add the element to, may be <code>null</code>\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n         newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n-    \n+\n     /**\n      * <p>Copies the given array and adds the given element at the end of the new array.</p>\n      *\n      * <p>The new array contains the same elements of the input\n-     * array plus the given element in the last position. The component type of \n+     * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add(null, 0)   = [0]\n      * ArrayUtils.add([1], 0)    = [1, 0]\n      * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to copy and add the element to, may be <code>null</code>\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n         newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n-    \n+\n     /**\n      * <p>Copies the given array and adds the given element at the end of the new array.</p>\n      *\n      * <p>The new array contains the same elements of the input\n-     * array plus the given element in the last position. The component type of \n+     * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add(null, '0')       = ['0']\n      * ArrayUtils.add(['1'], '0')      = ['1', '0']\n      * ArrayUtils.add(['1', '0'], '1') = ['1', '0', '1']\n      * </pre>\n-     * \n+     *\n      * @param array  the array to copy and add the element to, may be <code>null</code>\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n         newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n-    \n+\n     /**\n      * <p>Copies the given array and adds the given element at the end of the new array.</p>\n      *\n      * <p>The new array contains the same elements of the input\n-     * array plus the given element in the last position. The component type of \n+     * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add(null, 0)   = [0]\n      * ArrayUtils.add([1], 0)    = [1, 0]\n      * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to copy and add the element to, may be <code>null</code>\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n         newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n-    \n+\n     /**\n      * <p>Copies the given array and adds the given element at the end of the new array.</p>\n      *\n      * <p>The new array contains the same elements of the input\n-     * array plus the given element in the last position. The component type of \n+     * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add(null, 0)   = [0]\n      * ArrayUtils.add([1], 0)    = [1, 0]\n      * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to copy and add the element to, may be <code>null</code>\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n         newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n-    \n+\n     /**\n      * <p>Copies the given array and adds the given element at the end of the new array.</p>\n      *\n      * <p>The new array contains the same elements of the input\n-     * array plus the given element in the last position. The component type of \n+     * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add(null, 0)   = [0]\n      * ArrayUtils.add([1], 0)    = [1, 0]\n      * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to copy and add the element to, may be <code>null</code>\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n         newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n-    \n+\n     /**\n      * <p>Copies the given array and adds the given element at the end of the new array.</p>\n      *\n      * <p>The new array contains the same elements of the input\n-     * array plus the given element in the last position. The component type of \n+     * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add(null, 0)   = [0]\n      * ArrayUtils.add([1], 0)    = [1, 0]\n      * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to copy and add the element to, may be <code>null</code>\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n         newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n-    \n+\n     /**\n      * <p>Copies the given array and adds the given element at the end of the new array.</p>\n      *\n      * <p>The new array contains the same elements of the input\n-     * array plus the given element in the last position. The component type of \n+     * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add(null, 0)   = [0]\n      * ArrayUtils.add([1], 0)    = [1, 0]\n      * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to copy and add the element to, may be <code>null</code>\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n         newArray[newArray.length - 1] = element;\n         return newArray;\n     }\n-    \n-    /**\n-     * Returns a copy of the given array of size 1 greater than the argument. \n+\n+    /**\n+     * Returns a copy of the given array of size 1 greater than the argument.\n      * The last value of the array is left to the default value.\n-     * \n+     *\n      * @param array The array to copy, must not be <code>null</code>.\n-     * @param newArrayComponentType If <code>array</code> is <code>null</code>, create a \n+     * @param newArrayComponentType If <code>array</code> is <code>null</code>, create a\n      * size 1 array of this type.\n      * @return A new copy of the array of size 1 greater than the input.\n-     */    \n+     */\n     private static Object copyArrayGrow1(Object array, Class<?> newArrayComponentType) {\n         if (array != null) {\n             int arrayLength = Array.getLength(array);\n         }\n         return Array.newInstance(newArrayComponentType, 1);\n     }\n-    \n-    /**\n-     * <p>Inserts the specified element at the specified position in the array. \n+\n+    /**\n+     * <p>Inserts the specified element at the specified position in the array.\n      * Shifts the element currently at that position (if any) and any subsequent\n      * elements to the right (adds one to their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array plus the given element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array plus the given element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add(null, 0, null)      = [null]\n      * ArrayUtils.add(null, 0, \"a\")       = [\"a\"]\n      * ArrayUtils.add([\"a\"], 1, \"b\")      = [\"a\", \"b\"]\n      * ArrayUtils.add([\"a\", \"b\"], 3, \"c\") = [\"a\", \"b\", \"c\"]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to add the element to, may be <code>null</code>\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index > array.length).\n      */\n-    public static Object[] add(Object[] array, int index, Object element) {\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> T[] add(T[] array, int index, T element) {\n         Class<?> clss = null;\n         if (array != null) {\n             clss = array.getClass().getComponentType();\n         } else if (element != null) {\n             clss = element.getClass();\n         } else {\n-            return new Object[]{null};\n-        }\n-        return (Object[]) add(array, index, element, clss);\n-    }\n-    \n-    /**\n-     * <p>Inserts the specified element at the specified position in the array. \n+            return (T[]) new Object[] { null };\n+        }\n+        return (T[]) add(array, index, element, clss);\n+    }\n+\n+    /**\n+     * <p>Inserts the specified element at the specified position in the array.\n      * Shifts the element currently at that position (if any) and any subsequent\n      * elements to the right (adds one to their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array plus the given element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array plus the given element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add(null, 0, true)          = [true]\n      * ArrayUtils.add([true], 0, false)       = [false, true]\n      * ArrayUtils.add([false], 1, true)       = [false, true]\n      * ArrayUtils.add([true, false], 1, true) = [true, true, false]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to add the element to, may be <code>null</code>\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index > array.length).\n      */\n     public static boolean[] add(boolean[] array, int index, boolean element) {\n         return (boolean[]) add(array, index, Boolean.valueOf(element), Boolean.TYPE);\n     }\n-    \n-    /**\n-     * <p>Inserts the specified element at the specified position in the array. \n+\n+    /**\n+     * <p>Inserts the specified element at the specified position in the array.\n      * Shifts the element currently at that position (if any) and any subsequent\n      * elements to the right (adds one to their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array plus the given element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array plus the given element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add(null, 0, 'a')            = ['a']\n      * ArrayUtils.add(['a'], 0, 'b')           = ['b', 'a']\n      * ArrayUtils.add(['a', 'b'], 1, 'k')      = ['a', 'k', 'b']\n      * ArrayUtils.add(['a', 'b', 'c'], 1, 't') = ['a', 't', 'b', 'c']\n      * </pre>\n-     * \n+     *\n      * @param array  the array to add the element to, may be <code>null</code>\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index > array.length).\n      */\n     public static char[] add(char[] array, int index, char element) {\n-        return (char[]) add(array, index, new Character(element), Character.TYPE);\n-    }\n-    \n-    /**\n-     * <p>Inserts the specified element at the specified position in the array. \n+        return (char[]) add(array, index, Character.valueOf(element), Character.TYPE);\n+    }\n+\n+    /**\n+     * <p>Inserts the specified element at the specified position in the array.\n      * Shifts the element currently at that position (if any) and any subsequent\n      * elements to the right (adds one to their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array plus the given element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array plus the given element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add([1], 0, 2)         = [2, 1]\n      * ArrayUtils.add([2, 6], 2, 3)      = [2, 6, 3]\n      * ArrayUtils.add([2, 6], 0, 1)      = [1, 2, 6]\n      * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to add the element to, may be <code>null</code>\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index > array.length).\n      */\n     public static byte[] add(byte[] array, int index, byte element) {\n         return (byte[]) add(array, index, Byte.valueOf(element), Byte.TYPE);\n     }\n-    \n-    /**\n-     * <p>Inserts the specified element at the specified position in the array. \n+\n+    /**\n+     * <p>Inserts the specified element at the specified position in the array.\n      * Shifts the element currently at that position (if any) and any subsequent\n      * elements to the right (adds one to their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array plus the given element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array plus the given element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add([1], 0, 2)         = [2, 1]\n      * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]\n      * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]\n      * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to add the element to, may be <code>null</code>\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index > array.length).\n      */\n     public static short[] add(short[] array, int index, short element) {\n-        return (short[]) add(array, index, new Short(element), Short.TYPE);\n-    }\n-    \n-    /**\n-     * <p>Inserts the specified element at the specified position in the array. \n+        return (short[]) add(array, index, Short.valueOf(element), Short.TYPE);\n+    }\n+\n+    /**\n+     * <p>Inserts the specified element at the specified position in the array.\n      * Shifts the element currently at that position (if any) and any subsequent\n      * elements to the right (adds one to their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array plus the given element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array plus the given element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add([1], 0, 2)         = [2, 1]\n      * ArrayUtils.add([2, 6], 2, 10)     = [2, 6, 10]\n      * ArrayUtils.add([2, 6], 0, -4)     = [-4, 2, 6]\n      * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to add the element to, may be <code>null</code>\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index > array.length).\n      */\n     public static int[] add(int[] array, int index, int element) {\n-        return (int[]) add(array, index, new Integer(element), Integer.TYPE);\n-    }\n-    \n-    /**\n-     * <p>Inserts the specified element at the specified position in the array. \n+        return (int[]) add(array, index, Integer.valueOf(element), Integer.TYPE);\n+    }\n+\n+    /**\n+     * <p>Inserts the specified element at the specified position in the array.\n      * Shifts the element currently at that position (if any) and any subsequent\n      * elements to the right (adds one to their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array plus the given element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array plus the given element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add([1L], 0, 2L)           = [2L, 1L]\n      * ArrayUtils.add([2L, 6L], 2, 10L)      = [2L, 6L, 10L]\n      * ArrayUtils.add([2L, 6L], 0, -4L)      = [-4L, 2L, 6L]\n      * ArrayUtils.add([2L, 6L, 3L], 2, 1L)   = [2L, 6L, 1L, 3L]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to add the element to, may be <code>null</code>\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index > array.length).\n      */\n     public static long[] add(long[] array, int index, long element) {\n-        return (long[]) add(array, index, new Long(element), Long.TYPE);\n-    }\n-    \n-    /**\n-     * <p>Inserts the specified element at the specified position in the array. \n+        return (long[]) add(array, index, Long.valueOf(element), Long.TYPE);\n+    }\n+\n+    /**\n+     * <p>Inserts the specified element at the specified position in the array.\n      * Shifts the element currently at that position (if any) and any subsequent\n      * elements to the right (adds one to their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array plus the given element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array plus the given element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add([1.1f], 0, 2.2f)               = [2.2f, 1.1f]\n      * ArrayUtils.add([2.3f, 6.4f], 2, 10.5f)        = [2.3f, 6.4f, 10.5f]\n      * ArrayUtils.add([2.6f, 6.7f], 0, -4.8f)        = [-4.8f, 2.6f, 6.7f]\n      * ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   = [2.9f, 6.0f, 1.0f, 0.3f]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to add the element to, may be <code>null</code>\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index > array.length).\n      */\n     public static float[] add(float[] array, int index, float element) {\n-        return (float[]) add(array, index, new Float(element), Float.TYPE);\n-    }\n-    \n-    /**\n-     * <p>Inserts the specified element at the specified position in the array. \n+        return (float[]) add(array, index, Float.valueOf(element), Float.TYPE);\n+    }\n+\n+    /**\n+     * <p>Inserts the specified element at the specified position in the array.\n      * Shifts the element currently at that position (if any) and any subsequent\n      * elements to the right (adds one to their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array plus the given element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array plus the given element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n-     * \n+     *\n      * <pre>\n      * ArrayUtils.add([1.1], 0, 2.2)              = [2.2, 1.1]\n      * ArrayUtils.add([2.3, 6.4], 2, 10.5)        = [2.3, 6.4, 10.5]\n      * ArrayUtils.add([2.6, 6.7], 0, -4.8)        = [-4.8, 2.6, 6.7]\n      * ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    = [2.9, 6.0, 1.0, 0.3]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to add the element to, may be <code>null</code>\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index > array.length).\n      */\n     public static double[] add(double[] array, int index, double element) {\n-        return (double[]) add(array, index, new Double(element), Double.TYPE);\n-    }\n-    \n-    /**\n-     * Underlying implementation of add(array, index, element) methods. \n-     * The last parameter is the class, which may not equal element.getClass \n+        return (double[]) add(array, index, Double.valueOf(element), Double.TYPE);\n+    }\n+\n+    /**\n+     * Underlying implementation of add(array, index, element) methods.\n+     * The last parameter is the class, which may not equal element.getClass\n      * for primitives.\n      *\n      * @param array  the array to add the element to, may be <code>null</code>\n         }\n         return result;\n     }\n-    \n+\n     /**\n      * <p>Removes the element at the specified position from the specified array.\n      * All subsequent elements are shifted to the left (substracts one from\n      * their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n      * ArrayUtils.remove([\"a\", \"b\"], 1)      = [\"a\"]\n      * ArrayUtils.remove([\"a\", \"b\", \"c\"], 1) = [\"a\", \"c\"]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may not be <code>null</code>\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n-    public static Object[] remove(Object[] array, int index) {\n-        return (Object[]) remove((Object) array, index);\n-    }\n-    \n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> T[] remove(T[] array, int index) {\n+        return (T[]) remove((Object) array, index);\n+    }\n+\n     /**\n      * <p>Removes the first occurrence of the specified element from the\n-     * specified array. All subsequent elements are shifted to the left \n+     * specified array. All subsequent elements are shifted to the left\n      * (substracts one from their indices). If the array doesn't contains\n      * such an element, no elements are removed from the array.</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the first occurrence of the specified element. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the first occurrence of the specified element. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <pre>\n      * ArrayUtils.removeElement([\"a\", \"b\"], \"a\")      = [\"b\"]\n      * ArrayUtils.removeElement([\"a\", \"b\", \"a\"], \"a\") = [\"b\", \"a\"]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may be <code>null</code>\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n      *         occurrence of the specified element.\n      * @since 2.1\n      */\n-    public static Object[] removeElement(Object[] array, Object element) {\n+    public static <T> T[] removeElement(T[] array, Object element) {\n         int index = indexOf(array, element);\n         if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n-        } \n+        }\n         return remove(array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the element at the specified position from the specified array.\n      * All subsequent elements are shifted to the left (substracts one from\n      * their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n      * ArrayUtils.remove([true, false], 1)       = [true]\n      * ArrayUtils.remove([true, true, false], 1) = [true, false]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may not be <code>null</code>\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n     public static boolean[] remove(boolean[] array, int index) {\n         return (boolean[]) remove((Object) array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the first occurrence of the specified element from the\n-     * specified array. All subsequent elements are shifted to the left \n+     * specified array. All subsequent elements are shifted to the left\n      * (substracts one from their indices). If the array doesn't contains\n      * such an element, no elements are removed from the array.</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the first occurrence of the specified element. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the first occurrence of the specified element. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <pre>\n      * ArrayUtils.removeElement([true, false], false)      = [true]\n      * ArrayUtils.removeElement([true, false, true], true) = [false, true]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may be <code>null</code>\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n         int index = indexOf(array, element);\n         if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n-        } \n+        }\n         return remove(array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the element at the specified position from the specified array.\n      * All subsequent elements are shifted to the left (substracts one from\n      * their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n      * ArrayUtils.remove([1, 0], 1)       = [1]\n      * ArrayUtils.remove([1, 0, 1], 1)    = [1, 1]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may not be <code>null</code>\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n     public static byte[] remove(byte[] array, int index) {\n         return (byte[]) remove((Object) array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the first occurrence of the specified element from the\n-     * specified array. All subsequent elements are shifted to the left \n+     * specified array. All subsequent elements are shifted to the left\n      * (substracts one from their indices). If the array doesn't contains\n      * such an element, no elements are removed from the array.</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the first occurrence of the specified element. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the first occurrence of the specified element. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <pre>\n      * ArrayUtils.removeElement([1, 0], 0)      = [1]\n      * ArrayUtils.removeElement([1, 0, 1], 1)   = [0, 1]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may be <code>null</code>\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n         int index = indexOf(array, element);\n         if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n-        } \n+        }\n         return remove(array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the element at the specified position from the specified array.\n      * All subsequent elements are shifted to the left (substracts one from\n      * their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n      * ArrayUtils.remove(['a', 'b'], 1)      = ['a']\n      * ArrayUtils.remove(['a', 'b', 'c'], 1) = ['a', 'c']\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may not be <code>null</code>\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n     public static char[] remove(char[] array, int index) {\n         return (char[]) remove((Object) array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the first occurrence of the specified element from the\n-     * specified array. All subsequent elements are shifted to the left \n+     * specified array. All subsequent elements are shifted to the left\n      * (substracts one from their indices). If the array doesn't contains\n      * such an element, no elements are removed from the array.</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the first occurrence of the specified element. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the first occurrence of the specified element. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <pre>\n      * ArrayUtils.removeElement(['a', 'b'], 'a')      = ['b']\n      * ArrayUtils.removeElement(['a', 'b', 'a'], 'a') = ['b', 'a']\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may be <code>null</code>\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n         int index = indexOf(array, element);\n         if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n-        } \n+        }\n         return remove(array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the element at the specified position from the specified array.\n      * All subsequent elements are shifted to the left (substracts one from\n      * their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n      * ArrayUtils.remove([2.5, 6.0], 1)      = [2.5]\n      * ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may not be <code>null</code>\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n     public static double[] remove(double[] array, int index) {\n         return (double[]) remove((Object) array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the first occurrence of the specified element from the\n-     * specified array. All subsequent elements are shifted to the left \n+     * specified array. All subsequent elements are shifted to the left\n      * (substracts one from their indices). If the array doesn't contains\n      * such an element, no elements are removed from the array.</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the first occurrence of the specified element. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the first occurrence of the specified element. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <pre>\n      * ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3]\n      * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may be <code>null</code>\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n         int index = indexOf(array, element);\n         if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n-        } \n+        }\n         return remove(array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the element at the specified position from the specified array.\n      * All subsequent elements are shifted to the left (substracts one from\n      * their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n      * ArrayUtils.remove([2.5, 6.0], 1)      = [2.5]\n      * ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may not be <code>null</code>\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n     public static float[] remove(float[] array, int index) {\n         return (float[]) remove((Object) array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the first occurrence of the specified element from the\n-     * specified array. All subsequent elements are shifted to the left \n+     * specified array. All subsequent elements are shifted to the left\n      * (substracts one from their indices). If the array doesn't contains\n      * such an element, no elements are removed from the array.</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the first occurrence of the specified element. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the first occurrence of the specified element. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <pre>\n      * ArrayUtils.removeElement([1.1, 2.3], 1.1)      = [2.3]\n      * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may be <code>null</code>\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n         int index = indexOf(array, element);\n         if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n-        } \n+        }\n         return remove(array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the element at the specified position from the specified array.\n      * All subsequent elements are shifted to the left (substracts one from\n      * their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n      * ArrayUtils.remove([2, 6], 1)      = [2]\n      * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may not be <code>null</code>\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n     public static int[] remove(int[] array, int index) {\n         return (int[]) remove((Object) array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the first occurrence of the specified element from the\n-     * specified array. All subsequent elements are shifted to the left \n+     * specified array. All subsequent elements are shifted to the left\n      * (substracts one from their indices). If the array doesn't contains\n      * such an element, no elements are removed from the array.</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the first occurrence of the specified element. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the first occurrence of the specified element. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <pre>\n      * ArrayUtils.removeElement([1, 3], 1)    = [3]\n      * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may be <code>null</code>\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n         int index = indexOf(array, element);\n         if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n-        } \n+        }\n         return remove(array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the element at the specified position from the specified array.\n      * All subsequent elements are shifted to the left (substracts one from\n      * their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n      * ArrayUtils.remove([2, 6], 1)      = [2]\n      * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may not be <code>null</code>\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n     public static long[] remove(long[] array, int index) {\n         return (long[]) remove((Object) array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the first occurrence of the specified element from the\n-     * specified array. All subsequent elements are shifted to the left \n+     * specified array. All subsequent elements are shifted to the left\n      * (substracts one from their indices). If the array doesn't contains\n      * such an element, no elements are removed from the array.</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the first occurrence of the specified element. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the first occurrence of the specified element. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <pre>\n      * ArrayUtils.removeElement([1, 3], 1)    = [3]\n      * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may be <code>null</code>\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n         int index = indexOf(array, element);\n         if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n-        } \n+        }\n         return remove(array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the element at the specified position from the specified array.\n      * All subsequent elements are shifted to the left (substracts one from\n      * their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n      * ArrayUtils.remove([2, 6], 1)      = [2]\n      * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may not be <code>null</code>\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n     public static short[] remove(short[] array, int index) {\n         return (short[]) remove((Object) array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the first occurrence of the specified element from the\n-     * specified array. All subsequent elements are shifted to the left \n+     * specified array. All subsequent elements are shifted to the left\n      * (substracts one from their indices). If the array doesn't contains\n      * such an element, no elements are removed from the array.</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the first occurrence of the specified element. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the first occurrence of the specified element. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <pre>\n      * ArrayUtils.removeElement([1, 3], 1)    = [3]\n      * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]\n      * </pre>\n-     * \n+     *\n      * @param array  the array to remove the element from, may be <code>null</code>\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n         int index = indexOf(array, element);\n         if (index == INDEX_NOT_FOUND) {\n             return clone(array);\n-        } \n+        }\n         return remove(array, index);\n     }\n-    \n+\n     /**\n      * <p>Removes the element at the specified position from the specified array.\n      * All subsequent elements are shifted to the left (substracts one from\n      * their indices).</p>\n      *\n      * <p>This method returns a new array with the same elements of the input\n-     * array except the element on the specified position. The component \n-     * type of the returned array is always the same as that of the input \n+     * array except the element on the specified position. The component\n+     * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n      * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n      * will be thrown, because in that case no valid index can be specified.</p>\n-     * \n+     *\n      * @param array  the array to remove the element from, may not be <code>null</code>\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n-     * @throws IndexOutOfBoundsException if the index is out of range \n+     * @throws IndexOutOfBoundsException if the index is out of range\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n         if (index < 0 || index >= length) {\n             throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n         }\n-        \n+\n         Object result = Array.newInstance(array.getClass().getComponentType(), length - 1);\n         System.arraycopy(array, 0, result, 0, index);\n         if (index < length - 1) {\n             System.arraycopy(array, index + 1, result, index, length - index - 1);\n         }\n-        \n+\n         return result;\n     }\n \n--- a/src/test/org/apache/commons/lang/ArrayUtilsAddTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsAddTest.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * Tests ArrayUtils add methods.\n- * \n+ *\n  * @author Gary D. Gregory\n  * @version $Id$\n  */\n         assertTrue(Arrays.equals(new boolean[]{true, false, true, false}, newArray));\n         assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n     }\n-    \n+\n     public void testAddObjectArrayByte() {\n         byte[] newArray;\n         newArray = ArrayUtils.add((byte[])null, (byte)0);\n         assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n         newArray = ArrayUtils.add(array1, (byte)4);\n         assertTrue(Arrays.equals(new byte[]{1, 2, 3, 4}, newArray));\n-        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());        \n-    }\n-    \n+        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n     public void testAddObjectArrayChar() {\n         char[] newArray;\n         newArray = ArrayUtils.add((char[])null, (char)0);\n         assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n         newArray = ArrayUtils.add(array1, (char)4);\n         assertTrue(Arrays.equals(new char[]{1, 2, 3, 4}, newArray));\n-        assertEquals(Character.TYPE, newArray.getClass().getComponentType());        \n-    }\n-    \n+        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n     public void testAddObjectArrayDouble() {\n         double[] newArray;\n         newArray = ArrayUtils.add((double[])null, 0);\n         assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n         newArray = ArrayUtils.add(array1, 4);\n         assertTrue(Arrays.equals(new double[]{1, 2, 3, 4}, newArray));\n-        assertEquals(Double.TYPE, newArray.getClass().getComponentType());        \n-    }\n-    \n+        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n     public void testAddObjectArrayFloat() {\n         float[] newArray;\n         newArray = ArrayUtils.add((float[])null, 0);\n         assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n         newArray = ArrayUtils.add(array1, 4);\n         assertTrue(Arrays.equals(new float[]{1, 2, 3, 4}, newArray));\n-        assertEquals(Float.TYPE, newArray.getClass().getComponentType());        \n-    }\n-    \n+        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n     public void testAddObjectArrayInt() {\n         int[] newArray;\n         newArray = ArrayUtils.add((int[])null, 0);\n         assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n         newArray = ArrayUtils.add(array1, 4);\n         assertTrue(Arrays.equals(new int[]{1, 2, 3, 4}, newArray));\n-        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());        \n-    }\n-    \n+        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n     public void testAddObjectArrayLong() {\n         long[] newArray;\n         newArray = ArrayUtils.add((long[])null, 0);\n         assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n         newArray = ArrayUtils.add(array1, 4);\n         assertTrue(Arrays.equals(new long[]{1, 2, 3, 4}, newArray));\n-        assertEquals(Long.TYPE, newArray.getClass().getComponentType());        \n-    }\n-    \n+        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n     public void testAddObjectArrayShort() {\n         short[] newArray;\n         newArray = ArrayUtils.add((short[])null, (short)0);\n         assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n         newArray = ArrayUtils.add(array1, (short)4);\n         assertTrue(Arrays.equals(new short[]{1, 2, 3, 4}, newArray));\n-        assertEquals(Short.TYPE, newArray.getClass().getComponentType());        \n-    }\n-    \n+        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n+    }\n+\n     public void testAddObjectArrayObject() {\n         Object[] newArray;\n         newArray = ArrayUtils.add((Object[])null, null);\n         assertTrue(Arrays.equals((new Object[]{null}), newArray));\n         assertEquals(Object.class, newArray.getClass().getComponentType());\n-        \n+\n+        //show that not casting is okay\n+        newArray = ArrayUtils.add(null, null);\n+        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n+        assertEquals(Object.class, newArray.getClass().getComponentType());\n+\n         newArray = ArrayUtils.add((Object[])null, \"a\");\n         assertTrue(Arrays.equals((new String[]{\"a\"}), newArray));\n         assertTrue(Arrays.equals((new Object[]{\"a\"}), newArray));\n         assertEquals(String.class, newArray.getClass().getComponentType());\n-        \n+\n+        //show that not casting to Object[] is okay and will assume String based on \"a\"\n+        String[] newStringArray = ArrayUtils.add(null, \"a\");\n+        assertTrue(Arrays.equals((new String[]{\"a\"}), newStringArray));\n+        assertTrue(Arrays.equals((new Object[]{\"a\"}), newStringArray));\n+        assertEquals(String.class, newStringArray.getClass().getComponentType());\n+\n         String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n         newArray = ArrayUtils.add(stringArray1, null);\n         assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", null}), newArray));\n         assertEquals(String.class, newArray.getClass().getComponentType());\n-        \n+\n         newArray = ArrayUtils.add(stringArray1, \"d\");\n         assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n         assertEquals(String.class, newArray.getClass().getComponentType());\n-        \n+\n         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n         newArray = ArrayUtils.add(numberArray1, new Float(3));\n         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n         assertEquals(Number.class, newArray.getClass().getComponentType());\n-        \n+\n         numberArray1 = null;\n         newArray = ArrayUtils.add(numberArray1, new Float(3));\n         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n         assertEquals(Float.class, newArray.getClass().getComponentType());\n-        \n+\n         numberArray1 = null;\n         newArray = ArrayUtils.add(numberArray1, null);\n         assertTrue(Arrays.equals((new Object[]{null}), newArray));\n         assertEquals(Object.class, newArray.getClass().getComponentType());\n     }\n-    \n+\n     public void testAddObjectArrayToObjectArray() {\n         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null));\n         Object[] newArray;\n         assertTrue(Arrays.equals((new String[]{}), newArray));\n         assertEquals(String.class, newArray.getClass().getComponentType());\n         String[] stringArrayNull = new String []{null};\n-        newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);        \n+        newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);\n         assertTrue(Arrays.equals((new String[]{null, null}), newArray));\n         assertEquals(String.class, newArray.getClass().getComponentType());\n \n         // boolean\n-        assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, \n+        assertTrue( Arrays.equals( new boolean[] { true, false, false, true },\n             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) );\n \n-        assertTrue( Arrays.equals( new boolean[] { false, true }, \n+        assertTrue( Arrays.equals( new boolean[] { false, true },\n             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) );\n \n-        assertTrue( Arrays.equals( new boolean[] { true, false }, \n+        assertTrue( Arrays.equals( new boolean[] { true, false },\n             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) );\n \n         // char\n-        assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, \n+        assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' },\n             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) );\n \n-        assertTrue( Arrays.equals( new char[] { 'c', 'd' }, \n+        assertTrue( Arrays.equals( new char[] { 'c', 'd' },\n             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) );\n \n-        assertTrue( Arrays.equals( new char[] { 'a', 'b' }, \n+        assertTrue( Arrays.equals( new char[] { 'a', 'b' },\n             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) );\n \n         // byte\n-        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, \n+        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 },\n             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) );\n \n-        assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, \n+        assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 },\n             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) );\n \n-        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, \n+        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 },\n             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) );\n \n         // short\n-        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, \n+        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 },\n             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) );\n \n-        assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, \n+        assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 },\n             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) );\n \n-        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, \n+        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 },\n             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) );\n \n         // int\n-        assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, \n+        assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 },\n             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) );\n \n-        assertTrue( Arrays.equals( new int[] { -1000, -1 }, \n+        assertTrue( Arrays.equals( new int[] { -1000, -1 },\n             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) );\n \n-        assertTrue( Arrays.equals( new int[] { 1, 1000 }, \n+        assertTrue( Arrays.equals( new int[] { 1, 1000 },\n             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) );\n \n         // long\n-        assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, \n+        assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L },\n             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) );\n \n-        assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, \n+        assertTrue( Arrays.equals( new long[] { 1000L, -1000L },\n             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) );\n-        \n-        assertTrue( Arrays.equals( new long[] { 1L, -1L }, \n+\n+        assertTrue( Arrays.equals( new long[] { 1L, -1L },\n             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) );\n \n         // float\n-        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, \n+        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f },\n             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) );\n \n-        assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, \n+        assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f },\n             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) );\n \n-        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, \n+        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f },\n             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) );\n \n         // double\n-        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, \n+        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 },\n             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) );\n \n-        assertTrue( Arrays.equals( new double[] { 0, 9.99 }, \n+        assertTrue( Arrays.equals( new double[] { 0, 9.99 },\n             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) );\n \n-        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, \n+        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI },\n             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) );\n \n-    }    \n-    \n+    }\n+\n     public void testAddObjectAtIndex() {\n         Object[] newArray;\n         newArray = ArrayUtils.add((Object[])null, 0, null);\n         assertEquals(String.class, newArray.getClass().getComponentType());\n         newArray = ArrayUtils.add(stringArray1, 3, \"d\");\n         assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n-        assertEquals(String.class, newArray.getClass().getComponentType());        \n+        assertEquals(String.class, newArray.getClass().getComponentType());\n         assertEquals(String.class, newArray.getClass().getComponentType());\n \n         Object[] o = new Object[] {\"1\", \"2\", \"4\"};\n         Object[] result = ArrayUtils.add(o, 2, \"3\");\n         Object[] result2 = ArrayUtils.add(o, 3, \"5\");\n-        \n+\n         assertNotNull(result);\n         assertEquals(4, result.length);\n         assertEquals(\"1\", result[0]);\n             assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n         }\n     }\n-    \n+\n }", "timestamp": 1252693638, "metainfo": ""}