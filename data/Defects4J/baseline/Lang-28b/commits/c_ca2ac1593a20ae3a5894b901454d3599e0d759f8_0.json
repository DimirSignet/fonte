{"sha": "ca2ac1593a20ae3a5894b901454d3599e0d759f8", "log": "Allow contexted exception to store non-serializable objects (more flexible, and doesn't prevent serialization)  ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ContextedException.java\n+++ b/src/java/org/apache/commons/lang/exception/ContextedException.java\n  */\n package org.apache.commons.lang.exception;\n \n-import java.io.Serializable;\n import java.util.Set;\n \n /**\n      * the problem.  For the information to be meaningful, the value passed\n      * should have a reasonable toString() implementation.\n      * <p>\n-     * Note:  If the value provided isn't Serializable, one solution would be\n-     * to provide its toString() if it has a meaningful implementation or \n-     * individual properties of the value object instead.\n+     * Note: This exception is only serializable if the object added is serializable.\n      * \n      * @param label  a textual label associated with information, null not recommended\n      * @param value  information needed to understand exception, may be null\n      * @return this, for method chaining\n      */\n-    public ContextedException addLabeledValue(String label, Serializable value) {        \n+    public ContextedException addLabeledValue(String label, Object value) {        \n         exceptionContext.addLabeledValue(label, value);\n         return this;\n     }\n      * @param label  the label to get the contextual value for, may be null\n      * @return the contextual value associated with the label, may be null\n      */\n-    public Serializable getLabeledValue(String label) {\n+    public Object getLabeledValue(String label) {\n         return exceptionContext.getLabeledValue(label);\n     }\n \n--- a/src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java\n+++ b/src/java/org/apache/commons/lang/exception/ContextedRuntimeException.java\n  */\n package org.apache.commons.lang.exception;\n \n-import java.io.Serializable;\n import java.util.Set;\n \n /**\n      * the problem.  For the information to be meaningful, the value passed\n      * should have a reasonable toString() implementation.\n      * <p>\n-     * Note:  If the value provided isn't Serializable, one solution would be\n-     * to provide its toString() if it has a meaningful implementation or \n-     * individual properties of the value object instead.\n+     * Note: This exception is only serializable if the object added is serializable.\n      * \n      * @param label  a textual label associated with information, null not recommended\n      * @param value  information needed to understand exception, may be null\n      * @return this, for method chaining\n      */\n-    public ContextedRuntimeException addLabeledValue(String label, Serializable value) {        \n+    public ContextedRuntimeException addLabeledValue(String label, Object value) {        \n         exceptionContext.addLabeledValue(label, value);\n         return this;\n     }\n      * @param label  the label to get the contextual value for, may be null\n      * @return the contextual value associated with the label, may be null\n      */\n-    public Serializable getLabeledValue(String label) {\n+    public Object getLabeledValue(String label) {\n         return exceptionContext.getLabeledValue(label);\n     }\n \n--- a/src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java\n+++ b/src/java/org/apache/commons/lang/exception/DefaultExceptionContext.java\n \n /**\n  * Default implementation of the context storing the label-value pairs for contexted exceptions.\n+ * <p>\n+ * This implementation is serializable, however this is dependent on the values that\n+ * are added also being serializable.\n  * \n  * @author D. Ashmore\n  * @since 3.0\n  */\n-class DefaultExceptionContext implements ExceptionContext {\n+class DefaultExceptionContext implements ExceptionContext, Serializable {\n \n     /** The serialization version. */\n     private static final long serialVersionUID = 293747957535772807L;\n     /** The ordered map storing the label-data pairs. */\n-    private Map<String, Serializable> contextValueMap = new LinkedHashMap<String, Serializable>();\n+    private Map<String, Object> contextValueMap = new LinkedHashMap<String, Object>();\n \n     /**\n      * Adds a contextual label-value pair into this context.\n      * @param value  the value of item to add, may be null\n      * @return this, for method chaining\n      */\n-    public ExceptionContext addLabeledValue(String label, Serializable value) {        \n+    public ExceptionContext addLabeledValue(String label, Object value) {        \n         contextValueMap.put(label, value);\n         return this;\n     }\n      * @param label  the label to get the contextual value for, may be null\n      * @return the contextual value associated with the label, may be null\n      */\n-    public Serializable getLabeledValue(String label) {\n+    public Object getLabeledValue(String label) {\n         return contextValueMap.get(label);\n     }\n \n--- a/src/java/org/apache/commons/lang/exception/ExceptionContext.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionContext.java\n  */\n package org.apache.commons.lang.exception;\n \n-import java.io.Serializable;\n import java.util.Set;\n \n-\n /**\n- * Provides context information for exceptions. It is available as separate interface to allow\n- * it usage independently from the {@link ContextedException} and\n- * {@link ContextedRuntimeException}.\n+ * Allows the storage and retrieval of contextual information based on label-value\n+ * pairs for exceptions.\n  * \n  * @see ContextedException\n  * @see ContextedRuntimeException\n  * @author D. Ashmore\n  * @since 3.0\n  */\n-public interface ExceptionContext extends Serializable {\n+public interface ExceptionContext {\n \n     /**\n      * Adds a contextual label-value pair into this context.\n      * @param value  the value of item to add, may be null\n      * @return context itself to allow method chaining\n      */\n-    public ExceptionContext addLabeledValue(String label, Serializable value);\n+    public ExceptionContext addLabeledValue(String label, Object value);\n \n     /**\n      * Retrieves a contextual data value associated with the label.\n      * @param label  the label to get the contextual value for, may be null\n      * @return the contextual value associated with the label, may be null\n      */\n-    public Serializable getLabeledValue(String label);\n+    public Object getLabeledValue(String label);\n \n     /**\n      * Retrieves the labels defined in the contextual data.\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n \n import java.io.PrintStream;\n import java.io.PrintWriter;\n-import java.io.Serializable;\n import java.io.StringWriter;\n import java.lang.reflect.Field;\n import java.lang.reflect.InvocationTargetException;\n import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.Set;\n import java.util.StringTokenizer;\n-\n-//import net.jcip.annotations.GuardedBy;\n-//import net.jcip.annotations.ThreadSafe;\n \n import org.apache.commons.lang.ArrayUtils;\n import org.apache.commons.lang.ClassUtils;\n      * <p>The Method object for Java 1.4 getCause.</p>\n      */\n     private static final Method THROWABLE_CAUSE_METHOD;\n-\n     /**\n      * <p>The Method object for Java 1.4 initCause.</p>\n      */\n     private static final Method THROWABLE_INITCAUSE_METHOD;\n-    \n-    /**\n-     * An empty {@link ExceptionContext}.\n-     * @since 3.0\n-     */\n-    public static final ExceptionContext EMPTY_CONTEXT = new ExceptionContext() {\n-\n-        private static final long serialVersionUID = 1L;\n-\n-        public ExceptionContext addLabeledValue(String label, Serializable value) {\n-          throw new UnsupportedOperationException();\n-        }\n-\n-        public Serializable getLabeledValue(String label) {\n-          return null;\n-        }\n-\n-        public Set<String> getLabelSet() {\n-          return Collections.<String>emptySet();\n-        }\n-\n-        public String getFormattedExceptionMessage(String baseMessage) {\n-          return baseMessage;\n-        }\n-\n-      };    \n     static {\n         Method causeMethod;\n         try {\n         }\n         THROWABLE_INITCAUSE_METHOD = causeMethod;\n     }\n-    \n+\n     /**\n      * <p>\n      * Public constructor allows an instance of <code>ExceptionUtils</code> to be created, although that is not", "timestamp": 1256402288, "metainfo": ""}