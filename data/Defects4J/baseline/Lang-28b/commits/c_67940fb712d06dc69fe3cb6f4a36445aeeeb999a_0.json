{"sha": "67940fb712d06dc69fe3cb6f4a36445aeeeb999a", "log": "Move capitalizeAllWords, uncapitalizeAllWords, swapCase to WordUtils   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.100 2003/08/16 10:36:00 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.101 2003/08/17 22:56:11 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n      * <p>Capitalizes a String changing the first letter to title case as\n      * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n      * \n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>For a word based alorithm, see {@link WordUtils#capitalize(String)}.\n+     * A <code>null</code> input String returns <code>null</code>.</p>\n      * \n      * <pre>\n      * StringUtils.capitalize(null)  = null\n      * \n      * @param str  the String to capitalize, may be null\n      * @return the capitalized String, <code>null</code> if null String input\n-     * @see #capitalizeAllWords(String)\n+     * @see WordUtils#capitalize(String)\n      * @see #uncapitalize(String)\n      */\n     public static String capitalize(String str) {\n      * <p>Uncapitalizes a String changing the first letter to title case as\n      * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n      * \n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>For a word based alorithm, see {@link WordUtils#uncapitalize(String)}.\n+     * A <code>null</code> input String returns <code>null</code>.</p>\n      * \n      * <pre>\n      * StringUtils.uncapitalize(null)  = null\n      * \n      * @param str  the String to uncapitalize, may be null\n      * @return the uncapitalized String, <code>null</code> if null String input\n-     * @see #uncapitalizeAllWords(String)\n+     * @see WordUtils#uncapitalize(String)\n      * @see #capitalize(String)\n      */\n     public static String uncapitalize(String str) {\n     }\n \n     /**\n-     * <p>Swaps the case of a String using a word based algorithm.</p>\n+     * <p>Swaps the case of a String changing upper and title case to\n+     * lower case, and lower case to upper case.</p>\n      * \n      * <ul>\n      *  <li>Upper case character converts to Lower case</li>\n      *  <li>Title case character converts to Lower case</li>\n-     *  <li>Lower case character after Whitespace or at start converts to Title case</li>\n-     *  <li>Other Lower case character converts to Upper case</li>\n+     *  <li>Lower case character converts to Upper case</li>\n      * </ul>\n      * \n-     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n+     * <p>For a word based alorithm, see {@link WordUtils#swapCase(String)}.\n      * A <code>null</code> input String returns <code>null</code>.</p>\n      * \n      * <pre>\n      * StringUtils.swapCase(\"\")                   = \"\"\n      * StringUtils.swapCase(\"The dog has a BONE\") = \"tHE DOG HAS A bone\"\n      * </pre>\n+     * \n+     * <p>NOTE: This method changed in Lang version 2.0.\n+     * It no longer performs a word based alorithm.\n+     * If you only use ASCII, you will notice no change.\n+     * That functionality is available in WordUtils.</p>\n      * \n      * @param str  the String to swap case, may be null\n      * @return the changed String, <code>null</code> if null String input\n         }\n         StringBuffer buffer = new StringBuffer(strLen);\n \n-        boolean whitespace = true;\n         char ch = 0;\n-        char tmp = 0;\n-\n         for (int i = 0; i < strLen; i++) {\n             ch = str.charAt(i);\n             if (Character.isUpperCase(ch)) {\n-                tmp = Character.toLowerCase(ch);\n+                ch = Character.toLowerCase(ch);\n             } else if (Character.isTitleCase(ch)) {\n-                tmp = Character.toLowerCase(ch);\n+                ch = Character.toLowerCase(ch);\n             } else if (Character.isLowerCase(ch)) {\n-                if (whitespace) {\n-                    tmp = Character.toTitleCase(ch);\n-                } else {\n-                    tmp = Character.toUpperCase(ch);\n-                }\n-            } else {\n-                tmp = ch;\n-            }\n-            buffer.append(tmp);\n-            whitespace = Character.isWhitespace(ch);\n+                ch = Character.toUpperCase(ch);\n+            }\n+            buffer.append(ch);\n         }\n         return buffer.toString();\n     }\n      * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n      * A <code>null</code> input String returns <code>null</code>.</p>\n      *\n-     * <pre>\n-     * StringUtils.capitalizeAllWords(null)        = null\n-     * StringUtils.capitalizeAllWords(\"\")          = \"\"\n-     * StringUtils.capitalizeAllWords(\"i am FINE\") = \"I Am FINE\"\n-     * </pre>\n-     * \n      * @param str  the String to capitalize, may be null\n      * @return capitalized String, <code>null</code> if null String input\n-     * @see #capitalize(String)\n-     * @see #uncapitalizeAllWords(String)\n-     */\n-    public static String capitalizeAllWords(String str) {\n-        int strLen;\n-        if (str == null || (strLen = str.length()) == 0) {\n-            return str;\n-        }\n-        StringBuffer buffer = new StringBuffer(strLen);\n-        boolean whitespace = true;\n-        for (int i = 0; i < strLen; i++) {\n-            char ch = str.charAt(i);\n-            if (Character.isWhitespace(ch)) {\n-                buffer.append(ch);\n-                whitespace = true;\n-            } else if (whitespace) {\n-                buffer.append(Character.toTitleCase(ch));\n-                whitespace = false;\n-            } else {\n-                buffer.append(ch);\n-            }\n-        }\n-        return buffer.toString();\n-    }\n-\n-    /**\n-     * <p>Capitalizes all the whitespace separated words in a String.\n-     * Only the first letter of each word is changed.</p>\n-     *\n-     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n-     * A <code>null</code> input String returns <code>null</code>.</p>\n-     *\n-     * @param str  the String to capitalize, may be null\n-     * @return capitalized String, <code>null</code> if null String input\n-     * @deprecated Use the standardly named {@link #capitalizeAllWords(String)}.\n+     * @deprecated Use the relocated {@link WordUtils#capitalize(String)}.\n      *             Method will be removed in Commons Lang 3.0.\n      */\n     public static String capitaliseAllWords(String str) {\n-        return capitalizeAllWords(str);\n-    }\n-\n-    /**\n-     * <p>Uncapitalizes all the whitespace separated words in a String.\n-     * Only the first letter of each word is changed.</p>\n-     *\n-     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n-     * A <code>null</code> input String returns <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * StringUtils.uncapitalizeAllWords(null)        = null\n-     * StringUtils.uncapitalizeAllWords(\"\")          = \"\"\n-     * StringUtils.uncapitalizeAllWords(\"I Am FINE\") = \"i am fINE\"\n-     * </pre>\n-     * \n-     * @param str  the String to uncapitalize, may be null\n-     * @return uncapitalized String, <code>null</code> if null String input\n-     * @see #uncapitalize(String)\n-     * @see #capitalizeAllWords(String)\n-     */\n-    public static String uncapitalizeAllWords(String str) {\n-        int strLen;\n-        if (str == null || (strLen = str.length()) == 0) {\n-            return str;\n-        }\n-        StringBuffer buffer = new StringBuffer(strLen);\n-        boolean whitespace = true;\n-        for (int i = 0; i < strLen; i++) {\n-            char ch = str.charAt(i);\n-            if (Character.isWhitespace(ch)) {\n-                buffer.append(ch);\n-                whitespace = true;\n-            } else if (whitespace) {\n-                buffer.append(Character.toLowerCase(ch));\n-                whitespace = false;\n-            } else {\n-                buffer.append(ch);\n-            }\n-        }\n-        return buffer.toString();\n+        return WordUtils.capitalize(str);\n     }\n \n     // Count matches\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: WordUtils.java,v 1.1 2003/08/17 21:57:37 scolebourne Exp $\n+ * @version $Id: WordUtils.java,v 1.2 2003/08/17 22:56:11 scolebourne Exp $\n  */\n public class WordUtils {\n \n //        return (stringBuffer.toString());\n //    }\n \n+    // Wrapping\n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Wraps a single line of text, identifying words by <code>' '</code>.</p>\n      * \n         return wrappedLine.toString();\n     }\n \n+    // Capitalizing\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Capitalizes all the whitespace separated words in a String.\n+     * Only the first letter of each word is changed.</p>\n+     *\n+     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n+     * A <code>null</code> input String returns <code>null</code>.\n+     * Capitalization uses the unicode title case, normally equivalent to\n+     * upper case.</p>\n+     *\n+     * <pre>\n+     * WordUtils.capitalize(null)        = null\n+     * WordUtils.capitalize(\"\")          = \"\"\n+     * WordUtils.capitalize(\"i am FINE\") = \"I Am FINE\"\n+     * </pre>\n+     * \n+     * @param str  the String to capitalize, may be null\n+     * @return capitalized String, <code>null</code> if null String input\n+     */\n+    public static String capitalize(String str) {\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return str;\n+        }\n+        StringBuffer buffer = new StringBuffer(strLen);\n+        boolean whitespace = true;\n+        for (int i = 0; i < strLen; i++) {\n+            char ch = str.charAt(i);\n+            if (Character.isWhitespace(ch)) {\n+                buffer.append(ch);\n+                whitespace = true;\n+            } else if (whitespace) {\n+                buffer.append(Character.toTitleCase(ch));\n+                whitespace = false;\n+            } else {\n+                buffer.append(ch);\n+            }\n+        }\n+        return buffer.toString();\n+    }\n+\n+    /**\n+     * <p>Uncapitalizes all the whitespace separated words in a String.\n+     * Only the first letter of each word is changed.</p>\n+     *\n+     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n+     * A <code>null</code> input String returns <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * WordUtils.uncapitalize(null)        = null\n+     * WordUtils.uncapitalize(\"\")          = \"\"\n+     * WordUtils.uncapitalize(\"I Am FINE\") = \"i am fINE\"\n+     * </pre>\n+     * \n+     * @param str  the String to uncapitalize, may be null\n+     * @return uncapitalized String, <code>null</code> if null String input\n+     * @see #uncapitalize(String)\n+     * @see #capitalizeAllWords(String)\n+     */\n+    public static String uncapitalize(String str) {\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return str;\n+        }\n+        StringBuffer buffer = new StringBuffer(strLen);\n+        boolean whitespace = true;\n+        for (int i = 0; i < strLen; i++) {\n+            char ch = str.charAt(i);\n+            if (Character.isWhitespace(ch)) {\n+                buffer.append(ch);\n+                whitespace = true;\n+            } else if (whitespace) {\n+                buffer.append(Character.toLowerCase(ch));\n+                whitespace = false;\n+            } else {\n+                buffer.append(ch);\n+            }\n+        }\n+        return buffer.toString();\n+    }\n+\n+    /**\n+     * <p>Swaps the case of a String using a word based algorithm.</p>\n+     * \n+     * <ul>\n+     *  <li>Upper case character converts to Lower case</li>\n+     *  <li>Title case character converts to Lower case</li>\n+     *  <li>Lower case character after Whitespace or at start converts to Title case</li>\n+     *  <li>Other Lower case character converts to Upper case</li>\n+     * </ul>\n+     * \n+     * <p>Whitespace is defined by {@link Character#isWhitespace(char)}.\n+     * A <code>null</code> input String returns <code>null</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.swapCase(null)                 = null\n+     * StringUtils.swapCase(\"\")                   = \"\"\n+     * StringUtils.swapCase(\"The dog has a BONE\") = \"tHE DOG HAS A bone\"\n+     * </pre>\n+     * \n+     * @param str  the String to swap case, may be null\n+     * @return the changed String, <code>null</code> if null String input\n+     */\n+    public static String swapCase(String str) {\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return str;\n+        }\n+        StringBuffer buffer = new StringBuffer(strLen);\n+\n+        boolean whitespace = true;\n+        char ch = 0;\n+        char tmp = 0;\n+\n+        for (int i = 0; i < strLen; i++) {\n+            ch = str.charAt(i);\n+            if (Character.isUpperCase(ch)) {\n+                tmp = Character.toLowerCase(ch);\n+            } else if (Character.isTitleCase(ch)) {\n+                tmp = Character.toLowerCase(ch);\n+            } else if (Character.isLowerCase(ch)) {\n+                if (whitespace) {\n+                    tmp = Character.toTitleCase(ch);\n+                } else {\n+                    tmp = Character.toUpperCase(ch);\n+                }\n+            } else {\n+                tmp = ch;\n+            }\n+            buffer.append(tmp);\n+            whitespace = Character.isWhitespace(ch);\n+        }\n+        return buffer.toString();\n+    }\n+    \n }\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: StringUtilsTest.java,v 1.49 2003/08/14 01:16:30 ggregory Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.50 2003/08/17 22:56:11 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n     public void testCaseFunctions() {\n         assertEquals(null, StringUtils.upperCase(null));\n         assertEquals(null, StringUtils.lowerCase(null));\n-        assertEquals(null, StringUtils.swapCase(null));\n         assertEquals(null, StringUtils.capitalize(null));\n         assertEquals(null, StringUtils.uncapitalize(null));\n-        assertEquals(null, StringUtils.capitalizeAllWords(null));\n-        assertEquals(null, StringUtils.uncapitalizeAllWords(null));\n \n         assertEquals(\"capitalize(String) failed\",\n                      FOO_CAP, StringUtils.capitalize(FOO_UNCAP) );\n                      \"\", StringUtils.capitalize(\"\") );\n         assertEquals(\"capitalize(single-char-string) failed\",\n                      \"X\", StringUtils.capitalize(\"x\") );\n-        assertEquals(\"capitalizeAllWords(String) failed\",\n-                     \"Foo Bar Baz\", StringUtils.capitalizeAllWords(SENTENCE_UNCAP) );\n-        assertEquals(\"capitalizeAllWords(empty-string) failed\",\n-                     \"\", StringUtils.capitalizeAllWords(\"\") );\n         assertEquals(\"uncapitalize(String) failed\",\n                      FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );\n         assertEquals(\"uncapitalize(empty-string) failed\",\n                      \"\", StringUtils.uncapitalize(\"\") );\n         assertEquals(\"uncapitalize(single-char-string) failed\",\n                      \"x\", StringUtils.uncapitalize(\"X\") );\n-        assertEquals(\"uncapitalizeAllWords(String) failed\",\n-                     SENTENCE_UNCAP, StringUtils.uncapitalizeAllWords(\"Foo Bar Baz\") );\n-        assertEquals(\"uncapitalizeAllWords(empty-string) failed\",\n-                     \"\", StringUtils.uncapitalizeAllWords(\"\") );\n                      \n         // reflection type of tests: Sentences.\n-        assertEquals(\"uncapitalizeAllWords(capitalizeAllWords(String)) failed\",\n-                     SENTENCE_UNCAP, StringUtils.uncapitalizeAllWords(StringUtils.capitalizeAllWords(SENTENCE_UNCAP)) );\n-        assertEquals(\"capitalizeAllWords(uncapitalizeAllWords(String)) failed\",\n-                     SENTENCE_CAP, StringUtils.capitalizeAllWords(StringUtils.uncapitalizeAllWords(SENTENCE_CAP)) );\n         assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                      SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) );\n         assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                      SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) );\n \n         // reflection type of tests: One word.\n-        assertEquals(\"uncapitalizeAllWords(capitalizeAllWords(String)) failed\",\n-                     FOO_UNCAP, StringUtils.uncapitalizeAllWords(StringUtils.capitalizeAllWords(FOO_UNCAP)) );\n-        assertEquals(\"capitalizeAllWords(uncapitalizeAllWords(String)) failed\",\n-                     FOO_CAP, StringUtils.capitalizeAllWords(StringUtils.uncapitalizeAllWords(FOO_CAP)) );\n         assertEquals(\"uncapitalize(capitalize(String)) failed\",\n                     FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) );\n         assertEquals(\"capitalize(uncapitalize(String)) failed\",\n                      \"foo test thing\", StringUtils.lowerCase(\"fOo test THING\") );\n         assertEquals(\"lowerCase(empty-string) failed\",\n                      \"\", StringUtils.lowerCase(\"\") );\n-\n-        assertEquals(\"swapCase(empty-string) failed\",\n-                     \"\", StringUtils.swapCase(\"\") );\n-        assertEquals(\"swapCase(String-with-numbers) failed\",\n-                     \"a123RgYu\", StringUtils.swapCase(\"A123rGyU\") );\n-        assertEquals(\"swapCase(String) failed\",\n-                     \"Hello aPACHE\", StringUtils.swapCase(\"hELLO Apache\") );\n-    }\n-\n+    }\n+\n+    public void testSwapCase_String() {\n+        assertEquals(null, StringUtils.swapCase(null));\n+        assertEquals(\"\", StringUtils.swapCase(\"\"));\n+        assertEquals(\"  \", StringUtils.swapCase(\"  \"));\n+        \n+        assertEquals(\"i\", WordUtils.swapCase(\"I\") );\n+        assertEquals(\"I\", WordUtils.swapCase(\"i\") );\n+        assertEquals(\"I AM HERE 123\", StringUtils.swapCase(\"i am here 123\") );\n+        assertEquals(\"i aM hERE 123\", StringUtils.swapCase(\"I Am Here 123\") );\n+        assertEquals(\"I AM here 123\", StringUtils.swapCase(\"i am HERE 123\") );\n+        assertEquals(\"i am here 123\", StringUtils.swapCase(\"I AM HERE 123\") );\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testJoin_Objectarray() {\n         assertEquals(null, StringUtils.join(null));\n         assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\n--- a/src/test/org/apache/commons/lang/WordUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/WordUtilsTest.java\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Henri Yandell\n  * @author Stephen Colebourne\n- * @version $Id: WordUtilsTest.java,v 1.1 2003/08/17 21:57:37 scolebourne Exp $\n+ * @version $Id: WordUtilsTest.java,v 1.2 2003/08/17 22:56:11 scolebourne Exp $\n  */\n public class WordUtilsTest extends TestCase {\n \n //        System.err.println(expected);\n //        System.err.println(WordUtils.wrap(input, 20, \"\\n\", false));\n     }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testCapitalize_String() {\n+        assertEquals(null, WordUtils.capitalize(null));\n+        assertEquals(\"\", WordUtils.capitalize(\"\"));\n+        assertEquals(\"  \", WordUtils.capitalize(\"  \"));\n+        \n+        assertEquals(\"I\", WordUtils.capitalize(\"I\") );\n+        assertEquals(\"I\", WordUtils.capitalize(\"i\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"i am here 123\") );\n+        assertEquals(\"I Am Here 123\", WordUtils.capitalize(\"I Am Here 123\") );\n+        assertEquals(\"I Am HERE 123\", WordUtils.capitalize(\"i am HERE 123\") );\n+        assertEquals(\"I AM HERE 123\", WordUtils.capitalize(\"I AM HERE 123\") );\n+    }\n+    \n+    public void testUncapitalize_String() {\n+        assertEquals(null, WordUtils.uncapitalize(null));\n+        assertEquals(\"\", WordUtils.uncapitalize(\"\"));\n+        assertEquals(\"  \", WordUtils.uncapitalize(\"  \"));\n+        \n+        assertEquals(\"i\", WordUtils.uncapitalize(\"I\") );\n+        assertEquals(\"i\", WordUtils.uncapitalize(\"i\") );\n+        assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"i am here 123\") );\n+        assertEquals(\"i am here 123\", WordUtils.uncapitalize(\"I Am Here 123\") );\n+        assertEquals(\"i am hERE 123\", WordUtils.uncapitalize(\"i am HERE 123\") );\n+        assertEquals(\"i aM hERE 123\", WordUtils.uncapitalize(\"I AM HERE 123\") );\n+    }\n+    \n+    public void testSwapCase_String() {\n+        assertEquals(null, WordUtils.swapCase(null));\n+        assertEquals(\"\", WordUtils.swapCase(\"\"));\n+        assertEquals(\"  \", WordUtils.swapCase(\"  \"));\n+        \n+        assertEquals(\"i\", WordUtils.swapCase(\"I\") );\n+        assertEquals(\"I\", WordUtils.swapCase(\"i\") );\n+        assertEquals(\"I AM HERE 123\", WordUtils.swapCase(\"i am here 123\") );\n+        assertEquals(\"i aM hERE 123\", WordUtils.swapCase(\"I Am Here 123\") );\n+        assertEquals(\"I AM here 123\", WordUtils.swapCase(\"i am HERE 123\") );\n+        assertEquals(\"i am here 123\", WordUtils.swapCase(\"I AM HERE 123\") );\n+    }\n+\n }", "timestamp": 1061161168, "metainfo": ""}