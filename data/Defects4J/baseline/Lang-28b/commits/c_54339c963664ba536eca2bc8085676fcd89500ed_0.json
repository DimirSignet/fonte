{"sha": "54339c963664ba536eca2bc8085676fcd89500ed", "log": "Extra tests inspired by Clover bug 22098, from Phil Steitz   ", "commit": "\n--- a/src/test/org/apache/commons/lang/util/ValidateTest.java\n+++ b/src/test/org/apache/commons/lang/util/ValidateTest.java\n  * Unit tests {@link org.apache.commons.lang.util.Validate}.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: ValidateTest.java,v 1.1 2002/12/29 22:09:53 scolebourne Exp $\n+ * @version $Id: ValidateTest.java,v 1.2 2003/08/04 19:51:00 scolebourne Exp $\n  */\n public class ValidateTest extends TestCase {\n \n         Validate.isTrue(true);\n         try {\n             Validate.isTrue(false);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated expression is false\", ex.getMessage());\n         }\n         Validate.isTrue(true, \"MSG\");\n         try {\n             Validate.isTrue(false, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         Validate.isTrue(true, \"MSG\", new Integer(6));\n         try {\n             Validate.isTrue(false, \"MSG\", new Integer(6));\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG6\", ex.getMessage());\n         }\n         Validate.isTrue(true, \"MSG\", 7);\n         try {\n             Validate.isTrue(false, \"MSG\", 7);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG7\", ex.getMessage());\n         }\n         Validate.isTrue(true, \"MSG\", 7.4d);\n         try {\n             Validate.isTrue(false, \"MSG\", 7.4d);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG7.4\", ex.getMessage());\n         }\n         Validate.notNull(new Object());\n         try {\n             Validate.notNull(null);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated object is null\", ex.getMessage());\n         }\n         Validate.notNull(new Object(), \"MSG\");\n         try {\n             Validate.notNull(null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         Validate.notEmpty(new Object[] {null});\n         try {\n             Validate.notEmpty((Object[]) null);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated array is empty\", ex.getMessage());\n         }\n         try {\n             Validate.notEmpty(new Object[0]);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated array is empty\", ex.getMessage());\n         }\n         Validate.notEmpty(new Object[] {null}, \"MSG\");\n         try {\n             Validate.notEmpty((Object[]) null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         try {\n             Validate.notEmpty(new Object[0], \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         Collection coll = new ArrayList();\n         try {\n             Validate.notEmpty((Collection) null);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated collection is empty\", ex.getMessage());\n         }\n         try {\n             Validate.notEmpty(coll);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated collection is empty\", ex.getMessage());\n         }\n         Collection coll = new ArrayList();\n         try {\n             Validate.notEmpty((Collection) null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         try {\n             Validate.notEmpty(coll, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         Map map = new HashMap();\n         try {\n             Validate.notEmpty((Map) null);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated map is empty\", ex.getMessage());\n         }\n         try {\n             Validate.notEmpty(map);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated map is empty\", ex.getMessage());\n         }\n         Map map = new HashMap();\n         try {\n             Validate.notEmpty((Map) null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         try {\n             Validate.notEmpty(map, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         Validate.notEmpty(\"hjl\");\n         try {\n             Validate.notEmpty((String) null);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated string is empty\", ex.getMessage());\n         }\n         try {\n             Validate.notEmpty(\"\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated string is empty\", ex.getMessage());\n         }\n \n     //-----------------------------------------------------------------------\n     public void testNotEmptyString2() {\n-        Validate.notEmpty(new Object[] {null}, \"MSG\");\n+        Validate.notEmpty(\"a\", \"MSG\");\n         try {\n             Validate.notEmpty((String) null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         try {\n             Validate.notEmpty(\"\", \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         Validate.noNullElements(array);\n         try {\n             Validate.noNullElements((Object[]) null);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated object is null\", ex.getMessage());\n         }\n         array[1] = null;\n         try {\n-            Validate.notEmpty(array);\n+            Validate.noNullElements(array);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated array contains null element at index: 1\", ex.getMessage());\n         }\n         Validate.noNullElements(array, \"MSG\");\n         try {\n             Validate.noNullElements((Object[]) null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated object is null\", ex.getMessage());\n         }\n         array[1] = null;\n         try {\n-            Validate.notEmpty(array, \"MSG\");\n+            Validate.noNullElements(array, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         Validate.noNullElements(coll);\n         try {\n             Validate.noNullElements((Collection) null);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated object is null\", ex.getMessage());\n         }\n         coll.set(1, null);\n         try {\n-            Validate.notEmpty(coll);\n+            Validate.noNullElements(coll);\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated collection contains null element at index: 1\", ex.getMessage());\n         }\n         Validate.noNullElements(coll, \"MSG\");\n         try {\n             Validate.noNullElements((Collection) null, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated object is null\", ex.getMessage());\n         }\n         coll.set(1, null);\n         try {\n-            Validate.notEmpty(coll, \"MSG\");\n+            Validate.noNullElements(coll, \"MSG\");\n+            fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }", "timestamp": 1060026660, "metainfo": ""}