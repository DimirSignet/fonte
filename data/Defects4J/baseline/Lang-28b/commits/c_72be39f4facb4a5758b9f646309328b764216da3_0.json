{"sha": "72be39f4facb4a5758b9f646309328b764216da3", "log": "LANG-559: Added validState()  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Validate.java\n+++ b/src/main/java/org/apache/commons/lang3/Validate.java\n  */\n public class Validate {\n \n-    private static final String DEFAULT_IS_NULL_EXCEPTION_MESSAGE = \"The validated object is null\";\n-    private static final String DEFAULT_IS_TRUE_EXCEPTION_MESSAGE = \"The validated expression is false\";\n-    private static final String DEFAULT_NO_NULL_ELEMENTS_ARRAY_EXCEPTION_MESSAGE = \"The validated array contains null element at index: %d\";\n-    private static final String DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EXCEPTION_MESSAGE = \"The validated collection contains null element at index: %d\";\n-    private static final String DEFAULT_NOT_BLANK_EXCEPTION_MESSAGE = \"The validated character sequence is blank\";\n-    private static final String DEFAULT_NOT_EMPTY_ARRAY_EXCEPTION_MESSAGE = \"The validated array is empty\";\n-    private static final String DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EXCEPTION_MESSAGE = \"The validated character sequence is empty\";\n-    private static final String DEFAULT_NOT_EMPTY_COLLECTION_EXCEPTION_MESSAGE = \"The validated collection is empty\";\n-    private static final String DEFAULT_NOT_EMPTY_MAP_EXCEPTION_MESSAGE = \"The validated map is empty\";\n-    private static final String DEFAULT_VALID_INDEX_ARRAY_EXCEPTION_MESSAGE = \"The validated array index is invalid: %d\";\n-    private static final String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EXCEPTION_MESSAGE = \"The validated character sequence index is invalid: %d\";\n-    private static final String DEFAULT_VALID_INDEX_COLLECTION_EXCEPTION_MESSAGE = \"The validated collection index is invalid: %d\";\n+    private static final String DEFAULT_IS_NULL_EX_MESSAGE = \"The validated object is null\";\n+    private static final String DEFAULT_IS_TRUE_EX_MESSAGE = \"The validated expression is false\";\n+    private static final String DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE = \"The validated array contains null element at index: %d\";\n+    private static final String DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE = \"The validated collection contains null element at index: %d\";\n+    private static final String DEFAULT_NOT_BLANK_EX_MESSAGE = \"The validated character sequence is blank\";\n+    private static final String DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE = \"The validated array is empty\";\n+    private static final String DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE = \"The validated character sequence is empty\";\n+    private static final String DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE = \"The validated collection is empty\";\n+    private static final String DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE = \"The validated map is empty\";\n+    private static final String DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE = \"The validated array index is invalid: %d\";\n+    private static final String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE = \"The validated character sequence index is invalid: %d\";\n+    private static final String DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE = \"The validated collection index is invalid: %d\";\n+\tprivate static final String DEFAULT_VALID_STATE_EX_MESSAGE = \"The validated state is false\";\n \n     /**\n      * Constructor. This class should not normally be instantiated.\n      * validating according to an arbitrary boolean expression, such as validating a \n      * primitive number or using your own custom validation expression.</p>\n      *\n-     * <pre>Validate.isTrue(myObject.isOk(), \"The object is not OK: %s\", myObject);</pre>\n-     *\n-     * <p>For performance reasons, the object is passed as a separate parameter and\n+     * <pre>Validate.isTrue(i > 0.0, \"The value must be greater than zero: %d\", i);</pre>\n+     *\n+     * <p>For performance reasons, the long value is passed as a separate parameter and\n+     * appended to the exception message only in the case of an error.</p>\n+     * \n+     * @param expression the boolean expression to check \n+     * @param message the exception message if invalid\n+     * @param value the value to append to the message when invalid\n+     * @throws IllegalArgumentException if expression is <code>false</code>\n+     * @see #isTrue(boolean)\n+     * @see #isTrue(boolean, String, double)\n+     * @see #isTrue(boolean, String, Object...)\n+     */\n+    public static void isTrue(boolean expression, String message, long value) {\n+        if (expression == false) {\n+            throw new IllegalArgumentException(String.format(message, Long.valueOf(value)));\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate that the argument condition is <code>true</code>; otherwise \n+     * throwing an exception with the specified message. This method is useful when\n+     * validating according to an arbitrary boolean expression, such as validating a \n+     * primitive number or using your own custom validation expression.</p>\n+     *\n+     * <pre>Validate.isTrue(d > 0.0, \"The value must be greater than zero: %s\", d);</pre>\n+     *\n+     * <p>For performance reasons, the double value is passed as a separate parameter and\n      * appended to the exception message only in the case of an error.</p>\n      * \n      * @param expression the boolean expression to check \n      * @throws IllegalArgumentException if expression is <code>false</code>\n      * @see #isTrue(boolean)\n      * @see #isTrue(boolean, String, long)\n-     * @see #isTrue(boolean, String, double)\n      * @see #isTrue(boolean, String, Object...)\n      */\n-    public static void isTrue(boolean expression, String message, Object value) {\n+    public static void isTrue(boolean expression, String message, double value) {\n         if (expression == false) {\n-            throw new IllegalArgumentException(String.format(message, value));\n+            throw new IllegalArgumentException(String.format(message, new Double(value)));\n         }\n     }\n \n      * validating according to an arbitrary boolean expression, such as validating a \n      * primitive number or using your own custom validation expression.</p>\n      *\n-     * <pre>Validate.isTrue(i > 0.0, \"The value must be greater than zero: %d\", i);</pre>\n-     *\n-     * <p>For performance reasons, the long value is passed as a separate parameter and\n-     * appended to the exception message only in the case of an error.</p>\n-     * \n-     * @param expression the boolean expression to check \n-     * @param message the exception message if invalid\n-     * @param value the value to append to the message when invalid\n-     * @throws IllegalArgumentException if expression is <code>false</code>\n-     * @see #isTrue(boolean)\n-     * @see #isTrue(boolean, String, double)\n-     * @see #isTrue(boolean, String, Object)\n-     * @see #isTrue(boolean, String, Object...)\n-     */\n-    public static void isTrue(boolean expression, String message, long value) {\n-        if (expression == false) {\n-            throw new IllegalArgumentException(String.format(message, Long.valueOf(value)));\n-        }\n-    }\n-\n-    /**\n-     * <p>Validate that the argument condition is <code>true</code>; otherwise \n-     * throwing an exception with the specified message. This method is useful when\n-     * validating according to an arbitrary boolean expression, such as validating a \n-     * primitive number or using your own custom validation expression.</p>\n-     *\n-     * <pre>Validate.isTrue(d > 0.0, \"The value must be greater than zero: %s\", d);</pre>\n-     *\n-     * <p>For performance reasons, the double value is passed as a separate parameter and\n-     * appended to the exception message only in the case of an error.</p>\n-     * \n-     * @param expression the boolean expression to check \n-     * @param message the exception message if invalid\n-     * @param value the value to append to the message when invalid\n-     * @throws IllegalArgumentException if expression is <code>false</code>\n-     * @see #isTrue(boolean)\n-     * @see #isTrue(boolean, String, long)\n-     * @see #isTrue(boolean, String, Object)\n-     * @see #isTrue(boolean, String, Object...)\n-     */\n-    public static void isTrue(boolean expression, String message, double value) {\n-        if (expression == false) {\n-            throw new IllegalArgumentException(String.format(message, new Double(value)));\n-        }\n-    }\n-\n-    /**\n-     * <p>Validate that the argument condition is <code>true</code>; otherwise \n-     * throwing an exception with the specified message. This method is useful when\n-     * validating according to an arbitrary boolean expression, such as validating a \n-     * primitive number or using your own custom validation expression.</p>\n-     *\n      * <pre>\n      * Validate.isTrue(i >= min && i <= max, \"The value must be between %d and %d\", min, max);\n      * Validate.isTrue(myObject.isOk(), \"The object is not okay\");</pre>\n      *\n-     * <p>For performance reasons, the message string should not involve a string append,\n-     * instead use the {@link #isTrue(boolean, String, Object)} method.</p>\n-     * \n      * @param expression the boolean expression to check \n      * @param message the exception message if invalid\n      * @param values the optional values for the formatted exception message\n      * @see #isTrue(boolean)\n      * @see #isTrue(boolean, String, long)\n      * @see #isTrue(boolean, String, double)\n-     * @see #isTrue(boolean, String, Object)\n      */\n     public static void isTrue(boolean expression, String message, Object... values) {\n         if (expression == false) {\n      * @throws IllegalArgumentException if expression is <code>false</code>\n      * @see #isTrue(boolean, String, long)\n      * @see #isTrue(boolean, String, double)\n-     * @see #isTrue(boolean, String, Object)\n      * @see #isTrue(boolean, String, Object...)\n      */\n     public static void isTrue(boolean expression) {\n         if (expression == false) {\n-            throw new IllegalArgumentException(DEFAULT_IS_TRUE_EXCEPTION_MESSAGE);\n+            throw new IllegalArgumentException(DEFAULT_IS_TRUE_EX_MESSAGE);\n         }\n     }\n \n      * @see #notNull(Object, String, Object...)\n      */\n     public static <T> T notNull(T object) {\n-        return notNull(object, DEFAULT_IS_NULL_EXCEPTION_MESSAGE);\n+        return notNull(object, DEFAULT_IS_NULL_EX_MESSAGE);\n     }\n \n     /**\n      * @see #notEmpty(Object[], String, Object...)\n      */\n     public static <T> T[] notEmpty(T[] array) {\n-        return notEmpty(array, DEFAULT_NOT_EMPTY_ARRAY_EXCEPTION_MESSAGE);\n+        return notEmpty(array, DEFAULT_NOT_EMPTY_ARRAY_EX_MESSAGE);\n     }\n \n     // notEmpty collection\n      * @see #notEmpty(Collection, String, Object...)\n      */\n     public static <T extends Collection<?>> T notEmpty(T collection) {\n-        return notEmpty(collection, DEFAULT_NOT_EMPTY_COLLECTION_EXCEPTION_MESSAGE);\n+        return notEmpty(collection, DEFAULT_NOT_EMPTY_COLLECTION_EX_MESSAGE);\n     }\n \n     // notEmpty map\n      * @see #notEmpty(Map, String, Object...)\n      */\n     public static <T extends Map<?, ?>> T notEmpty(T map) {\n-        return notEmpty(map, DEFAULT_NOT_EMPTY_MAP_EXCEPTION_MESSAGE);\n+        return notEmpty(map, DEFAULT_NOT_EMPTY_MAP_EX_MESSAGE);\n     }\n \n     // notEmpty string\n      * @see #notEmpty(CharSequence, String, Object...)\n      */\n     public static <T extends CharSequence> T notEmpty(T chars) {\n-        return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EXCEPTION_MESSAGE);\n+        return notEmpty(chars, DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE);\n     }\n \n     // notBlank string\n      * @see #notBlank(CharSequence, String, Object...)\n      */\n     public static <T extends CharSequence> T notBlank(T chars) {\n-        return notBlank(chars, DEFAULT_NOT_BLANK_EXCEPTION_MESSAGE);\n+        return notBlank(chars, DEFAULT_NOT_BLANK_EX_MESSAGE);\n     }\n \n     // notNullElements array\n      * @see #noNullElements(Object[], String, Object...)\n      */\n     public static <T> T[] noNullElements(T[] array) {\n-        return noNullElements(array, DEFAULT_NO_NULL_ELEMENTS_ARRAY_EXCEPTION_MESSAGE);\n+        return noNullElements(array, DEFAULT_NO_NULL_ELEMENTS_ARRAY_EX_MESSAGE);\n     }\n \n     // notNullElements collection\n      * @see #noNullElements(Collection, String, Object...)\n      */\n     public static <T extends Iterable<?>> T noNullElements(T iterable) {\n-        return noNullElements(iterable, DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EXCEPTION_MESSAGE);\n+        return noNullElements(iterable, DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE);\n     }\n \n     // validIndex array\n      * @see #validIndex(Object[], int, String, Object...)\n      */\n     public static <T> T[] validIndex(T[] array, int index) {\n-        return validIndex(array, index, DEFAULT_VALID_INDEX_ARRAY_EXCEPTION_MESSAGE, Integer.valueOf(index));\n+        return validIndex(array, index, DEFAULT_VALID_INDEX_ARRAY_EX_MESSAGE, Integer.valueOf(index));\n     }\n \n     // validIndex collection\n      * @see #validIndex(Collection, int, String, Object...)\n      */\n     public static <T extends Collection<?>> T validIndex(T collection, int index) {\n-        return validIndex(collection, index, DEFAULT_VALID_INDEX_COLLECTION_EXCEPTION_MESSAGE, Integer.valueOf(index));\n+        return validIndex(collection, index, DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE, Integer.valueOf(index));\n     }\n \n     // validIndex string\n      * @see #validIndex(CharSequence, int, String, Object...)\n      */\n     public static <T extends CharSequence> T validIndex(T chars, int index) {\n-        return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EXCEPTION_MESSAGE, Integer.valueOf(index));\n+        return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE, Integer.valueOf(index));\n+    }\n+\n+    /**\n+     * <p>Validate that the stateful condition is <code>true</code>; otherwise \n+     * throwing an exception. This method is useful when validating according \n+     * to an arbitrary boolean expression, such as validating a \n+     * primitive number or using your own custom validation expression.</p>\n+     *\n+     * <pre>\n+     * Validate.validState(field > 0);\n+     * Validate.validState(this.isOk());</pre>\n+     *\n+     * <p>The message of the exception is &quot;The validated state is \n+     * false&quot;.</p>\n+     * \n+     * @param expression the boolean expression to check \n+     * @throws IllegalStateException if expression is <code>false</code>\n+     * @see #validState(boolean, String, Object...)\n+     */\n+    public static void validState(boolean expression) {\n+        if (expression == false) {\n+            throw new IllegalArgumentException(DEFAULT_VALID_STATE_EX_MESSAGE);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate that the stateful condition is <code>true</code>; otherwise \n+     * throwing an exception with the specified message. This method is useful when\n+     * validating according to an arbitrary boolean expression, such as validating a \n+     * primitive number or using your own custom validation expression.</p>\n+     *\n+     * <pre>Validate.validState(this.isOk(), \"The state is not OK: %s\", myObject);</pre>\n+     *\n+     * @param expression the boolean expression to check \n+     * @param message the exception message if invalid\n+     * @param values the optional values for the formatted exception message\n+     * @throws IllegalStateException if expression is <code>false</code>\n+     * @see #validState(boolean)\n+     */\n+    public static void validState(boolean expression, String message, Object... values) {\n+        if (expression == false) {\n+            throw new IllegalStateException(String.format(message, values));\n+        }\n     }\n \n }", "timestamp": 1262500744, "metainfo": ""}