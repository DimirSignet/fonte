{"sha": "36719568529d0200e9b273179ca655e24fe04054", "log": "Add @since 2.0 tags based on http://www.apache.org/~bayard/commons-lang-2.0/Commons-Lang-1.0.1-to-2.0/missingSinces.txt   ", "commit": "\n--- a/src/java/org/apache/commons/lang/CharSet.java\n+++ b/src/java/org/apache/commons/lang/CharSet.java\n  * @author Stephen Colebourne\n  * @author Phil Steitz\n  * @author Pete Gieser\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: CharSet.java,v 1.17 2003/08/19 00:11:20 scolebourne Exp $\n+ * @version $Id: CharSet.java,v 1.18 2003/08/21 05:25:34 ggregory Exp $\n  */\n public class CharSet implements Serializable {\n \n     /** Serialization lock, Lang version 2.0. */\n     private static final long serialVersionUID = 5947847346149275958L;\n \n-    /** A CharSet defining no characters. */\n+    /** \n+     * A CharSet defining no characters. \n+     * @since 2.0\n+     */\n     public static final CharSet EMPTY = new CharSet((String) null);\n-    /** A CharSet defining ASCII alphabetic characters \"a-zA-Z\". */\n+\n+    /** \n+     * A CharSet defining ASCII alphabetic characters \"a-zA-Z\".\n+     * @since 2.0\n+     */\n     public static final CharSet ASCII_ALPHA = new CharSet(\"a-zA-Z\");\n-    /** A CharSet defining ASCII alphabetic characters \"a-z\". */\n+\n+    /** \n+     * A CharSet defining ASCII alphabetic characters \"a-z\".\n+     * @since 2.0\n+     */\n     public static final CharSet ASCII_ALPHA_LOWER = new CharSet(\"a-z\");\n-    /** A CharSet defining ASCII alphabetic characters \"A-Z\". */\n+\n+    /** \n+     * A CharSet defining ASCII alphabetic characters \"A-Z\".\n+     * @since 2.0\n+     */\n     public static final CharSet ASCII_ALPHA_UPPER = new CharSet(\"A-Z\");\n-    /** A CharSet defining ASCII alphabetic characters \"0-9\". */\n+\n+    /** \n+     * A CharSet defining ASCII alphabetic characters \"0-9\".\n+     * @since 2.0\n+     */\n     public static final CharSet ASCII_NUMERIC = new CharSet(\"0-9\");\n \n     /**\n      * A Map of the common cases used in the factory.\n      * Subclasses can add more common patterns if desired.\n+     * @since 2.0\n      */\n     protected static final Map COMMON = new HashMap();\n+    \n     static {\n         COMMON.put(null, EMPTY);\n         COMMON.put(\"\", EMPTY);\n      *\n      * @param setStr  the String describing the set, may be null\n      * @return a CharSet instance\n+     * @since 2.0\n      */\n     public static CharSet getInstance(String setStr) {\n         Object set = COMMON.get(setStr);\n      * <p>Constructs a new CharSet using the set syntax.</p>\n      *\n      * @param setStr  the String describing the set, may be null\n+     * @since 2.0\n      */\n     protected CharSet(String setStr) {\n         super();\n      * <p>Gets the internal set as an array of CharRange objects.</p>\n      *\n      * @return an array of immutable CharRange objects\n+     * @since 2.0\n      */\n     public CharRange[] getCharRanges() {\n         return (CharRange[]) set.toArray(new CharRange[set.size()]);\n      *\n      * @param obj  the object to compare to\n      * @return true if equal\n+     * @since 2.0\n      */\n     public boolean equals(Object obj) {\n         if (obj == this) {\n      * <p>Gets a hashCode compatable with the equals method.</p>\n      *\n      * @return a suitable hashCode\n+     * @since 2.0\n      */\n     public int hashCode() {\n         return 89 + set.hashCode();", "timestamp": 1061443534, "metainfo": ""}