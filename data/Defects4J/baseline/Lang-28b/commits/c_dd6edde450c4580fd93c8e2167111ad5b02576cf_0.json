{"sha": "dd6edde450c4580fd93c8e2167111ad5b02576cf", "log": "Javadoc  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n      * @see <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n      * @see <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n      * @see <a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n-     **/\n+     */\n     public static String escapeHtml(String str) {\n         if (str == null) {\n             return null;\n         }\n-        \n         try {\n             StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n             escapeHtml(writer, str);\n             return null;\n         }\n     }\n-    \n+\n     /**\n      * <p>Escapes the characters in a <code>String</code> using HTML entities and writes\n      * them to a <code>Writer</code>.</p>\n      * Note that the commonly used apostrophe escape character (&amp;apos;)\n      * is not a legal entity and so is not supported). </p>\n      *\n-     * @param writer The <code>Writer</code> to write the result to. This must not be <code>null</code>.\n-     * @param string  The <code>String</code> to escape. This may be <code>null</code>.\n-     * \n+     * @param writer  the writer receiving the escaped string, not null\n+     * @param string  the <code>String</code> to escape, may be null\n+     * @throws IllegalArgumentException if the writer is null\n      * @throws IOException when <code>Writer</code> passed throws the exception from\n      *                                       calls to the {@link Writer#write(int)} methods.\n      * \n         if (writer == null ) {\n             throw new IllegalArgumentException (\"The Writer must not be null.\");\n         }\n-        \n         if (string == null) {\n             return;\n         }\n-        \n         Entities.HTML40.escape(writer, string);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Unescapes a string containing entity escapes to a string\n      * containing the actual Unicode characters corresponding to the\n      * @param str  the <code>String</code> to unescape, may be null\n      * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n      * @see #escapeHtml(Writer, String)\n-     **/\n+     */\n     public static String unescapeHtml(String str) {\n         if (str == null) {\n             return null;\n         }\n-        \n         try {\n             StringWriter writer = new StringWriter ((int)(str.length() * 1.5));\n             unescapeHtml(writer, str);\n             return null;\n         }\n     }\n-    \n+\n     /**\n      * <p>Unescapes a string containing entity escapes to a string\n      * containing the actual Unicode characters corresponding to the\n      * verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n      * become \"&gt;&amp;zzzz;x\".</p>\n      *\n-     * @param writer writer receiving the unescaped string\n+     * @param writer  the writer receiving the unescaped string, not null\n      * @param string  the <code>String</code> to unescape, may be null\n+     * @throws IllegalArgumentException if the writer is null\n      * @throws IOException if an IOException occurs\n      * @see #escapeHtml(String)\n-     **/\n+     */\n     public static void unescapeHtml(Writer writer, String string) throws IOException {\n         if (writer == null ) {\n             throw new IllegalArgumentException (\"The Writer must not be null.\");\n         }\n-        \n         if (string == null) {\n             return;\n         }\n-        \n         Entities.HTML40.unescape(writer, string);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Escapes the characters in a <code>String</code> using XML entities.</p>\n      *\n      * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n      * Does not support DTDs or external entities.</p>\n      *\n-     * @param writer writer receiving the unescaped string\n+     * @param writer  the writer receiving the unescaped string, not null\n+     * @param str  the <code>String</code> to escape, may be null\n+     * @return a new escaped <code>String</code>, <code>null</code> if null string input\n+     * @throws IllegalArgumentException if the writer is null\n+     * @see #unescapeXml(java.lang.String)\n+     */\n+    public static void escapeXml(Writer writer, String str) throws IOException {\n+        if (writer == null ) {\n+            throw new IllegalArgumentException (\"The Writer must not be null.\");\n+        }\n+        if (str == null) {\n+            return;\n+        }\n+        Entities.XML.escape(writer, str);\n+    }\n+\n+    /**\n+     * <p>Escapes the characters in a <code>String</code> using XML entities.</p>\n+     *\n+     * <p>For example: <tt>\"bread\" & \"butter\"</tt> =>\n+     * <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n+     * </p>\n+     *\n+     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n+     * Does not support DTDs or external entities.</p>\n+     *\n      * @param str  the <code>String</code> to escape, may be null\n      * @return a new escaped <code>String</code>, <code>null</code> if null string input\n      * @see #unescapeXml(java.lang.String)\n-     **/\n-    public static void escapeXml(Writer writer, String str) throws IOException {\n-        if (writer == null ) {\n-            throw new IllegalArgumentException (\"The Writer must not be null.\");\n-        }\n-        \n-        if (str == null) {\n-            return;\n-        }\n-        Entities.XML.escape(writer, str);\n-    }\n-\n-    /**\n-     * <p>Escapes the characters in a <code>String</code> using XML entities.</p>\n-     *\n-     * <p>For example: <tt>\"bread\" & \"butter\"</tt> =>\n-     * <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n-     * </p>\n-     *\n-     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n-     * Does not support DTDs or external entities.</p>\n-     *\n-     * @param str  the <code>String</code> to escape, may be null\n-     * @return a new escaped <code>String</code>, <code>null</code> if null string input\n-     * @see #unescapeXml(java.lang.String)\n-     **/\n+     */\n     public static String escapeXml(String str) {\n         if (str == null) {\n             return null;\n         return Entities.XML.escape(str);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Unescapes a string containing XML entity escapes to a string\n      * containing the actual Unicode characters corresponding to the\n      * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n      * Does not support DTDs or external entities.</p>\n      *\n-     * @param writer writer receiving the unescaped string\n+     * @param writer  the writer receiving the unescaped string, not null\n+     * @param str  the <code>String</code> to unescape, may be null\n+     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n+     * @throws IllegalArgumentException if the writer is null\n+     * @see #escapeXml(String)\n+     */\n+    public static void unescapeXml(Writer writer, String str) throws IOException {\n+        if (writer == null ) {\n+            throw new IllegalArgumentException (\"The Writer must not be null.\");\n+        }\n+        if (str == null) {\n+            return;\n+        }\n+        Entities.XML.unescape(writer, str);\n+    }\n+\n+    /**\n+     * <p>Unescapes a string containing XML entity escapes to a string\n+     * containing the actual Unicode characters corresponding to the\n+     * escapes.</p>\n+     *\n+     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n+     * Does not support DTDs or external entities.</p>\n+     *\n      * @param str  the <code>String</code> to unescape, may be null\n      * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n      * @see #escapeXml(String)\n-     **/\n-    public static void unescapeXml(Writer writer, String str) throws IOException {\n-        if (writer == null ) {\n-            throw new IllegalArgumentException (\"The Writer must not be null.\");\n-        }\n-        \n-        if (str == null) {\n-            return;\n-        }\n-        Entities.XML.unescape(writer, str);\n-    }\n-\n-    /**\n-     * <p>Unescapes a string containing XML entity escapes to a string\n-     * containing the actual Unicode characters corresponding to the\n-     * escapes.</p>\n-     *\n-     * <p>Supports only the five basic XML entities (gt, lt, quot, amp, apos).\n-     * Does not support DTDs or external entities.</p>\n-     *\n-     * @param str  the <code>String</code> to unescape, may be null\n-     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n-     * @see #escapeXml(String)\n-     **/\n+     */\n     public static String unescapeXml(String str) {\n         if (str == null) {\n             return null;\n         return Entities.XML.unescape(str);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Escapes the characters in a <code>String</code> to be suitable to pass to\n      * an SQL query.</p>\n     }\n \n }\n-", "timestamp": 1151836294, "metainfo": ""}