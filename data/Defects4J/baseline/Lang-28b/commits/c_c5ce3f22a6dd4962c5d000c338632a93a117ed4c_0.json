{"sha": "c5ce3f22a6dd4962c5d000c338632a93a117ed4c", "log": "increase ArrayUtils test coverage as reported by clover  ", "commit": "\n--- a/src/test/org/apache/commons/lang/ArrayUtilsAddTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsAddTest.java\n         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, \n             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) );\n \n+        assertTrue( Arrays.equals( new boolean[] { false, true }, \n+            ArrayUtils.addAll( null, new boolean[] { false, true } ) ) );\n+\n+        assertTrue( Arrays.equals( new boolean[] { true, false }, \n+            ArrayUtils.addAll( new boolean[] { true, false }, null ) ) );\n+\n         // char\n         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, \n             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) );\n \n+        assertTrue( Arrays.equals( new char[] { 'c', 'd' }, \n+            ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) );\n+\n+        assertTrue( Arrays.equals( new char[] { 'a', 'b' }, \n+            ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) );\n+\n         // byte\n         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, \n             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) );\n \n+        assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, \n+            ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) );\n+\n+        assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, \n+            ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) );\n+\n         // short\n         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, \n             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) );\n \n+        assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, \n+            ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) );\n+\n+        assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, \n+            ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) );\n+\n         // int\n         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, \n             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) );\n \n+        assertTrue( Arrays.equals( new int[] { -1000, -1 }, \n+            ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) );\n+\n+        assertTrue( Arrays.equals( new int[] { 1, 1000 }, \n+            ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) );\n+\n         // long\n         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, \n             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) );\n \n+        assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, \n+            ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) );\n+        \n+        assertTrue( Arrays.equals( new long[] { 1L, -1L }, \n+            ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) );\n+\n         // float\n         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, \n             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) );\n \n+        assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, \n+            ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) );\n+\n+        assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, \n+            ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) );\n+\n         // double\n         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, \n             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) );\n+\n+        assertTrue( Arrays.equals( new double[] { 0, 9.99 }, \n+            ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) );\n+\n+        assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, \n+            ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) );\n \n     }    \n     \n         // boolean tests\n         boolean[] booleanArray = ArrayUtils.add( null, 0, true );\n         assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) );\n+        try {\n+            booleanArray = ArrayUtils.add( null, -1, true );\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n         booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false);\n         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );\n         booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true);\n         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) );\n         booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true);\n         assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) );\n+        try {\n+            booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n \n         // char tests\n         char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' );\n         assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) );\n+        try {\n+            charArray = ArrayUtils.add( (char[]) null, -1, 'a' );\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n         charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b');\n         assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) );\n         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c');\n         assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) );\n         charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't');\n         assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) );\n+        try {\n+            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c');\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c');\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n \n         // short tests\n         short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2);\n         assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) );\n+        try {\n+            shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10);\n         assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) );\n         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4);\n         assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) );\n         shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1);\n         assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) );\n+        try {\n+            shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n \n         // byte tests\n         byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2);\n         assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) );\n+        try {\n+            byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3);\n         assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) );\n         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1);\n         assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) );\n         byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1);\n         assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) );\n+        try {\n+            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n \n         // int tests\n         int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2);\n         assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) );\n+        try {\n+            intArray = ArrayUtils.add( (int[]) null, -1, 2);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n         intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10);\n         assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) );\n         intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4);\n         assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) );\n         intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1);\n         assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) );\n+        try {\n+            intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n \n         // long tests\n         long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L);\n         assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) );\n+        try {\n+            longArray = ArrayUtils.add( (long[]) null, -1, 2L);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L);\n         assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) );\n         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L);\n         assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) );\n         longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L);\n         assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) );\n+        try {\n+            longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n \n         // float tests\n         float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f);\n         assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) );\n+        try {\n+            floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n         floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f);\n         assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) );\n         floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f);\n         assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) );\n         floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f);\n         assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) );\n+        try {\n+            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n \n         // double tests\n         double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2);\n         assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) );\n+        try {\n+          doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 0\", e.getMessage());\n+        }\n         doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5);\n         assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) );\n         doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8);\n         assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) );\n         doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0);\n         assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) );\n+        try {\n+            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: 4, Length: 2\", e.getMessage());\n+        }\n+        try {\n+            doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5);\n+        } catch(IndexOutOfBoundsException e) {\n+            assertEquals(\"Index: -1, Length: 2\", e.getMessage());\n+        }\n     }\n     \n }\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n         array = new double[0];\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n+        array = new double[] { (double) 3 };\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 1, 0, (double) 0));\n         array = new double[] { 0, 1, 2, 3, 0 };\n         assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 99, (double) 0.3));\n         assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 3, (double) 0.3));", "timestamp": 1124669763, "metainfo": ""}