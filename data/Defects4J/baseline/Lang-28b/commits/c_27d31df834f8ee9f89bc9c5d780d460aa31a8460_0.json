{"sha": "27d31df834f8ee9f89bc9c5d780d460aa31a8460", "log": "Applying my patch from LANG-298, based on Tomasz Blachowicz's original patch, and adds getPackageCanonicalName and getShortCanonicalName sets of methods  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  * @author Gary Gregory\n  * @author Norm Deane\n  * @author Alban Peignier\n+ * @author Tomasz Blachowicz\n  * @since 2.0\n  * @version $Id$\n  */\n      * Maps a primitive class name to its corresponding abbreviation used in array class names.\n      */\n     private static Map abbreviationMap = new HashMap();\n+\n+    /**\n+     * Maps an abbreviation used in array class names to corresponding primitive class name.\n+     */\n+    private static Map reverseAbbreviationMap = new HashMap();\n+    \n+    /**\n+     * Add primitive type abbreviation to maps of abbreviations.\n+     * \n+     * @param primitive Canonical name of primitive type\n+     * @param abbreviation Corresponding abbreviation of primitive type\n+     */\n+    private static void addAbbreviation(String primitive, String abbreviation) {\n+        abbreviationMap.put(primitive, abbreviation);\n+        reverseAbbreviationMap.put(abbreviation, primitive);\n+    }\n+    \n+    /**\n+     * Feed abbreviation maps\n+     */\n     static {\n-        abbreviationMap.put( \"int\", \"I\" );\n-        abbreviationMap.put( \"boolean\", \"Z\" );\n-        abbreviationMap.put( \"float\", \"F\" );\n-        abbreviationMap.put( \"long\", \"J\" );\n-        abbreviationMap.put( \"short\", \"S\" );\n-        abbreviationMap.put( \"byte\", \"B\" );\n-        abbreviationMap.put( \"double\", \"D\" );\n-        abbreviationMap.put( \"char\", \"C\" );\n+        addAbbreviation(\"int\", \"I\");\n+        addAbbreviation(\"boolean\", \"Z\");\n+        addAbbreviation(\"float\", \"F\");\n+        addAbbreviation(\"long\", \"J\");\n+        addAbbreviation(\"short\", \"S\");\n+        addAbbreviation(\"byte\", \"B\");\n+        addAbbreviation(\"double\", \"D\");\n+        addAbbreviation(\"char\", \"C\");\n     }\n \n     /**\n             String clsName = \"[\" + abbreviationMap.get(className);\n             clazz = Class.forName(clsName, initialize, classLoader).getComponentType();\n         } else {\n-            clazz = Class.forName(toProperClassName(className), initialize, classLoader);\n+            clazz = Class.forName(toCanonicalName(className), initialize, classLoader);\n         }\n         return clazz;\n     }\n      * @param className  the class name\n      * @return the converted name\n      */\n-    private static String toProperClassName(String className) {\n+    private static String toCanonicalName(String className) {\n         className = StringUtils.deleteWhitespace(className);\n         if (className == null) {\n             throw new NullArgumentException(\"className\");\n         }\n         return classes;\n     }\n+\n+    // Short canonical name\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Gets the canonical name minus the package name for an <code>Object</code>.</p>\n+     *\n+     * @param object  the class to get the short name for, may be null\n+     * @param valueIfNull  the value to return if null\n+     * @return the canonical name of the object without the package name, or the null value\n+     * @since 2.4\n+     */\n+    public static String getShortCanonicalName(Object object, String valueIfNull) {\n+        if (object == null) {\n+            return valueIfNull;\n+        }\n+        return getShortCanonicalName(object.getClass().getName());\n+    }\n+\n+    /**\n+     * <p>Gets the canonical name minus the package name from a <code>Class</code>.</p>\n+     *\n+     * @param cls  the class to get the short name for.\n+     * @return the canonical name without the package name or an empty string\n+     * @since 2.4\n+     */\n+    public static String getShortCanonicalName(Class cls) {\n+        if (cls == null) {\n+            return StringUtils.EMPTY;\n+        }\n+        return getShortCanonicalName(cls.getName());\n+    }\n+\n+    /**\n+     * <p>Gets the canonical name minus the package name from a String.</p>\n+     *\n+     * <p>The string passed in is assumed to be a canonical name - it is not checked.</p>\n+     *\n+     * @param className  the className to get the short name for\n+     * @return the canonical name of the class without the package name or an empty string\n+     * @since 2.4\n+     */\n+    public static String getShortCanonicalName(String canonicalName) {\n+        return ClassUtils.getShortClassName(getCanonicalName(canonicalName));\n+    }\n+\n+    // Package name\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Gets the package name from the canonical name of an <code>Object</code>.</p>\n+     *\n+     * @param object  the class to get the package name for, may be null\n+     * @param valueIfNull  the value to return if null\n+     * @return the package name of the object, or the null value\n+     * @since 2.4\n+     */\n+    public static String getPackageCanonicalName(Object object, String valueIfNull) {\n+        if (object == null) {\n+            return valueIfNull;\n+        }\n+        return getPackageCanonicalName(object.getClass().getName());\n+    }\n+\n+    /**\n+     * <p>Gets the package name from the canonical name of a <code>Class</code>.</p>\n+     *\n+     * @param cls  the class to get the package name for, may be <code>null</code>.\n+     * @return the package name or an empty string\n+     * @since 2.4\n+     */\n+    public static String getPackageCanonicalName(Class cls) {\n+        if (cls == null) {\n+            return StringUtils.EMPTY;\n+        }\n+        return getPackageCanonicalName(cls.getName());\n+    }\n+\n+    /**\n+     * <p>Gets the package name from the canonical name. </p>\n+     *\n+     * <p>The string passed in is assumed to be a canonical name - it is not checked.</p>\n+     * <p>If the class is unpackaged, return an empty string.</p>\n+     *\n+     * @param canonicalName  the canonical name to get the package name for, may be <code>null</code>\n+     * @return the package name or an empty string\n+     * @since 2.4\n+     */\n+    public static String getPackageCanonicalName(String canonicalName) {\n+        return ClassUtils.getPackageName(getCanonicalName(canonicalName));\n+    }\n+\n+    /**\n+     * <p>Converts a given name of class into canonical format.\n+     * If name of class is not a name of array class it returns\n+     * unchanged name.</p>\n+     * <p>Example:\n+     * <ul>\n+     * <li><code>getCanonicalName(\"[I\") = \"int[]\"</code></li>\n+     * <li><code>getCanonicalName(\"[Ljava.lang.String;\") = \"java.lang.String[]\"</code></li>\n+     * <li><code>getCanonicalName(\"java.lang.String\") = \"java.lang.String\"</code></li>\n+     * </ul>\n+     * </p>\n+     * \n+     * @param className the name of class\n+     * @return canonical form of class name\n+     * @since 2.4\n+     */\n+    private static String getCanonicalName(String className) {\n+        className = StringUtils.deleteWhitespace(className);\n+        if (className == null) {\n+            return null;\n+        } else {\n+            int dim = 0;\n+            while(className.startsWith(\"[\")) {\n+                dim++;\n+                className = className.substring(1);\n+            }\n+            if(dim < 1) {\n+                return className;\n+            } else {\n+                if(className.startsWith(\"L\")) {\n+                    className = className.substring(\n+                        1,\n+                        className.endsWith(\";\")\n+                            ? className.length() - 1\n+                            : className.length());\n+                } else {\n+                    if(className.length() > 0) {\n+                        className = (String) reverseAbbreviationMap.get(\n+                            className.substring(0, 1));\n+                    }\n+                }\n+                StringBuffer canonicalClassNameBuffer = new StringBuffer(className);\n+                for(int i = 0; i < dim; i++) {\n+                    canonicalClassNameBuffer.append(\"[]\");\n+                }\n+                return canonicalClassNameBuffer.toString();\n+            }\n+        }\n+    }\n }\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n  *\n  * @author Stephen Colebourne\n  * @author Gary D. Gregory\n+ * @author Tomasz Blachowicz\n  * @version $Id$\n  */\n public class ClassUtilsTest extends TestCase {\n         assertEquals(\"Double\", ClassUtils.getShortClassName(results[2]));\n     }\n \n+    public void test_getShortCanonicalName_Object() {\n+        assertEquals(\"<null>\", ClassUtils.getShortCanonicalName(null, \"<null>\"));\n+        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(new ClassUtils(), \"<null>\"));\n+        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(new ClassUtils[0], \"<null>\"));\n+        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], \"<null>\"));\n+        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(new int[0], \"<null>\"));\n+        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(new int[0][0], \"<null>\"));\n+    }\n+\n+    public void test_getShortCanonicalName_Class() {\n+        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(ClassUtils.class));\n+        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(ClassUtils[].class));\n+        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(ClassUtils[][].class));\n+        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(int[].class));\n+        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(int[][].class));\n+    }\n+\n+    public void test_getShortCanonicalName_String() {\n+        assertEquals(\"ClassUtils\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang.ClassUtils\"));\n+        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(\"[Lorg.apache.commons.lang.ClassUtils;\"));\n+        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(\"[[Lorg.apache.commons.lang.ClassUtils;\"));\n+        assertEquals(\"ClassUtils[]\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang.ClassUtils[]\"));\n+        assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang.ClassUtils[][]\"));\n+        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(\"[I\"));\n+        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"[[I\"));\n+        assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(\"int[]\"));\n+        assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"int[][]\"));\n+    }\n+\n+    public void test_getPackageCanonicalName_Object() {\n+        assertEquals(\"<null>\", ClassUtils.getPackageCanonicalName(null, \"<null>\"));\n+        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageCanonicalName(new ClassUtils(), \"<null>\"));\n+        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageCanonicalName(new ClassUtils[0], \"<null>\"));\n+        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], \"<null>\"));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0], \"<null>\"));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0][0], \"<null>\"));\n+    }\n+\n+    public void test_getPackageCanonicalName_Class() {\n+        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageCanonicalName(ClassUtils.class));\n+        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageCanonicalName(ClassUtils[].class));\n+        assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageCanonicalName(ClassUtils[][].class));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[].class));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[][].class));\n+    }\n+\n+    public void test_getPackageCanonicalName_String() {\n+        assertEquals(\"org.apache.commons.lang\", \n+            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang.ClassUtils\"));\n+        assertEquals(\"org.apache.commons.lang\", \n+            ClassUtils.getPackageCanonicalName(\"[Lorg.apache.commons.lang.ClassUtils;\"));\n+        assertEquals(\"org.apache.commons.lang\", \n+            ClassUtils.getPackageCanonicalName(\"[[Lorg.apache.commons.lang.ClassUtils;\"));\n+        assertEquals(\"org.apache.commons.lang\", \n+            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang.ClassUtils[]\"));\n+        assertEquals(\"org.apache.commons.lang\", \n+            ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang.ClassUtils[][]\"));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[I\"));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[[I\"));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[]\"));\n+        assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[][]\"));\n+    }\n+\n }", "timestamp": 1200557123, "metainfo": ""}