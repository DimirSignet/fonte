{"sha": "9250cf31de34c32ddbab386fb0f8bc41613decba", "log": "[CODEC-110] Add a String version of Base64.isArrayByteBase64(). https://issues.apache.org/jira/browse/CODEC-110  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n     }\n \n     /**\n+     * Tests a given String to see if it contains only valid characters within the Base64 alphabet. Currently the\n+     * method treats whitespace as valid.\n+     * \n+     * @param base64\n+     *            String to test\n+     * @return <code>true</code> if all characters in the String are valid characters in the Base64 alphabet or if\n+     *         the String is empty; <code>false</code>, otherwise\n+     *  @since 1.5\n+     */\n+    public static boolean isBase64(String base64) {\n+        return isArrayByteBase64(StringUtils.getBytesUtf8(base64));\n+    }\n+\n+    /**\n      * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet. Currently the\n      * method treats whitespace as valid.\n      * \n             }\n         }\n         return true;\n-    }\n-\n-    /**\n-     * Tests a given String to see if it contains only valid characters within the Base64 alphabet. Currently the\n-     * method treats whitespace as valid.\n-     * \n-     * @param base64\n-     *            String of (presumably) base64 characters to test\n-     * @return <code>true</code> if all characters in the String are valid characters in the Base64 alphabet or if\n-     *         the String is empty; false, otherwise\n-     */\n-    public static boolean isStringBase64(String base64) {\n-        return isArrayByteBase64(StringUtils.getBytesUtf8(base64));\n     }\n     \n     /**\n--- a/src/test/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java\n         String invalidString = validString + ((char)0); // append null character\n         \n         try {\n-            Base64.isStringBase64(nullString);\n+            Base64.isBase64(nullString);\n             fail(\"Base64.isStringBase64() should not be null-safe.\");\n         } catch (NullPointerException npe) {\n             assertNotNull(\"Base64.isStringBase64() should not be null-safe.\", npe);\n         }\n         \n-        assertTrue(\"Base64.isStringBase64(empty-string) is true\", Base64.isStringBase64(emptyString));\n-        assertTrue(\"Base64.isStringBase64(valid-string) is true\", Base64.isStringBase64(validString));        \n-        assertFalse(\"Base64.isStringBase64(invalid-string) is false\", Base64.isStringBase64(invalidString));        \n+        assertTrue(\"Base64.isStringBase64(empty-string) is true\", Base64.isBase64(emptyString));\n+        assertTrue(\"Base64.isStringBase64(valid-string) is true\", Base64.isBase64(validString));        \n+        assertFalse(\"Base64.isStringBase64(invalid-string) is false\", Base64.isBase64(invalidString));        \n     }\n     \n     /**", "timestamp": 1295920427, "metainfo": ""}