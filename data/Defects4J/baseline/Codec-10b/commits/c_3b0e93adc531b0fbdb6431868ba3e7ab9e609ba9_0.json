{"sha": "3b0e93adc531b0fbdb6431868ba3e7ab9e609ba9", "log": "Format before adding tests.  ", "commit": "\n--- a/src/test/org/apache/commons/codec/language/ColognePhoneticTest.java\n+++ b/src/test/org/apache/commons/codec/language/ColognePhoneticTest.java\n     public void testBorderCases() {\n         ColognePhonetic koellePhon = new ColognePhonetic();\n \n-        String[][] data = { { \"a\", \"0\" }, { \"e\", \"0\" }, { \"i\", \"0\" },\n-                { \"o\", \"0\" }, { \"u\", \"0\" }, { \"\\u00E4\", \"0\" }, { \"\\u00F6\", \"0\" },\n-                { \"\\u00FC\", \"0\" }, { \"aa\", \"0\" }, { \"ha\", \"0\" }, { \"h\", \"\" },\n-                { \"aha\", \"0\" }, { \"b\", \"1\" }, { \"p\", \"1\" }, { \"ph\", \"3\" },\n-                { \"f\", \"3\" }, { \"v\", \"3\" }, { \"w\", \"3\" }, { \"g\", \"4\" },\n-                { \"k\", \"4\" }, { \"q\", \"4\" }, { \"x\", \"48\" }, { \"ax\", \"048\" },\n-                { \"cx\", \"48\" }, { \"l\", \"5\" }, { \"cl\", \"45\" }, { \"acl\", \"085\" },\n-                { \"mn\", \"6\" }, { \"r\", \"7\" } };\n+        String[][] data = {\n+            {\"a\", \"0\"},\n+            {\"e\", \"0\"},\n+            {\"i\", \"0\"},\n+            {\"o\", \"0\"},\n+            {\"u\", \"0\"},\n+            {\"\\u00E4\", \"0\"},\n+            {\"\\u00F6\", \"0\"},\n+            {\"\\u00FC\", \"0\"},\n+            {\"aa\", \"0\"},\n+            {\"ha\", \"0\"},\n+            {\"h\", \"\"},\n+            {\"aha\", \"0\"},\n+            {\"b\", \"1\"},\n+            {\"p\", \"1\"},\n+            {\"ph\", \"3\"},\n+            {\"f\", \"3\"},\n+            {\"v\", \"3\"},\n+            {\"w\", \"3\"},\n+            {\"g\", \"4\"},\n+            {\"k\", \"4\"},\n+            {\"q\", \"4\"},\n+            {\"x\", \"48\"},\n+            {\"ax\", \"048\"},\n+            {\"cx\", \"48\"},\n+            {\"l\", \"5\"},\n+            {\"cl\", \"45\"},\n+            {\"acl\", \"085\"},\n+            {\"mn\", \"6\"},\n+            {\"r\", \"7\"}};\n \n         for (int i = 0; i < data.length; i++) {\n-            assertEquals(\"Failed to correctly convert element of index: \" + i,\n-                         data[i][1], koellePhon.colognePhonetic(data[i][0]));\n+            assertEquals(\"Failed to correctly convert element of index: \" + i, data[i][1], koellePhon.colognePhonetic(data[i][0]));\n         }\n     }\n \n     public void testExamples() {\n         ColognePhonetic koellePhon = new ColognePhonetic();\n-        String[][] data = { { \"M\u00fcller-L\u00fcdenscheidt\", \"65752682\" },\n-                { \"Breschnew\", \"17863\" }, { \"Wikipedia\", \"3412\" } };\n-\n+        String[][] data = {{\"M\u00fcller-L\u00fcdenscheidt\", \"65752682\"}, {\"Breschnew\", \"17863\"}, {\"Wikipedia\", \"3412\"}};\n         for (int i = 0; i < data.length; i++) {\n             assertEquals(data[i][1], koellePhon.colognePhonetic(data[i][0]));\n         }\n \n     public void testIsCologneEquals() {\n         ColognePhonetic koellePhon = new ColognePhonetic();\n-        assertFalse(\"Cologne-phonetic encodings should not be equal\",\n-                koellePhon.isCologneEqual(\"Meyer\", \"M\u00fcller\"));\n-        assertTrue(\"Cologne-phonetic encodings should be equal\",\n-                koellePhon.isCologneEqual(\"Meyer\", \"Mayr\"));\n+        assertFalse(\"Cologne-phonetic encodings should not be equal\", koellePhon.isCologneEqual(\"Meyer\", \"M\u00fcller\"));\n+        assertTrue(\"Cologne-phonetic encodings should be equal\", koellePhon.isCologneEqual(\"Meyer\", \"Mayr\"));\n     }\n }", "timestamp": 1298347350, "metainfo": ""}