{"sha": "e203e82bad91eeff6c9f0dda1ddc779f4fa4d14a", "log": "Bugzilla Bug 28455: Hex converts illegal characters to 255.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Hex.java\n+++ b/src/java/org/apache/commons/codec/binary/Hex.java\n /**\n  * Hex encoder and decoder.\n  * \n+ * @since 1.1\n  * @author Apache Software Foundation\n- * @version $Id: Hex.java,v 1.12 2004/02/29 04:08:31 tobrien Exp $\n+ * @version $Id: Hex.java,v 1.13 2004/04/18 18:22:33 ggregory Exp $\n  */\n public class Hex implements BinaryEncoder, BinaryDecoder {\n \n     /** \n      * Used building output as Hex \n      */\n-    private static char[] digits = {\n+    private static final char[] DIGITS = {\n         '0', '1', '2', '3', '4', '5', '6', '7',\n            '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'\n     };\n      * @param data An array of characters containing hexidecimal digits\n      * @return A byte array containing binary data decoded from\n      *         the supplied char array.\n-     * @throws DecoderException Thrown if an odd number of characters is supplied\n-     *                   to this function\n+     * @throws DecoderException Thrown if an odd number or illegal of characters \n+     *         is supplied\n      */\n     public static byte[] decodeHex(char[] data) throws DecoderException {\n \n-        int l = data.length;\n+        int len = data.length;\n \n-           if ((l & 0x01) != 0) {\n-               throw new DecoderException(\"Odd number of characters.\");\n-           }\n+        if ((len & 0x01) != 0) {\n+            throw new DecoderException(\"Odd number of characters.\");\n+        }\n \n-           byte[] out = new byte[l >> 1];\n+        byte[] out = new byte[len >> 1];\n \n-           // two characters form the hex value.\n-           for (int i = 0, j = 0; j < l; i++) {\n-               int f = Character.digit(data[j++], 16) << 4;\n-               f = f | Character.digit(data[j++], 16);\n-               out[i] = (byte) (f & 0xFF);\n-           }\n+        // two characters form the hex value.\n+        for (int i = 0, j = 0; j < len; i++) {\n+            int f = toDigit(data[j], j) << 4;\n+            j++;\n+            f = f | toDigit(data[j], j);\n+            j++;\n+            out[i] = (byte) (f & 0xFF);\n+        }\n \n-           return out;\n+        return out;\n     }\n \n     /**\n-     * Converts an array of bytes into an array of characters representing the\n-     * hexidecimal values of each byte in order. The returned array will be\n-     * double the length of the passed array, as it takes two characters to\n-     * represent any given byte.\n-     *\n-     * @param data a byte[] to convert to Hex characters\n+     * Converts a hexadecimal character to an integer.\n+     *  \n+     * @param ch A character to convert to an integer digit\n+     * @param index The index of the character in the source\n+     * @return An integer\n+     * @throws DecoderException Thrown if ch is an illegal hex character\n+     */\n+    protected static int toDigit(char ch, int index) throws DecoderException {\n+        int digit = Character.digit(ch, 16);\n+        if (digit == -1) {\n+            throw new DecoderException(\"Illegal hexadecimal charcter \" + ch + \" at index \" + index);\n+        }\n+        return digit;\n+    }\n+\n+    /**\n+     * Converts an array of bytes into an array of characters representing the hexidecimal values of each byte in order.\n+     * The returned array will be double the length of the passed array, as it takes two characters to represent any\n+     * given byte.\n+     * \n+     * @param data\n+     *                  a byte[] to convert to Hex characters\n      * @return A char[] containing hexidecimal characters\n      */\n     public static char[] encodeHex(byte[] data) {\n \n            // two characters form the hex value.\n            for (int i = 0, j = 0; i < l; i++) {\n-               out[j++] = digits[(0xF0 & data[i]) >>> 4 ];\n-               out[j++] = digits[ 0x0F & data[i] ];\n+               out[j++] = DIGITS[(0xF0 & data[i]) >>> 4 ];\n+               out[j++] = DIGITS[ 0x0F & data[i] ];\n            }\n \n            return out;\n--- a/src/test/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/org/apache/commons/codec/binary/HexTest.java\n  * Tests {@link org.apache.commons.codec.binary.Hex}.\n  * \n  * @author Apache Software Foundation\n- * @version $Id: HexTest.java,v 1.9 2004/03/17 19:28:37 ggregory Exp $\n+ * @version $Id: HexTest.java,v 1.10 2004/04/18 18:22:33 ggregory Exp $\n  */\n \n public class HexTest extends TestCase {\n         try {\n             new Hex().decode(new byte[] { 65 });\n             fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n+        }\n+        catch (DecoderException e) {\n+            // Expected exception\n+        }\n+    }\n+\n+    public void testDecodeBadCharacterPos0() {\n+        try {\n+            new Hex().decode(\"q0\");\n+            fail(\"An exception wasn't thrown when trying to decode an illegal character\");\n+        }\n+        catch (DecoderException e) {\n+            // Expected exception\n+        }\n+    }\n+\n+    public void testDecodeBadCharacterPos1() {\n+        try {\n+            new Hex().decode(\"0q\");\n+            fail(\"An exception wasn't thrown when trying to decode an illegal character\");\n         }\n         catch (DecoderException e) {\n             // Expected exception", "timestamp": 1082312553, "metainfo": ""}