{"sha": "82a0383e1abe57eb0c21b153ca298aa5754612a7", "log": "Fix Checktyle warnings in license headers.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/BaseNCodec.java\n+++ b/src/java/org/apache/commons/codec/binary/BaseNCodec.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- * \n  */\n \n package org.apache.commons.codec.binary;\n \n /**\n  * Implements common Base-N codec functions.\n- * \n+ *\n  * <p>\n  * This class is not thread-safe.\n  * Each thread should use its own instance.\n \n     /**\n      *  MIME chunk size per RFC 2045 section 6.8.\n-     * \n+     *\n      * <p>\n      * The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any\n      * equal signs.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 6.8</a>\n      */\n     public static final int MIME_CHUNK_SIZE = 76;\n \n     /**\n      * PEM chunk size per RFC 1421 section 4.3.2.4.\n-     * \n+     *\n      * <p>\n      * The {@value} character limit does not count the trailing CRLF, but counts all other characters, including any\n      * equal signs.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://tools.ietf.org/html/rfc1421\">RFC 1421 section 4.3.2.4</a>\n      */\n     public static final int PEM_CHUNK_SIZE = 64;\n \n     /**\n      * Returns true if this object has buffered data for reading.\n-     * \n+     *\n      * @return true if there is data still available for reading.\n      */\n     boolean hasData() {  // package protected for access from I/O streams\n \n     /**\n      * Returns the amount of buffered data available for reading.\n-     * \n+     *\n      * @return The amount of buffered data available for reading.\n      */\n     int available() {  // package protected for access from I/O streams\n \n     /**\n      * Get the default buffer size. Can be overridden.\n-     * \n+     *\n      * @return {@link DEFAULT_BUFFER_RESIZE_SIZE}\n      */\n     protected int getDefaultBufferSize() {\n \n     /**\n      * Ensure that the buffer has room for <code>size</code> bytes\n-     * \n+     *\n      * @param size minimum spare space required\n      */\n     protected void ensureBufferSize(int size){\n     /**\n      * Extracts buffered data into the provided byte[] array, starting at position bPos, \n      * up to a maximum of bAvail bytes. Returns how many bytes were actually extracted.\n-     * \n+     *\n      * @param b\n      *            byte[] array to extract the buffered data into.\n      * @param bPos\n     /**\n      * Encodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the\n      * Encoder interface, and will throw an EncoderException if the supplied object is not of type byte[].\n-     * \n+     *\n      * @param pObject\n      *            Object to encode\n      * @return An object (of type byte[]) containing the Base-N encoded data which corresponds to the byte[] supplied.\n     /**\n      * Decodes an Object using the Base-N algorithm. This method is provided in order to satisfy the requirements of the\n      * Decoder interface, and will throw a DecoderException if the supplied object is not of type byte[] or String.\n-     * \n+     *\n      * @param pObject\n      *            Object to decode\n      * @return An object (of type byte[]) containing the binary data which corresponds to the byte[] or String supplied.\n \n     /**\n      * Encodes a byte[] containing binary data, into a byte[] containing characters in the alphabet.\n-     * \n+     *\n      * @param pArray\n      *            a byte array containing binary data\n      * @return A byte array containing only the basen alphabetic character data\n     /**\n      * Encodes a byte[] containing binary data, into a String containing characters in the appropriate alphabet.\n      * Uses UTF8 encoding.\n-     * \n+     *\n      * @param pArray a byte array containing binary data\n      * @return String containing only character data in the appropriate alphabet.\n     */\n     /**\n      * Returns whether or not the <code>octet</code> is in the current alphabet.\n      * Does not allow whitespace or pad.\n-     * \n+     *\n      * @param octet The value to test\n-     * \n+     *\n      * @return <code>true</code> if the value is defined in the current alphabet, <code>false</code> otherwise.\n      */\n     protected abstract boolean isInAlphabet(byte b);\n     /**\n      * Tests a given byte array to see if it contains only valid characters within the alphabet.\n      * The method optionally treats whitespace and pad as valid.\n-     * \n+     *\n      * @param arrayOctet byte array to test\n      * @param allowWSPad if <code>true</code>, then whitespace and PAD are also allowed\n-     * \n+     *\n      * @return <code>true</code> if all bytes are valid characters in the alphabet or if the byte array is empty;\n      *         <code>false</code>, otherwise\n      */    \n     /**\n      * Tests a given String to see if it contains only valid characters within the alphabet. \n      * The method treats whitespace and PAD as valid.\n-     * \n+     *\n      * @param basen String to test\n      * @return <code>true</code> if all characters in the String are valid characters in the alphabet or if\n      *         the String is empty; <code>false</code>, otherwise\n \n     /**\n      * Tests a given byte array to see if it contains any characters within the alphabet or PAD.\n-     * \n+     *\n      * Intended for use in checking line-ending arrays\n-     * \n+     *\n      * @param arrayOctet\n      *            byte array to test\n      * @return <code>true</code> if any byte is a valid character in the alphabet or PAD; <code>false</code> otherwise\n--- a/src/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n+++ b/src/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- * \n  */\n \n package org.apache.commons.codec.binary;\n--- a/src/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n+++ b/src/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- * \n  */\n \n package org.apache.commons.codec.binary;", "timestamp": 1298236871, "metainfo": ""}