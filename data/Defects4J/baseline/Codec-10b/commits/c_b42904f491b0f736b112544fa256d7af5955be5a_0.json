{"sha": "b42904f491b0f736b112544fa256d7af5955be5a", "log": "Javadoc clean ups.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n  * The class can be parameterized in the following manner with various constructors:\n  * <ul>\n  * <li>URL-safe mode: Default off.</li>\n- * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of 4 in the\n- * encoded data. \n+ * <li>Line length: Default 76. Line length that aren't multiples of 4 will still essentially end up being multiples of\n+ * 4 in the encoded data.\n  * <li>Line separator: Default is CRLF (\"\\r\\n\")</li>\n  * </ul>\n  * </p>\n     static final byte[] CHUNK_SEPARATOR = {'\\r', '\\n'};\n \n     /**\n-     * This array is a lookup table that translates 6-bit positive integer\n-     * index values into their \"Base64 Alphabet\" equivalents as specified\n-     * in Table 1 of RFC 2045.\n-     *\n-     * Thanks to \"commons\" project in ws.apache.org for this code. \n+     * This array is a lookup table that translates 6-bit positive integer index values into their \"Base64 Alphabet\"\n+     * equivalents as specified in Table 1 of RFC 2045.\n+     * \n+     * Thanks to \"commons\" project in ws.apache.org for this code.\n      * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n      */\n     private static final byte[] STANDARD_ENCODE_TABLE = {\n     private static final byte PAD = '=';\n \n     /**\n-     * This array is a lookup table that translates Unicode characters\n-     * drawn from the \"Base64 Alphabet\" (as specified in Table 1 of RFC 2045)\n-     * into their 6-bit positive integer equivalents.  Characters that\n-     * are not in the Base64 alphabet but fall within the bounds of the\n-     * array are translated to -1.\n-     *\n-     * Note:  '+' and '-' both decode to 62.  '/' and '_' both decode to 63.\n-     * This means decoder seamlessly handles both URL_SAFE and STANDARD base64.\n-     * (The encoder, on the other hand, needs to know ahead of time what to emit).\n-     *\n+     * This array is a lookup table that translates Unicode characters drawn from the \"Base64 Alphabet\" (as specified in\n+     * Table 1 of RFC 2045) into their 6-bit positive integer equivalents. Characters that are not in the Base64\n+     * alphabet but fall within the bounds of the array are translated to -1.\n+     * \n+     * Note: '+' and '-' both decode to 62. '/' and '_' both decode to 63. This means decoder seamlessly handles both\n+     * URL_SAFE and STANDARD base64. (The encoder, on the other hand, needs to know ahead of time what to emit).\n+     * \n      * Thanks to \"commons\" project in ws.apache.org for this code.\n-     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/ \n+     * http://svn.apache.org/repos/asf/webservices/commons/trunk/modules/util/\n      */\n     private static final byte[] DECODE_TABLE = {\n             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\n      * </p>\n      * \n      * @param urlSafe\n-     *            if <code>true</code>, URL-safe encoding is used. In most cases this should be set to <code>false</code>.\n+     *            if <code>true</code>, URL-safe encoding is used. In most cases this should be set to\n+     *            <code>false</code>.\n      * @since 1.4\n      */\n     public Base64(boolean urlSafe) {\n      * @param lineSeparator\n      *            Each line of encoded data will end with this sequence of bytes.\n      * @throws IllegalArgumentException\n-     *             Thrown when the provided lineSeparator included some base64 characters. \n+     *             Thrown when the provided lineSeparator included some base64 characters.\n      * @since 1.4\n      */\n     public Base64(int lineLength, byte[] lineSeparator) {", "timestamp": 1248446525, "metainfo": ""}