{"sha": "d99d0bd4700b43aadbffd159918fb58c7feb52a8", "log": "Add a test to make sure getEncoding and getDefaultChar set match.   ", "commit": "\n--- a/src/test/org/apache/commons/codec/net/URLCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/URLCodecTest.java\n         super(name);\n     }\n \n+    private void validateState(URLCodec urlCodec) {\n+        assertEquals(urlCodec.getEncoding(), urlCodec.getDefaultCharset());        \n+    }\n+    \n     private String constructString(int [] unicodeChars) {\n         StringBuffer buffer = new StringBuffer();\n         if (unicodeChars != null) {\n         String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n         String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n         \n-        URLCodec codec = new URLCodec();\n+        URLCodec urlCodec = new URLCodec();\n+        this.validateState(urlCodec);\n         \n         assertEquals(\n             \"%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\", \n-            codec.encode(ru_msg, \"UTF-8\")\n+            urlCodec.encode(ru_msg, \"UTF-8\")\n         );\n-        assertEquals(\"Gr%C3%BCezi_z%C3%A4m%C3%A4\", codec.encode(ch_msg, \"UTF-8\"));\n-        \n-        assertEquals(ru_msg, codec.decode(codec.encode(ru_msg, \"UTF-8\"), \"UTF-8\"));\n-        assertEquals(ch_msg, codec.decode(codec.encode(ch_msg, \"UTF-8\"), \"UTF-8\"));\n+        assertEquals(\"Gr%C3%BCezi_z%C3%A4m%C3%A4\", urlCodec.encode(ch_msg, \"UTF-8\"));\n+        \n+        assertEquals(ru_msg, urlCodec.decode(urlCodec.encode(ru_msg, \"UTF-8\"), \"UTF-8\"));\n+        assertEquals(ch_msg, urlCodec.decode(urlCodec.encode(ch_msg, \"UTF-8\"), \"UTF-8\"));\n+        this.validateState(urlCodec);\n     }\n \n     public void testBasicEncodeDecode() throws Exception {\n-        URLCodec urlcodec = new URLCodec();\n-        String plain = \"Hello there!\";\n-        String encoded = urlcodec.encode(plain);\n-        assertEquals(\"Basic URL encoding test\", \n-            \"Hello+there%21\", encoded);\n-        assertEquals(\"Basic URL decoding test\", \n-            plain, urlcodec.decode(encoded));\n+        URLCodec urlCodec = new URLCodec();\n+        String plain = \"Hello there!\";\n+        String encoded = urlCodec.encode(plain);\n+        assertEquals(\"Basic URL encoding test\", \n+            \"Hello+there%21\", encoded);\n+        assertEquals(\"Basic URL decoding test\", \n+            plain, urlCodec.decode(encoded));\n+        this.validateState(urlCodec);\n     }\n \n \n     public void testSafeCharEncodeDecode() throws Exception {\n-        URLCodec urlcodec = new URLCodec();\n+        URLCodec urlCodec = new URLCodec();\n         String plain = \"abc123_-.*\";\n-        String encoded = urlcodec.encode(plain);\n+        String encoded = urlCodec.encode(plain);\n         assertEquals(\"Safe chars URL encoding test\", \n             plain, encoded);\n         assertEquals(\"Safe chars URL decoding test\", \n-            plain, urlcodec.decode(encoded));\n+            plain, urlCodec.decode(encoded));\n+        this.validateState(urlCodec);\n     }\n \n \n     public void testUnsafeEncodeDecode() throws Exception {\n-        URLCodec urlcodec = new URLCodec();\n+        URLCodec urlCodec = new URLCodec();\n         String plain = \"~!@#$%^&()+{}\\\"\\\\;:`,/[]\";\n-        String encoded = urlcodec.encode(plain);\n+        String encoded = urlCodec.encode(plain);\n         assertEquals(\"Unsafe chars URL encoding test\", \n             \"%7E%21%40%23%24%25%5E%26%28%29%2B%7B%7D%22%5C%3B%3A%60%2C%2F%5B%5D\", encoded);\n         assertEquals(\"Unsafe chars URL decoding test\", \n-            plain, urlcodec.decode(encoded));\n+            plain, urlCodec.decode(encoded));\n+        this.validateState(urlCodec);\n     }\n \n \n     public void testEncodeDecodeNull() throws Exception {\n-        URLCodec urlcodec = new URLCodec();\n+        URLCodec urlCodec = new URLCodec();\n         assertNull(\"Null string URL encoding test\", \n-            urlcodec.encode((String)null));\n+            urlCodec.encode((String)null));\n         assertNull(\"Null string URL decoding test\", \n-            urlcodec.decode((String)null));\n+            urlCodec.decode((String)null));\n+        this.validateState(urlCodec);\n     }\n \n \n     public void testDecodeInvalid() throws Exception {\n-        URLCodec urlcodec = new URLCodec();\n-        try {\n-            urlcodec.decode(\"%\");\n+        URLCodec urlCodec = new URLCodec();\n+        try {\n+            urlCodec.decode(\"%\");\n             fail(\"DecoderException should have been thrown\");\n         } catch(DecoderException e) {\n             // Expected. Move on\n         }\n         try {\n-            urlcodec.decode(\"%A\");\n+            urlCodec.decode(\"%A\");\n             fail(\"DecoderException should have been thrown\");\n         } catch(DecoderException e) {\n             // Expected. Move on\n         }\n         try {\n-            urlcodec.decode(\"%WW\");\n+            urlCodec.decode(\"%WW\");\n             fail(\"DecoderException should have been thrown\");\n         } catch(DecoderException e) {\n             // Expected. Move on\n         }\n+        this.validateState(urlCodec);\n     }\n \n     public void testEncodeNull() throws Exception {\n-        URLCodec urlcodec = new URLCodec();\n+        URLCodec urlCodec = new URLCodec();\n         byte[] plain = null;\n-        byte[] encoded = urlcodec.encode(plain);\n+        byte[] encoded = urlCodec.encode(plain);\n         assertEquals(\"Encoding a null string should return null\", \n             null, encoded);\n+        this.validateState(urlCodec);\n     }\n     \n     public void testEncodeUrlWithNullBitSet() throws Exception {\n-        URLCodec urlcodec = new URLCodec();\n+        URLCodec urlCodec = new URLCodec();\n         String plain = \"Hello there!\";\n         String encoded = new String( URLCodec.encodeUrl(null, plain.getBytes()));\n         assertEquals(\"Basic URL encoding test\", \n             \"Hello+there%21\", encoded);\n         assertEquals(\"Basic URL decoding test\", \n-            plain, urlcodec.decode(encoded));\n-        \n+            plain, urlCodec.decode(encoded));\n+        this.validateState(urlCodec);        \n     }\n \n     public void testDecodeWithNullArray() throws Exception {\n     }\n \n     public void testEncodeStringWithNull() throws Exception {\n-        URLCodec urlcodec = new URLCodec();\n+        URLCodec urlCodec = new URLCodec();\n         String test = null;\n-        String result = urlcodec.encode( test, \"charset\" );\n+        String result = urlCodec.encode( test, \"charset\" );\n         assertEquals(\"Result should be null\", null, result);\n     }\n \n     public void testDecodeStringWithNull() throws Exception {\n-        URLCodec urlcodec = new URLCodec();\n+        URLCodec urlCodec = new URLCodec();\n         String test = null;\n-        String result = urlcodec.decode( test, \"charset\" );\n+        String result = urlCodec.decode( test, \"charset\" );\n         assertEquals(\"Result should be null\", null, result);\n     }\n     \n     public void testEncodeObjects() throws Exception {\n-        URLCodec urlcodec = new URLCodec();\n-        String plain = \"Hello there!\";\n-        String encoded = (String) urlcodec.encode((Object) plain);\n+        URLCodec urlCodec = new URLCodec();\n+        String plain = \"Hello there!\";\n+        String encoded = (String) urlCodec.encode((Object) plain);\n         assertEquals(\"Basic URL encoding test\", \n             \"Hello+there%21\", encoded);\n \n         byte[] plainBA = plain.getBytes();\n-        byte[] encodedBA = (byte[]) urlcodec.encode((Object) plainBA);\n+        byte[] encodedBA = (byte[]) urlCodec.encode((Object) plainBA);\n         encoded = new String(encodedBA);\n         assertEquals(\"Basic URL encoding test\", \n             \"Hello+there%21\", encoded);\n             \n-        Object result = urlcodec.encode((Object) null);\n+        Object result = urlCodec.encode((Object) null);\n         assertEquals( \"Encoding a null Object should return null\", null, result);\n         \n         try {\n             Object dObj = new Double(3.0);\n-            urlcodec.encode( dObj );\n+            urlCodec.encode( dObj );\n             fail( \"Trying to url encode a Double object should cause an exception.\");\n         } catch( EncoderException ee ) {\n             // Exception expected, test segment passes.\n         }\n+        this.validateState(urlCodec);\n     }\n     \n     public void testInvalidEncoding() {\n-        URLCodec urlcodec = new URLCodec(\"NONSENSE\");\n-           String plain = \"Hello there!\";\n-            try {\n-               urlcodec.encode(plain);\n-                fail( \"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n-            } catch( EncoderException ee ) {\n-                // Exception expected, test segment passes.\n-            }\n-            try {\n-               urlcodec.decode(plain);\n-                fail( \"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n-            } catch( DecoderException ee ) {\n-                // Exception expected, test segment passes.\n-            }\n+        URLCodec urlCodec = new URLCodec(\"NONSENSE\");\n+        String plain = \"Hello there!\";\n+        try {\n+            urlCodec.encode(plain);\n+            fail(\"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n+        } catch (EncoderException ee) {\n+            // Exception expected, test segment passes.\n+        }\n+        try {\n+            urlCodec.decode(plain);\n+            fail(\"We set the encoding to a bogus NONSENSE vlaue, this shouldn't have worked.\");\n+        } catch (DecoderException ee) {\n+            // Exception expected, test segment passes.\n+        }\n+        this.validateState(urlCodec);\n     }\n \n     public void testDecodeObjects() throws Exception {\n-        URLCodec urlcodec = new URLCodec();\n+        URLCodec urlCodec = new URLCodec();\n         String plain = \"Hello+there%21\";\n-        String decoded = (String) urlcodec.decode((Object) plain);\n+        String decoded = (String) urlCodec.decode((Object) plain);\n         assertEquals(\"Basic URL decoding test\", \n             \"Hello there!\", decoded);\n \n         byte[] plainBA = plain.getBytes();\n-        byte[] decodedBA = (byte[]) urlcodec.decode((Object) plainBA);\n+        byte[] decodedBA = (byte[]) urlCodec.decode((Object) plainBA);\n         decoded = new String(decodedBA);\n         assertEquals(\"Basic URL decoding test\", \n             \"Hello there!\", decoded);\n             \n-        Object result = urlcodec.decode((Object) null);\n+        Object result = urlCodec.decode((Object) null);\n         assertEquals( \"Decoding a null Object should return null\", null, result);\n         \n         try {\n             Object dObj = new Double(3.0);\n-            urlcodec.decode( dObj );\n+            urlCodec.decode( dObj );\n             fail( \"Trying to url encode a Double object should cause an exception.\");\n         } catch( DecoderException ee ) {\n             // Exception expected, test segment passes.\n         }\n+        this.validateState(urlCodec);\n     }\n \n     public void testDefaultEncoding() throws Exception {\n         String plain = \"Hello there!\";\n-        URLCodec urlcodec = new URLCodec(\"UnicodeBig\");\n-        urlcodec.encode(plain); // To work around a weird quirk in Java 1.2.2\n-        String encoded1 = urlcodec.encode(plain, \"UnicodeBig\");\n-        String encoded2 = urlcodec.encode(plain);\n+        URLCodec urlCodec = new URLCodec(\"UnicodeBig\");\n+        urlCodec.encode(plain); // To work around a weird quirk in Java 1.2.2\n+        String encoded1 = urlCodec.encode(plain, \"UnicodeBig\");\n+        String encoded2 = urlCodec.encode(plain);\n         assertEquals(encoded1, encoded2);\n-    }\n-\n+        this.validateState(urlCodec);\n+    }\n }", "timestamp": 1079834351, "metainfo": ""}