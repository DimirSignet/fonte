{"sha": "b8c2d9d9dc9aab45f83cf49ac93cfa8546e4c08e", "log": "[CODEC-77] Base64 bug with empty input (new byte[0])  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n                     }\n                     break;\n             }\n-            if (lineLength > 0) {\n+            if (lineLength > 0 && pos > 0) {\n                 System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);\n                 pos += lineSeparator.length;\n             }\n--- a/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64InputStreamTest.java\n     }\n \n     /**\n+     * Test the Base64InputStream implementation against empty input.\n+     *\n+     * @throws Exception for some failure scenarios.\n+     */    \n+    public void testBase64EmptyInputStream() throws Exception {\n+        byte[] emptyEncoded = new byte[0];\n+        byte[] emptyDecoded = new byte[0];\n+        testByteByByte(emptyEncoded, emptyDecoded, 76, CRLF);\n+        testByChunk(emptyEncoded, emptyDecoded, 76, CRLF);\n+    }\n+\n+    /**\n      * Test the Base64InputStream implementation.\n      *\n      * @throws Exception for some failure scenarios.\n--- a/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64OutputStreamTest.java\n     }\n \n     /**\n+     * Test the Base64OutputStream implementation against empty input.\n+     *\n+     * @throws Exception for some failure scenarios.\n+     */\n+    public void testBase64EmptyOutputStream() throws Exception {\n+        byte[] emptyEncoded = new byte[0];\n+        byte[] emptyDecoded = new byte[0];\n+        testByteByByte(emptyEncoded, emptyDecoded, 76, CRLF);\n+        testByChunk(emptyEncoded, emptyDecoded, 76, CRLF);\n+    }    \n+\n+    /**\n      * Test the Base64OutputStream implementation\n      *\n      * @throws Exception for some failure scenarios.\n      */\n-    public void testBase64InputStreamByteByByte() throws Exception {\n+    public void testBase64OutputStreamByteByByte() throws Exception {\n         // Hello World test.\n         byte[] encoded = \"SGVsbG8gV29ybGQ=\\r\\n\".getBytes(\"UTF-8\");\n         byte[] decoded = \"Hello World\".getBytes(\"UTF-8\");\n      *\n      * @throws Exception for some failure scenarios.\n      */\n-    public void testBase64InputStreamByChunk() throws Exception {\n+    public void testBase64OutputStreamByChunk() throws Exception {\n         // Hello World test.\n         byte[] encoded = \"SGVsbG8gV29ybGQ=\\r\\n\".getBytes(\"UTF-8\");\n         byte[] decoded = \"Hello World\".getBytes(\"UTF-8\");\n--- a/src/test/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java\n import junit.framework.TestCase;\n \n /**\n- * Testcases for Base64 class.\n+ * Test cases for Base64 class.\n  * \n  * @author Apache Software Foundation\n  * @version $Id$\n         }\n     }\n \n+    /**\n+     * Test encode and decode of empty byte array.\n+     */\n+    public void testEmptyBase64() {\n+        byte[] empty = new byte[0];\n+        byte[] result = Base64.encodeBase64(empty);\n+        assertEquals(\"empty base64 encode\", 0, result.length);\n+\n+        empty = new byte[0];\n+        result = Base64.decodeBase64(empty);        \n+        assertEquals(\"empty base64 decode\", 0, result.length);        \n+    }\n+\n     // -------------------------------------------------------- Private Methods\n \n     private String toString(byte[] data) {", "timestamp": 1247524408, "metainfo": ""}