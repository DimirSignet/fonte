{"sha": "22b7bd4c39c430ce517a614faf0075008d1c31d9", "log": "Refactor encoding tests.  ", "commit": "\n--- a/src/test/org/apache/commons/codec/StringEncoderAbstractTest.java\n+++ b/src/test/org/apache/commons/codec/StringEncoderAbstractTest.java\n \n import java.util.Locale;\n \n+import junit.framework.Assert;\n import junit.framework.TestCase;\n \n /**\n  * @version $Id$\n  */\n public abstract class StringEncoderAbstractTest extends TestCase {\n+\n+    protected StringEncoder stringEncoder = createEncoder();\n \n     public StringEncoderAbstractTest(String name) {\n         super(name);\n         }\n     }\n \n+    protected void checkEncodings(String[][] data) throws EncoderException {\n+        for (int i = 0; i < data.length; i++) {\n+            this.checkEncoding(data[i][1], data[i][0]);\n+        }\n+    }\n+\n+    protected void checkEncodingVariations(String expected, String data[]) throws EncoderException {\n+        for (int i = 0; i < data.length; i++) {\n+            this.checkEncoding(expected, data[i]);\n+        }\n+    }\n+\n+    public void checkEncoding(String expected, String source) throws EncoderException {\n+        Assert.assertEquals(\"Source: \" + source, expected, this.stringEncoder.encode(source));\n+    }\n+\n }\n--- a/src/test/org/apache/commons/codec/language/CaverphoneTest.java\n+++ b/src/test/org/apache/commons/codec/language/CaverphoneTest.java\n \n package org.apache.commons.codec.language;\n \n+import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n \n         return new Caverphone();\n     }\n \n-    public void testSpecificationExamples() {\n-        Caverphone caverphone = new Caverphone();\n+    public void testSpecificationExamples() throws EncoderException {\n         String[][] data = {\n-            {\"Stevenson\", \"STFNSN1111\"},\n-            {\"Peter\",     \"PTA1111111\"},\n-            {\"ready\",     \"RTA1111111\"},\n-            {\"social\",    \"SSA1111111\"},\n-            {\"able\",      \"APA1111111\"},\n-            {\"Tedder\",    \"TTA1111111\"},\n-            {\"Karleen\",   \"KLN1111111\"},\n-            {\"Dyun\",      \"TN11111111\"},\n-        };\n-\n-        for(int i=0; i<data.length; i++) {\n-            assertEquals( data[i][1], caverphone.caverphone(data[i][0]) );\n-        }\n+            {\"Peter\", \"PTA1111111\"},\n+            {\"ready\", \"RTA1111111\"},\n+            {\"social\", \"SSA1111111\"},\n+            {\"able\", \"APA1111111\"},\n+            {\"Tedder\", \"TTA1111111\"},\n+            {\"Karleen\", \"KLN1111111\"},\n+            {\"Dyun\", \"TN11111111\"},};\n+        this.checkEncodings(data);\n     }\n \n+    // Caverphone Revisited\n     public void testIsCaverphoneEquals() {\n         Caverphone caverphone = new Caverphone();\n         assertFalse(\"Caverphone encodings should not be equal\", caverphone.isCaverphoneEqual(\"Peter\", \"Stevenson\"));\n--- a/src/test/org/apache/commons/codec/language/ColognePhoneticTest.java\n+++ b/src/test/org/apache/commons/codec/language/ColognePhoneticTest.java\n \n package org.apache.commons.codec.language;\n \n-import junit.framework.Assert;\n \n+import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n \n public class ColognePhoneticTest extends StringEncoderAbstractTest {\n \n-    private ColognePhonetic colognePhonetic = new ColognePhonetic();\n-\n     public ColognePhoneticTest(String name) {\n         super(name);\n-    }\n-\n-    public void checkEncoding(String expected, String source) {\n-        Assert.assertEquals(\"Source: \" + source, expected, this.colognePhonetic.encode(source));\n-    }\n-\n-    private void checkEncodings(String[][] data) {\n-        for (int i = 0; i < data.length; i++) {\n-            this.checkEncoding(data[i][1], data[i][0]);\n-        }\n-    }\n-\n-    private void checkEncodingVariations(String expected, String data[]) {\n-        for (int i = 0; i < data.length; i++) {\n-            this.checkEncoding(expected, data[i]);\n-        }\n     }\n \n     protected StringEncoder createEncoder() {\n         return new ColognePhonetic();\n     }\n \n-    public void testAabjoe() {\n+    public void testAabjoe() throws EncoderException {\n         this.checkEncoding(\"01\", \"Aabjoe\");\n     }\n \n-    public void testAaclan() {\n+    public void testAaclan() throws EncoderException {\n         this.checkEncoding(\"0856\", \"Aaclan\");\n     }\n \n-    public void testEdgeCases() {\n+    public void testEdgeCases() throws EncoderException {\n         String[][] data = {\n             {\"a\", \"0\"},\n             {\"e\", \"0\"},\n         this.checkEncodings(data);\n     }\n \n-    public void testExamples() {\n+    public void testExamples() throws EncoderException {\n         String[][] data = {\n             {\"m\\u00DCller\", \"657\"},\n             {\"schmidt\", \"862\"},\n         this.checkEncodings(data);\n     }\n \n-    public void testHyphen() {\n+    public void testHyphen() throws EncoderException {\n         String[][] data = {{\"bergisch-gladbach\", \"174845214\"}, {\"M\u00fcller-L\u00fcdenscheidt\", \"65752682\"},\n             // From the Javadoc example:\n             {\"Mller-Ldenscheidt\", \"65752682\"}};\n             {\"ganz\", \"G\u00e4nse\"},\n             {\"Miyagi\", \"Miyako\"}};\n         for (int i = 0; i < data.length; i++) {\n-            this.colognePhonetic.isEncodeEqual(data[i][1], data[i][0]);\n+            ((ColognePhonetic) this.stringEncoder).isEncodeEqual(data[i][1], data[i][0]);\n         }\n     }\n \n-    public void testVariationsMeyer() {\n+    public void testVariationsMella() throws EncoderException {\n+        String data[] = {\"mella\", \"milah\", \"moulla\", \"mellah\", \"muehle\", \"mule\"};\n+        this.checkEncodingVariations(\"65\", data);\n+    }\n+\n+    public void testVariationsMeyer() throws EncoderException {\n         String data[] = {\"Meier\", \"Maier\", \"Mair\", \"Meyer\", \"Meyr\", \"Mejer\", \"Major\"};\n         this.checkEncodingVariations(\"67\", data);\n     }\n-\n-    public void testVariationsMella() {\n-        String data[] = {\"mella\", \"milah\", \"moulla\", \"mellah\", \"muehle\", \"mule\"};\n-        this.checkEncodingVariations(\"65\", data);\n-    }\n }", "timestamp": 1298910432, "metainfo": ""}