{"sha": "f06bed0901b6faa2ed3a99a5c4a6d44e19b96541", "log": "100/100 code coverage.  ", "commit": "\n--- a/src/test/org/apache/commons/codec/binary/HexTest.java\n+++ b/src/test/org/apache/commons/codec/binary/HexTest.java\n  */\n public class HexTest extends TestCase {\n \n+    private static final String BAD_ENCODING_NAME = \"UNKNOWN\";\n     private final static boolean LOG = true;\n \n     public HexTest(String name) {\n         super(name);\n-    }\n-\n-    /**\n-     * @param data\n-     */\n-    private void checkDecodeHexOddCharacters(char[] data) {\n-        try {\n-            Hex.decodeHex(data);\n-            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n-        } catch (DecoderException e) {\n-            // Expected exception\n-        }\n-    }\n-\n-    private void log(String s) {\n-        if (LOG) {\n-            System.out.println(s);\n-            System.out.flush();\n-        }\n-    }\n-\n-    private void log(Throwable t) {\n-        if (LOG) {\n-            t.printStackTrace(System.out);\n-            System.out.flush();\n-        }\n-    }\n-\n-    public void testCustomCharset() throws UnsupportedEncodingException, DecoderException {\n-        SortedMap map = Charset.availableCharsets();\n-        Set keys = map.keySet();\n-        Iterator iterator = keys.iterator();\n-        log(\"testCustomCharset: Checking \" + keys.size() + \" charsets...\");\n-        while (iterator.hasNext()) {\n-            String name = (String) iterator.next();\n-            testCustomCharset(name, \"testCustomCharset\");\n-        }\n-    }\n-\n-    /**\n-     * @param name\n-     * @param parent\n-     *            TODO\n-     * @throws UnsupportedEncodingException\n-     * @throws DecoderException\n-     */\n-    private void testCustomCharset(String name, String parent) throws UnsupportedEncodingException, DecoderException {\n-        if (charsetSanityCheck(name) == false) {\n-            return;\n-        }\n-        log(parent + \"=\" + name);\n-        Hex customCodec = new Hex(name);\n-        // source data\n-        String sourceString = \"Hello World\";\n-        byte[] sourceBytes = sourceString.getBytes(name);\n-        // test 1\n-        // encode source to hex string to bytes with charset\n-        byte[] actualEncodedBytes = customCodec.encode(sourceBytes);\n-        // encode source to hex string...\n-        String expectedHexString = Hex.encodeHexString(sourceBytes);\n-        // ... and get the bytes in the expected charset\n-        byte[] expectedHexStringBytes = expectedHexString.getBytes(name);\n-        Assert.assertTrue(Arrays.equals(expectedHexStringBytes, actualEncodedBytes));\n-        // test 2\n-        String actualStringFromBytes = new String(actualEncodedBytes, name);\n-        assertEquals(name + \", expectedHexString=\" + expectedHexString + \", actualStringFromBytes=\" + actualStringFromBytes,\n-                expectedHexString, actualStringFromBytes);\n-        // second test:\n-        Hex utf8Codec = new Hex();\n-        expectedHexString = \"48656c6c6f20576f726c64\";\n-        byte[] decodedUtf8Bytes = (byte[]) utf8Codec.decode(expectedHexString);\n-        actualStringFromBytes = new String(decodedUtf8Bytes, utf8Codec.getCharsetName());\n-        // sanity check:\n-        assertEquals(name, sourceString, actualStringFromBytes);\n-        // actual check:\n-        byte[] decodedCustomBytes = customCodec.decode(actualEncodedBytes);\n-        actualStringFromBytes = new String(decodedCustomBytes, name);\n-        assertEquals(name, sourceString, actualStringFromBytes);\n     }\n \n     private boolean charsetSanityCheck(String name) {\n         }\n     }\n \n+    /**\n+     * @param data\n+     */\n+    private void checkDecodeHexOddCharacters(char[] data) {\n+        try {\n+            Hex.decodeHex(data);\n+            fail(\"An exception wasn't thrown when trying to decode an odd number of characters\");\n+        } catch (DecoderException e) {\n+            // Expected exception\n+        }\n+    }\n+\n+    private void log(String s) {\n+        if (LOG) {\n+            System.out.println(s);\n+            System.out.flush();\n+        }\n+    }\n+\n+    private void log(Throwable t) {\n+        if (LOG) {\n+            t.printStackTrace(System.out);\n+            System.out.flush();\n+        }\n+    }\n+\n+    public void testCustomCharset() throws UnsupportedEncodingException, DecoderException {\n+        SortedMap map = Charset.availableCharsets();\n+        Set keys = map.keySet();\n+        Iterator iterator = keys.iterator();\n+        log(\"testCustomCharset: Checking \" + keys.size() + \" charsets...\");\n+        while (iterator.hasNext()) {\n+            String name = (String) iterator.next();\n+            testCustomCharset(name, \"testCustomCharset\");\n+        }\n+    }\n+\n+    /**\n+     * @param name\n+     * @param parent\n+     *            TODO\n+     * @throws UnsupportedEncodingException\n+     * @throws DecoderException\n+     */\n+    private void testCustomCharset(String name, String parent) throws UnsupportedEncodingException, DecoderException {\n+        if (charsetSanityCheck(name) == false) {\n+            return;\n+        }\n+        log(parent + \"=\" + name);\n+        Hex customCodec = new Hex(name);\n+        // source data\n+        String sourceString = \"Hello World\";\n+        byte[] sourceBytes = sourceString.getBytes(name);\n+        // test 1\n+        // encode source to hex string to bytes with charset\n+        byte[] actualEncodedBytes = customCodec.encode(sourceBytes);\n+        // encode source to hex string...\n+        String expectedHexString = Hex.encodeHexString(sourceBytes);\n+        // ... and get the bytes in the expected charset\n+        byte[] expectedHexStringBytes = expectedHexString.getBytes(name);\n+        Assert.assertTrue(Arrays.equals(expectedHexStringBytes, actualEncodedBytes));\n+        // test 2\n+        String actualStringFromBytes = new String(actualEncodedBytes, name);\n+        assertEquals(name + \", expectedHexString=\" + expectedHexString + \", actualStringFromBytes=\" + actualStringFromBytes,\n+                expectedHexString, actualStringFromBytes);\n+        // second test:\n+        Hex utf8Codec = new Hex();\n+        expectedHexString = \"48656c6c6f20576f726c64\";\n+        byte[] decodedUtf8Bytes = (byte[]) utf8Codec.decode(expectedHexString);\n+        actualStringFromBytes = new String(decodedUtf8Bytes, utf8Codec.getCharsetName());\n+        // sanity check:\n+        assertEquals(name, sourceString, actualStringFromBytes);\n+        // actual check:\n+        byte[] decodedCustomBytes = customCodec.decode(actualEncodedBytes);\n+        actualStringFromBytes = new String(decodedCustomBytes, name);\n+        assertEquals(name, sourceString, actualStringFromBytes);\n+    }\n+\n+    public void testCustomCharsetBadNameEncodeByteArray() {\n+        try {\n+            new Hex(BAD_ENCODING_NAME).encode(\"Hello World\".getBytes());\n+            fail(\"Expected \" + IllegalStateException.class.getName());\n+        } catch (IllegalStateException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testCustomCharsetBadNameEncodeObject() {\n+        try {\n+            new Hex(BAD_ENCODING_NAME).encode(\"Hello World\");\n+            fail(\"Expected \" + EncoderException.class.getName());\n+        } catch (EncoderException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testCustomCharsetBadNameDecodeObject() {\n+        try {\n+            new Hex(BAD_ENCODING_NAME).decode(\"Hello World\".getBytes());\n+            fail(\"Expected \" + DecoderException.class.getName());\n+        } catch (DecoderException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testCustomCharsetToString() {\n+        assertTrue(new Hex().toString().indexOf(Hex.DEFAULT_CHARSET_NAME) >= 0);\n+    }\n+\n     public void testDecodeArrayOddCharacters() {\n         try {\n             new Hex().decode(new byte[]{65});", "timestamp": 1249505955, "metainfo": ""}