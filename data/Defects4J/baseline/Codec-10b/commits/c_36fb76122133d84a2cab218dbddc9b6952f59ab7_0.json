{"sha": "36fb76122133d84a2cab218dbddc9b6952f59ab7", "log": "Improve code coverge as reported by clover from ~61% to ~80% with more test data.   ", "commit": "\n--- a/src/test/org/apache/commons/codec/language/MetaphoneTest.java\n+++ b/src/test/org/apache/commons/codec/language/MetaphoneTest.java\n  * ====================================================================\n  * \n  * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n+ * \n+ * Copyright (c) 2001-2003 The Apache Software Foundation. All rights reserved.\n+ * \n  * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer. \n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution,\n- *    if any, must include the following acknowledgement:  \n- *       \"This product includes software developed by the \n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowledgement may appear in the software itself,\n- *    if and wherever such third-party acknowledgements normally appear.\n- *\n- * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written \n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\",\n- *    \"Apache\" nor may \"Apache\" appear in their name without prior \n- *    written permission of the Apache Software Foundation.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n+ * modification, are permitted provided that the following conditions are met: 1.\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer. 2. Redistributions in\n+ * binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other\n+ * materials provided with the distribution. 3. The end-user documentation\n+ * included with the redistribution, if any, must include the following\n+ * acknowledgement: \"This product includes software developed by the Apache\n+ * Software Foundation (http://www.apache.org/).\" Alternately, this\n+ * acknowledgement may appear in the software itself, if and wherever such\n+ * third-party acknowledgements normally appear. 4. The names \"Apache\", \"The\n+ * Jakarta Project\", \"Commons\", and \"Apache Software Foundation\" must not be\n+ * used to endorse or promote products derived from this software without prior\n+ * written permission. For written permission, please contact\n+ * apache@apache.org. 5. Products derived from this software may not be called\n+ * \"Apache\", \"Apache\" nor may \"Apache\" appear in their name without prior\n+ * written permission of the Apache Software Foundation.\n+ * \n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */ \n+ * \n+ * This software consists of voluntary contributions made by many individuals\n+ * on behalf of the Apache Software Foundation. For more information on the\n+ * Apache Software Foundation, please see <http://www.apache.org/> .\n+ *  \n+ */\n \n package org.apache.commons.codec.language;\n \n import org.apache.commons.codec.StringEncoderAbstractTest;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/10/05 21:45:49 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/07 22:37:26 $\n  * @author Rodney Waldhoff\n+ * @author Gary Gregory\n  */\n public class MetaphoneTest extends StringEncoderAbstractTest {\n \n+    public static Test suite() {\n+        return (new TestSuite(MetaphoneTest.class));\n+    }\n+\n+    private Metaphone metaphone = null;\n+\n     public MetaphoneTest(String name) {\n         super(name);\n     }\n \n-    public static Test suite() {\n-        return (new TestSuite(MetaphoneTest.class));\n-    }\n-\n-    public void setUp() throws Exception {        \n+    public void assertIsMetaphoneEqual(String source, String[] matches) {\n+        // match source to all matches\n+        for (int i = 0; i < matches.length; i++) {\n+            assertTrue(this.getMetaphone().isMetaphoneEqual(source, matches[i]));\n+        }\n+        // match to each other\n+        for (int i = 0; i < matches.length; i++) {\n+            for (int j = 0; j < matches.length; j++) {\n+                assertTrue(this.getMetaphone().isMetaphoneEqual(matches[i], matches[j]));\n+            }\n+        }\n+    }\n+\n+    public void assertMetaphoneEqual(String[][] pairs) {\n+        this.validateFixture(pairs);\n+        for (int i = 0; i < pairs.length; i++) {\n+            String name0 = pairs[i][0];\n+            String name1 = pairs[i][1];\n+            String failMsg = \"Expected match between \" + name0 + \" and \" + name1;\n+            assertTrue(failMsg, this.getMetaphone().isMetaphoneEqual(name0, name1));\n+            assertTrue(failMsg, this.getMetaphone().isMetaphoneEqual(name1, name0));\n+        }\n+    }\n+    /**\n+\t * @return Returns the metaphone.\n+\t */\n+    private Metaphone getMetaphone() {\n+        return this.metaphone;\n+    }\n+\n+    protected StringEncoder makeEncoder() {\n+        return new Metaphone();\n+    }\n+\n+    /**\n+\t * @param metaphone\n+\t *                  The metaphone to set.\n+\t */\n+    private void setMetaphone(Metaphone metaphone) {\n+        this.metaphone = metaphone;\n+    }\n+\n+    public void setUp() throws Exception {\n         super.setUp();\n-        _metaphone = new Metaphone();\n+        this.setMetaphone(new Metaphone());\n     }\n \n     public void tearDown() throws Exception {\n         super.tearDown();\n-        _metaphone = null;\n-    }\n-\n-    protected StringEncoder makeEncoder() {\n-        return new Metaphone();\n-    }\n-    \n-    // ------------------------------------------------------------------------\n+        this.setMetaphone(null);\n+    }\n+\n+    public void testIsMetaphoneEqual1() {\n+        this.assertMetaphoneEqual(new String[][] { { \"Case\", \"case\" }, {\n+                \"CASE\", \"Case\" }, {\n+                \"caSe\", \"cAsE\" }, {\n+                \"quick\", \"cookie\" }\n+        });\n+    }\n+\n+    /**\n+\t * Matches computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqual2() {\n+        this.assertMetaphoneEqual(new String[][] { { \"Lawrence\", \"Lorenza\" }, {\n+                \"Gary\", \"Cahra\" }, });\n+    }\n+\n+    /**\n+\t * Initial AE case.\n+\t * \n+\t * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqualAero() {\n+        this.assertIsMetaphoneEqual(\"Aero\", new String[] { \"Eure\" });\n+    }\n+\n+    /**\n+\t * Initial WH case.\n+\t * \n+\t * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqualWhite() {\n+        this.assertIsMetaphoneEqual(\n+            \"White\",\n+            new String[] { \"Wade\", \"Wait\", \"Waite\", \"Wat\", \"Whit\", \"Wiatt\", \"Wit\", \"Wittie\", \"Witty\", \"Wood\", \"Woodie\", \"Woody\" });\n+    }\n+\n+    /**\n+\t * Initial A, not followed by an E case.\n+\t * \n+\t * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqualAlbert() {\n+        this.assertIsMetaphoneEqual(\"Albert\", new String[] { \"Ailbert\", \"Alberik\", \"Albert\", \"Alberto\", \"Albrecht\" });\n+    }\n+\n+    /**\n+\t * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqualGary() {\n+        this.assertIsMetaphoneEqual(\n+            \"Gary\",\n+            new String[] {\n+                \"Cahra\",\n+                \"Cara\",\n+                \"Carey\",\n+                \"Cari\",\n+                \"Caria\",\n+                \"Carie\",\n+                \"Caro\",\n+                \"Carree\",\n+                \"Carri\",\n+                \"Carrie\",\n+                \"Carry\",\n+                \"Cary\",\n+                \"Cora\",\n+                \"Corey\",\n+                \"Cori\",\n+                \"Corie\",\n+                \"Correy\",\n+                \"Corri\",\n+                \"Corrie\",\n+                \"Corry\",\n+                \"Cory\",\n+                \"Gray\",\n+                \"Kara\",\n+                \"Kare\",\n+                \"Karee\",\n+                \"Kari\",\n+                \"Karia\",\n+                \"Karie\",\n+                \"Karrah\",\n+                \"Karrie\",\n+                \"Karry\",\n+                \"Kary\",\n+                \"Keri\",\n+                \"Kerri\",\n+                \"Kerrie\",\n+                \"Kerry\",\n+                \"Kira\",\n+                \"Kiri\",\n+                \"Kora\",\n+                \"Kore\",\n+                \"Kori\",\n+                \"Korie\",\n+                \"Korrie\",\n+                \"Korry\" });\n+    }\n+\n+    /**\n+\t * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqualJohn() {\n+        this.assertIsMetaphoneEqual(\n+            \"John\",\n+            new String[] {\n+                \"Gena\",\n+                \"Gene\",\n+                \"Genia\",\n+                \"Genna\",\n+                \"Genni\",\n+                \"Gennie\",\n+                \"Genny\",\n+                \"Giana\",\n+                \"Gianna\",\n+                \"Gina\",\n+                \"Ginni\",\n+                \"Ginnie\",\n+                \"Ginny\",\n+                \"Jaine\",\n+                \"Jan\",\n+                \"Jana\",\n+                \"Jane\",\n+                \"Janey\",\n+                \"Jania\",\n+                \"Janie\",\n+                \"Janna\",\n+                \"Jany\",\n+                \"Jayne\",\n+                \"Jean\",\n+                \"Jeana\",\n+                \"Jeane\",\n+                \"Jeanie\",\n+                \"Jeanna\",\n+                \"Jeanne\",\n+                \"Jeannie\",\n+                \"Jen\",\n+                \"Jena\",\n+                \"Jeni\",\n+                \"Jenn\",\n+                \"Jenna\",\n+                \"Jennee\",\n+                \"Jenni\",\n+                \"Jennie\",\n+                \"Jenny\",\n+                \"Jinny\",\n+                \"Jo Ann\",\n+                \"Jo-Ann\",\n+                \"Jo-Anne\",\n+                \"Joan\",\n+                \"Joana\",\n+                \"Joane\",\n+                \"Joanie\",\n+                \"Joann\",\n+                \"Joanna\",\n+                \"Joanne\",\n+                \"Joeann\",\n+                \"Johna\",\n+                \"Johnna\",\n+                \"Joni\",\n+                \"Jonie\",\n+                \"Juana\",\n+                \"June\",\n+                \"Junia\",\n+                \"Junie\" });\n+    }\n+\n+    /**\n+\t * Initial KN case.\n+\t * \n+\t * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqualKnight() {\n+        this.assertIsMetaphoneEqual(\n+            \"Knight\",\n+            new String[] {\n+                \"Hynda\",\n+                \"Nada\",\n+                \"Nadia\",\n+                \"Nady\",\n+                \"Nat\",\n+                \"Nata\",\n+                \"Natty\",\n+                \"Neda\",\n+                \"Nedda\",\n+                \"Nedi\",\n+                \"Netta\",\n+                \"Netti\",\n+                \"Nettie\",\n+                \"Netty\",\n+                \"Nita\",\n+                \"Nydia\" });\n+    }\n+    /**\n+\t * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqualMary() {\n+        this.assertIsMetaphoneEqual(\n+            \"Mary\",\n+            new String[] {\n+                \"Mair\",\n+                \"Maire\",\n+                \"Mara\",\n+                \"Mareah\",\n+                \"Mari\",\n+                \"Maria\",\n+                \"Marie\",\n+                \"Mary\",\n+                \"Maura\",\n+                \"Maure\",\n+                \"Meara\",\n+                \"Merrie\",\n+                \"Merry\",\n+                \"Mira\",\n+                \"Moira\",\n+                \"Mora\",\n+                \"Moria\",\n+                \"Moyra\",\n+                \"Muire\",\n+                \"Myra\",\n+                \"Myrah\" });\n+    }\n+\n+    /**\n+\t * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqualParis() {\n+        this.assertIsMetaphoneEqual(\"Paris\", new String[] { \"Pearcy\", \"Perris\", \"Piercy\", \"Pierz\", \"Pryse\" });\n+    }\n+\n+    /**\n+\t * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqualPeter() {\n+        this.assertIsMetaphoneEqual(\n+            \"Peter\",\n+            new String[] { \"Peadar\", \"Peder\", \"Pedro\", \"Peter\", \"Petr\", \"Peyter\", \"Pieter\", \"Pietro\", \"Piotr\" });\n+    }\n+\n+    /**\n+\t * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqualRay() {\n+        this.assertIsMetaphoneEqual(\"Ray\", new String[] { \"Ray\", \"Rey\", \"Roi\", \"Roy\", \"Ruy\" });\n+    }\n+\n+    /**\n+\t * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqualSusan() {\n+        this.assertIsMetaphoneEqual(\n+            \"Susan\",\n+            new String[] {\n+                \"Siusan\",\n+                \"Sosanna\",\n+                \"Susan\",\n+                \"Susana\",\n+                \"Susann\",\n+                \"Susanna\",\n+                \"Susannah\",\n+                \"Susanne\",\n+                \"Suzann\",\n+                \"Suzanna\",\n+                \"Suzanne\",\n+                \"Zuzana\" });\n+    }\n+\n+    /**\n+\t * Initial WR case.\n+\t * \n+\t * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqualWright() {\n+        this.assertIsMetaphoneEqual(\"Wright\", new String[] { \"Rota\", \"Rudd\", \"Ryde\" });\n+    }\n+\n+    /**\n+\t * Match data computed from http://www.lanw.com/java/phonetic/default.htm\n+\t */\n+    public void testIsMetaphoneEqualXalan() {\n+        this.assertIsMetaphoneEqual(\n+            \"Xalan\",\n+            new String[] { \"Celene\", \"Celina\", \"Celine\", \"Selena\", \"Selene\", \"Selina\", \"Seline\", \"Suellen\", \"Xylina\" });\n+    }\n \n     public void testMetaphone() {\n-        assertEquals(\"TSTN\",_metaphone.metaphone(\"testing\"));\n-        assertEquals(\"0\",_metaphone.metaphone(\"The\"));\n-        assertEquals(\"KK\",_metaphone.metaphone(\"quick\"));\n-        assertEquals(\"BRN\",_metaphone.metaphone(\"brown\"));\n-        assertEquals(\"FKS\",_metaphone.metaphone(\"fox\"));\n-        assertEquals(\"JMPT\",_metaphone.metaphone(\"jumped\"));\n-        assertEquals(\"OFR\",_metaphone.metaphone(\"over\"));\n-        assertEquals(\"0\",_metaphone.metaphone(\"the\"));\n-        assertEquals(\"LS\",_metaphone.metaphone(\"lazy\"));\n-        assertEquals(\"TKS\",_metaphone.metaphone(\"dogs\"));\n-    }\n-\n-    public void testIsMetaphoneEqual() {\n-        assertTrue(_metaphone.isMetaphoneEqual(\"Case\",\"case\"));\n-        assertTrue(_metaphone.isMetaphoneEqual(\"CASE\",\"Case\"));\n-        assertTrue(_metaphone.isMetaphoneEqual(\"caSe\",\"cAsE\"));\n-        \n-        assertTrue(_metaphone.isMetaphoneEqual(\"cookie\",\"quick\"));\n-        assertTrue(_metaphone.isMetaphoneEqual(\"quick\",\"cookie\"));\n-    }\n-\n-    private Metaphone _metaphone = null;\n+        assertEquals(\"TSTN\", this.getMetaphone().metaphone(\"testing\"));\n+        assertEquals(\"0\", this.getMetaphone().metaphone(\"The\"));\n+        assertEquals(\"KK\", this.getMetaphone().metaphone(\"quick\"));\n+        assertEquals(\"BRN\", this.getMetaphone().metaphone(\"brown\"));\n+        assertEquals(\"FKS\", this.getMetaphone().metaphone(\"fox\"));\n+        assertEquals(\"JMPT\", this.getMetaphone().metaphone(\"jumped\"));\n+        assertEquals(\"OFR\", this.getMetaphone().metaphone(\"over\"));\n+        assertEquals(\"0\", this.getMetaphone().metaphone(\"the\"));\n+        assertEquals(\"LS\", this.getMetaphone().metaphone(\"lazy\"));\n+        assertEquals(\"TKS\", this.getMetaphone().metaphone(\"dogs\"));\n+    }\n+\n+    public void validateFixture(String[][] pairs) {\n+        if (pairs.length == 0) {\n+            fail(\"Test fixture is empty\");\n+        }\n+        for (int i = 0; i < pairs.length; i++) {\n+            if (pairs[i].length != 2) {\n+                fail(\"Error in test fixture in the data array at index \" + i);\n+            }\n+        }\n+    }\n+\n }", "timestamp": 1068244646, "metainfo": ""}