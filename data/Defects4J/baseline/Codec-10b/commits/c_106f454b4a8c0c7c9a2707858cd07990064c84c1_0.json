{"sha": "106f454b4a8c0c7c9a2707858cd07990064c84c1", "log": "Minor clean ups along with improving code coverge as reported by clover from ~61% to ~80% with more test data.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/Metaphone.java\n+++ b/src/java/org/apache/commons/codec/language/Metaphone.java\n  * @author wbrogden@bga.com\n  * @author bayard@generationjava.com\n  * @author Tim O'Brien\n- * @version $Id: Metaphone.java,v 1.8 2003/10/12 19:48:14 tobrien Exp $\n+ * @author Gary Gregory\n+ * @version $Id: Metaphone.java,v 1.9 2003/11/07 22:38:03 ggregory Exp $\n  */\n public class Metaphone implements StringEncoder {\n \n         int wdsz = local.length();\n         int n = 0 ;\n \n-        while ((mtsz < maxCodeLen) && (n < wdsz)) { // max code size of 4 works well\n+        while ((mtsz < this.getMaxCodeLen()) && (n < wdsz)) { // max code size of 4 works well\n             char symb = local.charAt(n) ;\n             // remove duplicate letters except C\n             if ((symb != 'C') && (n > 0) && (local.charAt(n - 1) == symb)) {\n                 } // end switch\n                 n++ ;\n             } // end else from symb != 'C'\n-            if (mtsz > maxCodeLen) { code.setLength(maxCodeLen); }\n+            if (mtsz > this.getMaxCodeLen()) { code.setLength(this.getMaxCodeLen()); }\n         }\n         return code.toString();\n     } \n      * @throws EncoderException thrown if a Metaphone specific exception\n      *                          is encountered.\n      */\n-    public String encode(String pString) throws EncoderException {\n+    public String encode(String pString) {\n         return (metaphone(pString));   \n     }\n \n      * Returns the maxCodeLen.\n      * @return int\n      */\n-    public int getMaxCodeLen() { return maxCodeLen; }\n+    public int getMaxCodeLen() { return this.maxCodeLen; }\n \n     /**\n      * Sets the maxCodeLen.", "timestamp": 1068244683, "metainfo": ""}