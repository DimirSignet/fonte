{"sha": "71a7599e98112c90e3d79518eedf862bd93e4cdd", "log": "Refactor common checks in a method and bring code coverage to 100%/100% line/branch.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/BinaryCodec.java\n+++ b/src/java/org/apache/commons/codec/binary/BinaryCodec.java\n      * @return the raw encoded binary where each bit corresponds to a byte in the byte array argument\n      */\n     public static byte[] fromAscii(byte[] ascii) {\n-        if (ascii == null || ascii.length == 0) {\n+        if (isEmpty(ascii)) {\n             return EMPTY_BYTE_ARRAY;\n         }\n         // get length/8 times bytes with 3 bit shifts to the right of the length\n     }\n \n     /**\n+     * Returns <code>true</code> if the given array is <code>null</code> or empty (size 0.)\n+     * \n+     * @param array\n+     *            the source array\n+     * @return <code>true</code> if the given array is <code>null</code> or empty (size 0.)\n+     */\n+    private static boolean isEmpty(byte[] array) {\n+        return array == null || array.length == 0;\n+    }\n+\n+    /**\n      * Converts an array of raw binary data into an array of ASCII 0 and 1 character bytes - each byte is a truncated\n      * char.\n      * \n      * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n      */\n     public static byte[] toAsciiBytes(byte[] raw) {\n-        if (raw == null || raw.length == 0) {\n+        if (isEmpty(raw)) {\n             return EMPTY_BYTE_ARRAY;\n         }\n         // get 8 times the bytes with 3 bit shifts to the left of the length\n      * @see org.apache.commons.codec.BinaryEncoder#encode(byte[])\n      */\n     public static char[] toAsciiChars(byte[] raw) {\n-        if (raw == null || raw.length == 0) {\n+        if (isEmpty(raw)) {\n             return EMPTY_CHAR_ARRAY;\n         }\n         // get 8 times the bytes with 3 bit shifts to the left of the length\n--- a/src/test/org/apache/commons/codec/binary/BinaryCodecTest.java\n+++ b/src/test/org/apache/commons/codec/binary/BinaryCodecTest.java\n      * Utility used to assert the encoded and decoded values.\n      * \n      * @param bits\n-     *                  the pre-encoded data\n+     *            the pre-encoded data\n      * @param encodeMe\n-     *                  data to encode and compare\n+     *            data to encode and compare\n      */\n     void assertDecodeObject(byte[] bits, String encodeMe) throws DecoderException {\n         byte[] decoded;\n     /*\n      * Tests for byte[] decode(byte[])\n      */\n-    public void testDecodebyteArray() {\n+    public void testDecodeByteArray() {\n         // With a single raw binary\n         byte[] bits = new byte[1];\n         byte[] decoded = instance.decode(\"00000000\".getBytes());\n     /*\n      * Tests for byte[] fromAscii(char[])\n      */\n-    public void testFromAsciicharArray() {\n+    public void testFromAsciiCharArray() {\n+        assertEquals(0, BinaryCodec.fromAscii((char[]) null).length);\n+        assertEquals(0, BinaryCodec.fromAscii(new char[0]).length);\n         // With a single raw binary\n         byte[] bits = new byte[1];\n         byte[] decoded = BinaryCodec.fromAscii(\"00000000\".toCharArray());\n     /*\n      * Tests for byte[] fromAscii(byte[])\n      */\n-    public void testFromAsciibyteArray() {\n+    public void testFromAsciiByteArray() {\n+        assertEquals(0, BinaryCodec.fromAscii((byte[]) null).length);\n+        assertEquals(0, BinaryCodec.fromAscii(new byte[0]).length);\n         // With a single raw binary\n         byte[] bits = new byte[1];\n         byte[] decoded = BinaryCodec.fromAscii(\"00000000\".getBytes());\n     /*\n      * Tests for byte[] encode(byte[])\n      */\n-    public void testEncodebyteArray() {\n+    public void testEncodeByteArray() {\n         // With a single raw binary\n         byte[] bits = new byte[1];\n         String l_encoded = new String(instance.encode(bits));", "timestamp": 1248767590, "metainfo": ""}