{"sha": "cb63f4a959e30de6882b20af10d189c7307a6da2", "log": "Applying sebb's patch from CODEC-72 - fixing the char[] API of Soundex/RefinedSoundex, which shouldn't be used externally as they are the defaults. He's replaced them with Strings for the external use and copying of inputted char[]s  ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/RefinedSoundex.java\n+++ b/src/java/org/apache/commons/codec/language/RefinedSoundex.java\n  */\n public class RefinedSoundex implements StringEncoder {\n \n+    public static final String US_ENGLISH_MAPPING_STRING = \"01360240043788015936020505\";\n+\n    /**\n      * RefinedSoundex is *refined* for a number of reasons one being that the\n      * mappings have been altered. This implementation contains default\n      * mappings for US English.\n      */\n-    public static final char[] US_ENGLISH_MAPPING = \"01360240043788015936020505\".toCharArray();\n+    private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\n \n     /**\n      * Every letter of the alphabet is \"mapped\" to a numerical value. This char\n      * English mapping.\n      */\n     public RefinedSoundex() {\n-        this(US_ENGLISH_MAPPING);\n+        this.soundexMapping = US_ENGLISH_MAPPING;\n     }\n \n     /**\n      *                  a given character\n      */\n     public RefinedSoundex(char[] mapping) {\n-        this.soundexMapping = mapping;\n+        this.soundexMapping = new char[mapping.length];\n+        System.arraycopy(mapping, 0, this.soundexMapping, 0, mapping.length);\n+    }\n+\n+    /**\n+     * Creates a refined soundex instance using a custom mapping. This\n+     * constructor can be used to customize the mapping, and/or possibly\n+     * provide an internationalized mapping for a non-Western character set.\n+     * \n+     * @param mapping\n+     *                  Mapping string to use when finding the corresponding code for\n+     *                  a given character\n+     */\n+    public RefinedSoundex(String mapping) {\n+        this.soundexMapping = mapping.toCharArray();\n     }\n \n     /**\n--- a/src/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/java/org/apache/commons/codec/language/Soundex.java\n      * \n      * @see Soundex#Soundex(char[])\n      */\n-    public static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\n+    private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\n \n     /**\n      * An instance of Soundex using the US_ENGLISH_MAPPING mapping.\n      * @see Soundex#US_ENGLISH_MAPPING\n      */\n     public Soundex() {\n-        this(US_ENGLISH_MAPPING);\n+        this.soundexMapping = US_ENGLISH_MAPPING;\n     }\n \n     /**\n      *                  Mapping array to use when finding the corresponding code for a given character\n      */\n     public Soundex(char[] mapping) {\n-        this.soundexMapping= mapping;\n+        this.soundexMapping = new char[mapping.length];\n+        System.arraycopy(mapping, 0, this.soundexMapping, 0, mapping.length);\n+    }\n+\n+    /**\n+     * Creates a refined soundex instance using a custom mapping. This\n+     * constructor can be used to customize the mapping, and/or possibly\n+     * provide an internationalized mapping for a non-Western character set.\n+     * \n+     * @param mapping\n+     *                  Mapping string to use when finding the corresponding code for\n+     *                  a given character\n+     */\n+    public Soundex(String mapping) {\n+        this.soundexMapping = mapping.toCharArray();\n     }\n \n     /**\n--- a/src/test/org/apache/commons/codec/language/RefinedSoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/RefinedSoundexTest.java\n         char code = this.getEncoder().getMappingCode('#');\n         assertEquals(\"Code does not equals zero\", 0, code);\n     }\n+    \n+    public void testNewInstance() {\n+        assertEquals(\"D6043\", new RefinedSoundex().soundex(\"dogs\"));\n+    }\n+    \n+    public void testNewInstance2() {\n+        assertEquals(\"D6043\", new RefinedSoundex(RefinedSoundex.US_ENGLISH_MAPPING_STRING.toCharArray()).soundex(\"dogs\"));\n+    }\n+    \n+    public void testNewInstance3() {\n+        assertEquals(\"D6043\", new RefinedSoundex(RefinedSoundex.US_ENGLISH_MAPPING_STRING).soundex(\"dogs\"));\n+    }\n }\n--- a/src/test/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/SoundexTest.java\n      * https://issues.apache.org/jira/browse/CODEC-56\n      */\n     public void testUsEnglishStatic() {\n-        assertEquals(Soundex.US_ENGLISH.soundex(\"Williams\"), \"W452\");\n+        assertEquals(\"W452\", Soundex.US_ENGLISH.soundex(\"Williams\"));\n     }\n \n     /**\n      * https://issues.apache.org/jira/browse/CODEC-56\n      */\n     public void testNewInstance() {\n-        assertEquals(new Soundex().soundex(\"Williams\"), \"W452\");\n+        assertEquals(\"W452\", new Soundex().soundex(\"Williams\"));\n+    }\n+    \n+    public void testNewInstance2() {\n+        assertEquals(\"W452\", new Soundex(Soundex.US_ENGLISH_MAPPING_STRING.toCharArray()).soundex(\"Williams\"));\n+    }\n+    \n+    public void testNewInstance3() {\n+        assertEquals(\"W452\", new Soundex(Soundex.US_ENGLISH_MAPPING_STRING).soundex(\"Williams\"));\n     }\n }", "timestamp": 1237879116, "metainfo": ""}