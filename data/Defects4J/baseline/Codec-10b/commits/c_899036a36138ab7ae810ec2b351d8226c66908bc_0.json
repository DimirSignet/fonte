{"sha": "899036a36138ab7ae810ec2b351d8226c66908bc", "log": "Refactor for implementing difference() API in both Soundex and RefinedSoundex. http://nagoya.apache.org/bugzilla/show_bug.cgi?id=25243   ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/RefinedSoundex.java\n+++ b/src/java/org/apache/commons/codec/language/RefinedSoundex.java\n  *    from this software without prior written permission. For written \n  *    permission, please contact apache@apache.org.\n  *\n- * 5. Products derived from this software may not be called \"Apache\",\n- *    \"Apache\" nor may \"Apache\" appear in their name without prior \n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior \n  *    written permission of the Apache Software Foundation.\n  *\n  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n import org.apache.commons.codec.StringEncoder;\n \n /**\n- * Encodes a string into a refined soundex value.  \n- * A refined soundex code is optimized for spell checking word. \n- * \"Soundex\" method originally developed by Margaret Odell and \n- * Robert Russell\n+ * Encodes a string into a refined soundex value. A refined soundex code is\n+ * optimized for spell checking word. \"Soundex\" method originally developed by\n+ * Margaret Odell and Robert Russell\n  * \n  * @author Tim O'Brien\n- * @author ggregory@seagullsw.com\n- * @version $Id: RefinedSoundex.java,v 1.12 2003/11/24 00:11:56 ggregory Exp $\n+ * @author Gary D. Gregory\n+ * @version $Id: RefinedSoundex.java,v 1.13 2003/12/11 23:44:11 ggregory Exp $\n  */\n public class RefinedSoundex implements StringEncoder {\n \n     /**\n-     * RefinedSoundex is *refined* for a number of\n-     * reasons one being that the mappings have been\n-     * altered.  This implementation contains default\n-     * mappings for US English.\n-     */\n-    public static final char[] US_ENGLISH_MAPPING =\n-        \"01360240043788015936020505\".toCharArray();\n-\n-    /**\n-     * This static variable contains an instance of the\n-     * RefinedSoundex using the US_ENGLISH mapping.\n-     */\n+\t * This static variable contains an instance of the RefinedSoundex using\n+\t * the US_ENGLISH mapping.\n+\t */\n     public static final RefinedSoundex US_ENGLISH = new RefinedSoundex();\n-    \n-    /**\n-     * Every letter of the alphabet is \"mapped\" to a numerical \n-     * value.  This char array holds the values to which each\n-     * letter is mapped.  This implementation contains a default\n-     * map for US_ENGLISH\n-     */\n+\n+    /**\n+\t * RefinedSoundex is *refined* for a number of reasons one being that the\n+\t * mappings have been altered. This implementation contains default\n+\t * mappings for US English.\n+\t */\n+    public static final char[] US_ENGLISH_MAPPING = \"01360240043788015936020505\".toCharArray();\n+\n+    /**\n+\t * Every letter of the alphabet is \"mapped\" to a numerical value. This char\n+\t * array holds the values to which each letter is mapped. This\n+\t * implementation contains a default map for US_ENGLISH\n+\t */\n     private char[] soundexMapping;\n \n     /**\n-     * Creates an instance of the RefinedSoundex object using the\n-     * default US English mapping.\n-     */\n+\t * Creates an instance of the RefinedSoundex object using the default US\n+\t * English mapping.\n+\t */\n     public RefinedSoundex() {\n         this(US_ENGLISH_MAPPING);\n     }\n \n     /**\n-     * Creates a refined soundex instance using a custom mapping.  This\n-     * constructor can be used to customize the mapping, and/or possibly\n-     * provide an internationalized mapping for a non-Western character\n-     * set.\n-     *\n-     * @param mapping Mapping array to use when finding the corresponding\n-     *                code for a given character\n-     */\n+\t * Creates a refined soundex instance using a custom mapping. This\n+\t * constructor can be used to customize the mapping, and/or possibly\n+\t * provide an internationalized mapping for a non-Western character set.\n+\t * \n+\t * @param mapping\n+\t *                  Mapping array to use when finding the corresponding code for\n+\t *                  a given character\n+\t */\n     public RefinedSoundex(char[] mapping) {\n         this.soundexMapping = mapping;\n     }\n \n     /**\n-     * Retreives the Refined Soundex code for a given String object.\n-     *\n-     * @param str String to encode using the Refined Soundex algorithm\n-     * @return A soundex code for the String supplied\n-     */\n+\t * Returns the number of characters in the two encoded Strings that are the\n+\t * same. This return value ranges from 0 to the length of the shortest\n+\t * encoded String: 0 indicates little or no similarity, and 4 out of 4 (for\n+\t * example) indicates strong similarity or identical values. For refined\n+\t * Soundex, the return value can be greater than 4.\n+\t * \n+\t * @param s1\n+\t *                  A String that will be encoded and compared.\n+\t * @param s2\n+\t *                  A String that will be encoded and compared.\n+\t * @return The number of characters in the two encoded Strings that are the\n+\t *             same from 0 to to the length of the shortest encoded String.\n+\t * \n+\t * @see SoundexUtils#difference(StringEncoder,String,String)\n+\t * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\">\n+\t *          MS T-SQL DIFFERENCE</a>\n+\t * \n+\t * @throws EncoderException\n+\t *                  if an error occurs encoding one of the strings\n+\t */\n+    public int difference(String s1, String s2) throws EncoderException {\n+        return SoundexUtils.difference(this, s1, s2);\n+    }\n+\n+    /**\n+\t * Encodes an Object using the refined soundex algorithm. This method is\n+\t * provided in order to satisfy the requirements of the Encoder interface,\n+\t * and will throw an EncoderException if the supplied object is not of type\n+\t * java.lang.String.\n+\t * \n+\t * @param pObject\n+\t *                  Object to encode\n+\t * @return An object (or type java.lang.String) containing the refined\n+\t *             soundex code which corresponds to the String supplied.\n+\t * @throws EncoderException\n+\t *                  if the parameter supplied is not of type java.lang.String\n+\t */\n+    public Object encode(Object pObject) throws EncoderException {\n+        Object result;\n+        if (!(pObject instanceof java.lang.String)) {\n+            throw new EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\");\n+        } else {\n+            result = soundex((String) pObject);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+\t * Encodes a String using the refined soundex algorithm.\n+\t * \n+\t * @param pString\n+\t *                  A String object to encode\n+\t * @return A Soundex code corresponding to the String supplied\n+\t */\n+    public String encode(String pString) {\n+        return soundex(pString);\n+    }\n+\n+    /**\n+\t * Returns the mapping code for a given character. The mapping codes are\n+\t * maintained in an internal char array named soundexMapping, and the\n+\t * default values of these mappings are US English.\n+\t * \n+\t * @param c\n+\t *                  char to get mapping for\n+\t * @return A character (really a numeral) to return for the given char\n+\t */\n+    private char getMappingCode(char c) {\n+        if (!Character.isLetter(c)) {\n+            return 0;\n+        } else {\n+            return this.soundexMapping[Character.toUpperCase(c) - 'A'];\n+        }\n+    }\n+\n+    /**\n+\t * Retreives the Refined Soundex code for a given String object.\n+\t * \n+\t * @param str\n+\t *                  String to encode using the Refined Soundex algorithm\n+\t * @return A soundex code for the String supplied\n+\t */\n     public String soundex(String str) {\n-        if (null == str || str.length() == 0) { return str; }\n-       \n-        StringBuffer sBuf = new StringBuffer();        \n-        str = str.toUpperCase();\n-\n+        if (str == null) {\n+            return null;\n+        }\n+        str = SoundexUtils.clean(str);\n+        if (str.length() == 0) {\n+            return str;\n+        }\n+\n+        StringBuffer sBuf = new StringBuffer();\n         sBuf.append(str.charAt(0));\n \n         char last, current;\n             if (current == last) {\n                 continue;\n             } else if (current != 0) {\n-                sBuf.append(current);   \n+                sBuf.append(current);\n             }\n-            \n-            last = current;             \n-            \n-        }\n-        \n+\n+            last = current;\n+\n+        }\n+\n         return sBuf.toString();\n     }\n-\n-    /**\n-     * Encodes a String using the refined soundex algorithm. \n-     *\n-     * @param pString A String object to encode\n-     * @return A Soundex code corresponding to the String supplied\n-     */\n-    public String encode(String pString) {\n-        return soundex(pString);   \n-    }\n-\n-    /**\n-     * Encodes an Object using the refined soundex algorithm.  This method\n-     * is provided in order to satisfy the requirements of the\n-     * Encoder interface, and will throw an EncoderException if the\n-     * supplied object is not of type java.lang.String.\n-     *\n-     * @param pObject Object to encode\n-     * @return An object (or type java.lang.String) containing the \n-     *         refined soundex code which corresponds to the String supplied.\n-     * @throws EncoderException if the parameter supplied is not\n-     *                          of type java.lang.String\n-     */\n-    public Object encode(Object pObject) throws EncoderException {\n-        Object result;\n-        if (!(pObject instanceof java.lang.String)) {\n-            throw new EncoderException(\"Parameter supplied to RefinedSoundex encode is not of type java.lang.String\"); \n-        } else {\n-            result = soundex((String) pObject);\n-        }\n-        return result;\n-    }\n-\n-    /**\n-     * Returns the mapping code for a given character.  The mapping\n-     * codes are maintained in an internal char array named soundexMapping,\n-     * and the default values of these mappings are US English.\n-     *\n-     * @param c char to get mapping for\n-     * @return A character (really a numeral) to return for the given char\n-     */\n-    private char getMappingCode(char c) {\n-        if (!Character.isLetter(c)) {\n-            return 0;\n-        } else {\n-            return soundexMapping[Character.toUpperCase(c) - 'A'];\n-        }\n-    }\n-}\n+}\n--- a/src/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/java/org/apache/commons/codec/language/Soundex.java\n  * @author bayard@generationjava.com\n  * @author Tim O'Brien\n  * @author Gary Gregory\n- * @version $Id: Soundex.java,v 1.16 2003/12/11 01:39:28 ggregory Exp $\n+ * @see <a href=\"http://www.archives.gov/research_room/genealogy/census/soundex.html\">NARA, Genealogy, Soundex Indexing</a>\n+ * @version $Id: Soundex.java,v 1.17 2003/12/11 23:44:11 ggregory Exp $\n  */\n public class Soundex implements StringEncoder {\n \n     public static final char[] US_ENGLISH_MAPPING = \"01230120022455012623010202\".toCharArray();\n \n     /**\n-\t * Returns the difference between the Soundex values of two Strings. For\n-\t * Soundex, this return value ranges from 0 through 4: 0 indicates little or\n-\t * no similarity, and 4 indicates strong similarity or identical values.\n-\t * \n-     * @param s1\n-     *                  A String that will be encoded and compared.\n-     * @param s2\n-     *                  A String that will be encoded and compared.\n-\t * @return The return value ranges from 0 through 4: 0 indicates little or\n-\t *             no similarity, and 4 indicates strong similarity or identical\n-\t *             values.\n-\t * \n-     * @see #difference(StringEncoder,String,String)\n+\t * Encodes the Strings and returns the number of characters in the two\n+\t * encoded Strings that are the same. This return value ranges from 0\n+\t * through 4: 0 indicates little or no similarity, and 4 indicates strong\n+\t * similarity or identical values.\n+\t * \n+\t * @param s1\n+\t *                  A String that will be encoded and compared.\n+\t * @param s2\n+\t *                  A String that will be encoded and compared.\n+\t * @return The number of characters in the two encoded Strings that are the\n+\t *             same from 0 to 4.\n+\t * \n+\t * @see SoundexUtils#difference(StringEncoder,String,String)\n \t * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\">\n \t *          MS T-SQL DIFFERENCE</a>\n \t * \n \t *                  if an error occurs encoding one of the strings\n \t */\n     public int difference(String s1, String s2) throws EncoderException {\n-        return difference(this, s1, s2);\n-    }\n-\n-    /**\n-\t * Returns the difference between the encoded values of two Strings. The\n-\t * higher the difference factor, the more similar the strings. For Soundex,\n-\t * this return value ranges from 0 through 4: 0 indicates little or no\n-\t * similarity, and 4 indicates strong similarity or identical values.\n-\t * \n-\t * @param encoder\n-\t *                  The encoder to use to encode the String parameters.\n-     * @param s1\n-     *                  A String that will be encoded and compared.\n-     * @param s2\n-     *                  A String that will be encoded and compared.\n-\t * @return an integer from 0 to the length of the shorter string. The\n-\t *             smaller the number, the more different the strings are.\n-\t * \n-     * @see #differenceEncoded(String,String)\n-\t * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\">\n-\t *          MS T-SQL DIFFERENCE</a>\n-\t * \n-\t * @throws EncoderException\n-\t *                  if an error occurs encoding one of the strings\n-\t */\n-    public static int difference(StringEncoder encoder, String s1, String s2) throws EncoderException {\n-        return differenceEncoded(encoder.encode(s1), encoder.encode(s2));\n-    }\n-\n-    /**\n-\t * Returns the difference between the values of two encoded Strings. The\n-\t * higher the difference factor, the more similar the strings. For Soundex,\n-\t * this return value ranges from 0 through 4: 0 indicates little or no\n-\t * similarity, and 4 indicates strong similarity or identical values.\n-\t * \n-\t * @param es1\n-\t *                  An encoded String.\n-\t * @param es2\n-\t *                  An encoded String.\n-\t * @return an integer from 0 to the length of the shorter string. The\n-\t *             smaller the number, the more different the strings are.\n-\t * \n-\t * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\">\n-\t *          MS T-SQL DIFFERENCE</a>\n-\t */\n-    public static int differenceEncoded(String es1, String es2) {\n-\n-        if (es1 == null || es2 == null) {\n-            return 0;\n-        }\n-        int lengthToMatch = Math.min(es1.length(), es2.length());\n-        int diff = 0;\n-        for (int i = 0; i < lengthToMatch; i++) {\n-            if (es1.charAt(i) == es2.charAt(i)) {\n-                diff++;\n-            }\n-        }\n-        return diff;\n+        return SoundexUtils.difference(this, s1, s2);\n     }\n \n     /**\n \t */\n     public Soundex(char[] mapping) {\n         this.setSoundexMapping(mapping);\n-    }\n-\n-    /**\n-\t * Cleans up the input string before Soundex processing by only returning\n-\t * upper case letters.\n-\t * \n-\t * @param str\n-\t *                  The String to clean\n-\t * @return a clean String.\n-\t */\n-    private String clean(String str) {\n-        if (str == null || str.length() == 0) {\n-            return str;\n-        }\n-        int len = str.length();\n-        char[] chars = new char[len];\n-        int count = 0;\n-        for (int i = 0; i < len; i++) {\n-            if (Character.isLetter(str.charAt(i))) {\n-                chars[count++] = str.charAt(i);\n-            }\n-        }\n-        if (count == len) {\n-            return str.toUpperCase();\n-        }\n-        return new String(chars, 0, count).toUpperCase();\n     }\n \n     /**\n     }\n \n     /**\n-\t * @return Returns the soundexMapping.\n+     * Returns the soundex mapping.\n+\t * @return soundexMapping.\n \t */\n     private char[] getSoundexMapping() {\n         return this.soundexMapping;\n     }\n \n     /**\n+     * Sets the soundexMapping.\n \t * @param soundexMapping\n \t *                  The soundexMapping to set.\n \t */\n         if (str == null) {\n             return null;\n         }\n-        str = this.clean(str);\n+        str = SoundexUtils.clean(str);\n         if (str.length() == 0) {\n             return str;\n         }\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/language/SoundexUtils.java\n+/*\n+ * ====================================================================\n+ * \n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgement:  \n+ *       \"This product includes software developed by the \n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written \n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their name without prior \n+ *    written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */ \n+\n+package org.apache.commons.codec.language;\n+\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.StringEncoder;\n+\n+/**\n+ * Utility methods for {@link Soundex} and {@link RefinedSoundex} classes.\n+ * \n+ * @author Gary D. Gregory\n+ * @version $Id: SoundexUtils.java,v 1.1 2003/12/11 23:44:11 ggregory Exp $\n+ */\n+final class SoundexUtils {\n+\n+    /**\n+\t * Cleans up the input string before Soundex processing by only returning\n+\t * upper case letters.\n+\t * \n+\t * @param str\n+\t *                  The String to clean.\n+\t * @return A clean String.\n+\t */\n+    static String clean(String str) {\n+        if (str == null || str.length() == 0) {\n+            return str;\n+        }\n+        int len = str.length();\n+        char[] chars = new char[len];\n+        int count = 0;\n+        for (int i = 0; i < len; i++) {\n+            if (Character.isLetter(str.charAt(i))) {\n+                chars[count++] = str.charAt(i);\n+            }\n+        }\n+        if (count == len) {\n+            return str.toUpperCase();\n+        }\n+        return new String(chars, 0, count).toUpperCase();\n+    }\n+\n+    /**\n+\t * Encodes the Strings and returns the number of characters in the two\n+\t * encoded Strings that are the same.\n+\t * <ul>\n+\t * <li>For Soundex, this return value ranges from 0 through 4: 0 indicates\n+\t * little or no similarity, and 4 indicates strong similarity or identical\n+\t * values.</li>\n+\t * <li>For refined Soundex, the return value can be greater than 4.</li>\n+\t * </ul>\n+\t * \n+\t * @param encoder\n+\t *                  The encoder to use to encode the Strings.\n+\t * @param s1\n+\t *                  A String that will be encoded and compared.\n+\t * @param s2\n+\t *                  A String that will be encoded and compared.\n+\t * @return The number of characters in the two Soundex encoded Strings that\n+\t *             are the same.\n+\t * \n+\t * @see #differenceEncoded(String,String)\n+\t * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\">\n+\t *          MS T-SQL DIFFERENCE</a>\n+\t * \n+\t * @throws EncoderException\n+\t *                  if an error occurs encoding one of the strings\n+\t */\n+    static int difference(StringEncoder encoder, String s1, String s2) throws EncoderException {\n+        return differenceEncoded(encoder.encode(s1), encoder.encode(s2));\n+    }\n+\n+    /**\n+\t * Returns the number of characters in the two Soundex encoded Strings that\n+\t * are the same.\n+\t * <ul>\n+\t * <li>For Soundex, this return value ranges from 0 through 4: 0 indicates\n+\t * little or no similarity, and 4 indicates strong similarity or identical\n+\t * values.</li>\n+\t * <li>For refined Soundex, the return value can be greater than 4.</li>\n+\t * </ul>\n+\t * \n+\t * @param es1\n+\t *                  An encoded String.\n+\t * @param es2\n+\t *                  An encoded String.\n+\t * @return The number of characters in the two Soundex encoded Strings that\n+\t *             are the same.\n+\t * \n+\t * @see <a href=\"http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\">\n+\t *          MS T-SQL DIFFERENCE</a>\n+\t */\n+    static int differenceEncoded(String es1, String es2) {\n+\n+        if (es1 == null || es2 == null) {\n+            return 0;\n+        }\n+        int lengthToMatch = Math.min(es1.length(), es2.length());\n+        int diff = 0;\n+        for (int i = 0; i < lengthToMatch; i++) {\n+            if (es1.charAt(i) == es2.charAt(i)) {\n+                diff++;\n+            }\n+        }\n+        return diff;\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/codec/language/RefinedSoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/RefinedSoundexTest.java\n  * ====================================================================\n  * \n  * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n+ * \n+ * Copyright (c) 2001-2003 The Apache Software Foundation. All rights reserved.\n+ * \n  * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer. \n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution,\n- *    if any, must include the following acknowledgement:  \n- *       \"This product includes software developed by the \n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowledgement may appear in the software itself,\n- *    if and wherever such third-party acknowledgements normally appear.\n- *\n- * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written \n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\",\n- *    \"Apache\" nor may \"Apache\" appear in their name without prior \n- *    written permission of the Apache Software Foundation.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n+ * modification, are permitted provided that the following conditions are met: 1.\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer. 2. Redistributions in\n+ * binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other\n+ * materials provided with the distribution. 3. The end-user documentation\n+ * included with the redistribution, if any, must include the following\n+ * acknowledgement: \"This product includes software developed by the Apache\n+ * Software Foundation (http://www.apache.org/).\" Alternately, this\n+ * acknowledgement may appear in the software itself, if and wherever such\n+ * third-party acknowledgements normally appear. 4. The names \"Apache\", \"The\n+ * Jakarta Project\", \"Commons\", and \"Apache Software Foundation\" must not be\n+ * used to endorse or promote products derived from this software without prior\n+ * written permission. For written permission, please contact\n+ * apache@apache.org. 5. Products derived from this software may not be called\n+ * \"Apache\", \"Apache\" nor may \"Apache\" appear in their name without prior\n+ * written permission of the Apache Software Foundation.\n+ * \n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */ \n+ * \n+ * This software consists of voluntary contributions made by many individuals\n+ * on behalf of the Apache Software Foundation. For more information on the\n+ * Apache Software Foundation, please see <http://www.apache.org/> .\n+ *  \n+ */\n \n package org.apache.commons.codec.language;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n-\n+import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/10/05 21:45:49 $\n+ * Tests RefinedSoundex.\n+ * \n+ * @version $Id: RefinedSoundexTest.java,v 1.5 2003/12/11 23:44:11 ggregory Exp $\n  * @author Rodney Waldhoff\n+ * @author Gary D. Gregory\n  */\n public class RefinedSoundexTest extends StringEncoderAbstractTest {\n+\n+    public static Test suite() {\n+        return (new TestSuite(RefinedSoundexTest.class));\n+    }\n+\n+    private RefinedSoundex encoder = null;\n \n     public RefinedSoundexTest(String name) {\n         super(name);\n     }\n \n-    public static Test suite() {\n-        return (new TestSuite(RefinedSoundexTest.class));\n-    }\n-\n-    public void setUp() throws Exception {        \n-        super.setUp();\n-        _encoder = new RefinedSoundex();\n-    }\n-\n-    public void tearDown() throws Exception {\n-        super.tearDown();\n-        _encoder = null;\n+    /**\n+\t * @return Returns the encoder.\n+\t */\n+    private RefinedSoundex getEncoder() {\n+        return this.encoder;\n     }\n \n     protected StringEncoder makeEncoder() {\n         return new RefinedSoundex();\n     }\n \n-    // ------------------------------------------------------------------------\n-\n-    public void testEncode() throws Exception {\n-        assertEquals(\"T6036084\",_encoder.encode(\"testing\"));\n-        assertEquals(\"T60\",_encoder.encode(\"The\"));\n-        assertEquals(\"Q503\",_encoder.encode(\"quick\"));\n-        assertEquals(\"B1908\",_encoder.encode(\"brown\"));\n-        assertEquals(\"F205\",_encoder.encode(\"fox\"));\n-        assertEquals(\"J408106\",_encoder.encode(\"jumped\"));\n-        assertEquals(\"O0209\",_encoder.encode(\"over\"));\n-        assertEquals(\"T60\",_encoder.encode(\"the\"));\n-        assertEquals(\"L7050\",_encoder.encode(\"lazy\"));\n-        assertEquals(\"D6043\",_encoder.encode(\"dogs\"));\n+    /**\n+\t * @param encoder\n+\t *                  The encoder to set.\n+\t */\n+    private void setEncoder(RefinedSoundex encoder) {\n+        this.encoder = encoder;\n     }\n \n-    private RefinedSoundex _encoder = null;\n-}\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        this.setEncoder(new RefinedSoundex());\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        this.setEncoder(null);\n+    }\n+\n+    public void testDifference() throws EncoderException {\n+        // Edge cases\n+        assertEquals(0, this.getEncoder().difference(null, null));\n+        assertEquals(0, this.getEncoder().difference(\"\", \"\"));\n+        assertEquals(0, this.getEncoder().difference(\" \", \" \"));\n+        // Normal cases\n+        assertEquals(6, this.getEncoder().difference(\"Smith\", \"Smythe\"));\n+        assertEquals(3, this.getEncoder().difference(\"Ann\", \"Andrew\"));\n+        assertEquals(1, this.getEncoder().difference(\"Margaret\", \"Andrew\"));\n+        assertEquals(1, this.getEncoder().difference(\"Janet\", \"Margaret\"));\n+        // Examples from\n+\t\t// http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_de-dz_8co5.asp\n+        assertEquals(5, this.getEncoder().difference(\"Green\", \"Greene\"));\n+        assertEquals(1, this.getEncoder().difference(\"Blotchet-Halls\", \"Greene\"));\n+        // Examples from\n+\t\t// http://msdn.microsoft.com/library/default.asp?url=/library/en-us/tsqlref/ts_setu-sus_3o6w.asp\n+        assertEquals(6, this.getEncoder().difference(\"Smith\", \"Smythe\"));\n+        assertEquals(8, this.getEncoder().difference(\"Smithers\", \"Smythers\"));\n+        assertEquals(5, this.getEncoder().difference(\"Anothers\", \"Brothers\"));\n+    }\n+\n+    public void testEncode() throws EncoderException {\n+        assertEquals(\"T6036084\", this.getEncoder().encode(\"testing\"));\n+        assertEquals(\"T6036084\", this.getEncoder().encode(\"TESTING\"));\n+        assertEquals(\"T60\", this.getEncoder().encode(\"The\"));\n+        assertEquals(\"Q503\", this.getEncoder().encode(\"quick\"));\n+        assertEquals(\"B1908\", this.getEncoder().encode(\"brown\"));\n+        assertEquals(\"F205\", this.getEncoder().encode(\"fox\"));\n+        assertEquals(\"J408106\", this.getEncoder().encode(\"jumped\"));\n+        assertEquals(\"O0209\", this.getEncoder().encode(\"over\"));\n+        assertEquals(\"T60\", this.getEncoder().encode(\"the\"));\n+        assertEquals(\"L7050\", this.getEncoder().encode(\"lazy\"));\n+        assertEquals(\"D6043\", this.getEncoder().encode(\"dogs\"));\n+    }\n+}", "timestamp": 1071186251, "metainfo": ""}