{"sha": "2d72fe3f3bbfaef98d3cd32c8aeb9870ddfd079d", "log": "PR: Bugzilla Bug 28002 [Codec][Patch] RFC 1522 codecs (Q-codec & B-codec) Submitted by:\tOleg Kalnichevski Reviewed by:\tGary Gregory   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/net/BCodec.java\n+/*\n+ * Copyright 2001-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */ \n+\n+package org.apache.commons.codec.net;\n+\n+import java.io.UnsupportedEncodingException;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.StringDecoder;\n+import org.apache.commons.codec.StringEncoder;\n+import org.apache.commons.codec.binary.Base64;\n+\n+/**\n+ * <p>\n+ * The \"B\" encoding is identical to the Base64 encoding defined by <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC\n+ * 1521 </a> and allows a character set to be specified.\n+ * </p>\n+ * \n+ * <p>\n+ * <a href=\"http://www.ietf.org/rfc/rfc1522.txt\">RFC 1522 </a> describes techniques to allow the encoding of non-ASCII\n+ * text in various portions of a RFC 822 [2] message header, in a manner which is unlikely to confuse existing message\n+ * handling software.\n+ * </p>\n+ * \n+ * @see <a href=\"http://www.ietf.org/rfc/rfc1522.txt\"> MIME (Multipurpose Internet Mail Extensions) Part Two: Message\n+ *          Header Extensions for Non-ASCII Text </a>\n+ * \n+ * @author Apache Software Foundation\n+ * @since 1.3\n+ * @version $Id: BCodec.java,v 1.1 2004/03/29 07:59:57 ggregory Exp $\n+ */\n+public class BCodec extends RFC1522Codec implements StringEncoder, StringDecoder {\n+    /**\n+     * The default charset used for string decoding and encoding.\n+     */\n+    private String charset = StringEncodings.UTF8;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public BCodec() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructor which allows for the selection of a default charset\n+     * \n+     * @param charset\n+     *                  the default string charset to use.\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *          encoding names</a>\n+     */\n+    public BCodec(final String charset) {\n+        super();\n+        this.charset = charset;\n+    }\n+\n+    protected String getEncoding() {\n+        return \"B\";\n+    }\n+\n+    protected byte[] doEncoding(byte[] bytes) throws EncoderException {\n+        if (bytes == null) {\n+            return null;\n+        }\n+        return Base64.encodeBase64(bytes);\n+    }\n+\n+    protected byte[] doDecoding(byte[] bytes) throws DecoderException {\n+        if (bytes == null) {\n+            return null;\n+        }\n+        return Base64.decodeBase64(bytes);\n+    }\n+\n+    /**\n+     * Encodes a string into its Base64 form using the specified charset. Unsafe characters are escaped.\n+     * \n+     * @param value\n+     *                  string to convert to Base64 form\n+     * @param charset\n+     *                  the charset for pString\n+     * @return Base64 string\n+     * \n+     * @throws EncoderException\n+     *                  thrown if a failure condition is encountered during the encoding process.\n+     */\n+    public String encode(final String value, final String charset) throws EncoderException {\n+        if (value == null) {\n+            return null;\n+        }\n+        try {\n+            return encodeText(value, charset);\n+        } catch (UnsupportedEncodingException e) {\n+            throw new EncoderException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Encodes a string into its Base64 form using the default charset. Unsafe characters are escaped.\n+     * \n+     * @param value\n+     *                  string to convert to Base64 form\n+     * @return Base64 string\n+     * \n+     * @throws EncoderException\n+     *                  thrown if a failure condition is encountered during the encoding process.\n+     */\n+    public String encode(String value) throws EncoderException {\n+        if (value == null) {\n+            return null;\n+        }\n+        return encode(value, getDefaultCharset());\n+    }\n+\n+    /**\n+     * Decodes a Base64 string into its original form. Escaped characters are converted back to their original\n+     * representation.\n+     * \n+     * @param value\n+     *                  Base64 string to convert into its original form\n+     * \n+     * @return original string\n+     * \n+     * @throws DecoderException\n+     *                  A decoder exception is thrown if a failure condition is encountered during the decode process.\n+     */\n+    public String decode(String value) throws DecoderException {\n+        if (value == null) {\n+            return null;\n+        }\n+        try {\n+            return decodeText(value);\n+        } catch (UnsupportedEncodingException e) {\n+            throw new DecoderException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Encodes an object into its Base64 form using the default charset. Unsafe characters are escaped.\n+     * \n+     * @param value\n+     *                  object to convert to Base64 form\n+     * @return Base64 object\n+     * \n+     * @throws EncoderException\n+     *                  thrown if a failure condition is encountered during the encoding process.\n+     */\n+    public Object encode(Object value) throws EncoderException {\n+        if (value == null) {\n+            return null;\n+        } else if (value instanceof String) {\n+            return encode((String) value);\n+        } else {\n+            throw new EncoderException(\"Objects of type \"\n+                + value.getClass().getName()\n+                + \" cannot be encoded using BCodec\");\n+        }\n+    }\n+\n+    /**\n+     * Decodes a Base64 object into its original form. Escaped characters are converted back to their original\n+     * representation.\n+     * \n+     * @param value\n+     *                  Base64 object to convert into its original form\n+     * \n+     * @return original object\n+     * \n+     * @throws DecoderException\n+     *                  A decoder exception is thrown if a failure condition is encountered during the decode process.\n+     */\n+    public Object decode(Object value) throws DecoderException {\n+        if (value == null) {\n+            return null;\n+        } else if (value instanceof String) {\n+            return decode((String) value);\n+        } else {\n+            throw new DecoderException(\"Objects of type \"\n+                + value.getClass().getName()\n+                + \" cannot be decoded using BCodec\");\n+        }\n+    }\n+\n+    /**\n+     * The default charset used for string decoding and encoding.\n+     * \n+     * @return the default string charset.\n+     */\n+    public String getDefaultCharset() {\n+        return this.charset;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/net/QCodec.java\n+/*\n+ * Copyright 2001-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */ \n+\n+package org.apache.commons.codec.net;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.util.BitSet;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.StringDecoder;\n+import org.apache.commons.codec.StringEncoder;\n+\n+/**\n+ * <p>\n+ * The \"Q\" encoding is similar to the Quoted-Printable content-transfer-encoding defined in <a\n+ * href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521 </a>. It is designed to allow text containing mostly ASCII\n+ * characters to be decipherable on an ASCII terminal without decoding.\n+ * </p>\n+ * \n+ * <p>\n+ * <a href=\"http://www.ietf.org/rfc/rfc1522.txt\">RFC 1522 </a> describes techniques to allow the encoding of non-ASCII\n+ * text in various portions of a RFC 822 [2] message header, in a manner which is unlikely to confuse existing message\n+ * handling software.\n+ * </p>\n+ * \n+ * @see <a href=\"http://www.ietf.org/rfc/rfc1522.txt\"> MIME (Multipurpose Internet Mail Extensions) Part Two: Message\n+ *          Header Extensions for Non-ASCII Text </a>\n+ * \n+ * @author Apache Software Foundation\n+ * @since 1.3\n+ * @version $Id: QCodec.java,v 1.1 2004/03/29 07:59:57 ggregory Exp $\n+ */\n+public class QCodec extends RFC1522Codec implements StringEncoder, StringDecoder {\n+    /**\n+     * The default charset used for string decoding and encoding.\n+     */\n+    private String charset = StringEncodings.UTF8;\n+\n+    /**\n+     * BitSet of printable characters as defined in RFC 1522.\n+     */\n+    private static final BitSet PRINTABLE_CHARS = new BitSet(256);\n+    // Static initializer for printable chars collection\n+    static {\n+        // alpha characters\n+        PRINTABLE_CHARS.set(' ');\n+        PRINTABLE_CHARS.set('!');\n+        PRINTABLE_CHARS.set('\"');\n+        PRINTABLE_CHARS.set('#');\n+        PRINTABLE_CHARS.set('$');\n+        PRINTABLE_CHARS.set('%');\n+        PRINTABLE_CHARS.set('&');\n+        PRINTABLE_CHARS.set('\\'');\n+        PRINTABLE_CHARS.set('(');\n+        PRINTABLE_CHARS.set(')');\n+        PRINTABLE_CHARS.set('*');\n+        PRINTABLE_CHARS.set('+');\n+        PRINTABLE_CHARS.set(',');\n+        PRINTABLE_CHARS.set('-');\n+        PRINTABLE_CHARS.set('.');\n+        PRINTABLE_CHARS.set('/');\n+        for (int i = '0'; i <= '9'; i++) {\n+            PRINTABLE_CHARS.set(i);\n+        }\n+        PRINTABLE_CHARS.set(':');\n+        PRINTABLE_CHARS.set(';');\n+        PRINTABLE_CHARS.set('<');\n+        PRINTABLE_CHARS.set('>');\n+        PRINTABLE_CHARS.set('@');\n+        for (int i = 'A'; i <= 'Z'; i++) {\n+            PRINTABLE_CHARS.set(i);\n+        }\n+        PRINTABLE_CHARS.set('[');\n+        PRINTABLE_CHARS.set('\\\\');\n+        PRINTABLE_CHARS.set(']');\n+        PRINTABLE_CHARS.set('^');\n+        PRINTABLE_CHARS.set('`');\n+        for (int i = 'a'; i <= 'z'; i++) {\n+            PRINTABLE_CHARS.set(i);\n+        }\n+        PRINTABLE_CHARS.set('{');\n+        PRINTABLE_CHARS.set('|');\n+        PRINTABLE_CHARS.set('}');\n+        PRINTABLE_CHARS.set('~');\n+    }\n+\n+    private static byte BLANK = 32;\n+\n+    private static byte UNDERSCORE = 95;\n+\n+    private boolean encodeBlanks = false;\n+\n+    /**\n+     * Default constructor.\n+     */\n+    public QCodec() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructor which allows for the selection of a default charset\n+     * \n+     * @param charset\n+     *                  the default string charset to use.\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *          encoding names</a>\n+     */\n+    public QCodec(final String charset) {\n+        super();\n+        this.charset = charset;\n+    }\n+\n+    protected String getEncoding() {\n+        return \"Q\";\n+    }\n+\n+    protected byte[] doEncoding(byte[] bytes) throws EncoderException {\n+        if (bytes == null) {\n+            return null;\n+        }\n+        byte[] data = QuotedPrintableCodec.encodeQuotedPrintable(PRINTABLE_CHARS, bytes);\n+        if (this.encodeBlanks) {\n+            for (int i = 0; i < data.length; i++) {\n+                if (data[i] == BLANK) {\n+                    data[i] = UNDERSCORE;\n+                }\n+            }\n+        }\n+        return data;\n+    }\n+\n+    protected byte[] doDecoding(byte[] bytes) throws DecoderException {\n+        if (bytes == null) {\n+            return null;\n+        }\n+        boolean hasUnderscores = false;\n+        for (int i = 0; i < bytes.length; i++) {\n+            if (bytes[i] == UNDERSCORE) {\n+                hasUnderscores = true;\n+                break;\n+            }\n+        }\n+        if (hasUnderscores) {\n+            byte[] tmp = new byte[bytes.length];\n+            for (int i = 0; i < bytes.length; i++) {\n+                byte b = bytes[i];\n+                if (b != UNDERSCORE) {\n+                    tmp[i] = b;\n+                } else {\n+                    tmp[i] = BLANK;\n+                }\n+            }\n+            return QuotedPrintableCodec.decodeQuotedPrintable(tmp);\n+        } else {\n+            return QuotedPrintableCodec.decodeQuotedPrintable(bytes);\n+        }\n+    }\n+\n+    /**\n+     * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n+     * \n+     * @param pString\n+     *                  string to convert to quoted-printable form\n+     * @param charset\n+     *                  the charset for pString\n+     * @return quoted-printable string\n+     * \n+     * @throws EncoderException\n+     *                  thrown if a failure condition is encountered during the encoding process.\n+     */\n+    public String encode(final String pString, final String charset) throws EncoderException {\n+        if (pString == null) {\n+            return null;\n+        }\n+        try {\n+            return encodeText(pString, charset);\n+        } catch (UnsupportedEncodingException e) {\n+            throw new EncoderException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Encodes a string into its quoted-printable form using the default charset. Unsafe characters are escaped.\n+     * \n+     * @param pString\n+     *                  string to convert to quoted-printable form\n+     * @return quoted-printable string\n+     * \n+     * @throws EncoderException\n+     *                  thrown if a failure condition is encountered during the encoding process.\n+     */\n+    public String encode(String pString) throws EncoderException {\n+        if (pString == null) {\n+            return null;\n+        }\n+        return encode(pString, getDefaultCharset());\n+    }\n+\n+    /**\n+     * Decodes a quoted-printable string into its original form. Escaped characters are converted back to their original\n+     * representation.\n+     * \n+     * @param pString\n+     *                  quoted-printable string to convert into its original form\n+     * \n+     * @return original string\n+     * \n+     * @throws DecoderException\n+     *                  A decoder exception is thrown if a failure condition is encountered during the decode process.\n+     */\n+    public String decode(String pString) throws DecoderException {\n+        if (pString == null) {\n+            return null;\n+        }\n+        try {\n+            return decodeText(pString);\n+        } catch (UnsupportedEncodingException e) {\n+            throw new DecoderException(e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Encodes an object into its quoted-printable form using the default charset. Unsafe characters are escaped.\n+     * \n+     * @param pObject\n+     *                  object to convert to quoted-printable form\n+     * @return quoted-printable object\n+     * \n+     * @throws EncoderException\n+     *                  thrown if a failure condition is encountered during the encoding process.\n+     */\n+    public Object encode(Object pObject) throws EncoderException {\n+        if (pObject == null) {\n+            return null;\n+        } else if (pObject instanceof String) {\n+            return encode((String) pObject);\n+        } else {\n+            throw new EncoderException(\"Objects of type \"\n+                + pObject.getClass().getName()\n+                + \" cannot be encoded using Q codec\");\n+        }\n+    }\n+\n+    /**\n+     * Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original\n+     * representation.\n+     * \n+     * @param pObject\n+     *                  quoted-printable object to convert into its original form\n+     * \n+     * @return original object\n+     * \n+     * @throws DecoderException\n+     *                  A decoder exception is thrown if a failure condition is encountered during the decode process.\n+     */\n+    public Object decode(Object pObject) throws DecoderException {\n+        if (pObject == null) {\n+            return null;\n+        } else if (pObject instanceof String) {\n+            return decode((String) pObject);\n+        } else {\n+            throw new DecoderException(\"Objects of type \"\n+                + pObject.getClass().getName()\n+                + \" cannot be decoded using Q codec\");\n+        }\n+    }\n+\n+    /**\n+     * The default charset used for string decoding and encoding.\n+     * \n+     * @return the default string charset.\n+     */\n+    public String getDefaultCharset() {\n+        return this.charset;\n+    }\n+\n+    /**\n+     * Tests if optional tranformation of SPACE characters is to be used\n+     * \n+     * @return <code>true</code> if SPACE characters are to be transformed, <code>false</code> otherwise\n+     */\n+    public boolean isEncodeBlanks() {\n+        return this.encodeBlanks;\n+    }\n+\n+    /**\n+     * Defines whether optional tranformation of SPACE characters is to be used\n+     * \n+     * @param b\n+     *                  <code>true</code> if SPACE characters are to be transformed, <code>false</code> otherwise\n+     */\n+    public void setEncodeBlanks(boolean b) {\n+        this.encodeBlanks = b;\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/net/RFC1522Codec.java\n+/*\n+ * Copyright 2001-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */ \n+\n+package org.apache.commons.codec.net;\n+\n+import java.io.UnsupportedEncodingException;\n+\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.EncoderException;\n+\n+/**\n+ * <p>\n+ * Implements methods common to all codecs defined in RFC 1522.\n+ * </p>\n+ * \n+ * <p>\n+ * <a href=\"http://www.ietf.org/rfc/rfc1522.txt\">RFC 1522</a> \n+ * describes techniques to allow the encoding of non-ASCII text in \n+ * various portions of a RFC 822 [2] message header, in a manner which\n+ * is unlikely to confuse existing message handling software.\n+ * </p>\n+\n+ * @see <a href=\"http://www.ietf.org/rfc/rfc1522.txt\">\n+ * MIME (Multipurpose Internet Mail Extensions) Part Two:\n+ * Message Header Extensions for Non-ASCII Text</a>\n+ * </p>\n+ * \n+ * @author Apache Software Foundation\n+ * @since 1.3\n+ * @version $Id: RFC1522Codec.java,v 1.1 2004/03/29 07:59:57 ggregory Exp $\n+ */\n+abstract class RFC1522Codec {\n+    \n+    /**\n+     * Applies an RFC 1522 compliant encoding scheme to the given string of text with the \n+     * given charset. This method constructs the \"encoded-word\" header common to all the \n+     * RFC 1522 codecs and then invokes {@link #doEncoding(byte [])} method of a concrete \n+     * class to perform the specific enconding.\n+     * \n+     * @param text a string to encode\n+     * @param charset a charset to be used\n+     * \n+     * @return RFC 1522 compliant \"encoded-word\"\n+     * \n+     * @throws EncoderException thrown if there is an error conidition during the Encoding \n+     *  process.\n+     * @throws UnsupportedEncodingException thrown if charset is not supported \n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *          encoding names</a>\n+     */\n+    protected String encodeText(final String text, final String charset)\n+     throws EncoderException, UnsupportedEncodingException  \n+    {\n+        if (text == null) {\n+            return null;\n+        }\n+        StringBuffer buffer = new StringBuffer();\n+        buffer.append(\"=?\"); \n+        buffer.append(charset); \n+        buffer.append('?'); \n+        buffer.append(getEncoding()); \n+        buffer.append('?');\n+        byte [] rawdata = doEncoding(text.getBytes(charset)); \n+        buffer.append(new String(rawdata, StringEncodings.US_ASCII));\n+        buffer.append(\"?=\"); \n+        return buffer.toString();\n+    }\n+    \n+    /**\n+     * Applies an RFC 1522 compliant decoding scheme to the given string of text. This method \n+     * processes the \"encoded-word\" header common to all the RFC 1522 codecs and then invokes \n+     * {@link #doEncoding(byte [])} method of a concrete class to perform the specific deconding.\n+     * \n+     * @param text a string to decode\n+     * \n+     * @throws DecoderException thrown if there is an error conidition during the Decoding \n+     *  process.\n+     * @throws UnsupportedEncodingException thrown if charset specified in the \"encoded-word\" \n+     *  header is not supported \n+     */\n+    protected String decodeText(final String text)\n+     throws DecoderException, UnsupportedEncodingException  \n+    {\n+        if (text == null) {\n+            return null;\n+        }\n+        if ((!text.startsWith(\"=?\")) || (!text.endsWith(\"?=\"))) {\n+            throw new DecoderException(\"RFC 1521 violation: malformed encoded content\");\n+        }\n+        int termnator = text.length() - 2;\n+        int from = 2;\n+        int to = text.indexOf(\"?\", from);\n+        if ((to == -1) || (to == termnator)) {\n+            throw new DecoderException(\"RFC 1521 violation: charset token not found\");\n+        }\n+        String charset = text.substring(from, to);\n+        from = to + 1;\n+        to = text.indexOf(\"?\", from);\n+        if ((to == -1) || (to == termnator)) {\n+            throw new DecoderException(\"RFC 1521 violation: encoding token not found\");\n+        }\n+        String encoding = text.substring(from, to);\n+        if (!getEncoding().equalsIgnoreCase(encoding)) {\n+            throw new DecoderException(\"This codec cannot decode \" + \n+                encoding + \" encoded content\");\n+        }\n+        from = to + 1;\n+        to = text.indexOf(\"?\", from);\n+        if ((to == -1) || (to != termnator)) {\n+            throw new DecoderException(\"RFC 1521 violation: encoded content not found\");\n+        }\n+        byte[] data = text.substring(from, to).getBytes(StringEncodings.US_ASCII);\n+        data = doDecoding(data); \n+        return new String(data, charset);\n+    }\n+\n+    /**\n+     * Returns the codec name (referred to as encoding in the RFC 1522)\n+     * \n+     * @return name of the codec\n+     */    \n+    protected abstract String getEncoding();\n+\n+    /**\n+     * Encodes an array of bytes using the defined encoding scheme\n+     * \n+     * @param bytes Data to be encoded\n+     *\n+     * @return A byte array containing the encoded data\n+     * \n+     * @throws EncoderException thrown if the Encoder encounters a failure condition \n+     *  during the encoding process.\n+     */    \n+    protected abstract byte[] doEncoding(byte[] bytes) throws EncoderException;\n+\n+    /**\n+     * Decodes an array of bytes using the defined encoding scheme\n+     * \n+     * @param bytes Data to be decoded\n+     *\n+     * @return a byte array that contains decoded data\n+     * \n+     * @throws DecoderException A decoder exception is thrown if a Decoder encounters a \n+     *  failure condition during the decode process.\n+     */    \n+    protected abstract byte[] doDecoding(byte[] bytes) throws DecoderException;\n+}", "timestamp": 1080547197, "metainfo": ""}