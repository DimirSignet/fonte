{"sha": "b396c535ff143cf94ea0d11f50739da1709ec290", "log": "Renamed basedCodec to baseNCodec.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n+++ b/src/java/org/apache/commons/codec/binary/BaseNCodecInputStream.java\n \n     private final boolean doEncode;\n \n-    private final BaseNCodec basedCodec;\n+    private final BaseNCodec baseNCodec;\n \n     private final byte[] singleByte = new byte[1];\n \n-    protected BaseNCodecInputStream(InputStream in, BaseNCodec basedCodec, boolean doEncode) {\n+    protected BaseNCodecInputStream(InputStream in, BaseNCodec baseNCodec, boolean doEncode) {\n         super(in);\n         this.doEncode = doEncode;\n-        this.basedCodec = basedCodec;\n+        this.baseNCodec = baseNCodec;\n     }\n \n     /**\n              This is a fix for CODEC-101\n             */\n             while (readLen == 0) {\n-                if (!basedCodec.hasData()) {\n+                if (!baseNCodec.hasData()) {\n                     byte[] buf = new byte[doEncode ? 4096 : 8192];\n                     int c = in.read(buf);\n                     if (doEncode) {\n-                        basedCodec.encode(buf, 0, c);\n+                        baseNCodec.encode(buf, 0, c);\n                     } else {\n-                        basedCodec.decode(buf, 0, c);\n+                        baseNCodec.decode(buf, 0, c);\n                     }\n                 }\n-                readLen = basedCodec.readResults(b, offset, len);\n+                readLen = baseNCodec.readResults(b, offset, len);\n             }\n             return readLen;\n         }\n--- a/src/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n+++ b/src/java/org/apache/commons/codec/binary/BaseNCodecOutputStream.java\n \n     private final boolean doEncode;\n \n-    private final BaseNCodec basedCodec;\n+    private final BaseNCodec baseNCodec;\n \n     private final byte[] singleByte = new byte[1];\n \n     public BaseNCodecOutputStream(OutputStream out, BaseNCodec basedCodec, boolean doEncode) {\n         super(out);\n-        this.basedCodec = basedCodec;\n+        this.baseNCodec = basedCodec;\n         this.doEncode = doEncode;\n     }\n \n             throw new IndexOutOfBoundsException();\n         } else if (len > 0) {\n             if (doEncode) {\n-                basedCodec.encode(b, offset, len);\n+                baseNCodec.encode(b, offset, len);\n             } else {\n-                basedCodec.decode(b, offset, len);\n+                baseNCodec.decode(b, offset, len);\n             }\n             flush(false);\n         }\n      *             if an I/O error occurs.\n      */\n     private void flush(boolean propogate) throws IOException {\n-        int avail = basedCodec.avail();\n+        int avail = baseNCodec.avail();\n         if (avail > 0) {\n             byte[] buf = new byte[avail];\n-            int c = basedCodec.readResults(buf, 0, avail);\n+            int c = baseNCodec.readResults(buf, 0, avail);\n             if (c > 0) {\n                 out.write(buf, 0, c);\n             }\n     public void close() throws IOException {\n         // Notify encoder of EOF (-1).\n         if (doEncode) {\n-            basedCodec.encode(singleByte, 0, -1);\n+            baseNCodec.encode(singleByte, 0, -1);\n         } else {\n-            basedCodec.decode(singleByte, 0, -1);\n+            baseNCodec.decode(singleByte, 0, -1);\n         }\n         flush();\n         out.close();", "timestamp": 1296068940, "metainfo": ""}