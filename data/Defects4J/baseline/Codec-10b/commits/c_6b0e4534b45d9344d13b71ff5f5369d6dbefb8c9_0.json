{"sha": "6b0e4534b45d9344d13b71ff5f5369d6dbefb8c9", "log": "Soundex encoding bugs. http://issues.apache.org/bugzilla/show_bug.cgi?id=24471   ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/java/org/apache/commons/codec/language/Soundex.java\n  * ====================================================================\n  * \n  * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n+ * \n+ * Copyright (c) 2001-2003 The Apache Software Foundation. All rights reserved.\n+ * \n  * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer. \n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution,\n- *    if any, must include the following acknowledgement:  \n- *       \"This product includes software developed by the \n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowledgement may appear in the software itself,\n- *    if and wherever such third-party acknowledgements normally appear.\n- *\n- * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written \n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\",\n- *    \"Apache\" nor may \"Apache\" appear in their name without prior \n- *    written permission of the Apache Software Foundation.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n+ * modification, are permitted provided that the following conditions are met: 1.\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer. 2. Redistributions in\n+ * binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other\n+ * materials provided with the distribution. 3. The end-user documentation\n+ * included with the redistribution, if any, must include the following\n+ * acknowledgement: \"This product includes software developed by the Apache\n+ * Software Foundation (http://www.apache.org/).\" Alternately, this\n+ * acknowledgement may appear in the software itself, if and wherever such\n+ * third-party acknowledgements normally appear. 4. The names \"Apache\", \"The\n+ * Jakarta Project\", \"Commons\", and \"Apache Software Foundation\" must not be\n+ * used to endorse or promote products derived from this software without prior\n+ * written permission. For written permission, please contact\n+ * apache@apache.org. 5. Products derived from this software may not be called\n+ * \"Apache\", \"Apache\" nor may \"Apache\" appear in their name without prior\n+ * written permission of the Apache Software Foundation.\n+ * \n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */ \n+ * \n+ * This software consists of voluntary contributions made by many individuals\n+ * on behalf of the Apache Software Foundation. For more information on the\n+ * Apache Software Foundation, please see <http://www.apache.org/> .\n+ *  \n+ */\n \n package org.apache.commons.codec.language;\n \n import org.apache.commons.codec.StringEncoder;\n \n /**\n- * Encodes a string into a soundex value.  Soundex is an encoding used to\n- * relate similar names, but can also be used as a general purpose\n- * scheme to find word with similar phonemes. \n+ * Encodes a string into a soundex value. Soundex is an encoding used to relate\n+ * similar names, but can also be used as a general purpose scheme to find word\n+ * with similar phonemes.\n  * \n  * @author bayard@generationjava.com\n  * @author Tim O'Brien\n  * @author Gary Gregory\n- * @version $Id: Soundex.java,v 1.10 2003/11/04 02:43:09 ggregory Exp $\n+ * @version $Id: Soundex.java,v 1.11 2003/11/06 16:31:47 ggregory Exp $\n  */\n public class Soundex implements StringEncoder {\n \n     /**\n-     * This static variable contains an instance of the\n-     * Soundex using the US_ENGLISH mapping.\n-     */\n+\t * This static variable contains an instance of the Soundex using the\n+\t * US_ENGLISH mapping.\n+\t */\n     public static final Soundex US_ENGLISH = new Soundex();\n \n     /**\n-     * This is a default mapping of the 26 letters used\n-     * in US english.\n-     */\n-    public static final char[] US_ENGLISH_MAPPING =\n-        \"01230120022455012623010202\".toCharArray();\n-\n-    /**\n-     * The maximum length of a Soundex code - Soundex codes are\n-     * only four characters by definition.\n-     */\n+\t * This is a default mapping of the 26 letters used in US english.\n+     * A value of <code>0</code> for a letter position means do not encode.\n+\t */\n+    public static final char[] US_ENGLISH_MAPPING = \"01230120022455012623010202\".toCharArray();\n+\n+    /**\n+\t * The maximum length of a Soundex code - Soundex codes are only four\n+\t * characters by definition.\n+\t */\n     private int maxLength = 4;\n-    \n-    /**\n-     * Every letter of the alphabet is \"mapped\" to a numerical \n-     * value.  This char array holds the values to which each\n-     * letter is mapped.  This implementation contains a default\n-     * map for US_ENGLISH\n-     */\n+\n+    /**\n+\t * Every letter of the alphabet is \"mapped\" to a numerical value. This char\n+\t * array holds the values to which each letter is mapped. This\n+\t * implementation contains a default map for US_ENGLISH\n+\t */\n     private char[] soundexMapping;\n \n     /**\n-     * Creates an instance of the Soundex object using the default\n-     * US_ENGLISH mapping.\n-     */\n+\t * Creates an instance of the Soundex object using the default US_ENGLISH\n+\t * mapping.\n+\t */\n     public Soundex() {\n         this(US_ENGLISH_MAPPING);\n     }\n \n     /**\n-     * Creates a soundex instance using a custom mapping.  This\n-     * constructor can be used to customize the mapping, and/or possibly\n-     * provide an internationalized mapping for a non-Western character\n-     * set.\n-     *\n-     * @param mapping Mapping array to use when finding the corresponding\n-     *                code for a given character\n-     */\n+\t * Creates a soundex instance using a custom mapping. This constructor can\n+\t * be used to customize the mapping, and/or possibly provide an\n+\t * internationalized mapping for a non-Western character set.\n+\t * \n+\t * @param mapping\n+\t *                  Mapping array to use when finding the corresponding code for\n+\t *                  a given character\n+\t */\n     public Soundex(char[] mapping) {\n         this.setSoundexMapping(mapping);\n     }\n \n     /**\n-     * Encodes an Object using the soundex algorithm.  This method\n-     * is provided in order to satisfy the requirements of the\n-     * Encoder interface, and will throw an EncoderException if the\n-     * supplied object is not of type java.lang.String.\n-     *\n-     * @param pObject Object to encode\n-     * @return An object (or type java.lang.String) containing the \n-     *         soundex code which corresponds to the String supplied.\n-     * @throws EncoderException if the parameter supplied is not\n-     *                          of type java.lang.String\n-     */\n+\t * Cleans up the input string before Soundex processing by trimming and\n+\t * removing punctuation characters. The string is returned in upper-case.\n+\t */\n+    private String clean(String str) {\n+        if (str == null || str.length() == 0) {\n+            return str;\n+        }\n+        int len = str.length();\n+        char[] chars = new char[len];\n+        int count = 0;\n+        for (int i = 0; i < len; i++) {\n+            if (Character.isLetter(str.charAt(i))) {\n+                chars[count++] = str.charAt(i);\n+            }\n+        }\n+        if (count == len) {\n+            return str.toUpperCase();\n+        }\n+        return new String(chars, 0, count).toUpperCase();\n+    }\n+\n+    /**\n+\t * Encodes an Object using the soundex algorithm. This method is provided\n+\t * in order to satisfy the requirements of the Encoder interface, and will\n+\t * throw an EncoderException if the supplied object is not of type\n+\t * java.lang.String.\n+\t * \n+\t * @param pObject\n+\t *                  Object to encode\n+\t * @return An object (or type java.lang.String) containing the soundex code\n+\t *             which corresponds to the String supplied.\n+\t * @throws EncoderException\n+\t *                  if the parameter supplied is not of type java.lang.String\n+\t */\n     public Object encode(Object pObject) throws EncoderException {\n \n         Object result;\n \n         if (!(pObject instanceof java.lang.String)) {\n-            throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\"); \n+            throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n         } else {\n             result = soundex((String) pObject);\n         }\n     }\n \n     /**\n-     * Encodes a String using the soundex algorithm. \n-     *\n-     * @param pString A String object to encode\n-     * @return A Soundex code corresponding to the String supplied\n-     */\n+\t * Encodes a String using the soundex algorithm.\n+\t * \n+\t * @param pString\n+\t *                  A String object to encode\n+\t * @return A Soundex code corresponding to the String supplied\n+\t */\n     public String encode(String pString) {\n-        return (soundex(pString));   \n-    }\n-\n-    /**\n-     * Used internally by the SoundEx algorithm.\n-     *\n-     * @param c character to use to retrieve mapping code\n-     * @return Mapping code for a particular character\n-     */\n-    private char getMappingCode(char c) {\n+        return soundex(pString);\n+    }\n+\n+    /**\n+\t * Used internally by the SoundEx algorithm.\n+\t * \n+\t * Consonants from the same code group separated by W or H are treated as one.\n+\t * \n+\t * @param str\n+\t *                  the whole string\n+\t * @param index\n+\t *                  the character position to encode\n+\t * @return Mapping code for a particular character\n+\t */\n+    private char getMappingCode(String str, int index) {\n+        char c = str.charAt(index);\n         if (!Character.isLetter(c)) {\n             return 0;\n         } else {\n-            return this.getSoundexMapping()[Character.toUpperCase(c) - 'A'];\n-        }\n-    }\n-\n-    /**\n-     * Returns the maxLength.  Standard Soundex\n-     * @return int\n-     */\n+            char mappedChar = this.map(c);\n+            // HW rule check\n+            if (index > 1 && mappedChar != '0') {\n+                char hwChar = str.charAt(index-1);\n+                if ('H' == hwChar || 'W' == hwChar) {\n+                    char preHWChar = str.charAt(index - 2);\n+                    char firstCode = this.map(preHWChar);\n+                    if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {\n+                        return 0;\n+                    }\n+                }              \n+            }\n+            return mappedChar;\n+        }\n+    }\n+\n+    /**\n+\t * Returns the maxLength. Standard Soundex\n+\t * \n+\t * @return int\n+\t */\n     public int getMaxLength() {\n         return this.maxLength;\n     }\n \n     /**\n-     * @return Returns the soundexMapping.\n-     */\n+\t * @return Returns the soundexMapping.\n+\t */\n     private char[] getSoundexMapping() {\n         return this.soundexMapping;\n     }\n \n     /**\n-     * Sets the maxLength.\n-     * @param maxLength The maxLength to set\n+     * Maps the given upper-case character to it's Soudex code.\n      */\n+    private char map(char c) {\n+       return this.getSoundexMapping()[c - 'A'];\n+    }\n+\n+    /**\n+\t * Sets the maxLength.\n+\t * \n+\t * @param maxLength\n+\t *                  The maxLength to set\n+\t */\n     public void setMaxLength(int maxLength) {\n         this.maxLength = maxLength;\n     }\n \n     /**\n-     * @param soundexMapping The soundexMapping to set.\n-     */\n+\t * @param soundexMapping\n+\t *                  The soundexMapping to set.\n+\t */\n     private void setSoundexMapping(char[] soundexMapping) {\n         this.soundexMapping = soundexMapping;\n     }\n \n     /**\n-     * Retreives the Soundex code for a given String object.\n-     *\n-     * @param str String to encode using the Soundex algorithm\n-     * @return A soundex code for the String supplied\n-     */\n+\t * Retreives the Soundex code for a given String object.\n+\t * \n+\t * @param str\n+\t *                  String to encode using the Soundex algorithm\n+\t * @return A soundex code for the String supplied\n+\t */\n     public String soundex(String str) {\n-        if (null == str || str.length() == 0) { return str; }\n-        \n+        if (str == null) {\n+            return null;\n+        }\n+        str = this.clean(str);\n+        if (str.length() == 0) {\n+            return str;\n+        }\n+\n         char out[] = { '0', '0', '0', '0' };\n         char last, mapped;\n         int incount = 1, count = 1;\n-        out[0] = Character.toUpperCase(str.charAt(0));\n-        last = getMappingCode(str.charAt(0));\n-        while ((incount < str.length()) && (mapped = getMappingCode(str.charAt(incount++))) != 0 && (count < this.getMaxLength())) {\n+        out[0] = str.charAt(0);\n+        last = getMappingCode(str, 0);\n+        while ((incount < str.length()) && (count < this.getMaxLength())) {\n+            if ((mapped = getMappingCode(str, incount++)) != 0) {\n                 if ((mapped != '0') && (mapped != last)) {\n                     out[count++] = mapped;\n                 }\n                 last = mapped;\n             }\n+        }\n         return new String(out);\n     }\n \n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/language/AllTests.java\n+/*\n+ * Copyright (C) 1993-2003 SEAGULL\n+ * \n+ * AllTests.java\n+ * Created on Nov 5, 2003, 8:25:55 PM\n+ * \n+ */\n+ \n+package org.apache.commons.codec.language;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Tests all test cases in this package.\n+ * \n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id: AllTests.java,v 1.1 2003/11/06 16:31:47 ggregory Exp $\n+ */\n+public class AllTests {\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(\"Test for org.apache.commons.codec.language\");\n+        //$JUnit-BEGIN$\n+        suite.addTest(MetaphoneTest.suite());\n+        suite.addTest(SoundexTest.suite());\n+        suite.addTest(RefinedSoundexTest.suite());\n+        suite.addTest(DoubleMetaphoneTest.suite());\n+        //$JUnit-END$\n+        return suite;\n+    }\n+}\n--- a/src/test/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/SoundexTest.java\n  * ====================================================================\n  * \n  * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n+ * \n+ * Copyright (c) 2001-2003 The Apache Software Foundation. All rights reserved.\n+ * \n  * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer. \n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution,\n- *    if any, must include the following acknowledgement:  \n- *       \"This product includes software developed by the \n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowledgement may appear in the software itself,\n- *    if and wherever such third-party acknowledgements normally appear.\n- *\n- * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written \n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\",\n- *    \"Apache\" nor may \"Apache\" appear in their name without prior \n- *    written permission of the Apache Software Foundation.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n+ * modification, are permitted provided that the following conditions are met: 1.\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer. 2. Redistributions in\n+ * binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other\n+ * materials provided with the distribution. 3. The end-user documentation\n+ * included with the redistribution, if any, must include the following\n+ * acknowledgement: \"This product includes software developed by the Apache\n+ * Software Foundation (http://www.apache.org/).\" Alternately, this\n+ * acknowledgement may appear in the software itself, if and wherever such\n+ * third-party acknowledgements normally appear. 4. The names \"Apache\", \"The\n+ * Jakarta Project\", \"Commons\", and \"Apache Software Foundation\" must not be\n+ * used to endorse or promote products derived from this software without prior\n+ * written permission. For written permission, please contact\n+ * apache@apache.org. 5. Products derived from this software may not be called\n+ * \"Apache\", \"Apache\" nor may \"Apache\" appear in their name without prior\n+ * written permission of the Apache Software Foundation.\n+ * \n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */ \n-\n+ * \n+ * This software consists of voluntary contributions made by many individuals\n+ * on behalf of the Apache Software Foundation. For more information on the\n+ * Apache Software Foundation, please see <http://www.apache.org/> .\n+ *  \n+ */\n+\n+// (FYI: Formatted and sorted with Eclipse)\n package org.apache.commons.codec.language;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n-\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n \n /**\n- * @version $Revision: 1.5 $ $Date: 2003/11/04 02:43:09 $\n+ * Tests {@link Soundex}\n+ * \n+ * @version $Revision: 1.6 $ $Date: 2003/11/06 16:31:47 $\n  * @author Rodney Waldhoff\n  * @author Gary Gregory\n  */\n         return (new TestSuite(SoundexTest.class));\n     }\n \n-    private Soundex _encoder = null;\n+    private Soundex encoder = null;\n \n     public SoundexTest(String name) {\n         super(name);\n     }\n-    /**\n-     * @return Returns the _encoder.\n-     */\n+    \n+    /**\n+\t * @return Returns the _encoder.\n+\t */\n     public Soundex getEncoder() {\n-        return this._encoder;\n+        return this.encoder;\n     }\n \n     protected StringEncoder makeEncoder() {\n     }\n \n     /**\n-     * @param _encoder The _encoder to set.\n-     */\n+\t * @param encoder\n+\t *                  The encoder to set.\n+\t */\n     public void setEncoder(Soundex encoder) {\n-        this._encoder = encoder;\n-    }\n-\n-    public void setUp() throws Exception {        \n+        this.encoder = encoder;\n+    }\n+\n+    public void setUp() throws Exception {\n         super.setUp();\n         this.setEncoder(new Soundex());\n     }\n         this.setEncoder(null);\n     }\n \n-    // ------------------------------------------------------------------------\n-\n-    public void testEncode() throws Exception {\n-        assertEquals(\"T235\",this.getEncoder().encode(\"testing\"));\n-        assertEquals(\"T000\",this.getEncoder().encode(\"The\"));\n-        assertEquals(\"Q200\",this.getEncoder().encode(\"quick\"));\n-        assertEquals(\"B650\",this.getEncoder().encode(\"brown\"));\n-        assertEquals(\"F200\",this.getEncoder().encode(\"fox\"));\n-        assertEquals(\"J513\",this.getEncoder().encode(\"jumped\"));\n-        assertEquals(\"O160\",this.getEncoder().encode(\"over\"));\n-        assertEquals(\"T000\",this.getEncoder().encode(\"the\"));\n-        assertEquals(\"L200\",this.getEncoder().encode(\"lazy\"));\n-        assertEquals(\"D200\",this.getEncoder().encode(\"dogs\"));\n-    }\n-\n-    /**\n-     * Examples from\n-     * http://www.bradandkathy.com/genealogy/overviewofsoundex.html\n-     */\n-    public void testEncode2() throws Exception {\n-        assertEquals(\"A462\",this.getEncoder().encode(\"Allricht\"));\n-        assertEquals(\"E166\",this.getEncoder().encode(\"Eberhard\"));\n-        assertEquals(\"E521\",this.getEncoder().encode(\"Engebrethson\"));\n-        assertEquals(\"H512\",this.getEncoder().encode(\"Heimbach\"));\n-        assertEquals(\"H524\",this.getEncoder().encode(\"Hanselmann\"));\n-        assertEquals(\"H431\",this.getEncoder().encode(\"Hildebrand\"));\n-        assertEquals(\"K152\",this.getEncoder().encode(\"Kavanagh\"));\n-        assertEquals(\"L530\",this.getEncoder().encode(\"Lind, Van\"));\n-        assertEquals(\"L222\",this.getEncoder().encode(\"Lukaschowsky\"));\n-        assertEquals(\"M235\",this.getEncoder().encode(\"McDonnell\"));\n-        assertEquals(\"M200\",this.getEncoder().encode(\"McGee\"));\n-        // Fix me?\n-        //assertEquals(\"O165\",this.getEncoder().encode(\"O'Brien\"));\n-        assertEquals(\"O155\",this.getEncoder().encode(\"Opnian\"));\n-        assertEquals(\"O155\",this.getEncoder().encode(\"Oppenheimer\"));\n-        // Fix me?\n-        //assertEquals(\"S460\",this.getEncoder().encode(\"Swhgler\"));\n-        assertEquals(\"R355\",this.getEncoder().encode(\"Riedemanas\"));\n-        assertEquals(\"Z300\",this.getEncoder().encode(\"Zita\"));\n-        assertEquals(\"Z325\",this.getEncoder().encode(\"Zitzmeinn\"));    \n-    }\n-    \n+    void encodeAll(String[] strings, String expectedEncoding) {\n+        for (int i = 0; i < strings.length; i++) {\n+            assertEquals(expectedEncoding, this.getEncoder().encode(strings[i]));\n+        }\n+    }\n+\n+    public void testB650() {\n+        this.encodeAll(\n+            new String[] {\n+                \"BARHAM\",\n+                \"BARONE\",\n+                \"BARRON\",\n+                \"BERNA\",\n+                \"BIRNEY\",\n+                \"BIRNIE\",\n+                \"BOOROM\",\n+                \"BOREN\",\n+                \"BORN\",\n+                \"BOURN\",\n+                \"BOURNE\",\n+                \"BOWRON\",\n+                \"BRAIN\",\n+                \"BRAME\",\n+                \"BRANN\",\n+                \"BRAUN\",\n+                \"BREEN\",\n+                \"BRIEN\",\n+                \"BRIM\",\n+                \"BRIMM\",\n+                \"BRINN\",\n+                \"BRION\",\n+                \"BROOM\",\n+                \"BROOME\",\n+                \"BROWN\",\n+                \"BROWNE\",\n+                \"BRUEN\",\n+                \"BRUHN\",\n+                \"BRUIN\",\n+                \"BRUMM\",\n+                \"BRUN\",\n+                \"BRUNO\",\n+                \"BRYAN\",\n+                \"BURIAN\",\n+                \"BURN\",\n+                \"BURNEY\",\n+                \"BYRAM\",\n+                \"BYRNE\",\n+                \"BYRON\",\n+                \"BYRUM\" },\n+            \"B650\");\n+    }\n+\n+    public void testEncodeBasic() {\n+        assertEquals(\"T235\", this.getEncoder().encode(\"testing\"));\n+        assertEquals(\"T000\", this.getEncoder().encode(\"The\"));\n+        assertEquals(\"Q200\", this.getEncoder().encode(\"quick\"));\n+        assertEquals(\"B650\", this.getEncoder().encode(\"brown\"));\n+        assertEquals(\"F200\", this.getEncoder().encode(\"fox\"));\n+        assertEquals(\"J513\", this.getEncoder().encode(\"jumped\"));\n+        assertEquals(\"O160\", this.getEncoder().encode(\"over\"));\n+        assertEquals(\"T000\", this.getEncoder().encode(\"the\"));\n+        assertEquals(\"L200\", this.getEncoder().encode(\"lazy\"));\n+        assertEquals(\"D200\", this.getEncoder().encode(\"dogs\"));\n+    }\n+\n+    /**\n+\t * Examples from\n+\t * http://www.bradandkathy.com/genealogy/overviewofsoundex.html\n+\t */\n+    public void testEncodeBatch2() {\n+        assertEquals(\"A462\", this.getEncoder().encode(\"Allricht\"));\n+        assertEquals(\"E166\", this.getEncoder().encode(\"Eberhard\"));\n+        assertEquals(\"E521\", this.getEncoder().encode(\"Engebrethson\"));\n+        assertEquals(\"H512\", this.getEncoder().encode(\"Heimbach\"));\n+        assertEquals(\"H524\", this.getEncoder().encode(\"Hanselmann\"));\n+        assertEquals(\"H431\", this.getEncoder().encode(\"Hildebrand\"));\n+        assertEquals(\"K152\", this.getEncoder().encode(\"Kavanagh\"));\n+        assertEquals(\"L530\", this.getEncoder().encode(\"Lind\"));\n+        assertEquals(\"L222\", this.getEncoder().encode(\"Lukaschowsky\"));\n+        assertEquals(\"M235\", this.getEncoder().encode(\"McDonnell\"));\n+        assertEquals(\"M200\", this.getEncoder().encode(\"McGee\"));\n+        assertEquals(\"O155\", this.getEncoder().encode(\"Opnian\"));\n+        assertEquals(\"O155\", this.getEncoder().encode(\"Oppenheimer\"));\n+        assertEquals(\"R355\", this.getEncoder().encode(\"Riedemanas\"));\n+        assertEquals(\"Z300\", this.getEncoder().encode(\"Zita\"));\n+        assertEquals(\"Z325\", this.getEncoder().encode(\"Zitzmeinn\"));\n+    }\n+\n+    /**\n+\t * Examples from\n+\t * http://www.archives.gov/research_room/genealogy/census/soundex.html\n+\t */\n+    public void testEncodeBatch3() {\n+        assertEquals(\"W252\", this.getEncoder().encode(\"Washington\"));\n+        assertEquals(\"L000\", this.getEncoder().encode(\"Lee\"));\n+        assertEquals(\"G362\", this.getEncoder().encode(\"Gutierrez\"));\n+        assertEquals(\"P236\", this.getEncoder().encode(\"Pfister\"));\n+        assertEquals(\"J250\", this.getEncoder().encode(\"Jackson\"));\n+        assertEquals(\"T522\", this.getEncoder().encode(\"Tymczak\"));\n+        // For VanDeusen: D-250 (D, 2 for the S, 5 for the N, 0 added) is also\n+        // possible.\n+        assertEquals(\"V532\", this.getEncoder().encode(\"VanDeusen\"));\n+    }\n+\n+    /**\n+\t * Examples from: http://www.myatt.demon.co.uk/sxalg.htm\n+\t */\n+    public void testEncodeBatch4() {\n+        assertEquals(\"H452\", this.getEncoder().encode(\"HOLMES\"));\n+        assertEquals(\"A355\", this.getEncoder().encode(\"ADOMOMI\"));\n+        assertEquals(\"V536\", this.getEncoder().encode(\"VONDERLEHR\"));\n+        assertEquals(\"B400\", this.getEncoder().encode(\"BALL\"));\n+        assertEquals(\"S000\", this.getEncoder().encode(\"SHAW\"));\n+        assertEquals(\"J250\", this.getEncoder().encode(\"JACKSON\"));\n+        assertEquals(\"S545\", this.getEncoder().encode(\"SCANLON\"));\n+        assertEquals(\"S532\", this.getEncoder().encode(\"SAINTJOHN\"));\n+\n+    }\n+\n+    public void testEncodeIgnoreApostrophes() {\n+        this.encodeAll(new String[] { \"OBrien\", \"'OBrien\", \"O'Brien\", \"OB'rien\", \"OBr'ien\", \"OBri'en\", \"OBrie'n\", \"OBrien'\" }, \"O165\");\n+    }\n+\n+    /**\n+\t * Test data from http://www.myatt.demon.co.uk/sxalg.htm\n+\t * \n+\t * @throws EncoderException\n+\t */\n+    public void testEncodeIgnoreHyphens() {\n+        this.encodeAll(\n+            new String[] {\n+                \"KINGSMITH\",\n+                \"-KINGSMITH\",\n+                \"K-INGSMITH\",\n+                \"KI-NGSMITH\",\n+                \"KIN-GSMITH\",\n+                \"KING-SMITH\",\n+                \"KINGS-MITH\",\n+                \"KINGSM-ITH\",\n+                \"KINGSMI-TH\",\n+                \"KINGSMIT-H\",\n+                \"KINGSMITH-\" },\n+            \"K525\");\n+    }\n+\n+    public void testEncodeIgnoreTrimmable() {\n+        assertEquals(\"W252\", this.getEncoder().encode(\" \\t\\n\\r Washington \\t\\n\\r \"));\n+    }\n+\n+    /**\n+\t * Consonants from the same code group separated by W or H are treated as\n+\t * one.\n+\t */\n+    public void testHWRuleEx1() {\n+        // From\n+        // http://www.archives.gov/research_room/genealogy/census/soundex.html:\n+        // Ashcraft is coded A-261 (A, 2 for the S, C ignored, 6 for the R, 1\n+        // for the F). It is not coded A-226.\n+        assertEquals(\"A261\", this.getEncoder().encode(\"Ashcraft\"));\n+    }\n+\n+    /**\n+\t * Consonants from the same code group separated by W or H are treated as\n+\t * one.\n+\t * \n+\t * Test data from http://www.myatt.demon.co.uk/sxalg.htm\n+\t */\n+    public void testHWRuleEx2() {\n+        assertEquals(\"B312\", this.getEncoder().encode(\"BOOTHDAVIS\"));\n+        assertEquals(\"B312\", this.getEncoder().encode(\"BOOTH-DAVIS\"));\n+    }\n+\n+    /**\n+\t * Consonants from the same code group separated by W or H are treated as\n+\t * one.\n+\t * \n+\t * Test data from http://www.myatt.demon.co.uk/sxalg.htm\n+\t */\n+    public void testHWRuleEx3() {\n+        assertEquals(\"S460\", this.getEncoder().encode(\"Sgler\"));\n+        assertEquals(\"S460\", this.getEncoder().encode(\"Swhgler\"));\n+        // Also S460:\n+        this.encodeAll(\n+            new String[] {\n+                \"SAILOR\",\n+                \"SALYER\",\n+                \"SAYLOR\",\n+                \"SCHALLER\",\n+                \"SCHELLER\",\n+                \"SCHILLER\",\n+                \"SCHOOLER\",\n+                \"SCHULER\",\n+                \"SCHUYLER\",\n+                \"SEILER\",\n+                \"SEYLER\",\n+                \"SHOLAR\",\n+                \"SHULER\",\n+                \"SILAR\",\n+                \"SILER\",\n+                \"SILLER\" },\n+            \"S460\");\n+    }\n+\n     public void testMaxLength() throws Exception {\n         Soundex soundex = new Soundex();\n-        soundex.setMaxLength( soundex.getMaxLength() );\n+        soundex.setMaxLength(soundex.getMaxLength());\n     }\n \n }", "timestamp": 1068136307, "metainfo": ""}