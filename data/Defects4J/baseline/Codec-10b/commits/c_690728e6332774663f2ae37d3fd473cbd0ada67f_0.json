{"sha": "690728e6332774663f2ae37d3fd473cbd0ada67f", "log": "Added StringDecoder and URLCodec from the HttpClient team.  This patch was submitted by Oleg Kalnichevski   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/StringDecoder.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The names \"Apache\" and \"Apache Software Foundation\" and\n+ *    \"Apache Commons\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\",\n+ *    \"Apache Commons\", nor may \"Apache\" appear in their name, without\n+ *    prior written permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec;\n+\n+/**\n+ * A StringDecoder is a decoder which expects a String as\n+ * a method parameter and one that produces a String as the\n+ * output of the decoding process.\n+ *\n+ * @author tobrien@transolutions.net\n+ * @version $Revision: 1.1 $\n+ */\n+public interface StringDecoder extends Decoder {\n+    \n+    /**\n+     * Decode a String and produce a String.\n+     * \n+     * @param pString a String to encode\n+     * \n+     * @return the encoded String\n+     * \n+     * @throws DecoderException thrown if there is\n+     *  an error conidition during the Encoding process.\n+     */\n+    String decode(String pString) throws DecoderException;\n+}  \n+\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/net/URLCodec.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/java/org/apache/commons/codec/net/URLCodec.java,v 1.1 2003/07/11 16:53:28 tobrien Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/07/11 16:53:28 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+package org.apache.commons.codec.net;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.UnsupportedEncodingException;\n+import java.util.BitSet;\n+\n+import org.apache.commons.codec.BinaryDecoder;\n+import org.apache.commons.codec.BinaryEncoder;\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.StringDecoder;\n+import org.apache.commons.codec.StringEncoder;\n+\n+/**\n+ * URLCodec implements 'www-form-urlencoded' encoding scheme, \n+ * also misleadingly known as URL encoding. \n+ * For more detailed information please refer to \n+ * <a href=\"http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.1\">\n+ * Chapter 17.13.4 'Form content types'</a> of the \n+ * <a href=\"http://www.w3.org/TR/html4/\">HTML 4.01 Specification<a>\n+ * \n+ * <p> \n+ * This codec is meant to be a replacement for standard Java classes\n+ * {@link java.net.URLEncoder} and {@link java.net.URLDecoder} \n+ * on older Java platforms, as these classes in Java versions below \n+ * 1.4 rely on the platform's default charset encoding.\n+ * </p>\n+ * \n+ * @author <a href=\"mailto:oleg@ural.ru\">Oleg Kalnichevski</a>\n+ */\n+\n+public class URLCodec \n+        implements BinaryEncoder, BinaryDecoder, \n+                   StringEncoder, StringDecoder \n+{\n+    \n+    /**\n+     * BitSet of www-form-url safe characters.\n+     */\n+    protected static final BitSet WWW_FORM_URL = new BitSet(256);\n+    \n+    // Static initializer for www_form_url\n+    static {\n+        // alpha characters\n+        for (int i = 'a'; i <= 'z'; i++) {\n+            WWW_FORM_URL.set(i);\n+        }\n+        for (int i = 'A'; i <= 'Z'; i++) {\n+            WWW_FORM_URL.set(i);\n+        }\n+        // numeric characters\n+        for (int i = '0'; i <= '9'; i++) {\n+            WWW_FORM_URL.set(i);\n+        }\n+        // special chars\n+        WWW_FORM_URL.set('-');\n+        WWW_FORM_URL.set('_');\n+        WWW_FORM_URL.set('.');\n+        WWW_FORM_URL.set('*');\n+        // blank to be replaced with +\n+        WWW_FORM_URL.set(' ');\n+    }\n+\n+\n+    /**\n+     * Default constructor\n+     */\n+    public URLCodec() {\n+        super();\n+    }\n+\n+    /**\n+     * Converts an array of bytes into an array of URL safe 7-bit \n+     * characters. Unsafe characters are escaped.\n+     *\n+     * @param urlsafe bitset of characters deemed URL safe\n+     * @param pArray array of bytes to convert to URL safe characters\n+     * @return array of bytes containing URL safe characters\n+     * @throws EncoderException Thrown if URL encoding is unsuccessful\n+     */\n+    public static final byte[] urlencode(BitSet urlsafe, byte[] pArray) \n+        throws EncoderException\n+    {\n+        if (pArray == null) {\n+            return null;\n+        }\n+        if (urlsafe == null) {\n+            urlsafe = WWW_FORM_URL;\n+        }\n+        \n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream(); \n+        for (int i = 0; i < pArray.length; i++) {\n+            int b = pArray[i];\n+            if (urlsafe.get(b)) {\n+                if (b == ' ') {\n+                    b = '+';\n+                }\n+                buffer.write(b);\n+            } else {\n+                buffer.write('%');\n+                char hex1 = Character.toUpperCase(\n+                  Character.forDigit((b >> 4) & 0xF, 16));\n+                char hex2 = Character.toUpperCase(\n+                  Character.forDigit(b & 0xF, 16));\n+                buffer.write((int)hex1);\n+                buffer.write((int)hex2);\n+            }\n+        }\n+        return buffer.toByteArray(); \n+    }\n+\n+\n+    /**\n+     * Converts an array of URL safe 7-bit characters into an array of \n+     * original bytes. Escaped characters are converted back to their \n+     * original representation.\n+     *\n+     * @param pArray array of URL safe characters\n+     * @return array of original bytes \n+     * @throws DecoderException Thrown if URL decoding is unsuccessful\n+     */\n+    public static final byte[] urldecode(byte[] pArray) \n+         throws DecoderException\n+    {\n+        if (pArray == null) {\n+            return null;\n+        }\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream(); \n+        for (int i = 0; i < pArray.length; i++) {\n+            int b = pArray[i];\n+            if (b == '+') {\n+                buffer.write(' ');\n+            } else if (b == '%') {\n+                try {\n+                    int u = Character.digit((char)pArray[++i], 16);\n+                    int l = Character.digit((char)pArray[++i], 16);\n+                    if (u == -1 || l == -1) {\n+                        throw new DecoderException(\"Invalid URL encoding\");\n+                    }\n+                    buffer.write((char)((u << 4) + l));\n+                } catch(ArrayIndexOutOfBoundsException e) {\n+                    throw new DecoderException(\"Invalid URL encoding\");\n+                }\n+            } else {\n+                buffer.write(b);\n+            }\n+        }\n+        return buffer.toByteArray(); \n+    }\n+\n+\n+    /**\n+     * Converts an array of bytes into an array of URL safe 7-bit \n+     * characters. Unsafe characters are escaped.\n+     *\n+     * @param pArray array of bytes to convert to URL safe characters\n+     * @return array of bytes containing URL safe characters\n+     * @throws EncoderException Thrown if URL encoding is unsuccessful\n+     */\n+    public byte[] encode(byte[] pArray) throws EncoderException {\n+        return urlencode(WWW_FORM_URL, pArray);\n+    }\n+\n+\n+    /**\n+     * Converts an array of URL safe 7-bit characters into an array of \n+     * original bytes. Escaped characters are converted back to their \n+     * original representation.\n+     *\n+     * @param pArray array of URL safe characters\n+     * @return array of original bytes \n+     * @throws DecoderException Thrown if URL decoding is unsuccessful\n+     */\n+    public byte[] decode(byte[] pArray) throws DecoderException {\n+        return urldecode(pArray);\n+    }\n+\n+\n+    /**\n+     * Converts a string into its URL safe form using the specified\n+     * character set. Unsafe characters are escaped.\n+     *\n+     * @param pString string to convert to a URL safe form\n+     * @return URL safe string\n+     * @throws EncoderException Thrown if URL encoding is unsuccessful\n+     * @throws UnsupportedEncodingException Thrown if charset is not\n+     *                                      supported \n+     */\n+    public String encode(String pString, String charset) \n+        throws EncoderException, UnsupportedEncodingException  \n+    {\n+        if (pString == null) {\n+            return null;\n+        }\n+        return new String(encode(pString.getBytes(charset)), \"US-ASCII\");\n+    }\n+\n+\n+    /**\n+     * Converts a string into its URL safe form. Unsafe characters are \n+     * escaped.\n+     *\n+     * @param pString string to convert to a URL safe form\n+     * @return URL safe string\n+     * @throws EncoderException Thrown if URL encoding is unsuccessful\n+     */\n+    public String encode(String pString) throws EncoderException {\n+        if (pString == null) {\n+            return null;\n+        }\n+        try {\n+            return new String(encode(pString.getBytes()), \"US-ASCII\");\n+        } catch(UnsupportedEncodingException e) {\n+            throw new EncoderException(e.getMessage());\n+        }\n+    }\n+\n+\n+    /**\n+     * Converts a URL safe string into its original form using the \n+     * specified character set. Escaped characters are converted back \n+     * to their original representation.\n+     *\n+     * @param pString URL safe string to convert into its original form\n+     * @return original string \n+     * @throws DecoderException Thrown if URL decoding is unsuccessful\n+     * @throws UnsupportedEncodingException Thrown if charset is not\n+     *                                      supported \n+     */\n+    public String decode(String pString, String charset) \n+        throws DecoderException, UnsupportedEncodingException \n+    {\n+        if (pString == null) {\n+            return null;\n+        }\n+        return new String(decode(pString.getBytes(\"US-ASCII\")), charset);\n+    }\n+\n+\n+    /**\n+     * Converts a URL safe string into its original form. Escaped \n+     * characters are converted back to their original representation.\n+     *\n+     * @param pString URL safe string to convert into its original form\n+     * @return original string \n+     * @throws DecoderException Thrown if URL decoding is unsuccessful\n+     */\n+    public String decode(String pString) throws DecoderException {\n+        if (pString == null) {\n+            return null;\n+        }\n+        try {\n+            return new String(decode(pString.getBytes(\"US-ASCII\")));\n+        } catch(UnsupportedEncodingException e) {\n+            throw new DecoderException(e.getMessage());\n+        }\n+    }\n+\n+\n+    /**\n+     * Converts an object into its URL safe form. Unsafe characters are \n+     * escaped.\n+     *\n+     * @param pObject string to convert to a URL safe form\n+     * @return URL safe object\n+     * @throws EncoderException Thrown if URL encoding is not \n+     *                          applicable to objects of this type or\n+     *                          if encoding is unsuccessful\n+     */\n+    public Object encode(Object pObject) throws EncoderException {\n+        if (pObject == null) {\n+            return null;\n+        } else if (pObject instanceof byte[]) {\n+            return encode((byte[])pObject);\n+        } else if (pObject instanceof String) {\n+            return encode((String)pObject);\n+        } else {\n+            throw new EncoderException(\"Objects of type \" +\n+                pObject.getClass().getName() + \" cannot be URL encoded\"); \n+              \n+        }\n+    }\n+\n+    /**\n+     * Converts a URL safe object into its original form. Escaped \n+     * characters are converted back to their original representation.\n+     *\n+     * @param pObject URL safe object to convert into its original form\n+     * @return original object \n+     * @throws DecoderException Thrown if URL decoding is not \n+     *                          applicable to objects of this type\n+     *                          if decoding is unsuccessful\n+     */\n+    public Object decode(Object pObject) throws DecoderException {\n+        if (pObject == null) {\n+            return null;\n+        } else if (pObject instanceof byte[]) {\n+            return decode((byte[])pObject);\n+        } else if (pObject instanceof String) {\n+            return decode((String)pObject);\n+        } else {\n+            throw new DecoderException(\"Objects of type \" +\n+                pObject.getClass().getName() + \" cannot be URL decoded\"); \n+              \n+        }\n+    }\n+}", "timestamp": 1057942408, "metainfo": ""}