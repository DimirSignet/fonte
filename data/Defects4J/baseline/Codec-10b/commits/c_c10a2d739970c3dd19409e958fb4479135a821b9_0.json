{"sha": "c10a2d739970c3dd19409e958fb4479135a821b9", "log": "PR: [Codec][Patch] RFC 1522 codecs: Q-codec & B-codec http://issues.apache.org/bugzilla/show_bug.cgi?id=28002 Submitted by:\tOleg Kalnichevski Reviewed by:\tGary Gregory   ", "commit": "\n--- a/src/test/org/apache/commons/codec/net/BCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/BCodecTest.java\n         return buffer.toString();\n     }\n \n+    public void testNullInput() throws Exception {\n+        BCodec bcodec = new BCodec();\n+        assertNull(bcodec.doDecoding(null));\n+        assertNull(bcodec.doEncoding(null));\n+    }\n+\n     public void testUTF8RoundTrip() throws Exception {\n \n         String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);\n         BCodec bcodec = new BCodec();\n         assertNull(\"Null string B encoding test\", bcodec.encode((String) null));\n         assertNull(\"Null string B decoding test\", bcodec.decode((String) null));\n-    }\n-\n-    public void testDecodeInvalid() throws Exception {\n-        BCodec bcodec = new BCodec();\n-        try {\n-            bcodec.decode(\"whatever\");\n-            fail(\"DecoderException should have been thrown\");\n-        } catch (DecoderException e) {\n-            // Expected. Move on\n-        }\n-        try {\n-            bcodec.decode(\"=?UTF-8?B?stuff\");\n-            fail(\"DecoderException should have been thrown\");\n-        } catch (DecoderException e) {\n-            // Expected. Move on\n-        }\n-        try {\n-            bcodec.decode(\"=??B?stuff?=\");\n-            fail(\"DecoderException should have been thrown\");\n-        } catch (DecoderException e) {\n-            // Expected. Move on\n-        }\n-        try {\n-            bcodec.decode(\"=?UTF-8??stuff?=\");\n-            fail(\"DecoderException should have been thrown\");\n-        } catch (DecoderException e) {\n-            // Expected. Move on\n-        }\n-        try {\n-            bcodec.decode(\"=?UTF-8?W?stuff?=\");\n-            fail(\"DecoderException should have been thrown\");\n-        } catch (DecoderException e) {\n-            // Expected. Move on\n-        }\n     }\n \n     public void testEncodeStringWithNull() throws Exception {\n             // Exception expected, test segment passes.\n         }\n         try {\n-            bcodec.decode(\"=?NONSENSE?Q?Hello there!?=\");\n+            bcodec.decode(\"=?NONSENSE?B?Hello there!?=\");\n             fail(\"We set the encoding to a bogus NONSENSE value, this shouldn't have worked.\");\n         } catch (DecoderException ee) {\n             // Exception expected, test segment passes.\n--- a/src/test/org/apache/commons/codec/net/QCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/QCodecTest.java\n         return buffer.toString();\n     }\n \n+    public void testNullInput() throws Exception {\n+        QCodec qcodec = new QCodec();\n+        assertNull(qcodec.doDecoding(null));\n+        assertNull(qcodec.doEncoding(null));\n+    }\n+\n     public void testUTF8RoundTrip() throws Exception {\n \n         String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n             qcodec.encode((String)null));\n         assertNull(\"Null string Q decoding test\", \n             qcodec.decode((String)null));\n-    }\n-\n-    public void testDecodeInvalid() throws Exception {\n-        QCodec qcodec = new QCodec();\n-        try {\n-            qcodec.decode(\"whatever\");\n-            fail(\"DecoderException should have been thrown\");\n-        } catch(DecoderException e) {\n-            // Expected. Move on\n-        }\n-        try {\n-            qcodec.decode(\"=?UTF-8?Q?stuff\");\n-            fail(\"DecoderException should have been thrown\");\n-        } catch(DecoderException e) {\n-            // Expected. Move on\n-        }\n-        try {\n-            qcodec.decode(\"=??Q?stuff?=\");\n-            fail(\"DecoderException should have been thrown\");\n-        } catch(DecoderException e) {\n-            // Expected. Move on\n-        }\n-        try {\n-            qcodec.decode(\"=?UTF-8??stuff?=\");\n-            fail(\"DecoderException should have been thrown\");\n-        } catch(DecoderException e) {\n-            // Expected. Move on\n-        }\n-        try {\n-            qcodec.decode(\"=?UTF-8?W?stuff?=\");\n-            fail(\"DecoderException should have been thrown\");\n-        } catch(DecoderException e) {\n-            // Expected. Move on\n-        }\n     }\n \n     public void testEncodeStringWithNull() throws Exception {\n         s = qcodec.decode(encoded2);\n         assertEquals(\"Blanks decoding with the Q codec test\", plain, s);\n     }\n+\n+\n+    public void testLetUsMakeCloverHappy() throws Exception {\n+        QCodec qcodec = new QCodec();\n+        qcodec.setEncodeBlanks(true);\n+        assertTrue(qcodec.isEncodeBlanks());\n+        qcodec.setEncodeBlanks(false);\n+        assertFalse(qcodec.isEncodeBlanks());\n+    }\n+\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/net/RFC1522CodecTest.java\n+/*\n+ * Copyright 2001-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */ \n+\n+\n+package org.apache.commons.codec.net;\n+\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.EncoderException;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * RFC 1522 compliant codec test cases\n+ * \n+ * @author <a href=\"mailto:oleg@ural.ru\">Oleg Kalnichevski</a>\n+ */\n+public class RFC1522CodecTest extends TestCase {\n+    \n+    public RFC1522CodecTest(String name) {\n+        super(name);\n+    }\n+\n+\n+    class RFC1522TestCodec extends RFC1522Codec { \n+\n+        protected byte[] doDecoding(byte[] bytes) throws DecoderException {\n+            return bytes;\n+        }\n+\n+        protected byte[] doEncoding(byte[] bytes) throws EncoderException {\n+            return bytes;\n+        }\n+\n+        protected String getEncoding() {\n+            return \"T\";\n+        }\n+\n+    }\n+\n+    public void testNullInput() throws Exception {\n+        RFC1522TestCodec testcodec = new RFC1522TestCodec();\n+        assertNull(testcodec.decodeText(null));\n+        assertNull(testcodec.encodeText(null, \"UTF-8\"));\n+    }\n+\n+    public void testDecodeInvalid() throws Exception {\n+        RFC1522TestCodec testcodec = new RFC1522TestCodec();\n+        try {\n+            testcodec.decodeText(\"whatever\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch(DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            testcodec.decodeText(\"=?stuff?=\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch(DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            testcodec.decodeText(\"=?UTF-8?stuff?=\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch(DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            testcodec.decodeText(\"=?UTF-8?T?stuff\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch(DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            testcodec.decodeText(\"=??T?stuff?=\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch(DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            testcodec.decodeText(\"=?UTF-8??stuff?=\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch(DecoderException e) {\n+            // Expected. Move on\n+        }\n+        try {\n+            testcodec.decodeText(\"=?UTF-8?W?stuff?=\");\n+            fail(\"DecoderException should have been thrown\");\n+        } catch(DecoderException e) {\n+            // Expected. Move on\n+        }\n+    }\n+\n+}", "timestamp": 1081546826, "metainfo": ""}