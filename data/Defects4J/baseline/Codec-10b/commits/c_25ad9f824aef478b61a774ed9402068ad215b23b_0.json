{"sha": "25ad9f824aef478b61a774ed9402068ad215b23b", "log": "[CODEC-73] DigestUtils: Make string2byte conversions indepedent of platform default encoding.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/java/org/apache/commons/codec/digest/DigestUtils.java\n import java.security.NoSuchAlgorithmException;\n \n import org.apache.commons.codec.binary.Hex;\n+import org.apache.commons.codec.binary.StringUtils;\n \n /**\n  * Operations to simplifiy common {@link java.security.MessageDigest} tasks. This class is thread safe.\n     /**\n      * Read through an InputStream and returns the digest for the data\n      * \n-     * @param digest The MessageDigest to use (e.g. MD5)\n-     * @param data Data to digest\n+     * @param digest\n+     *            The MessageDigest to use (e.g. MD5)\n+     * @param data\n+     *            Data to digest\n      * @return MD5 digest\n-     * @throws IOException On error reading from the stream\n+     * @throws IOException\n+     *             On error reading from the stream\n      */\n     private static byte[] digest(MessageDigest digest, InputStream data) throws IOException {\n         byte[] buffer = new byte[STREAM_BUFFER_LENGTH];\n         int read = data.read(buffer, 0, STREAM_BUFFER_LENGTH);\n-        \n-        while(read > -1) {\n+\n+        while (read > -1) {\n             digest.update(buffer, 0, read);\n             read = data.read(buffer, 0, STREAM_BUFFER_LENGTH);\n         }\n-        \n+\n         return digest.digest();\n+    }\n+\n+    /**\n+     * Calls {@link StringUtils#getBytesUtf8(String)}\n+     * \n+     * @param string\n+     *            the String to encode\n+     * @return encoded bytes\n+     */\n+    private static byte[] getBytesUtf8(String data) {\n+        return StringUtils.getBytesUtf8(data);\n     }\n \n     /**\n     private static MessageDigest getShaDigest() {\n         return getDigest(\"SHA\");\n     }\n-    \n+\n     /**\n      * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n      * \n      * @param data\n      *            Data to digest\n      * @return MD5 digest\n-     * @throws IOException On error reading from the stream\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static byte[] md5(InputStream data) throws IOException {\n      * @return MD5 digest\n      */\n     public static byte[] md5(String data) {\n-        return md5(data.getBytes());\n+        return md5(getBytesUtf8(data));\n     }\n \n     /**\n      * @param data\n      *            Data to digest\n      * @return MD5 digest as a hex string\n-     * @throws IOException On error reading from the stream\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static String md5Hex(InputStream data) throws IOException {\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest\n-     * @throws IOException On error reading from the stream\n+     * @throws IOException\n+     *             On error reading from the stream\n      */\n     public static byte[] sha(InputStream data) throws IOException {\n         return digest(getShaDigest(), data);\n      * @return SHA-1 digest\n      */\n     public static byte[] sha(String data) {\n-        return sha(data.getBytes());\n+        return sha(getBytesUtf8(data));\n     }\n \n     /**\n      * @param data\n      *            Data to digest\n      * @return SHA-256 digest\n-     * @throws IOException On error reading from the stream\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static byte[] sha256(InputStream data) throws IOException {\n      * @since 1.4\n      */\n     public static byte[] sha256(String data) {\n-        return sha256(data.getBytes());\n+        return sha256(getBytesUtf8(data));\n     }\n \n     /**\n      * @param data\n      *            Data to digest\n      * @return SHA-256 digest as a hex string\n-     * @throws IOException On error reading from the stream\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static String sha256Hex(InputStream data) throws IOException {\n      * @param data\n      *            Data to digest\n      * @return SHA-384 digest\n-     * @throws IOException On error reading from the stream\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static byte[] sha384(InputStream data) throws IOException {\n         return digest(getSha384Digest(), data);\n     }\n-    \n+\n     /**\n      * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n      * <p>\n      * @since 1.4\n      */\n     public static byte[] sha384(String data) {\n-        return sha384(data.getBytes());\n+        return sha384(getBytesUtf8(data));\n     }\n \n     /**\n      * @param data\n      *            Data to digest\n      * @return SHA-384 digest as a hex string\n-     * @throws IOException On error reading from the stream\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static String sha384Hex(InputStream data) throws IOException {\n      * @param data\n      *            Data to digest\n      * @return SHA-512 digest\n-     * @throws IOException On error reading from the stream\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static byte[] sha512(InputStream data) throws IOException {\n      * @since 1.4\n      */\n     public static byte[] sha512(String data) {\n-        return sha512(data.getBytes());\n+        return sha512(getBytesUtf8(data));\n     }\n \n     /**\n      * @param data\n      *            Data to digest\n      * @return SHA-512 digest as a hex string\n-     * @throws IOException On error reading from the stream\n+     * @throws IOException\n+     *             On error reading from the stream\n      * @since 1.4\n      */\n     public static String sha512Hex(InputStream data) throws IOException {\n      * @param data\n      *            Data to digest\n      * @return SHA-1 digest as a hex string\n-     * @throws IOException On error reading from the stream\n+     * @throws IOException\n+     *             On error reading from the stream\n      */\n     public static String shaHex(InputStream data) throws IOException {\n         return new String(Hex.encodeHex(sha(data)));\n--- a/src/test/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/org/apache/commons/codec/digest/DigestUtilsTest.java\n import java.io.IOException;\n import java.util.Random;\n \n+import org.apache.commons.codec.binary.StringUtils;\n+\n import junit.framework.TestCase;\n \n /**\n \n     private byte[] testData = new byte[1024*1024];\n     \n+    private byte[] getBytesUtf8(String hashMe) {\n+        return StringUtils.getBytesUtf8(hashMe);\n+    }\n+\n     /* (non-Javadoc)\n      * @see junit.framework.TestCase#setUp()\n      */\n         new Random().nextBytes(testData);\n     }\n \n+    public void testConstructable() {\n+        new DigestUtils();\n+    }\n+    \n     public void testInternalNoSuchAlgorithmException() {\n         try {\n             DigestUtils.getDigest(\"Bogus Bogus\");\n         assertEquals(DigestUtils.md5Hex(testData),\n                 DigestUtils.md5Hex(new ByteArrayInputStream(testData)));\n     }\n-    \n+\n     /**\n      * An MD5 hash converted to hex should always be 32 characters.\n      */\n     public void testMD5HexLength() {\n         String hashMe = \"this is some string that is longer than 32 characters\";\n-        String hash = DigestUtils.md5Hex(hashMe.getBytes());\n+        String hash = DigestUtils.md5Hex(getBytesUtf8(hashMe));\n         assertEquals(32, hash.length());\n \n         hashMe = \"length < 32\";\n-        hash = DigestUtils.md5Hex(hashMe.getBytes());\n+        hash = DigestUtils.md5Hex(getBytesUtf8(hashMe));\n         assertEquals(32, hash.length());\n     }\n \n      */\n     public void testMD5Length() {\n         String hashMe = \"this is some string that is longer than 16 characters\";\n-        byte[] hash = DigestUtils.md5(hashMe.getBytes());\n+        byte[] hash = DigestUtils.md5(getBytesUtf8(hashMe));\n         assertEquals(16, hash.length);\n \n         hashMe = \"length < 16\";\n-        hash = DigestUtils.md5(hashMe.getBytes());\n+        hash = DigestUtils.md5(getBytesUtf8(hashMe));\n         assertEquals(16, hash.length);\n     }\n \n     assertEquals(\"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\",\n              DigestUtils.sha256Hex(\"abc\"));\n     assertEquals(\"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\",\n-             DigestUtils.sha256Hex(\"abc\".getBytes()));\n+             DigestUtils.sha256Hex(getBytesUtf8(\"abc\")));\n     assertEquals(\"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1\",\n              DigestUtils.sha256Hex(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\"));\n     \n     assertEquals(DigestUtils.sha256Hex(testData),\n             DigestUtils.sha256Hex(new ByteArrayInputStream(testData)));\n-    }\n+    }    \n \n     public void testSha384() throws IOException {\n     // Examples from FIPS 180-2\n              DigestUtils.sha384Hex(\"abc\"));\n     assertEquals(\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\" + \n              \"8086072ba1e7cc2358baeca134c825a7\",\n-             DigestUtils.sha384Hex(\"abc\".getBytes()));\n+             DigestUtils.sha384Hex(getBytesUtf8(\"abc\")));\n     assertEquals(\"09330c33f71147e83d192fc782cd1b4753111b173b3b05d22fa08086e3b0f712\" +\n             \"fcc7c71a557e2db966c3e9fa91746039\",\n              DigestUtils.sha384Hex(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\" +\n                        \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n     assertEquals(DigestUtils.sha384Hex(testData),\n             DigestUtils.sha384Hex(new ByteArrayInputStream(testData)));\n-    }    \n+    }\n \n     public void testSha512() throws IOException {\n     // Examples from FIPS 180-2\n              DigestUtils.sha512Hex(\"abc\"));\n     assertEquals(\"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\" +\n              \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\",\n-             DigestUtils.sha512Hex(\"abc\".getBytes()));\n+             DigestUtils.sha512Hex(getBytesUtf8(\"abc\")));\n     assertEquals(\"8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018\" + \n              \"501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909\",\n              DigestUtils.sha512Hex(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\" + \n                        \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n     assertEquals(DigestUtils.sha512Hex(testData),\n             DigestUtils.sha512Hex(new ByteArrayInputStream(testData)));\n-}\n+}    \n \n     public void testShaHex() throws IOException {\n         // Examples from FIPS 180-1\n         assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.shaHex(\"abc\"));\n \n-        assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.shaHex(\"abc\".getBytes()));\n+        assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.shaHex(getBytesUtf8(\"abc\")));\n \n         assertEquals(\n             \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\",\n         assertEquals(DigestUtils.shaHex(testData),\n                 DigestUtils.shaHex(new ByteArrayInputStream(testData)));\n \n-    }    \n-\n-    public void testConstructable() {\n-        new DigestUtils();\n     }\n }", "timestamp": 1249291928, "metainfo": ""}