{"sha": "02a1e84c122137ab0ad9a7ffde9525f4822c5c3c", "log": "Use constants instead of literals.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/net/RFC1522Codec.java\n+++ b/src/java/org/apache/commons/codec/net/RFC1522Codec.java\n abstract class RFC1522Codec {\n     \n     /**\n+     * Separator.\n+     */\n+    protected static final char SEP = '?';\n+\n+    /**\n+     * Prefix\n+     */\n+    protected static final String POSTFIX = \"?=\";\n+\n+    /**\n+     * Postfix\n+     */\n+    protected static final String PREFIX = \"=?\";\n+\n+    /**\n      * Applies an RFC 1522 compliant encoding scheme to the given string of text with the \n      * given charset. This method constructs the \"encoded-word\" header common to all the \n      * RFC 1522 codecs and then invokes {@link #doEncoding(byte [])} method of a concrete \n             return null;\n         }\n         StringBuffer buffer = new StringBuffer();\n-        buffer.append(\"=?\"); \n-        buffer.append(charset); \n-        buffer.append('?'); \n-        buffer.append(getEncoding()); \n-        buffer.append('?');\n+        buffer.append(PREFIX); \n+        buffer.append(charset);\n+        buffer.append(SEP);\n+        buffer.append(getEncoding());\n+        buffer.append(SEP);\n         byte [] rawdata = doEncoding(text.getBytes(charset)); \n         buffer.append(StringUtils.newStringUsAscii(rawdata));\n-        buffer.append(\"?=\"); \n+        buffer.append(POSTFIX); \n         return buffer.toString();\n     }\n     \n         if (text == null) {\n             return null;\n         }\n-        if ((!text.startsWith(\"=?\")) || (!text.endsWith(\"?=\"))) {\n+        if ((!text.startsWith(PREFIX)) || (!text.endsWith(POSTFIX))) {\n             throw new DecoderException(\"RFC 1522 violation: malformed encoded content\");\n         }\n         int termnator = text.length() - 2;\n         int from = 2;\n-        int to = text.indexOf(\"?\", from);\n+        int to = text.indexOf(SEP, from);\n         if ((to == -1) || (to == termnator)) {\n             throw new DecoderException(\"RFC 1522 violation: charset token not found\");\n         }\n             throw new DecoderException(\"RFC 1522 violation: charset not specified\");\n         }\n         from = to + 1;\n-        to = text.indexOf(\"?\", from);\n+        to = text.indexOf(SEP, from);\n         if ((to == -1) || (to == termnator)) {\n             throw new DecoderException(\"RFC 1522 violation: encoding token not found\");\n         }\n                 encoding + \" encoded content\");\n         }\n         from = to + 1;\n-        to = text.indexOf(\"?\", from);\n+        to = text.indexOf(SEP, from);\n         byte[] data = StringUtils.getBytesUsAscii(text.substring(from, to));\n         data = doDecoding(data); \n         return new String(data, charset);", "timestamp": 1248764235, "metainfo": ""}