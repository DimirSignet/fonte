{"sha": "f095ceb27daa38033f1e8368c90668403a4fb520", "log": "Soundex.setMaxLength causes bugs and is not needed. http://issues.apache.org/bugzilla/show_bug.cgi?id=24484   ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/java/org/apache/commons/codec/language/Soundex.java\n  * @author bayard@generationjava.com\n  * @author Tim O'Brien\n  * @author Gary Gregory\n- * @version $Id: Soundex.java,v 1.11 2003/11/06 16:31:47 ggregory Exp $\n+ * @version $Id: Soundex.java,v 1.12 2003/11/07 01:20:19 ggregory Exp $\n  */\n public class Soundex implements StringEncoder {\n \n     public static final Soundex US_ENGLISH = new Soundex();\n \n     /**\n-\t * This is a default mapping of the 26 letters used in US english.\n-     * A value of <code>0</code> for a letter position means do not encode.\n+\t * This is a default mapping of the 26 letters used in US english. A value\n+\t * of <code>0</code> for a letter position means do not encode.\n \t */\n     public static final char[] US_ENGLISH_MAPPING = \"01230120022455012623010202\".toCharArray();\n \n     /**\n \t * The maximum length of a Soundex code - Soundex codes are only four\n \t * characters by definition.\n+     * \n+     * @deprecated This feature is not needed since the encoding size must be constant.\n \t */\n     private int maxLength = 4;\n \n     }\n \n     /**\n-\t * Cleans up the input string before Soundex processing by trimming and\n-\t * removing punctuation characters. The string is returned in upper-case.\n+\t * Cleans up the input string before Soundex processing by only returning\n+\t * upper case letters.\n \t */\n     private String clean(String str) {\n         if (str == null || str.length() == 0) {\n     /**\n \t * Used internally by the SoundEx algorithm.\n \t * \n-\t * Consonants from the same code group separated by W or H are treated as one.\n+\t * Consonants from the same code group separated by W or H are treated as\n+\t * one.\n \t * \n \t * @param str\n-\t *                  the whole string\n+\t *                  the cleaned working string to encode (in upper case).\n \t * @param index\n \t *                  the character position to encode\n \t * @return Mapping code for a particular character\n \t */\n     private char getMappingCode(String str, int index) {\n-        char c = str.charAt(index);\n-        if (!Character.isLetter(c)) {\n-            return 0;\n-        } else {\n-            char mappedChar = this.map(c);\n-            // HW rule check\n-            if (index > 1 && mappedChar != '0') {\n-                char hwChar = str.charAt(index-1);\n-                if ('H' == hwChar || 'W' == hwChar) {\n-                    char preHWChar = str.charAt(index - 2);\n-                    char firstCode = this.map(preHWChar);\n-                    if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {\n-                        return 0;\n-                    }\n-                }              \n+        char mappedChar = this.map(str.charAt(index));\n+        // HW rule check\n+        if (index > 1 && mappedChar != '0') {\n+            char hwChar = str.charAt(index - 1);\n+            if ('H' == hwChar || 'W' == hwChar) {\n+                char preHWChar = str.charAt(index - 2);\n+                char firstCode = this.map(preHWChar);\n+                if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {\n+                    return 0;\n+                }\n             }\n-            return mappedChar;\n-        }\n+        }\n+        return mappedChar;\n     }\n \n     /**\n \t * Returns the maxLength. Standard Soundex\n \t * \n+     * @deprecated This feature is not needed since the encoding size must be constant.\n \t * @return int\n \t */\n     public int getMaxLength() {\n     }\n \n     /**\n-     * Maps the given upper-case character to it's Soudex code.\n-     */\n+\t * Maps the given upper-case character to it's Soudex code.\n+\t */\n     private char map(char c) {\n-       return this.getSoundexMapping()[c - 'A'];\n+        return this.getSoundexMapping()[c - 'A'];\n     }\n \n     /**\n \t * Sets the maxLength.\n \t * \n+     * @deprecated This feature is not needed since the encoding size must be constant.\n \t * @param maxLength\n \t *                  The maxLength to set\n \t */\n         if (str.length() == 0) {\n             return str;\n         }\n-\n         char out[] = { '0', '0', '0', '0' };\n         char last, mapped;\n         int incount = 1, count = 1;\n         out[0] = str.charAt(0);\n         last = getMappingCode(str, 0);\n-        while ((incount < str.length()) && (count < this.getMaxLength())) {\n-            if ((mapped = getMappingCode(str, incount++)) != 0) {\n+        while ((incount < str.length()) && (count < out.length)) {\n+            mapped = getMappingCode(str, incount++);\n+            if (mapped != 0) {\n                 if ((mapped != '0') && (mapped != last)) {\n                     out[count++] = mapped;\n                 }\n--- a/src/test/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/SoundexTest.java\n /**\n  * Tests {@link Soundex}\n  * \n- * @version $Revision: 1.6 $ $Date: 2003/11/06 16:31:47 $\n+ * @version $Revision: 1.7 $ $Date: 2003/11/07 01:21:47 $\n  * @author Rodney Waldhoff\n  * @author Gary Gregory\n  */\n     public void testMaxLength() throws Exception {\n         Soundex soundex = new Soundex();\n         soundex.setMaxLength(soundex.getMaxLength());\n+        assertEquals(\"S460\", this.getEncoder().encode(\"Sgler\"));\n+    }\n+\n+    public void testMaxLengthLessThan3Fix() throws Exception {\n+        Soundex soundex = new Soundex();\n+        soundex.setMaxLength(2);\n+        assertEquals(\"S460\", soundex.encode(\"SCHELLER\"));\n     }\n \n }", "timestamp": 1068168107, "metainfo": ""}