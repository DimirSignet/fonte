{"sha": "5bc006005c55912b9c94b9c8273727a7af45f0f0", "log": "Improve code coverge as reported by clover from ~45% to ~85% with more test data.   ", "commit": "\n--- a/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n+++ b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java\n  * ====================================================================\n  * \n  * The Apache Software License, Version 1.1\n- *\n- * Copyright (c) 2001-2003 The Apache Software Foundation.  All rights\n- * reserved.\n- *\n+ * \n+ * Copyright (c) 2001-2003 The Apache Software Foundation. All rights reserved.\n+ * \n  * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- *\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer. \n- *\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in\n- *    the documentation and/or other materials provided with the\n- *    distribution.\n- *\n- * 3. The end-user documentation included with the redistribution,\n- *    if any, must include the following acknowledgement:  \n- *       \"This product includes software developed by the \n- *        Apache Software Foundation (http://www.apache.org/).\"\n- *    Alternately, this acknowledgement may appear in the software itself,\n- *    if and wherever such third-party acknowledgements normally appear.\n- *\n- * 4. The names \"Apache\", \"The Jakarta Project\", \"Commons\", and \"Apache Software\n- *    Foundation\" must not be used to endorse or promote products derived\n- *    from this software without prior written permission. For written \n- *    permission, please contact apache@apache.org.\n- *\n- * 5. Products derived from this software may not be called \"Apache\",\n- *    \"Apache\" nor may \"Apache\" appear in their name without prior \n- *    written permission of the Apache Software Foundation.\n- *\n- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n- * SUCH DAMAGE.\n+ * modification, are permitted provided that the following conditions are met: 1.\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer. 2. Redistributions in\n+ * binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other\n+ * materials provided with the distribution. 3. The end-user documentation\n+ * included with the redistribution, if any, must include the following\n+ * acknowledgement: \"This product includes software developed by the Apache\n+ * Software Foundation (http://www.apache.org/).\" Alternately, this\n+ * acknowledgement may appear in the software itself, if and wherever such\n+ * third-party acknowledgements normally appear. 4. The names \"Apache\", \"The\n+ * Jakarta Project\", \"Commons\", and \"Apache Software Foundation\" must not be\n+ * used to endorse or promote products derived from this software without prior\n+ * written permission. For written permission, please contact\n+ * apache@apache.org. 5. Products derived from this software may not be called\n+ * \"Apache\", \"Apache\" nor may \"Apache\" appear in their name without prior\n+ * written permission of the Apache Software Foundation.\n+ * \n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,\n+ * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  * ====================================================================\n- *\n- * This software consists of voluntary contributions made by many\n- * individuals on behalf of the Apache Software Foundation.  For more\n- * information on the Apache Software Foundation, please see\n- * <http://www.apache.org/>.\n- *\n- */ \n+ * \n+ * This software consists of voluntary contributions made by many individuals\n+ * on behalf of the Apache Software Foundation. For more information on the\n+ * Apache Software Foundation, please see <http://www.apache.org/> .\n+ *  \n+ */\n \n package org.apache.commons.codec.language;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n-\n+import org.apache.commons.codec.EncoderException;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.StringEncoderAbstractTest;\n \n /**\n- * Testcase for DoubleMetaphone\n+ * Tests {@link DoubleMetaphone}.\n  * \n+ * @see \"http://www.cuj.com/documents/s=8038/cuj0006philips/\"\n  * @author Mindbridge\n+ * @author Gary Gregory\n+ * @version $Id: DoubleMetaphoneTest.java,v 1.4 2003/11/07 21:32:04 ggregory Exp $\n  */\n-public class DoubleMetaphoneTest extends StringEncoderAbstractTest\n-{\n-\n-    public DoubleMetaphoneTest(String name)\n-    {\n+public class DoubleMetaphoneTest extends StringEncoderAbstractTest {\n+\n+    /**\n+\t * Test data from http://aspell.sourceforge.net/test/batch0.tab.\n+\t * \n+\t * \"Copyright (C) 2002 Kevin Atkinson (kevina@gnu.org). Verbatim copying\n+\t * and distribution of this entire article is permitted in any medium,\n+\t * provided this notice is preserved.\"\n+     * \n+     * Massaged the test data in the array below.\n+\t */\n+    private static final String[][] FIXTURE = { { \"Accosinly\", \"Occasionally\" }, {\n+            \"Ciculer\", \"Circler\" }, {\n+            \"Circue\", \"Circle\" }, {\n+            \"Maddness\", \"Madness\" }, {\n+            \"Occusionaly\", \"Occasionally\" }, {\n+            \"Steffen\", \"Stephen\" }, {\n+            \"Thw\", \"The\" }, {\n+            \"Unformanlly\", \"Unfortunately\" }, {\n+            \"Unfortally\", \"Unfortunately\" }, {\n+            \"abilitey\", \"ability\" }, {\n+            \"abouy\", \"about\" }, {\n+            \"absorbtion\", \"absorption\" }, {\n+            \"accidently\", \"accidentally\" }, {\n+            \"accomodate\", \"accommodate\" }, {\n+            \"acommadate\", \"accommodate\" }, {\n+            \"acord\", \"accord\" }, {\n+            \"adultry\", \"adultery\" }, {\n+            \"aggresive\", \"aggressive\" }, {\n+            \"alchohol\", \"alcohol\" }, {\n+            \"alchoholic\", \"alcoholic\" }, {\n+            \"allieve\", \"alive\" }, {\n+            \"alot\", \"a lot\" }, {\n+            \"alright\", \"all right\" }, {\n+            \"amature\", \"amateur\" }, {\n+            \"ambivilant\", \"ambivalent\" }, {\n+            \"amification\", \"amplification\" }, {\n+            \"amourfous\", \"amorphous\" }, {\n+            \"annoint\", \"anoint\" }, {\n+            \"annonsment\", \"announcement\" }, {\n+            \"annoyting\", \"anting\" }, {\n+            \"annuncio\", \"announce\" }, {\n+            \"anonomy\", \"anatomy\" }, {\n+            \"anotomy\", \"anatomy\" }, {\n+            \"antidesestablishmentarianism\", \"antidisestablishmentarianism\" }, {\n+            \"antidisestablishmentarism\", \"antidisestablishmentarianism\" }, {\n+            \"anynomous\", \"anonymous\" }, {\n+            \"appelet\", \"applet\" }, {\n+            \"appreceiated\", \"appreciated\" }, {\n+            \"appresteate\", \"appreciate\" }, {\n+            \"aquantance\", \"acquaintance\" }, {\n+            \"aratictature\", \"architecture\" }, {\n+            \"archeype\", \"archetype\" }, {\n+            \"aricticure\", \"architecture\" }, {\n+            \"artic\", \"arctic\" }, {\n+            \"asentote\", \"asymptote\" }, {\n+            \"ast\", \"at\" }, {\n+            \"asterick\", \"asterisk\" }, {\n+            \"asymetric\", \"asymmetric\" }, {\n+            \"atentively\", \"attentively\" }, {\n+            \"autoamlly\", \"automatically\" }, {\n+            \"bankrot\", \"bankrupt\" }, {\n+            \"basicly\", \"basically\" }, {\n+            \"batallion\", \"battalion\" }, {\n+            \"bbrose\", \"browse\" }, {\n+            \"beauro\", \"bureau\" }, {\n+            \"beaurocracy\", \"bureaucracy\" }, {\n+            \"beggining\", \"beginning\" }, {\n+            \"beging\", \"beginning\" }, {\n+            \"behaviour\", \"behavior\" }, {\n+            \"beleive\", \"believe\" }, {\n+            \"belive\", \"believe\" }, {\n+            \"benidifs\", \"benefits\" }, {\n+            \"bigginging\", \"beginning\" }, {\n+            \"blait\", \"bleat\" }, {\n+            \"bouyant\", \"buoyant\" }, {\n+            \"boygot\", \"boycott\" }, {\n+            \"brocolli\", \"broccoli\" }, {\n+            \"buch\", \"bush\" }, {\n+            \"buder\", \"butter\" }, {\n+            \"budr\", \"butter\" }, {\n+            \"budter\", \"butter\" }, {\n+            \"buracracy\", \"bureaucracy\" }, {\n+            \"burracracy\", \"bureaucracy\" }, {\n+            \"buton\", \"button\" }, {\n+            \"byby\", \"by by\" }, {\n+            \"cauler\", \"caller\" }, {\n+            \"ceasar\", \"caesar\" }, {\n+            \"cemetary\", \"cemetery\" }, {\n+            \"changeing\", \"changing\" }, {\n+            \"cheet\", \"cheat\" }, {\n+            \"cicle\", \"circle\" }, {\n+            \"cimplicity\", \"simplicity\" }, {\n+            \"circumstaces\", \"circumstances\" }, {\n+            \"clob\", \"club\" }, {\n+            \"coaln\", \"colon\" }, {\n+            \"cocamena\", \"cockamamie\" }, {\n+            \"colleaque\", \"colleague\" }, {\n+            \"colloquilism\", \"colloquialism\" }, {\n+            \"columne\", \"column\" }, {\n+            \"comiler\", \"compiler\" }, {\n+            \"comitmment\", \"commitment\" }, {\n+            \"comitte\", \"committee\" }, {\n+            \"comittmen\", \"commitment\" }, {\n+            \"comittmend\", \"commitment\" }, {\n+            \"commerciasl\", \"commercials\" }, {\n+            \"commited\", \"committed\" }, {\n+            \"commitee\", \"committee\" }, {\n+            \"companys\", \"companies\" }, {\n+            \"compicated\", \"complicated\" }, {\n+            \"comupter\", \"computer\" }, {\n+            \"concensus\", \"consensus\" }, {\n+            \"confusionism\", \"confucianism\" }, {\n+            \"congradulations\", \"congratulations\" }, {\n+            \"conibation\", \"contribution\" }, {\n+            \"consident\", \"consistent\" }, {\n+            \"consident\", \"consonant\" }, {\n+            \"contast\", \"constant\" }, {\n+            \"contastant\", \"constant\" }, {\n+            \"contunie\", \"continue\" }, {\n+            \"cooly\", \"coolly\" }, {\n+            \"copping\", \"coping\" }, {\n+            \"cosmoplyton\", \"cosmopolitan\" }, {\n+            \"courst\", \"court\" }, {\n+            \"crasy\", \"crazy\" }, {\n+            \"cravets\", \"caveats\" }, {\n+            \"credetability\", \"credibility\" }, {\n+            \"criqitue\", \"critique\" }, {\n+            \"croke\", \"croak\" }, {\n+            \"crucifiction\", \"crucifixion\" }, {\n+            \"crusifed\", \"crucified\" }, {\n+            \"ctitique\", \"critique\" }, {\n+            \"cumba\", \"combo\" }, {\n+            \"custamisation\", \"customization\" }, {\n+            \"dag\", \"dog\" }, {\n+            \"daly\", \"daily\" }, {\n+            \"danguages\", \"dangerous\" }, {\n+            \"deaft\", \"draft\" }, {\n+            \"defence\", \"defense\" }, {\n+            \"defenly\", \"defiantly\" }, {\n+            \"definate\", \"definite\" }, {\n+            \"definately\", \"definitely\" }, {\n+            \"dependeble\", \"dependable\" }, {\n+            \"descrption\", \"description\" }, {\n+            \"descrptn\", \"description\" }, {\n+            \"desparate\", \"desperate\" }, {\n+            \"dessicate\", \"desiccate\" }, {\n+            \"destint\", \"distant\" }, {\n+            \"develepment\", \"developments\" }, {\n+            \"developement\", \"development\" }, {\n+            \"develpond\", \"development\" }, {\n+            \"devulge\", \"divulge\" }, {\n+            \"diagree\", \"disagree\" }, {\n+            \"dieties\", \"deities\" }, {\n+            \"dinasaur\", \"dinosaur\" }, {\n+            \"dinasour\", \"dinosaur\" }, {\n+            \"direcyly\", \"directly\" }, {\n+            \"discuess\", \"discuss\" }, {\n+            \"disect\", \"dissect\" }, {\n+            \"disippate\", \"dissipate\" }, {\n+            \"disition\", \"decision\" }, {\n+            \"dispair\", \"despair\" }, {\n+            \"disssicion\", \"discussion\" }, {\n+            \"distarct\", \"distract\" }, {\n+            \"distart\", \"distort\" }, {\n+            \"distroy\", \"destroy\" }, {\n+            \"documtations\", \"documentation\" }, {\n+            \"doenload\", \"download\" }, {\n+            \"dongle\", \"dangle\" }, {\n+            \"doog\", \"dog\" }, {\n+            \"dramaticly\", \"dramatically\" }, {\n+            \"drunkeness\", \"drunkenness\" }, {\n+            \"ductioneery\", \"dictionary\" }, {\n+            \"dur\", \"due\" }, {\n+            \"duren\", \"during\" }, {\n+            \"dymatic\", \"dynamic\" }, {\n+            \"dynaic\", \"dynamic\" }, {\n+            \"ecstacy\", \"ecstasy\" }, {\n+            \"efficat\", \"efficient\" }, {\n+            \"efficity\", \"efficacy\" }, {\n+            \"effots\", \"efforts\" }, {\n+            \"egsistence\", \"existence\" }, {\n+            \"eitiology\", \"etiology\" }, {\n+            \"elagent\", \"elegant\" }, {\n+            \"elligit\", \"elegant\" }, {\n+            \"embarass\", \"embarrass\" }, {\n+            \"embarassment\", \"embarrassment\" }, {\n+            \"embaress\", \"embarrass\" }, {\n+            \"encapsualtion\", \"encapsulation\" }, {\n+            \"encyclapidia\", \"encyclopedia\" }, {\n+            \"encyclopia\", \"encyclopedia\" }, {\n+            \"engins\", \"engine\" }, {\n+            \"enhence\", \"enhance\" }, {\n+            \"enligtment\", \"Enlightenment\" }, {\n+            \"ennuui\", \"ennui\" }, {\n+            \"enought\", \"enough\" }, {\n+            \"enventions\", \"inventions\" }, {\n+            \"envireminakl\", \"environmental\" }, {\n+            \"enviroment\", \"environment\" }, {\n+            \"epitomy\", \"epitome\" }, {\n+            \"equire\", \"acquire\" }, {\n+            \"errara\", \"error\" }, {\n+            \"erro\", \"error\" }, {\n+            \"evaualtion\", \"evaluation\" }, {\n+            \"evething\", \"everything\" }, {\n+            \"evtually\", \"eventually\" }, {\n+            \"excede\", \"exceed\" }, {\n+            \"excercise\", \"exercise\" }, {\n+            \"excpt\", \"except\" }, {\n+            \"excution\", \"execution\" }, {\n+            \"exhileration\", \"exhilaration\" }, {\n+            \"existance\", \"existence\" }, {\n+            \"expleyly\", \"explicitly\" }, {\n+            \"explity\", \"explicitly\" }, {\n+            \"expresso\", \"espresso\" }, {\n+            \"exspidient\", \"expedient\" }, {\n+            \"extions\", \"extensions\" }, {\n+            \"factontion\", \"factorization\" }, {\n+            \"failer\", \"failure\" }, {\n+            \"famdasy\", \"fantasy\" }, {\n+            \"faver\", \"favor\" }, {\n+            \"faxe\", \"fax\" }, {\n+            \"febuary\", \"february\" }, {\n+            \"firey\", \"fiery\" }, {\n+            \"fistival\", \"festival\" }, {\n+            \"flatterring\", \"flattering\" }, {\n+            \"fluk\", \"flux\" }, {\n+            \"flukse\", \"flux\" }, {\n+            \"fone\", \"phone\" }, {\n+            \"forsee\", \"foresee\" }, {\n+            \"frustartaion\", \"frustrating\" }, {\n+            \"fuction\", \"function\" }, {\n+            \"funetik\", \"phonetic\" }, {\n+            \"futs\", \"guts\" }, {\n+            \"gamne\", \"came\" }, {\n+            \"gaurd\", \"guard\" }, {\n+            \"generly\", \"generally\" }, {\n+            \"ghandi\", \"gandhi\" }, {\n+            \"goberment\", \"government\" }, {\n+            \"gobernement\", \"government\" }, {\n+            \"gobernment\", \"government\" }, {\n+            \"gotton\", \"gotten\" }, {\n+            \"gracefull\", \"graceful\" }, {\n+            \"gradualy\", \"gradually\" }, {\n+            \"grammer\", \"grammar\" }, {\n+            \"hallo\", \"hello\" }, {\n+            \"hapily\", \"happily\" }, {\n+            \"harrass\", \"harass\" }, {\n+            \"havne\", \"have\" }, {\n+            \"heellp\", \"help\" }, {\n+            \"heighth\", \"height\" }, {\n+            \"hellp\", \"help\" }, {\n+            \"helo\", \"hello\" }, {\n+            \"herlo\", \"hello\" }, {\n+            \"hifin\", \"hyphen\" }, {\n+            \"hifine\", \"hyphen\" }, {\n+            \"higer\", \"higher\" }, {\n+            \"hiphine\", \"hyphen\" }, {\n+            \"hippie\", \"hippy\" }, {\n+            \"hippopotamous\", \"hippopotamus\" }, {\n+            \"hlp\", \"help\" }, {\n+            \"hourse\", \"horse\" }, {\n+            \"houssing\", \"housing\" }, {\n+            \"howaver\", \"however\" }, {\n+            \"howver\", \"however\" }, {\n+            \"humaniti\", \"humanity\" }, {\n+            \"hyfin\", \"hyphen\" }, {\n+            \"hypotathes\", \"hypothesis\" }, {\n+            \"hypotathese\", \"hypothesis\" }, {\n+            \"hystrical\", \"hysterical\" }, {\n+            \"ident\", \"indent\" }, {\n+            \"illegitament\", \"illegitimate\" }, {\n+            \"imbed\", \"embed\" }, {\n+            \"imediaetly\", \"immediately\" }, {\n+            \"imfamy\", \"infamy\" }, {\n+            \"immenant\", \"immanent\" }, {\n+            \"implemtes\", \"implements\" }, {\n+            \"inadvertant\", \"inadvertent\" }, {\n+            \"incase\", \"in case\" }, {\n+            \"incedious\", \"insidious\" }, {\n+            \"incompleet\", \"incomplete\" }, {\n+            \"incomplot\", \"incomplete\" }, {\n+            \"inconvenant\", \"inconvenient\" }, {\n+            \"inconvience\", \"inconvenience\" }, {\n+            \"independant\", \"independent\" }, {\n+            \"independenent\", \"independent\" }, {\n+            \"indepnends\", \"independent\" }, {\n+            \"indepth\", \"in depth\" }, {\n+            \"indispensible\", \"indispensable\" }, {\n+            \"inefficite\", \"inefficient\" }, {\n+            \"inerface\", \"interface\" }, {\n+            \"infact\", \"in fact\" }, {\n+            \"influencial\", \"influential\" }, {\n+            \"inital\", \"initial\" }, {\n+            \"initinized\", \"initialized\" }, {\n+            \"initized\", \"initialized\" }, {\n+            \"innoculate\", \"inoculate\" }, {\n+            \"insistant\", \"insistent\" }, {\n+            \"insistenet\", \"insistent\" }, {\n+            \"instulation\", \"installation\" }, {\n+            \"intealignt\", \"intelligent\" }, {\n+            \"intejilent\", \"intelligent\" }, {\n+            \"intelegent\", \"intelligent\" }, {\n+            \"intelegnent\", \"intelligent\" }, {\n+            \"intelejent\", \"intelligent\" }, {\n+            \"inteligent\", \"intelligent\" }, {\n+            \"intelignt\", \"intelligent\" }, {\n+            \"intellagant\", \"intelligent\" }, {\n+            \"intellegent\", \"intelligent\" }, {\n+            \"intellegint\", \"intelligent\" }, {\n+            \"intellgnt\", \"intelligent\" }, {\n+            \"intensionality\", \"intensionally\" }, {\n+            \"interate\", \"iterate\" }, {\n+            \"internation\", \"international\" }, {\n+            \"interpretate\", \"interpret\" }, {\n+            \"interpretter\", \"interpreter\" }, {\n+            \"intertes\", \"interested\" }, {\n+            \"intertesd\", \"interested\" }, {\n+            \"invermeantial\", \"environmental\" }, {\n+            \"irregardless\", \"regardless\" }, {\n+            \"irresistable\", \"irresistible\" }, {\n+            \"irritible\", \"irritable\" }, {\n+            \"islams\", \"muslims\" }, {\n+            \"isotrop\", \"isotope\" }, {\n+            \"isreal\", \"israel\" }, {\n+            \"johhn\", \"john\" }, {\n+            \"judgement\", \"judgment\" }, {\n+            \"kippur\", \"kipper\" }, {\n+            \"knawing\", \"knowing\" }, {\n+            \"latext\", \"latest\" }, {\n+            \"leasve\", \"leave\" }, {\n+            \"lesure\", \"leisure\" }, {\n+            \"liasion\", \"lesion\" }, {\n+            \"liason\", \"liaison\" }, {\n+            \"libary\", \"library\" }, {\n+            \"likly\", \"likely\" }, {\n+            \"lilometer\", \"kilometer\" }, {\n+            \"liquify\", \"liquefy\" }, {\n+            \"lloyer\", \"layer\" }, {\n+            \"lossing\", \"losing\" }, {\n+            \"luser\", \"laser\" }, {\n+            \"maintanence\", \"maintenance\" }, {\n+            \"majaerly\", \"majority\" }, {\n+            \"majoraly\", \"majority\" }, {\n+            \"maks\", \"masks\" }, {\n+            \"mandelbrot\", \"Mandelbrot\" }, {\n+            \"mant\", \"want\" }, {\n+            \"marshall\", \"marshal\" }, {\n+            \"maxium\", \"maximum\" }, {\n+            \"meory\", \"memory\" }, {\n+            \"metter\", \"better\" }, {\n+            \"mic\", \"mike\" }, {\n+            \"midia\", \"media\" }, {\n+            \"millenium\", \"millennium\" }, {\n+            \"miniscule\", \"minuscule\" }, {\n+            \"minkay\", \"monkey\" }, {\n+            \"minum\", \"minimum\" }, {\n+            \"mischievious\", \"mischievous\" }, {\n+            \"misilous\", \"miscellaneous\" }, {\n+            \"momento\", \"memento\" }, {\n+            \"monkay\", \"monkey\" }, {\n+            \"mosaik\", \"mosaic\" }, {\n+            \"mostlikely\", \"most likely\" }, {\n+            \"mousr\", \"mouser\" }, {\n+            \"mroe\", \"more\" }, {\n+            \"neccessary\", \"necessary\" }, {\n+            \"necesary\", \"necessary\" }, {\n+            \"necesser\", \"necessary\" }, {\n+            \"neice\", \"niece\" }, {\n+            \"neighbour\", \"neighbor\" }, {\n+            \"nemonic\", \"pneumonic\" }, {\n+            \"nevade\", \"Nevada\" }, {\n+            \"nickleodeon\", \"nickelodeon\" }, {\n+            \"nieve\", \"naive\" }, {\n+            \"noone\", \"no one\" }, {\n+            \"noticably\", \"noticeably\" }, {\n+            \"notin\", \"not in\" }, {\n+            \"nozled\", \"nuzzled\" }, {\n+            \"objectsion\", \"objects\" }, {\n+            \"obsfuscate\", \"obfuscate\" }, {\n+            \"ocassion\", \"occasion\" }, {\n+            \"occuppied\", \"occupied\" }, {\n+            \"occurence\", \"occurrence\" }, {\n+            \"octagenarian\", \"octogenarian\" }, {\n+            \"olf\", \"old\" }, {\n+            \"opposim\", \"opossum\" }, {\n+            \"organise\", \"organize\" }, {\n+            \"organiz\", \"organize\" }, {\n+            \"orientate\", \"orient\" }, {\n+            \"oscilascope\", \"oscilloscope\" }, {\n+            \"oving\", \"moving\" }, {\n+            \"paramers\", \"parameters\" }, {\n+            \"parametic\", \"parameter\" }, {\n+            \"paranets\", \"parameters\" }, {\n+            \"partrucal\", \"particular\" }, {\n+            \"pataphysical\", \"metaphysical\" }, {\n+            \"patten\", \"pattern\" }, {\n+            \"permissable\", \"permissible\" }, {\n+            \"permition\", \"permission\" }, {\n+            \"permmasivie\", \"permissive\" }, {\n+            \"perogative\", \"prerogative\" }, {\n+            \"persue\", \"pursue\" }, {\n+            \"phantasia\", \"fantasia\" }, {\n+            \"phenominal\", \"phenomenal\" }, {\n+            \"picaresque\", \"picturesque\" }, {\n+            \"playwrite\", \"playwright\" }, {\n+            \"poeses\", \"poesies\" }, {\n+            \"polation\", \"politician\" }, {\n+            \"poligamy\", \"polygamy\" }, {\n+            \"politict\", \"politic\" }, {\n+            \"pollice\", \"police\" }, {\n+            \"polypropalene\", \"polypropylene\" }, {\n+            \"pompom\", \"pompon\" }, {\n+            \"possable\", \"possible\" }, {\n+            \"practicle\", \"practical\" }, {\n+            \"pragmaticism\", \"pragmatism\" }, {\n+            \"preceeding\", \"preceding\" }, {\n+            \"precion\", \"precision\" }, {\n+            \"precios\", \"precision\" }, {\n+            \"preemptory\", \"peremptory\" }, {\n+            \"prefices\", \"prefixes\" }, {\n+            \"prefixt\", \"prefixed\" }, {\n+            \"presbyterian\", \"Presbyterian\" }, {\n+            \"presue\", \"pursue\" }, {\n+            \"presued\", \"pursued\" }, {\n+            \"privielage\", \"privilege\" }, {\n+            \"priviledge\", \"privilege\" }, {\n+            \"proceedures\", \"procedures\" }, {\n+            \"pronensiation\", \"pronunciation\" }, {\n+            \"pronisation\", \"pronunciation\" }, {\n+            \"pronounciation\", \"pronunciation\" }, {\n+            \"properally\", \"properly\" }, {\n+            \"proplematic\", \"problematic\" }, {\n+            \"protray\", \"portray\" }, {\n+            \"pscolgst\", \"psychologist\" }, {\n+            \"psicolagest\", \"psychologist\" }, {\n+            \"psycolagest\", \"psychologist\" }, {\n+            \"quoz\", \"quiz\" }, {\n+            \"radious\", \"radius\" }, {\n+            \"ramplily\", \"rampantly\" }, {\n+            \"reccomend\", \"recommend\" }, {\n+            \"reccona\", \"raccoon\" }, {\n+            \"recieve\", \"receive\" }, {\n+            \"reconise\", \"recognize\" }, {\n+            \"rectangeles\", \"rectangle\" }, {\n+            \"redign\", \"redesign\" }, {\n+            \"reoccurring\", \"recurring\" }, {\n+            \"repitition\", \"repetition\" }, {\n+            \"replasments\", \"replacement\" }, {\n+            \"reposable\", \"responsible\" }, {\n+            \"reseblence\", \"resemblance\" }, {\n+            \"respct\", \"respect\" }, {\n+            \"respecally\", \"respectfully\" }, {\n+            \"roon\", \"room\" }, {\n+            \"rought\", \"roughly\" }, {\n+            \"rsx\", \"RSX\" }, {\n+            \"rudemtry\", \"rudimentary\" }, {\n+            \"runnung\", \"running\" }, {\n+            \"sacreligious\", \"sacrilegious\" }, {\n+            \"saftly\", \"safely\" }, {\n+            \"salut\", \"salute\" }, {\n+            \"satifly\", \"satisfy\" }, {\n+            \"scrabdle\", \"scrabble\" }, {\n+            \"searcheable\", \"searchable\" }, {\n+            \"secion\", \"section\" }, {\n+            \"seferal\", \"several\" }, {\n+            \"segements\", \"segments\" }, {\n+            \"sence\", \"sense\" }, {\n+            \"seperate\", \"separate\" }, {\n+            \"sherbert\", \"sherbet\" }, {\n+            \"sicolagest\", \"psychologist\" }, {\n+            \"sieze\", \"seize\" }, {\n+            \"simpfilty\", \"simplicity\" }, {\n+            \"simplye\", \"simply\" }, {\n+            \"singal\", \"signal\" }, {\n+            \"sitte\", \"site\" }, {\n+            \"situration\", \"situation\" }, {\n+            \"slyph\", \"sylph\" }, {\n+            \"smil\", \"smile\" }, {\n+            \"snuck\", \"sneaked\" }, {\n+            \"sometmes\", \"sometimes\" }, {\n+            \"soonec\", \"sonic\" }, {\n+            \"specificialy\", \"specifically\" }, {\n+            \"spel\", \"spell\" }, {\n+            \"spoak\", \"spoke\" }, {\n+            \"sponsered\", \"sponsored\" }, {\n+            \"stering\", \"steering\" }, {\n+            \"straightjacket\", \"straitjacket\" }, {\n+            \"stumach\", \"stomach\" }, {\n+            \"stutent\", \"student\" }, {\n+            \"styleguide\", \"style guide\" }, {\n+            \"subisitions\", \"substitutions\" }, {\n+            \"subjecribed\", \"subscribed\" }, {\n+            \"subpena\", \"subpoena\" }, {\n+            \"substations\", \"substitutions\" }, {\n+            \"suger\", \"sugar\" }, {\n+            \"supercede\", \"supersede\" }, {\n+            \"superfulous\", \"superfluous\" }, {\n+            \"susan\", \"Susan\" }, {\n+            \"swimwear\", \"swim wear\" }, {\n+            \"syncorization\", \"synchronization\" }, {\n+            \"taff\", \"tough\" }, {\n+            \"taht\", \"that\" }, {\n+            \"tattos\", \"tattoos\" }, {\n+            \"techniquely\", \"technically\" }, {\n+            \"teh\", \"the\" }, {\n+            \"tem\", \"team\" }, {\n+            \"teo\", \"two\" }, {\n+            \"teridical\", \"theoretical\" }, {\n+            \"tesst\", \"test\" }, {\n+            \"tets\", \"tests\" }, {\n+            \"thanot\", \"than or\" }, {\n+            \"theirselves\", \"themselves\" }, {\n+            \"theridically\", \"theoretical\" }, {\n+            \"thredically\", \"theoretically\" }, {\n+            \"thruout\", \"throughout\" }, {\n+            \"ths\", \"this\" }, {\n+            \"titalate\", \"titillate\" }, {\n+            \"tobagan\", \"tobaggon\" }, {\n+            \"tommorrow\", \"tomorrow\" }, {\n+            \"tomorow\", \"tomorrow\" }, {\n+            \"tradegy\", \"tragedy\" }, {\n+            \"trubbel\", \"trouble\" }, {\n+            \"ttest\", \"test\" }, {\n+            \"tunnellike\", \"tunnel like\" }, {\n+            \"tured\", \"turned\" }, {\n+            \"tyrrany\", \"tyranny\" }, {\n+            \"unatourral\", \"unnatural\" }, {\n+            \"unaturral\", \"unnatural\" }, {\n+            \"unconisitional\", \"unconstitutional\" }, {\n+            \"unconscience\", \"unconscious\" }, {\n+            \"underladder\", \"under ladder\" }, {\n+            \"unentelegible\", \"unintelligible\" }, {\n+            \"unfortunently\", \"unfortunately\" }, {\n+            \"unnaturral\", \"unnatural\" }, {\n+            \"upcast\", \"up cast\" }, {\n+            \"upmost\", \"utmost\" }, {\n+            \"uranisium\", \"uranium\" }, {\n+            \"verison\", \"version\" }, {\n+            \"vinagarette\", \"vinaigrette\" }, {\n+            \"volumptuous\", \"voluptuous\" }, {\n+            \"volunteerism\", \"voluntarism\" }, {\n+            \"volye\", \"volley\" }, {\n+            \"wadting\", \"wasting\" }, {\n+            \"waite\", \"wait\" }, {\n+            \"wan't\", \"won't\" }, {\n+            \"warloord\", \"warlord\" }, {\n+            \"whaaat\", \"what\" }, {\n+            \"whard\", \"ward\" }, {\n+            \"whimp\", \"wimp\" }, {\n+            \"wicken\", \"weaken\" }, {\n+            \"wierd\", \"weird\" }, {\n+            \"wrank\", \"rank\" }, {\n+            \"writeen\", \"righten\" }, {\n+            \"writting\", \"writing\" }, {\n+            \"wundeews\", \"windows\" }, {\n+            \"yeild\", \"yield\" }, {\n+            \"youe\", \"your\" }\n+    };\n+\n+    /**\n+\t * A subset of FIXTURE generated by this test.\n+\t */\n+    private static final String[][] MATCHES = { { \"Accosinly\", \"Occasionally\" }, {\n+            \"Maddness\", \"Madness\" }, {\n+            \"Occusionaly\", \"Occasionally\" }, {\n+            \"Steffen\", \"Stephen\" }, {\n+            \"Thw\", \"The\" }, {\n+            \"Unformanlly\", \"Unfortunately\" }, {\n+            \"Unfortally\", \"Unfortunately\" }, {\n+            \"abilitey\", \"ability\" }, {\n+            \"absorbtion\", \"absorption\" }, {\n+            \"accidently\", \"accidentally\" }, {\n+            \"accomodate\", \"accommodate\" }, {\n+            \"acommadate\", \"accommodate\" }, {\n+            \"acord\", \"accord\" }, {\n+            \"adultry\", \"adultery\" }, {\n+            \"aggresive\", \"aggressive\" }, {\n+            \"alchohol\", \"alcohol\" }, {\n+            \"alchoholic\", \"alcoholic\" }, {\n+            \"allieve\", \"alive\" }, {\n+            \"alot\", \"a lot\" }, {\n+            \"alright\", \"all right\" }, {\n+            \"amature\", \"amateur\" }, {\n+            \"ambivilant\", \"ambivalent\" }, {\n+            \"amourfous\", \"amorphous\" }, {\n+            \"annoint\", \"anoint\" }, {\n+            \"annonsment\", \"announcement\" }, {\n+            \"annoyting\", \"anting\" }, {\n+            \"annuncio\", \"announce\" }, {\n+            \"anotomy\", \"anatomy\" }, {\n+            \"antidesestablishmentarianism\", \"antidisestablishmentarianism\" }, {\n+            \"antidisestablishmentarism\", \"antidisestablishmentarianism\" }, {\n+            \"anynomous\", \"anonymous\" }, {\n+            \"appelet\", \"applet\" }, {\n+            \"appreceiated\", \"appreciated\" }, {\n+            \"appresteate\", \"appreciate\" }, {\n+            \"aquantance\", \"acquaintance\" }, {\n+            \"aricticure\", \"architecture\" }, {\n+            \"asterick\", \"asterisk\" }, {\n+            \"asymetric\", \"asymmetric\" }, {\n+            \"atentively\", \"attentively\" }, {\n+            \"bankrot\", \"bankrupt\" }, {\n+            \"basicly\", \"basically\" }, {\n+            \"batallion\", \"battalion\" }, {\n+            \"bbrose\", \"browse\" }, {\n+            \"beauro\", \"bureau\" }, {\n+            \"beaurocracy\", \"bureaucracy\" }, {\n+            \"beggining\", \"beginning\" }, {\n+            \"behaviour\", \"behavior\" }, {\n+            \"beleive\", \"believe\" }, {\n+            \"belive\", \"believe\" }, {\n+            \"blait\", \"bleat\" }, {\n+            \"bouyant\", \"buoyant\" }, {\n+            \"boygot\", \"boycott\" }, {\n+            \"brocolli\", \"broccoli\" }, {\n+            \"buder\", \"butter\" }, {\n+            \"budr\", \"butter\" }, {\n+            \"budter\", \"butter\" }, {\n+            \"buracracy\", \"bureaucracy\" }, {\n+            \"burracracy\", \"bureaucracy\" }, {\n+            \"buton\", \"button\" }, {\n+            \"byby\", \"by by\" }, {\n+            \"cauler\", \"caller\" }, {\n+            \"ceasar\", \"caesar\" }, {\n+            \"cemetary\", \"cemetery\" }, {\n+            \"changeing\", \"changing\" }, {\n+            \"cheet\", \"cheat\" }, {\n+            \"cimplicity\", \"simplicity\" }, {\n+            \"circumstaces\", \"circumstances\" }, {\n+            \"clob\", \"club\" }, {\n+            \"coaln\", \"colon\" }, {\n+            \"colleaque\", \"colleague\" }, {\n+            \"colloquilism\", \"colloquialism\" }, {\n+            \"columne\", \"column\" }, {\n+            \"comitmment\", \"commitment\" }, {\n+            \"comitte\", \"committee\" }, {\n+            \"comittmen\", \"commitment\" }, {\n+            \"comittmend\", \"commitment\" }, {\n+            \"commerciasl\", \"commercials\" }, {\n+            \"commited\", \"committed\" }, {\n+            \"commitee\", \"committee\" }, {\n+            \"companys\", \"companies\" }, {\n+            \"comupter\", \"computer\" }, {\n+            \"concensus\", \"consensus\" }, {\n+            \"confusionism\", \"confucianism\" }, {\n+            \"congradulations\", \"congratulations\" }, {\n+            \"contunie\", \"continue\" }, {\n+            \"cooly\", \"coolly\" }, {\n+            \"copping\", \"coping\" }, {\n+            \"cosmoplyton\", \"cosmopolitan\" }, {\n+            \"crasy\", \"crazy\" }, {\n+            \"croke\", \"croak\" }, {\n+            \"crucifiction\", \"crucifixion\" }, {\n+            \"crusifed\", \"crucified\" }, {\n+            \"cumba\", \"combo\" }, {\n+            \"custamisation\", \"customization\" }, {\n+            \"dag\", \"dog\" }, {\n+            \"daly\", \"daily\" }, {\n+            \"defence\", \"defense\" }, {\n+            \"definate\", \"definite\" }, {\n+            \"definately\", \"definitely\" }, {\n+            \"dependeble\", \"dependable\" }, {\n+            \"descrption\", \"description\" }, {\n+            \"descrptn\", \"description\" }, {\n+            \"desparate\", \"desperate\" }, {\n+            \"dessicate\", \"desiccate\" }, {\n+            \"destint\", \"distant\" }, {\n+            \"develepment\", \"developments\" }, {\n+            \"developement\", \"development\" }, {\n+            \"develpond\", \"development\" }, {\n+            \"devulge\", \"divulge\" }, {\n+            \"dieties\", \"deities\" }, {\n+            \"dinasaur\", \"dinosaur\" }, {\n+            \"dinasour\", \"dinosaur\" }, {\n+            \"discuess\", \"discuss\" }, {\n+            \"disect\", \"dissect\" }, {\n+            \"disippate\", \"dissipate\" }, {\n+            \"disition\", \"decision\" }, {\n+            \"dispair\", \"despair\" }, {\n+            \"distarct\", \"distract\" }, {\n+            \"distart\", \"distort\" }, {\n+            \"distroy\", \"destroy\" }, {\n+            \"doenload\", \"download\" }, {\n+            \"dongle\", \"dangle\" }, {\n+            \"doog\", \"dog\" }, {\n+            \"dramaticly\", \"dramatically\" }, {\n+            \"drunkeness\", \"drunkenness\" }, {\n+            \"ductioneery\", \"dictionary\" }, {\n+            \"ecstacy\", \"ecstasy\" }, {\n+            \"egsistence\", \"existence\" }, {\n+            \"eitiology\", \"etiology\" }, {\n+            \"elagent\", \"elegant\" }, {\n+            \"embarass\", \"embarrass\" }, {\n+            \"embarassment\", \"embarrassment\" }, {\n+            \"embaress\", \"embarrass\" }, {\n+            \"encapsualtion\", \"encapsulation\" }, {\n+            \"encyclapidia\", \"encyclopedia\" }, {\n+            \"encyclopia\", \"encyclopedia\" }, {\n+            \"engins\", \"engine\" }, {\n+            \"enhence\", \"enhance\" }, {\n+            \"ennuui\", \"ennui\" }, {\n+            \"enventions\", \"inventions\" }, {\n+            \"envireminakl\", \"environmental\" }, {\n+            \"enviroment\", \"environment\" }, {\n+            \"epitomy\", \"epitome\" }, {\n+            \"equire\", \"acquire\" }, {\n+            \"errara\", \"error\" }, {\n+            \"evaualtion\", \"evaluation\" }, {\n+            \"excede\", \"exceed\" }, {\n+            \"excercise\", \"exercise\" }, {\n+            \"excpt\", \"except\" }, {\n+            \"exhileration\", \"exhilaration\" }, {\n+            \"existance\", \"existence\" }, {\n+            \"expleyly\", \"explicitly\" }, {\n+            \"explity\", \"explicitly\" }, {\n+            \"failer\", \"failure\" }, {\n+            \"faver\", \"favor\" }, {\n+            \"faxe\", \"fax\" }, {\n+            \"firey\", \"fiery\" }, {\n+            \"fistival\", \"festival\" }, {\n+            \"flatterring\", \"flattering\" }, {\n+            \"flukse\", \"flux\" }, {\n+            \"fone\", \"phone\" }, {\n+            \"forsee\", \"foresee\" }, {\n+            \"frustartaion\", \"frustrating\" }, {\n+            \"funetik\", \"phonetic\" }, {\n+            \"gaurd\", \"guard\" }, {\n+            \"generly\", \"generally\" }, {\n+            \"ghandi\", \"gandhi\" }, {\n+            \"gotton\", \"gotten\" }, {\n+            \"gracefull\", \"graceful\" }, {\n+            \"gradualy\", \"gradually\" }, {\n+            \"grammer\", \"grammar\" }, {\n+            \"hallo\", \"hello\" }, {\n+            \"hapily\", \"happily\" }, {\n+            \"harrass\", \"harass\" }, {\n+            \"heellp\", \"help\" }, {\n+            \"heighth\", \"height\" }, {\n+            \"hellp\", \"help\" }, {\n+            \"helo\", \"hello\" }, {\n+            \"hifin\", \"hyphen\" }, {\n+            \"hifine\", \"hyphen\" }, {\n+            \"hiphine\", \"hyphen\" }, {\n+            \"hippie\", \"hippy\" }, {\n+            \"hippopotamous\", \"hippopotamus\" }, {\n+            \"hourse\", \"horse\" }, {\n+            \"houssing\", \"housing\" }, {\n+            \"howaver\", \"however\" }, {\n+            \"howver\", \"however\" }, {\n+            \"humaniti\", \"humanity\" }, {\n+            \"hyfin\", \"hyphen\" }, {\n+            \"hystrical\", \"hysterical\" }, {\n+            \"illegitament\", \"illegitimate\" }, {\n+            \"imbed\", \"embed\" }, {\n+            \"imediaetly\", \"immediately\" }, {\n+            \"immenant\", \"immanent\" }, {\n+            \"implemtes\", \"implements\" }, {\n+            \"inadvertant\", \"inadvertent\" }, {\n+            \"incase\", \"in case\" }, {\n+            \"incedious\", \"insidious\" }, {\n+            \"incompleet\", \"incomplete\" }, {\n+            \"incomplot\", \"incomplete\" }, {\n+            \"inconvenant\", \"inconvenient\" }, {\n+            \"inconvience\", \"inconvenience\" }, {\n+            \"independant\", \"independent\" }, {\n+            \"independenent\", \"independent\" }, {\n+            \"indepnends\", \"independent\" }, {\n+            \"indepth\", \"in depth\" }, {\n+            \"indispensible\", \"indispensable\" }, {\n+            \"inefficite\", \"inefficient\" }, {\n+            \"infact\", \"in fact\" }, {\n+            \"influencial\", \"influential\" }, {\n+            \"innoculate\", \"inoculate\" }, {\n+            \"insistant\", \"insistent\" }, {\n+            \"insistenet\", \"insistent\" }, {\n+            \"instulation\", \"installation\" }, {\n+            \"intealignt\", \"intelligent\" }, {\n+            \"intelegent\", \"intelligent\" }, {\n+            \"intelegnent\", \"intelligent\" }, {\n+            \"intelejent\", \"intelligent\" }, {\n+            \"inteligent\", \"intelligent\" }, {\n+            \"intelignt\", \"intelligent\" }, {\n+            \"intellagant\", \"intelligent\" }, {\n+            \"intellegent\", \"intelligent\" }, {\n+            \"intellegint\", \"intelligent\" }, {\n+            \"intellgnt\", \"intelligent\" }, {\n+            \"intensionality\", \"intensionally\" }, {\n+            \"internation\", \"international\" }, {\n+            \"interpretate\", \"interpret\" }, {\n+            \"interpretter\", \"interpreter\" }, {\n+            \"intertes\", \"interested\" }, {\n+            \"intertesd\", \"interested\" }, {\n+            \"invermeantial\", \"environmental\" }, {\n+            \"irresistable\", \"irresistible\" }, {\n+            \"irritible\", \"irritable\" }, {\n+            \"isreal\", \"israel\" }, {\n+            \"johhn\", \"john\" }, {\n+            \"kippur\", \"kipper\" }, {\n+            \"knawing\", \"knowing\" }, {\n+            \"lesure\", \"leisure\" }, {\n+            \"liasion\", \"lesion\" }, {\n+            \"liason\", \"liaison\" }, {\n+            \"likly\", \"likely\" }, {\n+            \"liquify\", \"liquefy\" }, {\n+            \"lloyer\", \"layer\" }, {\n+            \"lossing\", \"losing\" }, {\n+            \"luser\", \"laser\" }, {\n+            \"maintanence\", \"maintenance\" }, {\n+            \"mandelbrot\", \"Mandelbrot\" }, {\n+            \"marshall\", \"marshal\" }, {\n+            \"maxium\", \"maximum\" }, {\n+            \"mic\", \"mike\" }, {\n+            \"midia\", \"media\" }, {\n+            \"millenium\", \"millennium\" }, {\n+            \"miniscule\", \"minuscule\" }, {\n+            \"minkay\", \"monkey\" }, {\n+            \"mischievious\", \"mischievous\" }, {\n+            \"momento\", \"memento\" }, {\n+            \"monkay\", \"monkey\" }, {\n+            \"mosaik\", \"mosaic\" }, {\n+            \"mostlikely\", \"most likely\" }, {\n+            \"mousr\", \"mouser\" }, {\n+            \"mroe\", \"more\" }, {\n+            \"necesary\", \"necessary\" }, {\n+            \"necesser\", \"necessary\" }, {\n+            \"neice\", \"niece\" }, {\n+            \"neighbour\", \"neighbor\" }, {\n+            \"nemonic\", \"pneumonic\" }, {\n+            \"nevade\", \"Nevada\" }, {\n+            \"nickleodeon\", \"nickelodeon\" }, {\n+            \"nieve\", \"naive\" }, {\n+            \"noone\", \"no one\" }, {\n+            \"notin\", \"not in\" }, {\n+            \"nozled\", \"nuzzled\" }, {\n+            \"objectsion\", \"objects\" }, {\n+            \"ocassion\", \"occasion\" }, {\n+            \"occuppied\", \"occupied\" }, {\n+            \"occurence\", \"occurrence\" }, {\n+            \"octagenarian\", \"octogenarian\" }, {\n+            \"opposim\", \"opossum\" }, {\n+            \"organise\", \"organize\" }, {\n+            \"organiz\", \"organize\" }, {\n+            \"orientate\", \"orient\" }, {\n+            \"oscilascope\", \"oscilloscope\" }, {\n+            \"parametic\", \"parameter\" }, {\n+            \"permissable\", \"permissible\" }, {\n+            \"permmasivie\", \"permissive\" }, {\n+            \"persue\", \"pursue\" }, {\n+            \"phantasia\", \"fantasia\" }, {\n+            \"phenominal\", \"phenomenal\" }, {\n+            \"playwrite\", \"playwright\" }, {\n+            \"poeses\", \"poesies\" }, {\n+            \"poligamy\", \"polygamy\" }, {\n+            \"politict\", \"politic\" }, {\n+            \"pollice\", \"police\" }, {\n+            \"polypropalene\", \"polypropylene\" }, {\n+            \"possable\", \"possible\" }, {\n+            \"practicle\", \"practical\" }, {\n+            \"pragmaticism\", \"pragmatism\" }, {\n+            \"preceeding\", \"preceding\" }, {\n+            \"precios\", \"precision\" }, {\n+            \"preemptory\", \"peremptory\" }, {\n+            \"prefixt\", \"prefixed\" }, {\n+            \"presbyterian\", \"Presbyterian\" }, {\n+            \"presue\", \"pursue\" }, {\n+            \"presued\", \"pursued\" }, {\n+            \"privielage\", \"privilege\" }, {\n+            \"priviledge\", \"privilege\" }, {\n+            \"proceedures\", \"procedures\" }, {\n+            \"pronensiation\", \"pronunciation\" }, {\n+            \"pronounciation\", \"pronunciation\" }, {\n+            \"properally\", \"properly\" }, {\n+            \"proplematic\", \"problematic\" }, {\n+            \"protray\", \"portray\" }, {\n+            \"pscolgst\", \"psychologist\" }, {\n+            \"psicolagest\", \"psychologist\" }, {\n+            \"psycolagest\", \"psychologist\" }, {\n+            \"quoz\", \"quiz\" }, {\n+            \"radious\", \"radius\" }, {\n+            \"reccomend\", \"recommend\" }, {\n+            \"reccona\", \"raccoon\" }, {\n+            \"recieve\", \"receive\" }, {\n+            \"reconise\", \"recognize\" }, {\n+            \"rectangeles\", \"rectangle\" }, {\n+            \"reoccurring\", \"recurring\" }, {\n+            \"repitition\", \"repetition\" }, {\n+            \"replasments\", \"replacement\" }, {\n+            \"respct\", \"respect\" }, {\n+            \"respecally\", \"respectfully\" }, {\n+            \"rsx\", \"RSX\" }, {\n+            \"runnung\", \"running\" }, {\n+            \"sacreligious\", \"sacrilegious\" }, {\n+            \"salut\", \"salute\" }, {\n+            \"searcheable\", \"searchable\" }, {\n+            \"seferal\", \"several\" }, {\n+            \"segements\", \"segments\" }, {\n+            \"sence\", \"sense\" }, {\n+            \"seperate\", \"separate\" }, {\n+            \"sicolagest\", \"psychologist\" }, {\n+            \"sieze\", \"seize\" }, {\n+            \"simplye\", \"simply\" }, {\n+            \"sitte\", \"site\" }, {\n+            \"slyph\", \"sylph\" }, {\n+            \"smil\", \"smile\" }, {\n+            \"sometmes\", \"sometimes\" }, {\n+            \"soonec\", \"sonic\" }, {\n+            \"specificialy\", \"specifically\" }, {\n+            \"spel\", \"spell\" }, {\n+            \"spoak\", \"spoke\" }, {\n+            \"sponsered\", \"sponsored\" }, {\n+            \"stering\", \"steering\" }, {\n+            \"straightjacket\", \"straitjacket\" }, {\n+            \"stumach\", \"stomach\" }, {\n+            \"stutent\", \"student\" }, {\n+            \"styleguide\", \"style guide\" }, {\n+            \"subpena\", \"subpoena\" }, {\n+            \"substations\", \"substitutions\" }, {\n+            \"supercede\", \"supersede\" }, {\n+            \"superfulous\", \"superfluous\" }, {\n+            \"susan\", \"Susan\" }, {\n+            \"swimwear\", \"swim wear\" }, {\n+            \"syncorization\", \"synchronization\" }, {\n+            \"taff\", \"tough\" }, {\n+            \"taht\", \"that\" }, {\n+            \"tattos\", \"tattoos\" }, {\n+            \"techniquely\", \"technically\" }, {\n+            \"teh\", \"the\" }, {\n+            \"tem\", \"team\" }, {\n+            \"teo\", \"two\" }, {\n+            \"teridical\", \"theoretical\" }, {\n+            \"tesst\", \"test\" }, {\n+            \"theridically\", \"theoretical\" }, {\n+            \"thredically\", \"theoretically\" }, {\n+            \"thruout\", \"throughout\" }, {\n+            \"ths\", \"this\" }, {\n+            \"titalate\", \"titillate\" }, {\n+            \"tobagan\", \"tobaggon\" }, {\n+            \"tommorrow\", \"tomorrow\" }, {\n+            \"tomorow\", \"tomorrow\" }, {\n+            \"trubbel\", \"trouble\" }, {\n+            \"ttest\", \"test\" }, {\n+            \"tyrrany\", \"tyranny\" }, {\n+            \"unatourral\", \"unnatural\" }, {\n+            \"unaturral\", \"unnatural\" }, {\n+            \"unconisitional\", \"unconstitutional\" }, {\n+            \"unconscience\", \"unconscious\" }, {\n+            \"underladder\", \"under ladder\" }, {\n+            \"unentelegible\", \"unintelligible\" }, {\n+            \"unfortunently\", \"unfortunately\" }, {\n+            \"unnaturral\", \"unnatural\" }, {\n+            \"upcast\", \"up cast\" }, {\n+            \"verison\", \"version\" }, {\n+            \"vinagarette\", \"vinaigrette\" }, {\n+            \"volunteerism\", \"voluntarism\" }, {\n+            \"volye\", \"volley\" }, {\n+            \"waite\", \"wait\" }, {\n+            \"wan't\", \"won't\" }, {\n+            \"warloord\", \"warlord\" }, {\n+            \"whaaat\", \"what\" }, {\n+            \"whard\", \"ward\" }, {\n+            \"whimp\", \"wimp\" }, {\n+            \"wicken\", \"weaken\" }, {\n+            \"wierd\", \"weird\" }, {\n+            \"wrank\", \"rank\" }, {\n+            \"writeen\", \"righten\" }, {\n+            \"writting\", \"writing\" }, {\n+            \"wundeews\", \"windows\" }, {\n+            \"yeild\", \"yield\" }, };\n+\n+    public static Test suite() {\n+        return (new TestSuite(DoubleMetaphoneTest.class));\n+    }\n+\n+    private DoubleMetaphone doubleMetaphone = null;\n+\n+    public DoubleMetaphoneTest(String name) {\n         super(name);\n     }\n \n-    public static Test suite()\n-    {\n-        return (new TestSuite(DoubleMetaphoneTest.class));\n-    }\n-\n-    public void setUp() throws Exception\n-    {\n+    /**\n+\t * Tests encoding APIs in one place.\n+\t */\n+    private void assertDoubleMetaphone(String expected, String source) {\n+        assertEquals(expected, this.getDoubleMetaphone().encode(source));\n+        try {\n+            assertEquals(expected, this.getDoubleMetaphone().encode((Object) source));\n+        } catch (EncoderException e) {\n+            fail(\"Unexpected expection: \" + e);\n+        }\n+        assertEquals(expected, this.getDoubleMetaphone().doubleMetaphone(source));\n+        assertEquals(expected, this.getDoubleMetaphone().doubleMetaphone(source, false));\n+    }\n+\n+    /**\n+\t * Tests encoding APIs in one place.\n+\t */\n+    public void assertDoubleMetaphoneAlt(String expected, String source) {\n+        assertEquals(expected, this.getDoubleMetaphone().doubleMetaphone(source, true));\n+    }\n+\n+    public void doubleMetaphoneEqualTest(String[][] pairs, boolean useAlternate) {\n+        this.validateFixture(pairs);\n+        for (int i = 0; i < pairs.length; i++) {\n+            String name0 = pairs[i][0];\n+            String name1 = pairs[i][1];\n+            String failMsg = \"Expected match between \" + name0 + \" and \" + name1 + \" (use alternate: \" + useAlternate + \")\";\n+            assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, useAlternate));\n+            assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name1, name0, useAlternate));\n+            if (!useAlternate) {\n+                assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1));\n+                assertTrue(failMsg, this.getDoubleMetaphone().isDoubleMetaphoneEqual(name1, name0));\n+            }\n+        }\n+    }\n+\n+    public void doubleMetaphoneNotEqualTest(boolean alternate) {\n+        assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"Brain\", \"Band\", alternate));\n+        assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"Band\", \"Brain\", alternate));\n+\n+        if (!alternate) {\n+            assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"Brain\", \"Band\"));\n+            assertFalse(this.getDoubleMetaphone().isDoubleMetaphoneEqual(\"Band\", \"Brain\"));\n+        }\n+    }\n+\n+    private DoubleMetaphone getDoubleMetaphone() {\n+        return this.doubleMetaphone;\n+    }\n+\n+    protected StringEncoder makeEncoder() {\n+        return new Metaphone();\n+    }\n+\n+    private void setDoubleMetaphone(DoubleMetaphone doubleMetaphone) {\n+        this.doubleMetaphone = doubleMetaphone;\n+    }\n+\n+    public void setUp() throws Exception {\n         super.setUp();\n-        _doubleMetaphone = new DoubleMetaphone();\n-    }\n-\n-    public void tearDown() throws Exception\n-    {\n+        this.setDoubleMetaphone(new DoubleMetaphone());\n+    }\n+\n+    public void tearDown() throws Exception {\n         super.tearDown();\n-        _doubleMetaphone = null;\n-    }\n-\n-    protected StringEncoder makeEncoder()\n-    {\n-        return new Metaphone();\n-    }\n-\n-    // ------------------------------------------------------------------------\n-\n-    public void testDoubleMetaphone()\n-    {\n-        assertEquals(\"TSTN\", _doubleMetaphone.doubleMetaphone(\"testing\"));\n-        assertEquals(\"0\", _doubleMetaphone.doubleMetaphone(\"The\"));\n-        assertEquals(\"KK\", _doubleMetaphone.doubleMetaphone(\"quick\"));\n-        assertEquals(\"PRN\", _doubleMetaphone.doubleMetaphone(\"brown\"));\n-        assertEquals(\"FKS\", _doubleMetaphone.doubleMetaphone(\"fox\"));\n-        assertEquals(\"JMPT\", _doubleMetaphone.doubleMetaphone(\"jumped\"));\n-        assertEquals(\"AFR\", _doubleMetaphone.doubleMetaphone(\"over\"));\n-        assertEquals(\"0\", _doubleMetaphone.doubleMetaphone(\"the\"));\n-        assertEquals(\"LS\", _doubleMetaphone.doubleMetaphone(\"lazy\"));\n-        assertEquals(\"TKS\", _doubleMetaphone.doubleMetaphone(\"dogs\"));\n-        assertEquals(\"MKFR\", _doubleMetaphone.doubleMetaphone(\"MacCafferey\"));\n-\n-        assertEquals(\"TSTN\", _doubleMetaphone.doubleMetaphone(\"testing\", true));\n-        assertEquals(\"T\", _doubleMetaphone.doubleMetaphone(\"The\", true));\n-        assertEquals(\"KK\", _doubleMetaphone.doubleMetaphone(\"quick\", true));\n-        assertEquals(\"PRN\", _doubleMetaphone.doubleMetaphone(\"brown\", true));\n-        assertEquals(\"FKS\", _doubleMetaphone.doubleMetaphone(\"fox\", true));\n-        assertEquals(\"AMPT\", _doubleMetaphone.doubleMetaphone(\"jumped\", true));\n-        assertEquals(\"AFR\", _doubleMetaphone.doubleMetaphone(\"over\", true));\n-        assertEquals(\"T\", _doubleMetaphone.doubleMetaphone(\"the\", true));\n-        assertEquals(\"LS\", _doubleMetaphone.doubleMetaphone(\"lazy\", true));\n-        assertEquals(\"TKS\", _doubleMetaphone.doubleMetaphone(\"dogs\", true));\n-        assertEquals(\"MKFR\", _doubleMetaphone.doubleMetaphone(\"MacCafferey\", true));\n-    }\n-\n-    public void testIsDoubleMetaphoneEqual()\n-    {\n-        doubleMetaphoneEqualTest(false);\n-        doubleMetaphoneEqualTest(true);\n-    }\n-\n-    public void doubleMetaphoneEqualTest(boolean alternate)\n-    {\n-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual(\"Case\", \"case\", alternate));\n-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual(\"CASE\", \"Case\", alternate));\n-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual(\"caSe\", \"cAsE\", alternate));\n-\n-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual(\"cookie\", \"quick\", alternate));\n-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual(\"quick\", \"cookie\", alternate));\n-\n-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual(\"Bryan\", \"Brian\", alternate));\n-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual(\"Brian\", \"Bryan\", alternate));\n-\n-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual(\"Otto\", \"Auto\", alternate));\n-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual(\"Auto\", \"Otto\", alternate));\n-\n-        assertTrue(!_doubleMetaphone.isDoubleMetaphoneEqual(\"Brain\", \"Band\", alternate));\n-        assertTrue(!_doubleMetaphone.isDoubleMetaphoneEqual(\"Band\", \"Brain\", alternate));\n-    }\n-\n-    private DoubleMetaphone _doubleMetaphone = null;\n+        this.setDoubleMetaphone(null);\n+    }\n+\n+    public void testDoubleMetaphone() {\n+        assertDoubleMetaphone(\"TSTN\", \"testing\");\n+        assertDoubleMetaphone(\"0\", \"The\");\n+        assertDoubleMetaphone(\"KK\", \"quick\");\n+        assertDoubleMetaphone(\"PRN\", \"brown\");\n+        assertDoubleMetaphone(\"FKS\", \"fox\");\n+        assertDoubleMetaphone(\"JMPT\", \"jumped\");\n+        assertDoubleMetaphone(\"AFR\", \"over\");\n+        assertDoubleMetaphone(\"0\", \"the\");\n+        assertDoubleMetaphone(\"LS\", \"lazy\");\n+        assertDoubleMetaphone(\"TKS\", \"dogs\");\n+        assertDoubleMetaphone(\"MKFR\", \"MacCafferey\");\n+        assertDoubleMetaphone(\"STFN\", \"Stephan\");\n+        assertDoubleMetaphone(\"KSSK\", \"Kuczewski\");\n+\n+        assertDoubleMetaphoneAlt(\"TSTN\", \"testing\");\n+        assertDoubleMetaphoneAlt(\"T\", \"The\");\n+        assertDoubleMetaphoneAlt(\"KK\", \"quick\");\n+        assertDoubleMetaphoneAlt(\"PRN\", \"brown\");\n+        assertDoubleMetaphoneAlt(\"FKS\", \"fox\");\n+        assertDoubleMetaphoneAlt(\"AMPT\", \"jumped\");\n+        assertDoubleMetaphoneAlt(\"AFR\", \"over\");\n+        assertDoubleMetaphoneAlt(\"T\", \"the\");\n+        assertDoubleMetaphoneAlt(\"LS\", \"lazy\");\n+        assertDoubleMetaphoneAlt(\"TKS\", \"dogs\");\n+        assertDoubleMetaphoneAlt(\"MKFR\", \"MacCafferey\");\n+        assertDoubleMetaphoneAlt(\"STFN\", \"Stephan\");\n+        assertDoubleMetaphoneAlt(\"KXFS\", \"Kutchefski\");\n+    }\n+\n+    public void testEmpty() {\n+        assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(null));\n+        assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(\"\"));\n+        assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(\" \"));\n+        assertEquals(null, this.getDoubleMetaphone().doubleMetaphone(\"\\t\\n\\r \"));\n+    }\n+\n+    public void testIsDoubleMetaphoneEqualBasic() {\n+        String[][] testFixture = new String[][] { { \"Case\", \"case\" }, {\n+                \"CASE\", \"Case\" }, {\n+                \"caSe\", \"cAsE\" }, {\n+                \"cookie\", \"quick\" }, {\n+                \"quick\", \"cookie\" }, {\n+                \"Brian\", \"Bryan\" }, {\n+                \"Auto\", \"Otto\" }, {\n+                \"Steven\", \"Stefan\" }, {\n+                \"Philipowitz\", \"Filipowicz\" }\n+        };\n+        doubleMetaphoneEqualTest(testFixture, false);\n+        doubleMetaphoneEqualTest(testFixture, true);\n+    }\n+\n+    /**\n+\t * Example in the original article but failures in this Java impl:\n+\t */\n+    public void testIsDoubleMetaphoneEqualExtended1() {\n+        //        String[][] testFixture = new String[][] { { \"Smith\", \"Schmidt\" }\n+        //        };\n+        //        doubleMetaphoneEqualTest(testFixture, false);\n+        //        doubleMetaphoneEqualTest(testFixture, true);\n+    }\n+\n+    public void testIsDoubleMetaphoneEqualExtended2() {\n+        String[][] testFixture = new String[][] { { \"Jablonski\", \"Yablonsky\" }\n+        };\n+        //doubleMetaphoneEqualTest(testFixture, false);\n+        doubleMetaphoneEqualTest(testFixture, true);\n+    }\n+\n+    /**\n+\t * Used to generate the MATCHES array and test possible matches from the\n+\t * FIXTURE arrary.\n+\t */\n+    public void testIsDoubleMetaphoneEqualExtended3() {\n+        this.validateFixture(FIXTURE);\n+        StringBuffer failures = new StringBuffer();\n+        StringBuffer matches = new StringBuffer();\n+        String cr = System.getProperty(\"line.separator\");\n+        matches.append(\"private static final String[][] MATCHES = {\" + cr);\n+        int failCount = 0;\n+        for (int i = 0; i < FIXTURE.length; i++) {\n+            String name0 = FIXTURE[i][0];\n+            String name1 = FIXTURE[i][1];\n+            boolean match1 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, false);\n+            boolean match2 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, true);\n+            if (match1 == false && match2 == false) {\n+                String failMsg = \"[\" + i + \"] \" + name0 + \" and \" + name1 + cr;\n+                failures.append(failMsg);\n+                failCount++;\n+            } else {\n+                matches.append(\"{\\\"\" + name0 + \"\\\", \\\"\" + name1 + \"\\\"},\" + cr);\n+            }\n+        }\n+        String msg = failures.toString();\n+        matches.append(\"};\");\n+        // Turn on to print a new MATCH array\n+        //System.out.println(matches.toString());\n+        if (msg.length() > 0) {\n+            // Turn on to see which pairs do NOT match.\n+            //fail(failCount + \" failures out of \" + FIXTURE.length + \". The\n+            // following could be made to match: \" + cr + msg);\n+        }\n+    }\n+\n+    public void testIsDoubleMetaphoneEqualWithMATCHES() {\n+        this.validateFixture(MATCHES);\n+        for (int i = 0; i < MATCHES.length; i++) {\n+            String name0 = MATCHES[i][0];\n+            String name1 = MATCHES[i][1];\n+            boolean match1 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, false);\n+            boolean match2 = this.getDoubleMetaphone().isDoubleMetaphoneEqual(name0, name1, true);\n+            if (match1 == false && match2 == false) {\n+                fail(\"Expected match [\" + i + \"] \" + name0 + \" and \" + name1);\n+            }\n+        }\n+    }\n+\n+    public void testIsDoubleMetaphoneNotEqual() {\n+        doubleMetaphoneNotEqualTest(false);\n+        doubleMetaphoneNotEqualTest(true);\n+    }\n+\n+    public void validateFixture(String[][] pairs) {\n+        if (pairs.length == 0) {\n+            fail(\"Test fixture is empty\");\n+        }\n+        for (int i = 0; i < pairs.length; i++) {\n+            if (pairs[i].length != 2) {\n+                fail(\"Error in test fixture in the data array at index \" + i);\n+            }\n+        }\n+    }\n }", "timestamp": 1068240724, "metainfo": ""}