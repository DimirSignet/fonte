{"sha": "c50e0968c219085d042c8d64d30c716830a3622c", "log": "Modified the test to expect an empty string if the 'fancy' character passed in is not considered a letter by the JVM. See Issue CODEC-51  ", "commit": "\n--- a/src/test/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/SoundexTest.java\n      */\n     public void testUsMappingOWithDiaeresis() {\n         assertEquals(\"O000\", this.getEncoder().encode(\"o\"));\n-        try {\n-            assertEquals(\"000\", this.getEncoder().encode(\"\"));\n-            fail(\"Expected IllegalArgumentException not thrown\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n+        if ( Character.isLetter('') ) {\n+            try {\n+                assertEquals(\"000\", this.getEncoder().encode(\"\"));\n+                fail(\"Expected IllegalArgumentException not thrown\");\n+            } catch (IllegalArgumentException e) {\n+                // expected\n+            }\n+        } else {\n+            assertEquals(\"\", this.getEncoder().encode(\"\"));\n         }\n     }\n \n      */\n     public void testUsMappingEWithAcute() {\n         assertEquals(\"E000\", this.getEncoder().encode(\"e\"));\n-        try {\n-            assertEquals(\"000\", this.getEncoder().encode(\"\"));\n-            fail(\"Expected IllegalArgumentException not thrown\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n+        if ( Character.isLetter('') ) {\n+            try {\n+                assertEquals(\"000\", this.getEncoder().encode(\"\"));\n+                fail(\"Expected IllegalArgumentException not thrown\");\n+            } catch (IllegalArgumentException e) {\n+                // expected\n+            }\n+        } else {\n+            assertEquals(\"\", this.getEncoder().encode(\"\"));\n         }\n     }\n     ", "timestamp": 1163731784, "metainfo": ""}