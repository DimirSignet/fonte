{"sha": "e4b58afe49b8232e0c7a1e051a6cb8580b14d6b6", "log": "undo a little formatting mayhem  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/CompositeFormat.java\n+++ b/src/java/org/apache/commons/lang/text/CompositeFormat.java\n import java.text.ParsePosition;\n \n /**\n- * Formats using one formatter and parses using a different formatter.\n- * An example of use for this would be a webapp where data is taken in one way\n- * and stored in a database another way.\n- *\n+ * Formats using one formatter and parses using a different formatter. An\n+ * example of use for this would be a webapp where data is taken in one way and\n+ * stored in a database another way.\n+ * \n  * @author Archimedes Trajano\n  * @version $Id$\n  */\n     private final Format formatter;\n \n     /**\n-     * Create a format that points its parseObject method to one implementation \n-     * and its format method to another. \n-     *\n+     * Create a format that points its parseObject method to one implementation\n+     * and its format method to another.\n+     * \n      * @param parser implementation\n      * @param formatter implementation\n      */\n     /**\n      * Uses the formatter Format instance.\n      * \n-     * @param obj\n-     *            the object to format\n-     * @param toAppendTo\n-     *            the {@link StringBuffer} to append to\n-     * @param pos\n-     *            the FieldPosition to use (or ignore).\n+     * @param obj the object to format\n+     * @param toAppendTo the {@link StringBuffer} to append to\n+     * @param pos the FieldPosition to use (or ignore).\n      * @return <code>toAppendTo</code>\n      * @see Format#format(Object, StringBuffer, FieldPosition)\n      */\n-    public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n-        return formatter.format(obj,toAppendTo,pos);\n+    public StringBuffer format(Object obj, StringBuffer toAppendTo,\n+            FieldPosition pos) {\n+        return formatter.format(obj, toAppendTo, pos);\n     }\n \n     /**\n      * Uses the parser Format instance.\n      * \n-     * @param source\n-     *            the String source\n-     * @param pos\n-     *            the ParsePosition containing the position to parse from, will\n+     * @param source the String source\n+     * @param pos the ParsePosition containing the position to parse from, will\n      *            be updated according to parsing success (index) or failure\n      *            (error index)\n      * @return the parsed Object\n      * @see Format#parseObject(String, ParsePosition)\n      */\n     public Object parseObject(String source, ParsePosition pos) {\n-        return parser.parseObject(source,pos);\n+        return parser.parseObject(source, pos);\n     }\n \n     /**\n-     * Provides access to the parser Format implementation. \n-     *\n+     * Provides access to the parser Format implementation.\n+     * \n      * @return parser Format implementation\n      */\n     public Format getParser() {\n     }\n \n     /**\n-     * Provides access to the parser Format implementation. \n-     *\n+     * Provides access to the parser Format implementation.\n+     * \n      * @return formatter Format implementation\n      */\n     public Format getFormatter() {\n     }\n \n     /**\n-     * Utility method to parse and then reformat a String. \n+     * Utility method to parse and then reformat a String.\n      * \n      * @param input String to reformat\n      * @return A reformatted String", "timestamp": 1196184874, "metainfo": ""}