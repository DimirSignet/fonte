{"sha": "160a4164a2d66e38577541113c2cd89380ac363f", "log": "Added methods back in that were lost in r397016 (my fault). Testing with jardiff again, there are now no removed or changed methods - in keeping with a minor release.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n      *  (but not both) is <code>null</code>\n      * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n      *  with <code>lhs</code>\n+     * @since 2.2\n      */\n     public static int reflectionCompare(Object lhs, Object rhs, Collection /*String*/ excludeFields) {\n         return reflectionCompare(lhs, rhs, ReflectionToStringBuilder.toNoNullStringArray(excludeFields));\n      *  (but not both) is <code>null</code>\n      * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n      *  with <code>lhs</code>\n+     * @since 2.2\n      */\n     public static int reflectionCompare(Object lhs, Object rhs, String[] excludeFields) {\n         return reflectionCompare(lhs, rhs, false, null, excludeFields);\n+    }\n+\n+    /**\n+     * <p>Compares two <code>Object</code>s via reflection.</p>\n+     *\n+     * <p>Fields can be private, thus <code>AccessibleObject.setAccessible</code>\n+     * is used to bypass normal access control checks. This will fail under a \n+     * security manager unless the appropriate permissions are set.</p>\n+     *\n+     * <ul>\n+     * <li>Static fields will not be compared</li>\n+     * <li>If the <code>compareTransients</code> is <code>true</code>,\n+     *     compares transient members.  Otherwise ignores them, as they\n+     *     are likely derived fields.</li>\n+     * <li>Compares superclass fields up to and including <code>reflectUpToClass</code>.\n+     *     If <code>reflectUpToClass</code> is <code>null</code>, compares all superclass fields.</li>\n+     * </ul>\n+     *\n+     * <p>If both <code>lhs</code> and <code>rhs</code> are <code>null</code>,\n+     * they are considered equal.</p>\n+     *\n+     * @param lhs  left-hand object\n+     * @param rhs  right-hand object\n+     * @param compareTransients  whether to compare transient fields\n+     * @param reflectUpToClass  last superclass for which fields are compared\n+     * @return a negative integer, zero, or a positive integer as <code>lhs</code>\n+     *  is less than, equal to, or greater than <code>rhs</code>\n+     * @throws NullPointerException  if either <code>lhs</code> or <code>rhs</code>\n+     *  (but not both) is <code>null</code>\n+     * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n+     *  with <code>lhs</code>\n+     * @since 2.0\n+     */\n+    public static int reflectionCompare(Object lhs, Object rhs, boolean compareTransients, \n+                                        Class reflectUpToClass) \n+    {\n+        return reflectionCompare(lhs, rhs, false, reflectUpToClass, null);\n     }\n \n     /**\n      *  (but not both) is <code>null</code>\n      * @throws ClassCastException  if <code>rhs</code> is not assignment-compatible\n      *  with <code>lhs</code>\n-     * @since 2.0\n+     * @since 2.2\n      */\n     public static int reflectionCompare(\n         Object lhs, \n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n                                  );\n     }\n             \n+    public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber,\n+                                         Object object, boolean testTransients, Class reflectUpToClass) \n+    {\n+        return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, \n+                                  testTransients, reflectUpToClass, null);\n+    }\n+\n     /**\n      * <p>This method uses reflection to build a valid hash code.</p>\n      *", "timestamp": 1158525413, "metainfo": ""}