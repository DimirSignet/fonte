{"sha": "1d3907bdf748e69efdd8f637487ee13cdd60d81e", "log": "Applying my patch from LANG-374 that adds an unescape method. It stays true to the spec and considers \"foo.bar\" to unescape as \"foo.bar\", ie) no unescaping, because \"foo.bar\" is illegal output from the escape method spec-wise.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n         out.write(CSV_QUOTE);\n     }\n \n+    /**\n+     * <p>Returns a <code>String</code> value for an unescaped CSV column. </p>\n+     *\n+     * <p>If the value is enclosed in double quotes, and contains a comma, newline \n+     *    or double quote, then quotes are removed. \n+     * </p>\n+     *\n+     * <p>Any double quote escaped characters (a pair of double quotes) are unescaped \n+     *    to just one double quote. </p>\n+     *\n+     * <p>If the value is not enclosed in double quotes, or is and does not contain a \n+     *    comma, newline or double quote, then the String value is returned unchanged.</p>\n+     * </p>\n+     *\n+     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n+     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n+     *\n+     * @param str the input CSV column String, may be null\n+     * @return the input String, with enclosing double quotes removed and embedded double \n+     * quotes unescaped, <code>null</code> if null string input\n+     * @since 2.4\n+     */\n+    public static String unescapeCsv(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        try {\n+            StringWriter writer = new StringWriter();\n+            unescapeCsv(writer, str);\n+            return writer.toString();\n+        } catch (IOException ioe) {\n+            // this should never ever happen while writing to a StringWriter\n+            ioe.printStackTrace();\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * <p>Returns a <code>String</code> value for an unescaped CSV column. </p>\n+     *\n+     * <p>If the value is enclosed in double quotes, and contains a comma, newline \n+     *    or double quote, then quotes are removed. \n+     * </p>\n+     *\n+     * <p>Any double quote escaped characters (a pair of double quotes) are unescaped \n+     *    to just one double quote. </p>\n+     *\n+     * <p>If the value is not enclosed in double quotes, or is and does not contain a \n+     *    comma, newline or double quote, then the String value is returned unchanged.</p>\n+     * </p>\n+     *\n+     * see <a href=\"http://en.wikipedia.org/wiki/Comma-separated_values\">Wikipedia</a> and\n+     * <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a>.\n+     *\n+     * @param str the input CSV column String, may be null\n+     * @param out Writer to write the input String to, with enclosing double quotes \n+     * removed and embedded double quotes unescaped, <code>null</code> if null string input\n+     * @throws IOException if error occurs on underlying Writer\n+     * @since 2.4\n+     */\n+    public static void unescapeCsv(Writer out, String str) throws IOException {\n+        if (str == null) {\n+            return;\n+        }\n+        if (str.length() < 2) {\n+            out.write(str);\n+            return;\n+        }\n+        if ( str.charAt(0) != CSV_QUOTE || str.charAt(str.length() - 1) != CSV_QUOTE ) {\n+            out.write(str);\n+            return;\n+        }\n+\n+        // strip quotes\n+        String quoteless = str.substring(1, str.length() - 1);\n+\n+        if ( StringUtils.containsAny(quoteless, CSV_SEARCH_CHARS) ) {\n+            // deal with escaped quotes; ie) \"\"\n+            str = StringUtils.replace(quoteless, \"\" + CSV_QUOTE + CSV_QUOTE, Character.toString(CSV_QUOTE));\n+        }\n+\n+        out.write(str);\n+    }\n+\n }\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n         assertEquals(\"& &\", StringEscapeUtils.unescapeHtml(\"& &amp;\"));\n     }\n \n-\n     public void testEscapeCsvString() throws Exception\n     {\n         assertEquals(\"foo.bar\",          StringEscapeUtils.escapeCsv(\"foo.bar\"));\n             fail(\"Threw: \" + e);\n         }\n     }\n+\n+    public void testUnescapeCsvString() throws Exception\n+    {\n+        assertEquals(\"foo.bar\",          StringEscapeUtils.unescapeCsv(\"foo.bar\"));\n+        assertEquals(\"foo,bar\",      StringEscapeUtils.unescapeCsv(\"\\\"foo,bar\\\"\"));\n+        assertEquals(\"foo\\nbar\",     StringEscapeUtils.unescapeCsv(\"\\\"foo\\nbar\\\"\"));\n+        assertEquals(\"foo\\rbar\",     StringEscapeUtils.unescapeCsv(\"\\\"foo\\rbar\\\"\"));\n+        assertEquals(\"foo\\\"bar\",   StringEscapeUtils.unescapeCsv(\"\\\"foo\\\"\\\"bar\\\"\"));\n+        assertEquals(\"\",   StringEscapeUtils.unescapeCsv(\"\"));\n+        assertEquals(null, StringEscapeUtils.unescapeCsv(null));\n+\n+        assertEquals(\"\\\"foo.bar\\\"\",          StringEscapeUtils.unescapeCsv(\"\\\"foo.bar\\\"\"));\n+    }\n+\n+    public void testUnescapeCsvWriter() throws Exception\n+    {\n+        checkCsvUnescapeWriter(\"foo.bar\",        \"foo.bar\");\n+        checkCsvUnescapeWriter(\"foo,bar\",    \"\\\"foo,bar\\\"\");\n+        checkCsvUnescapeWriter(\"foo\\nbar\",   \"\\\"foo\\nbar\\\"\");\n+        checkCsvUnescapeWriter(\"foo\\rbar\",   \"\\\"foo\\rbar\\\"\");\n+        checkCsvUnescapeWriter(\"foo\\\"bar\", \"\\\"foo\\\"\\\"bar\\\"\");\n+        checkCsvUnescapeWriter(\"\", null);\n+        checkCsvUnescapeWriter(\"\", \"\");\n+\n+        checkCsvUnescapeWriter(\"\\\"foo.bar\\\"\",        \"\\\"foo.bar\\\"\");\n+    }\n+\n+    private void checkCsvUnescapeWriter(String expected, String value) {\n+        try {\n+            StringWriter writer = new StringWriter();\n+            StringEscapeUtils.unescapeCsv(writer, value);\n+            assertEquals(expected, writer.toString());\n+        } catch (IOException e) {\n+            fail(\"Threw: \" + e);\n+        }\n+    }\n }", "timestamp": 1199514792, "metainfo": ""}