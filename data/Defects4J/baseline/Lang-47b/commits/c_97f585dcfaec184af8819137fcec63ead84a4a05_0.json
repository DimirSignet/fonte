{"sha": "97f585dcfaec184af8819137fcec63ead84a4a05", "log": "Add SystemUtils tests   ", "commit": "\n--- a/src/test/org/apache/commons/lang/LangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/LangTestSuite.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Matthew Hawthorne\n- * @version $Id: LangTestSuite.java,v 1.17 2003/05/24 04:38:05 alex Exp $\n+ * @version $Id: LangTestSuite.java,v 1.18 2003/05/24 12:11:02 scolebourne Exp $\n  */\n public class LangTestSuite extends TestCase {\n     \n         suite.addTest(StringUtilsEqualsIndexOfTest.suite());\n         suite.addTest(StringUtilsIsTest.suite());\n         suite.addTest(StringEscapeUtilsTest.suite());\n+        suite.addTest(SystemUtilsTest.suite());\n         suite.addTest(UnhandledExceptionTest.suite());\n         suite.addTest(WordWrapUtilsTest.suite());\n         return suite;\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/SystemUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang.SystemUtils}.\n+ * \n+ * Only limited testing can be performed.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: SystemUtilsTest.java,v 1.1 2003/05/24 12:11:02 scolebourne Exp $\n+ */\n+public class SystemUtilsTest extends TestCase {\n+\n+    public SystemUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(SystemUtilsTest.class);\n+        suite.setName(\"SystemUtils Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    // COPIED FROM SystemUtils\n+    //-----------------------------------------------------------------------\n+    private String JAVA_VERSION;\n+    /**\n+     * Decides if the java version matches.\n+     * \n+     * @param versionPrefix  the prefix for the java version\n+     * @return true if matches, or false if not or can't determine\n+     */\n+    private boolean getJavaVersionMatches(String versionPrefix) {\n+        if (JAVA_VERSION == null) {\n+            return false;\n+        }\n+        return JAVA_VERSION.startsWith(versionPrefix);\n+    }    \n+\n+    /**\n+     * <p>Get the Java version number as a <code>float</code>.</p>\n+     *\n+     * <p>Example output:</p>\n+     * <ul>\n+     *  <li><code>1.2f</code> for JDK 1.2\n+     *  <li><code>1.31f</code> for JDK 1.3.1\n+     * </ul>\n+     * \n+     * <p>Patch releases are not reported.\n+     * Zero is returned if JAVA_VERSION is <code>null</code>.</p>\n+     * \n+     * @return the version, for example 1.31f for JDK 1.3.1\n+     */\n+    private float getJavaVersionAsFloat() {\n+        if (JAVA_VERSION == null) {\n+            return 0f;\n+        }\n+        String str = JAVA_VERSION.substring(0, 3);\n+        if (JAVA_VERSION.length() >= 5) {\n+            str = str + JAVA_VERSION.substring(4, 5);\n+        }\n+        return Float.parseFloat(str);\n+    }\n+    \n+    /**\n+     * <p>Get the Java version number as an <code>int</code>.</p>\n+     *\n+     * <p>Example output:</p>\n+     * <ul>\n+     *  <li><code>120</code> for JDK 1.2\n+     *  <li><code>131</code> for JDK 1.3.1\n+     * </ul>\n+     * \n+     * <p>Patch releases are not reported.\n+     * Zero is returned if JAVA_VERSION is <code>null</code>.</p>\n+     * \n+     * @return the version, for example 131 for JDK 1.3.1\n+     */\n+    private int getJavaVersionAsInt() {\n+        if (JAVA_VERSION == null) {\n+            return 0;\n+        }\n+        String str = JAVA_VERSION.substring(0, 1);\n+        str = str + JAVA_VERSION.substring(2, 3);\n+        if (JAVA_VERSION.length() >= 5) {\n+            str = str + JAVA_VERSION.substring(4, 5);\n+        } else {\n+            str = str + \"0\";\n+        }\n+        return Integer.parseInt(str);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testJavaVersionMatches() {\n+        JAVA_VERSION = null;\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.1\";\n+        assertEquals(true, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.2\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.3.0\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.3.1\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.4.0\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.4.1\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.5.0\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(true, getJavaVersionMatches(\"1.5\"));\n+        JAVA_VERSION = \"1.6.0\";\n+        assertEquals(false, getJavaVersionMatches(\"1.1\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.2\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.3\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.4\"));\n+        assertEquals(false, getJavaVersionMatches(\"1.5\"));\n+    }\n+   \n+    public void testJavaVersionAsFloat() {\n+        JAVA_VERSION = null;\n+        assertEquals(0f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.1\";\n+        assertEquals(1.1f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.2\";\n+        assertEquals(1.2f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.3.0\";\n+        assertEquals(1.3f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.3.1\";\n+        assertEquals(1.31f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.4.0\";\n+        assertEquals(1.4f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.4.1\";\n+        assertEquals(1.41f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.5.0\";\n+        assertEquals(1.5f, getJavaVersionAsFloat(), 0.000001f);\n+        JAVA_VERSION = \"1.6.0\";\n+        assertEquals(1.6f, getJavaVersionAsFloat(), 0.000001f);\n+    }\n+    \n+    public void testJavaVersionAsInt() {\n+        JAVA_VERSION = null;\n+        assertEquals(0, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.1\";\n+        assertEquals(110, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.2\";\n+        assertEquals(120, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.3.0\";\n+        assertEquals(130, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.3.1\";\n+        assertEquals(131, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.4.0\";\n+        assertEquals(140, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.4.1\";\n+        assertEquals(141, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.5.0\";\n+        assertEquals(150, getJavaVersionAsInt());\n+        JAVA_VERSION = \"1.6.0\";\n+        assertEquals(160, getJavaVersionAsInt());\n+    }\n+    \n+    public void testJavaVersionAtLeastFloat() {\n+        float version = SystemUtils.JAVA_VERSION_FLOAT;\n+        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n+        version -= 0.1f;\n+        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n+        version += 0.2f;\n+        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n+    }\n+    \n+    public void testJavaVersionAtLeastInt() {\n+        int version = SystemUtils.JAVA_VERSION_INT;\n+        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n+        version -= 10;\n+        assertEquals(true, SystemUtils.isJavaVersionAtLeast(version));\n+        version += 20;\n+        assertEquals(false, SystemUtils.isJavaVersionAtLeast(version));\n+    }\n+    \n+}", "timestamp": 1053778262, "metainfo": ""}