{"sha": "01651dd0048ad801f161486fa8f17869b545490c", "log": "Rolling back r467482 as the methods are already in java.util.Arrays. These were added as a part of #LANG-238.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n         return new BigDecimal(str);\n     }\n \n-    // Equals in array\n-    //--------------------------------------------------------------------\n-    /**\n-     * <p>Whether the contents of two byte[] arrays are equal.</p>\n-     * \n-     * @param array1  first array to compare\n-     * @param array2  second array to compare\n-     * @return whether the two arrays are equal\n-     */\n-    public static boolean equals(byte[] array1, byte[] array2) {\n-        if (array1 == array2) {\n-            return true;\n-        }\n-        if (array1 == null || array2 == null) {\n-            return false;\n-        }\n-        if (array1.length != array2.length) {\n-            return false;\n-        }\n-\n-        for (int i=0; i<array1.length; i++) {\n-            if (array1[i] != array2[i]) {\n-                return false;\n-            }\n-        }\n-\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Whether the contents of two short[] arrays are equal.</p>\n-     * \n-     * @param array1  first array to compare\n-     * @param array2  second array to compare\n-     * @return whether the two arrays are equal\n-     */\n-    public static boolean equals(short[] array1, short[] array2) {\n-        if (array1 == array2) {\n-            return true;\n-        }\n-        if (array1 == null || array2 == null) {\n-            return false;\n-        }\n-        if (array1.length != array2.length) {\n-            return false;\n-        }\n-\n-        for (int i=0; i<array1.length; i++) {\n-            if (array1[i] != array2[i]) {\n-                return false;\n-            }\n-        }\n-\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Whether the contents of two int[] arrays are equal.</p>\n-     * \n-     * @param array1  first array to compare\n-     * @param array2  second array to compare\n-     * @return whether the two arrays are equal\n-     */\n-    public static boolean equals(int[] array1, int[] array2) {\n-        if (array1 == array2) {\n-            return true;\n-        }\n-        if (array1 == null || array2 == null) {\n-            return false;\n-        }\n-        if (array1.length != array2.length) {\n-            return false;\n-        }\n-\n-        for (int i=0; i<array1.length; i++) {\n-            if (array1[i] != array2[i]) {\n-                return false;\n-            }\n-        }\n-\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Whether the contents of two long[] arrays are equal.</p>\n-     * \n-     * @param array1  first array to compare\n-     * @param array2  second array to compare\n-     * @return whether the two arrays are equal\n-     */\n-    public static boolean equals(long[] array1, long[] array2) {\n-        if (array1 == array2) {\n-            return true;\n-        }\n-        if (array1 == null || array2 == null) {\n-            return false;\n-        }\n-        if (array1.length != array2.length) {\n-            return false;\n-        }\n-\n-        for (int i=0; i<array1.length; i++) {\n-            if (array1[i] != array2[i]) {\n-                return false;\n-            }\n-        }\n-\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Whether the contents of two float[] arrays are equal.</p>\n-     * \n-     * @param array1  first array to compare\n-     * @param array2  second array to compare\n-     * @return whether the two arrays are equal\n-     */\n-    public static boolean equals(float[] array1, float[] array2) {\n-        if (array1 == array2) {\n-            return true;\n-        }\n-        if (array1 == null || array2 == null) {\n-            return false;\n-        }\n-        if (array1.length != array2.length) {\n-            return false;\n-        }\n-\n-        for (int i=0; i<array1.length; i++) {\n-            if (compare(array1[i], array2[i]) != 0) {\n-                return false;\n-            }\n-        }\n-\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Whether the contents of two double[] arrays are equal.</p>\n-     * \n-     * @param array1  first array to compare\n-     * @param array2  second array to compare\n-     * @return whether the two arrays are equal\n-     */\n-    public static boolean equals(double[] array1, double[] array2) {\n-        if (array1 == array2) {\n-            return true;\n-        }\n-        if (array1 == null || array2 == null) {\n-            return false;\n-        }\n-        if (array1.length != array2.length) {\n-            return false;\n-        }\n-\n-        for (int i=0; i<array1.length; i++) {\n-            if (compare(array1[i], array2[i]) != 0) {\n-                return false;\n-            }\n-        }\n-\n-        return true;\n-    }\n-\n     // Min in array\n     //--------------------------------------------------------------------\n     /**\n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n         } catch (NumberFormatException ex) {\n             // empty\n         }\n-    }\n-\n-    // equals tests\n-    // ----------------------------------------------------------------------\n-    public void testEqualsByte() {\n-        byte[] array1 = null;\n-        byte[] array2 = null;\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-        assertEquals( true, NumberUtils.equals(array2, array1) );\n-\n-        array1 = new byte[] { 50, 20 }; // array2 still null\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-        assertEquals( false, NumberUtils.equals(array2, array1) );\n-\n-        // test same reference equivalence\n-        array2 = array1;\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-\n-        // test object equivalence\n-        array2 = new byte[] { 50, 20 };\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-\n-        // test symmetry is not equivalent\n-        array2 = new byte[] { 20, 50 };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-\n-        // test the whole length of rhs is tested against\n-        array2 = new byte[] { 50, 20, 10 };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-\n-        // test whole length of lhs is tested against\n-        array2 = new byte[] { 50 };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-    }\n-\n-    public void testEqualsShort() {\n-        short[] array1 = null;\n-        short[] array2 = null;\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-        assertEquals( true, NumberUtils.equals(array2, array1) );\n-\n-        array1 = new short[] { 50, 20 }; // array2 still null\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-        assertEquals( false, NumberUtils.equals(array2, array1) );\n-\n-        // test same reference equivalence\n-        array2 = array1;\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-\n-        // test object equivalence\n-        array2 = new short[] { 50, 20 };\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-\n-        // test symmetry is not equivalent\n-        array2 = new short[] { 20, 50 };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-\n-        // test the whole length of rhs is tested against\n-        array2 = new short[] { 50, 20, 10 };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-\n-        // test whole length of lhs is tested against\n-        array2 = new short[] { 50 };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-    }\n-\n-    public void testEqualsInt() {\n-        int[] array1 = null;\n-        int[] array2 = null;\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-        assertEquals( true, NumberUtils.equals(array2, array1) );\n-\n-        array1 = new int[] { 50, 20 }; // array2 still null\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-        assertEquals( false, NumberUtils.equals(array2, array1) );\n-\n-        // test same reference equivalence\n-        array2 = array1;\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-\n-        // test object equivalence\n-        array2 = new int[] { 50, 20 };\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-\n-        // test symmetry is not equivalent\n-        array2 = new int[] { 20, 50 };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-\n-        // test the whole length of rhs is tested against\n-        array2 = new int[] { 50, 20, 10 };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-\n-        // test whole length of lhs is tested against\n-        array2 = new int[] { 50 };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-    }\n-\n-    public void testEqualsLong() {\n-        long[] array1 = null;\n-        long[] array2 = null;\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-        assertEquals( true, NumberUtils.equals(array2, array1) );\n-\n-        array1 = new long[] { 50L, 20L }; // array2 still null\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-        assertEquals( false, NumberUtils.equals(array2, array1) );\n-\n-        // test same reference equivalence\n-        array2 = array1;\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-\n-        // test object equivalence\n-        array2 = new long[] { 50L, 20L };\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-\n-        // test symmetry is not equivalent\n-        array2 = new long[] { 20L, 50L };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-\n-        // test the whole length of rhs is tested against\n-        array2 = new long[] { 50L, 20L, 10L };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-\n-        // test whole length of lhs is tested against\n-        array2 = new long[] { 50L };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-    }\n-\n-    public void testEqualsFloat() {\n-        float[] array1 = null;\n-        float[] array2 = null;\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-        assertEquals( true, NumberUtils.equals(array2, array1) );\n-\n-        array1 = new float[] { 50.6f, 20.6f }; // array2 still null\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-        assertEquals( false, NumberUtils.equals(array2, array1) );\n-\n-        // test same reference equivalence\n-        array2 = array1;\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-\n-        // test object equivalence\n-        array2 = new float[] { 50.6f, 20.6f };\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-\n-        // test symmetry is not equivalent\n-        array2 = new float[] { 20.6f, 50.6f };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-\n-        // test the whole length of rhs is tested against\n-        array2 = new float[] { 50.6f, 20.6f, 10.6f };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-\n-        // test whole length of lhs is tested against\n-        array2 = new float[] { 50.6f };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-    }\n-\n-    public void testEqualsDouble() {\n-        double[] array1 = null;\n-        double[] array2 = null;\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-        assertEquals( true, NumberUtils.equals(array2, array1) );\n-\n-        array1 = new double[] { 50.6, 20.6 }; // array2 still null\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-        assertEquals( false, NumberUtils.equals(array2, array1) );\n-\n-        // test same reference equivalence\n-        array2 = array1;\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-\n-        // test object equivalence\n-        array2 = new double[] { 50.6, 20.6 };\n-        assertEquals( true, NumberUtils.equals(array1, array2) );\n-\n-        // test symmetry is not equivalent\n-        array2 = new double[] { 20.6, 50.6 };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-\n-        // test the whole length of rhs is tested against\n-        array2 = new double[] { 50.6, 20.6, 10.6 };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n-\n-        // test whole length of lhs is tested against\n-        array2 = new double[] { 50.6 };\n-        assertEquals( false, NumberUtils.equals(array1, array2) );\n     }\n \n     // min/max tests", "timestamp": 1167418117, "metainfo": ""}