{"sha": "ced9332981d2efce73e17809ba9e5e5b7cfd369f", "log": "Improve CharSet testing bug 22095, from Phil Steitz Rewrite CharSet parsing, much neater and simpler now   ", "commit": "\n--- a/src/java/org/apache/commons/lang/CharSet.java\n+++ b/src/java/org/apache/commons/lang/CharSet.java\n  *\n  * @author Henri Yandell\n  * @author Stephen Colebourne\n+ * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: CharSet.java,v 1.10 2003/08/02 18:18:33 scolebourne Exp $\n+ * @version $Id: CharSet.java,v 1.11 2003/08/04 00:50:14 scolebourne Exp $\n  */\n public class CharSet implements Serializable {\n \n      *  - set containing all the characters from the individual sets</li>\n      * </ul>\n      * \n+     * <p>The matching order is:</p>\n+     * <ol\n+     *  <li>Negated multi character range, such as \"^a-e\"\n+     *  <li>Ordinary multi character range, such as \"a-e\"\n+     *  <li>Negated single character, such as \"^a\"\n+     *  <li>Ordinary single character, such as \"a\"\n+     * </ol>\n+     * <p>Matching works left to right. Once a match is found the\n+     * search starts again from the next character.</p>\n+     * \n      * <p>If the same range is defined twice using the same syntax, only\n      * one range will be kept.\n-     * Thus, \"a-ca-c\" creates only one range of \"a-c\".\n-     * However, \"a-cabc\" creates two ranges as they are defined differently.</p>\n+     * Thus, \"a-ca-c\" creates only one range of \"a-c\".</p>\n+     *\n+     * <p>If the start and end of a range are in the wrong order,\n+     * they are reversed. Thus \"a-e\" is the same as \"e-a\".\n+     * As a result, \"a-ee-a\" would create only one range,\n+     * as the \"a-e\" and \"e-a\" are the same.</p>\n+     *\n+     * <p>The set of characters represented is the union of the specified ranges.</p>\n      *\n      * <p>All CharSet objects returned by this method will be immutable.</p>\n      * \n         }\n \n         int len = str.length();\n-        switch (len) {\n-            case 0:\n-            // do nothing\n-            break;\n-            \n-            case 1:\n-            set.add(new CharRange(str.charAt(0)));\n-            break;\n-            \n-            default:\n-            int start = -1;\n-            boolean negated = false;\n-            for (int i = 0; i < len; i++) {\n-                char ch = str.charAt(i);\n-                if (ch == '-') {\n-                    if (start == -1) {\n-                        // dash found not as range separator\n-                        // treat as ordinary start block char\n-                        start = ch; \n-                    } else if (i == len - 1) {\n-                        // dash is last character, store two single characters\n-                        set.add(new CharRange((char) start, (char) start, negated));\n-                        set.add(DASH);\n-                        start = -1;\n-                        negated = false;\n-                    } else {\n-                        // range block found, store it\n-                        set.add(new CharRange((char) start, str.charAt(++i), negated));\n-                        start = -1;\n-                        negated = false;\n-                    }\n-                } else if (ch == '^') {\n-                    if (start == -1) {\n-                        if (negated) {\n-                            // double negate, treat second as ordinary start block char\n-                            start = ch;\n-                        } else {\n-                            // negate next block\n-                            negated = true;\n-                        }\n-                    } else {\n-                        // previous block has ended, store it\n-                        set.add(new CharRange((char) start, (char) start, negated));\n-                        start = -1;\n-                        negated = true;\n-                    }\n-                } else {\n-                    if (start == -1) {\n-                        // start of block\n-                        start = ch;\n-                    } else {\n-                        // previous block has ended, store it, and start next block\n-                        set.add(new CharRange((char) start, (char) start, negated));\n-                        start = ch;\n-                        negated = false;\n-                    }\n-                }\n+        int pos = 0;\n+        while (pos < len) {\n+            int remainder = (len - pos);\n+            if (remainder >= 4 && str.charAt(pos) == '^' && str.charAt(pos + 2) == '-') {\n+                // negated range\n+                set.add(new CharRange(str.charAt(pos + 1), str.charAt(pos + 3), true));\n+                pos += 4;\n+            } else if (remainder >= 3 && str.charAt(pos + 1) == '-') {\n+                // range\n+                set.add(new CharRange(str.charAt(pos), str.charAt(pos + 2)));\n+                pos += 3;\n+            } else if (remainder >= 2 && str.charAt(pos) == '^') {\n+                // negated char\n+                set.add(new CharRange(str.charAt(pos + 1), true));\n+                pos += 2;\n+            } else {\n+                // char\n+                set.add(new CharRange(str.charAt(pos)));\n+                pos += 1;\n             }\n-            // handle leftovers\n-            if (start != -1) {\n-                set.add(new CharRange((char) start, (char) start, negated));\n-            } else if (negated) {\n-                set.add(NEGATE);\n-            }\n-            break;\n         }\n     }\n \n--- a/src/java/org/apache/commons/lang/CharSetUtils.java\n+++ b/src/java/org/apache/commons/lang/CharSetUtils.java\n  * \n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author Stephen Colebourne\n+ * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: CharSetUtils.java,v 1.20 2003/08/02 18:18:33 scolebourne Exp $\n+ * @version $Id: CharSetUtils.java,v 1.21 2003/08/04 00:50:14 scolebourne Exp $\n  */\n public class CharSetUtils {\n \n     // Factory\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Creates a <code>CharSetUtils</code> object which allows a certain amount of\n+     * <p>Creates a <code>CharSet</code> instance which allows a certain amount of\n      * set logic to be performed.</p>\n      * <p>The syntax is:</p>\n      * <ul>\n      *  <li>&quot;aeio&quot; which implies 'a','e',..</li>\n-     *  <li>&quot;^e&quot; implies not e. However it only negates, it's not\n-     *   a set in itself due to the size of that set in unicode.</li>\n+     *  <li>&quot;^e&quot; implies not e.</li>\n      *  <li>&quot;ej-m&quot; implies e,j->m. e,j,k,l,m.</li>\n      * </ul>\n      * \n      * CharSetUtils.evaluateSet(null)  = null\n      * CharSetUtils.evaluateSet(\"\")    = CharSet matching nothing\n      * CharSetUtils.evaluateSet(\"a-e\") = CharSet matching a,b,c,d,e\n+     * CharSetUtils.evaluateSet(\"abe-g\") = CharSet matching a,b,e,f,g\n      * </pre>\n      *\n      * @param set  the set, may be null\n     }\n \n     /**\n-     * <p>Creates a <code>CharSetUtils</code> object which allows a certain amount of\n+     * <p>Creates a <code>CharSet</code> instance which allows a certain amount of\n      * set logic to be performed.</p>\n      * <p>The syntax is:</p>\n      * <ul>\n      *  <li>&quot;aeio&quot; which implies 'a','e',..</li>\n-     *  <li>&quot;^e&quot; implies not e. However it only negates, it's not\n-     *   a set in itself due to the size of that set in unicode.</li>\n+     *  <li>&quot;^e&quot; implies not e.</li>\n      *  <li>&quot;ej-m&quot; implies e,j->m. e,j,k,l,m.</li>\n      * </ul>\n      * \n--- a/src/test/org/apache/commons/lang/CharSetTest.java\n+++ b/src/test/org/apache/commons/lang/CharSetTest.java\n  * Unit tests {@link org.apache.commons.lang.CharSet}.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: CharSetTest.java,v 1.1 2003/08/02 18:18:33 scolebourne Exp $\n+ * @author Phil Steitz\n+ * @version $Id: CharSetTest.java,v 1.2 2003/08/04 00:50:14 scolebourne Exp $\n  */\n public class CharSetTest extends TestCase {\n     \n         set = CharSet.getInstance(\"^\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^'))); // \"^\"\n         \n         set = CharSet.getInstance(\"^^\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // \"^^\"\n         \n         set = CharSet.getInstance(\"^^^\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true)));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // \"^^\"\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^'))); // \"^\"\n         \n         set = CharSet.getInstance(\"^^^^\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // \"^^\" x2\n         \n         set = CharSet.getInstance(\"a^\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a')));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a'))); // \"a\"\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^'))); // \"^\"\n         \n         set = CharSet.getInstance(\"^a-\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true)));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', 'a', true))); // \"^a\"\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('-'))); // \"-\"\n         \n         set = CharSet.getInstance(\"^^-c\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', 'c', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', 'c', true))); // \"^^-c\"\n         \n         set = CharSet.getInstance(\"^c-^\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true)));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true))); // \"^c-^\"\n         \n         set = CharSet.getInstance(\"^c-^d\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true)));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('d')));\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('c', '^', true))); // \"^c-^\"\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('d'))); // \"d\"\n         \n         set = CharSet.getInstance(\"^^-\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true)));\n-        assertEquals(true, ArrayUtils.contains(array, new CharRange('-')));\n-    }\n-    \n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^', '^', true))); // \"^^\"\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('-'))); // \"-\"\n+    }\n+    \n+    public void testConstructor_String_oddCombinations() {\n+        CharSet set;\n+        CharRange[] array = null;\n+        \n+        set = CharSet.getInstance(\"a-^c\");\n+        array = set.getCharRanges();\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '^'))); // \"a-^\"\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('c'))); // \"c\"\n+        assertEquals(false, set.contains('b'));\n+        assertEquals(true, set.contains('^'));  \n+        assertEquals(true, set.contains('_')); // between ^ and a\n+        assertEquals(true, set.contains('c'));  \n+        \n+        set = CharSet.getInstance(\"^a-^c\");\n+        array = set.getCharRanges();\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', '^', true))); // \"^a-^\"\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('c'))); // \"c\"\n+        assertEquals(true, set.contains('b'));\n+        assertEquals(false, set.contains('^'));  \n+        assertEquals(false, set.contains('_')); // between ^ and a\n+        \n+        set = CharSet.getInstance(\"a- ^-- \"); //contains everything\n+        array = set.getCharRanges();\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('a', ' '))); // \"a- \"\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('-', ' ', true))); // \"^-- \"\n+        assertEquals(true, set.contains('#'));\n+        assertEquals(true, set.contains('^'));\n+        assertEquals(true, set.contains('a'));\n+        assertEquals(true, set.contains('*'));\n+        assertEquals(true, set.contains('A'));\n+        \n+        set = CharSet.getInstance(\"^-b\");\n+        array = set.getCharRanges();\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^','b'))); // \"^-b\"\n+        assertEquals(true, set.contains('b'));\n+        assertEquals(true, set.contains('_')); // between ^ and a\n+        assertEquals(false, set.contains('A'));\n+        assertEquals(true, set.contains('^')); \n+        \n+        set = CharSet.getInstance(\"b-^\");\n+        array = set.getCharRanges();\n+        assertEquals(true, ArrayUtils.contains(array, new CharRange('^','b'))); // \"b-^\"\n+        assertEquals(true, set.contains('b'));\n+        assertEquals(true, set.contains('^'));\n+        assertEquals(true, set.contains('a')); // between ^ and b\n+        assertEquals(false, set.contains('c')); \n+    }\n+        \n     //-----------------------------------------------------------------------    \n     public void testEquals_Object() {\n         CharSet abc = CharSet.getInstance(\"abc\");\n     //-----------------------------------------------------------------------    \n     public void testContains_Char() {\n         CharSet btod = CharSet.getInstance(\"b-d\");\n+        CharSet dtob = CharSet.getInstance(\"d-b\");\n         CharSet bcd = CharSet.getInstance(\"bcd\");\n         CharSet bd = CharSet.getInstance(\"bd\");\n         CharSet notbtod = CharSet.getInstance(\"^b-d\");\n         assertEquals(false, notbtod.contains('c'));\n         assertEquals(false, notbtod.contains('d'));\n         assertEquals(true, notbtod.contains('e'));\n+        \n+        assertEquals(false, dtob.contains('a'));\n+        assertEquals(true, dtob.contains('b'));\n+        assertEquals(true, dtob.contains('c'));\n+        assertEquals(true, dtob.contains('d'));\n+        assertEquals(false, dtob.contains('e'));\n+      \n+        CharRange[] array = dtob.getCharRanges();\n+        assertEquals(\"[b-d]\", dtob.toString());\n+        assertEquals(1, array.length);\n     }\n     \n     //-----------------------------------------------------------------------    ", "timestamp": 1059958214, "metainfo": ""}