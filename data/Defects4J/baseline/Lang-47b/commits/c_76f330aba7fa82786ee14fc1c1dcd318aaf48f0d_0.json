{"sha": "76f330aba7fa82786ee14fc1c1dcd318aaf48f0d", "log": "Add ObjectUtils.hashCode() - a null safe hash code bug 28554, from Mario Winterer   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n+ * @author Mario Winterer\n  * @since 1.0\n- * @version $Id: ObjectUtils.java,v 1.23 2004/02/18 22:59:50 ggregory Exp $\n+ * @version $Id: ObjectUtils.java,v 1.24 2004/06/01 21:08:48 scolebourne Exp $\n  */\n public class ObjectUtils {\n     \n         }\n         return object1.equals(object2);\n     }\n-    \n+\n+    /**\n+     * <p>Gets the hash code of an object returning zero when the\n+     * object is <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * ObjectUtils.hashCode(null)   = 0\n+     * ObjectUtils.hashCode(obj)    = obj.hashCode()\n+     * </pre>\n+     *\n+     * @param obj  the object to obtain the hash code of, may be <code>null</code>\n+     * @return the hash code of the object, or zero if null\n+     * @since 2.1\n+     */\n+    public static int hashCode(Object obj) {\n+        return ((obj == null) ? 0 : obj.hashCode());\n+    }\n+\n     // Identity ToString\n     //-----------------------------------------------------------------------\n     /**\n--- a/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: ObjectUtilsTest.java,v 1.12 2004/02/18 23:06:19 ggregory Exp $\n+ * @version $Id: ObjectUtilsTest.java,v 1.13 2004/06/01 21:08:48 scolebourne Exp $\n  */\n public class ObjectUtilsTest extends TestCase {\n     private static final String FOO = \"foo\";\n         assertTrue(\"ObjectUtils.equals(\\\"foo\\\", \\\"foo\\\") returned false\", ObjectUtils.equals(FOO, FOO));\n     }\n \n-    /**\n-     * Show that java.util.Date and java.sql.Timestamp are apples and oranges.\n-     * Prompted by an email discussion. \n-     * \n-     * The behavior is different b/w Sun Java 1.3.1_10 and 1.4.2_03.\n-     */\n-    public void testDateEqualsJava() {\n-        long now = 1076957313284L; // Feb 16, 2004 10:49... PST\n-        java.util.Date date = new java.util.Date(now);\n-        java.sql.Timestamp realTimestamp = new java.sql.Timestamp(now);\n-        java.util.Date timestamp = realTimestamp;\n-        // sanity check 1:\n-        assertEquals(284000000, realTimestamp.getNanos());\n-        assertEquals(1076957313284L, date.getTime());\n-        //\n-        // On Sun 1.3.1_10:\n-        //junit.framework.AssertionFailedError: expected:<1076957313284> but was:<1076957313000>\n-        //\n-        //assertEquals(1076957313284L, timestamp.getTime());\n-        //\n-        //junit.framework.AssertionFailedError: expected:<1076957313284> but was:<1076957313000>\n-        //\n-        //assertEquals(1076957313284L, realTimestamp.getTime());\n-        // sanity check 2:        \n-        assertEquals(date.getDay(), realTimestamp.getDay());\n-        assertEquals(date.getHours(), realTimestamp.getHours());\n-        assertEquals(date.getMinutes(), realTimestamp.getMinutes());\n-        assertEquals(date.getMonth(), realTimestamp.getMonth());\n-        assertEquals(date.getSeconds(), realTimestamp.getSeconds());\n-        assertEquals(date.getTimezoneOffset(), realTimestamp.getTimezoneOffset());\n-        assertEquals(date.getYear(), realTimestamp.getYear());\n-        //\n-        // Time values are == and equals() on Sun 1.4.2_03 but NOT on Sun 1.3.1_10:\n-        //\n-        //assertFalse(\"Sanity check failed: date.getTime() == timestamp.getTime()\", date.getTime() == timestamp.getTime());\n-        //assertFalse(\"Sanity check failed: timestamp.equals(date)\", timestamp.equals(date));\n-        //assertFalse(\"Sanity check failed: date.equals(timestamp)\", date.equals(timestamp));\n-        // real test:\n-        //assertFalse(\"java.util.Date and java.sql.Timestamp should be equal\", ObjectUtils.equals(date, timestamp));\n+    public void testHashCode() {\n+        assertEquals(0, ObjectUtils.hashCode(null));\n+        assertEquals(\"a\".hashCode(), ObjectUtils.hashCode(\"a\"));\n     }\n+\n+//    /**\n+//     * Show that java.util.Date and java.sql.Timestamp are apples and oranges.\n+//     * Prompted by an email discussion. \n+//     * \n+//     * The behavior is different b/w Sun Java 1.3.1_10 and 1.4.2_03.\n+//     */\n+//    public void testDateEqualsJava() {\n+//        long now = 1076957313284L; // Feb 16, 2004 10:49... PST\n+//        java.util.Date date = new java.util.Date(now);\n+//        java.sql.Timestamp realTimestamp = new java.sql.Timestamp(now);\n+//        java.util.Date timestamp = realTimestamp;\n+//        // sanity check 1:\n+//        assertEquals(284000000, realTimestamp.getNanos());\n+//        assertEquals(1076957313284L, date.getTime());\n+//        //\n+//        // On Sun 1.3.1_10:\n+//        //junit.framework.AssertionFailedError: expected:<1076957313284> but was:<1076957313000>\n+//        //\n+//        //assertEquals(1076957313284L, timestamp.getTime());\n+//        //\n+//        //junit.framework.AssertionFailedError: expected:<1076957313284> but was:<1076957313000>\n+//        //\n+//        //assertEquals(1076957313284L, realTimestamp.getTime());\n+//        // sanity check 2:        \n+//        assertEquals(date.getDay(), realTimestamp.getDay());\n+//        assertEquals(date.getHours(), realTimestamp.getHours());\n+//        assertEquals(date.getMinutes(), realTimestamp.getMinutes());\n+//        assertEquals(date.getMonth(), realTimestamp.getMonth());\n+//        assertEquals(date.getSeconds(), realTimestamp.getSeconds());\n+//        assertEquals(date.getTimezoneOffset(), realTimestamp.getTimezoneOffset());\n+//        assertEquals(date.getYear(), realTimestamp.getYear());\n+//        //\n+//        // Time values are == and equals() on Sun 1.4.2_03 but NOT on Sun 1.3.1_10:\n+//        //\n+//        //assertFalse(\"Sanity check failed: date.getTime() == timestamp.getTime()\", date.getTime() == timestamp.getTime());\n+//        //assertFalse(\"Sanity check failed: timestamp.equals(date)\", timestamp.equals(date));\n+//        //assertFalse(\"Sanity check failed: date.equals(timestamp)\", date.equals(timestamp));\n+//        // real test:\n+//        //assertFalse(\"java.util.Date and java.sql.Timestamp should be equal\", ObjectUtils.equals(date, timestamp));\n+//    }\n     \n     public void testIdentityToString() {\n         assertEquals(null, ObjectUtils.identityToString(null));", "timestamp": 1086124128, "metainfo": ""}