{"sha": "8688d11849b9335f63210dd9018545b3c3a907d8", "log": "Applying the truncateNicely patch from LANG-338 as abbreviate. I've added it to WordUtils rather than StringUtils; it feels like a better fit there to me  ", "commit": "\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n         return false;\n     }\n \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Abbreviates a string nicely.\n+     * \n+     * This method searches for the first space after the lower limit and abbreviates\n+     * the String there. It will also append any String passed as a parameter\n+     * to the end of the String. The upper limit can be specified to forcibly\n+     * abbreviate a String.\n+     * \n+     * @param str         the string to be abbreviated. If null is passed, null is returned.\n+     *                    If the empty String is passed, the empty string is returned.\n+     * @param lower       the lower limit.\n+     * @param upper       the upper limit; specify -1 if no limit is desired.\n+     *                    If the upper limit is lower than the lower limit, it will be\n+     *                    adjusted to be the same as the lower limit.\n+     * @param appendToEnd String to be appended to the end of the abbreviated string.\n+     *                    This is appended ONLY if the string was indeed abbreviated.\n+     *                    The append does not count towards the lower or upper limits.\n+     * @return the abbreviated String.\n+     */\n+    public static String abbreviate(String str, int lower, int upper, String appendToEnd) {\n+        // initial parameter checks\n+        if (str == null) {\n+            return null;\n+        }\n+        if (str.length() == 0) {\n+            return StringUtils.EMPTY;\n+        }\n+\n+        // if the upper value is -1 (i.e. no limit) or is greater\n+        // than the length of the string, set to the length of the string\n+        if (upper == -1 || upper > str.length()) {\n+            upper = str.length();\n+        }\n+        // if upper is less than lower, raise it to lower\n+        if (upper < lower) {\n+            upper = lower;\n+        }\n+\n+        StringBuffer result = new StringBuffer();\n+        int index = StringUtils.indexOf(str, \" \", lower);\n+        if (index == -1) {\n+            result.append(str.substring(0, upper));\n+            // only if abbreviation has occured do we append the appendToEnd value\n+            if (upper != str.length()) result.append(StringUtils.defaultString(appendToEnd));\n+        } else if (index > upper) {\n+            result.append(str.substring(0, upper));\n+            result.append(StringUtils.defaultString(appendToEnd));\n+        } else {\n+            result.append(str.substring(0, index));\n+            result.append(StringUtils.defaultString(appendToEnd));\n+        }\n+        return result.toString();\n+    }\n+\n }\n--- a/src/test/org/apache/commons/lang/WordUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/WordUtilsTest.java\n         assertEquals(expect, WordUtils.swapCase(test));\n     }\n \n+    // -----------------------------------------------------------------------\n+    public void testAbbreviate() {\n+        // check null and empty are returned respectively\n+        assertNull(WordUtils.abbreviate(null, 1,-1,\"\"));\n+        assertEquals(StringUtils.EMPTY, WordUtils.abbreviate(\"\", 1,-1,\"\"));\n+\n+        // test upper limit\n+        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 0,5,\"\"));\n+        assertEquals(\"01234\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"\"));\n+        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5,\"\"));\n+        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n+        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n+\n+        // test upper limit + append string\n+        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 0,5,\"-\"));\n+        assertEquals(\"01234-\", WordUtils.abbreviate(\"0123456789\", 5, 2,\"-\"));\n+        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 2, 5, null));\n+        assertEquals(\"012 3\", WordUtils.abbreviate(\"012 3456789\", 5, 2,\"\"));\n+        assertEquals(\"0123456789\", WordUtils.abbreviate(\"0123456789\", 0,-1,\"\"));\n+\n+        // test lower value\n+        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n+        assertEquals(\"01234\", WordUtils.abbreviate(\"01234 56789\", 5, 10, null));\n+        assertEquals(\"01 23 45 67\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, null));\n+        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, null));\n+\n+        // test lower value + append\n+        assertEquals(\"012\", WordUtils.abbreviate(\"012 3456789\", 0,5, null));\n+        assertEquals(\"01234-\", WordUtils.abbreviate(\"01234 56789\", 5, 10, \"-\"));\n+        assertEquals(\"01 23 45 67abc\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, -1, \"abc\"));\n+        assertEquals(\"01 23 45 6\", WordUtils.abbreviate(\"01 23 45 67 89\", 9, 10, \"\"));\n+\n+        // others\n+        assertEquals(\"\", WordUtils.abbreviate(\"0123456790\", 0,0,\"\"));\n+        assertEquals(\"\", WordUtils.abbreviate(\" 0123456790\", 0,-1,\"\"));\n+    }\n+\n }", "timestamp": 1194977099, "metainfo": ""}