{"sha": "6625fd1dd48234ea8f7e2ce28d086db47b21b578", "log": "Fix infinite loops leading to OutOfMemory with circular cause chain bug 37038  ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n         return ArrayUtils.indexOf(CAUSE_METHOD_NAMES, methodName) >= 0;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Introspects the <code>Throwable</code> to obtain the cause.</p>\n      *\n      * \"root\" of the tree, using {@link #getCause(Throwable)}, and\n      * returns that exception.</p>\n      *\n+     * <p>From version 2.2, this method handles recursive cause structures\n+     * that might otherwise cause infinite loops. If the throwable parameter\n+     * has a cause of itself, then null will be returned. If the throwable\n+     * parameter cause chain loops, the last element in the chain before the\n+     * loop is returned.</p>\n+     *\n      * @param throwable  the throwable to get the root cause for, may be null\n      * @return the root cause of the <code>Throwable</code>,\n      *  <code>null</code> if none found or null throwable input\n      */\n     public static Throwable getRootCause(Throwable throwable) {\n-        Throwable cause = getCause(throwable);\n-        if (cause != null) {\n-            throwable = cause;\n-            while ((throwable = getCause(throwable)) != null) {\n-                cause = throwable;\n-            }\n-        }\n-        return cause;\n+        List list = getThrowableList(throwable);\n+        return (list.size() < 2 ? null : (Throwable)list.get(list.size() - 1));\n     }\n \n     /**\n      * A throwable with one cause will return <code>2</code> and so on.\n      * A <code>null</code> throwable will return <code>0</code>.</p>\n      *\n+     * <p>From version 2.2, this method handles recursive cause structures\n+     * that might otherwise cause infinite loops. The cause chain is\n+     * processed until the end is reached, or until the next item in the\n+     * chain is already in the result set.</p>\n+     *\n      * @param throwable  the throwable to inspect, may be null\n      * @return the count of throwables, zero if null input\n      */\n     public static int getThrowableCount(Throwable throwable) {\n-        int count = 0;\n-        while (throwable != null) {\n-            count++;\n-            throwable = ExceptionUtils.getCause(throwable);\n-        }\n-        return count;\n+        return getThrowableList(throwable).size();\n     }\n \n     /**\n      * one element - the input throwable.\n      * A throwable with one cause will return an array containing\n      * two elements. - the input throwable and the cause throwable.\n-     * A <code>null</code> throwable will return an array size zero.</p>\n-     *\n+     * A <code>null</code> throwable will return an array of size zero.</p>\n+     *\n+     * <p>From version 2.2, this method handles recursive cause structures\n+     * that might otherwise cause infinite loops. The cause chain is\n+     * processed until the end is reached, or until the next item in the\n+     * chain is already in the result set.</p>\n+     *\n+     * @see #getThrowableList(Throwable)\n      * @param throwable  the throwable to inspect, may be null\n      * @return the array of throwables, never null\n      */\n     public static Throwable[] getThrowables(Throwable throwable) {\n+        List list = getThrowableList(throwable);\n+        return (Throwable[]) list.toArray(new Throwable[list.size()]);\n+    }\n+\n+    /**\n+     * <p>Returns the list of <code>Throwable</code> objects in the\n+     * exception chain.</p>\n+     *\n+     * <p>A throwable without cause will return a list containing\n+     * one element - the input throwable.\n+     * A throwable with one cause will return a list containing\n+     * two elements. - the input throwable and the cause throwable.\n+     * A <code>null</code> throwable will return a list of size zero.</p>\n+     *\n+     * <p>This method handles recursive cause structures that might\n+     * otherwise cause infinite loops. The cause chain is processed until\n+     * the end is reached, or until the next item in the chain is already\n+     * in the result set.</p>\n+     *\n+     * @param throwable  the throwable to inspect, may be null\n+     * @return the list of throwables, never null\n+     * @since Commons Lang 2.2\n+     */\n+    public static List getThrowableList(Throwable throwable) {\n         List list = new ArrayList();\n-        while (throwable != null) {\n+        while (throwable != null && list.contains(throwable) == false) {\n             list.add(throwable);\n             throwable = ExceptionUtils.getCause(throwable);\n         }\n-        return (Throwable[]) list.toArray(new Throwable[list.size()]);\n+        return list;\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java\n import java.io.StringWriter;\n import java.lang.reflect.InvocationTargetException;\n import java.sql.SQLException;\n+import java.util.List;\n \n import junit.framework.Assert;\n import junit.framework.Test;\n     private NestableException nested;\n     private Throwable withCause;\n     private Throwable withoutCause;\n+    private Throwable jdkNoCause;\n+    private ExceptionWithCause selfCause;\n+    private ExceptionWithCause recursiveCause;\n \n     public ExceptionUtilsTestCase(String name) {\n         super(name);\n         withoutCause = createExceptionWithoutCause();\n         nested = new NestableException(withoutCause);\n         withCause = new ExceptionWithCause(nested);\n+        jdkNoCause = new NullPointerException();\n+        selfCause = new ExceptionWithCause(null);\n+        selfCause.setCause(selfCause);\n+        ExceptionWithCause a = new ExceptionWithCause(null);\n+        ExceptionWithCause b = new ExceptionWithCause(a);\n+        a.setCause(b);\n+        recursiveCause = new ExceptionWithCause(a);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        withoutCause = null;\n+        nested = null;\n+        withCause = null;\n+        jdkNoCause = null;\n+        selfCause = null;\n+        recursiveCause = null;\n     }\n \n     //-----------------------------------------------------------------------\n         assertSame(null, ExceptionUtils.getCause(withoutCause));\n         assertSame(withoutCause, ExceptionUtils.getCause(nested));\n         assertSame(nested, ExceptionUtils.getCause(withCause));\n+        assertSame(null, ExceptionUtils.getCause(jdkNoCause));\n+        assertSame(selfCause, ExceptionUtils.getCause(selfCause));\n+        assertSame(recursiveCause.getCause(), ExceptionUtils.getCause(recursiveCause));\n+        assertSame(recursiveCause.getCause().getCause(), ExceptionUtils.getCause(recursiveCause.getCause()));\n+        assertSame(recursiveCause.getCause(), ExceptionUtils.getCause(recursiveCause.getCause().getCause()));\n     }\n \n     public void testGetCause_ThrowableArray() {\n         assertSame(null, ExceptionUtils.getRootCause(withoutCause));\n         assertSame(withoutCause, ExceptionUtils.getRootCause(nested));\n         assertSame(withoutCause, ExceptionUtils.getRootCause(withCause));\n+        assertSame(null, ExceptionUtils.getRootCause(jdkNoCause));\n+        assertSame(null, ExceptionUtils.getRootCause(selfCause));\n+        assertSame(recursiveCause.getCause().getCause(), ExceptionUtils.getRootCause(recursiveCause));\n     }\n \n     public void testSetCause() {\n         assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause));\n         assertEquals(2, ExceptionUtils.getThrowableCount(nested));\n         assertEquals(3, ExceptionUtils.getThrowableCount(withCause));\n-    }\n-\n-    public void testGetThrowables_Throwable() {\n+        assertEquals(1, ExceptionUtils.getThrowableCount(jdkNoCause));\n+        assertEquals(1, ExceptionUtils.getThrowableCount(selfCause));\n+        assertEquals(3, ExceptionUtils.getThrowableCount(recursiveCause));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetThrowables_Throwable_null() {\n         assertEquals(0, ExceptionUtils.getThrowables(null).length);\n-        assertEquals(1, ExceptionUtils.getThrowables(withoutCause).length);\n-        assertSame(withoutCause, ExceptionUtils.getThrowables(withoutCause)[0]);\n-        \n-        assertEquals(2, ExceptionUtils.getThrowables(nested).length);\n-        assertSame(nested, ExceptionUtils.getThrowables(nested)[0]);\n-        assertSame(withoutCause, ExceptionUtils.getThrowables(nested)[1]);\n-        \n-        assertEquals(3, ExceptionUtils.getThrowables(withCause).length);\n-        assertSame(withCause, ExceptionUtils.getThrowables(withCause)[0]);\n-        assertSame(nested, ExceptionUtils.getThrowables(withCause)[1]);\n-        assertSame(withoutCause, ExceptionUtils.getThrowables(withCause)[2]);\n+    }\n+\n+    public void testGetThrowables_Throwable_withoutCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(withoutCause);\n+        assertEquals(1, throwables.length);\n+        assertSame(withoutCause, throwables[0]);\n+    }\n+\n+    public void testGetThrowables_Throwable_nested() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(nested);\n+        assertEquals(2, throwables.length);\n+        assertSame(nested, throwables[0]);\n+        assertSame(withoutCause, throwables[1]);\n+    }\n+\n+    public void testGetThrowables_Throwable_withCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(withCause);\n+        assertEquals(3, throwables.length);\n+        assertSame(withCause, throwables[0]);\n+        assertSame(nested, throwables[1]);\n+        assertSame(withoutCause, throwables[2]);\n+    }\n+\n+    public void testGetThrowables_Throwable_jdkNoCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(jdkNoCause);\n+        assertEquals(1, throwables.length);\n+        assertSame(jdkNoCause, throwables[0]);\n+    }\n+\n+    public void testGetThrowables_Throwable_selfCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(selfCause);\n+        assertEquals(1, throwables.length);\n+        assertSame(selfCause, throwables[0]);\n+    }\n+\n+    public void testGetThrowables_Throwable_recursiveCause() {\n+        Throwable[] throwables = ExceptionUtils.getThrowables(recursiveCause);\n+        assertEquals(3, throwables.length);\n+        assertSame(recursiveCause, throwables[0]);\n+        assertSame(recursiveCause.getCause(), throwables[1]);\n+        assertSame(recursiveCause.getCause().getCause(), throwables[2]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetThrowableList_Throwable_null() {\n+        List throwables = ExceptionUtils.getThrowableList(null);\n+        assertEquals(0, throwables.size());\n+    }\n+\n+    public void testGetThrowableList_Throwable_withoutCause() {\n+        List throwables = ExceptionUtils.getThrowableList(withoutCause);\n+        assertEquals(1, throwables.size());\n+        assertSame(withoutCause, throwables.get(0));\n+    }\n+\n+    public void testGetThrowableList_Throwable_nested() {\n+        List throwables = ExceptionUtils.getThrowableList(nested);\n+        assertEquals(2, throwables.size());\n+        assertSame(nested, throwables.get(0));\n+        assertSame(withoutCause, throwables.get(1));\n+    }\n+\n+    public void testGetThrowableList_Throwable_withCause() {\n+        List throwables = ExceptionUtils.getThrowableList(withCause);\n+        assertEquals(3, throwables.size());\n+        assertSame(withCause, throwables.get(0));\n+        assertSame(nested, throwables.get(1));\n+        assertSame(withoutCause, throwables.get(2));\n+    }\n+\n+    public void testGetThrowableList_Throwable_jdkNoCause() {\n+        List throwables = ExceptionUtils.getThrowableList(jdkNoCause);\n+        assertEquals(1, throwables.size());\n+        assertSame(jdkNoCause, throwables.get(0));\n+    }\n+\n+    public void testGetThrowableList_Throwable_selfCause() {\n+        List throwables = ExceptionUtils.getThrowableList(selfCause);\n+        assertEquals(1, throwables.size());\n+        assertSame(selfCause, throwables.get(0));\n+    }\n+\n+    public void testGetThrowableList_Throwable_recursiveCause() {\n+        List throwables = ExceptionUtils.getThrowableList(recursiveCause);\n+        assertEquals(3, throwables.size());\n+        assertSame(recursiveCause, throwables.get(0));\n+        assertSame(recursiveCause.getCause(), throwables.get(1));\n+        assertSame(recursiveCause.getCause().getCause(), throwables.get(2));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1143670073, "metainfo": ""}