{"sha": "a9cd3cbb0aeb37b2dc7e3346bf93679e7cd84185", "log": "Additional tests as suggested by Clover report   ", "commit": "\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n  */\n package org.apache.commons.lang;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n import java.util.Arrays;\n import java.util.Map;\n \n  * @author Moritz Petersen\n  * @author Nikolay Metchev\n  * @author Matthew Hawthorne\n- * @version $Id: ArrayUtilsTest.java,v 1.9 2003/07/12 10:09:40 scolebourne Exp $\n+ * @version $Id: ArrayUtilsTest.java,v 1.10 2003/07/30 22:21:39 scolebourne Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n         super.tearDown();\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new ArrayUtils());\n+        Constructor[] cons = ArrayUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(ArrayUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(ArrayUtils.class.getModifiers()));\n+    }\n+    \n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"{}\", ArrayUtils.toString(null));\n     }\n \n     public void testCloneBoolean() {\n+        assertEquals(null, ArrayUtils.clone((boolean[]) null));\n         boolean[] original = new boolean[] {true, false};\n         boolean[] cloned = ArrayUtils.clone(original);\n         assertTrue(Arrays.equals(original, cloned));\n     }\n     \n     public void testCloneLong() {\n+        assertEquals(null, ArrayUtils.clone((long[]) null));\n         long[] original = new long[] {0L, 1L};\n         long[] cloned = ArrayUtils.clone(original);\n         assertTrue(Arrays.equals(original, cloned));\n     }\n     \n     public void testCloneInt() {\n+        assertEquals(null, ArrayUtils.clone((int[]) null));\n         int[] original = new int[] {5, 8};\n         int[] cloned = ArrayUtils.clone(original);\n         assertTrue(Arrays.equals(original, cloned));\n     }\n     \n     public void testCloneShort() {\n+        assertEquals(null, ArrayUtils.clone((short[]) null));\n         short[] original = new short[] {1, 4};\n         short[] cloned = ArrayUtils.clone(original);\n         assertTrue(Arrays.equals(original, cloned));\n     }\n     \n     public void testCloneChar() {\n+        assertEquals(null, ArrayUtils.clone((char[]) null));\n         char[] original = new char[] {'a', '4'};\n         char[] cloned = ArrayUtils.clone(original);\n         assertTrue(Arrays.equals(original, cloned));\n     }\n     \n     public void testCloneByte() {\n+        assertEquals(null, ArrayUtils.clone((byte[]) null));\n         byte[] original = new byte[] {1, 6};\n         byte[] cloned = ArrayUtils.clone(original);\n         assertTrue(Arrays.equals(original, cloned));\n     }\n     \n     public void testCloneDouble() {\n+        assertEquals(null, ArrayUtils.clone((double[]) null));\n         double[] original = new double[] {2.4d, 5.7d};\n         double[] cloned = ArrayUtils.clone(original);\n         assertTrue(Arrays.equals(original, cloned));\n     }\n     \n     public void testCloneFloat() {\n+        assertEquals(null, ArrayUtils.clone((float[]) null));\n         float[] original = new float[] {2.6f, 6.4f};\n         float[] cloned = ArrayUtils.clone(original);\n         assertTrue(Arrays.equals(original, cloned));\n         Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n         assertEquals(-1, ArrayUtils.indexOf(null, null));\n         assertEquals(-1, ArrayUtils.indexOf(null, \"0\"));\n+        assertEquals(-1, ArrayUtils.indexOf(new Object[0], \"0\"));\n         assertEquals(0, ArrayUtils.indexOf(array, \"0\"));\n         assertEquals(1, ArrayUtils.indexOf(array, \"1\"));\n         assertEquals(2, ArrayUtils.indexOf(array, \"2\"));\n     public void testIndexOfWithStartIndex() {\n         Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n         assertEquals(-1, ArrayUtils.indexOf(null, null, 2));\n+        assertEquals(-1, ArrayUtils.indexOf(new Object[0], \"0\", 0));\n         assertEquals(-1, ArrayUtils.indexOf(null, \"0\", 2));\n         assertEquals(5, ArrayUtils.indexOf(array, \"0\", 2));\n         assertEquals(-1, ArrayUtils.indexOf(array, \"1\", 2));\n         assertEquals(1, ArrayUtils.lastIndexOf(array, \"1\", 2));\n         assertEquals(2, ArrayUtils.lastIndexOf(array, \"2\", 2));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, \"3\", -1));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, null, 5));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, null, 2));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, \"notInArray\", 5));\n         assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\n         assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\n         assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\n         assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\n         assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n     }\n         assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\n         assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\n-        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n     }\n \n         assertEquals(-1, ArrayUtils.indexOf(array, 1, 2));\n         assertEquals(2, ArrayUtils.indexOf(array, 2, 2));\n         assertEquals(3, ArrayUtils.indexOf(array, 3, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, 3, -1));\n         assertEquals(-1, ArrayUtils.indexOf(array, 99, 0));\n         assertEquals(-1, ArrayUtils.indexOf(array, 0, 6));\n     }\n         assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2));\n         assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, 99));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88));\n     }\n         assertEquals(-1, ArrayUtils.indexOf(array, (short) 1, 2));\n         assertEquals(2, ArrayUtils.indexOf(array, (short) 2, 2));\n         assertEquals(3, ArrayUtils.indexOf(array, (short) 3, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (short) 3, -1));\n         assertEquals(-1, ArrayUtils.indexOf(array, (short) 99, 0));\n         assertEquals(-1, ArrayUtils.indexOf(array, (short) 0, 6));\n     }\n         assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2));\n         assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88));\n     }\n         assertEquals(-1, ArrayUtils.indexOf(array, (byte) 1, 2));\n         assertEquals(2, ArrayUtils.indexOf(array, (byte) 2, 2));\n         assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (byte) 3, -1));\n         assertEquals(-1, ArrayUtils.indexOf(array, (byte) 99, 0));\n         assertEquals(-1, ArrayUtils.indexOf(array, (byte) 0, 6));\n     }\n         assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1, 2));\n         assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2, 2));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 3, -1));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0, 88));\n     }\n         assertEquals(1, ArrayUtils.indexOf(array, (double) 1));\n         assertEquals(2, ArrayUtils.indexOf(array, (double) 2));\n         assertEquals(3, ArrayUtils.indexOf(array, (double) 3));\n+        assertEquals(3, ArrayUtils.indexOf(array, (double) 3, -1));\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));\n     }\n \n         assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2));\n         assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88));\n     }\n         assertEquals(-1, ArrayUtils.indexOf(array, (float) 1, 2));\n         assertEquals(2, ArrayUtils.indexOf(array, (float) 2, 2));\n         assertEquals(3, ArrayUtils.indexOf(array, (float) 3, 2));\n+        assertEquals(3, ArrayUtils.indexOf(array, (float) 3, -1));\n         assertEquals(-1, ArrayUtils.indexOf(array, (float) 99, 0));\n         assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6));\n     }\n         assertEquals(1, ArrayUtils.lastIndexOf(array, (float) 1, 2));\n         assertEquals(2, ArrayUtils.lastIndexOf(array, (float) 2, 2));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 3, -1));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88));\n     }\n         array = new boolean[] { true, false, true };\n         assertEquals(2, ArrayUtils.indexOf(array, true, 1));\n         assertEquals(-1, ArrayUtils.indexOf(array, false, 2));\n+        assertEquals(1, ArrayUtils.indexOf(array, false, 0));\n+        assertEquals(1, ArrayUtils.indexOf(array, false, -1));\n         array = new boolean[] { true, true };\n         assertEquals(-1, ArrayUtils.indexOf(array, false, 0));\n+        assertEquals(-1, ArrayUtils.indexOf(array, false, -1));\n     }\n \n     public void testLastIndexOfBoolean() {\n         assertEquals(2, ArrayUtils.lastIndexOf(array, true, 2));\n         assertEquals(0, ArrayUtils.lastIndexOf(array, true, 1));\n         assertEquals(1, ArrayUtils.lastIndexOf(array, false, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));\n         array = new boolean[] { true, true };\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, false, 2));\n+        assertEquals(-1, ArrayUtils.lastIndexOf(array, true, -1));\n     }\n \n     public void testContainsBoolean() {\n--- a/src/test/org/apache/commons/lang/BooleanUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/BooleanUtilsTest.java\n  */\n package org.apache.commons.lang;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n  *\n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n- * @version $Id: BooleanUtilsTest.java,v 1.4 2003/06/28 18:16:03 scolebourne Exp $\n+ * @version $Id: BooleanUtilsTest.java,v 1.5 2003/07/30 22:21:39 scolebourne Exp $\n  */\n public class BooleanUtilsTest extends TestCase {\n \n         super.tearDown();\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new BooleanUtils());\n+        Constructor[] cons = BooleanUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(BooleanUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));\n+    }\n+    \n     //-----------------------------------------------------------------------\n     public void test_negate_Boolean() {\n         assertSame(null, BooleanUtils.negate(null));\n     public void test_toBoolean_Integer_Integer_Integer() {\n         Integer six = new Integer(6);\n         Integer seven = new Integer(7);\n+\n+        assertEquals(true, BooleanUtils.toBoolean((Integer) null, null, seven));\n+        assertEquals(false, BooleanUtils.toBoolean((Integer) null, six, null));\n+        try {\n+            BooleanUtils.toBoolean(null, six, seven);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n         try {\n         } catch (IllegalArgumentException ex) {}\n     }\n     \n-    public void test_toBooleanObject_Integer_Integer_Integer() {\n+    public void test_toBooleanObject_Integer_Integer_Integer_Integer() {\n         Integer six = new Integer(6);\n         Integer seven = new Integer(7);\n         Integer eight = new Integer(8);\n+\n+        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight));\n+        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight));\n+        assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null));\n+        try {\n+            BooleanUtils.toBooleanObject(null, six, seven, eight);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n     }\n     \n     public void test_toBooleanObject_String_String_String_String() {\n+        assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, \"N\", \"U\"));\n+        assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, \"Y\", null, \"U\"));\n+        assertSame(null, BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", null));\n+        try {\n+            BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", \"U\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+\n         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(\"Y\", \"Y\", \"N\", \"U\"));\n         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(\"N\", \"Y\", \"N\", \"U\"));\n         assertEquals(null, BooleanUtils.toBooleanObject(\"U\", \"Y\", \"N\", \"U\"));\n     }\n \n     public void test_toBoolean_String_String_String() {\n+        assertEquals(true, BooleanUtils.toBoolean((String) null, null, \"N\"));\n+        assertEquals(false, BooleanUtils.toBoolean((String) null, \"Y\", null));\n+        try {\n+            BooleanUtils.toBooleanObject((String) null, \"Y\", \"N\", \"U\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n         assertEquals(true, BooleanUtils.toBoolean(\"Y\", \"Y\", \"N\"));\n         assertEquals(false, BooleanUtils.toBoolean(\"N\", \"Y\", \"N\"));\n         try {\n--- a/src/test/org/apache/commons/lang/CharSetUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/CharSetUtilsTest.java\n  */\n package org.apache.commons.lang;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n  * @author <a href=\"mailto:bayard@generationjava.com\">Henri Yandell</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Stephen Colebourne\n- * @version $Id: CharSetUtilsTest.java,v 1.9 2003/07/30 00:08:38 scolebourne Exp $\n+ * @version $Id: CharSetUtilsTest.java,v 1.10 2003/07/30 22:21:39 scolebourne Exp $\n  */\n public class CharSetUtilsTest extends TestCase {\n     \n     }\n \n     //-----------------------------------------------------------------------\n-\n+    public void testConstructor() {\n+        assertNotNull(new CharSetUtils());\n+        Constructor[] cons = CharSetUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(CharSetUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(CharSetUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     public void testSqueeze() {\n         assertEquals(null, CharSetUtils.squeeze(null, (String[]) null));\n         assertEquals(null, CharSetUtils.squeeze(null, (String) null));\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n  */\n package org.apache.commons.lang;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n  * Unit tests {@link org.apache.commons.lang.ClassUtils}.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: ClassUtilsTest.java,v 1.3 2003/03/23 21:47:30 scolebourne Exp $\n+ * @version $Id: ClassUtilsTest.java,v 1.4 2003/07/30 22:21:39 scolebourne Exp $\n  */\n public class ClassUtilsTest extends TestCase {\n \n     }\n \n     private static class Inner {\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new ClassUtils());\n+        Constructor[] cons = ClassUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(ClassUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(ClassUtils.class.getModifiers()));\n     }\n     \n     // -------------------------------------------------------------------------\n         assertEquals(0, result.size());\n         \n         list.add(String.class);\n+        list.add(null);\n         list.add(Object.class);\n         result = ClassUtils.convertClassesToClassNames(list);\n-        assertEquals(2, result.size());\n+        assertEquals(3, result.size());\n         assertEquals(\"java.lang.String\", result.get(0));\n-        assertEquals(\"java.lang.Object\", result.get(1));\n+        assertEquals(null, result.get(1));\n+        assertEquals(\"java.lang.Object\", result.get(2));\n \n         list.add(new Object());\n         try {\n--- a/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n  */\n package org.apache.commons.lang;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: ObjectUtilsTest.java,v 1.7 2003/07/25 22:37:59 scolebourne Exp $\n+ * @version $Id: ObjectUtilsTest.java,v 1.8 2003/07/30 22:21:39 scolebourne Exp $\n  */\n public class ObjectUtilsTest extends TestCase {\n     private static final String FOO = \"foo\";\n     }\n \n     //-----------------------------------------------------------------------\n-\n+    public void testConstructor() {\n+        assertNotNull(new ObjectUtils());\n+        Constructor[] cons = ObjectUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(ObjectUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(ObjectUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     public void testIsNull() {\n         Object o = FOO;\n         Object dflt = BAR;\n--- a/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n  */\n package org.apache.commons.lang;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n import java.util.Random;\n \n import junit.framework.Test;\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: RandomStringUtilsTest.java,v 1.8 2003/07/20 15:49:58 scolebourne Exp $\n+ * @version $Id: RandomStringUtilsTest.java,v 1.9 2003/07/30 22:21:39 scolebourne Exp $\n  */\n public class RandomStringUtilsTest extends junit.framework.TestCase {\n     /**\n     public void tearDown() {\n     }\n     \n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new RandomStringUtils());\n+        Constructor[] cons = RandomStringUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(RandomStringUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(RandomStringUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     /**\n      * Test the implementation\n      */\n--- a/src/test/org/apache/commons/lang/SerializationUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/SerializationUtilsTest.java\n import java.io.ByteArrayOutputStream;\n import java.io.InputStream;\n import java.io.ObjectOutputStream;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n import java.util.HashMap;\n \n import junit.framework.Test;\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: SerializationUtilsTest.java,v 1.3 2003/07/19 20:22:36 scolebourne Exp $\n+ * @version $Id: SerializationUtilsTest.java,v 1.4 2003/07/30 22:21:39 scolebourne Exp $\n  */\n public class SerializationUtilsTest extends TestCase {\n     private String iString;\n     }\n \n     //-----------------------------------------------------------------------\n-\n+    public void testConstructor() {\n+        assertNotNull(new SerializationUtils());\n+        Constructor[] cons = SerializationUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(SerializationUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(SerializationUtils.class.getModifiers()));\n+    }\n+    \n+    public void testException() {\n+        SerializationException serEx;\n+        Exception ex = new Exception();\n+        \n+        serEx = new SerializationException();\n+        assertSame(null, serEx.getMessage());\n+        assertSame(null, serEx.getCause());\n+        \n+        serEx = new SerializationException(\"Message\");\n+        assertSame(\"Message\", serEx.getMessage());\n+        assertSame(null, serEx.getCause());\n+        \n+        serEx = new SerializationException(ex);\n+        assertEquals(\"java.lang.Exception\", serEx.getMessage());\n+        assertSame(ex, serEx.getCause());\n+        \n+        serEx = new SerializationException(\"Message\", ex);\n+        assertSame(\"Message\", serEx.getMessage());\n+        assertSame(ex, serEx.getCause());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     public void testSerializeStream() throws Exception {\n         ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n         SerializationUtils.serialize(iMap, streamTest);\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n package org.apache.commons.lang;\n \n import java.io.IOException;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n  *\n  * @author of original StringUtilsTest.testEscape = ?\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n- * @version $Id: StringEscapeUtilsTest.java,v 1.10 2003/07/30 00:08:38 scolebourne Exp $\n+ * @version $Id: StringEscapeUtilsTest.java,v 1.11 2003/07/30 22:21:39 scolebourne Exp $\n  */\n public class StringEscapeUtilsTest extends TestCase {\n     private final static String FOO = \"foo\";\n     }\n \n     //-----------------------------------------------------------------------\n-\n+    public void testConstructor() {\n+        assertNotNull(new StringEscapeUtils());\n+        Constructor[] cons = StringEscapeUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(StringEscapeUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(StringEscapeUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     public void testEscapeJava() throws IOException {\n         assertEquals(null, StringEscapeUtils.escapeJava(null));\n         try {\n--- a/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsEqualsIndexOfTest.java,v 1.5 2003/07/26 14:36:30 scolebourne Exp $\n+ * @version $Id: StringUtilsEqualsIndexOfTest.java,v 1.6 2003/07/30 22:21:39 scolebourne Exp $\n  */\n public class StringUtilsEqualsIndexOfTest extends TestCase {\n     private static final String FOO = \"foo\";\n     \n     //-----------------------------------------------------------------------\n     public void testIndexOfAnyButChar() {\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (char[]) null));\n         assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));\n         assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[0]));\n         assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'z','a'})); \n--- a/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsSubstringTest.java,v 1.9 2003/07/25 22:22:30 scolebourne Exp $\n+ * @version $Id: StringUtilsSubstringTest.java,v 1.10 2003/07/30 22:21:39 scolebourne Exp $\n  */\n public class StringUtilsSubstringTest extends TestCase {\n     private static final String FOO = \"foo\";\n     //-----------------------------------------------------------------------\n \n \n-    public void testSubstring2() {\n+    public void testSubstring_StringInt() {\n+        assertEquals(null, StringUtils.substring(null, 0));\n+        assertEquals(\"\", StringUtils.substring(\"\", 0));\n+        assertEquals(\"\", StringUtils.substring(\"\", 2));\n+        \n         assertEquals(\"\", StringUtils.substring(SENTENCE, 80));\n         assertEquals(BAZ, StringUtils.substring(SENTENCE, 8));\n         assertEquals(BAZ, StringUtils.substring(SENTENCE, -3));\n         assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0));\n-    }\n-    \n-    public void testSubstring3() {\n+        assertEquals(\"abc\", StringUtils.substring(\"abc\", -4));\n+        assertEquals(\"abc\", StringUtils.substring(\"abc\", -3));\n+        assertEquals(\"bc\", StringUtils.substring(\"abc\", -2));\n+        assertEquals(\"c\", StringUtils.substring(\"abc\", -1));\n+        assertEquals(\"abc\", StringUtils.substring(\"abc\", 0));\n+        assertEquals(\"bc\", StringUtils.substring(\"abc\", 1));\n+        assertEquals(\"c\", StringUtils.substring(\"abc\", 2));\n+        assertEquals(\"\", StringUtils.substring(\"abc\", 3));\n+        assertEquals(\"\", StringUtils.substring(\"abc\", 4));\n+    }\n+    \n+    public void testSubstring_StringIntInt() {\n+        assertEquals(null, StringUtils.substring(null, 0, 0));\n+        assertEquals(null, StringUtils.substring(null, 1, 2));\n+        assertEquals(\"\", StringUtils.substring(\"\", 0, 0));\n+        assertEquals(\"\", StringUtils.substring(\"\", 1, 2));\n+        assertEquals(\"\", StringUtils.substring(\"\", -2, -1));\n+        \n         assertEquals(\"\", StringUtils.substring(SENTENCE, 8, 6));\n         assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3));\n         assertEquals(\"o\", StringUtils.substring(SENTENCE, -9, 3));\n         assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80));\n         assertEquals(\"\", StringUtils.substring(SENTENCE, 2, 2));\n         assertEquals(\"b\",StringUtils.substring(\"abc\", -2, -1));\n-    }\n-    \n-    public void testSubstring4() {\n-        assertEquals(\"\", StringUtils.substring(\"\",0));\n-        assertEquals(\"\", StringUtils.substring(\"\",2));\n-        assertEquals(\"\", StringUtils.substring(\"\",0,0));\n-        assertEquals(\"\", StringUtils.substring(\"\",1,2));\n-        assertEquals(\"\", StringUtils.substring(\"\",-2,-1));\n-        assertEquals(null, StringUtils.substring(null,0));\n-        assertEquals(null, StringUtils.substring(null,0,0));\n-        assertEquals(null, StringUtils.substring(null,1,2));\n     }\n            \n     public void testLeft_String() {\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  */\n package org.apache.commons.lang;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n import java.util.Arrays;\n import java.util.Iterator;\n \n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsTest.java,v 1.39 2003/07/25 22:22:30 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.40 2003/07/30 22:21:39 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n     }\n \n     //-----------------------------------------------------------------------\n-\n+    public void testConstructor() {\n+        assertNotNull(new StringUtils());\n+        Constructor[] cons = StringUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(StringUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(StringUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     public void testCaseFunctions() {\n         assertEquals(null, StringUtils.upperCase(null));\n         assertEquals(null, StringUtils.lowerCase(null));\n     public void testJoin_IteratorChar() {\n         assertEquals(null, StringUtils.join((Iterator) null, ','));\n         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n         assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n     }\n     \n         assertEquals(\"aaa\", StringUtils.repeat(\"a\", 3));\n         assertEquals(\"ababab\", StringUtils.repeat(\"ab\", 3));\n         assertEquals(\"abcabcabc\", StringUtils.repeat(\"abc\", 3));\n+        String str = StringUtils.repeat(\"a\", 10000);  // bigger than pad limit\n+        assertEquals(10000, str.length());\n+        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n     }\n \n     public void testDeprecatedChompFunctions() {\n             { \"foo\\n\\rfoo\", \"foo\\n\\rfoo\" },\n             { \"\\n\", \"\" },\n             { \"\\r\", \"\" },\n+            { \"a\", \"a\" },\n             { \"\\r\\n\", \"\" },\n             { \"\", \"\" },\n             { null, null },\n         assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, ' '));\n         assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, ' '));\n         assertEquals(\"abcxx\", StringUtils.rightPad(\"abc\", 5, 'x'));\n+        String str = StringUtils.rightPad(\"aaa\", 10000, 'a');  // bigger than pad length\n+        assertEquals(10000, str.length());\n+        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n     }\n \n     public void testRightPad_StringIntString() {\n         assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, ' '));\n         assertEquals(\"xxabc\", StringUtils.leftPad(\"abc\", 5, 'x'));\n         assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, ' '));\n+        String str = StringUtils.leftPad(\"aaa\", 10000, 'a');  // bigger than pad length\n+        assertEquals(10000, str.length());\n+        assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n     }\n         \n     public void testLeftPad_StringIntString() {\n--- a/src/test/org/apache/commons/lang/SystemUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/SystemUtilsTest.java\n  */\n package org.apache.commons.lang;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n  *\n  * @author Stephen Colebourne\n  * @author Tetsuya Kaneuchi\n- * @version $Id: SystemUtilsTest.java,v 1.3 2003/07/21 22:57:51 scolebourne Exp $\n+ * @version $Id: SystemUtilsTest.java,v 1.4 2003/07/30 22:21:39 scolebourne Exp $\n  */\n public class SystemUtilsTest extends TestCase {\n \n         super.tearDown();\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new SystemUtils());\n+        Constructor[] cons = SystemUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(SystemUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(SystemUtils.class.getModifiers()));\n+    }\n+    \n     //-----------------------------------------------------------------------\n     // COPIED FROM SystemUtils\n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/WordWrapUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/WordWrapUtilsTest.java\n  */\n package org.apache.commons.lang;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n  * Unit tests for the wrap methods of WordWrapUtils.\n  * \n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: WordWrapUtilsTest.java,v 1.2 2003/07/19 20:22:36 scolebourne Exp $\n+ * @author Henri Yandell\n+ * @author Stephen Colebourne\n+ * @version $Id: WordWrapUtilsTest.java,v 1.3 2003/07/30 22:21:39 scolebourne Exp $\n  */\n public class WordWrapUtilsTest extends TestCase {\n \n         return suite;\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new WordWrapUtils());\n+        Constructor[] cons = WordWrapUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(WordWrapUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(WordWrapUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     /**\n      * Wrap text. This is the most general use.\n      */", "timestamp": 1059603699, "metainfo": ""}