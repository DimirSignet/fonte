{"sha": "3cea4b2af3f9caf6aa72fa56d647c513d320e073", "log": "[LANG-192] API improvements  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n      * <code>java.lang.Character.getType(char)</code>. Groups of contiguous\n      * characters of the same type are returned as complete tokens. \n      * <pre>\n-     * StringUtils.splitByCamelCase(null)         = null\n-     * StringUtils.splitByCamelCase(\"\")           = []\n-     * StringUtils.splitByCamelCase(\"ab de fg\")   = [\"ab\", \" \", \"de\", \" \", \"fg\"]\n-     * StringUtils.splitByCamelCase(\"ab   de fg\") = [\"ab\", \"   \", \"de\", \" \", \"fg\"]\n-     * StringUtils.splitByCamelCase(\"ab:cd:ef\")   = [\"ab\", \":\", \"cd\", \":\", \"ef\"]\n-     * StringUtils.splitByCamelCase(\"number5\")   = [\"number\", \"5\"]\n-     * StringUtils.splitByCamelCase(\"fooBar\")     = [\"foo\", \"B\", \"ar\"]\n-     * StringUtils.splitByCamelCase(\"foo200Bar\")  = [\"foo\", \"200\", \"B\", \"ar\"]\n-     * StringUtils.splitByCamelCase(\"ASFRules\")   = [\"ASFR\", \"ules\"]\n+     * StringUtils.splitByCharacterType(null)         = null\n+     * StringUtils.splitByCharacterType(\"\")           = []\n+     * StringUtils.splitByCharacterType(\"ab de fg\")   = [\"ab\", \" \", \"de\", \" \", \"fg\"]\n+     * StringUtils.splitByCharacterType(\"ab   de fg\") = [\"ab\", \"   \", \"de\", \" \", \"fg\"]\n+     * StringUtils.splitByCharacterType(\"ab:cd:ef\")   = [\"ab\", \":\", \"cd\", \":\", \"ef\"]\n+     * StringUtils.splitByCharacterType(\"number5\")    = [\"number\", \"5\"]\n+     * StringUtils.splitByCharacterType(\"fooBar\")     = [\"foo\", \"B\", \"ar\"]\n+     * StringUtils.splitByCharacterType(\"foo200Bar\")  = [\"foo\", \"200\", \"B\", \"ar\"]\n+     * StringUtils.splitByCharacterType(\"ASFRules\")   = [\"ASFR\", \"ules\"]\n      * </pre>\n      * @param str the String to split, may be <code>null</code>\n      * @return an array of parsed Strings, <code>null</code> if null String input\n      */\n     public static String[] splitByCharacterType(String str) {\n         return splitByCharacterType(str, false);\n+    }\n+\n+    /**\n+     * <p>Splits a String by Character type as returned by\n+     * <code>java.lang.Character.getType(char)</code>. Groups of contiguous\n+     * characters of the same type are returned as complete tokens, with the\n+     * following exception: the character of type\n+     * <code>Character.UPPERCASE_LETTER</code>, if any, immediately\n+     * preceding a token of type <code>Character.LOWERCASE_LETTER</code>\n+     * will belong to the following token rather than to the preceding, if any,\n+     * <code>Character.UPPERCASE_LETTER</code> token. \n+     * <pre>\n+     * StringUtils.splitByCharacterTypeCamelCase(null)         = null\n+     * StringUtils.splitByCharacterTypeCamelCase(\"\")           = []\n+     * StringUtils.splitByCharacterTypeCamelCase(\"ab de fg\")   = [\"ab\", \" \", \"de\", \" \", \"fg\"]\n+     * StringUtils.splitByCharacterTypeCamelCase(\"ab   de fg\") = [\"ab\", \"   \", \"de\", \" \", \"fg\"]\n+     * StringUtils.splitByCharacterTypeCamelCase(\"ab:cd:ef\")   = [\"ab\", \":\", \"cd\", \":\", \"ef\"]\n+     * StringUtils.splitByCharacterTypeCamelCase(\"number5\")    = [\"number\", \"5\"]\n+     * StringUtils.splitByCharacterTypeCamelCase(\"fooBar\")     = [\"foo\", \"Bar\"]\n+     * StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")  = [\"foo\", \"200\", \"Bar\"]\n+     * StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")   = [\"ASF\", \"Rules\"]\n+     * </pre>\n+     * @param str the String to split, may be <code>null</code>\n+     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @since 2.4\n+     */\n+    public static String[] splitByCharacterTypeCamelCase(String str) {\n+        return splitByCharacterType(str, true);\n     }\n \n     /**\n      * immediately preceding a token of type <code>Character.LOWERCASE_LETTER</code>\n      * will belong to the following token rather than to the preceding, if any,\n      * <code>Character.UPPERCASE_LETTER</code> token. \n-     * <pre>\n-     * StringUtils.splitByCamelCase(null)         = null\n-     * StringUtils.splitByCamelCase(\"\")           = []\n-     * StringUtils.splitByCamelCase(\"ab de fg\")   = [\"ab\", \" \", \"de\", \" \", \"fg\"]\n-     * StringUtils.splitByCamelCase(\"ab   de fg\") = [\"ab\", \"   \", \"de\", \" \", \"fg\"]\n-     * StringUtils.splitByCamelCase(\"ab:cd:ef\")   = [\"ab\", \":\", \"cd\", \":\", \"ef\"]\n-     * StringUtils.splitByCamelCase(\"number5\")   = [\"number\", \"5\"]\n-     * StringUtils.splitByCamelCase(\"fooBar\")     = [\"foo\", \"Bar\"]\n-     * StringUtils.splitByCamelCase(\"foo200Bar\")  = [\"foo\", \"200\", \"Bar\"]\n-     * StringUtils.splitByCamelCase(\"ASFRules\")   = [\"ASF\", \"Rules\"]\n-     * </pre>\n      * @param str the String to split, may be <code>null</code>\n      * @param camelCase whether to use so-called \"camel-case\" for letter types\n      * @return an array of parsed Strings, <code>null</code> if null String input\n      * @since 2.4\n      */\n-    public static String[] splitByCharacterType(String str, boolean camelCase) {\n+    private static String[] splitByCharacterType(String str, boolean camelCase) {\n         if (str == null) {\n             return null;\n         }\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n     public void testSplitByCharacterType() {\n         assertNull(StringUtils.splitByCharacterType(null));\n         assertEquals(0, StringUtils.splitByCharacterType(\"\").length);\n-        assertNull(StringUtils.splitByCharacterType(null, true));\n-        assertEquals(0, StringUtils.splitByCharacterType(\"\", true).length);\n-\n-        final boolean camelCase = true;\n-\n+        \n         assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n-                \"fg\" }, StringUtils.splitByCharacterType(\"ab de fg\")));\n-\n-        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n-                \"fg\" }, StringUtils.splitByCharacterType(\"ab de fg\", camelCase)));\n-\n+        \"fg\" }, StringUtils.splitByCharacterType(\"ab de fg\")));\n+        \n         assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n-                \"fg\" }, StringUtils.splitByCharacterType(\"ab   de fg\")));\n-\n-        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n-                \"fg\" }, StringUtils.splitByCharacterType(\"ab   de fg\", camelCase)));\n-\n+        \"fg\" }, StringUtils.splitByCharacterType(\"ab   de fg\")));\n+        \n         assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n-                \"ef\" }, StringUtils.splitByCharacterType(\"ab:cd:ef\")));\n-\n-        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n-                \"ef\" }, StringUtils.splitByCharacterType(\"ab:cd:ef\", camelCase)));\n+        \"ef\" }, StringUtils.splitByCharacterType(\"ab:cd:ef\")));\n         \n         assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n                 StringUtils.splitByCharacterType(\"number5\")));\n         \n-        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n-                StringUtils.splitByCharacterType(\"number5\", camelCase)));\n-\n         assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"B\", \"ar\" },\n                 StringUtils.splitByCharacterType(\"fooBar\")));\n-\n-        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"Bar\" },\n-                StringUtils.splitByCharacterType(\"fooBar\", camelCase)));\n-\n+        \n         assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"B\", \"ar\" },\n                 StringUtils.splitByCharacterType(\"foo200Bar\")));\n-\n-        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"Bar\" },\n-                StringUtils.splitByCharacterType(\"foo200Bar\", camelCase)));\n-\n+        \n         assertTrue(ArrayUtils.isEquals(new String[] { \"ASFR\", \"ules\" },\n                 StringUtils.splitByCharacterType(\"ASFRules\")));\n+    }\n+    \n+    public void testSplitByCharacterTypeCamelCase() {\n+        assertNull(StringUtils.splitByCharacterTypeCamelCase(null));\n+        assertEquals(0, StringUtils.splitByCharacterTypeCamelCase(\"\").length);\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \" \", \"de\", \" \",\n+                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab de fg\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \"   \", \"de\", \" \",\n+                \"fg\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab   de fg\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"ab\", \":\", \"cd\", \":\",\n+                \"ef\" }, StringUtils.splitByCharacterTypeCamelCase(\"ab:cd:ef\")));\n+        \n+        assertTrue(ArrayUtils.isEquals(new String[] { \"number\", \"5\" },\n+                StringUtils.splitByCharacterTypeCamelCase(\"number5\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"Bar\" },\n+                StringUtils.splitByCharacterTypeCamelCase(\"fooBar\")));\n+\n+        assertTrue(ArrayUtils.isEquals(new String[] { \"foo\", \"200\", \"Bar\" },\n+                StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")));\n \n         assertTrue(ArrayUtils.isEquals(new String[] { \"ASF\", \"Rules\" },\n-                StringUtils.splitByCharacterType(\"ASFRules\", camelCase)));\n+                StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")));\n     }\n \n     public void testDeprecatedDeleteSpace_String() {", "timestamp": 1200195988, "metainfo": ""}