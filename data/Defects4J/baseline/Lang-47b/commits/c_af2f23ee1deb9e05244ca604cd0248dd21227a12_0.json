{"sha": "af2f23ee1deb9e05244ca604cd0248dd21227a12", "log": "Update null handling behaviour and documentation bug 21734, from Phil Steiz   ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n  * @author Phil Steitz\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: NumberUtils.java,v 1.3 2003/07/14 22:25:05 bayard Exp $\n+ * @version $Id: NumberUtils.java,v 1.4 2003/07/20 16:03:21 scolebourne Exp $\n  */\n public final class NumberUtils {\n     \n     /**\n      * <p>Convert a <code>String</code> to an <code>int</code>, returning\n      * <code>zero</code> if the conversion fails.</p>\n-     * \n-     * @param str  the string to convert\n+     *\n+     * <p>If the string is <code>null</code>, <code>zero</code> is returned.</p>\n+     * \n+     * @param str  the string to convert, may be null\n      * @return the int represented by the string, or <code>zero</code> if\n      *  conversion fails\n      */\n     /**\n      * <p>Convert a <code>String</code> to an <code>int</code>, returning a\n      * default value if the conversion fails.</p>\n-     * \n-     * @param str  the string to convert\n+     *\n+     * <p>If the string is <code>null</code>, the default value is returned.</p>\n+     * \n+     * @param str  the string to convert, may be null\n      * @param defaultValue  the default value\n      * @return the int represented by the string, or the default if conversion fails\n      */\n      *\n      * <p>First, the value is examined for a type qualifier on the end\n      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n-     * trying to create succissively larger types from the type specified\n-     * until one is found that can hold the value.</p>\n+     * trying to create successively larger types from the type specified\n+     * until one is found that can represent the value.</p>\n      *\n      * <p>If a type specifier is not found, it will check for a decimal point\n      * and then try successively larger types from <code>Integer</code> to\n      * will be interpreted as a hexadecimal integer.  Values with leading\n      * <code>0</code>'s will not be interpreted as octal.</p>\n      *\n-     * @param val String containing a number\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n+     *\n+     * <p>This method does not trim the input string, i.e., strings with leading\n+     * or trailing spaces will generate NumberFormatExceptions.</p>\n+     *\n+     * @param str  String containing a number, may be null\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Number createNumber(String val) throws NumberFormatException {\n-        if (val == null) {\n+    public static Number createNumber(String str) throws NumberFormatException {\n+        if (str == null) {\n             return null;\n         }\n-        if (val.length() == 0) {\n+        if (str.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n-        if (val.startsWith(\"--\")) {\n+        if (str.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n             // to be in specification of class. OS X Java parses it to \n             // a wrong value.\n             return null;\n         }\n-        if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) {\n-            return createInteger(val);\n+        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {\n+            return createInteger(str);\n         }   \n-        char lastChar = val.charAt(val.length() - 1);\n+        char lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n         String exp;\n-        int decPos = val.indexOf('.');\n-        int expPos = val.indexOf('e') + val.indexOf('E') + 1;\n+        int decPos = str.indexOf('.');\n+        int expPos = str.indexOf('e') + str.indexOf('E') + 1;\n \n         if (decPos > -1) {\n \n             if (expPos > -1) {\n                 if (expPos < decPos) {\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n-                dec = val.substring(decPos + 1, expPos);\n+                dec = str.substring(decPos + 1, expPos);\n             } else {\n-                dec = val.substring(decPos + 1);\n-            }\n-            mant = val.substring(0, decPos);\n+                dec = str.substring(decPos + 1);\n+            }\n+            mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n-                mant = val.substring(0, expPos);\n+                mant = str.substring(0, expPos);\n             } else {\n-                mant = val;\n+                mant = str;\n             }\n             dec = null;\n         }\n         if (!Character.isDigit(lastChar)) {\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length() - 1);\n+            if (expPos > -1 && expPos < str.length() - 1) {\n+                exp = str.substring(expPos + 1, str.length() - 1);\n             } else {\n                 exp = null;\n             }\n             //Requesting a specific type..\n-            String numeric = val.substring(0, val.length() - 1);\n+            String numeric = str.substring(0, str.length() - 1);\n             boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n             switch (lastChar) {\n                 case 'l' :\n                         return createBigInteger(numeric);\n \n                     }\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n                 case 'f' :\n                 case 'F' :\n                     try {\n                     }\n                     //Fall through\n                 default :\n-                    throw new NumberFormatException(val + \" is not a valid number.\");\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n \n             }\n         } else {\n             //User doesn't have a preference on the return type, so let's start\n             //small and go from there...\n-            if (expPos > -1 && expPos < val.length() - 1) {\n-                exp = val.substring(expPos + 1, val.length());\n+            if (expPos > -1 && expPos < str.length() - 1) {\n+                exp = str.substring(expPos + 1, str.length());\n             } else {\n                 exp = null;\n             }\n             if (dec == null && exp == null) {\n                 //Must be an int,long,bigint\n                 try {\n-                    return createInteger(val);\n+                    return createInteger(str);\n                 } catch (NumberFormatException nfe) {\n                 }\n                 try {\n-                    return createLong(val);\n+                    return createLong(str);\n                 } catch (NumberFormatException nfe) {\n                 }\n-                return createBigInteger(val);\n+                return createBigInteger(str);\n \n             } else {\n                 //Must be a float,double,BigDec\n                 boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n                 try {\n-                    Float f = createFloat(val);\n+                    Float f = createFloat(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n                 } catch (NumberFormatException nfe) {\n                 }\n                 try {\n-                    Double d = createDouble(val);\n+                    Double d = createDouble(str);\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n                 } catch (NumberFormatException nfe) {\n                 }\n \n-                return createBigDecimal(val);\n+                return createBigDecimal(str);\n \n             }\n         }\n      *\n      * <p>Returns <code>true</code> if s is <code>null</code>.</p>\n      * \n-     * @param s the String to check\n+     * @param str  the String to check\n      * @return if it is all zeros or <code>null</code>\n      */\n-    private static boolean isAllZeros(String s) {\n-        if (s == null) {\n+    private static boolean isAllZeros(String str) {\n+        if (str == null) {\n             return true;\n         }\n-        for (int i = s.length() - 1; i >= 0; i--) {\n-            if (s.charAt(i) != '0') {\n+        for (int i = str.length() - 1; i >= 0; i--) {\n+            if (str.charAt(i) != '0') {\n                 return false;\n             }\n         }\n-        return s.length() > 0;\n+        return str.length() > 0;\n     }\n \n     //-----------------------------------------------------------------------\n     /**\n      * <p>Convert a <code>String</code> to a <code>Float</code>.</p>\n-     * \n-     * @param val  a <code>String</code> to convert\n+     *\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n+     * \n+     * @param str  a <code>String</code> to convert, may be null\n      * @return converted <code>Float</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Float createFloat(String val) {\n-        return Float.valueOf(val);\n+    public static Float createFloat(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        return Float.valueOf(str);\n     }\n \n     /**\n      * <p>Convert a <code>String</code> to a <code>Double</code>.</p>\n      * \n-     * @param val  a <code>String</code> to convert\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n+     *\n+     * @param str  a <code>String</code> to convert, may be null\n      * @return converted <code>Double</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Double createDouble(String val) {\n-        return Double.valueOf(val);\n+    public static Double createDouble(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        return Double.valueOf(str);\n     }\n \n     /**\n      * <p>Convert a <code>String</code> to a <code>Integer</code>, handling\n      * hex and octal notations.</p>\n-     * \n-     * @param val  a <code>String</code> to convert\n+     *\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n+     * \n+     * @param str  a <code>String</code> to convert, may be null\n      * @return converted <code>Integer</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Integer createInteger(String val) {\n+    public static Integer createInteger(String str) {\n         // decode() handles 0xAABD and 0777 (hex and octal) as well.\n-        return Integer.decode(val);\n+        if (str == null) {\n+            return null;\n+        }\n+        return Integer.decode(str);\n     }\n \n     /**\n      * <p>Convert a <code>String</code> to a <code>Long</code>.</p>\n      * \n-     * @param val  a <code>String</code> to convert\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n+     *\n+     * @param str  a <code>String</code> to convert, may be null\n      * @return converted <code>Long</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static Long createLong(String val) {\n-        return Long.valueOf(val);\n+    public static Long createLong(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        return Long.valueOf(str);\n     }\n \n     /**\n      * <p>Convert a <code>String</code> to a <code>BigInteger</code>.</p>\n-     * \n-     * @param val  a <code>String</code> to convert\n+     *\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n+     * \n+     * @param str  a <code>String</code> to convert, may be null\n      * @return converted <code>BigInteger</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static BigInteger createBigInteger(String val) {\n-        BigInteger bi = new BigInteger(val);\n+    public static BigInteger createBigInteger(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        BigInteger bi = new BigInteger(str);\n         return bi;\n     }\n \n     /**\n      * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>\n      * \n-     * @param val  a <code>String</code> to convert\n+     * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n+     *\n+     * @param str  a <code>String</code> to convert, may be null\n      * @return converted <code>BigDecimal</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n-    public static BigDecimal createBigDecimal(String val) {\n-        BigDecimal bd = new BigDecimal(val);\n+    public static BigDecimal createBigDecimal(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        BigDecimal bd = new BigDecimal(str);\n         return bd;\n     }\n \n     /**\n      * <p>Returns the minimum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n     /**\n      * <p>Returns the minimum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n     /**\n      * <p>Returns the minimum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n      /**\n      * <p>Returns the minimum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n     /**\n      * <p>Returns the minimum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n     /**\n      * <p>Returns the maximum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n     /**\n      * <p>Returns the maximum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n     /**\n      * <p>Returns the maximum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n     /**\n      * <p>Returns the maximum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n     /**\n      * <p>Returns the maximum value in an array.</p>\n      * \n-     * @param array  an array\n+     * @param array  an array, must not be null or empty\n      * @return the minimum value in the array\n      * @throws NullArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty\n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n  * @author Phil Steitz\n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n- * @version $Id: NumberUtilsTest.java,v 1.2 2003/06/28 18:42:04 scolebourne Exp $\n+ * @version $Id: NumberUtilsTest.java,v 1.3 2003/07/20 16:03:21 scolebourne Exp $\n  */\n public class NumberUtilsTest extends TestCase {\n \n     public void testStringToIntString() {\n         assertTrue(\"stringToInt(String) 1 failed\", NumberUtils.stringToInt(\"12345\") == 12345);\n         assertTrue(\"stringToInt(String) 2 failed\", NumberUtils.stringToInt(\"abc\") == 0);\n+        assertTrue(\"stringToInt(empty) failed\", NumberUtils.stringToInt(\"\") == 0);\n+        assertTrue(\"stringToInt(null) failed\", NumberUtils.stringToInt(null) == 0);\n     }\n \n     /**\n         assertEquals(\"createNumber(String) 12 failed\", new Float(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));\n         assertEquals(\"createNumber(String) 13 failed\", new Double(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));\n         assertEquals(\"createNumber(String) 14 failed\", new Double(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));\n-\n+        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));\n+        \n         // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n         if(SystemUtils.isJavaVersionAtLeast(1.3f)) { \n             assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils.createNumber(\"1.1E-700F\"));\n \n     public void testCreateFloat() {\n         assertEquals(\"createFloat(String) failed\", new Float(\"1234.5\"), NumberUtils.createFloat(\"1234.5\"));\n+        assertEquals(\"createFloat(null) failed\", null, NumberUtils.createFloat(null));\n+        try {\n+            Float f = NumberUtils.createFloat(\"\");\n+            fail(\"createFloat(empty) failed\");\n+        } catch (NumberFormatException ex) {\n+            ;\n+        }\n     }\n \n     public void testCreateDouble() {\n         assertEquals(\"createDouble(String) failed\", new Double(\"1234.5\"), NumberUtils.createDouble(\"1234.5\"));\n+        assertEquals(\"createDouble(null) failed\", null, NumberUtils.createDouble(null));\n+        try {\n+            Double d = NumberUtils.createDouble(\"\");\n+            fail(\"createDouble(empty) failed\");\n+        } catch (NumberFormatException ex) {\n+            ;\n+        }\n     }\n \n     public void testCreateInteger() {\n         assertEquals(\"createInteger(String) failed\", new Integer(\"12345\"), NumberUtils.createInteger(\"12345\"));\n+        assertEquals(\"createInteger(null) failed\", null, NumberUtils.createInteger(null));\n+        try {\n+            Integer i = NumberUtils.createInteger(\"\");\n+            fail(\"createInteger(empty) failed\");\n+        } catch (NumberFormatException ex) {\n+            ;\n+        }\n     }\n \n     public void testCreateLong() {\n-        assertEquals(\"createInteger(String) failed\", new Long(\"12345\"), NumberUtils.createLong(\"12345\"));\n+        assertEquals(\"createLong(String) failed\", new Long(\"12345\"), NumberUtils.createLong(\"12345\"));\n+        assertEquals(\"createLong(null) failed\", null, NumberUtils.createLong(null));\n+        try {\n+            Long l = NumberUtils.createLong(\"\");\n+            fail(\"createLong(empty) failed\");\n+        } catch (NumberFormatException ex) {\n+            ;\n+        }\n     }\n \n     public void testCreateBigInteger() {\n         assertEquals(\"createBigInteger(String) failed\", new BigInteger(\"12345\"), NumberUtils.createBigInteger(\"12345\"));\n+        assertEquals(\"createBigInteger(null) failed\", null, NumberUtils.createBigInteger(null));\n+        try {\n+            BigInteger i = NumberUtils.createBigInteger(\"\");\n+            fail(\"createBigInteger(empty) failed\");\n+        } catch (NumberFormatException ex) {\n+            ;\n+        }\n     }\n \n     public void testCreateBigDecimal() {\n         assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n+        assertEquals(\"createBigDecimal(null) failed\", null, NumberUtils.createBigDecimal(null));\n+        try {\n+            BigDecimal d = NumberUtils.createBigDecimal(\"\");\n+            fail(\"createBigDecimal(empty) failed\");\n+        } catch (NumberFormatException ex) {\n+            ;\n+        }\n     }\n \n     // min/max tests\n         val = \"11d11\";\n         assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));\n         assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val)); \n+        val = \"11 11\";\n+        assertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));\n+        val = \" 1111\";\n+        assertTrue(\"isNumber(String) 23 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 23 Neg failed\", !checkCreateNumber(val));\n+        val = \"1111 \";\n+        assertTrue(\"isNumber(String) 24 Neg failed\", !NumberUtils.isNumber(val));\n+        assertTrue(\"isNumber(String)/createNumber(String) 24 Neg failed\", !checkCreateNumber(val));\n \n     }\n \n             return true;\n         } catch (NumberFormatException e) {\n             return false;\n-        } catch (NullPointerException e) {\n-            return false;\n-        }\n+       }\n     }\n \n     public void testConstants() {", "timestamp": 1058717001, "metainfo": ""}