{"sha": "4ebff6333591725efb070714e9c10ece57eebd5a", "log": "Add more javadoc example code Ensure empty string behaviour documented in example code   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.72 2003/07/20 14:47:29 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.73 2003/07/20 15:29:44 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n      * \n      * <pre>\n      * StringUtils.clean(null)          = \"\"\n+     * StringUtils.clean(\"\")            = \"\"\n      * StringUtils.clean(\"abc\")         = \"abc\"\n      * StringUtils.clean(\"    abc    \") = \"abc\"\n      * StringUtils.clean(\"     \")       = \"\"\n-     * StringUtils.clean(\"\")            = \"\"\n      * </pre>\n      *\n      * @see java.lang.String#trim()\n      * \n      * <pre>\n      * StringUtils.trim(null)          = null\n+     * StringUtils.trim(\"\")            = \"\"\n+     * StringUtils.trim(\"     \")       = \"\"\n      * StringUtils.trim(\"abc\")         = \"abc\"\n      * StringUtils.trim(\"    abc    \") = \"abc\"\n-     * StringUtils.trim(\"     \")       = \"\"\n-     * StringUtils.trim(\"\")            = \"\"\n      * </pre>\n      *\n      * @param str  the String to be trimmed, may be null\n      * \n      * <pre>\n      * StringUtils.trimToNull(null)          = null\n+     * StringUtils.trimToNull(\"\")            = null\n+     * StringUtils.trimToNull(\"     \")       = null\n      * StringUtils.trimToNull(\"abc\")         = \"abc\"\n      * StringUtils.trimToNull(\"    abc    \") = \"abc\"\n-     * StringUtils.trimToNull(\"     \")       = null\n-     * StringUtils.trimToNull(\"\")            = null\n      * </pre>\n      *  \n      * @param str  the String to be trimmed, may be null\n      * \n      * <pre>\n      * StringUtils.trimToEmpty(null)          = \"\"\n+     * StringUtils.trimToEmpty(\"\")            = \"\"\n+     * StringUtils.trimToEmpty(\"     \")       = \"\"\n      * StringUtils.trimToEmpty(\"abc\")         = \"abc\"\n      * StringUtils.trimToEmpty(\"    abc    \") = \"abc\"\n-     * StringUtils.trimToEmpty(\"     \")       = \"\"\n-     * StringUtils.trimToEmpty(\"\")            = \"\"\n      * </pre>\n      *  \n      * @param str  the String to be trimmed, may be null\n      * \n      * <pre>\n      * StringUtils.strip(null, null)       = null\n+     * StringUtils.strip(\"\", null)         = \"\"\n      * StringUtils.strip(\"abc\", null)      = \"abc\"\n      * StringUtils.strip(\"  abc\", null)    = \"abc\"\n      * StringUtils.strip(\"abc  \", null)    = \"abc\"\n      * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n      * \n      * <pre>\n-     * StringUtils.strip(null, null)       = null\n-     * StringUtils.strip(\"abc\", null)      = \"abc\"\n-     * StringUtils.strip(\"  abc\", null)    = \"abc\"\n-     * StringUtils.strip(\"abc  \", null)    = \"abc  \"\n-     * StringUtils.strip(\" abc \", null)    = \"abc \"\n-     * StringUtils.strip(\"yxabc  \", \"xyz\") = \"abc  \"\n+     * StringUtils.stripStart(null, null)       = null\n+     * StringUtils.stripStart(\"\", null)         = \"\"\n+     * StringUtils.stripStart(\"abc\", \"\")        = \"abc\"\n+     * StringUtils.stripStart(\"abc\", null)      = \"abc\"\n+     * StringUtils.stripStart(\"  abc\", null)    = \"abc\"\n+     * StringUtils.stripStart(\"abc  \", null)    = \"abc  \"\n+     * StringUtils.stripStart(\" abc \", null)    = \"abc \"\n+     * StringUtils.stripStart(\"yxabc  \", \"xyz\") = \"abc  \"\n      * </pre>\n      * \n      * @param str  the String to remove characters from, may be null\n             while ((start != strLen) && Character.isWhitespace(str.charAt(start))) {\n                 start++;\n             }\n+        } else if (stripChars.length() == 0) {\n+            return str;\n         } else {\n             while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != -1)) {\n                 start++;\n      * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n      * \n      * <pre>\n-     * StringUtils.strip(null, null)       = null\n-     * StringUtils.strip(\"abc\", null)      = \"abc\"\n-     * StringUtils.strip(\"  abc\", null)    = \"  abc\"\n-     * StringUtils.strip(\"abc  \", null)    = \"abc\"\n-     * StringUtils.strip(\" abc \", null)    = \" abc\"\n-     * StringUtils.strip(\"  abcyx\", \"xyz\") = \"  abc\"\n+     * StringUtils.stripEnd(null, null)       = null\n+     * StringUtils.stripEnd(\"\", null)         = \"\"\n+     * StringUtils.stripEnd(\"abc\", \"\")        = \"abc\"\n+     * StringUtils.stripEnd(\"abc\", null)      = \"abc\"\n+     * StringUtils.stripEnd(\"  abc\", null)    = \"  abc\"\n+     * StringUtils.stripEnd(\"abc  \", null)    = \"abc\"\n+     * StringUtils.stripEnd(\" abc \", null)    = \" abc\"\n+     * StringUtils.stripEnd(\"  abcyx\", \"xyz\") = \"  abc\"\n      * </pre>\n      * \n      * @param str  the String to remove characters from, may be null\n             while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {\n                 end--;\n             }\n+        } else if (stripChars.length() == 0) {\n+            return str;\n         } else {\n             while ((end != 0) && (stripChars.indexOf(str.charAt(end - 1)) != -1)) {\n                 end--;\n      * <pre>\n      * StringUtils.indexOfAny(null, null)                = -1\n      * StringUtils.indexOfAny(null, [\"ab\",\"cd\"])         = -1\n+     * StringUtils.indexOfAny(\"\", null)                  = -1\n+     * StringUtils.indexOfAny(\"\", [\"ab\",\"cd\"])           = -1\n      * StringUtils.indexOfAny(\"zzabyycdxx\", null)        = -1\n      * StringUtils.indexOfAny(\"zzabyycdxx\", [])          = -1\n      * StringUtils.indexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"]) = 2\n      * <pre>\n      * StringUtils.lastIndexOfAny(null, null)                = -1\n      * StringUtils.lastIndexOfAny(null, [\"ab\",\"cd\"])         = -1\n+     * StringUtils.lastIndexOfAny(\"\", null)                  = -1\n+     * StringUtils.lastIndexOfAny(\"\", [\"ab\",\"cd\"])           = -1\n      * StringUtils.lastIndexOfAny(\"zzabyycdxx\", null)        = -1\n      * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [])          = -1\n      * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"]) = 6\n      * \n      * <pre>\n      * StringUtils.substring(null, 0)   = null\n+     * StringUtils.substring(\"\", 0)     = \"\"\n      * StringUtils.substring(\"abc\", 0)  = \"abc\"\n      * StringUtils.substring(\"abc\", 2)  = \"c\"\n      * StringUtils.substring(\"abc\", 4)  = \"\"\n      * \n      * <pre>\n      * StringUtils.substring(null, 0, 2)    = null\n+     * StringUtils.substring(\"\", 0, 2)      = \"\"\n      * StringUtils.substring(\"abc\", 0, 2)   = \"ab\"\n      * StringUtils.substring(\"abc\", 2, 0)   = \"\"\n      * StringUtils.substring(\"abc\", 2, 4)   = \"c\"\n \n         // check length next\n         if (end > str.length()) {\n-            // check this works.\n             end = str.length();\n         }\n \n      *\n      * <pre>\n      * StringUtils.left(null, 0)    = null\n+     * StringUtils.left(\"\", 2)      = \"\"\n      * StringUtils.left(\"abc\", 0)   = \"\"\n      * StringUtils.left(\"abc\", 2)   = \"ab\"\n      * StringUtils.left(\"abc\", 4)   = \"abc\"\n      *\n      * <pre>\n      * StringUtils.right(null, 0)    = null\n+     * StringUtils.right(\"\", 2)      = \"\"\n      * StringUtils.right(\"abc\", 0)   = \"\"\n      * StringUtils.right(\"abc\", 2)   = \"bc\"\n      * StringUtils.right(\"abc\", 4)   = \"abc\"\n      *\n      * <pre>\n      * StringUtils.mid(null, 0, 0)    = null\n+     * StringUtils.mid(\"\", 0, 4)      = \"\"\n      * StringUtils.mid(\"abc\", 0, 2)   = \"ab\"\n      * StringUtils.mid(\"abc\", 0, 4)   = \"abc\"\n      * StringUtils.mid(\"abc\", 2, 4)   = \"c\"\n      *\n      * <pre>\n      * StringUtils.deleteSpaces(null)           = null\n+     * StringUtils.deleteSpaces(\"\")             = \"\"\n      * StringUtils.deleteSpaces(\"abc\")          = \"abc\"\n      * StringUtils.deleteSpaces(\" \\t  abc \\n \") = \"abc\"\n      * StringUtils.deleteSpaces(\"ab  c\")        = \"abc\"\n      * {@link Character#isWhitespace(char)}.</p>\n      *\n      * <pre>\n-     * StringUtils.deleteWhitespace(null)        = null\n-     * StringUtils.deleteWhitespace(\"abc\")       = \"abc\"\n-     * StringUtils.deleteWhitespace(\"   abc  \")  = \"abc\"\n+     * StringUtils.deleteWhitespace(null)         = null\n+     * StringUtils.deleteWhitespace(\"\")           = \"\"\n+     * StringUtils.deleteWhitespace(\"abc\")        = \"abc\"\n+     * StringUtils.deleteWhitespace(\"   ab  c  \") = \"abc\"\n      * </pre>\n      *  \n      * @param str  the String to delete whitespace from, may be null\n      * \n      * <pre>\n      * StringUtils.replaceOnce(null, null, null)  = null\n+     * StringUtils.replaceOnce(\"\", null, null)    = \"\"\n      * StringUtils.replaceOnce(\"aba\", null, null) = \"aba\"\n      * StringUtils.replaceOnce(\"aba\", null, null) = \"aba\"\n      * StringUtils.replaceOnce(\"aba\", \"a\", null)  = \"aba\"\n      * \n      * <pre>\n      * StringUtils.replace(null, null, null)  = null\n+     * StringUtils.replace(\"\", null, null)    = \"\"\n      * StringUtils.replace(\"aba\", null, null) = \"aba\"\n      * StringUtils.replace(\"aba\", null, null) = \"aba\"\n      * StringUtils.replace(\"aba\", \"a\", null)  = \"aba\"\n      *\n      * <pre>\n      * StringUtils.replace(null, null, null, 1)   = null\n+     * StringUtils.replace(\"\", null, null, 1)     = \"\"\n      * StringUtils.replace(\"abaa\", null, null, 1) = \"abaa\"\n      * StringUtils.replace(\"abaa\", null, null, 1) = \"abaa\"\n      * StringUtils.replace(\"abaa\", \"a\", null, 1)  = \"abaa\"\n      *\n      * <pre>\n      * StringUtils.overlayString(null, null, 2, 4)        = null\n+     * StringUtils.overlayString(\"\", \"abc\", 0, 0)         = \"abc\"\n      * StringUtils.overlayString(\"abcdef\", null, 2, 4)    = \"abef\"\n      * StringUtils.overlayString(\"abcdef\", \"\", 2, 4)      = \"abef\"\n      * StringUtils.overlayString(\"abcdef\", \"zzzz\", 2, 4)  = \"abzzzzef\"\n      * \n      * <pre>\n      * StringUtils.rightPad(null, 1)   = null\n+     * StringUtils.rightPad(\"\", 3)     = \"   \"\n      * StringUtils.rightPad(\"bat\", 3)  = \"bat\"\n      * StringUtils.rightPad(\"bat\", 5)  = \"bat  \"\n      * StringUtils.rightPad(\"bat\", 1)  = \"bat\"\n      *\n      * <pre>\n      * StringUtils.rightPad(null, 1, 'z')   = null\n+     * StringUtils.rightPad(\"\", 3, 'z')     = \"zzz\"\n      * StringUtils.rightPad(\"bat\", 3, 'z')  = \"bat\"\n      * StringUtils.rightPad(\"bat\", 5, 'z')  = \"batzz\"\n      * StringUtils.rightPad(\"bat\", 1, 'z')  = \"bat\"\n      *\n      * <pre>\n      * StringUtils.rightPad(null, 1, \"yz\")   = null\n+     * StringUtils.rightPad(\"\", 3, \"z\")      = \"zzz\"\n      * StringUtils.rightPad(\"bat\", 3, \"yz\")  = \"bat\"\n      * StringUtils.rightPad(\"bat\", 5, \"yz\")  = \"batyz\"\n      * StringUtils.rightPad(\"bat\", 8, \"yz\")  = \"batyzyzy\"\n      *\n      * <pre>\n      * StringUtils.leftPad(null, 1)   = null\n+     * StringUtils.leftPad(\"\", 3)     = \"   \"\n      * StringUtils.leftPad(\"bat\", 3)  = \"bat\"\n      * StringUtils.leftPad(\"bat\", 5)  = \"  bat\"\n      * StringUtils.leftPad(\"bat\", 1)  = \"bat\"\n      *\n      * <pre>\n      * StringUtils.leftPad(null, 1, 'z')   = null\n+     * StringUtils.leftPad(\"\", 3, 'z')     = \"zzz\"\n      * StringUtils.leftPad(\"bat\", 3, 'z')  = \"bat\"\n      * StringUtils.leftPad(\"bat\", 5, 'z')  = \"zzbat\"\n      * StringUtils.leftPad(\"bat\", 1, 'z')  = \"bat\"\n      *\n      * <pre>\n      * StringUtils.leftPad(null, 1, \"yz\")   = null\n+     * StringUtils.leftPad(\"\", 3, \"z\")      = \"zzz\"\n      * StringUtils.leftPad(\"bat\", 3, \"yz\")  = \"bat\"\n      * StringUtils.leftPad(\"bat\", 5, \"yz\")  = \"yzbat\"\n      * StringUtils.leftPad(\"bat\", 8, \"yz\")  = \"yzyzybat\"\n      * <pre>\n      * StringUtils.center(null, -1)  = null\n      * StringUtils.center(null, 4)   = null\n+     * StringUtils.center(\"\", 4)     = \"    \"\n      * StringUtils.center(\"ab\", -1)  = \"ab\"\n-     * StringUtils.center(\"\", 4)     = \"    \"\n      * StringUtils.center(\"ab\", 4)   = \" ab \"\n      * StringUtils.center(\"abcd\", 2) = \"abcd\"\n      * StringUtils.center(\"a\", 4)    = \" a  \"\n      *\n      * <pre>\n      * StringUtils.center(null, -1, ' ')  = null\n-     * StringUtils.center(\"ab\", -1, ' ')  = \"ab\"\n      * StringUtils.center(null, 4, ' ')   = null\n      * StringUtils.center(\"\", 4, ' ')     = \"    \"\n+     * StringUtils.center(\"ab\", -1, ' ')  = \"ab\"\n      * StringUtils.center(\"ab\", 4, ' ')   = \" ab\"\n      * StringUtils.center(\"abcd\", 2, ' ') = \"abcd\"\n      * StringUtils.center(\"a\", 4, ' ')    = \" a  \"\n      *\n      * <pre>\n      * StringUtils.center(null, -1, \" \")  = null\n-     * StringUtils.center(\"ab\", -1, \" \")  = \"ab\"\n      * StringUtils.center(null, 4, \" \")   = null\n      * StringUtils.center(\"\", 4, \" \")     = \"    \"\n+     * StringUtils.center(\"ab\", -1, \" \")  = \"ab\"\n      * StringUtils.center(\"ab\", 4, \" \")   = \" ab\"\n      * StringUtils.center(\"abcd\", 2, \" \") = \"abcd\"\n      * StringUtils.center(\"a\", 4, \" \")    = \" a  \"\n      * \n      * <pre>\n      * StringUtils.upperCase(null)  = null\n+     * StringUtils.upperCase(\"\")    = \"\"\n      * StringUtils.upperCase(\"aBc\") = \"ABC\"\n      * </pre>\n      * \n      * \n      * <pre>\n      * StringUtils.lowerCase(null)  = null\n+     * StringUtils.lowerCase(\"\")    = \"\"\n      * StringUtils.lowerCase(\"aBc\") = \"abc\"\n      * </pre>\n      * \n      * \n      * <pre>\n      * StringUtils.capitalise(null)  = null\n+     * StringUtils.capitalise(\"\")    = \"\"\n      * StringUtils.capitalise(\"cat\") = \"Cat\"\n      * StringUtils.capitalise(\"cAt\") = \"CAt\"\n      * </pre>\n      * \n      * <pre>\n      * StringUtils.uncapitalise(null)  = null\n+     * StringUtils.uncapitalise(\"\")    = \"\"\n      * StringUtils.uncapitalise(\"Cat\") = \"cat\"\n      * StringUtils.uncapitalise(\"CAT\") = \"cAT\"\n      * </pre>\n      * \n      * <pre>\n      * StringUtils.swapCase(null)                 = null\n+     * StringUtils.swapCase(\"\")                   = \"\"\n      * StringUtils.swapCase(\"The dog has a BONE\") = \"tHE DOG HAS A bone\"\n      * </pre>\n      * \n      * \n      * <pre>\n      * StringUtils.getNestedString(null, \"tag\")        = null\n+     * StringUtils.getNestedString(\"\", \"\")             = \"\"\n+     * StringUtils.getNestedString(\"\", \"tag\")          = null\n      * StringUtils.getNestedString(\"tagabctag\", null)  = null\n      * StringUtils.getNestedString(\"tagabctag\", \"\")    = \"\"\n      * StringUtils.getNestedString(\"tagabctag\", \"tag\") = \"abc\"\n      *\n      * <pre>\n      * StringUtils.getNestedString(null, \"y\", \"z\")      = null\n+     * StringUtils.getNestedString(\"\", \"\", \"\")          = \"\"\n+     * StringUtils.getNestedString(\"\", \"\", \"tag\")       = null\n+     * StringUtils.getNestedString(\"\", \"tag\", \"tag\")    = null\n      * StringUtils.getNestedString(\"yabcz\", null, null) = null\n      * StringUtils.getNestedString(\"yabcz\", \"\", \"\")     = \"\"\n      * StringUtils.getNestedString(\"yabcz\", \"y\", \"z\")   = \"abc\"\n     /**\n      * <p>How many times is the substring in the larger String.</p>\n      *\n-     * <p><code>null</code> returns <code>0</code>.</p>\n-     * \n+     * <p>A <code>null</code> String input returns <code>0</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.countMatches(null, null)    = 0\n+     * StringUtils.countMatches(null, \"\")      = 0\n+     * StringUtils.countMatches(null, \"a\")     = 0\n+     * StringUtils.countMatches(\"\", null)      = 0\n+     * StringUtils.countMatches(\"\", \"\")        = 0\n+     * StringUtils.countMatches(\"\", \"a\")       = 0\n+     * StringUtils.countMatches(\"abba\", null)  = 0\n+     * StringUtils.countMatches(\"abba\", \"\")    = 0\n+     * StringUtils.countMatches(\"abba\", \"a\")   = 2\n+     * StringUtils.countMatches(\"abba\", \"ab\")  = 1\n+     * StringUtils.countMatches(\"abba\", \"xxx\") = 0\n+     * </pre>\n+     *\n      * @param str  the String to check, may be null\n      * @param sub  the substring to count, may be null\n      * @return the number of occurances, 0 if either String is <code>null</code>\n      * <p><code>null</code> will return <code>false</code>.\n      * An empty String (\"\") will return <code>true</code>.</p>\n      * \n+     * <pre>\n+     * StringUtils.isAlpha(null)   = false\n+     * StringUtils.isAlpha(\"\")     = true\n+     * StringUtils.isAlpha(\"  \")   = false\n+     * StringUtils.isAlpha(\"abc\")  = true\n+     * StringUtils.isAlpha(\"ab2c\") = false\n+     * StringUtils.isAlpha(\"ab-c\") = false\n+     * </pre>\n+     *\n      * @param str  the String to check, may be null\n      * @return <code>true</code> if only contains letters, and is non-null\n      */\n     }\n \n     /**\n-     * <p>Checks if the String contains only whitespace.</p>\n-     *\n-     * <p><code>null</code> will return <code>false</code>.\n-     * An empty String (\"\") will return <code>true</code>.</p>\n-     * \n-     * @param str  the String to check, may be null\n-     * @return <code>true</code> if only contains whitespace, and is non-null\n-     */\n-    public static boolean isWhitespace(String str) {\n-        if (str == null) {\n-            return false;\n-        }\n-        int sz = str.length();\n-        for (int i = 0; i < sz; i++) {\n-            if ((Character.isWhitespace(str.charAt(i)) == false) ) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    /**\n      * <p>Checks if the String contains only unicode letters and\n      * space (' ').</p>\n      *\n      * <p><code>null</code> will return <code>false</code>\n      * An empty String (\"\") will return <code>true</code>.</p>\n      * \n+     * <pre>\n+     * StringUtils.isAlphaSpace(null)   = false\n+     * StringUtils.isAlphaSpace(\"\")     = true\n+     * StringUtils.isAlphaSpace(\"  \")   = true\n+     * StringUtils.isAlphaSpace(\"abc\")  = true\n+     * StringUtils.isAlphaSpace(\"ab c\") = true\n+     * StringUtils.isAlphaSpace(\"ab2c\") = false\n+     * StringUtils.isAlphaSpace(\"ab-c\") = false\n+     * </pre>\n+     *\n      * @param str  the String to check, may be null\n      * @return <code>true</code> if only contains letters and space,\n      *  and is non-null\n      * <p><code>null</code> will return <code>false</code>.\n      * An empty String (\"\") will return <code>true</code>.</p>\n      * \n+     * <pre>\n+     * StringUtils.isAlphanumeric(null)   = false\n+     * StringUtils.isAlphanumeric(\"\")     = true\n+     * StringUtils.isAlphanumeric(\"  \")   = false\n+     * StringUtils.isAlphanumeric(\"abc\")  = true\n+     * StringUtils.isAlphanumeric(\"ab c\") = false\n+     * StringUtils.isAlphanumeric(\"ab2c\") = true\n+     * StringUtils.isAlphanumeric(\"ab-c\") = false\n+     * </pre>\n+     *\n      * @param str  the String to check, may be null\n      * @return <code>true</code> if only contains letters or digits,\n      *  and is non-null\n      * <p><code>null</code> will return <code>false</code>.\n      * An empty String (\"\") will return <code>true</code>.</p>\n      * \n+     * <pre>\n+     * StringUtils.isAlphanumeric(null)   = false\n+     * StringUtils.isAlphanumeric(\"\")     = true\n+     * StringUtils.isAlphanumeric(\"  \")   = true\n+     * StringUtils.isAlphanumeric(\"abc\")  = true\n+     * StringUtils.isAlphanumeric(\"ab c\") = true\n+     * StringUtils.isAlphanumeric(\"ab2c\") = true\n+     * StringUtils.isAlphanumeric(\"ab-c\") = false\n+     * </pre>\n+     *\n      * @param str  the String to check, may be null\n      * @return <code>true</code> if only contains letters, digits or space,\n      *  and is non-null\n     }\n \n     /**\n-     * <p>Checks if the String contains only unicode digits.</p>\n+     * <p>Checks if the String contains only unicode digits.\n+     * A decimal point is not a unicode digit and returns false.</p>\n      *\n      * <p><code>null</code> will return <code>false</code>.\n      * An empty String (\"\") will return <code>true</code>.</p>\n      * \n+     * <pre>\n+     * StringUtils.isNumeric(null)   = false\n+     * StringUtils.isNumeric(\"\")     = true\n+     * StringUtils.isNumeric(\"  \")   = false\n+     * StringUtils.isNumeric(\"123\")  = true\n+     * StringUtils.isNumeric(\"12 3\") = false\n+     * StringUtils.isNumeric(\"ab2c\") = false\n+     * StringUtils.isNumeric(\"12-3\") = false\n+     * StringUtils.isNumeric(\"12.3\") = false\n+     * </pre>\n+     *\n      * @param str  the String to check, may be null\n      * @return <code>true</code> if only contains digits, and is non-null\n      */\n \n     /**\n      * <p>Checks if the String contains only unicode digits or space\n-     * (<code>' '</code>).</p>\n+     * (<code>' '</code>).\n+     * A decimal point is not a unicode digit and returns false.</p>\n      *\n      * <p><code>null</code> will return <code>false</code>.\n      * An empty String (\"\") will return <code>true</code>.</p>\n      * \n+     * <pre>\n+     * StringUtils.isNumeric(null)   = false\n+     * StringUtils.isNumeric(\"\")     = true\n+     * StringUtils.isNumeric(\"  \")   = true\n+     * StringUtils.isNumeric(\"123\")  = true\n+     * StringUtils.isNumeric(\"12 3\") = true\n+     * StringUtils.isNumeric(\"ab2c\") = false\n+     * StringUtils.isNumeric(\"12-3\") = false\n+     * StringUtils.isNumeric(\"12.3\") = false\n+     * </pre>\n+     *\n      * @param str  the String to check, may be null\n      * @return <code>true</code> if only contains digits or space,\n      *  and is non-null\n         for (int i = 0; i < sz; i++) {\n             if ((Character.isDigit(str.charAt(i)) == false) &&\n                 (str.charAt(i) != ' ')) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks if the String contains only whitespace.</p>\n+     *\n+     * <p><code>null</code> will return <code>false</code>.\n+     * An empty String (\"\") will return <code>true</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.isWhitespace(null)   = false\n+     * StringUtils.isWhitespace(\"\")     = true\n+     * StringUtils.isWhitespace(\"  \")   = true\n+     * StringUtils.isWhitespace(\"abc\")  = false\n+     * StringUtils.isWhitespace(\"ab2c\") = false\n+     * StringUtils.isWhitespace(\"ab-c\") = false\n+     * </pre>\n+     *\n+     * @param str  the String to check, may be null\n+     * @return <code>true</code> if only contains whitespace, and is non-null\n+     */\n+    public static boolean isWhitespace(String str) {\n+        if (str == null) {\n+            return false;\n+        }\n+        int sz = str.length();\n+        for (int i = 0; i < sz; i++) {\n+            if ((Character.isWhitespace(str.charAt(i)) == false) ) {\n                 return false;\n             }\n         }\n--- a/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: StringUtilsSubstringTest.java,v 1.5 2003/07/18 02:06:23 scolebourne Exp $\n+ * @version $Id: StringUtilsSubstringTest.java,v 1.6 2003/07/20 15:29:44 scolebourne Exp $\n  */\n public class StringUtilsSubstringTest extends TestCase {\n     private static final String FOO = \"foo\";\n              StringUtils.countMatches(\"oooooooooooo\", \"ooo\"));\n     }\n \n-    public void testGetNestedString() {\n+    public void testGetNestedString_StringString() {\n         assertEquals(null, StringUtils.getNestedString(null, \"tag\"));\n+        assertEquals(\"\", StringUtils.getNestedString(\"\", \"\"));\n+        assertEquals(null, StringUtils.getNestedString(\"\", \"abc\"));\n+        assertEquals(\"\", StringUtils.getNestedString(\"    \", \" \"));\n         assertEquals(null, StringUtils.getNestedString(\"abc\", null));\n         assertEquals(\"\", StringUtils.getNestedString(\"abc\", \"\"));\n         assertEquals(null, StringUtils.getNestedString(\"abc\", \"a\"));\n         assertEquals(\"bc\", StringUtils.getNestedString(\"abca\", \"a\"));\n         assertEquals(\"bc\", StringUtils.getNestedString(\"abcabca\", \"a\"));\n-        assertEquals(\"\", StringUtils.getNestedString(\"\", \"\"));\n-        assertEquals(\"\", StringUtils.getNestedString(\"    \", \" \"));\n         assertEquals(\"bar\", StringUtils.getNestedString(\"\\nbar\\n\", \"\\n\"));\n-        \n+    }\n+            \n+    public void testGetNestedString_StringStringString() {\n+        assertEquals(null, StringUtils.getNestedString(null, \"\", \"\"));\n         assertEquals(\"\", StringUtils.getNestedString(\"\", \"\", \"\"));\n         assertEquals(\"\", StringUtils.getNestedString(\"    \", \" \", \"  \"));\n         assertEquals(\"bar\", StringUtils.getNestedString(\"<foo>bar</foo>\", \"<foo>\", \"</foo>\") );", "timestamp": 1058714984, "metainfo": ""}