{"sha": "9a554c087e66955c2f3fc4b6f9309ddb1ae18083", "log": "Renamed \"cause\" private field to \"nestable\" to better reflect what it is.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableDelegate.java,v 1.7 2002/08/25 19:02:49 dlr Exp $\n+ * @version $Id: NestableDelegate.java,v 1.8 2002/08/25 19:09:38 dlr Exp $\n  */\n public class NestableDelegate\n {\n         + \"constructor must extend java.lang.Throwable\";\n \n     /**\n-     * Holds the reference to the exception or error that caused this\n-     * exception to be thrown.\n-     */\n-    private Throwable cause = null;\n+     * Holds the reference to the exception or error that we're\n+     * wrapping (which must be a {@link\n+     * org.apache.commons.lang.exception.Nestable} implementation).\n+     */\n+    private Throwable nestable = null;\n \n     /**\n      * Constructs a new <code>NestableDelegate</code> instance to manage the\n      * specified <code>Nestable</code>.\n      *\n-     * @param cause the Nestable implementation (<i>must</i> extend\n+     * @param nestable the Nestable implementation (<i>must</i> extend\n      * {@link java.lang.Throwable})\n      */\n-    NestableDelegate(Nestable cause) // package\n-    {\n-        if (cause instanceof Throwable)\n-        {\n-            this.cause = (Throwable) cause;\n+    NestableDelegate(Nestable nestable) // package\n+    {\n+        if (nestable instanceof Throwable)\n+        {\n+            this.nestable = (Throwable) nestable;\n         }\n         else\n         {\n             msg.append(baseMsg);\n         }\n \n-        Throwable nestedCause = ExceptionUtils.getCause(this.cause);\n+        Throwable nestedCause = ExceptionUtils.getCause(this.nestable);\n         if (nestedCause != null)\n         {\n             String causeMsg = nestedCause.getMessage();\n     {\n         if(index == 0)\n         {\n-            return this.cause;\n+            return this.nestable;\n         }\n         Throwable[] throwables = this.getThrowables();\n         return throwables[index];\n      */\n     int getThrowableCount() // package\n     {\n-        return ExceptionUtils.getThrowableCount(this.cause);\n+        return ExceptionUtils.getThrowableCount(this.nestable);\n     }\n     \n     /**\n      */\n     Throwable[] getThrowables() // package\n     {\n-        return ExceptionUtils.getThrowables(this.cause);\n+        return ExceptionUtils.getThrowables(this.nestable);\n     }\n \n     /**\n      */\n     int indexOfThrowable(Class type, int fromIndex) // package\n     {\n-        return ExceptionUtils.indexOfThrowable(this.cause, type, fromIndex);\n+        return ExceptionUtils.indexOfThrowable(this.nestable, type, fromIndex);\n     }\n     \n     /**\n     {\n         synchronized (out)\n         {\n-            String[] st = getStackFrames(this.cause);\n-            Throwable nestedCause = ExceptionUtils.getCause(this.cause);\n+            String[] st = getStackFrames(this.nestable);\n+            Throwable nestedCause = ExceptionUtils.getCause(this.nestable);\n             if (nestedCause != null)\n             {\n                 if (nestedCause instanceof Nestable)", "timestamp": 1030302578, "metainfo": ""}