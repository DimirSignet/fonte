{"sha": "a6e6f51c35ea53d75ba994a96f1baf02eca651a5", "log": "we do not use the final parameter code style in the rest of Lang, so bringing these two classes in line with the others   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @author Maarten Coene\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.45 2004/07/27 21:10:33 ggregory Exp $\n+ * @version $Id: ArrayUtils.java,v 1.46 2004/08/15 02:12:51 bayard Exp $\n  */\n public class ArrayUtils {\n \n      * @param array  the array to get a toString for, may be <code>null</code>\n      * @return a String representation of the array, '{}' if null array input\n      */\n-    public static String toString(final Object array) {\n+    public static String toString(Object array) {\n         return toString(array, \"{}\");\n     }\n \n      * @param stringIfNull  the String to return if the array is <code>null</code>\n      * @return a String representation of the array\n      */    \n-    public static String toString(final Object array, final String stringIfNull) {\n+    public static String toString(Object array, String stringIfNull) {\n         if (array == null) {\n             return stringIfNull;\n         }\n      * @param array  the array to get a hashCode for, may be <code>null</code>\n      * @return a hashCode for the array, zero if null array input\n      */\n-    public static int hashCode(final Object array) {\n+    public static int hashCode(Object array) {\n         return new HashCodeBuilder().append(array).toHashCode();\n     }\n \n      * @param array2  the right hand array to compare, may be <code>null</code>\n      * @return <code>true</code> if the arrays are equal\n      */\n-    public static boolean isEquals(final Object array1, final Object array2) {\n+    public static boolean isEquals(Object array1, Object array2) {\n         return new EqualsBuilder().append(array1, array2).isEquals();\n     }\n \n      * @throws IllegalArgumentException  if the array contains elements other\n      *  than {@link java.util.Map.Entry} and an Array\n      */\n-    public static Map toMap(final Object[] array) {\n+    public static Map toMap(Object[] array) {\n         if (array == null) {\n             return null;\n         }\n      * @param array  the array to shallow clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n-    public static Object[] clone(final Object[] array) {\n+    public static Object[] clone(Object[] array) {\n         if (array == null) {\n             return null;\n         }\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n-    public static long[] clone(final long[] array) {\n+    public static long[] clone(long[] array) {\n         if (array == null) {\n             return null;\n         }\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n-    public static short[] clone(final short[] array) {\n+    public static short[] clone(short[] array) {\n         if (array == null) {\n             return null;\n         }\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n-    public static char[] clone(final char[] array) {\n+    public static char[] clone(char[] array) {\n         if (array == null) {\n             return null;\n         }\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n-    public static byte[] clone(final byte[] array) {\n+    public static byte[] clone(byte[] array) {\n         if (array == null) {\n             return null;\n         }\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n-    public static double[] clone(final double[] array) {\n+    public static double[] clone(double[] array) {\n         if (array == null) {\n             return null;\n         }\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n-    public static float[] clone(final float[] array) {\n+    public static float[] clone(float[] array) {\n         if (array == null) {\n             return null;\n         }\n      * @param array  the array to clone, may be <code>null</code>\n      * @return the cloned array, <code>null</code> if <code>null</code> input\n      */\n-    public static boolean[] clone(final boolean[] array) {\n+    public static boolean[] clone(boolean[] array) {\n         if (array == null) {\n             return null;\n         }\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */    \n-    public static boolean isSameLength(final Object[] array1, final Object[] array2) {\n+    public static boolean isSameLength(Object[] array1, Object[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(final long[] array1, final long[] array2) {\n+    public static boolean isSameLength(long[] array1, long[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(final int[] array1, final int[] array2) {\n+    public static boolean isSameLength(int[] array1, int[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(final short[] array1, final short[] array2) {\n+    public static boolean isSameLength(short[] array1, short[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(final char[] array1, final char[] array2) {\n+    public static boolean isSameLength(char[] array1, char[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(final byte[] array1, final byte[] array2) {\n+    public static boolean isSameLength(byte[] array1, byte[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(final double[] array1, final double[] array2) {\n+    public static boolean isSameLength(double[] array1, double[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(final float[] array1, final float[] array2) {\n+    public static boolean isSameLength(float[] array1, float[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n      * @return <code>true</code> if length of arrays matches, treating\n      *  <code>null</code> as an empty array\n      */\n-    public static boolean isSameLength(final boolean[] array1, final boolean[] array2) {\n+    public static boolean isSameLength(boolean[] array1, boolean[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n             (array2 == null && array1 != null && array1.length > 0) ||\n             (array1 != null && array2 != null && array1.length != array2.length)) {\n      * @return The length of the array, or <code>0</code> if the array is <code>null</code>\n      * @throws IllegalArgumentException if the object arguement is not an array.\n      */\n-    public static int getLength(final Object array) {\n+    public static int getLength(Object array) {\n         if (array == null) {\n             return 0;\n         } else {\n      * @return the last index, -1 if empty or null\n      * @throws IllegalArgumentException if the object arguement is not an array.\n      */\n-    public static int lastIndex(final Object array) {\n+    public static int lastIndex(Object array) {\n         return ArrayUtils.getLength(array) - 1;\n     }\n     \n      * @return <code>true</code> if type of arrays matches\n      * @throws IllegalArgumentException if either array is <code>null</code>\n      */    \n-    public static boolean isSameType(final Object array1, final Object array2) {\n+    public static boolean isSameType(Object array1, Object array2) {\n         if (array1 == null || array2 == null) {\n             throw new IllegalArgumentException(\"The Array must not be null\");\n         }\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(final Object[] array) {\n+    public static void reverse(Object[] array) {\n         if (array == null) {\n             return;\n         }\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(final long[] array) {\n+    public static void reverse(long[] array) {\n         if (array == null) {\n             return;\n         }\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(final int[] array) {\n+    public static void reverse(int[] array) {\n         if (array == null) {\n             return;\n         }\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(final short[] array) {\n+    public static void reverse(short[] array) {\n         if (array == null) {\n             return;\n         }\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(final char[] array) {\n+    public static void reverse(char[] array) {\n         if (array == null) {\n             return;\n         }\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(final byte[] array) {\n+    public static void reverse(byte[] array) {\n         if (array == null) {\n             return;\n         }\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(final double[] array) {\n+    public static void reverse(double[] array) {\n         if (array == null) {\n             return;\n         }\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(final float[] array) {\n+    public static void reverse(float[] array) {\n         if (array == null) {\n             return;\n         }\n      * \n      * @param array  the array to reverse, may be <code>null</code>\n      */\n-    public static void reverse(final boolean[] array) {\n+    public static void reverse(boolean[] array) {\n         if (array == null) {\n             return;\n         }\n      * @return the index of the object within the array, \n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final Object[] array, final Object objectToFind) {\n+    public static int indexOf(Object[] array, Object objectToFind) {\n         return indexOf(array, objectToFind, 0);\n     }\n \n      * @return the index of the object within the array starting at the index,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final Object[] array, final Object objectToFind, int startIndex) {\n+    public static int indexOf(Object[] array, Object objectToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n      * @return the last index of the object within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final Object[] array, final Object objectToFind) {\n+    public static int lastIndexOf(Object[] array, Object objectToFind) {\n         return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);\n     }\n \n      * @return the last index of the object within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final Object[] array, final Object objectToFind, int startIndex) {\n+    public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n      * @param objectToFind  the object to find\n      * @return <code>true</code> if the array contains the object\n      */\n-    public static boolean contains(final Object[] array, final Object objectToFind) {\n+    public static boolean contains(Object[] array, Object objectToFind) {\n         return (indexOf(array, objectToFind) != -1);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final long[] array, final long valueToFind) {\n+    public static int indexOf(long[] array, long valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final long[] array, final long valueToFind, int startIndex) {\n+    public static int indexOf(long[] array, long valueToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final long[] array, final long valueToFind) {\n+    public static int lastIndexOf(long[] array, long valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) {\n+    public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      */\n-    public static boolean contains(final long[] array, final long valueToFind) {\n+    public static boolean contains(long[] array, long valueToFind) {\n         return (indexOf(array, valueToFind) != -1);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final int[] array, final int valueToFind) {\n+    public static int indexOf(int[] array, int valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final int[] array, final int valueToFind, int startIndex) {\n+    public static int indexOf(int[] array, int valueToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final int[] array, final int valueToFind) {\n+    public static int lastIndexOf(int[] array, int valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final int[] array, final int valueToFind, int startIndex) {\n+    public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      */\n-    public static boolean contains(final int[] array, final int valueToFind) {\n+    public static boolean contains(int[] array, int valueToFind) {\n         return (indexOf(array, valueToFind) != -1);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final short[] array, final short valueToFind) {\n+    public static int indexOf(short[] array, short valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final short[] array, final short valueToFind, int startIndex) {\n+    public static int indexOf(short[] array, short valueToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final short[] array, final short valueToFind) {\n+    public static int lastIndexOf(short[] array, short valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final short[] array, final short valueToFind, int startIndex) {\n+    public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      */\n-    public static boolean contains(final short[] array, final short valueToFind) {\n+    public static boolean contains(short[] array, short valueToFind) {\n         return (indexOf(array, valueToFind) != -1);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final char[] array, final char valueToFind) {\n+    public static int indexOf(char[] array, char valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final char[] array, final char valueToFind, int startIndex) {\n+    public static int indexOf(char[] array, char valueToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final char[] array, final char valueToFind) {\n+    public static int lastIndexOf(char[] array, char valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final char[] array, final char valueToFind, int startIndex) {\n+    public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      */\n-    public static boolean contains(final char[] array, final char valueToFind) {\n+    public static boolean contains(char[] array, char valueToFind) {\n         return (indexOf(array, valueToFind) != -1);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final byte[] array, final byte valueToFind) {\n+    public static int indexOf(byte[] array, byte valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final byte[] array, final byte valueToFind, int startIndex) {\n+    public static int indexOf(byte[] array, byte valueToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final byte[] array, final byte valueToFind) {\n+    public static int lastIndexOf(byte[] array, byte valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) {\n+    public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {\n         if (array == null) {\n             return -1;\n         }\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      */\n-    public static boolean contains(final byte[] array, final byte valueToFind) {\n+    public static boolean contains(byte[] array, byte valueToFind) {\n         return (indexOf(array, valueToFind) != -1);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final double[] array, final double valueToFind) {\n+    public static int indexOf(double[] array, double valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final double[] array, final double valueToFind, final double tolerance) {\n+    public static int indexOf(double[] array, double valueToFind, double tolerance) {\n         return indexOf(array, valueToFind, 0, tolerance);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final double[] array, final double valueToFind, int startIndex) {\n+    public static int indexOf(double[] array, double valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n             return -1;\n         }\n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {\n+    public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance) {\n         if (ArrayUtils.isEmpty(array)) {\n             return -1;\n         }\n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final double[] array, final double valueToFind) {\n+    public static int lastIndexOf(double[] array, double valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final double[] array, final double valueToFind, final double tolerance) {\n+    public static int lastIndexOf(double[] array, double valueToFind, double tolerance) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);\n     }\n \n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) {\n+    public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n             return -1;\n         }\n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex, double tolerance) {\n+    public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {\n         if (ArrayUtils.isEmpty(array)) {\n             return -1;\n         }\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      */\n-    public static boolean contains(final double[] array, final double valueToFind) {\n+    public static boolean contains(double[] array, double valueToFind) {\n         return (indexOf(array, valueToFind) != -1);\n     }\n \n      * @param tolerance  the array contains the tolerance of the search\n      * @return true if value falling within tolerance is in array\n      */\n-    public static boolean contains(final double[] array, final double valueToFind, final double tolerance) {\n+    public static boolean contains(double[] array, double valueToFind, double tolerance) {\n         return (indexOf(array, valueToFind, 0, tolerance) != -1);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final float[] array, final float valueToFind) {\n+    public static int indexOf(float[] array, float valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final float[] array, final float valueToFind, int startIndex) {\n+    public static int indexOf(float[] array, float valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n             return -1;\n         }\n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final float[] array, final float valueToFind) {\n+    public static int lastIndexOf(float[] array, float valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) {\n+    public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n             return -1;\n         }\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      */\n-    public static boolean contains(final float[] array, final float valueToFind) {\n+    public static boolean contains(float[] array, float valueToFind) {\n         return (indexOf(array, valueToFind) != -1);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final boolean[] array, final boolean valueToFind) {\n+    public static int indexOf(boolean[] array, boolean valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     }\n \n      * @return the index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n+    public static int indexOf(boolean[] array, boolean valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n             return -1;\n         }\n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final boolean[] array, final boolean valueToFind) {\n+    public static int lastIndexOf(boolean[] array, boolean valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     }\n \n      * @return the last index of the value within the array,\n      *  <code>-1</code> if not found or <code>null</code> array input\n      */\n-    public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) {\n+    public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n             return -1;\n         }\n      * @param valueToFind  the value to find\n      * @return <code>true</code> if the array contains the object\n      */\n-    public static boolean contains(final boolean[] array, final boolean valueToFind) {\n+    public static boolean contains(boolean[] array, boolean valueToFind) {\n         return (indexOf(array, valueToFind) != -1);\n     }\n \n      * @return a <code>long</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n      */\n-    public static long[] toPrimitive(final Long[] array) {\n+    public static long[] toPrimitive(Long[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return a <code>long</code> array, <code>null</code> if null array input\n      */\n-    public static long[] toPrimitive(final Long[] array, final long valueForNull) {\n+    public static long[] toPrimitive(Long[] array, long valueForNull) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param array  a <code>long</code> array\n      * @return a <code>Long</code> array, <code>null</code> if null array input\n      */\n-    public static Long[] toObject(final long[] array) {\n+    public static Long[] toObject(long[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @return an <code>int</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n      */\n-    public static int[] toPrimitive(final Integer[] array) {\n+    public static int[] toPrimitive(Integer[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return an <code>int</code> array, <code>null</code> if null array input\n      */\n-    public static int[] toPrimitive(final Integer[] array, final int valueForNull) {\n+    public static int[] toPrimitive(Integer[] array, int valueForNull) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param array  an <code>int</code> array\n      * @return an <code>Integer</code> array, <code>null</code> if null array input\n      */\n-    public static Integer[] toObject(final int[] array) {\n+    public static Integer[] toObject(int[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @return a <code>byte</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n      */\n-    public static short[] toPrimitive(final Short[] array) {\n+    public static short[] toPrimitive(Short[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return a <code>byte</code> array, <code>null</code> if null array input\n      */\n-    public static short[] toPrimitive(final Short[] array, final short valueForNull) {\n+    public static short[] toPrimitive(Short[] array, short valueForNull) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param array  a <code>short</code> array\n      * @return a <code>Short</code> array, <code>null</code> if null array input\n      */\n-    public static Short[] toObject(final short[] array) {\n+    public static Short[] toObject(short[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @return a <code>byte</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n      */\n-    public static byte[] toPrimitive(final Byte[] array) {\n+    public static byte[] toPrimitive(Byte[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return a <code>byte</code> array, <code>null</code> if null array input\n      */\n-    public static byte[] toPrimitive(final Byte[] array, final byte valueForNull) {\n+    public static byte[] toPrimitive(Byte[] array, byte valueForNull) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param array  a <code>byte</code> array\n      * @return a <code>Byte</code> array, <code>null</code> if null array input\n      */\n-    public static Byte[] toObject(final byte[] array) {\n+    public static Byte[] toObject(byte[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @return a <code>double</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n      */\n-    public static double[] toPrimitive(final Double[] array) {\n+    public static double[] toPrimitive(Double[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return a <code>double</code> array, <code>null</code> if null array input\n      */\n-    public static double[] toPrimitive(final Double[] array, final double valueForNull) {\n+    public static double[] toPrimitive(Double[] array, double valueForNull) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param array  a <code>double</code> array\n      * @return a <code>Double</code> array, <code>null</code> if null array input\n      */\n-    public static Double[] toObject(final double[] array) {\n+    public static Double[] toObject(double[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @return a <code>float</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n      */\n-    public static float[] toPrimitive(final Float[] array) {\n+    public static float[] toPrimitive(Float[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return a <code>float</code> array, <code>null</code> if null array input\n      */\n-    public static float[] toPrimitive(final Float[] array, final float valueForNull) {\n+    public static float[] toPrimitive(Float[] array, float valueForNull) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param array  a <code>float</code> array\n      * @return a <code>Float</code> array, <code>null</code> if null array input\n      */\n-    public static Float[] toObject(final float[] array) {\n+    public static Float[] toObject(float[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @return a <code>boolean</code> array, <code>null</code> if null array input\n      * @throws NullPointerException if array content is <code>null</code>\n      */\n-    public static boolean[] toPrimitive(final Boolean[] array) {\n+    public static boolean[] toPrimitive(Boolean[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param valueForNull  the value to insert if <code>null</code> found\n      * @return a <code>boolean</code> array, <code>null</code> if null array input\n      */\n-    public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) {\n+    public static boolean[] toPrimitive(Boolean[] array, boolean valueForNull) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @param array  a <code>boolean</code> array\n      * @return a <code>Boolean</code> array, <code>null</code> if null array input\n      */\n-    public static Boolean[] toObject(final boolean[] array) {\n+    public static Boolean[] toObject(boolean[] array) {\n         if (array == null) {\n             return null;\n         } else if (array.length == 0) {\n      * @return <code>true</code> if the array is empty or <code>null</code>\n      * @since 2.1\n      */\n-    public static boolean isEmpty(final Object[] array) {\n+    public static boolean isEmpty(Object[] array) {\n         if (array == null || array.length == 0) {\n             return true;\n         }\n      * @return <code>true</code> if the array is empty or <code>null</code>\n      * @since 2.1\n      */\n-    public static boolean isEmpty(final long[] array) {\n+    public static boolean isEmpty(long[] array) {\n         if (array == null || array.length == 0) {\n             return true;\n         }\n      * @return <code>true</code> if the array is empty or <code>null</code>\n      * @since 2.1\n      */\n-    public static boolean isEmpty(final int[] array) {\n+    public static boolean isEmpty(int[] array) {\n         if (array == null || array.length == 0) {\n             return true;\n         }\n      * @return <code>true</code> if the array is empty or <code>null</code>\n      * @since 2.1\n      */\n-    public static boolean isEmpty(final short[] array) {\n+    public static boolean isEmpty(short[] array) {\n         if (array == null || array.length == 0) {\n             return true;\n         }\n      * @return <code>true</code> if the array is empty or <code>null</code>\n      * @since 2.1\n      */\n-    public static boolean isEmpty(final char[] array) {\n+    public static boolean isEmpty(char[] array) {\n         if (array == null || array.length == 0) {\n             return true;\n         }\n      * @return <code>true</code> if the array is empty or <code>null</code>\n      * @since 2.1\n      */\n-    public static boolean isEmpty(final byte[] array) {\n+    public static boolean isEmpty(byte[] array) {\n         if (array == null || array.length == 0) {\n             return true;\n         }\n      * @return <code>true</code> if the array is empty or <code>null</code>\n      * @since 2.1\n      */\n-    public static boolean isEmpty(final double[] array) {\n+    public static boolean isEmpty(double[] array) {\n         if (array == null || array.length == 0) {\n             return true;\n         }\n      * @return <code>true</code> if the array is empty or <code>null</code>\n      * @since 2.1\n      */\n-    public static boolean isEmpty(final float[] array) {\n+    public static boolean isEmpty(float[] array) {\n         if (array == null || array.length == 0) {\n             return true;\n         }\n      * @return <code>true</code> if the array is empty or <code>null</code>\n      * @since 2.1\n      */\n-    public static boolean isEmpty(final boolean[] array) {\n+    public static boolean isEmpty(boolean[] array) {\n         if (array == null || array.length == 0) {\n             return true;\n         }\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      */\n-    public static Object[] add(final Object[] array, final Object element) {\n+    public static Object[] add(Object[] array, Object element) {\n         Object newArray = copyArrayGrow1(array, element != null ? element.getClass() : Object.class);\n         Array.set(newArray, lastIndex(newArray), element);\n         return (Object[]) newArray;\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      */\n-    public static boolean[] add(final boolean[] array, final boolean element) {\n+    public static boolean[] add(boolean[] array, boolean element) {\n         boolean[] newArray = (boolean[])copyArrayGrow1(array, Boolean.TYPE);\n         newArray[lastIndex(newArray)] = element;\n         return newArray;\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      */\n-    public static byte[] add(final byte[] array, final byte element) {\n+    public static byte[] add(byte[] array, byte element) {\n         byte[] newArray = (byte[])copyArrayGrow1(array, Byte.TYPE);\n         newArray[lastIndex(newArray)] = element;\n         return newArray;\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      */\n-    public static char[] add(final char[] array, final char element) {\n+    public static char[] add(char[] array, char element) {\n         char[] newArray = (char[])copyArrayGrow1(array, Character.TYPE);\n         newArray[lastIndex(newArray)] = element;\n         return newArray;\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      */\n-    public static double[] add(final double[] array, final double element) {\n+    public static double[] add(double[] array, double element) {\n         double[] newArray = (double[])copyArrayGrow1(array, Double.TYPE);\n         newArray[lastIndex(newArray)] = element;\n         return newArray;\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      */\n-    public static float[] add(final float[] array, final float element) {\n+    public static float[] add(float[] array, float element) {\n         float[] newArray = (float[])copyArrayGrow1(array, Float.TYPE);\n         newArray[lastIndex(newArray)] = element;\n         return newArray;\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      */\n-    public static int[] add(final int[] array, final int element) {\n+    public static int[] add(int[] array, int element) {\n         int[] newArray = (int[])copyArrayGrow1(array, Integer.TYPE);\n         newArray[lastIndex(newArray)] = element;\n         return newArray;\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      */\n-    public static long[] add(final long[] array, final long element) {\n+    public static long[] add(long[] array, long element) {\n         long[] newArray = (long[])copyArrayGrow1(array, Long.TYPE);\n         newArray[lastIndex(newArray)] = element;\n         return newArray;\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      */\n-    public static short[] add(final short[] array, final short element) {\n+    public static short[] add(short[] array, short element) {\n         short[] newArray = (short[])copyArrayGrow1(array, Short.TYPE);\n         newArray[lastIndex(newArray)] = element;\n         return newArray;\n      * size 1 array of this type.\n      * @return A new copy of the array of size 1 greater than the input.\n      */    \n-    private static Object copyArrayGrow1(final Object array, Class newArrayComponentType) {\n+    private static Object copyArrayGrow1(Object array, Class newArrayComponentType) {\n         if (array != null) {\n             int arrayLength = Array.getLength(array);\n             Object newArray = Array.newInstance(array.getClass().getComponentType(), arrayLength + 1);\n      * @throws IndexOutOfBoundsException if the index is out of range \n      * (index < 0 || index > array.length).\n      */\n-    public static Object[] add(final Object[] array, final int index, final Object element) {\n+    public static Object[] add(Object[] array, int index, Object element) {\n         if (array == null) {\n             if (index != 0) {\n                 throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: 0\");\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n-    public static Object[] remove(final Object[] array, final int index) {\n+    public static Object[] remove(Object[] array, int index) {\n         return (Object[]) remove((Object) array, index);\n     }\n     \n      *         occurrence of the specified element.\n      * @since 2.1\n      */\n-    public static Object[] removeElement(final Object[] array, final Object element) {\n+    public static Object[] removeElement(Object[] array, Object element) {\n         int index = indexOf(array, element);\n         if (index == -1) {\n             return clone(array);\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n-    public static boolean[] remove(final boolean[] array, final int index) {\n+    public static boolean[] remove(boolean[] array, int index) {\n         return (boolean[]) remove((Object) array, index);\n     }\n     \n      *         occurrence of the specified element.\n      * @since 2.1\n      */\n-    public static boolean[] removeElement(final boolean[] array, final boolean element) {\n+    public static boolean[] removeElement(boolean[] array, boolean element) {\n         int index = indexOf(array, element);\n         if (index == -1) {\n             return clone(array);\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n-    public static byte[] remove(final byte[] array, final int index) {\n+    public static byte[] remove(byte[] array, int index) {\n         return (byte[]) remove((Object) array, index);\n     }\n     \n      *         occurrence of the specified element.\n      * @since 2.1\n      */\n-    public static byte[] removeElement(final byte[] array, final byte element) {\n+    public static byte[] removeElement(byte[] array, byte element) {\n         int index = indexOf(array, element);\n         if (index == -1) {\n             return clone(array);\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n-    public static char[] remove(final char[] array, final int index) {\n+    public static char[] remove(char[] array, int index) {\n         return (char[]) remove((Object) array, index);\n     }\n     \n      *         occurrence of the specified element.\n      * @since 2.1\n      */\n-    public static char[] removeElement(final char[] array, final char element) {\n+    public static char[] removeElement(char[] array, char element) {\n         int index = indexOf(array, element);\n         if (index == -1) {\n             return clone(array);\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n-    public static double[] remove(final double[] array, final int index) {\n+    public static double[] remove(double[] array, int index) {\n         return (double[]) remove((Object) array, index);\n     }\n     \n      *         occurrence of the specified element.\n      * @since 2.1\n      */\n-    public static double[] removeElement(final double[] array, final double element) {\n+    public static double[] removeElement(double[] array, double element) {\n         int index = indexOf(array, element);\n         if (index == -1) {\n             return clone(array);\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n-    public static float[] remove(final float[] array, final int index) {\n+    public static float[] remove(float[] array, int index) {\n         return (float[]) remove((Object) array, index);\n     }\n     \n      *         occurrence of the specified element.\n      * @since 2.1\n      */\n-    public static float[] removeElement(final float[] array, final float element) {\n+    public static float[] removeElement(float[] array, float element) {\n         int index = indexOf(array, element);\n         if (index == -1) {\n             return clone(array);\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n-    public static int[] remove(final int[] array, final int index) {\n+    public static int[] remove(int[] array, int index) {\n         return (int[]) remove((Object) array, index);\n     }\n     \n      *         occurrence of the specified element.\n      * @since 2.1\n      */\n-    public static int[] removeElement(final int[] array, final int element) {\n+    public static int[] removeElement(int[] array, int element) {\n         int index = indexOf(array, element);\n         if (index == -1) {\n             return clone(array);\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n-    public static long[] remove(final long[] array, final int index) {\n+    public static long[] remove(long[] array, int index) {\n         return (long[]) remove((Object) array, index);\n     }\n     \n      *         occurrence of the specified element.\n      * @since 2.1\n      */\n-    public static long[] removeElement(final long[] array, final long element) {\n+    public static long[] removeElement(long[] array, long element) {\n         int index = indexOf(array, element);\n         if (index == -1) {\n             return clone(array);\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n-    public static short[] remove(final short[] array, final int index) {\n+    public static short[] remove(short[] array, int index) {\n         return (short[]) remove((Object) array, index);\n     }\n     \n      *         occurrence of the specified element.\n      * @since 2.1\n      */\n-    public static short[] removeElement(final short[] array, final short element) {\n+    public static short[] removeElement(short[] array, short element) {\n         int index = indexOf(array, element);\n         if (index == -1) {\n             return clone(array);\n      * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n      * @since 2.1\n      */\n-    private static Object remove(final Object array, final int index) {\n+    private static Object remove(Object array, int index) {\n         int length = getLength(array);\n         if (index < 0 || index >= length) {\n             throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n--- a/src/java/org/apache/commons/lang/BitField.java\n+++ b/src/java/org/apache/commons/lang/BitField.java\n  * @author Pete Gieser\n  * @author Gary Gregory\n  * @since 2.0\n- * @version $Id: BitField.java,v 1.5 2004/02/18 22:59:50 ggregory Exp $\n+ * @version $Id: BitField.java,v 1.6 2004/08/15 02:12:51 bayard Exp $\n  */\n public class BitField {\n     \n      *  BitField. Bits that are set in this mask are the bits\n      *  that this BitField operates on\n      */\n-    public BitField(final int mask) {\n+    public BitField(int mask) {\n         _mask = mask;\n         int count = 0;\n         int bit_pattern = mask;\n      *  in\n      * @return the selected bits, shifted right appropriately\n      */\n-    public int getValue(final int holder) {\n+    public int getValue(int holder) {\n         return getRawValue(holder) >> _shift_count;\n     }\n \n      *  interested in\n      * @return the selected bits, shifted right appropriately\n      */\n-    public short getShortValue(final short holder) {\n+    public short getShortValue(short holder) {\n         return (short) getValue(holder);\n     }\n \n      *  interested in\n      * @return the selected bits\n      */\n-    public int getRawValue(final int holder) {\n+    public int getRawValue(int holder) {\n         return (holder & _mask);\n     }\n \n      *  interested in\n      * @return the selected bits\n      */\n-    public short getShortRawValue(final short holder) {\n+    public short getShortRawValue(short holder) {\n         return (short) getRawValue(holder);\n     }\n \n      * @return <code>true</code> if any of the bits are set,\n      *  else <code>false</code>\n      */\n-    public boolean isSet(final int holder) {\n+    public boolean isSet(int holder) {\n         return (holder & _mask) != 0;\n     }\n \n      * @return <code>true</code> if all of the bits are set,\n      *  else <code>false</code>\n      */\n-    public boolean isAllSet(final int holder) {\n+    public boolean isAllSet(int holder) {\n         return (holder & _mask) == _mask;\n     }\n \n      * @return the value of holder with the bits from the value\n      *  parameter replacing the old bits\n      */\n-    public int setValue(final int holder, final int value) {\n+    public int setValue(int holder, int value) {\n         return (holder & ~_mask) | ((value << _shift_count) & _mask);\n     }\n \n      * @return the value of holder with the bits from the value\n      *  parameter replacing the old bits\n      */\n-    public short setShortValue(final short holder, final short value) {\n+    public short setShortValue(short holder, short value) {\n         return (short) setValue(holder, value);\n     }\n \n      * @return the value of holder with the specified bits cleared\n      *  (set to <code>0</code>)\n      */\n-    public int clear(final int holder) {\n+    public int clear(int holder) {\n         return holder & ~_mask;\n     }\n \n      * @return the value of holder with the specified bits cleared\n      *  (set to <code>0</code>)\n      */\n-    public short clearShort(final short holder) {\n+    public short clearShort(short holder) {\n         return (short) clear(holder);\n     }\n \n      * @return the value of holder with the specified bits cleared\n      *  (set to <code>0</code>)\n      */\n-    public byte clearByte(final byte holder) {\n+    public byte clearByte(byte holder) {\n         return (byte) clear(holder);\n     }\n \n      * @return the value of holder with the specified bits set\n      *  to <code>1</code>\n      */\n-    public int set(final int holder) {\n+    public int set(int holder) {\n         return holder | _mask;\n     }\n \n      * @return the value of holder with the specified bits set\n      *  to <code>1</code>\n      */\n-    public short setShort(final short holder) {\n+    public short setShort(short holder) {\n         return (short) set(holder);\n     }\n \n      * @return the value of holder with the specified bits set\n      *  to <code>1</code>\n      */\n-    public byte setByte(final byte holder) {\n+    public byte setByte(byte holder) {\n         return (byte) set(holder);\n     }\n \n      * @return the value of holder with the specified bits set or\n      *         cleared\n      */\n-    public int setBoolean(final int holder, final boolean flag) {\n+    public int setBoolean(int holder, boolean flag) {\n         return flag ? set(holder) : clear(holder);\n     }\n \n      * @return the value of holder with the specified bits set or\n      *  cleared\n      */\n-    public short setShortBoolean(final short holder, final boolean flag) {\n+    public short setShortBoolean(short holder, boolean flag) {\n         return flag ? setShort(holder) : clearShort(holder);\n     }\n \n      * @return the value of holder with the specified bits set or\n      *  cleared\n      */\n-    public byte setByteBoolean(final byte holder, final boolean flag) {\n+    public byte setByteBoolean(byte holder, boolean flag) {\n         return flag ? setByte(holder) : clearByte(holder);\n     }\n ", "timestamp": 1092535971, "metainfo": ""}