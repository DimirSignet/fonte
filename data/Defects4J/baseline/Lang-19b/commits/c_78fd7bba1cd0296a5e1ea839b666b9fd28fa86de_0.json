{"sha": "78fd7bba1cd0296a5e1ea839b666b9fd28fa86de", "log": "Fix various Eclipse warnings (casts, unused vars, @Override)  ", "commit": "\n--- a/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n     }\n \n     static class ReflectionTestFixtureA {\n-        private char a='a';\n+        @SuppressWarnings(\"unused\")\n         private transient char transientA='t';\n     }\n \n     static class ReflectionTestFixtureB extends ReflectionTestFixtureA {\n-        private char b='b';\n-        private transient char transientB='t';\n     }\n \n     public void testInnerClassReflection() {\n     static class Outer {\n         Inner inner = new Inner();\n         class Inner {\n+            @Override\n             public String toString() {\n                 return ToStringBuilder.reflectionToString(this);\n             }\n         }\n+        @Override\n         public String toString() {\n             return ToStringBuilder.reflectionToString(this);\n         }\n         Object[] objects = new Object[1];\n         Object[] objectsLevel2 = new Object[1];\n         objects[0] = objectsLevel2;\n-        objectsLevel2[0] = (Object) objects;\n+        objectsLevel2[0] = objects;\n         assertEquals(\n             this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n             ToStringBuilder.reflectionToString(objects));\n     static class ReflectionTestCycleA {\n         ReflectionTestCycleB b;\n \n+        @Override\n         public String toString() {\n             return ToStringBuilder.reflectionToString(this);\n         }\n     static class ReflectionTestCycleB {\n         ReflectionTestCycleA a;\n \n+        @Override\n         public String toString() {\n             return ToStringBuilder.reflectionToString(this);\n         }\n             this.o = o;\n         }\n \n+        @Override\n         public String toString() {\n             return ToStringBuilder.reflectionToString(this);\n         }\n     }\n \n     private static class SelfInstanceVarReflectionTestFixture {\n-        private SelfInstanceVarReflectionTestFixture typeIsSelf;\n-\n         public SelfInstanceVarReflectionTestFixture() {\n-            this.typeIsSelf = this;\n-        }\n-\n+        }\n+\n+        @Override\n         public String toString() {\n             return ToStringBuilder.reflectionToString(this);\n         }\n       }\n     \n     private static class SelfInstanceTwoVarsReflectionTestFixture {\n-        private SelfInstanceTwoVarsReflectionTestFixture typeIsSelf;\n         private String otherType = \"The Other Type\";\n \n         public SelfInstanceTwoVarsReflectionTestFixture() {\n-            this.typeIsSelf = this;\n         }\n         \n         public String getOtherType(){\n             return this.otherType;\n         }\n \n+        @Override\n         public String toString() {\n             return ToStringBuilder.reflectionToString(this);\n         }\n     public void testReflectionArrayAndObjectCycle() throws Exception {\n         Object[] objects = new Object[1];\n         SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n-        objects[0] = (Object) simple;\n+        objects[0] = simple;\n         assertEquals(\n             this.toBaseString(objects)\n                 + \"[{\"\n         assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n     }\n \n+    @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n     public void testInt() {\n         assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append((int) 3).toString());\n         assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", (int) 3).toString());\n     static class ObjectCycle {\n         Object obj;\n        \n+        @Override\n         public String toString() {\n             return new ToStringBuilder(this).append(obj).toString();\n         }\n      */\n     class MultiLineTestObject {\n         Integer i = new Integer(31337);\n+        @Override\n         public String toString() {\n             return new ToStringBuilder(this).append(\"testInt\", i).toString();\n         }", "timestamp": 1237038037, "metainfo": ""}