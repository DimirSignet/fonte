{"sha": "a2b7fe3040d80fe92ef97df6fb8a4defd96467cd", "log": "Adding a test to enforce the CharSequence vs String contract for StringUtils. LANG-687  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n package org.apache.commons.lang3;\n \n import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.nio.CharBuffer;\n import java.util.Arrays;\n         assertEquals(\"12\",StringUtils.stripEnd(\"120.00\", \".0\"));\n         assertEquals(\"121\",StringUtils.stripEnd(\"121.00\", \".0\"));\n     }\n+\n+    // Methods on StringUtils that are immutable in spirit (i.e. calculate the length) \n+    // should take a CharSequence parameter. Methods that are mutable in spirit (i.e. capitalize) \n+    // should take a String or String[] parameter and return String or String[].\n+    // This test enforces that this is done.\n+    public void testStringUtilsCharSequenceContract() {\n+        Class c = StringUtils.class;\n+        Method[] methods = c.getMethods();\n+        for (int i=0; i<methods.length; i++) {\n+            Method m = methods[i];\n+            if (m.getReturnType() == String.class || m.getReturnType() == String[].class) {\n+                // Assume this is mutable and ensure the first parameter is not CharSequence.\n+                // It may be String or it may be something else (String[], Object, Object[]) so \n+                // don't actively test for that.\n+                Class[] params = m.getParameterTypes();\n+                if ( params.length > 0 && (params[0] == CharSequence.class || params[0] == CharSequence[].class)) {\n+                    fail(\"The method \" + m + \" appears to be mutable in spirit and therefore must not accept a CharSequence\");\n+                }\n+            } else {\n+                // Assume this is immutable in spirit and ensure the first parameter is not String.\n+                // As above, it may be something other than CharSequence.\n+                Class[] params = m.getParameterTypes();\n+                if ( params.length > 0 && (params[0] == String.class || params[0] == String[].class)) {\n+                    fail(\"The method \" + m + \" appears to be immutable in spirit and therefore must not accept a String\");\n+                }\n+            }\n+        }\n+    }\n }", "timestamp": 1302153721, "metainfo": ""}