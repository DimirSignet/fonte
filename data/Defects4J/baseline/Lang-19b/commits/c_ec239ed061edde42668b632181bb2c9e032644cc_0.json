{"sha": "ec239ed061edde42668b632181bb2c9e032644cc", "log": "allow subclass custom invocation handling  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n+++ b/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n      */\n     public L[] getListeners() {\n         return listeners.toArray(prototypeArray);\n-    }\n-\n-    /**\n-     * Create the proxy object.\n-     * @param listenerInterface\n-     * @param classLoader\n-     */\n-    private void createProxy(Class<L> listenerInterface, ClassLoader classLoader) {\n-        proxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader, \n-                new Class[]{listenerInterface},\n-                new ProxyInvocationHandler()));\n     }\n \n     /**\n      * @param classLoader\n      */\n     private void initializeTransientFields(Class<L> listenerInterface, ClassLoader classLoader) {\n-        createProxy(listenerInterface, classLoader);\n         @SuppressWarnings(\"unchecked\")\n         L[] array = (L[]) Array.newInstance(listenerInterface, 0);\n         this.prototypeArray = array;\n+        createProxy(listenerInterface, classLoader);\n+    }\n+\n+    /**\n+     * Create the proxy object.\n+     * @param listenerInterface\n+     * @param classLoader\n+     */\n+    private void createProxy(Class<L> listenerInterface, ClassLoader classLoader) {\n+        proxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader,\n+                new Class[] { listenerInterface }, createInvocationHandler()));\n+    }\n+\n+    /**\n+     * Create the {@link InvocationHandler} responsible for broadcasting calls\n+     * to the managed listeners.  Subclasses can override to provide custom behavior.\n+     * @return ProxyInvocationHandler\n+     */\n+    protected InvocationHandler createInvocationHandler() {\n+        return new ProxyInvocationHandler();\n     }\n \n     /**\n      * An invocation handler used to dispatch the event(s) to all the listeners.\n      */\n-    private class ProxyInvocationHandler implements InvocationHandler\n+    protected class ProxyInvocationHandler implements InvocationHandler\n     {\n         /** Serialization version */\n         private static final long serialVersionUID = 1L;\n--- a/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java\n+++ b/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n+import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n \n         assertEquals(0, deserializedListenerSupport.getListeners().length);\n     }\n \n+    public void testSubclassInvocationHandling() {\n+\n+        @SuppressWarnings(\"serial\")\n+        EventListenerSupport<ActionListener> eventListenerSupport = new EventListenerSupport<ActionListener>(\n+                ActionListener.class) {\n+            protected java.lang.reflect.InvocationHandler createInvocationHandler() {\n+                return new ProxyInvocationHandler() {\n+                    /**\n+                     * {@inheritDoc}\n+                     */\n+                    @Override\n+                    public Object invoke(Object proxy, Method method, Object[] args)\n+                            throws Throwable {\n+                        return \"actionPerformed\".equals(method.getName())\n+                                && \"ignore\".equals(((ActionEvent) args[0]).getActionCommand()) ? null\n+                                : super.invoke(proxy, method, args);\n+                    }\n+                };\n+            };\n+        };\n+\n+        ActionListener listener = EasyMock.createNiceMock(ActionListener.class);\n+        eventListenerSupport.addListener(listener);\n+        Object source = new Object();\n+        ActionEvent ignore = new ActionEvent(source, 0, \"ignore\");\n+        ActionEvent respond = new ActionEvent(source, 1, \"respond\");\n+        listener.actionPerformed(respond);\n+        EasyMock.replay(listener);\n+        eventListenerSupport.fire().actionPerformed(ignore);\n+        eventListenerSupport.fire().actionPerformed(respond);\n+        EasyMock.verify(listener);\n+    }\n+\n     private void addDeregisterListener(final EventListenerSupport<ActionListener> listenerSupport)\n     {\n         listenerSupport.addListener(new ActionListener()", "timestamp": 1282256825, "metainfo": ""}