{"sha": "2e375bbb8124f997cb4cdeb6802138e2867c86cf", "log": "PR: Bugzilla Bug 26943 [patch] Class and Package Comparators for ClassUtils Submitted by:\talban.peignier Reviewed by:\tGary Gregory   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n package org.apache.commons.lang;\n \n import java.util.ArrayList;\n+import java.util.Comparator;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n  * @author Gary Gregory\n  * @author Norm Deane\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.23 2003/10/23 21:03:43 scolebourne Exp $\n+ * @version $Id: ClassUtils.java,v 1.24 2004/02/15 00:51:38 ggregory Exp $\n  */\n public class ClassUtils {\n \n     /**\n-     * <p>The package separator character: <code>&#x2e;</code>.</p>\n+     * <p>The package separator character: <code>'&#x2e;' == {@value}</code>.</p>\n      */\n     public static final char PACKAGE_SEPARATOR_CHAR = '.';\n     \n     /**\n-     * <p>The package separator String: <code>&#x2e;</code>.</p>\n+     * <p>The package separator String: <code>\"&#x2e;\"</code>.</p>\n      */\n     public static final String PACKAGE_SEPARATOR = String.valueOf(PACKAGE_SEPARATOR_CHAR);\n     \n     /**\n-     * <p>The inner class separator character: <code>$</code>.</p>\n+     * <p>The inner class separator character: <code>'$' == {@value}</code>.</p>\n      */\n     public static final char INNER_CLASS_SEPARATOR_CHAR = '$';\n     \n     /**\n-     * <p>The inner class separator String: <code>$</code>.</p>\n+     * <p>The inner class separator String: <code>\"$\"</code>.</p>\n      */\n     public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);\n     \n         return (cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) >= 0);\n     }\n     \n+    /**\n+     * Compares two <code>Class</code>s by name.\n+     */\n+    public static final Comparator CLASS_NAME_COMPARATOR = new Comparator() {\n+        /**\n+         * Compares two <code>Class</code>s by name.\n+         * \n+         * @throws ClassCastException\n+         *                  If <code>o1</code> or <code>o2</code> are not <code>Class</code>\n+         *                  instances.\n+         */\n+        public int compare(Object o1, Object o2) {\n+            Class class1 = (Class) o1;\n+            Class class2 = (Class) o2;\n+            if (class1 == null) {\n+                return class2 == null ? 0 : -1;\n+            }\n+            if (class2 == null) {\n+                return 1;\n+            }\n+            return class1.getName().compareTo(class2.getName());\n+        }\n+    };\n+\n+    /**\n+     * Compares two <code>Package</code>s by name.\n+     */\n+    public static final Comparator PACKAGE_NAME_COMPARATOR = new Comparator() {\n+        /**\n+         * Compares two <code>Package</code>s by name.\n+         * \n+         * @throws ClassCastException\n+         *                  If <code>o1</code> or <code>o2</code> are not <code>Package</code>\n+         *                  instances.\n+         */\n+        public int compare(Object o1, Object o2) {\n+            Package package1 = (Package) o1;\n+            Package package2 = (Package) o2;\n+            if (package1 == null) {\n+                return package2 == null ? 0 : -1;\n+            }\n+            if (package2 == null) {\n+                return 1;\n+            }\n+            return package1.getName().compareTo(package2.getName());\n+        }\n+    };\n+    \n }\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n package org.apache.commons.lang;\n \n import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n+import java.net.URLClassLoader;\n import java.util.ArrayList;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n+import org.apache.commons.lang.enum.ColorEnum;\n \n /**\n  * Unit tests {@link org.apache.commons.lang.ClassUtils}.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: ClassUtilsTest.java,v 1.7 2003/10/23 21:03:44 scolebourne Exp $\n+ * @author Gary D. Gregory\n+ * @version $Id: ClassUtilsTest.java,v 1.8 2004/02/15 00:51:37 ggregory Exp $\n  */\n public class ClassUtilsTest extends TestCase {\n \n             ClassUtils.primitiveToWrapper(null));\n     }\n     \n+    public void testClassComparator() {\n+    \tComparator comparator = ClassUtils.CLASS_NAME_COMPARATOR;\n+    \tClass smallClass = java.lang.Boolean.class;\n+    \tClass bigClass =  java.util.Set.class;\n+    \t\n+\t\tassertTrue(comparator.compare(smallClass, smallClass) == 0);\n+\t\tassertTrue(comparator.compare(bigClass, smallClass) > 0);\n+\t\tassertTrue(comparator.compare(smallClass, bigClass) < 0);\n+\t\t\n+\t\tassertTrue(comparator.compare(smallClass, null) > 0);\n+\t\tassertTrue(comparator.compare(null, smallClass) < 0);\n+\n+        assertComparatorContract(comparator, smallClass, smallClass);\n+        assertComparatorContract(comparator, bigClass, bigClass);\n+        assertComparatorContract(comparator, smallClass, bigClass);\n+    }\n+\n+    public void testPackageComparator() {\n+        Comparator comparator = ClassUtils.PACKAGE_NAME_COMPARATOR;\n+        Package smallPackage = java.lang.Boolean.class.getPackage();\n+        Package bigPackage =  java.util.Set.class.getPackage();\n+        \n+        assertTrue(comparator.compare(smallPackage, smallPackage) == 0);\n+        assertTrue(comparator.compare(bigPackage, smallPackage) > 0);\n+        assertTrue(comparator.compare(smallPackage, bigPackage) < 0);\n+        \n+        assertTrue(comparator.compare(smallPackage, null) > 0);\n+        assertTrue(comparator.compare(null, smallPackage) < 0);\n+\n+        assertComparatorContract(comparator, smallPackage, smallPackage);\n+        assertComparatorContract(comparator, bigPackage, bigPackage);\n+        assertComparatorContract(comparator, smallPackage, bigPackage);\n+    }\n+\n+    public void testPackageNameComparatorWithDifferentClassLoaders() throws SecurityException, IllegalArgumentException, ClassNotFoundException {\n+        Comparator comparator = ClassUtils.PACKAGE_NAME_COMPARATOR;\n+        Package p1 = java.lang.Boolean.class.getPackage();\n+        Package p2 = java.util.Set.class.getPackage();\n+        ClassLoader classLoader = newSystemClassLoader();\n+        Object p1Other = this.getPackage(classLoader, \"java.lang.Boolean\");\n+        Object p2Other = this.getPackage(classLoader, \"java.util.Set\");\n+        // all here\n+        assertComparatorContract(comparator, p1, p1);\n+        assertComparatorContract(comparator, p2, p2);\n+        assertComparatorContract(comparator, p1, p2);\n+        // all other\n+        assertComparatorContract(comparator, p1Other, p1Other);\n+        assertComparatorContract(comparator, p2Other, p2Other);\n+        assertComparatorContract(comparator, p1Other, p2Other);\n+        // p1 and p1Other\n+        assertComparatorContract(comparator, p1, p1Other);\n+        assertComparatorContract(comparator, p2, p2);\n+        assertComparatorContract(comparator, p1Other, p2);\n+        // p2 and p2Other\n+        assertComparatorContract(comparator, p1, p1);\n+        assertComparatorContract(comparator, p2, p2Other);\n+        assertComparatorContract(comparator, p1, p2Other);\n+    }\n+    \n+    Object getPackage(ClassLoader classLoader, String className) throws ClassNotFoundException, SecurityException,\n+            IllegalArgumentException {\n+        // Sanity check:\n+        assertNotNull(Package.getPackage(\"java.lang\"));\n+        Package.getPackage(\"java.lang\").equals(Package.getPackage(\"java.lang\"));\n+        // set up:\n+        assertNotNull(classLoader);\n+        Class otherClass = classLoader.loadClass(className);\n+        assertNotNull(otherClass);\n+        Object otherPackage = otherClass.getPackage();\n+        assertNotNull(otherPackage);\n+        return otherPackage;\n+    }\n+\n+    /**\n+     * The ordering imposed by a Comparator c on a set of elements S is said to\n+     * be consistent with equals if and only if (compare((Object)e1,\n+     * (Object)e2)==0) has the same boolean value as e1.equals((Object)e2) for\n+     * every e1 and e2 in S.\n+     * \n+     * http://java.sun.com/j2se/1.3/docs/api/java/util/Comparator.html\n+     */\n+    public void assertComparatorContract(Comparator comparator, Object e1, Object e2) {\n+        assertEquals(comparator.compare(e1, e2) == 0, e1.equals(e2));\n+    }\n+\n+    public static ClassLoader newSystemClassLoader() throws  SecurityException, IllegalArgumentException {\n+        ClassLoader scl = ClassLoader.getSystemClassLoader();\n+        if (!(scl instanceof URLClassLoader)) {\n+            fail(\"Need a better test set up.\");\n+        }\n+        URLClassLoader urlScl = (URLClassLoader)scl;\n+        return URLClassLoader.newInstance(urlScl.getURLs(), null);\n+    }\n+    \n //    public static List getAssignableFrom(List classes, Class superclass) {\n //    public static boolean isAssignable(Class[] classArray, Class[] toClassArray) {\n //    public static boolean isAssignable(Class cls, Class toClass) {\n--- a/src/test/org/apache/commons/lang/enum/EnumTest.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumTest.java\n \n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n-import java.net.URLClassLoader;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n-\n+import org.apache.commons.lang.ClassUtilsTest;\n import org.apache.commons.lang.SerializationUtils;\n \n /**\n  * Test cases for the {@link Enum} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: EnumTest.java,v 1.15 2004/02/13 23:17:45 scolebourne Exp $\n+ * @author Gary D. Gregory\n+ * @version $Id: EnumTest.java,v 1.16 2004/02/15 00:51:38 ggregory Exp $\n  */\n \n public final class EnumTest extends TestCase {\n         // the SAME class as the getEnumList(). The references in the outer class\n         // are just extra references.\n     }\n-\n-    public void testEqualsWithDifferentClassLoaders() throws ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n+    \n+    public void testColorEnumEqualsWithDifferentClassLoaders() throws SecurityException, IllegalArgumentException,\n+            ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n+        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.BLUE);\n+        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.GREEN);\n+        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.RED);\n+    }\n+\n+    void testEqualsTrueWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,\n+            NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n+        // Sanity checks:\n+        assertTrue(colorEnum.equals(colorEnum));\n+        assertNotNull(ColorEnum.class.getClassLoader());\n+        // set up:\n+        ClassLoader classLoader = ClassUtilsTest.newSystemClassLoader();\n+        Object enumObjectFromOtherClassLoader = this.getColorEnum(classLoader, colorEnum.getName());\n+        // the real test, part 1.\n+        try {\n+            ColorEnum testCase = (ColorEnum) enumObjectFromOtherClassLoader;\n+            fail(\"Should have thrown a ClassCastException for \" + testCase);\n+        } catch (ClassCastException e) {\n+            // normal.\n+        }\n+        // the real test, part 2.\n+        assertEquals(\"The two objects should match even though they are from different class loaders\", colorEnum,\n+                enumObjectFromOtherClassLoader);\n+        // the real test, part 3.\n+        int falseCount = 0;\n+        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n+            ColorEnum element = (ColorEnum) iter.next();\n+            if (!colorEnum.equals(element)) {\n+                falseCount++;\n+                assertFalse(enumObjectFromOtherClassLoader.equals(element));\n+            }\n+        }\n+        assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);\n+    }\n+\n+    Object getColorEnum(ClassLoader classLoader, String color) throws ClassNotFoundException, SecurityException,\n+            NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n         // Sanity check:\n         ColorEnum.RED.equals(ColorEnum.RED);\n         assertNotNull(ColorEnum.class.getClassLoader());\n         // set up:\n-        ClassLoader scl = ClassLoader.getSystemClassLoader();\n-        if (!(scl instanceof URLClassLoader)) {\n-            fail(\"Need a better test set up.\");\n-        }\n-        URLClassLoader urlScl = (URLClassLoader)scl;\n-        ClassLoader classLoader = URLClassLoader.newInstance(urlScl.getURLs(), null);\n         assertNotNull(classLoader);\n         assertFalse(classLoader.equals(ColorEnum.class.getClassLoader()));\n         Class otherColorEnumClass = classLoader.loadClass(\"org.apache.commons.lang.enum.ColorEnum\");\n         assertNotNull(otherColorEnumClass.getClassLoader());\n         assertTrue(classLoader.equals(otherColorEnumClass.getClassLoader()));\n         assertFalse(otherColorEnumClass.getClassLoader().equals(ColorEnum.class.getClassLoader()));\n-        Method method = otherColorEnumClass.getMethod(\"getEnum\", new Class[]{String.class});        \n-        Object enumObject = method.invoke(otherColorEnumClass, new Object[]{\"Red\"});\n+        Method method = otherColorEnumClass.getMethod(\"getEnum\", new Class[]{String.class});\n+        Object enumObject = method.invoke(otherColorEnumClass, new Object[]{color});\n         assertNotNull(enumObject);\n-        // the real test, part 1.\n-        try {\n-            ColorEnum testCase = (ColorEnum)enumObject;\n-            fail(\"Should have thrown a ClassCastException\");\n-        } catch (ClassCastException e) {\n-            // normal.\n-        }\n-        // the real test, part 2.\n-        assertEquals(\"The two objects should match even though they are from different class loaders\", ColorEnum.RED, enumObject);\n-    }\n-    \n+        assertFalse(ColorEnum.class.equals(enumObject.getClass()));\n+        assertFalse(ColorEnum.class == enumObject.getClass());\n+        return enumObject;\n+    }\n+\n     public void testEqualsToWrongInstance() {\n-        assertEquals(false, ColorEnum.RED.equals(\"test\"));\n-        assertEquals(false, ColorEnum.RED.equals(new Integer(1)));\n-        assertEquals(false, ColorEnum.RED.equals(new Boolean(true)));\n-        assertEquals(false, ColorEnum.RED.equals(new StringBuffer(\"test\")));\n+        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n+            ColorEnum element = (ColorEnum) iter.next();\n+            this.testEqualsToWrongInstance(element);\n+        }\n+    }\n+\n+    void testEqualsToWrongInstance(ColorEnum colorEnum) {\n+        assertEquals(false, colorEnum.equals(\"test\"));\n+        assertEquals(false, colorEnum.equals(new Integer(1)));\n+        assertEquals(false, colorEnum.equals(new Boolean(true)));\n+        assertEquals(false, colorEnum.equals(new StringBuffer(\"test\")));\n+        assertEquals(false, colorEnum.equals(new Object()));\n+        assertEquals(false, colorEnum.equals(null));\n+        assertEquals(false, colorEnum.equals(\"\"));\n+        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(null)));\n+        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(\"\")));\n+        assertEquals(false, colorEnum.equals(ColorEnum.getEnum(\"This ColorEnum does not exist.\")));\n     }\n }", "timestamp": 1076806298, "metainfo": ""}