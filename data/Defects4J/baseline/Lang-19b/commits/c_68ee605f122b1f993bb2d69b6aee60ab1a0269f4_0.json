{"sha": "68ee605f122b1f993bb2d69b6aee60ab1a0269f4", "log": "Revert r113289 - varargs invocation does not work with null  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n         assertFalse(ClassUtils.isAssignable(null, array2));\n         assertTrue(ClassUtils.isAssignable(null, array0));\n         assertTrue(ClassUtils.isAssignable(array0, array0));\n-        assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); // test both types of ...\n-        assertTrue(ClassUtils.isAssignable(array0, (Class<?>) null));   // ... varargs invocation\n+//        assertTrue(ClassUtils.isAssignable(array0, null)); \n+        assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); // explicit cast to avoid warning\n         assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null));\n \n         assertFalse(ClassUtils.isAssignable(array1, array1s));\n \n     public void testPrimitivesToWrappers() {\n         // test null\n-        assertNull(\"null -> null\", ClassUtils.primitivesToWrappers((Class<?>[]) null)); // test both types of ...\n-        assertNull(\"null -> null\", ClassUtils.primitivesToWrappers((Class<?>) null));   // ... varargs invocation\n+//        assertNull(\"null -> null\", ClassUtils.primitivesToWrappers(null));\n+        assertNull(\"null -> null\", ClassUtils.primitivesToWrappers((Class<?>[]) null)); // explicit cast to avoid warning\n         // test empty array\n         assertEquals(\"empty -> empty\",\n                 ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY));\n     }\n \n     public void testWrappersToPrimitivesNull() {\n-        // Test both types of varargs invocation\n-        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives((Class<?>[]) null));\n-        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives((Class<?>) null));\n+//        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives(null));\n+        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives((Class<?>[]) null)); // explicit cast\n     }\n \n     public void testWrappersToPrimitivesEmpty() {\n     }\n \n     public void testToClass_object() {\n-        // Test both types of varargs invocation\n-        assertNull(ClassUtils.toClass((Object[]) null));\n-        assertNull(ClassUtils.toClass((Object) null));\n+//        assertNull(ClassUtils.toClass(null));\n+        assertNull(ClassUtils.toClass((Object[]) null)); // explicit cast\n \n         assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY));\n \n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n     }\n \n     public void testJoin_Objectarray() {\n-        // Test both types of varargs invocation\n-        assertEquals(null, StringUtils.join((Object[]) null));\n-        assertEquals(null, StringUtils.join((Object) null));\n+//        assertEquals(null, StringUtils.join(null));\n+        assertEquals(null, StringUtils.join((Object[]) null)); // explicit cast\n         assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\n         assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\n         assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java\n         String[] fooDots = new String[] { \"..\"+FOO+\"..\", \"..\"+FOO, FOO+\"..\" };\n         String[] foo = new String[] { FOO, FOO, FOO };\n \n-        // Test both varargs invocations\n-        assertEquals(null, StringUtils.stripAll((String[]) null));\n-        assertEquals(null, StringUtils.stripAll((String) null));\n+//        assertEquals(null, StringUtils.stripAll(null));\n+        assertEquals(null, StringUtils.stripAll((String[]) null)); // explicit cast\n         assertArrayEquals(empty, StringUtils.stripAll(empty));\n         assertArrayEquals(foo, StringUtils.stripAll(fooSpace));\n         ", "timestamp": 1307370261, "metainfo": ""}