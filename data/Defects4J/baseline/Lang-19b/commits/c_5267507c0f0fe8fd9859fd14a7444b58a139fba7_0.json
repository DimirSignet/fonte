{"sha": "5267507c0f0fe8fd9859fd14a7444b58a139fba7", "log": "Improve unit test coverage, eating own dog food. TODO: Missing tests for many constructors.  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrTokenizer.java\n+++ b/src/java/org/apache/commons/lang/text/StrTokenizer.java\n     private int tokenPos;\n \n     /** The delimiter matcher */\n-    private StrMatcher delim = StrMatcher.splitMatcher();\n+    private StrMatcher delimMatcher = StrMatcher.splitMatcher();\n     /** The quote matcher */\n-    private StrMatcher quote = StrMatcher.noneMatcher();\n+    private StrMatcher quoteMatcher = StrMatcher.noneMatcher();\n     /** The ignored matcher */\n-    private StrMatcher ignored = StrMatcher.noneMatcher();\n+    private StrMatcher ignoredMatcher = StrMatcher.noneMatcher();\n     /** The trimmer matcher */\n-    private StrMatcher trimmer = StrMatcher.noneMatcher();\n+    private StrMatcher trimmerMatcher = StrMatcher.noneMatcher();\n \n     /** Whether to return empty tokens as null */\n     private boolean emptyAsNull = false;\n      */\n     private void addToken(List list, String tok) {\n         if (tok == null || tok.length() == 0) {\n-            if (ignoreEmptyTokens) {\n+            if (this.isIgnoreEmptyTokens()) {\n                 return;\n             }\n-            if (emptyAsNull) {\n+            if (this.isEmptyTokenAsNull()) {\n                 tok = null;\n             }\n         }\n         // field delimiter or the quote character\n         while (start < len) {\n             int removeLen = Math.max(\n-                    ignored.isMatch(chars, start, start, len),\n-                    trimmer.isMatch(chars, start, start, len));\n+                    this.getIgnoredMatcher().isMatch(chars, start, start, len),\n+                    this.getTrimmerMatcher().isMatch(chars, start, start, len));\n             if (removeLen == 0 ||\n-                delim.isMatch(chars, start, start, len) > 0 ||\n-                quote.isMatch(chars, start, start, len) > 0) {\n+                this.getDelimiterMatcher().isMatch(chars, start, start, len) > 0 ||\n+                this.getQuoteMatcher().isMatch(chars, start, start, len) > 0) {\n                 break;\n             }\n             start += removeLen;\n         }\n         \n         // handle empty token\n-        int delimLen = delim.isMatch(chars, start, start, len);\n+        int delimLen = this.getDelimiterMatcher().isMatch(chars, start, start, len);\n         if (delimLen > 0) {\n             addToken(tokens, \"\");\n             return start + delimLen;\n         }\n         \n         // handle found token\n-        int quoteLen = quote.isMatch(chars, start, start, len);\n+        int quoteLen = this.getQuoteMatcher().isMatch(chars, start, start, len);\n         if (quoteLen > 0) {\n             return readWithQuotes(chars, start + quoteLen, len, workArea, tokens, start, quoteLen);\n         }\n                 // Not in quoting mode\n                 \n                 // check for delimiter, and thus end of token\n-                int delimLen = delim.isMatch(chars, pos, start, len);\n+                int delimLen = this.getDelimiterMatcher().isMatch(chars, pos, start, len);\n                 if (delimLen > 0) {\n                     // return condition when end of token found\n                     addToken(tokens, workArea.substring(0, trimStart));\n                 }\n                 \n                 // check for ignored (outside quotes), and ignore\n-                int ignoredLen = ignored.isMatch(chars, pos, start, len);\n+                int ignoredLen = this.getIgnoredMatcher().isMatch(chars, pos, start, len);\n                 if (ignoredLen > 0) {\n                     pos += ignoredLen;\n                     continue;\n                 // check for trimmed character\n                 // don't yet know if its at the end, so copy to workArea\n                 // use trimStart to keep track of trim at the end\n-                int trimmedLen = trimmer.isMatch(chars, pos, start, len);\n+                int trimmedLen = this.getTrimmerMatcher().isMatch(chars, pos, start, len);\n                 if (trimmedLen > 0) {\n                     workArea.append(chars, pos, trimmedLen);\n                     pos += trimmedLen;\n      * @return the delimiter matcher in use\n      */\n     public StrMatcher getDelimiterMatcher() {\n-        return delim;\n+        return this.delimMatcher;\n     }\n \n     /**\n      */\n     public StrTokenizer setDelimiterMatcher(StrMatcher delim) {\n         if (delim == null) {\n-            this.delim = StrMatcher.noneMatcher();\n+            this.delimMatcher = StrMatcher.noneMatcher();\n         } else {\n-            this.delim = delim;\n+            this.delimMatcher = delim;\n         }\n         return this;\n     }\n      * @return the quote matcher in use\n      */\n     public StrMatcher getQuoteMatcher() {\n-        return quote;\n+        return quoteMatcher;\n     }\n \n     /**\n      */\n     public StrTokenizer setQuoteMatcher(StrMatcher quote) {\n         if (quote != null) {\n-            this.quote = quote;\n+            this.quoteMatcher = quote;\n         }\n         return this;\n     }\n      * @return the ignored matcher in use\n      */\n     public StrMatcher getIgnoredMatcher() {\n-        return ignored;\n+        return ignoredMatcher;\n     }\n \n     /**\n      */\n     public StrTokenizer setIgnoredMatcher(StrMatcher ignored) {\n         if (ignored != null) {\n-            this.ignored = ignored;\n+            this.ignoredMatcher = ignored;\n         }\n         return this;\n     }\n      * @return the trimmer matcher in use\n      */\n     public StrMatcher getTrimmerMatcher() {\n-        return trimmer;\n+        return trimmerMatcher;\n     }\n \n     /**\n      */\n     public StrTokenizer setTrimmerMatcher(StrMatcher trimmer) {\n         if (trimmer != null) {\n-            this.trimmer = trimmer;\n+            this.trimmerMatcher = trimmer;\n         }\n         return this;\n     }\n      * @return true if empty tokens are returned as null\n      */\n     public boolean isEmptyTokenAsNull() {\n-        return emptyAsNull;\n+        return this.emptyAsNull;\n     }\n \n     /**", "timestamp": 1124664952, "metainfo": ""}