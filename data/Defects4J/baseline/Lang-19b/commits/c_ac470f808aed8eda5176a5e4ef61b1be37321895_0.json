{"sha": "ac470f808aed8eda5176a5e4ef61b1be37321895", "log": "Commiting my variant patch from LANG-336 to Henrik Maryn's genericizing code  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrLookup.java\n+++ b/src/java/org/apache/commons/lang/text/StrLookup.java\n  * @since 2.2\n  * @version $Id$\n  */\n-public abstract class StrLookup {\n+public abstract class StrLookup<V> {\n \n     /**\n      * Lookup that always returns null.\n      */\n-    private static final StrLookup NONE_LOOKUP;\n+    private static final StrLookup<?> NONE_LOOKUP;\n     /**\n      * Lookup that uses System properties.\n      */\n-    private static final StrLookup SYSTEM_PROPERTIES_LOOKUP;\n+    private static final StrLookup<Object> SYSTEM_PROPERTIES_LOOKUP;\n     static {\n         NONE_LOOKUP = new MapStrLookup(null);\n         StrLookup lookup = null;\n      *\n      * @return a lookup that always returns null, not null\n      */\n-    public static StrLookup noneLookup() {\n+    public static StrLookup<?> noneLookup() {\n         return NONE_LOOKUP;\n     }\n \n      *\n      * @return a lookup using system properties, not null\n      */\n-    public static StrLookup systemPropertiesLookup() {\n+    public static StrLookup<Object> systemPropertiesLookup() {\n         return SYSTEM_PROPERTIES_LOOKUP;\n     }\n \n      * @param map  the map of keys to values, may be null\n      * @return a lookup using the map, not null\n      */\n-    public static StrLookup mapLookup(Map map) {\n-        return new MapStrLookup(map);\n+    public static <V> StrLookup mapLookup(Map<String, V> map) {\n+        return new MapStrLookup<V>(map);\n     }\n \n     //-----------------------------------------------------------------------\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Lookup imnplementation that uses a Map.\n+     * Lookup implementation that uses a Map.\n      */\n-    static class MapStrLookup extends StrLookup {\n+    static class MapStrLookup<V> extends StrLookup {\n \n         /** Map keys are variable names and value. */\n-        private final Map map;\n+        private final Map<String, V> map;\n \n         /**\n          * Creates a new instance backed by a Map.\n          *\n          * @param map  the map of keys to values, may be null\n          */\n-        MapStrLookup(Map map) {\n+        MapStrLookup(Map<String, V> map) {\n             this.map = map;\n         }\n \n--- a/src/java/org/apache/commons/lang/text/StrSubstitutor.java\n+++ b/src/java/org/apache/commons/lang/text/StrSubstitutor.java\n      * @param valueMap  the map with the values, may be null\n      * @return the result of the replace operation\n      */\n-    public static String replace(Object source, Map valueMap) {\n+    public static <V> String replace(Object source, Map<String, V> valueMap) {\n         return new StrSubstitutor(valueMap).replace(source);\n     }\n \n      * @return the result of the replace operation\n      * @throws IllegalArgumentException if the prefix or suffix is null\n      */\n-    public static String replace(Object source, Map valueMap, String prefix, String suffix) {\n+    public static <V> String replace(Object source, Map<String, V> valueMap, String prefix, String suffix) {\n         return new StrSubstitutor(valueMap, prefix, suffix).replace(source);\n     }\n \n      *\n      * @param valueMap  the map with the variables' values, may be null\n      */\n-    public StrSubstitutor(Map valueMap) {\n+    public <V> StrSubstitutor(Map<String, V> valueMap) {\n         this(StrLookup.mapLookup(valueMap), DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);\n     }\n \n      * @param suffix  the suffix for variables, not null\n      * @throws IllegalArgumentException if the prefix or suffix is null\n      */\n-    public StrSubstitutor(Map valueMap, String prefix, String suffix) {\n+    public <V> StrSubstitutor(Map<String, V> valueMap, String prefix, String suffix) {\n         this(StrLookup.mapLookup(valueMap), prefix, suffix, DEFAULT_ESCAPE);\n     }\n \n      * @param escape  the escape character\n      * @throws IllegalArgumentException if the prefix or suffix is null\n      */\n-    public StrSubstitutor(Map valueMap, String prefix, String suffix, char escape) {\n+    public <V> StrSubstitutor(Map<String, V> valueMap, String prefix, String suffix, char escape) {\n         this(StrLookup.mapLookup(valueMap), prefix, suffix, escape);\n     }\n ", "timestamp": 1242372857, "metainfo": ""}