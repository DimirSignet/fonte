{"sha": "2b3de2ce0c94cb59a7458706a5d365e9f7422242", "log": "LANG-454 implement Iterable<Character> and some javadoc changes  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharRange.java\n+++ b/src/main/java/org/apache/commons/lang3/CharRange.java\n  * @since 1.0\n  * @version $Id$\n  */\n-public final class CharRange implements Serializable {\n+public final class CharRange implements Iterable<Character>, Serializable {\n \n     /**\n      * Required for serialization support. Lang version 2.0. \n      *\n      * @return an iterator to the chars represented by this range\n      */\n-    public Iterator iterator() {\n+    public Iterator<Character> iterator() {\n         return new CharacterIterator(this);\n     }\n \n-    static class CharacterIterator implements Iterator {\n-        /** The currect character */\n+    /**\n+     * Character {@link Iterator}.\n+     */\n+    private static class CharacterIterator implements Iterator<Character> {\n+        /** The current character */\n         private char current;\n \n         private CharRange range;\n         private boolean hasNext;\n \n-        public CharacterIterator(CharRange r) {\n+        /**\n+         * Construct a new iterator for the character range.\n+         *\n+         * @param r The character range\n+         */\n+        private CharacterIterator(CharRange r) {\n             range = r;\n             hasNext = true;\n \n             }\n         }\n \n+        /**\n+         * Prepare the next character in the range.\n+         */\n         private void prepareNext() {\n             if (range.negated) {\n                 if (current == Character.MAX_VALUE) {\n          *\n          * @return <code>Character</code> for the next character\n          */\n-        public Object next() {\n+        public Character next() {\n             if (hasNext == false) {\n                 throw new NoSuchElementException();\n             }", "timestamp": 1265199747, "metainfo": ""}