{"sha": "c972344e82e6628cb304c8719b3f0f8402b2d5dc", "log": "LANG-546 - Validate.validIndex()  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Validate.java\n+++ b/src/java/org/apache/commons/lang/Validate.java\n         }\n     }\n \n+    // validIndex array\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the\n+     * index for the argument array is invalid or if the array is <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * Validate.validIndex(myArray, 2, \"The array index is invalid: \");\n+     * </pre>\n+     * \n+     * <p>If the array is null then the message in the exception is 'The validated object is null'.</p>\n+     *\n+     * @param array  the array to check, not null\n+     * @param message  the exception message if the array index is invalid\n+     * @throws IllegalArgumentException if the array index is invalid or null\n+     */\n+    public static void validIndex(Object[] array, int index, String message) {\n+        Validate.notNull(array);\n+        if (index < 0 || index >= array.length) {\n+            throw new IllegalArgumentException(message + index);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the\n+     * index for the argument array is invalid or if the array is <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * Validate.validIndex(myArray, 2);\n+     * </pre>\n+     *\n+     * <p>If the array index is invalid the message in the exception is\n+     * 'The validated array index is invalid: ' followed by the index.</p>\n+     *\n+     * <p>If the array is null then the message in the exception is 'The validated object is null'.</p>\n+     * \n+     * @param array  the array to check, not null\n+     * @throws IllegalArgumentException if the array index is invalid or null\n+     */\n+    public static void validIndex(Object[] array, int index) {\n+        validIndex(array, index, \"The validated array index is invalid: \");\n+    }\n+\n+    // validIndex collection\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the\n+     * index for the argument collection is invalid or if the collection is <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * Validate.validIndex(myCollection, 2, \"The collection index is invalid: \");\n+     * </pre>\n+     * \n+     * <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>\n+     *\n+     * @param coll  the collection to check, not null\n+     * @param message  the exception message if the collection index is invalid\n+     * @throws IllegalArgumentException if the collection index is invalid or null\n+     */\n+    public static void validIndex(Collection<?> coll, int index, String message) {\n+        Validate.notNull(coll);\n+        if (index < 0 || index >= coll.size()) {\n+            throw new IllegalArgumentException(message + index);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the\n+     * index for the argument collection is invalid or if the collection is <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * Validate.validIndex(myCollection, 2);\n+     * </pre>\n+     *\n+     * <p>If the collection index is invalid the message in the exception is\n+     * 'The validated collection index is invalid: ' followed by the index.</p>\n+     *\n+     * <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>\n+     * \n+     * @param coll  the collection to check, not null\n+     * @throws IllegalArgumentException if the collection index is invalid or null\n+     */\n+    public static void validIndex(Collection<?> coll, int index) {\n+        validIndex(coll, index, \"The validated collection index is invalid: \");\n+    }\n+\n+    // validIndex string\n+    //---------------------------------------------------------------------------------\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the\n+     * index for the argument character sequence (including String and StringBuffer)\n+     * is invalid or if the string is <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * Validate.validIndex(myStr, 2, \"The string index is invalid: \");\n+     * </pre>\n+     * \n+     * <p>If the string is null then the message in the exception is 'The validated object is null'.</p>\n+     *\n+     * @param str  the string to check, not null\n+     * @param message  the exception message if the string index is invalid\n+     * @throws IllegalArgumentException if the string index is invalid or null\n+     */\n+    public static void validIndex(CharSequence str, int index, String message) {\n+        Validate.notNull(str);\n+        if (index < 0 || index >= str.length()) {\n+            throw new IllegalArgumentException(message + index);\n+        }\n+    }\n+\n+    /**\n+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code> if the\n+     * index for the argument character sequence (including String and StringBuffer)\n+     * is invalid or if the string is <code>null</code>.</p>\n+     *\n+     * <pre>\n+     * Validate.validIndex(myStr, 2);\n+     * </pre>\n+     *\n+     * <p>If the string index is invalid the message in the exception is\n+     * 'The validated string index is invalid: ' followed by the index.</p>\n+     *\n+     * <p>If the string is null then the message in the exception is 'The validated object is null'.</p>\n+     * \n+     * @param str  the string to check, not null\n+     * @throws IllegalArgumentException if the string index is invalid or null\n+     */\n+    public static void validIndex(CharSequence str, int index) {\n+        validIndex(str, index, \"The validated string index is invalid: \");\n+    }\n+\n }\n--- a/src/test/org/apache/commons/lang/ValidateTest.java\n+++ b/src/test/org/apache/commons/lang/ValidateTest.java\n         assertEquals(true, Modifier.isPublic(Validate.class.getModifiers()));\n         assertEquals(false, Modifier.isFinal(Validate.class.getModifiers()));\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n+    public void testValidIndex_withMessage_array() {\n+        Object[] array = new Object[2];\n+        Validate.validIndex(array, 0, \"Broken: \");\n+        Validate.validIndex(array, 1, \"Broken: \");\n+        try {\n+            Validate.validIndex(array, -1, \"Broken: \");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"Broken: -1\", ex.getMessage());\n+        }\n+        try {\n+            Validate.validIndex(array, 2, \"Broken: \");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"Broken: 2\", ex.getMessage());\n+        }\n+    }\n+\n+    public void testValidIndex_array() {\n+        Object[] array = new Object[2];\n+        Validate.validIndex(array, 0);\n+        Validate.validIndex(array, 1);\n+        try {\n+            Validate.validIndex(array, -1);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated array index is invalid: -1\", ex.getMessage());\n+        }\n+        try {\n+            Validate.validIndex(array, 2);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated array index is invalid: 2\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testValidIndex_withMessage_collection() {\n+        Collection<String> coll = new ArrayList<String>();\n+        coll.add(null);\n+        coll.add(null);\n+        Validate.validIndex(coll, 0, \"Broken: \");\n+        Validate.validIndex(coll, 1, \"Broken: \");\n+        try {\n+            Validate.validIndex(coll, -1, \"Broken: \");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"Broken: -1\", ex.getMessage());\n+        }\n+        try {\n+            Validate.validIndex(coll, 2, \"Broken: \");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"Broken: 2\", ex.getMessage());\n+        }\n+    }\n+\n+    public void testValidIndex_collection() {\n+        Collection<String> coll = new ArrayList<String>();\n+        coll.add(null);\n+        coll.add(null);\n+        Validate.validIndex(coll, 0);\n+        Validate.validIndex(coll, 1);\n+        try {\n+            Validate.validIndex(coll, -1);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated collection index is invalid: -1\", ex.getMessage());\n+        }\n+        try {\n+            Validate.validIndex(coll, 2);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated collection index is invalid: 2\", ex.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testValidIndex_withMessage_charSequence() {\n+        CharSequence str = \"Hi\";\n+        Validate.validIndex(str, 0, \"Broken: \");\n+        Validate.validIndex(str, 1, \"Broken: \");\n+        try {\n+            Validate.validIndex(str, -1, \"Broken: \");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"Broken: -1\", ex.getMessage());\n+        }\n+        try {\n+            Validate.validIndex(str, 2, \"Broken: \");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"Broken: 2\", ex.getMessage());\n+        }\n+    }\n+\n+    public void testValidIndex_charSequence() {\n+        CharSequence str = \"Hi\";\n+        Validate.validIndex(str, 0);\n+        Validate.validIndex(str, 1);\n+        try {\n+            Validate.validIndex(str, -1);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated string index is invalid: -1\", ex.getMessage());\n+        }\n+        try {\n+            Validate.validIndex(str, 2);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            assertEquals(\"The validated string index is invalid: 2\", ex.getMessage());\n+        }\n+    }\n+\n }", "timestamp": 1257090309, "metainfo": ""}