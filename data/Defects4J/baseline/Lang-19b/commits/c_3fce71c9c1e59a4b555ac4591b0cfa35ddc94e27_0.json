{"sha": "3fce71c9c1e59a4b555ac4591b0cfa35ddc94e27", "log": "Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n     };\n \n     /**\n-     * <p><code>AnnotationUtils</code> instances should NOT be constructed in\n+     * <p>{@code AnnotationUtils} instances should NOT be constructed in\n      * standard programming. Instead, the class should be used statically.</p>\n      * \n      * <p>This constructor is public to permit tools that require a JavaBean\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n import org.apache.commons.lang3.builder.ToStringStyle;\n \n /**\n- * <p>Operations on arrays, primitive arrays (like <code>int[]</code>) and\n- * primitive wrapper arrays (like <code>Integer[]</code>).</p>\n+ * <p>Operations on arrays, primitive arrays (like {@code int[]}) and\n+ * primitive wrapper arrays (like {@code Integer[]}).</p>\n  *\n- * <p>This class tries to handle <code>null</code> input gracefully.\n- * An exception will not be thrown for a <code>null</code>\n- * array input. However, an Object array that contains a <code>null</code>\n+ * <p>This class tries to handle {@code null} input gracefully.\n+ * An exception will not be thrown for a {@code null}\n+ * array input. However, an Object array that contains a {@code null}\n  * element may throw an exception. Each method documents its behaviour.</p>\n  *\n  * <p>#ThreadSafe#</p>\n public class ArrayUtils {\n \n     /**\n-     * An empty immutable <code>Object</code> array.\n+     * An empty immutable {@code Object} array.\n      */\n     public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];\n     /**\n-     * An empty immutable <code>Class</code> array.\n+     * An empty immutable {@code Class} array.\n      */\n     public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class[0];\n     /**\n-     * An empty immutable <code>String</code> array.\n+     * An empty immutable {@code String} array.\n      */\n     public static final String[] EMPTY_STRING_ARRAY = new String[0];\n     /**\n-     * An empty immutable <code>long</code> array.\n+     * An empty immutable {@code long} array.\n      */\n     public static final long[] EMPTY_LONG_ARRAY = new long[0];\n     /**\n-     * An empty immutable <code>Long</code> array.\n+     * An empty immutable {@code Long} array.\n      */\n     public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];\n     /**\n-     * An empty immutable <code>int</code> array.\n+     * An empty immutable {@code int} array.\n      */\n     public static final int[] EMPTY_INT_ARRAY = new int[0];\n     /**\n-     * An empty immutable <code>Integer</code> array.\n+     * An empty immutable {@code Integer} array.\n      */\n     public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];\n     /**\n-     * An empty immutable <code>short</code> array.\n+     * An empty immutable {@code short} array.\n      */\n     public static final short[] EMPTY_SHORT_ARRAY = new short[0];\n     /**\n-     * An empty immutable <code>Short</code> array.\n+     * An empty immutable {@code Short} array.\n      */\n     public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];\n     /**\n-     * An empty immutable <code>byte</code> array.\n+     * An empty immutable {@code byte} array.\n      */\n     public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n     /**\n-     * An empty immutable <code>Byte</code> array.\n+     * An empty immutable {@code Byte} array.\n      */\n     public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];\n     /**\n-     * An empty immutable <code>double</code> array.\n+     * An empty immutable {@code double} array.\n      */\n     public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];\n     /**\n-     * An empty immutable <code>Double</code> array.\n+     * An empty immutable {@code Double} array.\n      */\n     public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];\n     /**\n-     * An empty immutable <code>float</code> array.\n+     * An empty immutable {@code float} array.\n      */\n     public static final float[] EMPTY_FLOAT_ARRAY = new float[0];\n     /**\n-     * An empty immutable <code>Float</code> array.\n+     * An empty immutable {@code Float} array.\n      */\n     public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];\n     /**\n-     * An empty immutable <code>boolean</code> array.\n+     * An empty immutable {@code boolean} array.\n      */\n     public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];\n     /**\n-     * An empty immutable <code>Boolean</code> array.\n+     * An empty immutable {@code Boolean} array.\n      */\n     public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];\n     /**\n-     * An empty immutable <code>char</code> array.\n+     * An empty immutable {@code char} array.\n      */\n     public static final char[] EMPTY_CHAR_ARRAY = new char[0];\n     /**\n-     * An empty immutable <code>Character</code> array.\n+     * An empty immutable {@code Character} array.\n      */\n     public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];\n \n     /**\n-     * The index value when an element is not found in a list or array: <code>-1</code>.\n+     * The index value when an element is not found in a list or array: {@code -1}.\n      * This value is returned by methods in this class and can also be used in comparisons with values returned by\n      * various method from {@link java.util.List}.\n      */\n \n     /**\n      * <p>ArrayUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>ArrayUtils.clone(new int[] {2})</code>.</p>\n+     * Instead, the class should be used as {@code ArrayUtils.clone(new int[] {2})}.</p>\n      *\n      * <p>This constructor is public to permit tools that require a JavaBean instance\n      * to operate.</p>\n     // Basic methods handling multi-dimensional arrays\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Outputs an array as a String, treating <code>null</code> as an empty array.</p>\n+     * <p>Outputs an array as a String, treating {@code null} as an empty array.</p>\n      *\n      * <p>Multi-dimensional arrays are handled correctly, including\n      * multi-dimensional primitive arrays.</p>\n      *\n-     * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>\n-     *\n-     * @param array  the array to get a toString for, may be <code>null</code>\n+     * <p>The format is that of Java source code, for example {@code {a,b}}.</p>\n+     *\n+     * @param array  the array to get a toString for, may be {@code null}\n      * @return a String representation of the array, '{}' if null array input\n      */\n     public static String toString(Object array) {\n     }\n \n     /**\n-     * <p>Outputs an array as a String handling <code>null</code>s.</p>\n+     * <p>Outputs an array as a String handling {@code null}s.</p>\n      *\n      * <p>Multi-dimensional arrays are handled correctly, including\n      * multi-dimensional primitive arrays.</p>\n      *\n-     * <p>The format is that of Java source code, for example <code>{a,b}</code>.</p>\n-     *\n-     * @param array  the array to get a toString for, may be <code>null</code>\n-     * @param stringIfNull  the String to return if the array is <code>null</code>\n+     * <p>The format is that of Java source code, for example {@code {a,b}}.</p>\n+     *\n+     * @param array  the array to get a toString for, may be {@code null}\n+     * @param stringIfNull  the String to return if the array is {@code null}\n      * @return a String representation of the array\n      */\n     public static String toString(Object array, String stringIfNull) {\n      *\n      * <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>\n      *\n-     * @param array  the array to get a hash code for, <code>null</code> returns zero\n+     * @param array  the array to get a hash code for, {@code null} returns zero\n      * @return a hash code for the array\n      */\n     public static int hashCode(Object array) {\n      *\n      * <p>Multi-dimensional primitive arrays are also handled correctly by this method.</p>\n      *\n-     * @param array1  the left hand array to compare, may be <code>null</code>\n-     * @param array2  the right hand array to compare, may be <code>null</code>\n-     * @return <code>true</code> if the arrays are equal\n+     * @param array1  the left hand array to compare, may be {@code null}\n+     * @param array2  the right hand array to compare, may be {@code null}\n+     * @return {@code true} if the arrays are equal\n      */\n     public static boolean isEquals(Object array1, Object array2) {\n         return new EqualsBuilder().append(array1, array2).isEquals();\n      *     {\"BLUE\", \"#0000FF\"}});\n      * </pre>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n      *\n      * @param array  an array whose elements are either a {@link java.util.Map.Entry} or\n-     *  an Array containing at least two elements, may be <code>null</code>\n-     * @return a <code>Map</code> that was created from the array\n+     *  an Array containing at least two elements, may be {@code null}\n+     * @return a {@code Map} that was created from the array\n      * @throws IllegalArgumentException  if one element of this Array is\n      *  itself an Array containing less then two elements\n      * @throws IllegalArgumentException  if the array contains elements other\n      * type explicitly like in\n      * <code>Number[] array = ArrayUtils.&lt;Number&gt;toArray(new Integer(42), new Double(Math.PI))</code>,\n      * there is no real advantage when compared to\n-     * <code>new Number[] {new Integer(42), new Double(Math.PI)}</code>.</p>\n+     * {@code new Number[] {new Integer(42), new Double(Math.PI)}}.</p>\n      *\n      * @param  <T>   the array's element type\n      * @param  items  the varargs array items, null allowed\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Shallow clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n+     * {@code null}.</p>\n      *\n      * <p>The objects in the array are not cloned, thus there is no special\n      * handling for multi-dimensional arrays.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to shallow clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to shallow clone, may be {@code null}\n+     * @return the cloned array, {@code null} if {@code null} input\n      */\n     public static <T> T[] clone(T[] array) {\n         if (array == null) {\n \n     /**\n      * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     * {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to clone, may be {@code null}\n+     * @return the cloned array, {@code null} if {@code null} input\n      */\n     public static long[] clone(long[] array) {\n         if (array == null) {\n \n     /**\n      * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     * {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to clone, may be {@code null}\n+     * @return the cloned array, {@code null} if {@code null} input\n      */\n     public static int[] clone(int[] array) {\n         if (array == null) {\n \n     /**\n      * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     * {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to clone, may be {@code null}\n+     * @return the cloned array, {@code null} if {@code null} input\n      */\n     public static short[] clone(short[] array) {\n         if (array == null) {\n \n     /**\n      * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     * {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to clone, may be {@code null}\n+     * @return the cloned array, {@code null} if {@code null} input\n      */\n     public static char[] clone(char[] array) {\n         if (array == null) {\n \n     /**\n      * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     * {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to clone, may be {@code null}\n+     * @return the cloned array, {@code null} if {@code null} input\n      */\n     public static byte[] clone(byte[] array) {\n         if (array == null) {\n \n     /**\n      * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     * {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to clone, may be {@code null}\n+     * @return the cloned array, {@code null} if {@code null} input\n      */\n     public static double[] clone(double[] array) {\n         if (array == null) {\n \n     /**\n      * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     * {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to clone, may be {@code null}\n+     * @return the cloned array, {@code null} if {@code null} input\n      */\n     public static float[] clone(float[] array) {\n         if (array == null) {\n \n     /**\n      * <p>Clones an array returning a typecast result and handling\n-     * <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to clone, may be <code>null</code>\n-     * @return the cloned array, <code>null</code> if <code>null</code> input\n+     * {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to clone, may be {@code null}\n+     * @return the cloned array, {@code null} if {@code null} input\n      */\n     public static boolean[] clone(boolean[] array) {\n         if (array == null) {\n     // nullToEmpty\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static Object[] nullToEmpty(Object[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static String[] nullToEmpty(String[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static long[] nullToEmpty(long[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static int[] nullToEmpty(int[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static short[] nullToEmpty(short[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static char[] nullToEmpty(char[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static byte[] nullToEmpty(byte[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static double[] nullToEmpty(double[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static float[] nullToEmpty(float[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static boolean[] nullToEmpty(boolean[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static Long[] nullToEmpty(Long[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static Integer[] nullToEmpty(Integer[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static Short[] nullToEmpty(Short[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static Character[] nullToEmpty(Character[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static Byte[] nullToEmpty(Byte[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static Double[] nullToEmpty(Double[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static Float[] nullToEmpty(Float[] array) {\n     }\n \n     /**\n-     * <p>Defensive programming technique to change a <code>null</code>\n+     * <p>Defensive programming technique to change a {@code null}\n      * reference to an empty one.</p>\n      *\n-     * <p>This method returns an empty array for a <code>null</code> input array.</p>\n+     * <p>This method returns an empty array for a {@code null} input array.</p>\n      * \n      * <p>As a memory optimizing technique an empty array passed in will be overridden with \n-     * the empty <code>public static</code> references in this class.</p>\n-     *\n-     * @param array  the array to check for <code>null</code> or empty\n-     * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * the empty {@code public static} references in this class.</p>\n+     *\n+     * @param array  the array to check for {@code null} or empty\n+     * @return the same array, {@code public static} empty array if {@code null} or empty input\n      * @since 2.5\n      */\n     public static Boolean[] nullToEmpty(Boolean[] array) {\n      *\n      * <p>The component type of the subarray is always the same as\n      * that of the input array. Thus, if the input is an array of type\n-     * <code>Date</code>, the following usage is envisaged:</p>\n+     * {@code Date}, the following usage is envisaged:</p>\n      *\n      * <pre>\n      * Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);\n     }\n \n     /**\n-     * <p>Produces a new <code>long</code> array containing the elements\n+     * <p>Produces a new {@code long} array containing the elements\n      * between the start and end indices.</p>\n      *\n      * <p>The start index is inclusive, the end index exclusive.\n     }\n \n     /**\n-     * <p>Produces a new <code>int</code> array containing the elements\n+     * <p>Produces a new {@code int} array containing the elements\n      * between the start and end indices.</p>\n      *\n      * <p>The start index is inclusive, the end index exclusive.\n     }\n \n     /**\n-     * <p>Produces a new <code>short</code> array containing the elements\n+     * <p>Produces a new {@code short} array containing the elements\n      * between the start and end indices.</p>\n      *\n      * <p>The start index is inclusive, the end index exclusive.\n     }\n \n     /**\n-     * <p>Produces a new <code>char</code> array containing the elements\n+     * <p>Produces a new {@code char} array containing the elements\n      * between the start and end indices.</p>\n      *\n      * <p>The start index is inclusive, the end index exclusive.\n     }\n \n     /**\n-     * <p>Produces a new <code>byte</code> array containing the elements\n+     * <p>Produces a new {@code byte} array containing the elements\n      * between the start and end indices.</p>\n      *\n      * <p>The start index is inclusive, the end index exclusive.\n     }\n \n     /**\n-     * <p>Produces a new <code>double</code> array containing the elements\n+     * <p>Produces a new {@code double} array containing the elements\n      * between the start and end indices.</p>\n      *\n      * <p>The start index is inclusive, the end index exclusive.\n     }\n \n     /**\n-     * <p>Produces a new <code>float</code> array containing the elements\n+     * <p>Produces a new {@code float} array containing the elements\n      * between the start and end indices.</p>\n      *\n      * <p>The start index is inclusive, the end index exclusive.\n     }\n \n     /**\n-     * <p>Produces a new <code>boolean</code> array containing the elements\n+     * <p>Produces a new {@code boolean} array containing the elements\n      * between the start and end indices.</p>\n      *\n      * <p>The start index is inclusive, the end index exclusive.\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.\n+     * {@code null} arrays as length {@code 0}.\n      *\n      * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      *\n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n+     * @param array1 the first array, may be {@code null}\n+     * @param array2 the second array, may be {@code null}\n+     * @return {@code true} if length of arrays matches, treating\n+     *  {@code null} as an empty array\n      */\n     public static boolean isSameLength(Object[] array1, Object[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n \n     /**\n      * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n+     * {@code null} arrays as length {@code 0}.</p>\n+     *\n+     * @param array1 the first array, may be {@code null}\n+     * @param array2 the second array, may be {@code null}\n+     * @return {@code true} if length of arrays matches, treating\n+     *  {@code null} as an empty array\n      */\n     public static boolean isSameLength(long[] array1, long[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n \n     /**\n      * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n+     * {@code null} arrays as length {@code 0}.</p>\n+     *\n+     * @param array1 the first array, may be {@code null}\n+     * @param array2 the second array, may be {@code null}\n+     * @return {@code true} if length of arrays matches, treating\n+     *  {@code null} as an empty array\n      */\n     public static boolean isSameLength(int[] array1, int[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n \n     /**\n      * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n+     * {@code null} arrays as length {@code 0}.</p>\n+     *\n+     * @param array1 the first array, may be {@code null}\n+     * @param array2 the second array, may be {@code null}\n+     * @return {@code true} if length of arrays matches, treating\n+     *  {@code null} as an empty array\n      */\n     public static boolean isSameLength(short[] array1, short[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n \n     /**\n      * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n+     * {@code null} arrays as length {@code 0}.</p>\n+     *\n+     * @param array1 the first array, may be {@code null}\n+     * @param array2 the second array, may be {@code null}\n+     * @return {@code true} if length of arrays matches, treating\n+     *  {@code null} as an empty array\n      */\n     public static boolean isSameLength(char[] array1, char[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n \n     /**\n      * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n+     * {@code null} arrays as length {@code 0}.</p>\n+     *\n+     * @param array1 the first array, may be {@code null}\n+     * @param array2 the second array, may be {@code null}\n+     * @return {@code true} if length of arrays matches, treating\n+     *  {@code null} as an empty array\n      */\n     public static boolean isSameLength(byte[] array1, byte[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n \n     /**\n      * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n+     * {@code null} arrays as length {@code 0}.</p>\n+     *\n+     * @param array1 the first array, may be {@code null}\n+     * @param array2 the second array, may be {@code null}\n+     * @return {@code true} if length of arrays matches, treating\n+     *  {@code null} as an empty array\n      */\n     public static boolean isSameLength(double[] array1, double[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n \n     /**\n      * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n+     * {@code null} arrays as length {@code 0}.</p>\n+     *\n+     * @param array1 the first array, may be {@code null}\n+     * @param array2 the second array, may be {@code null}\n+     * @return {@code true} if length of arrays matches, treating\n+     *  {@code null} as an empty array\n      */\n     public static boolean isSameLength(float[] array1, float[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n \n     /**\n      * <p>Checks whether two arrays are the same length, treating\n-     * <code>null</code> arrays as length <code>0</code>.</p>\n-     *\n-     * @param array1 the first array, may be <code>null</code>\n-     * @param array2 the second array, may be <code>null</code>\n-     * @return <code>true</code> if length of arrays matches, treating\n-     *  <code>null</code> as an empty array\n+     * {@code null} arrays as length {@code 0}.</p>\n+     *\n+     * @param array1 the first array, may be {@code null}\n+     * @param array2 the second array, may be {@code null}\n+     * @return {@code true} if length of arrays matches, treating\n+     *  {@code null} as an empty array\n      */\n     public static boolean isSameLength(boolean[] array1, boolean[] array2) {\n         if ((array1 == null && array2 != null && array2.length > 0) ||\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Returns the length of the specified array.\n-     * This method can deal with <code>Object</code> arrays and with primitive arrays.</p>\n-     *\n-     * <p>If the input array is <code>null</code>, <code>0</code> is returned.</p>\n+     * This method can deal with {@code Object} arrays and with primitive arrays.</p>\n+     *\n+     * <p>If the input array is {@code null}, {@code 0} is returned.</p>\n      *\n      * <pre>\n      * ArrayUtils.getLength(null)            = 0\n      * </pre>\n      *\n      * @param array  the array to retrieve the length from, may be null\n-     * @return The length of the array, or <code>0</code> if the array is <code>null</code>\n+     * @return The length of the array, or {@code 0} if the array is {@code null}\n      * @throws IllegalArgumentException if the object arguement is not an array.\n      * @since 2.1\n      */\n      * <p>Checks whether two arrays are the same type taking into account\n      * multi-dimensional arrays.</p>\n      *\n-     * @param array1 the first array, must not be <code>null</code>\n-     * @param array2 the second array, must not be <code>null</code>\n-     * @return <code>true</code> if type of arrays matches\n-     * @throws IllegalArgumentException if either array is <code>null</code>\n+     * @param array1 the first array, must not be {@code null}\n+     * @param array2 the second array, must not be {@code null}\n+     * @return {@code true} if type of arrays matches\n+     * @throws IllegalArgumentException if either array is {@code null}\n      */\n     public static boolean isSameType(Object array1, Object array2) {\n         if (array1 == null || array2 == null) {\n      *\n      * <p>There is no special handling for multi-dimensional arrays.</p>\n      *\n-     * <p>This method does nothing for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to reverse, may be <code>null</code>\n+     * <p>This method does nothing for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to reverse, may be {@code null}\n      */\n     public static void reverse(Object[] array) {\n         if (array == null) {\n     /**\n      * <p>Reverses the order of the given array.</p>\n      *\n-     * <p>This method does nothing for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to reverse, may be <code>null</code>\n+     * <p>This method does nothing for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to reverse, may be {@code null}\n      */\n     public static void reverse(long[] array) {\n         if (array == null) {\n     /**\n      * <p>Reverses the order of the given array.</p>\n      *\n-     * <p>This method does nothing for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to reverse, may be <code>null</code>\n+     * <p>This method does nothing for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to reverse, may be {@code null}\n      */\n     public static void reverse(int[] array) {\n         if (array == null) {\n     /**\n      * <p>Reverses the order of the given array.</p>\n      *\n-     * <p>This method does nothing for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to reverse, may be <code>null</code>\n+     * <p>This method does nothing for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to reverse, may be {@code null}\n      */\n     public static void reverse(short[] array) {\n         if (array == null) {\n     /**\n      * <p>Reverses the order of the given array.</p>\n      *\n-     * <p>This method does nothing for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to reverse, may be <code>null</code>\n+     * <p>This method does nothing for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to reverse, may be {@code null}\n      */\n     public static void reverse(char[] array) {\n         if (array == null) {\n     /**\n      * <p>Reverses the order of the given array.</p>\n      *\n-     * <p>This method does nothing for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to reverse, may be <code>null</code>\n+     * <p>This method does nothing for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to reverse, may be {@code null}\n      */\n     public static void reverse(byte[] array) {\n         if (array == null) {\n     /**\n      * <p>Reverses the order of the given array.</p>\n      *\n-     * <p>This method does nothing for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to reverse, may be <code>null</code>\n+     * <p>This method does nothing for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to reverse, may be {@code null}\n      */\n     public static void reverse(double[] array) {\n         if (array == null) {\n     /**\n      * <p>Reverses the order of the given array.</p>\n      *\n-     * <p>This method does nothing for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to reverse, may be <code>null</code>\n+     * <p>This method does nothing for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to reverse, may be {@code null}\n      */\n     public static void reverse(float[] array) {\n         if (array == null) {\n     /**\n      * <p>Reverses the order of the given array.</p>\n      *\n-     * <p>This method does nothing for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to reverse, may be <code>null</code>\n+     * <p>This method does nothing for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to reverse, may be {@code null}\n      */\n     public static void reverse(boolean[] array) {\n         if (array == null) {\n     /**\n      * <p>Finds the index of the given object in the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param objectToFind  the object to find, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n+     * @param objectToFind  the object to find, may be {@code null}\n      * @return the index of the object within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(Object[] array, Object objectToFind) {\n         return indexOf(array, objectToFind, 0);\n     /**\n      * <p>Finds the index of the given object in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n-     * @param objectToFind  the object to find, may be <code>null</code>\n+     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n+     * @param objectToFind  the object to find, may be {@code null}\n      * @param startIndex  the index to start searching at\n      * @return the index of the object within the array starting at the index,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(Object[] array, Object objectToFind, int startIndex) {\n         if (array == null) {\n     /**\n      * <p>Finds the last index of the given object within the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n-     * @param objectToFind  the object to find, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to travers backwords looking for the object, may be {@code null}\n+     * @param objectToFind  the object to find, may be {@code null}\n      * @return the last index of the object within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(Object[] array, Object objectToFind) {\n         return lastIndexOf(array, objectToFind, Integer.MAX_VALUE);\n     /**\n      * <p>Finds the last index of the given object in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than\n      * the array length will search from the end of the array.</p>\n      *\n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n-     * @param objectToFind  the object to find, may be <code>null</code>\n+     * @param array  the array to traverse for looking for the object, may be {@code null}\n+     * @param objectToFind  the object to find, may be {@code null}\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the object within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(Object[] array, Object objectToFind, int startIndex) {\n         if (array == null) {\n     /**\n      * <p>Checks if the object is in the given array.</p>\n      *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * <p>The method returns {@code false} if a {@code null} array is passed in.</p>\n      *\n      * @param array  the array to search through\n      * @param objectToFind  the object to find\n-     * @return <code>true</code> if the array contains the object\n+     * @return {@code true} if the array contains the object\n      */\n     public static boolean contains(Object[] array, Object objectToFind) {\n         return indexOf(array, objectToFind) != INDEX_NOT_FOUND;\n     /**\n      * <p>Finds the index of the given value in the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(long[] array, long valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     /**\n      * <p>Finds the index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(long[] array, long valueToFind, int startIndex) {\n         if (array == null) {\n     /**\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to travers backwords looking for the object, may be {@code null}\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(long[] array, long valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     /**\n      * <p>Finds the last index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n      *\n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param array  the array to traverse for looking for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(long[] array, long valueToFind, int startIndex) {\n         if (array == null) {\n     /**\n      * <p>Checks if the value is in the given array.</p>\n      *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * <p>The method returns {@code false} if a {@code null} array is passed in.</p>\n      *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n+     * @return {@code true} if the array contains the object\n      */\n     public static boolean contains(long[] array, long valueToFind) {\n         return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     /**\n      * <p>Finds the index of the given value in the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(int[] array, int valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     /**\n      * <p>Finds the index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(int[] array, int valueToFind, int startIndex) {\n         if (array == null) {\n     /**\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to travers backwords looking for the object, may be {@code null}\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(int[] array, int valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     /**\n      * <p>Finds the last index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n      *\n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param array  the array to traverse for looking for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(int[] array, int valueToFind, int startIndex) {\n         if (array == null) {\n     /**\n      * <p>Checks if the value is in the given array.</p>\n      *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * <p>The method returns {@code false} if a {@code null} array is passed in.</p>\n      *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n+     * @return {@code true} if the array contains the object\n      */\n     public static boolean contains(int[] array, int valueToFind) {\n         return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     /**\n      * <p>Finds the index of the given value in the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(short[] array, short valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     /**\n      * <p>Finds the index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(short[] array, short valueToFind, int startIndex) {\n         if (array == null) {\n     /**\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to travers backwords looking for the object, may be {@code null}\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(short[] array, short valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     /**\n      * <p>Finds the last index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n      *\n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param array  the array to traverse for looking for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(short[] array, short valueToFind, int startIndex) {\n         if (array == null) {\n     /**\n      * <p>Checks if the value is in the given array.</p>\n      *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * <p>The method returns {@code false} if a {@code null} array is passed in.</p>\n      *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n+     * @return {@code true} if the array contains the object\n      */\n     public static boolean contains(short[] array, short valueToFind) {\n         return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     /**\n      * <p>Finds the index of the given value in the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      * @since 2.1\n      */\n     public static int indexOf(char[] array, char valueToFind) {\n     /**\n      * <p>Finds the index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      * @since 2.1\n      */\n     public static int indexOf(char[] array, char valueToFind, int startIndex) {\n     /**\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to travers backwords looking for the object, may be {@code null}\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      * @since 2.1\n      */\n     public static int lastIndexOf(char[] array, char valueToFind) {\n     /**\n      * <p>Finds the last index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n      *\n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param array  the array to traverse for looking for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      * @since 2.1\n      */\n     public static int lastIndexOf(char[] array, char valueToFind, int startIndex) {\n     /**\n      * <p>Checks if the value is in the given array.</p>\n      *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * <p>The method returns {@code false} if a {@code null} array is passed in.</p>\n      *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n+     * @return {@code true} if the array contains the object\n      * @since 2.1\n      */\n     public static boolean contains(char[] array, char valueToFind) {\n     /**\n      * <p>Finds the index of the given value in the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(byte[] array, byte valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     /**\n      * <p>Finds the index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(byte[] array, byte valueToFind, int startIndex) {\n         if (array == null) {\n     /**\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to travers backwords looking for the object, may be {@code null}\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(byte[] array, byte valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     /**\n      * <p>Finds the last index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n      *\n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param array  the array to traverse for looking for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(byte[] array, byte valueToFind, int startIndex) {\n         if (array == null) {\n     /**\n      * <p>Checks if the value is in the given array.</p>\n      *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * <p>The method returns {@code false} if a {@code null} array is passed in.</p>\n      *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n+     * @return {@code true} if the array contains the object\n      */\n     public static boolean contains(byte[] array, byte valueToFind) {\n         return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     /**\n      * <p>Finds the index of the given value in the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(double[] array, double valueToFind) {\n         return indexOf(array, valueToFind, 0);\n      * This method will return the index of the first value which falls between the region\n      * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param tolerance tolerance of the search\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(double[] array, double valueToFind, double tolerance) {\n         return indexOf(array, valueToFind, 0, tolerance);\n     /**\n      * <p>Finds the index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(double[] array, double valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n      * This method will return the index of the first value which falls between the region\n      * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @param tolerance tolerance of the search\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(double[] array, double valueToFind, int startIndex, double tolerance) {\n         if (ArrayUtils.isEmpty(array)) {\n     /**\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to travers backwords looking for the object, may be {@code null}\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(double[] array, double valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n      * This method will return the index of the last value which falls between the region\n      * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param tolerance tolerance of the search\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(double[] array, double valueToFind, double tolerance) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance);\n     /**\n      * <p>Finds the last index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n      *\n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param array  the array to traverse for looking for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(double[] array, double valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n      * This method will return the index of the last value which falls between the region\n      * defined by valueToFind - tolerance and valueToFind + tolerance.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n      *\n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param array  the array to traverse for looking for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @param tolerance  search for value within plus/minus this amount\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(double[] array, double valueToFind, int startIndex, double tolerance) {\n         if (ArrayUtils.isEmpty(array)) {\n     /**\n      * <p>Checks if the value is in the given array.</p>\n      *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * <p>The method returns {@code false} if a {@code null} array is passed in.</p>\n      *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n+     * @return {@code true} if the array contains the object\n      */\n     public static boolean contains(double[] array, double valueToFind) {\n         return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n      * given array.  If the array contains a value within the inclusive range\n      * defined by (value - tolerance) to (value + tolerance).</p>\n      *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array\n+     * <p>The method returns {@code false} if a {@code null} array\n      * is passed in.</p>\n      *\n      * @param array  the array to search\n     /**\n      * <p>Finds the index of the given value in the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(float[] array, float valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     /**\n      * <p>Finds the index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(float[] array, float valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n     /**\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to travers backwords looking for the object, may be {@code null}\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(float[] array, float valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     /**\n      * <p>Finds the last index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than the\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than the\n      * array length will search from the end of the array.</p>\n      *\n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param array  the array to traverse for looking for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(float[] array, float valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n     /**\n      * <p>Checks if the value is in the given array.</p>\n      *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * <p>The method returns {@code false} if a {@code null} array is passed in.</p>\n      *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n+     * @return {@code true} if the array contains the object\n      */\n     public static boolean contains(float[] array, float valueToFind) {\n         return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     /**\n      * <p>Finds the index of the given value in the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int indexOf(boolean[] array, boolean valueToFind) {\n         return indexOf(array, valueToFind, 0);\n     /**\n      * <p>Finds the index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n      *\n      * <p>A negative startIndex is treated as zero. A startIndex larger than the array\n-     * length will return {@link #INDEX_NOT_FOUND} (<code>-1</code>).</p>\n-     *\n-     * @param array  the array to search through for the object, may be <code>null</code>\n+     * length will return {@link #INDEX_NOT_FOUND} ({@code -1}).</p>\n+     *\n+     * @param array  the array to search through for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the index to start searching at\n      * @return the index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code>\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null}\n      *  array input\n      */\n     public static int indexOf(boolean[] array, boolean valueToFind, int startIndex) {\n     /**\n      * <p>Finds the last index of the given value within the array.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) if\n-     * <code>null</code> array input.</p>\n-     *\n-     * @param array  the array to travers backwords looking for the object, may be <code>null</code>\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) if\n+     * {@code null} array input.</p>\n+     *\n+     * @param array  the array to travers backwords looking for the object, may be {@code null}\n      * @param valueToFind  the object to find\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(boolean[] array, boolean valueToFind) {\n         return lastIndexOf(array, valueToFind, Integer.MAX_VALUE);\n     /**\n      * <p>Finds the last index of the given value in the array starting at the given index.</p>\n      *\n-     * <p>This method returns {@link #INDEX_NOT_FOUND} (<code>-1</code>) for a <code>null</code> input array.</p>\n-     *\n-     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} (<code>-1</code>). A startIndex larger than\n+     * <p>This method returns {@link #INDEX_NOT_FOUND} ({@code -1}) for a {@code null} input array.</p>\n+     *\n+     * <p>A negative startIndex will return {@link #INDEX_NOT_FOUND} ({@code -1}). A startIndex larger than\n      * the array length will search from the end of the array.</p>\n      *\n-     * @param array  the array to traverse for looking for the object, may be <code>null</code>\n+     * @param array  the array to traverse for looking for the object, may be {@code null}\n      * @param valueToFind  the value to find\n      * @param startIndex  the start index to travers backwards from\n      * @return the last index of the value within the array,\n-     *  {@link #INDEX_NOT_FOUND} (<code>-1</code>) if not found or <code>null</code> array input\n+     *  {@link #INDEX_NOT_FOUND} ({@code -1}) if not found or {@code null} array input\n      */\n     public static int lastIndexOf(boolean[] array, boolean valueToFind, int startIndex) {\n         if (ArrayUtils.isEmpty(array)) {\n     /**\n      * <p>Checks if the value is in the given array.</p>\n      *\n-     * <p>The method returns <code>false</code> if a <code>null</code> array is passed in.</p>\n+     * <p>The method returns {@code false} if a {@code null} array is passed in.</p>\n      *\n      * @param array  the array to search through\n      * @param valueToFind  the value to find\n-     * @return <code>true</code> if the array contains the object\n+     * @return {@code true} if the array contains the object\n      */\n     public static boolean contains(boolean[] array, boolean valueToFind) {\n         return indexOf(array, valueToFind) != INDEX_NOT_FOUND;\n     /**\n      * <p>Converts an array of object Characters to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Character</code> array, may be <code>null</code>\n-     * @return a <code>char</code> array, <code>null</code> if null array input\n-     * @throws NullPointerException if array content is <code>null</code>\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Character} array, may be {@code null}\n+     * @return a {@code char} array, {@code null} if null array input\n+     * @throws NullPointerException if array content is {@code null}\n      */\n     public static char[] toPrimitive(Character[] array) {\n         if (array == null) {\n     }\n \n     /**\n-     * <p>Converts an array of object Character to primitives handling <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Character</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>char</code> array, <code>null</code> if null array input\n+     * <p>Converts an array of object Character to primitives handling {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Character} array, may be {@code null}\n+     * @param valueForNull  the value to insert if {@code null} found\n+     * @return a {@code char} array, {@code null} if null array input\n      */\n     public static char[] toPrimitive(Character[] array, char valueForNull) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of primitive chars to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array a <code>char</code> array\n-     * @return a <code>Character</code> array, <code>null</code> if null array input\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array a {@code char} array\n+     * @return a {@code Character} array, {@code null} if null array input\n      */\n     public static Character[] toObject(char[] array) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of object Longs to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Long</code> array, may be <code>null</code>\n-     * @return a <code>long</code> array, <code>null</code> if null array input\n-     * @throws NullPointerException if array content is <code>null</code>\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Long} array, may be {@code null}\n+     * @return a {@code long} array, {@code null} if null array input\n+     * @throws NullPointerException if array content is {@code null}\n      */\n     public static long[] toPrimitive(Long[] array) {\n         if (array == null) {\n     }\n \n     /**\n-     * <p>Converts an array of object Long to primitives handling <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Long</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>long</code> array, <code>null</code> if null array input\n+     * <p>Converts an array of object Long to primitives handling {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Long} array, may be {@code null}\n+     * @param valueForNull  the value to insert if {@code null} found\n+     * @return a {@code long} array, {@code null} if null array input\n      */\n     public static long[] toPrimitive(Long[] array, long valueForNull) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of primitive longs to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>long</code> array\n-     * @return a <code>Long</code> array, <code>null</code> if null array input\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code long} array\n+     * @return a {@code Long} array, {@code null} if null array input\n      */\n     public static Long[] toObject(long[] array) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of object Integers to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Integer</code> array, may be <code>null</code>\n-     * @return an <code>int</code> array, <code>null</code> if null array input\n-     * @throws NullPointerException if array content is <code>null</code>\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Integer} array, may be {@code null}\n+     * @return an {@code int} array, {@code null} if null array input\n+     * @throws NullPointerException if array content is {@code null}\n      */\n     public static int[] toPrimitive(Integer[] array) {\n         if (array == null) {\n     }\n \n     /**\n-     * <p>Converts an array of object Integer to primitives handling <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Integer</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return an <code>int</code> array, <code>null</code> if null array input\n+     * <p>Converts an array of object Integer to primitives handling {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Integer} array, may be {@code null}\n+     * @param valueForNull  the value to insert if {@code null} found\n+     * @return an {@code int} array, {@code null} if null array input\n      */\n     public static int[] toPrimitive(Integer[] array, int valueForNull) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of primitive ints to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  an <code>int</code> array\n-     * @return an <code>Integer</code> array, <code>null</code> if null array input\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  an {@code int} array\n+     * @return an {@code Integer} array, {@code null} if null array input\n      */\n     public static Integer[] toObject(int[] array) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of object Shorts to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Short</code> array, may be <code>null</code>\n-     * @return a <code>byte</code> array, <code>null</code> if null array input\n-     * @throws NullPointerException if array content is <code>null</code>\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Short} array, may be {@code null}\n+     * @return a {@code byte} array, {@code null} if null array input\n+     * @throws NullPointerException if array content is {@code null}\n      */\n     public static short[] toPrimitive(Short[] array) {\n         if (array == null) {\n     }\n \n     /**\n-     * <p>Converts an array of object Short to primitives handling <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Short</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>byte</code> array, <code>null</code> if null array input\n+     * <p>Converts an array of object Short to primitives handling {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Short} array, may be {@code null}\n+     * @param valueForNull  the value to insert if {@code null} found\n+     * @return a {@code byte} array, {@code null} if null array input\n      */\n     public static short[] toPrimitive(Short[] array, short valueForNull) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of primitive shorts to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>short</code> array\n-     * @return a <code>Short</code> array, <code>null</code> if null array input\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code short} array\n+     * @return a {@code Short} array, {@code null} if null array input\n      */\n     public static Short[] toObject(short[] array) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of object Bytes to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Byte</code> array, may be <code>null</code>\n-     * @return a <code>byte</code> array, <code>null</code> if null array input\n-     * @throws NullPointerException if array content is <code>null</code>\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Byte} array, may be {@code null}\n+     * @return a {@code byte} array, {@code null} if null array input\n+     * @throws NullPointerException if array content is {@code null}\n      */\n     public static byte[] toPrimitive(Byte[] array) {\n         if (array == null) {\n     }\n \n     /**\n-     * <p>Converts an array of object Bytes to primitives handling <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Byte</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>byte</code> array, <code>null</code> if null array input\n+     * <p>Converts an array of object Bytes to primitives handling {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Byte} array, may be {@code null}\n+     * @param valueForNull  the value to insert if {@code null} found\n+     * @return a {@code byte} array, {@code null} if null array input\n      */\n     public static byte[] toPrimitive(Byte[] array, byte valueForNull) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of primitive bytes to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>byte</code> array\n-     * @return a <code>Byte</code> array, <code>null</code> if null array input\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code byte} array\n+     * @return a {@code Byte} array, {@code null} if null array input\n      */\n     public static Byte[] toObject(byte[] array) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of object Doubles to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Double</code> array, may be <code>null</code>\n-     * @return a <code>double</code> array, <code>null</code> if null array input\n-     * @throws NullPointerException if array content is <code>null</code>\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Double} array, may be {@code null}\n+     * @return a {@code double} array, {@code null} if null array input\n+     * @throws NullPointerException if array content is {@code null}\n      */\n     public static double[] toPrimitive(Double[] array) {\n         if (array == null) {\n     }\n \n     /**\n-     * <p>Converts an array of object Doubles to primitives handling <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Double</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>double</code> array, <code>null</code> if null array input\n+     * <p>Converts an array of object Doubles to primitives handling {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Double} array, may be {@code null}\n+     * @param valueForNull  the value to insert if {@code null} found\n+     * @return a {@code double} array, {@code null} if null array input\n      */\n     public static double[] toPrimitive(Double[] array, double valueForNull) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of primitive doubles to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>double</code> array\n-     * @return a <code>Double</code> array, <code>null</code> if null array input\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code double} array\n+     * @return a {@code Double} array, {@code null} if null array input\n      */\n     public static Double[] toObject(double[] array) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of object Floats to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Float</code> array, may be <code>null</code>\n-     * @return a <code>float</code> array, <code>null</code> if null array input\n-     * @throws NullPointerException if array content is <code>null</code>\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Float} array, may be {@code null}\n+     * @return a {@code float} array, {@code null} if null array input\n+     * @throws NullPointerException if array content is {@code null}\n      */\n     public static float[] toPrimitive(Float[] array) {\n         if (array == null) {\n     }\n \n     /**\n-     * <p>Converts an array of object Floats to primitives handling <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Float</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>float</code> array, <code>null</code> if null array input\n+     * <p>Converts an array of object Floats to primitives handling {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Float} array, may be {@code null}\n+     * @param valueForNull  the value to insert if {@code null} found\n+     * @return a {@code float} array, {@code null} if null array input\n      */\n     public static float[] toPrimitive(Float[] array, float valueForNull) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of primitive floats to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>float</code> array\n-     * @return a <code>Float</code> array, <code>null</code> if null array input\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code float} array\n+     * @return a {@code Float} array, {@code null} if null array input\n      */\n     public static Float[] toObject(float[] array) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of object Booleans to primitives.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Boolean</code> array, may be <code>null</code>\n-     * @return a <code>boolean</code> array, <code>null</code> if null array input\n-     * @throws NullPointerException if array content is <code>null</code>\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Boolean} array, may be {@code null}\n+     * @return a {@code boolean} array, {@code null} if null array input\n+     * @throws NullPointerException if array content is {@code null}\n      */\n     public static boolean[] toPrimitive(Boolean[] array) {\n         if (array == null) {\n     }\n \n     /**\n-     * <p>Converts an array of object Booleans to primitives handling <code>null</code>.</p>\n-     *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>Boolean</code> array, may be <code>null</code>\n-     * @param valueForNull  the value to insert if <code>null</code> found\n-     * @return a <code>boolean</code> array, <code>null</code> if null array input\n+     * <p>Converts an array of object Booleans to primitives handling {@code null}.</p>\n+     *\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code Boolean} array, may be {@code null}\n+     * @param valueForNull  the value to insert if {@code null} found\n+     * @return a {@code boolean} array, {@code null} if null array input\n      */\n     public static boolean[] toPrimitive(Boolean[] array, boolean valueForNull) {\n         if (array == null) {\n     /**\n      * <p>Converts an array of primitive booleans to objects.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array  a <code>boolean</code> array\n-     * @return a <code>Boolean</code> array, <code>null</code> if null array input\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array  a {@code boolean} array\n+     * @return a {@code Boolean} array, {@code null} if null array input\n      */\n     public static Boolean[] toObject(boolean[] array) {\n         if (array == null) {\n \n     // ----------------------------------------------------------------------\n     /**\n-     * <p>Checks if an array of Objects is empty or <code>null</code>.</p>\n+     * <p>Checks if an array of Objects is empty or {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @return {@code true} if the array is empty or {@code null}\n      * @since 2.1\n      */\n     public static boolean isEmpty(Object[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive longs is empty or <code>null</code>.</p>\n+     * <p>Checks if an array of primitive longs is empty or {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @return {@code true} if the array is empty or {@code null}\n      * @since 2.1\n      */\n     public static boolean isEmpty(long[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive ints is empty or <code>null</code>.</p>\n+     * <p>Checks if an array of primitive ints is empty or {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @return {@code true} if the array is empty or {@code null}\n      * @since 2.1\n      */\n     public static boolean isEmpty(int[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive shorts is empty or <code>null</code>.</p>\n+     * <p>Checks if an array of primitive shorts is empty or {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @return {@code true} if the array is empty or {@code null}\n      * @since 2.1\n      */\n     public static boolean isEmpty(short[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive chars is empty or <code>null</code>.</p>\n+     * <p>Checks if an array of primitive chars is empty or {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @return {@code true} if the array is empty or {@code null}\n      * @since 2.1\n      */\n     public static boolean isEmpty(char[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive bytes is empty or <code>null</code>.</p>\n+     * <p>Checks if an array of primitive bytes is empty or {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @return {@code true} if the array is empty or {@code null}\n      * @since 2.1\n      */\n     public static boolean isEmpty(byte[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive doubles is empty or <code>null</code>.</p>\n+     * <p>Checks if an array of primitive doubles is empty or {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @return {@code true} if the array is empty or {@code null}\n      * @since 2.1\n      */\n     public static boolean isEmpty(double[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive floats is empty or <code>null</code>.</p>\n+     * <p>Checks if an array of primitive floats is empty or {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @return {@code true} if the array is empty or {@code null}\n      * @since 2.1\n      */\n     public static boolean isEmpty(float[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive booleans is empty or <code>null</code>.</p>\n+     * <p>Checks if an array of primitive booleans is empty or {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is empty or <code>null</code>\n+     * @return {@code true} if the array is empty or {@code null}\n      * @since 2.1\n      */\n     public static boolean isEmpty(boolean[] array) {\n \n     // ----------------------------------------------------------------------\n     /**\n-     * <p>Checks if an array of Objects is not empty or not <code>null</code>.</p>\n+     * <p>Checks if an array of Objects is not empty or not {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is not empty or not <code>null</code>\n+     * @return {@code true} if the array is not empty or not {@code null}\n      * @since 2.5\n      */\n      public static <T> boolean isNotEmpty(T[] array) {\n      }\n \n     /**\n-     * <p>Checks if an array of primitive longs is not empty or not <code>null</code>.</p>\n+     * <p>Checks if an array of primitive longs is not empty or not {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is not empty or not <code>null</code>\n+     * @return {@code true} if the array is not empty or not {@code null}\n      * @since 2.5\n      */\n     public static boolean isNotEmpty(long[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive ints is not empty or not <code>null</code>.</p>\n+     * <p>Checks if an array of primitive ints is not empty or not {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is not empty or not <code>null</code>\n+     * @return {@code true} if the array is not empty or not {@code null}\n      * @since 2.5\n      */\n     public static boolean isNotEmpty(int[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive shorts is not empty or not <code>null</code>.</p>\n+     * <p>Checks if an array of primitive shorts is not empty or not {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is not empty or not <code>null</code>\n+     * @return {@code true} if the array is not empty or not {@code null}\n      * @since 2.5\n      */\n     public static boolean isNotEmpty(short[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive chars is not empty or not <code>null</code>.</p>\n+     * <p>Checks if an array of primitive chars is not empty or not {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is not empty or not <code>null</code>\n+     * @return {@code true} if the array is not empty or not {@code null}\n      * @since 2.5\n      */\n     public static boolean isNotEmpty(char[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive bytes is not empty or not <code>null</code>.</p>\n+     * <p>Checks if an array of primitive bytes is not empty or not {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is not empty or not <code>null</code>\n+     * @return {@code true} if the array is not empty or not {@code null}\n      * @since 2.5\n      */\n     public static boolean isNotEmpty(byte[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive doubles is not empty or not <code>null</code>.</p>\n+     * <p>Checks if an array of primitive doubles is not empty or not {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is not empty or not <code>null</code>\n+     * @return {@code true} if the array is not empty or not {@code null}\n      * @since 2.5\n      */\n     public static boolean isNotEmpty(double[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive floats is not empty or not <code>null</code>.</p>\n+     * <p>Checks if an array of primitive floats is not empty or not {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is not empty or not <code>null</code>\n+     * @return {@code true} if the array is not empty or not {@code null}\n      * @since 2.5\n      */\n     public static boolean isNotEmpty(float[] array) {\n     }\n \n     /**\n-     * <p>Checks if an array of primitive booleans is not empty or not <code>null</code>.</p>\n+     * <p>Checks if an array of primitive booleans is not empty or not {@code null}.</p>\n      *\n      * @param array  the array to test\n-     * @return <code>true</code> if the array is not empty or not <code>null</code>\n+     * @return {@code true} if the array is not empty or not {@code null}\n      * @since 2.5\n      */\n     public static boolean isNotEmpty(boolean[] array) {\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n-     * <p>The new array contains all of the element of <code>array1</code> followed\n-     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * <p>The new array contains all of the element of {@code array1} followed\n+     * by all of the elements {@code array2}. When an array is returned, it is always\n      * a new array.</p>\n      *\n      * <pre>\n      * ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n      * </pre>\n      *\n-     * @param array1  the first array whose elements are added to the new array, may be <code>null</code>\n-     * @param array2  the second array whose elements are added to the new array, may be <code>null</code>\n-     * @return The new array, <code>null</code> if both arrays are <code>null</code>.\n+     * @param array1  the first array whose elements are added to the new array, may be {@code null}\n+     * @param array2  the second array whose elements are added to the new array, may be {@code null}\n+     * @return The new array, {@code null} if both arrays are {@code null}.\n      *      The type of the new array is the type of the first array,\n      *      unless the first array is null, in which case the type is the same as the second array.\n      * @since 2.1\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n-     * <p>The new array contains all of the element of <code>array1</code> followed\n-     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * <p>The new array contains all of the element of {@code array1} followed\n+     * by all of the elements {@code array2}. When an array is returned, it is always\n      * a new array.</p>\n      *\n      * <pre>\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n-     * <p>The new array contains all of the element of <code>array1</code> followed\n-     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * <p>The new array contains all of the element of {@code array1} followed\n+     * by all of the elements {@code array2}. When an array is returned, it is always\n      * a new array.</p>\n      *\n      * <pre>\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n-     * <p>The new array contains all of the element of <code>array1</code> followed\n-     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * <p>The new array contains all of the element of {@code array1} followed\n+     * by all of the elements {@code array2}. When an array is returned, it is always\n      * a new array.</p>\n      *\n      * <pre>\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n-     * <p>The new array contains all of the element of <code>array1</code> followed\n-     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * <p>The new array contains all of the element of {@code array1} followed\n+     * by all of the elements {@code array2}. When an array is returned, it is always\n      * a new array.</p>\n      *\n      * <pre>\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n-     * <p>The new array contains all of the element of <code>array1</code> followed\n-     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * <p>The new array contains all of the element of {@code array1} followed\n+     * by all of the elements {@code array2}. When an array is returned, it is always\n      * a new array.</p>\n      *\n      * <pre>\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n-     * <p>The new array contains all of the element of <code>array1</code> followed\n-     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * <p>The new array contains all of the element of {@code array1} followed\n+     * by all of the elements {@code array2}. When an array is returned, it is always\n      * a new array.</p>\n      *\n      * <pre>\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n-     * <p>The new array contains all of the element of <code>array1</code> followed\n-     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * <p>The new array contains all of the element of {@code array1} followed\n+     * by all of the elements {@code array2}. When an array is returned, it is always\n      * a new array.</p>\n      *\n      * <pre>\n \n     /**\n      * <p>Adds all the elements of the given arrays into a new array.</p>\n-     * <p>The new array contains all of the element of <code>array1</code> followed\n-     * by all of the elements <code>array2</code>. When an array is returned, it is always\n+     * <p>The new array contains all of the element of {@code array1} followed\n+     * by all of the elements {@code array2}. When an array is returned, it is always\n      * a new array.</p>\n      *\n      * <pre>\n      * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element, unless the element itself is null,\n      *  in which case the return type is Object[]</p>\n      *\n      * ArrayUtils.add([\"a\", \"b\"], \"c\") = [\"a\", \"b\", \"c\"]\n      * </pre>\n      *\n-     * @param array  the array to \"add\" the element to, may be <code>null</code>\n-     * @param element  the object to add, may be <code>null</code>\n+     * @param array  the array to \"add\" the element to, may be {@code null}\n+     * @param element  the object to add, may be {@code null}\n      * @return A new array containing the existing elements plus the new element\n      * The returned array type will be that of the input array (unless null),\n      * in which case it will have the same type as the element.\n      * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([true, false], true) = [true, false, true]\n      * </pre>\n      *\n-     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param array  the array to copy and add the element to, may be {@code null}\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n      * </pre>\n      *\n-     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param array  the array to copy and add the element to, may be {@code null}\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add(['1', '0'], '1') = ['1', '0', '1']\n      * </pre>\n      *\n-     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param array  the array to copy and add the element to, may be {@code null}\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n      * </pre>\n      *\n-     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param array  the array to copy and add the element to, may be {@code null}\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n      * </pre>\n      *\n-     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param array  the array to copy and add the element to, may be {@code null}\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n      * </pre>\n      *\n-     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param array  the array to copy and add the element to, may be {@code null}\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n      * </pre>\n      *\n-     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param array  the array to copy and add the element to, may be {@code null}\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      * array plus the given element in the last position. The component type of\n      * the new array is the same as that of the input array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n      * </pre>\n      *\n-     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param array  the array to copy and add the element to, may be {@code null}\n      * @param element  the object to add at the last index of the new array\n      * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      * Returns a copy of the given array of size 1 greater than the argument.\n      * The last value of the array is left to the default value.\n      *\n-     * @param array The array to copy, must not be <code>null</code>.\n-     * @param newArrayComponentType If <code>array</code> is <code>null</code>, create a\n+     * @param array The array to copy, must not be {@code null}.\n+     * @param newArrayComponentType If {@code array} is {@code null}, create a\n      * size 1 array of this type.\n      * @return A new copy of the array of size 1 greater than the input.\n      */\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([\"a\", \"b\"], 3, \"c\") = [\"a\", \"b\", \"c\"]\n      * </pre>\n      *\n-     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param array  the array to add the element to, may be {@code null}\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([true, false], 1, true) = [true, true, false]\n      * </pre>\n      *\n-     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param array  the array to add the element to, may be {@code null}\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add(['a', 'b', 'c'], 1, 't') = ['a', 't', 'b', 'c']\n      * </pre>\n      *\n-     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param array  the array to add the element to, may be {@code null}\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n      * </pre>\n      *\n-     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param array  the array to add the element to, may be {@code null}\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n      * </pre>\n      *\n-     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param array  the array to add the element to, may be {@code null}\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([2, 6, 3], 2, 1)   = [2, 6, 1, 3]\n      * </pre>\n      *\n-     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param array  the array to add the element to, may be {@code null}\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([2L, 6L, 3L], 2, 1L)   = [2L, 6L, 1L, 3L]\n      * </pre>\n      *\n-     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param array  the array to add the element to, may be {@code null}\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([2.9f, 6.0f, 0.3f], 2, 1.0f)   = [2.9f, 6.0f, 1.0f, 0.3f]\n      * </pre>\n      *\n-     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param array  the array to add the element to, may be {@code null}\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     * <p>If the input array is {@code null}, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      *\n      * <pre>\n      * ArrayUtils.add([2.9, 6.0, 0.3], 2, 1.0)    = [2.9, 6.0, 1.0, 0.3]\n      * </pre>\n      *\n-     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param array  the array to add the element to, may be {@code null}\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @return A new array containing the existing elements and the new element\n      * The last parameter is the class, which may not equal element.getClass\n      * for primitives.\n      *\n-     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param array  the array to add the element to, may be {@code null}\n      * @param index  the position of the new object\n      * @param element  the object to add\n      * @param clss the type of the element being added\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n+     * <p>If the input array is {@code null}, an IndexOutOfBoundsException\n      * will be thrown, because in that case no valid index can be specified.</p>\n      *\n      * <pre>\n      * ArrayUtils.remove([\"a\", \"b\", \"c\"], 1) = [\"a\", \"c\"]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may not be <code>null</code>\n+     * @param array  the array to remove the element from, may not be {@code null}\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n      * @throws IndexOutOfBoundsException if the index is out of range\n-     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n+     * (index < 0 || index >= array.length), or if the array is {@code null}.\n      * @since 2.1\n      */\n     @SuppressWarnings(\"unchecked\") // remove() always creates an array of the same type as its input\n      * ArrayUtils.removeElement([\"a\", \"b\", \"a\"], \"a\") = [\"b\", \"a\"]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may be <code>null</code>\n+     * @param array  the array to remove the element from, may be {@code null}\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n      *         occurrence of the specified element.\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n+     * <p>If the input array is {@code null}, an IndexOutOfBoundsException\n      * will be thrown, because in that case no valid index can be specified.</p>\n      *\n      * <pre>\n      * ArrayUtils.remove([true, true, false], 1) = [true, false]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may not be <code>null</code>\n+     * @param array  the array to remove the element from, may not be {@code null}\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n      * @throws IndexOutOfBoundsException if the index is out of range\n-     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n+     * (index < 0 || index >= array.length), or if the array is {@code null}.\n      * @since 2.1\n      */\n     public static boolean[] remove(boolean[] array, int index) {\n      * ArrayUtils.removeElement([true, false, true], true) = [false, true]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may be <code>null</code>\n+     * @param array  the array to remove the element from, may be {@code null}\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n      *         occurrence of the specified element.\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n+     * <p>If the input array is {@code null}, an IndexOutOfBoundsException\n      * will be thrown, because in that case no valid index can be specified.</p>\n      *\n      * <pre>\n      * ArrayUtils.remove([1, 0, 1], 1)    = [1, 1]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may not be <code>null</code>\n+     * @param array  the array to remove the element from, may not be {@code null}\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n      * @throws IndexOutOfBoundsException if the index is out of range\n-     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n+     * (index < 0 || index >= array.length), or if the array is {@code null}.\n      * @since 2.1\n      */\n     public static byte[] remove(byte[] array, int index) {\n      * ArrayUtils.removeElement([1, 0, 1], 1)   = [0, 1]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may be <code>null</code>\n+     * @param array  the array to remove the element from, may be {@code null}\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n      *         occurrence of the specified element.\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n+     * <p>If the input array is {@code null}, an IndexOutOfBoundsException\n      * will be thrown, because in that case no valid index can be specified.</p>\n      *\n      * <pre>\n      * ArrayUtils.remove(['a', 'b', 'c'], 1) = ['a', 'c']\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may not be <code>null</code>\n+     * @param array  the array to remove the element from, may not be {@code null}\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n      * @throws IndexOutOfBoundsException if the index is out of range\n-     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n+     * (index < 0 || index >= array.length), or if the array is {@code null}.\n      * @since 2.1\n      */\n     public static char[] remove(char[] array, int index) {\n      * ArrayUtils.removeElement(['a', 'b', 'a'], 'a') = ['b', 'a']\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may be <code>null</code>\n+     * @param array  the array to remove the element from, may be {@code null}\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n      *         occurrence of the specified element.\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n+     * <p>If the input array is {@code null}, an IndexOutOfBoundsException\n      * will be thrown, because in that case no valid index can be specified.</p>\n      *\n      * <pre>\n      * ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may not be <code>null</code>\n+     * @param array  the array to remove the element from, may not be {@code null}\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n      * @throws IndexOutOfBoundsException if the index is out of range\n-     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n+     * (index < 0 || index >= array.length), or if the array is {@code null}.\n      * @since 2.1\n      */\n     public static double[] remove(double[] array, int index) {\n      * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may be <code>null</code>\n+     * @param array  the array to remove the element from, may be {@code null}\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n      *         occurrence of the specified element.\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n+     * <p>If the input array is {@code null}, an IndexOutOfBoundsException\n      * will be thrown, because in that case no valid index can be specified.</p>\n      *\n      * <pre>\n      * ArrayUtils.remove([2.5, 6.0, 3.8], 1) = [2.5, 3.8]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may not be <code>null</code>\n+     * @param array  the array to remove the element from, may not be {@code null}\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n      * @throws IndexOutOfBoundsException if the index is out of range\n-     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n+     * (index < 0 || index >= array.length), or if the array is {@code null}.\n      * @since 2.1\n      */\n     public static float[] remove(float[] array, int index) {\n      * ArrayUtils.removeElement([1.1, 2.3, 1.1], 1.1) = [2.3, 1.1]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may be <code>null</code>\n+     * @param array  the array to remove the element from, may be {@code null}\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n      *         occurrence of the specified element.\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n+     * <p>If the input array is {@code null}, an IndexOutOfBoundsException\n      * will be thrown, because in that case no valid index can be specified.</p>\n      *\n      * <pre>\n      * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may not be <code>null</code>\n+     * @param array  the array to remove the element from, may not be {@code null}\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n      * @throws IndexOutOfBoundsException if the index is out of range\n-     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n+     * (index < 0 || index >= array.length), or if the array is {@code null}.\n      * @since 2.1\n      */\n     public static int[] remove(int[] array, int index) {\n      * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may be <code>null</code>\n+     * @param array  the array to remove the element from, may be {@code null}\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n      *         occurrence of the specified element.\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n+     * <p>If the input array is {@code null}, an IndexOutOfBoundsException\n      * will be thrown, because in that case no valid index can be specified.</p>\n      *\n      * <pre>\n      * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may not be <code>null</code>\n+     * @param array  the array to remove the element from, may not be {@code null}\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n      * @throws IndexOutOfBoundsException if the index is out of range\n-     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n+     * (index < 0 || index >= array.length), or if the array is {@code null}.\n      * @since 2.1\n      */\n     public static long[] remove(long[] array, int index) {\n      * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may be <code>null</code>\n+     * @param array  the array to remove the element from, may be {@code null}\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n      *         occurrence of the specified element.\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n+     * <p>If the input array is {@code null}, an IndexOutOfBoundsException\n      * will be thrown, because in that case no valid index can be specified.</p>\n      *\n      * <pre>\n      * ArrayUtils.remove([2, 6, 3], 1)   = [2, 3]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may not be <code>null</code>\n+     * @param array  the array to remove the element from, may not be {@code null}\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n      * @throws IndexOutOfBoundsException if the index is out of range\n-     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n+     * (index < 0 || index >= array.length), or if the array is {@code null}.\n      * @since 2.1\n      */\n     public static short[] remove(short[] array, int index) {\n      * ArrayUtils.removeElement([1, 3, 1], 1) = [3, 1]\n      * </pre>\n      *\n-     * @param array  the array to remove the element from, may be <code>null</code>\n+     * @param array  the array to remove the element from, may be {@code null}\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first\n      *         occurrence of the specified element.\n      * type of the returned array is always the same as that of the input\n      * array.</p>\n      *\n-     * <p>If the input array is <code>null</code>, an IndexOutOfBoundsException\n+     * <p>If the input array is {@code null}, an IndexOutOfBoundsException\n      * will be thrown, because in that case no valid index can be specified.</p>\n      *\n-     * @param array  the array to remove the element from, may not be <code>null</code>\n+     * @param array  the array to remove the element from, may not be {@code null}\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      *         at the specified position.\n      * @throws IndexOutOfBoundsException if the index is out of range\n-     * (index < 0 || index >= array.length), or if the array is <code>null</code>.\n+     * (index < 0 || index >= array.length), or if the array is {@code null}.\n      * @since 2.1\n      */\n     private static Object remove(Object array, int index) {\n--- a/src/main/java/org/apache/commons/lang3/BitField.java\n+++ b/src/main/java/org/apache/commons/lang3/BitField.java\n      *\n      * @param holder the int data containing the bits we're interested\n      *  in\n-     * @return <code>true</code> if any of the bits are set,\n-     *  else <code>false</code>\n+     * @return {@code true} if any of the bits are set,\n+     *  else {@code false}\n      */\n     public boolean isSet(int holder) {\n         return (holder & _mask) != 0;\n      *\n      * <p>This is a stricter test than {@link #isSet(int)},\n      * in that all of the bits in a multi-bit set must be set\n-     * for this method to return <code>true</code>.</p>\n-     *\n-     * @param holder the int data containing the bits we're\n-     *  interested in\n-     * @return <code>true</code> if all of the bits are set,\n-     *  else <code>false</code>\n+     * for this method to return {@code true}.</p>\n+     *\n+     * @param holder the int data containing the bits we're\n+     *  interested in\n+     * @return {@code true} if all of the bits are set,\n+     *  else {@code false}\n      */\n     public boolean isAllSet(int holder) {\n         return (holder & _mask) == _mask;\n      * @param holder the int data containing the bits we're\n      *  interested in\n      * @return the value of holder with the specified bits cleared\n-     *  (set to <code>0</code>)\n+     *  (set to {@code 0})\n      */\n     public int clear(int holder) {\n         return holder & ~_mask;\n      * @param holder the short data containing the bits we're\n      *  interested in\n      * @return the value of holder with the specified bits cleared\n-     *  (set to <code>0</code>)\n+     *  (set to {@code 0})\n      */\n     public short clearShort(short holder) {\n         return (short) clear(holder);\n      *  interested in\n      *\n      * @return the value of holder with the specified bits cleared\n-     *  (set to <code>0</code>)\n+     *  (set to {@code 0})\n      */\n     public byte clearByte(byte holder) {\n         return (byte) clear(holder);\n      * @param holder the int data containing the bits we're\n      *  interested in\n      * @return the value of holder with the specified bits set\n-     *  to <code>1</code>\n+     *  to {@code 1}\n      */\n     public int set(int holder) {\n         return holder | _mask;\n      * @param holder the short data containing the bits we're\n      *  interested in\n      * @return the value of holder with the specified bits set\n-     *  to <code>1</code>\n+     *  to {@code 1}\n      */\n     public short setShort(short holder) {\n         return (short) set(holder);\n      *  interested in\n      *\n      * @return the value of holder with the specified bits set\n-     *  to <code>1</code>\n+     *  to {@code 1}\n      */\n     public byte setByte(byte holder) {\n         return (byte) set(holder);\n--- a/src/main/java/org/apache/commons/lang3/BooleanUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/BooleanUtils.java\n      *   BooleanUtils.xor(new boolean[] { true, false })  = true\n      * </pre>\n      *\n-     * @param array  an array of <code>boolean<code>s\n+     * @param array  an array of {@code boolean}s\n      * @return {@code true} if the xor is successful.\n      * @throws IllegalArgumentException if {@code array} is {@code null}\n      * @throws IllegalArgumentException if {@code array} is empty.\n      *   BooleanUtils.xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE })  = Boolean.TRUE\n      * </pre>\n      *\n-     * @param array  an array of <code>Boolean<code>s\n+     * @param array  an array of {@code Boolean}s\n      * @return {@code true} if the xor is successful.\n      * @throws IllegalArgumentException if {@code array} is {@code null}\n      * @throws IllegalArgumentException if {@code array} is empty.\n--- a/src/main/java/org/apache/commons/lang3/CharUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/CharUtils.java\n /**\n  * <p>Operations on char primitives and Character objects.</p>\n  *\n- * <p>This class tries to handle <code>null</code> input gracefully.\n- * An exception will not be thrown for a <code>null</code> input.\n+ * <p>This class tries to handle {@code null} input gracefully.\n+ * An exception will not be thrown for a {@code null} input.\n  * Each method documents its behaviour in more detail.</p>\n  * \n  * <p>#ThreadSafe#</p>\n     private static final Character[] CHAR_ARRAY = new Character[128];\n     \n     /**\n-     * <code>\\u000a</code> linefeed LF ('\\n').\n+     * {@code \\u000a} linefeed LF ('\\n').\n      * \n      * @see <a href=\"http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#101089\">JLF: Escape Sequences\n      *      for Character and String Literals</a>\n     public static final char LF = '\\n';\n \n     /**\n-     * <code>\\u000d</code> carriage return CR ('\\r').\n+     * {@code \\u000d} carriage return CR ('\\r').\n      * \n      * @see <a href=\"http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#101089\">JLF: Escape Sequences\n      *      for Character and String Literals</a>\n     }\n \n     /**\n-     * <p><code>CharUtils</code> instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>CharUtils.toString('c');</code>.</p>\n+     * <p>{@code CharUtils} instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as {@code CharUtils.toString('c');}.</p>\n      *\n      * <p>This constructor is public to permit tools that require a JavaBean instance\n      * to operate.</p>\n     \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Converts the Character to a char throwing an exception for <code>null</code>.</p>\n+     * <p>Converts the Character to a char throwing an exception for {@code null}.</p>\n      * \n      * <pre>\n      *   CharUtils.toChar(null) = IllegalArgumentException\n     }\n     \n     /**\n-     * <p>Converts the Character to a char handling <code>null</code>.</p>\n+     * <p>Converts the Character to a char handling {@code null}.</p>\n      * \n      * <pre>\n      *   CharUtils.toChar(null, 'X') = 'X'\n      * <p>For ASCII 7 bit characters, this uses a cache that will return the\n      * same String object each time.</p>\n      * \n-     * <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p>\n+     * <p>If {@code null} is passed in, {@code null} will be returned.</p>\n      *\n      * <pre>\n      *   CharUtils.toString(null) = null\n      * \n      * <p>This format is the Java source code format.</p>\n      * \n-     * <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p>\n+     * <p>If {@code null} is passed in, {@code null} will be returned.</p>\n      *\n      * <pre>\n      *   CharUtils.unicodeEscaped(null) = null\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n /**\n  * <p>Operates on classes without using reflection.</p>\n  *\n- * <p>This class handles invalid <code>null</code> inputs as best it can.\n+ * <p>This class handles invalid {@code null} inputs as best it can.\n  * Each method documents its behaviour in more detail.</p>\n  *\n- * <p>The notion of a <code>canonical name</code> includes the human\n- * readable name for the type, for example <code>int[]</code>. The\n+ * <p>The notion of a {@code canonical name} includes the human\n+ * readable name for the type, for example {@code int[]}. The\n  * non-canonical method variants work with the JVM names, such as\n- * <code>[I</code>. </p>\n+ * {@code [I}. </p>\n  *\n  * @author Apache Software Foundation\n  * @author Gary Gregory\n     public static final char PACKAGE_SEPARATOR_CHAR = '.';\n \n     /**\n-     * <p>The package separator String: <code>\"&#x2e;\"</code>.</p>\n+     * <p>The package separator String: {@code \"&#x2e;\"}.</p>\n      */\n     public static final String PACKAGE_SEPARATOR = String.valueOf(PACKAGE_SEPARATOR_CHAR);\n \n     public static final char INNER_CLASS_SEPARATOR_CHAR = '$';\n \n     /**\n-     * <p>The inner class separator String: <code>\"$\"</code>.</p>\n+     * <p>The inner class separator String: {@code \"$\"}.</p>\n      */\n     public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);\n \n     /**\n-     * Maps primitive <code>Class</code>es to their corresponding wrapper <code>Class</code>.\n+     * Maps primitive {@code Class}es to their corresponding wrapper {@code Class}.\n      */\n     private static final Map<Class<?>, Class<?>> primitiveWrapperMap = new HashMap<Class<?>, Class<?>>();\n     static {\n     }\n \n     /**\n-     * Maps wrapper <code>Class</code>es to their corresponding primitive types.\n+     * Maps wrapper {@code Class}es to their corresponding primitive types.\n      */\n     private static final Map<Class<?>, Class<?>> wrapperPrimitiveMap = new HashMap<Class<?>, Class<?>>();\n     static {\n     /**\n      * <p>ClassUtils instances should NOT be constructed in standard programming.\n      * Instead, the class should be used as\n-     * <code>ClassUtils.getShortClassName(cls)</code>.</p>\n+     * {@code ClassUtils.getShortClassName(cls)}.</p>\n      *\n      * <p>This constructor is public to permit tools that require a JavaBean\n      * instance to operate.</p>\n     // Short class name\n     // ----------------------------------------------------------------------\n     /**\n-     * <p>Gets the class name minus the package name for an <code>Object</code>.</p>\n+     * <p>Gets the class name minus the package name for an {@code Object}.</p>\n      *\n      * @param object  the class to get the short name for, may be null\n      * @param valueIfNull  the value to return if null\n     }\n \n     /**\n-     * <p>Gets the class name minus the package name from a <code>Class</code>.</p>\n+     * <p>Gets the class name minus the package name from a {@code Class}.</p>\n      *\n      * @param cls  the class to get the short name for.\n      * @return the class name without the package name or an empty string\n     // Package name\n     // ----------------------------------------------------------------------\n     /**\n-     * <p>Gets the package name of an <code>Object</code>.</p>\n+     * <p>Gets the package name of an {@code Object}.</p>\n      *\n      * @param object  the class to get the package name for, may be null\n      * @param valueIfNull  the value to return if null\n     }\n \n     /**\n-     * <p>Gets the package name of a <code>Class</code>.</p>\n-     *\n-     * @param cls  the class to get the package name for, may be <code>null</code>.\n+     * <p>Gets the package name of a {@code Class}.</p>\n+     *\n+     * @param cls  the class to get the package name for, may be {@code null}.\n      * @return the package name or an empty string\n      */\n     public static String getPackageName(Class<?> cls) {\n     }\n \n     /**\n-     * <p>Gets the package name from a <code>String</code>.</p>\n+     * <p>Gets the package name from a {@code String}.</p>\n      *\n      * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n      * <p>If the class is unpackaged, return an empty string.</p>\n      *\n-     * @param className  the className to get the package name for, may be <code>null</code>\n+     * @param className  the className to get the package name for, may be {@code null}\n      * @return the package name or an empty string\n      */\n     public static String getPackageName(String className) {\n     // Superclasses/Superinterfaces\n     // ----------------------------------------------------------------------\n     /**\n-     * <p>Gets a <code>List</code> of superclasses for the given class.</p>\n-     *\n-     * @param cls  the class to look up, may be <code>null</code>\n-     * @return the <code>List</code> of superclasses in order going up from this one\n-     *  <code>null</code> if null input\n+     * <p>Gets a {@code List} of superclasses for the given class.</p>\n+     *\n+     * @param cls  the class to look up, may be {@code null}\n+     * @return the {@code List} of superclasses in order going up from this one\n+     *  {@code null} if null input\n      */\n     public static List<Class<?>> getAllSuperclasses(Class<?> cls) {\n         if (cls == null) {\n     }\n \n     /**\n-     * <p>Gets a <code>List</code> of all interfaces implemented by the given\n+     * <p>Gets a {@code List} of all interfaces implemented by the given\n      * class and its superclasses.</p>\n      *\n      * <p>The order is determined by looking through each interface in turn as\n      * superclass is considered in the same way. Later duplicates are ignored,\n      * so the order is maintained.</p>\n      *\n-     * @param cls  the class to look up, may be <code>null</code>\n-     * @return the <code>List</code> of interfaces in order,\n-     *  <code>null</code> if null input\n+     * @param cls  the class to look up, may be {@code null}\n+     * @return the {@code List} of interfaces in order,\n+     *  {@code null} if null input\n      */\n     public static List<Class<?>> getAllInterfaces(Class<?> cls) {\n         if (cls == null) {\n     /**\n      * Get the interfaces for the specified class.\n      *\n-     * @param cls  the class to look up, may be <code>null</code>\n-     * @param interfacesFound the <code>Set</code> of interfaces for the class\n+     * @param cls  the class to look up, may be {@code null}\n+     * @param interfacesFound the {@code Set} of interfaces for the class\n      */\n     private static void getAllInterfaces(Class<?> cls, HashSet<Class<?>> interfacesFound) {\n         while (cls != null) {\n     // Convert list\n     // ----------------------------------------------------------------------\n     /**\n-     * <p>Given a <code>List</code> of class names, this method converts them into classes.</p>\n-     *\n-     * <p>A new <code>List</code> is returned. If the class name cannot be found, <code>null</code>\n-     * is stored in the <code>List</code>. If the class name in the <code>List</code> is\n-     * <code>null</code>, <code>null</code> is stored in the output <code>List</code>.</p>\n+     * <p>Given a {@code List} of class names, this method converts them into classes.</p>\n+     *\n+     * <p>A new {@code List} is returned. If the class name cannot be found, {@code null}\n+     * is stored in the {@code List}. If the class name in the {@code List} is\n+     * {@code null}, {@code null} is stored in the output {@code List}.</p>\n      *\n      * @param classNames  the classNames to change\n-     * @return a <code>List</code> of Class objects corresponding to the class names,\n-     *  <code>null</code> if null input\n+     * @return a {@code List} of Class objects corresponding to the class names,\n+     *  {@code null} if null input\n      * @throws ClassCastException if classNames contains a non String entry\n      */\n     public static List<Class<?>> convertClassNamesToClasses(List<String> classNames) {\n     }\n \n     /**\n-     * <p>Given a <code>List</code> of <code>Class</code> objects, this method converts\n+     * <p>Given a {@code List} of {@code Class} objects, this method converts\n      * them into class names.</p>\n      *\n-     * <p>A new <code>List</code> is returned. <code>null</code> objects will be copied into\n-     * the returned list as <code>null</code>.</p>\n+     * <p>A new {@code List} is returned. {@code null} objects will be copied into\n+     * the returned list as {@code null}.</p>\n      *\n      * @param classes  the classes to change\n-     * @return a <code>List</code> of class names corresponding to the Class objects,\n-     *  <code>null</code> if null input\n-     * @throws ClassCastException if <code>classes</code> contains a non-<code>Class</code> entry\n+     * @return a {@code List} of class names corresponding to the Class objects,\n+     *  {@code null} if null input\n+     * @throws ClassCastException if {@code classes} contains a non-{@code Class} entry\n      */\n     public static List<String> convertClassesToClassNames(List<Class<?>> classes) {\n         if (classes == null) {\n      *\n      * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this\n      * method takes into account widenings of primitive classes and\n-     * <code>null</code>s.</p>\n-     *\n-     * <p>Primitive widenings allow an int to be assigned to a <code>long</code>,\n-     * <code>float</code> or <code>double</code>. This method returns the correct\n+     * {@code null}s.</p>\n+     *\n+     * <p>Primitive widenings allow an int to be assigned to a {@code long},\n+     * {@code float} or {@code double}. This method returns the correct\n      * result for these cases.</p>\n      *\n-     * <p><code>Null</code> may be assigned to any reference type. This method will\n-     * return <code>true</code> if <code>null</code> is passed in and the toClass is\n+     * <p>{@code Null} may be assigned to any reference type. This method will\n+     * return {@code true} if {@code null} is passed in and the toClass is\n      * non-primitive.</p>\n      *\n      * <p>Specifically, this method tests whether the type represented by the\n-     * specified <code>Class</code> parameter can be converted to the type\n-     * represented by this <code>Class</code> object via an identity conversion\n+     * specified {@code Class} parameter can be converted to the type\n+     * represented by this {@code Class} object via an identity conversion\n      * widening primitive or widening reference conversion. See\n      * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n      * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      * to the running Java version</em>; i.e. autoboxing will be the default\n      * behavior in VMs running Java versions >= 1.5.</p>\n      *\n-     * @param classArray  the array of Classes to check, may be <code>null</code>\n-     * @param toClassArray  the array of Classes to try to assign into, may be <code>null</code>\n-     * @return <code>true</code> if assignment possible\n+     * @param classArray  the array of Classes to check, may be {@code null}\n+     * @param toClassArray  the array of Classes to try to assign into, may be {@code null}\n+     * @return {@code true} if assignment possible\n      */\n     public static boolean isAssignable(Class<?>[] classArray, Class<?>[] toClassArray) {\n         return isAssignable(classArray, toClassArray, SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\n      *\n      * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this\n      * method takes into account widenings of primitive classes and\n-     * <code>null</code>s.</p>\n-     *\n-     * <p>Primitive widenings allow an int to be assigned to a <code>long</code>,\n-     * <code>float</code> or <code>double</code>. This method returns the correct\n+     * {@code null}s.</p>\n+     *\n+     * <p>Primitive widenings allow an int to be assigned to a {@code long},\n+     * {@code float} or {@code double}. This method returns the correct\n      * result for these cases.</p>\n      *\n-     * <p><code>Null</code> may be assigned to any reference type. This method will\n-     * return <code>true</code> if <code>null</code> is passed in and the toClass is\n+     * <p>{@code Null} may be assigned to any reference type. This method will\n+     * return {@code true} if {@code null} is passed in and the toClass is\n      * non-primitive.</p>\n      *\n      * <p>Specifically, this method tests whether the type represented by the\n-     * specified <code>Class</code> parameter can be converted to the type\n-     * represented by this <code>Class</code> object via an identity conversion\n+     * specified {@code Class} parameter can be converted to the type\n+     * represented by this {@code Class} object via an identity conversion\n      * widening primitive or widening reference conversion. See\n      * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n      * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      *\n-     * @param classArray  the array of Classes to check, may be <code>null</code>\n-     * @param toClassArray  the array of Classes to try to assign into, may be <code>null</code>\n+     * @param classArray  the array of Classes to check, may be {@code null}\n+     * @param toClassArray  the array of Classes to try to assign into, may be {@code null}\n      * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers\n-     * @return <code>true</code> if assignment possible\n+     * @return {@code true} if assignment possible\n      */\n     public static boolean isAssignable(Class<?>[] classArray, Class<?>[] toClassArray, boolean autoboxing) {\n         if (ArrayUtils.isSameLength(classArray, toClassArray) == false) {\n     }\n \n     /**\n-     * <p>Checks if one <code>Class</code> can be assigned to a variable of\n-     * another <code>Class</code>.</p>\n+     * <p>Checks if one {@code Class} can be assigned to a variable of\n+     * another {@code Class}.</p>\n      *\n      * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,\n      * this method takes into account widenings of primitive classes and\n-     * <code>null</code>s.</p>\n+     * {@code null}s.</p>\n      *\n      * <p>Primitive widenings allow an int to be assigned to a long, float or\n      * double. This method returns the correct result for these cases.</p>\n      *\n-     * <p><code>Null</code> may be assigned to any reference type. This method\n-     * will return <code>true</code> if <code>null</code> is passed in and the\n+     * <p>{@code Null} may be assigned to any reference type. This method\n+     * will return {@code true} if {@code null} is passed in and the\n      * toClass is non-primitive.</p>\n      *\n      * <p>Specifically, this method tests whether the type represented by the\n-     * specified <code>Class</code> parameter can be converted to the type\n-     * represented by this <code>Class</code> object via an identity conversion\n+     * specified {@code Class} parameter can be converted to the type\n+     * represented by this {@code Class} object via an identity conversion\n      * widening primitive or widening reference conversion. See\n      * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n      * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      *\n      * @param cls  the Class to check, may be null\n      * @param toClass  the Class to try to assign into, returns false if null\n-     * @return <code>true</code> if assignment possible\n+     * @return {@code true} if assignment possible\n      */\n     public static boolean isAssignable(Class<?> cls, Class<?> toClass) {\n         return isAssignable(cls, toClass, SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_5));\n     }\n \n     /**\n-     * <p>Checks if one <code>Class</code> can be assigned to a variable of\n-     * another <code>Class</code>.</p>\n+     * <p>Checks if one {@code Class} can be assigned to a variable of\n+     * another {@code Class}.</p>\n      *\n      * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,\n      * this method takes into account widenings of primitive classes and\n-     * <code>null</code>s.</p>\n+     * {@code null}s.</p>\n      *\n      * <p>Primitive widenings allow an int to be assigned to a long, float or\n      * double. This method returns the correct result for these cases.</p>\n      *\n-     * <p><code>Null</code> may be assigned to any reference type. This method\n-     * will return <code>true</code> if <code>null</code> is passed in and the\n+     * <p>{@code Null} may be assigned to any reference type. This method\n+     * will return {@code true} if {@code null} is passed in and the\n      * toClass is non-primitive.</p>\n      *\n      * <p>Specifically, this method tests whether the type represented by the\n-     * specified <code>Class</code> parameter can be converted to the type\n-     * represented by this <code>Class</code> object via an identity conversion\n+     * specified {@code Class} parameter can be converted to the type\n+     * represented by this {@code Class} object via an identity conversion\n      * widening primitive or widening reference conversion. See\n      * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n      * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      * @param cls  the Class to check, may be null\n      * @param toClass  the Class to try to assign into, returns false if null\n      * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers\n-     * @return <code>true</code> if assignment possible\n+     * @return {@code true} if assignment possible\n      */\n     public static boolean isAssignable(Class<?> cls, Class<?> toClass, boolean autoboxing) {\n         if (toClass == null) {\n      * <p>Converts the specified primitive Class object to its corresponding\n      * wrapper Class object.</p>\n      *\n-     * <p>NOTE: From v2.2, this method handles <code>Void.TYPE</code>,\n-     * returning <code>Void.TYPE</code>.</p>\n+     * <p>NOTE: From v2.2, this method handles {@code Void.TYPE},\n+     * returning {@code Void.TYPE}.</p>\n      *\n      * @param cls  the class to convert, may be null\n-     * @return the wrapper class for <code>cls</code> or <code>cls</code> if\n-     * <code>cls</code> is not a primitive. <code>null</code> if null input.\n+     * @return the wrapper class for {@code cls} or {@code cls} if\n+     * {@code cls} is not a primitive. {@code null} if null input.\n      * @since 2.1\n      */\n     public static Class<?> primitiveToWrapper(Class<?> cls) {\n      *\n      * @param classes  the class array to convert, may be null or empty\n      * @return an array which contains for each given class, the wrapper class or\n-     * the original class if class is not a primitive. <code>null</code> if null input.\n+     * the original class if class is not a primitive. {@code null} if null input.\n      * Empty array if an empty array passed in.\n      * @since 2.1\n      */\n      * <p>Converts the specified wrapper class to its corresponding primitive\n      * class.</p>\n      *\n-     * <p>This method is the counter part of <code>primitiveToWrapper()</code>.\n+     * <p>This method is the counter part of {@code primitiveToWrapper()}.\n      * If the passed in class is a wrapper class for a primitive type, this\n-     * primitive type will be returned (e.g. <code>Integer.TYPE</code> for\n-     * <code>Integer.class</code>). For other classes, or if the parameter is\n+     * primitive type will be returned (e.g. {@code Integer.TYPE} for\n+     * {@code Integer.class}). For other classes, or if the parameter is\n      * <b>null</b>, the return value is <b>null</b>.</p>\n      *\n      * @param cls the class to convert, may be <b>null</b>\n-     * @return the corresponding primitive type if <code>cls</code> is a\n+     * @return the corresponding primitive type if {@code cls} is a\n      * wrapper class, <b>null</b> otherwise\n      * @see #primitiveToWrapper(Class)\n      * @since 2.4\n      * <p>Converts the specified array of wrapper Class objects to an array of\n      * its corresponding primitive Class objects.</p>\n      *\n-     * <p>This method invokes <code>wrapperToPrimitive()</code> for each element\n+     * <p>This method invokes {@code wrapperToPrimitive()} for each element\n      * of the passed in array.</p>\n      *\n      * @param classes  the class array to convert, may be null or empty\n      * @return an array which contains for each given class, the primitive class or\n-     * <b>null</b> if the original class is not a wrapper class. <code>null</code> if null input.\n+     * <b>null</b> if the original class is not a wrapper class. {@code null} if null input.\n      * Empty array if an empty array passed in.\n      * @see #wrapperToPrimitive(Class)\n      * @since 2.4\n      * <p>Is the specified class an inner class or static nested class.</p>\n      *\n      * @param cls  the class to check, may be null\n-     * @return <code>true</code> if the class is an inner or static nested class,\n-     *  false if not or <code>null</code>\n+     * @return {@code true} if the class is an inner or static nested class,\n+     *  false if not or {@code null}\n      */\n     public static boolean isInnerClass(Class<?> cls) {\n         return cls != null && cls.getEnclosingClass() != null;\n     // Class loading\n     // ----------------------------------------------------------------------\n     /**\n-     * Returns the class represented by <code>className</code> using the\n-     * <code>classLoader</code>.  This implementation supports the syntaxes\n-     * \"<code>java.util.Map.Entry[]</code>\", \"<code>java.util.Map$Entry[]</code>\",\n-     * \"<code>[Ljava.util.Map.Entry;</code>\", and \"<code>[Ljava.util.Map$Entry;</code>\".\n+     * Returns the class represented by {@code className} using the\n+     * {@code classLoader}.  This implementation supports the syntaxes\n+     * \"{@code java.util.Map.Entry[]}\", \"{@code java.util.Map$Entry[]}\",\n+     * \"{@code [Ljava.util.Map.Entry;}\", and \"{@code [Ljava.util.Map$Entry;}\".\n      *\n      * @param classLoader  the class loader to use to load the class\n      * @param className  the class name\n      * @param initialize  whether the class must be initialized\n-     * @return the class represented by <code>className</code> using the <code>classLoader</code>\n+     * @return the class represented by {@code className} using the {@code classLoader}\n      * @throws ClassNotFoundException if the class is not found\n      */\n     public static Class<?> getClass(\n     }\n \n     /**\n-     * Returns the (initialized) class represented by <code>className</code>\n-     * using the <code>classLoader</code>.  This implementation supports\n-     * the syntaxes \"<code>java.util.Map.Entry[]</code>\",\n-     * \"<code>java.util.Map$Entry[]</code>\", \"<code>[Ljava.util.Map.Entry;</code>\",\n-     * and \"<code>[Ljava.util.Map$Entry;</code>\".\n+     * Returns the (initialized) class represented by {@code className}\n+     * using the {@code classLoader}.  This implementation supports\n+     * the syntaxes \"{@code java.util.Map.Entry[]}\",\n+     * \"{@code java.util.Map$Entry[]}\", \"{@code [Ljava.util.Map.Entry;}\",\n+     * and \"{@code [Ljava.util.Map$Entry;}\".\n      *\n      * @param classLoader  the class loader to use to load the class\n      * @param className  the class name\n-     * @return the class represented by <code>className</code> using the <code>classLoader</code>\n+     * @return the class represented by {@code className} using the {@code classLoader}\n      * @throws ClassNotFoundException if the class is not found\n      */\n     public static Class<?> getClass(ClassLoader classLoader, String className) throws ClassNotFoundException {\n     }\n \n     /**\n-     * Returns the (initialized) class represented by <code>className</code>\n+     * Returns the (initialized) class represented by {@code className}\n      * using the current thread's context class loader. This implementation\n-     * supports the syntaxes \"<code>java.util.Map.Entry[]</code>\",\n-     * \"<code>java.util.Map$Entry[]</code>\", \"<code>[Ljava.util.Map.Entry;</code>\",\n-     * and \"<code>[Ljava.util.Map$Entry;</code>\".\n+     * supports the syntaxes \"{@code java.util.Map.Entry[]}\",\n+     * \"{@code java.util.Map$Entry[]}\", \"{@code [Ljava.util.Map.Entry;}\",\n+     * and \"{@code [Ljava.util.Map$Entry;}\".\n      *\n      * @param className  the class name\n-     * @return the class represented by <code>className</code> using the current thread's context class loader\n+     * @return the class represented by {@code className} using the current thread's context class loader\n      * @throws ClassNotFoundException if the class is not found\n      */\n     public static Class<?> getClass(String className) throws ClassNotFoundException {\n     }\n \n     /**\n-     * Returns the class represented by <code>className</code> using the\n+     * Returns the class represented by {@code className} using the\n      * current thread's context class loader. This implementation supports the\n-     * syntaxes \"<code>java.util.Map.Entry[]</code>\", \"<code>java.util.Map$Entry[]</code>\",\n-     * \"<code>[Ljava.util.Map.Entry;</code>\", and \"<code>[Ljava.util.Map$Entry;</code>\".\n+     * syntaxes \"{@code java.util.Map.Entry[]}\", \"{@code java.util.Map$Entry[]}\",\n+     * \"{@code [Ljava.util.Map.Entry;}\", and \"{@code [Ljava.util.Map$Entry;}\".\n      *\n      * @param className  the class name\n      * @param initialize  whether the class must be initialized\n-     * @return the class represented by <code>className</code> using the current thread's context class loader\n+     * @return the class represented by {@code className} using the current thread's context class loader\n      * @throws ClassNotFoundException if the class is not found\n      */\n     public static Class<?> getClass(String className, boolean initialize) throws ClassNotFoundException {\n     // Public method\n     // ----------------------------------------------------------------------\n     /**\n-     * <p>Returns the desired Method much like <code>Class.getMethod</code>, however\n+     * <p>Returns the desired Method much like {@code Class.getMethod}, however\n      * it ensures that the returned Method is from a public class or interface and not\n      * from an anonymous inner class. This means that the Method is invokable and\n      * doesn't fall foul of Java bug\n     }\n \n     /**\n-     * <p>Converts an array of <code>Object</code> in to an array of <code>Class</code> objects.\n+     * <p>Converts an array of {@code Object} in to an array of {@code Class} objects.\n      * If any of these objects is null, a null element will be inserted into the array.</p>\n      *\n-     * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n-     *\n-     * @param array an <code>Object</code> array\n-     * @return a <code>Class</code> array, <code>null</code> if null array input\n+     * <p>This method returns {@code null} for a {@code null} input array.</p>\n+     *\n+     * @param array an {@code Object} array\n+     * @return a {@code Class} array, {@code null} if null array input\n      * @since 2.4\n      */\n     public static Class<?>[] toClass(Object[] array) {\n     // Short canonical name\n     // ----------------------------------------------------------------------\n     /**\n-     * <p>Gets the canonical name minus the package name for an <code>Object</code>.</p>\n+     * <p>Gets the canonical name minus the package name for an {@code Object}.</p>\n      *\n      * @param object  the class to get the short name for, may be null\n      * @param valueIfNull  the value to return if null\n     }\n \n     /**\n-     * <p>Gets the canonical name minus the package name from a <code>Class</code>.</p>\n+     * <p>Gets the canonical name minus the package name from a {@code Class}.</p>\n      *\n      * @param cls  the class to get the short name for.\n      * @return the canonical name without the package name or an empty string\n     // Package name\n     // ----------------------------------------------------------------------\n     /**\n-     * <p>Gets the package name from the canonical name of an <code>Object</code>.</p>\n+     * <p>Gets the package name from the canonical name of an {@code Object}.</p>\n      *\n      * @param object  the class to get the package name for, may be null\n      * @param valueIfNull  the value to return if null\n     }\n \n     /**\n-     * <p>Gets the package name from the canonical name of a <code>Class</code>.</p>\n-     *\n-     * @param cls  the class to get the package name for, may be <code>null</code>.\n+     * <p>Gets the package name from the canonical name of a {@code Class}.</p>\n+     *\n+     * @param cls  the class to get the package name for, may be {@code null}.\n      * @return the package name or an empty string\n      * @since 2.4\n      */\n      * <p>The string passed in is assumed to be a canonical name - it is not checked.</p>\n      * <p>If the class is unpackaged, return an empty string.</p>\n      *\n-     * @param canonicalName  the canonical name to get the package name for, may be <code>null</code>\n+     * @param canonicalName  the canonical name to get the package name for, may be {@code null}\n      * @return the package name or an empty string\n      * @since 2.4\n      */\n      * unchanged name.</p>\n      * <p>Example:\n      * <ul>\n-     * <li><code>getCanonicalName(\"[I\") = \"int[]\"</code></li>\n-     * <li><code>getCanonicalName(\"[Ljava.lang.String;\") = \"java.lang.String[]\"</code></li>\n-     * <li><code>getCanonicalName(\"java.lang.String\") = \"java.lang.String\"</code></li>\n+     * <li>{@code getCanonicalName(\"[I\") = \"int[]\"}</li>\n+     * <li>{@code getCanonicalName(\"[Ljava.lang.String;\") = \"java.lang.String[]\"}</li>\n+     * <li>{@code getCanonicalName(\"java.lang.String\") = \"java.lang.String\"}</li>\n      * </ul>\n      * </p>\n      *\n--- a/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/LocaleUtils.java\n /**\n  * <p>Operations to assist when working with a {@link Locale}.</p>\n  *\n- * <p>This class tries to handle <code>null</code> input gracefully.\n- * An exception will not be thrown for a <code>null</code> input.\n+ * <p>This class tries to handle {@code null} input gracefully.\n+ * An exception will not be thrown for a {@code null} input.\n  * Each method documents its behaviour in more detail.</p>\n  *\n  * @author Apache Software Foundation\n         new ConcurrentHashMap<String, List<Locale>>();\n \n     /**\n-     * <p><code>LocaleUtils</code> instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>LocaleUtils.toLocale(\"en_GB\");</code>.</p>\n+     * <p>{@code LocaleUtils} instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as {@code LocaleUtils.toLocale(\"en_GB\");}.</p>\n      *\n      * <p>This constructor is public to permit tools that require a JavaBean instance\n      * to operate.</p>\n--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n package org.apache.commons.lang3;\n \n import java.util.Random;\n+\n /**\n- * <p>Operations for random <code>String</code>s.</p>\n+ * <p>Operations for random {@code String}s.</p>\n  * <p>Currently <em>private high surrogate</em> characters are ignored. \n  * These are unicode characters that fall between the values 56192 (db80)\n  * and 56319 (dbff) as we don't know how to handle them. \n     private static final Random RANDOM = new Random();\n \n     /**\n-     * <p><code>RandomStringUtils</code> instances should NOT be constructed in\n+     * <p>{@code RandomStringUtils} instances should NOT be constructed in\n      * standard programming. Instead, the class should be used as\n-     * <code>RandomStringUtils.random(5);</code>.</p>\n+     * {@code RandomStringUtils.random(5);}.</p>\n      *\n      * <p>This constructor is public to permit tools that require a JavaBean instance\n      * to operate.</p>\n      * specified.</p>\n      *\n      * <p>Characters will be chosen from the set of characters whose\n-     * ASCII value is between <code>32</code> and <code>126</code> (inclusive).</p>\n+     * ASCII value is between {@code 32} and {@code 126} (inclusive).</p>\n      *\n      * @param count  the length of random string to create\n      * @return the random string\n      * characters as indicated by the arguments.</p>\n      *\n      * @param count  the length of random string to create\n-     * @param letters  if <code>true</code>, generated string will include\n+     * @param letters  if {@code true}, generated string will include\n      *  alphabetic characters\n-     * @param numbers  if <code>true</code>, generated string will include\n+     * @param numbers  if {@code true}, generated string will include\n      *  numeric characters\n      * @return the random string\n      */\n      * @param count  the length of random string to create\n      * @param start  the position in set of chars to start at\n      * @param end  the position in set of chars to end before\n-     * @param letters  if <code>true</code>, generated string will include\n+     * @param letters  if {@code true}, generated string will include\n      *  alphabetic characters\n-     * @param numbers  if <code>true</code>, generated string will include\n+     * @param numbers  if {@code true}, generated string will include\n      *  numeric characters\n      * @return the random string\n      */\n      * @param letters  only allow letters?\n      * @param numbers  only allow numbers?\n      * @param chars  the set of chars to choose randoms from.\n-     *  If <code>null</code>, then it will use the set of all chars.\n+     *  If {@code null}, then it will use the set of all chars.\n      * @return the random string\n      * @throws ArrayIndexOutOfBoundsException if there are not\n-     *  <code>(end - start) + 1</code> characters in the set array.\n+     *  {@code (end - start) + 1} characters in the set array.\n      */\n     public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars) {\n         return random(count, start, end, letters, numbers, chars, RANDOM);\n      * <p>Creates a random string based on a variety of options, using\n      * supplied source of randomness.</p>\n      *\n-     * <p>If start and end are both <code>0</code>, start and end are set\n-     * to <code>' '</code> and <code>'z'</code>, the ASCII printable\n+     * <p>If start and end are both {@code 0}, start and end are set\n+     * to {@code ' '} and {@code 'z'}, the ASCII printable\n      * characters, will be used, unless letters and numbers are both\n-     * <code>false</code>, in which case, start and end are set to\n-     * <code>0</code> and <code>Integer.MAX_VALUE</code>.\n-     *\n-     * <p>If set is not <code>null</code>, characters between start and\n+     * {@code false}, in which case, start and end are set to\n+     * {@code 0} and {@code Integer.MAX_VALUE}.\n+     *\n+     * <p>If set is not {@code null}, characters between start and\n      * end are chosen.</p>\n      *\n      * <p>This method accepts a user-supplied {@link Random}\n      * @param letters  only allow letters?\n      * @param numbers  only allow numbers?\n      * @param chars  the set of chars to choose randoms from.\n-     *  If <code>null</code>, then it will use the set of all chars.\n+     *  If {@code null}, then it will use the set of all chars.\n      * @param random  a source of randomness.\n      * @return the random string\n      * @throws ArrayIndexOutOfBoundsException if there are not\n-     *  <code>(end - start) + 1</code> characters in the set array.\n-     * @throws IllegalArgumentException if <code>count</code> &lt; 0.\n+     *  {@code (end - start) + 1} characters in the set array.\n+     * @throws IllegalArgumentException if {@code count} &lt; 0.\n      * @since 2.0\n      */\n     public static String random(int count, int start, int end, boolean letters, boolean numbers,\n      * @param chars  the String containing the set of characters to use,\n      *  may be null\n      * @return the random string\n-     * @throws IllegalArgumentException if <code>count</code> &lt; 0.\n+     * @throws IllegalArgumentException if {@code count} &lt; 0.\n      */\n     public static String random(int count, String chars) {\n         if (chars == null) {\n      * @param chars  the character array containing the set of characters to use,\n      *  may be null\n      * @return the random string\n-     * @throws IllegalArgumentException if <code>count</code> &lt; 0.\n+     * @throws IllegalArgumentException if {@code count} &lt; 0.\n      */\n     public static String random(int count, char[] chars) {\n         if (chars == null) {\n--- a/src/main/java/org/apache/commons/lang3/Range.java\n+++ b/src/main/java/org/apache/commons/lang3/Range.java\n import java.util.Comparator;\n \n /**\n- * <p><code>Range</code> represents an immutable range of comparables of the same type.</p>\n- * <p>The objects need to either be implementations of <code>java.lang.Comparable</code>\n- * or you need to supply a <code>java.util.Comparator</code>. </p>\n+ * <p>{@code Range} represents an immutable range of comparables of the same type.</p>\n+ * <p>The objects need to either be implementations of {@code java.lang.Comparable}\n+ * or you need to supply a {@code java.util.Comparator}. </p>\n  * \n  * <p>#ThreadSafe# if the comparables are thread-safe</p>\n  * @author Apache Software Foundation\n     private transient String toString = null;\n \n     /**\n-     * <p>Constructs a new <code>Range</code> using the specified\n+     * <p>Constructs a new {@code Range} using the specified\n      * element as both the minimum and maximum in this range.</p>\n      * <p>The range uses the natural ordering of the elements to \n      * determine where values lie in the range.</p>\n      *\n-     * @param element  the value to use for this range, must not be <code>null</code>\n+     * @param element  the value to use for this range, must not be {@code null}\n      * @return the new range object\n-     * @throws IllegalArgumentException if the value is <code>null</code>\n+     * @throws IllegalArgumentException if the value is {@code null}\n      * @throws ClassCastException if the value is not Comparable\n      */\n     public static <T extends Comparable<T>> Range<T> is(T element) {\n     }\n \n     /**\n-     * <p>Constructs a new <code>Range</code> with the specified\n+     * <p>Constructs a new {@code Range} with the specified\n      * minimum and maximum values (both inclusive).</p>\n      * <p>The range uses the natural ordering of the elements to \n      * determine where values lie in the range.</p>\n      * @param element1  first value that defines the edge of the range, inclusive\n      * @param element2  second value that defines the edge of the range, inclusive\n      * @return the new range object\n-     * @throws IllegalArgumentException if either value is <code>null</code>\n+     * @throws IllegalArgumentException if either value is {@code null}\n      * @throws ClassCastException if either value is not Comparable\n      */\n     public static <T extends Comparable<T>> Range<T> between(T element1, T element2) {\n     }\n \n     /**\n-     * <p>Constructs a new <code>Range</code> using the specified\n+     * <p>Constructs a new {@code Range} using the specified\n      * element as both the minimum and maximum in this range.</p>\n-     * <p>The range uses the passed in <code>Comparator</code> to \n+     * <p>The range uses the passed in {@code Comparator} to \n      * determine where values lie in the range.</p>\n      *\n-     * @param element  the value to use for this range, must not be <code>null</code>\n+     * @param element  the value to use for this range, must not be {@code null}\n      * @param c comparator to be used\n      * @return the new range object\n-     * @throws IllegalArgumentException if the value is <code>null</code>\n+     * @throws IllegalArgumentException if the value is {@code null}\n      */\n     public static <T> Range<T> is(T element, Comparator<T> c) {\n         return new Range<T>(element, element, c);\n     }\n \n     /**\n-     * <p>Constructs a new <code>Range</code> with the specified\n+     * <p>Constructs a new {@code Range} with the specified\n      * minimum and maximum values (both inclusive).</p>\n-     * <p>The range uses the passed in <code>Comparator</code> to \n+     * <p>The range uses the passed in {@code Comparator} to \n      * determine where values lie in the range.</p>\n      *\n      * <p>The arguments may be passed in the order (min,max) or (max,min). The\n      * @param element2  second value that defines the edge of the range, inclusive\n      * @param c comparator to be used\n      * @return the new range object\n-     * @throws IllegalArgumentException if either value is <code>null</code>\n+     * @throws IllegalArgumentException if either value is {@code null}\n      */\n     public static <T> Range<T> between(T element1, T element2, Comparator<T> c) {\n         return new Range<T>(element1, element2, c);\n     /**\n      * <p>Tests whether the specified element occurs within this range.</p>\n      * \n-     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n-     *\n-     * @param element  the element to test, may be <code>null</code>\n-     * @return <code>true</code> if the specified element occurs within this range\n+     * <p>{@code null} is handled and returns {@code false}.</p>\n+     *\n+     * @param element  the element to test, may be {@code null}\n+     * @return {@code true} if the specified element occurs within this range\n      */\n     public boolean contains(T element) {\n         if(element == null) {\n     /**\n      * <p>Tests whether the specified element occurs before this range.</p>\n      *\n-     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n-     *\n-     * @param element  the element to test, may be <code>null</code>\n-     * @return <code>true</code> if the specified element occurs before this range\n+     * <p>{@code null} is handled and returns {@code false}.</p>\n+     *\n+     * @param element  the element to test, may be {@code null}\n+     * @return {@code true} if the specified element occurs before this range\n      */\n     public boolean elementBefore(T element) {\n         if (element == null) {\n     /**\n      * <p>Tests whether the specified element occurs after this range.</p>\n      *\n-     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n-     *\n-     * @param element  the element to test, may be <code>null</code>\n-     * @return <code>true</code> if the specified element occurs after this range\n+     * <p>{@code null} is handled and returns {@code false}.</p>\n+     *\n+     * @param element  the element to test, may be {@code null}\n+     * @return {@code true} if the specified element occurs after this range\n      */\n     public boolean elementAfter(T element) {\n         if (element == null) {\n \n     /**\n      * <p>Tests where the specified element occurs relative to this range.</p>\n-     * <p>The API is reminiscent of the Comparable interface returning <code>-1</code> if \n-     * the element is before the range, <code>0</code> if contained within the range and \n-     * <code>1</code> if the element is after the range. </p>\n+     * <p>The API is reminiscent of the Comparable interface returning {@code -1} if \n+     * the element is before the range, {@code 0} if contained within the range and \n+     * {@code 1} if the element is after the range. </p>\n      *\n      * @param element  the element to test\n      * @return -1, 0 or +1 depending on the element's location relative to the range\n     /**\n      * <p>Tests whether the specified range occurs entirely within this range.</p>\n      * \n-     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n-     * \n-     * @param range  the range to test, may be <code>null</code>\n-     * @return <code>true</code> if the specified range occurs entirely within\n-     *  this range; otherwise, <code>false</code>\n-     * @throws IllegalArgumentException if the <code>Range</code> cannot be compared\n+     * <p>{@code null} is handled and returns {@code false}.</p>\n+     * \n+     * @param range  the range to test, may be {@code null}\n+     * @return {@code true} if the specified range occurs entirely within\n+     *  this range; otherwise, {@code false}\n+     * @throws IllegalArgumentException if the {@code Range} cannot be compared\n      */\n     public boolean containsAll(Range<T> range) {\n         if (range == null) {\n     /**\n      * <p>Tests whether the specified range overlaps with this range.</p>\n      * \n-     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n-     * \n-     * @param range  the range to test, may be <code>null</code>\n-     * @return <code>true</code> if the specified range overlaps with this\n-     *  range; otherwise, <code>false</code>\n-     * @throws IllegalArgumentException if the <code>Range</code> cannot be compared\n+     * <p>{@code null} is handled and returns {@code false}.</p>\n+     * \n+     * @param range  the range to test, may be {@code null}\n+     * @return {@code true} if the specified range overlaps with this\n+     *  range; otherwise, {@code false}\n+     * @throws IllegalArgumentException if the {@code Range} cannot be compared\n      */\n     public boolean overlapsWith(Range<T> range) {\n         if (range == null) {\n      * <p>To be equal, the class, minimum and maximum must be equal.</p>\n      * \n      * @param obj the reference object with which to compare\n-     * @return <code>true</code> if this object is equal\n+     * @return {@code true} if this object is equal\n      */\n     @Override\n     public boolean equals(Object obj) {\n     }\n \n     /**\n-     * <p>Gets the range as a <code>String</code>.</p>\n+     * <p>Gets the range as a {@code String}.</p>\n      *\n      * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n      * \n-     * @return the <code>String</code> representation of this range\n+     * @return the {@code String} representation of this range\n      */\n     @Override\n     public String toString() {\n--- a/src/main/java/org/apache/commons/lang3/SerializationException.java\n+++ b/src/main/java/org/apache/commons/lang3/SerializationException.java\n     private static final long serialVersionUID = 4029025366392702726L;\n \n     /**\n-     * <p>Constructs a new <code>SerializationException</code> without specified\n+     * <p>Constructs a new {@code SerializationException} without specified\n      * detail message.</p>\n      */\n     public SerializationException() {\n     }\n \n     /**\n-     * <p>Constructs a new <code>SerializationException</code> with specified\n+     * <p>Constructs a new {@code SerializationException} with specified\n      * detail message.</p>\n      *\n      * @param msg  The error message.\n     }\n \n     /**\n-     * <p>Constructs a new <code>SerializationException</code> with specified\n-     * nested <code>Throwable</code>.</p>\n+     * <p>Constructs a new {@code SerializationException} with specified\n+     * nested {@code Throwable}.</p>\n      *\n-     * @param cause  The <code>Exception</code> or <code>Error</code>\n+     * @param cause  The {@code Exception} or {@code Error}\n      *  that caused this exception to be thrown.\n      */\n     public SerializationException(Throwable cause) {\n     }\n \n     /**\n-     * <p>Constructs a new <code>SerializationException</code> with specified\n-     * detail message and nested <code>Throwable</code>.</p>\n+     * <p>Constructs a new {@code SerializationException} with specified\n+     * detail message and nested {@code Throwable}.</p>\n      *\n      * @param msg    The error message.\n-     * @param cause  The <code>Exception</code> or <code>Error</code>\n+     * @param cause  The {@code Exception} or {@code Error}\n      *  that caused this exception to be thrown.\n      */\n     public SerializationException(String msg, Throwable cause) {\n--- a/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n  * <li>Deserialize managing finally and IOException\n  * </ul>\n  *\n- * <p>This class throws exceptions for invalid <code>null</code> inputs.\n+ * <p>This class throws exceptions for invalid {@code null} inputs.\n  * Each method documents its behaviour in more detail.</p>\n  *\n  * <p>#ThreadSafe#</p>\n     \n     /**\n      * <p>SerializationUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>SerializationUtils.clone(object)</code>.</p>\n+     * Instead, the class should be used as {@code SerializationUtils.clone(object)}.</p>\n      *\n      * <p>This constructor is public to permit tools that require a JavaBean instance\n      * to operate.</p>\n     // Clone\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Deep clone an <code>Object</code> using serialization.</p>\n+     * <p>Deep clone an {@code Object} using serialization.</p>\n      *\n      * <p>This is many times slower than writing clone methods by hand\n      * on all objects in your object graph. However, for complex object\n      * graphs, or for those that don't support deep cloning this can\n      * be a simple alternative implementation. Of course all the objects\n-     * must be <code>Serializable</code>.</p>\n+     * must be {@code Serializable}.</p>\n      * \n-     * @param object  the <code>Serializable</code> object to clone\n+     * @param object  the {@code Serializable} object to clone\n      * @return the cloned object\n      * @throws SerializationException (runtime) if the serialization fails\n      */\n     // Serialize\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Serializes an <code>Object</code> to the specified stream.</p>\n+     * <p>Serializes an {@code Object} to the specified stream.</p>\n      *\n      * <p>The stream will be closed once the object is written.\n      * This avoids the need for a finally clause, and maybe also exception\n      *\n      * @param obj  the object to serialize to bytes, may be null\n      * @param outputStream  the stream to write to, must not be null\n-     * @throws IllegalArgumentException if <code>outputStream</code> is <code>null</code>\n+     * @throws IllegalArgumentException if {@code outputStream} is {@code null}\n      * @throws SerializationException (runtime) if the serialization fails\n      */\n     public static void serialize(Serializable obj, OutputStream outputStream) {\n     }\n \n     /**\n-     * <p>Serializes an <code>Object</code> to a byte array for\n+     * <p>Serializes an {@code Object} to a byte array for\n      * storage/serialization.</p>\n      *\n      * @param obj  the object to serialize to bytes\n     // Deserialize\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Deserializes an <code>Object</code> from the specified stream.</p>\n+     * <p>Deserializes an {@code Object} from the specified stream.</p>\n      *\n      * <p>The stream will be closed once the object is written. This\n      * avoids the need for a finally clause, and maybe also exception\n      *\n      * @param inputStream  the serialized object input stream, must not be null\n      * @return the deserialized object\n-     * @throws IllegalArgumentException if <code>inputStream</code> is <code>null</code>\n+     * @throws IllegalArgumentException if {@code inputStream} is {@code null}\n      * @throws SerializationException (runtime) if the serialization fails\n      */\n     public static Object deserialize(InputStream inputStream) {\n     }\n \n     /**\n-     * <p>Deserializes a single <code>Object</code> from an array of bytes.</p>\n+     * <p>Deserializes a single {@code Object} from an array of bytes.</p>\n      *\n      * @param objectData  the serialized object, must not be null\n      * @return the deserialized object\n-     * @throws IllegalArgumentException if <code>objectData</code> is <code>null</code>\n+     * @throws IllegalArgumentException if {@code objectData} is {@code null}\n      * @throws SerializationException (runtime) if the serialization fails\n      */\n     public static Object deserialize(byte[] objectData) {\n--- a/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n import org.apache.commons.lang3.text.translate.UnicodeUnescaper;\n \n /**\n- * <p>Escapes and unescapes <code>String</code>s for\n+ * <p>Escapes and unescapes {@code String}s for\n  * Java, Java Script, HTML and XML.</p>\n  *\n  * <p>#ThreadSafe#</p>\n     /* Helper functions */\n \n     /**\n-     * <p><code>StringEscapeUtils</code> instances should NOT be constructed in\n+     * <p>{@code StringEscapeUtils} instances should NOT be constructed in\n      * standard programming.</p>\n      *\n      * <p>Instead, the class should be used as:\n     // Java and JavaScript\n     //--------------------------------------------------------------------------\n     /**\n-     * <p>Escapes the characters in a <code>String</code> using Java String rules.</p>\n+     * <p>Escapes the characters in a {@code String} using Java String rules.</p>\n      *\n      * <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n      *\n-     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n-     * <code>'t'</code>.</p>\n+     * <p>So a tab becomes the characters {@code '\\\\'} and\n+     * {@code 't'}.</p>\n      *\n      * <p>The only difference between Java strings and JavaScript strings\n      * is that in JavaScript, a single quote and forward-slash (/) are escaped.</p>\n      * </p>\n      *\n      * @param input  String to escape values in, may be null\n-     * @return String with escaped values, <code>null</code> if null string input\n+     * @return String with escaped values, {@code null} if null string input\n      */\n     public static final String escapeJava(String input) {\n         return ESCAPE_JAVA.translate(input);\n     }\n \n     /**\n-     * <p>Escapes the characters in a <code>String</code> using EcmaScript String rules.</p>\n+     * <p>Escapes the characters in a {@code String} using EcmaScript String rules.</p>\n      * <p>Escapes any values it finds into their EcmaScript String form.\n      * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n      *\n-     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n-     * <code>'t'</code>.</p>\n+     * <p>So a tab becomes the characters {@code '\\\\'} and\n+     * {@code 't'}.</p>\n      *\n      * <p>The only difference between Java strings and EcmaScript strings\n      * is that in EcmaScript, a single quote and forward-slash (/) are escaped.</p>\n      * </p>\n      *\n      * @param input  String to escape values in, may be null\n-     * @return String with escaped values, <code>null</code> if null string input\n+     * @return String with escaped values, {@code null} if null string input\n      */\n     public static final String escapeEcmaScript(String input) {\n         return ESCAPE_ECMASCRIPT.translate(input);\n     }\n \n     /**\n-     * <p>Unescapes any Java literals found in the <code>String</code>.\n-     * For example, it will turn a sequence of <code>'\\'</code> and\n-     * <code>'n'</code> into a newline character, unless the <code>'\\'</code>\n-     * is preceded by another <code>'\\'</code>.</p>\n+     * <p>Unescapes any Java literals found in the {@code String}.\n+     * For example, it will turn a sequence of {@code '\\'} and\n+     * {@code 'n'} into a newline character, unless the {@code '\\'}\n+     * is preceded by another {@code '\\'}.</p>\n      * \n-     * @param input  the <code>String</code> to unescape, may be null\n-     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n+     * @param input  the {@code String} to unescape, may be null\n+     * @return a new unescaped {@code String}, {@code null} if null string input\n      */\n     public static final String unescapeJava(String input) {\n         return UNESCAPE_JAVA.translate(input);\n     }\n \n     /**\n-     * <p>Unescapes any EcmaScript literals found in the <code>String</code>.</p>\n-     *\n-     * <p>For example, it will turn a sequence of <code>'\\'</code> and <code>'n'</code>\n-     * into a newline character, unless the <code>'\\'</code> is preceded by another\n-     * <code>'\\'</code>.</p>\n+     * <p>Unescapes any EcmaScript literals found in the {@code String}.</p>\n+     *\n+     * <p>For example, it will turn a sequence of {@code '\\'} and {@code 'n'}\n+     * into a newline character, unless the {@code '\\'} is preceded by another\n+     * {@code '\\'}.</p>\n      *\n      * @see #unescapeJava(String)\n-     * @param input  the <code>String</code> to unescape, may be null\n-     * @return A new unescaped <code>String</code>, <code>null</code> if null string input\n+     * @param input  the {@code String} to unescape, may be null\n+     * @return A new unescaped {@code String}, {@code null} if null string input\n      */\n     public static final String unescapeEcmaScript(String input) {\n         return UNESCAPE_ECMASCRIPT.translate(input);\n     // HTML and XML\n     //--------------------------------------------------------------------------\n     /**\n-     * <p>Escapes the characters in a <code>String</code> using HTML entities.</p>\n+     * <p>Escapes the characters in a {@code String} using HTML entities.</p>\n      *\n      * <p>\n      * For example:\n      * Note that the commonly used apostrophe escape character (&amp;apos;)\n      * is not a legal entity and so is not supported). </p>\n      *\n-     * @param input  the <code>String</code> to escape, may be null\n-     * @return a new escaped <code>String</code>, <code>null</code> if null string input\n+     * @param input  the {@code String} to escape, may be null\n+     * @return a new escaped {@code String}, {@code null} if null string input\n      * \n      * @see <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n      * @see <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n     }\n \n     /**\n-     * <p>Escapes the characters in a <code>String</code> using HTML entities.</p>\n+     * <p>Escapes the characters in a {@code String} using HTML entities.</p>\n      * <p>Supports only the HTML 3.0 entities. </p>\n      *\n-     * @param input  the <code>String</code> to escape, may be null\n-     * @return a new escaped <code>String</code>, <code>null</code> if null string input\n+     * @param input  the {@code String} to escape, may be null\n+     * @return a new escaped {@code String}, {@code null} if null string input\n      * \n      */\n     public static final String escapeHtml3(String input) {\n      * verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n      * become \"&gt;&amp;zzzz;x\".</p>\n      *\n-     * @param input  the <code>String</code> to unescape, may be null\n-     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n+     * @param input  the {@code String} to unescape, may be null\n+     * @return a new unescaped {@code String}, {@code null} if null string input\n      */\n     public static final String unescapeHtml4(String input) {\n         return UNESCAPE_HTML4.translate(input);\n      * containing the actual Unicode characters corresponding to the\n      * escapes. Supports only HTML 3.0 entities.</p>\n      *\n-     * @param input  the <code>String</code> to unescape, may be null\n-     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n+     * @param input  the {@code String} to unescape, may be null\n+     * @return a new unescaped {@code String}, {@code null} if null string input\n      */\n     public static final String unescapeHtml3(String input) {\n         return UNESCAPE_HTML3.translate(input);\n \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Escapes the characters in a <code>String</code> using XML entities.</p>\n+     * <p>Escapes the characters in a {@code String} using XML entities.</p>\n      *\n      * <p>For example: <tt>\"bread\" & \"butter\"</tt> =>\n      * <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n      * <p>Note that unicode characters greater than 0x7f are as of 3.0, no longer \n      *    escaped. </p>\n      *\n-     * @param input  the <code>String</code> to escape, may be null\n-     * @return a new escaped <code>String</code>, <code>null</code> if null string input\n+     * @param input  the {@code String} to escape, may be null\n+     * @return a new escaped {@code String}, {@code null} if null string input\n      * @see #unescapeXml(java.lang.String)\n      */\n     public static final String escapeXml(String input) {\n      * <p>Note that numerical \\\\u unicode codes are unescaped to their respective \n      *    unicode characters. This may change in future releases. </p>\n      *\n-     * @param input  the <code>String</code> to unescape, may be null\n-     * @return a new unescaped <code>String</code>, <code>null</code> if null string input\n+     * @param input  the {@code String} to unescape, may be null\n+     * @return a new unescaped {@code String}, {@code null} if null string input\n      * @see #escapeXml(String)\n      */\n     public static final String unescapeXml(String input) {\n     //-----------------------------------------------------------------------\n \n     /**\n-     * <p>Returns a <code>String</code> value for a CSV column enclosed in double quotes,\n+     * <p>Returns a {@code String} value for a CSV column enclosed in double quotes,\n      * if required.</p>\n      *\n      * <p>If the value contains a comma, newline or double quote, then the\n      *\n      * @param input the input CSV column String, may be null\n      * @return the input String, enclosed in double quotes if the value contains a comma,\n-     * newline or double quote, <code>null</code> if null string input\n+     * newline or double quote, {@code null} if null string input\n      * @since 2.4\n      */\n     public static final String escapeCsv(String input) {\n     }\n \n     /**\n-     * <p>Returns a <code>String</code> value for an unescaped CSV column. </p>\n+     * <p>Returns a {@code String} value for an unescaped CSV column. </p>\n      *\n      * <p>If the value is enclosed in double quotes, and contains a comma, newline \n      *    or double quote, then quotes are removed. \n      *\n      * @param input the input CSV column String, may be null\n      * @return the input String, with enclosing double quotes removed and embedded double \n-     * quotes unescaped, <code>null</code> if null string input\n+     * quotes unescaped, {@code null} if null string input\n      * @since 2.4\n      */\n     public static final String unescapeCsv(String input) {\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n \n /**\n  * <p>Operations on {@link java.lang.String} that are\n- * <code>null</code> safe.</p>\n+ * {@code null} safe.</p>\n  *\n  * <ul>\n  *  <li><b>IsEmpty/IsBlank</b>\n  *      - the number of changes needed to change one String into another</li>\n  * </ul>\n  *\n- * <p>The <code>StringUtils</code> class defines certain words related to\n+ * <p>The {@code StringUtils} class defines certain words related to\n  * String handling.</p>\n  *\n  * <ul>\n- *  <li>null - <code>null</code></li>\n- *  <li>empty - a zero-length string (<code>\"\"</code>)</li>\n- *  <li>space - the space character (<code>' '</code>, char 32)</li>\n+ *  <li>null - {@code null}</li>\n+ *  <li>empty - a zero-length string ({@code \"\"})</li>\n+ *  <li>space - the space character ({@code ' '}, char 32)</li>\n  *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n  *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n  * </ul>\n  *\n- * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.\n- * That is to say that a <code>null</code> input will return <code>null</code>.\n- * Where a <code>boolean</code> or <code>int</code> is being returned\n+ * <p>{@code StringUtils} handles {@code null} input Strings quietly.\n+ * That is to say that a {@code null} input will return {@code null}.\n+ * Where a {@code boolean} or {@code int} is being returned\n  * details vary by method.</p>\n  *\n- * <p>A side effect of the <code>null</code> handling is that a\n- * <code>NullPointerException</code> should be considered a bug in\n- * <code>StringUtils</code>.</p>\n+ * <p>A side effect of the {@code null} handling is that a\n+ * {@code NullPointerException} should be considered a bug in\n+ * {@code StringUtils}.</p>\n  *\n  * <p>Methods in this class give sample code to explain their operation.\n- * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n+ * The symbol {@code *} is used to indicate any input including {@code null}.</p>\n  *\n  * <p>#ThreadSafe#</p>\n  * @see java.lang.String\n     // (not sure who tested this)\n \n     /**\n-     * The empty String <code>\"\"</code>.\n+     * The empty String {@code \"\"}.\n      * @since 2.0\n      */\n     public static final String EMPTY = \"\";\n     private static final Pattern WHITESPACE_BLOCK = Pattern.compile(\"\\\\s+\");\n \n     /**\n-     * <p><code>StringUtils</code> instances should NOT be constructed in\n+     * <p>{@code StringUtils} instances should NOT be constructed in\n      * standard programming. Instead, the class should be used as\n-     * <code>StringUtils.trim(\" foo \");</code>.</p>\n+     * {@code StringUtils.trim(\" foo \");}.</p>\n      *\n      * <p>This constructor is public to permit tools that require a JavaBean\n      * instance to operate.</p>\n      * That functionality is available in isBlank().</p>\n      *\n      * @param cs  the CharSequence to check, may be null\n-     * @return <code>true</code> if the CharSequence is empty or null\n+     * @return {@code true} if the CharSequence is empty or null\n      * @since 3.0 Changed signature from isEmpty(String) to isEmpty(CharSequence)\n      */\n     public static boolean isEmpty(CharSequence cs) {\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n-     * @return <code>true</code> if the CharSequence is not empty and not null\n+     * @return {@code true} if the CharSequence is not empty and not null\n      * @since 3.0 Changed signature from isNotEmpty(String) to isNotEmpty(CharSequence)\n      */\n     public static boolean isNotEmpty(CharSequence cs) {\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n-     * @return <code>true</code> if the CharSequence is null, empty or whitespace\n+     * @return {@code true} if the CharSequence is null, empty or whitespace\n      * @since 2.0\n      * @since 3.0 Changed signature from isBlank(String) to isBlank(CharSequence)\n      */\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n-     * @return <code>true</code> if the CharSequence is\n+     * @return {@code true} if the CharSequence is\n      *  not empty and not null and not whitespace\n      * @since 2.0\n      * @since 3.0 Changed signature from isNotBlank(String) to isNotBlank(CharSequence)\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Removes control characters (char &lt;= 32) from both\n-     * ends of this String, handling <code>null</code> by returning\n-     * <code>null</code>.</p>\n+     * ends of this String, handling {@code null} by returning\n+     * {@code null}.</p>\n      *\n      * <p>The String is trimmed using {@link String#trim()}.\n      * Trim removes start and end characters &lt;= 32.\n      * </pre>\n      *\n      * @param str  the String to be trimmed, may be null\n-     * @return the trimmed string, <code>null</code> if null String input\n+     * @return the trimmed string, {@code null} if null String input\n      */\n     public static String trim(String str) {\n         return str == null ? null : str.trim();\n \n     /**\n      * <p>Removes control characters (char &lt;= 32) from both\n-     * ends of this String returning <code>null</code> if the String is\n-     * empty (\"\") after the trim or if it is <code>null</code>.\n+     * ends of this String returning {@code null} if the String is\n+     * empty (\"\") after the trim or if it is {@code null}.\n      *\n      * <p>The String is trimmed using {@link String#trim()}.\n      * Trim removes start and end characters &lt;= 32.\n      *\n      * @param str  the String to be trimmed, may be null\n      * @return the trimmed String,\n-     *  <code>null</code> if only chars &lt;= 32, empty or null String input\n+     *  {@code null} if only chars &lt;= 32, empty or null String input\n      * @since 2.0\n      */\n     public static String trimToNull(String str) {\n     /**\n      * <p>Removes control characters (char &lt;= 32) from both\n      * ends of this String returning an empty String (\"\") if the String\n-     * is empty (\"\") after the trim or if it is <code>null</code>.\n+     * is empty (\"\") after the trim or if it is {@code null}.\n      *\n      * <p>The String is trimmed using {@link String#trim()}.\n      * Trim removes start and end characters &lt;= 32.\n      * </pre>\n      *\n      * @param str  the String to be trimmed, may be null\n-     * @return the trimmed String, or an empty String if <code>null</code> input\n+     * @return the trimmed String, or an empty String if {@code null} input\n      * @since 2.0\n      */\n     public static String trimToEmpty(String str) {\n      * <p>This is similar to {@link #trim(String)} but removes whitespace.\n      * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>A {@code null} input String returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.strip(null)     = null\n      * </pre>\n      *\n      * @param str  the String to remove whitespace from, may be null\n-     * @return the stripped String, <code>null</code> if null String input\n+     * @return the stripped String, {@code null} if null String input\n      */\n     public static String strip(String str) {\n         return strip(str, null);\n \n     /**\n      * <p>Strips whitespace from the start and end of a String  returning\n-     * <code>null</code> if the String is empty (\"\") after the strip.</p>\n+     * {@code null} if the String is empty (\"\") after the strip.</p>\n      *\n      * <p>This is similar to {@link #trimToNull(String)} but removes whitespace.\n      * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n      *\n      * @param str  the String to be stripped, may be null\n      * @return the stripped String,\n-     *  <code>null</code> if whitespace, empty or null String input\n+     *  {@code null} if whitespace, empty or null String input\n      * @since 2.0\n      */\n     public static String stripToNull(String str) {\n \n     /**\n      * <p>Strips whitespace from the start and end of a String  returning\n-     * an empty String if <code>null</code> input.</p>\n+     * an empty String if {@code null} input.</p>\n      *\n      * <p>This is similar to {@link #trimToEmpty(String)} but removes whitespace.\n      * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n      * </pre>\n      *\n      * @param str  the String to be stripped, may be null\n-     * @return the trimmed String, or an empty String if <code>null</code> input\n+     * @return the trimmed String, or an empty String if {@code null} input\n      * @since 2.0\n      */\n     public static String stripToEmpty(String str) {\n      * This is similar to {@link String#trim()} but allows the characters\n      * to be stripped to be controlled.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * <p>A {@code null} input String returns {@code null}.\n      * An empty string (\"\") input returns the empty string.</p>\n      *\n-     * <p>If the stripChars String is <code>null</code>, whitespace is\n+     * <p>If the stripChars String is {@code null}, whitespace is\n      * stripped as defined by {@link Character#isWhitespace(char)}.\n      * Alternatively use {@link #strip(String)}.</p>\n      *\n      *\n      * @param str  the String to remove characters from, may be null\n      * @param stripChars  the characters to remove, null treated as whitespace\n-     * @return the stripped String, <code>null</code> if null String input\n+     * @return the stripped String, {@code null} if null String input\n      */\n     public static String strip(String str, String stripChars) {\n         if (isEmpty(str)) {\n     /**\n      * <p>Strips any of a set of characters from the start of a String.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * <p>A {@code null} input String returns {@code null}.\n      * An empty string (\"\") input returns the empty string.</p>\n      *\n-     * <p>If the stripChars String is <code>null</code>, whitespace is\n+     * <p>If the stripChars String is {@code null}, whitespace is\n      * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n      *\n      * <pre>\n      *\n      * @param str  the String to remove characters from, may be null\n      * @param stripChars  the characters to remove, null treated as whitespace\n-     * @return the stripped String, <code>null</code> if null String input\n+     * @return the stripped String, {@code null} if null String input\n      */\n     public static String stripStart(String str, String stripChars) {\n         int strLen;\n     /**\n      * <p>Strips any of a set of characters from the end of a String.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * <p>A {@code null} input String returns {@code null}.\n      * An empty string (\"\") input returns the empty string.</p>\n      *\n-     * <p>If the stripChars String is <code>null</code>, whitespace is\n+     * <p>If the stripChars String is {@code null}, whitespace is\n      * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n      *\n      * <pre>\n      *\n      * @param str  the String to remove characters from, may be null\n      * @param stripChars  the set of characters to remove, null treated as whitespace\n-     * @return the stripped String, <code>null</code> if null String input\n+     * @return the stripped String, {@code null} if null String input\n      */\n     public static String stripEnd(String str, String stripChars) {\n         int end;\n      * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n      *\n      * <p>A new array is returned each time, except for length zero.\n-     * A <code>null</code> array will return <code>null</code>.\n+     * A {@code null} array will return {@code null}.\n      * An empty array will return itself.\n-     * A <code>null</code> array entry will be ignored.</p>\n+     * A {@code null} array entry will be ignored.</p>\n      *\n      * <pre>\n      * StringUtils.stripAll(null)             = null\n      * </pre>\n      *\n      * @param strs  the array to remove whitespace from, may be null\n-     * @return the stripped Strings, <code>null</code> if null array input\n+     * @return the stripped Strings, {@code null} if null array input\n      */\n     public static String[] stripAll(String[] strs) {\n         return stripAll(strs, null);\n      * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n      *\n      * <p>A new array is returned each time, except for length zero.\n-     * A <code>null</code> array will return <code>null</code>.\n+     * A {@code null} array will return {@code null}.\n      * An empty array will return itself.\n-     * A <code>null</code> array entry will be ignored.\n-     * A <code>null</code> stripChars will strip whitespace as defined by\n+     * A {@code null} array entry will be ignored.\n+     * A {@code null} stripChars will strip whitespace as defined by\n      * {@link Character#isWhitespace(char)}.</p>\n      *\n      * <pre>\n      *\n      * @param strs  the array to remove characters from, may be null\n      * @param stripChars  the characters to remove, null treated as whitespace\n-     * @return the stripped Strings, <code>null</code> if null array input\n+     * @return the stripped Strings, {@code null} if null array input\n      */\n     public static String[] stripAll(String[] strs, String stripChars) {\n         int strsLen;\n     // Equals\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Compares two CharSequences, returning <code>true</code> if they are equal.</p>\n-     *\n-     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n+     * <p>Compares two CharSequences, returning {@code true} if they are equal.</p>\n+     *\n+     * <p>{@code null}s are handled without exceptions. Two {@code null}\n      * references are considered to be equal. The comparison is case sensitive.</p>\n      *\n      * <pre>\n      * @see java.lang.String#equals(Object)\n      * @param cs1  the first CharSequence, may be null\n      * @param cs2  the second CharSequence, may be null\n-     * @return <code>true</code> if the CharSequences are equal, case sensitive, or\n-     *  both <code>null</code>\n+     * @return {@code true} if the CharSequences are equal, case sensitive, or\n+     *  both {@code null}\n      * @since 3.0 Changed signature from equals(String, String) to equals(CharSequence, CharSequence)\n      */\n     public static boolean equals(CharSequence cs1, CharSequence cs2) {\n     }\n \n     /**\n-     * <p>Compares two Strings, returning <code>true</code> if they are equal ignoring\n+     * <p>Compares two Strings, returning {@code true} if they are equal ignoring\n      * the case.</p>\n      *\n-     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n+     * <p>{@code null}s are handled without exceptions. Two {@code null}\n      * references are considered equal. Comparison is case insensitive.</p>\n      *\n      * <pre>\n      * @see java.lang.String#equalsIgnoreCase(String)\n      * @param str1  the first String, may be null\n      * @param str2  the second String, may be null\n-     * @return <code>true</code> if the Strings are equal, case insensitive, or\n-     *  both <code>null</code>\n+     * @return {@code true} if the Strings are equal, case insensitive, or\n+     *  both {@code null}\n      */\n     public static boolean equalsIgnoreCase(String str1, String str2) {\n         return str1 == null ? str2 == null : str1.equalsIgnoreCase(str2);\n     // IndexOf\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Finds the first index within a String, handling <code>null</code>.\n+     * <p>Finds the first index within a String, handling {@code null}.\n      * This method uses {@link String#indexOf(int)}.</p>\n      *\n-     * <p>A <code>null</code> or empty (\"\") String will return <code>INDEX_NOT_FOUND (-1)</code>.</p>\n+     * <p>A {@code null} or empty (\"\") String will return {@code INDEX_NOT_FOUND (-1)}.</p>\n      *\n      * <pre>\n      * StringUtils.indexOf(null, *)         = -1\n      * @param str  the String to check, may be null\n      * @param searchChar  the character to find\n      * @return the first index of the search character,\n-     *  -1 if no match or <code>null</code> string input\n+     *  -1 if no match or {@code null} string input\n      * @since 2.0\n      */\n     public static int indexOf(String str, int searchChar) {\n \n     /**\n      * <p>Finds the first index within a String from a start position,\n-     * handling <code>null</code>.\n+     * handling {@code null}.\n      * This method uses {@link String#indexOf(int, int)}.</p>\n      *\n-     * <p>A <code>null</code> or empty (\"\") String will return <code>(INDEX_NOT_FOUND) -1</code>.\n+     * <p>A {@code null} or empty (\"\") String will return {@code (INDEX_NOT_FOUND) -1}.\n      * A negative start position is treated as zero.\n-     * A start position greater than the string length returns <code>-1</code>.</p>\n+     * A start position greater than the string length returns {@code -1}.</p>\n      *\n      * <pre>\n      * StringUtils.indexOf(null, *, *)          = -1\n      * @param searchChar  the character to find\n      * @param startPos  the start position, negative treated as zero\n      * @return the first index of the search character,\n-     *  -1 if no match or <code>null</code> string input\n+     *  -1 if no match or {@code null} string input\n      * @since 2.0\n      */\n     public static int indexOf(String str, int searchChar, int startPos) {\n     }\n \n     /**\n-     * <p>Finds the first index within a String, handling <code>null</code>.\n+     * <p>Finds the first index within a String, handling {@code null}.\n      * This method uses {@link String#indexOf(String)}.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n+     * <p>A {@code null} String will return {@code -1}.</p>\n      *\n      * <pre>\n      * StringUtils.indexOf(null, *)          = -1\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n      * @return the first index of the search String,\n-     *  -1 if no match or <code>null</code> string input\n+     *  -1 if no match or {@code null} string input\n      * @since 2.0\n      */\n     public static int indexOf(String str, String searchStr) {\n     }\n \n     /**\n-     * <p>Finds the first index within a String, handling <code>null</code>.\n+     * <p>Finds the first index within a String, handling {@code null}.\n      * This method uses {@link String#indexOf(String, int)}.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * <p>A {@code null} String will return {@code -1}.\n      * A negative start position is treated as zero.\n      * An empty (\"\") search String always matches.\n      * A start position greater than the string length only matches\n      * @param searchStr  the String to find, may be null\n      * @param startPos  the start position, negative treated as zero\n      * @return the first index of the search String,\n-     *  -1 if no match or <code>null</code> string input\n+     *  -1 if no match or {@code null} string input\n      * @since 2.0\n      */\n     public static int indexOf(String str, String searchStr, int startPos) {\n     }\n \n     /**\n-     * <p>Finds the n-th index within a String, handling <code>null</code>.\n+     * <p>Finds the n-th index within a String, handling {@code null}.\n      * This method uses {@link String#indexOf(String)}.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n+     * <p>A {@code null} String will return {@code -1}.</p>\n      *\n      * <pre>\n      * StringUtils.ordinalIndexOf(null, *, *)          = -1\n      *\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n-     * @param ordinal  the n-th <code>searchStr</code> to find\n+     * @param ordinal  the n-th {@code searchStr} to find\n      * @return the n-th index of the search String,\n-     *  <code>-1</code> (<code>INDEX_NOT_FOUND</code>) if no match or <code>null</code> string input\n+     *  {@code -1} ({@code INDEX_NOT_FOUND}) if no match or {@code null} string input\n      * @since 2.1\n      */\n     public static int ordinalIndexOf(String str, String searchStr, int ordinal) {\n     }\n \n     /**\n-     * <p>Finds the n-th index within a String, handling <code>null</code>.\n+     * <p>Finds the n-th index within a String, handling {@code null}.\n      * This method uses {@link String#indexOf(String)}.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n+     * <p>A {@code null} String will return {@code -1}.</p>\n      *\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n-     * @param ordinal  the n-th <code>searchStr</code> to find\n+     * @param ordinal  the n-th {@code searchStr} to find\n      * @param lastIndex true if lastOrdinalIndexOf() otherwise false if ordinalIndexOf()\n      * @return the n-th index of the search String,\n-     *  <code>-1</code> (<code>INDEX_NOT_FOUND</code>) if no match or <code>null</code> string input\n+     *  {@code -1} ({@code INDEX_NOT_FOUND}) if no match or {@code null} string input\n      */\n     // Shared code between ordinalIndexOf(String,String,int) and lastOrdinalIndexOf(String,String,int)\n     private static int ordinalIndexOf(String str, String searchStr, int ordinal, boolean lastIndex) {\n     /**\n      * <p>Case in-sensitive find of the first index within a String.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * <p>A {@code null} String will return {@code -1}.\n      * A negative start position is treated as zero.\n      * An empty (\"\") search String always matches.\n      * A start position greater than the string length only matches\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n      * @return the first index of the search String,\n-     *  -1 if no match or <code>null</code> string input\n+     *  -1 if no match or {@code null} string input\n      * @since 2.5\n      */\n     public static int indexOfIgnoreCase(String str, String searchStr) {\n      * <p>Case in-sensitive find of the first index within a String\n      * from the specified position.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * <p>A {@code null} String will return {@code -1}.\n      * A negative start position is treated as zero.\n      * An empty (\"\") search String always matches.\n      * A start position greater than the string length only matches\n      * @param searchStr  the String to find, may be null\n      * @param startPos  the start position, negative treated as zero\n      * @return the first index of the search String,\n-     *  -1 if no match or <code>null</code> string input\n+     *  -1 if no match or {@code null} string input\n      * @since 2.5\n      */\n     public static int indexOfIgnoreCase(String str, String searchStr, int startPos) {\n     // LastIndexOf\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Finds the last index within a String, handling <code>null</code>.\n+     * <p>Finds the last index within a String, handling {@code null}.\n      * This method uses {@link String#lastIndexOf(int)}.</p>\n      *\n-     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.</p>\n+     * <p>A {@code null} or empty (\"\") String will return {@code -1}.</p>\n      *\n      * <pre>\n      * StringUtils.lastIndexOf(null, *)         = -1\n      * @param str  the String to check, may be null\n      * @param searchChar  the character to find\n      * @return the last index of the search character,\n-     *  -1 if no match or <code>null</code> string input\n+     *  -1 if no match or {@code null} string input\n      * @since 2.0\n      */\n     public static int lastIndexOf(String str, int searchChar) {\n \n     /**\n      * <p>Finds the last index within a String from a start position,\n-     * handling <code>null</code>.\n+     * handling {@code null}.\n      * This method uses {@link String#lastIndexOf(int, int)}.</p>\n      *\n-     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.\n-     * A negative start position returns <code>-1</code>.\n+     * <p>A {@code null} or empty (\"\") String will return {@code -1}.\n+     * A negative start position returns {@code -1}.\n      * A start position greater than the string length searches the whole string.</p>\n      *\n      * <pre>\n      * @param searchChar  the character to find\n      * @param startPos  the start position\n      * @return the last index of the search character,\n-     *  -1 if no match or <code>null</code> string input\n+     *  -1 if no match or {@code null} string input\n      * @since 2.0\n      */\n     public static int lastIndexOf(String str, int searchChar, int startPos) {\n     }\n \n     /**\n-     * <p>Finds the last index within a String, handling <code>null</code>.\n+     * <p>Finds the last index within a String, handling {@code null}.\n      * This method uses {@link String#lastIndexOf(String)}.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n+     * <p>A {@code null} String will return {@code -1}.</p>\n      *\n      * <pre>\n      * StringUtils.lastIndexOf(null, *)          = -1\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n      * @return the last index of the search String,\n-     *  -1 if no match or <code>null</code> string input\n+     *  -1 if no match or {@code null} string input\n      * @since 2.0\n      */\n     public static int lastIndexOf(String str, String searchStr) {\n     }\n \n     /**\n-     * <p>Finds the n-th last index within a String, handling <code>null</code>.\n+     * <p>Finds the n-th last index within a String, handling {@code null}.\n      * This method uses {@link String#lastIndexOf(String)}.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n+     * <p>A {@code null} String will return {@code -1}.</p>\n      *\n      * <pre>\n      * StringUtils.lastOrdinalIndexOf(null, *, *)          = -1\n      *\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n-     * @param ordinal  the n-th last <code>searchStr</code> to find\n+     * @param ordinal  the n-th last {@code searchStr} to find\n      * @return the n-th last index of the search String,\n-     *  <code>-1</code> (<code>INDEX_NOT_FOUND</code>) if no match or <code>null</code> string input\n+     *  {@code -1} ({@code INDEX_NOT_FOUND}) if no match or {@code null} string input\n      * @since 2.5\n      */\n     public static int lastOrdinalIndexOf(String str, String searchStr, int ordinal) {\n     }\n \n     /**\n-     * <p>Finds the first index within a String, handling <code>null</code>.\n+     * <p>Finds the first index within a String, handling {@code null}.\n      * This method uses {@link String#lastIndexOf(String, int)}.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n-     * A negative start position returns <code>-1</code>.\n+     * <p>A {@code null} String will return {@code -1}.\n+     * A negative start position returns {@code -1}.\n      * An empty (\"\") search String always matches unless the start position is negative.\n      * A start position greater than the string length searches the whole string.</p>\n      *\n      * @param searchStr  the String to find, may be null\n      * @param startPos  the start position, negative treated as zero\n      * @return the first index of the search String,\n-     *  -1 if no match or <code>null</code> string input\n+     *  -1 if no match or {@code null} string input\n      * @since 2.0\n      */\n     public static int lastIndexOf(String str, String searchStr, int startPos) {\n     /**\n      * <p>Case in-sensitive find of the last index within a String.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n-     * A negative start position returns <code>-1</code>.\n+     * <p>A {@code null} String will return {@code -1}.\n+     * A negative start position returns {@code -1}.\n      * An empty (\"\") search String always matches unless the start position is negative.\n      * A start position greater than the string length searches the whole string.</p>\n      *\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n      * @return the first index of the search String,\n-     *  -1 if no match or <code>null</code> string input\n+     *  -1 if no match or {@code null} string input\n      * @since 2.5\n      */\n     public static int lastIndexOfIgnoreCase(String str, String searchStr) {\n      * <p>Case in-sensitive find of the last index within a String\n      * from the specified position.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n-     * A negative start position returns <code>-1</code>.\n+     * <p>A {@code null} String will return {@code -1}.\n+     * A negative start position returns {@code -1}.\n      * An empty (\"\") search String always matches unless the start position is negative.\n      * A start position greater than the string length searches the whole string.</p>\n      *\n      * @param searchStr  the String to find, may be null\n      * @param startPos  the start position\n      * @return the first index of the search String,\n-     *  -1 if no match or <code>null</code> string input\n+     *  -1 if no match or {@code null} string input\n      * @since 2.5\n      */\n     public static int lastIndexOfIgnoreCase(String str, String searchStr, int startPos) {\n     // Contains\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Checks if String contains a search character, handling <code>null</code>.\n+     * <p>Checks if String contains a search character, handling {@code null}.\n      * This method uses {@link String#indexOf(int)}.</p>\n      *\n-     * <p>A <code>null</code> or empty (\"\") String will return <code>false</code>.</p>\n+     * <p>A {@code null} or empty (\"\") String will return {@code false}.</p>\n      *\n      * <pre>\n      * StringUtils.contains(null, *)    = false\n      * @param str  the String to check, may be null\n      * @param searchChar  the character to find\n      * @return true if the String contains the search character,\n-     *  false if not or <code>null</code> string input\n+     *  false if not or {@code null} string input\n      * @since 2.0\n      */\n     public static boolean contains(String str, int searchChar) {\n     }\n \n     /**\n-     * <p>Checks if String contains a search String, handling <code>null</code>.\n+     * <p>Checks if String contains a search String, handling {@code null}.\n      * This method uses {@link String#indexOf(String)}.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>false</code>.</p>\n+     * <p>A {@code null} String will return {@code false}.</p>\n      *\n      * <pre>\n      * StringUtils.contains(null, *)     = false\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n      * @return true if the String contains the search String,\n-     *  false if not or <code>null</code> string input\n+     *  false if not or {@code null} string input\n      * @since 2.0\n      */\n     public static boolean contains(String str, String searchStr) {\n \n     /**\n      * <p>Checks if String contains a search String irrespective of case,\n-     * handling <code>null</code>. Case-insensitivity is defined as by\n+     * handling {@code null}. Case-insensitivity is defined as by\n      * {@link String#equalsIgnoreCase(String)}.\n      *\n-     * <p>A <code>null</code> String will return <code>false</code>.</p>\n+     * <p>A {@code null} String will return {@code false}.</p>\n      *\n      * <pre>\n      * StringUtils.contains(null, *) = false\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n      * @return true if the String contains the search String irrespective of\n-     * case or false if not or <code>null</code> string input\n+     * case or false if not or {@code null} string input\n      */\n     public static boolean containsIgnoreCase(String str, String searchStr) {\n         if (str == null || searchStr == null) {\n \n     /**\n      * Check whether the given String contains any whitespace characters.\n-     * @param str the String to check (may be <code>null</code>)\n-     * @return <code>true</code> if the String is not empty and\n+     * @param str the String to check (may be {@code null})\n+     * @return {@code true} if the String is not empty and\n      * contains at least 1 whitespace character\n      * @see java.lang.Character#isWhitespace\n      * @since 3.0\n      * <p>Search a CharSequence to find the first index of any\n      * character in the given set of characters.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n-     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n+     * <p>A {@code null} String will return {@code -1}.\n+     * A {@code null} or zero length search array will return {@code -1}.</p>\n      *\n      * <pre>\n      * StringUtils.indexOfAny(null, *)                = -1\n      * <p>Search a CharSequence to find the first index of any\n      * character in the given set of characters.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n-     * A <code>null</code> search string will return <code>-1</code>.</p>\n+     * <p>A {@code null} String will return {@code -1}.\n+     * A {@code null} search string will return {@code -1}.</p>\n      *\n      * <pre>\n      * StringUtils.indexOfAny(null, *)            = -1\n      * <p>Checks if the CharSequence contains any character in the given\n      * set of characters.</p>\n      *\n-     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n-     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n+     * <p>A {@code null} CharSequence will return {@code false}.\n+     * A {@code null} or zero length search array will return {@code false}.</p>\n      *\n      * <pre>\n      * StringUtils.containsAny(null, *)                = false\n      *\n      * @param cs  the CharSequence to check, may be null\n      * @param searchChars  the chars to search for, may be null\n-     * @return the <code>true</code> if any of the chars are found,\n-     * <code>false</code> if no match or null input\n+     * @return the {@code true} if any of the chars are found,\n+     * {@code false} if no match or null input\n      * @since 2.4\n      */\n     public static boolean containsAny(String cs, char[] searchChars) {\n      * </p>\n      *\n      * <p>\n-     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n-     * <code>false</code>.\n+     * A {@code null} CharSequence will return {@code false}. A {@code null} search CharSequence will return\n+     * {@code false}.\n      * </p>\n      *\n      * <pre>\n      *            the CharSequence to check, may be null\n      * @param searchChars\n      *            the chars to search for, may be null\n-     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n+     * @return the {@code true} if any of the chars are found, {@code false} if no match or null input\n      * @since 2.4\n      */\n     public static boolean containsAny(String cs, String searchChars) {\n      * <p>Searches a CharSequence to find the first index of any\n      * character not in the given set of characters.</p>\n      *\n-     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n-     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n+     * <p>A {@code null} CharSequence will return {@code -1}.\n+     * A {@code null} or zero length search array will return {@code -1}.</p>\n      *\n      * <pre>\n      * StringUtils.indexOfAnyBut(null, *)                              = -1\n      * <p>Search a String to find the first index of any\n      * character not in the given set of characters.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n-     * A <code>null</code> or empty search string will return <code>-1</code>.</p>\n+     * <p>A {@code null} String will return {@code -1}.\n+     * A {@code null} or empty search string will return {@code -1}.</p>\n      *\n      * <pre>\n      * StringUtils.indexOfAnyBut(null, *)            = -1\n     /**\n      * <p>Checks if the CharSequence contains only certain characters.</p>\n      *\n-     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n-     * A <code>null</code> valid character array will return <code>false</code>.\n-     * An empty CharSequence (length()=0) always returns <code>true</code>.</p>\n+     * <p>A {@code null} CharSequence will return {@code false}.\n+     * A {@code null} valid character array will return {@code false}.\n+     * An empty CharSequence (length()=0) always returns {@code true}.</p>\n      *\n      * <pre>\n      * StringUtils.containsOnly(null, *)       = false\n     /**\n      * <p>Checks if the CharSequence contains only certain characters.</p>\n      *\n-     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n-     * A <code>null</code> valid character String will return <code>false</code>.\n-     * An empty String (length()=0) always returns <code>true</code>.</p>\n+     * <p>A {@code null} CharSequence will return {@code false}.\n+     * A {@code null} valid character String will return {@code false}.\n+     * An empty String (length()=0) always returns {@code true}.</p>\n      *\n      * <pre>\n      * StringUtils.containsOnly(null, *)       = false\n     /**\n      * <p>Checks that the CharSequence does not contain certain characters.</p>\n      *\n-     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n-     * A <code>null</code> invalid character array will return <code>true</code>.\n+     * <p>A {@code null} CharSequence will return {@code true}.\n+     * A {@code null} invalid character array will return {@code true}.\n      * An empty CharSequence (length()=0) always returns true.</p>\n      *\n      * <pre>\n     /**\n      * <p>Checks that the CharSequence does not contain certain characters.</p>\n      *\n-     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n-     * A <code>null</code> invalid character array will return <code>true</code>.\n+     * <p>A {@code null} CharSequence will return {@code true}.\n+     * A {@code null} invalid character array will return {@code true}.\n      * An empty String (\"\") always returns true.</p>\n      *\n      * <pre>\n     /**\n      * <p>Find the first index of any of a set of potential substrings.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n-     * A <code>null</code> or zero length search array will return <code>-1</code>.\n-     * A <code>null</code> search array entry will be ignored, but a search\n-     * array containing \"\" will return <code>0</code> if <code>str</code> is not\n+     * <p>A {@code null} String will return {@code -1}.\n+     * A {@code null} or zero length search array will return {@code -1}.\n+     * A {@code null} search array entry will be ignored, but a search\n+     * array containing \"\" will return {@code 0} if {@code str} is not\n      * null. This method uses {@link String#indexOf(String)}.</p>\n      *\n      * <pre>\n     /**\n      * <p>Find the latest index of any of a set of potential substrings.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>-1</code>.\n-     * A <code>null</code> search array will return <code>-1</code>.\n-     * A <code>null</code> or zero length search array entry will be ignored,\n-     * but a search array containing \"\" will return the length of <code>str</code>\n-     * if <code>str</code> is not null. This method uses {@link String#indexOf(String)}</p>\n+     * <p>A {@code null} String will return {@code -1}.\n+     * A {@code null} search array will return {@code -1}.\n+     * A {@code null} or zero length search array entry will be ignored,\n+     * but a search array containing \"\" will return the length of {@code str}\n+     * if {@code str} is not null. This method uses {@link String#indexOf(String)}</p>\n      *\n      * <pre>\n      * StringUtils.lastIndexOfAny(null, *)                   = -1\n     /**\n      * <p>Gets a substring from the specified String avoiding exceptions.</p>\n      *\n-     * <p>A negative start position can be used to start <code>n</code>\n+     * <p>A negative start position can be used to start {@code n}\n      * characters from the end of the String.</p>\n      *\n-     * <p>A <code>null</code> String will return <code>null</code>.\n+     * <p>A {@code null} String will return {@code null}.\n      * An empty (\"\") String will return \"\".</p>\n      *\n      * <pre>\n      * @param str  the String to get the substring from, may be null\n      * @param start  the position to start from, negative means\n      *  count back from the end of the String by this many characters\n-     * @return substring from start position, <code>null</code> if null String input\n+     * @return substring from start position, {@code null} if null String input\n      */\n     public static String substring(String str, int start) {\n         if (str == null) {\n     /**\n      * <p>Gets a substring from the specified String avoiding exceptions.</p>\n      *\n-     * <p>A negative start position can be used to start/end <code>n</code>\n+     * <p>A negative start position can be used to start/end {@code n}\n      * characters from the end of the String.</p>\n      *\n-     * <p>The returned substring starts with the character in the <code>start</code>\n-     * position and ends before the <code>end</code> position. All position counting is\n+     * <p>The returned substring starts with the character in the {@code start}\n+     * position and ends before the {@code end} position. All position counting is\n      * zero-based -- i.e., to start at the beginning of the string use\n-     * <code>start = 0</code>. Negative start and end positions can be used to\n+     * {@code start = 0}. Negative start and end positions can be used to\n      * specify offsets relative to the end of the String.</p>\n      *\n-     * <p>If <code>start</code> is not strictly to the left of <code>end</code>, \"\"\n+     * <p>If {@code start} is not strictly to the left of {@code end}, \"\"\n      * is returned.</p>\n      *\n      * <pre>\n      * @param end  the position to end at (exclusive), negative means\n      *  count back from the end of the String by this many characters\n      * @return substring from start position to end positon,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      */\n     public static String substring(String str, int start, int end) {\n         if (str == null) {\n     // Left/Right/Mid\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Gets the leftmost <code>len</code> characters of a String.</p>\n-     *\n-     * <p>If <code>len</code> characters are not available, or the\n-     * String is <code>null</code>, the String will be returned without\n+     * <p>Gets the leftmost {@code len} characters of a String.</p>\n+     *\n+     * <p>If {@code len} characters are not available, or the\n+     * String is {@code null}, the String will be returned without\n      * an exception. An empty String is returned if len is negative.</p>\n      *\n      * <pre>\n      *\n      * @param str  the String to get the leftmost characters from, may be null\n      * @param len  the length of the required String\n-     * @return the leftmost characters, <code>null</code> if null String input\n+     * @return the leftmost characters, {@code null} if null String input\n      */\n     public static String left(String str, int len) {\n         if (str == null) {\n     }\n \n     /**\n-     * <p>Gets the rightmost <code>len</code> characters of a String.</p>\n-     *\n-     * <p>If <code>len</code> characters are not available, or the String\n-     * is <code>null</code>, the String will be returned without an\n+     * <p>Gets the rightmost {@code len} characters of a String.</p>\n+     *\n+     * <p>If {@code len} characters are not available, or the String\n+     * is {@code null}, the String will be returned without an\n      * an exception. An empty String is returned if len is negative.</p>\n      *\n      * <pre>\n      *\n      * @param str  the String to get the rightmost characters from, may be null\n      * @param len  the length of the required String\n-     * @return the rightmost characters, <code>null</code> if null String input\n+     * @return the rightmost characters, {@code null} if null String input\n      */\n     public static String right(String str, int len) {\n         if (str == null) {\n     }\n \n     /**\n-     * <p>Gets <code>len</code> characters from the middle of a String.</p>\n-     *\n-     * <p>If <code>len</code> characters are not available, the remainder\n+     * <p>Gets {@code len} characters from the middle of a String.</p>\n+     *\n+     * <p>If {@code len} characters are not available, the remainder\n      * of the String will be returned without an exception. If the\n-     * String is <code>null</code>, <code>null</code> will be returned.\n+     * String is {@code null}, {@code null} will be returned.\n      * An empty String is returned if len is negative or exceeds the\n-     * length of <code>str</code>.</p>\n+     * length of {@code str}.</p>\n      *\n      * <pre>\n      * StringUtils.mid(null, *, *)    = null\n      * @param str  the String to get the characters from, may be null\n      * @param pos  the position to start from, negative treated as zero\n      * @param len  the length of the required String\n-     * @return the middle characters, <code>null</code> if null String input\n+     * @return the middle characters, {@code null} if null String input\n      */\n     public static String mid(String str, int pos, int len) {\n         if (str == null) {\n      * <p>Gets the substring before the first occurrence of a separator.\n      * The separator is not returned.</p>\n      *\n-     * <p>A <code>null</code> string input will return <code>null</code>.\n+     * <p>A {@code null} string input will return {@code null}.\n      * An empty (\"\") string input will return the empty string.\n-     * A <code>null</code> separator will return the input string.</p>\n+     * A {@code null} separator will return the input string.</p>\n      *\n      * <p>If nothing is found, the string input is returned.</p>\n      *\n      * @param str  the String to get a substring from, may be null\n      * @param separator  the String to search for, may be null\n      * @return the substring before the first occurrence of the separator,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      * @since 2.0\n      */\n     public static String substringBefore(String str, String separator) {\n      * <p>Gets the substring after the first occurrence of a separator.\n      * The separator is not returned.</p>\n      *\n-     * <p>A <code>null</code> string input will return <code>null</code>.\n+     * <p>A {@code null} string input will return {@code null}.\n      * An empty (\"\") string input will return the empty string.\n-     * A <code>null</code> separator will return the empty string if the\n-     * input string is not <code>null</code>.</p>\n+     * A {@code null} separator will return the empty string if the\n+     * input string is not {@code null}.</p>\n      *\n      * <p>If nothing is found, the empty string is returned.</p>\n      *\n      * @param str  the String to get a substring from, may be null\n      * @param separator  the String to search for, may be null\n      * @return the substring after the first occurrence of the separator,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      * @since 2.0\n      */\n     public static String substringAfter(String str, String separator) {\n      * <p>Gets the substring before the last occurrence of a separator.\n      * The separator is not returned.</p>\n      *\n-     * <p>A <code>null</code> string input will return <code>null</code>.\n+     * <p>A {@code null} string input will return {@code null}.\n      * An empty (\"\") string input will return the empty string.\n-     * An empty or <code>null</code> separator will return the input string.</p>\n+     * An empty or {@code null} separator will return the input string.</p>\n      *\n      * <p>If nothing is found, the string input is returned.</p>\n      *\n      * @param str  the String to get a substring from, may be null\n      * @param separator  the String to search for, may be null\n      * @return the substring before the last occurrence of the separator,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      * @since 2.0\n      */\n     public static String substringBeforeLast(String str, String separator) {\n      * <p>Gets the substring after the last occurrence of a separator.\n      * The separator is not returned.</p>\n      *\n-     * <p>A <code>null</code> string input will return <code>null</code>.\n+     * <p>A {@code null} string input will return {@code null}.\n      * An empty (\"\") string input will return the empty string.\n-     * An empty or <code>null</code> separator will return the empty string if\n-     * the input string is not <code>null</code>.</p>\n+     * An empty or {@code null} separator will return the empty string if\n+     * the input string is not {@code null}.</p>\n      *\n      * <p>If nothing is found, the empty string is returned.</p>\n      *\n      * @param str  the String to get a substring from, may be null\n      * @param separator  the String to search for, may be null\n      * @return the substring after the last occurrence of the separator,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      * @since 2.0\n      */\n     public static String substringAfterLast(String str, String separator) {\n      * <p>Gets the String that is nested in between two instances of the\n      * same String.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> tag returns <code>null</code>.</p>\n+     * <p>A {@code null} input String returns {@code null}.\n+     * A {@code null} tag returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.substringBetween(null, *)            = null\n      *\n      * @param str  the String containing the substring, may be null\n      * @param tag  the String before and after the substring, may be null\n-     * @return the substring, <code>null</code> if no match\n+     * @return the substring, {@code null} if no match\n      * @since 2.0\n      */\n     public static String substringBetween(String str, String tag) {\n      * <p>Gets the String that is nested in between two Strings.\n      * Only the first match is returned.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> open/close returns <code>null</code> (no match).\n+     * <p>A {@code null} input String returns {@code null}.\n+     * A {@code null} open/close returns {@code null} (no match).\n      * An empty (\"\") open and close returns an empty string.</p>\n      *\n      * <pre>\n      * @param str  the String containing the substring, may be null\n      * @param open  the String before the substring, may be null\n      * @param close  the String after the substring, may be null\n-     * @return the substring, <code>null</code> if no match\n+     * @return the substring, {@code null} if no match\n      * @since 2.0\n      */\n     public static String substringBetween(String str, String open, String close) {\n      * <p>Searches a String for substrings delimited by a start and end tag,\n      * returning all matching substrings in an array.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> open/close returns <code>null</code> (no match).\n-     * An empty (\"\") open/close returns <code>null</code> (no match).</p>\n+     * <p>A {@code null} input String returns {@code null}.\n+     * A {@code null} open/close returns {@code null} (no match).\n+     * An empty (\"\") open/close returns {@code null} (no match).</p>\n      *\n      * <pre>\n      * StringUtils.substringsBetween(\"[a][b][c]\", \"[\", \"]\") = [\"a\",\"b\",\"c\"]\n      * @param str  the String containing the substrings, null returns null, empty returns empty\n      * @param open  the String identifying the start of the substring, empty returns null\n      * @param close  the String identifying the end of the substring, empty returns null\n-     * @return a String Array of substrings, or <code>null</code> if no match\n+     * @return a String Array of substrings, or {@code null} if no match\n      * @since 2.3\n      */\n     public static String[] substringsBetween(String str, String open, String close) {\n      * Adjacent separators are treated as one separator.\n      * For more control over the split use the StrTokenizer class.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>A {@code null} input String returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.split(null)       = null\n      * </pre>\n      *\n      * @param str  the String to parse, may be null\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @return an array of parsed Strings, {@code null} if null String input\n      */\n     public static String[] split(String str) {\n         return split(str, null, -1);\n      * Adjacent separators are treated as one separator.\n      * For more control over the split use the StrTokenizer class.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>A {@code null} input String returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.split(null, *)         = null\n      *\n      * @param str  the String to parse, may be null\n      * @param separatorChar  the character used as the delimiter\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @return an array of parsed Strings, {@code null} if null String input\n      * @since 2.0\n      */\n     public static String[] split(String str, char separatorChar) {\n      * Adjacent separators are treated as one separator.\n      * For more control over the split use the StrTokenizer class.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> separatorChars splits on whitespace.</p>\n+     * <p>A {@code null} input String returns {@code null}.\n+     * A {@code null} separatorChars splits on whitespace.</p>\n      *\n      * <pre>\n      * StringUtils.split(null, *)         = null\n      *\n      * @param str  the String to parse, may be null\n      * @param separatorChars  the characters used as the delimiters,\n-     *  <code>null</code> splits on whitespace\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     *  {@code null} splits on whitespace\n+     * @return an array of parsed Strings, {@code null} if null String input\n      */\n     public static String[] split(String str, String separatorChars) {\n         return splitWorker(str, separatorChars, -1, false);\n      * <p>The separator is not included in the returned String array.\n      * Adjacent separators are treated as one separator.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> separatorChars splits on whitespace.</p>\n-     *\n-     * <p>If more than <code>max</code> delimited substrings are found, the last\n-     * returned string includes all characters after the first <code>max - 1</code>\n+     * <p>A {@code null} input String returns {@code null}.\n+     * A {@code null} separatorChars splits on whitespace.</p>\n+     *\n+     * <p>If more than {@code max} delimited substrings are found, the last\n+     * returned string includes all characters after the first {@code max - 1}\n      * returned strings (including separator characters).</p>\n      *\n      * <pre>\n      *\n      * @param str  the String to parse, may be null\n      * @param separatorChars  the characters used as the delimiters,\n-     *  <code>null</code> splits on whitespace\n+     *  {@code null} splits on whitespace\n      * @param max  the maximum number of elements to include in the\n      *  array. A zero or negative value implies no limit\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @return an array of parsed Strings, {@code null} if null String input\n      */\n     public static String[] split(String str, String separatorChars, int max) {\n         return splitWorker(str, separatorChars, max, false);\n      * <p>The separator(s) will not be included in the returned String array.\n      * Adjacent separators are treated as one separator.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> separator splits on whitespace.</p>\n+     * <p>A {@code null} input String returns {@code null}.\n+     * A {@code null} separator splits on whitespace.</p>\n      *\n      * <pre>\n      * StringUtils.splitByWholeSeparator(null, *)               = null\n      *\n      * @param str  the String to parse, may be null\n      * @param separator  String containing the String to be used as a delimiter,\n-     *  <code>null</code> splits on whitespace\n-     * @return an array of parsed Strings, <code>null</code> if null String was input\n+     *  {@code null} splits on whitespace\n+     * @return an array of parsed Strings, {@code null} if null String was input\n      */\n     public static String[] splitByWholeSeparator(String str, String separator) {\n         return splitByWholeSeparatorWorker( str, separator, -1, false ) ;\n \n     /**\n      * <p>Splits the provided text into an array, separator string specified.\n-     * Returns a maximum of <code>max</code> substrings.</p>\n+     * Returns a maximum of {@code max} substrings.</p>\n      *\n      * <p>The separator(s) will not be included in the returned String array.\n      * Adjacent separators are treated as one separator.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> separator splits on whitespace.</p>\n+     * <p>A {@code null} input String returns {@code null}.\n+     * A {@code null} separator splits on whitespace.</p>\n      *\n      * <pre>\n      * StringUtils.splitByWholeSeparator(null, *, *)               = null\n      *\n      * @param str  the String to parse, may be null\n      * @param separator  String containing the String to be used as a delimiter,\n-     *  <code>null</code> splits on whitespace\n+     *  {@code null} splits on whitespace\n      * @param max  the maximum number of elements to include in the returned\n      *  array. A zero or negative value implies no limit.\n-     * @return an array of parsed Strings, <code>null</code> if null String was input\n+     * @return an array of parsed Strings, {@code null} if null String was input\n      */\n     public static String[] splitByWholeSeparator( String str, String separator, int max ) {\n         return splitByWholeSeparatorWorker(str, separator, max, false);\n      * Adjacent separators are treated as separators for empty tokens.\n      * For more control over the split use the StrTokenizer class.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> separator splits on whitespace.</p>\n+     * <p>A {@code null} input String returns {@code null}.\n+     * A {@code null} separator splits on whitespace.</p>\n      *\n      * <pre>\n      * StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *)               = null\n      *\n      * @param str  the String to parse, may be null\n      * @param separator  String containing the String to be used as a delimiter,\n-     *  <code>null</code> splits on whitespace\n-     * @return an array of parsed Strings, <code>null</code> if null String was input\n+     *  {@code null} splits on whitespace\n+     * @return an array of parsed Strings, {@code null} if null String was input\n      * @since 2.4\n      */\n     public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator) {\n \n     /**\n      * <p>Splits the provided text into an array, separator string specified.\n-     * Returns a maximum of <code>max</code> substrings.</p>\n+     * Returns a maximum of {@code max} substrings.</p>\n      *\n      * <p>The separator is not included in the returned String array.\n      * Adjacent separators are treated as separators for empty tokens.\n      * For more control over the split use the StrTokenizer class.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> separator splits on whitespace.</p>\n+     * <p>A {@code null} input String returns {@code null}.\n+     * A {@code null} separator splits on whitespace.</p>\n      *\n      * <pre>\n      * StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *, *)               = null\n      *\n      * @param str  the String to parse, may be null\n      * @param separator  String containing the String to be used as a delimiter,\n-     *  <code>null</code> splits on whitespace\n+     *  {@code null} splits on whitespace\n      * @param max  the maximum number of elements to include in the returned\n      *  array. A zero or negative value implies no limit.\n-     * @return an array of parsed Strings, <code>null</code> if null String was input\n+     * @return an array of parsed Strings, {@code null} if null String was input\n      * @since 2.4\n      */\n     public static String[] splitByWholeSeparatorPreserveAllTokens(String str, String separator, int max) {\n     }\n \n     /**\n-     * Performs the logic for the <code>splitByWholeSeparatorPreserveAllTokens</code> methods.\n-     *\n-     * @param str  the String to parse, may be <code>null</code>\n+     * Performs the logic for the {@code splitByWholeSeparatorPreserveAllTokens} methods.\n+     *\n+     * @param str  the String to parse, may be {@code null}\n      * @param separator  String containing the String to be used as a delimiter,\n-     *  <code>null</code> splits on whitespace\n+     *  {@code null} splits on whitespace\n      * @param max  the maximum number of elements to include in the returned\n      *  array. A zero or negative value implies no limit.\n-     * @param preserveAllTokens if <code>true</code>, adjacent separators are\n-     * treated as empty token separators; if <code>false</code>, adjacent\n+     * @param preserveAllTokens if {@code true}, adjacent separators are\n+     * treated as empty token separators; if {@code false}, adjacent\n      * separators are treated as one separator.\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @return an array of parsed Strings, {@code null} if null String input\n      * @since 2.4\n      */\n     private static String[] splitByWholeSeparatorWorker(\n      * Adjacent separators are treated as separators for empty tokens.\n      * For more control over the split use the StrTokenizer class.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>A {@code null} input String returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.splitPreserveAllTokens(null)       = null\n      * StringUtils.splitPreserveAllTokens(\" abc \")    = [\"\", \"abc\", \"\"]\n      * </pre>\n      *\n-     * @param str  the String to parse, may be <code>null</code>\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @param str  the String to parse, may be {@code null}\n+     * @return an array of parsed Strings, {@code null} if null String input\n      * @since 2.1\n      */\n     public static String[] splitPreserveAllTokens(String str) {\n      * Adjacent separators are treated as separators for empty tokens.\n      * For more control over the split use the StrTokenizer class.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>A {@code null} input String returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.splitPreserveAllTokens(null, *)         = null\n      * StringUtils.splitPreserveAllTokens(\" a b c \", ' ')  = [\"\", a\", \"b\", \"c\", \"\"]\n      * </pre>\n      *\n-     * @param str  the String to parse, may be <code>null</code>\n+     * @param str  the String to parse, may be {@code null}\n      * @param separatorChar  the character used as the delimiter,\n-     *  <code>null</code> splits on whitespace\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     *  {@code null} splits on whitespace\n+     * @return an array of parsed Strings, {@code null} if null String input\n      * @since 2.1\n      */\n     public static String[] splitPreserveAllTokens(String str, char separatorChar) {\n     }\n \n     /**\n-     * Performs the logic for the <code>split</code> and\n-     * <code>splitPreserveAllTokens</code> methods that do not return a\n+     * Performs the logic for the {@code split} and\n+     * {@code splitPreserveAllTokens} methods that do not return a\n      * maximum array length.\n      *\n-     * @param str  the String to parse, may be <code>null</code>\n+     * @param str  the String to parse, may be {@code null}\n      * @param separatorChar the separate character\n-     * @param preserveAllTokens if <code>true</code>, adjacent separators are\n-     * treated as empty token separators; if <code>false</code>, adjacent\n+     * @param preserveAllTokens if {@code true}, adjacent separators are\n+     * treated as empty token separators; if {@code false}, adjacent\n      * separators are treated as one separator.\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @return an array of parsed Strings, {@code null} if null String input\n      */\n     private static String[] splitWorker(String str, char separatorChar, boolean preserveAllTokens) {\n         // Performance tuned for 2.0 (JDK1.4)\n      * Adjacent separators are treated as separators for empty tokens.\n      * For more control over the split use the StrTokenizer class.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> separatorChars splits on whitespace.</p>\n+     * <p>A {@code null} input String returns {@code null}.\n+     * A {@code null} separatorChars splits on whitespace.</p>\n      *\n      * <pre>\n      * StringUtils.splitPreserveAllTokens(null, *)           = null\n      * StringUtils.splitPreserveAllTokens(\":cd:ef:\", \":\")    = [\"\", cd\", \"ef\", \"\"]\n      * </pre>\n      *\n-     * @param str  the String to parse, may be <code>null</code>\n+     * @param str  the String to parse, may be {@code null}\n      * @param separatorChars  the characters used as the delimiters,\n-     *  <code>null</code> splits on whitespace\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     *  {@code null} splits on whitespace\n+     * @return an array of parsed Strings, {@code null} if null String input\n      * @since 2.1\n      */\n     public static String[] splitPreserveAllTokens(String str, String separatorChars) {\n      * Adjacent separators are treated as separators for empty tokens.\n      * Adjacent separators are treated as one separator.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.\n-     * A <code>null</code> separatorChars splits on whitespace.</p>\n-     *\n-     * <p>If more than <code>max</code> delimited substrings are found, the last\n-     * returned string includes all characters after the first <code>max - 1</code>\n+     * <p>A {@code null} input String returns {@code null}.\n+     * A {@code null} separatorChars splits on whitespace.</p>\n+     *\n+     * <p>If more than {@code max} delimited substrings are found, the last\n+     * returned string includes all characters after the first {@code max - 1}\n      * returned strings (including separator characters).</p>\n      *\n      * <pre>\n      * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4) = [\"ab\", \"\", \"\", \"de fg\"]\n      * </pre>\n      *\n-     * @param str  the String to parse, may be <code>null</code>\n+     * @param str  the String to parse, may be {@code null}\n      * @param separatorChars  the characters used as the delimiters,\n-     *  <code>null</code> splits on whitespace\n+     *  {@code null} splits on whitespace\n      * @param max  the maximum number of elements to include in the\n      *  array. A zero or negative value implies no limit\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @return an array of parsed Strings, {@code null} if null String input\n      * @since 2.1\n      */\n     public static String[] splitPreserveAllTokens(String str, String separatorChars, int max) {\n     }\n \n     /**\n-     * Performs the logic for the <code>split</code> and\n-     * <code>splitPreserveAllTokens</code> methods that return a maximum array\n+     * Performs the logic for the {@code split} and\n+     * {@code splitPreserveAllTokens} methods that return a maximum array\n      * length.\n      *\n-     * @param str  the String to parse, may be <code>null</code>\n+     * @param str  the String to parse, may be {@code null}\n      * @param separatorChars the separate character\n      * @param max  the maximum number of elements to include in the\n      *  array. A zero or negative value implies no limit.\n-     * @param preserveAllTokens if <code>true</code>, adjacent separators are\n-     * treated as empty token separators; if <code>false</code>, adjacent\n+     * @param preserveAllTokens if {@code true}, adjacent separators are\n+     * treated as empty token separators; if {@code false}, adjacent\n      * separators are treated as one separator.\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @return an array of parsed Strings, {@code null} if null String input\n      */\n     private static String[] splitWorker(String str, String separatorChars, int max, boolean preserveAllTokens) {\n         // Performance tuned for 2.0 (JDK1.4)\n \n     /**\n      * <p>Splits a String by Character type as returned by\n-     * <code>java.lang.Character.getType(char)</code>. Groups of contiguous\n+     * {@code java.lang.Character.getType(char)}. Groups of contiguous\n      * characters of the same type are returned as complete tokens.\n      * <pre>\n      * StringUtils.splitByCharacterType(null)         = null\n      * StringUtils.splitByCharacterType(\"foo200Bar\")  = [\"foo\", \"200\", \"B\", \"ar\"]\n      * StringUtils.splitByCharacterType(\"ASFRules\")   = [\"ASFR\", \"ules\"]\n      * </pre>\n-     * @param str the String to split, may be <code>null</code>\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @param str the String to split, may be {@code null}\n+     * @return an array of parsed Strings, {@code null} if null String input\n      * @since 2.4\n      */\n     public static String[] splitByCharacterType(String str) {\n \n     /**\n      * <p>Splits a String by Character type as returned by\n-     * <code>java.lang.Character.getType(char)</code>. Groups of contiguous\n+     * {@code java.lang.Character.getType(char)}. Groups of contiguous\n      * characters of the same type are returned as complete tokens, with the\n      * following exception: the character of type\n-     * <code>Character.UPPERCASE_LETTER</code>, if any, immediately\n-     * preceding a token of type <code>Character.LOWERCASE_LETTER</code>\n+     * {@code Character.UPPERCASE_LETTER}, if any, immediately\n+     * preceding a token of type {@code Character.LOWERCASE_LETTER}\n      * will belong to the following token rather than to the preceding, if any,\n-     * <code>Character.UPPERCASE_LETTER</code> token.\n+     * {@code Character.UPPERCASE_LETTER} token.\n      * <pre>\n      * StringUtils.splitByCharacterTypeCamelCase(null)         = null\n      * StringUtils.splitByCharacterTypeCamelCase(\"\")           = []\n      * StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")  = [\"foo\", \"200\", \"Bar\"]\n      * StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")   = [\"ASF\", \"Rules\"]\n      * </pre>\n-     * @param str the String to split, may be <code>null</code>\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @param str the String to split, may be {@code null}\n+     * @return an array of parsed Strings, {@code null} if null String input\n      * @since 2.4\n      */\n     public static String[] splitByCharacterTypeCamelCase(String str) {\n \n     /**\n      * <p>Splits a String by Character type as returned by\n-     * <code>java.lang.Character.getType(char)</code>. Groups of contiguous\n+     * {@code java.lang.Character.getType(char)}. Groups of contiguous\n      * characters of the same type are returned as complete tokens, with the\n-     * following exception: if <code>camelCase</code> is <code>true</code>,\n-     * the character of type <code>Character.UPPERCASE_LETTER</code>, if any,\n-     * immediately preceding a token of type <code>Character.LOWERCASE_LETTER</code>\n+     * following exception: if {@code camelCase} is {@code true},\n+     * the character of type {@code Character.UPPERCASE_LETTER}, if any,\n+     * immediately preceding a token of type {@code Character.LOWERCASE_LETTER}\n      * will belong to the following token rather than to the preceding, if any,\n-     * <code>Character.UPPERCASE_LETTER</code> token.\n-     * @param str the String to split, may be <code>null</code>\n+     * {@code Character.UPPERCASE_LETTER} token.\n+     * @param str the String to split, may be {@code null}\n      * @param camelCase whether to use so-called \"camel-case\" for letter types\n-     * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @return an array of parsed Strings, {@code null} if null String input\n      * @since 2.4\n      */\n     private static String[] splitByCharacterType(String str, boolean camelCase) {\n      * </pre>\n      *\n      * @param array  the array of values to join together, may be null\n-     * @return the joined String, <code>null</code> if null array input\n+     * @return the joined String, {@code null} if null array input\n      * @since 2.0\n      */\n     public static String join(Object[] array) {\n      *\n      * @param array  the array of values to join together, may be null\n      * @param separator  the separator character to use\n-     * @return the joined String, <code>null</code> if null array input\n+     * @return the joined String, {@code null} if null array input\n      * @since 2.0\n      */\n     public static String join(Object[] array, char separator) {\n      * an error to pass in an end index past the end of the array\n      * @param endIndex the index to stop joining from (exclusive). It is\n      * an error to pass in an end index past the end of the array\n-     * @return the joined String, <code>null</code> if null array input\n+     * @return the joined String, {@code null} if null array input\n      * @since 2.0\n      */\n     public static String join(Object[] array, char separator, int startIndex, int endIndex) {\n      * containing the provided list of elements.</p>\n      *\n      * <p>No delimiter is added before or after the list.\n-     * A <code>null</code> separator is the same as an empty String (\"\").\n+     * A {@code null} separator is the same as an empty String (\"\").\n      * Null objects or empty strings within the array are represented by\n      * empty strings.</p>\n      *\n      *\n      * @param array  the array of values to join together, may be null\n      * @param separator  the separator character to use, null treated as \"\"\n-     * @return the joined String, <code>null</code> if null array input\n+     * @return the joined String, {@code null} if null array input\n      */\n     public static String join(Object[] array, String separator) {\n         if (array == null) {\n      * containing the provided list of elements.</p>\n      *\n      * <p>No delimiter is added before or after the list.\n-     * A <code>null</code> separator is the same as an empty String (\"\").\n+     * A {@code null} separator is the same as an empty String (\"\").\n      * Null objects or empty strings within the array are represented by\n      * empty strings.</p>\n      *\n      * an error to pass in an end index past the end of the array\n      * @param endIndex the index to stop joining from (exclusive). It is\n      * an error to pass in an end index past the end of the array\n-     * @return the joined String, <code>null</code> if null array input\n+     * @return the joined String, {@code null} if null array input\n      */\n     public static String join(Object[] array, String separator, int startIndex, int endIndex) {\n         if (array == null) {\n     }\n \n     /**\n-     * <p>Joins the elements of the provided <code>Iterator</code> into\n+     * <p>Joins the elements of the provided {@code Iterator} into\n      * a single String containing the provided elements.</p>\n      *\n      * <p>No delimiter is added before or after the list. Null objects or empty\n      *\n      * <p>See the examples here: {@link #join(Object[],char)}. </p>\n      *\n-     * @param iterator  the <code>Iterator</code> of values to join together, may be null\n+     * @param iterator  the {@code Iterator} of values to join together, may be null\n      * @param separator  the separator character to use\n-     * @return the joined String, <code>null</code> if null iterator input\n+     * @return the joined String, {@code null} if null iterator input\n      * @since 2.0\n      */\n     public static String join(Iterator<?> iterator, char separator) {\n     }\n \n     /**\n-     * <p>Joins the elements of the provided <code>Iterator</code> into\n+     * <p>Joins the elements of the provided {@code Iterator} into\n      * a single String containing the provided elements.</p>\n      *\n      * <p>No delimiter is added before or after the list.\n-     * A <code>null</code> separator is the same as an empty String (\"\").</p>\n+     * A {@code null} separator is the same as an empty String (\"\").</p>\n      *\n      * <p>See the examples here: {@link #join(Object[],String)}. </p>\n      *\n-     * @param iterator  the <code>Iterator</code> of values to join together, may be null\n+     * @param iterator  the {@code Iterator} of values to join together, may be null\n      * @param separator  the separator character to use, null treated as \"\"\n-     * @return the joined String, <code>null</code> if null iterator input\n+     * @return the joined String, {@code null} if null iterator input\n      */\n     public static String join(Iterator<?> iterator, String separator) {\n \n     }\n \n     /**\n-     * <p>Joins the elements of the provided <code>Iterable</code> into\n+     * <p>Joins the elements of the provided {@code Iterable} into\n      * a single String containing the provided elements.</p>\n      *\n      * <p>No delimiter is added before or after the list. Null objects or empty\n      *\n      * <p>See the examples here: {@link #join(Object[],char)}. </p>\n      *\n-     * @param iterable  the <code>Iterable</code> providing the values to join together, may be null\n+     * @param iterable  the {@code Iterable} providing the values to join together, may be null\n      * @param separator  the separator character to use\n-     * @return the joined String, <code>null</code> if null iterator input\n+     * @return the joined String, {@code null} if null iterator input\n      * @since 2.3\n      */\n     public static String join(Iterable<?> iterable, char separator) {\n     }\n \n     /**\n-     * <p>Joins the elements of the provided <code>Iterable</code> into\n+     * <p>Joins the elements of the provided {@code Iterable} into\n      * a single String containing the provided elements.</p>\n      *\n      * <p>No delimiter is added before or after the list.\n-     * A <code>null</code> separator is the same as an empty String (\"\").</p>\n+     * A {@code null} separator is the same as an empty String (\"\").</p>\n      *\n      * <p>See the examples here: {@link #join(Object[],String)}. </p>\n      *\n-     * @param iterable  the <code>Iterable</code> providing the values to join together, may be null\n+     * @param iterable  the {@code Iterable} providing the values to join together, may be null\n      * @param separator  the separator character to use, null treated as \"\"\n-     * @return the joined String, <code>null</code> if null iterator input\n+     * @return the joined String, {@code null} if null iterator input\n      * @since 2.3\n      */\n     public static String join(Iterable<?> iterable, String separator) {\n      * </pre>\n      *\n      * @param str  the String to delete whitespace from, may be null\n-     * @return the String without whitespaces, <code>null</code> if null String input\n+     * @return the String without whitespaces, {@code null} if null String input\n      */\n     public static String deleteWhitespace(String str) {\n         if (isEmpty(str)) {\n      * <p>Removes a substring only if it is at the begining of a source string,\n      * otherwise returns the source string.</p>\n      *\n-     * <p>A <code>null</code> source string will return <code>null</code>.\n+     * <p>A {@code null} source string will return {@code null}.\n      * An empty (\"\") source string will return the empty string.\n-     * A <code>null</code> search string will return the source string.</p>\n+     * A {@code null} search string will return the source string.</p>\n      *\n      * <pre>\n      * StringUtils.removeStart(null, *)      = null\n      * @param str  the source String to search, may be null\n      * @param remove  the String to search for and remove, may be null\n      * @return the substring with the string removed if found,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      * @since 2.1\n      */\n     public static String removeStart(String str, String remove) {\n      * <p>Case insensitive removal of a substring if it is at the begining of a source string,\n      * otherwise returns the source string.</p>\n      *\n-     * <p>A <code>null</code> source string will return <code>null</code>.\n+     * <p>A {@code null} source string will return {@code null}.\n      * An empty (\"\") source string will return the empty string.\n-     * A <code>null</code> search string will return the source string.</p>\n+     * A {@code null} search string will return the source string.</p>\n      *\n      * <pre>\n      * StringUtils.removeStartIgnoreCase(null, *)      = null\n      * @param str  the source String to search, may be null\n      * @param remove  the String to search for (case insensitive) and remove, may be null\n      * @return the substring with the string removed if found,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      * @since 2.4\n      */\n     public static String removeStartIgnoreCase(String str, String remove) {\n      * <p>Removes a substring only if it is at the end of a source string,\n      * otherwise returns the source string.</p>\n      *\n-     * <p>A <code>null</code> source string will return <code>null</code>.\n+     * <p>A {@code null} source string will return {@code null}.\n      * An empty (\"\") source string will return the empty string.\n-     * A <code>null</code> search string will return the source string.</p>\n+     * A {@code null} search string will return the source string.</p>\n      *\n      * <pre>\n      * StringUtils.removeEnd(null, *)      = null\n      * @param str  the source String to search, may be null\n      * @param remove  the String to search for and remove, may be null\n      * @return the substring with the string removed if found,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      * @since 2.1\n      */\n     public static String removeEnd(String str, String remove) {\n      * <p>Case insensitive removal of a substring if it is at the end of a source string,\n      * otherwise returns the source string.</p>\n      *\n-     * <p>A <code>null</code> source string will return <code>null</code>.\n+     * <p>A {@code null} source string will return {@code null}.\n      * An empty (\"\") source string will return the empty string.\n-     * A <code>null</code> search string will return the source string.</p>\n+     * A {@code null} search string will return the source string.</p>\n      *\n      * <pre>\n      * StringUtils.removeEndIgnoreCase(null, *)      = null\n      * @param str  the source String to search, may be null\n      * @param remove  the String to search for (case insensitive) and remove, may be null\n      * @return the substring with the string removed if found,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      * @since 2.4\n      */\n     public static String removeEndIgnoreCase(String str, String remove) {\n     /**\n      * <p>Removes all occurrences of a substring from within the source string.</p>\n      *\n-     * <p>A <code>null</code> source string will return <code>null</code>.\n+     * <p>A {@code null} source string will return {@code null}.\n      * An empty (\"\") source string will return the empty string.\n-     * A <code>null</code> remove string will return the source string.\n+     * A {@code null} remove string will return the source string.\n      * An empty (\"\") remove string will return the source string.</p>\n      *\n      * <pre>\n      * @param str  the source String to search, may be null\n      * @param remove  the String to search for and remove, may be null\n      * @return the substring with the string removed if found,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      * @since 2.1\n      */\n     public static String remove(String str, String remove) {\n     /**\n      * <p>Removes all occurrences of a character from within the source string.</p>\n      *\n-     * <p>A <code>null</code> source string will return <code>null</code>.\n+     * <p>A {@code null} source string will return {@code null}.\n      * An empty (\"\") source string will return the empty string.</p>\n      *\n      * <pre>\n      * @param str  the source String to search, may be null\n      * @param remove  the char to search for and remove, may be null\n      * @return the substring with the char removed if found,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      * @since 2.1\n      */\n     public static String remove(String str, char remove) {\n     /**\n      * <p>Replaces a String with another String inside a larger String, once.</p>\n      *\n-     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n+     * <p>A {@code null} reference passed to this method is a no-op.</p>\n      *\n      * <pre>\n      * StringUtils.replaceOnce(null, *, *)        = null\n      * @param searchString  the String to search for, may be null\n      * @param replacement  the String to replace with, may be null\n      * @return the text with any replacements processed,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      */\n     public static String replaceOnce(String text, String searchString, String replacement) {\n         return replace(text, searchString, replacement, 1);\n     /**\n      * <p>Replaces all occurrences of a String within another String.</p>\n      *\n-     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n+     * <p>A {@code null} reference passed to this method is a no-op.</p>\n      *\n      * <pre>\n      * StringUtils.replace(null, *, *)        = null\n      * @param searchString  the String to search for, may be null\n      * @param replacement  the String to replace it with, may be null\n      * @return the text with any replacements processed,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      */\n     public static String replace(String text, String searchString, String replacement) {\n         return replace(text, searchString, replacement, -1);\n \n     /**\n      * <p>Replaces a String with another String inside a larger String,\n-     * for the first <code>max</code> values of the search String.</p>\n-     *\n-     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n+     * for the first {@code max} values of the search String.</p>\n+     *\n+     * <p>A {@code null} reference passed to this method is a no-op.</p>\n      *\n      * <pre>\n      * StringUtils.replace(null, *, *, *)         = null\n      * @param text  text to search and replace in, may be null\n      * @param searchString  the String to search for, may be null\n      * @param replacement  the String to replace it with, may be null\n-     * @param max  maximum number of values to replace, or <code>-1</code> if no maximum\n+     * @param max  maximum number of values to replace, or {@code -1} if no maximum\n      * @return the text with any replacements processed,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      */\n     public static String replace(String text, String searchString, String replacement, int max) {\n         if (isEmpty(text) || isEmpty(searchString) || replacement == null || max == 0) {\n      * </p>\n      *\n      * <p>\n-     * A <code>null</code> reference passed to this method is a no-op, or if\n+     * A {@code null} reference passed to this method is a no-op, or if\n      * any \"search string\" or \"string to replace\" is null, that replace will be\n      * ignored. This will not repeat. For repeating replaces, call the\n      * overloaded method.\n      *            the Strings to search for, no-op if null\n      * @param replacementList\n      *            the Strings to replace them with, no-op if null\n-     * @return the text with any replacements processed, <code>null</code> if\n+     * @return the text with any replacements processed, {@code null} if\n      *         null String input\n      * @throws IndexOutOfBoundsException\n      *             if the lengths of the arrays are not the same (null is ok,\n      * </p>\n      *\n      * <p>\n-     * A <code>null</code> reference passed to this method is a no-op, or if\n+     * A {@code null} reference passed to this method is a no-op, or if\n      * any \"search string\" or \"string to replace\" is null, that replace will be\n      * ignored. This will not repeat. For repeating replaces, call the\n      * overloaded method.\n      *            the Strings to search for, no-op if null\n      * @param replacementList\n      *            the Strings to replace them with, no-op if null\n-     * @return the text with any replacements processed, <code>null</code> if\n+     * @return the text with any replacements processed, {@code null} if\n      *         null String input\n      * @throws IllegalArgumentException\n      *             if the search is repeating and there is an endless loop due\n      * </p>\n      *\n      * <p>\n-     * A <code>null</code> reference passed to this method is a no-op, or if\n+     * A {@code null} reference passed to this method is a no-op, or if\n      * any \"search string\" or \"string to replace\" is null, that replace will be\n      * ignored.\n      * </p>\n      * @param timeToLive\n      *            if less than 0 then there is a circular reference and endless\n      *            loop\n-     * @return the text with any replacements processed, <code>null</code> if\n+     * @return the text with any replacements processed, {@code null} if\n      *         null String input\n      * @throws IllegalArgumentException\n      *             if the search is repeating and there is an endless loop due\n      * <p>Replaces all occurrences of a character in a String with another.\n      * This is a null-safe version of {@link String#replace(char, char)}.</p>\n      *\n-     * <p>A <code>null</code> string input returns <code>null</code>.\n+     * <p>A {@code null} string input returns {@code null}.\n      * An empty (\"\") string input returns an empty string.</p>\n      *\n      * <pre>\n      * @param str  String to replace characters in, may be null\n      * @param searchChar  the character to search for, may be null\n      * @param replaceChar  the character to replace, may be null\n-     * @return modified String, <code>null</code> if null string input\n+     * @return modified String, {@code null} if null string input\n      * @since 2.0\n      */\n     public static String replaceChars(String str, char searchChar, char replaceChar) {\n      * <p>For example:<br />\n      * <code>replaceChars(&quot;hello&quot;, &quot;ho&quot;, &quot;jy&quot;) = jelly</code>.</p>\n      *\n-     * <p>A <code>null</code> string input returns <code>null</code>.\n+     * <p>A {@code null} string input returns {@code null}.\n      * An empty (\"\") string input returns an empty string.\n      * A null or empty set of search characters returns the input string.</p>\n      *\n      * @param str  String to replace characters in, may be null\n      * @param searchChars  a set of characters to search for, may be null\n      * @param replaceChars  a set of characters to replace, may be null\n-     * @return modified String, <code>null</code> if null string input\n+     * @return modified String, {@code null} if null string input\n      * @since 2.0\n      */\n     public static String replaceChars(String str, String searchChars, String replaceChars) {\n     /**\n      * <p>Overlays part of a String with another String.</p>\n      *\n-     * <p>A <code>null</code> string input returns <code>null</code>.\n+     * <p>A {@code null} string input returns {@code null}.\n      * A negative index is treated as zero.\n      * An index greater than the string length is treated as the string length.\n      * The start index is always the smaller of the two indices.</p>\n      * @param overlay  the String to overlay, may be null\n      * @param start  the position to start overlaying at\n      * @param end  the position to stop overlaying before\n-     * @return overlayed String, <code>null</code> if null String input\n+     * @return overlayed String, {@code null} if null String input\n      * @since 2.0\n      */\n     public static String overlay(String str, String overlay, int start, int end) {\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Removes one newline from end of a String if it's there,\n-     * otherwise leave it alone.  A newline is &quot;<code>\\n</code>&quot;,\n-     * &quot;<code>\\r</code>&quot;, or &quot;<code>\\r\\n</code>&quot;.</p>\n+     * otherwise leave it alone.  A newline is &quot;{@code \\n}&quot;,\n+     * &quot;{@code \\r}&quot;, or &quot;{@code \\r\\n}&quot;.</p>\n      *\n      * <p>NOTE: This method changed in 2.0.\n      * It now more closely matches Perl chomp.</p>\n      * </pre>\n      *\n      * @param str  the String to chomp a newline from, may be null\n-     * @return String without newline, <code>null</code> if null String input\n+     * @return String without newline, {@code null} if null String input\n      */\n     public static String chomp(String str) {\n         if (isEmpty(str)) {\n     }\n \n     /**\n-     * <p>Removes <code>separator</code> from the end of\n-     * <code>str</code> if it's there, otherwise leave it alone.</p>\n+     * <p>Removes {@code separator} from the end of\n+     * {@code str} if it's there, otherwise leave it alone.</p>\n      *\n      * <p>NOTE: This method changed in version 2.0.\n      * It now more closely matches Perl chomp.\n      *\n      * @param str  the String to chomp from, may be null\n      * @param separator  separator String, may be null\n-     * @return String without trailing separator, <code>null</code> if null String input\n+     * @return String without trailing separator, {@code null} if null String input\n      */\n     public static String chomp(String str, String separator) {\n         if (isEmpty(str) || separator == null) {\n     /**\n      * <p>Remove the last character from a String.</p>\n      *\n-     * <p>If the String ends in <code>\\r\\n</code>, then remove both\n+     * <p>If the String ends in {@code \\r\\n}, then remove both\n      * of them.</p>\n      *\n      * <pre>\n      * </pre>\n      *\n      * @param str  the String to chop last character from, may be null\n-     * @return String without last character, <code>null</code> if null String input\n+     * @return String without last character, {@code null} if null String input\n      */\n     public static String chop(String str) {\n         if (str == null) {\n     // Padding\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Repeat a String <code>repeat</code> times to form a\n+     * <p>Repeat a String {@code repeat} times to form a\n      * new String.</p>\n      *\n      * <pre>\n      * @param str  the String to repeat, may be null\n      * @param repeat  number of times to repeat str, negative treated as zero\n      * @return a new String consisting of the original String repeated,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      */\n     public static String repeat(String str, int repeat) {\n         // Performance tuned for 2.0 (JDK1.4)\n     }\n \n     /**\n-     * <p>Repeat a String <code>repeat</code> times to form a\n+     * <p>Repeat a String {@code repeat} times to form a\n      * new String, with a String separator injected each time. </p>\n      *\n      * <pre>\n      * @param separator  the String to inject, may be null\n      * @param repeat     number of times to repeat str, negative treated as zero\n      * @return a new String consisting of the original String repeated,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      * @since 2.5\n      */\n     public static String repeat(String str, String separator, int repeat) {\n      *\n      * <p>Note: this method doesn't not support padding with\n      * <a href=\"http://www.unicode.org/glossary/#supplementary_character\">Unicode Supplementary Characters</a>\n-     * as they require a pair of <code>char</code>s to be represented.\n+     * as they require a pair of {@code char}s to be represented.\n      * If you are needing to support full I18N of your applications\n      * consider using {@link #repeat(String, int)} instead.\n      * </p>\n     /**\n      * <p>Right pad a String with spaces (' ').</p>\n      *\n-     * <p>The String is padded to the size of <code>size</code>.</p>\n+     * <p>The String is padded to the size of {@code size}.</p>\n      *\n      * <pre>\n      * StringUtils.rightPad(null, *)   = null\n      * @param str  the String to pad out, may be null\n      * @param size  the size to pad to\n      * @return right padded String or original String if no padding is necessary,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      */\n     public static String rightPad(String str, int size) {\n         return rightPad(str, size, ' ');\n     /**\n      * <p>Right pad a String with a specified character.</p>\n      *\n-     * <p>The String is padded to the size of <code>size</code>.</p>\n+     * <p>The String is padded to the size of {@code size}.</p>\n      *\n      * <pre>\n      * StringUtils.rightPad(null, *, *)     = null\n      * @param size  the size to pad to\n      * @param padChar  the character to pad with\n      * @return right padded String or original String if no padding is necessary,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      * @since 2.0\n      */\n     public static String rightPad(String str, int size, char padChar) {\n     /**\n      * <p>Right pad a String with a specified String.</p>\n      *\n-     * <p>The String is padded to the size of <code>size</code>.</p>\n+     * <p>The String is padded to the size of {@code size}.</p>\n      *\n      * <pre>\n      * StringUtils.rightPad(null, *, *)      = null\n      * @param size  the size to pad to\n      * @param padStr  the String to pad with, null or empty treated as single space\n      * @return right padded String or original String if no padding is necessary,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      */\n     public static String rightPad(String str, int size, String padStr) {\n         if (str == null) {\n     /**\n      * <p>Left pad a String with spaces (' ').</p>\n      *\n-     * <p>The String is padded to the size of <code>size</code>.</p>\n+     * <p>The String is padded to the size of {@code size}.</p>\n      *\n      * <pre>\n      * StringUtils.leftPad(null, *)   = null\n      * @param str  the String to pad out, may be null\n      * @param size  the size to pad to\n      * @return left padded String or original String if no padding is necessary,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      */\n     public static String leftPad(String str, int size) {\n         return leftPad(str, size, ' ');\n     /**\n      * <p>Left pad a String with a specified character.</p>\n      *\n-     * <p>Pad to a size of <code>size</code>.</p>\n+     * <p>Pad to a size of {@code size}.</p>\n      *\n      * <pre>\n      * StringUtils.leftPad(null, *, *)     = null\n      * @param size  the size to pad to\n      * @param padChar  the character to pad with\n      * @return left padded String or original String if no padding is necessary,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      * @since 2.0\n      */\n     public static String leftPad(String str, int size, char padChar) {\n     /**\n      * <p>Left pad a String with a specified String.</p>\n      *\n-     * <p>Pad to a size of <code>size</code>.</p>\n+     * <p>Pad to a size of {@code size}.</p>\n      *\n      * <pre>\n      * StringUtils.leftPad(null, *, *)      = null\n      * @param size  the size to pad to\n      * @param padStr  the String to pad with, null or empty treated as single space\n      * @return left padded String or original String if no padding is necessary,\n-     *  <code>null</code> if null String input\n+     *  {@code null} if null String input\n      */\n     public static String leftPad(String str, int size, String padStr) {\n         if (str == null) {\n     }\n \n     /**\n-     * Gets a CharSequence length or <code>0</code> if the CharSequence is\n-     * <code>null</code>.\n+     * Gets a CharSequence length or {@code 0} if the CharSequence is\n+     * {@code null}.\n      *\n      * @param cs\n-     *            a CharSequence or <code>null</code>\n-     * @return CharSequence length or <code>0</code> if the CharSequence is\n-     *         <code>null</code>.\n+     *            a CharSequence or {@code null}\n+     * @return CharSequence length or {@code 0} if the CharSequence is\n+     *         {@code null}.\n      * @since 2.4\n      * @since 3.0 Changed signature from length(String) to length(CharSequence)\n      */\n     // Centering\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Centers a String in a larger String of size <code>size</code>\n+     * <p>Centers a String in a larger String of size {@code size}\n      * using the space character (' ').<p>\n      *\n      * <p>If the size is less than the String length, the String is returned.\n-     * A <code>null</code> String returns <code>null</code>.\n+     * A {@code null} String returns {@code null}.\n      * A negative size is treated as zero.</p>\n      *\n-     * <p>Equivalent to <code>center(str, size, \" \")</code>.</p>\n+     * <p>Equivalent to {@code center(str, size, \" \")}.</p>\n      *\n      * <pre>\n      * StringUtils.center(null, *)   = null\n      *\n      * @param str  the String to center, may be null\n      * @param size  the int size of new String, negative treated as zero\n-     * @return centered String, <code>null</code> if null String input\n+     * @return centered String, {@code null} if null String input\n      */\n     public static String center(String str, int size) {\n         return center(str, size, ' ');\n     }\n \n     /**\n-     * <p>Centers a String in a larger String of size <code>size</code>.\n+     * <p>Centers a String in a larger String of size {@code size}.\n      * Uses a supplied character as the value to pad the String with.</p>\n      *\n      * <p>If the size is less than the String length, the String is returned.\n-     * A <code>null</code> String returns <code>null</code>.\n+     * A {@code null} String returns {@code null}.\n      * A negative size is treated as zero.</p>\n      *\n      * <pre>\n      * @param str  the String to center, may be null\n      * @param size  the int size of new String, negative treated as zero\n      * @param padChar  the character to pad the new String with\n-     * @return centered String, <code>null</code> if null String input\n+     * @return centered String, {@code null} if null String input\n      * @since 2.0\n      */\n     public static String center(String str, int size, char padChar) {\n     }\n \n     /**\n-     * <p>Centers a String in a larger String of size <code>size</code>.\n+     * <p>Centers a String in a larger String of size {@code size}.\n      * Uses a supplied String as the value to pad the String with.</p>\n      *\n      * <p>If the size is less than the String length, the String is returned.\n-     * A <code>null</code> String returns <code>null</code>.\n+     * A {@code null} String returns {@code null}.\n      * A negative size is treated as zero.</p>\n      *\n      * <pre>\n      * @param str  the String to center, may be null\n      * @param size  the int size of new String, negative treated as zero\n      * @param padStr  the String to pad the new String with, must not be null or empty\n-     * @return centered String, <code>null</code> if null String input\n-     * @throws IllegalArgumentException if padStr is <code>null</code> or empty\n+     * @return centered String, {@code null} if null String input\n+     * @throws IllegalArgumentException if padStr is {@code null} or empty\n      */\n     public static String center(String str, int size, String padStr) {\n         if (str == null || size <= 0) {\n     /**\n      * <p>Converts a String to upper case as per {@link String#toUpperCase()}.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>A {@code null} input String returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.upperCase(null)  = null\n      * should be used with a specific locale (e.g. {@link Locale#ENGLISH}).</p>\n      *\n      * @param str  the String to upper case, may be null\n-     * @return the upper cased String, <code>null</code> if null String input\n+     * @return the upper cased String, {@code null} if null String input\n      */\n     public static String upperCase(String str) {\n         if (str == null) {\n     /**\n      * <p>Converts a String to upper case as per {@link String#toUpperCase(Locale)}.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>A {@code null} input String returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.upperCase(null, Locale.ENGLISH)  = null\n      *\n      * @param str  the String to upper case, may be null\n      * @param locale  the locale that defines the case transformation rules, must not be null\n-     * @return the upper cased String, <code>null</code> if null String input\n+     * @return the upper cased String, {@code null} if null String input\n      * @since 2.5\n      */\n     public static String upperCase(String str, Locale locale) {\n     /**\n      * <p>Converts a String to lower case as per {@link String#toLowerCase()}.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>A {@code null} input String returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.lowerCase(null)  = null\n      * should be used with a specific locale (e.g. {@link Locale#ENGLISH}).</p>\n      *\n      * @param str  the String to lower case, may be null\n-     * @return the lower cased String, <code>null</code> if null String input\n+     * @return the lower cased String, {@code null} if null String input\n      */\n     public static String lowerCase(String str) {\n         if (str == null) {\n     /**\n      * <p>Converts a String to lower case as per {@link String#toLowerCase(Locale)}.</p>\n      *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * <p>A {@code null} input String returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.lowerCase(null, Locale.ENGLISH)  = null\n      *\n      * @param str  the String to lower case, may be null\n      * @param locale  the locale that defines the case transformation rules, must not be null\n-     * @return the lower cased String, <code>null</code> if null String input\n+     * @return the lower cased String, {@code null} if null String input\n      * @since 2.5\n      */\n     public static String lowerCase(String str, Locale locale) {\n      * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n      *\n      * <p>For a word based algorithm, see {@link org.apache.commons.lang3.text.WordUtils#capitalize(String)}.\n-     * A <code>null</code> input String returns <code>null</code>.</p>\n+     * A {@code null} input String returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.capitalize(null)  = null\n      * </pre>\n      *\n      * @param cs the String to capitalize, may be null\n-     * @return the capitalized String, <code>null</code> if null String input\n+     * @return the capitalized String, {@code null} if null String input\n      * @see org.apache.commons.lang3.text.WordUtils#capitalize(String)\n      * @see #uncapitalize(CharSequence)\n      * @since 2.0\n      * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n      *\n      * <p>For a word based algorithm, see {@link org.apache.commons.lang3.text.WordUtils#uncapitalize(String)}.\n-     * A <code>null</code> input String returns <code>null</code>.</p>\n+     * A {@code null} input String returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.uncapitalize(null)  = null\n      * </pre>\n      *\n      * @param cs the String to uncapitalize, may be null\n-     * @return the uncapitalized String, <code>null</code> if null String input\n+     * @return the uncapitalized String, {@code null} if null String input\n      * @see org.apache.commons.lang3.text.WordUtils#uncapitalize(String)\n      * @see #capitalize(CharSequence)\n      * @since 2.0\n      * </ul>\n      *\n      * <p>For a word based algorithm, see {@link org.apache.commons.lang3.text.WordUtils#swapCase(String)}.\n-     * A <code>null</code> input String returns <code>null</code>.</p>\n+     * A {@code null} input String returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.swapCase(null)                 = null\n      * That functionality is available in org.apache.commons.lang3.text.WordUtils.</p>\n      *\n      * @param str  the String to swap case, may be null\n-     * @return the changed String, <code>null</code> if null String input\n+     * @return the changed String, {@code null} if null String input\n      */\n     public static String swapCase(String str) {\n         int strLen;\n     /**\n      * <p>Counts how many times the substring appears in the larger String.</p>\n      *\n-     * <p>A <code>null</code> or empty (\"\") String input returns <code>0</code>.</p>\n+     * <p>A {@code null} or empty (\"\") String input returns {@code 0}.</p>\n      *\n      * <pre>\n      * StringUtils.countMatches(null, *)       = 0\n      *\n      * @param str  the String to check, may be null\n      * @param sub  the substring to count, may be null\n-     * @return the number of occurrences, 0 if either String is <code>null</code>\n+     * @return the number of occurrences, 0 if either String is {@code null}\n      */\n     public static int countMatches(String str, String sub) {\n         if (isEmpty(str) || isEmpty(sub)) {\n     /**\n      * <p>Checks if the CharSequence contains only unicode letters.</p>\n      *\n-     * <p><code>null</code> will return <code>false</code>.\n-     * An empty CharSequence (length()=0) will return <code>false</code>.</p>\n+     * <p>{@code null} will return {@code false}.\n+     * An empty CharSequence (length()=0) will return {@code false}.</p>\n      *\n      * <pre>\n      * StringUtils.isAlpha(null)   = false\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n-     * @return <code>true</code> if only contains letters, and is non-null\n+     * @return {@code true} if only contains letters, and is non-null\n      * @since 3.0 Changed signature from isAlpha(String) to isAlpha(CharSequence)\n      * @since 3.0 Changed \"\" to return false and not true\n      */\n      * <p>Checks if the CharSequence contains only unicode letters and\n      * space (' ').</p>\n      *\n-     * <p><code>null</code> will return <code>false</code>\n-     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n+     * <p>{@code null} will return {@code false}\n+     * An empty CharSequence (length()=0) will return {@code true}.</p>\n      *\n      * <pre>\n      * StringUtils.isAlphaSpace(null)   = false\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n-     * @return <code>true</code> if only contains letters and space,\n+     * @return {@code true} if only contains letters and space,\n      *  and is non-null\n      * @since 3.0 Changed signature from isAlphaSpace(String) to isAlphaSpace(CharSequence)\n      */\n     /**\n      * <p>Checks if the CharSequence contains only unicode letters or digits.</p>\n      *\n-     * <p><code>null</code> will return <code>false</code>.\n-     * An empty CharSequence (length()=0) will return <code>false</code>.</p>\n+     * <p>{@code null} will return {@code false}.\n+     * An empty CharSequence (length()=0) will return {@code false}.</p>\n      *\n      * <pre>\n      * StringUtils.isAlphanumeric(null)   = false\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n-     * @return <code>true</code> if only contains letters or digits,\n+     * @return {@code true} if only contains letters or digits,\n      *  and is non-null\n      * @since 3.0 Changed signature from isAlphanumeric(String) to isAlphanumeric(CharSequence)\n      * @since 3.0 Changed \"\" to return false and not true\n \n     /**\n      * <p>Checks if the CharSequence contains only unicode letters, digits\n-     * or space (<code>' '</code>).</p>\n-     *\n-     * <p><code>null</code> will return <code>false</code>.\n-     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n+     * or space ({@code ' '}).</p>\n+     *\n+     * <p>{@code null} will return {@code false}.\n+     * An empty CharSequence (length()=0) will return {@code true}.</p>\n      *\n      * <pre>\n      * StringUtils.isAlphanumericSpace(null)   = false\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n-     * @return <code>true</code> if only contains letters, digits or space,\n+     * @return {@code true} if only contains letters, digits or space,\n      *  and is non-null\n      * @since 3.0 Changed signature from isAlphanumericSpace(String) to isAlphanumericSpace(CharSequence)\n      */\n     /**\n      * <p>Checks if the CharSequence contains only ASCII printable characters.</p>\n      *\n-     * <p><code>null</code> will return <code>false</code>.\n-     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n+     * <p>{@code null} will return {@code false}.\n+     * An empty CharSequence (length()=0) will return {@code true}.</p>\n      *\n      * <pre>\n      * StringUtils.isAsciiPrintable(null)     = false\n      * </pre>\n      *\n      * @param cs the CharSequence to check, may be null\n-     * @return <code>true</code> if every character is in the range\n+     * @return {@code true} if every character is in the range\n      *  32 thru 126\n      * @since 2.1\n      * @since 3.0 Changed signature from isAsciiPrintable(String) to isAsciiPrintable(CharSequence)\n      * <p>Checks if the CharSequence contains only unicode digits.\n      * A decimal point is not a unicode digit and returns false.</p>\n      *\n-     * <p><code>null</code> will return <code>false</code>.\n-     * An empty CharSequence (length()=0) will return <code>false</code>.</p>\n+     * <p>{@code null} will return {@code false}.\n+     * An empty CharSequence (length()=0) will return {@code false}.</p>\n      *\n      * <pre>\n      * StringUtils.isNumeric(null)   = false\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n-     * @return <code>true</code> if only contains digits, and is non-null\n+     * @return {@code true} if only contains digits, and is non-null\n      * @since 3.0 Changed signature from isNumeric(String) to isNumeric(CharSequence)\n      * @since 3.0 Changed \"\" to return false and not true\n      */\n \n     /**\n      * <p>Checks if the CharSequence contains only unicode digits or space\n-     * (<code>' '</code>).\n+     * ({@code ' '}).\n      * A decimal point is not a unicode digit and returns false.</p>\n      *\n-     * <p><code>null</code> will return <code>false</code>.\n-     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n+     * <p>{@code null} will return {@code false}.\n+     * An empty CharSequence (length()=0) will return {@code true}.</p>\n      *\n      * <pre>\n      * StringUtils.isNumericSpace(null)   = false\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n-     * @return <code>true</code> if only contains digits or space,\n+     * @return {@code true} if only contains digits or space,\n      *  and is non-null\n      * @since 3.0 Changed signature from isNumericSpace(String) to isNumericSpace(CharSequence)\n      */\n     /**\n      * <p>Checks if the CharSequence contains only whitespace.</p>\n      *\n-     * <p><code>null</code> will return <code>false</code>.\n-     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n+     * <p>{@code null} will return {@code false}.\n+     * An empty CharSequence (length()=0) will return {@code true}.</p>\n      *\n      * <pre>\n      * StringUtils.isWhitespace(null)   = false\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n-     * @return <code>true</code> if only contains whitespace, and is non-null\n+     * @return {@code true} if only contains whitespace, and is non-null\n      * @since 2.0\n      * @since 3.0 Changed signature from isWhitespace(String) to isWhitespace(CharSequence)\n      */\n     /**\n      * <p>Checks if the CharSequence contains only lowercase characters.</p>\n      *\n-     * <p><code>null</code> will return <code>false</code>.\n-     * An empty CharSequence (length()=0) will return <code>false</code>.</p>\n+     * <p>{@code null} will return {@code false}.\n+     * An empty CharSequence (length()=0) will return {@code false}.</p>\n      *\n      * <pre>\n      * StringUtils.isAllLowerCase(null)   = false\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n-     * @return <code>true</code> if only contains lowercase characters, and is non-null\n+     * @return {@code true} if only contains lowercase characters, and is non-null\n      * @since 2.5\n      * @since 3.0 Changed signature from isAllLowerCase(String) to isAllLowerCase(CharSequence)\n      */\n     /**\n      * <p>Checks if the CharSequence contains only uppercase characters.</p>\n      *\n-     * <p><code>null</code> will return <code>false</code>.\n-     * An empty String (length()=0) will return <code>false</code>.</p>\n+     * <p>{@code null} will return {@code false}.\n+     * An empty String (length()=0) will return {@code false}.</p>\n      *\n      * <pre>\n      * StringUtils.isAllUpperCase(null)   = false\n      * </pre>\n      *\n      * @param cs the CharSequence to check, may be null\n-     * @return <code>true</code> if only contains uppercase characters, and is non-null\n+     * @return {@code true} if only contains uppercase characters, and is non-null\n      * @since 2.5\n      * @since 3.0 Changed signature from isAllUpperCase(String) to isAllUpperCase(CharSequence)\n      */\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Returns either the passed in String,\n-     * or if the String is <code>null</code>, an empty String (\"\").</p>\n+     * or if the String is {@code null}, an empty String (\"\").</p>\n      *\n      * <pre>\n      * StringUtils.defaultString(null)  = \"\"\n      * @see String#valueOf(Object)\n      * @param str  the String to check, may be null\n      * @return the passed in String, or the empty String if it\n-     *  was <code>null</code>\n+     *  was {@code null}\n      */\n     public static String defaultString(String str) {\n         return str == null ? EMPTY : str;\n \n     /**\n      * <p>Returns either the passed in String, or if the String is\n-     * <code>null</code>, the value of <code>defaultStr</code>.</p>\n+     * {@code null}, the value of {@code defaultStr}.</p>\n      *\n      * <pre>\n      * StringUtils.defaultString(null, \"NULL\")  = \"NULL\"\n      * @see String#valueOf(Object)\n      * @param str  the String to check, may be null\n      * @param defaultStr  the default String to return\n-     *  if the input is <code>null</code>, may be null\n-     * @return the passed in String, or the default if it was <code>null</code>\n+     *  if the input is {@code null}, may be null\n+     * @return the passed in String, or the default if it was {@code null}\n      */\n     public static String defaultString(String str, String defaultStr) {\n         return str == null ? defaultStr : str;\n \n     /**\n      * <p>Returns either the passed in CharSequence, or if the CharSequence is\n-     * whitespace, empty (\"\") or <code>null</code>, the value of <code>defaultStr</code>.</p>\n+     * whitespace, empty (\"\") or {@code null}, the value of {@code defaultStr}.</p>\n      *\n      * <pre>\n      * StringUtils.defaultIfBlank(null, \"NULL\")  = \"NULL\"\n      * @param <T> the specific kind of CharSequence\n      * @param str the CharSequence to check, may be null\n      * @param defaultStr  the default CharSequence to return\n-     *  if the input is whitespace, empty (\"\") or <code>null</code>, may be null\n+     *  if the input is whitespace, empty (\"\") or {@code null}, may be null\n      * @return the passed in CharSequence, or the default\n      * @see StringUtils#defaultString(String, String)\n      */\n \n     /**\n      * <p>Returns either the passed in CharSequence, or if the CharSequence is\n-     * empty or <code>null</code>, the value of <code>defaultStr</code>.</p>\n+     * empty or {@code null}, the value of {@code defaultStr}.</p>\n      *\n      * <pre>\n      * StringUtils.defaultIfEmpty(null, \"NULL\")  = \"NULL\"\n      * @param <T> the specific kind of CharSequence\n      * @param str  the CharSequence to check, may be null\n      * @param defaultStr  the default CharSequence to return\n-     *  if the input is empty (\"\") or <code>null</code>, may be null\n+     *  if the input is empty (\"\") or {@code null}, may be null\n      * @return the passed in CharSequence, or the default\n      * @see StringUtils#defaultString(String, String)\n      */\n     /**\n      * <p>Reverses a String as per {@link StringBuilder#reverse()}.</p>\n      *\n-     * <p>A <code>null</code> String returns <code>null</code>.</p>\n+     * <p>A {@code null} String returns {@code null}.</p>\n      *\n      * <pre>\n      * StringUtils.reverse(null)  = null\n      * </pre>\n      *\n      * @param str  the String to reverse, may be null\n-     * @return the reversed String, <code>null</code> if null String input\n+     * @return the reversed String, {@code null} if null String input\n      */\n     public static String reverse(String str) {\n         if (str == null) {\n      *\n      * <p>The Strings between the delimiters are not reversed.\n      * Thus java.lang.String becomes String.lang.java (if the delimiter\n-     * is <code>'.'</code>).</p>\n+     * is {@code '.'}).</p>\n      *\n      * <pre>\n      * StringUtils.reverseDelimited(null, *)      = null\n      *\n      * @param str  the String to reverse, may be null\n      * @param separatorChar  the separator character to use\n-     * @return the reversed String, <code>null</code> if null String input\n+     * @return the reversed String, {@code null} if null String input\n      * @since 2.0\n      */\n     public static String reverseDelimited(String str, char separatorChar) {\n      *\n      * <p>Specifically:\n      * <ul>\n-     *   <li>If <code>str</code> is less than <code>maxWidth</code> characters\n+     *   <li>If {@code str} is less than {@code maxWidth} characters\n      *       long, return it.</li>\n-     *   <li>Else abbreviate it to <code>(substring(str, 0, max-3) + \"...\")</code>.</li>\n-     *   <li>If <code>maxWidth</code> is less than <code>4</code>, throw an\n-     *       <code>IllegalArgumentException</code>.</li>\n+     *   <li>Else abbreviate it to {@code (substring(str, 0, max-3) + \"...\")}.</li>\n+     *   <li>If {@code maxWidth} is less than {@code 4}, throw an\n+     *       {@code IllegalArgumentException}.</li>\n      *   <li>In no case will it return a String of length greater than\n-     *       <code>maxWidth</code>.</li>\n+     *       {@code maxWidth}.</li>\n      * </ul>\n      * </p>\n      *\n      *\n      * @param str  the String to check, may be null\n      * @param maxWidth  maximum length of result String, must be at least 4\n-     * @return abbreviated String, <code>null</code> if null String input\n+     * @return abbreviated String, {@code null} if null String input\n      * @throws IllegalArgumentException if the width is too small\n      * @since 2.0\n      */\n      * <p>Abbreviates a String using ellipses. This will turn\n      * \"Now is the time for all good men\" into \"...is the time for...\"</p>\n      *\n-     * <p>Works like <code>abbreviate(String, int)</code>, but allows you to specify\n+     * <p>Works like {@code abbreviate(String, int)}, but allows you to specify\n      * a \"left edge\" offset.  Note that this left edge is not necessarily going to\n      * be the leftmost character in the result, or the first character following the\n      * ellipses, but it will appear somewhere in the result.\n      *\n      * <p>In no case will it return a String of length greater than\n-     * <code>maxWidth</code>.</p>\n+     * {@code maxWidth}.</p>\n      *\n      * <pre>\n      * StringUtils.abbreviate(null, *, *)                = null\n      * @param str  the String to check, may be null\n      * @param offset  left edge of source String\n      * @param maxWidth  maximum length of result String, must be at least 4\n-     * @return abbreviated String, <code>null</code> if null String input\n+     * @return abbreviated String, {@code null} if null String input\n      * @throws IllegalArgumentException if the width is too small\n      * @since 2.0\n      */\n      *\n      * @param str  the String to abbreviate, may be null\n      * @param middle the String to replace the middle characters with, may be null\n-     * @param length the length to abbreviate <code>str</code> to.\n+     * @param length the length to abbreviate {@code str} to.\n      * @return the abbreviated String if the above criteria is met, or the original String supplied for abbreviation.\n      * @since 2.5\n      */\n      * starting from where it's different from the first.)</p>\n      *\n      * <p>For example,\n-     * <code>difference(\"i am a machine\", \"i am a robot\") -> \"robot\"</code>.</p>\n+     * {@code difference(\"i am a machine\", \"i am a robot\") -> \"robot\"}.</p>\n      *\n      * <pre>\n      * StringUtils.difference(null, null) = null\n      * CharSequences begin to differ.</p>\n      *\n      * <p>For example,\n-     * <code>indexOfDifference(\"i am a machine\", \"i am a robot\") -> 7</code></p>\n+     * {@code indexOfDifference(\"i am a machine\", \"i am a robot\") -> 7}</p>\n      *\n      * <pre>\n      * StringUtils.indexOfDifference(null, null) = -1\n      * CharSequences begin to differ.</p>\n      *\n      * <p>For example,\n-     * <code>indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}) -> 7</code></p>\n+     * {@code indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}) -> 7}</p>\n      *\n      * <pre>\n      * StringUtils.indexOfDifference(null) = -1\n      * characters that is common to all of them.</p>\n      *\n      * <p>For example,\n-     * <code>getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}) -> \"i am a \"</code></p>\n+     * {@code getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}) -> \"i am a \"}</p>\n      *\n      * <pre>\n      * StringUtils.getCommonPrefix(null) = \"\"\n      * @param s  the first String, must not be null\n      * @param t  the second String, must not be null\n      * @return result distance\n-     * @throws IllegalArgumentException if either String input <code>null</code>\n+     * @throws IllegalArgumentException if either String input {@code null}\n      * @since 3.0 Changed signature from getLevenshteinDistance(String, String) to getLevenshteinDistance(CharSequence, CharSequence)\n      */\n     public static int getLevenshteinDistance(CharSequence s, CharSequence t) {\n     /**\n      * <p>Check if a String starts with a specified prefix.</p>\n      *\n-     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n+     * <p>{@code null}s are handled without exceptions. Two {@code null}\n      * references are considered to be equal. The comparison is case sensitive.</p>\n      *\n      * <pre>\n      * @see java.lang.String#startsWith(String)\n      * @param str  the String to check, may be null\n      * @param prefix the prefix to find, may be null\n-     * @return <code>true</code> if the String starts with the prefix, case sensitive, or\n-     *  both <code>null</code>\n+     * @return {@code true} if the String starts with the prefix, case sensitive, or\n+     *  both {@code null}\n      * @since 2.4\n      */\n     public static boolean startsWith(String str, String prefix) {\n     /**\n      * <p>Case insensitive check if a String starts with a specified prefix.</p>\n      *\n-     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n+     * <p>{@code null}s are handled without exceptions. Two {@code null}\n      * references are considered to be equal. The comparison is case insensitive.</p>\n      *\n      * <pre>\n      * @see java.lang.String#startsWith(String)\n      * @param str  the String to check, may be null\n      * @param prefix the prefix to find, may be null\n-     * @return <code>true</code> if the String starts with the prefix, case insensitive, or\n-     *  both <code>null</code>\n+     * @return {@code true} if the String starts with the prefix, case insensitive, or\n+     *  both {@code null}\n      * @since 2.4\n      */\n     public static boolean startsWithIgnoreCase(String str, String prefix) {\n      * @param prefix the prefix to find, may be null\n      * @param ignoreCase inidicates whether the compare should ignore case\n      *  (case insensitive) or not.\n-     * @return <code>true</code> if the String starts with the prefix or\n-     *  both <code>null</code>\n+     * @return {@code true} if the String starts with the prefix or\n+     *  both {@code null}\n      */\n     private static boolean startsWith(String str, String prefix, boolean ignoreCase) {\n         if (str == null || prefix == null) {\n      *\n      * @param string  the String to check, may be null\n      * @param searchStrings the Strings to find, may be null or empty\n-     * @return <code>true</code> if the String starts with any of the the prefixes, case insensitive, or\n-     *  both <code>null</code>\n+     * @return {@code true} if the String starts with any of the the prefixes, case insensitive, or\n+     *  both {@code null}\n      * @since 2.5\n      */\n     public static boolean startsWithAny(String string, String... searchStrings) {\n     /**\n      * <p>Check if a String ends with a specified suffix.</p>\n      *\n-     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n+     * <p>{@code null}s are handled without exceptions. Two {@code null}\n      * references are considered to be equal. The comparison is case sensitive.</p>\n      *\n      * <pre>\n      * @see java.lang.String#endsWith(String)\n      * @param str  the String to check, may be null\n      * @param suffix the suffix to find, may be null\n-     * @return <code>true</code> if the String ends with the suffix, case sensitive, or\n-     *  both <code>null</code>\n+     * @return {@code true} if the String ends with the suffix, case sensitive, or\n+     *  both {@code null}\n      * @since 2.4\n      */\n     public static boolean endsWith(String str, String suffix) {\n     /**\n      * <p>Case insensitive check if a String ends with a specified suffix.</p>\n      *\n-     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n+     * <p>{@code null}s are handled without exceptions. Two {@code null}\n      * references are considered to be equal. The comparison is case insensitive.</p>\n      *\n      * <pre>\n      * @see java.lang.String#endsWith(String)\n      * @param str  the String to check, may be null\n      * @param suffix the suffix to find, may be null\n-     * @return <code>true</code> if the String ends with the suffix, case insensitive, or\n-     *  both <code>null</code>\n+     * @return {@code true} if the String ends with the suffix, case insensitive, or\n+     *  both {@code null}\n      * @since 2.4\n      */\n     public static boolean endsWithIgnoreCase(String str, String suffix) {\n      * @param suffix the suffix to find, may be null\n      * @param ignoreCase inidicates whether the compare should ignore case\n      *  (case insensitive) or not.\n-     * @return <code>true</code> if the String starts with the prefix or\n-     *  both <code>null</code>\n+     * @return {@code true} if the String starts with the prefix or\n+     *  both {@code null}\n      */\n     private static boolean endsWith(String str, String suffix, boolean ignoreCase) {\n         if (str == null || suffix == null) {\n      * </p>\n      * <p>\n      * The function returns the argument string with whitespace normalized by using\n-     * <code>{@link #trim(String)}</code> to remove leading and trailing whitespace\n+     * {@code {@link #trim(String)}} to remove leading and trailing whitespace\n      * and then replacing sequences of whitespace characters by a single space.\n      * </p>\n      * In XML Whitespace characters are the same as those allowed by the <a\n      * </p>\n      * <p>\n      * The difference is that Java's whitespace includes vertical tab and form feed, which this functional will also\n-     * normalize. Additonally <code>{@link #trim(String)}</code> removes control characters (char &lt;= 32) from both\n+     * normalize. Additonally {@code {@link #trim(String)}} removes control characters (char &lt;= 32) from both\n      * ends of this String.\n      * </p>\n      *\n      * @see <a\n      *      href=\"http://www.w3.org/TR/xpath/#function-normalize-space\">http://www.w3.org/TR/xpath/#function-normalize-space</a>\n      * @param str the source String to normalize whitespaces from, may be null\n-     * @return the modified string with whitespace normalized, <code>null</code> if null String input\n+     * @return the modified string with whitespace normalized, {@code null} if null String input\n      *\n      * @since 3.0\n      */\n      *\n      * @param string  the String to check, may be null\n      * @param searchStrings the Strings to find, may be null or empty\n-     * @return <code>true</code> if the String ends with any of the the prefixes, case insensitive, or\n-     *  both <code>null</code>\n+     * @return {@code true} if the String ends with any of the the prefixes, case insensitive, or\n+     *  both {@code null}\n      * @since 3.1\n      */\n     public static boolean endsWithAny(String string, String... searchStrings) {\n--- a/src/main/java/org/apache/commons/lang3/SystemUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SystemUtils.java\n \n /**\n  * <p>\n- * Helpers for <code>java.lang.System</code>.\n+ * Helpers for {@code java.lang.System}.\n  * </p>\n  * \n  * <p>\n- * If a system property cannot be read due to security restrictions, the corresponding field in this class will be set to <code>null</code>\n- * and a message will be written to <code>System.err</code>.\n+ * If a system property cannot be read due to security restrictions, the corresponding field in this class will be set to {@code null}\n+ * and a message will be written to {@code System.err}.\n  * </p>\n  * \n  * <p>\n \n     /**\n      * <p>\n-     * The <code>awt.toolkit</code> System Property.\n-     * </p>\n-     * <p>\n-     * Holds a class name, on Windows XP this is <code>sun.awt.windows.WToolkit</code>.\n-     * </p>\n-     * <p>\n-     * <b>On platforms without a GUI, this value is <code>null</code>.</b>\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code awt.toolkit} System Property.\n+     * </p>\n+     * <p>\n+     * Holds a class name, on Windows XP this is {@code sun.awt.windows.WToolkit}.\n+     * </p>\n+     * <p>\n+     * <b>On platforms without a GUI, this value is {@code null}.</b>\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>file.encoding</code> System Property.\n-     * </p>\n-     * <p>\n-     * File encoding, such as <code>Cp1252</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code file.encoding} System Property.\n+     * </p>\n+     * <p>\n+     * File encoding, such as {@code Cp1252}.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>file.separator</code> System Property. File separator (<code>&quot;/&quot;</code> on UNIX).\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code file.separator} System Property. File separator (<code>&quot;/&quot;</code> on UNIX).\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.awt.fonts</code> System Property.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.awt.fonts} System Property.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.awt.graphicsenv</code> System Property.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.awt.graphicsenv} System Property.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.awt.headless</code> System Property. The value of this property is the String <code>\"true\"</code> or\n-     * <code>\"false\"</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.awt.headless} System Property. The value of this property is the String {@code \"true\"} or\n+     * {@code \"false\"}.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.awt.printerjob</code> System Property.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.awt.printerjob} System Property.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.class.path</code> System Property. Java class path.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.class.path} System Property. Java class path.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.class.version</code> System Property. Java class format version number.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.class.version} System Property. Java class format version number.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.compiler</code> System Property. Name of JIT compiler to use. First in JDK version 1.2. Not used in Sun JDKs after\n+     * The {@code java.compiler} System Property. Name of JIT compiler to use. First in JDK version 1.2. Not used in Sun JDKs after\n      * 1.2.\n      * </p>\n      * \n      * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.endorsed.dirs</code> System Property. Path of endorsed directory or directories.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.endorsed.dirs} System Property. Path of endorsed directory or directories.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.ext.dirs</code> System Property. Path of extension directory or directories.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.ext.dirs} System Property. Path of extension directory or directories.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.home</code> System Property. Java installation directory.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.home} System Property. Java installation directory.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.io.tmpdir</code> System Property. Default temp file path.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.io.tmpdir} System Property. Default temp file path.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.library.path</code> System Property. List of paths to search when loading libraries.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.library.path} System Property. List of paths to search when loading libraries.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.runtime.name</code> System Property. Java Runtime Environment name.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.runtime.name} System Property. Java Runtime Environment name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.runtime.version</code> System Property. Java Runtime Environment version.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.runtime.version} System Property. Java Runtime Environment version.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.specification.name</code> System Property. Java Runtime Environment specification name.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.specification.name} System Property. Java Runtime Environment specification name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.specification.vendor</code> System Property. Java Runtime Environment specification vendor.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.specification.vendor} System Property. Java Runtime Environment specification vendor.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.specification.version</code> System Property. Java Runtime Environment specification version.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.specification.version} System Property. Java Runtime Environment specification version.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.util.prefs.PreferencesFactory</code> System Property. A class name.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.util.prefs.PreferencesFactory} System Property. A class name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.vendor</code> System Property. Java vendor-specific string.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.vendor} System Property. Java vendor-specific string.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.vendor.url</code> System Property. Java vendor URL.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.vendor.url} System Property. Java vendor URL.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.version</code> System Property. Java version number.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.version} System Property. Java version number.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.vm.info</code> System Property. Java Virtual Machine implementation info.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.vm.info} System Property. Java Virtual Machine implementation info.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.vm.name</code> System Property. Java Virtual Machine implementation name.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.vm.name} System Property. Java Virtual Machine implementation name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.vm.specification.name</code> System Property. Java Virtual Machine specification name.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.vm.specification.name} System Property. Java Virtual Machine specification name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.vm.specification.vendor</code> System Property. Java Virtual Machine specification vendor.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.vm.specification.vendor} System Property. Java Virtual Machine specification vendor.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.vm.specification.version</code> System Property. Java Virtual Machine specification version.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.vm.specification.version} System Property. Java Virtual Machine specification version.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.vm.vendor</code> System Property. Java Virtual Machine implementation vendor.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.vm.vendor} System Property. Java Virtual Machine implementation vendor.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>java.vm.version</code> System Property. Java Virtual Machine implementation version.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code java.vm.version} System Property. Java Virtual Machine implementation version.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>line.separator</code> System Property. Line separator (<code>&quot;\\n&quot;</code> on UNIX).\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code line.separator} System Property. Line separator (<code>&quot;\\n&quot;</code> on UNIX).\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>os.arch</code> System Property. Operating system architecture.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code os.arch} System Property. Operating system architecture.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>os.name</code> System Property. Operating system name.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code os.name} System Property. Operating system name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>os.version</code> System Property. Operating system version.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code os.version} System Property. Operating system version.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>path.separator</code> System Property. Path separator (<code>&quot;:&quot;</code> on UNIX).\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code path.separator} System Property. Path separator (<code>&quot;:&quot;</code> on UNIX).\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>user.country</code> or <code>user.region</code> System Property. User's country code, such as <code>GB</code>. First in\n-     * Java version 1.2 as <code>user.region</code>. Renamed to <code>user.country</code> in 1.4\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code user.country} or {@code user.region} System Property. User's country code, such as {@code GB}. First in\n+     * Java version 1.2 as {@code user.region}. Renamed to {@code user.country} in 1.4\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>user.dir</code> System Property. User's current working directory.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code user.dir} System Property. User's current working directory.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>user.home</code> System Property. User's home directory.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code user.home} System Property. User's home directory.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>user.language</code> System Property. User's language code, such as <code>\"en\"</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code user.language} System Property. User's language code, such as {@code \"en\"}.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>user.name</code> System Property. User's account name.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code user.name} System Property. User's account name.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * The <code>user.timezone</code> System Property. For example: <code>\"America/Los_Angeles\"</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * Defaults to <code>null</code> if the runtime does not have security access to read this property or the property does not exist.\n+     * The {@code user.timezone} System Property. For example: {@code \"America/Los_Angeles\"}.\n+     * </p>\n+     * \n+     * <p>\n+     * Defaults to {@code null} if the runtime does not have security access to read this property or the property does not exist.\n      * </p>\n      * \n      * <p>\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Java version 1.1 (also 1.1.x versions).\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * Is {@code true} if this is Java version 1.1 (also 1.1.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n      */\n     public static final boolean IS_JAVA_1_1 = getJavaVersionMatches(\"1.1\");\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Java version 1.2 (also 1.2.x versions).\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * Is {@code true} if this is Java version 1.2 (also 1.2.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n      */\n     public static final boolean IS_JAVA_1_2 = getJavaVersionMatches(\"1.2\");\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Java version 1.3 (also 1.3.x versions).\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * Is {@code true} if this is Java version 1.3 (also 1.3.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n      */\n     public static final boolean IS_JAVA_1_3 = getJavaVersionMatches(\"1.3\");\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Java version 1.4 (also 1.4.x versions).\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * Is {@code true} if this is Java version 1.4 (also 1.4.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n      */\n     public static final boolean IS_JAVA_1_4 = getJavaVersionMatches(\"1.4\");\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Java version 1.5 (also 1.5.x versions).\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * Is {@code true} if this is Java version 1.5 (also 1.5.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n      */\n     public static final boolean IS_JAVA_1_5 = getJavaVersionMatches(\"1.5\");\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Java version 1.6 (also 1.6.x versions).\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * Is {@code true} if this is Java version 1.6 (also 1.6.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n      */\n     public static final boolean IS_JAVA_1_6 = getJavaVersionMatches(\"1.6\");\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Java version 1.7 (also 1.7.x versions).\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if {@link #JAVA_VERSION} is <code>null</code>.\n+     * Is {@code true} if this is Java version 1.7 (also 1.7.x versions).\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n      * </p>\n      * \n      * @since 3.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is AIX.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is AIX.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is HP-UX.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is HP-UX.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Irix.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Irix.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Linux.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Linux.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Mac.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Mac.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Mac.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Mac.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is OS/2.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is OS/2.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Solaris.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Solaris.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is SunOS.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is SunOS.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is a UNIX like system, as in any of AIX, HP-UX, Irix, Linux, MacOSX, Solaris or SUN OS.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is a UNIX like system, as in any of AIX, HP-UX, Irix, Linux, MacOSX, Solaris or SUN OS.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.1\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Windows.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Windows.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Windows 2000.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Windows 2000.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Windows 95.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Windows 95.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Windows 98.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Windows 98.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Windows ME.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Windows ME.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Windows NT.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Windows NT.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Windows XP.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Windows XP.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.0\n     // -----------------------------------------------------------------------\n     /**\n      * <p>\n-     * Is <code>true</code> if this is Windows Vista.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Windows Vista.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 2.4\n \n     /**\n      * <p>\n-     * Is <code>true</code> if this is Windows 7.\n-     * </p>\n-     * \n-     * <p>\n-     * The field will return <code>false</code> if <code>OS_NAME</code> is <code>null</code>.\n+     * Is {@code true} if this is Windows 7.\n+     * </p>\n+     * \n+     * <p>\n+     * The field will return {@code false} if {@code OS_NAME} is {@code null}.\n      * </p>\n      * \n      * @since 3.0\n \n     /**\n      * <p>\n-     * Gets the Java home directory as a <code>File</code>.\n+     * Gets the Java home directory as a {@code File}.\n      * </p>\n      * \n      * @return a directory\n      * @throws SecurityException\n-     *             if a security manager exists and its <code>checkPropertyAccess</code> method doesn't allow access to the specified system\n+     *             if a security manager exists and its {@code checkPropertyAccess} method doesn't allow access to the specified system\n      *             property.\n      * @see System#getProperty(String)\n      * @since 2.1\n \n     /**\n      * <p>\n-     * Gets the Java IO temporary directory as a <code>File</code>.\n+     * Gets the Java IO temporary directory as a {@code File}.\n      * </p>\n      * \n      * @return a directory\n      * @throws SecurityException\n-     *             if a security manager exists and its <code>checkPropertyAccess</code> method doesn't allow access to the specified system\n+     *             if a security manager exists and its {@code checkPropertyAccess} method doesn't allow access to the specified system\n      *             property.\n      * @see System#getProperty(String)\n      * @since 2.1\n     // -----------------------------------------------------------------------\n     /**\n      * <p>\n-     * Gets a System property, defaulting to <code>null</code> if the property cannot be read.\n-     * </p>\n-     * \n-     * <p>\n-     * If a <code>SecurityException</code> is caught, the return value is <code>null</code> and a message is written to\n-     * <code>System.err</code>.\n+     * Gets a System property, defaulting to {@code null} if the property cannot be read.\n+     * </p>\n+     * \n+     * <p>\n+     * If a {@code SecurityException} is caught, the return value is {@code null} and a message is written to\n+     * {@code System.err}.\n      * </p>\n      * \n      * @param property\n      *            the system property name\n-     * @return the system property value or <code>null</code> if a security problem occurs\n+     * @return the system property value or {@code null} if a security problem occurs\n      */\n     private static String getSystemProperty(String property) {\n         try {\n \n     /**\n      * <p>\n-     * Gets the user directory as a <code>File</code>.\n+     * Gets the user directory as a {@code File}.\n      * </p>\n      * \n      * @return a directory\n      * @throws SecurityException\n-     *             if a security manager exists and its <code>checkPropertyAccess</code> method doesn't allow access to the specified system\n+     *             if a security manager exists and its {@code checkPropertyAccess} method doesn't allow access to the specified system\n      *             property.\n      * @see System#getProperty(String)\n      * @since 2.1\n \n     /**\n      * <p>\n-     * Gets the user home directory as a <code>File</code>.\n+     * Gets the user home directory as a {@code File}.\n      * </p>\n      * \n      * @return a directory\n      * @throws SecurityException\n-     *             if a security manager exists and its <code>checkPropertyAccess</code> method doesn't allow access to the specified system\n+     *             if a security manager exists and its {@code checkPropertyAccess} method doesn't allow access to the specified system\n      *             property.\n      * @see System#getProperty(String)\n      * @since 2.1\n     }\n \n     /**\n-     * Returns whether the {@link #JAVA_AWT_HEADLESS} value is <code>true</code>.\n-     * \n-     * @return <code>true</code> if <code>JAVA_AWT_HEADLESS</code> is <code>\"true\"</code>, <code>false</code> otherwise.\n+     * Returns whether the {@link #JAVA_AWT_HEADLESS} value is {@code true}.\n+     * \n+     * @return {@code true} if {@code JAVA_AWT_HEADLESS} is {@code \"true\"}, {@code false} otherwise.\n      * \n      * @see #JAVA_AWT_HEADLESS\n      * @since 2.1\n      * Example input:\n      * </p>\n      * <ul>\n-     * <li><code>1.2f</code> to test for Java 1.2</li>\n-     * <li><code>1.31f</code> to test for Java 1.3.1</li>\n+     * <li>{@code 1.2f} to test for Java 1.2</li>\n+     * <li>{@code 1.31f} to test for Java 1.3.1</li>\n      * </ul>\n      * \n      * @param requiredVersion\n      *            the required version, for example 1.31f\n-     * @return <code>true</code> if the actual version is equal or greater than the required version\n+     * @return {@code true} if the actual version is equal or greater than the required version\n      */\n     public static boolean isJavaVersionAtLeast(JavaVersion requiredVersion) {\n         return JAVA_SPECIFICATION_VERSION_AS_ENUM.atLeast(requiredVersion);\n     /**\n      * <p>\n      * SystemUtils instances should NOT be constructed in standard programming. Instead, the class should be used as\n-     * <code>SystemUtils.FILE_SEPARATOR</code>.\n+     * {@code SystemUtils.FILE_SEPARATOR}.\n      * </p>\n      * \n      * <p>\n--- a/src/main/java/org/apache/commons/lang3/Validate.java\n+++ b/src/main/java/org/apache/commons/lang3/Validate.java\n  * <p>This class assists in validating arguments. The validation methods are \n  * based along the following principles: \n  * <ul>\n- *   <li>An invalid <code>null</code> argument causes a {@link NullPointerException}.</li>\n- *   <li>A non-<code>null</code> argument causes an {@link IllegalArgumentException}.</li>\n+ *   <li>An invalid {@code null} argument causes a {@link NullPointerException}.</li>\n+ *   <li>A non-{@code null} argument causes an {@link IllegalArgumentException}.</li>\n  *   <li>An invalid index into an array/collection/map/string causes an {@link IndexOutOfBoundsException}.</li> \n  * </ul>\n  *  \n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the argument condition is <code>true</code>; otherwise \n+     * <p>Validate that the argument condition is {@code true}; otherwise \n      * throwing an exception with the specified message. This method is useful when\n      * validating according to an arbitrary boolean expression, such as validating a \n      * primitive number or using your own custom validation expression.</p>\n      * @param expression  the boolean expression to check\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param value  the value to append to the message when invalid\n-     * @throws IllegalArgumentException if expression is <code>false</code>\n+     * @throws IllegalArgumentException if expression is {@code false}\n      * @see #isTrue(boolean)\n      * @see #isTrue(boolean, String, double)\n      * @see #isTrue(boolean, String, Object...)\n     }\n \n     /**\n-     * <p>Validate that the argument condition is <code>true</code>; otherwise \n+     * <p>Validate that the argument condition is {@code true}; otherwise \n      * throwing an exception with the specified message. This method is useful when\n      * validating according to an arbitrary boolean expression, such as validating a \n      * primitive number or using your own custom validation expression.</p>\n      * @param expression  the boolean expression to check \n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param value  the value to append to the message when invalid\n-     * @throws IllegalArgumentException if expression is <code>false</code>\n+     * @throws IllegalArgumentException if expression is {@code false}\n      * @see #isTrue(boolean)\n      * @see #isTrue(boolean, String, long)\n      * @see #isTrue(boolean, String, Object...)\n     }\n \n     /**\n-     * <p>Validate that the argument condition is <code>true</code>; otherwise \n+     * <p>Validate that the argument condition is {@code true}; otherwise \n      * throwing an exception with the specified message. This method is useful when\n      * validating according to an arbitrary boolean expression, such as validating a \n      * primitive number or using your own custom validation expression.</p>\n      * @param expression  the boolean expression to check \n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n-     * @throws IllegalArgumentException if expression is <code>false</code>\n+     * @throws IllegalArgumentException if expression is {@code false}\n      * @see #isTrue(boolean)\n      * @see #isTrue(boolean, String, long)\n      * @see #isTrue(boolean, String, double)\n     }\n \n     /**\n-     * <p>Validate that the argument condition is <code>true</code>; otherwise \n+     * <p>Validate that the argument condition is {@code true}; otherwise \n      * throwing an exception. This method is useful when validating according \n      * to an arbitrary boolean expression, such as validating a \n      * primitive number or using your own custom validation expression.</p>\n      * false&quot;.</p>\n      * \n      * @param expression  the boolean expression to check \n-     * @throws IllegalArgumentException if expression is <code>false</code>\n+     * @throws IllegalArgumentException if expression is {@code false}\n      * @see #isTrue(boolean, String, long)\n      * @see #isTrue(boolean, String, double)\n      * @see #isTrue(boolean, String, Object...)\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the specified argument is not <code>null</code>; \n+     * <p>Validate that the specified argument is not {@code null}; \n      * otherwise throwing an exception.\n      *\n      * <pre>Validate.notNull(myObject, \"The object must not be null\");</pre>\n      * \n      * @param <T> the object type\n      * @param object  the object to check\n-     * @return the validated object (never <code>null</code> for method chaining)\n-     * @throws NullPointerException if the object is <code>null</code>\n+     * @return the validated object (never {@code null} for method chaining)\n+     * @throws NullPointerException if the object is {@code null}\n      * @see #notNull(Object, String, Object...)\n      */\n     public static <T> T notNull(T object) {\n     }\n \n     /**\n-     * <p>Validate that the specified argument is not <code>null</code>; \n+     * <p>Validate that the specified argument is not {@code null}; \n      * otherwise throwing an exception with the specified message.\n      *\n      * <pre>Validate.notNull(myObject, \"The object must not be null\");</pre>\n      * @param object  the object to check\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message\n-     * @return the validated object (never <code>null</code> for method chaining)\n-     * @throws NullPointerException if the object is <code>null</code>\n+     * @return the validated object (never {@code null} for method chaining)\n+     * @throws NullPointerException if the object is {@code null}\n      * @see #notNull(Object)\n      */\n     public static <T> T notNull(T object, String message, Object... values) {\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the specified argument array is neither <code>null</code> \n+     * <p>Validate that the specified argument array is neither {@code null} \n      * nor a length of zero (no elements); otherwise throwing an exception \n      * with the specified message.\n      *\n      * @param array  the array to check, validated not null by this method\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n-     * @return the validated array (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the array is <code>null</code>\n+     * @return the validated array (never {@code null} method for chaining)\n+     * @throws NullPointerException if the array is {@code null}\n      * @throws IllegalArgumentException if the array is empty\n      * @see #notEmpty(Object[])\n      */\n     }\n \n     /**\n-     * <p>Validate that the specified argument array is neither <code>null</code> \n+     * <p>Validate that the specified argument array is neither {@code null} \n      * nor a length of zero (no elements); otherwise throwing an exception. \n      *\n      * <pre>Validate.notEmpty(myArray);</pre>\n      * \n      * @param <T> the array type\n      * @param array  the array to check, validated not null by this method\n-     * @return the validated array (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the array is <code>null</code>\n+     * @return the validated array (never {@code null} method for chaining)\n+     * @throws NullPointerException if the array is {@code null}\n      * @throws IllegalArgumentException if the array is empty\n      * @see #notEmpty(Object[], String, Object...)\n      */\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the specified argument collection is neither <code>null</code> \n+     * <p>Validate that the specified argument collection is neither {@code null} \n      * nor a size of zero (no elements); otherwise throwing an exception \n      * with the specified message.\n      *\n      * @param collection  the collection to check, validated not null by this method\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n-     * @return the validated collection (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the collection is <code>null</code>\n+     * @return the validated collection (never {@code null} method for chaining)\n+     * @throws NullPointerException if the collection is {@code null}\n      * @throws IllegalArgumentException if the collection is empty\n      * @see #notEmpty(Object[])\n      */\n     }\n \n     /**\n-     * <p>Validate that the specified argument collection is neither <code>null</code> \n+     * <p>Validate that the specified argument collection is neither {@code null} \n      * nor a size of zero (no elements); otherwise throwing an exception. \n      *\n      * <pre>Validate.notEmpty(myCollection);</pre>\n      * \n      * @param <T> the collection type\n      * @param collection  the collection to check, validated not null by this method\n-     * @return the validated collection (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the collection is <code>null</code>\n+     * @return the validated collection (never {@code null} method for chaining)\n+     * @throws NullPointerException if the collection is {@code null}\n      * @throws IllegalArgumentException if the collection is empty\n      * @see #notEmpty(Collection, String, Object...)\n      */\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the specified argument map is neither <code>null</code> \n+     * <p>Validate that the specified argument map is neither {@code null} \n      * nor a size of zero (no elements); otherwise throwing an exception \n      * with the specified message.\n      *\n      * @param map  the map to check, validated not null by this method\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n-     * @return the validated map (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the map is <code>null</code>\n+     * @return the validated map (never {@code null} method for chaining)\n+     * @throws NullPointerException if the map is {@code null}\n      * @throws IllegalArgumentException if the map is empty\n      * @see #notEmpty(Object[])\n      */\n     }\n \n     /**\n-     * <p>Validate that the specified argument map is neither <code>null</code> \n+     * <p>Validate that the specified argument map is neither {@code null} \n      * nor a size of zero (no elements); otherwise throwing an exception. \n      *\n      * <pre>Validate.notEmpty(myMap);</pre>\n      * \n      * @param <T> the map type\n      * @param map  the map to check, validated not null by this method\n-     * @return the validated map (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the map is <code>null</code>\n+     * @return the validated map (never {@code null} method for chaining)\n+     * @throws NullPointerException if the map is {@code null}\n      * @throws IllegalArgumentException if the map is empty\n      * @see #notEmpty(Map, String, Object...)\n      */\n \n     /**\n      * <p>Validate that the specified argument character sequence is \n-     * neither <code>null</code> nor a length of zero (no characters); \n+     * neither {@code null} nor a length of zero (no characters); \n      * otherwise throwing an exception with the specified message.\n      *\n      * <pre>Validate.notEmpty(myString, \"The string must not be empty\");</pre>\n      * @param chars  the character sequence to check, validated not null by this method\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n-     * @return the validated character sequence (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the character sequence is <code>null</code>\n+     * @return the validated character sequence (never {@code null} method for chaining)\n+     * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IllegalArgumentException if the character sequence is empty\n      * @see #notEmpty(CharSequence)\n      */\n \n     /**\n      * <p>Validate that the specified argument character sequence is \n-     * neither <code>null</code> nor a length of zero (no characters); \n+     * neither {@code null} nor a length of zero (no characters); \n      * otherwise throwing an exception with the specified message.\n      *\n      * <pre>Validate.notEmpty(myString);</pre>\n      * \n      * @param <T> the character sequence type\n      * @param chars  the character sequence to check, validated not null by this method\n-     * @return the validated character sequence (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the character sequence is <code>null</code>\n+     * @return the validated character sequence (never {@code null} method for chaining)\n+     * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IllegalArgumentException if the character sequence is empty\n      * @see #notEmpty(CharSequence, String, Object...)\n      */\n \n     /**\n      * <p>Validate that the specified argument character sequence is \n-     * neither <code>null</code>, a length of zero (no characters), empty\n+     * neither {@code null}, a length of zero (no characters), empty\n      * nor whitespace; otherwise throwing an exception with the specified \n      * message.\n      *\n      * @param chars  the character sequence to check, validated not null by this method\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n-     * @return the validated character sequence (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the character sequence is <code>null</code>\n+     * @return the validated character sequence (never {@code null} method for chaining)\n+     * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IllegalArgumentException if the character sequence is blank\n      * @see #notBlank(CharSequence)\n      */\n \n     /**\n      * <p>Validate that the specified argument character sequence is \n-     * neither <code>null</code>, a length of zero (no characters), empty\n+     * neither {@code null}, a length of zero (no characters), empty\n      * nor whitespace; otherwise throwing an exception.\n      *\n      * <pre>Validate.notBlank(myString);</pre>\n      * \n      * @param <T> the character sequence type\n      * @param chars  the character sequence to check, validated not null by this method\n-     * @return the validated character sequence (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the character sequence is <code>null</code>\n+     * @return the validated character sequence (never {@code null} method for chaining)\n+     * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IllegalArgumentException if the character sequence is blank\n      * @see #notBlank(CharSequence, String, Object...)\n      */\n \n     /**\n      * <p>Validate that the specified argument array is neither \n-     * <code>null</code> nor contains any elements that are <code>null</code>;\n+     * {@code null} nor contains any elements that are {@code null};\n      * otherwise throwing an exception with the specified message.\n      *\n      * <pre>Validate.noNullElements(myArray, \"The array contain null at position %d\");</pre>\n      * \n-     * <p>If the array is <code>null</code>, then the message in the exception \n+     * <p>If the array is {@code null}, then the message in the exception \n      * is &quot;The validated object is null&quot;.</p>\n      * \n-     * <p>If the array has a <code>null</code> element, then the iteration \n-     * index of the invalid element is appended to the <code>values</code> \n+     * <p>If the array has a {@code null} element, then the iteration \n+     * index of the invalid element is appended to the {@code values} \n      * argument.</p>\n      * \n      * @param <T> the array type\n      * @param array  the array to check, validated not null by this method\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n-     * @return the validated array (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the array is <code>null</code>\n-     * @throws IllegalArgumentException if an element is <code>null</code>\n+     * @return the validated array (never {@code null} method for chaining)\n+     * @throws NullPointerException if the array is {@code null}\n+     * @throws IllegalArgumentException if an element is {@code null}\n      * @see #noNullElements(Object[])\n      */\n     public static <T> T[] noNullElements(T[] array, String message, Object... values) {\n \n     /**\n      * <p>Validate that the specified argument array is neither \n-     * <code>null</code> nor contains any elements that are <code>null</code>;\n+     * {@code null} nor contains any elements that are {@code null};\n      * otherwise throwing an exception.\n      *\n      * <pre>Validate.noNullElements(myArray);</pre>\n      * \n-     * <p>If the array is <code>null</code>, then the message in the exception \n+     * <p>If the array is {@code null}, then the message in the exception \n      * is &quot;The validated object is null&quot;.</p>\n      * \n-     * <p>If the array has a <code>null</code> element, then the message in the\n+     * <p>If the array has a {@code null} element, then the message in the\n      * exception is &quot;The validated array contains null element at index: \n      * &quot followed by the index.</p>\n      *\n      * @param <T> the array type\n      * @param array  the array to check, validated not null by this method\n-     * @return the validated array (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the array is <code>null</code>\n-     * @throws IllegalArgumentException if an element is <code>null</code>\n+     * @return the validated array (never {@code null} method for chaining)\n+     * @throws NullPointerException if the array is {@code null}\n+     * @throws IllegalArgumentException if an element is {@code null}\n      * @see #noNullElements(Object[], String, Object...)\n      */\n     public static <T> T[] noNullElements(T[] array) {\n \n     /**\n      * <p>Validate that the specified argument iterable is neither \n-     * <code>null</code> nor contains any elements that are <code>null</code>;\n+     * {@code null} nor contains any elements that are {@code null};\n      * otherwise throwing an exception with the specified message.\n      *\n      * <pre>Validate.noNullElements(myCollection, \"The collection contains null at position %d\");</pre>\n      * \n-     * <p>If the iterable is <code>null</code>, then the message in the exception \n+     * <p>If the iterable is {@code null}, then the message in the exception \n      * is &quot;The validated object is null&quot;.</p>\n      * \n-     * <p>If the iterable has a <code>null</code> element, then the iteration \n-     * index of the invalid element is appended to the <code>values</code> \n+     * <p>If the iterable has a {@code null} element, then the iteration \n+     * index of the invalid element is appended to the {@code values} \n      * argument.</p>\n      *\n      * @param <T> the iterable type\n      * @param iterable  the iterable to check, validated not null by this method\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n-     * @return the validated iterable (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the array is <code>null</code>\n-     * @throws IllegalArgumentException if an element is <code>null</code>\n+     * @return the validated iterable (never {@code null} method for chaining)\n+     * @throws NullPointerException if the array is {@code null}\n+     * @throws IllegalArgumentException if an element is {@code null}\n      * @see #noNullElements(Iterable)\n      */\n     public static <T extends Iterable<?>> T noNullElements(T iterable, String message, Object... values) {\n \n     /**\n      * <p>Validate that the specified argument iterable is neither \n-     * <code>null</code> nor contains any elements that are <code>null</code>;\n+     * {@code null} nor contains any elements that are {@code null};\n      * otherwise throwing an exception.\n      *\n      * <pre>Validate.noNullElements(myCollection);</pre>\n      * \n-     * <p>If the iterable is <code>null</code>, then the message in the exception \n+     * <p>If the iterable is {@code null}, then the message in the exception \n      * is &quot;The validated object is null&quot;.</p>\n      * \n-     * <p>If the array has a <code>null</code> element, then the message in the\n+     * <p>If the array has a {@code null} element, then the message in the\n      * exception is &quot;The validated iterable contains null element at index: \n      * &quot followed by the index.</p>\n      *\n      * @param <T> the iterable type\n      * @param iterable  the iterable to check, validated not null by this method\n-     * @return the validated iterable (never <code>null</code> method for chaining)\n-     * @throws NullPointerException if the array is <code>null</code>\n-     * @throws IllegalArgumentException if an element is <code>null</code>\n+     * @return the validated iterable (never {@code null} method for chaining)\n+     * @throws NullPointerException if the array is {@code null}\n+     * @throws IllegalArgumentException if an element is {@code null}\n      * @see #noNullElements(Iterable, String, Object...)\n      */\n     public static <T extends Iterable<?>> T noNullElements(T iterable) {\n      *\n      * <pre>Validate.validIndex(myArray, 2, \"The array index is invalid: \");</pre>\n      * \n-     * <p>If the array is <code>null</code>, then the message of the exception \n+     * <p>If the array is {@code null}, then the message of the exception \n      * is &quot;The validated object is null&quot;.</p>\n      * \n      * @param <T> the array type\n      * @param index  the index to check\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n-     * @return the validated array (never <code>null</code> for method chaining)\n-     * @throws NullPointerException if the array is <code>null</code>\n+     * @return the validated array (never {@code null} for method chaining)\n+     * @throws NullPointerException if the array is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(Object[], int)\n      */\n      *\n      * <pre>Validate.validIndex(myArray, 2);</pre>\n      *\n-     * <p>If the array is <code>null</code>, then the message of the exception\n+     * <p>If the array is {@code null}, then the message of the exception\n      * is &quot;The validated object is null&quot;.</p>\n      * \n      * <p>If the index is invalid, then the message of the exception is \n      * @param <T> the array type\n      * @param array  the array to check, validated not null by this method\n      * @param index  the index to check\n-     * @return the validated array (never <code>null</code> for method chaining)\n-     * @throws NullPointerException if the array is <code>null</code>\n+     * @return the validated array (never {@code null} for method chaining)\n+     * @throws NullPointerException if the array is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(Object[], int, String, Object...)\n      */\n      *\n      * <pre>Validate.validIndex(myCollection, 2, \"The collection index is invalid: \");</pre>\n      * \n-     * <p>If the collection is <code>null</code>, then the message of the \n+     * <p>If the collection is {@code null}, then the message of the \n      * exception is &quot;The validated object is null&quot;.</p>\n      *\n      * @param <T> the collection type\n      * @param index  the index to check\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n-     * @return the validated collection (never <code>null</code> for chaining)\n-     * @throws NullPointerException if the collection is <code>null</code>\n+     * @return the validated collection (never {@code null} for chaining)\n+     * @throws NullPointerException if the collection is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(Collection, int)\n      */\n      * @param <T> the collection type\n      * @param collection  the collection to check, validated not null by this method\n      * @param index  the index to check\n-     * @return the validated collection (never <code>null</code> for method chaining)\n-     * @throws NullPointerException if the collection is <code>null</code>\n+     * @return the validated collection (never {@code null} for method chaining)\n+     * @throws NullPointerException if the collection is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(Collection, int, String, Object...)\n      */\n      *\n      * <pre>Validate.validIndex(myStr, 2, \"The string index is invalid: \");</pre>\n      * \n-     * <p>If the character sequence is <code>null</code>, then the message \n+     * <p>If the character sequence is {@code null}, then the message \n      * of the exception is &quot;The validated object is null&quot;.</p>\n      *\n      * @param <T> the character sequence type\n      * @param index  the index to check\n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n-     * @return the validated character sequence (never <code>null</code> for method chaining)\n-     * @throws NullPointerException if the character sequence is <code>null</code>\n+     * @return the validated character sequence (never {@code null} for method chaining)\n+     * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(CharSequence, int)\n      */\n      * \n      * <pre>Validate.validIndex(myStr, 2);</pre>\n      *\n-     * <p>If the character sequence is <code>null</code>, then the message \n+     * <p>If the character sequence is {@code null}, then the message \n      * of the exception is &quot;The validated object is \n      * null&quot;.</p>\n      * \n      * @param <T> the character sequence type\n      * @param chars  the character sequence to check, validated not null by this method\n      * @param index  the index to check\n-     * @return the validated character sequence (never <code>null</code> for method chaining)\n-     * @throws NullPointerException if the character sequence is <code>null</code>\n+     * @return the validated character sequence (never {@code null} for method chaining)\n+     * @throws NullPointerException if the character sequence is {@code null}\n      * @throws IndexOutOfBoundsException if the index is invalid\n      * @see #validIndex(CharSequence, int, String, Object...)\n      */\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the stateful condition is <code>true</code>; otherwise \n+     * <p>Validate that the stateful condition is {@code true}; otherwise \n      * throwing an exception. This method is useful when validating according \n      * to an arbitrary boolean expression, such as validating a \n      * primitive number or using your own custom validation expression.</p>\n      * false&quot;.</p>\n      * \n      * @param expression  the boolean expression to check \n-     * @throws IllegalStateException if expression is <code>false</code>\n+     * @throws IllegalStateException if expression is {@code false}\n      * @see #validState(boolean, String, Object...)\n      */\n     public static void validState(boolean expression) {\n     }\n \n     /**\n-     * <p>Validate that the stateful condition is <code>true</code>; otherwise \n+     * <p>Validate that the stateful condition is {@code true}; otherwise \n      * throwing an exception with the specified message. This method is useful when\n      * validating according to an arbitrary boolean expression, such as validating a \n      * primitive number or using your own custom validation expression.</p>\n      * @param expression  the boolean expression to check \n      * @param message  the {@link String#format(String, Object...)} exception message if invalid, not null\n      * @param values  the optional values for the formatted exception message, null array not recommended\n-     * @throws IllegalStateException if expression is <code>false</code>\n+     * @throws IllegalStateException if expression is {@code false}\n      * @see #validState(boolean)\n      */\n     public static void validState(boolean expression, String message, Object... values) {\n--- a/src/main/java/org/apache/commons/lang3/builder/Builder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/Builder.java\n  * \n  * <p>\n  * It is a recommended practice that the methods supplied to configure the \n- * object or result being built return a reference to <code>this</code> so that\n+ * object or result being built return a reference to {@code this} so that\n  * method calls can be chained together.\n  * </p>\n  * ", "timestamp": 1299254834, "metainfo": ""}