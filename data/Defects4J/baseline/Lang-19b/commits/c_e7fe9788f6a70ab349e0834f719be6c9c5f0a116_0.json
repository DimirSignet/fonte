{"sha": "e7fe9788f6a70ab349e0834f719be6c9c5f0a116", "log": "Javadoc  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/FormattableUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/text/FormattableUtils.java\n import org.apache.commons.lang3.Validate;\n \n /**\n- * Provides utilities for working with {@link Formattable}s.\n+ * <p>Provides utilities for working with the {@code Formattable} interface.</p>\n+ * \n+ * <p>The {@link Formattable} interface provides basic control over formatting\n+ * when using a {@code Formatter}. It is primarily concerned with numeric precision\n+ * and padding, and is not designed to allow generalised alternate formats.</p>\n  * \n  * @since Lang 3.0\n  * @version $Id$\n  */\n public class FormattableUtils {\n \n+    /**\n+     * A format that simply outputs the value as a string.\n+     */\n     private static final String SIMPLEST_FORMAT = \"%s\";\n \n     /**\n-     * <p>{@link FormattableUtils} instances should NOT be constructed in\n+     * <p>{@code FormattableUtils} instances should NOT be constructed in\n      * standard programming. Instead, the methods of the class should be invoked\n      * statically.</p>\n      * \n         super();\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Get the default formatted representation of the specified\n-     * {@link Formattable}.\n+     * {@code Formattable}.\n      * \n-     * @param formattable to convert to a String\n-     * @return String\n+     * @param formattable  the instance to convert to a string, not null\n+     * @return the resulting string, not null\n      */\n     public static String toString(Formattable formattable) {\n         return String.format(SIMPLEST_FORMAT, formattable);\n     }\n \n     /**\n-     * Handles the common {@link Formattable} operations of truncate-pad-append,\n+     * Handles the common {@code Formattable} operations of truncate-pad-append,\n      * with no ellipsis on precision overflow, and padding width underflow with\n      * spaces.\n      * \n-     * @param seq to handle\n-     * @param formatter destination\n-     * @param flags for formatting\n-     * @param width of output\n-     * @param precision of output\n-     * @return {@code formatter}\n+     * @param seq  the string to handle, not null\n+     * @param formatter  the destination formatter, not null\n+     * @param flags  the flags for formatting, see {@code Formattable}\n+     * @param width  the width of the output, see {@code Formattable}\n+     * @param precision  the precision of the output, see {@code Formattable}\n+     * @return the {@code formatter} instance, not null\n      */\n     public static Formatter append(CharSequence seq, Formatter formatter, int flags, int width,\n             int precision) {\n      * Handles the common {@link Formattable} operations of truncate-pad-append,\n      * with no ellipsis on precision overflow.\n      * \n-     * @param seq to handle\n-     * @param formatter destination\n-     * @param flags for formatting\n-     * @param width of output\n-     * @param precision of output\n-     * @param padChar to use\n-     * @return {@code formatter}\n+     * @param seq  the string to handle, not null\n+     * @param formatter  the destination formatter, not null\n+     * @param flags  the flags for formatting, see {@code Formattable}\n+     * @param width  the width of the output, see {@code Formattable}\n+     * @param precision  the precision of the output, see {@code Formattable}\n+     * @param padChar  the pad character to use\n+     * @return the {@code formatter} instance, not null\n      */\n     public static Formatter append(CharSequence seq, Formatter formatter, int flags, int width,\n             int precision, char padChar) {\n      * Handles the common {@link Formattable} operations of truncate-pad-append,\n      * padding width underflow with spaces.\n      * \n-     * @param seq to handle\n-     * @param formatter destination\n-     * @param flags for formatting\n-     * @param width of output\n-     * @param precision of output\n-     * @param ellipsis to use when precision dictates truncation; a {@code null}\n-     * or empty value causes a hard truncation\n-     * @return {@code formatter}\n+     * @param seq  the string to handle, not null\n+     * @param formatter  the destination formatter, not null\n+     * @param flags  the flags for formatting, see {@code Formattable}\n+     * @param width  the width of the output, see {@code Formattable}\n+     * @param precision  the precision of the output, see {@code Formattable}\n+     * @param ellipsis  the ellipsos to use when precision dictates truncation, null or\n+     *  empty causes a hard truncation\n+     * @return the {@code formatter} instance, not null\n      */\n     public static Formatter append(CharSequence seq, Formatter formatter, int flags, int width,\n             int precision, CharSequence ellipsis) {\n     /**\n      * Handles the common {@link Formattable} operations of truncate-pad-append.\n      * \n-     * @param seq to handle\n-     * @param formatter destination\n-     * @param flags for formatting\n-     * @param width of output\n-     * @param precision of output\n-     * @param padChar to use\n-     * @param ellipsis to use when precision dictates truncation; a {@code null}\n-     * or empty value causes a hard truncation\n-     * @return {@code formatter}\n+     * @param seq  the string to handle, not null\n+     * @param formatter  the destination formatter, not null\n+     * @param flags  the flags for formatting, see {@code Formattable}\n+     * @param width  the width of the output, see {@code Formattable}\n+     * @param precision  the precision of the output, see {@code Formattable}\n+     * @param padChar  the pad character to use\n+     * @param ellipsis  the ellipsos to use when precision dictates truncation, null or\n+     *  empty causes a hard truncation\n+     * @return the {@code formatter} instance, not null\n      */\n     public static Formatter append(CharSequence seq, Formatter formatter, int flags, int width,\n             int precision, char padChar, CharSequence ellipsis) {\n         formatter.format(buf.toString());\n         return formatter;\n     }\n+\n }", "timestamp": 1304508149, "metainfo": ""}